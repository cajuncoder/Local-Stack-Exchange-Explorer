title,viewcount,title,body,body,acceptedanswerid
"How do I install a plugin in Vim/vi?","67163","","<p>How do I install a plugin in Vim?</p>

<p>Does it matter:</p>

<ul>
<li>Whether I use vi or Vim?</li>
<li>Whether I use gVim?</li>
<li>Which version of Vim I'm using?</li>
<li>What my OS is?</li>
</ul>
","<p>To install a plugin, we need to know what form it comes in. It can be:</p>

<ul>
<li>a single <code>.vim</code> file</li>
<li>a Vimball file</li>
<li>a set of files in directories that follow an expected structure (<code>plugin/*</code>, <code>syntax/*</code>, etc.) (<a href=""https://vi.stackexchange.com/questions/285/what-makes-a-plugin-vundle-compatible-and-are-other-plugin-managers-interchangea"">What makes a plugin Vundle compatible and are other plugin managers interchangeable?</a>)</li>
</ul>

<p>A single <code>.vim</code> file is supposed to be placed in the <code>.vim/plugin</code> directory.</p>

<p>A Vimball file <a href=""https://vi.stackexchange.com/questions/491/how-do-i-install-a-vimball-plugin"">can be installed</a> by opening it in Vim and running <a href=""http://vimhelp.appspot.com/repeat.txt.html#%3Asource"" rel=""noreferrer""><code>:source %</code></a>.</p>

<p>A set of files in the standard directory layout can be installed either by copying them to <code>.vim</code>, or using a <a href=""https://vi.stackexchange.com/questions/388/what-is-the-difference-between-the-vim-package-managers"">plugin package manager</a>.</p>

<p>Plugins may depend on certain features. Therefore:</p>

<ul>
<li>It may matter if you're using Vi or Vim,</li>
<li>It may matter if you're using gVim or not (gVim typically has more features enabled while compile time than Vim on the same distribution).</li>
<li>It may matter which version of Vim you're on, since a feature may have been added after your version of Vim.</li>
<li>It may matter which OS you're on, especially if the plugin calls in external commands.</li>
</ul>

<p>For most plugins, though, it may not matter.</p>
","614"
"How can I copy text to the system clipboard from Vim?","58941","","<p>Is there a way to copy a block of text to the system clipboard, so I can paste it in another program?</p>
","<p>For <strong>X11</strong>-based systems (ie. <strong>Linux</strong> and most other <strong>UNIX</strong>-like systems)
there are two clipboards which are independent of each other:</p>

<ul>
<li>PRIMARY - This is copy-on-select, and can be pasted with the middle mouse
button.</li>
<li>CLIPBOARD - This is copied with (usually) <code>^C</code>, and pasted with <code>^V</code> (It's
like MS Windows).</li>
</ul>

<p><strong>OS X</strong> and <strong>Windows</strong> systems only have 1 clipboard.</p>

<p>For X11 systems there are also number of tools that synchronize these clipboards
for you; so if they appear to be the same, you may have one of them running.</p>

<p>Vim has 2 special registers corresponding to these clipboards:</p>

<ul>
<li><code>*</code> uses PRIMARY; mnemonic: <strong>s</strong>tar is <strong>s</strong>elect (for copy-on-<strong>s</strong>elect)</li>
<li><code>+</code> uses CLIPBOARD; mnemonic: CTRL <strong>+</strong> C (for the common keybind)</li>
</ul>

<p>On Windows &amp; OS X there is no difference between <code>+</code> and <code>*</code>, since these systems
only have a single clipboard, and both registers refer to the same thing (it
doesn't matter which one you use).</p>

<p>You can use these registers as any register. For example, using the PRIMARY
clipboard <code>*</code> with the <code>y</code> and <code>p</code> commands:</p>

<ul>
<li><code>""*yy</code></li>
<li><code>""*p</code></li>
</ul>

<p>You could maybe use this as more convenient keybinds:</p>

<pre><code>noremap &lt;Leader&gt;y ""*y
noremap &lt;Leader&gt;p ""*p
noremap &lt;Leader&gt;Y ""+y
noremap &lt;Leader&gt;P ""+p
</code></pre>

<p>If you want to ""automatically"" interface with the system's clipboard instead of
referring to it manually all the time, you can set the <code>clipboard</code> variable:</p>

<ul>
<li>Set it to <code>unnamed</code> to use <code>*</code> (PRIMARY, on select)</li>
<li>Set it to <code>unnamedplus</code> to use <code>+</code> (CLIPBOARD, <code>^C</code>)</li>
</ul>

<p>Now, just using <code>yy</code> will go to the system's clipboard, instead of Vim's unnamed
register, and <code>p</code> will paste the system's clipboard.</p>

<p>You can also assign to these registers just like any register with <code>let</code>:</p>

<ul>
<li><code>:let @+=42</code></li>
<li><code>:let @*=42</code></li>
</ul>

<p>The <code>clipboard</code> setting has some more options (such as exclude filters); but
these are the basics. See <code>:help 'clipboard'</code> for the full story ;-)</p>

<h1>gVim</h1>

<p>If you use gVim, you can get copy-on-select behaviour when using
<code>:set guioptions+=a</code>.<br>
This is enabled by default on X11 systems (copies to PRIMARY), but <em>not</em> on MS
Windows &amp; OSX (as selecting any text would override your clipboard).</p>

<h1>No <code>+clipboard</code>?</h1>

<p>Vim requires the <code>+clipboard</code> feature flag for any of this to work; you can
check if your Vim has this by using <code>:echo has('clipboard')</code> from within Vim (if the
output is <code>0</code>, it <em>not</em> present, if it's <code>1</code>, it is), or checking the output of
<code>vim --version</code>.</p>

<p>Most Linux distributions ship with a ""minimal"" Vim build by default, which
doesn't have <code>+clipboard</code>, but you can usually install it:</p>

<ul>
<li>Debian &amp; Ubuntu: Install <code>vim-gtk</code> or <code>vim-gnome</code>.</li>
<li>Fedora: install <code>vim-X11</code>, and run <code>vimx</code> instead of <code>vim</code> (<a href=""https://vi.stackexchange.com/q/2063/51"">more info</a>).</li>
<li>Arch Linux: install <code>gvim</code> (this will enable <code>+clipboard</code> for normal <code>vim</code> as well).</li>
</ul>

<p>You could also use <code>xclip</code>, <code>xcopy</code>, or <code>xsel</code> to copy text to the clipboard;
see the following questions for solutions:</p>

<ul>
<li><a href=""https://vi.stackexchange.com/questions/332/define-custom-commands-for-the-and-registers"">Define custom commands for the * and + registers</a></li>
<li><a href=""https://vi.stackexchange.com/q/8354/51"">How can I copy over an ssh session without +clipboard?</a></li>
</ul>

<h1>SSH</h1>

<p>You can also use a clipboard on remote machines if you enable X11 forwarding
over SSH. This is especially useful with the above tip since you can then use
<code>xclip</code> to access your desktop's clipboard. The Vim on the machine you're
ssh-ing to will still need the <code>+clipboard</code> feature.</p>

<p>This requires the <code>ForwardX11Trusted</code> setting, and should <strong>only be
done with trusted servers</strong>, as this gives the server almost complete control
over your X11 session:</p>

<pre><code>$ ssh -XY myhost
</code></pre>

<p>To make these settings persistent (so you don't need to add <code>-XY</code> every time),
you could  do something like this in your <code>~/.ssh/config</code>:</p>

<pre><code># Do **NOT** set this globally; it gives the server complete control over
# your X11 session.
Host myhost
    ForwardX11 yes
    ForwardX11Trusted yes
</code></pre>

<h1>Neovim</h1>

<p>Neovim revamped the clipboard support. The built-in interface was removed and
replaced with a system that call an external utility such as <code>xclip</code>, <code>xsel</code>, or
<code>pbcopy</code>/<code>pbpaste</code>.</p>

<p>It should automatically pick up these utilities and use them. On OS X <code>pbcopy</code>
and <code>pbpaste</code> should be available by default, on Linux you probably want to
install <code>xclip</code>, as that's the most widely available (there are actually <em>two</em>
versions of <code>xsel</code> with <em>incompatible flags</em>. This is really stupid).</p>

<p>Also see <a href=""https://neovim.io/doc/user/provider.html#clipboard"" rel=""nofollow noreferrer""><code>:help clipboard</code></a> in Neovim.</p>
","96"
"Why doesn't the backspace key work in insert mode?","54914","","<p>Trying to delete characters in insert mode with the <kbd>backspace</kbd> key sometimes doesn't seem to work. I can <kbd>backspace</kbd> <em>sometimes</em>, but at other times it does nothing; the cursor doesn't go to the left, and absolutely nothing seems to happen.</p>

<p>I noticed this using gVim in Windows.
The <kbd>backspace</kbd> seems to work as expected while using Vim from the terminal in most Linux systems however.</p>

<ol>
<li>Why does this happen?</li>
<li>How can I make the <kbd>backspace</kbd> key delete characters as usual?</li>
<li>Is this behaviour intended as a feature? In other words: are there better alternatives to the <kbd>backspace</kbd> to delete characters in insert mode?</li>
</ol>
","<p>tl;dr: Add this to your vimrc to make the backspace work like in most other programs:</p>

<pre><code>set backspace=indent,eol,start
</code></pre>

<hr>

<h1>Longer answer</h1>

<p>Though the default behaviour may be surprising, the backspace ""not working"" can be considered a <em>feature</em>; it can prevents you from accidentally removing indentation, and from removing too much text by restricting it to the current line and/or the start of the insert.</p>

<p><a href=""http://vimhelp.appspot.com/options.txt.html#%27backspace%27"" rel=""nofollow noreferrer""><code>:help 'backspace'</code></a> tells us:</p>

<pre><code>Influences the working of `&lt;BS&gt;`, `&lt;Del&gt;`, `CTRL-W` and `CTRL-U` in Insert
mode.  This is a list of items, separated by commas.  Each item allows
a way to backspace over something:

value     effect
indent    allow backspacing over autoindent
eol       allow backspacing over line breaks (join lines)
start     allow backspacing over the start of insert; CTRL-W and CTRL-U
          stop once at the start of insert.
</code></pre>

<p>So what do these values mean exactly?</p>

<p><strong>indent</strong><br>
Vim adds automatic indentation for many filetypes; by default, you're <em>not</em>
allowed to backspace over this; the rules of what is considered to be
'autoindentation' are somewhat subtle, for example, if we would type this (where
█ is the cursor):</p>

<pre><code>if :; then
    █
</code></pre>

<p>Backspacing won't work.</p>

<p>But if we would then add a command and the <code>fi</code>, and go back up, we <em>are</em>
allowed to remove the indentation:</p>

<pre><code>if :; then
    █:
fi
</code></pre>

<p>This is because in the first example, Vim determined it should add 1 level of indentation when you pressed Enter; but in the second example, Vim didn't autoindent anything, it's just Tab characters or a few spaces.</p>

<p>Also see <a href=""http://vimhelp.appspot.com/options.txt.html#%27autoindent%27"" rel=""nofollow noreferrer""><code>:help 'autoindent'</code></a></p>

<p><strong>eol</strong><br>
This should be the most obvious, pressing Backspace also removes EOL
markers (<code>\n</code> or <code>\r\n</code>); if disabled, Backspace will do nothing if you try to
delete a EOL marker.</p>

<p><strong>start</strong><br>
This means you can <em>only</em> delete text that you've inserted since insert mode
started, and you can't delete any text that was previously inserted.</p>

<h2>So what's the default setting?</h2>

<blockquote>
  <p>I noticed this using GVIM in windows. The backspace seems to work as expected while using VIM from the terminal in most Linux systems however.</p>
</blockquote>

<p>The reason for this is because many Linux distro's ship with pre-made vimrc files which set some common options. For example on my Arch Linux system I have <code>/usr/share/vim/vimfiles/archlinux.vim</code> with:</p>

<pre><code>set nocompatible
set backspace=indent,eol,start
"" ... and a few more...
</code></pre>

<p>If you install Vim on Windows, the default is to use the default vimrc and gvimrc that Vim ships with.</p>

<p>The <em>Vim</em> default is an empty value for <code>backspace</code>. The Arch Linux, Debian, CentOS, or <code>$other_distro</code> default may be different.</p>

<h1>Normal mode</h1>

<p>This question is about Backspace in insert mode, but let me also add some brief remarks about Backspace in normal mode.</p>

<p>In normal mode, the Backspace acts as <code>h</code>, it just goes to the left. </p>

<p>By default, the backspace will go to the previous line if at the start of a line (as if <code>eol</code> was in <code>backspace</code>); you can control this behaviour with the <a href=""http://vimhelp.appspot.com/options.txt.html#%27ww%27"" rel=""nofollow noreferrer""><code>'whichwrap'</code></a> option  through the <code>b</code> flag (enabled by default).</p>

<p>You can also make backspace delete characters by mapping it to the <code>X</code> command:</p>

<pre><code>nnoremap &lt;BS&gt; X
</code></pre>
","2163"
"What is the difference between the vim plugin managers?","53943","","<p>I have been looking at the different package managers for vim and the one I decided to use <a href=""https://github.com/junegunn/vim-plug"">vim-plug</a> but I have seen others like <a href=""https://github.com/tpope/vim-pathogen"">pathogen</a> and <a href=""https://github.com/gmarik/Vundle.vim"">vundle</a> and I honestly don't know what the difference is.</p>

<p>Can someone give me a brief overview of the differences so I can decide which works best for me?</p>
","<p><a href=""https://github.com/junegunn/vim-plug"">vim-plug</a> is a nice alternative to Vundle, it does things a bit different from a technical point of view which should make it faster (<a href=""http://junegunn.kr/2013/09/writing-my-own-vim-plugin-manager/"">see this</a>). It has most (or all?) of the features of Vundle.</p>

<ul>
<li>Parallel update procedure for Vim with any of <code>+ruby</code>, <code>+python</code>, or Neovim. Falls back to sequential mode using Vimscript if none is available.</li>
<li>Lazy loading, for faster startup (<a href=""http://junegunn.kr/2014/07/vim-plugins-and-startup-time/"">see this</a>).</li>
<li>Install plugins.</li>
<li>Update plugins.</li>
<li>Review / rollback updates.</li>
<li>Supports OSX, Linux &amp; UNIX systems, and MS Windows.</li>
<li>Post-update hooks e.g. automatically recompile YCM</li>
</ul>

<p>To start using it:</p>

<pre><code>curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre>

<p>And in your vimrc:</p>

<pre><code>call plug#begin()
Plug 'tpope/vim-sensible'

"" On-demand loading
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
call plug#end()
</code></pre>
","397"
"What's the simplest way to strip trailing whitespace from all lines in a file?","48164","","<p>It's pretty common when programming or opening text files to encounter files with trailing whitespace at the end of a line. vim has a way to show this by setting the <code>trail</code> option in the <code>listchars</code> option and then turning <code>list</code> on.</p>

<p>However, what's the easiest way to eliminate that trailing whitespace globally across the whole of a file (ideally without a plugin)?</p>
","<h2>Use a keybinding to strip all trailing whitespace</h2>

<p>Since some pages that I edit actually need trailing whitespaces (e.g. markdown) and others don't, I set up a keybinding to <kbd>F5</kbd> so that it's trivial to do without being automatic. To do so, add the <a href=""http://vim.wikia.com/wiki/Remove_unwanted_spaces#Simple_commands_to_remove_unwanted_whitespace"" rel=""noreferrer"">code below (from vim.wikia)</a> or some variation of it to your <code>.vimrc</code>:</p>

<pre><code>""Remove all trailing whitespace by pressing F5
nnoremap &lt;F5&gt; :let _s=@/&lt;Bar&gt;:%s/\s\+$//e&lt;Bar&gt;:let @/=_s&lt;Bar&gt;&lt;CR&gt;
</code></pre>

<ul>
<li><code>nnoremap &lt;F5&gt;</code> does a nonrecursive mapping to the key <code>F5</code> in normal mode  </li>
<li><code>:let _s=@/</code> stores the last search term (from the macro <code>@/</code>) in the variable <code>_s</code></li>
<li><code>&lt;Bar&gt;</code> Functions as a pipe symbol <code>|</code> to separate commands, however <code>|</code> would end a command in this context, so <code>&lt;Bar&gt;</code> must be used instead.</li>
<li><code>:%s/\s\+$//e</code> searches for trailing whitespace and deletes it everywhere in the buffer (see <a href=""https://vi.stackexchange.com/a/456/1111"">CarpetSmoker's answer</a> for a detailed breakdown of this expression)</li>
<li><code>let @/=_s</code> restores your last search term to the macro <code>@/</code>, so that it will be available the next time you hit <code>n</code>.</li>
<li><code>&lt;CR&gt;</code> ends the mapping</li>
</ul>

<hr>

<h2>... or be more selective</h2>

<p>If you have cases in which you don't want to strip all of the trailing whitespace, you can use a pattern to be more selective. For example, the following code shows how I strip trailing whitespace only if it comes after a semicolon (here it's tied to <kbd>F8</kbd>).</p>

<pre><code>nnoremap &lt;F8&gt; :let _s=@/&lt;Bar&gt;:%s/;\s\+$/;/e&lt;Bar&gt;:let @/=_s&lt;Bar&gt;&lt;CR&gt;
</code></pre>

<p>This is useful if, like me, you have some files with markdown-like <a href=""https://en.wikipedia.org/wiki/Here_document"" rel=""noreferrer"">heredocs</a> interspersed among semicolon-terminated programming statements. </p>
","2285"
"How to replace tabs with spaces?","40666","","<p>Is it possible to convert tabs to spaces, while maintaining text alignment?</p>

<p>Simply replacing only works usefully when there are no leading characters.</p>
","<p>You can use the <code>:retab</code> command. From 
<a href=""http://vimhelp.appspot.com/change.txt.html#%3Aretab""><code>:help :retab</code></a></p>

<blockquote>
  <p>Replace all sequences of white-space containing a <code>&lt;Tab&gt;</code> with new strings of
  white-space using the new tabstop value given.  If you do not specify a new
  tabstop size or it is zero, Vim uses the current value of <code>'tabstop'</code>.
  [...]
  With <code>'expandtab'</code> on, Vim replaces all tabs with the appropriate number of
  spaces.</p>
</blockquote>

<p>Note that the command accepts a range, so you can make a visual selection and
then just <code>:retab</code> the selected lines.</p>
","496"
"Is it possible to have vim auto-complete function names, variables, etc. when using it to program?","37017","","<p>Many IDEs automatically complete function names, variables, method names, etc. as the user types. The best ones complete the names based both on the language's built-in library as well as what has already been defined in other files of the same program.</p>

<p>For example, as I'm typing the following Python program:</p>

<pre><code>hungy = True

def eatFood(food):
    pass

if hungry:
    eatF
</code></pre>

<p>the line <code>eatF</code> would automatically show <code>eatFood()</code> as an available auto-complete option.</p>

<p>Does Vim have this capability? If so, how can I enable it?</p>
","<p>There are many different flavors of autocomplete in vim. One way might be to use <a href=""https://github.com/ervandew/supertab"" rel=""noreferrer"">SuperTab</a>. This provides a way to use tab-completion at more or less any time. This would enable you to hit <kbd>Tab</kbd> after you've partially typed the word to get a completion list. For instance, typing <code>eatF</code> followed by <kbd>Tab</kbd> to expand to <code>eatFood.</code></p>

<p><strong>Please Note</strong>: these pictures all link to example gifs in action.</p>

<p><a href=""https://i.stack.imgur.com/kKbAz.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/dVuOT.png"" alt=""supertab completions"" title=""Click to see a gif""></a></p>

<p>Vim has excellent other options. You should read <code>:h ins-completion</code> to see the variety of built-in completion options. Using vim's <kbd>Ctrl</kbd>-<kbd>X</kbd><kbd>Ctrl</kbd>-<kbd>O</kbd>, combined with a python-aware plugin like <a href=""https://github.com/davidhalter/jedi"" rel=""noreferrer"">jedi</a> can give a completion flavor. Jedi can be configured to give documentation on omni-completion (this is what <kbd>Ctrl</kbd>-<kbd>X</kbd><kbd>Ctrl</kbd>-<kbd>O</kbd> does). Then documentation for the completion candidates would appear in a split window.</p>

<p><a href=""https://i.stack.imgur.com/KlAjl.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/etSIu.png"" alt=""ctrlxctrlo completion"" title=""Click to see a gif""></a></p>

<p>Using similar plugins but different options leads to all sorts of behaviours. It's possible, for instance, to not need to prompt for autocompletion (if that's what you're after). Instead, after you type some number of letters (say, 2 or 3) of a word, a plugin can try to intelligently offer possible completions in a menu.</p>

<p><a href=""https://i.stack.imgur.com/9QnR9.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/gtNK0.png"" alt=""enter image description here"" title=""Click to see a gif""></a></p>

<p>So the short answer is a <strong>yes!</strong> But the configuration process can be a bit complicated. I think of it as a step in the long stairway of mastering vim.</p>
","190"
"Find and replace using regular expressions","33464","","<p>I have a file with a bunch of user defaults in. I want to change some of the text, but I'm struggling coming up with a matcher and replacer. Using the following example:</p>

<pre><code>###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
</code></pre>

<p>I'd like to replace <code># Trackpad: ...</code> with <code>running ""Trackpad: ...""</code></p>

<p>Breaking the problem down, I came up with something using a regex tester:</p>

<pre><code>/\n\n#\s(.*)/g
</code></pre>

<p>If I try and use this in Vim it doesn't work for me:</p>

<pre><code>:/\n\n#\s(.*)/running ""\1""/g
</code></pre>

<p>I guess my problem boils down to two specific questions:</p>

<ol>
<li>How can I avoid searching for <code>\n</code> characters, and instead make sure <code>#</code> doesn't appear at the end of the search group?</li>
<li>How can I effectively use capture groups?</li>
</ol>

<hr>

<p>There are some great answers below. Hard to choose between all three, however I feel the chosen answer is the most accurate for my original spec. I recommend you try all three answers with the <a href=""https://github.com/squarefrog/dotfiles/blob/f4c5607f1826e85b55fb58e9c81b474a3f67ce91/osx/setup_defaults.sh"">actual file</a> to see how you feel about them.</p>
","<p>Just to be clear… I believe you asked for this to be the result of the substitution?</p>

<pre><code>###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

running ""Trackpad: enable tap to click for this user and for the login screen""
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
</code></pre>

<p>In that case, I recommend the following command:</p>

<p><code>:%s/\n\n#\s+(.*)/<b><i>^M^M</i></b>running ""\1""/</code></p>

<h3>Explanation of the pattern</h3>

<p><code>:s/<i>PATTERN</i>/<i>REPLACEMENT</i>/</code> is the <a href=""https://vimhelp.appspot.com/change.txt.html#%3Asubstitute"">substitute</a> command.  The percent sign in <code>:%s</code> makes it work on the whole file, rather than just the current line.</p>

<p>The <code>\n\n</code> says that the line of interest must occur after a blank line.  If you didn't care about the preceding blank line, then <code>^</code> would suffice.</p>

<p><code>#\s\+</code> matches a hash character followed by one or more whitespace characters.  <code>\(.*\)</code> captures all subsequent text on the line.</p>

<h3>Explanation of the replacement text</h3>

<p><code><b><i>^M^M</i></b></code> inserts two ends of lines to replace the <code>\n\n</code> that were present in the pattern.  Otherwise, the text would get moved to the end of the line preceding the blank line.  To type each <code><b><i>^M</i></b></code>, press <kbd>Ctrl-V</kbd> <kbd>Ctrl-M</kbd>.</p>

<p>Then, insert the string <code>running</code>, followed by whatever was captured in the parentheses within double-quotes.</p>
","3126"
"How to edit binary files with Vim?","31741","","<p>Is there a way to edit binary files in some kind of hexadecimal mode?</p>

<p>For example if I have some binary data shown by <code>xxd</code> or <code>hexdump -C</code> like this:</p>

<pre><code>$ hexdump -C a.bin | head -n 5
00000000  cf fa ed fe 07 00 00 01  03 00 00 80 02 00 00 00  |................|
00000010  12 00 00 00 40 05 00 00  85 00 20 00 00 00 00 00  |....@..... .....|
00000020  19 00 00 00 48 00 00 00  5f 5f 50 41 47 45 5a 45  |....H...__PAGEZE|
00000030  52 4f 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |RO..............|
00000040  00 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|

$ xxd a.bin | head -n 5
0000000: cffa edfe 0700 0001 0300 0080 0200 0000  ................
0000010: 1200 0000 4005 0000 8500 2000 0000 0000  ....@..... .....
0000020: 1900 0000 4800 0000 5f5f 5041 4745 5a45  ....H...__PAGEZE
0000030: 524f 0000 0000 0000 0000 0000 0000 0000  RO..............
0000040: 0000 0000 0100 0000 0000 0000 0000 0000  ................
</code></pre>

<p>If I want to change the value at a specific position,
this kind of view will help finding the right place,
for example when the position to change is near some known string.</p>
","<p>The simplest way is to use the <code>binary</code> option. From <code>:help binary</code>:</p>

<pre><code>This option should be set before editing a binary file.  You can also
use the -b Vim argument.  When this option is switched on a few
options will be changed (also when it already was on):
        'textwidth'  will be set to 0
        'wrapmargin' will be set to 0
        'modeline'   will be off
        'expandtab'  will be off
Also, 'fileformat' and 'fileformats' options will not be used, the
file is read and written like 'fileformat' was ""unix"" (a single &lt;NL&gt;
separates lines).
The 'fileencoding' and 'fileencodings' options will not be used, the
file is read without conversion.

[...]

When writing a file the &lt;EOL&gt; for the last line is only written if
there was one in the original file (normally Vim appends an &lt;EOL&gt; to
the last line if there is none; this would make the file longer).  See
the 'endofline' option.
</code></pre>

<p>If you don't do this, and your environment is using a multibyte encoding (e.g. UTF-8, as most people use), Vim tries to encode the text as such, usually leading to file corruption.</p>

<p>You can verify this by opening a file, and just using <code>:w</code>. It is now changed.<br>
If you set <code>LANG</code> and <code>LC_ALL</code> to <code>C</code> (ASCII), Vim doesn't convert anything and the files stay the same (it still adds a newline, though) since Vim won't need
to do any multibyte encoding.</p>

<p>I personally also prefer to <em>disable</em> <code>set wrap</code> for binary, although others
might prefer to <em>enable</em> it. YMMV.
Another useful thing to do is <code>:set display=uhex</code>. From <code>:help 'display'</code>:</p>

<pre><code>uhex            Show unprintable characters hexadecimal as &lt;xx&gt;
                instead of using ^C and ~C.
</code></pre>

<p>And as a last tip, you can show the hex value of the character under the cursor
in the ruler with <code>%B</code> (<code>:set rulerformat=0x%B</code>).</p>

<h1>More advanced: <code>xxd</code></h1>

<p>You can use the <code>xxd(1)</code> tool to convert a file to more readable format, and
(this is the important bit), parse the edited ""readable format"" and write it back as binary data. <code>xxd</code> is part of <code>vim</code>, so if you have <code>vim</code> installed you should also have <code>xxd</code>.</p>

<p>To use it:</p>

<pre><code>$ xxd /bin/ls | vi -
</code></pre>

<p>Or if you've already opened the file, you can use:</p>

<pre><code>:%!xxd
</code></pre>

<p>Now make your changes, you need to do that on the left-hand side of the display
(the hex numbers), changes to the right-hand side (printable representation)
are ignored on write.</p>

<p>To save it, use <code>xxd -r</code>:</p>

<pre><code>:%!xxd -r &gt; new-ls
</code></pre>

<p>This will save the file to <code>new-ls</code>.</p>

<p>Or to load the binary in the current buffer:</p>

<pre><code>:%!xxd -r
</code></pre>

<p>From <code>xxd(1)</code>:</p>

<pre><code>   -r | -revert
          reverse operation: convert (or patch) hexdump into  binary.   If
          not  writing  to stdout, xxd writes into its output file without
          truncating it. Use the combination -r -p to read plain hexadeci‐
          mal dumps without line number information and without a particu‐
          lar column layout. Additional  Whitespace  and  line-breaks  are
          allowed anywhere.
</code></pre>

<p>And then just use <code>:w</code> to write it. (<strong>beware</strong>: you want to set the <code>binary</code>
option before you write to the file, for the same reasons outline above).</p>

<p>Complementary keybinds to make this a bit easier:</p>

<pre><code>"" Hex read
nmap &lt;Leader&gt;hr :%!xxd&lt;CR&gt; :set filetype=xxd&lt;CR&gt;

"" Hex write
nmap &lt;Leader&gt;hw :%!xxd -r&lt;CR&gt; :set binary&lt;CR&gt; :set filetype=&lt;CR&gt;
</code></pre>

<p>This is also available from the menu if you're using gVim, under 'Tools -> Convert to HEX' and 'Tools -> Convert back'.</p>

<p>The <a href=""http://vim.wikia.com/wiki/VimTip1518"">vim tips wiki</a> has a page with more
information and some helper scripts. Personally, I think you're probably better
off using a real hex editor if you're editing binary files that often. Vim <em>can</em>
sort of do the job, but it's obviously not designed for it, and if you ever write without <code>:set binary</code> Vim might destroy your binary files.<br>
There's <a href=""http://bvi.sourceforge.net/index.html""><code>bvi</code></a>, which is a <code>vi</code>-like hex
editor, but I personally consider <a href=""http://home.gna.org/bless/"">bless</a> (not
<code>vi</code>-like) to be the best one out of the 10+ hex editors that I tried...</p>
","345"
"How do I fix the status bar symbols in the Airline plugin?","26935","","<p>I installed the <a href=""https://github.com/bling/vim-airline"" rel=""nofollow noreferrer""><strong>Airline</strong></a> plugin in order to have a custom status bar, as seen in the figure below:</p>

<p><img src=""https://i.stack.imgur.com/ehqwL.gif"" alt=""Enter image description here""></p>

<p>However, my status bar is presenting the symbols <kbd>&lt;</kbd>, <kbd>>></kbd> and <kbd>&lt;</kbd>. How do I fix this problem?</p>

<p><img src=""https://i.stack.imgur.com/fTd5U.png"" alt=""Enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/StcxB.png"" alt=""Enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/pCaOC.png"" alt=""Enter image description here""></p>
","<p>Actually I don't understand why your question is voted down. Honestly at first I too didn't understand what to need to be done to get this nice looking toolbar. Yes I know about README and other stuff, but I think it should be <code>getting started</code> or <code>minimum settings</code> sections in the help file.</p>

<p>Anyway here are settings.</p>

<h3>Installing appropriate fonts</h3>

<p>You need to install fonts into your system with that symbols like branching, big triangles etc. They are not standard symbols so you need to install patched font. You can find a lot of patched fonts here <a href=""https://github.com/powerline/fonts"">https://github.com/powerline/fonts</a>.</p>

<h3>.vimrc settings</h3>

<p>Place this code into your .vimrc file:<br/></p>

<pre><code>"" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

"" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

"" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
</code></pre>

<p><code>Unicode symbols</code> section actually unnecessary here if you have already patched font but it give you a nice fallback if you try to use other font which doesn't have appropriate symbols.</p>

<h3>Font settings</h3>

<p>If you use vim in terminal you should install that font in the terminal, or if you use gui-version of vim (MacVim, GVim) you need to set font in <code>.vimrc</code>, for example: <code>set guifont=DejaVu\ Sans:s12</code>. More information you can find here <code>:help guifont</code></p>
","3363"
"Is it possible to split Vim window to view multiple files at once?","25147","","<p>When working with multiple files, it would be very handy if we can see more than one file in the screen at once. Is there any way in Vim to split the window (horizontally or vertically) so each split can show a different file?</p>
","<p>Yes, vim has the ability to split both horizontally using <code>:split</code> and vertically using <code>:vsplit</code> which both work just like <code>:edit</code> for opening a file, except they open it in a horizontal / vertical split respectively.</p>

<p>Additionally, I would recommend to also read <code>:h window-move-cursor</code> for moving around different splits with ease.</p>
","73"
"How can I see the full path of the current file?","24892","","<p>When I'm editing a file in Vim, is there a command to see the path of the current file? Sometimes this is very handy if there are multiple files with the same name in a project.</p>
","<p>You can press <kbd>1</kbd> followed by <kbd>Ctrl</kbd>+<kbd>G</kbd> to see the full path of the current file. </p>

<p>(Pressing only <kbd>Ctrl</kbd>+<kbd>G</kbd> shows the path relative to Vim's current working directory, as pointed out by Jasper in the comments.)</p>

<p>You can use the following command in your <code>.vimrc</code> to add the full path to the status line, so it is always visible:</p>

<pre><code>set statusline+=%F
</code></pre>
","105"
"How do I change the current split's width and height?","23397","","<p>I am working on split (using ^w+v, ^w+s) buffers, but sometimes I would like to widen a current split or change its height. How can I achieve that?</p>
","<p>There are several window commands that allow you to do this:</p>

<ul>
<li><kbd>Ctrl+W</kbd> <kbd>+/-</kbd>: increase/decrease height (ex. <code>20&lt;C-w&gt;+</code>)</li>
<li><kbd>Ctrl+W</kbd> <kbd>>/&lt;</kbd>: increase/decrease width (ex. <code>30&lt;C-w&gt;&lt;</code>)</li>
<li><kbd>Ctrl+W</kbd> <kbd>_</kbd>: set height (ex. <code>50&lt;C-w&gt;_</code>)</li>
<li><kbd>Ctrl+W</kbd> <kbd>|</kbd>: set width (ex. <code>50&lt;C-w&gt;|</code>)</li>
<li><kbd>Ctrl+W</kbd> <kbd>=</kbd>: equalize width and height of all windows</li>
</ul>

<p>See also: <code>:help CTRL-W</code></p>
","515"
"Other ways to exit Insert mode besides Escape","21514","","<p>The primary reason I like vim over emacs is that my hand movement distance away from the home row is very low (even as a programmer). However, the one main time that I do this is leaving insert mode, by pressing Escape.</p>

<p>I recently learned that I can use Ctrl+C to leave insert mode as well. However, this isn't really an improvement.</p>

<p>How can I exit insert mode without having my hands leave the home row, and without massively impacting what I have the ability to type? Note: I use a mostly vanilla vim with a dvorak keyboard layout, though I'd love to hear solutions for a qwerty layout as well.</p>
","<p>A common binding you'll see is <strong>jj</strong>, because it works well for QWERTY layouts if you use home row positioning.</p>

<pre><code>inoremap jj &lt;ESC&gt;
</code></pre>

<p>In that case, to type a literal <code>jj</code> - you should wait for 1 sec (by default) between typing the second character. (see <a href=""http://vimhelp.appspot.com/options.txt.html#%27timeout%27"" rel=""noreferrer""><code>:help 'timeout'</code></a> for details) </p>

<p>There is also <code>c-o</code> which will take you out of insert, letting you do <strong>one</strong> normal command, and then put you right back into insert.</p>

<p><a href=""http://vim.wikia.com/wiki/Avoid_the_escape_key"" rel=""noreferrer"">http://vim.wikia.com/wiki/Avoid_the_escape_key</a></p>
","301"
"How can I change the font size in gVim?","20871","","<p>Is there a way to change the size of the font in gVim, using native commands?</p>

<p>And if not, what script can be used to do it quickly?</p>
","<p>Set the <code>guifont</code> option in your <code>.gvimrc</code>. See <code>:help guifont</code> and <code>:help setting-guifont</code>. </p>

<p>Specifically, you can do something like: <code>set guifont=Consolas:h11</code> to use 11-point Consolas in gvim on Windows. There are a few other options you can use (each separated with a <code>:</code>), such as <code>:b</code> for bold, although some of these are only available on certain platforms.</p>

<p>The <code>:h</code> option to set the font size as demonstrated is probably the most useful, and the one specifically related to changing the <em>size</em> of the font, as you requested.</p>
","3094"
"How do I configure the Vim airline plugin to look like its own project screenshot?","20847","","<p>I am trying to get the <a href=""http://vimawesome.com/plugin/vim-airline-sad-beautiful-tragic"" rel=""nofollow noreferrer"">vim-airline</a> up and running.</p>

<p>I have required it via vundle in my <code>~./vimrc</code>:</p>

<pre><code>Plugin 'bling/vim-airline'
</code></pre>

<p>I have installed it and expected my Vim to look like the screenshot its project page:</p>

<p><img src=""https://i.stack.imgur.com/fr5SC.png"" alt=""Expected Vim theme""></p>

<p>Yet it looks like this:</p>

<p><img src=""https://i.stack.imgur.com/iZPE1.png"" alt=""Actual look of my Vim instance""></p>

<p>Concerning the fonts, I tried adding:</p>

<pre><code>let g:airline_powerline_fonts = 1
</code></pre>

<p>Yet the icons then are just gibberish.</p>

<p>What am I missing?</p>

<hr>

<p>I just found that for the colors, as described in <a href=""https://github.com/bling/vim-airline/wiki/FAQ"" rel=""nofollow noreferrer"">the FAQ</a>, I can add in my <code>.vimrc</code>:</p>

<pre><code>set t_Co=256
</code></pre>

<p>Yet this still leads to line looks distorted:</p>

<p><img src=""https://i.stack.imgur.com/2mlbT.png"" alt=""Vim with t_Co=256""></p>

<p>Especially the Git integration about (branch name with the icon). Or the the way the >-""arrow"" is displayed. I want that eye-candy, too. Can I even achieve that in Bash? Or would I need a different shell?</p>

<p>Basically, I want Vim to look like the example screenshot on the plugin page, as I expected it to be the default of the plugin. How can I achieve that?</p>
","<p>One has to realize that the feature implemented by airline are inspired by the <a href=""https://powerline.readthedocs.org/en/latest/"">powerline</a> plugin.</p>

<p>Furthermore, I was relying on the docs too much, not realizing that there is well-written airline help document shipped with itself:</p>

<pre><code>:h airline
</code></pre>

<p>Reading its documentation helps understanding the functionality of this plugin.</p>

<p><strong>Font</strong></p>

<p>As mentioned in the powerline docs:</p>

<blockquote>
  <p>Powerline uses several special glyphs to get the arrow effect and some
  custom symbols for developers. This requires having either a symbol
  font or a patched font installed in the system. Used application (e.g.
  terminal emulator) must also either be configured to use patched fonts
  (in some cases even support it because custom glyphs live in private
  use area which some applications reserve for themselves) or support
  fontconfig for powerline to work properly with powerline-specific
  glyphs.</p>
</blockquote>

<p>So one can patch existing fonts (<a href=""https://powerline.readthedocs.org/en/latest/installation.html#fonts-installation"">see the powerline font section</a> docs or you may install a collection or already prepared fonts.</p>

<p>You can install a powerline font collection via:</p>

<pre><code>git clone git@github.com:powerline/fonts.git
cd fontd
./install.sh
</code></pre>

<p>I have chosen <code>Meslo LG L DZ for Powerline</code> in my terminal.</p>

<p>One has to add to <code>.vimrc</code>:</p>

<pre><code>let g:airline_powerline_fonts = 1
</code></pre>

<p><strong>Colors</strong></p>

<p>For the colors, you have to set in your <code>.vimrc</code>:</p>

<pre><code>set t_Co=256
</code></pre>

<p>as desribed in the <a href=""https://github.com/bling/vim-airline/wiki/FAQ"">FAQ</a>.</p>

<p><strong>Theme</strong></p>

<p>In order to see your current theme, run:</p>

<pre><code> :AirlineTheme
</code></pre>

<p>for me the default was <code>dark</code>.</p>

<p>You can change them for the current session by:</p>

<pre><code> :AirlineTheme THEME_NAME
</code></pre>

<p><a href=""https://github.com/bling/vim-airline/wiki/Screenshots"">You can find a list of themes here.</a></p>

<p><em>@todo</em>: Find out theme used in the screenshot. I actually like <code>luna</code> more, yet that is an entirely different matter.</p>

<p>My changes currently let vim look like this:</p>

<p><img src=""https://i.stack.imgur.com/DzrlM.png"" alt=""current state of vim look""></p>
","5623"
"How do I reload the current file?","19916","","<p>Quite often I am working with files that are version controlled, so it is possible for changes to be made to them outside of Vim.</p>

<p>What is a quick way to reload the file without having to close and reopen Vim? And is there a way to do this automatically?</p>
","<p>The command you want is <a href=""http://vimdoc.sourceforge.net/htmldoc/editing.html#edit-a-file""><code>:e</code></a> (short for <code>:edit</code>). If you use <code>:edit!</code> it will discard local changes and reload.</p>

<p>You can also have vim do this automatically with <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27autoread%27""><code>set autoread</code></a> in your vimrc.</p>
","445"
"How to install YouCompleteMe with Clang completer offline?","19541","","<p>I have installed YouCompleteMe with Clang completer in OS X 10.10.4, and in my new OS X 10.11.4 I want to reinstall it.</p>

<p>The previous installation process downloaded about 140MB at very low speed. I have used the main <a href=""https://github.com/Valloric/YouCompleteMe/blob/master/README.md#mac-os-x"" rel=""noreferrer"">tutorial</a> to install with these commands (after installing the bundle with <a href=""https://github.com/VundleVim/Vundle.vim"" rel=""noreferrer"">Vundle</a>):</p>

<pre><code>cd ~/.vim/bundle/YouCompleteMe
./install.py --clang-completer
</code></pre>

<p>How can I manually download the additional file and install it offline?</p>
","<p>I did the following to install (Although I could copy the whole <code>~/.vim</code> directory to the new place instead of steps 3-6):</p>

<ol>
<li><p>Install vim 7.4:</p>

<pre><code>brew install vim
</code></pre>

<p>Note: If you are using mac operating system, make sure you create an alias in your bash_profile pointing to macvim i.e. <code>which mvim</code></p></li>
<li><p>Install <a href=""https://github.com/VundleVim/Vundle.vim"" rel=""nofollow noreferrer"">Vundle</a></p></li>
<li><p>Add <code>Plugin 'Valloric/YouCompleteMe'</code> to <code>~/.vimrc</code> and run <code>:PluginInstall</code> in vim.</p></li>
<li><p>Download <strong>clang+llvm-<em>version</em>-x86_64-apple-darwin.tar.xz</strong> from <code>Pre-Built Binaries</code> section of <a href=""http://llvm.org/releases/download.html"" rel=""nofollow noreferrer"">LLVM Download Page</a> manually (now it is the latest version).</p></li>
<li><p>Make the download directory:</p>

<pre><code>mkdir -p ~/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_archives
</code></pre></li>
<li><p>Put the downloaded file in that directory.</p>

<pre><code>mv  clang+llvm-*-x86_64-apple-darwin.tar.xz ~/.vim/bundle/YouCompleteMe/third_party/ycmd/clang_archives
</code></pre></li>
<li><p>Compile YouCompleteMe:</p>

<pre><code>cd ~/.vim/bundle/YouCompleteMe
./install.py --clang-completer
</code></pre></li>
</ol>
","7471"
"How can I rename the file I'm editing?","19258","","<p>Is it possible to rename the file I'm editing from within Vim? Currently what I do is exit Vim, rename the file and open from Vim again.</p>
","<p>You could save the file under a different name using <code>:w</code>. But this operation won't remove the old file and the 'old' file stays in your buffer, so any changes will be applied to your 'old' file.</p>

<p><code>:saveas</code> saves your new file and opens it in a new buffer. But it doesn't delete the old file.</p>

<p>I use <a href=""https://github.com/tpope/vim-eunuch"">tpope/vim-eneuch</a> to <code>:Move</code> files.</p>

<blockquote>
  <p>:Move: Rename a buffer and the file on disk simultaneously.</p>
</blockquote>
","306"
"What is Neovim? How is it different from Vim? And why should I care?","19042","","<p>I've been hearing about <a href=""http://neovim.org/"">Neovim</a>; how does it differ from Vim? All the points on the homepage are just architectural changes 'under the hood'. As a user, what's the difference for me?</p>
","<p>Just like the neovim homepage describes, neovim's objective is to pave the way for a better &amp; more openly community driven open source project.</p>

<p>The architectural changes not only will bring more stability &amp; improve performance to vim but make the code a lot more maintainable and bring the entry barrier slightly down for anyone who is interested to contribute.</p>

<p>One of the key changes also includes the core feature of access to executing jobs / tasks asynchronously in vim, which has been one of the most requested feature of vim since a long time. This can help improve performance of vim even further especially because vim will not have to block while a background job is doing something.</p>

<p>As a vim user, not much might change besides the fact that neovim should grow as a software much faster (fix issues, add features) as compared to stock vim and that it will have much better performance in the long run.</p>
","51"
"How do I delete a large block of text without counting the lines?","18786","","<p>In vim, I often need to delete, or yank/put large blocks of text.</p>

<p>I can count the lines of text and enter something like <code>50dd</code> to delete 50 lines.</p>

<p>But that's a bit of a pain. How can I delete this large block of text <em>without</em> having to know how many lines to delete in advance?</p>
","<p>Go to the starting line of your block, and type <kbd>m</kbd><kbd>a</kbd> (mark ""a"", though you can of course use <em>different</em> letters, and even <em>multiple</em> letters for different marks provided you can keep it straight in your head what each letter is a mark of).</p>

<p>Then go to the last line and enter <kbd>d</kbd><kbd>'</kbd><kbd>a</kbd> (delete to mark ""a"") or <kbd>y</kbd><kbd>'</kbd><kbd>a</kbd> (yank to mark ""a"") <sup>(a)</sup>.</p>

<p>That will delete/yank all lines from the current to the marked one (inclusive).</p>

<p>Then you can paste it somewhere else with the normal paste commands, such as <kbd>p</kbd> or <kbd>P</kbd>.</p>

<p>It's also compatible with <code>vi</code> as well as <code>vim</code>, on the off chance that your environment is not blessed with the latter.</p>

<hr>

<p><sup>(a)</sup> I also use this to save my place in the file if I have to go looking elsewhere for something like, for example, copy-pasting the definition of a function I want to call.</p>

<p>I simply mark the current line in the same way, <kbd>m</kbd><kbd>a</kbd>, then wander off to find whatever you're looking for.</p>

<p>Then, once I've found it and copied it to a register, I just enter <kbd>'</kbd><kbd>a</kbd> to go back to mark ""a"", the line I saved beforehand, where I can then paste it.</p>
","1916"
"Does Ex mode have any practical use?","18710","","<p>Vim has an Ex mode that can be entered by entering <kbd>q</kbd><kbd>:</kbd> or <kbd>Q</kbd>. In fact, it seems to be a common complaint amongst new vim users that they enter this mode accidentally when trying to quit vim. As such, I disable these keys in my <code>~/.vimrc</code> to stop myself hitting them accidentally (particularly <kbd>q</kbd><kbd>:</kbd>):</p>

<pre><code>map q: &lt;Nop&gt;
nnoremap Q &lt;nop&gt;
</code></pre>

<p>Although I've read the <a href=""http://vimdoc.sourceforge.net/htmldoc/intro.html#Ex"">vim documentation on Ex</a>, am a moderately experienced Vim user, and understand the basic idea behind it, I still struggle to find any use for it in my daily vim use. In general it seems less useful than just entering a standard vim command-line command prefixed with <kbd>:</kbd>, as changes are not echoed straight away.</p>

<p>Does Ex have any practical everyday use in modern Vim? Is there anything that's easier to do in Ex mode than with standard commands?</p>
","<p><code>Q</code> is, as you found, ex mode.  It's not entirely useful to use interactively, but it exists because Vim can be used to emulate the old <code>ex</code> binary.  In fact, many systems provide the <code>ex</code> command by simply symlinking it to <code>vim</code>.</p>

<p><code>q:</code>, or <code>:&lt;C-f&gt;</code>, instead provides a way to browse your command-line history and edit it like a normal buffer.  This makes it easy to find a previous command you ran, edit it with normal Vim commands, and then run the modified command.  The <code>q/</code> and <code>q?</code> commands exist to provide the same functionality for the search history.</p>
","461"
"How to get intelligent C++ auto-completion","18605","","<p>Some editors (such as visual studio on windows) do C++ autocompletion which understand C++. For example, given:</p>

<pre><code>#include &lt;vector&gt;

int main(void) {
  std::vector&lt;int&gt; v;
  v.i
</code></pre>

<p>In visual studio the auto-completion knows the only method on <code>std::vector&lt;int&gt;</code> that starts with an i is <code>insert</code>.</p>

<p>Is it possible to get this kind of autocompletion in vim?</p>
","<p>I really like <a href=""https://github.com/Rip-Rip/clang_complete"">clang_complete</a> for this. It does require clang, and you need to tell it where libclang resides in your system. After that, it works wonderfully.</p>

<p>People might suggest YouCompleteMe, but to be honest, that plugin is hugely bloated for what it says it does, and it requires way too many steps to install. I also had it segfault Vim on multiple occasions. I couldn't be happier with clang_complete.</p>

<p>This is what I get when I type <code>v.</code>: <img src=""https://i.stack.imgur.com/OYcjy.png"" alt=""clang-complete""></p>
","389"
"How do I stop recording while in command line?","15733","","<p>When I am recording a macro with <code>q</code> and I am done, I can type:</p>

<ul>
<li><code>q</code> to stop recording if I am in normal or visual mode.</li>
<li><code>&lt;c-o&gt;q</code> to stop recording if I am in insert mode.</li>
<li><p>..</p>

<p>How do I stop recording if my macro ends in command mode? </p></li>
</ul>
","<p>Another solution is when in command line mode, use <code>Ctrl-f</code>, and press <code>q</code> to stop recording. </p>

<p><code>Ctrl-f</code> allows you to open the command line window, in which you can edit the command in normal mode. To validate the command, simply use enter.</p>

<hr>

<p>Therefore, after having added something like:</p>

<pre><code>cnoremap &lt;c-q&gt; &lt;c-f&gt;i&lt;c-o&gt;q
</code></pre>

<p>in your <code>.vimrc</code>, you can use <code>&lt;c-q&gt;</code> to stop recording a macro while in command mode.</p>

<hr>

<p>Florent</p>
","4660"
"How to install NERDTree with Vundle?","15703","","<p>I'm starting to use Vim and I chose Vundle instead of Pathogen.</p>

<p>I would like to know if I can install the NERDTree using Vundle.</p>

<p>I'm starting Vim and searching for NERDTree like this:</p>

<pre><code>:BundleSearch NERDTree
</code></pre>

<p>But it is not finding the plugin, only:</p>

<pre><code>""Keymap: i - Install plugin; c - Cleanup; s - Se|
arch; R - Reload list                           |~                                               
""Search results for: NERDTree                   |~                                               
Plugin 'nerdtree-ack'                           |~                                               
Plugin 'FindInNERDTree'  
</code></pre>
","<p>Below is the empty Vundle config.</p>

<pre><code>set nocompatible 
filetype off

"" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"" All of your Plugins must be added before the following line
call vundle#end()            "" required
filetype plugin indent on    "" required
</code></pre>

<p>Now if you want to add a new plugin example 
<a href=""https://github.com/scrooloose/nerdtree"">nerdtree</a></p>

<p>you just add the line </p>

<p><strong><code>Plugin 'scrooloose/nerdtree'</code></strong></p>

<p>now the vimrc will look like this</p>

<pre><code>set nocompatible 
filetype off

"" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
"" added nerdtree
Plugin 'scrooloose/nerdtree'
"" All of your Plugins must be added before the following line
call vundle#end()            "" required
filetype plugin indent on    "" required
</code></pre>

<p>Now, just save the vimrc and restart vim so it can source the new vimrc then issue the <strong>:PluginInstall command:</strong></p>

<pre><code>:PluginInstall
</code></pre>

<p>more information on using can be found <a href=""https://www.digitalocean.com/community/tutorials/how-to-use-vundle-to-manage-vim-plugins-on-a-linux-vps"">here</a></p>
","5336"
"Close and unload a buffer without exiting Vim","14092","","<p>Often, I'll load some information into a temporary buffer, and then close it with <code>:clo!</code>.  But this hides the buffer rather than unloading it entirely, even though I have <code>nohidden</code> set.  I find this tiresome since I get an extra confirmation when I quit Vim, about content I already (thought I) discarded.</p>

<p>I could just use <code>:q!</code> instead, but that's a bad habit to get into because it will exit Vim entirely if there's only one buffer left, which is also annoying.  Worse, if I typo <code>:qa!</code>, I could lose a lot of work.</p>

<p>Is there a middle ground?  I'd really like some command which kills the current buffer but doesn't exit Vim.  I'm not opposed to writing it in Vimscript, but I'd rather avoid it if the command already exists.</p>
","<p>There is command to do exactly that: <code>:bdelete</code> or just <code>:bd</code>. By default it will unload current buffer. To unload other buffer, first get the list of all buffers with <code>:buffers</code> command, and after that you can specify the number after <code>:bd</code> to remove it. Also <code>:bd</code> + <kbd>space</kbd> + <kbd>tab</kbd> allows completion using buffer name.</p>
","3067"
"Colorscheme's background not correct in terminal","13769","","<p>I imported the solarized colorscheme and palette. My terminal has the correct colors and background, gvim has the correct colors and background, but vim has an incorrectly colored background. The text is all correct, but the background appears to be pure black.</p>

<p><a href=""https://i.stack.imgur.com/LZnB3.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/LZnB3.png"" alt=""This is a comparison of Terminal, GVim, and Vim""></a></p>

<p>Here is my .vimrc:</p>

<pre><code>syntax enable

if has('gui_running')
    set background=dark
else
    set background=dark
endif

:set t_Co=256
let g:solarized_termcolors=256
colorscheme solarized
</code></pre>

<p>If anyone has any suggestions on what could be causing this, I would be much obliged. I run xubuntu with the default terminal.</p>

<p>I should also mention that the light option results in a very yellow background for Vim.</p>
","<p>Great news, everyone. @Tom and @Rich set me on the right path. I found a solution provided <a href=""https://github.com/sgerrand/xfce4-terminal-colors-solarized"" rel=""nofollow"">here</a>. I set my .vimrc to the simple</p>

<pre><code>syntax enable
set background=dark
set t_Co=16
colorscheme solarized
</code></pre>

<p>This seems to fix everything. The colors don't seem to be as bright in the <a href=""http://ethanschoonover.com/solarized/img/terminus12"" rel=""nofollow"">font examples</a>, but that could very well just be me. To anyone who wants to use the Solarized colorscheme and uses xfce4-terminal, just changing the terminalrc and the .vimrc seemed to solve my main problems. Thanks to everyone for your help!</p>
","2156"
"Is there an easy way to close a scratch buffer/preview window?","13590","","<p>One of the plugins I have installed (probably Supertab) provides a nice view of documentation for the currently highlighted item in the completion menu:</p>

<p><a href=""https://i.stack.imgur.com/fVILE.png""><img src=""https://i.stack.imgur.com/fVILE.png"" alt=""enter image description here""></a></p>

<p>The (apparently) scratch buffer remains open even after I exit the completion (by pressing <kbd>Enter</kbd> or <kbd>Space</kbd>). Then, to quit it, I do <code>&lt;c-w&gt;↑:q</code>, but I find having to press <kbd>Ctrl</kbd> extremely annoying (one reason why I avoid splits).</p>

<p>What's a quick way to close this scratch buffer? Is there a native way, or do I have to write a mapping?</p>
","<p>The top window is called the preview window. So any of <code>&lt;c-w&gt;z</code>, <code>&lt;c-w&gt;&lt;c-z&gt;</code> or <code>:pc[clos][!]</code> should work.</p>

<p>The below is the help for <code>:help :pclose</code></p>

<pre>
CTRL-W z                                        CTRL-W_z
CTRL-W CTRL-Z                                   CTRL-W_CTRL-Z :pc :pclose
:pc[lose][!]    Close any ""Preview"" window currently open.  When the 'hidden'
                option is set, or when the buffer was changed and the [!] is
                used, the buffer becomes hidden (unless there is another
                window editing it).  The command fails if any ""Preview"" buffer
                cannot be closed.  See also :close.
</pre>

<p>Another relevant help page would be <code>:help preview-window</code></p>
","4057"
"How to add indentation guides/lines","13350","","<p>In Sublime Text 2, you get vertical guides where your indentation is, like this:</p>

<p><img src=""https://i.stack.imgur.com/nxPrP.png"" alt=""Sublime Text screenshot""></p>

<p>but in vim I obviously don't:</p>

<p><img src=""https://i.stack.imgur.com/LEnqM.png"" alt=""vim screenshot""></p>

<p>Is there a way to show lines like that in vim? By the way, my indentation is 2 spaces.</p>

<pre><code>:set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
</code></pre>
","<p>Unified answer:</p>

<h2>If you are using tabs</h2>

<p>I'd try using listchars:</p>

<pre><code>:set listchars=tab:\|\ 
:set list
</code></pre>

<p>note: there is a space after the last <code>\</code> above.</p>

<p>This method is good because it uses Vim's built-in support for showing this kind of thing.</p>

<p>Example output:</p>

<pre><code>|       if (1) {
|       |       func();
|       }
</code></pre>

<p><img src=""https://i.stack.imgur.com/KrK5w.png"" alt=""screenshot of text sample above""></p>

<p>However, this doesn't work for leading spaces. As pointed out by @Josh Petrie, <a href=""http://vim.1045645.n5.nabble.com/Patch-support-for-the-quot-space-quot-argument-for-quot-listchars-quot-td1210494.html"" rel=""nofollow noreferrer"">there is a patch to work for spaces</a>, but then you'd have to recompile Vim, which is beyond the scope of this answer.</p>

<h2>If you are using spaces, and don't mind using a plugin</h2>

<p>Vaibhav Sagar points out the plugin <a href=""https://github.com/Yggdroot/indentLine"" rel=""nofollow noreferrer"">indentLine</a> performs this functionality.</p>

<p>Install in the normal way (see <a href=""https://vi.stackexchange.com/questions/613/how-to-install-a-plugin-in-vim-vi"">installing Plugins</a>) and it seems to magically just work without further input. If you don't mind the ASCII bars, you don't need to do anything with your fonts. Example output of your example after setting your indentation settings and running <code>:IndentLinesReset</code></p>

<pre><code>45   ¦ var move = function(direction) {
46   ¦ ¦ if(!initialized) { initialize(); }
47 
48   ¦ ¦ if(shiftBoard(direction)) {
49   ¦ ¦ ¦ setTimeout(addRandomPiece, 100);
50   ¦ ¦ }
51   ¦ };
</code></pre>

<p><img src=""https://i.stack.imgur.com/JyLPY.png"" alt=""screenshot of example with spaces""></p>

<p>The plugin requires Vim 7.3 or later, and makes cleaver use of that version's Conceal feature. Instead of actually hiding text, it replaces text with bars in the view, but not the actual buffer. The result is you see the bars but they don't get saved into the file (since they are actually spaces)</p>

<h2>Caveat</h2>

<p>Both of these methods assume ""properly"" indented code. They don't place the indentation lines at the level of indent when a ""block"" is opened (which sublime appears to do) but instead places lines at regular intervals based on your indentation settings. Additionally, it only shows the bars on lines where there is actually space (which is why the line in the vim output under the first <code>if</code> has no bars, making a visual gap)</p>
","667"
"What is the Vim8 package feature and how should I use it?","13325","","<p>Vim 8 was released <a href=""https://github.com/vim/vim/releases/tag/v8.0.0000"" rel=""noreferrer"">today</a> and the <a href=""https://raw.githubusercontent.com/vim/vim/master/runtime/doc/version8.txt"" rel=""noreferrer"">release notes</a> mentions a new ""package"" feature. What is it and how should I use it?</p>

<p>Most importantly, does it replace the good old <a href=""https://vi.stackexchange.com/q/388/1841"">plugin managers</a>?</p>
","<p>First of all, the relevant documentation can be found with <a href=""http://vimhelp.appspot.com/repeat.txt.html#packages"" rel=""nofollow noreferrer""><code>:h packages</code></a> on the newly compiled Vim8 version and <a href=""https://github.com/vim/vim/blob/master/runtime/doc/repeat.txt#L459"" rel=""nofollow noreferrer"">here on Github</a>.</p>

<p>A first important note is about the vocabulary: In Vim8 a package is defined like this:</p>

<blockquote>
  <p>A Vim package is a directory that contains one or more plugins.</p>
</blockquote>

<p>This means that the new package manager was created to help users manage all of their plugins in the same archive. The doc lists the following advantages:</p>

<blockquote>
  <ul>
  <li><p>A package can be downloaded as an archive and unpacked in its own directory.
  Thus the files are not mixed with files of other plugins.  That makes it
  easy to update and remove.</p></li>
  <li><p>A package can be a git, mercurial, etc. repository.  That makes it really
  easy to update.</p></li>
  <li><p>A package can contain multiple plugins that depend on each other.</p></li>
  <li><p>A package can contain plugins that are automatically loaded on startup and
  ones that are only loaded when needed with <code>:packadd</code>.</p></li>
  </ul>
</blockquote>

<p>So the idea is to create a folder containing all of the plugins with the following structure:</p>

<pre><code>$HOME/.vim/pack/my-plugins/
                        start/
                            foo/
                                plugin/
                                    foo.vim
                                syntax/
                                    some.vim
                            bar/
                                plugin/
                                    bar.vim
                        opt/
                            buzz/
                                plugin/
                                    buzz.vim
</code></pre>

<p>The emplacement of the folder is defined by the option <code>packpath</code> (See <a href=""https://github.com/vim/vim/blob/master/runtime/doc/options.txt#L5457"" rel=""nofollow noreferrer""><code>:h 'packpath'</code></a>).</p>

<p>Note the importance of the structure of your folder:</p>

<ul>
<li>The <code>start</code> folder contains plugins which will be loaded automatically on startup.</li>
<li>The <code>opt</code> folder contains ""optional"" plugins, loaded with the <code>packadd</code> command.</li>
<li>The subfolders (<code>plugin</code>, <code>autoload</code>, <code>doc</code>,...) are the ones you're used to in the plugins.</li>
</ul>

<p>Here is a recap of the folders:</p>

<pre><code>start/foobar/plugin/foo.vim     "" always loaded, defines commands
start/foobar/plugin/bar.vim     "" always loaded, defines commands
start/foobar/autoload/foo.vim   "" loaded when foo command used
start/foobar/doc/foo.txt        "" help for foo.vim
start/foobar/doc/tags           "" help tags
opt/fooextra/plugin/extra.vim   "" optional plugin, defines commands
opt/fooextra/autoload/extra.vim "" loaded when extra command used
opt/fooextra/doc/extra.txt      "" help for extra.vim
opt/fooextra/doc/tags           "" help tags
</code></pre>

<p>Once these files are in the right place, opening Vim will load the plugins in <code>start</code> and make the ones in <code>opt</code> available with <code>:packadd</code>.</p>

<hr>

<p>Now, can this feature replace the existing plugin managers?</p>

<p><strong>Disclaimer:</strong> This part may be a little bit opinionated.</p>

<p>I think the approach of this new package manager is really different than the one of the plugins managers we were used to because it is made to manage one (or several) archive(s) containing some plugins.</p>

<p>Out of the box, the package manager doesn't provide features to update your plugins one-by-one, to fetch them automatically from a Github address or to select the plugins you want to enable/disable.</p>

<p>I'm not sure it will be really convenient to use it out of the box (especially because handling nested version control repositories can be a painful task) but maybe this is the occasion to make plugin managers more efficient?</p>

<p>Now it is also possible to imagine moving the existing plugins to adopt the structure required by the package manager and to manage them directly from the file system. Maybe some wrapper will be created to use this new feature.</p>

<hr>

<p><strong>EDIT</strong> As suggested by @Sato Katsura here is a note about the <code>helptags</code> command. The Vim8 commit introduced two line in the <a href=""https://github.com/vim/vim/blob/master/runtime/doc/helphelp.txt#L200-L201"" rel=""nofollow noreferrer""><code>helptag</code> doc</a>:</p>

<blockquote>
<pre><code>:helpt[ags] [++t] {dir}

Generate the help tags file(s) for directory {dir}.
When {dir} is ALL then all ""doc"" directories in 'runtimepath' will be used.
</code></pre>
</blockquote>

<p>Which means that the new package manager ease the generation of the helptags put in the user archive. With the single command <code>:helptags ALL</code> all the helptags are generated.</p>
","9523"
"Which alternatives to gVim exist on Windows?","12705","","<p>I am a frequent user of the Vim editor on Linux and now I want to use it on Windows.</p>

<p>I downloaded Vim for Windows, which happens to be gVim. Several features of Vim doesn't work in gVim 7.4 like visual block, <code>rx</code> command, and several other key combinations.</p>

<p>I want the same/original Vim from Linux to be used on Windows. Is that version available for Windows too? Or, can I use settings similar to the Unix format?</p>
","<p>When I have to work on Windows (which is more often than I would like), I use Cygwin to get a terminal a little less crappy than the original Windows command line. Cygwin provides an environment which tries to be close to a Bash console with standard Linux commands, and of course it is far from being flawless.</p>

<p>See the <a href=""http://www.cygwin.com/"" rel=""noreferrer"">project page</a> of Cygwin. During the installation you'll end on a window allowing you to choose which packages you want to install. The search bar allows to look for packages to install, among other useful stuff (like <code>git</code>, <code>tmux</code>, <code>curl</code>, <code>wget</code>, etc.) you can type <code>vim</code> and select packages like <code>vim</code>, <code>vim-common</code>, <code>vim-doc</code>, <code>gvim</code>. This will install a Vim editor pretty close to what you're used to on Linux.</p>

<p>Once everything is installed (which can sometimes be a little long) you'll be able to start Cygwin which will show a terminal, and you'll be able to start Vim as usual and use your Linux <code>.vimrc</code> and your usual plugin manager. The main drawback is the compatibility of colors which often needs to be tweaked and still look crappy.</p>

<p><strong>Note</strong> that I use Cygwin out of habit, but other solutions (like <a href=""http://cmder.net/"" rel=""noreferrer"">cmder</a> for example) exist. None of them are flawless, so you might want to try several and find your favorite.</p>

<p><strong>Also note</strong> that <a href=""https://mintty.github.io/"" rel=""noreferrer"">mintty</a> is a good way to make Cygwin a little less crappy.</p>
","7458"
"How to map Alt key?","12597","","<p>I'm trying to map <kbd>Alt</kbd> key in the following way:</p>

<pre><code>:map &lt;A-j&gt; j
:map &lt;A-k&gt; k
</code></pre>

<p>but it doesn't work (bell is rang on <kbd>Alt + j</kbd>/<kbd>Alt + k</kbd>).</p>

<p>What I'm missing?</p>

<p>I'm using Terminal on OSX, the same happens on remote Linux.</p>

<hr>

<p>On <kbd>Ctrl + v</kbd>, <kbd>Alt + j</kbd>, I've got: <code>?~H~F</code> (<code>∆</code> when <code>encoding=utf-8</code>).</p>

<p>On <kbd>Ctrl + v</kbd>, <kbd>Alt + k</kbd>, I've got: <code>?~Z</code> (<code>˚</code> when <code>encoding=utf-8</code>).</p>

<p>Running vim without plugins (<code>-u NONE</code>) doesn't make any difference.</p>
","<p>That's how I do it on Linux or Cygwin:</p>

<p>First check what chars are send by your terminal when you press <kbd>ALT</kbd>+<kbd>J</kbd>:</p>

<p>In order to do this I go to console and run <code>sed -n l</code> (you can also use <code>cat</code> for it). Then I press <kbd>ALT</kbd>+<kbd>J</kbd> and see that the chars on the screen are <code>^[j</code> .</p>

<p>I replace <code>^[</code> with <code>\e</code> (because that's what is sent by my terminal when I press <kbd>esc</kbd>) and the final string for me is <code>\ej</code>.</p>

<p>Then I write it to my <code>.vimrc</code>:</p>

<pre><code>execute ""set &lt;M-j&gt;=\ej""
nnoremap &lt;M-j&gt; j
</code></pre>

<p>And the mapping works.</p>
","2363"
"How can I easily move a line?","12186","","<p>What is the command (or shortcut) to move a line up or down in vim? My current workflow is to yank (copy) the line and than delete that line and than to put (paste) that line.</p>
","<p>First, you do not need to yank <em>and</em> delete; the latter will also put the deleted contents into the (default or specified) register. Therefore, <code>ddp</code> / <code>ddkP</code> are common commands to move a line one down / up.</p>

<p>Alternatively, you can use the <code>:move</code> command, i.e. <code>:move +1</code> / <code>:move -2</code>; this doesn't clobber the register, and you can also move entire ranges. You can easily define key mappings to shorten this. </p>

<p>If you don't mind plugins (and the additional comfort that often comes with them), both Tim Pope's <a href=""http://www.vim.org/scripts/script.php?script_id=1590"">unimpaired plugin</a> and my <a href=""http://www.vim.org/scripts/script.php?script_id=4140"">LineJuggler plugin</a> provide <code>]e</code> / <code>[e</code> mappings to move lines (and several more; Tim's for a variety of uses, mine focused on handling line(s)).</p>
","2676"
"Why do I need both a vimrc and a gvimrc?","12118","","<p>There seems to be two ways to store preferences specific to gvim:</p>

<ol>
<li><p>Keep an <code>.vimrc</code> file for vim and a <code>.gvimrc</code> file for gvim specific additions.</p></li>
<li><p>Keep all settings in <code>.vimrc</code> and wrap gvim specific settings in a feature detection conditional:</p>

<pre><code>if has('gui_running')
    "" gvim specific settings here
endif
</code></pre></li>
</ol>

<p>Given the existence of the latter option, why would I ever need a <code>.gvimrc</code> file?</p>
","<p>When the GUI starts, some settings are reset and then <code>.gvimrc</code> is processed.</p>

<p>Consequently, if you want a non-default value for any of those settings, you'll need to set it in a <code>.gvimrc</code>; testing for GUI mode in <code>.vimrc</code> won't work.</p>

<p>One such setting is <code>t_vb</code>, the terminal code used for the visual bell; in fact, all terminal optionals are reset to defaults for GUI mode (see <code>:help terminal-options</code>).</p>

<p>Additionally a bunch of GUI setup and menu customization is carried out; if you want to tweak any of that, you'll want that in a <code>.gvimrc</code> or it may not have any impact.</p>

<p>Reading over <code>:help gvimrc</code> provides a good overview of things that may change on you between the sourcing of your <code>.vimrc</code> and <code>.gvimrc</code> that you may want to consider re-adjusting in the latter.</p>
","473"
"How can I set up a ruler at a specific column?","11935","","<p>When coding in different languages, I tend to need to restrict my lines to a specific length (usually 79 or 80 characters).</p>

<p>I've seen this done in other editors through the use of a ruler (solid line displayed at the column) or by changing the color of the text to indicate that it has gone over.</p>

<p>How can I have Vim indicate to me when I am approaching or going over 79 characters in a single line?</p>
","<p>You can display a ruler at a specific line using the <code>:set colorcolumn</code> (<code>:set cc</code> for short) option which is only available in Vim 7.3 or later.</p>

<pre><code>set colorcolumn=80
</code></pre>

<p>This will set the background color of that column to red, giving you a visual ruler to work from.</p>

<p><img src=""https://i.stack.imgur.com/0rVzL.png"" alt=""Picture of default colorcolumn set to 80""></p>

<p>If you want to use a different color other than red (which really stands out), you can change the color by setting the <code>highlight</code> for <code>ColorColumn</code>.</p>

<pre><code>highlight ColorColumn ctermbg=0 guibg=lightgrey
</code></pre>

<p><img src=""https://i.stack.imgur.com/9vyQT.png"" alt=""Customized color for the column""></p>

<p>You can set the color for terminal versions of Vim using the <code>cterm</code> argument and GUI versions of Vim using the <code>guibg</code> argument. The <code>0</code> is the value of the ASCII escape code for black, which is grey when brightened (which it is, by default). The value <code>lightgrey</code> is used for GUI versions of Vim, like gVim, to change the background color to a light grey.</p>
","357"
"Vim Code Completion for Python 3","11662","","<p>I am running Debian Jessie and use the current vim-nox (with +python -python3). I am having a hard time trying to program in Python 3, as I struggle with Python 3 code completion.</p>

<p>YouCompleteMe doesn't support Python3 at all. jedi-vim does support Python 3 completion, but only if I would have the +python3 option if I understand it correctly. From several posts from Debian Developers it seems that compiling Vim with the +python3 flag is not really working. Therefore I am left with the python-mode plugin.</p>

<p>Besides the fact that python-mode seems unmaintained (see open pull-requests and last commits) and it currently has a huge bug concerning rope in its master branch, it interferes with YouCompleteMe. I do get some Python 3 code completion to work, but only if I disable YouCompleteMe totally. Blacklisting YCM for python filetypes or disabling YCM completion for python files doesn't work, I get a YCM warning each time I open vim.</p>

<p>So my questions are:</p>

<p>How can I get a Python 3 autocompletion to work on a current Debian distribution while not deactivating YouCompleteMe (which I want for other programmming languages)? How come an unmaintained plugin is the only choice at the moment for code completion for such an important programming language (Python 3 can no longer be considered new..)?</p>
","<p>The ideal way is to get Vim's source and compile it yourself. </p>

<p>Step 1: For Debian-like systems, get the required packages:</p>

<pre><code>sudo apt-get build-dep vim
</code></pre>

<p>Step 2: Clone Vim's source code:</p>

<pre><code>cd /tmp &amp;&amp; git clone https://github.com/vim/vim.git &amp;&amp; cd vim
</code></pre>

<p>Step 3: Configure, Make, Install</p>

<pre><code>./configure --with-features=huge --enable-multibyte --enable-python3interp \
    --enable-gui=gtk-2 --prefix=/usr

make VIMRUNTIMEDIR=/usr/share/vim/vim74
sudo make install
</code></pre>

<p>Step 4: Done! You should have a huge version of vim, with +python3 support. It also has +clipboard support so you can use it with your system clipboard, and a gui version.</p>

<p>Of course, you can remove configure flags you don't want or add some in. YouCompleteMe actually has a fairly length wiki dedicated to explaining how to build Vim from source <a href=""https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"">here</a></p>
","2404"
"Vim 8.0 Python support","11414","","<p>I'm trying to upgrade my Vim installation to version 8.0, but it doesn't support both Python and Python 3 as the below image.</p>

<p>(PS: Because of this problem, I cannot use the YCM (YouCompleteMe) plugin  now.)</p>

<ol>
<li><p>I installed Vim 8.0 as in the following commands.</p></li>
<li><p>I'm using Ubuntu&nbsp;16.04 (Xenial Xerus).</p></li>
</ol>

<p>How can I handle this problem?</p>

<pre><code>sudo add-apt-repository ppa:jonathonf/vim
sudo apt update
sudo apt install vim
</code></pre>

<p><a href=""https://i.stack.imgur.com/k6H3o.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/k6H3o.png"" alt=""Enter image description here""></a></p>
","<p>The <a href=""https://launchpad.net/~pi-rho/+archive/ubuntu/dev"" rel=""noreferrer"">pi-rho/dev PPA</a> now supports Vim 8, and like it always has, includes support for Python/Python3:</p>

<pre><code>$ vim --version | grep python
+cryptv          +linebreak       +python/dyn      +vreplace
+cscope          +lispindent      +python3/dyn     +wildignore
$ apt-cache policy vim   
vim:
  Installed: 2:8.0.0134-1ubuntu1~ppa1~x
  Candidate: 2:8.0.0134-1ubuntu1~ppa1~x
  Version table:
 *** 2:8.0.0134-1ubuntu1~ppa1~x 500
        500 http://ppa.launchpad.net/pi-rho/dev/ubuntu xenial/main amd64 Packages
        100 /var/lib/dpkg/status
     2:7.4.1689-3ubuntu1.2 500
</code></pre>
","11268"
"How can I find out what <Leader> is set to? And is it possible to remap <Leader>?","11193","","<p>How can I figure out which key is set as my <code>&lt;Leader&gt;</code>, and how do I remap it?</p>
","<p>By default your <code>&lt;leader&gt;</code> is <code>\</code>, backslash. You can check it with:</p>

<pre><code>:echo mapleader
</code></pre>

<p>If this gives you an <code>E121: Undefined variable: mapleader</code>, it means it's set to the default of <code>\</code>. If it gives you something else, then it's that :-)</p>

<p>You can easily remap it. I mapped it to the space-bar:</p>

<pre><code>:let mapleader = ""\&lt;Space&gt;""
</code></pre>

<p>Note that the value of <code>mapleader</code> is used at the moment the mapping is defined. So this example:</p>

<pre><code>let mapleader = "",""
nnoremap &lt;Leader&gt;a :echo ""Hey there ,""&lt;CR&gt;

let mapleader = ""\&lt;Space&gt;""
nnoremap &lt;Leader&gt;a :echo ""Hey there space""&lt;CR&gt;
</code></pre>

<p>Will produce <em>two</em> mappings: <code>,a</code> and <code>&lt;Space&gt;a</code>.</p>

<p>This means that the <em>current</em> value of <code>mapleader</code> is not necessarily the value that was used to define your mappings!</p>

<p>In addition, there's the <code>maplocalleader</code>, which is the same as <code>mapleader</code>, except that it's used by <code>&lt;LocalLeader&gt;</code> and that it's local to the current buffer.</p>

<p>More information about <code>&lt;Leader&gt;</code> can be found in Vim's help with <a href=""http://vimhelp.appspot.com/map.txt.html#mapleader""><code>:help mapleader</code></a>.</p>
","282"
"Trouble Using Color Scheme in NeoVim","11156","","<p>I don't have a full understanding of how my color scheme is interacting with the <code>term</code> setting in vim and this is impeding my ability to get it to display correctly in neovim.</p>

<p>In my .vimrc file, correct behavior of the color scheme in question requires setting</p>

<pre><code>set term=xterm
set t_Co=256
</code></pre>

<p>Omitting either of those settings results in incorrect display of the color scheme:</p>

<p><em>correct</em>
<img src=""https://i.stack.imgur.com/DTNll.png"" alt=""Correct Color Display"">
<em>incorrect</em>
<img src=""https://i.stack.imgur.com/zdpYg.png"" alt=""Incorrect Color Display"">
<em>different incorrect</em>
<img src=""https://i.stack.imgur.com/6bEJ5.png"" alt=""Different Incorrect Color Display""></p>

<p>The scheme looks like this:</p>

<pre><code>set background=dark
hi clear
if exists(""syntax_on"")
    syntax reset
endif
let g:colors_name=""impact3""

if exists(""g:impact_transbg"")
    hi Normal       ctermfg=255 ctermbg=none
    hi NonText      ctermfg=DarkGray  ctermbg=none

    hi Statement    ctermfg=Blue      ctermbg=none
    hi Comment      ctermfg=DarkGray  ctermbg=none cterm=bold term=bold
    hi Constant     ctermfg=173  ctermbg=none
    hi Identifier   ctermfg=Cyan      ctermbg=none
    hi Type         ctermfg=DarkGreen ctermbg=none
    hi Folded       ctermfg=0 ctermbg=235 cterm=underline term=none
    hi Special      ctermfg=Blue      ctermbg=none
    hi PreProc      ctermfg=LightGray ctermbg=none cterm=bold term=bold
    hi Scrollbar    ctermfg=Blue      ctermbg=none
    hi Cursor       ctermfg=white     ctermbg=none
    hi ErrorMsg     ctermfg=Red       ctermbg=none cterm=bold term=bold
    hi WarningMsg   ctermfg=Yellow    ctermbg=none
    hi VertSplit    ctermfg=0     ctermbg=0
    hi Directory    ctermfg=Cyan      ctermbg=DarkBlue
    hi Visual       ctermfg=White     ctermbg=Gray cterm=underline term=none
    hi Title        ctermfg=255     ctermbg=Blue
    hi String       ctermfg=Blue   ctermbg=none

    hi StatusLine   term=bold cterm=bold,underline ctermfg=White ctermbg=Black
    hi StatusLineNC term=bold cterm=bold,underline ctermfg=Gray  ctermbg=Black
    hi LineNr       term=bold cterm=bold ctermfg=2 ctermbg=None
    hi Search       ctermfg=Black ctermbg=2
    hi TabLine      ctermfg=0 ctermbg=DarkGray
    hi TabLineFill  ctermfg=DarkGray ctermbg=DarkGray
else
    hi Normal       ctermfg=White ctermbg=Black
    hi NonText      ctermfg=DarkGray  ctermbg=Black

    hi Statement    ctermfg=Blue      ctermbg=Black
    hi Comment      ctermfg=DarkGray  ctermbg=Black cterm=bold term=bold
    hi Constant     ctermfg=DarkCyan  ctermbg=Black
    hi Identifier   ctermfg=Cyan      ctermbg=Black
    hi Type         ctermfg=DarkGreen ctermbg=Black
    hi Folded       ctermfg=DarkGreen ctermbg=Black cterm=underline term=none
    hi Special      ctermfg=Blue      ctermbg=Black
    hi PreProc      ctermfg=LightGray ctermbg=Black cterm=bold term=bold
    hi Scrollbar    ctermfg=Blue      ctermbg=Black
    hi Cursor       ctermfg=white     ctermbg=Black
    hi ErrorMsg     ctermfg=Red       ctermbg=Black cterm=bold term=bold
    hi WarningMsg   ctermfg=Yellow    ctermbg=Black
    hi VertSplit    ctermfg=White     ctermbg=Black
    hi Directory    ctermfg=Cyan      ctermbg=DarkBlue
    hi Visual       ctermfg=White     ctermbg=DarkGray cterm=underline term=none
    hi Title        ctermfg=White     ctermbg=DarkBlue

    hi StatusLine   term=bold cterm=bold,underline ctermfg=White ctermbg=Black
    hi StatusLineNC term=bold cterm=bold,underline ctermfg=Gray  ctermbg=Black
    hi LineNr       term=bold cterm=bold ctermfg=White ctermbg=Black
endif
</code></pre>

<p>In neovim, <code>term</code> cannot be set. I tried invoking neovim with a manually set $TERM like so:</p>

<pre><code>TERM=xterm nvim
</code></pre>

<p>This produced the correct display of colors in regular vim (i.e. equivalent to setting term in .vimrc), but in neovim it looks like this:</p>

<p><img src=""https://i.stack.imgur.com/Kz7IT.png"" alt=""enter image description here""></p>

<p><strong>Why is the combination of <code>set term=xterm</code> and <code>set t_Co=256</code> necessary to produce the correct display of this color scheme in vim and why does the equivalent combination of settings produce a different result in neovim?</strong></p>

<p><em>Edit:</em></p>

<p><em>The default is</em> <code>$TERM=xterm256-color</code>, <em>which for some reason has to be overridden to <code>xterm</code> in regular vim to make the color display correctly. With the environment variable at the 256 default, neovim looks like this:</em></p>

<p><img src=""https://i.stack.imgur.com/1nfki.png"" alt=""enter image description here""></p>

<p><em>This is identical to regular vim with <code>xterm256-color</code>, but not as intended. My goal is to understand why the xterm hack is necessary/working in vim, and why it doesn't look the same in neovim.</em></p>

<p><em>Note that many of the colors appear correctly with the above term env variable setting, notable exceptions being line numbers and background. I suspect that the way the colors are specified in this specific color scheme may be involved.</em></p>
","<h2>Main Issue</h2>

<p>The main problem you are experiencing is caused by the ordering of the
commands in your <code>.vimrc</code>.</p>

<p>You set the <code>g:impact_transbg</code> variable <em>after</em> you load the colorscheme, and
so the variable does <em>not</em> exist when checked by the colorscheme's <code>if</code> statement, and
the second version of the colorscheme (in the <code>else</code> block) is used.</p>

<p>To fix, you simply need to move the line that sets the variable above the line
where you load the colorscheme:</p>

<pre><code>let g:impact_transbg=1
colorscheme impact3
</code></pre>

<p>You can (and should!) then remove the unnecessary lines from your <code>.vimrc</code>:</p>

<pre><code>set term=xterm
set background=dark
set t_Co=256
</code></pre>

<h2>Other Issues</h2>

<p>I can also clear up a few other misconceptions/confusions you might have about
how this all works:</p>

<h3>Explaining the behaviour of <code>'term'</code> &amp; <code>'t_Co'</code></h3>

<p>Your $TERM is set to <code>xterm256-color</code>. Vim reads this, and queries terminfo (or
termcap) to find out how many colours the terminal supports, and then sets
<code>'t_Co'</code> accordingly. Presuming your $TERM is correct (yours is) and your
terminfo database contains the correct information for that terminal (yours
does) you should <em>never</em> need to manually reset <code>'t_Co'</code>.</p>

<p>However, you are then manually setting Vim's <code>'term'</code> to xterm. Your terminfo tells
Vim that this terminal only supports 8 colours, so adding this will cause
<code>'t_Co'</code> to be incorrectly set to 8. You are manually setting <code>'t_Co'</code> <em>back</em> to
256, but if you had left the <code>'term'</code> setting at the correct value, you would
not have needed to.</p>

<p>Incidentally, when you change <code>'t_Co'</code> manually after setting <code>g:impact_transbg</code>, it
causes the colorscheme to be reloaded (to allow the colorscheme to adapt to the
new number of colours), and because <code>g:impact_transbg</code> <em>is</em> now set, you get the
colours you desire.</p>

<p>(With the line setting <code>'term'</code> omitted, <code>'t_Co'</code> is <em>already</em> set to 256 when you get
to the latter line in your .vimrc, and so the colorscheme is not reloaded: hence
wrong colours.)</p>

<p>So, to recap:</p>

<pre><code>term=xterm
colorscheme impact3
let g:impact_transbg=1
set t_Co=256
</code></pre>

<p>Result: Colorscheme is reloaded when <code>'t_Co'</code> is set to 256, colours are correct.</p>

<pre><code>""term=xterm
colorscheme impact3
let g:impact_transbg=1
set t_Co=256
</code></pre>

<p>Result: Colorscheme is loaded by <code>colorscheme</code> command, variable does not exist,
colours are wrong.</p>

<pre><code>term=xterm
colorscheme impact3
let g:impact_transbg=1
""set t_Co=256
</code></pre>

<p>Result: Colorscheme is loaded by <code>colorscheme</code> command, variable does not exist
and Vim only uses 8 colours, colours are wrong.</p>

<pre><code>""term=xterm
colorscheme impact3
let g:impact_transbg=1
""set t_Co=256
</code></pre>

<p>Result: Colorscheme is loaded by <code>colorscheme</code> command, variable does not exist,
colours are wrong.</p>

<pre><code>let g:impact_transbg=1
colorscheme impact3
</code></pre>

<p>Result: Colorscheme is loaded by <code>colorscheme</code> command, variable <em>does</em> exist, so colours are correct. (And as a bonus <code>'term'</code> and <code>'t_Co'</code> are also correct!)</p>

<p>The behaviour is different in NeoVim simply because the call to set <code>'t_Co'</code> is ignored, as other answerers have already mentioned.</p>

<h3><code>'background'</code></h3>

<p>After setting the colorscheme, you also set <code>'background'</code>. For this <em>particular</em>
colorscheme, this is completely unnecessary, because the first thing the
colorscheme does is to set <code>'background'</code> to <code>'dark'</code>.</p>

<p>Note that I disagree with the other answerer who suggests that you should set
<code>'background'</code> after loading your colorscheme. The colorscheme may use the value
of <code>'background'</code> to adjust its colors, so setting <code>'background'</code> before loading
the colorscheme is the more obvious ordering. (Although note that if you change
the <code>'background'</code> setting, Vim will reload any loaded colorschemes, so setting
it <code>'background'</code> afterwards would also work: it's just non-optimal.)</p>
","10041"
"Search for lines starting with given string in vim?","10785","","<p>I have this code snippet:</p>

<pre><code># import ipdb; ipdb.set_trace()
def foo():
    ...
    import ipdb; ipdb.set_trace()
    ...
    # import ipdb; ipdb.set_trace()
</code></pre>

<p>How should I specify search query, that it would find only the uncommented <code>ipdb</code> lines?</p>

<p>I guess the command could look something like: <code>/import ipdb/(line start flag)</code></p>
","<p>How about this:</p>

<pre><code>/^[^#]*ipdb
</code></pre>

<p>The first <code>^</code> will anchor the match to the start of the line, <code>[^#]</code> will match
any character <em>except</em> a <code>#</code> (the <code>^</code> means to match any character <em>except</em>
those given), and the <code>*</code> repeats this 0 or more times.</p>

<p>See:<a href=""http://vimhelp.appspot.com/pattern.txt.html#/%5E"" rel=""noreferrer""><code>:help /^</code></a>
<a href=""http://vimhelp.appspot.com/pattern.txt.html#/collection"" rel=""noreferrer""><code>:help /[</code></a> for some more information.</p>

<p>Note that this will match all lines with <code>ipdb</code> which don't start with a comment, including:</p>

<pre><code>import other_module, ipdb
</code></pre>

<hr>

<p>If you only want to match those starting with <code>import ipdb</code>, you can use:</p>

<pre><code>/^\s*import ipdb
</code></pre>

<p>Here <code>^</code> will again anchor the match to the start of the line, <code>\s</code> will match any whitespace character, and <code>*</code> repeats this 0 or more times.</p>
","3348"
"How can I yank (copy) the single character on which the cursor rests?","9802","","<p>I know many ways to copy things:</p>

<p><code>yiw</code> = yank in current word<br>
<code>yaw</code> = yank all word (includes a trailing space)<br>
<code>yy</code>  = yank the current line<br>
<code>3yy</code> = yank three lines starting at the current one<br>
<code>yap</code> = yank all paragraph (includes trailing newline)  </p>

<p>I can also delete or change a single character:</p>

<p><code>x</code> = delete the character under the cursor<br>
<code>r</code> = replace the character under the cursor  </p>

<p>But how in the world do you simply copy a single character under the cursor?</p>

<p>My motivation is that I'm programming in Perl 6 and some of the operators are Unicode characters. Right now I'm using <a href=""https://github.com/tadzik/perl6-Config-INI/blob/master/lib/Config/INI.pm"" rel=""noreferrer"">tadzik's Perl 6 Config::INI code</a> as a starting point for a custom parser, for example, and I would have liked to have copied just that one <a href=""https://doc.perl6.org/language/operators#postfix_%C2%BB._%2F_postfix_%3E%3E."" rel=""noreferrer"">French quote character (a hyper operator)</a> from <a href=""https://github.com/tadzik/perl6-Config-INI/blob/master/lib/Config/INI.pm#L26"" rel=""noreferrer"">this line</a>:</p>

<pre><code>my %hash = $&lt;sections&gt;».ast;
</code></pre>

<p>I could use the two character ""Texas"" version of the hyper operator <code>&gt;&gt;</code>, but I thought that <code>&gt;»</code> looked better and less ambiguous than <code>&gt;&gt;&gt;</code>:</p>

<pre><code>my %hash = $&lt;sections&gt;&gt;&gt;.ast;
</code></pre>

<p><a href=""https://i.stack.imgur.com/4MoZx.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/4MoZx.jpg"" alt=""enter image description here""></a><br>
<a href=""https://i.stack.imgur.com/eK1EC.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/eK1EC.jpg"" alt=""enter image description here""></a></p>
","<p>Composing the yank operation with the so often used ""one character to the right"" motion should work: <code>yl</code>. </p>

<p>BTW (to comment on a OP comment), for me <code>»</code> can be yanked in this manner, in gVim or terminal Vim. Perhaps a (file)encoding issue?</p>
","5811"
"How can I get vim to stop putting comments in front of new lines?","9437","","<p>I'm editing my <code>.vimrc</code> file, and I am including comments. When I have a comment like this:</p>

<pre><code>"" example comment
</code></pre>

<p>And then hit enter at the end of the line after finishing the comment, the next line is automatically set up as a comment (the quotes are automatically inserted):</p>

<pre><code>"" example comment
"" 
</code></pre>

<p>How can I stop this behavior?</p>
","<p>This is controlled with the <code>formatoptions</code> setting; from <a href=""http://vimhelp.appspot.com/change.txt.html#fo-table""><code>:help fo-table</code></a>:</p>

<blockquote>
  <p>You can use the <code>'formatoptions'</code> option  to influence how Vim formats text.
      <code>'formatoptions'</code> is a string that can contain any of the letters below.  The
      default setting is <code>tcq</code>.  You can separate the option letters with commas for
      readability.</p>
</blockquote>

<p>Note that the statement about the ""defaults"" is somewhat misleading, since many filetypes change the formatoptions to best suit the file type; for example in <code>/usr/share/vim/vim74/ftplugin/vim.vim</code>:</p>

<pre><code>"" Set 'formatoptions' to break comment lines but not other lines,
"" and insert the comment leader when hitting &lt;CR&gt; or using ""o"".
setlocal fo-=t fo+=croql
</code></pre>

<p>You can view the current <code>formatoptions</code> with:</p>

<pre><code>:set fo?
  formatoptions=jcroql
</code></pre>

<p>And see where they were set like so:</p>

<pre><code>:verbose set fo?
  formatoptions=jcroql
      Last set from /usr/share/vim/vim74/ftplugin/vim.vim
</code></pre>

<p>In this case, you want to remove the <code>r</code> flag, but perhaps also the <code>c</code> and <code>o</code> flags:</p>

<pre><code>r       Automatically insert the current comment leader after hitting
        &lt;Enter&gt; in Insert mode.
c       Auto-wrap comments using textwidth, inserting the current comment
        leader automatically.
o       Automatically insert the current comment leader after hitting 'o' or
        'O' in Normal mode.
</code></pre>

<p>This can be done like so:</p>

<pre><code>:set formatoptions-=r formatoptions-=c formatoptions-=o
</code></pre>

<p>Note that using <code>:set formatoptions-=cro</code> won't work as expected (since it's a string, it will look for the string <code>cro</code>, in that order, which often won't work.).</p>

<p>To set the changes <em>only</em> for the current buffer, use <code>:setlocal</code> instead of <code>:set</code>. If you want to <em>always</em> have these options, it's probably best to use an <code>autocmd</code> in your vimrc; for example:</p>

<pre><code>au FileType vim setlocal fo-=c fo-=r fo-=o
</code></pre>

<p>This will set the options <em>only</em> for the 'vim' filetype, and won't interfere with other filetypes.</p>

<p>If you want to <em>always</em> set it, use:</p>

<pre><code>au FileType * set fo-=c fo-=r fo-=o
</code></pre>

<p>Just using <code>set fo-=cro</code> won't work since many filetypes set/expand <code>formatoption</code> (like shown above); the FileType autocmd is executed <em>after</em> the filetype files have loaded.</p>
","1985"
"""E297: Write error in swap file"" due to running in a VM","9039","","<p>UPDATE: I've tried both the <code>:set noswapfile swapfile</code> solution and the <code>:e!</code> solution and the swapfile one is better because it retains undo history even for large files, in this case meaning over 1.5 MB. For some reason, <code>:e!</code> does not keep undo history in those cases even though it does keep it in the normal case (say sub-100KB). The <code>swapfile</code> solution appears to me now to work under any circumstances, which is very impressive.</p>

<p>A bit of a weird question: How can I cleanly get rid of or move past the error message ""E297: Write error in swap file""? I am running GVim when this happens and do not want to be forced to close it down and reopen a new GVim because I don't want to lose all my open buffers and ideally I'd like to keep all my undo history in each file too, but even a solution where I lose undo history would be an improvement. I have one limited workaround right now noted at bottom and am looking for something a little better...</p>

<p>Why would I want to ignore such an error? A good question: I am running GVim in a virtual machine and I have it open on a file on the ""host"" file system rather than the VM's own file system and I ""suspend"" the VM. After coming back from the suspend, every GVim window open on a host system file will give this message. So the message is evidently due to the disconnection from the host file system that has to occur when the VM is suspended. GVim obviously thinks it still has a valid perhaps file descriptor and such when it doesn't.</p>

<p>So the way the error arises is not anything alarming and I just need or want a way to move past it without having to close GVim and reopen it. For example, many times I might have this GVim open with many buffers and a lot of things going on. I don't want to be forced to shut down the whole GVim session because of this one error, or even to shut down <em>all</em> buffers open on the host system's file system. When the error occurs, it's quite annoying and pops up every few moments.</p>

<p>What I tried so far is doing <code>:e</code> on the same file, hoping that might be like refreshing from the file system, and that did <em>not</em> get rid of the error.</p>

<p>I have also tried sort of the nuclear option, <code>:bw</code> to get rid of the buffer where this is occurring and that does work, but as I say ideally I would like to keep the session in the same state as much as possible, so shutting down buffers is not ideal either. Like let's say I have GVim open on 10 files on the host system. If I have to shut down all the buffers, then it's just as bad as having to shut down GVim altogether.</p>

<p>All of this applies to the command line Vim as well, and I'm using version 7.4 on Linux.</p>
","<p>I would try to globally disable swapfiles and then reenable them for all buffers. Something like this:</p>

<p><code>:bufdo :set noswapfile swapfile</code></p>

<p>(One might want to check, whether the current buffer has a swapfile enabled before resetting this option).</p>
","6647"
"Is there a way to count the number of occurrences of a word in a file?","8705","","<p>Is it possible to count how many times a word or a pattern appears in a file? This is sometimes useful to find out how many times a function has been called, etc.</p>
","<p>Quincy's answer is fine, but there's an exact way to do this which doesn't require editing the buffer:</p>

<pre><code>:%s/pattern//ng
</code></pre>

<p>This will print a message like <code>3 matches on 2 lines</code>, and no changes will be made to your buffer.</p>

<p>The <code>n</code> flag makes the <code>:substitute</code> command print the number of matches instead of performing an actual substitution; the <code>g</code> flag enables reporting of multiple matches per line.</p>

<hr>

<p>Another thing that might be useful to your use case is to print all lines that match a pattern:</p>

<pre><code>:global/pattern/print
</code></pre>

<p>which can be shortened to:</p>

<pre><code>:g/pattern/p
</code></pre>

<p>This is one of the simplest uses of the <code>:global</code> command (which is mind-bogglingly powerful). It will simply print out all of the lines that match <code>pattern</code>, and then you press <code>Enter</code> or type another command to make it go away.</p>

<p>A bit of trivia: This command is the origin of the name <code>grep</code>, as it would commonly be described as <code>g/re/p</code>, where <code>re</code> stands for ""regular expression"".</p>
","100"
"How can I get a newer version of Vim on Ubuntu?","8610","","<p>Ubuntu's packages can be pretty old, but for some desktop programs (like Vim) I'd much rather have the latest version, as newer versions often fix various bugs.</p>

<p>How can I get a reasonably recent Vim version on Ubuntu?</p>
","<p>You have three different options:</p>

<p>Wait for the newest versions to be added to the distribution packages. Note that you might want to learn a new language or build a ship with your bare hands while you wait. </p>

<p>If waiting several years is not good for you then you have the following two options:</p>

<ul>
<li>Use a PPA containing the latest version:

<ul>
<li>Pros:

<ul>
<li>Easy to do.</li>
<li>Totally automated.</li>
<li>Let you install Vim as any other software.</li>
</ul></li>
<li>Cons:

<ul>
<li>You basically grant root privileges to a complete stranger.</li>
<li>This method only works on Ubuntu and the derived distributions using PPA system.</li>
</ul></li>
</ul></li>
<li>Build Vim from sources:

<ul>
<li>Pros:

<ul>
<li>You get a fine tuning of the options you enable (gui, Python/Lua support, etc.).</li>
<li>You get the bleeding edge version and don't need any third party maintainer to get it.</li>
<li>It's always useful to learn how to compile a software from sources.</li>
<li>This is a distribution agnostic method.</li>
</ul></li>
<li>Cons:

<ul>
<li>Not as automated as the PPA option.</li>
<li>Can be frightening for a new user.</li>
</ul></li>
</ul></li>
</ul>

<p>In both case here is a procedure for these options:</p>

<hr>

<h2>PPA</h2>

<p>Here is an online tutorial on <a href=""http://tipsonubuntu.com/2016/09/13/vim-8-0-released-install-ubuntu-16-04/"" rel=""noreferrer"">tipsonubuntu.com</a> (Thanks @joeytwiddle who suggested it in the comments).</p>

<p>First open a terminal and use the following command. This will add the Personal Packet Archive (PPA) maintained by joathonf to you repos and let Ubuntu know where to look for Vim:</p>

<pre><code>sudo add-apt-repository ppa:jonathonf/vim
</code></pre>

<p><em>I'll repeat here that doing this give the root privileges to the scripts in this PPA, do it only if you trust it</em>. You may want to read <a href=""https://askubuntu.com/q/35629/255332"">are PPA's safe to add to my system and what are some “red flags” to watch out for?</a> and <a href=""https://askubuntu.com/q/7662/255332"">is there any guarantee that software from Launchpad PPAs is free from viruses and backdoor threats?</a>.</p>

<p>Update the packet list so Ubuntu will look in the PPA to find the Vim files:</p>

<pre><code>sudo apt update
</code></pre>

<p>Finally install vim:</p>

<pre><code>sudo apt install vim
</code></pre>

<p>And tada! Vim is installed. Note that you can also do that from the GUI package manager.</p>

<p>Note that this is not the only PPA available with newer Vim versions, you can use your favourite search engine to find more (and <em>do</em> remember you are trusting some stranger from the internet with root access to your system).</p>

<hr>

<h2>Building from sources</h2>

<p>A second option is to build Vim from sources. This implies some additional manipulation and can be frightening for a new user, but it is the best way to get the lasted build.</p>

<p>There are several online resources to guide you through this procedure:</p>

<ul>
<li><a href=""http://www.vim.org/git.php"" rel=""noreferrer"">The official Vim's website</a></li>
<li>The plugin YouCompleteMe has <a href=""https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"" rel=""noreferrer"">a really complete wiki page</a> with a detailed installation procedure which can be interesting from some corner cases.</li>
<li>Wikia also <a href=""http://vim.wikia.com/wiki/Building_Vim"" rel=""noreferrer"">has a page about that</a></li>
</ul>

<p>A general procedure is the following, you might need to tweak it to fit your needs but the main idea is here:</p>

<p>First you might need to install some dependencies. For example use this command (suggested by YouCompleteMe wiki):</p>

<pre><code>sudo apt-get update
sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
    libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
    libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
    python3-dev ruby-dev lua5.1 lua5.1-dev libperl-dev git
</code></pre>

<p><em>Note that you maybe won't need everything: for example if you won't use Lua, do not include <code>lua5.1-dev</code> to the list</em>.</p>

<p><strong>Edit</strong> Instead of using the previous <code>apt-get install</code> command you can use the following. It has the advantage of automatically handling the dependencies you need:</p>

<pre><code>sudo apt-get build-dep vim
</code></pre>

<p>Then get the sources on your computer (you'll need the <code>git</code> command installed with <code>apt-get install git</code>):</p>

<pre><code>git clone https://github.com/vim/vim.git
</code></pre>

<p>Go to this directory and 'pull' the last changes:</p>

<pre><code>cd vim
git pull
</code></pre>

<p><em>If you have an error on <code>git pull</code> because you already made changes you can 'stash' your modifications (i.e. remove them temporarily), pull the changes and then restore your modifications. If you did so I'll assume that you are familiar with git and won't provide the procedure to follow (it is detailed in the vim.org doc).</em></p>

<p>You can then build Vim as you would build any other software from sources. The file <a href=""https://github.com/vim/vim/blob/master/src/INSTALL"" rel=""noreferrer"">src/INSTALL</a> should provide you with the information you need to compile Vim.</p>

<p>A regular workflow would begin with:</p>

<pre><code>./configure --with-features=huge --enable-gui=auto
</code></pre>

<p><em>Remove <code>--enable-gui</code> if you don't want gVim</em>.</p>

<p>If you don't have root access on the machine you're installing Vim, you might want to add the <code>--prefix</code> option which allows you to use a directory where you have access rights. For example you could use:</p>

<pre><code>./configure --with-features=huge --enable-gui=auto --prefix=$HOME/local/vim
</code></pre>

<p>The <code>configure</code> script can take a lot of arguments to tune which features you want to enable. Running it takes a while.  While running, it prints messages telling which features it is checking for.</p>

<p>Once it is configured, you can compile the program with:</p>

<pre><code>make
</code></pre>

<p>An optional command exists to run some self-checks (<em>don't ask me what they do exactly I always skip them :-)</em>):</p>

<pre><code>make check
</code></pre>

<p>Finally install Vim to <code>/usr/local/</code> (this command requires the root privileges):</p>

<pre><code>sudo make install
</code></pre>

<p>To remove the now useless files which were created for the compilation you can then run:</p>

<pre><code>make clean
make distclean
</code></pre>

<p>And here you are with a fresh Vim install.</p>

<p>You will probably want to remove any Vim you've installed from the Ubuntu repo, but you don't <em>need</em> to. By default, Vim will install to <code>/usr/local/</code>, rather than <code>/usr/</code>. Just make sure you're running the correct Vim version (i.e. <code>/usr/local/bin/vim</code>, and not <code>/usr/bin/vim</code>).</p>
","10827"
"Exit from Terminal mode in Neovim","8565","","<p>I can't figure out how to go back to <code>Normal</code> mode after entering <code>Terminal</code> in <code>Insert</code> mode...</p>

<p>Escape just doesn't seem to work.</p>

<p>Any idea ?</p>
","<p>You are supposed to press <code>&lt;C-\&gt;&lt;C-n&gt;</code>.</p>

<p>See <code>:help terminal-emulator-input</code> for a mapping suggestion.</p>
","4922"
"Can I jump to a function declaration or definition in a multiple C++ source files project?","8520","","<p>Can I jump to a function declaration or definition in a multiple C++ source files project?</p>

<p>Lets say I have a header file <code>foo.hpp</code>:</p>

<pre><code>int bar();
</code></pre>

<p>and a source file <code>foo.cpp</code>:</p>

<pre><code>#include ""foo.hpp""
int bar() { return 42; }
</code></pre>

<p>and a main file <code>main.cpp</code>:</p>

<pre><code>#include ""foo.hpp""
int main() { bar(); return 0; }
</code></pre>

<p>Can vim find both the definition and declaration of the function <code>bar()</code> from the <code>main</code> function?</p>
","<p>Exuberant ctags is the simplest way to achieve this. 
Under GNU/Linux (e.g. Ubuntu or Debian) you should be able to just do</p>

<pre><code>sudo apt-get install exuberant-ctags
</code></pre>

<p>(For OSX ""$ brew install ctags"" should suffice; for Windows you might want to visit <a href=""http://ctags.sourceforge.net/"">http://ctags.sourceforge.net/</a> and download the standalone executable)</p>

<p>Then navigate to your project's root folder and run </p>

<pre><code>ctags -R --exclude=.git .
</code></pre>

<p>This will scan your entire project and create a ./tags file which vim will automatically use to provide you with the ability to jump to functions at the press of a key. Namely:</p>

<pre><code>Ctrl + ]
</code></pre>

<p>with your cursor placed on the function you want to see the implementation for.
There are other combinations and many command mode functions that let you navigate through your code by ctags as well (e.g. <kbd>Ctrl</kbd>+<kbd>t</kbd> to jump to older tag stack entry). See <code>:help 29.1</code> for an overview.</p>

<p><strong>Note</strong> that you have to re-run ctags for each significant change in the code and let it re-index your project. You can either do that manually, or teach vim to do it on hotkey or on write. </p>

<p><em>Hint:</em> if you make extensive use of ctags, maybe the vim-taglist (<a href=""http://vim-taglist.sourceforge.net"">http://vim-taglist.sourceforge.net</a>) plugin is worth a look as well. It gives you an IDE-style outline with a list of all functions for that class/file.</p>
","2062"
"How to diff and merge two directories?","8453","","<p>I know that <a href=""https://vi.stackexchange.com/questions/625/how-do-i-use-vim-as-a-diff-tool"">Vim's diff mode</a> (<code>vimdiff</code>) allows us to compare the contents of two (or more) files.</p>

<p>But it is possible to compare content of multiple files across directories in order to merge two directories recursively (like DiffMerge and similar tools)?</p>
","<p>There is <a href=""http://www.vim.org/scripts/script.php?script_id=102"" rel=""noreferrer"">DirDiff.vim</a> plugin (<a href=""https://github.com/will133/vim-dirdiff"" rel=""noreferrer"">GitHub</a>) to diff and merge two directories recursively.</p>

<blockquote>
  <p>It performs a recursive diff on two directories and generate a diff
  ""window"". Based on that window you can perform various diff operations
  such as opening two files in Vim's diff mode, copy the file or
  directory recursively to the other, or remove the directory tree from
  the source directory.</p>
</blockquote>

<p>Usage:</p>

<pre><code>:DirDiff &lt;dir1&gt; &lt;dir2&gt;
</code></pre>

<p>For more information, check <code>:h dirdiff</code>.</p>

<p>See the screenshot:</p>

<p><a href=""https://github.com/will133/vim-dirdiff#vim-dirdiff"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/CM7U2.png"" alt=""wlee screenshot""></a></p>

<p>See also:</p>

<ul>
<li>(video) <a href=""http://www.youtube.com/watch?v=LQZBiHRo_UU"" rel=""noreferrer"">DirDiff.vim, diff and merge two directories recursively</a> by Yu-Jie Lin at YouTube</li>
<li><p><a href=""http://dedm.livejournal.com/115224.html"" rel=""noreferrer"">Recursevely compare and merge directories?</a> at dedm blog</p>

<p><a href=""http://dedm.livejournal.com/115224.html"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/LHG23.png"" alt=""two random directories""></a></p></li>
</ul>
","790"
"How to enable +python feature in vim","8201","","<p>I want to install a vim plugin, this plugin needs a <code>+python</code> feature, so when I open vim and type <code>:version</code> it displays <code>-python</code>. How can I make it enable?. </p>

<p>Thanks.</p>
","<p>You need to compile Vim yourself or get a prebuilt Vim package that was compiled with Python support. </p>

<p>If you're on a Debian based system, the easiest way is to download the vim-gnome or vim-gtk package from <code>apt</code> (<code>apt install vim-gtk</code> for instance). Other distros might have a similar package with python support built in.</p>

<p>If you'd prefer to compile Vim yourself, download the Vim repository and pass in <code>--enable-pythoninterp</code> like so:</p>

<pre><code>cd /tmp &amp;&amp; git clone https://github.com/vim/vim.git &amp;&amp; cd vim
./configure --enable-pythoninterp --prefix=/usr
make &amp;&amp; sudo make install
</code></pre>

<p>On Windows, you can get the Gvim package from <a href=""https://github.com/vim/vim-win32-installer/releases/tag/v8.0.0003"" rel=""noreferrer"">here</a> which includes Python support.</p>
","11527"
"How can I install 64-bit Vim on Windows?","8129","","<p>Vim's <a href=""http://www.vim.org/download.php#pc"">Downloads page</a> says the 64-bit version is discontinued:</p>

<blockquote>
  <h3>Win64</h3>
  
  <p>The 32-bit version of Vim runs fine on 64-bit windows. There was a
  64-bit binary, but it wasn't used much and maintenance stopped.</p>
</blockquote>

<p>Which is fine, I suppose, except that 32-bit Vim doesn't pick up 64-bit Python. <code>has('python')</code>? <code>0</code>.</p>

<p>What are my options for installing 64-bit Vim specifically (including GVim) on Windows, with as much plugin support as possible?</p>

<hr>

<p>The binary from Cream is also apparently 32-bit (see the <a href=""http://sourceforge.net/projects/cream/files/Vim/7.4.1063/gvim-7-4-1063_version.txt/download""><code>version.txt</code></a>). As for Cygwin, I'm not sure about getting GVim running in it (<a href=""http://cs.nyu.edu/~yap/prog/cygwin/FAQs.html#gvim"">it apparently needs <code>DISPLAY</code> set</a>, which would indicate the need for X server, which is yet another complication over the complexity of Cygwin itself).</p>

<p>I have <a href=""http://www.mingw.org/"">MinGW</a> installed (and it is rather outdated, admittedly), so I could make some attempt at compiling it myself.</p>

<p>The Vim Wikia suggests <a href=""https://tuxproject.de/projects/vim/x64/"">https://tuxproject.de/projects/vim/x64/</a>, which has a rather ominous instruction:</p>

<blockquote>
  <p>You'll need to copy the appropriate DLL files to your Vim directory to make them work. They're not included.</p>
</blockquote>

<p>To my Vim directory? Will <a href=""https://tuxproject.de"">https://tuxproject.de</a>'s build not pick up Python installed elsewhere?</p>

<hr>

<p>So, I'd like to install 64-bit Vim so that:</p>

<ul>
<li>it works out-of-the-box with Python installed using the official Python binaries (preferably both 2 and 3, if that's possible, and the latest versions)</li>
<li>it is easy to keep updated</li>
<li>the requirements for having it installed are a minimum (... so a Cygwin installation, if workable, should be minimal)</li>
</ul>
","<p>I think tuxproject.de is the way to go and I think, it will pick up Python dll, if they are in your path and are also 64bit. The easy way is to copy them to your .vim directory, to make sure vim will find them when trying to load them.</p>

<p>There is another alternative (and I really hope this will become official). We are trying to build binary Vims as part of the CI testing with appveyor, so that eventually for every patch there will be a corresponding Windows Vim version 32bit and 64bit available. Current snapshots are available <a href=""https://ci.appveyor.com/project/k-takata/vim/history"" rel=""noreferrer"">here</a> and <a href=""https://github.com/chrisbra/vim/releases"" rel=""noreferrer"">here</a>. Note they are unofficial and not regularly maintained. But I really hope, something like this will be available with the not too far away release of Vim 7.5</p>

<p><strong>05.02.2016</strong> We have now un-official (or almost official) binaries in the new repository <a href=""https://github.com/vim/vim-win32-installer"" rel=""noreferrer"">vim-win32-installer</a>. Feedback is appreciated.</p>
","6098"
"How can I clear word highlighting in the current document (e.g. such as after searching for a word)?","8072","","<p>When you search for a word in a file with something like <code>/console.log</code>, all of the instances of <code>console.log</code> are highlighted.</p>

<p>When you're no longer interested in these, the highlighting can be distracting. My current strategy for removing the highlighting is to do something like <code>/asntehua</code>. Is there a proper way to remove this word highlighting?</p>
","<p>As an alternative to <code>:noh</code>, I like to do <code>:let @/=""""</code> mapped to a keyboard shortcut.</p>

<p>The difference is that <code>:noh</code> leaves the search term in the search register, so <code>n</code> and <code>N</code> in normal mode resume the search by jumping to the next/previous match and re-highlighting.
Using <code>:let @/=""""</code>, on the other hand, causes the message <code>E25: No previous regular expression</code> and <em>leaves your cursor where it was</em>, which is especially convenient if you don't yet know about <code>ctrl</code>-<code>o</code> yet and accidentally hit <code>n</code>.</p>

<p>This can also be used the other way. To cause vim to highlight some text without jumping to it, you can <code>:let @/=""some text""</code></p>

<p>In these expressions, @ lets you refer to a register, and @/ is the register holding the last search pattern.</p>
","252"
"How can I change the colour of the line highlighted with the 'cursorline' option?","7895","","<p>I can highlight the current line like this <code>:set cursorline</code>, which underlines the current line.</p>

<p><img src=""https://i.stack.imgur.com/LS4qN.png"" alt=""enter image description here""></p>

<p>However I would like to highlight the entire line in a lighter color. How can I achieve this look?</p>

<p><img src=""https://i.stack.imgur.com/w84R6.png"" alt=""enter image description here""></p>
","<p>According to <a href=""http://vimhelp.appspot.com/options.txt.html#%27cursorline%27""><code>:help cursorline</code></a>, the highlight label is <code>CursorLine</code>. So you can try:</p>

<pre><code>:highlight CursorLine ctermbg=LightBlue
</code></pre>

<p>See <code>:help highlight-cterm</code> for more options.</p>

<p>Experiment with the colours to see which suits you. </p>
","2675"
"How can I show relative line numbers?","7821","","<p>A lot of vim commands can take a number referring to the number of lines that the command will act on. </p>

<p>Is it possible to show the line numbers relative to the current line? Something like the following:</p>

<pre><code>3: some text here
2: more text
1: This is the line above where the cursor is
0: The cursor is on this line
1: This is the line after the cursor
2: More text here
</code></pre>
","<p>I just replied to a similar question here: <a href=""https://vi.stackexchange.com/questions/1/how-can-i-add-line-numbers-to-vim"">How can I add line numbers to Vim?</a></p>

<p>Beginning with version 7.3, you can use the following:</p>

<pre><code>set relativenumber
</code></pre>

<p>I actually use both <code>relativenumber</code> and <code>number</code> in my vimrc which will use relative numbers for all lines except the current line.</p>

<pre><code>set number                     "" Show current line number
set relativenumber             "" Show relative line numbers
</code></pre>
","8"
"What is the difference between autoindent and smartindent in vimrc?","7366","","<p>I read the wiki entry on <a href=""http://vim.wikia.com/wiki/Indenting_source_code"" rel=""noreferrer"">vim source code indentation</a></p>

<p>I still can't understand the difference between <code>autoindent</code> and <code>smartindent</code></p>

<p>It seems they do the same thing, copy the indentation level to next line when you press <code>enter</code>.</p>
","<p><code>autoindent</code> essentially tells vim to apply the indentation of the current line to the next (created by pressing <kbd>enter</kbd> in <em>insert</em> mode or with <kbd>O</kbd> or <kbd>o</kbd> in <em>normal</em> mode.</p>

<p><code>smartindent</code> reacts to the syntax/style of the code you are editing (especially for C). When having it <em>on</em> you also should have <code>autoindent</code> <em>on</em>.</p>

<p><code>:help autoindent</code> also mentions two alternative settings: <code>cindent</code> and <code>indentexpr</code>, both of which make vim ignore the value of <code>smartindent</code>.</p>
","5844"
"How do I know the patch version of my vim?","7348","","<p>I have vim 7.4 installed, but I'm not sure what patch level it was at when I installed it. How do I check?</p>

<pre><code>vim --version
</code></pre>

<p>Gives </p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 15 2014 16:18:44)
....
</code></pre>

<p>But it doesn't give the patch level or a minor version number.</p>
","<p>You seem to simply have an unpatched version of vim, otherwise the <code>:version</code> command or the <code>--version</code> parameter would list the patches on the second line. For example on my machine it says:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Sep 10 2014 09:36:33)
Included patches: 1-207, 209-355, 357-430
</code></pre>

<p>This is ""patchlevel"" 430, but it skips patches 208 &amp; 356.</p>

<p>Vim doesn't have a ""minor version number"" beyond <em>major.minor</em>; although I believe that some distributions may use the ""patchlevel"" as such.</p>

<hr>

<p>As shown above, not all patches may be included, so if you want to use this value you can't just check if a number is higher than a certain version.</p>

<p>Usually, the best way is to use <code>has(""patch-7.4-399"")</code>; this will return true if:</p>

<ul>
<li>We're running Vim 7.4 with patch 399 included.</li>
<li>We're running Vim 7.5 or later.</li>
</ul>

<p>You can also use the form of <code>has('patch399')</code>, which is typically used like:</p>

<pre><code>if v:version == 704 &amp;&amp; has('patch399')
</code></pre>

<p>But be aware; this will be <em>false</em> for Vim 7.5; use this only in very specific cases.</p>

<p>See <a href=""http://vimhelp.appspot.com/eval.txt.html#feature-list""><code>:help feature-list</code></a> for some more information.</p>

<hr>

<p>I can't find a way to list all the included patches, other than redirecting <code>:version</code> and parsing that ... I'm also not sure how this would be useful anyway, as <code>has()</code> should be enough :-)</p>
","2467"
"How to join lines without producing a space?","7310","","<p>The standard <kbd>J</kbd> command for joining lines replaces the newline character(s) with a space. It's useful when editing 'literature' but can be troublesome if I, say, edit a hex dump by hand if I forget to remove the superfluous space.</p>

<p>Is there a quick &amp; easy method to join two lines without producing a space between them?</p>
","<p>The <code>gJ</code> combination does this; from <code>:help gJ</code>:</p>

<blockquote>
  <p>Join [count] lines, with a minimum of two lines. Don't insert or remove any spaces. </p>
</blockquote>

<p>You could rebind it to <code>J</code>, if you wanted to save a keystroke:</p>

<pre><code>:nnoremap J gJ
</code></pre>

<p>Note that this doesn't <em>remove</em> any spaces, so if either the current line ends
with a space or next line starts with one or more spaces, <em>they will be left as
is</em>.</p>

<p>So:</p>

<pre><code>Hello
    world
</code></pre>

<p>Becomes:</p>

<pre><code>Hello    world
</code></pre>

<p>We <em>could</em> use <code>Jx</code> in this case, then it will be <code>Helloworld</code>, but that won't work in all cases; from the help:</p>

<blockquote>
  <p>Join the highlighted lines, with a minimum of two lines.  Remove the indent and insert up to two
  spaces</p>
  
  <p>[...]</p>
  
  <p>These commands, except ""gJ"", insert one space in place of the  unless
  there is trailing white space or the next line starts with a ')'.</p>
</blockquote>

<p>So in some cases more than one space or no space is inserted. As far as I can
see, there is no easy way to change this behaviour; I created a function to
modify <code>gJ</code> to always join without spaces:</p>

<pre><code>"" Like gJ, but always remove spaces
fun! JoinSpaceless()
    execute 'normal gJ'

    "" Character under cursor is whitespace?
    if matchstr(getline('.'), '\%' . col('.') . 'c.') =~ '\s'
        "" When remove it!
        execute 'normal dw'
    endif
endfun

"" Map it to a key
nnoremap &lt;Leader&gt;J :call JoinSpaceless()&lt;CR&gt;
</code></pre>

<p>See also: <code>:help J</code>, <code>:help 'joinspaces'</code></p>
","440"
"Why does vim use hjkl for cursor keys?","7255","","<p>Why use the keys <kbd>hjkl</kbd> on the same line instead of keys in a triangle like <kbd>wasd</kbd> for moving on video games?</p>

<p>Why not something equivalent with right hand, like <kbd>ijkl</kbd> or <kbd>pl;'</kbd>?</p>
","<p>From <a href=""http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/"">http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/</a>:</p>

<blockquote>
  <p>When Bill Joy created the vi text editor he used the ADM-3A terminal, which had the arrows on hjkl keys. Naturally he reused the same keys and the rest is history!</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/K4ZfL.jpg""><img src=""https://i.stack.imgur.com/K4ZfL.jpg"" alt=""enter image description here""></a></p>
","9315"
"What are the differences between :wq<cr> :x<cr> and ZZ when exiting vim?","7254","","<p>Vi and Vim, as all of you know, have many synonyms. There are three ways I know of to save the file and exit Vim and Vi. These are <em>:wq</em> <strong>&lt;cr&gt;</strong>, <em>:x</em> <strong>&lt;cr&gt;</strong> and <em>ZZ</em>. I have heard that these are different in some way.</p>

<p>Are there any practical differences between using:</p>

<p><kbd>:</kbd><kbd>x</kbd><kbd>&lt;cr&gt;</kbd></p>

<p><kbd>:</kbd><kbd>w</kbd><kbd>q</kbd><kbd>&lt;cr&gt;</kbd></p>

<p>or</p>

<p><kbd>Z</kbd><kbd>Z</kbd></p>

<p>to save file and exit Vim and Vi?</p>
","<p>From Vim's documentation, <a href=""http://vimhelp.appspot.com/editing.txt.html#%3Ax""><code>:x</code></a> and <a href=""http://vimhelp.appspot.com/editing.txt.html#ZZ""><code>ZZ</code></a> are equivalent; they only save the file if it has been modified, then quit Vim:</p>

<pre><code>Write current file, if modified, and quit (same as "":x"").  
(Note: If there are several windows for the
current file, the file is written if it was modified and the window is closed).
</code></pre>

<p><a href=""http://vimhelp.appspot.com/editing.txt.html#%3Awq""><code>:wq</code></a> on the other hand always writes the file and quits Vim. </p>
","5726"
"What is `softtabstop` used for?","7090","","<p>I've been aware of these tab related settings in Vim:</p>

<ul>
<li><code>ts</code></li>
<li><code>sw</code></li>
<li><code>expandtab</code></li>
<li><code>smarttab</code></li>
<li><code>sts</code></li>
</ul>

<p>My normal setting is <code>set ts=4 sw=4 expandtab smarttab</code>. </p>

<p>But according to <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27sts%27"" rel=""noreferrer""><code>sts</code> documentation</a>, if <code>expandtab</code> is not set, it will try to use a combination of spaces and tabs to make up of the desired number of blanks for a tab size. </p>

<p>I can't really think of a useful scenario for this setting: Why would someone wants to have a fixed number of tabs and spaces that may just mess things up? The only advantage of doing this that I can think of is to reduce the number of characters and thus reduce the file size, which seems weird to me.</p>
","<p>As the <code>softtabstop</code> documention mentions, it's useful if you want to keep the default tab stop size of 8, but edit a file as if the tab stop size was some other value. For example, if you wanted an indentation level of 4 while editing code, but some comments had tab-indented text such as a table that depended on a tab stop of 8, you could set <code>sts</code> to <code>4</code>.</p>

<p>One difference I notice between your tab settings (<code>set ts=4 sw=4 expandtab smarttab</code>) and the use of <code>sts</code> (e.g. <code>set ts=8 sts=4</code>) is when backspacing over spaces in the middle of a line of text. For example, consider the following line of text, where <code>·</code> indicates a space:</p>

<pre><code>some·text·······more·text
</code></pre>

<p>In insert mode, move the cursor just before the <code>m</code> of <code>more text</code>. With your settings, pressing Backspace deletes a single space. But while using <code>sts=4</code>, Backspace deletes all the way to the previous tab stop, as it would behave if the spaces were a tab character instead.</p>

<p>You can set <code>sts=4</code> in addition to your settings and get the mid-line backspace behavior while not mixing tabs and spaces. Tabs will be expanded to four spaces, but you can backspace over a range of spaces in the middle of a line.</p>
","4250"
"How do I debug my vimrc file?","6876","","<p>I have a problem in Vim, and I think it may be in my vimrc file (or have been told it could be my vimrc file).</p>

<p>How do I verify this? And if it is my vimrc file, how do I know <em>what exactly</em> it is?</p>
","<p>The first thing you want to do is to start Vim with the default settings:</p>

<pre><code>vim -u NONE -U NONE -N
</code></pre>

<p>The <code>-u NONE</code> prevents Vim from loading your vimrc, <code>-U NONE</code> prevents Vim from
loading your gvimrc, and <code>-N</code> tells Vim to use no-compatible mode (this isn't
required, but most Vim users are not used to ""compatible"" mode).
Note that the <code>NONE</code> is <em>required</em> to be in all-caps.</p>

<p>In Windows you can <a href=""https://superuser.com/questions/29569/how-to-add-command-line-options-to-shortcut"">add these flags by creating a new shortcut</a><sup>1</sup>.</p>

<ul>
<li><p>If the problem stays, then you know it's <em>not</em> something in your vimrc.</p></li>
<li><p>If the problem disappears, you now it's caused by <em>something</em> in your vimrc
file.</p></li>
</ul>

<h1>Debugging a plugin</h1>

<p>If you want to ask a question about a plugin you want to load as little as
possible but <em>still</em> load the plugin; you can easily do this with Vim's packages
feature. This requires Vim 8 or a reasonably recent version of Neovim.</p>

<ol>
<li><p>Create a new empty directory; we'll use the <code>~/plugin</code> path in this example.
Now put the plugin in the regular <code>pack/plugins/start/$name</code> directory. For
example:</p>

<pre><code>git clone https://github.com/fatih/vim-go.git ~/plugin/pack/plugins/start/vim-go
</code></pre></li>
<li><p>Create a <code>test-vimrc</code> file with the following contents; this will ensure that
Vim will load plugins from the <code>~/plugin</code> directory and <em>not</em> the <code>~/.vim</code>
directory:</p>

<pre><code>set nocompatible
set packpath=~/plugin,/usr/share/vim/vimfiles,/usr/share/vim/vim80,/usr/share/vim/vimfiles/after,~/plugin/after
packloadall!

syntax on
filetype plugin indent on
</code></pre></li>
<li><p>Start Vim with:</p>

<pre><code>vim -U NONE -u ~/test-vimrc
</code></pre>

<p>You now have a minimal vimrc with just this single plugin.</p></li>
</ol>

<h1>It's not my vimrc!</h1>

<p>Hurray! Go and ask your question. Be sure to mention that you tried starting Vim
without a vimrc file!</p>

<h1>So it's my vimrc, now what?</h1>

<p>If you haven't already, you probably want to save a backup copy of your vimrc
file first.</p>

<h2>Check the plugins</h2>

<p>The next thing you probably want to do is disable all plugins first; plugins can
alter quite a bit in Vim. If this fixes the problem, then try to find out
<em>which</em> plugin by re-enabling them one-by-one. After you've found out which
plugin exactly causes the problem, you can try &amp; fix it by reading this plugin's
documentation, and/or by asking a question tagged with <code>plugin-&lt;name&gt;</code>.</p>

<p>If it's <em>not</em> a plugin, and you don't have <em>any</em> idea what's causing your
problem, then it's a trial-and-error procedure. Comment out one or more lines in
your vimrc, start Vim, check if the problem occurs, and repeat this procedure
until the problem stops occurring. The fastest way of doing this is:</p>

<ol>
<li>Comment out (or remove) about half your vimrc file.</li>
<li>Restart Vim, or open a new Vim (reloading the vimrc is <em>not</em> good enough, as
settings aren't unset).</li>
<li>Is the problem now gone? Put back the part you removed out (keeping Vim
open and using undo is useful here) and repeat step 1 on the part you added
back.</li>
<li>Does the problem still occur? Go to step 1.</li>
</ol>

<p>In the end you should have a single option or a combination of a few options
that causes your problem. You can find out more about any option in Vim by
using:</p>

<pre><code>:help 'option_name'
</code></pre>

<p>The quotes are important here, it <em>usually</em> works without them, but sometimes
you end up on the wrong page if you omit them.</p>

<p>If you're still confused after reading the help page, you know where to ask a
question ;-)</p>

<hr>

<p><strong>Footnotes</strong></p>

<p><sup>1</sup> For example: on 64 bit Windows, the shortcut would look something like this: <code>""C:\Program Files (x86)\Vim\vim74\vim.exe"" -u NONE -U NONE -N</code>. To create it, right click in File Explorer where you want the shortcut, then select New -> Shortcut and paste the shortcut text. You may need to change the Vim path if your Vim is installed in another location.</p>
","2004"
"Can I issue an interactive shell in Vim window?","6822","","<p>I know I can <code>:!</code> or <code>:r!</code> to execute external command and optionally insert its output into text. I can even perform <code>:!sh</code> and I'll spawn a shell that will live until I exit it - but while the shell is active, Vim is 'asleep' and inaccessible. I must quit the shell, and spawn a new one if I want to return to Vim for a moment - not very useful.</p>

<p>I can access shell on the opposite end, by suspending Vim with <kbd>^Z</kbd> and manage the Vim job through <code>bg</code>, <code>fg</code> and <code>jobs</code>. This makes more sense but is very cumbersome in the long run. I can use <code>Screen</code> if it's available (it often isn't), or open several windows of my window manager (and ssh to target host from each of them in sequence, to have both vim and shell on the remote host, cumbersome again.)</p>

<p>It would be neatest if Vim allowed me to open a shell session and keep it, say, in one of its (internal) windows, or allow me to switch to it and back. Is something like this possible?</p>
","<p>There are a couple of vim plugins that allow for this. I use <a href=""https://code.google.com/p/conque/"">Conque</a> (<a href=""https://github.com/jewes/Conque-Shell"">Github</a>). </p>

<p>After putting it in your plugins directory all you have to do is:</p>

<pre><code>:ConqueTermSplit bash
</code></pre>

<p>And you will have an interactive bash shell in vim. You can then use your regular vim gestures to do anything else you may want to do in the window. </p>

<p>Also the other plugin is <a href=""https://github.com/Shougo/vimshell.vim"">vimshell</a>.</p>
","517"
"How can I add line numbers to Vim?","6806","","<p>I'd like to see line numbers, starting with <code>1</code> at the top, on the left side of Vim. Ideally it would look like this:</p>

<pre><code>1 | foo = Foo.new
2 | bar = Bar.new
3 | baz = foo.baz(bar)
...
10| test = AwesomeSauce.test
</code></pre>

<p>How can I do this in Vim?</p>
","<p>You have two options:
<code>set number</code> for regular line numbers</p>

<p>And also
<code>set relativenumber</code> which will show relative line numbers. i.e. current line is always 0. This is useful for moving up/down N number of lines using <code>5j</code> for example.</p>

<p>What is cool is that you can combine them. I have the following in my <code>.vimrc</code></p>

<pre><code>set number                     "" Show current line number
set relativenumber             "" Show relative line numbers
</code></pre>

<p>This will make it use relative numbers for all lines except the current line, which will show you the actual number.</p>
","5"
"Can I justify text in Vim?","6724","","<p>The only reason why I'd ever edit a text file in Pico or Nano, and not in Vim was its ""Justify"" command <kbd>^J</kbd>. It would reformat a paragraph of text, creating line breaks at word breaks so that the text would float on fixed width screen nicely - format the text to fit predefined 80 columns, creating line breaks only between words. As limited the function was, it was very useful, whether to format lengthy comment blocks, documentation files, or just replacing an endless line of parameters with something more readable.</p>

<p>Can I do something like that in Vim?</p>
","<p>You can use the <code>gq</code> or <code>gw</code> operators combined with a motion command. By default, it uses the <code>fmt</code> program (in Linux) to format the given text. However, to the best of my knowledge, it does not justify the lines so you will get ragged right margins.</p>

<p>The way I use it is to <code>gwip</code> (normal mode) with the cursor on a paragraph. This will format the current paragraph keeping the cursor on the same position. I use it this way to make sure that only the current paragraph is formatted. When editing a text file, issuing <code>gwG</code> (normal mode) at the begining of the file will format the whole text. As a good practice, be sure to leave at least one blank line between paragraphs.</p>

<p>There is a lot of configuration that can be done. To begin with, here are some relevant help: <code>:h gq</code>, <code>:h gw</code>, <code>:h fo</code> (format options), <code>:h fp</code> (format program), <code>:h fo-table</code> (an explanation of the possible options).</p>
","511"
"Why am I getting a ""E488: Trailing characters"" error on this custom command?","6399","","<p>I have a <code>~/.vimrc</code> that contains just this:</p>

<pre><code>function! NewFile()
        let filename = input(""Filename:"")
endfunction
command NewFile :call NewFile()&lt;cr&gt;
</code></pre>

<p>(of course my real <code>.vimrc</code> is more complex, but I've recreated this small test case with no plugins etc.)</p>

<p>My intent is to write a function that supports creating a new file according to a template. Some input items will be asked from the vi user, such as the name of the file. </p>

<p>The function isn't that sophisticated yet (understatement!) - all it does is ask for the filename. When I use the command <code>NewFile</code> from the vi command line, it starts, but then once I enter the filename and hit Enter, I get the error:</p>

<pre><code>E488: Trailing characters
</code></pre>

<p>Why is that? What am I doing wrong?</p>
","<p>Remove the trailing <code>&lt;cr&gt;</code>
That is only needed for mappings, but not for commands.</p>
","4690"
"What is the easiest way to insert Unicode characters into a document?","6350","","<p>When writing documents occasionally I want to insert Unicode characters into the text. Sometimes I know the character code and sometimes I look it up on the web.</p>

<p>Currently I go to insert mode and then use <code>&lt;Ctrl-V&gt;u{four digit hex number}</code>, which can be very laborious. Is there an easier way of inserting the characters (maybe some form of pasting)?</p>
","<p><strong>Preface</strong>: This has nothing to do with Vim as such, but I will show you what I consider to be the ""best"" way to insert these characters by far; Vim's digraph system is more or less the same, but it only works with Vim. This will work in <em>all</em> applications.</p>

<p><strong>This will only work for X11 systems</strong> (Linux, BSD, etc.). <strong>For Windows, there's <a href=""http://sourceforge.net/projects/allchars/"" rel=""nofollow noreferrer"">AllChars</a></strong>. It hasn't been updated in a while, but I can confirm it works well with Windows&nbsp;7 (used it at my previous job). I believe OS&nbsp;X also has good facilities to do this built in the OS; if you use OS&nbsp;X, I encourage you to check them out, but as I've never really used OS&nbsp;X I can't point you to them.</p>

<p>The below is (part of) a draft weblog article I have in the pipeline. Unfortunately a truly comprehensive guide doesn't exist (yet), and the below doesn't describe <em>all</em> the features it offers (for example, some parts about dead keys are missing) and could be better written in some parts, but I think it's still ""useful enough"".</p>

<hr>

<p>A ‘compose sequence’ is pressing the <kbd>Compose</kbd> key and then one or more characters to produce some character not found on your keyboard, for example, pressing  <kbd>Compose</kbd>, immediately followed by <kbd>""</kbd> and <kbd>a</kbd> might produce an <code>ä</code>.</p>

<p>By default, <kbd>Compose</kbd> isn’t bound to any key<sup>1</sup>; the Right <kbd>Alt</kbd> key (aka. <kbd>Alt Gr</kbd>) is often used, but you set this to any key you want.</p>

<h3>Set it using xmodmap</h3>

<p>You can use <a href=""http://www.x.org/archive/current/doc/man/man1/xmodmap.1.xhtml"" rel=""nofollow noreferrer""><code>xmodmap</code></a>
to set this:</p>

<pre><code>$ xmodmap -e 'keysym Alt_R = Multi_key'     # Set it right Alt
$ xmodmap -e 'keysym Caps_Lock = Multi_key' # Set it to Caps Lock
$ xmodmap -e 'keysym F12 = Multi_key'       # You're free to use *any* key, like F12
</code></pre>

<p>You probably want to add this to your <code>~/.Xmodmap</code> file<sup>2</sup>:</p>

<pre><code>! Set compose key
keysym Alt_R = Multi_key
</code></pre>

<h3>Set it using XKB</h3>

<p>You can also set the compose key as an option to XKB with
<a href=""http://linux.die.net/man/1/setxkbmap"" rel=""nofollow noreferrer""><code>setxkbmap</code></a>:</p>

<pre><code>setxkbmap -option compose:ralt  # Right alt
setxkbmap -option compose:caps  # Caps Lock
</code></pre>

<p>To make these permanent, add the command to your X startup file, or
alternatively, you can also set it in <code>/etc/X11/xorg.conf</code>:</p>

<pre><code>Section ""InputDevice""
    Identifier ""Keyboard0""
    Driver ""kbd""
    Option ""XkbOptions"" ""compose:ralt""
    #Option ""XkbOptions"" ""compose:caps""
EndSection
</code></pre>

<p>Or, in a more ‘modern’ style, you can create a file
<code>/etc/X11/xorg.conf.d/90-compose.conf</code>:</p>

<pre><code>Section ""InputClass""
    Identifier ""Set compose key""
    MatchIsKeyboard ""on""
    Option ""XkbOptions"" ""compose:ralt""
EndSection
</code></pre>

<p>A list of possible values can be found in <a href=""http://www.dsm.fordham.edu/cgi-bin/man-cgi.pl?topic=xkeyboard-config&amp;ampsect=7"" rel=""nofollow noreferrer""><code>xkeyboard-config(7)</code></a>, section ‘Position of Compose key’<sup>3</sup>.</p>

<h2>Setting up dead keys</h2>

<p>A dead key is chiefly used to add a accent or diacritic to a letter (such as the umlaut, accent grave, etc.), although it can be used to create any character. It works by...TODO
<kbd>'</kbd></p>

<pre><code>keycode 133 = dead_greek NoSymbol SuperR

http://zuttobenkyou.wordpress.com/2011/08/24/xorg-using-the-us-international-altgr-intl-variant-keyboard-layout/
http://stackoverflow.com/questions/14922007/how-to-enter-greek-alpha-under-xor
keycode 48 = dead_grave apostrophe


&lt;dead_grave&gt; &lt;space&gt;       : ""`""   grave # GRAVE ACCENT
&lt;dead_grave&gt; &lt;dead_grave&gt;  : ""`""   grave # GRAVE ACCENT
&lt;dead_grave&gt; &lt;a&gt;           : ""À""   agrave # LATIN CAPITAL LETTER A WITH GRAVE
</code></pre>

<h2>Making a ~/.XCompose file</h2>

<p>The default Compose file if <code>~/.XCompose</code> is missing is
<code>/usr/share/X11/locale/$LANG/Compose</code>. Having your own <code>~/.XCompose</code> overrides the default, but you can still include the default with:</p>

<pre><code>include ""%L""
</code></pre>

<p>Changes to any Compose file takes effect when you restart an application. You don't need to restart X.</p>

<h3>Compose key</h3>

<p>A 'compose sequence' is pressing the <kbd>Compose</kbd> key and then one or more characters to produce some character, for example:</p>

<pre><code>&lt;Multi_key&gt; &lt;quotedbl&gt; &lt;a&gt; : ""ä"" adiaeresis
</code></pre>

<p>Means that pressing <kbd>Compose</kbd>, immediately followed by <kbd>""</kbd> and
<kbd>a</kbd> produces an <code>ä</code>.</p>

<p><code>&lt;Multi_key&gt;</code> denotes that we're using the <kbd>Compose</kbd> key.
we then follow this by a list of one or more keys, these have to be <code>keysyms</code>, which are symbolic representations of keys used by X (See the Keysyms section).</p>

<p>Followed by a <code>:</code>, followed by the result.</p>

<p>The result:</p>

<pre><code>&lt;Multi_key&gt; &lt;a&gt;          :  ""ä"" adiaeresis
&lt;Multi_key&gt; &lt;b&gt; &lt;b&gt;      :  ""ä"" adiaeresis
&lt;Multi_key&gt; &lt;c&gt; &lt;c&gt; &lt;c&gt;  :  ""ä"" adiaeresis
&lt;Multi_key&gt; Alt &lt;d&gt;      :  ""ä"" adiaeresis
&lt;Multi_key&gt; Ctrl &lt;e&gt;     :  ""ä"" adiaeresis
</code></pre>

<p><strong>Note</strong>: A Compose file is case-sensitive, so <code>A</code> is <em>not</em> the same as <code>a</code>.</p>

<h3>Dead keys</h3>

<p>TODO</p>

<h2>Make it work in GTK &amp; Qt</h2>

<p>Set the environment variables <code>GTK_IM_MODULE</code> &amp; <code>QT_IM_MODULE</code> to <code>xim</code>.</p>

<p>Bourne shell:</p>

<pre><code># Make compose key work for GTK, Qt
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim
</code></pre>

<p>C shell:</p>

<pre><code># Make compose key work for GTK, Qt
setenv GTK_IM_MODULE xim
setenv QT_IM_MODULE xim
</code></pre>

<h2>See Also</h2>

<ul>
<li><a href=""http://www.x.org/releases/X11R7.7/doc/man/man5/Compose.5.xhtml"" rel=""nofollow noreferrer"">Compose(5)</a></li>
<li><a href=""http://www.x.org/wiki/XKB/"" rel=""nofollow noreferrer"">XKB</a></li>
<li><a href=""https://wiki.edubuntu.org/ComposeKey"" rel=""nofollow noreferrer"">ComposeKey at edubuntu wiki</a></li>
<li><a href=""https://help.ubuntu.com/community/ComposeKey"" rel=""nofollow noreferrer"">ComposeKey at Ubuntu wiki</a></li>
<li><a href=""https://wiki.archlinux.org/index.php/Keyboard_Configuration_in_Xorg"" rel=""nofollow noreferrer"">ArchLinux Wiki</a></li>
<li><a href=""https://unix.stackexchange.com/questions/60884/how-to-make-compose-work-in-gtk-and-qt-apps"">How to make Compose work in GTK and Qt apps?</a></li>
<li><a href=""http://en.wikipedia.org/wiki/Compose_key"" rel=""nofollow noreferrer"">Compose key at Wikipedia</a></li>
<li><a href=""http://en.wikipedia.org/wiki/Dead_key"" rel=""nofollow noreferrer"">Dead key at Wikipedia</a></li>
<li><a href=""http://sourceforge.net/projects/allchars/"" rel=""nofollow noreferrer"">AllChars</a> (compose key for MS Windows)</li>
<li><a href=""https://help.gnome.org/users/gnome-help/stable/tips-specialchars.html.en"" rel=""nofollow noreferrer"">Enabling Compose Key in GNOME</a>.</li>
</ul>

<h2>My <code>~/.XCompose</code></h2>

<p><a href=""https://bitbucket.org/Carpetsmoker/config/src/tip/modules/x11/XCompose?at=default"" rel=""nofollow noreferrer"">This is the <code>~/.XCompose</code> that I use</a>;
I used a script to generate this, but I accidentally overwrote this when compiling it >_&lt; So I need to rewrite it.</p>

<p>Also take note of this line:</p>

<pre><code>&lt;Multi_key&gt; &lt;i&gt; &lt;b&gt; : ""NL65AEGO0721647952""
</code></pre>

<p>Pressing <kbd>Compose ib</kbd> will insert this string (a random test IBAN number); very useful for testing applications where such a number is required to create some object (Person, Organisation); XCompose can also serve as a ""snippet"" tool :-)</p>

<h2>Footnotes</h2>

<p>1:
Some UNIX keyboards had a dedicated <kbd>Compose</kbd> key (<a href=""http://en.wikipedia.org/wiki/Compose_key#mediaviewer/File:Compose_key_on_Sun_Type_5c_keyboard.jpg"" rel=""nofollow noreferrer"">like this
SUN</a>),
but this is fairly uncommon these days.</p>

<p>2:
Depending on your existing setup, this may or may not be read at startup,
depending on your config, add the line <code>xmodmap ~/.Xmodmap</code> to either
<code>~/.xinitrc</code> or <code>~/.xsession</code>;
<a href=""https://wiki.archlinux.org/index.php/Xmodmap#Activating_the_custom_table"" rel=""nofollow noreferrer"">also see the ArchLinux wiki</a>.</p>

<p>3:
Reproduced for your benefit:</p>

<pre><code>    Position of Compose key
    +------------------------------------------------------+
    |Option                Description                     |
    +------------------------------------------------------+
    |compose:ralt          Right Alt                       |
    |compose:lwin          Left Win                        |
    |compose:lwin-altgr    3rd level of Left Win           |
    |compose:rwin          Right Win                       |
    |compose:rwin-altgr    3rd level of Right Win          |
    |compose:menu          Menu                            |
    |compose:menu-altgr    3rd level of Menu               |
    |compose:lctrl         Left Ctrl                       |
    |compose:lctrl-altgr   3rd level of Left Ctrl          |
    |compose:rctrl         Right Ctrl                      |
    |compose:rctrl-altgr   3rd level of Right Ctrl         |
    |compose:caps          Caps Lock                       |
    |compose:caps-altgr    3rd level of Caps Lock          |
    |compose:102           &lt;Less/Greater&gt;                  |
    |compose:102-altgr     3rd level of &lt;Less/Greater&gt;     |
    |compose:paus          Pause                           |
    |compose:prsc          PrtSc                           |
    |compose:sclk          Scroll Lock                     |
    +------------------------------------------------------+
</code></pre>
","2256"
"How to find and replace in Vim without having to type the original word?","6309","","<p>I'd like to optimize my ""find and replace"" workflow in Vim. It's something I do often, as I'm sure most of you do too. Usually something along the lines of -- <em>copy a block and change the name of a variable in a few places.</em> I know, I know, that probably triggers your ""why are you copying and pasting code"" reflex, but let's not go down that road... There are plenty of valid use cases :)</p>

<p>I'm well aware of the search and replace commands: <code>:s</code> or <code>:%s</code> but I don't like them. It forces me to type out both the full variable name I'm searching for and what I'm changing it to. Maybe there is a better way fix the the amount of typing with <code>:%s</code>? I often use long descriptive variable names, so that is really a deal breaker for me. I also don't like how typing out a variable name from scratch is typo prone and can consume time and brainpower hunting down typos. I much prefer typing it once, and then copying and pasting to just avoid this entirely if possible.</p>

<p>My current workflow uses some combination of movement/yank/select/search/put to move around the file and replace one by one. It is not great but has the benefit of avoiding typing out full variable names. I might just need to type the first few letters with <code>/</code> or use another movement command (e.g. <code>fx</code>) depending on what's around and then hit <code>ve</code> to select the whole word. I also don't mind that I have to repeat for every instance. I never do a full find replace without confirming each change. But it would be much preferable if I could repeat the replacement action with a single keystroke (which I can't do with this method). each replacement is usually something like <code>n</code> then <code>ve</code> then <code>p</code> (or even worse <code>""0p</code>)</p>

<p>Is there a faster way?</p>
","<p>I actually have a pretty similar workflow to yours, (copying and pasting blocks that are similar, then using <code>:s</code> to change variable names) especially when I'm writing lots of lines that are similar except for which variable they use. But there are a couple things I do that you might find useful.</p>

<h3>General vim things</h3>

<ol>
<li><p>The first thing that will help you is realizing that <code>:s//foo/g</code> will fill in whatever search term you used last and replace that with <em>foo</em>. That alone can save a lot of time, but when you combine it with the asterisk command (search for the word under the current cursor) it saves tons of time. For example, to change all <code>foo</code> to <code>spam</code>, instead of doing</p>

<pre><code>:%s/foo/spam/g
</code></pre>

<p>Which requires you to type out both foo and spam (which may be long variables), you can simply navigate to foo, and do:</p>

<pre><code>*:%s//spam/g
</code></pre>

<p>This way, you can quickly get the name of the variable you're changing by searching for it, then you won't need to type it out. This will also work nicely with your current workflow of using <code>n</code> a lot. It's also helpful to have <code>hlsearch</code> on, because then you can visually tell where the variables you're replacing are.</p>

<p><em>(side note: The asterisk command will add word boundaries, that is <code>\&lt;</code> and <code>\&gt;</code> around the word under the cursor. If you don't want this, use <code>g*</code> instead.)</em></p></li>
<li><blockquote>
  <p>it would be much preferable if I could repeat the replacement action with a single keystroke</p>
</blockquote>

<p>You can use <code>@:</code> to redo the last substitute command. That is nice if you want to do an <code>:s</code> command on lots of lines, but not all of them so <code>:%s</code> will not work. Another option is the confirmation flag, i.e. <code>:%s///gc</code>. This will allow you to type <code>y</code> or <code>n</code> on each occurrence to decide if you want to replace it or not.</p>

<p>As <a href=""https://vi.stackexchange.com/questions/13689/is-there-a-better-method-for-find-and-replace-in-vim#comment23486_13690"">Desty pointed out</a>, you can also do <kbd>&amp;</kbd> to re-run the last substitute command, but note that this will <em>not</em> keep your flags (such as <code>global</code> or <code>confirm</code>). Whether that is good or bad depends on your personal opinion. If you would like to use this but have it keep your flags also, you could do</p>

<pre><code>nnoremap &amp; :&amp;&amp;&lt;cr&gt;
</code></pre></li>
<li><p>If you want to change every occurrence in a block, but not every match in the file, you could always use a visual selection of the block, which will fill in </p>

<pre><code>:'&lt;,'&gt;
</code></pre>

<p>to your substitute, which restricts it to the lines you have selected. When combined with the asterisk approach, I find this extremely useful. Additionally, if you are making multiple substitute commands on the same block of lines, you can use <kbd>gv</kbd> to reselect the same lines to do another command. (whether it's a <code>:substitute</code> or a normal command) </p>

<p>If you do another substitute command, you do not <em>need</em> to reselect the same lines, because <code>:'&lt;,'&gt;</code>  will still operate on the same lines. However, it is more convenient to type</p>

<pre><code>gv:s
</code></pre>

<p>rather than </p>

<pre><code>:'&lt;,'&gt;s
</code></pre></li>
</ol>

<h3>Plugins/Mappings I like</h3>

<ol>
<li><p>I have the following mapping in my <code>.vimrc</code> which extends the <em>asterisk approach</em> so that I only have to type the new desired name:</p>

<pre><code>""(R)eplace all
nnoremap &lt;leader&gt;r yiw:%s/\&lt;&lt;C-r&gt;""\&gt;//g&lt;left&gt;&lt;left&gt;
</code></pre>

<p>To use this, just put your cursor on the word you want to change, and type <code>&lt;leader&gt;rNewVarName&lt;cr&gt;</code> and you're done. Note that this will replace all matches without giving you an option to confirm them, so you might not like it as much. Of course, you could just change it to </p>

<pre><code>nnoremap &lt;leader&gt;r yiw:%s/\&lt;&lt;C-r&gt;""\&gt;//gc&lt;left&gt;&lt;left&gt;&lt;left&gt;
</code></pre>

<p>To allow for the confirm option.</p>

<p><em>edit</em>: Following both <a href=""https://vi.stackexchange.com/a/13691/2920"">Mass's answer</a> and <a href=""https://vi.stackexchange.com/questions/13689/is-there-a-better-method-for-find-and-replace-in-vim#comment23484_13690"">rcorre's comment</a>, you could also write this as</p>

<pre><code>nnoremap &lt;leader&gt;r :%s/\&lt;&lt;C-r&gt;&lt;C-w&gt;\&gt;//g&lt;left&gt;&lt;left&gt;
</code></pre>

<p>Which has the advantage of keeping your unnamed register the same.</p></li>
<li><p>If you're renaming groups of similar variables at the same time, for example, changing</p>

<pre><code>fooSuffix
PrefixFoo
foo1
SHOUTINGFOO
</code></pre>

<p>to </p>

<pre><code>barSuffix
PrefixBar
bar1
SHOUTINGBAR
</code></pre>

<p>it can be a pain to substitute all of them individually. This is where <a href=""https://github.com/tpope/tpope-vim-abolish"" rel=""noreferrer"">tpope/vim-abolish</a> comes in handy. You can replace all of these in one command with:</p>

<pre><code>:%S/foo/bar/g
</code></pre>

<p>and it takes care of the capitalization for you.</p></li>
</ol>

<p>These should help you a lot, but let me know if there's anything about these approaches you don't like or feel is lacking. I'm happy to talk about more approaches. :)</p>

<hr>

<p><em>Recommended Reading:</em></p>

<ul>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/change.html#:s_c"" rel=""noreferrer""><code>:h s_c</code></a></p></li>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#star"" rel=""noreferrer""><code>:h *</code></a></p></li>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#gstar"" rel=""noreferrer""><code>:h g*</code></a></p></li>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/repeat.html#@:"" rel=""noreferrer""><code>:h @:</code></a></p></li>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C&lt;"" rel=""noreferrer""><code>:h /\&lt;</code></a></p></li>
<li><p><a href=""http://vimdoc.sourceforge.net/htmldoc/change.html#&amp;"" rel=""noreferrer""><code>:h &amp;</code></a></p></li>
</ul>
","13690"
"How to indent as spaces instead of tab?","6141","","<p>I am coding some html templates in JADE files.  I want to auto indent code with spaces instead of tab. I tried <code>shiftwidth=2</code>, <code>tabstop=2</code>, but no matter what, it's still indents using tabs instead of spacebar, which causes the JADE compile to throw errors.</p>

<p>How can I auto indent large sections of code using spaces instead of tabs?</p>
","<p>You are looking for the <code>expandtab</code> option.  When this option is set, spaces are <em>always</em> used.  You can put <code>set expandtab</code> in your vimrc to always have this option set when vim starts.  If you want to only enable this option for specific languages, see <a href=""https://vi.stackexchange.com/questions/4/how-can-i-change-the-default-indentation-based-on-filetype/"">this question</a>.  For help on this option, see <code>:help 'expandtab'</code>.</p>
","4142"
"List valid color schemes?","6053","","<p>I just found out about the <code>:colorscheme</code> command. Is there a way that I can get a list of valid color schemes from Vim? I'd like to be able to do this from within Vim, not from a list somewhere on the Internet.</p>
","<p>The easiest way is to use <a href=""http://vimhelp.appspot.com/cmdline.txt.html#c_CTRL-D""><code>:help c_Ctrl-d</code></a> after <code>:colorscheme</code>.</p>

<p>So, <code>:colorscheme</code><kbd>Ctrl-d</kbd> will output the colorschemes you have available to you.</p>
","2996"
"How to save window, split, and buffer layout?","5831","","<p>I have several tasks I am working on in one repository. I would like to create ""workspaces"" for working on them. </p>

<p>One ""workspace"" or ""buffer layout"" would have all files I need to work on open in the layout I want (using <code>^w+v</code>, <code>^w+s</code> to split window).</p>

<p>Then, when I start working on another task I would like to save my current layout, move to another one, but I would like to be able to get back to previous layouts.</p>

<p>What is the best way to achieve this?</p>
","<p>You can use vim's <code>:mksession</code> and write each ""workspace"" to a different file, then reopen a session using <code>vim -S session_file</code>, however, if you're open to using a plugin then I find the Startify plugin is exactly what I need for this sort of scenario: <a href=""https://github.com/mhinz/vim-startify"">https://github.com/mhinz/vim-startify</a></p>

<p>It does a great job of managing sessions, in vim and mccvim, and it gives you a list of recent files as well when you open vim. It will auto-change to the right working directory for you too. It also lets you <em>pin</em> files to the startify opening screen as well, which is nice for easy access to things like your <code>.vimrc</code> </p>
","289"
"What is the difference between `filetype plugin indent on` and `filetype indent on`?","5774","","<p>I see one of these two lines in <code>.vimrc</code> files. This one seems to be most common:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>But how does it differ from this line:</p>

<pre><code>filetype indent on
</code></pre>

<p>I've found <a href=""http://vimdoc.sourceforge.net/htmldoc/filetype.html#:filetype-indent-on"" rel=""noreferrer"">documentation for the latter</a>, but I'm still confused.</p>
","<p><code>filetype plugin indent on</code> is like a combination of these commands:</p>

<pre><code>filetype on
filetype plugin on
filetype indent on
</code></pre>

<p>It turns on ""detection"", ""plugin"" and ""indent"" at once. You can check for yourself by reading <a href=""http://vimdoc.sourceforge.net/htmldoc/filetype.html#:filetype-overview"" rel=""noreferrer""><code>:help :filetype-overview</code></a>.</p>

<h1>Detection</h1>

<p>What does filetype ""detection"" do? From the docs:</p>

<blockquote>
  <p>Each time a new or existing file is edited, Vim will try to recognize the type
  of the file and set the 'filetype' option.  This will trigger the FileType
  event, which can be used to set the syntax highlighting, set options, etc.</p>
</blockquote>

<p>This is less confusing if you realise that the <code>filetype</code> command is distinct from the <code>filetype</code> option. (The command <code>:filetype...</code>, the option: <code>:set filetype...</code>)</p>

<h1>Plugin</h1>

<p>What does the ""plugin"" part do? From the docs:</p>

<blockquote>
  <p>This actually loads the file ""ftplugin.vim"" in 'runtimepath'.</p>
  
  <p>The result is that when a file is edited its plugin file is loaded (if there
  is one for the detected filetype).</p>
</blockquote>

<p>The file being loaded is not necessarily named <code>ftplugin.vim</code>, it could be <code>ftplugin/html_example.vim</code> for instance.</p>

<h1>Indent</h1>

<p>What does the ""indent"" part do? From the docs:</p>

<blockquote>
  <p>This actually loads the file ""indent.vim"" in 'runtimepath'.</p>
  
  <p>The result is that when a file is edited its indent file is loaded (if there
  is one for the detected filetype). indent-expression</p>
</blockquote>

<p>Again, the file may not be named <code>indent.vim</code>, it could be named <code>indent/html_example.vim</code> for instance.</p>
","10125"
"What's the correct way to install YouComplete using vim-plug in vim/nvim?","5603","","<p>The only documentation for installing YCM seems to be for Vundle and I'm fairly new to vim-plug and plugins in general so I'm not sure how well it translates to vim-plug.</p>
","<p>neovim version 0.1 has breaking changes.   It uses directory <code>~/.config/nvim</code>
(On Mac OS X. Linux or Windows may use slightly different paths.)</p>

<p>If you want your neovim configuration independent of vim configuration, 
you can rename <code>.nvimrc</code> to <code>~/.config/nvim/init.vim</code> (See the docs <a href=""https://neovim.io/doc/user/vim_diff.html#nvim-configuration"">here</a> and <a href=""https://neovim.io/doc/user/nvim_from_vim.html"">here</a>).</p>

<p>Install vim-plug to <code>~/.config/nvim/autoload/plug.vim</code><br>
The directory tree looks like this:</p>

<pre><code>.config
├── nvim
    ├── autoload
    │   └── plug.vim
    ├── init.vim
    └── plugged
        ├── YouCompleteMe
        ├── ctrlp.vim
</code></pre>

<p>In neovim when you run <code>:PlugInstall</code>, vim-plug will install your plugins to the path you specified in <code>init.vim</code><br>
Use <code>.config/nvim/plugged</code></p>

<pre><code>"" for vim
"" call plug#begin('~/.vim/plugged')
"" for neovim
call plug#begin('~/.config/nvim/plugged')
"" Keep Plug commands between plug#begin/end.
Plug 'https://github.com/Valloric/YouCompleteMe'
</code></pre>

<p>If you want neovim to use vim's plugin location, replace directory <code>.config/nvim</code> with a symlink named <code>.config/nvim</code> that points to <code>.vim</code>  </p>

<pre><code>ln -s ~/.vim ~/.config/nvim
</code></pre>

<p>In .vim either add <code>init.vim</code> similar to <code>.vimrc</code>, or add symlink named <code>init.vim</code> to point to <code>.vimrc</code></p>

<pre><code>ln -s ~/.vimrc ~/.vim/init.vim
</code></pre>

<p>In .vimrc</p>

<pre><code>call plug#begin('~/.vim/plugged')
</code></pre>

<p>If you use Homebrew to install neovim, at the end of the install it provides some helpful info about setting the symlinks: <a href=""https://github.com/neovim/homebrew-neovim"">https://github.com/neovim/homebrew-neovim</a></p>

<p>Also many people create a git repo in a directory named ""dotfiles"" or similar to version control configuration files like <code>init.vim</code> and <code>.vimrc</code>. In other directories add symlinks to your dotfiles<br>
(e.g. <code>~/.config/neovim/init.vim</code> could be symlinked to <code>~/dotfiles/init.vim</code>)<br>
This is handy when setting up a new machine.</p>

<h2>YouCompleteMe</h2>

<p>As warsong mentioned</p>

<pre><code>pip install neovim
</code></pre>

<p>For C family language completion:</p>

<pre><code>cd ~/.config/nvim/plugged/YouCompleteMe
./install.py
</code></pre>

<p><a href=""https://github.com/Valloric/YouCompleteMe"">https://github.com/Valloric/YouCompleteMe</a></p>

<p>I ran <code>install.py</code> separately, hadn't seen nifty one-liner method  </p>

<pre><code>Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
</code></pre>
","5413"
"How to block replace code in visual mode?","5564","","<p>I have a list of items where I want to replace the first two characters:</p>

<pre><code>a) item 1
b) item 2
c) item 3
</code></pre>

<p>What is the fastest way to make this:</p>

<pre><code>* item 1
* item 2
* item 3
</code></pre>

<p>I have an approach with visual mode (Ctr-v, jjj, but need to do two replace commands. Iirc, this replacement can be done with 1 command)</p>
","<p><strong>Visual-block selection:</strong></p>

<pre><code>&lt;C-v&gt;
jjl
c*
&lt;Esc&gt;
</code></pre>

<p><strong><code>:normal</code>:</strong></p>

<pre><code>:,+2norm! cE*&lt;CR&gt;
</code></pre>

<p><strong>Substitution:</strong></p>

<pre><code>:,+2s/^.\{2}/*
</code></pre>

<p><strong>Dot formula:</strong></p>

<pre><code>cE*&lt;Esc&gt;
j.
j.
</code></pre>
","2041"
"Modify vimdiff highlighting","5441","","<p>For readability I try to modify my <code>~/.vimrc</code> to get some proper highlighting. I found <a href=""http://tuxdiary.com/2014/02/17/customize-vimdiff-color-scheme/"">here</a> to use e.g. this:</p>

<pre><code>highlight DiffChange cterm=none ctermfg=fg ctermbg=Red gui=none guifg=fg guibg=Red
</code></pre>

<p>Like said in the link I am getting following warning then: <code>E419: FG color unknown</code></p>

<p>I don't really understand the suggestion to use </p>

<pre><code>highlight Normal term=none cterm=none ctermfg=White ctermbg=Black gui=none guifg=White guibg=Black
</code></pre>

<p>to get rid of that problem but it works. Still all text in vim is written bold (highlighted) afterwards. How do I get rid of this? Or is there a better/simpler possibilty to manipulate the highlighting colors?</p>
","<p>You have a few questions, some explicit and some implicit. I'll try to answer them in order:</p>

<h1>What Do These Commands Do?</h1>

<p>You're running two commands:</p>

<pre><code>highlight DiffChange cterm=none ctermfg=fg ctermbg=Red gui=none guifg=fg guibg=Red

highlight Normal term=none cterm=none ctermfg=White ctermbg=Black gui=none guifg=White guibg=Black
</code></pre>

<p>Both of these commands set the colors of highlight groups. A highlight group is how Vim sets the color (and formatting) of an element of the text or editor. The various variables you're setting (<code>ctermbg=Red</code> for example) are how you tell Vim what colors and formatting you'd like. The variables that end in <code>fg</code> set the foreground (text) color, the variables that end in <code>bg</code> set the background color, and the variables without a suffix (<code>term</code>, <code>cterm</code>, <code>gui</code>) set the formatting (like <code>Bold</code>, or <code>Underline</code>, etc.). You can find the list of formatting options with <code>:h highlight-term</code>.</p>

<p>In this case you set the color of the <code>DiffChange</code> group and the <code>Normal</code> group.</p>

<p>You can get help on these like this: <code>:h hl-DiffChange</code> and <code>:h hl-Normal</code></p>

<p>The DiffChange group tells Vim how to highlight lines that have changed in the diff, while the Normal group sets the color of normal text and the background of the editor.</p>

<p>So putting it together you're telling vim I would like white text on a black background, and when I do a diff, I would like you to keep the text color (the foreground) the same color as it is normally (this is what <code>fg</code> means, will discuss that in the next section) and change the background to Red.</p>

<h1>Why Doesn't <code>fg</code> Work Initially?</h1>

<p>Vim has a few color names that it knows, like <code>White</code>, <code>Black</code>, etc. Some of them (the ones understood by the color terminal) are listed with <code>:h cterm-colors</code>:</p>

<pre><code>                        *cterm-colors*
    NR-16   NR-8    COLOR NAME
    0       0       Black
    1       4       DarkBlue
    2       2       DarkGreen
    3       6       DarkCyan
    4       1       DarkRed
    5       5       DarkMagenta
    6       3       Brown, DarkYellow
    7       7       LightGray, LightGrey, Gray, Grey
    8       0*      DarkGray, DarkGrey
    9       4*      Blue, LightBlue
    10      2*      Green, LightGreen
    11      6*      Cyan, LightCyan
    12      1*      Red, LightRed
    13      5*      Magenta, LightMagenta
    14      3*      Yellow, LightYellow
    15      7*      White
</code></pre>

<p>Additionally, there are the 'special' <code>fg</code> and <code>bg</code> colors that reference the color of the text and the background. Vim gets the colors for these from the normal highlight group. The vim help has this to say about them: </p>

<pre><code>                        *E419* *E420*
When Vim knows the normal foreground and background colors, ""fg"" and
""bg"" can be used as color names.  This only works after setting the
colors for the Normal group and for the MS-DOS console.  Example, for
reverse video: 
    :highlight Visual ctermfg=bg ctermbg=fg
Note that the colors are used that are valid at the moment this
command are given.  If the Normal group colors are changed later, the
""fg"" and ""bg"" colors will not be adjusted.
</code></pre>

<p>The command that you use, <code>highlight Normal term=none cterm=none ctermfg=White ctermbg=Black gui=none guifg=White guibg=Black</code>, sets the colors for the Normal group to <code>Black</code> for the backgrounds of the color terminal (<code>ctermbg</code>) and GUI (<code>guibg</code>) and <code>White</code> for the foregrounds (main text color) for the color terminal (<code>ctermfg</code>) and the GUI (<code>guifg</code>). After setting that, Vim knows that <code>fg</code> is <code>White</code> and <code>bg</code> is <code>Black</code>, but before it doesn't and so you can't use <code>fg</code>.</p>

<h1>Why Is All The Text Bold?</h1>

<p>This is likely a problem with your terminal and not with Vim. If Vim thinks your terminal can only display 8 colors, than all text will be bold. You should make sure your <code>$TERM</code> variable in your terminal is set correctly. The exact way to do this depends on your shell, but if for example you're using bash in xterm, its likely your terminal is reporting <code>TERM=""xterm""</code>, when it should be <code>TERM=""xterm-256color""</code> if it supports 256 colors (and it should if its a modern version). Some information on this can be found on <a href=""http://vim.wikia.com/wiki/256_colors_in_vim"" rel=""nofollow noreferrer"">the vim wikia</a>.</p>

<p>You can check the number of colors vim thinks it can use with <code>:set t_Co?</code>. If this reports 8 or lower than that is probably your problem. Fixing <code>$TERM</code> is the right solution, but a hack is to override <code>t_Co</code> in your <code>.vimrc</code>: <code>set t_Co=256</code>.</p>

<p>If you let us know what terminal and shell you're running, I can offer more specific advice.</p>

<h1>Is There a Better/Simpler Way?</h1>

<p>Setting highlight groups in vim is just messy and ugly. Some people have written plugins or scripts to make it ""easier"" or ""cleaner"" (for example <a href=""http://www.cgtk.co.uk/vim-scripts/easycolour"" rel=""nofollow noreferrer"" title=""EasyColour"">EasyColour</a>, or <a href=""https://stackoverflow.com/a/2445869"">this vimscript function</a>), but whether those are preferable is really a personal decision.</p>
","2992"
"How to jump between matching HTML/XML tags?","5346","","<p>How to jump between matching tags (such as <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, etc.) when editing HTML/XHTML/XML documents similarly as <kbd>%</kbd> is used to jump between matching parentheses?</p>
","<p>Vim ships with a macro called matchit that does this for you; all you need to do is activate it with <code>runtime macros/matchit.vim</code> in your vimrc. This will enable you to jump from, eg, a <code>&lt;div&gt;</code> to its <code>&lt;/div&gt;</code>. Note that your cursor will have to be inside the angle brackets; if you're on the angle brackets, <kbd>%</kbd> will jump from one bracket to the other as normal.</p>
","784"
"Environment Variable for Personal Runtime Path? (~/.vim on *nix, ~/vimfiles on win32)","5199","","<p>I'm trying to move my <code>.viminfo</code> file into my <code>.vim/</code> folder for cleaner syncing across multiple machines. (I have my <code>.vim</code> stored on Dropbox, and then create symlinks to it from my home directory.)</p>

<p>So this morning, I found <a href=""https://stackoverflow.com/a/6286925/4865822"">this answer</a> on how to do just that. Great! Unfortunately, I use Windows at work and Mac at home, so <code>~/.vim</code> is actually sometimes <code>~/vimfiles</code>. As a result, a one-line solution</p>

<pre><code>set viminfo+=n~/.vim/viminfo
</code></pre>

<p>has now become a 5-line solution</p>

<pre><code>if has('unix')
  set viminfo+=n~/.vim/viminfo
elseif has('win32')
  set viminfo+=n~/vimfiles/viminfo
endif
</code></pre>

<p>which just feels clumsy to me.</p>

<p>Is there some kind of default environment variable I can use to access the user-specific runtime path, à la <code>$VIMRUNTIME</code> or <code>$MYVIMRC</code>? Or is this something I just have to dance around?</p>
","<p>This should work and is platform/plugin agnostic: <code>fnamemodify(expand(""$MYVIMRC""), "":p:h"")</code></p>
","3837"
"How do I open a file to view in a new tab?","5171","","<p>How do I open a file to view in a new tab? Specifically, I want the read-only equivalent of <code>:tabe[dit] &lt;filename&gt;</code>. I have tried</p>

<pre><code>:tab :view &lt;filename&gt;
</code></pre>

<p>but that does not create a new tab as the <a href=""http://vimdoc.sourceforge.net/htmldoc/tabpage.html#:tab"">documentation</a> would suggest.</p>
","<p><code>:tab &lt;cmd&gt;</code> opens a tab where a <code>&lt;cmd&gt;</code> would have opened a window. <code>:view</code> doesn't open a window, so <code>:tab view</code> doesn't open a tab :-) See <a href=""http://vimhelp.appspot.com/tabpage.txt.html#%3Atab"" rel=""noreferrer""><code>:help :tab</code></a>.</p>

<p>However, we also have the <a href=""http://vimhelp.appspot.com/windows.txt.html#splitview"" rel=""noreferrer""><code>:sview</code></a> command, which does:</p>

<blockquote>
  <p>Same as "":split"", but set 'readonly' option for this buffer.</p>
</blockquote>

<p>This <em>does</em> open a window. So <code>:tab sview file</code> opens a tab.</p>

<p><code>:sview</code> is short for ""split view"". You can abbreviate to to <code>:sv</code>, and you can also leave out the second <code>:</code>.</p>

<hr>

<p>Postscript:<br>
Your question suggests you're not very familiar with Vi/Vim terminology. Many people are confused about this, so don't worry :-) <a href=""http://vimhelp.appspot.com/windows.txt.html#window"" rel=""noreferrer""><code>:help window</code></a> is a good read for an introduction. It has a useful summary at the start:</p>

<blockquote>
  <p>A buffer is the in-memory text of a file.<br>
  A window is a viewport on a buffer.<br>
  A tab page is a collection of windows.</p>
</blockquote>
","2149"
"cannot install NerdTree pluging with Vundle","5170","","<p>I recently start using Vundle as plugin manager.
It nicely installed all my plugins, except NerdTree.</p>

<p>when trying to install <code>Plugin 'scroolosse/nerdTree'</code> 
vundle tries to connect to github, thru https, and asks me for a username and a password. I have tried providing mine but that didn't help.</p>

<p>For the other plugins on github, it doesn't ask for such a thing.</p>

<p>What is the problem ? How to fix this ?</p>
","<p>Spelling is the issue. </p>

<pre><code>Plugin 'scroolosse/nerdTree'
</code></pre>

<p>Should be </p>

<pre><code>Plugin 'scrooloose/nerdTree'
</code></pre>

<p>The double <code>s</code> is the clincher. </p>

<p><a href=""https://github.com/scrooloose/nerdtree"">GitHub Scrooloose NerdTree repo</a></p>
","3933"
"How do I use the system clipboard with Vim in Arch Linux?","5159","","<p>I am using Vim on Arch Linux through urxvt. Since there is no ""Ctrl-V"" or ""Ctrl-Shift-V"" support in urxvt, there is no way for me to paste things I have copied from my browser (let's say) into my vim buffer. </p>

<p>I have <code>set clipboard=unnamed</code> in my .vimrc but this seems to have no effect. Pressing ""p"" only pastes from the vim clipboard and after copying or cutting from vim, nothing gets added to my system clipboard. </p>

<p>Just in urxvt, I can paste by using middle click on the mouse, which uses the system clipboard, but once I enter vim, even this functionality is replaced by vim's internal clipboard.</p>

<p>Is there any way to enable copy-paste functionality in my vim setup?</p>
","<p>Ok. Apparently on native vim in Arch there is no support for X so the <code>+clipboard</code> feature is missing. 
To fix this, install <code>gvim</code>, which although conflicts with vim, which was my initial problem with it, retains the exact same functionality if you use </p>

<pre><code>vim
</code></pre>

<p>Rather than, </p>

<pre><code>gvim
</code></pre>

<p>You still need to <code>set clipboard=unnamed</code>.</p>
","3078"
"Use conditional operators AND or OR in an IF statement?","5151","","<p>This is probably an incredibly simple question, but I did not find any answer so far (I must lack the right sources, and I don't know where to search in vim's help).</p>

<p>I have a condition and I would like it to include 'AND', like</p>

<pre><code>if (condition1 .AND. condition2)
   ""do what I want you to do
endif
</code></pre>

<p>but I couldn't find the syntax. Same thing for 'OR'.</p>
","<p>As @lcd047 said in his comment, vimscript use C-like operators <code>&amp;&amp;</code> and <code>||</code>.</p>

<p>You can find description of their usage on <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#expr2""><code>:h expr2</code></a>. Some important points mentioned by the doc are the following</p>

<p>You'll find that the operators can be concatenated and <code>&amp;&amp;</code> takes precedence over <code>||</code>, so</p>

<pre><code>&amp;nu || &amp;list &amp;&amp; &amp;shell == ""csh""
</code></pre>

<p>Is equivalent to</p>

<pre><code>&amp;nu || (&amp;list &amp;&amp; &amp;shell == ""csh"")
</code></pre>

<p>Also once the result is known, the expression ""short-circuits"", that is, further arguments are not evaluated.  This is like what happens in C.</p>

<p>If you use: </p>

<pre><code>if a || b
</code></pre>

<p>The expression will be valid even is <code>b</code> is not defined.</p>
","8241"
"How to partially replace text in a selected text-block?","5128","","<p>Not easy to find a nice title for my problem.</p>

<p>I'm aware of inserting in front of a text-block:</p>

<p><kbd>Ctrl</kbd>-<kbd>v</kbd> <em>select lines</em> <kbd>I</kbd> <em>type text</em> <kbd>ESC</kbd></p>

<p>Now I would like to do this but also with replacing a part in my block selection. Currently I'm doing two operations</p>

<p><kbd>Ctrl</kbd>-<kbd>v</kbd> <em>select block</em> <kbd>x</kbd> <em>go back to start</em></p>

<p>Followed by the sequence I mentioned above.</p>

<p>Is there a way to combine these two operations by selecting (<kbd>Ctrl</kbd>-<kbd>v</kbd>) the block only once?</p>

<p>Here is a small example:</p>

<p>I would like to transform the following block</p>

<pre><code>1  text
2  text
3  text
4  text
5  text
</code></pre>

<p>into </p>

<pre><code>new text 
new text 
new text 
new text 
new text
</code></pre>

<p>doing only one ""operation"".</p>
","<p>Typing <kbd>c</kbd> after selecting your block instead of <kbd>x</kbd> will remove the text in the selection block and will enter insert mode. Once you type something and exit insert mode you should have the same change on every line.</p>

<p>Try </p>

<p><kbd>Ctrl</kbd>-<kbd>v</kbd> -- select block -- <kbd>c</kbd> -- insert whatever -- <kbd>Esc</kbd></p>
","2759"
"Show listchars tab as spaces","4999","","<p>I use <code>list</code> and <code>listchars</code> to show my whitespace, but the code style I adhere to uses tabs. Seeing <code>&gt;</code> or <code>^I</code> for all of my tabs is nauseating.</p>

<p>How would I keep all of my existing list characters but with a blank tab character?</p>
","<p><code>'listchars'</code> takes two characters for <code>tab</code> so you can simply use two regular spaces:</p>

<pre><code>set listchars=tab:\ \ ,trail:·,eol:¬,nbsp:_
</code></pre>
","4304"
"How to build vim from sources with GUI support?","4808","","<p>I am trying to build vim from source, especially gvim, to get some of the bug fixes that have been plaguing me in the office repository. </p>

<p>I can compile vim fine but gvim is not being generated due to some library missing. I am sure all I am missing is some -devel packages, but which ones?</p>

<p>The issue is this:</p>

<pre><code>./configure --prefix=$HOME --enable-multibyte --enable-pythoninterp --with-fea
tures=big --enable-gui=gnome2 --with-x=yes
[...]
checking for X... (cached) libraries , headers 
[...]
checking if X11 header files can be found... no
checking --enable-gui argument... no GUI support
[...]
</code></pre>

<p>Yet:</p>

<pre><code>; sudo yum install -y libX11-devel
Loaded plugins: fastestmirror, langpacks, priorities, remove-with-leaves
Loading mirror speeds from cached hostfile
 * base: mirror.ox.ac.uk
 * epel: mirror.serverbeheren.nl
 * extras: mirror.econdc.com
 * updates: mirror.ox.ac.uk
Package libX11-devel-1.6.0-2.1.el7.x86_64 already installed and latest version
Nothing to do
</code></pre>

<p>Is there a canonical list anywhere?</p>
","<p>For configuration command you've specified <code>gnome2</code> as your main GUI (<code>--enable-gui=gnome2</code>), are you sure it's the right one? Or maybe <code>gnome2</code> is not enough to enable GUI, so try to add extra <code>--enable-gui</code>, <code>--with-x</code> parameters. </p>

<p>You can also configure so your GUI would be detected automatically by <code>--enable-gui=auto</code>.</p>

<p>Also make sure that you have all your dependencies such as <code>build-dep</code> and <code>vim-gtk</code> (<code>sudo yum-builddep vim-X11</code> or <code>sudo apt-get build-dep vim-gtk</code>).</p>

<p>If the problem is still happening, check your <code>config.log</code> which should be generated by your <code>./configure</code> to check exact details of the failure for GUI section.</p>

<p>See also:</p>

<ul>
<li><a href=""https://askubuntu.com/questions/345593/how-to-build-vim-with-gui-option-from-sources"">How to build vim with gui option from sources?</a></li>
</ul>
","2654"
"Can the split separator in vim be less than a full column wide?","4788","","<p>I use a tiling window manager (awesome) + a terminal multiplexer (tmux) + splits inside of vim. I have no window decorations at all, so you there is no visual split between them at all if the content of the program doesn't give it away. I'm quite comfortable with this paradigm as I use multiple monitors and group tasks by screen anyway. If two windows didn't have a reason to be side by side they wouldn't be there in the first place.</p>

<p>However this creates a bit of visual dissonance where the most obvious split visually is the least significant semantically.</p>

<ul>
<li>Xorg window ‹|› window = nothing at all</li>
<li>Tmux pane ‹|› pane = 1px divider line</li>
<li>Vim split ‹|› split = 1 character wide colored column</li>
</ul>

<p>Here's a sample showing one each side by side windows, panes and vim splits:</p>

<p><a href=""https://i.stack.imgur.com/tFcjO.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tFcjOm.png"" alt=""windows panes and splits""></a></p>

<p>Even without clicking through to the full resolution version, the white divider line you see is the least significant split on the screen, the vim panes. (Note the gray column at the right of the vim session is actually an 80th column highlight, not a divider of any kind although I do often work at that size.)</p>

<p>I am aware of how to change the character drawn in the split or reduce the color scheme contrast. What I would like to do is use the same split bar as tmux that doesn't take up any width because it's drawn in between columns rather than in one. Is this possible with terminal based vim? Gvim? Neovim? Baring making a visually unobtrusive separator, can the divider column be turned off entirely?</p>

<p>P.S. The reason using a visually similar separator makes sense is because I use the same key-bindings to navigate between tmux panes and vim splits. The same keys navigate seamlessly between them, it would only make sense if the visual boundaries were the same as well.</p>
","<p>You are wrong about tmux. Like every terminal-based program — including Vim — it only draws stuff <em>inside</em> cells. This means that Vim and tmux both use the same method to draw vertical borders: they just use a pipe-like character.</p>

<p>Tmux uses <code>│</code> (<code>U+2502</code>) by default while Vim uses <code>|</code> (<code>U+007C</code>).</p>

<p>If you want the same separator in Vim, you can simply use the same character:</p>

<pre><code>set fillchars+=vert:│
</code></pre>

<p>Note that your colorscheme probably sets the background-color of the vertical split. If that's the case, you can remove the background-color directly in your colorscheme:</p>

<pre><code>hi VertSplit ctermbg=NONE guibg=NONE
</code></pre>
","2942"
"How do I copy and paste between two vim instances - shared clipboard?","4693","","<p>I use gnu <code>screen</code> and I run <code>vim file1.txt</code> and <code>vim file2.txt</code> in two windows. 
How can I copy part of the text from <code>file1.txt</code> and paste it to <code>file2.txt</code>
without using temporary files or opening two files under the same vim instance?</p>

<p>Basically I would like to yank in first window and paste in second one. I need shared clipboard.</p>
","<p>One way is to just copy it to the system clipboard from the first instance, then copy it from the system clipboard in the second instance.  How exactly you would do this depends on your OS and also your vim <code>clipboard</code> setting.</p>

<p>Another option is to use <a href=""https://github.com/svermeulen/vim-easyclip"" rel=""nofollow"">vim-easyclip</a> which has the ability to share one clipboard across all vim instances (including sharing a history of yanks as well).  Internally what it does is mirror your clipboard to a temporary file, so it bypasses using your system clipboard entirely.</p>
","2022"
"Better diff color scheme","4651","","<p>I've started using diff mode in vim at work, and the one thing I noticed is that the colors are really bright, which doesn't help when you're trying to look for differences in huge files for long periods of time.</p>

<p>Are there any color schemes out there that people have customized to make diff mode easier on the eyes?</p>
","<p>I quite like the diff colors in <a href=""https://github.com/romainl/Apprentice"" rel=""noreferrer"">my colorscheme</a>:</p>

<p><a href=""https://i.stack.imgur.com/sgNwU.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/sgNwU.png"" alt=""diff""></a></p>
","5694"
"Insert an incrementing number to each line in either a selection or a match","4646","","<p>I have a problem I can think of two general approaches for solving, but I don't know specifics for either approach.</p>

<pre><code>...
Level 1:    cũng    also
Level 1:    và      and
Level 1:    như     like; such as
Level 2:    các     plural marker
Level 2:    của     belonging to
...
</code></pre>

<p>For each line starting ""Level n"" I want to insert a number, beginning with ""01"". For simplicity let's prepend the number.</p>

<p>Approach 1: Manually select all the lines with same Level. Invoke magic I am soon to learn.</p>

<p>Approach 2: Write a search and replace which matches all lines with given Level which at each match includes a number in the replace text, which increments by one with each match.</p>

<p>I've found similar questions <a href=""https://stackoverflow.com/questions/9903660"">on StackOverflow</a> or on other Vim sites, but each seems to have one or more of the following problems:</p>

<ol>
<li>Is about inserting the current line number rather than an arbitrary but incrementing number.</li>
<li>Doesn't zero-pad the number.</li>
<li>Doesn't actually work for selections on my Vim 7.4 running on Windows 7.
(These ones result in the error <code>E481: No range allowed</code>.)</li>
</ol>

<p>I am running gVim in Windows with mswin.vim but a solution that works on all vanilla Vim installs without having to customize the setup might be best.</p>
","<p>Similar to the answer at <a href=""https://vi.stackexchange.com/a/818/227"">https://vi.stackexchange.com/a/818/227</a>, you can use the global command.</p>

<p>With it you can instruct vim to search for lines matching a pattern, and then perform commands on it.</p>

<p>In your case, you wish to prepend text to lines starting with ""Level N:"", so our global command could be</p>

<pre><code>:g/^Level \d:/{COMMANDS}
</code></pre>

<h1>Using the substitute command (regular expression replacement) for the command</h1>

<p>The commands is more fun. I usually like to do a regular expression replacement for stuff like this, since it is easy to use variables.</p>

<h2>Example for your question</h2>

<pre><code>:let i = 1 | g/^Level \d:/s/^/\=printf(""%02d "", i)/ | let i = i+1
</code></pre>

<h2>How it works</h2>

<p>In the replacement section of a substitution command can be an expression.</p>

<p>The first thing we'll do is set a variable <code>i</code> to be the starting number. I chose 1, but any number will do. <code>let i = 1</code></p>

<p>Then we run our global command, which sets us up to do an action on matched lines. <code>g/^Level \d:/</code></p>

<p>We'll have our global command insert the value and increment our counter using the substitution command and the let command. <code>s/^/\=printf(""%02d "", i)/ | let i = i+1</code></p>

<p>The substitution command's regular expression finds the beginning of the line <code>^</code> and replaces it with an expression, and our expression will be the result of a formatted print. Like in the C language, vim's printf takes formatting parameters. <code>%02d</code> means convert an argument as though it was a decimal number <code>d</code>, occupying at least 2 spaces <code>2</code> and pad with 0 <code>0</code>. For details and other conversion options (including floating point formatting), see <code>:help printf</code>. We give printf our counting variable <code>i</code> and it gives us <code>01</code> the first time, <code>02</code> the second time, etc. This gets used by the substitution command to replace the beginning of the line, effectively inserting the result of the printf at the beginning.</p>

<p>Note that I put a space after the d: <code>""%02d ""</code>. You didn't ask for it in the question (and I didn't see example output), but I suspected you wanted to separate the number from the word ""Level"". Remove the space from the string given to printf to have the inserted number right next to the L in Level.</p>

<p>Finally, that <code>let i = i + 1</code> increments our counter after each substitution.</p>

<p>This can be applied generally for replacing parts of lines that are matched by other criteria with arbitrary functional data.</p>

<h1>Using combined normal commands</h1>

<p>This is good for simple insertions or complex editing. Like with substitute, we'll use global to match, but instead of regular expression substitution, we'll execute a series of operations as if typed by the user.</p>

<h2>Example for your question</h2>

<pre><code>:let i = 1 | g/^Level \d:/execute ""normal! I"" . printf(""%02d "", i) | let i = i+1
</code></pre>

<h2>How it works</h2>

<p>The values used are very similar to the substitute (we're still using printf to format our number to make it 0 padded with 2 digits), but the operation is different.</p>

<p>Here we use the execute command, which takes a string and runs the string as an ex command (<code>:help :exe</code>). We construct a string that combines ""normal! I"" with our data, which will be ""normal! I01 "" the first time and ""normal! I02 "" the second time, etc.</p>

<p>The <code>normal</code> command performs operations as if in normal mode. In this example, our normal command is <code>I</code>, which inserts at the beginning of the line. If we had used <code>dd</code> it would delete the line, <code>o</code> would open a new line after the matched line. It is as if you typed <code>I</code> (or any other operations) yourself in normal mode. we use the <code>!</code> after <code>normal</code> to make sure no mappings get in our way. See <code>:help :normal</code>.</p>

<p>What is inserted then is the value of our printf, as in the first example of using substitute.</p>

<p>This method can be fancier than regex, because you can do things like <code>execute ""normal! ^2wy"" . i . ""th$p""</code>, which will go to the beginning of the text <code>^</code>, move forward 2 words <code>2w</code>, yank until the ith 'h' character <code>y"" . i . ""th</code>, move to the end of the line <code>$</code>, and paste <code>p</code>.</p>

<p>This is almost like running a macro, but doesn't actually use up a register and can combine strings from any expressions. I find this to be very powerful.</p>

<h1>Approach where each level has its own counter</h1>

<p>You might want each level to get its own counter. If you know the maximum number of levels ahead of time, you can do the following (adding extra code to find the largest level might not be too difficult, but would make this answer too long. This is getting long as it is).</p>

<p>First, lets free i, in case we already used it as an integer. We can't convert i to a list, we have to create it that way.</p>

<pre><code>:unlet! i
</code></pre>

<p>Next, lets set i to be a list containing the number of levels. You showed 2 in your question, but lets assume 10 for the fun of it. Since list indexing is 0 based, and I don't want to bother correcting for 1 based like your list, we'll just create enough elements (11) and never use the 0 index.</p>

<pre><code>:let j = 0
:let i = []
:while j &lt; 11 | let i += [1] | let j += 1 | endwhile
</code></pre>

<p>Next, we need a way to get the level number. Fortunately, substitute is available as a function as well, so we'll give it our line and extract the level number <code>substitute(getline("".""), ""^Level \\(\\d\\):.*"", ""\\=submatch(1)"", """")</code></p>

<p>Since i is now a list of 11 <code>1</code>s (each index is the counter for our level), we can now adjust either of the above examples to use the result of this substitution:</p>

<p>Via substitute command:</p>

<pre><code>:unlet! i | unlet! j | let j = 0 | let i = [] | while j &lt; 11 | let i += [1] | let j += 1 | endwhile
:g/^Level \d:/let ind=str2nr(substitute(getline("".""), ""^Level \\(\\d\\):.*"", ""\\=submatch(1)"", """")) | s/^/\=printf(""%02d "", i[ind])/ | let i[ind] += 1
</code></pre>

<p>Via normal command:</p>

<pre><code>:unlet! i | unlet! j | let j = 0 | let i = [] | while j &lt; 11 | let i += [1] | let j += 1 | endwhile
:g/^Level \d:/let ind=str2nr(substitute(getline("".""), ""^Level \\(\\d\\):.*"", ""\\=submatch(1)"", """")) | execute ""normal! I"" . printf(""%02d "", i[ind]) | let i[ind] += 1
</code></pre>

<p>Example input:</p>

<pre><code>Level 1: stuff

Level 1: Stuff

Some text
Level 3: Other

Level 1: Meh

Level 2: More
</code></pre>

<p>Example output:</p>

<pre><code>01 Level 1: stuff

02 Level 1: Stuff

Some text
01 Level 3: Other

03 Level 1: Meh

01 Level 2: More
</code></pre>
","3121"
"How can I easily create and maintain tables?","4585","","<p>Here is (part of) a table I use in some documentation:</p>

<pre><code>+---------------+------------------------+---------------------------------------+
| TASK NAME     | WHEN                   | DESCRIPTION                           |
+---------------+------------------------+---------------------------------------+
| db:seed       | On every update        | Data required for the application to  |
|               |                        | run; you should always be able to     |
|               |                        | safely execute this multiple times    |
|               |                        | for an update.                        |
| db:truncate   | Manually (dangerous!)  | TRUNCATE all tables but postal_codes  |
| postal_codes  | Once                   | Load the postal_codes table           |
+---------------+------------------------+---------------------------------------+
</code></pre>

<p>The problem is this is very awkward to edit; if I change one thing, I need to
(manually) re-align everything, which is a PITA</p>

<p>Are there easier ways to manage this? I don't care about the exact above layout
as such, but would like to keep the wrapping of the 3rd column...</p>
","<p>I am the author of the plugin
<a href=""https://github.com/dhruvasagar/vim-table-mode"">vim-table-mode</a>.
I've spent quite a lot of time building &amp; improving this, especially with
community feedback and it caters exactly to this use case.</p>

<p>A short quickstart: You enter 'table mode' with the <code>:TableModeEnable</code> command,
you can then simply type:</p>

<pre><code>||
| MOVIE | QUOTE|
||
| Blade Runner | Like tears in the rain |
| Monty Python's quest for the holy grail | Are you suggesting that coconuts migrate? |
||
</code></pre>

<p>And vim-table-mode will automatically take care of the alignment for you
on-the-fly, so that it will look as:</p>

<pre><code>|-----------------------------------------+-------------------------------------------|
| MOVIE                                   | QUOTE                                     |
|-----------------------------------------+-------------------------------------------|
| Blade Runner                            | Like tears in the rain                    |
| Monty Python's quest for the holy grail | Are you suggesting that coconuts migrate? |
|-----------------------------------------+-------------------------------------------|
</code></pre>

<p>When editing the table later, vim-table-mode will also take care of the
alignment for you.</p>

<p>You can leave 'table mode' with <code>:TableModeDisable</code>.</p>

<hr>

<p>Its core is about easily creating tables which will be auto formatted as you
type. It offers a lot of mappings to move around and manipulate tables as well
(a particularly useful one is <code>&lt;Leader&gt;tdc</code> to remove an entire column).  All
you have to do is enable table mode and these will kick in and you can just type
away without worrying about formatting.</p>

<p>It has many more features than displayed here, such as the ability to right
align columns with a little hint on the header. It also has a neat spreadsheet
formula engine that allows one to define formulas &amp; perform computations like a
regular spreadsheet would.  </p>

<p>It's built to be extremely flexible &amp; configurable so you can change several
aspects of the tables &amp; borders that are created.</p>

<p>I have also created a few screencasts trying to showcase its powers.
<a href=""https://www.youtube.com/watch?v=9lVQ0VJY3ps"">This screencast is the most recent one</a>, but please note that there have been many improvements since.</p>
","392"
"vundle ""filetype plugin indent on"" messes with tabwidth","4569","","<p>I installed vundle yesterday and since I did, the tabwidth I configured in my vimrc is ignored and set back to 4 instead of 2.</p>

<p>I found out that the following line after the vundle paragraph is causing it:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>My indentation is set up like this:</p>

<pre><code>set noexpandtab "" Make sure that every file uses real tabs, not spaces
set shiftround  "" Round indent to multiple of 'shiftwidth'
set smartindent "" Do smart indenting when starting a new line
set autoindent  "" Copy indent from current line, over to the new line

"" Set the tab width
let s:tabwidth=2
exec 'set tabstop='    .s:tabwidth
exec 'set shiftwidth=' .s:tabwidth
exec 'set softtabstop='.s:tabwidth
</code></pre>

<p>You can check my full vimrc <a href=""https://github.com/wullxz/configfiles/blob/68332089f8747435e9a658e850e51cf11214697a/vimrc"" rel=""noreferrer"">here</a>.</p>

<p>I tested the indentation problem using a python script (where indentation really matters).</p>

<p>I already tried changing <code>filetype plugin indent on</code> to <code>filetype plugin on</code> but that doesn't change anything. Only commenting out that line helps.<br>
Now, the vundle install guide says, this line is required.</p>

<p>How do I fix this indent issue? Can I just ommit the filetype line or is it really mandatory to keep it in the vimrc?</p>

<p><strong>Solution:</strong></p>

<p>Thanks to @ChristianBrabandt and @romainl I now found a solution that can also reside in a single vimrc file:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>[...]</p>

<pre><code>set noexpandtab "" Make sure that every file uses real tabs, not spaces
set shiftround  "" Round indent to multiple of 'shiftwidth'
set autoindent  "" Copy indent from current line, over to the new line

"" Set the tab width
let s:tabwidth=2
au Filetype * let &amp;l:tabstop = s:tabwidth
au Filetype * let &amp;l:shiftwidth = s:tabwidth
au Filetype * let &amp;l:softtabstop = s:tabwidth
</code></pre>
","<p>First things first; the line below has absolutely <em>nothing</em> to do with Vundle or plugin management:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>That command does three things:</p>

<ul>
<li>enables filetype detection,</li>
<li>enables filetype-specific scripts (ftplugins),</li>
<li>enables filetype-specific indent scripts.</li>
</ul>

<p>That line is there because some plugin managers have to make sure filetype detection is disabled before doing their magic and using Vim for programming would suck a lot harder without ftplugins and proper indentation. It is my opinion that they should simply deal with filetype detection internally but well…</p>

<p>Anyway, your problem is caused by over-possessive ftplugins that override your indentation settings with theirs. The python ftplugin is the most common culprit because it was decided not long ago that it should enforce PEP8.</p>

<p>The easy way out would be to avoid sourcing ftplugins altogether:</p>

<pre><code>filetype indent on
</code></pre>

<p>but they usually come with useful stuff so that method is not really recommended.</p>

<p>The cleanest solution is to leave the <code>filetype</code> line in its ""optimal"" state:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>and override their overrides with your own <code>after/ftplugin/python.vim</code>:</p>

<pre><code>setlocal noexpandtab
setlocal shiftround
setlocal autoindent

let s:tabwidth=2
let &amp;l:tabstop = s:tabwidth
let &amp;l:shiftwidth = s:tabwidth
let &amp;l:softtabstop = s:tabwidth
</code></pre>

<p>Notes:</p>

<ul>
<li>I removed <code>smartindent</code> because it is not that smart to begin with and deprecated by filetype-specific indent scripts anyway.</li>
<li>I replaced your <code>:execute</code> commands with cleaner <code>:let</code> commands to avoid unnecessary concatenation.</li>
</ul>
","4546"
"What does :set background=dark do?","4554","","<p>I didn't put <code>color xxx</code> in my <code>.vimrc</code>. So I see this when I first open my <code>.vimrc</code>. </p>

<p><code>:color</code> gives me <code>default</code> here.
<a href=""https://i.stack.imgur.com/oKvmE.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oKvmE.png"" alt=""Before anything""></a></p>

<p>Then I type <code>:color darcula</code>. And it changes to this.</p>

<p><code>:color</code> gives me <code>darcula</code> here (naturally).
<a href=""https://i.stack.imgur.com/NCsEE.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/NCsEE.png"" alt=""Change colorscheme""></a></p>

<p>Then I type <code>:set background=dark</code>. And it changes to this.</p>

<p><code>:color</code> gives me <code>default</code> here (amazingly).
<a href=""https://i.stack.imgur.com/MNPSe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/MNPSe.png"" alt=""Change background""></a></p>

<p>So my question is, what exactly does <code>:set background=dark</code> do?</p>

<p>I tried <code>:h background</code> and didn't find anything helpful. I understand that this command doesn't actually change the background, only vim will change colors accordingly. But I still want to ask this question. Because I'm really happy with the color after <code>:color darcula</code> and <code>:set background=dark</code> so I wonder how to write my own color scheme without having to put <code>set background=dark</code> in my <code>.vimrc</code>.</p>

<p>I took advice from @statox and put <code>set background=dark</code> at the last line of my <code>darcula.vim</code>. Then <code>color darcula</code> gives me the third screenshot. However when I put it at the first line, <code>color darcula</code> gives me the second screenshot. Also <code>set bg=dark</code> changes it to the third screenshot.</p>

<p>I assumed by putting it at the first line, I'm telling vim that this colorscheme is designed for a dark background. By putting it at the last line, on the contrast, I let vim assume that this colorscheme is designed for a light background and then make vim change some of it by itself (when it processes the last line).</p>

<p>If what I assume happened is true, my question is still unanswered. What exactly did vim change, when I use <code>set bg=dark</code> AFTER it has loaded a light colorscheme?</p>

<p>My entire vim configuration is available at <a href=""https://github.com/MichaelMa2014/.vim"" rel=""noreferrer"">https://github.com/MichaelMa2014/.vim</a></p>
","<h2>What happens when you <code>:set background</code></h2>

<p>The basic mechanism by which <code>:set background</code> works is actually pretty simple, and
it is documented (although not particularly clearly) in <code>:help 'background'</code>.</p>

<blockquote>
  <p>When 'background' is set Vim will adjust the default color groups for
  the new value.  But the colors used for syntax highlighting will not
  change.                   <em>g:colors_name</em><br>
  When a color scheme is loaded (the ""g:colors_name"" variable is set)
  setting 'background' will cause the color scheme to be reloaded.  If
  the color scheme adjusts to the value of 'background' this will work.
  However, if the color scheme sets 'background' itself the effect may
  be undone.</p>
</blockquote>

<p>So what actually happens when the <code>'background'</code> option is changed is this:</p>

<h3>If no colour scheme is currently loaded</h3>

<p>Vim reloads the default colours, using foreground colours deemed appropriate for
the new setting of <code>'background'</code></p>

<h3>If a colour scheme is currently loaded</h3>

<p>Vim reloads the colour scheme. When the colour scheme is loaded, either the
colour scheme sets colours appropriate to the new setting of <code>'background'</code>, or
the colour scheme <em>resets</em> <code>'background'</code> to the old value.</p>

<p>As you have already described, the <code>'background'</code> option is not intended to <em>set</em>
the background, but instead to <em>inform</em> Vim whether the background is dark or
light.</p>

<p>So if the colour scheme resets <code>'background'</code>, Vim takes this to mean
that the colour scheme simply doesn't support the new setting of <code>'background'</code>.
Since the user has indicated they <em>are using</em> such a background this means that
the current colour scheme is no longer appropriate, and so Vim unsets
<code>g:colors_name</code> and then reloads the default colours.</p>

<p>If you'd like to explore the actual code that is run when <code>'background'</code> is set, <a href=""https://github.com/vim/vim/blob/master/src/option.c#L6261"" rel=""noreferrer"">you can start here</a>.</p>

<h2>What's happening in your installation</h2>

<p>The odd behaviour you describe (in the first version of your question) can be
explained by this line in the documentation quoted above:</p>

<blockquote>
  <p>When a color scheme is loaded <em>(the ""g:colors_name"" variable is set)</em></p>
</blockquote>

<p>The problem is that your <code>colors/darcula.vim</code> file doesn't set this value, and
so even though the colors changed when you invoked <code>:color darcula</code>, <em>Vim
doesn't consider a colour scheme to currently be loaded.</em></p>

<p>Therefore, when you call <code>:set background=dark</code> Vim carries out the step in the
""If no colour scheme is currently loaded"" section above, and sets the default
colours for a dark background. This explains why <code>:color</code> then reports
<code>default</code>.</p>

<p>(Note, however, that setting the default colours does <em>not</em>, as you might expect,
remove all the colours that had previously been set, and this is why you end up
with the results you see, rather than the colours that are displayed when you
start up Vim in the first place. <a href=""http://peterodding.com/code/vim/colorscheme-switcher/#known_problems"" rel=""noreferrer"">There's some discussion of this issue
here</a>)</p>

<p>In short, your colour scheme is misconfigured: See <code>:edit
$VIMRUNTIME/colors/README.txt</code> (in particular the section at the bottom) for
more details on this, and on the interaction between <code>'background'</code> and colour
schemes.</p>
","13089"
"Execute normal command over range","4532","","<p>For a file looking like this:</p>

<pre><code>   2  AD,42.546245,1.601554,Andorra,376
   3  AE,23.424076,53.847818,United Arab Emirates,971
   4  AF,33.93911,67.709953,Afghanistan,93
   5  AG,17.060816,-61.796428,Antigua and Barbuda,1
</code></pre>

<p>I am trying to remove the leading spaces and numbers for the first 10 lines, so I'd end up with </p>

<pre><code>AD,42.546245,1.601554,Andorra,376
AE,23.424076,53.847818,United Arab Emirates,971
AF,33.93911,67.709953,Afghanistan,93
AG,17.060816,-61.796428,Antigua and Barbuda,1
</code></pre>

<p>Why does ""remove two words"" <code>:d2w</code> work for a single line, but not for a range <code>:1,10d2w</code>?</p>

<p>NOTE:</p>

<p>The problem itself is solved due to the fixed format, using <code>:1,10s/.\{8\}//</code>, so this is more about understanding how to use ranges with <code>:dNw</code> </p>
","<p>You can do this with the normal command : </p>

<pre><code>:1,10normal d2w
</code></pre>

<p>This is because the <code>d</code> operator doesn't accept a range, but only a motion :</p>

<pre><code>:h d

[""x]d{motion}           Delete text that {motion} moves over [into register x].
</code></pre>

<p>Alternatively you can select your text in visual mode and you can do :</p>

<pre><code>:'&lt;,'&gt;normal d2w
</code></pre>
","4419"
"List known filetypes","4504","","<p>How can I get a list of the names of filetypes that vim currently knows about?</p>

<p>I want to be able to do this so that when vim doesn't automatically detect a filetype I can try some of the filetypes vim knows about that may be similar and see if they provide reasonable syntax highlighting.</p>

<p>I know that vimscript files dealing with filetypes are put in the <code>ftplugin</code> directory by convention but they don't need to be (I'm not sure, but I don't think the vimscript files in the <code>ftplugin</code> directory are special) so I want to just ask vim what filetypes it knows about, regardless of how it learned about them.</p>
","<p><strong>Simple Solution</strong></p>

<p>Type <code>:setfiletype</code> <em>(with a space afterwards)</em>, then press <code>Ctrl-d</code>.</p>

<p>See <code>:help cmdline-completion</code> for more on autocompletion in vim's command line.</p>

<p><strong>Complicated Solution</strong></p>

<p>This solution uses the <code>'runtimepath'</code> option to get all available syntax directories, and then fetches a list of the vimscript files in those directories with their extensions removed.  This may not be the safest way to do it, so improvements are welcome:</p>

<pre><code>function! GetFiletypes()
    "" Get a list of all the runtime directories by taking the value of that
    "" option and splitting it using a comma as the separator.
    let rtps = split(&amp;runtimepath, "","")
    "" This will be the list of filetypes that the function returns
    let filetypes = []

    "" Loop through each individual item in the list of runtime paths
    for rtp in rtps
        let syntax_dir = rtp . ""/syntax""
        "" Check to see if there is a syntax directory in this runtimepath.
        if (isdirectory(syntax_dir))
            "" Loop through each vimscript file in the syntax directory
            for syntax_file in split(glob(syntax_dir . ""/*.vim""), ""\n"")
                "" Add this file to the filetypes list with its everything
                "" except its name removed.
                call add(filetypes, fnamemodify(syntax_file, "":t:r""))
            endfor
        endif
    endfor

    "" This removes any duplicates and returns the resulting list.
    "" NOTE: This might not be the best way to do this, suggestions are welcome.
    return uniq(sort(filetypes))
endfunction
</code></pre>

<p>You can then use this function in whatever way you want, such as printing all of the values in the list.  You could accomplish that like so:</p>

<pre><code>for f in GetFiletypes() | echo f | endfor
</code></pre>

<p>Note that this probably can be compacted quite a bit, it is just like this for readability.  I won't explain every function and command used here, but here are all the help pages for them:</p>

<ul>
<li><code>:help 'runtimepath'</code></li>
<li><code>:help :let</code></li>
<li><code>:help :let-&amp;</code></li>
<li><code>:help split()</code></li>
<li><code>:help :for</code></li>
<li><code>:help expr-.</code></li>
<li><code>:help :if</code></li>
<li><code>:help isdirectory()</code></li>
<li><code>:help glob()</code></li>
<li><code>:help fnamemodify()</code></li>
<li><code>:help add()</code></li>
<li><code>:help uniq()</code></li>
<li><code>:help sort()</code></li>
</ul>
","5782"
"Detect OS in Vimscript","4402","","<p>Can I retrieve the current operating system (Windows, Linux, OS X, ..) using <em>pure</em> Vimscript (no Python or Perl)?</p>

<p>I want to enable different settings in my (synchronized) <em>.vimrc</em> for different types of operation systems I am using.  </p>
","<p>The best way is to use <a href=""http://vimhelp.appspot.com/eval.txt.html#has%28%29"" rel=""noreferrer""><code>has()</code></a>, with
this function you can check for features of Vim; OS specific features from
<a href=""http://vimhelp.appspot.com/eval.txt.html#feature-list"" rel=""noreferrer""><code>:help feature-list</code></a>:</p>

<pre><code>macunix                 Macintosh version of Vim, using Unix files (OS-X).
unix                    Unix version of Vim.
win32                   Win32 version of Vim (MS-Windows 95 and later, 32 or
                        64 bits)
win32unix               Win32 version of Vim, using Unix files (Cygwin)
</code></pre>

<p>And some older (semi-deprecated) systems:</p>

<pre><code>amiga                   Amiga version of Vim.
os2                     OS/2 version of Vim.
win16                   Win16 version of Vim (MS-Windows 3.1).
win64                   Win64 version of Vim (MS-Windows 64 bit).
win95                   Win32 version for MS-Windows 95/98/ME.
</code></pre>

<p>Example:</p>

<pre><code>if has('win32')
    echo ""Someone please open the Window(s)!""
endif
</code></pre>

<p>An alternative way with more flexibility is to call the external <code>uname</code>, this
also allows you to get the version number and such:</p>

<pre><code>let uname = system('uname -a')
</code></pre>

<p>Note that <code>uname</code> isn't present on most Windows systems.</p>

<p>It's generally best to use <em>feature detection</em>, rather than <em>OS detection</em>. For example by using one of the features in <code>has()</code> or checking if some path exists. <a href=""https://vi.stackexchange.com/a/2575/51"">200_success' post</a> gives a good overview of that, so I'll not repeat the same content here.</p>
","2574"
"How do I open a file from another git branch?","4384","","<p>I'd like to open a file from another branch in the current git repository. I have seen <a href=""https://stackoverflow.com/q/7856416/2072269"">this SO question</a>, but the suggestions for combining it with Vim are cumbersome (pipe to Vim, open stdin, set filetype, etc. manually). Is there a simpler way that retains syntax highlighting, filetype settings, etc.?</p>

<p>If it helps:</p>

<ul>
<li>I have the <a href=""https://github.com/tpope/vim-fugitive"" rel=""nofollow noreferrer"">fugitive</a> plugin installed (though rarely used).</li>
<li>I don't need to modify it.</li>
</ul>

<p>The file can be the file for the currently open buffer, or a different one.</p>
","<p>You can use <code>:Gedit</code>/<code>:Gsplit</code>/<code>:Gvsplit</code>/... with the form <code>{revision}:{filename}</code></p>

<pre><code>:Gedit branch:/foo/bar.c
</code></pre>

<p>Note: If the file is the same as the current file you can abbreviate the command like so: <code>:Gsplit branch:%</code>.</p>

<p>It is often the case that a diff of the current file is preferred than just opening the file on a different branch. You can do this via <code>:Gdiff {branch}</code>.</p>

<p>For more help see:</p>

<pre><code>:h fugitive-:Gedit
:h fugitive-revision
:h fugitive-:Gdiff
:h c_%
</code></pre>

<p>You may also want to check out <a href=""http://vimcasts.org/"">Vimcasts</a> episodes in the <a href=""http://vimcasts.org/blog/2011/05/the-fugitive-series/"">Fugitive Series</a>.</p>
","3748"
"Can I open a new vim split from an existing buffer?","4284","","<p>I know it's possible to open a new file in a split, with <code>:split</code> or <code>:vsplit</code>, but is it possible to open a new split with an existing buffer, potentially leveraging autocomplete?</p>
","<p>The <code>sbuffer</code> command will let you create a split with an existing buffer name or number. <code>:sb#</code> will open a split with buffer number <code>#</code> (as displayed in the <code>:buffers</code> list). <code>:sb foo</code> will open a split with the buffer named <code>foo</code>. Tab-complete will cycle the available buffer names.</p>

<p>You can use <code>:vertical sb...</code> if you want a vertical split instead of the default, horizontal, one. </p>
","86"
"How to format xml or html's attributes into multiple lines instead of lining up on one line?","4260","","<p>I'm using plugin <a href=""https://github.com/Chiel92/vim-autoformat"" rel=""noreferrer"">Chiel92/vim-autoformat</a> auto formatting xml files. So the default format program used for xml file is <code>tidy</code>. The way it formats xml file is like below:</p>

<pre><code>&lt;List id='list' items='{/sss}' mode='{device&amp;gt;/listMode}' noDataText='{i18n&amp;gt;masterListNoDataText}' select='onSelect' growing='true' growingScrollToLoad='true'&gt;
    &lt;items&gt;
        &lt;ObjectListItem type='{device&amp;gt;/listItemType}' press='onSelect' title='{Name}' number='{ path: ""Price"", formatter: ""exp.ind.cli.util.Formatter.currencyValue"" }' numberUnit='USD'&gt;&lt;/ObjectListItem&gt;
    &lt;/items&gt;
&lt;/List&gt;
</code></pre>

<p>As you can see the attributes of the tags are on one line, and it can last very long even goes out of the screen. What I want is all the attributes to be formatted on separate lines( vertically aligned ).</p>

<pre><code>&lt;List id='list' 
    items='{/sss}' 
    mode='{device&amp;gt;/listMode}' 
    noDataText='{i18n&amp;gt;masterListNoDataText}' 
    select='onSelect' 
    growing='true' 
    growingScrollToLoad='true'&gt;

    &lt;items&gt;
        &lt;ObjectListItem type='{device&amp;gt;/listItemType}' 
                    press='onSelect' 
                    title='{Name}' 
                    number='{ path: ""Price"", formatter: ""exp.ind.cli.util.Formatter.currencyValue"" }' 
                    numberUnit='USD'&gt;
        &lt;/ObjectListItem&gt;
    &lt;/items&gt;
&lt;/List&gt;
</code></pre>

<p>I think it makes easier to spot the attributes and improve the readability of the xml file. Is there any way to achieve this? </p>
","<p>This should <em>almost</em> work, it aligns the attributes slightly different than your example, but it's probably ""close enough"":</p>

<pre><code>autocmd FileType xml let g:formatprg_args_expr_xml .= '."" --indent-attributes 1""'
</code></pre>

<p>Which will format it like as:</p>

<pre><code>&lt;List id='list'
      items='{/sss}'
      mode='{device&amp;gt;/listMode}'
      noDataText='{i18n&amp;gt;masterListNoDataText}'
      select='onSelect'
      growing='true'
      growingScrollToLoad='true'&gt;
    &lt;items&gt;
        &lt;ObjectListItem type='{device&amp;gt;/listItemType}'
                        press='onSelect'
                        title='{Name}'
                        number='{ path: ""Price"", formatter: ""exp.ind.cli.util.Formatter.currencyValue"" }'
                        numberUnit='USD'&gt;&lt;/ObjectListItem&gt;
    &lt;/items&gt;
&lt;/List&gt;
</code></pre>

<p>Now, figuring this out was actually quite easy :-) Here's what I did:</p>

<ol>
<li><p>I looked at the <a href=""https://github.com/Chiel92/vim-autoformat"" rel=""noreferrer"">vim-autoformat</a> homepage to see how it formatted XML files, and it says: <em>""<code>tidy</code> for XHTML and XML""</em>.</p></li>
<li><p>So, we need to see if the <code>tidy</code> tool supports formatting the attributes like you want. After installing <code>tidy</code>, I ran <code>tidy -h</code> to see the help for this program. This told me that <code>-help-config</code> lists all configuration options, so I ran that:</p>

<pre><code>$ tidy -help-config
</code></pre>

<p>This gave me a very long list, so I put the output in Vim:</p>

<pre><code>$ tidy -help-config | vim -
</code></pre></li>
<li><p>Since we want to do something with <em>attributes</em>, I used <code>/attr</code> to search for that, and after pressing <code>n</code> once I get:</p>

<pre><code>indent-attributes           Boolean    y/n, yes/no, t/f, true/false, 1/0
</code></pre>

<p>I have no idea what this does, but it looks like it might be what we want?</p></li>
<li><p>Let's try adding this option. I went back to the vim-autoformat homepage, and noticed the <em>""How can I change the behaviour of formatters, or add one myself?""</em> section, which is how I figured out how to add the above option (this is the only part that required some effort, since the section isn't brilliantly written).</p></li>
</ol>
","3161"
"How can I view and edit my recording (i.e. recorded macro)?","4210","","<p>I'm using complex repeats to record my operations (<kbd>qq</kbd> to record, <em>some operations</em>, <kbd>q</kbd> to stop) and I did a mistake.</p>

<p>It is possible to see what I've recorded and correct the mistake, instead of doing it again?</p>

<p>Invoking recorded characters by <kbd>@q</kbd> works, but I can't see it in my mappings (<kbd>:map q</kbd> - <code>No mapping found</code>).</p>

<p>And there is not much information in help by typing: <a href=""http://vimhelp.appspot.com/repeat.txt.html#recording""><code>:help recording</code></a>.</p>
","<p><em>Note: I'm assuming you're using the <code>a</code> register for the entirety of this answer, but you can use any register</em></p>

<p><em>Note2: <code>&lt;1b&gt;</code> is <kbd>Esc</kbd>; you can insert this with <kbd>Ctrl+v</kbd> and then <kbd>Esc</kbd>. It may also show up as <code>^[</code> (depending on the <code>display</code> setting).</em></p>

<hr>

<p>It's not a mapping; so it makes sense that <code>:map</code> doesn't work. It's recorded in a register, and you can see &amp; edit it like any register.</p>

<p>All that <kbd>q</kbd> does is <em>""clear this register, and append any keystroke to it""</em>, and all that <kbd>@</kbd> does is <em>""evaluate a register as commands""</em>.</p>

<p>There is nothing ""different"" about a macro, you can invoke any register as a macro.</p>

<hr>

<p>To <strong>view</strong> just use:</p>

<pre><code>:echo @a
</code></pre>

<p>Just like any register.</p>

<p>You can also use <code>:registers</code> to view all registers.</p>

<hr>

<p>To <strong>edit</strong> you can do several things:</p>

<p>The simplest way you be to just assign to <code>@a</code>, like so:</p>

<pre><code>:let @a='iasd&lt;1b&gt;'
</code></pre>

<p>This will start insert mode (<code>i</code>), insert <code>asd</code>, and Escape back to normal mode.</p>

<p>This isn't very useful for extensive editing; you could use functions (ie. <code>substitute()</code>), or maybe appending something (<code>:let @a=@a . 'more'</code>), but changing something in the middle isn't that easy.</p>

<p>I've found that the best way for this, is to start a new buffer with <code>:split</code> or <code>:tabnew</code> and edit the register by inserting it there, editing it, and then copying it back.</p>

<p>You can use <kbd>""ap</kbd> which will insert the text in the buffer (where <code>a</code> is your register):</p>

<pre><code>iThis is A&lt;1b&gt;
</code></pre>

<p>Now I can just change the line to maybe:</p>

<pre><code>iThis is an edited macro&lt;1b&gt;
</code></pre>

<p>Then I do <kbd>^v$""ay</kbd> to yank (copy) this line to the <code>a</code> register:</p>

<ul>
<li><kbd>^</kbd> for start of line</li>
<li><kbd>v</kbd> for visual mode</li>
<li><kbd>$</kbd> for end of line</li>
<li><kbd>""ay</kbd> yank the selection to register <code>a</code></li>
</ul>

<p>If you wish, you can do this without using visual mode with <kbd>^""ay$</kbd>.</p>

<p>You can now use <kbd>@a</kbd>, as if this is what you originally recorded.</p>

<p>You can also just use <kbd>yy</kbd>, and then <kbd>@""</kbd>, which is a bit faster. This will also copy the trailing newline, though, and may cause side-effects...  Another way to make this faster is to use a macro :-)</p>
","760"
"Is it possible to make Vim auto-save files?","4079","","<p>Some word processors and text editors auto-save the files we're editing from time to time, which is very convenient for surviving from nasty crashes, etc.</p>

<p>Is there a way to make Vim auto-save our files after a specific interval? </p>
","<p>There isn't a builtin option, although <code>:help 'autosave'</code> (in todo.txt) refers to a description of what such an option could do.</p>

<p>One possible way to implement this is to use the <code>CursorHold</code> autocommand event.  This event is triggered when the user hasn't pressed a key for <code>'updatetime'</code> milliseconds.</p>

<pre><code>autocmd CursorHold * update
</code></pre>

<p>The <code>:update</code> command only saves the buffer if it is modified.  If you also wanted this to happen while insert mode is active, <code>CursorHoldI</code> could be added to the event list.</p>

<pre><code>autocmd CursorHold,CursorHoldI * update
</code></pre>

<p>Another alternative is the <code>'autowrite'</code> option, which will save the buffer before executing an external command (useful for saving before running <code>:make</code>) or switching to a different buffer.</p>
","79"
"How to make vim automatically add a newline to the end of a file?","4076","","<p>Vim normally writes <code>&lt;EOL&gt;</code> for the last line only when there was one in the original file.</p>

<p>How to make vim to write a new line at the end of a file all the time (when the file is not binary and there isn't already one)?</p>

<p>I've tested <code>eol</code> option, but it didn't work as expected.</p>

<p>See also: <a href=""http://vim.wikia.com/wiki/Preserve_missing_end-of-line_at_end_of_text_files"" rel=""nofollow noreferrer"">Preserve missing end-of-line at end of text files</a>, but opposite. And: <a href=""https://stackoverflow.com/q/729692/55075"">Why should files end with a newline?</a></p>
","<h3>Basic info</h3>

<p>Vim doesn't show latest newline in the buffer but actually vim always place EOL at the end of the file when you write it, because it standard for text files in Unix systems. You can find more information about this <a href=""https://unix.stackexchange.com/questions/18743/whats-the-point-in-adding-a-new-line-to-the-end-of-a-file"">here</a>. In short you don't have to worry about the absence a new lines at the end of the file in vim.</p>

<h3>Experiment 1</h3>

<p>You can do this small experiment to check this behaviour. In the terminal execute:</p>

<pre><code>$vim test_test
</code></pre>

<p>enter for example only character <code>1</code> and save file <kbd>:</kbd><kbd>w</kbd>.</p>

<p>You have only one character in the file, right? Actually no :) You now have in your file <code>1</code> and <code>LF</code> characters. Let's check it, with hexdump utility:</p>

<pre><code>$hexdump test_test
</code></pre>

<p>output:</p>

<pre><code>0000000 31 0a
0000002
</code></pre>

<p><code>31</code> is ASCII code for character <code>1</code>, and <code>0a</code> is ASCII code for non-printing <code>LF</code> character which for the UNIX as you may already know code for end of line.</p>

<h3>Experiment 2</h3>

<p>But what if we will open file which don't have <code>eol</code> symbol at the end of the file. Let's check it too. Let's create file without eol at the end, for example like this:</p>

<pre><code>$echo -n ""1"" &gt; test_without_eol
</code></pre>

<p>and then again let's look inside it with hexdump</p>

<pre><code>$hexdup test_without_eol
</code></pre>

<p>output will be:</p>

<pre><code>000000 31
0000001
</code></pre>

<p>So there are no any <code>eol</code> characters here. Let's open this file in vim:</p>

<pre><code>$vim test_without_eol
</code></pre>

<p>At the bottom of editor you'll see:</p>

<pre><code>""test_without_eol"" [noeol] 1L, 1C
</code></pre>

<p>And if you'll save this file <code>eol</code> character will be putted automatically.</p>

<h3>What we can do about this?</h3>

<p>If you really need to see end of the file. Try to use this command:</p>

<pre><code>:set listchars=eol:$
</code></pre>

<p>it will show all <code>eol</code> characters as <code>$</code> sign.</p>
","3304"
"What is the easiest way to insert en dash in Vim?","4047","","<p>To insert an <a href=""http://www.thepunctuationguide.com/en-dash.html"">en dash</a>, I use <code>^v u 2014</code> which is seven keypresses. Is there an easier way? (I was looking at digraphs and didn't find en dash there.)</p>
","<p>You can use digraphs: <kbd>Ctrl+k</kbd><kbd>-</kbd><kbd>N</kbd> (with a capital <code>N</code>)</p>

<p>In Insert mode, digraphs are entered by <kbd>Ctrl+k</kbd> followed by a two-character sequence. For en-dash, the sequence is <code>-N</code>.</p>

<p>As Quincy pointed out, <code>U+2014</code> is em-dash. If you want to enter that using digraphs, the sequence is <code>-M</code>.</p>
","2201"
"How can I copy/paste new text without auto-indentation at every new line?","4045","","<p>How I paste now:</p>

<ol>
<li>Right-click/Copy or simply highlight.</li>
<li>Right-click/Paste or Middle Click or CTRL+SHFT+V</li>
<li>Indents appear at increasing intervals: 0, 2, 4, 6, +</li>
</ol>

<p>Question at hand:</p>

<p>From prior research, I found that the quick and dirty solution is entering the following in my <code>.vimrc</code> file: <code>set paste</code>. However, those who suggested that command said that <code>set paste</code> affects other settings. (Off the top of my head, I forget.)</p>

<p>I would like to know what option I can set that simply pastes without extra indentation. <em>If that ends up being <code>'paste'</code></em>, then I would like to know what exactly that command does.</p>

<p>I only see one difference. When in Vim, <code>-- INSERT --</code> becomes <code>-- INSERT (paste) --</code></p>
","<p>OK, here is a ""yank &amp; put"" primer…</p>

<p>In Vim, the primary commands for yanking (copying) and putting (pasting) are <code>y</code> and <code>p</code>.</p>

<p>Yanking places the yanked text in a register. That register is the unnamed register, <code>""</code>, by default but one can use other registers:</p>

<pre><code>""ay    "" yank into register a
""by    "" yank into register b
""+y    "" yank into clipboard register
[…]
</code></pre>

<p>Similarly, putting inserts text from a register. That register is the unnamed register by default but one can use other registers:</p>

<pre><code>""ap    "" put from register a
""+p    "" put from clipboard register
""3p    "" put from the register 3
[…]
</code></pre>

<p>Those commands are prefered to ""Right-click/Paste or Middle Click or CTRL+SHFT+V"" because the text is ""put"" into the buffer without any special treatment. With ""Right-click/Paste or Middle Click or CTRL+SHFT+V"", the text is inserted in the buffer <strong><em>as if you typed it</em></strong> and is thus subjected to automatic indenting/formatting.</p>

<p>If you can't use <code>""+p</code> or <code>""*p</code> — working over SSH without X forwarding or Vim built without clipboard support — the <code>paste</code> option disables automatic indenting and a bunch of other very useful options so that your <em>typed</em> text is not alrered.</p>

<p>As noted in <code>:help 'paste</code>, the options has potentially very bad side effects so it is important to disable it right after you pasted your text:</p>

<pre><code>:set paste
(paste)
:set nopaste
</code></pre>

<p>That dance is obviously a pain in the ass so there is another option that lets you define a special shortcut for toggling <code>paste</code>:</p>

<pre><code>set pastetoggle=&lt;F12&gt;
</code></pre>

<p>That slightly reduces the pain:</p>

<pre><code>&lt;F12&gt;
(paste)
&lt;F12&gt;
</code></pre>

<p>But it is still a pain.</p>

<p>If you can, it is recommended to install a proper Vim with clipboard support so you can use <code>""*p</code> or <code>""+p</code> (depending on how you copied your text) to paste text <em>the right way</em>.</p>

<ul>
<li>On Mac OS X: install MacVim,</li>
<li>on Debian-based systems: install the vim-gnome or vim-gtk package,</li>
<li>on CentOS: install the vim-enhanced package.</li>
</ul>

<p>Reference:</p>

<pre><code>:help p
:help y
:help registers
:help 'paste'
:help 'pastetoggle'
</code></pre>
","734"
"How do I change the Airline theme?","4016","","<p>I'm using airline with its default theme (relying from my theme gruvbox).</p>

<p>I use <code>:AirlineTheme base16</code> while I have already opened my vim to change my airline theme to base16.</p>

<p>But I want to change the default airline theme permanently, when I set </p>

<pre><code>AirlineTheme base16
call AirlineTheme base16
set AirlineTheme base16
</code></pre>

<ul>
<li><code>AirlineTheme base16</code> -- Gives no failure message but removes all airline themes.</li>
<li><code>call AirlineTheme base16</code> -- Gives error <code>""Missing parentheses</code>. I also tried it as <code>call AirlineTheme base16()</code>. Still same error. </li>
<li><code>set AirlineTheme base16</code> -- This says <code>unknown option AirlineTheme</code></li>
</ul>

<p>How can I set it?</p>
","<p>Put the following in your .vimrc:</p>

<pre><code>let g:airline_theme='base16'
</code></pre>

<p>You'll also need to install the <a href=""https://github.com/vim-airline/vim-airline-themes"">vim-airline/vim-airline-themes</a> plugin.</p>
","6634"
"Vim search replace all files in current (project) folder","4000","","<p>One of the open questions I have about Vim is if there is a way to perform a search/replace in the current project (bear with me if I use this notion inherited from other editors).</p>

<p>For instance, let's assume I want to search my project files for a method name, and rename all the instances of that method call.</p>

<p>This is how I can proceed with Sublime.</p>

<p><img src=""https://i.stack.imgur.com/wRGOZ.png"" alt=""enter image description here""></p>

<p>How would you do this in Vim (possibly MacVim) without relying on other programs such as <code>ack</code> or <code>sed</code>?</p>
","<p>There are several ways to do this.</p>

<h3>Inside Current Directory</h3>

<p>If you want to perform the search/replace in a project tree, you can use Vim's <a href=""http://vimhelp.appspot.com/editing.txt.html#argument-list"">argument list</a>.</p>

<p>Simply open Vim and then use the <code>:args</code> command to populate the argument list. You can pass in multiple filenames or even globs.</p>

<p>For example, <code>:args **/*.rb</code> will recursively search the current directory for ruby files. Notice that this is also like opening Vim with <code>vim **/*.rb</code>. You can even use the shell's <code>find</code> command to get a list of all files in the current directory by running: </p>

<pre><code>:args `find . -type f`
</code></pre>

<p>You can view the current args list by running <code>:args</code> by itself. If you want to add or delete files from the list, you can use the <code>:argadd</code> or the <code>:argdelete</code> commands respectively.</p>

<p>Once you're happy with the list, now you can use Vim's powerful <a href=""http://vimhelp.appspot.com/editing.txt.html#%3Aargdo""><code>:argdo</code></a> command which runs a command for every file in the argument list: <code>:argdo %s/search/replace/g</code></p>

<p>Here are some tips for searching (based on some of the comments):</p>

<ol>
<li>Use a word boundary if you wanted to search for ""foo"" but not ""foo_bar"". Use the <code>\&lt;</code> and <code>\&gt;</code> constructs around the search pattern like so: <code>:argdo %s/\&lt;search\&gt;/foobar/g</code></li>
<li>Use a <code>/c</code> search flag if you want Vim to ask for confirmation before replacing a search term.</li>
<li>Use a <code>/e</code> search flag if you want to skip the ""pattern not found"" errors.</li>
<li>You can also choose to save the file after performing the search: <code>:argdo %s/search/replace/g | update</code>. Here, <code>:update</code> is used because it will only save the file if it has changed.</li>
</ol>

<h3>Open buffers</h3>

<p>If you already have buffers open you want to do the search/replace on, you can use <code>:bufdo</code>, which runs a command for every file in your buffer list (<code>:ls</code>).</p>

<p>The command is very similar to <code>:argdo</code>:  <code>:bufdo %s/search/replace/g</code></p>

<p>Similar to <code>:argdo</code> and <code>:bufdo</code>, there is <code>:windo</code> and <code>:tabdo</code> that act on windows and tabs respectively. They are less often used but still useful to know.</p>
","2777"
"Undo in insert mode","3981","","<p>Is there a command to undo the last operation performed while in insert mode?</p>

<p>I just pasted text from the wrong register using <code>&lt;C-r&gt;</code>, and I have two options:</p>

<ol>
<li>Delete by hand what I just pasted and start over.</li>
<li>Switch to normal mode, hit <code>u</code> and lose the text I typed before hitting <code>&lt;C-r&gt;</code>.</li>
</ol>

<p>Is there a better way?</p>
","<p>Vim offers a limited ability to specify the scope of an undoable change with the <code>Ctrl-G u</code> command, which breaks the undo sequence. See</p>

<pre><code>:help i_CTRL-G_u
</code></pre>

<p>In your case, the solution would be to remap <code>&lt;C-R&gt;</code> like this:</p>

<pre><code>:inoremap &lt;C-R&gt; &lt;C-G&gt;u&lt;C-R&gt;
</code></pre>

<p>Then typing <code>&lt;C-O&gt;u</code> will undo just the changes made since you typed <code>&lt;C-R&gt;</code>. See</p>

<pre><code>:help i_CTRL-O
</code></pre>
","4558"
"How to disable arrow keys in vim?","3869","","<p>I want to teach myself using hjkl more than using the arrow keys in order to stay on the home row.</p>

<p>Yet my habits are quite strong and I don't even realize that made that hand movement I want to avoid.</p>

<p>In order to break that habit: How can I disable the arrow keys so that I am forced to use the hjkl keys?</p>

<p>As a bonus, it would be helpful if there was a message shown <code>Dont't use this!</code> yet that it's not mandatory. If they don't work, it will be confusing enough for me to rethink my habits.</p>
","<p>You can install the <a href=""https://github.com/wikitopian/hardmode"">hardmode plugin</a> and in your <code>.vimrc</code> put in</p>

<pre><code>let g:HardMode_level = 'wannabe'
let g:HardMode_hardmodeMsg = 'Don't use this!'
autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
</code></pre>

<p>If you don't want to use a plugin (which may be a better choice, as you get to customise everything yourself!), use <code>nnoremap</code>, <code>vnoremap</code> and <code>inoremap</code> on <code>&lt;Left&gt;</code>, <code>&lt;Right&gt;</code>, <code>&lt;Up&gt;</code>, <code>&lt;Down&gt;</code>, <code>&lt;PageUp&gt;</code> and <code>&lt;PageDown&gt;</code>, something like this:</p>

<pre><code>nnoremap &lt;Left&gt; :echo ""No left for you!""&lt;CR&gt;
vnoremap &lt;Left&gt; :&lt;C-u&gt;echo ""No left for you!""&lt;CR&gt;
inoremap &lt;Left&gt; &lt;C-o&gt;:echo ""No left for you!""&lt;CR&gt;
</code></pre>
","5852"
"How can I change the default indentation based on filetype?","3860","","<p>I'd like to have different indentations based on the type of file I am working on. For example, working on a <code>.c</code> file I'd like my indentation be 4 spaces. In <code>.html</code> files I'd like to (have to) work with tabs. </p>

<p>How do I achieve that?</p>
","<p>The best method is to put those settings in <code>~/.vim/after/ftplugin/&lt;filetype&gt;.vim</code>.</p>

<p>For HTML (assuming you want 4 characters-wide tabs):</p>

<pre><code>~/.vim/after/ftplugin/html.vim

setlocal shiftwidth=4
setlocal softtabstop=4
setlocal noexpandtab
</code></pre>

<p>Using an ftplugin is prefered to using autocommands because Vim already does filetype checks by itself and already tries to source the adequate ftplugin so there's no reason to force even more checks and reimplement the wheel.</p>

<p>-- edit --</p>

<p>Assuming you have <code>filetype plugin on</code> in your <code>vimrc</code> — which you should — Vim will try to detect the filetype of the files you edit and, once the correct filetype is found and set for the buffer, try to source the corresponding ftplugin in these standard locations:</p>

<pre><code>$VIMRUNTIME/ftplugin/html.vim
~/.vim/ftplugin/html.vim
~/.vim/ftplugin/after/html.vim
</code></pre>

<p>All of that happens <em>automatically</em> so, if your filetype is recognized by Vim, there is absolutely no reason to add any filetype detection logic: just add your settings to the right ftplugin and you are good.</p>
","43"
"How do I edit crontab files with Vim (I get the error: 'temp file must be edited in place')","3823","","<p>How do I edit <code>crontab</code> files in FreeBSD?</p>

<pre><code>$ crontab -e
# ... I do my thing in vim &amp; :wq

""crontab.9ZcXiFaawt"" 6L, 203C written
crontab: temp file must be edited in place
Exit 1
</code></pre>

<p>Using <code>EDITOR=nvi</code> works fine... Linux also seems to work fine...</p>
","<p>The problem is how Vim writes files. By default, it makes a copy of the file and overwrite the original one.</p>

<p>You can observe this with:</p>

<pre><code># Show the file's inode
$ ls -i a
3156153 a

# Open file in Vim, :wq

# inode changed!
$ ls -i a
3155322 a
</code></pre>

<p><code>crontab</code> gets confused by this (see <code>:help crontab</code>)</p>

<p>You need to use <code>:set backupcopy</code> to <code>yes</code> to make Vim overwrite the original file:</p>

<pre><code>""yes""   make a copy of the file and overwrite the original one
</code></pre>

<p>You can do this automatically for crontab files with:</p>

<pre><code>au FileType crontab setlocal bkc=yes
</code></pre>
","138"
"How can I automatically indent on new lines?","3738","","<p>I work on projects with varying levels of indentation. In many of these projects, because of how the files are typically structured, most lines are indented at least two levels (such as methods in Java files).</p>

<p>This would mean that creating a new line when on a line line</p>

<pre><code>public void something () {
</code></pre>

<p>Would bring my cursor to the next line, automatically indented in, like</p>

<pre><code>public void something () {
    [cursor]
</code></pre>

<p>While I can hit the tab key a few times on a new line to get it to line up, is there a better way of doing this (possible automatically)?</p>
","<p>This can be done using a combination of the <code>autoindent</code> option and the <code>filetype</code> plugin.</p>

<p>The <code>autoindent</code> option will copy your current indentation when creating a new line. So if your current indentation level is 4 when you start the new line, the cursor will be moved to the same indentation level on the next line.</p>

<p>In your <code>~/.vimrc</code> file, you would put</p>

<pre><code>set autoindent
</code></pre>

<p>You can use the <code>filetype</code> plugin as well to automatically determine the next indentation level based on the file type.</p>

<p>You can enable this on the fly with</p>

<pre><code>:filetype indent on
</code></pre>

<p>Or, in your <code>~/.vimrc</code> file you would put</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>Which will automatically determine the indentation based on the file type.</p>
","234"
"How to open multiple files in split mode?","3726","","<p>I know how to <a href=""https://vi.stackexchange.com/questions/64/is-it-possible-to-split-vim-window-to-view-multiple-files-at-once"">split windows in vim</a>, but it's possible to open multiple files using vim in split mode (at startup) from the command line?</p>

<p>In example:</p>

<pre><code>vim file1 file2 file3
</code></pre>

<p>or:</p>

<pre><code>vim *.cpp
</code></pre>
","<p>You can use the option <code>-o</code> to open the files in horizontal splits or <code>-O</code> to open vertical splits. The following commands open a window for each file specified:</p>

<pre><code>vim -o *.cpp
vim -O foo bar baz
</code></pre>

<p>You can tell Vim the maximum number of windows to open by putting an integer after <code>o</code> or <code>O</code> options, the following example will open at most two windows no matter how many file matches, you will see the first two file specified on the command line, the rest will remain hidden:</p>

<pre><code>vim -o2 *.cpp
</code></pre>

<p>See <a href=""http://vimhelp.appspot.com/starting.txt.html#-o"" rel=""noreferrer""><code>:help -o</code></a> for all the details.</p>
","733"
"How to make a vimscript function with optional arguments?","3685","","<p>I want to make a function that has optional arguments.</p>

<p>In python I would do something like this:</p>

<pre><code>def functionName(arg1,arg2=false,arg3=false):
    if arg2:
        #Do stuff with arguments
    else:
        #Do stuff without arguments
</code></pre>

<p>I have tried doing <code>function FunctionName(arg1,arg2=false,arg3=false)</code>, but it just gives me a error saying invalid argument.</p>

<p>How would I do this in vimscript?</p>
","<p>Yes, you can take optional arguments in a function.  It is not as convenient as python's way of doing it, but this is how you do it:</p>

<pre><code>function FooBar(...) "" This is like *args in python
    echom a:0 "" a:0 contains an integer which is the number of arguments passed to the function
    echom a:1 "" a:1 contains the first argument passed, a:2 contains the second and so on
    echo a:000 "" a:000 contains a list of all arguments that were passed to the function
endfunction
</code></pre>

<p>Note that you may only have up to 20 arguments in this fashion.</p>

<p>Relevant help topics:</p>

<pre><code>:help :function
:help function-argument
</code></pre>
","2411"
"How do I change the colour of the statusline of the currently focused window?","3648","","<p>How do I change the colour of the statusline of the currently focused window?</p>

<p>I've seen colorschemes modify this. Is this some sort of highlight group? Or something else?</p>
","<p>You can change it in your vimrc. The currently focused window is highlight group <code>Statusline</code>, other windows are <code>StatuslineNC</code>.</p>

<p>Example for terminal Vim:</p>

<pre><code>hi StatusLine                  ctermfg=8     ctermbg=2     cterm=NONE
hi StatusLineNC                ctermfg=2     ctermbg=8     cterm=NONE
</code></pre>

<p>For the GUI, use <code>guifg</code> and <code>guibg</code>.</p>
","2337"
"How to edit files non-interactively (e.g. in pipeline)?","3637","","<p>I would like to edit files passed in pipeline input using vim in non-interactive way or edit files in-place (similar to <code>sed</code>).</p>

<p>Few examples using <code>sed</code>:</p>

<pre><code>$ sed -i'.bak' s/foo/test/g file   # Edit file in-place.
$ cat file | sed s/foo/test/g      # Parse file in pipeline.
</code></pre>

<p>However I could read in <a href=""http://mywiki.wooledge.org/BashFAQ/021#Using_nonstandard_tools"">here</a>, that:</p>

<blockquote>
  <p><code>sed</code> is a <strong>S</strong>tream <strong>ED</strong>itor, not a file editor. Nevertheless, people everywhere tend to abuse it for trying to edit files. It doesn't edit files.</p>
</blockquote>

<p>Secondly some options such as in-place editing (<code>-i</code>) is portable.</p>

<p>How the same functionality can be achieved in vim?</p>
","<p>To edit file non-interactively using <code>ex</code> (<code>vi</code> is the visual mode for <code>ex</code>), you can use <code>+{command}</code> or <code>-c {command}</code> parameters which allows you to execute the vi commands after the first file has been read.</p>

<p>The <code>ex</code> is a standard command-line editor (similar to <code>ed</code>).</p>

<p>There is also <a href=""http://linux.die.net/man/1/vipe"" rel=""nofollow noreferrer""><code>vipe</code></a> (a Vim command pipe editor) should be used which is part of <code>moreutils</code> package and it will allows you to run your editor in the middle of a unix pipeline and edit the data that is being piped between programs.</p>

<h3>Examples</h3>

<p>Simple standard input and output using pipes can be achieved by this shell syntax:</p>

<pre><code>$ ex -sc'%p|q!' &lt;(echo Example)
$ echo Example | ex -sc'%p|q!' /dev/stdin
</code></pre>

<p>Here is simple example how to print the file after substitution:</p>

<pre><code>$ ex /etc/hosts +%s/127/128/ge -sc'%p|q!'
</code></pre>

<p>More examples for editing files in-place:</p>

<pre><code>$ ex +'%s/127/128/g' -cswq file
$ ex -sc '%s/olddomain\.com/newdomain.com/g|x' file
$ printf '%s\n' 'g/olddomain\.com/s//newdomain.com/g' w q | ex -s file
$ ex -s ""$file"" &lt;&lt;&lt; $'g/old/s//new/g\nw\nq'
$ ex -sc 'argdo %s/old/new/ge|x' ./**
$ find . -type f -exec ex -sc '%s/old/new/g|x' {} \;
</code></pre>

<p>You can also use <code>-s {scriptin}</code> so the commands are loaded from the file, in example:</p>

<pre><code>$ printf ""%s\n"" '%s/foo/test/ge' 'wq' &gt; cmds.vim
$ vim -s cmds.vim -es file
</code></pre>

<p>or using I/O redirection:</p>

<pre><code>$ vim file &lt; cmds.vim
</code></pre>

<p>To edit one file and save the changes to another, check the following examples:</p>

<pre><code>$ ex +%s/127/128/g -sc'wq! new_file' /etc/hosts
$ cat /etc/hosts /etc/fstab | vim - -es '+:%s/foo/test/g' '+:wq! file3'
</code></pre>

<hr>

<h3>More practical examples.</h3>

<p><a href=""https://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes#Ex-mode"" rel=""nofollow noreferrer"">Real live example</a> from the <a href=""https://en.wikipedia.org/wiki/RPM_Package_Manager"" rel=""nofollow noreferrer"">RPM</a> specification:</p>

<pre><code>vim -E -s Makefile &lt;&lt;-EOF
   :%substitute/CFLAGS = -g$/CFLAGS =-fPIC -DPIC -g/
   :%substitute/CFLAGS =$/CFLAGS =-fPIC -DPIC/
   :%substitute/ADAFLAGS =$/ADAFLAGS =-fPIC -DPIC/
   :update
   :quit
EOF
</code></pre>

<p><a href=""https://unix.stackexchange.com/q/6389/21471"">Extracting html tags</a>:</p>

<pre><code>ex -s +'bufdo!/&lt;div.*id=.the_div_id/norm nvatdggdG""2p' +'bufdo!%p' -cqa! *.html
</code></pre>

<p><a href=""https://stackoverflow.com/a/30040839/55075"">Removing XML tags</a>:</p>

<pre><code>ex -s +'%s/&lt;[^&gt;].\{-}&gt;//ge' +%p +q! file.txt
</code></pre>

<p><a href=""https://stackoverflow.com/a/33053842/55075"">Removing style tag from the header</a> and print the parsed output:</p>

<pre><code>curl -s http://example.com/ | ex -s +'/&lt;style.*/norm nvatd' +%p -cq! /dev/stdin
</code></pre>

<p><a href=""https://stackoverflow.com/a/33053678/55075"">Parse html</a> with multiple complex rules:</p>

<pre><code>ex -V1 $PAGE &lt;&lt;-EOF
  "" Correcting missing protocol, see: https://github.com/wkhtmltopdf/wkhtmltopdf/issues/2359 ""
  %s,'//,'http://,ge
  %s,""//,""http://,ge
  "" Correcting relative paths, see: https://github.com/wkhtmltopdf/wkhtmltopdf/issues/2359 ""
  %s,[^,]\zs'/\ze[^&gt;],'http://www.example.com/,ge
  %s,[^,]\zs""/\ze[^&gt;],""http://www.example.com/,ge
  "" Remove the margin on the left of the main block. ""
  %s/id=""doc_container""/id=""doc_container"" style=""min-width:0px;margin-left : 0px;""/g
  %s/&lt;div class=""outer_page/&lt;div style=""margin: 0px;"" class=""outer_page/g
  "" Remove useless html elements. ""
  /&lt;div.*id=""global_header""/norm nvatd
  wq "" Update changes and quit.
EOF
</code></pre>

<p>Even more examples:</p>

<ul>
<li><a href=""http://mywiki.wooledge.org/BashFAQ/021"" rel=""nofollow noreferrer"">How can I replace a string with another string in a variable, a stream, a file, or in all the files in a directory?</a></li>
<li><a href=""https://superuser.com/questions/22455/vim-what-is-the-ex-mode-for-batch-processing-for"">What is the EX-mode for batch processing for?</a> at superuser SE</li>
</ul>

<hr>

<p>See also:</p>

<ul>
<li><a href=""https://stackoverflow.com/a/29736874/55075"">Convert tabs to spaces in every file of a directory?</a> at SO</li>
<li><a href=""https://stackoverflow.com/a/23657918/55075"">Remove trailing whitespaces from all files recursively?</a> at SO</li>
<li><a href=""https://vi.stackexchange.com/questions/798/how-to-write-whole-buffer-to-standard-output-from-the-command-line"">How to write whole buffer to standard output from the command line?</a> at Vim SE</li>
<li><a href=""https://unix.stackexchange.com/questions/14107/is-it-possible-to-execute-a-vim-script-in-a-non-interactive-mode"">Is it possible to execute a VIM script in a non-interactive mode?</a> at unix SE</li>
<li><a href=""https://stackoverflow.com/questions/10686183/pipe-vim-buffer-to-stdout"">Pipe Vim buffer to stdout</a> at SO</li>
<li><a href=""https://stackoverflow.com/questions/3219479/vim-write-buffer-content-to-stdout"">write buffer content to stdout</a> at SO</li>
<li><a href=""https://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes"" rel=""nofollow noreferrer"">Learning the vi Editor/Vim/Modes</a></li>
<li><a href=""https://vi.stackexchange.com/q/3299/467"">How to remove inner content of html tag conditionally?</a></li>
</ul>

<hr>
","789"
"How to use Ctrl-P to interactively search file contents for all files in a project?","3617","","<p>I tried today to perform a search on every files of a project.
I use <a href=""https://github.com/kien/ctrlp.vim"">Ctrl-P</a> and search on lines like so : </p>

<p><img src=""https://i.stack.imgur.com/wCgWm.png"" alt=""screenshot""></p>

<p>But the result of the search is only on the previously opened file. Here I open only <code>main.php</code>.</p>

<p>Do you know a way to search on all files without having to open them one by one ?</p>

<p>Thanks,</p>
","<p><code>:CtrlPLine</code> is actually supposed to work on listed buffers.</p>

<p>If you <em>absolutely</em> want to use that feature on every file in your project, you could add them to the argument list (and thus the buffer list) with something like:</p>

<pre><code>:argadd **/*.php
</code></pre>

<p>but that doesn't sound like a very good idea for performance reasons.</p>

<p>Using <code>:vimgrep</code> or <code>:grep</code> sounds a lot better to me:</p>

<pre><code>:vim foo **/*.php
:cw
</code></pre>

<p>You lose the ""fuzziness"" of CtrlP, obviously, but you get reliability and flexibility in return.</p>

<p>Reference:</p>

<pre><code>:help :argadd
:help :vimgrep
:help :grep
:help :cwindow
:help quickfix
</code></pre>
","3176"
"See the Unicode code point of the current character","3587","","<p>How can I see the Unicode code point of the character where the cursor is? For example, if my cursor is on a <code>⌘</code> character, I'd like Vim to tell me that it is <a href=""https://codepoints.net/U+2318"">U+2318</a>.</p>

<p>Alternative information, such as the base-10 representation (8984) or the UTF-8 representation (E2 8C 98) would be acceptable.</p>

<p>I ask about Unicode and UTF-8 because they are most common, but if the answer generalizes to other character sets and encodings, that would be good to know as well.</p>
","<p>You can use <code>%b</code> or <code>%B</code> in <code>statusline</code> or <code>rulerformat</code>. From <a href=""http://vimhelp.appspot.com/options.txt.html#%27statusline%27"" rel=""nofollow noreferrer""><code>:help statusline</code></a>:</p>

<pre><code>b N   Value of character under cursor. 
B N   As above, in hexadecimal. 
</code></pre>

<p>For example:</p>

<pre><code>set statusline=%b\ %B
</code></pre>

<p>Gives you:</p>

<pre><code>8984 2318
</code></pre>

<p>Another way is to use <code>ga</code> or the <code>:ascii</code> command. From <a href=""http://vimhelp.appspot.com/various.txt.html#ga"" rel=""nofollow noreferrer""><code>:help ga</code></a>:</p>

<pre><code>:as[cii]        or                                      ga :as :ascii
ga                      Print the ascii value of the character under the
                        cursor in decimal, hexadecimal and octal.
</code></pre>

<p>Which will give you:</p>

<pre><code>&lt;⌘&gt; 8984, Hex 2318, Octal 21430
</code></pre>

<p>Another useful mapping is <code>g8</code>:</p>

<pre><code>e2 8c 98
</code></pre>

<p>Which prints the hex value of the actual bytes stored in the file (this command assumes UTF-8).</p>

<p>In addition there are two useful plugins you could use:</p>

<ul>
<li><p><a href=""https://github.com/chrisbra/unicode.vim"" rel=""nofollow noreferrer"">unicode.vim</a> adds various useful unicode-related commands. Use <code>:UnicodeName</code> to get details of the character under the cursor.</p></li>
<li><p><a href=""https://github.com/tpope/vim-characterize"" rel=""nofollow noreferrer"">characterize.vim</a>; this expands the <code>ga</code> command with the unicode name, similar to unicode.vim.</p></li>
</ul>
","560"
"Vim compiled with python3 but has('python') returns 0","3576","","<p>I just followed these instructions to compile vim with python 3: <a href=""https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"" rel=""nofollow"">https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source</a></p>

<p>After the install I checked to see if I have python3:</p>

<pre><code>vim --version | grep ""python""
</code></pre>

<p>Which returned: </p>

<pre><code>+python3/dyn  
</code></pre>

<p>and</p>

<pre><code>+python/dyn  
</code></pre>

<p>But when I start vim and type one of the followinf commands, I get a <code>0</code>:</p>

<ul>
<li><code>:echo has('python3/dyn')</code></li>
<li><code>:echo has('python3')</code></li>
<li><code>:echo has('python')</code></li>
<li><code>:echo has('python/dyn')</code></li>
</ul>

<p>Has anyone had a similar problem? </p>

<p>EDIT:
Hey guys lots of helpful comments, I just wanted to say thanks and let you guys know what I did to solve this. I followed the instruction again from the first link I provided but this time I removed vim.tiny and instead of trying to get vim to support both python2 and python3, I just build with python3 support. This fixed it</p>

<p>Typing</p>

<pre><code>python3 print(""works"")
</code></pre>

<p>in vim, shows <code>works</code>. Typing</p>

<pre><code>echo has('python3')
</code></pre>

<p>gives me an output of <code>1</code> and finally</p>

<pre><code>vim --version | grep python3
</code></pre>

<p>Gives me a value of <code>+python3</code></p>

<p>Thanks guys for all the help and suggestions!!</p>
","<p>This is the expected result.  There are no tests <code>has('python/dyn')</code> and <code>has('python3/dyn')</code>, only <code>has('python')</code> and <code>has('python3')</code>.</p>
","9607"
"Jumping to a byte offset, and displaying position as byte offset","3568","","<p>How can I move the cursor to the <i>n</i><sup>th</sup> byte in the buffer?</p>

<p>How can I display the current cursor position in the ruler in terms of the byte offset, rather than lines and columns?  (Follow-up question: can it be displayed in both decimal and hexadecimal?)</p>
","<pre><code>:goto 2356
</code></pre>

<p>jumps to the 2356th byte in the buffer.</p>

<p>Use the <code>%o</code> field in <code>'statusline'</code> or <code>'rulerformat'</code> to display the byte number of the character under your cursor.</p>

<p>Use <code>%O</code> to display the value in hexadecimal format.</p>

<p>Reference:</p>

<pre><code>:help :goto
:help 'statusline'
:help 'rulerformat'
</code></pre>
","3007"
"How can I create my own colorscheme?","3517","","<p>What files do I need to create? What should be inside these files? Is there a default colorscheme file somewhere that I can use and change color values accordingly?</p>
","<h3>Colorscheme locations</h3>

<p>First, Vim looks in its runtime folders for a <code>colors</code> directory. Here is where all the colorschemes should be stored (<a href=""http://vimhelp.appspot.com/options.txt.html#%27runtimepath%27""><code>:help 'runtimepath'</code></a>)</p>

<p>This means you will need one file that lives in the <code>~/.vim/colors</code> folder. Default colorschemes are located in <code>$VIMRUNTIME/colors</code>, where <code>$VIMRUNTIME</code> is usually <code>/usr/share/vim/vim74</code> or the <code>/usr/local/share/vim/vim74</code> directories, depending on how Vim is installed (substitute vim74 for vim73 for Vim version 7.3)</p>

<p>Now to get to the fun part.</p>

<h3>Creating a colorscheme</h3>

<p>To get started with creating your own colorscheme, I highly suggest taking a look at the default colorschemes and experiment with modifying them.</p>

<p>So copy the default colorscheme from <code>$VIMRUNTIME/colors</code> folder to your <code>~/.vim/colors</code> folder. Name it something that distinguishes itself from the default colorscheme name. So if you copied the <code>desert</code> colorscheme that comes with Vim by default, name the file as <code>default_mod.vim</code> or something to that effect. Open up the colorscheme file and change the <code>let g:colors_name</code> to also distinguish itself from the default colorscheme file. By convention, this should be the same as the colorscheme file name.</p>

<p>In the colorscheme, all you have to do is give the colors for <code>ctermbg</code>, <code>ctermfg</code>, <code>guibg</code>, <code>guifg</code> (for terminal background, terminal foreground, gui background, gui foreground colors respectively) for the different built in highlight groups. To check out the list of highlight groups you can modify, check out <a href=""http://vimhelp.appspot.com/syntax.txt.html#highlight-default""><code>:help highlight-default</code></a>. Optionally, you can also use the <code>cterm</code> and <code>gui</code> attributes to specify that you want a highlight group to be bold or italic. </p>

<p>For example, this will set a green color for a String:</p>

<pre><code>highlight String ctermbg=NONE ctermfg=107 guibg=NONE guifg=#95B47B
</code></pre>

<p>You can also use highlight links to link a highlight group to another group. This is useful if you want two highlight groups to be the same colors.</p>

<p>For instance, you could link the <code>diffAdded</code> highlight group to the String highlight group defined above:</p>

<p><code>highlight link diffAdded String</code></p>
","2783"
"Why should I use augroup?","3494","","<p>I understand how <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html"">auto commands</a> work, and how to use them, but I'm a little bit sure of what augroup is for. I read in <code>:help augroup</code></p>

<pre><code>                                                    *:aug* *:augroup*
:aug[roup] {name}               Define the autocmd group name for the
                                following "":autocmd"" commands.  The name ""end""
                                or ""END"" selects the default group.
                                To avoid confusion, the name should be
                                different from existing {event} names, as this
                                most likely will not do what you intended.
</code></pre>

<p>This doesn't really explain why they are useful, or why I would ever want to make an autocommand group name over just defining a bunch of autocommands next to each other. </p>

<p>For example, if autocommands <code>foo</code> and <code>bar</code> are related, why would I want to do</p>

<pre><code>augroup spam
  au!
  au foo * foo
  au bar * bar
augroup END
</code></pre>

<p>when I could just do</p>

<pre><code>""Autocommands for spam
au foo * foo
au bar * bar
</code></pre>

<p>Unless I'm misunderstanding what augroups are really for. So why are they useful?</p>
","<p>The main reason to use <code>augroup</code>s is to allow greater control over ranges of autocommands, e.g. to delete a bunch of autocommands in one go. A common pattern is to use the <code>au!</code> as the first part of a group. This removes all existing autocommands in the group, and allows one to start afresh. If you did not use a group, then <code>au!</code> would remove all/many autocommands that you did not want to remove.</p>

<p>Deleting autocommands is actually quite common, for instance in plugins, because this allows one to source a plugin/ftplugin multiple times. If you did not delete the autocommands, then each time you sourced the plugin/ftplugin you would add a new copy of the same autocommand. This is also true for your <code>vimrc</code> file. By using a group in your vimrc file, it becomes safe to reload it.</p>

<p>For more info, see <a href=""http://vimdoc.sourceforge.net/htmldoc/usr_40.html#40.3""><code>:h 40.3</code></a>.</p>
","9459"
"How do I jump to the location of my last edit?","3452","","<p>I often make changes to the middle of a big file, use <code>gg</code> to jump to the top to check something, and then realize I forgot to set a mark where I was editing. Is there a built-in way to jump to the location of the last-changed line?</p>
","<p>The <code>`.</code> command will bring you to your last change.</p>

<p>The <code>`</code> goes to a mark, and <code>.</code> is a ""special"" mark which is automatically set to the position where the last change was made. See <a href=""http://vimhelp.appspot.com/motion.txt.html#%60.""><code>:help `.</code></a> for some more information.</p>

<p>There is also <code>``</code> which will bring you back to where the cursor was before you made your last jump. See <a href=""http://vimhelp.appspot.com/motion.txt.html#%60%60"">:help <code>``</code></a> for more information.</p>

<p>Another useful mark is <code>`^</code>; this is the position where the cursor was the last time when insert mode was stopped. See <a href=""http://vimhelp.appspot.com/motion.txt.html#%60%5E""><code>:help `^</code></a>.</p>

<p>See <a href=""http://vimhelp.appspot.com/motion.txt.html#mark-motions""><code>:help mark-motions</code></a> for some more general info about using marks (including some other ""special"" marks that are automatically set).</p>
","2002"
"How to yank a line with a certain line number?","3421","","<p>Say that I am on line 20 and I would like to yank line 4, how can I do that?</p>

<p>And similarly, how can I yank a line relative to my cursor position, say the one 3 lines up?</p>
","<p>From <a href=""http://vimhelp.appspot.com/change.txt.html#E850""><code>:help :yank</code></a>:</p>

<pre><code>:[range]y[ank] [x]      Yank `[range]` lines [into register x].
</code></pre>

<p>So, to yank line 4, one would type:</p>

<pre><code>:4yank
</code></pre>

<p>Note you can easily do this from insert mode with <code>&lt;C-o&gt;</code>; this allows you to
execute one command, after which you're returned to insert mode; for example:</p>

<pre><code>&lt;C-o&gt;:4yank
</code></pre>

<p>You can, of course, also use other ranges. Some examples:</p>

<ul>
<li>Lines 1 to 3: <code>:1,3yank</code></li>
<li>The entire buffer: <code>:%yank</code></li>
<li>From the current line to the end of the buffer: <code>:.,$:yank</code></li>
<li>The current line and the next 3: <code>:.,+3yank</code></li>
<li>The current line and the previous 3: <code>:-3,.yank</code></li>
<li>The line 3 lines above the current line: <code>:-3yank</code></li>
</ul>

<p>The most useful things to remember about ranges:</p>

<ul>
<li>It's in the form of <code>:line1,line2command</code>.</li>
<li>A <code>.</code> is the current line (you can actually omit the dot in most cases; <code>:.,+3yank</code> and <code>:,+3yank</code> are the same)</li>
<li>You specify lines relative to the current position with <code>+n</code> and <code>-n</code>.</li>
</ul>

<p>See <a href=""http://vimhelp.appspot.com/cmdline.txt.html#E16""><code>:help [range]</code></a> for more
information.</p>
","3232"
"How do I tell if Vi or Vim is installed on my Linux distribution?","3388","","<p>I use Kubuntu 14.04 with its default installation (bash, Konsole).  I want to learn a powerful, all-keyboard, text editor, and settled on one of these: Vi, Vim, Emacs, (and I'll learn Nano since it's simple).  I have a little experience with the command line: Bash and Python, so I'm ready to add another skill in my pursuit of using Linux without a Windows system. </p>

<p>From Bash, Typing <code>vim</code> or <code>emacs</code> prompt me to install packages.  </p>

<p>Typing <code>vi</code> works.  It runs an editor, So I thought it must be Vi. </p>

<p>But the splash screen, if you call it that in Bash, says <code>VIM Vi Improved</code> and that it's <code>Running in Vi compatible mode</code>. So now I figure it must be Vim.</p>

<p>So which is it and why does typing <code>vim</code> in bash not run my editor?</p>
","<p>Vim started as a clone of vi and has almost all of the commands and features of the original vi, plus a lot of enhancements. (See <code>:help design-compatible</code>.) It can be compiled into one of basically five configurations: tiny, small, normal, big and huge. (See <code>:help :version</code>.) It can also be configured at run time to disable the extended features and use only those features found in the original vi. (See <code>:help 'compatible'</code>.)</p>

<p>Since it can be made to behave very closely to the original vi, many Linux distributions include it as their <code>vi</code>, the basic visual editor found on almost all Unix systems. When you run <code>vi</code>, you usually get either the tiny or small version of Vim running in vi-compatible mode. That is why you get the Vim splash screen when you run <code>vi</code>.</p>

<p>This vi, though, is not the full-featured Vim that most users want for regular use. Most Linux distributions offer that version of vim, often the huge version, in an optional package such as <code>vim</code> or <code>vim-enhanced</code>.</p>
","3581"
"Call a Vim function silently","3350","","<p>I wrote a little Vim function that moves the cursor to the first character of the current line. If the cursor was already on the first character, then the cursor is moved to the first column instead.</p>

<pre><code>"" Jump to first character or column
noremap H :call FirstCharOrFirstCol()&lt;cr&gt;

:function! FirstCharOrFirstCol()
:  let current_col = virtcol('.')
:  normal ^
:  let first_char = virtcol('.')
:  if current_col == first_char
:    normal 0
:  endif
:endfunction
</code></pre>

<p>How do I call this function silently? I’d rather ‘:call FirstCharOrFirstCol()’ wasn’t displayed in the status line. Simply changing to <code>noremap H :silent call…</code> doesn’t seem to be enough.</p>
","<p>You can call the function silently by defining a silent map:</p>

<pre><code>noremap &lt;silent&gt; H :call FirstCharOrFirstCol()&lt;cr&gt;
</code></pre>

<p>For more info, see <code>:h :map-&lt;silent&gt;</code>. Note in particular that this will only ensure that the command is not echoed to screen when the mapping is executed. The <code>:silent</code> command is used to silence output from the function itself (see <code>:h :silent</code>).</p>
","3389"
"Can I undo multiple times in nvi and/or the original vi?","3304","","<p>Sometimes I'm on a system without Vim, and use the default <code>nvi</code> (BSD systems)
or the original <code>vi</code> (Arch Linux).</p>

<p>There are quite a few differences, but the largest annoyance is that I can undo
<em>only</em> my last operation. Pressing <kbd>u</kbd> the second time works are a
""redo"".</p>

<p>Is there some way to get this working?</p>
","<p>From <a href=""http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ex.1?query=vi"" rel=""noreferrer""><code>nvi(1)</code></a>:</p>

<pre><code> u       Undo the last change made to the file.  If repeated, the u command
         alternates between these two states.  The . command, when used
         immediately after u, causes the change log to be rolled forward or
         backward, depending on the action of the u command.
</code></pre>

<p>So press <kbd>u</kbd>, and then keep pressing <kbd>.</kbd> for more undo; If you press <kbd>u</kbd> again, it will 'reverse' direction and pressing <kbd>.</kbd> will be a redo.</p>

<p>I never knew about this until yesterday; and thought it was somehow a new feature, but it seems
like it has <a href=""https://github.com/freebsd/freebsd/blob/59cc89c2c2e686da3bdab2d5cfac4f33462d29fe/contrib/nvi/docs/help"" rel=""noreferrer"">worked like this since at least nvi 1.79 from 1996</a>.</p>

<p>This <em>doesn't</em> work in the <a href=""http://ex-vi.cvs.sourceforge.net/"" rel=""noreferrer""><strong>original vi</strong></a>;
where the undo is documented as:</p>

<pre><code>   u      Undoes the last change made to the current buffer.  If repeated,
          will alternate  between  these  two  states,  thus  is  its  own
          inverse.  When  used after an insert which inserted text on more
          than one line, the lines are saved in the numeric named  buffers
          (3.5).
</code></pre>

<p>Which is really a complicated way of saying that pressing <kbd>u</kbd> again
will redo your changes.</p>

<p>Which is also what Vim's <code>:help undo</code> says (and why I assumed it also wouldn't
work in <code>nvi</code>):</p>

<pre><code> u                       Undo [count] changes.  {Vi: only one level}
</code></pre>
","2045"
"How do I disable syntastic for python files?","3297","","<p>I have the syntastic and python-mode plugins installed and they both include syntax checkers. I think the python-mode syntax checker is more versitle for python files so I would like to just use that one (instead of both).</p>

<p>How do I disable syntastic just for python files?</p>
","<p>The Syntastic documentation (<code>:help syntastic-pymode</code>) explains what to do:</p>

<blockquote>
  <p>[...] To avoid both plugins opening error windows, you can either set
  passive mode for python in syntastic (see syntastic_mode_map), or
  disable lint checks in ""python-mode"", [...]</p>
</blockquote>

<p>So you should be able to disable automatic syntax checking for Python files with something like the following in your <code>$MYVIMRC</code> file:</p>

<pre><code>let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }
</code></pre>
","2956"
"How do I complete Python3 with YouCompleteMe?","3262","","<p>I'm using YouCompleteMe to do omni complete.</p>

<p>Most of these are fine. But when I want to complete Python3, there is something wrong. It only can complete python2.</p>

<p>For example,</p>

<pre><code>import urllib # Python2 &amp; Python3 mod

urllib.
</code></pre>

<p>I want to complete to <code>urllib.request.Request</code>, but the completion menu doesn't have it. It is the same as Python2's <code>urlopen</code>. (In Python3, it is <code>urllib.request.urlopen</code>, but now is <code>urllib.urlopen</code>.)</p>

<p>I have installed <code>jedi</code> with both pip and pip3 ( <code>import jedi</code> can be done in Python3 and Python2 )</p>

<p>I also have set <code>let g:ycm_python_binary_path = '/usr/local/bin/python3'
</code> in <code>.vimrc</code>.</p>

<p>But it seems to have no effect.</p>
","<p>I tried to update YCM and recompile it. </p>

<p>Now, it is fine.</p>

<p>Python3 support was added for last month and I just updated YCM last month.</p>
","6699"
"What additional features do gVim and/or MacVim offer compared to Vim inside a terminal emulator?","3259","","<p>I'm learning Vim by watching screencasts. And I'm wondering, why do a lot of
people use gVim or MacVim?</p>

<p>From what I can see, the GUI Vim version only have additional features that
involves using mouse. But isn't this against the ""Vim philosophy""?</p>

<p>Can anyone explain what additional features the GUI Vim version offer versus the
terminal-based Vim?</p>
","<p>Some features that will <em>only</em> work with gVim:</p>

<ul>
<li>Supports a much wider range of colors (RGB), while the terminal only supports 256 colors (see <a href=""https://superuser.com/questions/556480/24-bit-true-color-in-konsole/703891#703891"">this</a> and <a href=""https://gist.github.com/XVilka/8346728"" rel=""nofollow noreferrer"">this</a>).</li>
<li>Some other more advanced graphical features, such as ""wiggly lines"" for spell checking, more flexible cursor shapes, etc. A terminal can only do ""blocks of monospaced characters"".</li>
<li>Enables <a href=""http://vimhelp.appspot.com/gui.txt.html#gui-mouse"" rel=""nofollow noreferrer"">mouse support</a>, if otherwise left alone (including <a href=""http://vimhelp.appspot.com/gui.txt.html#drag-n-drop"" rel=""nofollow noreferrer"">drag-and-drop</a> for files). Terminal Vim can also handle the mouse quite well, but not drag-and-drop.</li>
<li>Offers a nice, <a href=""http://vimhelp.appspot.com/gui.txt.html#creating-menus"" rel=""nofollow noreferrer"">customizable</a> menu system, where each option has the corresponding Vim command listed.</li>
<li>gVim can offer you scrollbars which scroll the Vim buffer (and not the Terminal scrollback).</li>
<li>You can have popup <a href=""https://stackoverflow.com/q/8534055/660921"">""balloons""</a> (aka. ""tooltips"").</li>
<li>Many terminals do not provide true italics like gVim does.</li>
<li>Has <a href=""http://vimhelp.appspot.com/options.txt.html#%27guifont%27"" rel=""nofollow noreferrer"">integrated font support</a>.</li>
</ul>

<p>Secondly, even if you prefer using Vim, installing a GUI version may offer more compile-time features than the version without, at least in some distros (such as <code>clipboard</code> and <code>clientserver</code> support on Debian-based system in <code>vim-nox</code> vs <code>vim-gnome</code>).</p>

<p>Also, under Windows, a gVim window can be resized more easily than a console Vim window.</p>

<p>Things gVim <strong>doesn't</strong> do:</p>

<ul>
<li>gVim isn't a (full) terminal emulator, so starting external programs that use a lot of terminal features won't work very well. For example try using <code>:!vim</code>, <code>:!mutt</code>, or <code>:!irssi</code> from gVim, or pressing <code>K</code> over a word (which, by default, opens the manpage for that word). Also <a href=""https://vi.stackexchange.com/q/4152/51"">see this</a>.</li>
</ul>
","2458"
"How to match the first occurence of a repeating pattern on the same line?","3245","","<p>I'd like to replace the following code:</p>

<pre><code>ThisIsALoooongNameOfATwoDArray[100-rowIndex][j-2]-ThisIsALoooongNameOfATwoDArray[100+rowIndex][j+2];
</code></pre>

<p>by</p>

<pre><code>Ptr[j-2]-Ptr[j+2];
</code></pre>

<p>I tried the command <code>:%s/This.*ex\]/Ptr/g</code> (and <code>/gc</code> variation), It turns out the regular expression performs the longest matching and the result becomes</p>

<pre><code>Ptr[j+2];
</code></pre>

<p>Is there any simple way to achieve my goal? (I know I can delete it one by one and/or use <code>q</code> macro. Just wonder if we can do something using the ""restricted"" regular expression.)</p>
","<p>You can use </p>

<pre><code>s/\mThis.\{-}]/Ptr/g
</code></pre>

<p><code>\{-}</code> will match as few as possible characters before the following character in the regex. This allows to match only the first pair of brackets.</p>

<p>To be more detailled:</p>

<ul>
<li><code>\m</code> use magic flavor of regex</li>
<li><code>This</code> match literally the string <code>This</code></li>
<li><code>.\{-}]</code> match as few as possible character before the following <code>]</code>. </li>
</ul>
","4837"
"Is it possible to pipe vim commands to vim?","3231","","<p>I want to run the following shell.</p>

<pre><code>wea-this is the end of the second word | vim j
exit 0
</code></pre>

<p>Which I had hoped would pipe the key strokes <code>w</code> (move forward a word) then <code>e</code> (end of the word) then <code>a</code> (append) then <code>-this is the end of the second word</code> (text) to the Vim document named <code>j</code> which already has words in in it.</p>

<p>The following error occurred when I ran the shell script.</p>

<pre><code>/root/bin/tt.sh: line 1: wea-this: command not found
Vim: Warning: Input is not from a terminal
</code></pre>

<p>I am running Ubuntu 14.04.
Two types of answers will be appreciated:</p>

<ol>
<li>How to use piping to achieve this desired result.</li>
<li>Another method by which I can use ""Vim commands"" (not ed or sed commands) to edit a text document from a shell script. </li>
</ol>
","<p>To insert the string <code>""hello""</code> on the first line of the file <code>j</code>, you could type in your shell the following command:</p>

<p><code>vim +""1 | put! ='hello'"" j</code></p>

<ul>
<li><code>:1</code> moves the cursor to the first line of the buffer</li>
<li><code>:put! ='hello'</code> pastes the string ""hello"" above the current line</li>
</ul>

<p>To insert the string <code>""hello""</code> and then save and quit the file:</p>

<p><code>vim +""1 | put! ='hello' | x"" j</code></p>

<p>Same thing as before, we've just added the Ex command <code>:x</code> which saves and quit.</p>

<p>More generally you can execute any sequence of Ex commands on a file, from an interactive shell or from a bash script, like this:</p>

<p><code>vim +'Ex command1 | Ex command2 | ...' file</code></p>

<p>If you have a lot of Ex commands, you could write them all inside a dedicated file (called for example <code>myExCommands.vim</code>), one command per line, and then from the shell or a script you could source it (with the Ex command <code>:source</code> or the short version<code>:so</code>) like this:</p>

<pre><code>vim +'so myExCommands.vim' file
</code></pre>

<p><strong>Edit</strong></p>

<p>I see you've edited your question.<br>
I think the previous answer still applies, because you can execute any normal command from Ex mode with the Ex commands <code>:normal</code> and <code>:execute</code>.</p>

<p>For example, let's say you want to :</p>

<ul>
<li>move your cursor on the first line of the buffer (<code>1G</code>)</li>
<li>move your cursor to the first non whitespace character on the line (<code>_</code>)</li>
<li>move your cursor one word forward (<code>w</code>)</li>
<li>move your cursor to the end of the new word (<code>e</code>)</li>
<li>go into insert mode after the character under the cursor (<code>a</code>)</li>
<li>insert the string <code>hello</code></li>
<li>save and quit (<code>:x</code>)</li>
</ul>

<p>To do this on the file <code>j</code>, type from the shell:</p>

<pre><code>vim +""execute 'normal! 1G_weahello' | x"" j
</code></pre>

<p>For more information, see:</p>

<pre><code>:help +cmd
:help :normal
:help :execute
</code></pre>
","5990"
"How can I run javascript directly and show the output?","3201","","<p>I'm just doing some testing with JavaScript language feature with no DOM manipulation. So I'm editing a js file and I'm wondering how to simply run it and show the console output? I installed the <a href=""https://github.com/moll/vim-node"" rel=""noreferrer"">moll/vim-node</a> plugin, but no idea how to run js code.</p>
","<p>Per this <a href=""http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window"" rel=""noreferrer"">vim wikia</a> entry you could create a shell execution to new buffer script and then extend it to run your code using node.</p>

<pre><code>command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(&lt;q-args&gt;)
function! s:RunShellCommand(cmdline)
  let isfirst = 1
  let words = []
  for word in split(a:cmdline)
    if isfirst
      let isfirst = 0  "" don't change first word (shell command)
    else
      if word[0] =~ '\v[%#&lt;]'
        let word = expand(word)
      endif
      let word = shellescape(word, 1)
    endif
    call add(words, word)
  endfor
  let expanded_cmdline = join(words)
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:  ' . a:cmdline)
  call setline(2, 'Expanded to:  ' . expanded_cmdline)
  call append(line('$'), substitute(getline(2), '.', '=', 'g'))
  silent execute '$read !'. expanded_cmdline
  1
endfunction

command! -complete=file -nargs=* RunJS call s:RunShellCommand('node '.&lt;q-args&gt;)
</code></pre>

<p>Then if you run <code>:RunJS %</code> you should get a new buffer with the output of your node.js execution. Optionally you can call things directly using <code>:Shell &lt;cmd&gt;</code></p>
","2879"
"YouCompleteMe in non-code files yields -- User defined completion (^U^N^P) Pattern not found","3200","","<p>I use <a href=""https://github.com/Valloric/YouCompleteMe"" rel=""nofollow"">YouCompleteMe</a> and it works great (after some setting up woes) for both C/C++ and Python code.  However, it tries to complete things in text files such as ReStructured text, markdown, etc...</p>

<p>The error I keep getting is:</p>

<pre><code>-- User defined completion (^U^N^P) Pattern not found
</code></pre>

<p>How can I stop it form doing so?</p>

<p>I did try this:</p>

<pre><code>autocmd FileType c,cpp,python let g:ycm_global_ycm_extra_conf = ""~/.ycm_extra_conf.py""
autocmd FileType c,cpp,python let g:ycm_collect_identifiers_from_tags_files = 1
autocmd FileType c,cpp,python let g:ycm_complete_in_comments = 0
autocmd FileType c,cpp,python let g:ycm_complete_in_strings = 0
autocmd FileType c,cpp,python let g:syntastic_enable_signs=1
autocmd FileType c,cpp,python let g:syntastic_error_symbol = '✗'
autocmd FileType c,cpp,python let g:syntastic_warning_symbol = '⚠'
autocmd FileType c,cpp,python let g:ycm_confirm_extra_conf = 0
</code></pre>

<p>But the error still persists.  I even tried adding a <code>g:ycm_filetype_specific_completion_to_disable</code> command like so:</p>

<pre><code>let g:ycm_filetype_specific_completion_to_disable = {
      \ 'rst': 1
      \}
</code></pre>

<p>But the error still persists.</p>
","<p>The command <code>g:ycm_filetype_whitelist</code> was the one I needed!</p>

<pre><code>let g:ycm_filetype_whitelist = { 'cpp': 1, 'c': 1, 'python':1 }
</code></pre>

<p>Finally, to get ride of this message altogether, the <a href=""https://github.com/Valloric/YouCompleteMe#i-get-annoying-messages-in-vims-status-area-when-i-type"">answer is in the FAQ</a>. Basically, update to Vim 7.4.314 or later and it shall go away.</p>
","2510"
"Insert tabs in INSERT mode when expandtab is set","3186","","<p>I have set <code>expandtab</code> in my <code>.vimrc</code> file to convert <code>tab</code> to multiple <code>space</code> characters. However some files (like Makefile) need actual the <code>tab</code> character inserted.</p>

<p>Is there an easy way to force the insertion the <code>tab</code> while I am typing?</p>
","<p>Instead of just pressing <kbd>Tab</kbd>, first press <kbd>Ctrl-V</kbd> and then press <kbd>Tab</kbd>.</p>

<p>This can be used to insert a variety of special chars. See <code>:help i_CTRL-V</code> for details.</p>

<p><kbd>Ctrl-V</kbd> also works in command-line mode (<code>:help c-CTRL-V</code>), and even in some other programs entirely. (e.g. bash, mutt.)</p>

<p>If you have <kbd>Ctrl-V</kbd> mapped to something else, try <kbd>Ctrl-Q</kbd>. This has the same effect in Vim as <kbd>Ctrl-V</kbd>, but some terminals use it for control flow, in which case Vim won't ever see it.</p>
","705"
"Re-indenting badly indented code","3178","","<p>I like the smart-indent feature of Vim, it allows me to create well-indented code blocks.</p>

<p>I regularly copy/paste code in to buffers, but that code is often poorly formatted.</p>

<p>What would be ideal is to ""re-process"" the code through the smart-indent system.</p>

<p>Is such a thing possible?</p>

<p>For example, how would you 'fix' the following code (an extract from a larger block - I don't want to fix each line manually...) :</p>

<pre><code>    else 
                {
                        m[c] = 5;
                Finished = true;
std::cout&lt;&lt;""(ID,R,E)""&lt;&lt;""--&gt;""&lt;&lt;""(""&lt;&lt;g[c]&lt;&lt;"",""&lt;&lt;r[c]&lt;&lt;"",""&lt;&lt;E1 &lt;&lt;"")""&lt;&lt; std::endl;
std::cout &lt;&lt; ""\n""&lt;&lt;""finish--&gt;"" &lt;&lt; r[c] &lt;&lt; ""\t"" &lt;&lt;""E1--&gt;""&lt;&lt; E1 &lt;&lt;""\n"" ;
                }
        }
</code></pre>
","<p>I do this one of two ways.</p>

<h2>Indent adjusted paste</h2>

<p>First, if the code in the buffer is formatted, but at a different level of indentation, I use <code>]p</code> instead of <code>p</code>, which pastes the code as is, but with the indentation shifted such that the first line pasted is the same depth as the line I'm on.</p>

<p>E.G. source copied to buffer</p>

<pre><code>while (1) {
    dostuff();
}
</code></pre>

<p>E.G. result of pasting it with <code>]p</code></p>

<pre><code>int myfunc() {
    int i = 5; /* Cursor on this line before paste */
    while (1) {
        dostuff();
    }
 }
</code></pre>

<p>vim puts the while at the same indentation level as <code>int i</code>. This is quick, but only works if the copied code is properly indented within itself.</p>

<h2>Reformat after paste</h2>

<p>The <code>=</code> operator in vim reformats the code based on the configured formatting rules. For short snippets of pasting, I'll go into visual mode with <code>v</code>, select the lines I just pasted and then press <code>=</code> to reformat them.</p>

<p>For larger pastes, I take advantage of the fact that the cursor goes to the first pasted line, and that vim says something like ""84 more lines"". I can then enter <code>84==</code> to reflow those 84 lines (of course, substitute 84 with the number of lines you actually paste).</p>

<h2>References</h2>

<p><code>:help ]p</code> for adjusted indent paste</p>

<p><code>:help =</code> covers <code>={motion}</code>, <code>[count]==</code> and <code>{Visual}=</code> for filtering through custom or builtin indent rules</p>
","242"
"Why can't vim see the tags file, despite being in the same directory?","3162","","<p>I'm in folder <code>E:\dir\python_file.py</code>, <code>:pwd</code> shows <code>E:\dir</code>. <code>:e tags</code> opens the tags file I generated with <code>ctags -R</code>.</p>

<p>I've got <code>tags</code> set to what seems reasonable: <code>set tags?</code> shows <code>set tags=./tags,tags;E:\</code>. Verbose <code>set tags</code> shows only my vimrc.</p>

<p>Using <code>:tag method_name</code> throws two errors: <code>E433: No tags file</code> and <code>E426: tag not found: method_name</code>.</p>

<p>I'm on Windows.</p>
","<p><code>wildignore</code> had a trailing comma.</p>

<p>My vimrc had <code>set wildignore=*.png,</code> which had a trailing comma. Changing it do <code>set wildignore=*.png</code> solved my issue.</p>

<p>It turns out, after looking at <code>:set</code> for a while, that <code>ftplugin/python.vim</code>  does <code>set wildignore+=*.pyc</code> somewhere, because just <code>set wildignore=*.png,</code> isn't enough to break the tags. So the wildignore that I had, once I opened a .py file, was <code>wildcard=*.png,,*.pyc</code>, and if you open vim with <code>vim -u NONE -U NONE</code>, tags will break.</p>

<p>Vim must do some concatenation adding a comma if the setting isn't empty, but doesn't check for an existing trailing comma. Think I just found a bug.</p>

<hr>

<p>Turns out it was a bug, and it has since been <a href=""https://github.com/vim/vim/issues/365"" rel=""noreferrer"">resolved</a>.</p>
","3318"
"How do you “chomp” a string in Vim?","3115","","<p>Suppose you run the following piece of vimscript:</p>

<pre><code>let @z = system(""date"")
</code></pre>

<p>This will put a string version of the current date into the z register, but the string will end with a newline that I don’t want. Is there a built-in way (similar to Perl’s <a href=""http://perldoc.perl.org/functions/chomp.html""><code>chomp</code></a>) to get rid of a string’s trailing newlines?</p>
","<p>You can use <code>substitute()</code>, or define a function:</p>

<pre><code>function! Chomp(string)
    return substitute(a:string, '\n\+$', '', '')
endfunction
</code></pre>

<p>This variant will call <code>system</code> for you and then chomp the result:</p>

<pre><code>function! ChompedSystem( ... )
    return substitute(call('system', a:000), '\n\+$', '', '')
endfunction
</code></pre>

<p>(This function is also available in my <a href=""http://www.vim.org/scripts/script.php?script_id=4433"">ingo-library plugin</a> as <code>ingo#system#Chomped</code>.)</p>
","2868"
"How do I open and close NERDTree (toggle NERDTree view) using a single keystroke?","3078","","<p>Sometimes during my workflow, I might want to open/search for a file on the go. I'd like to map a single key (say F6) to open and close NERDTree (ie. I want to toggle NERDTree view). Also, I'd like NERDTree to display hidden files and folders in its toggled view and I'd also like it to close automatically when I open a file for editing if that is possible. Thanks !</p>
","<p>In your <code>vimrc</code> add</p>

<pre><code>nmap &lt;F6&gt; :NERDTreeToggle&lt;CR&gt;
</code></pre>

<p>where <code>&lt;F6&gt;</code> is the key you want to map.</p>
","9968"
"How do I change the default size of plugin window (NerdTree, Taglist, etc)?","2997","","<p>I'm using the Taglist and NerdTree plugins quite often. Usually the window that opens in the left side is too small and I need to extend it.</p>

<p>I usually do: <kbd>10</kbd> <kbd>CTRL</kbd>+<kbd>w</kbd> <kbd>&gt;</kbd></p>

<p>Is there a way to change the default width of the window of NerdTree and Taglist?</p>
","<p>The examples below set the width to 60 columns. Adjust to your preferences.</p>

<h2>NERDTree</h2>

<p>NERDTree uses a variable for just this:</p>

<pre><code>:let g:NERDTreeWinSize=60
</code></pre>

<p>This will set the width to 60. You can put this line into your vimrc.</p>

<h2>Taglist</h2>

<p>For taglist, you set a similar option:</p>

<pre><code>:let g:Tlist_WinWidth=60
</code></pre>

<p>Like with NERDTree, you can put this line into your vimrc.</p>

<h2>Others</h2>

<p>Unfortunately there is no generally applicable method. Many plugins do (or should) offer a parameter for this (like above). Others allow you to apply a workaround by setting things you can key off of for an autocommand (such as the filetype, for example, if NERDTree didn't offer the option to set it, you could have done <code>:au FileTupe nerdtree :vert resize 60</code>, since NERDTree sets the filetype on the buffer). I've found that trying to do an autocmd on the WinEnter event based on the buffer name doesn't generally work when the buffer is created, but does if you leave the window and come back to it; plugins often create the window before setting up the buffer. You'll have to experiment with other plugins or request the plugin author to add a parameter.</p>
","822"
"How do I copy a file in netrw?","2981","","<p>The current working directory is <code>./A/B/</code>. An empty document is opened when I type <code>vim</code>, and the netrw is opened with command <code>:e.</code> The window is split by <code>vs.</code>, and I can navigate to the upper level directory, i.e., <code>./A/</code>. Now I'd like to copy a file <code>a_file.jpg</code> from <code>./A/B/</code> to <code>./A/</code>.</p>

<p>I tried <code>yy</code> on the target file and <code>p</code> in the target window (directory), but it did not achieve my goal.</p>

<p>Is there any way that can achieve the goal without installing extra plugins?</p>
","<p>You cannot use <code>y</code>, <code>p</code> etc., to copy files in netrw - it comes with its own commands. See <a href=""http://vimhelp.appspot.com/pi_netrw.txt.html#netrw-mc"" rel=""noreferrer""><code>:h netrw-mc</code></a>:</p>

<pre><code>MARKED FILES: COPYING                                           netrw-mc {{{2
            (See netrw-mf and netrw-mr for how to mark files)
                      (Uses the global marked file list)

Select a target directory with mt (netrw-mt).  Then change directory,
select file(s) (see netrw-mf), and press ""mc"".  The copy is done
from the current window (where one does the mf) to the target.

If one does not have a target directory set with netrw-mt, then netrw
will query you for a directory to copy to.

One may also copy directories and their contents (local only) to a target
directory.
</code></pre>

<p>Your case is simplified since <code>./A</code> is the parent of <code>./A/B</code>:</p>

<ol>
<li>Open <code>./A/B</code>, move to the line having <code>../</code>, </li>
<li>Mark it with <code>mt</code></li>
<li>Move to the line with the file you want to copy.</li>
<li>Press <code>mf</code>, and then <code>mc</code>.</li>
</ol>

<p>Example:</p>

<pre><code>$ tree foo
foo
└── bar
    └── test

1 directory, 1 file
$ vim foo/bar
</code></pre>

<p>Now:</p>

<ol>
<li><p>Move to <code>..</code> and press <code>mt</code>:</p>

<p><a href=""https://i.stack.imgur.com/Hmele.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Hmele.png"" alt=""enter image description here""></a></p></li>
<li><p>The header will change to show the current target:</p>

<p><a href=""https://i.stack.imgur.com/WtPeX.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/WtPeX.png"" alt=""enter image description here""></a></p></li>
<li><p>Move to the file (here <code>test</code>) and press <code>mf</code>. It gets highlighted for me:</p>

<p><a href=""https://i.stack.imgur.com/5wGU2.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5wGU2.png"" alt=""enter image description here""></a></p></li>
<li><p>Press <code>mc</code> - the highlighting goes away. Now navigate to the parent folder - the file should be present:</p>

<p><a href=""https://i.stack.imgur.com/jG41q.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/jG41q.png"" alt=""enter image description here""></a></p></li>
</ol>
","6264"
"how to change python interpreter used by jedi-vim","2964","","<p>I have <code>Anaconda</code> (including python3.5.2), <code>VIM</code> (7.4) and <code>Jedi-VIM</code> installed on my system. There was also a <code>python</code> installed on the linux system by default.</p>

<p>The autocompletion is working on base packages, at least. But for packages like <code>numpy</code> (which was included in <code>Anaconda</code>) the completion is not working.</p>

<p>By using the following command in <code>VIM</code>:</p>

<pre><code>:py3 import sys; print(sys.path)

['/usr/lib/python35.zip', 
'/usr/lib/python3.5', 
'/usr/lib/python3.5/plat-x86_64-linux-gnu', 
'/usr/lib/python3.5/lib-dynload', 
'/usr/local/lib/python3.5/dist-packages', 
'/usr/lib/python3/dist-packages', 
'_vim_path_']
</code></pre>

<p>This indicates to me that the <code>Anaconda-python</code> interpreter and the packages are never been used by <code>jedi-vim</code>.</p>

<pre><code>$which python
/home/user1/anaconda3/bin/python
</code></pre>

<p>How can I get jedi-vim to use also the path of anaconda python for getting package autocompletion?</p>
","<p>I was able to fix it myself by providing <code>jedi-vim</code> with the location of the packages in my <code>anaconda</code> folder using the <code>$PYTHONPATH</code> variable as follows:</p>

<pre><code>export $PYTHONPATH = $PYTHONPATH:/home/user1/anaconda3/lib/python3.5/site-packages
</code></pre>

<p>Thanks to all!</p>
","9499"
"Can I use a non-monospaced font in either Vim or gVim?","2924","","<p>Is there any way to use a non-monospace font in either <code>vim</code> or <code>gvim</code>?</p>

<p>I tried changing the font for gVim with:</p>

<pre><code>:set guifont=Dejavu\ Serif\ 12
</code></pre>

<p>But this gives me some rather ugly results:</p>

<p><img src=""https://i.stack.imgur.com/rS5am.png"" alt=""enter image description here""></p>

<p>I get the same results if I use the menu (Edit -> Select font)</p>

<p><code>:help guifont</code> says:</p>

<pre><code>Note that the fonts must be mono-spaced (all characters have the same
width).  An exception is GTK 2: all fonts are accepted, but
mono-spaced fonts look best.
</code></pre>

<p>So I think the above results count as ""not looking best""? Can this be improved
upon, somehow?</p>

<p>I also tried setting a non-monospace font in my terminal (<code>xterm</code>), but that
seems to have roughly the same effect: </p>

<p><img src=""https://i.stack.imgur.com/Fy7V8.png"" alt=""enter image description here""></p>

<p>I don't mind using a different terminal emulator for this btw.</p>
","<p>I found <a href=""http://mlterm.sourceforge.net/"" rel=""noreferrer""><code>mlterm</code></a>, which supports this. Aside from Emacs' built-in terminal (M-x term) this is the <em>only</em> terminal I've found that supports this (I've tried about 15-20 different ones).<br>
I've found that <code>mlterm</code> works better than Emacs due to the sceen ratio settings, and you also avoid having to run Vim inside an Emacs session (I'm not even sure that is legally allowed).</p>

<p>Screenshot (it looks ugly unless you open it <a href=""https://i.stack.imgur.com/6Vj4t.png"" rel=""noreferrer"">full size</a> due to scaling in the browser): </p>

<p><img src=""https://i.stack.imgur.com/6Vj4t.png"" alt=""enter image description here""></p>

<p>It does require some configure love, though. After starting, press <kbd>Ctrl</kbd> + middle click
anywhere, this will open the configure screen. I set these options</p>

<p>In the Font tab:</p>

<ul>
<li>Check ""Anti-alias""</li>
<li>Check ""Variable column width""; this is the ""key feature"" missing from most other terminal
emulators</li>
<li>Set font to ""DejaVu Sans Book 16"" (or whatever else you prefer)</li>
<li>Set ""screen ratio against font size"" width to 60; this lies to programs about the width of the
terminal, of you don't do this, you're only using ~50% of the screen size. The best value for this
depends on the font used, so experiment a bit...</li>
</ul>

<p>The Right-click configure screen seems a bit flaky, I also edited my <code>~/.mlterm/vaafont</code> since this
wasn't updated:</p>

<pre><code>ISO10646_UCS4_1 = 22,DejaVu Sans 18;21,DejaVu Sans 16;16,DejaVu Sans 16
</code></pre>

<p>And my <code>~/.mlterm/main</code> (these are the settings I set above, plus some personal
preferences):</p>

<pre><code>type_engine = xft
bel_mode = none
scrollbar_mode = none
fontsize = 22
use_anti_alias = true
use_variable_column_width = true
line_space = 5
use_multi_column_char = true
col_size_of_width_a = 1
screen_width_ratio = 50
</code></pre>

<p>There are some artefacts, which are to be expected, but writing emails or posts such as this, it
seems to work quite well!</p>

<p>I created an alias in my shell for this:</p>

<pre><code>alias pvim mlterm -e vim
</code></pre>

<p>I also created a little function to remove most UI chrome:</p>

<pre><code>fun! WriteMode()
    "" Disable a lot of stuff
    setlocal nocursorline nocursorcolumn statusline= showtabline=0 laststatus=0 noruler

    "" Hack a right margin with number
    setlocal number
    setlocal numberwidth=3

    "" White text, so it's 'invisible'
    highlight LineNr ctermfg=15
    "" If you're using a black background:
    "" highlight LineNr ctermfg=1
endfun
</code></pre>

<p>There's also <a href=""https://github.com/junegunn/goyo.vim"" rel=""noreferrer"">goyo.vim</a> which goes roughly the same, but that
didn't work very well for me (too much mucking about with margins). YMMV though.</p>
","707"
"Biggest differences between Vim and VI","2920","","<p>Today, I decided to try Vi instead of Vim, I wanted to see how different it is. I didn't notice much differences at all, the biggest thing I noticed was how Vi didn't say <code>-- INSERT --</code> when I went into insertion mode, and there were some minor interface differences.</p>

<p>This made me wonder, what are the biggest differences between Vi and Vim? </p>
","<p>There actually is a help command in vim to tell you about the differences: <a href=""http://vimhelp.appspot.com/vi_diff.txt.html#vi-differences""><code>:help vi_diff</code></a></p>

<p><a href=""http://www.vim.org/viusers.php"">From Vim's site</a>, the biggest are:</p>

<blockquote>
  <p><strong>unlimited undo</strong></p>
  
  <p>You can do xxxx and undo each of the four deletes. When was the last
  time you typed ""jjjj"" and then found out the caps lock key was on? You
  accidentally joined five lines together, and Vi can undo only the last
  command. In Vim you can undo all four ""J"" commands and get your
  original text back.</p>
  
  <p><strong>portability</strong></p>
  
  <p>Vi is only available on Unix. Vim works on MS-Windows, Macintosh,
  Amiga, OS/2, VMS, QNX and other systems. And also on every Unix
  system.</p>
  
  <p><strong>syntax highlighting</strong></p>
  
  <p>Vim can be programmed to highlight portions of the buffer in different
  colors or styles, based on the type of file being edited. There are
  hundreds of syntax highlighting rulesets bundled with Vim.</p>
  
  <p><strong>GUI</strong></p>
  
  <p>Vim works well at a console, but it can run natively in many GUIs,
  including X Windows, Mac OS, and Microsoft Windows. It uses native GUI
  widgets for scrolling, dividing buffers, and menuing. It can also talk
  to the clipboard.</p>
</blockquote>
","5515"
"A built-in way to make Vim open a new buffer with file?","2915","","<p>Is there a built-in way to make Vim open a new buffer with file?</p>

<p>I want open a <strong>file</strong>. <code>:enew</code> doesn't take any arguments and opens a <strong>blank</strong> buffer.
<code>:edit</code> closes my existing buffer.</p>

<hr>

<p>Related (about <code>:enew</code>):</p>

<ul>
<li><a href=""https://vi.stackexchange.com/questions/8215/how-do-i-open-a-new-buffer-without-opening-it-in-a-split"">How do I open a new buffer without opening it in a split?</a>  </li>
<li><a href=""https://vi.stackexchange.com/questions/2768/how-do-you-open-a-new-buffer-in-the-current-window"">How do you open a new buffer in the current window?</a></li>
</ul>
","<p>I think you might be misunderstanding what you're seeing happen.  <code>:edit</code> does not close your current buffer.  It just <em>replaces</em> it in the current <em>window</em>.  If you type <code>:buffers</code> your previous buffer should still be listed.  It is still open and in Vim's memory.  The only way to make them go away is to run <code>:bd</code> or <code>:bw</code> (or <code>:q</code> of course).</p>

<p>So, to answer your question: <code>:e newfile.txt</code></p>

<p>Your previous buffer is now the <code>alternate file</code> to the current buffer (<code>:help alternate-file</code>).  You can switch back to it using <code>ctrl-^</code> or <code>ctrl-6</code>.</p>

<p>There are commands similar to <code>:edit</code></p>

<ul>
<li><code>:split</code> - horizontal split</li>
<li><code>:vsplit</code> - vertical split</li>
</ul>

<p>Both of these commands (shortened <code>:sp</code> and <code>:vs</code> respectively) take an optional <code>file</code> argument like <code>:edit</code> does.  So, if you wanted to vertically split and create a new file in one command, you would type: <code>:vs newfile.txt</code></p>

<p>Give <code>:help edit-intro</code> a read to get an idea of how Vim handles files, and <code>:help windows-intro</code> to read up on windows, buffers, and tabs.</p>
","8352"
"Scroll the screen, not the cursor, when using scrollwheel","2907","","<p>I'm using Vim in a terminal, so scrolling with the scroll wheel uses the <code>\e[A</code> and <code>\e[B</code> syntax (where <code>\e</code> symbolizes <code>\x1b</code>, or escape).</p>

<p>However, Vim interprets this by moving the cursor up or down a line. The desired behavior is that the <em>screen</em> is moved up or down, like <code>&lt;C-e&gt;</code> and <code>&lt;C-y&gt;</code> do.</p>

<p>How can I tell Vim to move the screen when I used my scroll wheel, while keeping the cursor on the same line? This should work in all common modes (insert, normal, visual select).</p>

<p>I've already tried, for example, <code>:nnoremap &lt;esc&gt;[A &lt;C-e&gt;</code> (replacing <code>&lt;esc&gt;</code> with a literal escape character inserted with <kbd>Ctrl+V</kbd> <kbd>Esc</kbd>), but this proved to be futile.</p>

<p>I'm using Vim 7.4.52 on Ubuntu 14.04 with GNOME.</p>
","<p>As @Doorknob said in his comment, <code>:set mouse=a</code> fixes the problem.</p>
","209"
"Can I join lines with a comma (or another character)?","2867","","<p>I know I can join lines in Vim with <code>J</code> and several variants thereof (<code>gJ</code>, etc.); <code>J</code> will <em>""Remove the indent and insert up to two spaces""</em>.</p>

<p>But is there also a straightforward way to insert another character instead of the two spaces? For example a comma (<code>,</code>) or comma &amp; space (<code>,</code>)?</p>

<p>Given:</p>

<pre><code>8
9
10
32
</code></pre>

<p>I'd like to end up with:</p>

<pre><code>8, 9, 10, 32
</code></pre>

<p>or:</p>

<pre><code>8,9,10,32
</code></pre>
","<p>I wrote a Join plugin, can do what you want, and a lot more.</p>

<blockquote>
  <p>Except for all features provided by the build-in :join command, Join
  can:</p>
  
  <ul>
  <li>Join lines with separator (string)</li>
  <li>Join lines with or without trimming the leading/trailing whitespaces</li>
  <li>Join lines with negative count (backwards join)</li>
  <li>Join lines in reverse</li>
  <li>Join lines and keep joined lines (without removing joined lines)</li>
  <li>Join lines with any combinations of above options</li>
  </ul>
</blockquote>

<p>more details and screenshots:</p>

<p><a href=""https://github.com/sk1418/Join"" rel=""nofollow"">https://github.com/sk1418/Join</a></p>
","4282"
"How can I fix ""missing"" syntax highlighting for Python keywords such as ""self""?","2865","","<p>I'm trying to fix syntax highlighting for python; my colors are different from those in screenshots of what it ""should"" look like in different vim color schemes. And you can see the difference in comparing .rb (which displays correctly) to .py, which looks like it's off:</p>

<p><a href=""https://i.stack.imgur.com/R3iry.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/R3iry.png"" alt=""enter image description here""></a></p>

<p>For example, notice how <code>self</code> isn't highlighted. (This is in base16, but the comparison would be similar in other color schemes). Generally, it looks like the object syntax highlighting is wrong.</p>

<p>Some things I've tried:</p>

<ol>
<li>Looking at the syntax scripts vim loads; the only difference between .py and .rb in the example below is that, of course, ruby gets indent/ruby.vim and syntax/ruby.vim while python gets indent/python.vim and syntax/python.vim. These are the files that come with homebrew vim.</li>
<li>Loading the same files in macvim rather than terminal (iterm2) vim; same problem, the files look exactly the same as in the picture.</li>
<li>Adding the <a href=""http://www.vim.org/scripts/script.php?script_id=790"" rel=""nofollow noreferrer"">new python.vim</a> file. Doesn't solve the problem, even if used as an <code>.vim/after</code> script.</li>
</ol>

<p>Any suggestions are welcome; I've been banging my head on this for hours, and can't figure out why the highlighting isn't working as expected.</p>
","<p>How syntax highlighting works in brief:</p>

<ul>
<li><p>In <code>syntax/&lt;filetype&gt;.vim</code> the syntax rules are defined with the <code>:syntax</code> command. This command defines, well, syntax. It says ""if text matches this regular expression, it's a string"", and so forth. To do so, it assigns a <em>highlight group</em>. It does <em>not</em> say anything about colours as such.</p></li>
<li><p><code>:highlight</code> says ""highlight this group with these colours"". This is done in the <em>colour scheme</em>, not the syntax file. There are a bunch of default Highlight groups (<code>String</code>, <code>Function</code>, <code>Special</code>, and so forth) which all colour schemes should define.</p>

<p>You're by no means restricted to these default groups though, and you can create as many groups as you want (but default syntax files typically don't).</p></li>
<li><p>The <code>indent/&lt;filetype&gt;.vim</code> file controls automatic indentation. For example for Ruby it says ""the line after <code>def</code> should increase the indentation level"" and ""the line after <code>end</code> should decrease the indentation one level"". It doesn't do anything with colours or syntax highlighting.</p></li>
</ul>

<hr>

<p>Why do different programming languages get highlighted different? In part because of the of personal aesthetics and opinions of whoever wrote it. For example in Ruby the <code>Type</code> highlight group is used for class names. But it could also have been <code>Function</code> or something else. Why is it <code>Type</code>? Probably because the author thought that it looked better in his or her colour scheme.</p>

<p>But more importantly, the languages have different semantics and sensibilities. In Ruby, <code>self</code> is a special keyword. You can't do <code>self = ""foo""</code> or <code>def self()</code>. These are errors. But this is <em>not</em> the case in Python. It's just another variable without any special properties. Doing:</p>

<pre><code>x = Object()
x.foo()
</code></pre>

<p>is really ""translated"" by Python to:</p>

<pre><code>Object.foo(x)
</code></pre>

<p>The name <code>self</code> is just convention (almost universally adopted) but you can name it anything you like; <code>def x(this):</code> or <code>def x(xxx):</code> are equally valid. You can also use the name <code>self</code> anywhere you like; <code>self = 'foo'</code> and <code>def self():</code> are perfectly fine.</p>

<p>I would argue that <code>self</code> shouldn't be highlighted, as it's neither a special keyword, nor a pre-defined variable (like <code>str</code>). There is no trace of the word <code>self</code> in the syntax file, so it looks like the author of it reasoned the same :-)</p>

<hr>

<p>If you want <code>self</code> highlighted you'll have to create a syntax rule for it:</p>

<pre><code>:syn keyword pythonBuiltin self
</code></pre>

<p>The <code>pythonBuiltin</code> group name is already defined in the default syntax file and linked to the <code>Function</code> highlight group. To use a new highlight group, use something like:</p>

<pre><code>:syn keyword pythonSelf self
:highlight def link pythonSelf Special
</code></pre>

<p>To make these changes you can't just stick 'em in your vimrc file. The syntax file will override it. Instead you'll need to run it <em>after</em> the syntax file loads, which you can do in two ways:</p>

<ol>
<li><p>Use a <code>FileType</code> autocmd:</p>

<pre><code>augroup python
    autocmd!
    autocmd FileType python
                \   syn keyword pythonSelf self
                \ | highlight def link pythonSelf Special
augroup end
</code></pre></li>
<li><p>Use the <a href=""http://vimhelp.appspot.com/options.txt.html#after%2ddirectory"" rel=""noreferrer""><code>after-directory</code></a>, <code>~/.vim/after/syntax/python.vim</code>:</p>

<pre><code>syn keyword pythonSelf self
highlight def link pythonSelf Special
</code></pre></li>
</ol>

<p>Both methods are effectively the same. Use whichever you prefer.</p>
","8773"
"How do I install Neovim with GUI and msgpack support in Ubuntu?","2863","","<p>I would like to get Neovim because of its msgpack API and clear roadmap of development, but it is not in Ubuntu 16.04's repositories.</p>

<pre><code> Command 'gvim' from package 'vim' (main)
 Command 'gvim' from package 'vim-gtk3' (universe)
 Command 'gvim' from package 'vim-gnome' (main)
 Command 'gvim' from package 'vim-athena' (universe)
 Command 'gvim' from package 'vim-nox-py2' (universe)
 Command 'gvim' from package 'vim-gtk-py2' (universe)
 Command 'gvim' from package 'vim-nox' (universe)
 Command 'gvim' from package 'vim-gtk3-py2' (universe)
 Command 'gvim' from package 'vim-gnome-py2' (universe)
 Command 'gvim' from package 'vim-tiny' (main)
 Command 'gvim' from package 'vim-gtk' (universe)
 Command 'gvim' from package 'vim-athena-py2' (universe)
</code></pre>

<p>I have now selected vim-gtk3 but it may limit me later.</p>

<hr>

<p>How do I get graphical Neovim with msgpack support?</p>
","<p>Instructions can be found on the <a href=""https://github.com/neovim/neovim/wiki/Installing-Neovim"" rel=""nofollow"">Neovim Wiki</a></p>

<p>As of the posting of this answer, the site's current instructions are as follows:</p>

<h2>Ubuntu</h2>

<p>Neovim has been added to a <a href=""https://launchpad.net/~neovim-ppa/+archive/ubuntu/unstable"" rel=""nofollow"">Personal Package Archive</a> which allows you to install it using <code>apt-get</code> on Ubuntu <a href=""https://wiki.ubuntu.com/Releases"" rel=""nofollow"">12.04 and later</a>.</p>

<p>To be able to use <strong>add-apt-repository</strong> you may need to install software-properties-common:</p>

<pre><code>sudo apt-get install software-properties-common
</code></pre>

<p>If you're using an older version Ubuntu you have to use:</p>

<pre><code>sudo apt-get install python-software-properties
</code></pre>

<p>Run the following commands:</p>

<pre><code>sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
sudo apt-get install neovim
</code></pre>

<p>Prerequisites for the Python modules:</p>

<pre><code>sudo apt-get install python-dev python-pip python3-dev python3-pip
</code></pre>

<p>If you're using an older version Ubuntu you have to use:</p>

<pre><code>sudo apt-get install python-dev python-pip python3-dev
sudo apt-get install python3-setuptools
sudo easy_install3 pip
</code></pre>

<p>For instructions on how to install the Python modules, see <a href=""http://neovim.io/doc/user/nvim_python.html"" rel=""nofollow""><code>:help nvim_python</code></a>.</p>

<p>If you want to use Neovim for some (or all) of the editor alternatives, use the following commands:</p>

<pre><code>sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
sudo update-alternatives --config vi
sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
sudo update-alternatives --config vim
sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
sudo update-alternatives --config editor
</code></pre>

<p>Note, however, that special interfaces, like <code>view</code> for <code>nvim -R</code>, are not supported.  (See <a href=""https://github.com/neovim/neovim/issues/1646"" rel=""nofollow"">#1646</a> and <a href=""https://github.com/neovim/neovim/pull/2008"" rel=""nofollow"">#2008</a>.)</p>

<hr>

<p>The GUI portion needs to be installed separately. See the <a href=""https://github.com/neovim/neovim/wiki/Related-projects"" rel=""nofollow"">list of 3rd party GUIs</a> on the Neovim site. </p>
","7634"
"How to delete part of a line that does not match a pattern?","2850","","<p>I'd like to remove everything apart of my pattern match.</p>

<p>For example I've the following line:</p>

<pre><code>window.page4_callback([""here \""is\"" some text""]);
</code></pre>

<p>and I'd like to leave the text only within the double quotes, so the expected output is:</p>

<pre><code>here \""is\"" some text 
</code></pre>

<p>Matching pattern is <code>/"".*""</code> and its removal can be performed by using substitute:</p>

<pre><code>:s/"".*""//g
</code></pre>

<p>however how do you do opposite?</p>

<p>I've tried to use vglobal (<code>:v/pattern/d</code>), but it would normally remove the whole line, but in my case it's saying:</p>

<blockquote>
  <p>Pattern found in every line: <code>"".*""</code></p>
</blockquote>

<p>I've found similar issue <a href=""https://stackoverflow.com/q/6249172/55075"">here</a>, but I'm even more confused.</p>
","<p>There are probably a bunch of ways to do this; here's my attempt:</p>

<pre><code>:%s/.*""\(.\{-}\)"".*/\1/
</code></pre>

<p>The key part is <code>""\(.\{-}\)""</code>; this non-greedily matches everything in between quotes. This will match:</p>

<blockquote>
  <p>window.page4_callback([<code>""here is some text""</code>]);</p>
</blockquote>

<p>The parentheses are there to start a subgroup, so we can reference it with <code>\1</code> on the replacing side. We surround this with <code>.*</code> on both ends to match the rest of the line.</p>

<p>So this doesn't really ""delete a non-matching pattern"", as the title says. Rather, it deletes the <em>entire line</em>, and replaces it with a specific subgroup we matched earlier. The effect is the same, and for me, this is an easier way to think about it.</p>

<p>Conclusion: capturing subgroups is good. Subgroups are your friends.</p>

<hr>

<p><strong>Edit</strong></p>

<p>To also work after your edited post :-)</p>

<pre><code>:%s/^.\{-}""\(.*\)"".\{-}$/\1/
</code></pre>

<p>This is a variant of the above, but notice we use <code>.\{-}</code> before and after the   <code>""</code> now, to match as little as possible; plus, we anchor it to the start and end of the line with <code>^</code> and <code>$</code>.</p>

<p>You can then replace the <code>\""</code> with a second <code>:substitute</code> command:</p>

<pre><code>:%s/\\""/""/
</code></pre>

<p>This still won't work with something like:</p>

<pre><code>window.function(""arg1"", ""arg2"");
</code></pre>

<p>This will leave you with:</p>

<pre><code>arg1"", ""arg2
</code></pre>

<p>But I'm not sure if that's a requirement :-)</p>
","3215"
"How to fold comments?","2835","","<p>The syntax <code>foldmethod</code> is great, but sometimes I just want to fold the comments in a source file.</p>

<p>Also syntax folding of comments only works for C-Style comments like:</p>

<pre><code>/*
 ...
 */
</code></pre>

<p>But not for comment boilerplate like:</p>

<pre><code>//
//
// ...
//
</code></pre>

<p>Or even for comment blocks in non-C-like languages like:</p>

<pre><code>#
#
# ...
#
</code></pre>

<p>How can I configure this with vim?</p>
","<p>Folding only the comments is fairly easy by using <code>foldmethod=expr</code>:</p>

<pre><code>set foldmethod=expr foldexpr=getline(v:lnum)=~'^\s*'.&amp;commentstring[0]
</code></pre>

<p>This will simply check if the line starts with any amount of whitespace + a comment character. Note that this is fairly naive, and may not work for all languages. So you may want to use a autocmd to be more specific:</p>

<pre><code>autocmd FileType c setlocal foldmethod=expr foldexpr=getline(v:lnum)=~'^\s*//'
autocmd FileType python setlocal foldmethod=expr foldexpr=getline(v:lnum)=~'^\s*#'
</code></pre>

<p>For more information about fold-expr, see:</p>

<ul>
<li><a href=""http://vimhelp.appspot.com/fold.txt.html#fold-expr"" rel=""nofollow noreferrer""><code>:help fold-expr</code></a></li>
<li><a href=""http://vimhelp.appspot.com/usr_41.txt.html#folding-functions"" rel=""nofollow noreferrer""><code>:help folding-functions</code></a></li>
<li><a href=""https://vi.stackexchange.com/q/2176/51"">How to write a foldexpr?</a></li>
<li><a href=""https://vi.stackexchange.com/q/2165/51"">Folding by regex search pattern</a></li>
</ul>

<hr>

<p>Using syntax folding <em>and</em> comment folding is more involved; this would require modifing the syntax file in <code>/usr/share/vim/vim74/syntax/*.vim</code>, and will be specific to the language you're using.</p>

<p>Note that <em>some</em> filetypes already do this! For example from <code>ruby.vim</code>:</p>

<pre><code>if !exists(""ruby_no_comment_fold"")
  syn region rubyMultilineComment start=""\%(\%(^\s*#.*\n\)\@&lt;!\%(^\s*#.*\n\)\)\%(\(^\s*#.*\n\)\{1,}\)\@="" end=""\%(^\s*#.*\n\)\@&lt;=\%(^\s*#.*\n\)\%(^\s*#\)\@!"" contains=rubyC
  syn region rubyDocumentation    start=""^=begin\ze\%(\s.*\)\=$"" end=""^=end\%(\s.*\)\=$"" contains=rubySpaceError,rubyTodo,@Spell fold
else
  syn region rubyDocumentation    start=""^=begin\s*$"" end=""^=end\s*$"" contains=rubySpaceError,rubyTodo,@Spell
endif
</code></pre>
","3513"
"Settings and plugins when root (`sudo vim`)?","2834","","<p>It's really frustrating when I need to edit a file as root and use <code>sudo vim somefile.conf</code> and I can't use any of my keybindings and settings and plugins.</p>

<p>Is there a way to get all my customizations when I need to edit as root?</p>

<p>I am using vim-plug for my plugins.</p>
","<p>Rather than opening vim as root, you can simply save as root by redirecting to tee. Here is an example:</p>

<pre><code>:w !sudo tee % &gt; /dev/null
</code></pre>

<p>This may be useful to alias in your .vimrc, I use <code>:Sw</code>:</p>

<pre><code>command! -nargs=0 Sw w !sudo tee % &gt; /dev/null
</code></pre>
","3566"
"How can I work with splits in Vim without Ctrl-W?","2833","","<p>My terminal doesn't allow me to type <kbd>Ctrl</kbd>+<kbd>W</kbd>, because that's a shortcut for closing a terminal tab.</p>

<p>I like working with splits, but I can't find any way to do so without using <code>C-W</code>. This forced me to use tabs, because I can switch between them with <code>gt</code>, <code>gT</code> or <code>#gt</code> where # is a number, but I find this less convenient than splits as I can only see the contents of one file at a time.</p>

<p>I can't use <code>mouse=a</code> either since my terminal doesn't support that.</p>

<p>How can I work with splits in Vim without the <kbd>Ctrl</kbd>+<kbd>W</kbd> combo available?</p>
","<p>You can just remap <code>&lt;C-w&gt;</code> to another combination, for example:</p>

<pre><code>:nnoremap &lt;C-e&gt; &lt;C-w&gt;
</code></pre>

<p>You can now use <code>&lt;C-e&gt;</code> and it will act as if you've pressed <code>&lt;C-w&gt;</code>.</p>

<p>This will overwrite the default <code>&lt;C-e&gt;</code> mapping (scroll down). Vim already uses every key on the keyboard, and the only way to prevent this is using the leader key, which acts like a ""prefix"":</p>

<pre><code>:nnoremap &lt;Leader&gt;w &lt;C-w&gt;
</code></pre>

<p>Unless you've remapped <code>&lt;Leader&gt;</code>, you can now use <code>\w</code> (after each other). I actually prefer this since I don't like CTRL+key combinations.</p>

<p>See <a href=""https://vi.stackexchange.com/q/836/51"">What is &lt;Leader>?</a> and
<a href=""https://vi.stackexchange.com/q/281/51"">How can I find out what &lt;Leader> is set to? And is it possible to remap &lt;Leader>?</a>.</p>
","3729"
"How do I customize vimdiff colors?","2816","","<p>I am trying to use vimdiff as my git merge tool, but the colors used are making it unbearable (at least on Windows/Mingw): the background color and the foreground color is the same for some of the conflicting lines, making it needlessly hard to figure out what is going on (see the lines below containing <code>include=</code>).</p>

<p><a href=""https://i.stack.imgur.com/Plnff.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Plnff.png"" alt=""example""></a></p>
","<p>The colors are controlled by these four highlight groups (<code>:help hl-DiffAdd</code>):</p>

<pre><code>DiffAdd     diff mode: Added line
DiffChange  diff mode: Changed line
DiffDelete  diff mode: Deleted line
DiffText    diff mode: Changed text within a changed line
</code></pre>

<p>These are typically defined by a <em>color scheme</em>, but you can customize them in your <code>~/.vimrc</code> (after the <code>:colorscheme</code> command) if you like you scheme overall, just not its diff highlighting. Just redefine using <code>:highlight</code>. Here are my personal customizations (for GVIM; for the terminal you need the appropriate <code>ctermfg/bg=...</code> attributes instead / in addition):</p>

<pre><code>hi DiffAdd      gui=none    guifg=NONE          guibg=#bada9f
hi DiffChange   gui=none    guifg=NONE          guibg=#e5d5ac
hi DiffDelete   gui=bold    guifg=#ff8080       guibg=#ffb0b0
hi DiffText     gui=none    guifg=NONE          guibg=#8cbee2
</code></pre>

<p>If you're switching colorschemes on the fly, you need to re-invoke those <code>:hi</code> commands via <code>:autocmd ColorScheme * hi ...</code></p>
","10898"
"How to make regex matchers non-greedy?","2816","","<p>I am trying to use a regex for replacing text in a file (replace a full url with just protocol/domain/):</p>

<pre><code>:%s/\(https\?:\/\/.*?\/\).*/\1/gc
</code></pre>

<p>Unfortunately <code>.*?</code> does not match the string, even trying to escape the <code>?</code> quantifier? How should non-greedy quantifier be escaped in vim?</p>
","<p>Vim's regex has special syntax for non-greedy versions of operators (it's kind of annoying, but you just have to memorize them): <a href=""http://vimregex.com/#Non-Greedy"">http://vimregex.com/#Non-Greedy</a></p>

<p>The non-greedy version of <code>*</code> is <code>\{-}</code>. So, simply replace <code>.*</code> with <code>.\{-}</code>:</p>

<pre><code>:%s/\(https\?:\/\/.\{-}\/\).*/\1/gc
</code></pre>
","199"
"Easiest way to switch git branches","2805","","<p>Right now I'm using fugitive to manage almost everything git related, but I can't find a good workflow to quickly visualize and switch between available branches.</p>

<p>I can do <code>:Git checkout &lt;branch-name&gt;</code>, the problem is that it autocompletes both file names and branches, and I'd prefer a branch list.</p>
","<p>To culminate the answers here are the ways to accomplish this:</p>

<h2>Vanilla Terminal Vim</h2>

<p>Press <kbd>CTRL</kbd>-<kbd>Z</kbd> in <em>normal</em> mode will drop you back in to the shell and suspend Vim. After executing your <code>git checkout [branchname]</code> type the <code>fg</code> command to return to the suspended Vim which will also force Vim to refresh.</p>

<h2>Vanilla GUI Vim</h2>

<p>Some gvim implementations will have <code>:shell</code> support which will open a shell inside of Vim using a dumb terminal. However it may be easier to just type:</p>

<pre><code>:!git checkout [branchname]
</code></pre>

<p>This will execute the command without having to open a new shell prompt. (This option is also usable in the terminal Vim).</p>

<h2>vim-fugitive</h2>

<p><a href=""https://github.com/tpope/vim-fugitive"" rel=""noreferrer"">vim-fugitive</a> is a plugin that allows you to use Git from within Vim. The command would be:</p>

<pre><code>:Git checkout [branchname]
</code></pre>

<h2>vim-merginal</h2>

<p><a href=""https://github.com/idanarye/vim-merginal"" rel=""noreferrer"">vim-merginal</a> is a plugin that uses <a href=""https://github.com/tpope/vim-fugitive"" rel=""noreferrer"">vim-fugitive</a> and provides a user friendly-ish interface.</p>

<ol>
<li>Type <code>:Merginal</code>.</li>
<li>Move cursor to the branch you want.</li>
<li>Type <code>cc</code> to check out that branch.</li>
</ol>
","5934"
"How to convert a source code file into HTML?","2797","","<p>I've a file of source code written in a programming language (e.g. PHP) and I would like to convert it into a HTML file, so I can publish it on web in order to share my code.</p>

<p>By conversion I mean, for example, converting new lines into <code>&lt;br&gt;</code> tags so that the text will keep the same formatting both in the text editor and in the web browser. Ideally it should also preserve syntax highlighting so it can be also printed. </p>

<p>Is this achievable in Vim? If so, how?</p>
","<p>The following vim command would creates an html rendering of the current file.</p>

<pre><code>:TOhtml
</code></pre>

<p>It saves the file in the same folder (with .html extension) and it will include styles, foreground/background colours and <a href=""https://en.wikipedia.org/wiki/Syntax_highlighting"" rel=""nofollow noreferrer"">syntax highlighting</a>, so the file can be straight web published as well as printed.</p>

<p>For more options (like adding line numbers, compability with old browsers, etc.), check: <code>:help TOhtml</code>.</p>

<p>To convert file non-interactively, try the following command:</p>

<pre><code>vim -E -s -c ""let g:html_no_progress=1"" -c ""syntax on"" -c ""set ft=c"" -c ""runtime syntax/2html.vim"" -cwqa myfile.c
</code></pre>

<p>Related:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2915547/convert-codes-to-html-with-css-style"">Convert codes to HTML with CSS style</a> at stackoverflow</li>
</ul>
","794"
"How do I reload my vimrc without leaving Vim?","2794","","<p>When I do a change in my <code>.vimrc</code>, I usually exit Vim and open it again. Is there an easier way to reload the new <code>.vimrc</code> changes?</p>
","<p>Run:</p>

<pre><code>:source $MYVIMRC
</code></pre>

<p>inside Vim to reload the <code>vimrc</code> file. Or, a shorter version:</p>

<pre><code>:so $MYVIMRC
</code></pre>

<p>as mentioned in a comment by <a href=""https://vi.stackexchange.com/users/467/kenorb"">kenorb</a>.</p>

<p>You may also find it useful to map either of these forms to a key. For example:</p>

<pre><code>nnoremap &lt;Leader&gt;r :source $MYVIMRC&lt;CR&gt;
</code></pre>
","26"
"Can I still use console vim if I install a GUI version?","2783","","<p>If I purge my existing vim-full installation and install a GUI version like vim-gnome or vim-gtk, can I still use it in the text mode I am familiar with?</p>

<p>What if I am using it from a terminal via SSH? How does the gui mode interact with a terminal-based user?</p>

<p>I have seen the gui version of Vim referred to as ""gvim"". Does that mean you start it with the command <code>gvim</code> instead of <code>vim</code>?</p>
","<p><strong>Yes.</strong></p>

<p>Vim-gnome does install gvim, but it also installs a much more feature-filled version of command line vim, including <a href=""https://askubuntu.com/a/281972/289381"">Perl, Python, Ruby, and TCL scripting</a>, system-clipboard, newer patches, etc.</p>

<p>So not only can you continue to use command line vim, you will get a better version of command line vim along with the GUI.</p>

<p>As for SSH editing, I don't believe anything will change for you. I personally have never used vim to edit over SSH, but according to <a href=""http://linuxblog.pansapiens.com/2008/07/13/edit-remote-files-over-ssh-scp-using-gvim/"" rel=""nofollow noreferrer"">this article</a>, you can edit remote files from directly within gvim with:</p>

<pre><code>:e scp://username@someremotehost/./path/to/file
</code></pre>

<p>Even if that doesn't work, your original command line vim will be the same, so (assuming you can edit through SSH now) you could just choose to use command line vim instead.</p>

<p>Also, yes the GUI version is called ""gvim"", and can be launched either with </p>

<pre><code>gvim
</code></pre>

<p>or </p>

<pre><code>vim -g
</code></pre>

<p>From <code>:help -g</code></p>

<pre><code>                            *-g*
-g      Start Vim in GUI mode.  See |gui|. For the opposite see |-v|.
        {not in Vi}
</code></pre>

<p>and from <code>:help gui-start</code></p>

<pre><code>1. Starting the GUI             *gui-start* *E229* *E233*

First you must make sure you actually have a version of Vim with the GUI code
included.  You can check this with the "":version"" command, it says ""with xxx
GUI"", where ""xxx"" is X11-Motif, X11-Athena, Photon, GTK, GTK2, etc., or
""MS-Windows 32 bit GUI version"".

How to start the GUI depends on the system used.  Mostly you can run the
GUI version of Vim with:
    gvim [options] [files...]

The X11 version of Vim can run both in GUI and in non-GUI mode.  See
|gui-x11-start|.
</code></pre>
","8982"
"How secure is encrypting files with blowfish?","2773","","<p>I know using <code>:set cryptmethod=zip</code> is <em>not</em> secure, but how secure is using <code>:set cryptmethod=blowfish</code>?</p>

<p><a href=""http://en.wikipedia.org/wiki/Blowfish_(cipher)"">On wikipedia I read</a> that the blowfish cipher, as such, should be secure, but this says nothing about the security of Vim's <em>implementation</em> of it.</p>

<p>And what about swapfiles, backupfiles, undofiles, and other possible ways to bypass the blowfish encryption? How secure is Vim there?</p>
","<p>It is <em>not</em> secure. David Leadbeater posted POC code to brute-force upto 64 bytes in an article titled, somewhat ironically, <a href=""https://dgl.cx/2014/10/vim-blowfish"" rel=""noreferrer""><em>Vim blowfish encryption... or why you shouldn't roll your own crypto</em></a>. The Vim documentation <a href=""http://vimhelp.appspot.com/editing.txt.html#encryption"" rel=""noreferrer"">now recommends</a>:</p>

<pre><code>- The implementation of 'cryptmethod' ""blowfish"" has a flaw.  It is possible
  to crack the first 64 bytes of a file and in some circumstances more of the
  file. Use of it is not recommended, but it's still the strongest method
  supported by Vim 7.3 and 7.4.  The ""zip"" method is even weaker.
</code></pre>

<p>And, earlier on:</p>

<pre><code>The text in the swap file and the undo file is also encrypted.  E843
However, this is done block-by-block and may reduce the time needed to crack a
password.  You can disable the swap file, but then a crash will cause you to
lose your work.  The undo file can be disabled without much disadvantage. 
        :set noundofile
        :noswapfile edit secrets

Note: The text in memory is not encrypted.  A system administrator may be able
to see your text while you are editing it.  When filtering text with
"":!filter"" or using "":w !command"" the text is also not encrypted, this may
reveal it to others.  The 'viminfo' file is not encrypted.
</code></pre>

<p>Summary:</p>

<ul>
<li>If you care about security, <code>blowfish</code> should not be used. Use <code>blowfish2</code> instead.</li>
<li>While <code>swap</code> and <code>undo</code> files are encrypted, <code>viminfo</code> isn't. </li>
</ul>

<p>Unsolicited advice:</p>

<ul>
<li>If you do care about security, <em>do not roll your own encryption</em>. And that means the <code>blowfish2</code> implementation as well. Use something else, like GPG. The <a href=""http://www.vim.org/scripts/script.php?script_id=3645"" rel=""noreferrer""><code>gnupg.vim</code></a> plugin may be useful. It seems <a href=""https://github.com/jamessan/vim-gnupg"" rel=""noreferrer"">to be maintained</a>. It disables <code>viminfo</code> and the swap file.</li>
</ul>
","368"
"In Vimdiff, how do I switch the left and right panes?","2773","","<p>When I do <code>vimdiff file2 file1</code>, <code>file2</code> naturally goes on the left and <code>file1</code> on the right.</p>

<p>Sometimes I find that I put them the wrong way round, so I'd like to be able to switch them round without leaving Vim. Is that possible?</p>
","<p>You can use <kbd>Ctrl</kbd><kbd>w</kbd>-<kbd>x</kbd>. From <a href=""http://vimhelp.appspot.com/windows.txt.html#CTRL-W_x""><code>:he  CTRL-W_x</code></a>:</p>

<pre><code>CTRL-W x                                            CTRL-W_x CTRL-W_CTRL-X
CTRL-W CTRL-X   Without count: Exchange current window with next one.  If there
                is no next window, exchange with previous window.
                With count: Exchange current window with Nth window (first
                window is 1).  The cursor is put in the other window.
                When vertical and horizontal window splits are mixed, the
                exchange is only done in the row or column of windows that the
                current window is in.
</code></pre>
","2208"
"Use case for neovim terminal emulator?","2720","","<p>One big difference of neovim and Vim is that neovim includes a <a href=""http://neovim.io/doc/user/nvim_terminal_emulator.html"">terminal emulator</a> that works asynchronously.</p>

<p>However, I fail to see how can I profit from this feature. For what can I use it? Can you give some use cases for neovim's terminal feature so that I understand how I can use it to its best extent?</p>

<p>In normal Vim I normally use <code>:read !{command}</code>, <code>:write !{command}</code>, <code>Ctrl+Z</code> and <code>fg</code> as well as tmux split windows. </p>
","<p>Running a terminal inside Vim allows you to use Vim commands on the input and output to the programs that you run in that terminal. You get search, copy-paste, macros, syntax coloring, etc. Using <code>:read !{command}</code> and <code>:write !{command}</code> gives you that for one-shot commands, but asynchronous input/output becomes useful when you want to submit input to an external program piece by piece.</p>

<p>The typical use case is a <a href=""https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"">read-eval-print loop</a> (REPL), which is provided by many high-level programming languages. You type a stanza in your source code, then feed it to the REPL for immediate feedback. Since the REPL keeps running from one submission to the next, the submitted code snippet are executed in context.</p>
","4684"
"How can I open very large files with good performance?","2717","","<p>I have server log files that are several gigabytes in size (on Ubuntu). When I attempt to open them, the terminal locks up for a minute or so while the file is loaded into Vim. Is there a way to reduce this time, for example by setting Vim to load the file on demand, or by some other method?</p>
","<p>First, try loading vim with no plugins or vimrc:</p>

<pre><code>vim -u NONE gargantuan.txt
</code></pre>

<p>If this is substantially faster, then you probably have syntax highlighting, folding, plugins, or something else going on that's taking up most of the time.
Try turning stuff off in your vimrc (and disabling your plugins) until you find the culprit.</p>

<p>Also make sure to <code>set ft= syn=</code> and <code>syntax off</code>.</p>

<p>If this doesn't help, it's probably the case that you have very long <em>lines</em> that are causing the problem.
Try <code>set nowrap</code> to turn line wrapping off.</p>
","162"
"How do I save a file in a directory that does not yet exist?","2704","","<p>Suppose I start Vim to edit a new file in a directory that is not yet created:</p>

<pre><code>vim nonExisitingDirectory/newFile.txt
</code></pre>

<p>Vim will happily show me an empty buffer and I can start writing my new file. But when I want to write the file to disk I get this error: </p>

<pre><code>E212: Can't Open file for writing.
</code></pre>

<p>I presume this is because the directory does not yet exists. Is there a way to force Vim into creating the directory for me? </p>
","<p>As far as I know there is no setting or some such to do this. But not all is lost, we can of course use the
<code>BufWritePre</code> autocommand.<br>
This is executed before the buffer is written to the
disk. So we can create the directory there if it doesn't exist yet.</p>

<p>For example:</p>

<pre><code>augroup Mkdir
  autocmd!
  autocmd BufWritePre *
    \ if !isdirectory(expand(""&lt;afile&gt;:p:h"")) |
        \ call mkdir(expand(""&lt;afile&gt;:p:h""), ""p"") |
    \ endif
augroup END
</code></pre>

<ul>
<li>We first check if the directory exists with <code>isdirectory</code>, otherwise <code>mkdir</code> gives an error.</li>
<li><code>&lt;afile&gt;</code> refers to the file we're trying to save; <code>:p</code> is a modifier to expand it to the full pathname (rather than relative), and <code>:h</code> removes the last path component (the file).</li>
<li>We then call <code>mkdir()</code> if required. We need the <code>p</code> flag for <code>mkdir()</code> to make all parents directories (ie. in the case of <code>nonexistent/more_nonexisting/file</code>.</li>
</ul>

<p>You could, of course, also run the <code>mkdir()</code> command from the Vim commandline, or bind it to a keybind, ie:</p>

<pre><code>nnoremap &lt;Leader&gt;m :call mkdir(expand(""%:p:h""), ""p"")&lt;CR&gt;
</code></pre>

<p>Here I used <code>%</code> instead of <code>&lt;afile&gt;</code>, since that's only valid from within an autocommand (<code>%</code> refers to the currently active buffer, which would not work with <code>:wa</code> for example; <code>&lt;afile&gt;</code> refers to the filename of the buffer that triggers the autocmd).</p>

<p>You can also ask for a confirmation before writing a directory if you want. See this question for more details: <a href=""https://vi.stackexchange.com/q/695/51"">How can I stop Vim from writing a file in BufWritePre autocommand?</a></p>

<hr>

<p>The above snippet will create the directory on the first write (<code>:w</code>). You could, if you wanted, also create the directory when you first open it (i.e. just after typing <code>vim ...</code>) by using the <code>BufNewFile</code> autocmd instead of <code>BufWritePre</code>.</p>

<hr>

<p>There is also a plugin called <a href=""https://github.com/DataWraith/auto_mkdir/blob/master/plugin/auto_mkdir.vim"" rel=""nofollow noreferrer"">auto_mkdir</a> which is effectively the same a the above.</p>

<p><a href=""http://travisjeffery.com/b/2011/11/saving-files-in-nonexistent-directories-with-vim/"" rel=""nofollow noreferrer"">On this page</a>
there is a slightly expanded snippet which also asks you if you want to create the directory first, which some may consider to be useful.   It also has converts the filename of the encoding before writing it:</p>

<pre><code>call mkdir(iconv(expand(""%:p:h""), &amp;encoding, &amp;termencoding), 'p')
</code></pre>

<p>I'm not sure if this is actually required though, but if you mix encodings a lot and get weird filenames, you could try it.</p>

<hr>

<p>I put all of the above in an <a href=""https://github.com/Carpetsmoker/auto_mkdir2.vim"" rel=""nofollow noreferrer""><code>auto_mkdir2.vim</code> plugin</a> for easier installation.</p>
","679"
"How can I make Vim autoread a file while it doesn't have focus?","2691","","<p>I'm using VIm for all kinds of things (or gVim in this case), including monitoring output written to a file; I use <code>autoread</code> to make Vim reread the file, which it does whenever I switch the keyboard focus to it.</p>

<p>Is there any way to make Vim update the buffer even if I don't switch the keyboard focus? I've tried setting <code>checktime</code> but it doesn't appear to have any effect while keyboard focus is elsewhere.</p>

<p>The output I'm monitoring is replacing the output file completely; and I'm not looking to <code>tail -f</code> it. There are other options, like piping into a new instance every time, or piping into <code>less</code> or something, but it'd be cool if it could be done with VIm.</p>
","<p><strong>Update 2015-06-25</strong>:</p>

<ul>
<li>I've scrapped the ""shell"" method, as it was too dysfunctional. It stopped insert mode and left zombie processes. Look at <a href=""https://vi.stackexchange.com/revisions/2731/1"">this posts's revision history</a> is you really want to see it anyway.</li>
<li>I've made a plugin out of this: <a href=""http://code.arp242.net/auto_autoread.vim"">auto_autoread.vim</a>. At the moment, it's effectively the same as the code below, but I would recommend you use the plugin as this is likely to receive updates.</li>
</ul>

<hr>

<h1>What does <code>autoread</code> do?</h1>

<p>To answer this question, we must first understand what the <code>autoread</code> option
does, and more importantly, what it <em>doesn't</em> do.</p>

<p>Unfortunately <a href=""http://vimhelp.appspot.com/options.txt.html#%27autoread%27""><code>:help 'autoread'</code></a>
doesn't have a lot of information on this, it just says <em>""a file has been
detected to have been changed outside of Vim""</em>. How does Vim detect that a file is
changed? On certain actions, Vim checks the modification time of the file.</p>

<p>When:</p>

<ul>
<li><code>:checktime</code> is used;</li>
<li>a buffer is entered;</li>
<li><code>:diffupdate</code> is used;</li>
<li><code>:e</code> is issued for a file that already has a buffer;</li>
<li>executing an external command with <code>!</code>;</li>
<li>returning to the foreground (<code>^Z</code>, <code>fg</code>, only if the shell has job control);</li>
</ul>

<p>for gVim, this is also done when:</p>

<ul>
<li>closing the ""right-click"" menu (either by selecting something, or just by
closing it);</li>
<li>focus is changed (this is what you already noticed);</li>
<li>closing the file browsers dialog that pops up if you use ""file -> open"", ""file
-> save as"" from the menu (as well as some other places).</li>
</ul>

<p>I gathered this information from the Vim source by locating all calls to the
<code>buf_check_timestamp()</code>, <code>check_timestamps()</code> functions, and locations where
<code>need_check_timestamps</code> is set to <code>TRUE</code>.</p>

<p>I may have missed some events, but the key thing to remember is that <strong>Vim only
checks if the file is modified in a very limited set of cirsumstances</strong>. It
certainly doesn't ""poll"" the file for changes ever <em>n</em> seconds, which is
basically what you're after.</p>

<p>So, for your purpose, <code>set autoread</code> is not enough.</p>

<h1>Using Python</h1>

<p>This schedules a Python thread to run in the background, it will run
<code>:checktime</code> every <em>n</em> seconds. If <code>autoread</code> is <em>enabled</em>, this will reload the
buffer from disk, else it will just warn.</p>

<p>This requires that Vim has <code>+python</code> or <code>+python3</code> in <code>:version</code>. It should work
on all platforms (including Windows).</p>

<pre><code>fun! AutoreadPython()
python &lt;&lt; EOF
import time, vim
try: import thread
except ImportError: import _thread as thread # Py3

def autoread():
    vim.command('checktime')  # Run the 'checktime' command
    vim.command('redraw')     # Actually update the display

def autoread_loop():
    while True:
        time.sleep(1)
        autoread()

thread.start_new_thread(autoread_loop, ())
EOF
endfun
</code></pre>

<p>You can start this off by using <code>:call AutoreadPython()</code>; you can of course do
this in an autocmd; for example:</p>

<pre><code>autocmd *.c call AutoreadPython()
</code></pre>

<h1>Afterword</h1>

<p>There are actually more methods, for example you could use a tool such as
<a href=""http://entrproject.org/""><code>entr</code></a> or the Python <code>inotify</code> or <code>gamin</code> module to
monitor a file for changes, <code>:checktime</code> also checks all buffers if it's not
given any arguments, this could be improved on by only checking a single buffer
or a certain file.<br>
However, this answer is already rather long :-) These method should (hopefully!)
work fine for most scenarios, or should be easily adaptable to your scenario.</p>

<p>PS. I also tried to use Ruby, but unfortunately Ruby threads (using <code>Thread</code>)
don't run in the background like Python does, so I wasn't able to get this to
work (perhaps there is another way, though?)</p>
","2731"
"How can I reload all buffers at once?","2678","","<p>When working on a feature branch in <code>git</code>, I frequently need to stash my changes to commit a bug fix to the main branch. When I'm done working on the changes, I <code>git stash pop</code>, which updates the timestamps on the files.</p>

<p>Even though the files are identical, the next time I try to save, I get:</p>

<blockquote>
  <p>WARNING: The file has been changed since reading it!!!</p>
  
  <p>Do you really want to write to it (y/n)?</p>
</blockquote>

<p>I don't want to automatically reload the file every time it changes on disk, only when I <code>git stash pop</code>.</p>

<p>Right now, I manually reload each buffer individually (<code>:e</code>). Is there any way I can do this in one command?</p>
","<p>See <code>:help bufdo</code> for what you want to do.  It will execute a command in each buffer in the buffer list.  For example:</p>

<pre><code>:bufdo e
</code></pre>

<p>You may also want to look at <code>:help noconfirm</code> to disable the confirmation dialog before issueing the <code>bufdo</code> command</p>

<pre><code>:set noconfirm
</code></pre>

<p>and reenabling it after the <code>bufdo</code> command.</p>

<pre><code>:set confirm
</code></pre>
","462"
"What does `<Bar>` mean?","2676","","<p><a href=""https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file/2285#2285"">In answering a question just now</a>, I mentioned using a normal mode key mapping that can be found at vim.wikia.com. In the middle of explaining the key mapping, I realized that I had no idea what <code>&lt;Bar&gt;</code> meant. What does it mean?</p>

<p>I tried replacing it with a pipe <code>|</code>, with and without spaces before, around, and after it, but each one broke my <code>.vimrc</code> file with the following error message:</p>

<pre><code>Error detected while processing /home/bottomsc/.vimrc:
line  173:
E488: Trailing characters: :nohl&lt;CR&gt;
</code></pre>
","<p>It's the code for <a href=""http://vimhelp.appspot.com/intro.txt.html#%3CBar%3E"">the pipe character</a>: <code>|</code>. The pipe is used the way the semicolon is used in C-style languages, as a statement separator. You cannot use it directly in a mapping, since it would be seen as marking the end of the mapping. Hence, the code has to be used instead.</p>

<p>There are exceptions to this, such as autocmd definitions, where the bar delimits the actions of the autocmd, but not the definition itself.</p>

<p>From <a href=""http://vimhelp.appspot.com/cmdline.txt.html#%3Abar""><code>:help :bar</code></a>:</p>

<blockquote>
  <p>'|' can be used to separate commands, so you can give multiple commands in one line. If you want to use '|' in an argument, precede it with '\'. </p>
</blockquote>

<p>and from <a href=""http://vimhelp.appspot.com/map.txt.html#map_bar""><code>:help map_bar</code></a>:</p>

<pre><code>                                                            *map_bar*
Since the '|' character is used to separate a map command from the next
command, you will have to do something special to include  a '|' in {rhs}.
There are three methods:
   use       works when                    example      ~
   &lt;Bar&gt;     '&lt;' is not in 'cpoptions'     :map _l :!ls &lt;Bar&gt; more^M
   \|        'b' is not in 'cpoptions'     :map _l :!ls \| more^M
   ^V|       always, in Vim and Vi         :map _l :!ls ^V| more^M
</code></pre>
","2288"
"How to show search results for all open buffers","2657","","<p>One thing I often do (but rely on the command line to do) is searching/grepping in multiple files.</p>

<p><strong>Is there a way to display search results for all the open buffers?</strong></p>

<p>Ideally, I'd like to have a new split buffer containing result location and snippet much like <code>grep</code> does. For example (<code>/statistics</code>):</p>

<pre><code>models/statistics.php: /*! \file   statistics.php
controllers/stats.php: $this-&gt;load-&gt;model('statistics');
controllers/stats.php: // Query statistics...
controllers/stats.php: $num_exams = $this-&gt;statistics-&gt;countExams();
</code></pre>

<p>As a bonus, I'd like to be able to search for the term under the cursor, pretty much like <code>gd</code> does.</p>
","<p>You can use <code>:vimgrep /pattern/ {files}</code> to populate the quickfix list with matching patterns. The problem is that <code>:vimgrep</code> files option doesn't directly allow for buffers. You can use:</p>

<pre><code>%   Is replaced with the current file name.       *:_%* *c_%*
#   Is replaced with the alternate file name.     *:_#* *c_#*
#n  (where n is a number) is replaced with        *:_#0* *:_#n*
    the file name of buffer n.  ""#0"" is the same as ""#"".     *c_#n*
##  Is replaced with all names in the argument list   *:_##* *c_##*
    concatenated, separated by spaces.  Each space in a name
    is preceded with a backslash.
#&lt;n (where n is a number &gt; 0) is replaced with old    *:_#&lt;* *c_#&lt;*
    file name n.  See |:oldfiles| or |v:oldfiles| to get the
    number.                         *E809*
    {only when compiled with the |+eval| and |+viminfo| features}
</code></pre>

<p>Another option is to write a script that generates a file list from <code>:buffers</code>. Per <a href=""https://stackoverflow.com/questions/271364/variable-that-holds-list-of-all-open-buffers-in-vim"">this SO post</a> with a slight tweek we get:</p>

<pre><code>function! BuffersList()
  let all = range(0, bufnr('$'))
  let res = []
  for b in all
    if buflisted(b)
      call add(res, bufname(b))
    endif
  endfor
  return res
endfunction

function! GrepBuffers (expression)
  exec 'vimgrep/'.a:expression.'/ '.join(BuffersList())
endfunction

command! -nargs=+ GrepBufs call GrepBuffers(&lt;q-args&gt;)
</code></pre>

<p>You can now call <code>:GrepBufs &lt;expression&gt;</code> and get the standard <code>:vimgrep</code> output but using the buffers instead.</p>

<p><strong>Update</strong> If you would like to call <code>GrepBuffers</code> using the value under the cursor add this new mapping.</p>

<pre><code>nnoremap &lt;leader&gt;z :call GrepBuffers(""&lt;C-R&gt;&lt;C-W&gt;"")&lt;CR&gt;
</code></pre>

<p>When you are in normal mode type <code>&lt;leader&gt;z</code> and you'll <code>:vimgrep</code> the cursor word over your open buffers.</p>
","2905"
"What's the difference between let and set?","2647","","<p>I don't know much of the theory behind Vim. It looks as if we <code>set</code> some variables, and <code>let</code> other variables. What's the difference, and when is one required over the other?</p>

<p>Also, the solarized vim colorscheme says to <code>let g:blabla...</code> what is the significance of <code>g:</code> in this instance?</p>
","<p><code>let</code> assigns a value to a variable, and <code>set</code> assigns a value to one of Vim's internal options.</p>

<p>For example, you would use</p>

<pre><code>:let mystring='Hello!'
</code></pre>

<p>to declare a new variable, but you would use</p>

<pre><code>:set tabstop=4
</code></pre>

<p>or</p>

<pre><code>:set expandtab
</code></pre>

<p>to set one of Vim's options.</p>

<p>See also: <code>:help let</code>, <code>:help set</code>.</p>

<p><code>g:</code> simply signifies a global variable. There are several of these ""variable namespaces""—from <code>:help internal-variables</code>:</p>

<pre><code>        (nothing) In a function: local to a function; otherwise: global
|buffer-variable|    b:   Local to the current buffer.
|window-variable|    w:   Local to the current window.
|tabpage-variable|   t:   Local to the current tab page.
|global-variable|    g:   Global.
|local-variable|     l:   Local to a function.
|script-variable|    s:   Local to a |:source|'ed Vim script.
|function-argument|  a:   Function argument (only inside a function).
|vim-variable|       v:   Global, predefined by Vim.
</code></pre>
","2077"
"Cursor shape under vim + tmux","2642","","<p>How can I have different cursor shapes when running vim inside tmux under cygwin?</p>

<p>WITHOUT tmux these lines would be enough to achieve what I want:</p>

<pre><code>let &amp;t_SI = ""\e[5 q""
let &amp;t_EI = ""\e[2 q""
</code></pre>

<p>But somehow my tmux breaks it - cursor has block shape no matter what vim mode I'm in.</p>

<p><strong>My specs:</strong></p>

<ul>
<li>Windows 7 x64  </li>
<li>Cygwin x86  </li>
<li>TMUX 1.9a  </li>
<li>Vim 7.4.726 (compiled with +cursorshape)  </li>
<li>terminal emulator: mintty 1.1.3  </li>
<li>used in Cygwin Terminal or Cmder (either way, cursor shapes work only without TMUX)  </li>
<li><code>echo $TERM</code> gives me <code>screen-256color</code> (in TMUX and outside of it, because i have <code>export TERM=screen-256color</code> in my <code>.bashrc</code></li>
<li><code>.tmux.conf</code> contains:<br>
<code>set -g default-terminal ""screen-256color""
setw -g xterm-keys on</code></li>
</ul>

<p><strong>What i tried already</strong> without success:</p>

<ul>
<li><code>export TERM=xterm</code></li>
<li><code>export TERM=vt100</code></li>
<li>""rightclick on bar > Options > Looks > Cursor"" (it changes the cursor permanently, vim modes still don't change it)</li>
</ul>
","<p>It seems the problem is that tmux doesn't send your cursor-changing escape codes to the terminal emulator. You need to wrap your desired escape codes in a special sequence that tells tmux that it should pass it on to the outer terminal.</p>

<p>The sequence you need to wrap your escape sequence in is <code>\&lt;Esc&gt;Ptmux;\&lt;Esc&gt; ... \&lt;Esc&gt;\\</code>(<a href=""http://comments.gmane.org/gmane.comp.terminal-emulators.tmux.user/1322"">Source</a>). The <code>...</code> is your escape sequence.</p>

<p>So, try doing something like this in your <code>.vimrc</code>:</p>

<pre><code>if exists('$TMUX')
    let &amp;t_SI = ""\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\e[5 q\&lt;Esc&gt;\\""
    let &amp;t_EI = ""\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\e[2 q\&lt;Esc&gt;\\""
else
    let &amp;t_SI = ""\e[5 q""
    let &amp;t_EI = ""\e[2 q""
endif
</code></pre>

<p>I don't use your terminal emulator or cygwin, so I couldn't test this code. But the method worked for me (I just wrapped other escape codes that suit my terminal).</p>
","3456"
"vim doesn't find jedi, even though it's right there!","2613","","<p>I have installed jedi-vim using Vundle, adding this line to my <code>.vimrc</code> and running <code>:PluginInstall</code>.</p>

<pre><code>Plugin 'davidhalter/jedi-vim'
</code></pre>

<p>The <a href=""https://github.com/davidhalter/jedi-vim#installation"" rel=""nofollow"">jedi-vim docs</a> say I can install jedi using <code>git submodule update --init</code> from within the <code>jedi-vim</code> git repo. I've tried that and exits right away (maybe Vundle took care of the submodule for me).</p>

<p>In <code>.vim/bundle/jedi-vim</code> I have a <code>jedi</code> directory and a <code>jedi_vim.py</code> file. I can load <code>python3</code> and <code>import jedi</code> from that directory with no problem.</p>

<p>I've also tried installing jedi with <code>pip3 install jedi</code> and <code>apt-get install python3-jedi</code>.</p>

<p><code>vim --version</code> shows <code>-python</code> and <code>+python3</code>.</p>

<p>No matter what I do, when I open a python file, vim says:</p>

<pre><code>Please install Jedi if you want to use jedi-vim.
</code></pre>

<p>Hey <code>vim</code>, I've installed it three different ways! What's going on?</p>
","<p>It turns out I had a compiled version of python in <code>/usr/local</code> that I had completely forgotten about, and vim was compiled against that one. I verified this by using <code>:py print(sys.path)</code>, which showed directories under <code>/usr/local</code>. I removed the compiled version of python and recompiled vim against the standard version, and all is well.</p>
","3474"
"How do I center the current line in the screen?","2582","","<p>Is there a way to center the line I'm editing in the screen? This is sometimes needed to see a bit more context above and below the current line.</p>
","<p>The <code>z.</code> and <code>zz</code> commands will recenter the line the cursor is on.  <code>z.</code> also moves the cursor to the first non-whitespace character in the line, while <code>zz</code> keeps the cursor where it is.</p>

<p>There are similar commands for the top (<code>z&lt;CR&gt;</code>/<code>zt</code>) and bottom (<code>z-</code>/<code>zb</code>) of the window.</p>

<p>The versions of these commands that end in a letter keep the cursor column, while the ones ending in punctuation move the cursor.</p>
","48"
"Setting a vim option from the command line?","2579","","<p>How does one set a vim option when launching from bash or another shell?</p>
","<pre><code>$ vim -c 'set ai'
</code></pre>

<p>See <code>:h -c</code>, <code>:h startup</code> and <code>$ vim --help</code>.</p>
","2974"
"Compiling vim from source just enabling clipboard","2567","","<p>I have a Debian 7.0 with gnome, and I am fully satisfied with the standard vim version installed on it, except for the lack of +clipboard and/or +xterm_clipboard.</p>

<p>I got the sources using mercurial, but I cannot find a way to enable just those.</p>

<p>I have read <a href=""https://vi.stackexchange.com/a/96"">this answer</a> or <a href=""https://stackoverflow.com/questions/11416069/compile-vim-with-clipboard-and-xterm"">that question</a>. But I don't want to install a full GUI version. It seems overkill to me that I should add all those options just to enable one feature.</p>

<p>Is there a nice way to do it, or should I dive into the code (probably starting from feature.h), to hopefully get what I want..?</p>
","<p>vim doesn't need gnome or gtk to get <code>+clipboard</code>, but it does need x11. From my tests, the minimum amount of dependencies needed are the xorg header files and x11 dbus support.  In Debian</p>

<pre><code>apt-get install x11-dev dbus-x11
</code></pre>

<p>will do the job. Then you can</p>

<pre><code>./configure --with-features=huge
</code></pre>

<p>and <em>vioala</em>, <code>+clipboard</code></p>
","3416"
"searching duplicate words","2565","","<p>This <a href=""http://vim.wikia.com/wiki/Search_patterns"" rel=""nofollow"">page</a> says that I can find duplicate words using a regular expression.</p>

<p>The suggested command is</p>

<pre><code>\(\&lt;\w\+\&gt;\)\_s*\&lt;\1\&gt;
</code></pre>

<p>What does ""\w"" mean here? Suppose the target pattern is ""123\t123"" where \t is the tab. Would the command be</p>

<pre><code>/\(\&lt;\1\+\&gt;\)\t\&lt;\1\&gt;
</code></pre>

<p>or</p>

<pre><code>/\(\&lt;1\+\&gt;\)\t\&lt;\1\&gt;
</code></pre>
","<p><a href=""https://vimhelp.appspot.com/pattern.txt.html#%2f/w"" rel=""nofollow""><code>:help /\w</code></a> shows that <code>\w</code> is a regex metacharacter matching a word character -- any character that is either an underscore (<code>_</code>) or in the ranges <code>0-9</code>, <code>a-z</code>, or <code>A-Z</code>.</p>

<p>The example regex is parsed as</p>

<pre><code>\(        \)                Capture the match so it can be reused later
  \&lt;    \&gt;      \&lt;  \&gt;      Match (with zero-width) beginning/end of word
    \w\+                    Match one or more word characters
            \_s*            Match zero or more whitespace characters,
                              including newlines
                  \1        Match the same text as the first capture
</code></pre>

<p>This style of search is useful when you don't exactly know the contents of whatever is going to match inside the <code>\( \)</code>.</p>

<p>Assuming that there's more possible variety in your suggested text to match (any 3-digit number, rather than just <code>123</code>), you could use the style of regex as follows</p>

<pre><code>\(\d\d\d\)\t\1
</code></pre>
","2838"
"How to debug a mapping?","2556","","<p>I see a lot of questions on here where a user has a mapping which doesn't work
and most of the time the reasons are pretty similar.</p>

<p>I suggest to make this question a reference for this kind of questions, to give a complete procedure to debug a mapping. If a user as a problem with
a mapping they could be redirected here to eliminate the most common issues.</p>

<p>Of course there will still be particular cases which will require a dedicated
question and will not be addressed here.</p>
","<p>Your mapping doesn't do what it should do or behaves differently than expected, several steps are to follow to troubleshoot that:</p>

<h2>Check that the key is effectively mapped to what it should do</h2>

<p>Vim provides a command <code>:map</code>. By default (when no argument is given) the
command will show all the mappings currently created. Here is an example of
the result of the command:</p>

<p><a href=""https://i.stack.imgur.com/ODZN7.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ODZN7.png"" alt=""result of &lt;code&gt;:map&lt;/code&gt;""></a></p>

<p>As always the doc is your friend: <a href=""http://vimhelp.appspot.com/map.txt.html#map%2Dlisting"" rel=""noreferrer""><code>:h map-listing</code></a></p>

<p>You can see in the first column the mode of the mapping (<code>n</code> for normal mode, 
<code>v</code> for visual mode, etc), the second column shows the keys mapped and the
last column what the keys are mapped to.
Note that before the mapped actions some additional characters may appear, it
is important to understand them:</p>

<ul>
<li><code>*</code>  indicates that it is not remappable (i.e. it is not a recursive mapping, see <code>know when to use nore</code> later in this answer)</li>
<li><code>&amp;</code>  indicates that only script-local mappings are remappable</li>
<li><code>@</code>  indicates a buffer-local mapping</li>
</ul>

<p>When asking for help about a mapping it is a good thing to add this
information since it can help other people to understand the behavior of your mapping.</p>

<p>It is possible to restrict the prompt to a particular mode with the sister-commands
of <code>:map</code>, like <code>:vmap</code>, <code>:nmap</code>, <code>:omap</code>, etc.</p>

<p>Now to restrict your search to the problematic mapping you can pass the key
sequence you're debugging as the parameter of the commands, like this:</p>

<pre><code>:map j
:map &lt;Leader&gt;m
:map &lt;F5&gt;
</code></pre>

<p>Note that the <code>&lt;Leader&gt;</code> key will be replaced by its actual value in the list.</p>

<p>If the result of the command shows that your keys are correctly mapped, it probably
means that the problem doesn't come from Vim but from your terminal or your desktop
environment. See the part <strong>Check if your mapping is actually intercepted by Vim</strong></p>

<p>If the result of the command shows that your keys are not correctly mapped see the
following part.</p>

<h2>Check what overrode your mapping</h2>

<p>Another convenient use of the <code>:map</code> command is to combine it with <code>verbose</code>:
This will prompt the last file which modified your mapping.</p>

<p>For example, see these two screen-shots: the first one is a mapping modified by
my <code>.vimrc</code> and the second a mapping created by a plugin:</p>

<p><a href=""https://i.stack.imgur.com/agrRe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/agrRe.png"" alt=""Mapping set from vimrc""></a></p>

<p><a href=""https://i.stack.imgur.com/WHnVa.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/WHnVa.png"" alt=""Mapping set from a plugin""></a></p>

<p>Now if you see that another script modified your mapping you'll have to see if
you can remove it or modify its behavior. <em>(Note that some plugins provide
variable to enable/disable their mappings, unfortunately not all of the plugins
do that)</em></p>

<p>If the last file which changed your mapping is your <code>.vimrc</code>, make sure there is no other line that also defines a mapping for the same key. The <code>.vimrc</code> file will happily override any mappings with the last one of its kind in the file.</p>

<h1>Check if your mapping is actually intercepted by Vim</h1>

<p>Several situations may indicate that Vim doesn't intercept your key:</p>

<ul>
<li>The command <code>:map</code> shows that your key is correctly mapped but pressing it does nothing.</li>
<li>Your mapping works on gVim (GUI) but does nothing in terminal Vim</li>
<li>Your mapping works on a defined terminal emulator but not on another</li>
<li>Your mapping works on a defined OS but not another one.</li>
</ul>

<p>It is probably caused by one of the two following things:</p>

<ul>
<li><p><strong>Something intercepts the key before Vim</strong>: It can be different applications: your OS, your desktop environment, your terminal emulator, Tmux (if you use it)...</p>

<p>To troubleshoot that, you should:</p>

<ul>
<li>Try to temporarily remove your <code>.tmux.conf</code> if you use tmux</li>
<li>Refer to the doc of your terminal or of your desktop environment.</li>
</ul>

<p>You could also refer to sister-sites like <a href=""https://superuser.com/"">super-user</a>,
<a href=""https://unix.stackexchange.com/"">Unix and Linux</a>, <a href=""https://askubuntu.com/"">askUbuntu</a>, etc...</p>

<p>If this is the problem, you then have two solutions: either you spend
(a lot of) time to change
the behavior of the application which causes the problem or you find
another key combination to map which isn't intercepted by another
application.</p></li>
<li><p><strong>Your terminal emulator can't handle the key combination you're 
trying to map</strong>: 
Terminal emulators are implemented differently and some of them
are not able to handle some particular key combination. <em>(The reason why
they can't is out of the scope of this question, see their doc or the
sister-sites mentioned before for more details).</em></p>

<p>In this case, you don't have a lot of solutions: either you change your 
key for another one which is handled properly by your terminal or you 
change your terminal emulator.</p></li>
</ul>

<h1>Check for the common pitfalls</h1>

<p>Some problems in mappings are pretty recurrent and mostly related to the vimscript syntax. If your mapping has an unexpected behavior remember to check the following points:</p>

<ul>
<li><p><a href=""https://vi.stackexchange.com/q/6921/1841""><strong>Do not put a comment on the same line as your mapping</strong></a>, instead put the comment on the line above. Example:</p>

<p><strong>Don't do that:</strong></p>

<pre><code>inoremap ii &lt;esc&gt;    "" ii to go back into normal mode
</code></pre>

<p>Vim will consider the whitespaces, the <code>""</code> and the comment as a part of the mapping which will result in an unexpected behavior.</p>

<p><strong>Instead do that:</strong></p>

<pre><code>"" ii to go back into normal mode
inoremap ii &lt;esc&gt;
</code></pre>

<p>This is easier to read and won't mess your mapping.</p></li>
<li><p><a href=""https://vi.stackexchange.com/q/7244/1841""><strong>Do not pipe your commands with <code>|</code></strong></a>. Example:</p>

<p><strong>Don't do that:</strong></p>

<pre><code>nnoremap &lt;Leader&gt;x :w | !% python -m json.tools
</code></pre>

<p>Vim will consider the pipe <code>|</code> as a command termination: When you source your <code>.vimrc</code> the mapping <code>nnoremap &lt;Leader&gt;x :w</code> will be created then the external command <code>!% python -m json.tools</code> will be executed.</p>

<p><strong>Instead do that:</strong></p>

<pre><code>nnoremap &lt;Leader&gt;x :w &lt;bar&gt; !% python -m json.tools
</code></pre>

<p>See <a href=""https://vi.stackexchange.com/q/2286/1841"">an explanation about <code>&lt;bar&gt;</code></a>.</p></li>
<li><p><strong>Know when to use <code>nore</code>: <em>always</em></strong>. </p>

<p><a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/05.html"" rel=""noreferrer"">LearnVimscriptTheHardWay</a> explain it pretty clearly: never use <code>map</code>, <code>nmap</code>, <code>vmap</code>, etc... Always prefer the nore version: <code>noremap</code>, <code>nnoremap</code>, <code>vnoremap</code>, etc...
Why? <code>nore</code> stands for <code>non-recursive</code> mapping it means that the right-hand side of the mapping will be considered as the built-in feature even if you remmaped it. Example:</p>

<p>Let's say you want to map <code>&gt;</code> to delete a line and <code>-</code> to increment the indent of a line. If you don't use non-recursive mappings you'll do that:</p>

<p>(<strong>Do not do that it's for the example</strong>)</p>

<pre><code>nmap &gt; dd
nmap - &gt;
</code></pre>

<p>When you'll hit <kbd>></kbd> your line will be deleted, that's good. But when you'll hit <kbd>-</kbd> your line will also be deleted instead of being indented. Why? Because Vim understood ""I received a hit on <code>-</code> which I should translate to <code>&gt;</code> which I should, in turn, translate to <code>dd</code>"".</p>

<p><strong>Instead do that</strong></p>

<pre><code>nnoremap &gt; dd
nnoremap - &gt;
</code></pre>

<p>This way Vim will translate <code>-</code> as <code>&gt;</code> and will not try to do any other translation because of the <code>nore</code>.</p>

<p><strong>Edit note</strong> ""Always"" may be an exaggerated answer in some cases you'll need to use the recursive mapping form but it is not really common. To clarify, I'll quote @romainl from <a href=""https://vi.stackexchange.com/a/10130/1841"">this answer</a>:</p>

<blockquote>
  <p>Use a recursive mapping only if you intend to use any other mapping in your mapping. Use non-recursive mappings if you don't.</p>
</blockquote></li>
<li><p><strong><a href=""https://vi.stackexchange.com/q/3119/1841"">Remember that some key combinations are equivalent</a></strong>: 
Because of the hexadecimal codes that are produced some key combinations
will be interpreted by Vim as another key. For example </p>

<ul>
<li><a href=""https://vi.stackexchange.com/q/3119/1841""><code>&lt;C-h&gt;</code> is equivalent to <code>&lt;backspace&gt;</code></a></li>
<li><a href=""https://vi.stackexchange.com/q/5233/1841""><code>&lt;C-j&gt;</code> as <code>&lt;enter&gt;</code></a></li>
<li>On French keyboards <code>&lt;M-a&gt;</code> is the same as <code>á</code> and the same goes with all the
<code>&lt;m-</code> mappings. As @LucHermitte pointed out in the comment that is a
problem with plugins using this type of mappings like vim-latex.</li>
<li><a href=""https://vi.stackexchange.com/q/4290/1841""><code>&lt;C-S-a&gt;</code> is equivalent to
<code>&lt;C-a&gt;</code></a>. Mapping Ctrl+upper case
letter separately from Ctrl+lower case letter is not possible cause of the
way the terminals send ASCII codes.</li>
</ul>

<p>When your mapping seems to affect another key try to use another lhs 
combination, if that solves the problem inspect which hexadecimal codes
are sent to Vim.</p></li>
<li><p><strong><a href=""https://vi.stackexchange.com/q/8515/1841"">Check that your leader is correctly defined</a></strong>: If your mappings involving <code>&lt;leader&gt;</code> doesn't work and you changed your leader with the command <code>mapleader</code>, check that the definition of your leader is done <em>before</em> the definition of the mappings. Otherwise, Vim will try to create mappings with a key which is not the one you think. Also if you want to use the space bar as your leader <em>(which is pretty current)</em> make sure that you used the correct notation: <code>let mapleader = ""\&lt;Space&gt;""</code></p></li>
</ul>

<h1>Your mapping still doesn't work?</h1>

<p>If you went through all the steps of this answer and your mapping still doesn't work like you want, you'll probably want to ask for help on this site.</p>

<p>To help people to help you remember to provide some crucial information like:</p>

<ul>
<li>The command you used to define your mapping.</li>
<li>What you are expecting your mapping to do.</li>
<li><p>A precise description of the problem:</p>

<p>""It doesn't work"" won't be really helpful to people who will try to help you. You should precise if the mapping doesn't do anything or how it behaves differently than what you were expecting.</p></li>
<li>Also indicate that you actually followed the steps described here and the results you get with <code>:map</code> and <code>:verbose map</code></li>
</ul>

<p>All of this will save you and the users of the site a lot of time.</p>

<hr>

<h1>A useful command: <code>:unmap</code></h1>

<p>Sometimes it can be useful to reset a mapping without quitting Vim to help debugging its behavior.</p>

<p>To do so you can use the command <code>:unmap &lt;key&gt;</code> which will remove the mapping
assigned to <code>&lt;key&gt;</code> for Normal, Visual and Operating-pending modes. <code>:iunmap</code> will remove mappings for Insert mode. For other modes see <code>:help :unmap</code>.</p>

<hr>

<h1>References</h1>

<p>An excellent introduction to mapping: <a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/03.html"" rel=""noreferrer"">learnvimscriptthehardway</a> (And a lot of other aspects of Vim)</p>

<p>The doc: <a href=""http://vimhelp.appspot.com/map.txt.html#mapping"" rel=""noreferrer""><code>:h mapping</code></a>,
<a href=""http://vimhelp.appspot.com/map.txt.html#%3Amap"" rel=""noreferrer""><code>:h :map</code></a></p>

<p>Section 20 of <a href=""http://vimdoc.sourceforge.net/htmldoc/vimfaq.html"" rel=""noreferrer"">Vim's FAQ</a> is about mapping and contains interesting questions: </p>

<p>And a bonus: <a href=""https://vi.stackexchange.com/q/6916/1841"">A question about best practices to find which keys to use in your mapping</a></p>
","7723"
"How to generate random numbers?","2554","","<p>I would like to generate one or few random numbers separated by new line.</p>

<p>How this can be done?</p>
","<p>There is no built-in facility for this, so you'll need to use something external.</p>

<h1>UNIX Shell (<code>/bin/sh</code>)</h1>

<p>Calling:</p>

<pre><code>strings -n 1 &lt; /dev/urandom | tr -d '[:space:]' | head -c15
</code></pre>

<p>with <code>system()</code> is a good way. You can get only numbers by replacing <code>tr</code> with <code>grep</code>:</p>

<pre><code>strings -n 1 &lt; /dev/urandom | grep -o '[[:digit:]]' | head -c15
</code></pre>

<p>You can use this in Vim like so:</p>

<pre><code>:echo system(""strings -n 1 &lt; /dev/urandom | grep -o '[[:digit:]]'  | head -c15"")
</code></pre>

<p>The number 15 is the amount of numbers you want (adjust accordingly). This should work on Linux, BSD, OSX, and other UNIX systems. It won't work on MS Windows.</p>

<p>Also see my weblog post ""<a href=""http://arp242.net/weblog/Generate_passwords_from_the_commandline.html"">Generate passwords from the commandline</a>"" (there are a lot of bad solutions for this out there).</p>

<h1>Ruby</h1>

<p>Ruby is probably the next best choice, since Ruby scripting seems to be a bit more common than Python scripting. Getting a random number is easy:</p>

<pre><code>:ruby puts Random.rand(10)
</code></pre>

<p>Or to get 15 numbers:</p>

<pre><code>:ruby 15.times { puts Random.rand(10) }
</code></pre>

<h1>Python</h1>

<p>You can use the <a href=""https://docs.python.org/2/library/random.html"">random</a> module; to get a single number:</p>

<pre><code>:py import random; print(random.randint(0, 9))
</code></pre>

<p>Or a 15 numbers:</p>

<pre><code>:py import random
:py for i in range(0, 15): print(random.randint(0, 9))
</code></pre>

<p>This should work for both Python 2 &amp; 3. </p>

<h1>Windows PowerShell</h1>

<p>You can use <a href=""http://blogs.msdn.com/b/powershell/archive/2008/04/27/get-random.aspx""><code>Get-Random</code></a>
to get a random number:</p>

<pre><code>:echo system('Get-Random')
</code></pre>

<h1>Windows <code>cmd.exe</code></h1>

<p>Windows 7 and later should ship with PowerShell, but if you want maximum
compatibility you can use <code>cmd.exe</code>. It has a special variable <code>%RANDOM%</code>:</p>

<pre><code>:echo system('@echo %RANDOM%')
</code></pre>

<p>Note: <a href=""http://blogs.msdn.com/b/oldnewthing/archive/2010/06/17/10026183.aspx"">This is not very random!</a>
, it uses the time (!)</p>

<hr>

<p>Note that you don't need to use the Ruby or Python bindings to use the Ruby or
Python solutions; you could also create a separate script and call them with
<code>system(""python -c '...'"")</code> (this does require that ruby/python is installed,
obviously.</p>
","812"
"What is the select mode and when is it relevant to use it?","2541","","<p>I accidentally pressed <code>gh</code> in normal mode and started a selection, so I looked up the doc and found <a href=""http://vimhelp.appspot.com/visual.txt.html#Select%2Dmode""><code>:h Select-mode</code></a>.</p>

<p>From what I understand the select mode is close to the visual mode excepted that:</p>

<ul>
<li>Typing a printable character, <code>&lt;CR&gt;</code> or <code>&lt;BS&gt;</code> will delete the selection, start insert mode and replace the selection with the input.</li>
<li><code>hjkl</code> and other normal or visual mode movement won't extend the selection unless they're prefixed with <code>&lt;Shift&gt;</code></li>
<li><code>&lt;CTRL-O&gt;</code> and <code>&lt;CTRL-G&gt;</code> will switch to visual mode.</li>
<li>The doc also says the following, which if I understand correctly means that it is possible to do linewise selection which are then treated characterwise:

<blockquote>
  <p>When using an operator in Select mode, and the selection is linewise, the
  selected lines are operated upon, but like in characterwise selection.  For
  example, when a whole line is deleted, it can later be pasted halfway a line.</p>
</blockquote></li>
</ul>

<p>I am a little confused because I don't understand why this mode was created: all I can see is that it is less convenient than visual mode and doesn't provide more features.</p>

<p>Also, the searches that I have made all give results about doing selection in visual mode but do not treat select mode.</p>

<p>So my questions are:</p>

<ul>
<li>Why was the select mode created?</li>
<li>What are its advantage compared to visual mode?</li>
<li>What is a use case where it is more interesting to use select mode?</li>
</ul>

<p><strong>MetaNote</strong> I have no idea which tag is relevant to this question, feel free to retag if needed.</p>
","<p>The whole point of select mode is to provide a selection behavior similar to the one used in conventional editors.</p>

<p>On the same note, there's <a href=""https://github.com/vim/vim/blob/master/runtime/mswin.vim"" rel=""noreferrer"">mswin.vim</a> which changes a bunch of options and mappings to make Vim feel like a conventional editor.</p>

<p>I can only assume those were added to please a subset of Vim users, probably at the time Vim was ported to Windows (I can feel some disdain for Windows in the doc).</p>

<p>Anyway, select mode is essential to snippet expansion plugins and can be abused for fun and profit:</p>

<pre><code>nnoremap § *``gn&lt;C-g&gt;
inoremap § &lt;C-o&gt;gn&lt;C-g&gt;
snoremap &lt;expr&gt; . @.
</code></pre>
","4892"
"How to change the space between lines in vim?","2489","","<p>I'm wondering whether changing the space between lines is possible.</p>

<p><a href=""https://i.stack.imgur.com/QZcZG.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/QZcZG.png"" alt=""line spacing""></a></p>

<p>How can I change ""Line spacing""?</p>
","<p>Didn't expect this to be possible, but there is actually an option for this. <a href=""http://vimhelp.appspot.com/options.txt.html#%27linespace%27""><code>'linespace'</code></a>:</p>

<blockquote>
  <p><code>'linespace'</code> <code>'lsp'</code></p>
  
  <p>Number of pixel lines inserted between characters.  Useful if the font
  uses the full character cell height, making lines touch each other.
  When non-zero there is room for underlining.
  With some fonts there can be too much room between lines (to have
  space for ascents and descents).  Then it makes sense to set
  'linespace' to a negative value.  This may cause display problems
  though!</p>
</blockquote>

<p>It differs from your picture in that the option defines extra space added rather than distance between baselines, but should give you enough control anyway.</p>

<p>You need to add something like this to your <code>.vimrc</code>:</p>

<pre><code>set linespace=3
</code></pre>

<p>For obvious reasons it will work only in gvim and not in terminal vim.</p>
","10044"
"How to completely turn off colorscheme?","2486","","<h1>Original post</h1>

<p>I've got a colorscheme configured in my .vimrc but sometimes I'd like to turn it off completely which means that I would like Vim to use the default background and foreground colors of my terminal.</p>

<p>My problem is that I don't know how to easily do it. When I use <code>:syntax off</code> Vim turns off most of its coloring but it doesn't remove the cursorline color. It doesn't change the background color to the terminal's default one.</p>

<p>Is there a command like <code>:nocolorscheme</code> or <code>vim -u NONE</code> but just for the colors?</p>

<p>I am aware of the fact that I can create a custom .vimrc file and load it with the <code>-u</code> option. I am looking for an easier solution though.</p>

<h1>Major update</h1>

<p>Because you've suggested me a number of different commands and approaches I decided to show you some photos of the screen after calling those commands.</p>

<h3>Terminal envirnoment</h3>

<p>I use <a href=""http://st.suckless.org/"" rel=""nofollow noreferrer"">st(1) terminal from suckless.org</a> with a custom config.h so that I've got <code>defaultfg = 10</code> (bright green) and <code>defaultbg = 0</code> (black). I'm running the GNU/Linux version that PocketC.H.I.P. ships with (<code>uname -a</code> results in <em>Linux chip 4.3.0-ntc #1 SMP Wed May 11 21:57:30 UTC 2016 arm7l GNU/Linux</em>).</p>

<h2>Screenshots</h2>

<ol>
<li><h3>No colorscheme (this is what I want)</h3>

<p><a href=""https://i.stack.imgur.com/JMyc2m.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JMyc2m.jpg"" alt=""enter image description here""></a></p>

<p>This is what I want to achieve without having to start Vim with <code>vim -u NONE</code>.</p></li>
<li><h3>Normal colors</h3>

<p><a href=""https://i.stack.imgur.com/S7MmQm.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/S7MmQm.jpg"" alt=""enter image description here""></a></p>

<p>I get these colors when:</p>

<ul>
<li>I normally start my Vim (this is my standard colorscheme).</li>
<li><p>I call <code>:set t_Co=0</code>.<br>
It is worth noting that it doesn't change anything when I use my custom monokai colorscheme. It does change the appearance in the default colorscheme as you can see in 5.</p>

<p>The funny thing is that the output of <code>:verbose set t_Co?</code> called subsequently is <code>t_Co=256</code> which indicates that <em>literaly</em> nothing has changed. </p></li>
<li><p>I start Vim with <code>TERM=xterm vim</code>.</p></li>
</ul></li>
<li><h3>Default colors</h3>

<p><a href=""https://i.stack.imgur.com/zZHY3m.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zZHY3m.jpg"" alt=""enter image description here""></a></p>

<p>I get these colors when:</p>

<ul>
<li>I call <code>:colorscheme default</code>.</li>
</ul></li>
<li><h3>Vim removed most of colors but doesn't fall back into terminal's defaults</h3>

<p><a href=""https://i.stack.imgur.com/f2qoUm.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/f2qoUm.jpg"" alt=""enter image description here""></a></p>

<p>I get it after:</p>

<ul>
<li>Calling <code>:syntax off</code>.</li>
</ul></li>
<li><h3>Almost no colorscheme</h3>

<p><a href=""https://i.stack.imgur.com/W2x3Em.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/W2x3Em.jpg"" alt=""enter image description here""></a></p>

<p>I get this after running these 4 commands one after another:</p>

<pre><code>"" The effect is more visible on the default colorscheme 
"" than on my molokai colorscheme.
:set t_Co=0
:colorscheme default
:hi clear
</code></pre>

<p>When I run <code>:hi LineNr</code> afterwards I get:</p>

<blockquote>
<pre><code> LineNr          XXX term=underline ctermfg=6 guifg=Brown
</code></pre>
</blockquote></li>
<li><h3>Strings and types underlined in a C source file</h3>

<p><a href=""https://i.stack.imgur.com/zX2ofm.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zX2ofm.jpg"" alt=""enter image description here""></a></p>

<p>After applying <code>:set term=vt100</code>.</p></li>
<li><h3>Broken redrawing in Vim</h3>

<p><a href=""https://www.youtube.com/watch?v=Yz6g4kXFQik"" rel=""nofollow noreferrer""><img src=""https://img.youtube.com/vi/Yz6g4kXFQik/mqdefault.jpg"" alt=""Video thumbnail""><br>
Vim broke after calling :set term=builtin_dumb (video) </a> </p>

<p>After applying <code>:set term=builtin_dumb</code> my Vim forgets how to redraw lines as I move around using <kbd>j</kbd> and <kbd>k</kbd>.</p></li>
<li><h3>Examine the defaults of my temrminal</h3>

<p><a href=""https://i.stack.imgur.com/gVHAQ.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gVHAQ.jpg"" alt=""enter image description here""></a></p>

<p>This is what I get after running <code>echo -e "" \033[0;4mfoo\033[0;0mbar""</code> in my terminal.</p></li>
</ol>
","<h2>Disabling Colours Entirely</h2>

<p>If you want Vim not to use colours at <em>all</em>, you just need to run the command:</p>

<pre><code>:set t_Co=0
</code></pre>

<p>This tells Vim that it is running in a terminal that does not support colours, so Vim will only output black and white text (which will then be displayed by your terminal in its default colours).</p>

<p>However, note that after changing the <code>t_Co</code> setting the current colorscheme is reloaded (so that it can make appropriate changes to the colours it defines). The ""monokai"" colorscheme you are using starts with the line <code>:set t_Co=256</code>, immediately resetting the option.</p>

<p>I'd argue that this is incorrect behaviour, and should be filed as a bug with the maintainer of that colorscheme. Of course, they might well disagree and argue that as their colorscheme requires 256 colours, it doesn't make sense to try and use it in a terminal which does not support this (and that this line helps monokai work correctly when Vim is running in an incorrectly configured terminal).</p>

<p>Either way, you will need to change colorscheme away from monokai first before setting the <code>t_Co</code> option, as you have discovered.</p>

<h2>Restricting Colours to Those Used Commonly in the Shell</h2>

<p>The colours that Vim uses for its output can be defined and viewed with the <code>:highlight</code> command. Running <code>:highlight clear</code> will reset these to Vim's defaults (effectively the same as running <code>:colorscheme defaults</code>)</p>

<p>Excerpt from <code>:help :highlight</code>:</p>

<pre><code>:hi[ghlight] clear        Reset all highlighting to the defaults.  Removes all  
                          highlighting for groups added by the user!
                          Uses the current value of 'background' to decide which
                          default colors to use.
</code></pre>

<p>(N.B. Note the comment about the <code>'background'</code> option.)</p>

<p>If this doesn't produce the output you desire, you have a couple of options. </p>

<ol>
<li><p>If you're currently using Vim in 256-colour mode, you could try using 16-colour mode instead, as this would result in Vim selecting from the palette of colours that you are more likely to see when in the shell.</p>

<p>The clean way to do this is by running Vim with a different $TERM variable set. The value you need to use depends on your terminal, but, for example, if your <code>$TERM</code> is usually <code>xterm-256color</code>, then running vim with the following command will do the trick:</p>

<pre><code>TERM=xterm vim
</code></pre>

<p>(You can also achieve a similar effect in a more hacky fashion by setting the terminal option directly inside vim: <code>:set t_Co=16</code>.)</p></li>
<li><p>Alternatively if it's only a handful of particular items that are coloured incorrectly, you could just change the colours of those items with the <code>:highlight</code> command. e.g. to remove the background colour from the cursor line:</p>

<pre><code>:highlight CursorLine ctermbg=NONE
</code></pre>

<p>If you're not sure which group you need to change, you can either just run <code>:highlight</code> with no arguments or you can run: <code>:so $VIMRUNTIME/syntax/hitest.vim</code> to open a new window displaying all current highlighting.</p>

<p>See the sections at the bottom of this answer for tips on how to make doing this quick with a custom command or by setting up a new colorscheme.</p></li>
</ol>

<h2>Background Colour Erase (BCE)</h2>

<p>If you have a problem with the background looking different when it contains text, you might be encountering BCE (Background Color Erase). You can disable this with the command:</p>

<pre><code>:set t_ut=
</code></pre>

<p><a href=""https://vi.stackexchange.com/questions/238/tmux-is-changing-part-of-the-background-in-vim/247#247"">There is a specific question about this here</a>, and the problem is covered in more detail in <a href=""https://sunaku.github.io/vim-256color-bce.html"" rel=""nofollow"">this blog post</a>.</p>

<h2>Update (Overriding Underlines):</h2>

<p>From our discussion in the comments, it's become clear that one of the problems you have is that your terminal displays underlined text in a different colour. You have two options to workaround this:</p>

<ol>
<li><p>Fix your terminal configuration so it renders underlined text in the same colour! I can't help you with this.</p></li>
<li><p>Turn off the underlining in Vim. You can do this with the <code>:highlight</code> command: e.g. the following will remove all colour/formatting from the line numbers:</p>

<pre><code>:highlight LineNr NONE
</code></pre></li>
</ol>

<h2>Switching the Colours Off with a Command</h2>

<p>In order to make this quick to do, you could set up a command to do all the required steps in one go:</p>

<pre><code> function! TurnOffColors()
   :set t_Co=0
   :highlight LineNr NONE
   :highlight CursorLine NONE
   "" Add any other necessary highlight lines here
 endfunction

 command! TurnOffColors call TurnOffColors()
</code></pre>

<h2>Creating a New <code>colorscheme</code></h2>

<p>Alternatively, you could create a new ""NoColorsNoUnderlines"" colorscheme where you turn off underlines as appropriate. For instructions for how to do this, run the command:</p>

<pre><code>:edit $VIMRUNTIME/colors/README.txt
</code></pre>

<p>You could use <a href=""http://www.vim.org/scripts/script.php?script_id=335"" rel=""nofollow"">this black and white colorscheme</a> as a starting point.</p>
","8755"
"Syntastic doesn't find C header files despite Configuring","2486","","<p>I have configured the following properly in my .vimrc in the root folder of a project to keep syntastic settings Project specific. </p>

<p>But still Syntastic throws errors saying ""No Such File or Directory""</p>

<p><strong>Directory Structure</strong></p>

<pre><code>--Project    
    |---include
         |---foo.h    
    |---src
         |---foo.c
    |---.vimrc
</code></pre>

<p><strong>.vimrc Contents</strong></p>

<pre><code>let g:syntastic_c_include_dirs = ['/home/pydi.k/Project/include/']
</code></pre>

<p>foo.c shows a ""foo.h no such file or directory""</p>

<p>Bottom Line - I want to configure syntastic so that it looks for custom made header files at locations I point to.</p>
","<p>The problem is <strong>not in Configuring Syntastic</strong> but rather letting Vim <strong>load the <code>.vimrc</code></strong> file in the  root directory of your project. The following will solve the problem and ensure that you <strong>load the <code>.vimrc</code></strong> before Syntastic checks for errors.</p>

<ul>
<li><p>After loading vim, explicitly run the command <code>:so location/to/.vimrc</code></p></li>
<li><p>Configuring your central <code>.vimrc</code> to load the local <code>.vimrc</code> file from wherever you are launching vim would be a headache as you should carefully always launch it from the root of the project. Instead add this line to the central <code>.vimrc</code>: <code>so .vimrc</code></p></li>
<li><p>Use the plugin <a href=""http://www.vim.org/scripts/script.php?script_id=3393"" rel=""nofollow"">localrc</a>.</p></li>
</ul>
","3953"
"how to insert a newline without leaving normal mode","2481","","<p>I wonder if I can insert a new line without leaving normal mode. For example, I have two lines:</p>

<pre><code>this is line one
this is line two
</code></pre>

<p>And the cursor is on line one. Now I want a new line between line one and line two, like this:</p>

<pre><code>this is line one

this is line two
</code></pre>

<p>I know that when I am in normal mode, I can simply press <code>o</code>. But this would enter insert mode. </p>

<p>How can I insert a new line like and stay in normal mode?</p>
","<p>I use a mapping for that:</p>

<pre><code>"" Quickly insert an empty new line without entering insert mode
    nnoremap &lt;Leader&gt;o o&lt;Esc&gt;
    nnoremap &lt;Leader&gt;O O&lt;Esc&gt;
</code></pre>

<p>This way you can insert a line under your cursor with <code>&lt;Leader&gt;o</code> and one on the previous line with <code>&lt;Leader&gt;O</code>. </p>

<p><strong>Note:</strong> One could argue that it requires as many keystrokes as <code>o&lt;Esc&gt;</code> but hopefully you choosed your leader to make this kind of mapping easy. Also I'm really not sure there is a built-in way to do this.</p>
","3877"
"Can I load different tags per project?","2478","","<p>I'm interested in using exuberant-tags (ctags) in vim, but I use Vim for all sorts of projects so I need multiple tag files and I need vim to use the correct tag file on a per project basis.</p>

<p><strong>Is there an easy way to manage this?</strong></p>

<p>e.g. I could store tags in files like ~/.vim/tagfiles/-var-www-mywebsite.com then if I was editing a file in /var/www/mywebsite.com/foo/bar/baz.php it could try looking for  </p>

<p>~/.vim/tagfiles/-var-www-mywebsite.com-foo-bar<br>
then<br>
~/.vim/tagfiles/-var-www-mywebsite.com-foo<br>
then<br>
~/.vim/tagfiles/-var-www-mywebsite.com</p>

<p>until it finds a match? But I don't want to reinvent the wheel and spending hours with vimscript if someone's already done it, as I suspect it's a common requirement?</p>
","<p>If each project is a separate git repo, one can use <a href=""https://github.com/tpope/vim-fugitive"">fugitive.vim</a> which will automatically point tags at <code>.git/tags</code>, allowing easy per-project tags.</p>
","2945"
"Can I do an interactive :substitute (search & replace)?","2472","","<p>Sometimes I use <code>:s</code> with a complicated regexp which may or may not be correct, or aren't sure if I want to replace <em>all</em> matches.</p>

<p>Is there any way I can tell Vim to confirm every match it finds before it actually replaces the text?</p>
","<p>Yes! Use the <code>c</code> flag for <code>:substitute</code>. From <code>:help substitute</code>:</p>

<pre><code>[c]     Confirm each substitution.  Vim highlights the matching string (with
        hl-IncSearch).  You can type:                           :s_c
            'y'     to substitute this match
            'l'     to substitute this match and then quit (""last"")
            'n'     to skip this match
            &lt;Esc&gt;   to quit substituting
            'a'     to substitute this and all remaining matches {not in Vi}
            'q'     to quit substituting {not in Vi}
            CTRL-E  to scroll the screen up {not in Vi, not available when
                        compiled without the +insert_expand feature}
            CTRL-Y  to scroll the screen down {not in Vi, not available when
                        compiled without the +insert_expand feature}
</code></pre>

<p>Example usage is simple as pie:</p>

<pre><code>%s/old/new/c
</code></pre>

<p>This is very useful, but didn't know about this until 2 weeks ago :-) And it's even available in ol' vi :-)</p>

<p>Bonus tip: You may also want to use <code>:set nowrapscan</code>; this prevents Vim from wrapping to top when it hits the bottom. I've found this to be <em>especially useful</em> when using the <code>c</code> flag.</p>
","374"
"Can I delete an entire line, except the line break?","2470","","<p>A fairly common operation for me in vim, since I am compulsive-obsessive and like to keep my files free of whitespace, is to delete the <em>contents</em> of an entire line, but not the line itself (i.e. not the line break).</p>

<p>Is there a built-in vim way to do this? Perhaps a <kbd>d</kbd><code>&lt;movement command&gt;</code> operation?</p>

<p>So far, the best I have is (on the line in question) <kbd>0</kbd><kbd>d</kbd><kbd>$</kbd>. Is there a quicker way?</p>
","<p>You can use <code>0D</code> this will go to the first character on the line and delete until the end of the line.  Note that you can use <code>^D</code> if you want to leave any preceding whitespace alone.  Also, these operations cannot be repeated by using <code>.</code>.  If you want an operation which can be repeated with the <code>.</code> command, refer to David Lord's answer.</p>

<p>Help topics:</p>

<ul>
<li><code>:help 0</code></li>
<li><code>:help D</code></li>
<li><code>:help ^</code></li>
</ul>
","3107"
"What does z stand for in vim?","2456","","<p>I was looking up at tips on  screen shifting and came across the following tips:</p>

<pre><code>zz = shift current line to middle of screen
zt = shift current line to top of screen
zb = shift current line to bottom of screen
</code></pre>

<p>My question is what is <code>z</code>?  What does it stand for? what other functionality might <code>z</code> have?</p>
","<p>z doesn't stand for anything.  g and z were two letters that went unused as standalone commands (<code>z&lt;CR&gt;</code>, <code>z.</code>, <code>z+</code>, <code>z-</code>, and <code>z^</code> existed) in vi, so they have been repurposed in Vim as a prefix for a variety of commands.</p>

<p><a href=""https://vimhelp.appspot.com/index.txt.html#z"">:help z</a> and <a href=""https://vimhelp.appspot.com/index.txt.html#g"">:help g</a> will show you all the commands that sit behind these prefixes.</p>
","6982"
"How to run bash command over current file and replace buffer with result?","2455","","<p>I currently deal with lots of json files and am quite fond of the bash comand <code>jq</code>, e.g. if I want to format the file I do</p>

<pre><code>jq . ugly.json &gt; formated.json
</code></pre>

<p>Now, I don't want to leave vim, but run it directly within my current open file.</p>

<p>How can I do it?</p>

<p>I tried:</p>

<pre><code>:!jq . %
</code></pre>

<p><code>!</code> runs a bash command
<code>%</code> means the current file</p>

<p>Yet this only displays the result, yet does not update the content of the file.</p>

<p><hr>
While writing this question I stumbled upon a solution yet don't know why it works. It would be great if someone could point out why <code>:%!jq .</code> works.</p>
","<p><code>:!{cmd}</code> sends <code>{cmd}</code> to the shell which executes it and shows its output on the screen.</p>

<p><code>:{range}!{filter}</code> sends the lines from the current buffer inside <code>{range}</code> as the input of the <code>{filter}</code> program and replaces them with its output.</p>

<p>In your example, <code>:%!jq</code> :</p>

<ul>
<li><code>%</code> is the range, which means: <em>all the lines of the current buffer</em><br>
It could also be written <code>1,$</code> (from the first line to the last one)</li>
<li><code>jq</code> is the filter program</li>
</ul>

<p>Here's a <a href=""https://2.bp.blogspot.com/-TKrpj9ZOb_8/Ty8Z6uGef1I/AAAAAAAAASQ/5pEwFwtONkU/s1600/vim_ranges_p0.png"">page</a> describing the various ways of writing a range.<br>
And on <a href=""https://4.bp.blogspot.com/-MhHrs8Q-S_A/UJpAuI_mOZI/AAAAAAAAAZ0/aJrXwjlvoYs/s1600/vim_pipes.png"">this page</a>, you can find other usage examples of a filter program :</p>

<pre><code>:%! xxd [-r]
:%! column -t
:%! sort
</code></pre>

<p>The first one replaces a binary file with a hex dump (or the reverse with the <code>-r</code> flag).<br>
The second one formats data from the file into a table.<br>
The third one sorts lines according to the first characters.</p>

<p>You can test the third one, with this simple file:</p>

<pre><code>3 !
2 world
1 hello
</code></pre>

<p>After typing <code>:%! sort</code>, the buffer is replaced with:</p>

<pre><code>1 hello
2 world
3 !
</code></pre>

<p>If you had typed <code>:!sort %</code>, the output would have been displayed on the screen but would not have replaced the buffer.</p>

<p>Note that the <code>%</code> sign doesn't mean the same thing depending on where it is placed:  </p>

<ul>
<li><p><strong>Before</strong> the bang (and more generally before most Ex commands), it's
interpreted as a range (same as <code>1,$</code>) which tells vim which lines
must be filtered.</p></li>
<li><p><strong>After</strong> the bang (and more generally after most Ex commands), it's expanded as the name of the current file before the full command is sent to the shell.</p></li>
</ul>

<p>For more information, see:</p>

<pre><code>:help filter
:help range
</code></pre>
","5837"
"Get percentage through file of displayed window","2444","","<p>I was looking at some of the special characters for use in a status line, and I found one that shows the percentage through file of displayed window (<code>%P</code>).  However, I can find no way of getting this value through a function or a command that is provided by default.  I did see that this is the value displayed by the <code>ruler</code> option, but as far as I know, there is no way of capturing that value.  How do you get this percentage?</p>

<h3>Note</h3>

<p>I know about the <code>:file</code> command, but that doesn't display the percentage I want.  (you can capture this value with the <code>:redir</code> command)</p>
","<p>If you're really determined to do it, it can be done.</p>

<p>A mostly accurate translation of the <a href=""https://github.com/vim/vim/blob/master/src/buffer.c#L4405-L4434"" rel=""nofollow"">source function</a> might look like this:</p>



<pre><code>function! Stl_P()
    let above = line('w0') - 1
    let below = line('$') - line('w$')
    if below &lt;= 0
        return above ? 'Bot' : 'All'
    elseif above &lt;= 0
        return 'Top'
    else
        return printf('%2d%%', above &gt; 1000000 ?
            \ above / ((above + below) / 100) :
            \ above * 100 / (above + below))
    endif
endfunction
</code></pre>

<p>This doesn't work with <code>diff</code> buffers where at least one of the files being <code>diff</code>ed has removed lines, since there is no way to get the <code>w_topfill</code> in VimL (or perhaps I didn't ponder about it deep enough).  Oh well.</p>
","3896"
"How do I get gvim to start maximised in Windows?","2441","","<p>I'd like to have my editors give me as much screen real estate as possible since it increases my ability to see most of the code at once.</p>

<p>The problem is that <code>gvim</code> seems to give me either an 80x25 window or remember the last non-maximised size, depending on how I invoke it.</p>

<p>So, how can I force it to be as large as possible, irrespective of any remembered state?</p>
","<p>You can put this line:</p>

<pre><code>autocmd GUIEnter * simalt ~x
</code></pre>

<p>at the end of your <code>gvimrc</code> file.</p>

<p>This method uses the <code>autocmd</code> feature to weave its magic. The command <code>autocmd GUIEnter *</code> specifies a command to run after successfully starting the GUI for a file pattern of <code>*</code> (any file).</p>

<p>The command it will execute, <code>simalt ~x</code> (in Windows variants of <code>vim</code> only), will simulate the keystroke <kbd>Alt Spacebar</kbd><kbd>x</kbd>, which are the keystrokes that will maximise the window.</p>

<p>You can also use the shortened version:</p>

<pre><code>au GUIEnter * sim ~x
</code></pre>

<p>but I prefer fully expanded commands myself, especially since it's the sort of thing you set and forget, only entering <em>once</em> when installing <code>vim</code> onto a Windows system.</p>

<hr>

<p>Keep in mind that this is simulating keystrokes in order to achieve its ends. On English versions, it will work fine since <kbd>Alt-Space</kbd><kbd>X</kbd> is how you maximise a window.</p>

<p>If that doesn't work for you, you should investigate the keystrokes in whatever locale you're using. For example, the French version will use <code>Agrandir</code> (enlarge) with the <code>n</code> as the control keystroke, so the command you would need there is:</p>

<pre><code>autocmd GUIEnter * simalt ~n
</code></pre>

<p>(which would actually <em>minimise</em> your window in English).</p>

<p>If you're some <em>other</em> (non-English, non-French) variant, just press <kbd>Alt-Space</kbd> on a window to bring up the system menu, and find out what key should be used (it should be underlined).</p>

<hr>

<p>To <em>find</em> your <code>gvimrc</code> file for adding whatever command you need, you can enter:</p>

<pre><code>:version
:echo $VIM
:echo $HOME
</code></pre>

<p>and you should get a list of startup files and variables like:</p>

<pre><code>system gvimrc file = ""$VIM/gvimrc""
  user gvimrc file = ""$HOME/_gvimrc""

C:\Program Files (x86)\Vim
C:\Users\Pax\Documents
</code></pre>
","1938"
"How to stop gVim wrapping text at column 80","2424","","<p>I have a <code>README.txt</code> file as follows:</p>

<pre><code>This document is a list of
a) Known issues in the services or test environment, i.e. things expected to fail
b) Things to be improved in the test suite
c) Possible bugs to be followed up
</code></pre>

<p>If I add anything to line 2, gVim automagically wraps it as follows</p>

<pre><code>a) Known issues in the services or test environment, i.e. things expected to
fail blahblah
</code></pre>

<p>This is super annoying. 
I am running gVim on Windows, with the plugins ""solarized"" and ""airline"". I have tried to tame this behaviour with the following in my <code>vimrc</code>: (to no avail)</p>

<pre><code>set nowrap              "" don't wrap by default
set tw=0                "" don't jump to newline after col 80
</code></pre>

<p>It only seems to happen with a <code>.txt</code> file, others are OK.</p>
","<p>Try turning off automatic formatting:</p>

<pre><code>set formatoptions=
</code></pre>

<p>If this works, you're going to want to try to track down how it's having an effect. There are two possibilities. Either you have <code>'wrapmargin'</code> set (which causes Vim to insert newlines when you get within a certain distance of the edge of the window), or something is setting <code>'textwidth'</code> after your <code>.vimrc</code> has been read. Use <code>:verbose set wrapmargin?</code> and <code>:verbose set textwidth?</code> to find out their values and what set them.</p>

<p>It's also possible that something is overriding your <code>'wrap'</code> setting, causing the lines to <em>display</em> on several screen-lines, but you'd probably know if this were the case, because the wrapping would occur at the end of the window. Using the <code>'ruler'</code> or <code>'showbreak'</code> settings make this sort of wrapping easier to see.</p>

<h3>UPDATE:</h3>

<p>It turns out that the <code>textwidth</code> was set by an autocommand created in a file <code>vimrc_example.vim</code> in the Vim installation, which was being loaded at startup by the line <code>source $VIMRUNTIME/vimrc_example.vim</code> in the OP's <code>.vimrc</code>.</p>

<p>Other answerers have suggested editing the example file, or overriding the autocommand with further autocommands, but a cleaner solution would be to edit your .vimrc <em>not</em> to source the example file. If the example contains some settings you <em>do</em> want, these can be copied into your own .vimrc.</p>
","2786"
"How to Start Graphical Neovim from OS X Terminal?","2420","","<p>I have installed the terminal neovim which starts by <code>nvim</code>, and the graphical neovim. 
I cannot find the keybinding to start the graphical neovim in Terminal. </p>

<p>I installed the neovim by following instructions in Github <a href=""https://github.com/neovim/homebrew-neovim/blob/master/README.md"" rel=""nofollow"">here</a>, by Homebrew; still checking if it install also the graphical one which I have also</p>

<pre><code>brew install neovim/neovim/neovim
</code></pre>

<p>My Graphical Neovim is NVIM 0.1.3 which homepage is <a href=""https://neovim.io/"" rel=""nofollow"">here</a>. </p>

<hr>

<p>How can you start Neovim from Terminal?</p>
","<p>There is a nice implementation of NeoVim GUI for macOS named <a href=""http://vimr.org"" rel=""nofollow noreferrer"">VimR</a> (R = Refined). It has a native file manager and works fine and fast with mouse gestures and macOS UI. VimR comes with a command line tool <code>vimr</code>. VimR <a href=""https://github.com/qvacua/vimr"" rel=""nofollow noreferrer"">repository</a> is more active and has more stars comparing to <a href=""https://github.com/rogual/neovim-dot-app"" rel=""nofollow noreferrer"">neovim-dot-app</a>.
<a href=""https://i.stack.imgur.com/TTko5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TTko5.png"" alt=""enter image description here""></a></p>
","10804"
"Using :Explore without closing current buffer","2414","","<p>If I open the file explorer with <code>:Explore</code> and choose a file, it replaces the buffer I had open before and I have to open it again. How do I avoid this?</p>
","<p>I usually use a following flow when I want to open the file (while keeping the current file):</p>

<ul>
<li>Make a new vertical / horizontal split</li>
<li>Open netrw from in the new split</li>
<li>Select another file</li>
</ul>

<p>As mentioned in comments there are also :Sexplore and :Vexplore which do the split and open netrw at once, but I don't use them. I don't use :Explore too.</p>

<p>Instead I use <a href=""https://github.com/tpope/vim-vinegar"" rel=""noreferrer"">vim-vinegar</a> which is a slim, but very useful improvement on top of netrw. You just press <code>-</code> any time you need the file explorer.
Also I highly recommend to check Drew Neil's <a href=""http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/"" rel=""noreferrer"">Oil and Vinegar post</a>.</p>

<p>So my flow above is to pre-split the screen as I want it to be and then select the new file.</p>
","6261"
"Make panes resize when host window is resized","2373","","<p>I like to use vimdiff as a git diff/merge tool. The problem is when I resize the host terminal window to a new size: of the two split panes, the leftmost remain of the same width, while the rightmost is extended to full window size.</p>

<p>Is there a command to make the split panes equal width after the windows has been resized? Or a setting that makes the panes always be of same size? I looked into <code>:set equalalways</code> but it does not seem to do what I am asking.</p>
","<p>To go along with @janos's answer, you can set an <code>autocmd</code> to automatically press those keys when the window is resized (put this in your <code>.vimrc</code> without the leading colon if you want it to apply every time you open Vim):</p>

<pre><code>:autocmd VimResized * wincmd =
</code></pre>

<p><a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#VimResized"" rel=""nofollow"">Here are the docs for the <code>VimResized</code> autocmd</a>.</p>
","206"
"function to call shell script with arguments","2366","","<p>I am making my own function to call a bash script that compiles and runs my program.</p>

<p>Here is the code I have tried.</p>

<pre><code>function Compile_and_run(game, major, minor)
    !_compile a:game a:major a:minor
endfunction
</code></pre>

<p>The only issue is it seems to parse <code>a:game</code> instead of the value.</p>

<p>How would I get <code>a:game</code>, <code>a:major</code>, <code>a:minor</code> to parse their value to the function?</p>
","<h2>Using <code>:execute</code></h2>

<p>All command arguments in Vim are interpreted literally unless designed to be evaluated. To build a command dynamically, you can use <a href=""http://vimhelp.appspot.com/eval.txt.html#%3Aexecute""><code>:execute</code></a>. Each argument to <code>:execute</code> is evaluated, and they are all joined by a space to produce the final command.</p>

<pre><code>function Compile_and_run(game, major, minor)
    execute '!_compile' a:game a:major a:minor
endfunction
</code></pre>

<h2>Incorporating <code>shellescape()</code></h2>

<p>It's a good idea to escape arguments being passed to the shell using <a href=""http://vimhelp.appspot.com/eval.txt.html#shellescape%28%29""><code>shellescape()</code></a>. It takes a string and escapes it for use in a shell command.</p>

<pre><code>function Compile_and_run(game, major, minor)
    execute '!_compile' shellescape(a:game) shellescape(a:major) shellescape(a:minor)
endfunction
</code></pre>
","2407"
"How do I navigate to topics in Vim's documentation?","2362","","<p>In Vim's built-in help system, how do I…</p>

<ul>
<li>search for topics that I want help on?</li>
<li>follow hyperlinks?</li>
<li>browse around for related material?</li>
</ul>
","<p>Vim comes with an exhaustive and fully indexed documentation that contains the answers to most of the questions you may have on using Vim.</p>

<p>But the documentation is huge and may look to the neophyte as an impenetrable maze. Here are a few guidelines to help you find what you need…</p>

<ol>
<li><p>The <code>:help</code> command is your gateway to Vim's documentation. Read the first screen <em>now</em>.</p>

<pre><code>:help
</code></pre>

<p>Let's go meta:</p>

<pre><code>:help help
</code></pre></li>
<li><p>You can complete the arguments with <code>&lt;Tab&gt;</code> and display the list of possible completions with <code>&lt;C-d&gt;</code>.</p>

<pre><code>:help buf&lt;Tab&gt;
:help :w&lt;C-d&gt;
</code></pre>

<p>By the way, here is an explanation of key notation:</p>

<pre><code>:help key-notation
</code></pre></li>
<li><p>Most Ex commands can be shortened to a few characters. That's true for <code>:help</code> too:</p>

<pre><code>:h
</code></pre></li>
<li><p>The <code>:help</code> command and its tab-completion are case-insensitive so the two commands below will get you to the same section:</p>

<pre><code>:h BufWritePost
:h bufwritepost
</code></pre>

<p>Note that <code>a</code> and <code>A</code> are both legitimate commands so case-insensitivity doesn't apply.</p></li>
<li><p>If you only have a generic keyword to search for, use <code>:helpgrep</code> and open the quickfix window:</p>

<pre><code>:helpgrep quickfix
:copen
</code></pre></li>
<li><p>Use <code>&lt;C-]&gt;</code> on the highlighted words to jump to the corresponding tag, use <code>&lt;C-t&gt;</code> to come back.</p>

<p>See <code>:help tags</code> for more.</p></li>
<li><p>Scroll around to see if there's a related option or command that better suits your needs. That's a great way to learn new tricks, too.</p></li>
<li><p>Use the right syntax to search more efficiently:</p>

<pre><code>:h :command                        "" help for ex-command 'command'
:h 'option'                        "" help for option 'option'
:h function()                      "" help for function 'function'
:h modifier-key                    "" help for 'modifier'-'key' in normal mode
:h mode_modifier-key               "" help for 'modifier'-'key' in 'mode'
:h mode_modifier-key_modifier-key  "" help for 'modifier'-'key' 'modifier'-'key' in 'mode'
</code></pre>

<p>Examples:</p>

<pre><code>:h :sort
:h 'ai                "" only one quote needed
:h bufnr(             "" no need for both parenthesis
:h v_ctrl-g
:h i_ctrl-x_ctrl-o
:h ctrl-w             "" no mode required for normal mode
</code></pre></li>
<li><p>Anatomy of a <code>:help</code> section:</p>

<pre><code>:help ballooneval'
</code></pre>

<p><img src=""https://i.stack.imgur.com/eSNa7.png"" alt="":help ballooneval&#39;""></p>

<ul>
<li>The words highlighted in red are the tags associated with that option.</li>
<li>The words in green are the long form and the short form of the option name.</li>
<li>The first line in white says that it's a boolean option and that it's off by default, see <code>:help options</code>.</li>
<li>The second line in white says that the option is global, see <code>:help option-summary</code>.</li>
<li>The purple lines are self-explanatory.</li>
<li>Then comes the description of the option.</li>
<li>The turquoise words are ""tags"" that let you jump to another part of the documentation. Don't be afraid to follow them.</li>
</ul></li>
<li><p>Use your brain, find logical patterns that will help you for future searches.</p>

<p>Once you have found the handy <code>:help list-functions</code>, where to look for string-related functions?</p>

<p>Once you have found <code>:help i_ctrl-x_ctrl-o</code>, how can you find help for <code>&lt;C-x&gt;&lt;C-l&gt;</code> in insert mode?</p></li>
<li><p>RTFM is not an insult. You will learn a lot more by reading the documentation than by asking short-sighted questions to random strangers so make sure you at least tried to <em>R</em>ead <em>T</em>he <em>F</em>antastic <em>M</em>anual before asking.</p></li>
</ol>
","2137"
"Why does my colorscheme look different when I run vim with sudo?","2358","","<p>I installed colorscheme ""jellybeans"" for vim. Why does the colors look differently when i run vim with and without sudo? </p>

<p>Example on the screen below - the left one is without sudo, the right is with sudo. The one with sudo is working properly - how can i make vim to have the same colors without using sudo?</p>

<p><a href=""https://i.stack.imgur.com/h9xSr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h9xSr.png"" alt=""enter image description here""></a></p>

<p>I use  </p>

<pre><code>Linux Mint 17.2 (x64)  
gnome-terminal 3.6.2  
bash 4.3.11  
tmux 1.8  
Vim 7.4
</code></pre>

<p>The value of my <code>$TERM</code> variable is:</p>

<pre><code>$TERM=screen-256color
</code></pre>

<p>And the result is the same with <code>sudo $SHELL -c 'echo $TERM'</code></p>

<p>Here is my <a href=""https://github.com/tkossak/dotfiles/blob/master/vimrc"" rel=""nofollow noreferrer"">vimrc file</a>.</p>

<h2>EDIT - SOLUTION:</h2>

<p>Colorscheme file was lacking read permission for ""others"". Fixed with:<br>
<code>sudo chmod +r /usr/share/vim/vim74/colors/jellybeans.vim</code></p>
","<p>The solution was: making sure users who run vim can actually read the colorscheme file. Giving everyone read permission is done with:</p>

<pre><code>sudo chmod +r /usr/share/vim/vim74/colors/jellybeans.vim
</code></pre>
","4239"
"Deleting a range of n lines before and after a matched line?","2351","","<p>I have a repetitive configuration file and I'd like to match a regex and delete a range of lines before, and after a match.  I'd also like delete the match in one command.</p>

<p>I can use...</p>

<p><code>:g/match/-1d</code></p>

<p>...several times to delete more than one line from before a match...</p>

<p>...and combine it with a few calls to...</p>

<p><code>:g/match/+1d</code></p>

<p>...to delete more than one line after the match...</p>

<p>But is there any way to delete a range of lines, before, after and including, the match with one command?</p>
","<p>You're almost there; you can also specify a range of lines, which is in the form of <code>[line1],[line2][command]</code>, instead of just <code>[line][command]</code> (like you're using now).</p>

<p>You can use <code>.</code> to refer to the current line.</p>

<ul>
<li>For the current &amp; next line: <code>:g/match/.,+1d</code></li>
<li>For the current &amp; previous line: <code>:g/match/-1,.d</code></li>
<li>For the previous, current, and next line: <code>:g/match/-1,+1d</code></li>
</ul>

<p>See <a href=""http://vimhelp.appspot.com/cmdline.txt.html#E16"" rel=""nofollow noreferrer""><code>:help [range]</code></a> for more information, and <a href=""https://vi.stackexchange.com/a/3232/51"">in this answer there are a few more examples</a>.</p>
","3413"
"How do I use Python plugins on Windows?","2351","","<p>I have Windows 7 64-bit, with python 2.7.11 and python 3.5.1 (both 32-bit) installed, and I have compiled vim with python/dyn and python3/dyn, but I keep getting the following error:</p>

<pre><code>:py print ""hello""
E887: Sorry, this command is disabled, the Python's site module could not be loaded
</code></pre>

<p>However, the following all work just fine:</p>

<pre><code>C:\python27\python -c ""import site;""
</code></pre>

<p>and</p>

<pre><code>:py3 print(""hello"")
</code></pre>

<p>This is my vim version info:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan 29 2016 11:58:41)
MS-Windows 32-bit console version
Included patches: 1-1194
Compiled by afontaine@PHOENIX
Huge version without GUI.  Features included (+) or not (-):
+acl                +eval               -mouseshape         +tag_old_static
+arabic             +ex_extra           +multi_byte_ime/dyn -tag_any_white
+autocmd            +extra_search       +multi_lang         -tcl
-balloon_eval       +farsi              -mzscheme           -tgetent
-browse             +file_in_path       -netbeans_intg      -termresponse
++builtin_terms     +find_in_path       +path_extra         +textobjects
+byte_offset        +float              -perl               +title
-channel            +folding            +persistent_undo    -toolbar
+cindent            -footer             -postscript         +user_commands
+clientserver       +gettext/dyn        +printer            +vertsplit
+clipboard          -hangul_input       +profile            +virtualedit
+cmdline_compl      +iconv/dyn          +python/dyn         +visual
+cmdline_hist       +insert_expand      +python3/dyn        +visualextra
+cmdline_info       +jumplist           +quickfix           +viminfo
+comments           +keymap             +reltime            +vreplace
+conceal            +langmap            +rightleft          +wildignore
+cryptv             +libcall            -ruby               +wildmenu
+cscope             +linebreak          +scrollbind         +windows
+cursorbind         +lispindent         +signs              +writebackup
+cursorshape        +listcmds           +smartindent        -xfontset
+dialog_con         +localmap           -sniff              -xim
+diff               -lua                +startuptime        -xterm_save
+digraphs           +menu               +statusline         -xpm_w32
-dnd                +mksession          -sun_workshop       
-ebcdic             +modify_fname       +syntax             
+emacs_tags         +mouse              +tag_binary
Compilation: gcc -Iproto -DWIN32 -DWINVER=0x0500 -D_WIN32_WINNT=0x0500 -DHAVE_PATHDEF -DFEAT_HUGE -DHAVE_GETTEXT -DHAVE_LOCALE_H -DDYNAMIC_GETTEXT -DFEAT_CSCOPE -DFEAT_NETBEANS_INTG -DFEAT_CHANNEL -DFEAT_GUI_W32 -DFEAT_CLIPBOARD -DFEAT_MBYTE -DFEAT_MBYTE_IME -DDYNAMIC_IME -DDYNAMIC_ICONV -pipe -w -march=i386 -Wall -DFEAT_PYTHON  -DDYNAMIC_PYTHON -DDYNAMIC_PYTHON_DLL=""python27.dll"" -DFEAT_PYTHON3  -DDYNAMIC_PYTHON3 -DDYNAMIC_PYTHON3_DLL=""python35.dll"" -DFEAT_XPM_W32 -I xpm/x86/include -I xpm/x86/../include -O3 -fomit-frame-pointer -freg-struct-return -s
Linking: gcc -Iproto -DWIN32 -DWINVER=0x0500 -D_WIN32_WINNT=0x0500 -DHAVE_PATHDEF -DFEAT_HUGE -DHAVE_GETTEXT -DHAVE_LOCALE_H -DDYNAMIC_GETTEXT -DFEAT_CSCOPE -DFEAT_NETBEANS_INTG -DFEAT_CHANNEL -DFEAT_GUI_W32 -DFEAT_CLIPBOARD -DFEAT_MBYTE -DFEAT_MBYTE_IME -DDYNAMIC_IME -DDYNAMIC_ICONV -pipe -w -march=i386 -Wall -DFEAT_PYTHON  -DDYNAMIC_PYTHON -DDYNAMIC_PYTHON_DLL=""python27.dll"" -DFEAT_PYTHON3  -DDYNAMIC_PYTHON3 -DDYNAMIC_PYTHON3_DLL=""python35.dll"" -DFEAT_XPM_W32 -I xpm/x86/include -I xpm/x86/../include -O3 -fomit-frame-pointer -freg-struct-return -s -mwindows -o gvim.exe -lkernel32 -luser32 -lgdi32 -ladvapi32 -lcomdlg32 -lcomctl32 -lversion -lwsock32 -Lxpm/x86/lib -lXpm -lole32 -luuid      
</code></pre>

<p>And <code>where python27.dll</code> outputs <code>C:\Windows\System32</code></p>

<p>I've tried the advice from <a href=""https://groups.google.com/forum/#!topic/vim_dev/gsggIcWJKuM"" rel=""noreferrer"">this google group post</a>, but to no avail.</p>

<p>I just want to have YouCompleteMe running successfully.</p>
","<p>All right, apparently the state is this: VIM on Windows supports python <code>2.7.9</code>, not <code>2.7.11</code>. It might work with <code>2.7.10</code>, I did not test it.</p>

<p>Even though I compiled VIM on Windows with a reference to the <code>2.7.11</code> DLL, it suddenly worked when I tried swapping out <code>2.7.11</code> for <code>2.7.9</code></p>

<p>I'm not sure if I did something wrong with <code>2.7.11</code>, and it actually does work, but I don't have the time to figure it out.</p>
","6348"
"Replace in Visual Selection","2328","","<p>How does one get vim to replace a character within the visual selection <strong>only</strong> and not elsewhere on the line? Example:</p>

<ul>
<li>Line: <code>int arr[] = { 00 01 02 03 04 05 05 /* ... lots more like this*/};</code> </li>
<li>Visual Selection: <code>{ 00 01 02 03 04 05 05 /*... lots more like this*/}</code></li>
<li>Command: <code>:'&lt;,'&gt;s/\ /\,0x/g</code></li>
<li>Expected: <code>int arr[] = {0x00,0x01,0x02,0x03 /* and so on*/};</code> </li>
</ul>

<p>After performing these actions however, the actual result is: </p>

<p><code>int,0xarr[],0x=,0x{0x00,0x01,0x02,0x03 /* and so on*/};</code></p>

<p>Is there a way to modify the command above to produce the expected result? Doesn't <code>'&lt;</code> and <code>'&gt;</code> define the range on which the search (and replace) commands work?</p>
","<pre><code>:'&lt;,'&gt;s/\%V\ /\,0x/g
</code></pre>

<p><code>%V</code> matches inside the visual area. See <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5C%25V""><code>:help %V</code></a>.</p>
","1926"
"Why do I get the ""tag stack empty"" error when using :ptag and other commands?","2320","","<p>I have setup a tags files in my project directory by running <code>ctags -R .</code>, so then when I put the cursor on a word that is a tag and use the command <code>]</code>, vim ""jumps"" to that tag.  Or more correctly, vim loads the file containing the tag in my current window and moves cursor to the tag definition.<br>
This all works fine, however if I put the cursor on the tag and run the ex command <code>:ptag</code> to open the tag definition in a preview window, I get   </p>

<pre><code>E73: tag stack empty
</code></pre>

<p>If I then use <code>]</code> instead, again vim will open the tag fine, however, the original <code>:ptag</code> command is obviously being remembered because when I use the <code>]</code> command vim will open the tag in a preview window.<br>
I notice vim reports this message regularly. I always just use <code>]</code> and then vim will open the tag as intended.<br>
The help doesn't give any useful background, from: <code>:h E73</code></p>

<blockquote>
  <p><em>E73</em><br>
  When you try to use the tag stack while it doesn't contain anything you will get an error message.</p>
</blockquote>

<p>Its not plugins either, as the exact same behaviour happens when I open the file with: </p>

<pre><code>vim -u NONE -N -U NONE
</code></pre>

<p>why do I keep getting this error message when I expect vim to jump to the tag definition?</p>
","<p>First, the command to jump to a tag is <code>&lt;C-]&gt;</code>, not <code>]</code>.</p>

<p>Second, <code>:ptag</code> doesn't care about the word under your cursor. It works just like <code>:tag</code> but uses the preview window instead of jumping directly to the tag.</p>

<p><code>:tag</code> and <code>:ptag</code>, without argument, are used to jump to the first tag in <em>the tag stack</em>. You'll obviously get an error if the tag stack is empty, or a semi-useless behavior if it only contains the current tag.</p>

<p>If you want to use <code>:ptag</code> to display the definition of the word under the cursor in the preview window you need to pass that word as argument:</p>

<pre><code>:ptag foo
</code></pre>

<p>You can insert the word under the cursor in the command-line with <code>&lt;C-r&gt;&lt;C-w&gt;</code>:</p>

<pre><code>:ptag &lt;c-r&gt;&lt;C-w&gt;
</code></pre>

<p>You can also press <code>&lt;C-w&gt;}</code> to the same effect.</p>

<p><code>:help :ptag</code>, <code>:help tag-stack</code>.</p>
","9305"
"How do I move the cursor to the center of current line?","2319","","<p>Is there a way I can move my cursor to the middle of the current line? (the middle of the line of text - not middle of screen width)</p>

<p>I was wondering if there was a shortcut similar to <kbd>M</kbd> that moves cursor to the middle of the screen.</p>

<p><strong>EDIT</strong>: Added clarification inside parentheses</p>
","<p>I don' know any builtin way to do this, however, you can easily have a map to do it:</p>

<pre><code>nnoremap µ :exe 'normal! '.(virtcol('$')/2).'\|'&lt;cr&gt;
</code></pre>

<p>@Ingo Karkat proposed the following variant that also works in VISUAL-mode.</p>

<pre><code>noremap &lt;expr&gt; gM (virtcol('$') / 2) . '&lt;Bar&gt;'
</code></pre>

<p>Unfortunately, it's also triggered in SELECT-mode. As a consequence, I prefer the couple:</p>

<pre><code>nnoremap &lt;expr&gt; gM (virtcol('$') / 2) . '&lt;Bar&gt;'
xnoremap &lt;expr&gt; gM (virtcol('$') / 2) . '&lt;Bar&gt;'
</code></pre>
","2463"
"Colorizing plain text","2314","","<p>I love vim, i use it all the time for write codes, but now I want to write some personal notes.</p>

<p>I'm trying <a href=""https://github.com/vim-pandoc/vim-pandoc"" rel=""nofollow"">vim-pandoc</a> (with vim-pandoc-syntax) and it's nice to have 'rich text' features like titles, items, bold, italic fonts and even tables, but doen't have 'arbitrary colored text'. For the colored text I have tried <a href=""http://txtfmt.webs.com/"" rel=""nofollow"">txtfmt</a> but this plugin uses special characters for the colors and I cant read them on others computers using the same configuration files (home and work computers).</p>

<p>Is there some alternative to txtfmt to achieve colored text?  More explicitly: how can I highlight some arbitrary part of my text with colors?</p>
","<p>@Ingo Karkat 
Your Txtfmt files should look the same on different computers. If they don't, it could be that Vim is using a different encoding on the different computers (e.g., utf-8 vs latin-1), and you haven't set Txtfmt's 'tokrange' option explicitly. Recommended approach is to set 'tokrange' to a value that will work on all your systems in a ""Txtfmt modeline"" in the file itself. This prevents Txtfmt from picking a default (which could be different on different systems).
Example:</p>

<pre><code>txtfmt:tokrange=180X
vim:ft=txtfmt
</code></pre>

<p>Note: The example above places all Txtfmt tokens near the end of the latin-1 char set. If you can force use of utf-8 on all your systems (e.g., by setting Vim's encoding option in your vimrc), you might do this instead...</p>

<pre><code>txtfmt:tokrange=0xE000X
vim:ft=txtfmt
</code></pre>

<p>...which places all Txtfmt tokens in the Unicode ""Private Use Area"".</p>

<pre><code>:help txtfmt-'tokrange'
:help txtfmt-modeline
</code></pre>
","3454"
"Fold selected lines","2313","","<p>How can I fold and unfold lines selected in visual mode?</p>

<p>Lets say I have three paragraphs and I want to fold the first or last two into one line:</p>

<pre><code>Test
====
Lorem Ipsum es simplemente el texto de relleno de las imprentas y archivos
de texto. Lorem Ipsum ha sido el texto de relleno estándar de las industrias..

Lorem Ipsum es simplemente el texto de relleno de las imprentas y archivos
de texto. Lorem Ipsum ha sido el texto de relleno estándar de las industrias..

Lorem Ipsum es simplemente el texto de relleno de las imprentas y archivos
de texto. Lorem Ipsum ha sido el texto de relleno estándar de las industrias..
</code></pre>

<p><code>za</code> folds only one paragraph.</p>
","<p>You can press <kbd>V</kbd> to go into Visual Line mode, select the lines to be folded, then <kbd>z</kbd><kbd>f</kbd> to make a manual fold.  You'll need to <code>:set foldmethod=manual</code> if it isn't already set.</p>

<p>You can open the fold with <kbd>z</kbd><kbd>o</kbd>, or delete the fold with <kbd>z</kbd><kbd>d</kbd>.</p>
","3125"
"Set cursor colour different when on a highlighted word","2312","","<p>With the current colourscheme I have been using, it is hard to find where the cursor is positioned when navigating through search results. The highlighting colour and the cursor colour are blending in making it hard to find the cursor.</p>

<p>How do I set the cursor colour different when it is on a highlighted word?</p>

<p><img src=""https://i.stack.imgur.com/asPFP.png"" alt=""Screenshot of the problem""></p>
","<p>I use this snippet from Damian Conway's fantastic talk, <a href=""https://youtu.be/aHm36-na4-4#t=4m59s"" rel=""nofollow noreferrer"">More Instantly Better Vim</a> (at 4m 59s). It causes the entire highlight to blink briefly when you leap between search results. </p>

<pre><code>"" Damian Conway's Die Blinkënmatchen: highlight matches
nnoremap &lt;silent&gt; n n:call HLNext(0.1)&lt;cr&gt;
nnoremap &lt;silent&gt; N N:call HLNext(0.1)&lt;cr&gt;

function! HLNext (blinktime)
  let target_pat = '\c\%#'.@/
  let ring = matchadd('ErrorMsg', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction
</code></pre>

<p>If you want the change in highlighting to be more persistent, you could tweak this to call <code>matchdelete</code> at some other time (e.g. when the cursor moves).</p>

<h3>UPDATE:</h3>

<p><a href=""https://vi.stackexchange.com/a/13551/343"">I recently wrote this more advanced version</a> in response to another question. It has the following changes::</p>

<ol>
<li>(Optionally) blinks repeatedly: Conway's original version just blinks once: on and then off,</li>
<li>Allows you to interrupt the blinking by typing other commands (such as pressing <code>n</code> again to jump to the next match.) This allows you to set a longer time</li>
</ol>
","2770"
"How do I get +clipboard support in Fedora 20?","2310","","<p>It seems to me that neither <code>""+p</code> nor <code>""*p</code> works for me. How can I know if my Vim is installed and set up properly to make them available? And if it's not set up, what can I do to set it up?</p>

<p>I'm running Fedora 20 with Mate 18.1. I've installed the <code>vim-enhanced</code> and <code>vim-x11</code> packages.</p>

<p>And my Vim version:</p>

<pre><code>$ vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 13 2014 08:56:57)
Included patches: 1-207, 209-475
Modified by &lt;bugzilla@redhat.com&gt;
Compiled by &lt;bugzilla@redhat.com&gt;
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   +perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python/dyn      +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      +lua/dyn         +rightleft       +windows
+diff            +menu            +ruby/dyn        +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: ""/etc/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  fall-back for $VIM: ""/etc""
 f-b for $VIMRUNTIME: ""/usr/share/vim/vim74""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches  -m64 -mtune=generic -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -L. -Wl,-z,relro -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,--enable-new-dtags  -Wl,-z,relro  -L/usr/local/lib -Wl,--as-needed -o vim        -lm -lnsl  -lselinux  -lncurses -lacl -lattr -lgpm -ldl   -Wl,--enable-new-dtags  -fstack-protector  -L/usr/lib64/perl5/CORE -lperl -lresolv -lnsl -ldl -lm -lcrypt -lutil -lpthread -lc       
</code></pre>
","<p>So, installing <code>vim-enhanced</code> and <code>vim-X11</code> is enough, but is not at the same time. To enable the system funtcions like <code>+clipboard</code>, <strong>you moreover need to use the <code>vimx</code> executable rather than <code>vim</code> or <code>vi</code></strong> (even though they are probably identical, the name changes the behaviour).</p>

<p>One way how to do that permanently is by adding aliases in your <code>.bashrc</code> file:</p>

<pre><code>alias vi='vimx'
alias vim='vimx'
</code></pre>

<p>The complete list of features that get enabled this way is:
<code>+balloon_eval</code>,
<code>+browse</code>,
<code>+clientserver</code>,
<code>+clipboard</code>,
<code>+dnd</code>,
<code>+mouseshape</code>,
<code>+toolbar</code>,
<code>+X11</code>,
<code>+xim</code>,
<code>+xsmp_interact</code>,
<code>+xterm_clipboard</code>,
<code>+xpm</code>.</p>

<p>However, some of them are probably irrelevant for the terminal version of <code>vimx</code> and only do something for GVim.</p>

<p><sub>Information on how to use the <code>+clipboard</code> feature is in <a href=""https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim"">How can I copy text to the system clipboard from Vim?</a></sub></p>
","2065"
"Faster way to move a block of text","2301","","<p>Here's how I usually copy a block of text or code:</p>

<ol>
<li>Select the block with Visual mode (<kbd>V</kbd>) and delete it with
<kbd>d</kbd>; or if it's just a single line, just use
<kbd>d</kbd><kbd>d</kbd>.</li>
<li>Go to where I want the text to be, I am too stupid to remember the difference
between <kbd>p</kbd> and <kbd>P</kbd>, so I get this right about 50% of time.
(if I get it wrong: undo a try again).</li>
<li>Sometimes, the indentation needs adjusting, so I go to Visual mode with
<kbd>V</kbd> again and reselect the same block, and use <kbd>&gt;</kbd> or
<kbd>&lt;</kbd> to fix that.</li>
</ol>

<p>Is there an easier way? In some editors I've seen that you can ""pick up"" a block
of text, as it were, and move it around; here's an example from Emacs (but I've
also seen this in other editors):</p>

<p><img src=""https://i.stack.imgur.com/1wAve.gif"" alt=""Emacs""></p>

<p>Or perhaps there is another (even better) way?</p>
","<p>There's a plugin for that: <a href=""https://github.com/shinokada/dragvisuals.vim"" rel=""nofollow"">dragvisuals.vim</a>.</p>

<p>It doesn't bind any keys by default, so you'll have to do that yourself. I like to map them to <kbd>Control</kbd>+<kbd>Arrow key</kbd>:</p>

<pre><code>xmap &lt;expr&gt; &lt;C-Left&gt; DVB_Drag('left')
xmap &lt;expr&gt; &lt;C-Right&gt; DVB_Drag('right')
xmap &lt;expr&gt; &lt;C-Down&gt; DVB_Drag('down')
xmap &lt;expr&gt; &lt;C-Up&gt; DVB_Drag('up')
</code></pre>

<p>It also comes with a bonus key to duplicate the current selection:</p>

<pre><code>xmap &lt;expr&gt; D DVB_Duplicate()
</code></pre>

<p>Advantages of this plugin over the other answers:</p>

<ul>
<li>Doesn't make any text disappear if you try to move further up than the first line.</li>
<li>It will expand the file if you move below the last line.</li>
<li>Moving to the left/right works a bit better.</li>
</ul>

<p>Another useful trick to complement this, are these keybinds:</p>

<pre><code>xnoremap &gt; &gt;gv
xnoremap &lt; &lt;gv
</code></pre>

<p>This will re-select the last visual  selection after you use <kbd>&gt;</kbd> while in Visual mode, so you can adjust the alignment more easily (you can also use the arrow keys, but this will move it by one character, and not one <code>shiftwidth</code>).</p>
","601"
"Fixing a ""not an editor command"" error","2291","","<p>I've toying with someone else's <code>.vimrc</code> file. I'm getting an error on a function call within the <code>.vimrc</code> file.</p>

<pre><code>Error detected while processing &lt;FILE&gt;:
line 1500:
E492: Not an editor command: EQAS_Align('\S:',         '',   '\s')
line 1501:
E492: Not an editor command: EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>Lines 1500 and 1501 are as follows:</p>

<pre><code>EQAS_Align('\S:',         '',   '\s')
EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>There is a plugin in  <code>~/.vim/plugin</code> directory that accompanied this <code>.vimrc</code> configuration that has the following function in it:</p>

<pre><code>function EQAS_Align (mode, ...) range
  let option = a:0 ? a:1 : {}

  &lt;snip&gt;

endfunction
</code></pre>

<p>I'm not sure what the problem is and I don't know enough about VIM scripting to fix this.</p>

<p><strong>EDIT</strong></p>

<p>This line is in the <code>.vimrc</code> file before these functions are called: <code>runtime plugin/eqalignsimple.vim</code></p>
","<p>It seems that the following 2 lines:</p>

<pre><code>EQAS_Align('\S:',         '',   '\s')
EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>... refer to a custom function named <code>EQAS_Align()</code>.</p>

<p>It depends on what you want to do with it, but if you want its code to be processed, you have to prefix its name with the <code>:call</code> command:</p>

<pre><code>call EQAS_Align('\S:',         '',   '\s')
call EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>To read its return value, you can use the <code>:echo</code> command:</p>

<pre><code>echo EQAS_Align('\S:',         '',   '\s')
echo EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>To assign its value to a variable, you can use the <code>:let</code> command:</p>

<pre><code>let your_var1 = EQAS_Align('\S:',         '',   '\s')
let your_var2 = EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<p>To bind it to some keys in normal mode, you can use the <code>:nnoremap</code> command:</p>

<pre><code>nnoremap &lt;key1&gt; :call EQAS_Align('\S:',         '',   '\s')&lt;CR&gt;
nnoremap &lt;key2&gt; :call EQAS_Align('[[:punct:]]', '',   '\s')&lt;CR&gt;
</code></pre>

<p>To bind it to a custom command, you can use the <code>:command</code> command:</p>

<pre><code>command! YourCommand1 call EQAS_Align('\S:',         '',   '\s')
command! YourCommand2 call EQAS_Align('[[:punct:]]', '',   '\s')
</code></pre>

<hr>

<p>Regarding the function itself:</p>

<pre><code>function EQAS_Align (mode, ...) range
  let option = a:0 ? a:1 : {}

  &lt;snip&gt;

endfunction
</code></pre>

<p>You probably want to add a bang after the <code>function</code> keyword, otherwise Vim will complain each time you re-source your <code>vimrc</code> because it won't be able to overwrite the old definition:</p>

<pre><code>Error detected while processing /home/user/.vimrc:
line XXX:
E122: Function EQAS_Align already exists, add ! to replace it
</code></pre>

<hr>

<p>The function is defined with the <code>range</code> attribute, which means that if you pass a range to the <code>:call</code> command, the function will be called only once. Which probably means that it will handle the range itself, using the variables <code>a:firstline</code> and <code>a:lastline</code> (see <code>:h :func-range</code>).</p>

<p>After the named argument <code>mode</code>, it accepts the argument <code>...</code>, which means that you could pass up to 20 more optional arguments. If there are optional arguments, inside the function, you can access them with the variables <code>a:1</code>, <code>a:2</code>, and so on; or with the list <code>a:000</code>.<br>
<code>a:0</code> is the number of optional arguments (see <code>:h a:0</code>).</p>

<hr>

<p>The line:</p>

<pre><code>let option = a:0 ? a:1 : {}
</code></pre>

<p>… is an assignment which uses a conditional expression (see <code>:h expr1</code>).<br>
The expression tests whether <code>a:0</code> is different than <code>0</code>. If it is, then the variable <code>option</code> is assigned the value <code>a:1</code>, otherwise the value <code>{}</code>.<br>
It means that if there are optional arguments, then the value of <code>option</code> should be the first optional argument, otherwise it should be an empty dictionary.</p>

<p>You could probably do something similar using the <code>get()</code> function:</p>

<pre><code>let option = get(a:, '1', {})
</code></pre>

<p>… which means: take the dictionary <code>a:</code> (which contains all the arguments of the function), and look for the key <code>1</code> (first argument of the function). If you find the key, then return its associated value. If you don't find it, then return <code>{}</code>.</p>
","11404"
"Multiple cursors at desired location","2285","","<p>I'm using <a href=""https://github.com/terryma/vim-multiple-cursors"" rel=""noreferrer"">vim-multiple-cursors</a> plugin.</p>

<p>I would like to put cursors exactly where I want. For example (<code>[x]</code> are the cursor positions):</p>

<pre><code>Lorem ipsum dolor sit amet[1], consectetur adipiscing elit, 
sed do eiusmod tempor incididunt ut labore et dolore magna[2]
aliqua.
</code></pre>

<p>In <em>Sublime Text</em> I would normally put the first cursor, then go to the next position with the arrows keys and put the second one. </p>

<p><strong>Is there something similar in VIM?</strong> 
With this plugin or another.</p>

<p><strong>EDIT</strong></p>

<p>Following a comment, my interest in doing so appeared when trying to write<br>
<code>\section[My first section in this book]{My first section in this book}</code><br>
in a <code>.tex</code> file. My first reaction was to write <code>\section[]{}</code> and then put two cursors in order to write the same thing inside the <code>[]</code> and <code>{}</code>. </p>

<p>Other example would be to add <code>_someStuff</code> after several different variables names. For example, turn this:</p>

<pre><code>variable1 = 2
my_variable2 = 12
var3 = 14
</code></pre>

<p>into this:</p>

<pre><code>variable1_someStuff = 2
my_variable2_someStuff = 12
var3_someStuff = 14
</code></pre>

<p>With multiple cursors I can do by selecting a column cursor and then going to the end of the word, then inserting, etc. But I guess I would be easy to choose exactly where I want the cursors to be.</p>
","<p><strong>Using multiple cursor isn't a Vimmer thing</strong></p>

<p>As I said in the comments using multi cursors (even with a plugin) isn't really ""following the vim way"", I totally understand that it is attractive for someone coming from Sublime-Text but you can often find alternatives which are at least as efficient with vim built-in features. </p>

<p>Of course finding these alternative solutions isn't always easy and sometimes it takes time but it will get easier with your Vim experience and you'll see that with time multiple cursors will seem totally useless to you.</p>

<p><strong>That's cool but how can I find an alternative way?</strong></p>

<p>There is no universal answer since it depends a lot on what you're trying to do, I'll just try to give some hints about the first things to try:</p>

<hr>

<p><strong>The dot command <code>.</code></strong></p>

<p>The Dot command is probably one of the most powerful tools in Vim, it simply 
allows us to repeat the last change.  I couldn't explain it better than Drew 
Neil in his <a href=""https://pragprog.com/book/dnvim/practical-vim"" rel=""noreferrer"">Practical Vim</a>. I
think that every Vimmer should consider reading this book.</p>

<p>The strength of this command is that the last change can be an action working on
a character, a line or a whole file. For example a change can be delimited be
the moment you enter insert mode and the moment you go back to normal mode.</p>

<p>With that in mind it is easy to do what you wanted to do with multicursor:</p>

<ul>
<li><p>First let's set up our environment: Let's write as you suggested</p>

<p><code>\section[]{}</code></p></li>
<li><p>Then make a <strong>repeatable change</strong>
The cursor is now on <code>}</code>,hit <code>F[</code> to go back on the <code>[</code> character.
Then enter insert mode with <code>i</code> and type <code>My first section in this book</code> and go
back to normal mode with <code>ESC</code>:</p>

<p><code>\section[My first section in this book]{}</code></p></li>
<li><p>And here comes the magic part: 
Let's type <code>f{</code> to put the cursor on the <code>{</code> character and hit <code>.</code> to repeat
the last change:</p>

<p><code>\section[My first section in this book]{My first section in this book}</code></p></li>
</ul>

<p>All the challenge of the dot command is to learn how to make repeatable changes:
it will come with groking vim but the basic is to understand how to make your
change in a repeatable way. </p>

<p>For example to insert a semi colon at the end of a line you'll prefer using 
<code>A;</code> instead of <code>$a;</code>. Why?</p>

<p>Because <code>A;</code> create an atomic action so when you'll use <code>.</code> on another line, no
matter where you are in the line you'll insert the semi colon at the end.
Whereas when using <code>$a;</code> you split your change in two parts <code>$a</code> and the
insertion of <code>;</code> so if you use <code>.</code> it will insert the semi colon on the current
position of the cursor.</p>

<p><strong>NOTE</strong> The magic formula in Vim is <code>n.</code>. A really cool workflow is:</p>

<ul>
<li>search for the place you want to make an edit with <code>/pattern</code></li>
<li>make your repeatable edit</li>
<li>use <code>n</code> to go to the next place to edit</li>
<li>use <code>.</code> to repeat the edit</li>
<li>repeat the last two steps: You're the king of the world (or at least of
edits)</li>
</ul>

<hr>

<p><strong>macros</strong></p>

<p>Macros are another extremely important tool in vim since it allows you to record
a sequence of keystrokes and repeat it as if you typed it again.</p>

<p>I'll use as example your second use case:</p>

<pre><code>variable1 = 2
my_variable2 = 12
var3 = 14
</code></pre>

<p>Once again the important is to learn how to make your macros efficient (I'll
give a counter example just after):</p>

<ul>
<li><p>Put your cursor on the word <code>variable1</code> and begin to record your macro with
<code>qq</code>. This means ""start recording all my future keystrokes in the register
named <code>q</code>"".</p></li>
<li><p>Start making your edit typing: </p>

<ul>
<li><code>0</code> to go at the beginning of the line</li>
<li><code>e</code> to go at the end of the first word</li>
<li><code>a</code> to append after your cursor</li>
<li><code>.someStuff</code> to append the wanted text</li>
<li><code>&lt;Esc&gt;</code> to stop the insertion</li>
<li><code>j</code> to go on the next line</li>
<li><code>q</code> to stop recording the macro</li>
</ul></li>
<li><p>You'll get:</p></li>
</ul>

<pre><code>variable1.someStuff = 2
my_variable2 = 12
var3 = 14
</code></pre>

<ul>
<li>Now you can use the macro to repeat your edit. As you are on the right line to
edit you can simply execute the macro with <code>@q</code>. As we want to execute it two
times you can use <code>2@q</code> and you'll get the following result:</li>
</ul>

<pre><code>variable1.someStuff = 2
my_variable2.someStuff = 12
var3.someStuff = 14
</code></pre>

<p><strong>NOTE 1</strong> As you may have noticed, using <code>Oea</code> at the beginning of the macro
was really important. Indeed if you had put your cursor at the end of the first
word before recording the macro and executing it again your result would have
been:</p>

<pre><code>variable1.someStuff = 2
my_variable2 = 12.someStuff
var3 = 14.someStuff
</code></pre>

<p>As your cursor the text would have been inserted at the position of the cursor
after changing of line (i.e. the end of the line in this case)</p>

<p><strong>NOTE 2</strong> Macros are extremely powerful and you can even create recursive
macros when you are comfortable with them. Here your macro could have been:</p>

<pre><code>`0ea.someStuff&lt;Esc&gt;j@q`
</code></pre>

<p>The final @q would have called the macro by itself instead of using <code>2@q</code> you'd
just have used <code>@q</code> and all the work would have been done.</p>

<hr>

<p><strong>visual block</strong></p>

<p>Here comes another trick that doesn't directly apply to your use case but can't
be really useful to edit a large number of line at the same time. Let's get this
extract of CSS code:</p>

<pre><code>li.one   a{ background-image: url('/images/sprite.png'); }
li.two   a{ background-image: url('/images/sprite.png'); }
li.three a{ background-image: url('/images/sprite.png'); }
</code></pre>

<p>What if you moved the sprites from <code>images</code> to <code>components</code>?</p>

<p>Well you can put your cursor on the <code>i</code> of <code>images</code> and press <code>&lt;C-v&gt;</code>. This will
start the visual block mode which allows to select blocks. Now you can type <code>t/</code>
to select the word you want to change and <code>2j</code> to select all the occurrences of the
word.</p>

<p>After that you simply have to type <code>c</code> to change the word and then <code>components</code>.
When you'll go out of insert mode you'll see:</p>

<pre><code>li.one   a{ background-image: url('/components/sprite.png'); }
li.two   a{ background-image: url('/components/sprite.png'); }
li.three a{ background-image: url('/components/sprite.png'); }
</code></pre>

<hr>

<p><strong>The global command</strong></p>

<p>The global command is a tool which allows to apply an ex mode command on lines
matching a pattern, once again that's a good way to apply the same change on
different place without needing multiple cursors.</p>

<p>The syntax is the following:</p>

<pre><code>:[range] g / pattern / command
</code></pre>

<p>For more details on the <code>[range]</code> parameter please see <code>:h :range</code>. I wont detail
it here, I'll simply remind that <code>%</code> represents the whole file, <code>'&lt;,'&gt;'</code>
represents the last selection, and <code>1,5</code> represents the lines 1 to 5 of the
file.</p>

<p>This parameter defines the lines which will be treated by the global command. If
no range is precised, then the global command will use <code>%</code> by default.</p>

<p>The [pattern] argument is a search pattern as you are used to use with the search
engine. As it integrates the search history you can leave this field blank and
the global command will then use the last search pattern in the search history.</p>

<p>Finally the [command] parameter is an ex command as you are probably used to.</p>

<p>Now the behavior of the global command is pretty simple:</p>

<ul>
<li>Iterate through all the lines defined in the [range] parameter</li>
<li>If the current line matches the defined pattern, apply the command</li>
</ul>

<p>As the [command] parameter is an ex command, you can do a lot of things. Let's
take the following pseudo code which isn't pretty interesting and have a lot of
debugging messages:</p>

<pre><code>var myList  = null
var i       = 0

myList = new List()
echo ""List instantiated""

for (i=0; i&lt;10; i++)
    myList.Add(i)
    echo i . "" added to the list""

echo ""end of for loop""
</code></pre>

<p>Now let's say that you're sure this code works and you want to delete these
useless <code>echo</code> statements:</p>

<ul>
<li><p>You can apply your global command on the whole file so you'll have to prepend
the command with <code>%</code> (or with nothing since <code>%</code> is the default range).</p></li>
<li><p>You know that the lines you want delete all matches the pattern <code>echo</code></p></li>
<li><p>You want to delete these lines so you'll have to use the command <code>:delete</code>
which can also be abbreviated as <code>d</code></p></li>
</ul>

<p>So you'll simply have to use the following function:</p>

<pre><code>:%global/echo/delete
</code></pre>

<p>Which can also be abbreviated as</p>

<pre><code>:g/echo/d
</code></pre>

<p>Note that <code>%</code> disappeared, <code>global</code> is abbreviated as <code>g</code> and <code>delete</code> as <code>d</code>.
As you might imagine the result is:</p>

<pre><code>var myList  = null
var i       = 0

myList = new List()

for (i=0; i&lt;10; i++)
    myList.Add(i)
</code></pre>

<p><strong>NOTE 1</strong> An important point that took me sometime to realized is that the
<code>normal</code> command is an ex command which means that you can use it with the
global command. That can be really powerful: let's say that I want to duplicate
all the lines which contains echo, I don't need a macro or even the magic
formula <code>n.</code>. I can simply use</p>

<pre><code>:g/echo/normal YP
</code></pre>

<p>And voila:</p>

<pre><code>var myList  = null
var i       = 0

myList = new List()
echo ""List instantiated""
echo ""List instantiated""

for (i=0; i&lt;10; i++)
    myList.Add(i)
    echo i . "" added to the list""
    echo i . "" added to the list""

echo ""end of for loop""
echo ""end of for loop""
</code></pre>

<p><strong>NOTE 2</strong> ""Hey what if I want to use my command on lines which doesn't match a
specific pattern?""</p>

<p><code>global</code> has an opposite command <code>vglobal</code> abbreviated <code>v</code> which works exactly
like <code>global</code> excepted that the command will be applied on lines which doesn't
matches the [pattern] parameter. This way if we apply</p>

<pre><code>:v/echo/d
</code></pre>

<p>On our previous example we get:</p>

<pre><code>echo ""List instantiated""
    echo i . "" added to the list""
echo ""end of for loop""
</code></pre>

<p>The <code>delete</code> command has been applied on lines which didn't contained <code>echo</code>.</p>

<hr>

<p>Here I hope that those few hints will give you ideas on how to get rid of your
multi cursor plugin and use Vim in the Vim way ;-)</p>

<p>As you can imagine these examples are pretty simple and are just made to
demonstrate that when you follow the Vim way you really rarely need several
cursors. My advise would be when you encounter a situation where you think it
would be useful, write it down and take some time later to find a better
solution. 99% of the time you'll eventually find a faster/more efficient way to
do it.</p>

<p>Also I will repeat myself one more time but I really encourage you to read
<a href=""https://pragprog.com/book/dnvim/practical-vim"" rel=""noreferrer"">Practical Vim</a> of Drew Neil
because this book is not about ""How to do that or this in Vim"" it is about ""How
to learn to think in the Vim way"" which will allow you to built your own
solution to your future problems in a good way.</p>

<hr>

<p><strong>PS</strong> Special thanks to @Alex Stragies for his editing work and the corrections
he made to this long post.</p>
","4312"
"How can I redefine plugin key mappings?","2274","","<p>I have installed a plugin that doesn't provide a mechanism to disable the key mappings it defines. I want to redefine one of the mappings (<code>&lt;leader&gt;cc</code>) defined by the plugin for my own pursope, I've tried to put the following line in my <code>.vimrc</code>:</p>

<pre><code>noremap &lt;leader&gt;cc echo ""my purpose""
</code></pre>

<p>But this doesn't work, <code>&lt;leader&gt;cc</code> is still executing the plugin command.</p>

<p>How can I define my mapping so that it overrides those defined by the plugin?</p>
","<p>Plugins are sourced <em>after</em> your <code>vimrc</code> so there's no way to override a plugin mapping in your <code>vimrc</code> if the plugin doesn't provide a way to do so. </p>

<p>Placing your custom mapping in <code>~/.vim/after/plugin/mystuff.vim</code> (the name of the file doesn't matter) should allow you to override the plugin mapping.</p>
","763"
"What options are there to enter insert mode?","2259","","<p>I used to enter insert mode by <code>a</code> never realizing that there is a system behind the system as to <em>where</em> the insert mode starts.</p>

<p>Sure, I was sometimes annoyed that <code>a</code> would put the cursor after the first character of a line, yet thing is: It enters the insert mode <em>after</em> the current cursor position. </p>

<p>Then I realized I could enter insert mode at the end of the line using <code>A</code>, or below the current line using <code>o</code>.</p>

<p>What are the ways in normal mode to enter insert mode and what is their difference?</p>
","<h2>Entering insert mode at different locations</h2>

<p>The vim help documents have a great section on this: <code>:help inserting</code></p>

<p>A quick summary is:</p>

<ul>
<li><code>i</code>: Insert before the cursor.</li>
<li><code>I</code>: Insert before the first non-blank character of the line.</li>
<li><code>a</code>: Insert after the cursor. </li>
<li><code>A</code>: Insert at the end of the line.</li>
<li><code>o</code>: Begin a new line below the current line and insert.</li>
<li><code>O</code>: Begin a new line above the current and insert.</li>
<li><code>gI</code>: Insert at column 1 of the line.</li>
<li><code>gi</code>: Insert where insert mode was last stopped.</li>
</ul>

<p>Insert commands take a count as well, so you can type <code>3itest&lt;space&gt;&lt;esc&gt;</code> to get: </p>

<pre><code>test test test 
</code></pre>

<p>Insert commands can be repeated with <code>.</code> as well, so <code>itest&lt;space&gt;&lt;esc&gt;..</code> will yield (because the <code>i</code> inserts before the cursor, which is on the space):</p>

<pre><code>testtesttest 
</code></pre>

<p>Finally, I'll add
<a href=""https://vi.stackexchange.com/users/865/evergreentree"">EvergreenTree's</a> answer
from the comments: You can enter insert mode with <code>:star[tinsert][!]</code> which
works like <code>i</code> unless you give it the option <code>!</code>, in which case it works like
<code>A</code>.</p>

<h2>Modifying text and then entering insert mode</h2>

<p>It is also possible to modify the text in normal mode and enter insert mode at
the end. See <code>:help replacing</code>. A summary of the commands are as follows:</p>

<ul>
<li><code>c</code>: Delete text (and yank to the buffer) and enter insert mode.</li>
<li><code>cc</code>: Delete the line and enter insert mode.</li>
<li><code>C</code>: Delete until the end of the line and enter insert mode.</li>
<li><code>s</code>: Delete a number of characters and enter insert mode.</li>
<li><code>S</code>: Delete a number of line and enter insert mode.</li>
</ul>

<p>Many of these also work on visually selected text.</p>
","5635"
"How to tell vim not to try to unzip a file","2247","","<p>I'm trying to open an <code>.xlsx</code> file in Vim, but got an error saying:</p>

<pre><code>***error*** (zip#Browse) unzip not available on your system  
</code></pre>

<p>I know it's a binary file, but I want to do some checksums and probably convert to hex.</p>

<p>I noticed that if I change the extension, Vim no longer tries to unzip it. Which leads me to my question:</p>

<p>Is there a way to tell vim to open a file without attempting to unzip it?</p>

<p>FWIW, I'm using Vim 7.4 under Windows 7.</p>
","<p>Functionality like this is handled by <a href=""http://vimhelp.appspot.com/usr_40.txt.html#40.3"">autocmds</a>.  In order to disable autocmds for a specific command, you can use <code>:noautocmd</code> (abbreviated <code>:noau</code>).  In this case</p>

<pre><code>:noau e foo.xlsx
</code></pre>

<p>will simply open the raw file rather than triggering the autocmds that try to open the zip file.</p>

<p>You can also use this from your shell:</p>

<pre><code>$ vim -c 'noau e foo.xlsx'
</code></pre>

<p>If you want more granularity than disabling all autocmds, you could temporarily disable the <code>BufRead</code>/<code>BufReadPre</code> autocmds using the <a href=""http://vimhelp.appspot.com/options.txt.html#%27eventignore%27""><code>'eventignore'</code></a> option.</p>

<pre><code>:set ei=BufRead,BufReadPre
:e foo.xlsx
:set ei=
</code></pre>
","2227"
"How do I tell vim that some file extensions are synonymous?","2241","","<p>I edit C++ code in <code>.cpp</code> files, while template code goes into <code>.tcc</code> files. When I open such a file, no syntax highlighting is available. I tried <code>set syntax=cpp</code> in a a <code>tpp.vim</code> file in <code>~/.vim/ftplugin/</code>, but it does not do anything, while in the editor it works. Is there some way to have vim treat specific extensions as synonymous with others?</p>
","<p>The preferred approach is to create a <code>~/.vim/filetype.vim</code>, as mentioned in <code>:help 43.2</code> and explained in <a href=""http://vimhelp.appspot.com/vim_faq.txt.html#faq-26.8"">Vim FAQ 26.8</a>:</p>

<blockquote>
  <p>A better alternative to the above approach is to create a filetype.vim
  file in the ~/.vim directory (or in one of the directories specified
  in the 'runtimepath' option) and add the following lines: </p>

<pre><code>"" my filetype file
if exists(""did_load_filetypes"")
    finish
endif
augroup filetypedetect
    au! BufRead,BufNewFile *.x       setfiletype c
augroup END
</code></pre>
</blockquote>

<hr>

<p><strong>Edit:</strong></p>

<p>The <code>did_load_filetypes</code> shouldn't cause you any problems; it would only require a Vim restart after it is changed.</p>

<p>It is necessary in order to avoid multiple and unnecessary loading of this file, and it is inherited from the base file ($VIMRUNTIME/filetype.vim):</p>

<pre><code>"" Vim support file to detect file types
""
"" Maintainer:   Bram Moolenaar &lt;Bram@vim.org&gt;
"" Last Change:  2014 Jun 12

"" Listen very carefully, I will say this only once
if exists(""did_load_filetypes"")
  finish
endif
let did_load_filetypes = 1
</code></pre>

<p>For more information check <code>:help new-filetype</code>.</p>
","5203"
"How to see if a plugin is active","2228","","<p>How can I determine if a filetype plugin (such as <code>vim-latexsuite</code>) has been installed and activated when I open the appropriate file? Another popular editor would indicate that the relevant ""minor mode"" is active. What's the vim equivalent?</p>
","<blockquote>
  <p>How can I determine if a filetype plugin (such as vim-latexsuite) has been installed</p>
</blockquote>

<p>You could use <a href=""http://vimhelp.appspot.com/repeat.txt.html#%3ascriptnames"" rel=""noreferrer""><code>:scriptnames</code></a> which list all sourced files.</p>

<p>Another option is to check for the variable indicating if the plugin was loaded, as it is <a href=""http://vimhelp.appspot.com/usr_41.txt.html#use%2dcpo%2dsave"" rel=""noreferrer""><code>recommended practice to allow the user to disable the loading of a given plugin.</code></a>. You usually can find <code>g:loaded_...</code> variable inside the <code>&lt;plugin_name&gt;/plugin</code> folder. For the <a href=""https://github.com/wchargin/vim-latexsuite/blob/master/plugin/libList.vim#L65"" rel=""noreferrer"">plugin you mentioned</a> you could use <code>echo exists(""loaded_libList"")</code>.</p>

<blockquote>
  <p>and activated when I open the appropriate file?</p>
</blockquote>

<p>If it is a filetype plugin it should be activated automatically when the <code>'filetype'</code> option is set. You can check if the option is correct for the current buffer:</p>

<pre><code>:set filetype?
</code></pre>

<blockquote>
  <p>Another popular editor would indicate that the relevant ""minor mode"" is active. What's the vim equivalent?</p>
</blockquote>

<p>You could customize your statusline to show such indication, either using plugins or directly through options, as explained in <a href=""http://vimhelp.appspot.com/options.txt.html#%27statusline%27"" rel=""noreferrer""><code>:help 'statusline'</code></a> and at <a href=""https://www.vi-improved.org/recommendations/"" rel=""noreferrer"">vi-improved.org</a>.</p>
","10945"
"Execute bash script from vim","2200","","<p>I use vim for bash scripting. the thing is sometimes I don't want to create a new file, make it executable, execute it and then remove it. I mean the scripts which are going to be used only once.</p>

<p>For instance I open vim and type this:</p>

<pre><code>#!/bin/bash

ll | while read line
do
    echo $line
done
</code></pre>

<p>I did not save this file, I just use vim to simplify bash-scripting. I know I can execute a bash command via <code>!</code> in vim. But what about executing everything that is in the buffer?</p>
","<p>I wrote a pretty extensive answer about this <a href=""https://stackoverflow.com/a/40290101/3524982"">over on stack-overflow</a>. The basic idea is that since the write command is about <em>writing</em> not <em>saving</em>, you can write the text in your buffer into an external program, such as python or bash. In your case, you would want to do something like:</p>

<pre><code>:w !bash
</code></pre>

<p>or</p>

<pre><code>:w !sh
</code></pre>

<p>These commands literally just write the text in your buffer directly into the program you specify with <code>!</code>, which is convenient because then you do not need to save a file. Of course, you may also do something like:</p>

<pre><code>:w | !bash %
</code></pre>

<p>which saves your file and then runs it as a bash script. You can choose whichever one makes more sense for you.</p>
","10211"
"I can't get 256 colours to work with Vim in iTerm2 on MacOS X","2193","","<p>I am having a rough time getting the colors right with my vim setup and the color scheme I want to use. </p>

<p>Using: </p>

<ul>
<li>OSX 10.10.2</li>
<li>Vim 7.4</li>
<li>iTerm2 (Set to report terminal type as ""xterm-256color"")</li>
<li><a href=""https://github.com/morhetz/gruvbox"" rel=""nofollow"">gruvbox theme</a></li>
<li>Using the <a href=""https://github.com/morhetz/gruvbox/wiki/Terminal-specific#a-recommended-256-color-gruvbox-palette-shellscript"" rel=""nofollow"">gruvbox provided osx script</a> to adjust color </li>
<li>Have tried adjusting the <code>set t_Co=256</code> setting in my vimrc</li>
</ul>

<p>Not matter what I have tried, the comment highlighting in my editor <a href=""https://camo.githubusercontent.com/26c7f6f2495059d00675afe881d2e4709f0801ad/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f323331343037342f313236323431302f37326165323337362d326333652d313165332d383330622d3063363235376434656462362e706e67"" rel=""nofollow"">looks like the screenshot of  they show as an example what it should NOT look like.</a> </p>

<p>However - I did try download MacVim, and that worked just fine, but I am NOT interested in using MacVim, so please don't suggest that.</p>
","<p>It looks like gruvbox sets italic on by default for the Comment syntax group if you're running terminal vim, which is a big problem if the terminal does not support italics. iTerm does but you have to get a specific termcap to enable it.</p>

<p>But it looks gruvbox recently fixed this <a href=""https://github.com/morhetz/gruvbox/pull/47"" rel=""nofollow"">issue</a>. So, simply update your gruvbox colorscheme and the issue should be fixed.</p>
","2298"
"Automatically load Vi into insert mode","2192","","<p>I use Vi as my preferred (and, in fact, only) text editor on Linux Systems. I know how to change modes from normal to insert, and vice verse. Is it possible to have Vi automatically load into Insert Mode rather than Normal Mode?</p>
","<p>You can use the <code>+startinsert</code> option (or <code>+star</code> for short) to start Vim with insert mode.</p>

<pre><code>vim +star myfile.txt
</code></pre>

<p>If you want this to happen by default when starting Vim, you can make an alias (in your <code>.bashrc</code> or <code>.zshrc</code> for example) as follows:</p>

<pre><code>alias vim=""vim +startinsert""
</code></pre>

<p>However, that works only when starting Vim. If you want Vim to be in Insert mode even when you open a file from within Vim, add the following to your <code>.vimrc</code>:</p>

<pre><code>au BufRead,BufNewFile * startinsert
</code></pre>
","260"
"Need help for setting up completion for C/C++ with deoplete and neovim","2162","","<p>I'm having some trouble to enable C/C++ completion with deoplete.</p>

<p>I don't know what plugins I should really install and how to configure deoplete to work with them.</p>

<p>I read that for C/C++ completion vim-marching is recommanded, but is it a plugin that would feed deoplete or a completion plugin on itself?</p>

<p>In vim-marching documentation, it says that it requires vim-proc, also and I see some configurations with neocomplete.</p>

<p>Shougo plugins are like an ecosystem with interdependencies and excuse my poor ignorance but I really don't understand who does what, even after reading the (not always explicit) github pages and documentations.</p>

<p>If someone would have the kindness to explains me how to configure C/C++ completion with Shougo's plugins I would really be grateful.</p>

<p>Thank you</p>

<p><em>Edit:</em> </p>

<p><strong>My configuration for deoplete is:</strong></p>

<pre><code>let g:deoplete#enable_at_startup = 0
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif 
</code></pre>

<p>I tried it because I got a lot of error at first without it, and now if I disable that configuration I get `Option 'omnifunc' is not set.</p>

<p><strong>Whith clang_complete I tried this:</strong></p>

<pre><code>let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_default_keymappings = -1
</code></pre>
","<p>The problem came from the python support in neovim, plugins like clang_complete and deoplete needs python support.</p>

<p>To check if python is supported, <code>:echo has('python')</code> should print 1.</p>

<p>If it prints 0, you need to install the python library python-neovim with <code>pip</code> or you're distribution's package manager if a package exists.</p>

<p>I use Archlinux and packages exists, there is two packages: <code>python-neovim</code> and <code>python2-neovim</code>, the first one being for Python3 and the latter for Python2. For me <strong>both packages needed to be installed</strong> to enable Python support, and that is where the problem came from.</p>
","7462"
"Where is my viminfo file on Windows?","2156","","<p>I have gVim 7.4.608 installed on Windows 7 at work.</p>

<p>I've looked in <code>C:\</code> , <code>C:\Users\&lt;username&gt;\AppData</code> , <code>C:\Program Files\vim</code> , <code>C:\Temp</code> but there's no sign of it. It must exist somewhere, command history is working OK. I just want to read the file, I don't care where it actually is.</p>

<p>From <code>:help viminfo</code></p>

<pre><code>The default name of the viminfo file is ""$HOME/.viminfo"" for Unix and OS/2,
""s:.viminfo"" for Amiga, ""$HOME\_viminfo"" for MS-DOS and Win32.  For the last
two, when $HOME is not set, ""$VIM\_viminfo"" is used.  When $VIM is also not
set, ""c:\_viminfo"" is used.  For OS/2 ""$VIM/.viminfo"" is used when $HOME is
not set and $VIM is set.
</code></pre>

<p>The variables <code>%HOME%</code> and <code>%VIM%</code> were not set in my Windows environment.</p>

<p>I couldn't look in directory <code>C:\Users\&lt;username&gt;\Application Data</code>.</p>
","<p>For Windows, the home directory is set in <code>%USERPROFILE%</code>. I believe vim will use this as <code>$HOME</code>.</p>

<p>In my case, the <code>_viminfo</code> is located in the <code>C:\Users\&lt;username&gt;</code>, which is the home directory, while the <code>%HOME%</code> is not set as well. </p>
","2851"
"How does one perform a multi-line copy and paste between two sessions in Vim?","2150","","<p>I am familiar with the <code>y</code>, <code>p</code> method of copying and pasting a line within Vim; however, I have been unsuccessful in finding a straight forward method for copying multiple lines which have been yanked in visual mode. </p>

<p>the idea would be:</p>

<pre><code>Shift + v
down arrow n times
y
:q!
open new file, or switch buffer
p
</code></pre>

<p>When yanking with visual mode, it will copy the first line of the yanked block to your Registers in <code>.viminfo</code>, but nothing else</p>

<p>I would assume you need to create an instance of a clipboard which is global to all sessions of vim attached to a specific user, but I am not well versed enough in Vim to code this up myself.</p>

<p>edit:
As it would appear, I made a mistake in my approach. Using <code>Shift</code>+<code>v</code> is the prescribed method to use when copying and pasting between sessions. Thanks for the help @Doorknob</p>
","<p>Assuming you have a viminfo file (located at <code>~/.viminfo</code> on Linux/Unix systems and <code>$HOME\_viminfo</code> on Windows), all of your buffers should be persistent across Vim sessions.</p>

<p>Note that if you're on a Linux/Unix system, this file must be owned by you (<code>ls -l ~/.viminfo</code> to verify that it is and <code>chown $USER ~/.viminfo</code> if it's not). Otherwise, it will have no effect.</p>
","622"
"Send text from one split window to another","2150","","<p>Recently there was an add-on to NeoVim which allows opening terminal in a vim buffer. This has appealing possibilities to send text from one vim window to another replicating, for example, a REPL like behavior.</p>

<p>In the past I was using tmux for this kind of configuration. However now I would like to try it out using only NeoVim.</p>

<p>My question is - how can I send a block of text from one vim split to another? Or maybe rather - how can I automate the sequence of selecting text, yanking it, changing splits and then pasting?</p>
","<p>Basically when you have text selected, you want to remap a key sequence to copy, switch to terminal, paste, and then possibly switch windows back and reselect the text. If you have two splits open, this would look something like:</p>

<pre><code>vnoremap &lt;F5&gt; y&lt;c-w&gt;wp&lt;c-w&gt;pgv
""explanation:
xnoremap &lt;F5&gt;                   Remap F5 in visual/select mode (could be any key combo)
              y                 copy selected text
               &lt;c-w&gt;w           switch to next window
                     p          paste (for terminals this sends the text to the terminal)
                      &lt;c-w&gt;p    switch to previous window
                            gv  reselect
</code></pre>

<p>If there are more than two splits and the terminal is not the one after where your text is selected, you'd want to either use a different mapping that works for your layout (i.e. <code>&lt;c-w&gt;t</code> moves to the top left window) or you'd want to write a function that loops through all windows and finds the right one.</p>
","2765"
"How to copy first four characters of every line to the end of that same line?","2147","","<p>Given a series of lines that look similar to this:</p>

<pre><code>2001 ""Some Kind of Title,"" Author's Name, Publication Name, 1 Mar.
2002 ""Some Kind of Title,"" Author's Name, Publication Name, 12 Oct.
2003 ""Some Kind of Title,"" Author's Name, Publication Name, 8 Apr.
2004 ""Some Kind of Title,"" Author's Name, Publication Name, 3 Jun.
</code></pre>

<p>Is there a way that I could grab those first four characters (the year), and copy them to the end of the line, so that it looks like this:</p>

<pre><code>2001 ""Some Kind of Title,"" Author's Name, Publication Name, 1 Mar. 2001
2002 ""Some Kind of Title,"" Author's Name, Publication Name, 12 Oct. 2002
2003 ""Some Kind of Title,"" Author's Name, Publication Name, 8 Apr. 2003
2004 ""Some Kind of Title,"" Author's Name, Publication Name, 3 Jun. 2004
</code></pre>
","<pre><code>:% s/\v^(\d{4})(.*)$/\1\2 \1/ 
</code></pre>

<p>is one way to do it</p>

<ul>
<li><code>\v</code> magic option, to avoid having to escape grouping <code>()</code></li>
<li><code>^</code> start of line</li>
<li><code>\d{4}</code> match exactly four digits</li>
<li><code>.*</code> rest of line</li>
<li><code>\1</code> <code>\2</code> has the matched pattern within <code>()</code></li>
</ul>

<p>edit: @Jair Lopez mentions in comments, the regular expression can be further improved:</p>

<pre><code>:% s/\v^(\d{4}).*/&amp; \1/ 
</code></pre>

<p>or the equivalent</p>

<pre><code>:% s/\v^(\d{4}).*/\0 \1/ 
</code></pre>

<ul>
<li><code>&amp;</code> and <code>\0</code> contains the whole matched pattern</li>
</ul>

<p>For further reading, <a href=""http://vimregex.com/#backreferences"" rel=""nofollow noreferrer"">vimregex</a> and <a href=""https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean"">regex FAQ</a></p>
","7563"
"What is the difference between j, CTRL-J, <NL> and CTRL-N in normal mode?","2146","","<p>I saw somewhere on the web someone using <code>Ctrl-J</code> and as I didn't know this mapping I looked up in <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#j"">the relevant doc</a> and found the following:</p>

<pre><code>j           or
&lt;Down&gt;      or
CTRL-J      or
&lt;NL&gt;        or
CTRL-N          [count] lines downward linewise.
</code></pre>

<p>Which leads me to several questions:</p>

<ul>
<li><strong>What is <code>&lt;NL&gt;</code></strong>: I would see it as an equivalent of <code>&lt;CR&gt;</code> since pressing <kbd>Enter</kbd> will go down one line in normal mode by default but why is it <code>&lt;NL&gt;</code> here and not <code>&lt;CR&gt;</code>?</li>
<li><strong>What is the difference between these mappings</strong>: Do all of these 5 options go one line down in the same way? According to my tests I would answer yes but that would lead to my next question.</li>
<li><strong>Why are there 5 mappings to do the exact same thing</strong>: I can understand that <code>j</code> and <code>&lt;down&gt;</code> are kept for users who are not used to vim mappings, but why do the other mappings exist? </li>
<li><strong>When is it more interesting to use one more than the other</strong>: That is a continuation of the previous question: if there is so many possibilities I guess that they have different advantages or are better to use in specific use cases. What are those use cases?</li>
</ul>

<p>I find the redundancy of these commands even more strange when I look at <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#k""><code>:h k</code></a>: there are only 3 ways to go up: <code>k</code>, <code>&lt;UP&gt;</code> and <code>ctrl-p</code>. So the bonus question is: <strong>Why are there 5 ways to go down and only 3 to go up?</strong></p>
","<p>Interesting that you mentioned <code>&lt;CR&gt;</code>. <code>&lt;CR&gt;</code> or carriage return, technically used to mean <em>go to the start of the line</em>. <code>&lt;NL&gt;</code>, or newline aka line feed (usually called <code>LF</code>), was used to mean <em>go to the next line</em>. Over time, the distinction was lost in most applications.<sup>1</sup> Pressing <kbd>Enter</kbd> actually yields a carriage return, usually (try pressing <kbd>Ctrl</kbd><kbd>V</kbd><kbd>Enter</kbd> - you should see <code>^M</code> in Unix terminals). <code>&lt;NL&gt;</code>'s control code is <kbd>Ctrl</kbd><kbd>J</kbd>.</p>

<p><kbd>Ctrl</kbd><kbd>N</kbd> surprised me. According to <a href=""http://manpages.ubuntu.com/ascii.7"" rel=""nofollow noreferrer""><code>man ascii</code></a><sup>2</sup>, it is a <em>shift out</em> character:</p>

<pre><code>Oct   Dec   Hex   Char                        Oct   Dec   Hex   Char
────────────────────────────────────────────────────────────────────────
016   14    0E    SO  (shift out)             116   78    4E    N
</code></pre>

<p>The <em>shift in</em> and <em>shift out</em> characters, according to <a href=""https://en.wikipedia.org/wiki/Shift_Out_and_Shift_In_characters"" rel=""nofollow noreferrer"">Wikipedia</a>:</p>

<blockquote>
  <p>... provided a way to shift, hence the nomenclature, a coloured ribbon, split longitudinally usually with red and black, up and down to the other  colour in an electro-mechanical typewriter or teleprinter ...</p>
</blockquote>

<p>How it ended up meaning <em>go down</em> is a mystery to me.</p>

<hr>

<blockquote>
  <p>Why are there 5 ways to go down and only 3 to go up?</p>
</blockquote>

<p>Well, the three ways to go up all have corresponding ways to go down. (<kbd>Ctrl</kbd><kbd>P</kbd> presumably is the complement of <kbd>Ctrl</kbd><kbd>N</kbd>, implying that the <em>shift in/out</em> is not relevant here). The extra two ways down (<code>&lt;NL&gt;</code> or <kbd>Ctrl</kbd><kbd>J</kbd>) are actually two representations of the same way. <code>&lt;NL&gt;</code> is an inheritance from the typewriter days - and in those days, I don't think there was a key to go up - only to go down.</p>

<p>See also:</p>

<ul>
<li><a href=""https://stackoverflow.com/q/3091524/2072269"">What are carriage return, linefeed, and form feed?</a></li>
</ul>

<p><sup><sup>1</sup> It still matters in some cases (printing <code>\r</code> (carriage return) and <code>\n</code> (line feed) using most formatted printing functions/tools still retain the old meaning.).</sup></p>

<p><sup><sup>2</sup> This table is arranged in such a manner that the alphabet corresponds to the control code of the character on the same line.</sup></p>
","4249"
"How do I break a file into two?","2132","","<p>I am writing some documentation (a user guide),
in markdown in Vim.</p>

<p>I now realise what I though should be one page, really should be 2.
But I've already written alot of of both halves</p>

<p>How can I split the file at the cursor (or some other marker),
into two separate files?</p>

<h3>For Example:</h3>

<p>Wholefile.md:</p>

<pre><code>But I must explain to you how all this mistaken idea of denouncing of a pleasure and 
praising pain was born and I will give you a complete account of the system, and expound 
the actual teachings of the great explorer of the truth, the master-builder of human 
happiness.     
No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but 
because those who do not know how to pursue pleasure rationally encounter consequences 
that are extremely painful. Nor again is there anyone who loves or pursues or desires 
to obtain pain of itself, because it is pain, but occasionally circumstances occur in 
which toil and pain can procure him some great pleasure.
</code></pre>

<p>Part1.md:</p>

<pre><code>But I must explain to you how all this mistaken idea of denouncing of a pleasure and 
praising pain was born and I will give you a complete account of the system, and expound 
the actual teachings of the great explorer of the truth, the master-builder of human 
happiness. 
</code></pre>

<p>Part2.md:</p>

<pre><code>No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but 
because those who do not know how to pursue pleasure rationally encounter consequences 
that are extremely painful. Nor again is there anyone who loves or pursues or desires 
to obtain pain of itself, because it is pain, but occasionally circumstances occur in 
which toil and pain can procure him some great pleasure.
</code></pre>
","<ol>
<li><p>Move the cursor to the last line of Part 1.</p></li>
<li><p>Type <code>Vgg</code> to select the first part, and <code>:w Part1.md&lt;cr&gt;</code> to save that section to the first file.</p></li>
<li><p>Press <code>`&gt;j</code>, which will move the cursor to the first line of Part 2.</p></li>
<li><p>Type <code>VG</code> to select the second part, and <code>:w Part2.md&lt;cr&gt;</code> to save that section to the second file.</p></li>
</ol>
","488"
"How to delete a multi-line match?","2132","","<p>For testing purposes I've opened the following file:</p>

<pre><code>vim http://example.com/
</code></pre>

<p>And I'm using the following command to delete a highlighted multi-line pattern:</p>

<pre><code>:/&lt;body\_.\{-}body&gt;/d
</code></pre>

<p>which matches multiple lines, but only removes for the first line.</p>

<p>As for workaround (for this particular case) it works however when I delete the inner tag block:</p>

<pre><code>:/&lt;body\_.\{-}body&gt;/norm dit
</code></pre>

<p>But it doesn't work when working on non-tag blocks, for example:</p>

<pre><code>:/body {\_.\{-}}/d
</code></pre>

<p>but again, this particular case can be solved by:</p>

<pre><code>:/body {\_.\{-}}/norm d%
</code></pre>

<p>So the question is:</p>

<p>How do I remove a multi-line match at one go in more universal way (which would work in all cases)?</p>
","<p>The feasibility of deleting parts of lines is elusive and a better vimmer than I will have to explain that. If anyone cares to donate an explanation I'd be happy to add it to this answer.</p>

<p>But it's quite possible to delete groups of rows that match a beginning pattern and an ending pattern. The most obvious way, I think, is to combine the <code>:global</code> and <code>:delete</code> commands like this:</p>

<pre><code>:g/&lt;body/ .,/body&gt;/d
</code></pre>

<p>which searches every line in the buffer for the pattern <code>&lt;body</code>. When it finds a match, it constructs the range <code>.,/body&gt;/</code>, i.e. from the line that matched to the next line that matches <code>body&gt;</code> and invokes the <code>:delete</code> command on that range.</p>

<p>This works too:</p>

<pre><code>:g/&lt;body/,/body&gt;/d
</code></pre>

<p>It's the same command, omitting the current-line <code>.</code>.</p>

<p>Also, there's of course the <code>dat</code> operation, but since you didn't use that, I assume it's somehow inadequate. Now, there's usually only one ""body"" element in a html-like document, but if one were to delete all ""foo"" elements, one could use this command:</p>

<pre><code>:g/&lt;foo/ norm! dvatx
</code></pre>

<p>That is, <code>g</code>lobally search for the pattern <code>&lt;foo</code>, at every occurrence invoke the <code>norm</code>al mode command (<code>!</code> disallow mappings here) <code>d</code>elete <code>v</code> (force character-wise, omit or replace with <code>V</code> if line-wise is preferred) <code>a</code>round <code>t</code>ag, and <code>x</code> remove leftover "">"".</p>

<p>As they say, anyone processing sgml/html/xml using regular expressions is of course in a state of sin. Oversimplified schemes like this will blow up from time to time. The only way to be sure is to invoke a filter that runs a dom processor.</p>

<ul>
<li><code>:g</code>: Search-and-apply <a href=""http://vimdoc.sourceforge.net/htmldoc/repeat.html#:g"" rel=""nofollow""><code>:help :g</code></a></li>
<li><code>:d</code>: Delete <a href=""http://vimdoc.sourceforge.net/htmldoc/change.html#:d"" rel=""nofollow""><code>:help :d</code></a></li>
<li><code>[range]</code>: Range specification <a href=""http://vimdoc.sourceforge.net/htmldoc/cmdline.html#[range]"" rel=""nofollow""><code>:help [range]</code></a></li>
<li><code>:norm</code>: Apply normal-mode <a href=""http://vimdoc.sourceforge.net/htmldoc/various.html#:norm"" rel=""nofollow""><code>:help :norm</code></a></li>
<li><code>d</code>: Delete <a href=""http://vimdoc.sourceforge.net/htmldoc/change.html#d"" rel=""nofollow""><code>:help d</code></a></li>
<li><code>v</code>: Force character-wise <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#o_v"" rel=""nofollow""><code>:help o_v</code></a></li>
<li><code>V</code>: Force line-wise <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#o_v"" rel=""nofollow""><code>:help o_v</code></a></li>
<li><code>a</code>: Around selection <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects"" rel=""nofollow""><code>:help text-objects</code></a></li>
<li><code>t</code>: tag selection <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects"" rel=""nofollow""><code>:help text-objects</code></a></li>
</ul>
","5266"
"Vim slows down over time with syntax on","2112","","<p>Is there anything I can do to keep <code>syntax on</code> when using Vim?</p>

<p>As soon as I open anything substantial it becomes nearly impossible to edit after a while. Every keypress causes a delay. If I turn syntax highlighting off or relaunch vim – it is fine again.</p>

<p>I have <code>synmaxcol</code> set to 120. Sample ruby file is only 59 lines long and not exceeding 80 characters.</p>

<p>I am using <code>vim-ruby</code> and <code>vim-rails</code>.</p>

<p>The problem is that the delay seem to accumulate over time. When I open the file from scratch it is fine. After a while it gets slower and slower.</p>
","<p>Recent Vim versions have a <code>:syntime</code> command to troubleshoot slowness of syntax highlighting by generating a report of how long each syntax group takes to match. This is very helpful and quickly lets you find the culprit; the only downside is that you need a (usually ""HUGE"") build of Vim with profiling enabled. <code>:help :syntime</code> provides good instructions how to employ it.</p>

<p>Alternatively, you can try removing individual syntax scripts from <code>~/.vim/syntax/</code> and <code>$VIMRUNTIME/syntax/</code> (according to the current <code>'filetype'</code>), and then further drill down by removing parts of the syntax definitions inside the script.</p>
","2876"
"Truecolor (termguicolors) causes display issues in Tmux","2102","","<p>As far as my setup is concerned, I'm running Tmux 2.2 (with true color support enabled) inside iTerm2 version 3 on a Mac. To clarify, there are <a href=""https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting"">other</a> <a href=""https://vi.stackexchange.com/questions/238/tmux-is-changing-part-of-the-background-in-vim"">questions</a> already answered which address essentially the same problem I am experiencing, but none of the offered solutions (<code>ttyfast</code> or <code>set t_ut=</code>) fix the issue for me unless I turn <code>termguicolors</code> off.</p>

<p>Here's what I see when I run Vim in iTerm2 directly. Everything looks as I expect:</p>

<p><a href=""https://i.stack.imgur.com/itOEx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/itOEx.png"" alt=""Vim in iTerm2""></a></p>

<p>But I end up with strange background issues when I run inside Tmux:</p>

<p><a href=""https://i.stack.imgur.com/oGbpl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oGbpl.png"" alt=""enter image description here""></a></p>

<p>Now the colors are pretty close, so it might be hard to see, but it's actually very jarring when I'm running full screen with split panes and lots of text.</p>

<p>To my eye it looks like the text background color is rendering correctly, and the background color for <em>blank lines</em> renders correctly, but for some reason the background color past the end of the text renders incorrectly. This is probably consistent with other similar questions I've seen.</p>

<p>Here's a picture showing what I mean. Blank lines also render the background color correctly:</p>

<p><a href=""https://i.stack.imgur.com/19q5E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/19q5E.png"" alt=""enter image description here""></a></p>

<p>As a final data point, I ran <code>set termcap</code> to dump the terminal settings and verified that everything matches between when I run Vim in iTerm vs when I run in Tmux.</p>

<p>Some additional details brought out from the comments below:</p>

<ul>
<li>The theme always works in Neovim (v0.1.4), whether I run in Tmux or in iTerm directly. This leads me to believe it is not an issue with the theme, or with Tmux.</li>
<li>The terminal in Tmux is set to <code>screen-256-color</code>. Because of limitations in the way Vim handles <code>termguicolors</code>, this means I end up having to manually set <code>t_8f</code> and <code>t_8b</code> values.</li>
</ul>

<p>If anyone has any suggestions on what I can try to fix this issue, I'm all ears.</p>
","<p>Turns out this was a bug in Vim itself. The problem is resolved as of Vim 7.4.1942.</p>
","8349"
"What does <ctrl-h> do?","2088","","<p>I was just exploring the control key in vim (to make myself more familiar with vim overall) and I don't quite get what exactly happens when I press &lt;ctrl-h&gt;.</p>

<p>So when I used &lt;ctrl-h&gt; in my (modded) vim, it just goes one to the left, <strong>but</strong>, when I'm at the first column of a line, it will go to the previous line instead. Now this functionality would be immensely useful in scripting.</p>

<p>However when I use an unmodded vim (with <code>vim -u NONE</code>), it basically is , i.e. it doesn't do the line changing thing.</p>

<p><code>:help ctrl-h</code> doesn't help me at all, as it talks about netrw, which is nice to know, but I'm interested in the normal mode shortcut.</p>

<p>So my questions are:</p>

<ol>
<li>What settings changed the &lt;ctrl-h&gt; key in my modded vim?</li>
<li>Is there something that does the opposite of &lt;ctrl-h&gt;, i.e. it goes to the right and if it's in the last column, it skips to the next line (if there is one)</li>
</ol>
","<p>It's usually interpreted as a back space.</p>

<blockquote>
  <p>:help ctrl-h doesn't help me at all, as it talks about netrw,</p>
</blockquote>

<p>Try <code>:h CTRL-h</code>, yes case makes a difference for some reason.</p>

<blockquote>
  <p>Is there something that does the opposite of , i.e. it goes to the right and if it's in the last column, it skips to the next line (if there is one)</p>
</blockquote>

<p>Yes, try <code>&lt;Space&gt;</code> for scripting, or <kbd>Space</kbd> in normal mode.</p>
","8604"
"vim doesn't show the command that is being typed","2071","","<p>I was reading <strong>vimtutor</strong> and in lesson 2.1 there was this note about typing commands like <strong>dw</strong>:</p>

<pre><code>NOTE: The letter  d  will appear on the last line of the screen as you type
    it.  Vim is waiting for you to type  w .  If you see another character
    than  d  you typed something wrong; press  &lt;ESC&gt;  and start over.
</code></pre>

<p>but I can't see the commands that I am typing in command line neither in vim or gvim. How can I fix that?</p>
","<p>Add this line into you .vimrc , either source it or restart vim.</p>

<pre><code>set showcmd
</code></pre>

<p>And yes If you are experimenting with your vimrc and tired of sourcing it after every change, add this line.</p>

<pre><code>autocmd BufWritePost .vimrc source %
</code></pre>
","6323"
"How to delete line above/below cursor, but not current line?","2060","","<p>Is there a command for deleting line (or n lines) above current one? Above = current not included.</p>

<p>I.e., is there an alternative to <kbd>d</kbd><kbd>k</kbd> which doesn't delete current line? Similar to how <kbd>o</kbd>/<kbd>O</kbd> and <kbd>p</kbd>/<kbd>P</kbd> work, but with deletion.</p>

<p>Currently, I'm doing <kbd>k</kbd><kbd>d</kbd><kbd>d</kbd>, which moves cursor one line up and deletes it. I could do <code>nnoremap &lt;Leader&gt;d kdd</code> and <code>nnoremap &lt;Leader&gt;D jdd-</code>, but having an alternative which doesn't move the cursor seems like a better option. Is there such?</p>
","<pre><code>:-d
</code></pre>

<p>cuts the line above the current line.</p>

<hr>

<pre><code>:-5d
</code></pre>

<p>cuts the 5th line above the current line (but moves the cursor).</p>

<hr>

<pre><code>:-5,-d
</code></pre>

<p>cuts the 5 lines above the current line.</p>

<hr>

<pre><code>:+,+5d
</code></pre>

<p>cuts the 5 lines below the current line.</p>
","4173"
"Mapping Ctrl+s does not work","2052","","<p>I am trying to map <kbd>Ctrl</kbd>+<kbd>s</kbd> to save my file however it does not work.</p>

<p>My mappings:</p>

<pre><code>map &lt;C-s&gt; :w &lt;CR&gt; :echo ""Saved"" &lt;CR&gt;
imap &lt;C-s&gt; &lt;Esc&gt; :w &lt;CR&gt; :echo ""Saved"" &lt;CR&gt; i
</code></pre>

<p>When in insert mode I see <code>/:echo ""Saved""</code> in the bottom corner instead of <code>saved</code> and when I am in normal mode I see the same thing. What am I doing wrong?</p>

<p>This is at the very top of my vimrc so my other code should not be causing a issue. I am running Vim inside the OSX Terminal.</p>
","<p>To ensure that this workaround runs even when Vim is started by a <strong>separate tool</strong> (such as git), I have this in my <code>~/.vimrc</code>:</p>

<pre><code>"" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon

"" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon
</code></pre>

<p>This has been working for me on Linux, GVim, Mac OS X and MacVim.</p>

<p>Caveats:</p>

<ul>
<li><p>On Windows, or any other OS lacking the <code>stty</code> command, the above will likely throw up errors every time Vim starts!  (<code>silent!</code> might mute that.)</p></li>
<li><p>If your shell already had this TTY setting disabled, of course the <code>VimLeave</code> autocommand will turn it back on again!  Detecting and restoring the current settings is an advantage with @aPyDeveloper's approach.</p></li>
</ul>

<hr>

<p>A combination of this and @aPyDeveloper's solution, which handles compatibility concerns under OS X and Windows, would be great to post up here and/or on the Wiki!</p>

<p>To avoid choosing between <code>stty -g</code> and <code>stty --save</code>, you could try the following test for just the <code>ix</code> option.</p>

<pre><code>call system(""stty -a | grep '\( \|^\)ixon\&gt;' &gt;/dev/null"")
let g:ix_at_startup = (v:shell_error == 0)
</code></pre>
","2425"
"How to select and copy lines to clipboard which are selected by mouse without linenumbers and gutter?","2042","","<p>In my default Vim settings I've enabled a gutter and line numbers. Sometimes I copy some lines to clipboard in order to paste somewhere else. Currently I need to  disable line numbers and the gutter. Otherwise they are included selection and thus in the copied text. Then I select the lines with my mouse and copy them using <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>v</kbd>. After copying I can re-enable line numbers and gutter again. Is it possible without disabling line numbers and gutter?</p>
","<p>The trick is to enable the mouse with <code>:set mouse=a</code>.</p>

<p>By default, Vim doesn't handle the mouse; the terminal emulator does, and from the terminal emulator's perspective ""it's all text"", it can't distinguish between your ""number"" or gutter.<br>
gVim ""emulates"" a terminal emulator in many ways, and acts in the same way.</p>

<p>Then enabling the mouse, it's Vim that does all the mouse handling, and Vim <em>does</em> know what your gutter is, and what your actual text buffer is, so it can handle selection more intelligently.</p>

<p>Note that using <code>set mouse=a</code> has some side-effects; clicking anywhere in Vim will put the cursor there, and you can now scroll Vim buffers with your mouse wheel, instead of your terminal's scrollback (both can be considered either bugs or features, depending on your preferences).</p>
","777"
"How do I deal with very long lines in text (500+ characters)","2037","","<p>For some text formats line breaks matter. For example, I ofen use Vim to write MediaWiki documents, where you can't just put a linebreak anywhere (unlike Markdown). So I'm forced to write lines with a lot of characters.</p>

<p>This can lead to long (200+ chars) to very long (1000+ chars) lines. I find this very awkward to use Vim; for example, if I want to edit something in the middle of the 1000 character-line, I need to move my cursor 500 times. This can be made a bit faster with <code>w</code> or <code>/</code>, but it's still awkward.</p>

<p>Are there better ways to deal with this? Better movement keys? Some sort of ""fake wrapping"" (text behaves as if <code>tw=80</code>, but no <code>\n</code> in the file), or something else?</p>
","<p>You can use <code>g</code> series of commands to move to the boundaries of the visible screen area.  For example, <kbd>g</kbd><kbd>$</kbd> moves to the right edge of the screen (which is not necessarily the end of the line).  <kbd>g</kbd><kbd>j</kbd> moves the cursor down one line <em>as it appears on your screen</em> (which is not necessarily one logical line down).</p>

<p>Perhaps you could rebind the arrow keys:</p>

<pre><code>nnoremap &lt;Up&gt; gk
nnoremap &lt;Down&gt; gj
</code></pre>

<p>Or some people also directly rebind <kbd>k</kbd> and <kbd>j</kbd>:</p>

<pre><code>nnoremap k gk
nnoremap j gj
</code></pre>

<p>For insert mode, you could use:</p>

<pre><code>inoremap &lt;C-k&gt; &lt;C-o&gt;gk
inoremap &lt;C-j&gt; &lt;C-o&gt;gj
</code></pre>

<p>Or:</p>

<pre><code>inoremap &lt;Up&gt; &lt;C-o&gt;gk
inoremap &lt;Down&gt; &lt;C-o&gt;gj
</code></pre>

<hr>

<p>In addition, if you use <code>:set wrap</code>, Vim will wrap the lines, so you can see all of the line. You can also use <code>set showsbreak=+</code> to show a <code>+</code> to indicate that Vim is doing wrapping.</p>

<hr>

<p>To jump to specific column positions, you can use the <kbd>|</kbd> command. For example, <kbd>200|</kbd> will go to column position 200.</p>
","90"
"Is it possible and useful to split vimrc?","2025","","<p>As per the title, is it possible to split the <code>vimrc</code> file in several sub-files?  Keep separate files for groups of settings that concern one <strong><em>thing</em></strong>?  This <em>thing</em> might be anything, any kind of user-defined group of settings. For example,</p>

<p><strong>[updated]</strong></p>

<ul>
<li>keep all <em>Python(-mode)</em> related settings in <code>vimrc.python-mode</code>?</li>
<li>keep settings for the Calendar utility for vim in <code>vimrc.calendar</code>?</li>
<li>keep color setting in a separate file?</li>
<li>keep <em>mappings</em> (aka shortcuts?) in a separate file?</li>
</ul>
","<p>Yes this is possible and useful and even considered best practice. They are called filetype plugins in Vim speech. And Vim even comes with many filetype plugins (as well as indent and syntax files) for several languages.</p>

<p>You need to enable this in your <code>.vimrc</code> like this:</p>

<pre><code>filetype plugin on
</code></pre>

<p>then put your specific filetype settings into a file (creating non-existing directories) called <code>~/.vim/ftplugin/python.vim</code> for python settings. This is also covered in the <a href=""https://vimhelp.appspot.com/vim_faq.txt.html#faq-26.1"">FAQ</a>.</p>

<p><strong>Update (13.11.2015)</strong>
There is also another possibility (if you don't want to use filetype specific options):
If you want to group some options to a specific file, you can make use of the <code>source</code> or <code>runtime</code> command. For example my <code>.vimrc</code> contains this line:</p>

<pre><code>"" This script contains plugin specific settings
source ~/.vim/plugins.vim
"" This script contains mappings
source ~/.vim/mapping.vim
"" additional helper functions:
source ~/.vim/functions.vim
"" For abbreviations read in the following file:
source ~/.vim/abbrev.vim
</code></pre>
","5443"
"How to conditionally load plugins","2004","","<p>I was searching for an answer to this, but haven't found anything yet, so if I missed something obvious, I apologize. I thought it would be a quick google search away, so maybe it's more complicated than I thought.</p>

<p>I'd like to be able to conditionally load plugins based on the type of file I'm editing. For example, when editing python, I don't want the keybindings that <code>vim-sexp</code> installs, but when working on clojure, I do want that plugin to be loaded.</p>

<p>I'm currently using neovim and pathogen, but if there's a different plugin manager that does this for me, I'd be open to switching. Also, if this does exist, does <code>:set syntax whatever</code> switch the plugins? Because that would be super :)</p>

<p>Thanks in advance for any help/direction!</p>
","<p>You can do this with Vim-Plug. See <a href=""https://github.com/junegunn/vim-plug#example"" rel=""nofollow noreferrer"">the README</a>:</p>

<pre><code>"" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
</code></pre>

<p>I think you'll have to use <code>:set filetype whatever</code> instead of <code>set syntax whatever</code> to enable the plugin.</p>

<p>(Some other plugin manager might allow you to do that, see <a href=""https://vi.stackexchange.com/q/388/1841"">What is the difference between the vim plugin managers?</a>)</p>
","6959"
"How to zoom to text in VIM via shortcut?","1997","","<p>I want to zoom in VIM, like Sublime text or Atom, using <code>CTRL +</code> &amp; <code>CTRL -</code> and <code>CTRL 0</code> for reset to default font-size.</p>
","<p>If you are using vim in a terminal you can simply use its zoom shortcuts. For Gnome-Terminal this is <kbd>Ctrl</kbd>+<kbd>+</kbd>. In others it may be <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>+</kbd>.</p>

<p>Also there are several plugins out there for this purpose. e.x: <a href=""https://github.com/drmikehenry/vim-fontsize"">https://github.com/drmikehenry/vim-fontsize</a></p>

<p>As an alternative you can define your own functions like this one from <a href=""http://vim.wikia.com/wiki/Change_font_size_quickly"">vim.wika.com</a></p>

<pre><code>let s:pattern = '^\(.* \)\([1-9][0-9]*\)$'
let s:minfontsize = 6
let s:maxfontsize = 16
function! AdjustFontSize(amount)
  if has(""gui_gtk2"") &amp;&amp; has(""gui_running"")
    let fontname = substitute(&amp;guifont, s:pattern, '\1', '')
    let cursize = substitute(&amp;guifont, s:pattern, '\2', '')
    let newsize = cursize + a:amount
    if (newsize &gt;= s:minfontsize) &amp;&amp; (newsize &lt;= s:maxfontsize)
      let newfont = fontname . newsize
      let &amp;guifont = newfont
    endif
  else
    echoerr ""You need to run the GTK2 version of Vim to use this function.""
  endif
endfunction

function! LargerFont()
  call AdjustFontSize(1)
endfunction
command! LargerFont call LargerFont()

function! SmallerFont()
  call AdjustFontSize(-1)
endfunction
command! SmallerFont call SmallerFont()
</code></pre>

<p>An then map two keys to <code>:LargerFont</code> and <code>:SmallerFont</code></p>
","5805"
"How can I change the indent size?","1974","","<p>I just discovered I could indent and un-indent easily in Vi with : <kbd>&lt;&lt;</kbd> and <kbd>>></kbd></p>

<p>By default it adds a <code>tab</code> character. Now I'm wondering, could this be to a number of spaces via a configuration in my <code>.vimrc</code>? And how should I do it?</p>
","<p>Several settings controls the behavior:</p>

<p>First <code>set expandtab</code> allows to replace the tabs by white spaces characters <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27expandtab%27""><code>:h 'expandtab'</code></a>.</p>

<p>Then <code>set shiftwidth=4</code> makes the tabulations be 4 white spaces <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27shiftwidth%27""><code>:h 'shiftwidth'</code></a>.</p>

<p>You could also be interested by by <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27tabstop%27""><code>:h 'tabstop'</code></a> which defines the number of spaces that a tab character in the file counts for.</p>

<p>As a bonus see <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27smartindent%27""><code>:h 'smartindent'</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27autoindent%27""><code>:h 'autoindent'</code></a> which are pretty useful.</p>
","7977"
"How to write a fold-expr?","1945","","<p>I have read the help page about fold-expr (<a href=""http://vimhelp.appspot.com/fold.txt.html#fold-expr"" rel=""nofollow""><code>:h fold-expr</code></a>) but it didn't explain what's the syntax used in the expression.</p>

<p>There were there four examples:</p>

<ol>
<li><code>:set foldexpr=getline(v:lnum)[0]==\""\\t\""</code></li>
<li><code>:set foldexpr=MyFoldLevel(v:lnum)</code></li>
<li><code>:set foldexpr=getline(v:lnum)=~'^\\s*$'&amp;&amp;getline(v:lnum+1)=~'\\S'?'&lt;1':1</code></li>
<li><code>:set foldexpr=getline(v:lnum-1)=~'^\\s*$'&amp;&amp;getline(v:lnum)=~'\\S'?'&gt;1':1</code></li>
</ol>

<p>I understood that <code>v:lnum</code> is the line that needs an indention level, and that expression two is a call to a function.</p>

<p>what about expressions 1,3 and 4? Can someone please explain them to me?</p>
","<p>From <a href=""http://vimhelp.appspot.com/options.txt.html#%27fde%27"" rel=""nofollow noreferrer""><code>:help 'foldexpr'</code></a>:</p>

<blockquote>
  <p>It is evaluated for each line to obtain its fold level</p>
</blockquote>

<p>The <code>foldexpr</code> is evaluated, so it needs to be VimL code; there is no mention of ""special syntax"" or the like. The result of this evaluation controls what Vim considers a fold or not.</p>

<p>Possible values are </p>

<pre><code>  0                     the line is not in a fold
  1, 2, ..              the line is in a fold with this level
  ""&lt;1"", ""&lt;2"", ..        a fold with this level ends at this line
  ""&gt;1"", ""&gt;2"", ..        a fold with this level starts at this line
</code></pre>

<p>This is <em>not</em> the full list; just the ones used in the examples in your question. See <code>:help foldexpr</code> for the full list.</p>

<hr>

<h1>First</h1>

<p>The first one is fairly simple once we add some spaces and remove the backslashes we need to get this working in a <code>:set</code> command:</p>

<pre><code>getline(v:lnum)[0] == ""\t""
</code></pre>

<ol>
<li><code>getline(v:lnum)</code> gets the entire line.</li>
<li><code>[0]</code> gets the first character of that</li>
<li>and <code>== ""\t""</code> checks if that is a tab character.</li>
<li>VimL doesn't have ""true"" or ""false"", it just uses ""0"" for false, and ""1"" for true. So if this line starts with a tab, it's folded at foldlevel 1. If it doesn't, it's not in a fold (0).</li>
</ol>

<p>If you would expand this to <em>count</em> the number of tabs you would have indentation-based folding (at least, when <code>expandtab</code> isn't enabled).</p>

<hr>

<h1>Third</h1>

<p>The third one is really not that much more complicated as the first one; as with the first example, we first want to make it more readable:</p>

<pre><code>getline(v:lnum) =~ '^\s*$' &amp;&amp; getline(v:lnum + 1) =~ '\S' ? '&lt;1' : 1
</code></pre>

<ol>
<li>We get the entire line with <code>getline(v:lnum)</code></li>
<li>We match that as a regexp with <code>=~</code> to <code>'^\s*$'</code>; <code>^</code> anchors to the start, <code>\s</code> means any whitespace character, <code>*</code> means repeat the previous zero or more times, and <code>$</code> anchors to the end. So this regexp matches (returns true) for blank lines or lines with <em>only</em> whitespace.</li>
<li><code>getline(v:lnum + 1)</code> gets the <em>next</em> line.</li>
<li>We match this to <code>\S</code>, which matches any non-whitespace character anywhere on this line.</li>
<li>If these 2 conditions are true, we evaluate to <code>&lt;1</code>, otherwise, <code>1</code>. This is done with the ""ternary""  <code>if</code> known from C and some other languages: <code>condition ? return_if_true : return_if_false</code>.</li>
<li><code>&lt;1</code> means a fold ends on this line, and <code>1</code> means foldlevel one.</li>
</ol>

<p>So, If we <em>end</em> a fold if the line is blank and the next line is <em>not</em> blank. Otherwise, we're at foldlevel 1. Or, as <code>:h foldexpr</code> says it:</p>

<blockquote>
  <p>This will make a fold out of paragraphs separated by blank lines</p>
</blockquote>

<hr>

<h1>Fourth</h1>

<p>The fourth behaves the same as the third one, but does it in a slightly different way. Expanded, it's:</p>

<pre><code>getline(v:lnum - 1) =~ '^\s*$' &amp;&amp; getline(v:lnum) =~ '\S' ? '&gt;1' : 1
</code></pre>

<p>If the <em>previous</em> line is a blank line, and the <em>current</em> line is a non-blank line, we start a fold on this line (<code>&gt;1</code>), if not, we're setting the foldlevel to 1.</p>

<hr>

<h1>Afterword</h1>

<p>So the logic on all 3 examples is really quite simple. Most of the difficulty comes in the lack of spaces and some of the backslash usage.</p>

<p>I suspect that calling a function has some overhead, and since this is evaluated for every line you want to have a decent performance. I don't know how great the difference is on modern machines though, and would recommend that you use a function (as in the 2nd example) unless you have performance problems. Remember The Knuth: <em>""premature optimisation is the root of all evil""</em>.</p>

<p>This question <a href=""https://stackoverflow.com/q/5977895/660921"">is also on StackOverflow</a>, which has a slightly different answer. But mine is of course better ;-)</p>
","2178"
"What is <Leader>?","1923","","<p>I see <code>&lt;Leader&gt;</code> quite often in other people's vimrc files.
<a href=""http://amix.dk/vim/vimrc.html"">Like this one.</a></p>

<p>What is it? 
What does it do?</p>
","<p>Vim is full of various commands, which are assigned to almost all keys on the keyboard. But this causes a problem: Which commands can we use for our own commands, without interfering with existing ones? And at this moment, the <code>&lt;Leader&gt;</code> key comes into play. Think about <code>&lt;Leader&gt;</code>-key like a namespace for any user-defined commands. You can assign any command to a mapping with a leading <code>&lt;Leader&gt;</code> and you can be fully confident that your mapping won't break anything.</p>

<p>Default key for <code>&lt;Leader&gt;</code> is backslash.</p>
","845"
"Regex to search double quoted strings on multiple lines","1917","","<p>I am trying to write a regular expression that will match all double quoted strings across newlines. I have been fiddling around with the following pattern but it seems to only match strings on the same line.</p>

<pre><code>/\v""\zs(.*|\n*)\ze""
</code></pre>

<p>The pattern should match something like this:</p>

<pre><code>""This is an example
 of a multi, line -- %123 string with
 some random 123 symbol's 
 `inside` \\//&gt;&lt;&gt;&lt; of it""
</code></pre>

<p>What is wrong with the pattern I have?</p>
","<p>You can simply use</p>

<pre><code>/\v""([^""]|\n)*""
</code></pre>

<p>That is,</p>

<pre><code>""       quotation mark
(...)*  followed by 0 or more of...
  [^""]    character that is not a quotation mark
  |\n     or a newline
""       followed by another quotation mark
</code></pre>

<p>This will also ""work"" for ""multiple"" strings ""in the same"" file, because <code>[^""]</code> makes sure that the regex never matches past another quotation mark.</p>

<hr>

<p>Here's an alternative that's shorter but a bit harder to read:</p>

<pre><code>/\v""\_.{-}""
</code></pre>

<p>Explanation:</p>

<pre><code>""    quotation mark
\_.  any character, including a newline (see `:help /\_.')
{-}  non-greedy version of * (see `:help non-greedy')
""
</code></pre>

<p>This also works for multiple strings in the same file due to <code>{-}</code>, which is the lazy equivalent of <code>*</code>.</p>
","2000"
"Don't add new line at the end of a file","1912","","<p>Vim always adds a new line at the end of my files when saving, and it is causing errors in my PHP scripts.</p>

<p>How can I make vim not add this new line on save?</p>
","<p>This isn't a full empty line, just a final newline at the end of the last line. Unix tools (like Vim's heritage) insist on adding that, whereas the Windows operating system is not so strict. You can read more on that at <a href=""https://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline"">Why should files end with a newline?</a></p>

<p>Unfortunately, it's quite complex to prevent Vim from writing the final newline. My <a href=""http://www.vim.org/scripts/script.php?script_id=4550"" rel=""nofollow noreferrer"">PreserveNoEOL plugin</a> can do this. For a discussion of approaches, also see <a href=""https://stackoverflow.com/questions/1050640/vim-disable-automatic-newline-at-end-of-file"">VIM Disable Automatic Newline At End Of File</a>.</p>
","3436"
"What is the order of WinEnter, BufEnter, BufRead, Syntax, FileType events?","1901","","<p>I've gone through the <code>autocmd.txt</code> help, but the information about this is scattered and not always present (eg. with <code>BufRead</code>). </p>

<p>Could someone who understands this well list the order of these events - with perhaps the conditions marked in parantheses, like </p>

<pre><code>WinEnter   
BufEnter (if this window is for a different buffer than the current)
</code></pre>

<p>and so on, for easy reference?</p>

<p>Note <sup>(copied from my own comment below)</sup>:  I'm not talking about individual explanations of them, which are OK, but about how they interact with one another and in what order they happen. For eg., <code>WinEnter</code> says ""Vim executes the BufEnter autocommands after the WinEnter autocommands"", <code>TabEnter</code> says ""After triggering the WinEnter and before triggering the BufEnter event"", it's all scattered like this into many places. And sometimes it's not mentioned at all (for eg. <code>BufRead</code> doesn't mention whether it runs after BufEnter or before - maybe an expert can infer it from some other piece of info there, but I can't.<br>
So, my intent here is to create a single, simple reference for the order of these events that can be looked up quickly by non-experts, in order to be more precise in our <code>autocmd</code> event specifications.</p>
","<p>I tried googling for this with different sets of keywords, and struck gold on one such attempt with this result: <a href=""http://www.ibm.com/developerworks/library/l-vim-script-5/"">http://www.ibm.com/developerworks/library/l-vim-script-5/</a></p>

<p>Specifically, this part is relevant to the current question: </p>

<blockquote>
  <p>For example, if you start Vim, edit a file named demo.txt, swap into Insert mode, type in some text, save the file, and then exit, your Vim session receives a series of events like what is shown in Listing 1.</p>
  
  <p>Listing 1. Event sequence in a simple Vim editing session</p>
  
  <p>> vim</p>
  
  <ol>
  <li>BufWinEnter     (create a default window)  </li>
  <li>BufEnter        (create a default buffer)  </li>
  <li>VimEnter        (start the Vim session)<strong>:edit demo.txt</strong>  </li>
  <li>BufNew          (create a new buffer to contain demo.txt)  </li>
  <li>BufAdd          (add that new buffer to the session’s buffer list)  </li>
  <li>BufLeave        (exit the default buffer)  </li>
  <li>BufWinLeave     (exit the default window)  </li>
  <li>BufUnload       (remove the default buffer from the buffer list)  </li>
  <li>BufDelete       (deallocate the default buffer)  </li>
  <li>BufReadCmd      (read the contexts of demo.txt into the new buffer)  </li>
  <li>BufEnter        (activate the new buffer)  </li>
  <li>BufWinEnter     (activate the new buffer's window)i  </li>
  <li>InsertEnter     (swap into Insert mode)  </li>
  </ol>
</blockquote>

<p>It's still not entirely comprehensive (eg. no mention of <code>BufRead</code> aka <code>BufReadPost</code>, but I'm assuming it would come after <code>BufReadCmd</code>), but it's an excellent start. </p>

<p>One crucial missing piece of information though is how the <code>FileType</code> and <code>Syntax</code> autocmd events interact with this (assuming <code>filetype</code> and <code>syntax</code> are already on, and a new file is opened whose filetype and syntax are known to Vim). </p>
","4495"
"How can I jump to the next ""paragraph""?","1897","","<p>Right now I'm working with some blocks of text that are over 1000 lines long. Is there a simple way to move to the beginning of the next paragraph? </p>

<p>My workaround for now is searching for two consecutive newline characters:</p>

<pre><code>/\n\n
</code></pre>

<p>Another workaround would be <code>vip</code> <kbd>Esc</kbd> <code>j</code></p>

<ul>
<li><p><code>vip</code> <strong>v</strong>isually select <strong>i</strong>n <strong>p</strong>aragraph (which also takes you to the end of the paragraph)</p></li>
<li><p><kbd>Esc</kbd> Escape from visual selection</p></li>
<li><p><code>j</code> move down </p></li>
</ul>
","<p>Yes, you can use the <kbd>}</kbd> and <kbd>{</kbd> paragraph motions to move a paragraph forwards or backwards.</p>

<p>From <a href=""http://vimhelp.appspot.com/motion.txt.html#paragraph""><code>:help paragraph</code></a>:</p>

<blockquote>
  <p>A paragraph begins after each empty line, and also at each of a set of
  paragraph macros, specified by the pairs of characters in the <code>'paragraphs'</code>
  option.  The default is ""IPLPPPQPP TPHPLIPpLpItpplpipbp"", which corresponds to
  the macros "".IP"", "".LP"", etc.  (These are nroff macros, so the dot must be in
  the first column).  A section boundary is also a paragraph boundary.
  Note that a blank line (only containing white space) is NOT a paragraph
  boundary.<br>
  Also note that this does not include a <code>'{'</code> or <code>'}'</code> in the first column.  When
  the <code>'{'</code> flag is in <code>'cpoptions'</code> then <code>'{'</code> in the first column is used as a
  paragraph boundary posix.</p>
</blockquote>

<p>Like you would expect, you can of course add a count and/or operator; eg. <kbd>2}</kbd> to move 2 paragraps fowards. Or to delete the previous 2 paragraphs you can use <kbd>3d{</kbd>.</p>

<p>Also see <a href=""http://vimhelp.appspot.com/motion.txt.html#object-motions""><code>:help object-motions</code></a></p>
","2368"
"Replace a pattern with current line number","1883","","<p>I'd like to replace 'x' in this file with current line number. That is, change</p>

<pre><code>x
x
x
</code></pre>

<p>to</p>

<pre><code>1
2
3
</code></pre>

<p>For now, I use a Perl one-liner:</p>

<pre><code>perl -pi -e '$x=$.; s/x/$x/' myfile.txt
</code></pre>

<p>I think UltraEdit can do it with a vertical select and replace. Can this be done in vim? (My example here assumes 'x' is all there is on one line. But the lines in my real file are much more complicated.)</p>
","<p>Yes, vim can do this! Do a global search for <code>x</code>, and replace it with <code>\=printf(""%d"", line('.')</code>. For example:</p>

<pre><code>:%s/x/\=printf(""%d"", line('.'))
</code></pre>

<p>You can also change <code>x</code> to another search, if you need to.</p>

<p>Explanation:</p>

<p>This replaces every occurence of <code>x</code> (or whatever you search for) with the evaluation register <code>\=</code>. This register evaluates vimscript code, and returns a string. In this case, the code being evaluated is ""Print the line we are on as a decimal number""</p>
","8180"
"Undo Only Window","1882","","<p>Consider a case with multiple splits in a window. vim allows quickly ""maximizing"" the current split to take up the whole window via <code>&lt;C-W&gt;</code> <code>o</code>. </p>

<p>Is there a way get vim to ""remember"" the splits that existed before and revert to this state after executing <code>&lt;C-W&gt;</code> <code>o</code>?</p>

<p>EDIT: To clarify, I'm looking for a way to do this without the use of any third-party plugins.</p>
","<p>The simplest way to do this is probably with session files, which are vim scripts (that vim can automatically produce for you) that will restore a previous editing environment.</p>

<p>You can create a new session file using <code>:mksession &lt;filename&gt;</code>. You can restore that session by executing the generated session script, <code>:source &lt;filename&gt;</code>.</p>

<p>Thus, you could save the current session prior to maximizing a window and restore it when you want to ""unmaximize"" the window.</p>

<p>Using this, you could remap the appropriate windowing commands to save a session beforehand, and add a new mapping for one to ""undo"" the last windowing command by restoring the session. For example:</p>

<ul>
<li><code>nnoremap &lt;C-w&gt;o :mksession! ~/session.vim&lt;CR&gt;:wincmd o&lt;CR&gt;</code> and so on for all the windowing commands you want to support (see <code>:help CTRL-W</code>, there's a lot). The <code>!</code> prevents errors relating to overwriting an existing session file.</li>
<li><code>nnoremap &lt;C-w&gt;u :source ~/session.vim&lt;CR&gt;</code> to ""undo"" the last windowing command.</li>
</ul>

<p>If you wanted to be particularly robust, you could extend this via functions to save the session files in a stack and pop them off to get a full undo chain, although at that point it's probably more efficient to write a bunch of functions to track the window command history in memory... at which point you are likely duplicating the plugins that do this sort of thing already.</p>
","537"
"Vim syntax pattern to highlight python keyword argument","1877","","<p>I'm struggling with learning vim regexps (I don't know any other regexp very well either), so the main problem is to define regexp that would match</p>

<pre><code>some_function_call(simple_value, keyword=value)
</code></pre>

<p>keyword in this example.</p>

<p>So it should match a word if it's inside parens and have equal sign after it.</p>

<p>The next problem is how to define syntax files in vim. I would appreciate help with that, but It shouldn't be that hard to learn, so I can do that on my own probably.</p>

<p>EDIT based on the answer I've maid my own syntax script for python. Feel free to try it.
<a href=""https://github.com/purpleP/python-syntax"" rel=""nofollow"">enter link description here</a></p>
","<p>With these settings:</p>

<pre><code>syn region FCall start='[[:alpha:]_]\i*\s*(' end=')' contains=FCall,FCallKeyword
syn match FCallKeyword /\i*\ze\s*=[^=]/ contained
hi FCallKeyword ctermfg=yellow
</code></pre>

<p>I get:</p>

<p><a href=""https://i.stack.imgur.com/VPgjF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VPgjF.png"" alt=""enter image description here""></a></p>

<p>Here:</p>

<ol>
<li>I define a <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-region"" rel=""nofollow noreferrer"">syntax region</a> within which keyword arguments can be found, which would be the function call. The <code>contains</code> option lets me nest function calls.</li>
<li>Within that region, I match any string made of valid identifier characters (<code>\i*</code>) followed by <code>=</code>, but not <code>==</code>, so that equality tests are not matched.</li>
</ol>

<p>By using regions, I get to nest the matches as much as I need, which would have be very complicated (impossible?) if I'd gone for just a <code>match</code> with regular expressions.</p>

<p>I believe the regular expressions used for matching the function call and the keyword can be refined, but considering <a href=""https://stackoverflow.com/a/19482755/2072269"">what's valid in Python 3</a>, that's not a task I'm willing to take on.</p>

<p>Optionally, I think you can use this to highlight function calls, using a <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-matchgroup"" rel=""nofollow noreferrer""><code>matchgroup</code></a>:</p>

<pre><code>syn region FCall matchgroup=FName start='[[:alpha:]_]\i*\s*(' end=')' contains=FCall,FCallKeyword
syn match FCallKeyword /\i*\ze\s*=[^=]/ contained
hi FCallKeyword ctermfg=yellow
hi FName ctermfg=blue
</code></pre>

<p><a href=""https://i.stack.imgur.com/ws9ov.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ws9ov.png"" alt=""enter image description here""></a></p>
","6963"
"How can I check if Vim is 32 bit or 64 bit? (On Linux!)","1865","","<p>How can I find out if the vim I'm using is 32 or 64 bit? I'm using Ubuntu so <a href=""https://vi.stackexchange.com/questions/3234/how-to-check-whether-vim-is-built-as-a-32-bit-or-64-bit-application"">this</a> doesn't apply to me, I think. Also I checked</p>

<pre><code>:version
</code></pre>

<p>and got this output:</p>

<pre><code>VIM - Vi IMproved 7.3 (2010 Aug 15, compiled May  4 2012 04:21:49)
Inklusive der Korrekturen: 1-429
Verändert von pkg-vim-maintainers@lists.alioth.debian.org
Übersetzt von buildd@
Riesige Version mit GTK2 GUI. Ein- (+) oder ausschließlich (-) der Eigenschaften:
+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info
 +comments +conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con_gui +diff +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra
+extra_search +farsi +file_in_path +find_in_path +float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand +jumplist +keymap
+langmap +libcall +linebreak +lispindent +listcmds +localmap +lua +menu +mksession +modify_fname +mouse +mouseshape +mouse_dec +mouse_gpm
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +mouse_urxvt +multi_byte +multi_lang -mzscheme +netbeans_intg +path_extra +perl
+persistent_undo +postscript +printer +profile +python -python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs +smartindent -sniff
+startuptime +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white +tcl +terminfo +termresponse +textobjects +title
+toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup +X11
-xfontset +xim +xsmp_interact +xterm_clipboard -xterm_save
          System-vimrc-Datei: ""$VIM/vimrc""
        Benutzer-vimrc-Datei: ""$HOME/.vimrc""
         Benutzer-exrc-Datei: ""$HOME/.exrc""
         System-gvimrc-Datei: ""$VIM/gvimrc""
       Benutzer-gvimrc-Datei: ""$HOME/.gvimrc""
           System-Menü-Datei: ""$VIMRUNTIME/menu.vim""
     Voreinstellung für $VIM: ""/usr/share/vim""
Übersetzt: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/
include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0
-I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12     -g -O2 -fstack-protecto
r --param=ssp-buffer-size=4 -Wformat -Wformat-security -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     -I/usr/include/tcl8.5  -
D_REENTRANT=1  -D_THREAD_SAFE=1  -D_LARGEFILE64_SOURCE=1
Linken: gcc   -L. -Wl,-Bsymbolic-functions -Wl,-z,relro -rdynamic -Wl,-export-dynamic  -Wl,-E  -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-nee
ded -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfo
ntconfig -lgobject-2.0 -lglib-2.0   -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl  -L/usr/
lib -llua5.1  -Wl,-E  -fstack-protector -L/usr/local/lib  -L/usr/lib/perl/5.14/CORE -lperl -ldl -lm -lpthread -lcrypt -L/usr/lib/python2.7/config
 -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions  -L/usr/lib -ltcl8.5 -ldl -lpthread -lieee -lm -
lruby1.8 -lpthread -lrt -ldl -lcrypt -lm  -L/usr/lib
</code></pre>

<p>but it doesn't look like it tells me what I want to know.</p>
","<p>Since you're on Ubuntu, use the <a href=""http://manpages.ubuntu.com/file.1"" rel=""nofollow noreferrer""><code>file</code></a> command:</p>

<pre><code>$ file -L ""$(command -v vim)""
/usr/bin/vim.gnome: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=acb723f1249782755116f93ed45a30e7115ff423, stripped
</code></pre>

<p>As you can see, my <code>vim</code> is 64-bit. </p>

<p>We need to use  <code>-L</code> since <code>/usr/bin/vim</code> on Ubuntu is a symlink, managed by the <a href=""https://wiki.debian.org/DebianAlternatives"" rel=""nofollow noreferrer"">Debian alternatives system</a>, and GNU <code>file</code> by default doesn't follow symlinks (thanks to Random832 for pointing this out!).</p>

<p>Or you can check the package architecture:</p>

<pre><code>$ dpkg-query -f '${Package;10}\t${Architecture}\n' -W vim vim-gnome
       vim  amd64
 vim-gnome  amd64
</code></pre>

<hr>

<p>Both of the above commands check the default <code>vim</code> as Carpetsmoker notes. Within Vim, you can do something like:</p>

<pre><code>if system('file -L ""' . exepath(v:progpath) . '""') =~ ""64-bit""
    echo ""yes""
endif
</code></pre>

<p>Or we can use Carpetsmoker's suggestion of the <code>/proc/$PID/exe</code> special link, which should be the most portable across Linux systems:</p>

<pre><code>if system('file -L /proc/' . getpid() . '/exe' ) =~ ""64-bit""
    echo ""yes""
endif
</code></pre>

<hr>

<p><code>/proc/$PID/exe</code> is special. You can obtain the original executable for that process from <code>/proc/$PID/exe</code> even if it has been deleted, moved or replaced. In such cases, the output of <a href=""http://manpages.ubuntu.com/readlink.1"" rel=""nofollow noreferrer""><code>readlink</code></a> or <code>resolve()</code> on it may not be what you expect. For example, using a temporary copy of <code>bash</code> for illustration:</p>

<pre><code>$ readlink  -f /proc/$$/exe
/tmp/bash (deleted)
$ file ""$(readlink -f /proc/$$/exe)""
/tmp/bash (deleted): ERROR: cannot open `/tmp/bash (deleted)' (No such file or directory)
</code></pre>

<p>However, instructing <code>file</code> to follow the symlink, or using <code>file - &lt; /proc/self/exe</code> to read directly from it, which works fine:</p>

<pre><code>$ file -L /proc/$$/exe
/proc/10958/exe: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b73723270773c893cf697d20c8d698f86a51635d, stripped
$ file - &lt; /proc/self/exe
/dev/stdin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b73723270773c893cf697d20c8d698f86a51635d, stripped
</code></pre>

<p>We can't use the <code>/proc/self/exe</code> shortcut in Vim's call to <code>system()</code>, or as an argument to <code>file</code>, since then <code>self</code> will refer to the shell used to execute the command (if we used <code>file - &lt;/proc/self/exe</code>), or to <code>file</code> itself (if we used <code>file -L /proc/self/exe</code>). We <em>could</em> use <code>/proc/self/exe</code> if we were to read the file from Vim directly - which is what <a href=""https://vi.stackexchange.com/a/3763/205"">Carpetsmoker's answer</a> does.</p>
","3762"
"How to replace more than one character without entering insert mode","1853","","<p>I have a file with a line that looks like this:</p>

<pre><code>foofoo.xy.barbar
</code></pre>

<p>I want to change the <code>xy</code> to <code>gh</code>. I tried to do <kbd>2</kbd><kbd>r</kbd> -> <kbd>g</kbd><kbd>h</kbd>, but obviously that didn't work, as it replaced the <code>xy</code> with <code>gg</code> and then moved my cursor one spot to the left.</p>

<p>Is there a way to do this without entering insert mode, or without using a lot more keystrokes (e.g. <kbd>:s/xy/gh/</kbd>)?</p>
","<p>If the new text is the same length as the old text, Vim's <strong>replace mode</strong> is an option. From normal mode, <kbd>R</kbd> (that's a capital ""r"") brings you into replace mode. This is similar to ""overwrite"" in some other text editors: instead of inserting new characters like in insert mode, typing will replace the character under the cursor, and then advance to the next cursor. (Think of it like the lower-case <code>r</code>, but for more than just a single character at a time.) Find the documentation for replace mode with <a href=""http://vimdoc.sourceforge.net/htmldoc/insert.html#mode-replace""><code>:help replace-mode</code></a>.</p>

<p>In your case: with the cursor between the <code>.</code> and the <code>x</code>, get in to replace mode by pressing <kbd>R</kbd>. Now when you type <kbd>g</kbd> it replaces the ""x"" and moves to the next character, so you can type <kbd>h</kbd> to replace the ""y"". Your edit is done now, so <kbd>Escape</kbd> to return to to normal mode.</p>

<p>(This works when your replacement text is the same length as the old text, but if your replacement is longer or shorter, <code>c</code> might be all you need: it will replace<sup>1</sup> the text within a movement, with the text you then type. There are many ways to do use <code>c</code>, for example: with the cursor between the <code>.</code> and <code>x</code>, <kbd>c</kbd><kbd>t</kbd><kbd>.</kbd><code>ABC</code><kbd>Escape</kbd> says to <strong>c</strong>hange the text (up '<strong>t</strong>il the next <strong><em><code>.</code></em></strong>) with ""ABC"".)</p>

<hr>

<p><sup>1</sup> It'll yank the text in the movement into <a href=""http://usevim.com/2012/04/13/registers/"">the unnamed/<code>""</code> register</a> and then switch into insert mode, so that you can type something to replace it, and then <kbd>Escape</kbd> back to normal mode.</p>
","719"
"Does ""dap"" delete everything?","1848","","<p>I'm familiar with the ""dd"" and ""d{motion}"" commands, but can't find ""dap"" in vim's help.txt. What does ""dap"" do in normal mode and why? (Alternatively, how can I find out this sort of thing for myself?)</p>
","<p>""dap"" does not actually delete everything. For example, try putting this into your buffer:</p>

<pre><code>1
1

2
2

3
3
</code></pre>

<p>Then put your cursor on either '2' and type ""dap"". It'll leave the '1's and '3's.</p>

<p>This is because ""dap"" deletes a <em>paragraph</em>. In fact, that's actually the mnemonic: ""(D)elete (A) (P)aragraph"". You can see it in the help under <code>:h ap</code>:</p>

<pre><code>                            *v_ap* *ap*
ap          ""a paragraph"", select [count] paragraphs (see
            |paragraph|).
            Exception: a blank line (only containing white space)
            is also a paragraph boundary.
            When used in Visual mode it is made linewise.
</code></pre>

<p>This is called a ""text object"". You can read about these under: <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects""><code>:h text-objects</code></a>, or you can read <a href=""http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"">this awesome article on text objects.</a></p>

<p>Either way, the basic idea of text-objects is that you are defining the boundaries of an <em>object</em> and then apply commands to that whole object even when you're in the middle of it. For example, I'm sure you know you can use <code>dw</code> to delete a word. But what if you're in this scenario?</p>

<pre><code>Hello world
Cursor: ^
</code></pre>

<p>If you type <code>dw</code>, you'll still have the <code>wo</code> left. If you type <code>diw</code>, that will delete <em>inside of the word</em>, so for the most part it's equivalent to typing <code>bdw</code>.</p>

<blockquote>
  <p>How can I find out this sort of thing for myself?</p>
</blockquote>

<p>You had the basic idea down! Checking the help is always a good start. In this case, you could have realized that <code>d</code> is an operator, so the help you were really looking for was the argument to the operator, in this case <code>ap</code>. </p>
","11102"
"How to enter insert mode when entering neovim terminal pane?","1843","","<p>I have the following mappings to make it easy to move out of a terminal pane in neovim:</p>

<pre><code>tnoremap &lt;C-h&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;C-w&gt;h
"" Workaround since &lt;C-h&gt; isn't working in neovim right now
tnoremap &lt;C-w&gt;h &lt;C-\&gt;&lt;C-n&gt;&lt;C-w&gt;h
tnoremap &lt;C-j&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;C-w&gt;j
tnoremap &lt;C-k&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;C-w&gt;k
tnoremap &lt;C-l&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;C-w&gt;l
</code></pre>

<p>The only problem is that when I move back into the terminal pane, I have to press <code>i</code> to get back into insert mode. I always want it to be in insert mode when I move into a neovim pane that is running terminal. What's the best way to achieve this?</p>
","<p>A terminal buffer name always starts with <code>term://</code>:</p>

<p><code>autocmd BufWinEnter,WinEnter term://* startinsert</code></p>

<p>Note that this will always put you in insert mode when you move to the terminal window, regardless of the mode you were using when leaving the window.</p>

<hr>

<p>You can also use a similar autocommand to always get back in normal mode when you leave the terminal window, no matter how you leave this window:</p>

<p><code>autocmd BufLeave term://* stopinsert</code></p>
","3765"
"Set path to location of tags file","1832","","<p>I think this is not <em>quite</em> a duplicate, although it's close.</p>

<p>I often work with multiple, slightly different, checkouts of the same multi-directory project. I'd like to be able to jump around using tags and gf, always staying within the current checkout, without having to type anything at startup. </p>

<p>There is a different tags file at the top-level directory of each checkout. The checkouts are numerous and their locations far from static, so hard-coding in paths is not an acceptable solution.</p>

<p>A simple</p>

<pre><code>set tags=tags;/
</code></pre>

<p>seems to work acceptably for the tags part. But to get gf to work I need to append the location of the tags files thus found (notably including the top-level directory) to the path somehow. Any ideas on how to do this?</p>
","<pre><code>let &amp;path += fnamemodify(tagfiles()[0], ':p:h')
</code></pre>

<p>should add the path of your <code>tags</code> file's parent directory to the <code>path</code> option.</p>

<p>Updating <code>path</code> each time you enter a buffer is probably a good idea:</p>

<pre><code>augroup UpdatePath
    autocmd!
    autocmd BufNewFile,BufRead,BufEnter * set path&amp;vim | let &amp;path += fnamemodify(tagfiles()[0], ':p:h')
augroup END
</code></pre>
","2968"
"Why does vim allow integer division by zero?","1827","","<p>I just discovered that vim obviously allows division by zero:</p>

<pre><code>:let a=42/0
:echo a
</code></pre>

<p>prints <code>2147483647</code> (which is the value of <code>a</code>).</p>

<p>Is this documented somewhere and why does vim allow division by zero?</p>
","<p>This behavior is documented under <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html"">eval section</a>:</p>

<pre><code>When dividing a Number by zero the result depends on the value:
      0 / 0  = -0x80000000  (like NaN for Float)
     &gt;0 / 0  =  0x7fffffff  (like positive infinity)
     &lt;0 / 0  = -0x7fffffff  (like negative infinity)
    (before Vim 7.2 it was always 0x7fffffff)
</code></pre>
","4632"
"Installation of YouCompleteMe","1820","","<p>I have been trying to install <code>YouCompleteMe</code> for a long time. At first, I failed because I need to build <code>Vim</code> having python support. Now I have it solved, but I always fail at building <code>YouCompleteMe</code> itself because of various kinds of problems (if you guys want to help me on this, that's okay too :-)). The build log of <code>YouCompleteMe</code> is this (using only <code>./install.py</code>):</p>

<pre><code>./install.py
-- The C compiler identification is GNU 5.3.1
...... Successful Detects ......
-- Detecting CXX compile features - done
Your C++ compiler supports C++11, compiling in that mode.
-- Found PythonLibs: /usr/local/lib/libpython2.7.a (found suitable version ""2.7.10"", minimum required is ""2.6"") 
-- Found PythonInterp: /usr/local/bin/python2 (found suitable version ""2.7.10"", minimum required is ""2.6"") 
NOT using libclang, no semantic completion for C/C++/ObjC will be available
-- Found PythonInterp: /usr/local/bin/python2 (found version ""2.7.10"") 
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/ycm_build.jmI4vO
Scanning dependencies of target BoostParts
[  0%] [  2%] [  2%] Building CXX object BoostParts/CMakeFiles/BoostParts.dir/libs/atomic/src/lockpool.cpp.o
...... Successfully Builds ......
[ 92%] Building CXX object ycm/CMakeFiles/ycm_client_support.dir/PythonSupport.cpp.o
In file included from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/type_traits/ice.hpp:15:0,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python/detail/def_helper.hpp:9,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python/class.hpp:29,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python.hpp:18,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/PythonSupport.h:21,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ycm_client_support.cpp:19:
/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/type_traits/detail/ice_or.hpp:17:71: note: #pragma message: NOTE: Use of this header (ice_or.hpp) is deprecated
 # pragma message(""NOTE: Use of this header (ice_or.hpp) is deprecated"")
                                                                       ^
...... Some similar messages ......
In file included from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/type_traits/ice.hpp:18:0,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python/detail/def_helper.hpp:9,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python/class.hpp:29,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/python.hpp:18,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/PythonSupport.h:21,
                 from /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/ycm_core.cpp:19:
/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/BoostParts/boost/type_traits/detail/ice_eq.hpp:17:71: note: #pragma message: NOTE: Use of this header (ice_eq.hpp) is deprecated
 # pragma message(""NOTE: Use of this header (ice_eq.hpp) is deprecated"")
                                                                       ^
[ 96%] Building CXX object ycm/CMakeFiles/ycm_client_support.dir/CustomAssert.cpp.o
[ 97%] Building CXX object ycm/CMakeFiles/ycm_client_support.dir/Result.cpp.o
[ 98%] [100%] Building CXX object ycm/CMakeFiles/ycm_core.dir/CustomAssert.cpp.o
Building CXX object ycm/CMakeFiles/ycm_core.dir/Result.cpp.o
Linking CXX shared library /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_client_support.so
/usr/bin/ld: /usr/local/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32S against `_Py_NotImplementedStruct' can not be used when making a shared object; recompile with -fPIC
/usr/local/lib/libpython2.7.a: error adding symbols: Bad value
collect2: error: ld returned 1 exit status
ycm/CMakeFiles/ycm_client_support.dir/build.make:387: recipe for target '/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_client_support.so' failed
make[3]: *** [/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_client_support.so] Error 1
CMakeFiles/Makefile2:130: recipe for target 'ycm/CMakeFiles/ycm_client_support.dir/all' failed
make[2]: *** [ycm/CMakeFiles/ycm_client_support.dir/all] Error 2
make[2]: *** Waiting for unfinished jobs....
Linking CXX shared library /home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so
/usr/bin/ld: /usr/local/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32S against `_Py_NotImplementedStruct' can not be used when making a shared object; recompile with -fPIC
/usr/local/lib/libpython2.7.a: error adding symbols: Bad value
collect2: error: ld returned 1 exit status
ycm/CMakeFiles/ycm_core.dir/build.make:387: recipe for target '/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so' failed
make[3]: *** [/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so] Error 1
CMakeFiles/Makefile2:165: recipe for target 'ycm/CMakeFiles/ycm_core.dir/all' failed
make[2]: *** [ycm/CMakeFiles/ycm_core.dir/all] Error 2
CMakeFiles/Makefile2:209: recipe for target 'ycm/CMakeFiles/ycm_support_libs.dir/rule' failed
make[1]: *** [ycm/CMakeFiles/ycm_support_libs.dir/rule] Error 2
Makefile:148: recipe for target 'ycm_support_libs' failed
make: *** [ycm_support_libs] Error 2
Traceback (most recent call last):
  File ""/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/build.py"", line 372, in &lt;module&gt;
    Main()
  File ""/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/build.py"", line 361, in Main
    BuildYcmdLibs( args )
  File ""/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/build.py"", line 275, in BuildYcmdLibs
    subprocess.check_call( build_command )
  File ""/usr/local/lib/python2.7/subprocess.py"", line 540, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '['cmake', '--build', '.', '--target', 'ycm_support_libs', '--', '-j', '4']' returned non-zero exit status 2
Traceback (most recent call last):
  File ""./install.py"", line 32, in &lt;module&gt;
    Main()
  File ""./install.py"", line 21, in Main
    subprocess.check_call( [ python_binary, build_file ] + sys.argv[1:] )
  File ""/usr/local/lib/python2.7/subprocess.py"", line 540, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '['/usr/local/bin/python', '/home/bunny/.vim/bundle/YouCompleteMe/third_party/ycmd/build.py']' returned non-zero exit status 1
</code></pre>

<p>. So I install the package <code>vim-youcompleteme</code> by <code>apt</code> successfully. So how can I use <code>YouCompleteMe</code> now?</p>

<p><strong><em>EDIT:</em></strong> I used <code>vam</code> to install <code>YouCompleteMe</code>, no problem, but when I open <code>vi</code>, it gives me this error:</p>

<pre><code>Error detected while processing function youcompleteme#Enable..    &lt;SNR&gt;30_SetUpPython:
line   29:
Traceback (most recent call last):
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
  File ""&lt;string&gt;"", line 25, in &lt;module&gt;
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
  File ""/usr/share/vim-youcompleteme/python/ycm/youcompleteme.py"", line 34, in &lt;module&gt;
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
    from ycm.client.ycmd_keepalive import YcmdKeepalive
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
  File ""/usr/share/vim-youcompleteme/python/ycm/client/ycmd_keepalive.py"", line 22, in &lt;module&gt;
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
from ycm.client.base_request import BaseRequest
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
   File ""/usr/share/vim-youcompleteme/python/ycm/client/base_request.py"", line 20, in &lt;module&gt;
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
    import requests
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;30_SetUpPython:
line   29:
ImportError: No module named requests
Press ENTER or type command to continue
</code></pre>

<p><code>vi --version</code> output:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Feb 11 2016 19:19:30)
Compiled by Vostro-3400
Normal version with GTK2 GUI.  Features included (+) or not (-):
-arabic          +file_in_path    -mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
+balloon_eval    +float           -mouse_urxvt     -tag_any_white
+browse          +folding         +mouse_xterm     -tcl
+builtin_terms   -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
+clientserver    -hangul_input    +netbeans_intg   +title
+clipboard       +iconv           +path_extra      +toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    -keymap          +postscript      +virtualedit
+comments        -langmap         +printer         +visual
-conceal         +libcall         -profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
-cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con_gui  -lua             -rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      +X11
+dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     +xim
-emacs_tags      +mouseshape      -sniff           +xsmp_interact
+eval            -mouse_dec       +startuptime     +xterm_clipboard
+ex_extra        -mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    
-farsi           -mouse_netterm   +syntax          
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  system gvimrc file: ""$VIM/gvimrc""
    user gvimrc file: ""$HOME/.gvimrc""
2nd user gvimrc file: ""~/.vim/gvimrc""
    system menu file: ""$VIMRUNTIME/menu.vim""
  fall-back for $VIM: ""/usr/local/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libpng12 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng12 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/freetype2 -I/usr/local/include  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl  -lselinux  -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions
</code></pre>
","<p>After some tries, I finally find out what's going on with my installation of <code>vim-youcompleteme</code>, and I decided to answer my own question.</p>

<p>First, building from source is not a good idea, unless you <em>have</em> to do it (just like my non-python support <code>vim</code>). Installing pre-built packages is always a good idea and a good starting point.</p>

<p>Second, the dependencies are important. When having the package installed and plugin installed by <code>vam</code>(<code>vim-addon-manager</code>), you need to solve the problems showing on the start of <code>vim</code>. For me, the main problem is the <code>requests</code> and <code>requests_futures</code>. After figuring it out, just use <code>pip</code> to install it and done!</p>

<p>By the way, thank you for those guys have helped me! You guys give some good advice and hints!</p>
","6470"
"Argument completion for python","1813","","<p>Is there a way to get argument completion for python?</p>

<p>I am currently using a combination of ctags, python-mode and YouCompleteMe, but I am missing a function to autocomplete the arguments of a function (or show them at least.)</p>

<p>Is there a Plugin that supports that?</p>

<p>I am using vim/gvim 7.4 and Ubuntu 14.04</p>
","<p>By default, (with a minimal vimrc, and no plugins installed), this is already possible.</p>

<p>Vim ships with multiple filetype plugins and some of these plugins offer omni-completion right out of the box. For example, python comes with pythoncomplete.vim. </p>

<p>If you use the default pythoncomplete.vim that ships with Vim, (i.e. no YouCompleteMe, no python-mode, no jedi-vim), you get a preview window when you complete a function, that shows the keyword arguments. </p>

<p>All you need is Vim with <code>+python</code> feature. If you do, then this is all it takes to enable the default python omni-completion with your vimrc:</p>

<p><code>filetype plugin indent on</code></p>

<p>After hunting down many other completion solutions for python (jedi, python-mode), I've come to like pythoncomplete.vim that is shipped with Vim a lot more. It's simple, and most important to me, it's very stable, especially compared to solutions like jedi-vim/python-mode and YouCompleteMe.</p>

<p>This is what the default solution looks like. It doesn't offer completion of arguments, but just shows them in the preview window so it's easy for you to fill the keyword arguments in like so:</p>

<p><img src=""https://i.stack.imgur.com/xXBXh.png"" alt=""enter image description here""></p>
","3509"
"How to avoid to press ENTER twice, when compiling with :make inside vim","1811","","<p>I love to use vim as simple IDE when comiling C/C++ programs (let say with gcc on a linux terminal), just inside vim with command:</p>

<pre><code>:w | make | cw
</code></pre>

<p>In that way: </p>

<ul>
<li>the <code>:w</code> vim command save editing</li>
<li>the <code>:make</code> INTERNAL vim command invoke the external make program using
makefile. </li>
<li>the <code>:cw</code> vim command the quickfix window showing list of errors and letting me to go directly to line where errors are.</li>
</ul>

<p>That's great! but (in case of compiler error) I have to press key <kbd>ENTER</kbd> TWICE:</p>

<p>a first time (in the shell): </p>

<blockquote>
  <p>""press ENTER or type command to continue"" <kbd>ENTER</kbd></p>
</blockquote>

<p>second time (inside the editor):  </p>

<blockquote>
  <p>""press ENTER or type command to continue"" <kbd>ENTER</kbd></p>
</blockquote>

<p>BTW, I read about the shortmess setting but didn't help this:</p>

<pre><code>set shortmess=aoOtI
</code></pre>

<p>Any idea to avoid to press enter and go directly to the quickfix windows ?</p>
","<p>Vim displays the ""Press ENTER"" prompt when the number of lines printed in the command area is greater than the number of lines it has available. This is to ensure the user doesn't miss a message.</p>

<p>The issue has been <a href=""http://vimdoc.sourceforge.net/htmldoc/message.html#press-enter"">documented in Vim's help</a> (<code>:h press-enter</code>) and also <a href=""http://vim.wikia.com/wiki/Avoiding_the_%22Hit_ENTER_to_continue%22_prompts"">addressed on the VimTips wiki</a>.</p>

<h2>Make more space for messages</h2>

<p>An easy and reliable fix is to increase the size of the command-line area.</p>

<pre><code>:set cmdheight=4
</code></pre>

<p>But this has the disadvantage of using up extra screen space.</p>

<h2>Reduce number/size of messages</h2>

<p>Reducing the number of lines printed by <code>:w</code> and <code>:make</code> could also help:</p>

<ol>
<li>Use <code>:silent w</code> or <code>:silent make</code> so they don't display anything.</li>
<li>Make messages shorter with <code>:set shortmess=a</code></li>
</ol>

<h2>Handle the prompt with a keymap</h2>

<p>If you know you will always get a prompt when you run a particular mapping, then you can add <code>&lt;Enter&gt;</code> or <code>&lt;CR&gt;</code> to the mapping to answer the prompt for you!</p>

<p>This is a <strong>dirty solution</strong>, because if later the prompt is not displayed (e.g. you increase <code>cmdheight</code> or decrease the number of messages) then the <code>&lt;CR&gt;</code> will still be sent!  That's not a big problem if Normal mode interprets it as ""go to beginning of next line"", but it could be more disruptive if focus was on the quickfix list, or an explorer window, where <kbd>Enter</kbd> performs a more significant action.</p>
","5053"
"How can I make vim download spell files?","1807","","<p>When setting <code>spelllang</code> for the first time, I was prompted to auto-download the appropriate spell file. Somehow I aborted the process due to unclear instructions, when it asked me, into which directory it should go.</p>

<p>Now when I <code>:set spellang</code> it just says <code>Warning: Cannot find word list</code>… but does not offer to download it.</p>

<p>How can I restart the process?</p>
","<p>The <a href=""https://vimhelp.appspot.com/spell.txt.html#spellfile.vim"">help</a> states this:</p>

<pre><code>The plugin has a default place where to look for spell files, on the Vim ftp
server.  If you want to use another location or another protocol, set the
g:spellfile_URL variable to the directory that holds the spell files.  The
netrw plugin is used for getting the file, look there for the specific
syntax of the URL.  Example: 
    let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
You may need to escape special characters.

The plugin will only ask about downloading a language once.  If you want to
try again anyway restart Vim, or set g:spellfile_URL to another value (e.g.,
prepend a space).
</code></pre>
","5654"
"How can I change Vim's start or intro screen?","1801","","<p>When I start Vim without any files, I always see this:</p>

<pre><code>              VIM - Vi IMproved

               version 7.4.580
           by Bram Moolenaar et al.
 Vim is open source and freely distributable

        Become a registered Vim user!
type  :help register&lt;Enter&gt;   for information

type  :q&lt;Enter&gt;               to exit
type  :help&lt;Enter&gt;  or  &lt;F1&gt;  for on-line help
type  :help version7&lt;Enter&gt;   for version info
</code></pre>

<p>How can I change this?</p>

<p>Specifically, I'd like to put the output of a shell command (<code>fortune</code>) here.</p>

<p>I know about <a href=""https://github.com/mhinz/vim-startify"">vim-startify</a>; but I don't need all those features. I just want to show some simple text...</p>
","<p>Here's the code that I extracted from <code>vim-startify</code>; the key parts are creating a new buffer on the <code>VimEnter</code> autocmd, putting some text in that, and then mapping the <code>i</code> to start a new buffer and then go to insert mode.</p>

<p>I put the below in a <a href=""https://github.com/Carpetsmoker/startscreen.vim"" rel=""nofollow noreferrer"">little plugin</a> which adds some settings and such, but the basic concept is exactly the same.</p>

<pre><code>fun! Start()
    "" Don't run if: we have commandline arguments, we don't have an empty
    "" buffer, if we've not invoked as vim or gvim, or if we'e start in insert mode
    if argc() || line2byte('$') != -1 || v:progname !~? '^[-gmnq]\=vim\=x\=\%[\.exe]$' || &amp;insertmode
        return
    endif

    "" Start a new buffer ...
    enew

    "" ... and set some options for it
    setlocal
        \ bufhidden=wipe
        \ buftype=nofile
        \ nobuflisted
        \ nocursorcolumn
        \ nocursorline
        \ nolist
        \ nonumber
        \ noswapfile
        \ norelativenumber

    "" Now we can just write to the buffer, whatever you want.
    call append('$', """")
    for line in split(system('fortune -a'), '\n')
        call append('$', '        ' . l:line)
    endfor

    "" No modifications to this buffer
    setlocal nomodifiable nomodified

    "" When we go to insert mode start a new buffer, and start insert
    nnoremap &lt;buffer&gt;&lt;silent&gt; e :enew&lt;CR&gt;
    nnoremap &lt;buffer&gt;&lt;silent&gt; i :enew &lt;bar&gt; startinsert&lt;CR&gt;
    nnoremap &lt;buffer&gt;&lt;silent&gt; o :enew &lt;bar&gt; startinsert&lt;CR&gt;
endfun

"" Run after ""doing all the startup stuff""
autocmd VimEnter * call Start()
</code></pre>
","715"
"Make Command-line mode type <Esc> and Ctrl commands","1800","","<p>Imagine you want to quote the word below. If <code>|</code> is the cursor position you can easily quote the word with <code>cw""""&lt;Esc&gt;P</code> from Normal mode.</p>

<pre><code>|below
</code></pre>

<p>I want to achieve the same behaviour in Command-line mode. My question is how can I say to the Command-line mode that I want to type an <code>&lt;Esc&gt;</code>. I tried <code>:norm cw""""&lt;Esc&gt;P</code> and some other variations but I just get <code>""""&lt;Esc&gt;P</code> instead of <code>""below""</code>.</p>

<p>Still related to this I would like to know how can I make Command-line mode type Ctrl commands. For example I could quote the aforementioned word with <code>cw""&lt;C-r&gt;""""&lt;Esc&gt;</code> instead. But then I would need Command-line to type <code>&lt;C-r&gt;</code> for me. How can I do this?</p>
","<p><code>&lt;C-v&gt;</code> is what you are looking for. It allows you to enter literal characters (e.g., a literal <code>Esc</code> instead of the string ""Esc"") without requiring you to escape anything.</p>

<pre><code>:norm cw""""&lt;C-v&gt;&lt;Esc&gt;P
</code></pre>

<p>displays as:</p>

<pre><code>:norm cw""""^[P
</code></pre>

<p>and will do what you want (i.e., quote the word). You can also use this with other <code>&lt;C-?&gt;</code> mappings. For example, your second request:</p>

<pre><code>:norm cw""&lt;C-v&gt;&lt;C-r&gt;""""
</code></pre>

<p>displays as:</p>

<pre><code>:norm cw""^R""""
</code></pre>

<p>And will result in the same as the above. There's no need to include the extra <code>Esc</code> at the end.</p>
","2688"
"Vimscript: Help with Autoloading, Scope & <SID>","1782","","<p>I've been working on modularizing &amp; converting a code in my <code>vimrc</code> into some self-contained and reusable bundles/plugins plugins. I've run into an issue with autoloading &amp; scope that I'm having difficulty understanding. I've read through <code>:h autoload</code>, <code>:h &lt;sid&gt;</code>, <code>:h script-local</code>, but I'm still not quite clear on how this works.</p>

<p>I've been looking at some well-developed plugins to figure out some commonly used patterns, and have structured my plugins as follows:</p>

<pre><code>"" ~/.vim/autoload/myplugin.vim

if exists('g:loaded_myplugin')
  finish
endif

let g:loaded_myplugin = 1
let g:myplugin_version = 0.0.1

"" Save cpoptions.
let s:cpo_save = &amp;cpo
set cpo&amp;vim

function! myplugin#init() "" {{{
  "" Default 'init' function. This will run the others with default values,
  "" but the intent is that they can be called individually if not all are
  "" desired.
  call myplugin#init_thing_one()
  call myplugin#init_thing_two()
endfunction"" }}}

function! myplugin#init_thing_one() "" {{{
  "" init thing one
  call s:set_default('g:myplugin_thing_one_flag', 1)
  "" do some things ...
endfunction "" }}}

function! myplugin#init_thing_two() "" {{{
  "" init thing two
  call s:set_default('g:myplugin_thing_two_flag', 1)
  "" do some things ...
endfunction "" }}}

function! s:set_default(name, default) "" {{{
"" Helper function for setting default values.
  if !exists(a:name)
    let {a:name} = a:default
  endif
endfunction "" }}}

"" Restore cpotions.
let &amp;cpo = s:cpo_save
unlet s:cpo_save
</code></pre>

<p>At the start of my vimrc, I run the plugin with:</p>

<pre><code>if has('vim_starting')
  if &amp;compatible | set nocompatible | endif
  let g:myplugin_thing_one_flag = 0
  let g:myplugin_thing_two_flag = 2
  call myplugin#init()
endif
</code></pre>

<p>This all seems to work correctly and as expected - but each time a function is called, the <code>s:set_default(...)</code> function is called for each flag, which is ineffecient - so I attempted to move them out the functions:</p>

<pre><code>"" ~/.vim/autoload/myplugin.vim
"" ...
set cpo&amp;vim

"" Set all defaults once, the first time this plugin is referenced:
call s:set_default('g:myplugin_thing_one_flag', 1)
call s:set_default('g:myplugin_thing_two_flag', 1)

function! myplugin#init() "" {{{
"" ...
</code></pre>

<p>But this causes errors that I'm unsure how I should resolve:</p>

<pre><code>Error detected while processing /Users/nfarrar/.vim/myplugin.vim
line   40:
E117: Unknown function: &lt;SNR&gt;3_set_default
</code></pre>

<p>I still don't solidly understand vim's scoping, but from what I've read - it seems that vim implements a form of name-mangling with scripts to provide 'scope'. It assigns (not sure how exactly this process works) a unique SID for each file that is loaded at runtime - and when you call a function that is prefixed with a script-scope identifier (<code>s:</code>), it transparently replaces that identifier with a mapped SID.</p>

<p>In some cases, I've seen scripts that call functions like this (but it doesn't work in my case, I don't understand why, and hoping someone can explain this):</p>

<pre><code>call &lt;SID&gt;set_default('g:myplugin_thing_one_flag', 1)
call &lt;SNR&gt;set_default('g:myplugin_thing_one_flag', 1)
</code></pre>

<p>The following does work, but I'm unsure if it's a good pattern:</p>

<pre><code>"" ~/.vim/autoload/myplugin.vim
"" ...
set cpo&amp;vim

"" Set all defaults once, the first time this plugin is referenced:
call myplugin#set_default('g:myplugin_thing_one_flag', 1)
call myplugin#set_default('g:myplugin_thing_two_flag', 1)

function! myplugin#init() "" {{{
"" ...

function! myplugin#set_default(name, default) "" {{{
    "" ...
endfunction "" }}}
</code></pre>

<p>In script local, it states:</p>

<pre><code>When executing an autocommand or a user command, it will run in the context of
the script it was defined in.  This makes it possible that the command calls a
local function or uses a local mapping.

Otherwise, using ""&lt;SID&gt;"" outside of a script context is an error.

If you need to get the script number to use in a complicated script, you can
use this function:

    function s:SID()
      return matchstr(expand('&lt;sfile&gt;'), '&lt;SNR&gt;\zs\d\+\ze_SID$')
    endfun
</code></pre>

<p>It sees like this <em>might</em> be the approach I need to take, but I'm not completely sure why, or exactly how to use it. Can anyone provide some insight?</p>
","<p>In the first case, the error you are getting is that you are trying to call a function prior to its existance. That is, Vim is progressing through your script. When it sees the <code>call</code> line, it hasn't yet processed the <code>function</code> line that creates what you want to call, resulting in the error <code>unknown function</code>.</p>

<p>If you move your call to setup defaults to the end of your script (before you restore <code>cpo</code> but after all of your <code>function</code>s, there won't be an error, because Vim will have processed the script to create the functions first, so once it gets to the <code>call</code> lines, the functions exist. e.g.</p>

<pre><code>""....

function! s:set_default(name, default) "" {{{
  "" Helper function for setting default values.
  if !exists(a:name)
    let {a:name} = a:default
  endif
endfunction "" }}}

"" Set all defaults once, the first time this plugin is referenced:
call s:set_default('g:myplugin_thing_one_flag', 1)
call s:set_default('g:myplugin_thing_two_flag', 1)

"" Restore cpotions.
let &amp;cpo = s:cpo_save
unlet s:cpo_save
</code></pre>

<p>I do not know why the alternative syntax of calling your <code>set_default</code> as an autoload function from within the autoload script works when the function hasn't yet been defined. My guess is this is a side effect of the implementation (where an already read script isn't re-read, or you'd have infinite recursion). I wouldn't count on it always working that way.</p>
","3747"
"How do I keep accidentally creating a no break space before opening curly brace?","1777","","<p>I am conscious this is a strange question, and this might not even be the right forum to post it. But this has been a problem for several years.</p>

<p>From time to time, let's say once a month, when I program, i introduce a <a href=""http://www.fontspace.com/unicode/char/00A0-no-break-space"" rel=""noreferrer"">No-Break space</a> instead of a regular space, before opening a curly brace.</p>

<p>This happens let's say when I'm writing <code>if {</code> </p>

<p>This leads to mysterious lint bugs. CSS clauses that don't apply. Until I remember this might be it.</p>

<p>As far as I'm aware, this only happens in vim, but since it's my main editor it might just never have happened in other software. But none of my coworkers' in my last jobs ever had that problem, even though they use the same keyboard layout as me. I'm the only one to use vim regularly though, that's why I though of posting here...</p>

<p>This happened to me at least in ubuntu 14.04, 16.04, and mac os x.</p>

<p><code>:set list</code> doesn't reveal it.</p>

<p>I'm using a french-canadien keyboard layout, meaning the brace character is done by pressing alt + ` </p>

<p>I'm very tired of this causing problems, it's infrequent enough I keep forgetting about it. </p>

<p>If you cannot tell me why this keeps happening, some sort of config to highlight that character in some sort of obvious way would be a suitable answer and really help with this problem.</p>
","<p>Others have already provided work-arounds, but as for the reason why it happens, I bet you're accidentally pressing <kbd>Alt</kbd>+<kbd>Space</kbd>.</p>

<p>I'm using Xubuntu with the 105-key Finnish keyboard layout myself, so for me, typing <code>{</code> means pressing <kbd>AltGr</kbd>+<kbd>7</kbd>.  I just did a quick test in xfce4-terminal (on the bash command line), and pressing <kbd>AltGr</kbd>+<kbd>Space</kbd> indeed produces a no-break space (U+00A0).</p>

<p>I bet what's happening is that you're pressing down the <kbd>Alt</kbd> key in anticipation of typing the brace, and sometimes that happens <em>before</em> you actually press the space bar, producing a non-breaking space.  And since it <em>looks</em> identical to a normal space, you don't realize it has happened before something mysteriously breaks, making it hard for you to notice it happening and thus also hard to unlearn that habit.</p>
","12014"
"How can I prevent Vim from leaving too many files (like swap, backup, undo)?","1766","","<p>By default, <code>vim</code> leaves swap files in my project directory, and on crashes it leaves backup files.</p>

<p>Can I prevent this? Or do I need to update all my projects' <code>.VCSignore</code> file?</p>
","<h3>Backup files</h3>

<p>By default, Vim doesn't leave backup files behind.  They are merely transient files that exist while Vim is saving the buffer to disk.  As described in <code>:help backup-table</code> this behavior can be controlled by the <code>'backup'</code> and <code>'writebackup'</code> options:</p>

<pre><code>'backup' 'writebackup'  action  ~
   off       off    no backup made
   off       on     backup current file, deleted afterwards (default)
   on        off    delete old backup, backup current file
   on        on     delete old backup, backup current file
</code></pre>

<h3>Swap files</h3>

<p>As for swap files, it can be useful to collect them in a dedicated directory.  This can be done with the <code>'directory'</code> option.  For example</p>

<pre><code>:set directory^=$HOME/.vim/tmp//
</code></pre>

<p>will add <code>$HOME/.vim/tmp</code> to the head of the list of directories that Vim will try to use when creating a swap file.  The trailing <code>//</code> makes Vim encode the entire path name to the file so there aren't collisions with similarly named files from different directories.</p>

<p><strong>Caveat</strong>:
This effectively disables the ability for Vim to notice if multiple users are trying to edit the same file since the swap files are stored in different locations.</p>

<p>The snippet below (adapted from <a href=""https://github.com/tpope/tpope/blob/338a4e89494bfe4928d3a0221c3ea1a7f09937cb/.vimrc#L328-L329"">tpope's vimrc</a>) will also disable the swap file for a buffer when it isn't modified, that way if Vim/your computer crashes when you have a bunch of files open, the swap files left behind will only be for modified files.</p>

<pre><code>autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
  \ if isdirectory(expand(""&lt;amatch&gt;:h"")) | let &amp;swapfile = &amp;modified | endif
</code></pre>

<p><strong>Caveat</strong>: Since the swap file only exists when the buffer is modified, this has a similar effect as setting <code>'directory'</code>.  If the buffer is unmodified, then another Vim can start editing it without notice.  If the second Vim saves before the first one makes more changes, then they won't be noticed until the user tries to save or something triggers Vim to check if the file is modified.</p>
","69"
"Replace Nth Occurrence Using Substitute","1761","","<p>Here is my data:</p>

<pre><code>{ team: 'NYY', result: 'L', rs: 1,6 },
{ team: 'NYY', result: 'W', rs: 4,3 },
{ team: 'NYY', result: 'L', rs: 3,6 },
{ team: 'NYY', result: 'L', rs: 5,6 },
{ team: 'NYY', result: 'L', rs: 4,8 },
{ team: 'NYY', result: 'W', rs: 14,4 },
{ team: 'NYY', result: 'W', rs: 6,5 },
{ team: 'NYY', result: 'L', rs: 3,4 },
{ team: 'NYY', result: 'L', rs: 5,7 },
{ team: 'NYY', result: 'W', rs: 5,4 },
{ team: 'NYY', result: 'W', rs: 9,0 },
{ team: 'NYY', result: 'W', rs: 5,3 },
</code></pre>

<p>I would like to replace the last comma in each line so the line looks like this: </p>

<pre><code>{ team: 'NYY', result: 'L', rs: 1, ra: 6 },
</code></pre>

<p>Can I use <code>:%s</code> to accomplish this?</p>
","<p>Peter's answer achieves the result that you want, but not necessarily the question that you asked.</p>

<p>This regular expression will match the Nth occurrence of your PATTERN:</p>

<pre><code>\(.\{-}\zsPATTERN\)\{N}
</code></pre>

<p>To unpack that a little bit, it matches everything non-greedily (that's what the {-} is) though each PATTERN N times (that's what the {N} is)</p>

<p>The \zs marks the start of what you want to replace. In the example above, you would end up replacing the comma with whatever your replacement text is. You could put the \zs after the pattern to add your replacement after the comma.</p>

<p>To give a more concrete example with your data, </p>

<pre><code>%s/\(.\{-},\zs\)\{3}/ ra: /
</code></pre>

<p>would add in the text after the third comma.</p>

<p>That being said, this doesn't really seem to be the best approach for this particular problem. Here, you could insert your ""ra"" in between any comma followed by a digit:</p>

<pre><code>%s/,\zs\ze\d/ ra: /g
</code></pre>

<p>Or use a macro to find the Nth occurrence and insert:</p>

<pre><code>3f,a ra:
</code></pre>

<p>Or use Tabular to align your commas, and then do a block select (ctrl+v) to insert your text:</p>

<pre><code>Tab /,
</code></pre>

<p>etc.</p>
","7426"
"How to fold text in a JSON file?","1754","","<p>I have a large JSON file. It is not easy to work on all file at a time.
I want to fold some content so that I can work on a section of JSON file.</p>

<p>E.g.: </p>

<pre><code>{
  obj: {+}, // folded section
  obj:{
        // unfolded section
     }
}
</code></pre>

<p>Is it possible to fold JSON structure in Vim?</p>
","<p>Yes, it is possible. A minimal setup would be:</p>

<pre><code>:set filetype=json
:syntax on
:set fdm=syntax
</code></pre>
","10563"
"Clear a line faster than [0][d][$]","1752","","<p>Is there a faster way to erase the text on a line than</p>

<ul>
<li>pressing <kbd>0</kbd> to jump to the start, then</li>
<li>pressing <kbd>d</kbd><kbd>$</kbd> to delete until the end of the line?</li>
</ul>

<p>Also, what if I wanted to delete everything <em>except</em> the indentation?  Is there a way to do that?</p>
","<p>As you said, there are multiple ways, and you can also take into account on what your next action will be after you clear or delete the current line.</p>

<ol>
<li><kbd>dd</kbd> will delete the current line (not clear)</li>
<li><kbd>0D</kbd> will clear the current line including whitespace</li>
<li><kbd>^D</kbd> will clear the current line <em>not</em> including whitespace (<kbd>^dg_</kbd> saves trailing space)</li>
<li><kbd>0C</kbd> will clear the current line including whitespace and put you into insert mode</li>
<li><kbd>^C</kbd> will clear the current line <em>not</em> including whitespace and put you into insert mode (<kbd>^cg_</kbd> saves trailing space)</li>
</ol>

<p><kbd>cc</kbd> or <kbd>S</kbd> will function as either 4. or 5. if 'autoindent' is off or on respectively.</p>

<p>So use whatever fits the action at hand. I believe that <kbd>0D</kbd> is the fastest to clear the line, but you can map that to something if you wish, to make it even faster.</p>
","3565"
"What are the differences between the map, noremap, abbrev and noreabbrev commands?","1737","","<p>These commands transform one set of keystrokes to another in some way, but I am somewhat fuzzy on which one is most appropriate for some situation. In addition, there are the <code>!</code> variants of them as well. At the moment, my usage of them is pretty haphazard, so could I know what are the pitfalls associated with each? In particular notes about the various mode versions could be useful, since I learnt from Peter Rincker <a href=""https://vi.stackexchange.com/questions/2006/is-there-a-way-to-alias-w-to-w-to-avoid-creating-files-named/2008#comment1345_2008"">in a comment</a> that <code>cmap</code> can expand pretty much anywhere in the line and not only when I'm using <code>:</code> commands. What precautions can I take against potential pitfalls?</p>
","<p>First, <code>map</code> and <code>noremap</code> are similar in that that each create mappings for normal,  visual, select and operator pending modes <em>simultaneously</em>. Vim details this in <code>:help map-overview</code>:</p>

<pre><code>Overview of which map command works in which mode.  More details below.
     COMMANDS                    MODES ~
:map   :noremap  :unmap     Normal, Visual, Select, Operator-pending
:nmap  :nnoremap :nunmap    Normal
:vmap  :vnoremap :vunmap    Visual and Select
:smap  :snoremap :sunmap    Select
:xmap  :xnoremap :xunmap    Visual
:omap  :onoremap :ounmap    Operator-pending
:map!  :noremap! :unmap!    Insert and Command-line
:imap  :inoremap :iunmap    Insert
:lmap  :lnoremap :lunmap    Insert, Command-line, Lang-Arg
:cmap  :cnoremap :cunmap    Command-line
</code></pre>

<p>As per the above help, if you wanted to restrict the mapping to a specific mode, you have to prepend:</p>

<p>'n' (for normal), 'v' (for visual and select), 'c' (for command), 'x' (for visual mode), 's' (for select), 'o' (for operator pending).</p>

<p>For instance, </p>

<p><code>nmap n nzz</code></p>

<p>will create a normal mode, recursive mapping of <code>n</code>.</p>

<p>Now, <code>noremap</code> is just a non-recursive version of <code>map</code>.</p>

<p>So what is non-recursive mapping? Vim has the answer to that too, with <code>:help map-recursive</code>:</p>

<pre><code>If you include the {lhs} in the {rhs} you have a recursive mapping.  When
{lhs} is typed, it will be replaced with {rhs}.  When the {lhs} which is
included in {rhs} is encountered it will be replaced with {rhs}, and so on.
This makes it possible to repeat a command an infinite number of times.  The
only problem is that the only way to stop this is by causing an error.  The
macros to solve a maze uses this, look there for an example.  There is one
exception: If the {rhs} starts with {lhs}, the first character is not mapped
again (this is Vi compatible).
For example: &gt;
   :map ab abcd
will execute the ""a"" command and insert ""bcd"" in the text.  The ""ab"" in the
{rhs} will not be mapped again.
</code></pre>

<p>An example of this is mapping the following:</p>

<p><code>:imap j k</code></p>

<p><code>:imap k j</code></p>

<p>Now, vim will replace j with k and k with j infinite number of times, and will therefore show you an error that you have created a recursive mapping.</p>

<p>This is why it is generally recommended that you <em>almost always</em> (except when you have <code>&lt;Plug&gt;</code> mappings or similar) use non-recursive mappings. This prevents Vim hanging when you inadvertently create recursive mappings. The non-recursive mapping is therefore a more safer way to map commands in Vim.</p>

<p>With the above information at hand, we can see that <code>:noreabbrev</code> is just a non-recursive version of <code>:abbrev</code> command.</p>

<p>You can use <code>:abbrev</code> only in insert, replace and command modes. <code>:abbrev</code> is used for creating abbreviations, (aka shortcuts that Vim can expand). The short expanation is to use <code>:map</code>/<code>:noremap</code> to create mappings, <code>:abbrev</code>/<code>:noreabbrev</code> to create abbreviations, or whenever you want Vim to expand out your typing.</p>
","2092"
"Vim's syntax highlighting considers a lambda (->) in Java an error","1733","","<p>I am using Vim to program in Java 8, and am having a problem with syntax highlighting.  </p>

<p>A new feature in Java 8 is lambda support, which resulted in the creation of the arrow operator: <code>-&gt;</code>.  Vim does not recognize this as a valid operator in a *.java file.  As such, it highlights this operator in bright red to draw attention to the ""syntax error.""  (Of course, this really is valid syntax.)</p>

<p>Is there a way to update Vim's ""dictionary"" of allowed operators and/or fix the syntax highlighting to avoid this issue?</p>

<p>The first two lines of <code>:version</code> state:</p>

<blockquote>
  <p>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:39:32)</p>
  
  <p>Included patches: 1-52</p>
</blockquote>
","<h3>2016 update</h3>

<p>The Vim syntax file <a href=""https://github.com/vim/vim/commit/f3c2afb77f8b1f2591337fcaa90ba0fb45365cbc#diff-eda7359419b4ac52df5a77541cf1e82f"" rel=""noreferrer"">was updated for this in v7.4.649</a> (March 2015); so if you have this patch you don't need to do this.</p>

<p>The easiest way to fix this is probably by downloading the <a href=""https://github.com/vim/vim/blob/master/runtime/syntax/java.vim"" rel=""noreferrer"">newer <code>syntax/java.vim</code> file</a> and putting it in <code>~/.vim/syntax/java.vim</code> so it will override the default <code>$VIMRUNTIME/syntax/java.vim</code>. You will also need to symlink <code>html.vim</code> for this to work as <code>java.vim</code> depends on this:</p>

<pre><code>ln -s /usr/share/vim/vim74/syntax/html.vim ~/.vim/syntax/
</code></pre>

<hr>

<h3>Original answer</h3>

<p>My <code>/usr/share/vim/vim74/syntax/java.vim</code> has this:</p>

<pre><code>syn match javaError ""&lt;&lt;&lt;\|\.\.\|=&gt;\|||=\|&amp;&amp;=\|[^-]-&gt;\|\*\/""
</code></pre>

<p>See the <code>[^-]-&gt;</code> part? That causes the error highlighting.</p>

<p>You can override this rule by adding a <code>~/.vim/after/syntax/java.vim</code> file,
with the same pattern minus the lambda syntax:</p>

<pre><code>syn clear javaError
syn match javaError ""&lt;&lt;&lt;\|\.\.\|=&gt;\|||=\|&amp;&amp;=\|\*\/""
</code></pre>

<hr>

<p>And for bonus points, we can add this line to highlight this as a function:</p>

<pre><code>syn match javaFuncDef ""[^-]-&gt;""
</code></pre>

<p>Consider filing a bug report. <code>:help bug-reports</code> explains how. There seem to be more (new?) constructs that are highlighted as an error, such as the <code>...</code> in <code>public static void main(String... args)</code>.</p>
","1906"
"Go to last non-whitespace character of previous/next line?","1695","","<p>I like the <code>-</code> and <code>&lt;C-M&gt;</code> normal-mode keys for going to the first non-whitespace character of the previous/next line.</p>

<p>Are there coresponding keys for going to the <em>last</em> non-whitespace character on the previous/next line?</p>
","<p><code>g_</code> moves the cursor to the last non-blank character of the <em>current</em> line. From Vim's <a href=""http://vimhelp.appspot.com/motion.txt.html#g_"" rel=""noreferrer""><code>:help g_</code></a>:</p>

<pre><code>g_          To the last non-blank character of the line and
            [count - 1] lines downward |inclusive|. {not in Vi}
</code></pre>

<p>Unfortunately, I think the only options you have to move to the non-blank character of the previous/next line is <code>kg_</code> or <code>jg_</code> respectively or using a count to move downwards.</p>

<p>However, it is easy to map them to something easier:</p>

<pre><code>nnoremap &lt;F3&gt; kg_
nnoremap &lt;F4&gt; jg_
</code></pre>
","3309"
"Delete from cursor till nth occurence of character x","1694","","<p>I know that I can delete from the cursor till and including the first occurence of a character <i>x</i> with <a href=""https://vi.stackexchange.com/questions/5239/delete-from-cursor-till-first-character-x-spanning-multiple-lines#5240""><code>d/x&lt;CR&gt;</code></a> or with <a href=""https://vi.stackexchange.com/questions/5239/delete-from-cursor-till-first-character-x-spanning-multiple-lines#5241""><code>v/x&lt;CR&gt;d</code></a> if I want to see the selection first and then delete. How can I delete from the current cursor position till the <i>n</i>th occurence of <i>x</i>?</p>

<p>E.g., if the cursor is after the first space in</p>

<blockquote>
  <p><i>yada yada yada<br>
  yada yada yada x<br>
  yada yada yada x<br>
  yada yada yada x</i><br>
  xx</p>
</blockquote>

<p>and I type a command to remove up to the third <i>x</i> the result needs to be:</p>

<blockquote>
  <p><i>yada<br>
  xx</i></p>
</blockquote>
","<p>You can do :</p>

<p><code>wd4/x&lt;Enter&gt;</code></p>

<p>If you start on the top left of your text</p>

<p><strong>Explanation</strong></p>

<ul>
<li><code>w</code> : move to beginning of next word</li>
<li><code>d</code> : delete</li>
<li><code>4/x&lt;Enter&gt;</code> : until the 4th occurence of x</li>
</ul>

<p>If you don't know the number of times you would like to do it beforehand, you can also do : <code>d/x&lt;Enter&gt;</code> and then hit <code>.</code> to repeat</p>
","5246"
"How to disable YouCompleteMe's error checking?","1689","","<p>I have recently installed <strong>YouCompleteMe</strong> and can't figure out how to disable its error checking feature. I am developing in C++ and wanted to use <strong>Neomake</strong> as my checker.</p>
","<p>The <a href=""https://github.com/Valloric/YouCompleteMe#the-gycm_show_diagnostics_ui-option"" rel=""nofollow""><code>g:ycm_show_diagnostics_ui</code></a> variable controls this:</p>

<pre class=""lang-none prettyprint-override""><code>The *g:ycm_show_diagnostics_ui* option

When set, this option turns on YCM's diagnostic display features. See the
_Diagnostic display_ section in the _User Manual_ for more details.
</code></pre>

<p>So, do:</p>

<pre><code>let g:ycm_show_diagnostics_ui = 0
</code></pre>
","7895"
"How do I make Vim adapt to the current indenting style of the file I'm editing?","1677","","<p>I work on a range of JavaScript projects. In most of these projects, the indentation of JavaScript files is 2 spaces, so I've set my default indentation width to that. However it becomes 1 or 4 in some other projects.</p>

<p>Is there a way to ask Vim to change the indentation style based on the style already used in the current file?</p>
","<p>To add to @Undo 's answer above. Tim Pope too has a plugin that tries to do the same at <a href=""https://github.com/tpope/vim-sleuth"">tpope/vim-sleuth</a></p>
","59"
"Learning Vim after vimtutor","1677","","<p>What should the next steps to learning Vim be, after completing <code>vimtutor</code>? I've watched videos on YouTube, read tutorials online and questions/answers on SE, and am busy reading <a href=""https://pragprog.com/book/dnvim/practical-vim"" rel=""nofollow noreferrer"">Practical</a> Vim.</p>

<p>Are there any other good resources available? Actually practicing and using Vim -- not just watching/reading about it -- is surely a good way to learn. Any suggestions on the best way to use the built-in help system to learn Vim?</p>

<p>PS: Although <a href=""https://stackoverflow.com/questions/2567883/does-an-updated-vimtutor-exist"">this</a> question on SO has been closed for being off-topic, several of the answers there look useful.</p>

<p>PPS: I used vim many years ago, moved to Emacs for Org-Mode, and am now returning to vim :)</p>
","<h3>Sharpen the saw</h3>

<p>The best general advice is a simple one, ""<a href=""http://www.moolenaar.net/habits.html"">Sharpen the saw</a>"" from Bram's Seven habits essay. I also suggest <a href=""http://vimcasts.org/"">Vimcasts blog</a> post: <a href=""http://vimcasts.org/blog/2012/08/on-sharpening-the-saw/"">On sharpening the saw</a>.</p>

<p>Basically ""sharpening the saw"" can be summarized as: </p>

<blockquote>
  <p>Don't learn everything all at once, but learn a few things at a time.
  When you find an inefficiency look for ways to improve it. Repeat</p>
</blockquote>

<h3>Vimrc</h3>

<p>I also recommend you use <a href=""https://github.com/romainl/idiomatic-vimrc"">nearly blank vimrc</a>. You should roughly understand each line in your <code>vimrc</code>. Use <code>:help</code> and google learn more.</p>

<h3>Plugins</h3>

<p>General plugin advice:</p>

<ul>
<li>Slowly add a plugin or two when the need arises.</li>
<li>Do not install a plugin without looking for a native solution first</li>
<li>Must have good documentation</li>
<li>Avoid plugins with many mappings</li>
<li>If it doesn't feel Vim-like then avoid it</li>
<li>Avoid if mappings don't work with <code>.</code> command (may have to use <a href=""https://github.com/tpope/vim-repeat"">repeat.vim</a>)</li>
</ul>

<h3>More good places to learn more about Vim</h3>

<ul>
<li><a href=""http://vimcasts.org/"">Vimcasts</a> - Great articles and screencasts by Drew Neil, the author of <em>Practical Vim</em>.</li>
<li><a href=""http://derekwyatt.org/vim/tutorials/"">Derek Wyatt's Vim Videos</a> - Good collection of Vim topics.</li>
<li><a href=""http://learnvimscriptthehardway.stevelosh.com/"">Learn Vimscript the Hard Way</a> - Steve Losh teaches how to customize Vim from the basics to the more advanced.</li>
</ul>

<h3>TL;DR</h3>

<p>Read <code>:help</code> and try to make small incremental changes to your workflow.</p>
","4119"
"How to deal with string containing spaces in Vim script?","1668","","<p>I have the following command in my vimrc:</p>

<pre><code>execute ""set path+="".getcwd().""/**""
</code></pre>

<p>It works well if current working directory is like <code>/home/tamlok/my_work/</code>. However, if the directory contains spaces, such as <code>D:\Program Files\vim\</code>, vim will complain.</p>

<p>I suppose that I can fix this using <code>substitute()</code> function to replace all the spaces with escaped spaces. What would an experienced vimmer do here?</p>

<p>Another issue is the <code>\</code> in Windows. If <code>getcwd()</code> gets <code>D:\Program Files\vim\</code>, do I need to escape the <code>\</code> with <code>\\</code> or replace it with <code>/</code>?</p>

<p>For now I handle it like this:</p>

<pre><code>let mycwd=substitute(getcwd(), '\\', '/', 'g')
let mycwd=substitute(mycwd, ' ', '\\ ', 'g')
execute ""set path+="".mycwd.""/**""
</code></pre>

<p>Is that OK? Any help is appreciated! Thanks very much!</p>
","<p>The function you are looking for is <code>fnameescape()</code>.  It will escape all special characters in a given string containing a path to a file to match the standard of the current operating system.</p>

<p>For more on this see <code>:help fnameescape()</code></p>
","5341"
"Extract the result of a shell command to a variable in a .vimrc file?","1667","","<p>In my .vimrc file, I would like to store in a variable the result of an external command, in my case :</p>

<pre><code>$ echo $LANG
</code></pre>

<p>So that my <code>vimrc</code> file would have :</p>

<pre><code>let language = output(!echo $LANG)
if language == 'en'
   nnoremap &lt;somekey&gt; &lt;ohanotherkey!&gt;
end if
</code></pre>

<p>So far I couldn't find how to do it. I've found that in command mode, <code>:read !echo $LANG</code> would insert in my current file the content I am looking for. But I don't know how to write it down in a vimrc file.</p>
","<p>You can do this with the <code>system</code> function:</p>

<pre><code>let language = system('echo $LANG')
</code></pre>

<p>Bonus point: if your output is a list, you can use the <code>systemlist</code> instead to get back a list. e.g.</p>

<pre><code>let files = systemlist('ls')
"" ['bin', 'dev', ... ]
</code></pre>

<p><strong>ref:</strong> <a href=""http://vimhelp.appspot.com/eval.txt.html#system%28%29"" rel=""noreferrer""><code>:h system</code></a></p>
","7400"
"Why is Vim for Debian compiled without clipboard?","1661","","<p>I'm curious as to why the default Debian package for vim (the one you normally get by <code>sudo apt-get install vim</code>) isn't compiled with clipboard support?</p>

<p>Neither the regular <code>-clipboard</code> or <code>-Xterm-clipboard</code> is enabled, <strong>why</strong>?</p>

<p>There might be reason to not include -Xterm-clipboard on Debian installations without X-server installed, but the regular <code>-clipboard</code>? </p>

<p>Any insight into why this is would be helpfull.</p>

<p>(<em>Clarification: I know I can compile Vim with these flags, I just want to know why they aren't enabled by default.</em>)</p>
","<p>The <a href=""https://packages.debian.org/stretch/vim"" rel=""noreferrer"">package description contains</a></p>

<blockquote>
  <p>This package contains a version of vim compiled with a rather 
  standard set of features.  This package does not provide a GUI 
  version of Vim.  See the other vim-* packages if you need more  (or
  less).</p>
</blockquote>

<p>I believe this was made, because using the clipboard would involve linking against X libraries, which means, you couldn't install vim without also installing a bunch of X dependencies which you usually do not want in a server (or minimal) environment.</p>

<p>This means, if you want the clipboard feature, you should install e.g. the package <code>vim-gtk</code> (which despite its name also contains a non-gui vim).</p>

<p>For a similar reason, the package <code>vim-nox</code> exists. It does not depend on the X server, but needs additional libraries like liblua, libperl, libpython and does therefore install those additional dependencies (which you also probably do not need in a server environment), but no X libraries (like GTK or X11 ones needed for the gui and the clipboard).</p>
","13565"
"Read file from vimscript variable","1660","","<p>I can run this snippit of code within a vimscript block:</p>

<pre><code>0read /home/user/.vim/bundle/vim-lorum/lorums/lorum.js
</code></pre>

<p>As expected, it puts the contents of ""lorum.js"" into the current buffer</p>

<p>But, I need to make this a little more dynamic. If I try something like:</p>

<pre><code>let g:filePath=""/home/user/.vim/bundle/vim-lorum/lorums/lorum.js""
0read g:filePath
</code></pre>

<p>I get this error message:</p>

<pre><code>E484: Can't open file g:filePath
</code></pre>

<p>I tried wrapping <em>g:filePath</em> in <em>expand</em> and <em>glob</em> but I get similar errors. Any ideas?</p>
","<p>This is because vim does not evaluate variable names or functions with most commands.  In your case, vim thinks you literally want to read the contents of a file called <code>g:filePath</code> into the buffer.  What you want can be accomplished with the <code>:execute</code> command.  This command takes a string as an argument, and will then run that string as a command.  In your case, this is how it would look:</p>

<pre><code>:let g:filePath=""/home/user/.vim/bundle/vim-lorum/lorums/lorum.js""
:execute ""0read "" . fnameescape(g:filePath)
</code></pre>

<p>The <code>fnameescape</code> part is just to ensure that all special characters are escaped properly (see <code>:help fnameescape()</code>).  For more on how to use <code>:execute</code>, read <code>:help :execute</code>.  Also note that <code>.</code> is vim's string concatenation operator.</p>
","4006"
"Does ""set"" command affect only the active buffer?","1655","","<p>I have two buffers in vim:</p>

<pre><code>:ls
  1 %a   "".vimrc""                       line 1
  2 #h   ""script.sh""                    line 1
Press ENTER or type command to continue
</code></pre>

<p>As seen above, I'm on the first buffer. Now if I execute the <code>:set softtabstop=16</code> command, then I expect it to affect both buffers. However, this is not the case- while the <code>sts</code> value for first buffer is indeed changed and <kbd>Tab</kbd> key inserts four tab characters(<code>ts=4</code>), then for second buffer the <code>sts</code> value is still <code>4</code>:</p>

<pre><code>:ls
  1 #h + "".vimrc""                       line 1
  2 %a + ""script.sh""                    line 1
  softtabstop=4
Press ENTER or type command to continue
</code></pre>

<p>Why is that so? I thought that <code>set</code> affects all the buffers and <code>setlocal</code> affects only the active buffer..</p>
","<p>Options can be <em>global</em>, <em>window-local</em>, or <em>buffer-local</em>.</p>

<p>When you <code>:set</code> a <em>global</em> option, the new value is <em>global</em>.</p>

<p>When you <code>:setlocal</code> a <em>global</em> option, the new value is <em>local</em>.</p>

<p>When you <code>:set</code> a <em>local</em> option, the new value is <em>local</em>.</p>

<p><code>softtabstop</code> being a <em>buffer-local</em> option, changing its value only affects the current buffer.</p>

<p>The ""scope"" of an option is indicated in <code>:help option</code>:</p>

<pre><code>'softtabstop' 'sts'    number    (default 0)
                       local to buffer
                       {not in Vi}
Number of spaces that a &lt;Tab&gt; counts[...]
</code></pre>

<p><code>:help local-options</code>, <code>:help :setlocal</code>, and <code>:help global-local</code> explain all that in more details.</p>
","9435"
"Substitute pattern between braces","1650","","<p>Is there a way to substitute a pattern only if it occurs inside the brace pair that the cursor is on?</p>

<p>For instance, if I have the text</p>

<pre><code>int bar()
  {
  ...
  }

int foo()
  {
  char bar;

  bar = 'a';
  }
</code></pre>

<p>I can change all instances of bar to baz in the second brace pair using line numbers, e.g. <code>:7,11s/bar/baz/g</code>. Is it possible to do this without the line numbers, only having the cursor on one of the braces?</p>

<p><strong>Edit:</strong></p>

<p>The version of Vi I have is 3.10, which doesn't appear to have visual mode</p>
","<h1>First Solution</h1>

<p><hr>
This requires some advanced <code>cmdline-range</code> magic to work. Here is what I have come up with:</p>

<pre><code>:?{?,/}/s=bar=baz=g
</code></pre>

<p>Now, to break it down:</p>

<ul>
<li><code>?{?</code> - Searches backwards for the first line containing a <code>{</code>.  You can
  use any regex in the place of <code>{</code> if you need to match more specific
  cases.</li>
<li><code>,</code> - This takes the lines in front of and in back of it, and matches
all lines in between.</li>
<li><code>/}/</code> - Searches forwards for the first line containing a <code>}</code>.  Once again,
this could be any regex to match your specific needs.</li>
<li><code>s=bar=baz=g</code> - This is just a normal search and replace statement, using
<code>=</code> as the seperator.</li>
</ul>

<p>Note that you must have the cursor between the two parentheses, otherwise it will not work.  These two help pages are very useful on the subject of <code>cmdline-ranges</code>:</p>

<pre><code>:help 10.3
:help cmdline-ranges
</code></pre>

<h1>Second Solution</h1>

<p><hr>
There is also a slightly simpler way of doing it as well.  These are the keys you have to press:</p>

<pre><code>vi{:s/bar/baz/g
</code></pre>

<p>Here is how this works:</p>

<ul>
<li><code>vi{</code> - Visually select an ""inner block"".  See <code>:help text-objects</code> for
more on this.</li>
<li><code>:</code> - Key to start a command as usual, however when in visual select mode,
vim automatically inserts markers for the beginning and ending of the 
selection.  Like so: <code>:'&lt;,'&gt;</code>  This is more special <code>cmdline-range</code> syntax,
where <code>'</code> means the line at marker <code>&lt;</code>, which in this case is the marker
which is always set to the beginning of the visual selection.</li>
<li><code>s/bar/baz/g</code> - Normal substitution command.</li>
</ul>
","2752"
"Is there any way to edit ipynb files by using vim?","1649","","<p>I want to access <a href=""http://jupyter.org/"" rel=""nofollow"">Jupyter notebook</a> from inside vim.</p>

<p>I have compile vim with Python support, and try this plugin <a href=""http://github.com/ivanov/vim-ipython"" rel=""nofollow"">http://github.com/ivanov/vim-ipython</a>. The documentation suggest me to run :IPython command. This seems to not working at all. Some thread on the internet give me a gist that probably the project has been abandoned and people use vim binding in jupyter notebook instead of accessing notebook from inside vim. <a href=""https://github.com/lambdalisue/jupyter-vim-binding"" rel=""nofollow"">https://github.com/lambdalisue/jupyter-vim-binding</a>.</p>

<p>The problem is, I also like to have some plugins as vim-jedi etc. Using the vim binding doesn't make any plugin I installed in vim accessible from inside Jupyter notebook. </p>

<p>Since I have try to search in google with no satisfying result, I really want to ensure, whether there is a way to access Jupyter notebook (editing Ipynb in the correct way by using vim) or not.</p>

<p>Thank you.</p>
","<p>This maybe not the answer to your question, but perhaps an answer to your problem with vim-ipython: you could try <a href=""http://github.com/wilywampa/vim-ipython"" rel=""nofollow"">http://github.com/wilywampa/vim-ipython</a></p>

<p>It doesn't seem that it is too active either, but at least it works for me with Jupyter 5.0.0.</p>

<p>Make sure to read the help thoroughly as there are several actions to be done to make it work.</p>

<p>I made a small convenience script to connect easier:</p>

<pre><code>import IPython
from IPython.lib import kernel
print 'Path to kernel:'
print IPython.lib.kernel.get_connection_file()

def completion_metadata(ip):
    return [dict(word=m) for m in ip.Completer.matches]
</code></pre>

<p>Then if you started your notebook as <code>-&gt; python ~/.vim/plugged/vim-ipython/monitor.py &amp; jupyter console</code>, (or qtconsole) you could just execute <code>:IPython --existing path/to/kernel/printed</code> to connect to a correct kernel. (although simple :IPython should also work with just the lastest kernel you started) </p>

<p>The function provides (no) additional info that is shown when using omni-completion (if you don't have it you will see errors in the notebook).</p>
","9483"
"How do I run a specific vim command when opening a file with a given extension?","1637","","<p>I want all of my files ending in <code>.tex</code> to have line length 80. So whenever I open a <code>.tex</code> file in vim I type <code>:set tw=79</code>. What would I put in my .vimrc to automate this?</p>

<p>What if I wanted it to work with a specific list of filetypes, say, <code>.md</code>, <code>.txt</code>, and <code>.tex</code>?</p>
","<p>Instead of checking the extension and setting the textwidth accordingly you could simply create a <code>tex.vim</code> (the name must match the filetype) file in <code>.vim/ftplugin/</code> or for Windows <code>$HOME/vimfiles/ftplugin/</code> and set textwidth there. This will help you to keep your .vimrc clean.</p>

<p>Your <code>.vim/ftplugin/tex.vim</code> file would look like:</p>

<pre><code>set textwidth=79
</code></pre>

<p>As 8bittree said in the comments you also have to enable <code>filetype plugins</code> in your vimrc (I woudln't know why anybody would not enable it):</p>

<pre><code>filetype plugin on
</code></pre>

<p>Read this for more information: <a href=""http://vim.wikia.com/wiki/Keep_your_vimrc_file_clean"" rel=""nofollow"">http://vim.wikia.com/wiki/Keep_your_vimrc_file_clean</a></p>
","5189"
"Is it possible to easily work with .odt, .doc, .docx, .rtf, and other non-plain-text formats in Vim?","1618","","<p>Occasionally someone sends me a <code>.odt</code>, <code>.doc</code>, and <code>.docx</code> file; opening them in OpenOffice is always a pain because, well, OpenOffice.</p>

<p>Right now I use a variety of commandline tools (such as <code>odt2txt</code>) to convert these files to plain text, save the plain text to a temporary file, and then view (and maybe edit) it in Vim.</p>

<p>Can this be made easier? Perhaps something with autogroups? Or maybe there are better ways? I would like to just do:</p>

<pre><code>$ vim file.odt
</code></pre>

<p>And have Vim take care of the converting for me?</p>

<p>Even better (bonus points) would be if I was also able to save the file (to <code>file.txt</code>), but that this would <em>not</em> be created until I do a write...</p>
","<p>You should be able to add something like this to your vimrc:</p>

<pre><code>autocmd BufReadPost *.odt :%!odt2txt %
</code></pre>

<p>That will send the entire buffer through the <code>odt2txt</code> program after it's read in by vim, but only if the file name ends with <code>.odt</code>.</p>

<p>There's also the <a href=""http://www.vim.org/scripts/script.php?script_id=1432"">textutil.vim</a> plugin that says it can do what you're talking about for a few of those file types (but I haven't personally used it).</p>

<p>If you're willing to edit in something slightly more structured than plain text, like markdown, you could also use <a href=""http://johnmacfarlane.net/pandoc/"">pandoc</a> to do the conversion:</p>

<pre><code>autocmd BufReadPost *.docx :%!pandoc -f docx -t markdown
autocmd BufWritePost *.docx :!pandoc -f markdown -t docx % &gt; tmp.docx
</code></pre>

<p>I haven't actually tested these conversions, but they should work. You may need to use different tools depending on the file format.</p>
","561"
"I can't switch to | cursor in insert mode","1617","","<p>I want to change cursors to a <code>|</code> character in insert mode, and then back to a block in normal mode. I am using urxvt as my terminal, and neovim.</p>

<p>To switch cursors in my terminal, I run the following to get a blinking I-beam</p>

<pre><code>echo -e ""\033[5 q""
</code></pre>

<p>and then to go to a solid block:</p>

<pre><code>echo e ""\033[1 q""
</code></pre>

<p>I tried this in my <code>vimrc</code>:</p>

<pre><code>let &amp;t_SI = ""\033[1 q""
let &amp;t_SR = ""\033[5 q""
let &amp;t_EI = ""\033[5 q""
</code></pre>

<p>but it didn't work. Nothing different from normal happens when I enter and exit insert mode.</p>

<p>I also tried this in my <code>vimrc</code>:</p>

<pre><code>if has(""autocmd"")
  au InsertEnter * silent execute ""!print -n -- '\033[1 q'""
  au InsertLeave * silent execute ""!print -n -- '\033[3 q'""
  au VimLeave * silent execute ""!print -n -- '\033[5 q'""
endif
</code></pre>

<p>When I enter insert mode with this, the editor shifts up one line, and the status bar is shown twice at the bottom. When I exit insert mode, I see the text <code>[3 q</code> below the statusbar. Any ideas? Thanks</p>

<p>Some links that I tried:</p>

<p><a href=""https://bbs.archlinux.org/viewtopic.php?id=177281"" rel=""nofollow noreferrer"">https://bbs.archlinux.org/viewtopic.php?id=177281</a>
<a href=""https://bbs.archlinux.org/viewtopic.php?id=155802"" rel=""nofollow noreferrer"">https://bbs.archlinux.org/viewtopic.php?id=155802</a></p>
","<p>Neovim does not use <code>vimrc</code> it uses <code>$XDG_CONFIG_PATH/nvim/init.vim</code>.  Yet, there is more to it.  In Vim you should use <code>\&lt;esc&gt;</code> to represent the escape key.  I can change the cursor on Arch Linux on <code>urxvt</code> with the following in my <code>vimrc</code>:</p>

<pre><code>let &amp;t_SI = ""\&lt;esc&gt;[5 q""
let &amp;t_SR = ""\&lt;esc&gt;[5 q""
let &amp;t_EI = ""\&lt;esc&gt;[2 q""
</code></pre>

<p>I also tried the <code>autocmd</code> technique and it works.  Instead of the previous three lines I do:</p>

<pre><code>au InsertEnter * silent execute ""!echo -en \&lt;esc&gt;[5 q""
au InsertLeave * silent execute ""!echo -en \&lt;esc&gt;[2 q""
</code></pre>

<p>And the cursor changes to a bar (<code>|</code>) in insert mode.  In <code>urxvt</code>:</p>

<ul>
<li><code>1</code> is the blinky block cursor</li>
<li><code>2</code> is the default (non-blinky) block cursor</li>
<li><code>3</code> is blinky underscore</li>
<li><code>4</code> fixed underscore</li>
<li><code>5</code> pipe bar (blinking)</li>
<li><code>6</code> fixed pipe bar</li>
</ul>

<hr>

<p>In <code>neovim</code> things work differently.  Although <code>:help termcap-cursor-shape</code> is the same as in Vim it appears to ignore <code>t_SI</code>, <code>t_SR</code> and <code>t_EI</code>.  As Caleb Eby found out the <code>NVIM_TUI_ENABLE_CURSOR_SHAPE</code> variable controls <code>neovim</code>'s cursor shape instead.</p>

<p>You can therefore add:</p>

<pre><code>let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
</code></pre>

<p>To your <code>~/.config/nvim/init.vim</code> and the cursor will work as if the termcap variables were set as:</p>

<pre><code>let &amp;t_SI = ""\&lt;esc&gt;[5 q""
let &amp;t_SR = ""\&lt;esc&gt;[3 q""
let &amp;t_EI = ""\&lt;esc&gt;[2 q""
</code></pre>

<p>(But you cannot change the values, as far as I meddled with this)</p>

<p>Reference:</p>

<ul>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/term.html#termcap-cursor-shape"" rel=""nofollow"">:h termcap-cursor-shape</a></li>
<li><a href=""https://hamberg.no/erlend/posts/2014-03-09-change-vim-cursor-in-iterm.html"" rel=""nofollow"">Changing cursor in Vim in iTerm</a></li>
</ul>
","9133"
"Renumbering buffer list","1608","","<p>After I've been working on a project for a while, I start to see large gaps between consecutive buffer numbers. This is because the buffers in between them were wiped out for various reasons. Unfortunately, this can make it awkward to jump to a particular buffer, or select a range of buffers, after typing <code>:ls</code>. Is there some way to renumber all of the open buffers, starting from one, without opening all of the files again?</p>
","<p>No (not without deleting buffers).</p>

<p>Vim does not support manually buffer number assignment or re-ordering of buffers once you open them. It's philosophy is that each buffer gets an identifier that is fixed for the lifetime of that buffer (in the help for <code>:ls</code>, it notes that ""each buffer has a unique number.  That number will not change..."").</p>

<p>You could use the argument list, though. Put all open buffers into the argument list, delete all outstanding buffers, then open everything in the argument list. The following commands will accomplish that:</p>

<ul>
<li><code>:argdel *</code> (delete the existing argument list)</li>
<li><code>:bufdo argadd %</code> (for each buffer, add the buffer's path to the list)</li>
<li><code>:1,1000bd</code> (delete buffers 1 to 1000; probably there's a better way to do this)</li>
<li><code>:argdo e</code> (for each argument, edit that argument)</li>
</ul>

<p>This will leave you with an extra empty buffer that vim opens when you delete all the previous buffers, but it's a reasonably approximation of the functionality you want. You can just <code>:bd</code> that extra buffer.</p>
","466"
"Override cursorline background color by syntax highlighting","1603","","<p>I've set the background color of the current line to light gray like this:</p>

<pre><code>hi CursorLine cterm=NONE ctermbg=253
</code></pre>

<p>(Note that my color scheme is black-on-white.)</p>

<p>However, this way any background colors set by syntax highlighting is overridden by this, i.e. if a word on the current line is highlighted, say, white-on-red, I see the text as white-on-light gray. I only see that the line (or part of it) is supposed to be highlighted red if I move the cursor to another line.</p>

<p>What I'd like is that only the part of the current line for which no special background color is set is highlighted light-gray by cursorline, but that the cursorline highlighting is overridden by syntax highlighting.</p>

<p>Is this possible?</p>

<p>PS: The specific case where I've encountered this issue is the second line in a git commit tmp-file, where the text on the second line is white-on-red (for whatever reason).</p>
","<p>I had once <a href=""https://groups.google.com/d/msg/vim_dev/RscKIpSI3iA/YFeGoycV9GIJ"" rel=""nofollow"">suggested a change on the vim_dev mailing list</a>, but Bram was against it, with the following reasoning:</p>

<blockquote>
  <p>Having the syntax background color overrule the 'cursorline' background color will result in the cursorline to be broken in pieces or hardly viewable.</p>
</blockquote>

<h3>Alternative</h3>

<p>With the <code>matchadd()</code> function, you can specify a <code>{priority}</code> that determines whether the highlighting will be in front of or behind the cursorline. Unfortunately, this is totally different from syntax highlighting, and even scoped differently. Therefore, it doesn't help with syntax issues, but enables other uses, e.g. highlightings by my <a href=""http://www.vim.org/scripts/script.php?script_id=2666"" rel=""nofollow"">Mark plugin</a>.</p>

<h3>Workaround</h3>

<p>You can keep the syntax background color if you use the <code>reverse</code> attribute. For instance, instead of defining</p>

<pre><code>:hi Todo guifg=Black guibg=Yellow
</code></pre>

<p>do this:</p>

<pre><code>:hi Todo guifg=Yellow guibg=Black gui=reverse
</code></pre>

<p>Unfortunately, now you have another problem: The text (foreground) color changes from black to the cursorline color. This works well for the white-on-red error highlighting you mention (turning to (bright)-cursorline-on-red), but less well for my <code>Todo</code> example (cursorline-on-Yellow). Additionally, the <code>reverse</code> attribute is not supported in all terminals.</p>

<h3>Summary</h3>

<p>Unfortunately, there's no easy fix. Despite the shortcomings, I use the above workaround (kudos to @romainl, in whose config I first saw this!)</p>
","3289"
"How to edit content from the standard input?","1599","","<p>I would like to edit content in vim which was dynamically generated from the command-line without having the file yet.</p>

<p>In example:</p>

<pre><code>$ echo This is example. | vim /dev/stdin
$ cat /etc/hosts | vim /dev/stdin
</code></pre>

<p>but it's failing with the errors:</p>

<blockquote>
  <p>Vim: Warning: Input is not from a terminal</p>
  
  <p>Vim: Error reading input, exiting...</p>
</blockquote>

<p>It is possible to achieve that?</p>
","<p>You have to use <code>-</code> in place of the file name on the command line:</p>

<pre><code>echo This is example. | vim -
</code></pre>

<p>The above command will open an unnamed buffer filled with the text read from the standard input.  </p>
","738"
"Navigation in insert mode","1599","","<p>I finally decided to ditch the arrow keys for navigation in favor of <code>hjkl</code>.
I used the <code>Vim hardmode</code> plugin to disable the arrow keys.</p>

<p>I got used to navigation pretty fast, but turns out that navigation in insert mode suddenly is impossible.</p>

<p>Is there any solution for this ? (existing insert mode is not a solution).</p>
","<p>There are many options you have. One option, and IMO the sanest and easiest is to just stop disabling the arrow keys. I understand why many hardcore vimmers say things like</p>

<blockquote>
  <p>You should never ever use the arrow keys again! Every time you use the arrow keys, you waste 3 minutes of time, a puppy dies and somebody switches to Emacs! (Obviously I'm kidding)</p>
</blockquote>

<p>However, there is a purpose for the arrow keys. They're extremely useful for navigating:</p>

<ul>
<li><p>In insert mode</p></li>
<li><p>In the command line</p></li>
</ul>

<p>Generally when people tell you not to use the arrow keys, it's because they want you to relearn navigation in a more vim-like way. If you are comfortable with <code>hjkl</code>, and you mostly use the arrow keys in insert mode, there's no good reason to force yourself not to use them.</p>

<p>Option #2 is to remap <code>ctrl-hjkl</code> to act like cursor keys. This is nice because you can stay on the homerow, and it fits well with the muscle memory you have already learned using <code>hjkl</code> in normal mode. In fact, <a href=""https://github.com/DJMcMayhem/dotFiles/blob/2f91270f2e88ddd9a916c8d81702dcb2e043f5c7/.vimrc#L283"" rel=""nofollow noreferrer"">this is what I do</a>. The major downside to this approach is that in can be a pain to setup in terminal vim because <code>&lt;C-j&gt;</code> produces a <code>NUL</code> byte. I get around this by using Gvim. I am not aware if there is an easy fix for console vim or not.</p>

<p>Option #3 is to use <code>&lt;C-o&gt;</code> to make small normal mode movements. For example, if you are typing</p>

<pre><code>Hello world!
     cursor^
</code></pre>

<p>and you realize you forgot a comma, rather than doing <code>&lt;left&gt;&lt;left&gt;&lt;left&gt;&lt;left&gt;&lt;left&gt;&lt;left&gt;</code>, you could simply do <code>&lt;C-o&gt;b&lt;C-o&gt;h</code> or <code>&lt;C-o&gt;2fo</code>, or any other combination of normal mode movements you like.</p>

<p>Of course, another option, and one I like very much is to just use <code>&lt;esc&gt;</code>, make a few small movements before jumping back in to normal mode. You mentioned that you'd rather not do that, but sometimes this really is the most efficient way.</p>

<p>There are probably some other approaches too, but these are the ones I like that have worked for me.</p>
","10297"
"disable previously enabled mouse with Vim script","1591","","<p>I've added this script to my vimrc file</p>

<pre><code>command! EnableMouse :call EnableMouseFunction()
function! EnableMouseFunction()
    let command = "":set mouse=a""
    exe command
endfunction
</code></pre>

<p>So, ... what is the method to unset mouse in vim?</p>
","<p>You don't need anything that complex</p>

<pre><code>set mouse=a
"" and
set mouse=
</code></pre>

<p>are enough.</p>

<p>You can even define your command to be </p>

<pre><code>:command! ToggleMouse exe 'set mouse='.(empty(&amp;mouse)?'a':'')
"" Here I use `:exe` because I didn't want to use `:if` in a command definition which would look like:
:command! ToggleMouse if empty(&amp;mouse) | set mouse=a | else | set mouse= | endif
</code></pre>
","10971"
"Is there a command to enter Visual Block mode?","1583","","<p>I've set up a bunch of key mappings that would cause many Vim users to cringe. Now I am unable to get into Visual Block mode using Ctrl-V (Ctrl-Q isn't mapped, but it doesn't work). </p>

<p>Is there any command that I can type to enter Visual Block mode?</p>

<p>Ideally I could set something up so that <code>:vb</code> would enter visual block mode.</p>
","<p>There is no built in command to start visual block mode in vim, but you can define one yourself:</p>

<pre><code>command! Vb normal! &lt;C-v&gt;
</code></pre>

<p>Here is a breakdown of how it works:</p>

<ul>
<li><code>command! Vb</code> - This creates a command called ""Vb"".  The <code>!</code> after <code>command</code> means that vim will not throw an error if the command is already defined.</li>
<li><code>normal! &lt;C-v&gt;</code> - This command tells vim to take all characters after it and act like you had pressed them in normal mode.  The <code>!</code> makes it so that all user defined mappings are ignored.  This means that if <code>&lt;C-v&gt;</code> is mapped to something else, it will still work the way it does by default.</li>
</ul>

<p>Here are some relevant help topics:</p>

<ul>
<li><code>:help :command</code></li>
<li><code>:help :normal</code></li>
</ul>

<h2>NOTE</h2>

<p>User defined commands must start with a capital letter.</p>

<p>Also, there may be a conflicting mapping which prevents you from using <code>&lt;C-v&gt;</code> to enter visual block mode.  To check for any conflicting mappings for <code>&lt;C-v&gt;</code>, you can run <code>:verbose map &lt;C-v&gt;</code>.</p>
","3702"
"How to find out what a key is mapped to?","1577","","<p>I know that running <code>:map</code> commands without arguments should give me a list of user-defined mappings, but, for example, when I press Ctrl-W Ctrl-I something happens, yet I have no idea what function was just happened as built-in mappings don't appear in the <code>:map</code> commands.</p>

<p>How do I find out what a key does?</p>
","<p>You can't.</p>

<p>Here's the C source code for what <code>&lt;C-w&gt;&lt;C-i&gt;</code> does:</p>

<p><code>normal.c</code>:</p>

<pre><code>/*
 * This table contains one entry for every Normal or Visual mode command.
 * The order doesn't matter, init_normal_cmds() will create a sorted index.
 * It is faster when all keys from zero to '~' are present.
 */
static const struct nv_cmd
{
    int         cmd_char;       /* (first) command character */
    nv_func_T   cmd_func;       /* function for this command */
    short_u     cmd_flags;      /* NV_ flags */
    short       cmd_arg;        /* value for ca.arg */
} nv_cmds[] =
{

[...]

    {Ctrl_W,    nv_window,      0,                      0},
};

[...]

/*
 * CTRL-W: Window commands
 */
    static void
nv_window(cmdarg_T *cap)
{
    if (!checkclearop(cap-&gt;oap))
        do_window(cap-&gt;nchar, cap-&gt;count0, NUL); /* everything is in window.c */
}
</code></pre>

<p><code>window.c</code>:</p>

<pre><code>/*
 * all CTRL-W window commands are handled here, called from normal_cmd().
 */
    void
do_window(
[..]
) {
    switch (nchar)
    {
[..]
    case 'i':                       /* Go to any match */
    case Ctrl_I:
                type = FIND_ANY;
                /* FALLTHROUGH */

[..]
    default:    beep_flush();
                break;
</code></pre>

<p>I'm not entirely sure where the <code>type</code> variable gets picked up, I didn't feel like looking that up, but the point is, that there is no real facility to say ""this key is mapped to this functionality"". It's basically just a <code>struct</code> which maps a <code>char</code> to a function, and the implementation of the second keystroke (<code>&lt;C-i&gt;</code>) is simply ad-hoc ugliness!</p>

<p>This is different from Emacs, where (I presume) everything is in Lisp, and your custom mappings are not any different from Emacs' default mappings. But in Vim you have ""magic"" mappings that are provided by the C code which map against C functions that are never exposed in Vim. I always say that Vim has the better idea, but Emacs has the better implementation ;-)</p>

<p>So the only way is to look it up in the help files. This is why I closed this as a duplicate of <a href=""https://vi.stackexchange.com/q/2136/51"">How do I navigate to topics in Vim's documentation</a> since that's the only <em>practical</em> answer anyone can give. One could indeed argue that a more in-depth explanation to the question could be given (as I have just done), and had you argued <em>that</em>, instead of giving the (now-deleted) response, I would probably have said ""you're right, sorry for the mistake"" and re-opened it ;-)</p>

<p>At any rate, to briefly illustrate the conventions with some examples:</p>

<ul>
<li><code>:help w</code> − normal mode mapping for <code>w</code> (case-sensitive);</li>
<li><code>:help g8</code> − normal mode mapping for <code>g8</code>;</li>
<li><code>:help v_o</code> − visual mode mapping for <code>o</code>; other modes are <code>c</code> for command-line and <code>i</code> for insert;</li>
<li><code>:help CTRL-W</code> − normal mode mapping for <code>&lt;C-w&gt;</code>;</li>
<li><code>:help i_CTRL-W</code> − insert mode mapping for <code>&lt;C-w&gt;</code>;</li>
<li><code>:help  CTRL-W_CTRL-I</code> − normal mode mapping for <code>&lt;C-w&gt;&lt;C-i&gt;</code>;</li>
<li><code>:help i_CTRL-G_&lt;Down&gt;</code> − insert mode mapping for <code>&lt;C-g&gt;&lt;Down&gt;</code>.</li>
</ul>
","6886"
"How can I build vim with just python 3 support?","1561","","<p>I'm on Arch, and recently the <code>vim-python3</code> and <code>gvim-python3</code> packages were removed, so I'm working on building vim from source such that the <code>:python</code> command will act as <code>python3</code>. Specifically, I'm doing this so that the <code>vim-jedi</code> package will work properly. I tried changing the </p>

<pre><code>--enable-pythoninterp=dynamic
</code></pre>

<p>flag in my <code>PKGBUILD</code> to</p>

<pre><code>--disable-pythoninterp
</code></pre>

<p>but when I did <code>vim --version</code> after building and installing, it still showed</p>

<pre><code>+python/dyn
</code></pre>

<p>Also, doing</p>

<pre><code>:python import sys;print(sys.version)
</code></pre>

<p>showed python 2 still. What do I need to change to have only python 3?</p>
","<p>Thanks to x33a on the Arch forums, I was able to solve my problem. (<a href=""https://bbs.archlinux.org/viewtopic.php?pid=1596987#p1596987"" rel=""noreferrer"">https://bbs.archlinux.org/viewtopic.php?pid=1596987#p1596987</a>)</p>

<p>I changed the python 3 flag from</p>

<pre><code>--enable-python3interp=dyanmic
</code></pre>

<p>to</p>

<pre><code>--enable-python3interp
</code></pre>

<p>This resulted in only python 3 being available.</p>
","6174"
"What is the reverse of the 'go to next' command","1558","","<p>If I want to go to the next <code>,</code> on the line then I type <code>t,</code>. If I wanted to go to the previous <code>,</code> I could use <code>/n</code>, enter, <code>N</code> but this is a bit of a fiddle. What is the best way to go to reverse the <code>t</code> command and go to the previous <code>,</code>?</p>
","<p>You can just use <code>T,</code> and <code>F,</code> instead of <code>t,</code> and <code>f,</code>. The lowercase commands go forward; the uppercase ones go backwards.</p>

<p><strong>Example</strong>:</p>

<pre><code>foo, b|ar, baz
</code></pre>

<p>With the cursor on the first <code>a</code>, <code>t,</code> would move forward to <code>r</code> (the character before the next comma). Now if you use <code>T,</code> you will go backwards to the character after the previous comma (i.e. the space after <code>foo,</code>).</p>

<p><code>f</code> and <code>F</code> do the same except they go to the specified character and not the character before/after it.</p>

<p>Also note you can use the <code>;</code> and <code>,</code> commands to repeat the last <code>f</code>, <code>F</code>, <code>t</code> or <code>T</code> command either in a forward of backwards direction.</p>

<p>For more on this read <code>:help f</code>.</p>
","4579"
"Understanding CTRL-U combination","1552","","<p>In <a href=""https://vi.stackexchange.com/a/9720/9237""><strong><em>this</em></strong></a> answer I faced the <code>CTRL-U</code> used in function call after <code>:</code> and before the actual function name. </p>

<pre><code>:nnoremap &lt;buffer&gt; &lt;cr&gt; :&lt;C-U&gt;call append('.', repeat([''],v:count1))&lt;cr&gt;
</code></pre>

<p>Here is what help says:</p>

<pre><code>CTRL-U      Scroll window Upwards in the buffer.  The number of
            lines comes from the scroll option (default: half a
            screen).  If [count] given, first set the 'scroll'
            option to [count].
</code></pre>

<p>I tried it myself and it worked as I supposed. But I didn't quite understand the part about the <code>scroll</code> option. What do they mean <code>'scroll'  option</code>? </p>

<p>And besides it does some strange thing in insert mode. As far as I understood it deletes everything from the cursor to the beginning of the line and then joins the resulting line and the line above.</p>
","<p>Help, by default, returns any mappings that apply to normal mode. In normal mode, <code>&lt;C-u&gt;</code> <em>does</em> scroll upwards, but that's not what we're interested in. To see what <code>&lt;C-u&gt;</code> does in command line mode, or <em>cmode</em>, (the mode where you type commands starting with a colon) search <code>:h c_CTRL-u</code></p>

<pre><code>                            *c_CTRL-U*
CTRL-U      Remove all characters between the cursor position and
        the beginning of the line.  Previous versions of vim
        deleted all characters on the line.  If that is the
        preferred behavior, add the following to your .vimrc: &gt;
            :cnoremap &lt;C-U&gt; &lt;C-E&gt;&lt;C-U&gt;
</code></pre>

<p>To understand why this is useful for a normal mode mapping, try removing it, try typing something like <code>5:</code>, and see what comes up. You should see something like:</p>

<pre><code>:.,.+4
</code></pre>

<p>This is a <a href=""https://vi.stackexchange.com/questions/tagged/range"">range</a></p>

<p>Now try typing <code>5:&lt;C-u&gt;</code> and see what comes up. You should just see</p>

<pre><code>:
</code></pre>

<p>Similarly in visual mode, pressing <code>:</code> inserts the range</p>

<pre><code>:'&lt;,'&gt;
</code></pre>

<p>That's why you'll very frequently see mappings like:</p>

<pre><code>nnoremap foo :&lt;C-u&gt;bar
</code></pre>

<p>or</p>

<pre><code>xnoremap foo :&lt;C-u&gt;bar
</code></pre>
","9752"
"Match everything before first occurrence of a character","1528","","<p>I want to find all the characters upto the first occurence of the character ""/"".</p>

<p>I tried using </p>

<blockquote>
  <p>/.\{-}\/ </p>
</blockquote>

<p>but this included every character upto the last occurrence.</p>

<p>for example, </p>

<blockquote>
  <p>test/path/to/something</p>
</blockquote>

<p>matched ""test/path/to/"" but I want it to only match ""test/""</p>
","<p>It doesn't actually match <code>test/path/to/</code> -- it matches three times: <code>test/</code>, <code>path/</code> and <code>to/</code>. If you want to match only match the first one, the easiest way is to anchor the pattern to something, for example, beginning of line:</p>

<pre><code>/^.\{-}\/
</code></pre>

<p>which works if you really want to match everything before. In practice, you might want to only match what is e.g. separated by whitespace:</p>

<pre><code>/\s\zs\S\{-}\/
</code></pre>
","6085"
"How to open multiple files matching a wildcard expression?","1508","","<p>I want to edit several files matching a glob expression. For example, to edit all git config files in child directories, I can do this in the shell:</p>

<pre><code>vim */.git/config
</code></pre>

<p>At the Vim <code>:</code> command line, I expected <code>:find */.git/config</code> to do something similar (i.e., open all files matching the glob expression), but instead it complains <code>E77: Too many file names</code>.</p>

<p>Is there Vim command or one-liner to open multiple files matching a wildcard/glob expression (that doesn't involve writing a function)?</p>
","<p>You can use <code>:args {glob}</code>. In your glob, <code>**</code> will traverse directories recursively.</p>

<p>This will populate the argument list, which is the same list that gets populated when you start Vim with one or more filenames as arguments.</p>

<p>Once your argument list is populated, you can navigate through it using <code>:next</code> and <code>:previous</code>. You can also jump to the first and last item with the <code>:first</code> and <code>:last</code> commands.</p>
","2608"
"How to comment out a set of lines which are selected in visual mode?","1503","","<p>How do I comment out multiple in visual mode selected lines? How do I make it language specific?</p>

<p>For example, if the first 4 lines are selected:</p>

<pre><code>def foo(a,b):
    for each in (a,b):
        print each
    return a+b
print ""2""
</code></pre>

<p>The operation of a command/macro should result in this (in python):</p>

<pre><code>#def foo(a,b):
#    for each in (a,b):
#        print each
#    return a+b
print ""2""
</code></pre>
","<p>If you want language specific commenting you will need a plugin like <a href=""https://github.com/scrooloose/nerdcommenter"" rel=""nofollow noreferrer"">nerdcommenter</a>.</p>

<p>Alternatively, although it doesn't answer your actual question, you can use builtin vim actions and your knowledge of each language's comment characters...</p>

<h2>Option #1: V-blocks</h2>

<ol>
<li><code>:1</code> <kbd>Enter</kbd>  (Go to line 1)</li>
<li><kbd>Ctrl</kbd>-V (V-Block mode)</li>
<li><code>jjj</code> (Down 3 more lines)</li>
<li><kbd>Shift</kbd>-I (Enter insert mode before the block)</li>
<li><code>#</code> (Insert a '#')</li>
<li><kbd>Esc</kbd> (Back to normal mode)</li>
</ol>

<h2>Option #2: Substitution</h2>

<pre><code>:1,4s/^/#/
</code></pre>

<h3>Breakdown:</h3>

<ol>
<li><code>:</code> Ex command follows</li>
<li><code>1,4</code> on lines from 1 through 4</li>
<li><code>s</code> substitute</li>
<li><code>/</code> separator for pieces of the substitution command.<br>
(You can also use a different character, e.g. <code>:</code>)</li>
<li><code>^</code> beginning of the line</li>
<li><code>/</code> separator</li>
<li><code>#</code> the comment character for python</li>
<li><code>/</code> final separator</li>
</ol>

<h2>Option #3: Repeat application of a macro (<a href=""https://stackoverflow.com/questions/355907/how-do-i-repeat-an-edit-on-multiple-lines-in-vim"">source</a>)</h2>

<ol>
<li><code>:1</code> <kbd>Enter</kbd> (Go to line 1)</li>
<li><code>qa</code> (Start recording on register <code>a</code>)</li>
<li><KBD>Shift</KBD>-I (Enter insert mode at the beginning of the line</li>
<li><code>#</code> (Add a '#' at the beginning of the line)</li>
<li><kbd>Esc</kbd> (Back to normal mode)</li>
<li><p><code>q</code> (Stop recording)</p></li>
<li><p><code>:2,4 normal @a</code> (re-run the macro recorded to register <code>a</code> on lines between 2 and 4)</p>

<p>OR</p>

<p>you can select the lines in visual mode and hit <code>:</code> to automatically
populate the Ex line with <code>:'&lt;,'&gt;</code> (a range from the beginning to the end of the
visual selection) then type <code>normal @a</code> and hit <KBD>Enter</KBD> (<a href=""https://stackoverflow.com/questions/3337926/vim-macro-on-every-line-of-visual-selection"">source</a>).</p></li>
</ol>

<p>Now, whenever you want to comment some lines just re-run the macro recorded
to register <code>a</code> on those lines:</p>

<pre><code>:9,22 normal @a (comment out lines 9-22)
</code></pre>
","161"
"Setting TAB to 2 spaces","1503","","<p>I've looked through various answers which imply that setting the following in .vimrc would be appropriate to force tab insertions to become spaces.</p>

<pre><code>filetype plugin indent on
"" On pressing tab, insert 2 spaces
set expandtab
"" show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
"" when indenting with '&gt;', use 2 spaces width
set shiftwidth=2
</code></pre>

<p>However, when I attempt to use 2 spaces, it continues to default to 4 spaces per tab. I have tried moving <code>set expandtab</code> to the bottom of these declarations. I have tried removing the <code>softtabstop</code> declaration. I've scoured the various answers given to other questions as well. If anyone can help me out that would be amazing.</p>
","<p>Have you sourced your <code>.vimrc</code> since making these changes? When having vim open just type <code>source ~/.vimrc</code> (assuming it is in it's default location)</p>

<p>EDIT: <a href=""https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces"">This could help too</a></p>
","13081"
"how to install vim with python support for debian strech","1501","","<p>I installed debian strech two days ago. I installed vim and configured some plugins. I always encountered the following error while opening any file:</p>

<pre><code>vim app.py
Error detected while processing /home/sathish/.vim/plugged/sbt-vim/plugin/sbt.vim:
line   20:
E319: Sorry, the command is not available in this version: pyfile /home/sathish/.vim/plugged/sbt-vim/plugin/../python/sbt-vim.py
Press ENTER or type command to continue
</code></pre>

<p>The vim version output is</p>

<pre><code>vim --version
VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 23 2017 12:10:29)
Included patches: 1-197, 322, 377-378, 550
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by pkg-vim-maintainers@lists.alioth.debian.org
Huge version with GTK2 GUI.  Features included (+) or not (-):
+acl             +file_in_path    +mouse_sgr       +tag_old_static
+arabic          +find_in_path    -mouse_sysmouse  -tag_any_white
+autocmd         +float           +mouse_urxvt     +tcl
+balloon_eval    +folding         +mouse_xterm     +termguicolors
+browse          -footer          +multi_byte      +terminfo
++builtin_terms  +fork()          +multi_lang      +termresponse
+byte_offset     +gettext         -mzscheme        +textobjects
+channel         -hangul_input    +netbeans_intg   +timers
+cindent         +iconv           +num64           +title
+clientserver    +insert_expand   +packages        +toolbar
+clipboard       +job             +path_extra      +user_commands
+cmdline_compl   +jumplist        +perl            +vertsplit
+cmdline_hist    +keymap          +persistent_undo +virtualedit
+cmdline_info    +lambda          +postscript      +visual
+comments        +langmap         +printer         +visualextra
+conceal         +libcall         +profile         +viminfo
+cryptv          +linebreak       -python          +vreplace
+cscope          +lispindent      +python3         +wildignore
+cursorbind      +listcmds        +quickfix        +wildmenu
+cursorshape     +localmap        +reltime         +windows
+dialog_con_gui  +lua             +rightleft       +writebackup
+diff            +menu            +ruby            +X11
+digraphs        +mksession       +scrollbind      -xfontset
+dnd             +modify_fname    +signs           +xim
-ebcdic          +mouse           +smartindent     +xpm
+emacs_tags      +mouseshape      +startuptime     +xsmp_interact
+eval            +mouse_dec       +statusline      +xterm_clipboard
+ex_extra        +mouse_gpm       -sun_workshop    -xterm_save
+extra_search    -mouse_jsbterm   +syntax          
+farsi           +mouse_netterm   +tag_binary      
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  system gvimrc file: ""$VIM/gvimrc""
    user gvimrc file: ""$HOME/.gvimrc""
2nd user gvimrc file: ""~/.vim/gvimrc""
       defaults file: ""$VIMRUNTIME/defaults.vim""
    system menu file: ""$VIMRUNTIME/menu.vim""
  fall-back for $VIM: ""/usr/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/freetype2 -Wdate-time  -g -O2 -fdebug-prefix-map=/build/vim-RY6vK3/vim-8.0.0197=. -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       
Linking: gcc   -L. -Wl,-z,relro -Wl,-z,now -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E  -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl  -L/usr/lib -llua5.2 -Wl,-E  -fstack-protector-strong -L/usr/local/lib  -L/usr/lib/x86_64-linux-gnu/perl/5.24/CORE -lperl -ldl -lm -lpthread -lcrypt  -L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu -lpython3.5m -lpthread -ldl -lutil -lm -L/usr/lib/x86_64-linux-gnu -ltcl8.6 -ldl -lz -lpthread -lieee -lm -lruby-2.3 -lpthread -lgmp -ldl -lcrypt -lm
</code></pre>

<p>I added vim with python support from repository
<a href=""https://launchpad.net/~pi-rho/+archive/ubuntu/dev"" rel=""nofollow noreferrer"">here</a> but the error still occurs.</p>
","<p>I tried many possible ways of adding repositories with python support for debian stretch but none of them worked out.</p>

<p>Finally I build my own and then it solved my issue</p>
","12830"
"How do I check the value of a Vim option in Vimscript?","1489","","<p>In Vimscript, how can I check the current value of a Vim option?</p>

<p>To elaborate, I want to make a command to switch from Full-GUI Mode ( <code>guioptions=+tM</code>) to Hacker Mode (<code>guioptions=-tM</code>).</p>

<p>However, I can't seem to find a way to parse the <code>:set guioptions?</code> value</p>
","<p>You can use the <code>&amp;{option-name}</code> in an if-statement like so:</p>

<pre><code>if &amp;guioptions ==# ""Trl""
    echo ""Toolbars and scrollbars are present!""
elseif &amp;guioptions ==# """"
    echo ""No toolbars and scrollbars present!""
endif
</code></pre>

<p>The <code>&amp;</code> specifies that the variable name is a Vim option.</p>

<p>See <a href=""http://vimhelp.appspot.com/eval.txt.html#%3Alet-%26""><code>:help :let-&amp;</code></a> for the full documentation.</p>
","2570"
"How do I install a .vimball Plugin?","1485","","<p>I was given a plugin for Vim.
It came in something called a <code>.vimball</code>.</p>

<ul>
<li>What am I meant to do with this exactly?</li>
<li>Where do I put it?</li>
<li>Do I need to be root to install it?</li>
</ul>
","<p>Simply open the vimball file in Vim and then execute <code>:source %</code>.</p>

<p>It will move the files to their appropriate folders in your <code>~/.vim</code> directory.</p>

<p>You don't need to be root as it just copies files to your <code>~/.vim</code> directory. You can delete it after you have sourced the vimball file</p>
","492"
"Expand a visual selection in the other direction","1479","","<p>Sometimes I have selected a visual selection with, for example, <code>Vjjjjj</code>, only to realize later that I should have started the selection one line higher. However, pressing <code>k</code> simply decreases the lower range of the selection rather than moving the entire selection up one line.</p>

<p>Here's a <em>visual</em>ization (ha, ha), where the bolded lines are the ones I have selected:</p>

<pre>Do not select this line
Do not select this line
Select this line!        
<b>Select this line!</b>        &lt;-- I pressed <kbd>V</kbd> here...
<b>Select this line!</b>
<b>Select this line!</b>
<b>Select this line!</b>
<b>Select this line!</b>        &lt;-- ... and moved to here. But I should have started my
Do not select this line      selection one line higher!
Do not select this line</pre>

<p>How can I extend a visual selection by moving its starting point in the other direction? If this is not possible, is there any way to add a mapping in my .vimrc that enables me to do so?</p>
","<p>You can use the <code>o</code> command, from <code>:help v_o</code>:</p>

<blockquote>
  <p>Go to Other end of highlighted text: The current         cursor
  position becomes the start of the highlighted     text and the cursor
  is moved to the other end of the     highlighted text.  The
  highlighted area remains the      same.</p>
</blockquote>

<p>So when you have finished selecting the lines you want press <kbd>o</kbd>, the cursor will move to the beginning of the selection and you can select the line before by pressing <kbd>k</kbd>.</p>
","433"
"How to paste from an external source on VI/VIM","1456","","<p>I'm using VI right now to create a php file in AWS. I wanted to know if there was any way I could paste (as in copy/paste) an array from another file into my VI on PuTTY.</p>

<p>The program is supposed to iterate over an array of addresses to parse them but I can't seem to figure out an efficient or easy way to upload the list of addresses.</p>

<p>Here's what the array looks like:</p>

<p><img src=""https://i.stack.imgur.com/BKLNc.png"" alt=""Snippet of the array""></p>
","<p>Just use <code>Shift</code>+<code>Insert</code> or right-click -> paste like you normally do? As long as vi is in 'insert' mode. </p>

<p>Alternatively upload the file and open it in the same vim instance (<code>:split</code>, <code>:vsplit</code> or <code>:tabedit</code>), <code>y,&lt;number of lines&gt;,y</code> to copy and <code>p</code> to paste. </p>

<p>To navigate between tabs type <code>gt</code>, between split panes use <code>Ctrl</code>+<code>W</code>, </p>
","8247"
"How to enable spell check for certain file types?","1445","","<p>I flip between Ruby and Markdown files a lot. Is there a way that I can have <code>set spell</code> automatically set when I open a <code>*.md</code> file, but not when I open a <code>*.rb</code> one?</p>
","<p>The best way to set an option for a particular filetype is to use autocommands.</p>

<p>Here you could add something like that in your <code>.vimrc</code>:</p>

<pre><code>autocmd FileType markdown setlocal spell
</code></pre>

<p>This line will trigger the command <code>setlocal spell</code> when the filetype of a buffer is set as markdown. you can also use the autocommand based on the extension of the file you edit with something like:</p>

<pre><code>autocmd BufRead,BufNewFile *.md setlocal spell
</code></pre>

<p>For more information you should read <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#:autocmd"" rel=""noreferrer""><code>:h :autocmd</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events"" rel=""noreferrer""><code>:h autocmd-events</code></a>.</p>
","6955"
"Quickly calculate the total of a column of numbers","1443","","<p>I'm writing down a markdown table which looks like this:</p>

<pre><code>| 13/05/15 | 09:30-16:00 |  6.5 |
| 14/05/15 | 10:00-16:30 |  6.5 |
| 16/05/15 | 15:30-01:00 |  9.5 |
| 21/05/15 | 09:00-16:30 |  7.5 |
| 22/05/15 | 08:30-17:00 |  8.5 |
| 28/05/15 | 09:30-15:30 |  6   |
| 02/06/15 | 09:00-20:00 | 11   |
| 03/06/15 | 08:30-22:30 | 14   |
</code></pre>

<p>I'm looking for a way to quickly calculate the total of the third column and insert it in the buffer. The solution I have in mind would make use of visual-block mode (to select all the numbers) and maybe of the expression register (to do the math).</p>

<p>Would this be possible using native Vim commands? If not, is there a plugin that can help me?</p>
","<p>I wrote a plugin: <a href=""https://github.com/sk1418/HowMuch"" rel=""nofollow noreferrer"">https://github.com/sk1418/HowMuch</a>  which supports visual selection and does math calculations.</p>

<p>By default the plugin supports three math-expression evaluation engines: Gnu bc, python, and vimscript. You can do the calculations on a certain one or let the plugin automatically choose one for you. </p>

<p>It works with your example like this:</p>

<p><a href=""https://i.stack.imgur.com/ndHHm.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ndHHm.gif"" alt=""enter image description here""></a></p>

<p>For details please read the README on github.</p>
","4696"
"When to use :grep and :vimgrep in vim?","1428","","<p>In vim <code>:make</code> makes it easy to build and fix errors, and <code>:grep</code> and <code>:vimgrep</code> behaves like <code>:make</code>.  But why do you need these two commands? Why not just search for the pattern and just press <code>n</code>? What are the advantages of them over just searching? </p>
","<p>As the doc say:</p>

<pre><code>Vim has two ways to find matches for a pattern: Internal and external.
</code></pre>

<p>In a nutshell, <code>:vimgrep</code> uses Vim's grep mechanism to read and find in files. <code>:grep</code> uses an external commands to achieve the same job.</p>

<p>The <code>/</code> search is for the current buffer only, whereas <code>:[vim]grep</code> search through a pattern of files, allowing you to search in an entire project at once.</p>

<p>Have a look at <code>:h grep</code> for more information.</p>
","9213"
"How to ""full screen"" browse Vim help?","1419","","<p>I know I can browse Vim help with <code>:help</code>, but this opens a split. Sometimes, I just like to study documentation. How read documentation in a ""full screen"" mode?</p>
","<p>Just expand the help window to be the only visible window: <kbd>Ctrl</kbd><kbd>w</kbd>-<kbd>o</kbd></p>

<p>When you're done you can switch back to your other buffers.</p>
","360"
"how to use Netrw Directory Listing in VIM split window without exiting it when a file has been read","1418","","<p>When using VIM, it is possible to get a file listing in one split window by doing this:</p>

<pre><code>:vsp
:e.
</code></pre>

<p>Then you have something that looks like this:</p>

<p><a href=""https://i.stack.imgur.com/JHcKD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JHcKD.png"" alt=""enter image description here""></a></p>

<p>However if you open a file then how can you get back to the listing? Normally when you open a file in vim then you write <code>:wq</code> for writing change and then exit, however if you do this in this case, then the split window is closed.</p>

<p>Is it possible to exit the file and return to previous listing setup? If so , how could it be done?</p>
","<p>There is a dedicated command for opening a netrw listing in a vertical split:</p>

<pre><code>:Vex[plore]
</code></pre>

<p>There is a dedicated command for going back to the latest netrw listing:</p>

<pre><code>:Rex[plore]
</code></pre>

<p>Netrw comes with a complete documentation; read it: <code>:help netrw</code>.</p>
","9289"
"delete lines that match a pattern from a given line to the end of the file","1416","","<p>If I have a file with a lot of comments in it and I want to delete all of the comments from say, line 3 to the end of the file, what's the best way to do it?</p>

<p>I'm stuck, since what I first tried doesn't seem to do quite what I want:</p>

<pre><code>:3,$/^#/d
</code></pre>

<p>Instead of looking for the pattern and deleting lines with it in the range from 3 to the end of the file it deletes all of the lines from 3 to through a line that matches the pattern, and then stops.</p>

<p>So how do I apply an ex command to a range of lines.  In this case it's to to the end of a file, but would it be different if I were to do it to a mark, or between lines 10 and 20 or other ranges?</p>
","<p>Use the <code>:global</code> command for that:</p>

<pre><code>:3,$g/^#/d
</code></pre>

<p>You can apply it to lines <strong>not</strong> matching a pattern:</p>

<pre><code>:3,$g!/^#/d
</code></pre>

<p>You can use the full range mechanism with it (see <code>:help :range</code>):</p>

<pre><code>:.,/#define/+3g/^#/d
</code></pre>

<p>And you can use it with any command:</p>

<pre><code>:3,$g/^#/s/foo/bar/g
</code></pre>

<p>It's one of the most powerful commands in Vim, please see <code>:help :global</code> for details.</p>
","3556"
"vimL sleep within a function","1414","","<p>I'm trying to define a function that will make it easier to see where the cursor is location by putting cross-hairs around it for 100ms.</p>

<p>Here's my attempt: </p>

<pre><code>function! Flash()
    set cursorline cursorcolumn
    sleep 100m
    set nocursorline nocursorcolumn
endfunction
nnoremap &lt;leader&gt;fl :call Flash()
</code></pre>

<p>It seems though that the above function is calling the sleep at the beginning rather than in between the two ""set"" calls.</p>

<p>Is there something fundamental about ""sleep"" that I am misunderstanding?</p>
","<p>The problem is that Vim doesn't redraw the screen until after the function is completed. I'm not sure what Vim's logic on when to redraw is <em>exactly</em>, but in this sort of case you often have to call <code>redraw</code> manually:</p>

<pre><code>function! Flash()
    set cursorline cursorcolumn
    redraw
    sleep 100m
    set nocursorline nocursorcolumn
endfunction
</code></pre>

<p>You probably also want to add <code>&lt;CR&gt;</code> to the key mapping:</p>

<pre><code>nnoremap &lt;leader&gt;fl :call Flash()&lt;CR&gt;
</code></pre>
","3481"
"Collapse vim folds to a single line, similar to Atom or Sublime Text","1408","","<p>I'm a fan of the way that Atom and Sublime Text handle line folding, where the first line of each fold is visible (complete with syntax highlighting), and a marker is appended to the end of the line that indicates the fold.</p>

<p>See the screenshot below comparing Vim's indent folding (top) versus Atom's (bottom):<img src=""https://i.stack.imgur.com/qpYNG.png"" alt=""Vim vs. Atom code folding""></p>

<p>Vim dedicates two lines for each fold. The first line serves as a heading, and the second line describes some information about the fold (number of lines and text inside the fold).</p>

<p>Atom only uses one line, and uses a small marker at the end of the line to indicate the fold, along with color added to the line numbers on the left. Atom's folding style uses less screen real estate but still communicates all the information I really need.</p>

<p>I'm partial to the Atom folding style. It seems cleaner and more consistent, in my opinion, particularly when listing multiple methods or attributes in a row (as in the above screenshot).</p>

<p>Is there a way to roughly approximate Atom's folding style in Vim?</p>
","<h1>Two lines vs. one line</h1>

<p>In Vim, all lines within a fold will be collapsed to a <em>single</em> line, and the <code>'foldtext'</code> option then determines the synopsis of those lines (usually dashes, the number of folded lines, and content from the first (or all) lines).</p>

<p>In your example, in Vim only the <code>{...}</code> parameter block itself is folded; the line above (that uses the parameters) isn't part of the fold. In contrast, in the other editor, that line using the parameters belongs to the fold, and its foldtext (to use Vim terminology) is the contents of that line plus the appended marker.</p>

<h3>Adapting</h3>

<p>In Vim, folds can be generated via different means (see <code>:help fold-methods</code>), and depends on the <code>'filetype'</code> of the buffer. The difficulty of including the above line in the fold depends on that; check with <code>:setlocal foldmethod?</code>. With <em>indent</em> folding, there's nothing you can influence; you have to switch to another method. For <em>syntax</em> folding, that would mean adapting the syntax definitions, and could be very tricky. You'll have better luck if an <em>expression</em> is used, but it would still mean understanding and changing the logic. (It's unlikely that the filetype plugin author provided a configuration to influence this.)</p>

<h1>Syntax highlighting of the folded line</h1>

<p>That unfortunately isn't possible at all. Vim always uses the <code>Folded</code> highlight group for the entire folded line. You can tweak that via <code>:highlight</code> commands in your <code>~/.vimrc</code>, but the individual differentiation of syntax will be lost.</p>
","2159"
"incorrect auto-indent in bash code","1400","","<p>I have bash script which Vim detects as a <code>sh</code> according to <code>:set filetype?</code>. In addition, Vim-script for auto-indention support for shell-scripts(<code>/usr/share/vim/vim74/indent/sh.vim</code>) is also present. However, for example following while loop:</p>

<pre><code>while read -ra line""$line_id""_fields; do
  line_id=$((line_id+1))
done &lt; ""$1""
</code></pre>

<p>..is auto intended(<code>gg=G</code>) to this:</p>

<pre><code>  while read -ra line""$line_id""_fields; do
line_id=$((line_id+1))
  done &lt; ""$1""
</code></pre>

<p>What might cause this?</p>
","<p>As @Christian Brabandt mentioned in his comment, <code>filetype indent on</code> was missing from my <code>.vimrc</code> file.</p>
","9518"
"windows neovim setup","1389","","<p>I'm trying to switch from Givm to Neovim. Most tutorials are about linux system, hot to setup on Windows?</p>

<p>Two problem:</p>

<ol>
<li><p>vimrc</p>

<p>From the <a href=""https://github.com/neovim/neovim/wiki/Installing-Neovim"" rel=""noreferrer"">document</a> it's <code>%userprofile%\AppData\Local\nvim\init.vim</code></p>

<p>But I don't want to put the vimrc file on C:\, it would be formatted when reinstalling the system. The old Gvim 8.0 can use a <code>.vimrc</code> in its same directory, does Neovim support this?</p></li>
<li><p>vimfiles</p>

<p>my previous directory structure looks like:</p>

<pre><code> d:\vim\  
       |--- vim80\
            | --- gvim.exe
            | --- ...
       |--- vimfiles\    &lt;--- where to put this folder now?
</code></pre>

<p>Where to put the <code>vimfiles</code> folder for Neovim? I can't find any tutorial about this. From the <code>:h nvim-from-vim</code>, there're some directories, which I tried and no luck.</p>

<ol>
<li><p>~/vimfiles</p></li>
<li><p>~/.vim/vimfiles</p></li>
<li><p>~/AppData/vimfiles</p></li>
<li><p>~/AppData/Local/vimfiles</p></li>
<li><p>~/AppData/Local/nvim/vimfiles</p></li>
<li><p>~/AppData/Local/nvim-data/vimfiles</p></li>
</ol></li>
</ol>
","<p>The user's runtime directory is <code>$XDG_CONFIG_HOME/nvim</code>.  When <code>$XDG_CONFIG_HOME</code> isn't set (which is the typical case), then the default directory is <code>~/AppData/Local</code> on Windows and <code>~/.config</code> elsewhere.</p>

<pre><code>OS         | Vim        | nvim
-----------|------------|---------------------
Windows    | ~/vimfiles | ~/AppData/Local/nvim
*nix/macOS | ~/.vim     | ~/.config/nvim
</code></pre>

<p>See <code>:help vimrc</code>, <code>:help xdg</code>, and <code>:help 'runtimepath'</code> for more detailed information.</p>

<p>Since you want to change where nvim's config is stored, then you should set <code>$XDG_CONFIG_HOME</code> in your environment to where you want the <code>nvim</code> directory to live.  If you wanted your nvim config to be at <code>D:\foo\nvim</code>, you would set <code>$XDG_CONFIG_HOME</code> to <code>D:\foo</code>.</p>
","12596"
"Project Wide replace using Ag","1382","","<p>Referencing Post:</p>

<p><a href=""https://stackoverflow.com/questions/22206332/vim-ag-search-and-replace-globally-and-within-a-directory"">https://stackoverflow.com/questions/22206332/vim-ag-search-and-replace-globally-and-within-a-directory</a></p>

<p>Specifically:</p>

<pre><code>:Ag foo
:Qfdo s/foo/bar/c
</code></pre>

<p>I type <code>Ag miwt-os</code>, I get this:</p>

<p><a href=""https://i.stack.imgur.com/OATJb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OATJb.png"" alt=""enter image description here""></a></p>

<p>Which is the terminal, and I am lost her, how do I now get the results into the quckfix to run it through Qfdo?</p>
","<p>You don't need a plugin for using The Silver Searcher — or any other grep alternative — in Vim:</p>

<pre><code>set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep
set grepformat=%f:%l:%c:%m,%f:%l:%m
</code></pre>

<p>With those lines in your <code>vimrc</code> you can simply do <code>:grep miwt-os</code> to populate the quickfix list with matching lines or <code>:lgrep miwt-os</code> to populate the location list.</p>

<p>From there you can open the quickfix/location window with either <code>:cw</code> or <code>:lw</code> to take a look at the list before going further or directly use <code>:Qfdo</code>.</p>

<p>If you want the quickfix/location window to be opened automatically, add these lines to your <code>vimrc</code>:</p>

<pre><code>augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l*    lwindow
augroup END
</code></pre>
","6488"
"Using vim when press both opening and closing parenthesis/brackets/etc","1369","","<p>When I learned to program, I would press both the opening and closing brackets/etc then the left arrow key then enter the text. So to put in <code>[hello]</code> I would type <code>[]</code>, and then the left arrow so that it is over the first bracket (<code>[</code>).</p>

<p>I like that because I know I always have the right number of brackets/etc and otherwise I feel like my hand has to move back and forth to the bracket/etc key</p>

<p>But, in sticking with the Vim mindset, I don't want to continually reach for the arrow keys. Is there anything I could do that didn't involve using the arrow keys or having to continually switch out of insert mode to just press <code>h</code> and go back in?</p>
","<p>You might be looking for the <a href=""https://github.com/jiangmiao/auto-pairs"">auto-pairs</a> plugin:</p>

<p>When you type a character like <code>{</code>, <code>(</code> or <code>[</code> this plugin will automatically add the symetric character and replace your cursor in insert mode between the two brackets. It is also able to be ""smart"" while deleting those characters.</p>

<p>Also if I may give you an advice <strong>forget the arrow keys</strong>. Whatever you want to do, there is always a faster motion accessible without moving your hands from the home row. It may take some time to get used to it, but once it is an habit you won't even miss them.</p>
","3404"
"How can I use --servername and --remote in neovim?","1367","","<p>in vim I can do <code>vim --servername foo</code> and <code>vim --servername foo --remote-silent bar.txt</code> to open files in one instance of vim from several terminal windows (via tmux or whatever). How is the same thing achieved in NeoVim?</p>
","<p><a href=""https://github.com/mhinz/neovim-remote"" rel=""nofollow"">Neovim remote</a> is a python script for controlling neovim processes. It has the vim style --servername and --remote options. This is what I use now for my multiple-terminal work environment.</p>
","9972"
"Why does the cursor move to the start of the line after <Esc>?","1355","","<p>I've noticed while editing along a line in a .txt file in insert mode the cursor will move to the start of the line following a write using key sequence:</p>

<pre><code>&lt;esc&gt;:w
</code></pre>

<p>I'd like to <strong>change this behavior such that the cursor will stay in position following a :write.</strong> Is this possible? I don't need the cursor to remain in insert mode, I'd just like it to maintain its last position following a write.</p>

<p>I am using gVim 7.4 on windows. My .vimrc is very basic, I don't believe any of my settings interfere with this behavior. I have also removed sourcing of mswin.vim and example.vim from my .vimrc (as bundled with the official vim.org windows installer).</p>

<p>After reading the comments below I looked at the issue again and realized the cursor only slides to the far left after a write on lines which are entirely made up of trailing white space. In other words, the cursor <strong>only slides to the far left upon esc-:w when the line is a hanging indent with no other characters besides spaces</strong>. The .vimrc is handling indent behaviors with these settings: </p>

<pre><code>set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent 
</code></pre>

<p>So, a new line created below an indented line will contain 4 trailing white spaces as the first 4 spaces of the line (which I want to keep). Upon the 'esc' key press the cursor slides to the far left of the buffer. </p>

<p>Is there a way to retain cursor position upon hitting 'esc' to return to normal mode, on a line made up of trailing white spaces (as indentation)?</p>
","<p>Looking at the documentation for autoindent has an answer as to why and how to work around it. <code>:help 'autoindent'</code>:</p>

<blockquote>
  <p>Copy indent from current line when starting a new line (typing <code>&lt;CR&gt;</code>
          in Insert mode or when using the ""o"" or ""O"" command).  If you do not
          type anything on the new line except <code>&lt;BS&gt;</code> or <code>CTRL-D</code> and then type
          <code>&lt;Esc&gt;</code>, <code>CTRL-O</code> or <code>&lt;CR&gt;</code>, the indent is deleted again.  Moving the cursor
          to another line has the same effect, unless the 'I' flag is included
          in 'cpoptions'.</p>
</blockquote>

<p>In other words, if you want it to not lose the indent, type <em>something</em> and then backspace it <em>before</em> hitting <kbd>Esc</kbd>, and the leading space will remain.</p>

<p>Alternatively, if you just want to be back at the indent-level when you go back into insert mode and are using <code>'cindent'</code> as well, use <kbd>Shift-S</kbd> instead of <kbd>i</kbd>, which will clear the (already empty) line, and start at the appropriate indentation level. This is not as general a solution as the one above, but I prefer this when I'm writing C code, so that my files don't actually get saved with white-space only lines.</p>
","1878"
"How to replace content between two patterns from the file?","1354","","<p>I've the following format of the file:</p>

<pre><code>&lt;common&gt;
fitnes=0
genetic=1
method=0
&lt;/common&gt;
&lt;inputs&gt;
foo=bar
bar=foo
&lt;/inputs&gt;
&lt;limits&gt;
balance=200.00
&lt;/limits&gt;
</code></pre>

<p>and I would like to delete everything what is between <code>&lt;inputs&gt;</code> and <code>&lt;/inputs&gt;</code> (excluding pattern it-self) and replace it with the content from another file (e.g. <code>foo.txt</code>). In other words lines with <code>foo=bar</code> and <code>bar=foo</code> would be replaced with another content.</p>

<p>Probably it can be similar to how you <a href=""https://vi.stackexchange.com/q/5265/467"">delete a multi-line match</a>, like:</p>

<pre><code>:g/&lt;inputs/,/inputs&gt;/d
</code></pre>

<p>but I'm not sure with <em>what</em> I should replace the <code>d</code> in order to insert the content of another file, but I want to keep the matching pattern.</p>

<p>Similar approach would be to <a href=""https://vi.stackexchange.com/q/3299/467"">remove inner content of html tag</a>, like </p>

<pre><code>:/&lt;inputs&gt;/norm vitd
</code></pre>

<p>but then I don't know how would you add into it the content from the file.</p>

<p>Ideally I'm trying to find one liner, since it'll be part of another script.</p>

<p>How can I achieve that?</p>
","<p>A substitution can be used to replace a pattern with the result of an expression like this:</p>

<pre><code>:keeppatterns %s;&lt;inputs&gt;\zs\_.\{-}\ze&lt;/inputs&gt;;\=insert(readfile('test.txt'), '')
</code></pre>

<p>See <code>:help sub-replace-expression</code></p>

<p>Note that <code>keeppatterns</code> prevents the <code>substitute</code> command from adding anything to the search history and preserves the ""last search pattern register"" - see <code>:help ""/</code>. It's good practice to prevent scripts from unnecessarily modifying Vim's global state with the command modifiers <code>keepalt</code>, <code>keepjumps</code>, <code>lockmarks</code>, <code>keepmarks</code>, and <code>keeppatterns</code>.</p>
","6328"
"How to convert all windows into horizontal, vertical or tab splits?","1353","","<p>It is possible to convert all windows into different split mode while editing? Instead of <a href=""https://vi.stackexchange.com/questions/514/how-to-change-the-current-splits-width-and-height"">one by one</a>?</p>

<p>In example (having multiple windows) from horizontal to vertical split and opposite, or from tab split all files into horizontal/vertical view and back?</p>

<p>Similar as it works at start when <a href=""https://vi.stackexchange.com/q/732/467"">opening multiple files</a> with <code>-p</code>, <code>-o</code>, or <code>-O</code>?</p>
","<p>You could accomplish something like this using the argument list. The general idea is to collect all of the open windows into the argument list, then close all the splits, then use the argument list to open everything in a new way.</p>

<p>First, clear the argument list, in case it's already populated.</p>

<pre><code>:argdelete *
</code></pre>

<p>Next, collect all the windows into the argument list.</p>

<pre><code>:tabdo windo argadd %
</code></pre>

<ul>
<li><code>:tabdo</code> performs a command on each tab, visiting one at a time</li>
<li><code>:windo</code> does the same in each window of the current tabpage</li>
<li><code>:argadd %</code> adds the current buffer to the argument list</li>
</ul>

<p>Now we have all of the windows in the argument list. Let's close all but one window.</p>

<pre><code>:tabonly | only
</code></pre>

<ul>
<li><code>:tabonly</code> closes all tab pages except the current one</li>
<li><code>:only</code> closes all windows except the current window in the current tab page</li>
</ul>

<p>Flip to the first argument.</p>

<pre><code>:first
</code></pre>

<p>Now we'll cycle through all of our arguments and open them in the style of our choosing.</p>

<pre><code>:argdo tabedit %
</code></pre>

<p>Change <code>tabedit</code> to <code>split</code> or <code>vsplit</code> as desired.</p>

<p><strong>NOTE</strong>: I haven't figured out why yet, but this duplicates the last window. We can just close it with <code>:quit</code> (or <code>:q</code> for short).</p>

<hr>

<h3>Caveats</h3>

<ul>
<li>This clobbers your argument list, if you had one</li>
<li>If you have <code>'equalalways'</code> turned off (i.e. <code>:set noequalalways</code>) and you're using this for opening windows in splits, you may quickly run out of screen space before opening all the windows</li>
</ul>
","762"
"How to quit one file and simultaneously open another file in vim?","1350","","<p>I am currently editing one file and, after finishing its edit, I want 
to close the current file and at the same time (i.e., without closing Vim) open another file for editing.</p>

<p>How it can be achieved?</p>
","<p>I don't think this can be done using a single command. You'll have to use a combination of commands:</p>

<ol>
<li><p>As <a href=""https://vi.stackexchange.com/questions/8107/how-to-quit-one-file-and-simultaneously-open-another-file-in-vim#comment13550_8107"">statox suggested</a>, delete <a href=""http://vimhelp.appspot.com/windows.txt.html#%3Abd"" rel=""nofollow noreferrer"">the current buffer</a> and open a new one:</p>

<pre><code>:bd | e filename
</code></pre></li>
<li><p>Or <a href=""http://vimhelp.appspot.com/editing.txt.html#%3Afile_f"" rel=""nofollow noreferrer"">rename the current file</a> and edit it:</p>

<pre><code>:file filename | e
</code></pre></li>
</ol>

<p>Use <code>:w | bd | e filename</code> or <code>:w | file filename | e</code> to save the current file and start on a new one.</p>

<p>You can, of course, use maps or custom commands to simplify this:</p>

<pre><code>:command -nargs=+ WE w | bd | e &lt;args&gt;
</code></pre>

<p>Then do:</p>

<pre><code>:WE new-filename
</code></pre>
","8108"
"Multiple search-replace operations on a selection","1347","","<p>I have a <code>LaTeX</code> file with a bunch of commands of the form <code>\label{&lt;word&gt;}</code> where the <code>&lt;word&gt;</code> represents a string that contains special characters, namely <code>á é í ó ú ý ð þ æ ö</code>. I'm looking for a quick way to change the special characters into a corresponding ASCII character(s): <code>a e i o u y dh th ae oe</code>. To give an example, I want to change <code>\label{orðabók}</code> to <code>\label{ordhabok}</code>. </p>

<p>If I wanted just to change, for example, all þ's to th, I would visually select the word inside the <code>\label{}</code>, exit to normal mode and then use</p>

<pre><code>:s/\%Vþ/th/ge
</code></pre>

<p>And I could give two such commands at the same time using <code>|</code>, e.g.</p>

<pre><code>:s/\%Vþ/th/ge|s/\%Vð/dh/ge
</code></pre>

<p>I guess I could just string together all ten commands, but I was hoping for a more elegant way. In particular, I would like to not have to write the <code>\%V</code> and the <code>g</code> every time.</p>

<p>A follow-up question: I have to do this for every <code>\label{}</code> command in a very long file, and I plan to make a macro or commmand that automates it. My plan was to make a macro that searches for the next occurance of <code>\label{</code>, visually selects the word inside the <code>{}</code>, and performs the substitutions I described above. Then I would just count the <code>\label</code> commands and run the macro that many times. If I get help with the first question, then I know how to implement this. But is there another method that would be faster for a very long file?</p>
","<p>How about ... a substitution inside another one, and all thrown in a loop? E.g.</p>

<pre><code>function! s:replaceSpecialChars(name)
    let from = ['á','é','í','ó','ú','ý','ð','þ','æ','ö']
    let to = ['a','e','i','o','u','y','dh','th','ae','oe']

    let i = 0
    while i &lt; len(from)
        exe '%s/' . a:name . '{\zs.\{-}\ze}/\=substitute(submatch(0),from[i], to[i], ""g"")/g'
        let i += 1
    endwhile
endfunction

command! -nargs=1 ReplaceSpecialChars call s:replaceSpecialChars(&lt;f-args&gt;)
</code></pre>

<hr>

<p>Copy the above code in a vim file, and <code>source</code> the file (e.g. <code>:w</code> and <code>so %</code> if it's the current file). Then you can run it when you are in your LaTeX buffer like this:</p>

<pre><code>:ReplaceSpecialChars label
</code></pre>

<p>Just make sure to keep those lists (from, to) matched (equal nr. of elements).</p>

<p>This function globally replaces, in turn, any number of occurences of one of the characters from the <code>from[]</code> list to their <code>to[]</code> correspondent, but only for text found inside the <code>&lt;name&gt;{ }</code> construct.</p>
","3927"
"Hand Placement for Vim Navigation","1346","","<p>I'm a new Vim user, and I want to ask this somewhat elementary question in order to make sure I start learning Vim the right way and don't develop bad habits.</p>

<p>When you use Vim, how do you position your right hand? I find it more natural to start with my fingers on the <kbd>j</kbd><kbd>k</kbd><kbd>l</kbd><kbd>;</kbd> keys, but then I find myself missing the <kbd>h</kbd> key at times when I'm navigating. Conversely, if I position my fingers on <kbd>h</kbd><kbd>j</kbd><kbd>k</kbd><kbd>l</kbd> then I find myself mistyping words as this isn't the position I was trained to keep my hand on the keyboard, and I find toggling the <kbd>j</kbd><kbd>k</kbd> keys with my middle and third finger to be awkward.</p>
","<p>First of all I will assume that you are using a QWERTY keyboard. My answer isn't based on my personal preference, I am simply reformulating a part of the amazing <a href=""https://pragprog.com/book/dnvim/practical-vim"" rel=""nofollow"">Practical Vim</a> written by Drew Neil.</p>

<p><strong>TL;DR</strong> Vim is optimized for the touch typists so your hands should stay where you learned to put them: left hand on <kbd>a</kbd><kbd>s</kbd><kbd>d</kbd><kbd>f</kbd>  and right hand on <kbd>j</kbd><kbd>k</kbd><kbd>l</kbd><kbd>;</kbd></p>

<p>Neil says that putting your right hand on <kbd>h</kbd><kbd>j</kbd><kbd>k</kbd><kbd>l</kbd> is a really bad thing to do. The main reason is that moving your cursor with the keys <kbd>h</kbd><kbd>j</kbd><kbd>k</kbd><kbd>l</kbd> is something that should be very occasional because vim provides much faster word-wise movements or character search motion (<code>w</code>, <code>b</code>, <code>f</code>, <code>t</code>, <code>/</code>...).</p>

<p>I'll also directly quote this part:</p>

<blockquote>
  <p>I use the <kbd>h</kbd> and <kbd>l</kbd> keys for off-by-one errors, when I narrowly miss my target.
  Apart from that, I hardly touch them. Given how little I use the <kbd>h</kbd> key, I’m
  happy to have to stretch for it on a Qwerty keyboard. On the flip side, I use
  the character search commands often, so I’m pleased
  that the ; key rests comfortably beneath my little finger.</p>
</blockquote>

<p><strong>Bonus:</strong> Even if that doesn't seems to be your case here is a tip to get rid of the beginners bad habit consisting in using the arrow keys to move: Simply add the following lines to your <code>.vimrc</code> to disable totally the arrow keys:</p>

<pre><code>noremap &lt;Up&gt;    &lt;Nop&gt;
noremap &lt;Down&gt;  &lt;Nop&gt;
noremap &lt;Left&gt;  &lt;Nop&gt;
noremap &lt;Right&gt; &lt;Nop&gt;
</code></pre>

<p>(<code>&lt;Nop&gt;</code> stands for ""No Operation"")</p>
","3858"
"How can I run an autocmd when starting Vim with no file, a non-existing file, or a blank file (but not when starting with an existing file)?","1342","","<p>I would like to run an autocmd in the following scenarios when I start Vim:</p>

<ul>
<li>With no filename specified.</li>
<li>When the file is new.</li>
<li>When the file exists but is completely blank.</li>
</ul>

<p>In all of the above three cases I would like to run an autocmd; specifically, I'd like to <a href=""https://vi.stackexchange.com/questions/257/automatically-load-vi-into-insert-mode"">start insert mode automatically</a> for <em>only</em> the above scenarios (and not when I'm opening a file that already exists &amp; isn't blank).</p>

<hr>

<p>UPDATE:</p>

<p>I've tried placing the following in my <code>_vimrc</code>, but no luck (plus I'm not sure whether there is a function in vim that counts the number of characters in a file (to see if it is zero) before opening it:</p>

<pre><code>if @% == """" || filereadable(@%)
  autocmd BufRead,BufNewFile * startinsert
endif
</code></pre>
","<p>This works for all 3 of your cases for me:</p>

<pre><code>function InsertIfEmpty()
    if @% == """"
        "" No filename for current buffer
        startinsert
    elseif filereadable(@%) == 0
        "" File doesn't exist yet
        startinsert
    elseif line('$') == 1 &amp;&amp; col('$') == 1
        "" File is empty
        startinsert
    endif
endfunction

au VimEnter * call InsertIfEmpty()
</code></pre>

<p>These could probably be condensed into just the last check for a file being empty, since no filename or a file that doesn't exist typically start as empty buffers. However, it is probably possible that some other plugin pre-fills some stuff in one of the first two cases (like some template plugins), so it is best to check all three.</p>

<p>The first test you already had.</p>

<p>The second test needs to check <code>filereadable</code> against the value of zero (doesn't exist) to decide if it is new (opposite of what you had).</p>

<p>The last test checks that the number of the last line in the file is 1 (which is also the first line, meaning that there is only one line), and that the column number of the end of line (column after the last character in the line) is 1, which would mean there are 0 characters. If there is only 1 line with 0 characters in it, then the file must be empty.</p>

<p>One final note: The way you have your statements in the question can result in some surprising results. Namely, you are setting <code>BufRead</code> and <code>BufNewFile</code> only if conditions are met at startup, but then those autocommands exist for the rest of your session. So, if you were to start on an empty file, which sets these commands, every subsequent file opened (new or not, empty or not) would start in insert mode.</p>

<p>The autocommand <code>VimEnter</code> is run at the end of Vim's startup and only once for the whole session. This way, your tests only run when you start Vim and not any other time.</p>
","2559"
"How do I prevent vim from hiding symbols in markdown and json?","1342","","<p>This drives me crazy, I do </p>

<pre><code>:set ft=text
</code></pre>

<p>To see something, otherwise all the links disappear in markdown and quotes in JSON.</p>

<p>How do disable this once and for all?</p>
","<p>(guessing here, please provide a screenshot/more information)</p>

<p>You may want to change your <code>conceallevel</code> setup:</p>

<pre><code>:h 'conceallevel'
'conceallevel' 'cole'       *'conceallevel'* *'cole'*
            number (default 0)
            local to window
            {not in Vi}
            {not available when compiled without the |+conceal|
            feature}
    Determine how text with the ""conceal"" syntax attribute |:syn-conceal|
    is shown:

    Value       Effect ~
    0       Text is shown normally
    1       Each block of concealed text is replaced with one
            character.  If the syntax item does not have a custom
            replacement character defined (see |:syn-cchar|) the
            character defined in 'listchars' is used (default is a
            space).
            It is highlighted with the ""Conceal"" highlight group.
    2       Concealed text is completely hidden unless it has a
            custom replacement character defined (see
            |:syn-cchar|).
    3       Concealed text is completely hidden.
</code></pre>
","7263"
"How to open same file in multiple buffers","1342","","<p>Is it possible, in one instance of VIM, to open one file in few buffers and edit them independently? </p>
","<p>I'm not sure about what you mean by buffer.</p>

<p>In Vim jargon, a buffer maps a file, or a file that could be saved later. If you really want independent buffers initialized with a same file, you'll need to fill each buffer with <code>:read path/to/filename</code>. </p>

<p>Then, you'll have completely independent buffers. Saving them won't even update the initial file.</p>

<p>In Vim, we also have windows. A buffer may be displayed in one, or more, window(s), or even in none. If you split (horizontally) the current window with <code>:sp</code> (or vertically with <code>:vsp</code>), you'll have two (or more) windows to a same buffer. They don't need to display the same part of the buffer. Any modification to a buffer through a window will be visible in the other windows. Saving the buffer saves... the current buffer in one single file.</p>
","9874"
"How to write whole buffer to standard output from the command line?","1342","","<p>I would like to write whole buffer into standard output (<code>/dev/stdout</code>) instead of the file and the following command works as expected while editing the file:</p>

<pre><code>:w &gt;&gt; /dev/stdout
</code></pre>

<p><sup>Hint: Press <kbd>Control</kbd>+<kbd>L</kbd> to refresh the screen.</sup></p>

<p>But it doesn't work as expected when I'm trying to do the same from the command line (<a href=""https://vi.stackexchange.com/q/788/467"">non-interactively</a>), in example:</p>

<pre><code>$ echo This is example. | vim - '+:w &gt;&gt; /dev/stdout' '+:q!'
Vim: Reading from stdin...
</code></pre>

<p>The same with <code>:w !tee</code>, <code>:x! /dev/stdout</code>, <code>:%print</code> and similar.</p>

<p>Before quit, it's saying: <code>[Device] 1L, 17C appended</code>.</p>

<p>Is there any way of forcing vim to write the standard input into standard output in the middle of a pipe? Maybe it's somehow buffered?</p>
","<p>To print buffer to shell standard output, <code>vim</code> needs to start in Ex mode, otherwise it'll open ""normal"" way with its own window and clear any output buffers on quit.</p>

<p>Here is the simplest working example:</p>

<pre><code>$ echo foo | vim -e '+%print' '+q!' /dev/stdin
foo
</code></pre>

<p>or even shorter:</p>

<pre><code>$ echo foo | ex +%p -cq! /dev/stdin
$ echo foo | ex +""%p|q!"" /dev/stdin
</code></pre>

<p><sup>Note: The command <code>vim -e</code> is basically equivalent to <a href=""https://en.wikipedia.org/wiki/Ex_(text_editor)"" rel=""nofollow noreferrer""><code>ex</code></a> command.</sup></p>

<p>Special file descriptor to standard input needs to be specified (<code>/dev/stdin</code>) in order to prevent extra annoying messages (as explained below).</p>

<hr>

<p>And here are some examples with parsing strings:</p>

<pre><code>$ echo This is example. | vim -e '+s/example/test/g' '+%print' '+q!' /dev/stdin
This is test.
$ echo This is example. | vim - -es '+s/example/test/g' '+%print' '+q!'
Vim: Reading from stdin...
This is test.
</code></pre>

<p><sup>Note: The last example shows extra annoying message which is not possible to hide it, it's because a standard strategy of reading the whole file into memory and saying it was read from the standard input. The first example works without the message, because the file produce endless data without an end-of-file (<a href=""https://en.wikipedia.org/wiki/End-of-file"" rel=""nofollow noreferrer"">EOF</a>) signal, so it'll will never reach the end of its input reading.</sup></p>

<hr>

<p>Related:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/3219479/how-to-write-buffer-content-to-stdout"">How to write buffer content to stdout?</a> at stackoverflow</li>
<li><a href=""https://stackoverflow.com/questions/10686183/pipe-vim-buffer-to-stdout"">Pipe Vim buffer to stdout</a> at stackoverflow</li>
</ul>
","800"
"Tmux is changing part of the background in vim","1341","","<p>This only seems to happens when using vim inside of tmux. I'm also using iTerm 2.</p>

<p>If I create a new tmux pane or resize a tmux pane, it immediately looks like the this:</p>

<p><img src=""https://i.stack.imgur.com/yQTD0.png"" alt=""messed up background in vim""></p>

<p>And then the only way to fix it is to scroll around in vim, and it goes back to this:</p>

<p><img src=""https://i.stack.imgur.com/qHQLp.png"" alt=""good background in vim""></p>

<p>What could be causing this?</p>
","<p>You might try to add the following to your .vimrc.</p>

<pre><code>if &amp;term =~ '256color'
  "" disable Background Color Erase (BCE)
  set t_ut=
endif
</code></pre>

<p>The <code>t_ut</code> option (default = y) describes how vim handles what it wants as background colors compared to attempting to use the current background color. This snippet clears that option.</p>

<p>If not, then you might try to</p>

<pre><code>set ttyfast
</code></pre>

<p>which is an option that handles how vim redraws screens.</p>
","247"
"what is the good book for learning vim?","1341","","<p>I have been use vim since 1 year. But I don't know about all facilities in vim, although I know that vim is powerful text editor.</p>

<p>So, I want to learn vim in a sequential way by reading a book.</p>

<p>I use vim in terminal on Ubuntu 14.04 and on Fedora 25.</p>

<p>Thanks for response.</p>
","<p><a href=""http://www.swaroopch.com/notes/vim/"" rel=""nofollow noreferrer"">A Byte of Vim</a></p>

<p><a href=""ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf"" rel=""nofollow noreferrer"">The vim book</a></p>

<p><a href=""http://learnvimscriptthehardway.stevelosh.com/"" rel=""nofollow noreferrer"">Learn Vimscript the Hard Way</a></p>

<p><a href=""ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf"" rel=""nofollow noreferrer"">O’Reilly’s Learning the vi and Vim Editors</a></p>

<p>recommended books in <a href=""http://vim.begin-site.org/books/"" rel=""nofollow noreferrer"">http://vim.begin-site.org/books/</a></p>

<p>You can also read <em>Practical vim</em> by <em>Drew Neil</em></p>
","11851"
"What is the relation between vi, nvi and vim?","1336","","<p>On some unixes sometime I found a command named <code>nvi</code>. It was a vi-like editor, without much of its functionality. Maybe it was a fork of the old <code>vi</code>?</p>

<p>Anyways, which <code>vi</code> versions are a fork of the others, and which are independent developments? Do they have a ""family tree"", similar to the unixes?</p>
","<p>From <code>nvi(1)</code>:</p>

<pre><code>HISTORY
    The ex editor first appeared in 1BSD.  The nex/nvi replacements for the
    ex/vi editor first appeared in 4.4BSD.
</code></pre>

<p>Some background, from memory, so I hope got the details correct:</p>

<p>In the beginning, UNIX was free. Everyone could request a copy from Ken, and he
would send you a tape with the source (allegedly with the text ""love, Ken"" on
them). The terms ""free software"" or ""open source"" didn't exist yet, but for all
intents and purposes it was ""open source"".</p>

<p>The reason for this was because UNIX was developed at Bell labs. Bell labs
is part of AT&amp;T which, at the time, had an effective monopoly on telephony. As
part of an agreement with the U.S. government, it was agreed that AT&amp;T was <em>not</em>
allowed to enter other fields of businesses (such as computers).</p>

<p>Somewhere along the way this changed, and UNIX became proprietary software. As a
result, BSD (which stems from UNIX) <em>also</em> became proprietary software. <code>vi</code> was
written as part of BSD, so it also became proprietary.</p>

<p>This is why in the late '80s to early '90s some ""vi clones"" appeared, such as <code>stevie</code> (later the basis for <code>vim</code>) and <code>nvi</code>.</p>

<p>In the early '90s, people wanted a free BSD system, so <code>nvi</code> was created for
4.4BSD-lite (lite meaning, not encumbered by AT&amp;T code), so <code>nvi</code> was created as
a ""bug-for-bug compatible"" replacement for the encumbered <code>vi</code>. It has all of the <code>vi</code> features, but not the more advanced features you might find in <code>vim</code>.</p>

<p>FreeBSD &amp; NetBSD both descend from 4.4BSD-Lite (and OpenBSD &amp; DragonflyBSD
descend from NetBSD and FreeBSD, respectively), which is why they ship with
<code>nvi</code> installed by default.</p>

<p>Unlike Linux, BSD systems have a single ""base"" system of which <code>nvi</code> is part
of, so there are <em>really</em> 4+ versions of <code>nvi</code>. But in reality the changes are
small to non-existent, the BSD projects exchange code, so most bugfixes and
enhancements are shared (but perhaps not all?). I believe FreeBSD added multibyte support a few years ago, for example.</p>

<p>The <code>vim</code> story is more boring: Bram was running on Amiga, wanted to run <code>vi</code>, but couldn't find a <code>vi</code> for Amiga. So he took the <code>stevie</code> code, ported it to Amiga, and continued to improved it further. This is why you can still find many Amiga-related notes in the docs even today.</p>

<p>In the meanwhile, UNIX is ""free"" once more, and you can run
<a href=""http://ex-vi.cvs.sourceforge.net/"">original <code>vi</code></a>.</p>
","346"
"Access a file under subdirectories of a path through gf command","1334","","<p>I am using perl.</p>

<p>When I press <code>gf</code> while having the cursor on Testcase, it shows</p>

<pre><code>E447: Can't find file ""Testcase.pm"" in path. 
</code></pre>

<p>So I added that path. </p>

<p>It works for files under particular path which are set in <code>:set path</code>. I have several libraries under subdirectories of lib folder.  <code>/project/tester/userid/SCOPE/infra/lib</code> is the path. </p>

<p>But when I give all the paths, <code>gf</code> is able to find it. Is there a way to include all subdirectories of a path recursively or making it work for all subdirectories even with the given path?</p>

<p>This will help me to go to any library file without needing to know the path or greping every time.  There are more than 100 such files.</p>

<p>EDIT:
Setting like <code>set path=$PROJ/lib/**</code> doesn't work in .vimrc and plugins too. But when I give this command in current script file, it works. My .vimrc is under <code>/home/userid</code></p>
","<p>You can add <code>**</code> to your path:</p>

<pre><code>set path+=**
</code></pre>

<p>This way it will find every file recursively based on your current directory.
But apparently <a href=""https://twitter.com/tpope/status/612991667751264256"" rel=""nofollow"">it's not recommended</a>.</p>

<p>If you want to add other paths, you can just add them as follow:</p>

<pre><code>set path+=/path/to/your/lib
set path+=c:/include
</code></pre>
","7454"
"`E575: viminfo: Illegal starting char in line: ...` on startup","1329","","<p>Recently on starting vim I've been getting an error message like this:</p>

<pre><code>E575: viminfo: Illegal starting char in line: wait_until(lambda
_:&lt;80&gt;&lt;fc&gt;^B ^[ldWA)^[:w^Mkkkdd^[:w^M&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b248Gwwi_zzz^[:w^M&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;bkkkkj/refresh^M^c^[ma/browser.rfer&lt;80&gt;kb&lt;80&gt;kb&lt;80&gt;kbresh^[/refresh^MnN^ceb&lt;80&gt;kbdrie&lt;80&gt;kbver^[:w^M&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;,&lt;80&gt;&lt;fd&gt;-&lt;80&gt;&lt;fd&gt;.^[^[^[^[&lt;80&gt;&lt;fd&gt;W&lt;80&gt;&lt;fd&gt;,&lt;80&gt;&lt;fd&gt;.&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;bjodisplay_remaining_hours=&lt;80&gt;kb = trello9""&lt;80&gt;kb&lt;80&gt;kb(""^V^V"")^[^wwwwdt/..:w^M/zzz^Mkkjo@display_remaining_staff_hours^[ma/ldispla&lt;80&gt;kb&lt;80&gt;kb^[&lt;80&gt;kb^[ggjjjjjjjjjjjjjjjjjjjjjjjjjjjlkkkllllllllllllllllis&lt;80&gt;kb_staff^[*A.acceptance_test(""At&lt;80&gt;kbT1"")^[:w^Mjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhdt(^[:w^M&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;,&lt;80&gt;&lt;fd&gt;.&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;L&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;&lt;fd&gt;b&lt;80&gt;&lt;fd&gt;c&lt;80&gt;
</code></pre>

<p>It doesn't happen when I launch with <code>vim -u NONE</code> but it does happen if I clear out my entire <code>~/.vimrc</code> and move my <code>~/.vim</code> directory. It looks like there's an error in a tags file somewhere but I can't find with one.</p>

<p>Any ideas?</p>
","<p>Turns out the answer was in the error message all along.. the offending file was <code>~/.viminfo</code> which was somehow corrupted.</p>
","2388"
"Copying a String to a Variable or a Register from Within a Function","1321","","<p>I want to write a function which copies, say, the last word of the next line which contains <code>keyword</code> into a variable say <code>var</code> or any named register say <code>l</code>.</p>

<p>I did something inelegant:</p>

<pre><code>function! CopyIntoVar()
          ""go to the next line which contains keyword
    /keyword

          ""go to the last word and copy it like one does using normal mode
    normal $vb""ly
    let var=@l
endfunction
</code></pre>

<p>Is there a better way?</p>

<p>(I am not particularly interested in the last word. Just want to see how to copy a desired string into a register or variable).</p>

<p>Thanks.</p>
","<p>I think you're looking for the <a href=""http://vimhelp.appspot.com/eval.txt.html#expand%28%29""><code>expand()</code></a> function:</p>

<pre><code>Expand wildcards and the following special keywords in `{expr}`.
</code></pre>

<p>with the <code>&lt;cword&gt;</code> or <code>&lt;cWORD&gt;</code> special keywords:</p>

<pre><code>&lt;cword&gt;     word under the cursor
&lt;cWORD&gt;     WORD under the cursor
</code></pre>

<p>Your function would then look like:</p>

<pre><code>function! CopyIntoVar()
    "" Go to the next line which contains keyword
    /keyword

    "" Go to the last word
    normal $

    "" Get the value of the word under the cursor
    let var = expand('&lt;cword&gt;')
endfunction
</code></pre>

<p>This still has 2 side-effects though:</p>

<ul>
<li>It will move the cursor</li>
<li>Using <code>/</code> will set the <code>""/</code> register (and pressing <code>n</code> now searches for that pattern).</li>
</ul>

<p>This may or may not be what you want.</p>

<p>We can use the <code>search()</code> function to avoid setting <code>""/</code>, and use <code>getpos()</code> and <code>setpos()</code> to set &amp; restore the cursor position:</p>

<p>Another advantage of <code>search()</code> it's not affected by settings such as <code>wrapscan</code> or <code>magic</code>; it always behaves the same.</p>

<pre><code>function! CopyIntoVar()
    "" Save cursor position
    let l:save_cursor = getpos(""."")   

    "" Go to the next line which contains keyword
    call search('keyword')

    "" Go to the last word
    normal $

    "" Get the value of the word under the cursor
    let var = expand('&lt;cword&gt;')

    "" Restore cursor position
    call setpos('.', l:save_cursor)   
endfunction
</code></pre>
","3538"
"How do I use relative line numbers in command line mode?","1318","","<p>Recently I learned from <a href=""http://rads.stackoverflow.com/amzn/click/1934356980"">Practical Vim</a> a way to copy or move block of lines without having to move the cursor from the current position. This is done in command line mode. e.g.</p>

<pre><code>:123,133m.  # moves lines from 123 to 133 below the cursor position.
</code></pre>

<p>While I like it, it is a pain to type the long line numbers, especially when the file has too many lines.</p>

<p>At times, the lines to move are relatively near the cursor (but I don't want to move my cursor, yank, come back where I was, paste!). It would be great if I could use relative numbers, similar to how we do in normal mode. It is like saying </p>

<blockquote>
  <p>move 5 lines which are 10 lines above the current line to here</p>
</blockquote>

<p>In short, how to use relative numbers in command line mode (similar to normal mode)?</p>
","<p>Assuming your lines span from 15 to 10 lines above the current one, you can achieve what you requested using relative line numbers:</p>

<pre><code>:-10,-15m.
</code></pre>

<p>Unfortunately when specifying a backwards range, Vim asks you to confirm if that is what you really wanted. To avoid the confirmation step, you can type <code>silent</code> before your command, or just specify a forwards range:</p>

<pre><code>:-15,-10m.
</code></pre>

<p>As you might expect <code>+</code> can be used to refer to lines below the current one.</p>

<p>Detailed help can be found with:</p>

<pre><code>:help cmdline-ranges
</code></pre>
","2439"
"How to use a variable in the expression of a 'normal' command?","1317","","<p>How can one use a variable when executing something via <code>normal!</code> in vimscript?</p>

<p><strong>Example:</strong> </p>

<pre><code>function! MyFunction(someArg)
   normal! (a:someArg)l
endfunction
</code></pre>

<p>This should move the cursor <code>someArg</code> steps to the right.</p>
","<p>The <code>execute</code> function takes a string as argument, it expands the string and execute it a a regular ex command. Thus you can do:</p>

<pre><code>function! MyFunction(someArg) 
    execute ""normal! "". a:someArg. ""l"" 
endfunction
</code></pre>

<p>The <code>.</code> is a standard vimscript operator to concatenate strings. </p>

<p><code>execute</code> can be shortened to <code>exe</code>. </p>

<p>See <code>:h :execute</code></p>

<hr>

<p><strong>EDIT</strong> I'll add a point about the comment of @Christian Brabandt about the concatenation with a <code>.</code>.</p>

<p>The doc says:</p>

<blockquote>
  <p>Multiple arguments are concatenated, with a space in
  between.  To avoid the extra space use the "".""
  operator to concatenate strings into one argument.</p>
</blockquote>

<p>So the command could be:</p>

<pre><code>execute ""normal! "" a:someArg ""l""
</code></pre>

<p>The executed command will be (note the extra white-spaces):</p>

<pre><code>normal!  2 l
</code></pre>

<p>When using </p>

<pre><code>execute ""normal! "" . a:someArg . ""l""
</code></pre>

<p>You got:</p>

<pre><code>normal! 2l
</code></pre>
","9645"
"Is lookaround possible in vim's regex system?","1311","","<p>I have encountered many situations in vim where it would be useful to have lookaround statements.  I have tried using the standard lookaround syntax <em>(<code>(?=)</code>, <code>(?!)</code> etc ..)</em>, but it appears vim does not support this.  Does vim have an equivalent syntax for these kinds of statements?</p>
","<h1>""Zoom"" anchors</h1>

<p>In addition to @jecxjo's answer, there are many situations where you can use the zero-width anchors <code>\zs</code> and <code>\ze</code> instead of positive lookaround. These anchors define the start (<code>\zs</code>) and the end (<code>\ze</code>) of the match within the full pattern.</p>

<h2>Examples</h2>

<ul>
<li><code>foo\zsbar</code> will match <code>bar</code> preceded by <code>foo</code> (<code>foo</code> not part of the match)</li>
<li><code>foo\zebar</code> will match <code>foo</code> followed by <code>bar</code> (<code>bar</code> not part of the match)</li>
<li><code>myFunction(\zs.*\ze)</code> will match the parameters in a function call <em>(for demonstration purposes, I'm not focusing on greedy vs non-greedy matching)</em></li>
</ul>

<h2>Putting it to use</h2>

<p>These become most useful when using the <code>:substitute</code> command. For example, say I wanted to replace the parameters in a function call to <code>myFunction()</code> with <code>foo</code>:</p>

<pre><code>:%s/myFunction(\zs.*\ze)/foo/
</code></pre>

<p>This will leave <code>myFunction(</code> and <code>)</code> intact, and you don't have to worry about capturing them in your <em>pattern</em> or repeating them in your <em>replacement</em>.</p>

<p>You could do this using the lookaround feature of Vim's regex, but it's quite clunky: </p>

<pre><code>:%s/\(myFunction(\)\@&lt;=.*\()\)\@=/foo/
</code></pre>

<p>(I find this syntax causes me to forget what I was trying to do in the first place.)</p>

<h2>You still need lookaround sometimes</h2>

<p>There are still situations where you need lookaround. Using <code>\zs</code> and <code>\ze</code> are great for simple situations where you have <em>something before</em> followed by <em>text to match</em> followed by <em>something after</em>. But if it's more complex than that, you'll probably have to stick to the heavier lookaround syntax.</p>

<h2>Fun fact</h2>

<p>Though they're considerably uglier, Vim's lookarounds are more powerful than those in PCRE! They support variable-length negative lookbehind, meaning you can assert that some pattern whose length is not predetermined is <em>not</em> before your match.</p>

<p>PCRE doesn't support this, as it's fairly computationally expensive. That's not a huge concern in Vim, since the most common use cases of regex tend to involve interactive searching where the computation time is nearly imperceptible to the user. You'd probably notice it if it were used for syntax highlighting, though.</p>

<h2>Relevant Help Topics</h2>

<ul>
<li><code>:help \zs</code></li>
<li><code>:help \ze</code></li>
<li><code>:help perl-patterns</code></li>
</ul>
","3039"
"How to copy each line 11 times, incrementing the last ""1"" in each line from 2-12","1308","","<p>I have a number of lines in a file, and I would like to copy each line 11 times (turning each line into 12 lines), and increment the last ""1"" in each line so that the 12 lines have ""1"" through ""12"", where the ""1"" initially was. There may be other occurrences of ""1"" in each line, but the ""1"" I want to increment will always be the last occurrence in each line. Another way to look at it is that the last ""1"" is always after ""/nt/"" - as in ""/nt/1"" (and it will always be the only occurrence of ""/nt/1"" in each line).</p>

<p>So, for example, if I have:</p>

<pre><code>1stlineblahblahblah/nt/1blah
2ndlineblahblahblah/nt/1blah
3rdlineblahblahblah/nt/1blah
</code></pre>

<p>I want to turn it into:</p>

<pre><code>1stlineblahblahblah/nt/1blah
1stlineblahblahblah/nt/2blah
1stlineblahblahblah/nt/3blah
1stlineblahblahblah/nt/4blah
1stlineblahblahblah/nt/5blah
1stlineblahblahblah/nt/6blah
1stlineblahblahblah/nt/7blah
1stlineblahblahblah/nt/8blah
1stlineblahblahblah/nt/9blah
1stlineblahblahblah/nt/10blah
1stlineblahblahblah/nt/11blah
1stlineblahblahblah/nt/12blah
2ndlineblahblahblah/nt/1blah
2ndlineblahblahblah/nt/2blah
2ndlineblahblahblah/nt/3blah
...
</code></pre>

<p>I had previously found the command:</p>

<pre><code>:for i in range(0,12) | put ='1stlineblahblahblah/nt/'.i.'blah' | endfor
</code></pre>

<p>works for this purpose, but I would have to manually run this command for each line, and type each line in (or copy-and paste it) myself. Is there a way to take the lines that are already in the file, and just run one command that turns each line into twelve, in the manner that I've described?</p>

<p>Thanks in advance to anyone who can help me with this. I also just wanted to note that this is my second question here, and I was pleased to have gotten several quick and effective solutions to my first question, for which I was most grateful.</p>
","<p>Here's a substitution that solves the problem:</p>

<pre><code>:%s/\(.*\)1\(.*\)/\=join(map(range(1, 12), 'submatch(1) . v:val . submatch(2)'), ""\n"")
</code></pre>

<p>The substitution matches each line that contains ""1"" and captures the text before <code>{c1}</code> and after <code>{c2}</code> the last ""1"". For each matched line, the range of numbers from one to twelve <code>{n}</code> are <a href=""https://en.wikipedia.org/wiki/Map_%28higher-order_function%29"" rel=""nofollow"">mapped</a> to create twelve lines of the form <code>{c1}{n}{c2}</code>. Each group of twelve lines replaces its associated, originally matched line.</p>

<p>See <code>:h sub-replace-expression</code>.</p>
","6529"
"How do I save a read-only file in Vim for Windows?","1303","","<p>I have looked for this a lot already and every answer is about Vim in Linux. Is there a way to save a read-only file right from Vim in Windows?</p>
","<p>As on other vi/vim versions, you can use <code>:w!</code> to force the write, as long as you have permissions to override the read-only property.</p>

<p>For example, if you have set the file as read-only, the above will work.  If Windows itself or an administrator has set it read-only, you will need another option.</p>

<p>As @dash-tom-bang commented, one good example is within Program Files, where files are protected by default. <a href=""https://support.microsoft.com/en-us/kb/326549"" rel=""nofollow"">This Microsoft knowledgebase article</a> explains how that works in practice.</p>
","6640"
"How to add permanent line numbers to a file?","1301","","<p>I have a text file like this (using gVim on Windows)</p>

<pre><code>foo bar baz quux 
corge grault garply 
waldo fred plugh 
[...150 more lines...]
xyzzy thud
</code></pre>

<p>I want to add a number to each line in the file. Not using <code>:set number</code>, but to add the number as text preceding each line, as follows, so the number is part of the file.</p>

<pre><code>1. foo bar baz quux 
2. corge grault garply 
3. waldo fred plugh 
[...~150 more lines...]
155. xyzzy thud
</code></pre>
","<p>In pure Vim fashion:</p>

<pre><code>:%s/^/\=line('.')."". ""
</code></pre>

<p>Explanation:</p>

<pre><code>:%s/^/            "" the substitution will be applied to the beginning of every line
\=                "" the rest of the replacement part is an expression
line('.')."". ""    "" the expression returns the current line number concatenated with a dot and a space
</code></pre>

<p>See <code>:help \=</code> and <code>:help line()</code>.</p>

<p>Using an expression in the replacement part is very powerful and FWIW a pretty good point of entry to vimscript.</p>
","690"
"How can I run a function or macro across a folder of files?","1294","","<p>Let's say I have a function, named <code>StripWhitespace</code>. </p>

<p>I can run it on a single file by opening the file and running <code>:StripWhitespace</code>.  </p>

<p>How can I automatically run that function against a folder of files, and save the results as I go along?</p>
","<p>You can use the <code>-c</code> argument to run a command on startup, from <code>vim(1)</code>:</p>

<pre><code>   -c {command}
               {command} will be executed after the first  file  has  been
               read.   {command}  is interpreted as an Ex command.  If the
               {command} contains spaces it must  be  enclosed  in  double
               quotes  (this depends on the shell that is used).  Example:
               Vim ""+set si"" main.c
               Note: You can use up to 10 ""+"" or ""-c"" commands.
</code></pre>

<p>Example:</p>

<pre><code>vim -c ':call StripWhitespace()' file1 file2
</code></pre>

<p>To quit afterwards, add <code>| :wqa</code>:</p>

<pre><code>vim -c ':call StripWhitespace() | :wqa' file1 file2
</code></pre>
","121"
"Overwrite colorscheme syntax highlighting","1288","","<p><em>/* This is coming directly from Molokai's <a href=""https://github.com/tomasr/molokai/issues/36"" rel=""nofollow noreferrer"">issue #36</a>. */</em></p>

<h1>The problem</h1>

<p><a href=""https://github.com/tomasr/molokai"" rel=""nofollow noreferrer""><em>Molokai</em></a> is a very nice theme for <em>Vim</em> but it has a terrible <em>vimdiff</em> highlighting (see left split, last 5 lines). <code>+</code> are not <em>green</em> and <code>-</code> are not <em>red</em>.</p>

<p><a href=""https://i.stack.imgur.com/LunqU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LunqU.png"" alt=""Bad syntax highlighting""></a></p>

<p>I've been suggested by <strong>justinmk</strong>@GitHub to use the following <code>~/.vimrc</code> (<a href=""https://gist.github.com/Atcold/f3b75884c6b2ba18ff26"" rel=""nofollow noreferrer"">here</a>'s the <em>gist</em>).</p>

<pre><code>syntax enable
let s:color_override_dark = '
    \ if &amp;background == ""dark""
    \ | hi StatusLine    guifg=#000000 guibg=#ffffff gui=NONE  ctermfg=16 ctermbg=15     cterm=NONE
    \ | hi CursorLine    guibg=#293739 ctermbg=236
    \ | hi PmenuSel      guibg=#0a9dff guifg=white   gui=NONE  ctermbg=39 ctermfg=white  cterm=NONE
    \ | hi PmenuSbar     guibg=#857f78
    \ | hi PmenuThumb    guifg=#242321
    \ | hi WildMenu      gui=NONE cterm=NONE guifg=#f8f6f2 guibg=#0a9dff ctermfg=255 ctermbg=39
    \ | hi DiffAdd       guifg=#ffffff guibg=#006600 gui=NONE  ctermfg=231  ctermbg=22   cterm=NONE 
    \ | hi DiffChange    guifg=#ffffff guibg=#007878 gui=NONE  ctermfg=231  ctermbg=30   cterm=NONE 
    \ | hi DiffDelete    guifg=#ff0101 guibg=#9a0000 gui=NONE  ctermfg=196  ctermbg=88   cterm=NONE 
    \ | hi DiffText      guifg=#000000 guibg=#ffb733 gui=NONE  ctermfg=000  ctermbg=214  cterm=NONE 
    \ | hi MatchParen    guifg=NONE   guibg=NONE gui=underline ctermfg=NONE ctermbg=NONE cterm=underline
    \ | endif
    \'

if has('vim_starting') ""only on startup
  exe 'autocmd ColorScheme * '.s:color_override_dark
  "" expects &amp;runtimepath/colors/{name}.vim.
  silent! colorscheme molokai
endif
</code></pre>

<p>which unfortunately does not work for some reasons.
Can someone point out what has been done wrongly?</p>

<hr>

<h1>The solution</h1>

<p>Inserting the following code into <code>~/.vimrc</code> fixes the problem stated above.</p>

<pre><code>colorscheme molokai
"" Better gitcommit messages
hi diffAdded   ctermbg=NONE ctermfg=46  cterm=NONE guibg=NONE guifg=#00FF00 gui=NONE
hi diffRemoved ctermbg=NONE ctermfg=196 cterm=NONE guibg=NONE guifg=#FF0000 gui=NONE
hi link diffLine String
hi link diffSubname Normal
</code></pre>

<p>And here we have a before / after :)</p>

<p><a href=""https://i.stack.imgur.com/ys04s.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ys04s.png"" alt=""Before / after""></a></p>

<h2>Further information</h2>

<p>It is possible to <a href=""http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor"" rel=""nofollow noreferrer"">remap <code>F10</code> to *show me what syntax is this*</a>. Then, one can modify what s/he feels needs some adjustments, as I've done for the 'strong' <code>diffLine</code> and to the 'green' <code>diffSubname</code>.</p>
","<p><code>DiffAdd</code> and <code>DiffDelete</code> are only used when actually <em>performing</em> a diff (<code>$ vim -d foo.txt bar.txt</code>, <code>$ vimdiff foo.txt bar.txt</code>, <code>$ git mergetool</code>, etc.); those highlight groups are totally irrelevant, here.</p>

<p>The highlight groups used for added and deleted lines when <em>reading</em> a diff file are <code>diffAdded</code> and <code>diffRemoved</code>.</p>

<p>Adding the lines below between line 272 and line 274 of <code>molokai.vim</code> should fix your problem:</p>

<pre><code>hi diffAdded   ctermbg=NONE ctermfg=108 cterm=NONE guibg=NONE guifg=#87af87 gui=NONE
hi diffRemoved ctermbg=NONE ctermfg=131 cterm=NONE guibg=NONE guifg=#af5f5f gui=NONE
</code></pre>

<p>(Those are the colors used in <a href=""https://github.com/romainl/Apprentice"">my own colorscheme</a>, use the ones you want.)</p>
","4884"
"How to make vimrc settings applicable for a directory tree only","1285","","<p>Is there a way to make certain vimrc configuration valid only for files under a defined directory tree? Or alternatively, is there a way to have a .vimrc file in a directory, and make its setting override all $HOME/.vimrc for that directory and subdirectories (and maybe, additional vimrc file in subdirectory would override again what was overridden by the directory-tree-root vimrc) ?</p>

<p>Like this:</p>

<pre><code>- ~
+- .vimrc
+- Development
   +- proj
      +- src 
         +- .vimrc (overrides ~/.vimrc for files in Development/proj/src and subdirs)
      +- res
         +- .vimrc (overrides ~/.vimrc for files in Development/proj/res and subdirs)
         +- cc
            +- .vimrc (overrides ../.vimrc and ~/.vimrc for files in Development/proj/res/cc)
</code></pre>
","<p>There are several ways to do this.</p>

<p>As you specified <code>directory tree</code>, it excludes the <code>.exrc</code> approach (as it only works for one directory), and the <em>modelines</em> as well.</p>

<p>Remains the hand-rolled way: you put an autocommand in your <code>.vimrc</code> for pattern or specific directories. It's not my preferred approach as it clutters the <code>.vimrc</code> with yet another thing -- and also because my mind have been compromised with the <code>Single Responsibility Principle</code>.</p>

<p>For reference, there is also the plugin <em>Project</em> -- one of the oldest on vim.org. As I'm not using it, I won't detail how it works.</p>

<p>Then, there are many, and many, plugins with a name that looks like <em>local vimrc</em>. I've even been maintaining one for years: <a href=""https://github.com/LucHermitte/local_vimrc"" rel=""nofollow"">https://github.com/LucHermitte/local_vimrc</a></p>

<p>Regarding its features, </p>

<ul>
<li>It answers your question: being sourced for each file in a hierarchy -- actually each time we enter a related vim window, the matching <code>_vimrc_local</code> file<em>s</em> are sourced.</li>
<li>The plugin will look for files named <code>_vimrc_local.vim</code>, though the pattern used to search for files can be configured (as a string or a list of patterns)</li>
<li>It permit plugins that uses per project settings to force loading the <code>_vimrc_local</code> file before anything else. For instance, when I run <code>gvim foobar.cpp</code> from the shell my template expander plugin (TEP) (<a href=""http://code.google.com/p/lh-vim/wiki/muTemplate"" rel=""nofollow"">mu-template</a>) automatically fills in the project name, the project style (copyright headers, namespaces, naming conventions, ...). As TEP and <code>vimrc_local</code> plugins usually use the same vim event, there is a race on the event, and there is no guaranty project settings can be loaded before expanding any template. So, there is a way with my plugin to fix this kind of races. </li>
<li>On the official site, you'll found some explanations on how to write the <code>_vimrc_local.vim</code> project files.</li>
<li>It's being regularly tested and used on Windows (with/without cygwin), *nixes. </li>
<li>It stops searching for project configuration at $HOME, or the root directory (<code>/</code>, <code>//ip/</code>), or don't even try to on remote files (http, ftp, ...).</li>
<li>It supports black and white lists, and also ask-to-the-user and sandbox lists which will work in the same way: what is done of the project-file will depend on the kind the list the project-file belongs to.</li>
<li>Someday, I'll eventually have <a href=""https://code.google.com/p/lh-vim/wiki/BTW"" rel=""nofollow"">templates to generate project configurations</a> for C &amp; C++ project managed with/without CMake, generating (or not) Doxygen documentation, ...</li>
</ul>
","2134"
"How can I clear a register/multiple registers completely?","1278","","<p>I quite often use the <code>:registers</code> command to show the contents of all the registers (I forget what I put where, exactly what the role of <code>""*</code>, <code>"".</code>, <code>""%</code>, etc. are).</p>

<p>Especially because I set the <code>""</code> option in the <code>viminfo</code> option, and hence my registers are persisted between my vim sessions (which in general I want, in the short term), over time the <code>:registers</code> list gets longer and longer, and hence more and more cumbersome and filled with really old stuff.</p>

<p>So far, the only way I've found to fix this is to manually edit some of the 'old' register contents out of <code>~/.viminfo</code>, which I need to do with <code>vim -u NONE</code> and is hence a bit cumbersome.</p>

<p>Is there a cleaner way to wipe all registers, or wipe a specific register, so it no longer appears in the <code>:registers</code> list?</p>
","<p>In short, there is not a cleaner way to wipe registers so completely that they disappear from <code>:reg</code>. </p>

<p>Rather than murk around with <code>~/.viminfo</code>, I tend to ""softclear"" registers when I'm really and truly done with them by setting them to be blank. To clear the <code>a</code> register, for instance, I type <kbd>q</kbd><kbd>a</kbd><kbd>q</kbd> to set the <code>a</code> register to an empty string. Equivalently, <code>:let @a=''</code> does the same. </p>

<p>Then, looking at the output of <code>:reg</code> is still helpful because it is very easy to discern between empty registers and contained registers. On the other hand, I find that essentially all of my named registers lie on the top row (macros) or the main row (useful paste things), and even then I've only used about 15 named registers.</p>

<p>There was a <a href=""http://vim.1045645.n5.nabble.com/how-to-clear-registers-td1143529.html"">thread</a> on the vim mailing list a few years back that also concluded that there was no easier way to wipe registers.</p>
","468"
"How do I run Homebrew vi on macOS instead of the older version Apple provided?","1278","","<p>I have recently upgraded to Vim 8 using Homebrew, but my <code>vi</code> commands still load the OS-provided version 7.4 of Vim. I could add an alias to <code>vi</code>, but is there another way?</p>
","<p>This is happening because the OS's <code>vi</code> is ahead of Homebrew <code>vi</code> in the <code>PATH</code>.</p>

<p>While you could fix it by putting <code>/usr/local/bin</code> ahead of <code>/usr/bin</code> in the <code>PATH</code>, that would be a security hole since Homebrew gives ownership of that directory to your user. That permission change from the macOS default means that even an extremely unsophisticated malware could use this hole to get root privileges. All they'd have to do is add some other common command here like <code>ls</code>, then pass the commands through to <code>/bin/ls</code> until they see you've run it through <code>sudo</code>, then they take over.</p>

<p>This is a general principle, not specific to Vi, Macs, or Homebrew at all: never place user-writeable <code>PATH</code> elements ahead of those that can only be modified by <code>root</code>.</p>

<p>There are several ways to solve this problem:</p>

<ol>
<li><p>Replace the OS's <code>vi</code> and <code>vim</code> binaries with symlinks to the Homebrew versions:</p>

<pre><code>$ cd /bin
$ sudo mv vi vi-7.4
$ sudo ln -s /usr/local/bin/vi .
$ cd /usr/bin
$ sudo mv vim vim-7.4
$ sudo ln -s /usr/local/bin/vim .
</code></pre>

<p>I do not recommend this solution, but it is what the original version of the question asked for, so there it is.</p>

<p>Notice that this doesn't delete the OS-provided versions, just renames them so you still have access to them by appending <code>-7.4</code> if you need to later.</p></li>
<li><p>Since all three of the directories in the prior solution are in the default user <code>PATH</code> on macOS, you don't actually need the symlinks unless you have local software that has hardcoded <code>/bin</code> or <code>/usr/bin</code> paths to <code>vi</code> or <code>vim</code>. Just move the system versions shadowing Homebrew's versions out of the way:</p>

<pre><code>$ sudo mv /bin/vi /bin/vi-7.4
$ sudo mv /usr/bin/vim /usr/bin/vim-7.4
</code></pre>

<p>That causes <code>vi</code> and <code>vim</code> commands to fall through to the Homebrew versions in <code>/usr/local/bin</code>.</p></li>
<li><p>Both solutions above will break the next time you upgrade macOS because the OS installer will put the Apple-provided versions back in <code>/bin</code> and <code>/usr/bin</code>, so the solution I actually recommend is to add aliases to your <code>~/.bashrc</code> file:</p>

<pre><code>alias vi=/usr/local/bin/vim
alias vim=/usr/local/bin/vim
</code></pre>

<p>This lets you switch back to the OS-provided version of Vim easily by quoting the alias:</p>

<pre><code>$ 'vi' somefile.txt         # forces use of /bin/vi
</code></pre>

<p>You might also want to add this to <code>~/.bash_profile</code>:</p>

<pre><code>export EDITOR=/usr/local/bin/vim
</code></pre>

<p>Several commands use <code>$EDITOR</code> instead of hard-coding a call to <code>vi</code>.</p></li>
<li><p>Another option you have is to remove the Homebrew build of Vim and install <a href=""https://macvim-dev.github.io/macvim/"" rel=""nofollow noreferrer"">MacVim</a> instead. It also installs to <code>/usr/local/bin</code>, but unlike Homebrew Vim, it installs a command that isn't shadowed by the OS version, <code>mvim</code>. By default, that command launches the GUI MacVim editor, but with this alias, you can have your <code>vi</code> and your Terminal editor, too:</p>

<pre><code>alias vi='mvim -v'
</code></pre>

<p>The <code>-v</code> flag tells it not to launch the GUI, but to edit in the Terminal instead.</p>

<p>If you choose this option, make a similar change to the <code>EDITOR</code> definition.</p>

<p>Among the many nice features you get with MacVim is integration with the OS clipboard: pasting from the OS clipboard into Terminal.app running stock or Homebrew Vim you already have, but I find it nice to go the other direction as well: ""yank"" commands in <code>mvim -v</code> under Terminal.app also sends the yanked text to the OS clipboard so I can paste it into some other program.</p></li>
</ol>
","11059"
"How can I use Readline shortcuts in the vim command line?","1275","","<p>When I'm editing a Vim command, I would like to use <a href=""http://www.bigsmoke.us/readline/shortcuts"">the same shortcuts</a> as in Bash and every other REPL: <kbd>M-b</kbd> to go back a word, <kbd>M-Backspace</kbd> to delete a previous word, <kbd>M-u</kbd> to convert the word to uppercase, <kbd>C-k</kbd> to cut until the end of the line, etc. I have been able to configure some of the commands, using <code>:cmap</code>, but not all.</p>

<p>Is there a plugin or setting which provides this?</p>

<p>I know about <a href=""http://vimhelp.appspot.com/options.txt.html#%27cedit%27""><code>cedit</code></a>, but I find it cumbersome when all I need is to enter a quick command.</p>
","<blockquote>
  <p>Is there a plugin or setting which provides this?</p>
</blockquote>

<p>Yes, <a href=""https://github.com/tpope/vim-rsi"">rsi.vim plugin</a>:</p>

<blockquote>
  <p><strong>Features</strong></p>
  
  <ul>
  <li>Readline mappings are provided in insert mode and command line mode. Normal mode is deliberately omitted.</li>
  <li>Important Vim key bindings (like insert mode's C-n and C-p completion) are not overridden.</li>
  <li>Meta key bindings are provided in a way that works in the terminal without the perils of remapping escape.</li>
  <li>C-d, C-e, and C-f are mapped such that they perform the Readline behavior in the middle of the line and the Vim behavior at the end.
  (Think about it.)</li>
  </ul>
</blockquote>
","6041"
"How do I search google from vim?","1271","","<p>I would like to be able to search google from within any vim file. A nice command might be <code>:goo</code> while in normal mode. </p>

<p>Then I type what I want to search and bam it opens my default browser with the search. </p>

<p>How would I do this?</p>
","<p>You have a couple of options here:</p>

<p>Using a plugin:</p>

<ul>
<li><a href=""http://www.vim.org/scripts/script.php?script_id=4183"" rel=""nofollow noreferrer"">vim-g</a></li>
<li><a href=""http://www.vim.org/scripts/script.php?script_id=3551"" rel=""nofollow noreferrer"">gsearch</a></li>
<li><a href=""https://github.com/christoomey/vim-quicklink"" rel=""nofollow noreferrer"">vim-quicklink</a></li>
</ul>

<p>Or, if you prefer a lightweight solution, you can try the following:</p>

<pre><code>function! GoogleSearch()
     let searchterm = getreg(""g"")
     silent! exec ""silent! !firefox \""http://google.com/search?q="" . searchterm . ""\"" &amp;""
endfunction
vnoremap &lt;F6&gt; ""gy&lt;Esc&gt;:call GoogleSearch()&lt;CR&gt;
</code></pre>

<p>(<a href=""https://superuser.com/a/212060/367359"">source</a>)</p>

<p>Using the <a href=""https://github.com/xolox/vim-shell"" rel=""nofollow noreferrer"">vim-shell</a> plugin you can rewrite this to:</p>

<pre><code>function! GoogleSearch()
     let searchterm = getreg(""g"")
     Open ""http://google.com/search?q="" . searchterm . ""\"" &amp;""
endfunction
vnoremap &lt;F6&gt; ""gy&lt;Esc&gt;:call GoogleSearch()&lt;CR&gt;
</code></pre>

<p>You can also have a look at those links:</p>

<ul>
<li><a href=""http://vim.wikia.com/wiki/Search_the_web_for_text_selected_in_Vim"" rel=""nofollow noreferrer"">http://vim.wikia.com/wiki/Search_the_web_for_text_selected_in_Vim</a></li>
<li><a href=""https://www.reddit.com/r/vim/comments/37ou4p/help_me_search_google_from_vim/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/vim/comments/37ou4p/help_me_search_google_from_vim/</a></li>
<li><a href=""http://vim.wikia.com/wiki/Internet_search_for_the_current_word"" rel=""nofollow noreferrer"">http://vim.wikia.com/wiki/Internet_search_for_the_current_word</a></li>
</ul>

<p>And I highly recommend <a href=""https://vimeo.com/122615320"" rel=""nofollow noreferrer"">this video by Drew Niel</a>.</p>
","9002"
"How to reverse every 4 lines?","1269","","<p>First of all, with this being my first post here, I'd just like to say that I've found VIM to be a great tool and the forum here to be very helpful in finding answers to questions, with lots of helpful people providing invaluable assistance. I'm still very new to VIM, so pretty much everything I've learned about it has come from here.</p>

<p>My question is: I know how to reverse ALL the lines in a file (:g/^/m0 among other ways), but is there a way to reverse every 4 lines in a file, so that</p>

<pre><code>line1
line2
line3
line4
line5
line6
line7
line8
...
</code></pre>

<p>becomes</p>

<pre><code>line4
line3
line2
line1
line8
line7
line6
line5
...
</code></pre>

<p>You can assume that there will always be an exact multiple of 4 lines in such files.</p>
","<p>The command <code>:Reverse</code> explained at <a href=""http://vim.wikia.com/wiki/Reverse_all_lines"" rel=""nofollow"">Vim Wiki</a> can be used for this (you may include it in your <code>.vimrc</code> to make it permanent):</p>

<pre><code>command! -bar -range=% Reverse &lt;line1&gt;,&lt;line2&gt;g/^/m&lt;line1&gt;-1|nohl
</code></pre>

<p>Then you can record a macro to run the command on every four lines:</p>

<pre><code>qmV3j:Reverse&lt;cr&gt;4jq
1000@m
</code></pre>

<p>Explanation:</p>

<ul>
<li><code>qm</code>: 'q' in normal mode starts (and stops) recording a macro in a given register (register 'm', in this case, but it could be any other letter)</li>
<li><code>V</code>: enter visual mode and select the current line</li>
<li><code>3j</code>: expand the visual selection to the next 3 lines</li>
<li><code>:Reverse&lt;cr&gt;</code>: run the Reverse command on the selected lines (<code>&lt;cr&gt;</code> here stands for the <kbd>enter</kbd> key)</li>
<li><code>4j</code>: go to the next unchanged lines</li>
<li><code>q</code>: stops recording the macro</li>
<li><code>1000@m</code>: run the macro recorded at register 'm' 1000 times (you may increase this number if your file is larger than 4000 lines)</li>
</ul>

<hr>

<p><strong>Edit:</strong></p>

<p>As mentioned in the comments, you could use a recursive macro instead of using a count:</p>

<pre><code>qmV3j:Reverse&lt;cr&gt;4jq
qM@mq
@m
</code></pre>

<ul>
<li><code>qM</code>: if the register specified for <code>q</code> is uppercase the macro is <em>appended</em> to the register (which is also useful when you realize when you missed the last steps on a complex macro)</li>
<li><code>@m</code>: run the macro on register <code>m</code></li>
<li><code>q</code>: stop appending the macro</li>
</ul>

<p>Despite it is created as a macro, you can create a command for this if it is a common task on your workflow:</p>

<pre><code>function! Reverse4()
   let reg_m = @m
   let @m = '&lt;c-r&gt;&lt;c-r&gt;m'
   normal! @m
   let @m = reg_m
endfunction
command! Reverse4 call Reverse4()
</code></pre>

<ul>
<li><code>function! Reverse4()</code>/<code>endfunction</code>: defines a new function</li>
<li><code>let reg_m = @m</code>: saves the current contents of register <code>m</code></li>
<li><code>let @m = ""&lt;c-r&gt;&lt;c-r&gt;m""</code>: insert the macro in the register <code>m</code> -- note that <code>&lt;c-r&gt;</code> is the vim notation for <kbd>Ctrl</kbd>+<kbd>r</kbd> and that you should <strong>type</strong> this, not copy/paste, so your line will be similar to <code>let @m = 'V3j:Reverse^M4j@m'</code> and it will contain a <em>special character</em> (^M)</li>
<li><code>normal! @m</code>: the normal command run its argument as it has been typed in normal mode, so it will run the recursive macro</li>
<li><p><code>let @m = reg_m</code>: restores the contents of the register <code>m</code>, so you don't have to remember that this register is being used on this function and avoid using it</p></li>
<li><p><code>command! Reverse4 call Reverse4()</code>: create a new command for this function</p></li>
</ul>

<p>Depending on your needs you could enhance it, e.g.: pass an argument to the command and function so it would work for any number of lines instead of being fixed in groups of 4 lines.</p>
","6288"
"How to interactively search/grep with VIM?","1267","","<p>Is there any way to configure VIM to interactively search inside every file for an entire project?</p>

<p>By <em>interactive</em>, I mean updating each keystroke.</p>

<p>Something like Emacs <a href=""https://github.com/abo-abo/swiper"" rel=""noreferrer"">counsel-git-grep</a>, see: <a href=""https://www.youtube.com/watch?v=OEmXQNS7ofo"" rel=""noreferrer"">example demo</a>.</p>
","<p>I'm not sure this is what you're looking for, but maybe you could try <a href=""https://github.com/junegunn/fzf"" rel=""nofollow noreferrer"">fzf</a> and <a href=""https://github.com/junegunn/fzf.vim"" rel=""nofollow noreferrer"">fzf.vim</a>.</p>

<p>If you use <a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow noreferrer"">vim-plug</a> as a plugin manager, all you should have to do to install them, is to add these lines in your <code>vimrc</code>:</p>

<pre><code>Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
</code></pre>

<p>... somewhere between the lines:</p>

<pre><code>call plug#begin('~/.vim/plugged')
</code></pre>

<p>and:</p>

<pre><code>call plug#end()
</code></pre>

<p>Then execute <code>:PlugInstall</code>.</p>

<hr>

<p>Among various commands and mappings provided by <code>fzf.vim</code> (whose only purpose seems to be to install mappings and commands asking <code>fzf</code> to fuzzy search through predefined sources), there is the command <code>:Ag</code>.</p>

<p>To be able to use it, you need to install the shell command <a href=""https://github.com/ggreer/the_silver_searcher"" rel=""nofollow noreferrer"">ag</a>. On debian based distributions, it can be done with the following command:</p>

<pre><code>apt-get install silversearcher-ag
</code></pre>

<p>The project on github explains how to install it on MacOS:</p>

<pre><code>brew install the_silver_searcher
</code></pre>

<hr>

<p><code>:Ag</code> is a wrapper around <code>$ ag</code>, and allows you to fuzzy search a pattern in the files of the current directory (the one displayed when you type <code>:pwd</code>). The matches are updated after every keystroke.</p>

<p>You can:</p>

<ul>
<li>cycle forward and backward through the matches with <code>C-n</code> and <code>C-p</code></li>
<li>select the current match and move to the next/previous one with <code>Tab</code>/<code>S-Tab</code></li>
<li>select or deselect all the matches with <code>M-a</code> or <code>M-d</code></li>
</ul>

<p>If you select one or several matches, after hitting Enter, they will populate the quickfix list. From there you'll be able to navigate through them with default Vim commands / mappings, such as <code>:cnext</code> and <code>:cprevious</code>.</p>

<p><a href=""https://i.stack.imgur.com/XlTIQ.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XlTIQ.gif"" alt=""enter image description here""></a></p>

<p>If you want to add a prefix to all the commands installed by <code>fzf.vim</code>, and avoid overriding existing commands, you can add this in your <code>vimrc</code>:</p>

<pre><code>let g:fzf_command_prefix = 'your_prefix'
</code></pre>

<p>I use <code>Fzf</code> as a prefix, that's why I didn't type <code>:Ag</code> but <code>:FzfAg</code>.</p>

<hr>

<p>If you prefer to use <code>git grep</code> instead of <code>ag</code>, it seems you could install your own custom wrapper around it, <code>:GGrep</code>, like this:</p>

<pre><code>command! -bang -nargs=* GGrep
  \ call fzf#vim#grep('git grep --line-number '.shellescape(&lt;q-args&gt;), 0, &lt;bang&gt;0)
</code></pre>

<p>It's explained in <code>:h fzf-vim-customization</code>.</p>

<p>Also, if <code>fzf</code> opens a pane in tmux, and you would prefer it takes the whole screen instead, you can append a bang to all the commands (<code>:Ag!</code>, <code>:GGrep!</code>, ...).</p>

<hr>

<p>As you said in your last <a href=""https://vi.stackexchange.com/questions/10692/how-to-interactively-search-grep-with-vim/10693?noredirect=1#comment19232_10693"">comment</a>, by default <code>fzf</code> changes the configuration of your shell. For example, if you use <code>bash</code>, it will add the following line in your <code>~/.bashrc</code>:</p>

<pre><code>[ -f ~/.fzf.bash ] &amp;&amp; source ~/.fzf.bash
</code></pre>

<p>This will source the file <code>~/.fzf.bash</code>. The latter contains some code:</p>

<pre><code># Setup fzf
# ---------
if [[ ! ""$PATH"" == */home/user/.fzf/bin* ]]; then
  export PATH=""$PATH:/home/user/.fzf/bin""
fi

# Auto-completion
# ---------------
[[ $- == *i* ]] &amp;&amp; source ""/home/user/.fzf/shell/completion.bash"" 2&gt; /dev/null

# Key bindings
# ------------
source ""/home/user/.fzf/shell/key-bindings.bash""
</code></pre>

<p>This code appends a path to the environment variable <code>$PATH</code>: <code>/home/user/.fzf/bin</code> ; which is the folder containing the <code>fzf</code> program.</p>

<p>It also sources 2 other files:</p>

<pre><code>/home/user/.fzf/shell/completion.bash
/home/user/.fzf/shell/key-bindings.bash
</code></pre>

<p>The first one seems to define completion functions, while the second installs key bindings.</p>

<p>Unfortunately, the key bindings may override default <code>readline</code> functions.<br>
For example, <code>fzf</code> binds the function <code>fzf-file-widget</code> to <code>C-t</code>. This key is usually used by readline to execute the <code>transpose-chars</code> function.</p>

<p>If you don't want this, one possible solution would be to restore the key bindings inside your <code>~/.bashrc</code>, after <code>fzf</code> has sourced its configuration. For example, if you wanted <code>C-t</code> to keep its old behavior, that is transposing the 2 characters around the cursor, and bind <code>fzf-file-widget</code> to another key, let's say <code>C-x C-t</code>, you could add these lines at the end of <code>~/.bashrc</code>:</p>

<pre><code>bind -x '""\C-x\C-t"": fzf-file-widget'
bind '""\C-t"": transpose-chars'
</code></pre>

<p>The same thing applies to the <code>zsh</code> shell, but the syntax to install a key binding is a little different:</p>

<pre><code>bindkey '^X^T' fzf-file-widget
bindkey '^T' transpose-chars
</code></pre>

<hr>

<p>If one of the shell key binding you were used to has been overridden by <code>fzf</code>, you want to restore it, but don't know what's the exact name of the function which was executed, you could try the following thing.</p>

<p>First, inside your <code>~/.bashrc</code>, temporarily comment out the line which sources the <code>fzf</code> configuration. Then, reopen a terminal, and have a look at the output of the <code>bind -P</code> command, which you can read in a Vim buffer:</p>

<pre><code>bind -P | vim -R -
</code></pre>

<p>I'm not sure, but I think it should display most or all the <code>readline</code> key bindings. If you're looking for the name of the readline function bound to the <code>C-t</code> key, in the Vim buffer, you would search <code>\\C-t</code>. And if you were looking for the one bound to <code>M-c</code> (meta / alt key), you would search <code>\\ec</code> (<code>\e</code> stands for the escape key and it seems <code>M-c</code> produces the same keycodes as <code>escape + c</code>).</p>

<p>You can do the same thing in <code>zsh</code> by looking at the output of the <code>bindkey</code> command. But this time, <code>^[</code> stands for the meta/alt modifier key, while a single caret (<code>^</code>) character stands for the control key.</p>

<hr>

<p>Currently, I found 4 key bindings executing functions containing the <code>fzf</code> keyword in their name. They use the key sequences <code>C-i</code> (same as <code>Tab</code>), <code>C-r</code>, <code>C-t</code> and <code>M-c</code>. They are bound to the following functions:</p>

<pre><code>C-i    fzf-completion
C-r    fzf-history-widget
C-t    fzf-file-widget
M-c    fzf-cd-widget
</code></pre>

<p>On my system, originally, <code>readline</code> (the library used by <code>bash</code> to edit the command line) bound those keys to these functions:</p>

<pre><code>C-i     complete
C-r     reverse-search-history
C-t     transpose-chars
M-c     capitalize-word
</code></pre>

<p>And <code>zle</code> (the line editor used by <code>zsh</code>), bound them to:</p>

<pre><code>C-i     expand-or-complete
C-r     history-incremental-search-backward
C-t     transpose-chars
M-c     capitalize-word
</code></pre>
","10693"
"How to find multiple instances of same character on single line?","1263","","<p>I have a CSV that uses ,(comma) as the delimiter. This CSV is nearly 20K lines long and there are 10 instances where a comma was used INSIDE the data. These errant commas are breaking my processor.</p>

<p>In VIM, how would you locate ONLY the lines that have more than 1 comma?</p>

<p>I can find all commas using </p>

<pre><code>:%s/,//gn
</code></pre>

<p>This tells me I have 17655 commas on 17646 lines. There should only be 17646 commas, 1 per line, in the entire file. What is an easy way to locate any line with more than one comma on it?</p>
","<p>I can think of two expressions offhand that may work for you. They both worked on some quick, limited test data I tried. The first expression is</p>

<pre><code>\(.\{-},\)\{2,}
</code></pre>

<p>This translates to ""match at least 2 sequences of (as few as possible of anything followed by a comma)."" In other words this tries to find matches of two or more sequences of comma-delimited text ranges.</p>

<p>Another is</p>

<pre><code>.\{-},\@&lt;=.*,
</code></pre>

<p>Which is ""find anything followed by a comma, but only if immediately prior to that you could find as few as possible of anything followed by a comma.""</p>

<p>I'm not sure if one or the other is more preferable. I find the first one easier to reason about, even though I came up with the second, more complex one first. You <em>may</em> need to anchor them with <code>^</code> to the start of the line.</p>

<p><a href=""https://vi.stackexchange.com/a/6563/72"">Karl Yngve Lervåg's answer</a> has an even simpler regex that works just as well as my overengineered options.</p>

<p>With them, you can use the <code>global</code> command (<code>:help global</code>) to operate on the matching lines with some Ex command: <code>:g/.\{-},\@&lt;=.*,/d</code> for example, will delete all the lines with more than one comma in them.</p>
","6562"
"How can I generate a list of sequential numbers, one per line?","1257","","<p>Starting from a blank slate, how can I obtain a document that contains</p>

<pre><code>1
2
3
4
5
6
7
8
9
10
…
100
</code></pre>

<p>To be clear, I don't want these numbers displayed in the margin; I want them inserted into the document itself.</p>
","<p>Use <code>:put</code> and <code>range()</code>:</p>

<pre><code>:put =range(1,100)
</code></pre>

<p>To avoid the blank line at the top (<a href=""https://vi.stackexchange.com/questions/12/how-can-i-generate-a-list-of-sequential-numbers-one-per-line#comment15_14"">kudos to romainl</a>), use <code>:0put</code>:</p>

<pre><code>:0put =range(1,100)
</code></pre>
","14"
"Can I search for a Unicode combining character in Vim?","1254","","<p>I have a file with the character <code>ã</code> (lowercase a + combining tilde).  <code>Encoding</code> and <code>fileencoding</code> are both <code>utf-8</code>.  <code>ga</code> shows</p>

<pre><code>&lt;a&gt; 97, hex 61, octal 141 &lt;~&gt; 771, Hex 0303, Octal 1403
</code></pre>

<p>(but with the actual combining tilde in the <code>&lt;&gt;</code>) and <code>g8</code> shows</p>

<pre><code>61 + cc 83
</code></pre>

<p>Searching with <code>/a\%u0303</code> works fine.</p>

<p>Searching for just <code>\%u0303</code> gives E486 Pattern not Found.</p>

<p>Can I search for just the combining character without also searching for the base character?</p>
","<p>Type in normal mode <code>/&lt;ctr-v&gt;u0303</code>
<br/><code>/</code> - start search
<br/><code>&lt;Ctr-v&gt;u</code> - init utf-8 code input
<br/><code>0303</code> - hex code combine character.</p>

<p><code>:he unicode</code></p>

<p>Also <code>:he mbyte-combining</code> and <code>:he utf-8-char-arg</code> the last one covered case with commands like <code>f</code>, <code>F</code> and so on.</p>
","3558"
"Find and replace all numbers with 0?","1248","","<p>Is there a command to find and replace all instances of a number in a file with 0 (including decimal numbers like <code>1.7</code>)?</p>
","<p>Based on the help file, and the <a href=""http://vim.wikia.com/wiki/Search_and_replace"" rel=""nofollow noreferrer"">Vim Wikia page on Search and replace</a></p>

<pre><code>:%s/[0-9]\+\.[0-9]\+\|[0-9]\+/0/g
</code></pre>

<p><code>:%s</code> - start a command with the range of the entire file, <code>%</code>, to substitute, the following patterns:</p>

<pre><code>[0-9]\+\.[0-9]\+
</code></pre>

<p>This must come first, it's the pattern that covers decimals like 1.7. In addition it will only match a number followed by a period, without replacing the period. <code>[0-9]</code> is the collection for any digit. The <code>\</code> is required to escape the special characters, <code>+</code>, which means match one or more occurrences. The <code>.</code> needs to be escaped, so that it doesn't take on it's normal meaning of match any character.</p>

<p><code>|</code> means or, as in match the first pattern or the second, and must be escaped.</p>

<p>Then the pattern for any digit, one or more times, <code>[0-9]\+</code> again. </p>

<pre><code>/0/g
</code></pre>

<p>Finally, replace every occurrence of the pattern on the line with 0. </p>

<p>For example, </p>

<pre><code>123
1.7
8
99
2.
</code></pre>

<p>becomes</p>

<pre><code>0
0
0
0
0.
</code></pre>
","10386"
"Vim filename/path completion","1247","","<p>I know I can complete filenames/paths from the current directory using ctrl+x, ctrl+f (<a href=""http://vimdoc.sourceforge.net/htmldoc/insert.html#compl-filename"" rel=""nofollow noreferrer""><code>compl-filename</code></a>). That works great in combination with set autochdir, which changes updates the current directory to the directory of the active buffer.</p>

<p>However, I started using <a href=""https://github.com/airblade/vim-rooter"" rel=""nofollow noreferrer""><code>airblade/vim-rooter</code></a> to make the current directory the ""project"" folder. Now filename completion always starts from the project folder.</p>

<p>The question: Is there a way to make the filename completion use the directory of the active buffer instead of the current directory? Or some other workaround?</p>

<p><a href=""https://stackoverflow.com/questions/35321300/vim-filename-path-completion"">Also asked in stackoverflow</a></p>
","<p>As @muru mentioned, there are no options to configure the directory from which to complete path and file names.  It always uses the working directory of the window.</p>

<p>I've written a couple of functions and mappings to help with this. Behind the scenes, they change the local working directory (using <code>:lcd</code>) temporarily, then restore the previous working directory when done.</p>

<h2>Elephant</h2>

<p>For reasons unknown to even me, I've called this micro-plugin <em>Elephant</em>.</p>

<p>Here's the code (copied from my <a href=""https://github.com/tommcdo/vimfiles/blob/acbfebde2fb468dbad05d8acf7d395727dfa0202/config/elephant.vim"">Vim config on GitHub</a>):</p>

<pre><code>let g:elephant_map = {
    \ 'f': function('elephant#current_file'),
    \ 'p': function('elephant#vcs_project')
\ }

function! elephant#prompt(base)
    let l:Fcn = get(g:elephant_map, a:base, function('elephant#identity'))
    let l:basedir = l:Fcn()
    execute 'lcd' l:basedir
    let l:file = fnamemodify(input(l:basedir.'/', '', 'file'), ':p')
    lcd -
    return fnamemodify(l:file, ':.')
endfunction

function! s:elephant_init()
    let l:base = getchar()
    return elephant#prompt(nr2char(l:base))
endfunction

function! elephant#identity()
    return '.'
endfunction

function! elephant#vcs_project()
    return fnamemodify(finddir('.git', '.;'), ':h')
endfunction

function! elephant#current_file()
    return expand('%:h')
endfunction

inoremap &lt;silent&gt; &lt;expr&gt; &lt;C-R&gt;&lt;C-E&gt; &lt;SID&gt;elephant_init()
cnoremap &lt;silent&gt; &lt;C-R&gt;&lt;C-E&gt; &lt;C-R&gt;=&lt;SID&gt;elephant_init()&lt;CR&gt;
</code></pre>

<h2>How to use it</h2>

<p>Using these mappings happens in 3 steps.</p>

<h3>1. Invoke the mapping</h3>

<p>In Insert mode or Command-line mode, invoke the mapping using <code>&lt;C-R&gt;&lt;C-E&gt;</code>.</p>

<h3>2. Choose a directory</h3>

<p>Type a single character to choose which root directory you want completion from. The code above provides two types of roots:</p>

<ul>
<li><code>f</code> - The directory that the current file (buffer) resides in</li>
<li><code>p</code> - The base directory of the Git project the current file belongs to</li>
</ul>

<h3>3. Enter the path or file name</h3>

<p>You will be prompted to enter the path or file name relative to the directory specified, with completion available. Press <code>Enter</code> when finished.</p>

<h2>Some notes</h2>

<ul>
<li>This doesn't provide inline completion in Insert mode the way <code>&lt;C-X&gt;&lt;C-F&gt;</code> does; instead, you will be typing the path or file name on the Command-line prompt (where <code>:</code> commands go). Upon pressing <code>Enter</code>, the path will be inserted into the buffer.</li>
<li>The same is true in Command-line mode, which can sometimes be confusing when you hit <code>Enter</code> and forget that you still have to hit <code>Enter</code> to issue whatever command you were just typing.</li>
<li>Other directory functions can be registered by adding them into <code>g:elephant_map</code>.</li>
<li>The path inserted will be the full, absolute path. The script can be tweaked to change that behaviour, but I haven't got around to it.</li>
</ul>
","6439"
"Does Vim autosave?","1246","","<p>From <code>:help swap-file</code>:</p>

<blockquote>
  <p><strong>Updating the swapfile</strong></p>
  
  <p>The swap file is updated after typing 200 characters or when you have
  not typed anything for four seconds.  This only happens if the buffer
  was changed, not when you only moved around.  The reason why it is not
  kept up to date all the time is that this would slow down normal work
  too much.  You can change the 200 character count with the
  'updatecount' option.  You can set the time with the 'updatetime'
  option.  The time is given in milliseconds.  After writing to the swap
  file Vim syncs the file to disk.  This takes some time, especially on
  busy Unix systems.  If you don't want this you can set the 'swapsync'
  option to an empty string.  The risk of losing work becomes bigger
  though.  On some non-Unix systems (MS-DOS, Amiga) the swap file won't
  be written at all.</p>
</blockquote>

<p>From this I have a few questions:</p>

<ol>
<li><p>Does this mean Vim autosaves your work from time to time?</p></li>
<li><p>""After writing to the swap file Vim syncs the file to disk."" What does this mean? Is this refering to the file being written first to memory and then to the disk or is it something else?</p></li>
<li><p>Say I'm taking class notes: I write fast and there's little need for me to leave Insert mode. But many times I change to Normal just to save my work. Do I need to do this or does Vim make sure that most of my work is saved even if I don't leave Insert mode?</p></li>
</ol>
","<ol>
<li>Yes it saves to swap file.</li>
</ol>

<p>You can do a quick test to get a <em>feel</em> of this. Go to a directory. Say <code>vim notest.txt</code> and write some text. You do not even have to save the file.</p>

<p>If you list files in the working directory you will find a swap file. Copy it to a different directory (where you have no ""notes.txt"" file, as say <code>vim notest.txt</code>.</p>

<p>You get a note about swap existing, it being modified, and the options of open as read only, recover etc. Choose recover and voila! A ""copy"" of your file.</p>

<ol start=""2"">
<li>Yes, swap is held in memory.</li>
</ol>

<p>When Vim reads a file it adds it to RAM. That is both for existing and new (still unsaved files). As swap is saved it is flushed to disk. The HDD. From RAM.</p>

<ol start=""3"">
<li>Yes and no.</li>
</ol>

<p>With default settings <em>most</em> of your work are saved. That is for every 200 characters entered, or when yo have a 4 second pause. Though I <em>trust</em> the swap file to be saved, I <em>like</em> to save my work when I know I'm on an unstable system. But, that said, one are fairly certain to keep the work unless one should be very unlucky and the hosting system going panic just after writing a <em>very</em> important sentence.</p>

<p>In short it is enough to save when the lecture is over. If the system should halt for what ever reason in midst of a class, the work is till there in the swap.</p>

<p>Of course: If you are very unlucky a crash can occur whilst swap file is being written. As a result swap file <em>could</em> be corrupted. Have never experienced this, and not sure which parts of the file might be messed up, but might worth a thought. As the swap file is <em>binary</em> (in lack of a better word), it seems to reason it is more fragile then a plain text file.</p>

<hr />

<p>As a side-note. At least when using working directory for swap, the swap file is location agnostic when it comes to recovery. As such you can <em>copy</em> the swap file to a new location and <em>recover</em> the file as a <em>new</em> file. Only note that the file-name is hard coded into the swap. As such you can not say:</p>

<pre><code>cp .foo.txt.swp .bar.txt.swp
</code></pre>

<p>and </p>

<pre><code>vim bar.txt
</code></pre>

<p>and expect the swap file of <code>foo.txt</code>.</p>

<p>If you are <em>very</em> interested you can do (on *nix):</p>

<pre><code>xxd -s 108 -l 800 -ps .foo.txt.swp | xxd -r -p
</code></pre>

<p>to get the path (with some quirks) of original file. As you'll see the full path is added, e.g.:</p>

<pre><code>~user/blah/blah/notes.txt
</code></pre>

<p><em>but</em> only the <em>basename</em> is used on swap check.</p>

<p>In that regard you can also check out the <code>vim -r</code> option - which lists swap files in current and lower directories. See <code>:h crash-recovery</code> with sub-topics.</p>
","833"
"How can I make highlighting commands in .vimrc take effect immediately with Vim 7.4?","1243","","<p>I have several <code>highlight</code> commands in my <code>.vimrc</code> file. In Vim 7.3, these took effect immediately after Vim had started. After updating to Vim 7.4, this is not the case anymore. Vim uses its default highlighting initially. When I load <code>.vimrc</code> a second time by executing <code>source ~/.vimrc</code>, highlighting works as I want.</p>

<p>You should be able to reproduce this problem using the following steps:</p>

<ol>
<li><p>Make a copy of your <code>.vimrc</code> file.</p></li>
<li><p>Replace <code>~/.vimrc</code> with a file that contains just the line <code>highlight Type ctermfg=28 cterm=bold</code>.</p></li>
<li><p>Run <code>vim dummy.c</code> in a 256 color terminal (for example GNOME Terminal).</p></li>
<li><p>Type <code>int</code> into the buffer. The <code>int</code> should appear in regular font and be colored light green, which is not what I want.</p></li>
<li><p>Enter <code>:source ~/.vimrc</code>. Now the <code>int</code> should appear in bold font and be colored dark green.</p></li>
</ol>

<p>According to the article <a href=""http://alvinalexander.com/linux/vi-vim-editor-color-scheme-syntax"" rel=""nofollow"" title=""How to control/configure vim colors""><em>How to control/configure vim colors</em></a>, it should be okay to just put the <code>highlight</code> commands into <code>.vimrc</code>. The article says that you should put <code>syntax enable</code> after the <code>highlight</code> commands, but this did not make any difference.</p>

<p>My first fix was to prepend each <code>highlight</code> command in <code>.vimrc</code> with <code>autocmd VimEnter *</code>. This worked for some file types, but not for others (C files are an example).</p>

<p>What is the reason for this behavior? How can I have the <code>highlight</code> commands executed when Vim is started such that they take effect for all buffers during the whole Vim session?</p>
","<p>This is no definite answer and your problem sounds like issue <a href=""https://github.com/vim/vim/issues/542"" rel=""nofollow"">542</a>. Apparently you can work around it, by writing your own basic colorscheme, instead of writing those <code>hi ...</code> statements directly into your .vimrc.</p>
","10039"
"How can I restore the cursor position when opening a file?","1242","","<p>If I edit a file with vim that I have <em>previously</em> edited, I'd like vim to jump to the position I was in when I last closed the file.</p>

<p>How can I accomplish this?</p>
","<p>What I use (adapted from <code>:help restore-cursor</code>):</p>

<pre><code>"" Go to the last cursor location when a file is opened, unless this is a
"" git commit (in which case it's annoying)
au BufReadPost *
    \ if line(""'\"""") &gt; 0 &amp;&amp; line(""'\"""") &lt;= line(""$"") &amp;&amp; &amp;filetype != ""gitcommit"" |
        \ execute(""normal `\"""") |
    \ endif
</code></pre>

<p><code>BufReadPost</code> gets run when starting to edit a bufffer. The <code>""</code> mark is the cursor position when last exited the file (as remembered by viminfo). We first check if this is set higher than 0, and lower than the number of lines in the file, before jumping to it.</p>

<p>We <em>don't</em> do this if the filetype is gitcommit, since I find this annoying (I always want it to start at the first line).</p>

<p>You need to keep <code>viminfo</code> file for all of this, which is enabled by default.</p>
","111"
"How to repeat a mapping when keeping key pressed","1239","","<p>I have in my <code>.vimrc</code> some simple mappings to resize split windows easily:</p>

<pre><code>noremap &lt;Leader&gt;&lt;UP&gt;    &lt;C-w&gt;+
noremap &lt;Leader&gt;&lt;DOWN&gt;  &lt;C-w&gt;-
</code></pre>

<p>That works pretty fine but when I want for example resize the window of 10 lines I have to press and release <kbd>Leader</kbd> +<kbd>UP</kbd> 10 times.</p>

<p><strong>How can I repeat this mapping while the key are pressed?</strong> What I want is when I press <kbd>Leader</kbd> +<kbd>UP</kbd> the mapping will be applied once then after a short duration it will be applied once again and so one while I hold the keys.</p>

<p><em>note:</em> I know it is possible to prefix <code>&lt;C-w&gt;+</code> with a count and I could hardcode it in the mapping or simply input a count before using the mapping but that's not how I want to do it.</p>

<p><em>note2:</em> I also know that a popular mapping to resize windows is to use <kbd>+</kbd> and <kbd>-</kbd> keys which are easier to press several time but I don't want to use those keys to do that neither.</p>
","<p>You could try entering a ... Vim <a href=""https://github.com/kana/vim-submode"">submode</a>! For your case, something like this:</p>

<pre><code>call submode#enter_with('grow/shrink', 'n', '', '&lt;leader&gt;&lt;up&gt;', '&lt;C-w&gt;+')
call submode#enter_with('grow/shrink', 'n', '', '&lt;leader&gt;&lt;down&gt;', '&lt;C-w&gt;-')
call submode#map('grow/shrink', 'n', '', '&lt;down&gt;', '&lt;C-w&gt;-')
call submode#map('grow/shrink', 'n', '', '&lt;up&gt;', '&lt;C-w&gt;+')
</code></pre>

<p>This means, you enter the submode with <code>Leader-Up</code> or <code>Leader-Down</code> (which will also grow/shrink the window once) and then - you'll only have to press <code>Up</code> or <code>Down</code> to grow/shrink the window, until you exit the submode.</p>

<p>See also the help, for timeout issues, but, to disable it:</p>

<pre><code>""disable submode timeouts:
let g:submode_timeout = 0
</code></pre>

<p>... which means you'll stay in that submode indefinitely, until you press a key other than <code>Up</code> or <code>Down</code>, or until you hit <code>Esc</code>.</p>

<p>Aaand, the next useful tip I'd recommend:</p>

<pre><code>"" don't consume submode-leaving key
let g:submode_keep_leaving_key = 1
</code></pre>

<p>... which allows you to move directly to your next commands, when pressing a different key. For instance, pressing <code>:</code> will both leave the submode <em>and</em> open the command line.</p>
","3633"
"Why vim cannot expand wildcards from the external command?","1238","","<p>The following command works as expected within vim:</p>

<pre><code>:args `find . -type f`
</code></pre>

<p>as well as this one (with wildcard):</p>

<pre><code>:args `find . -name \*.inc`
</code></pre>

<p>However when I run the following:</p>

<pre><code>:args `find . -type f -not -path ""*/\.*""`
</code></pre>

<p>I've the error:</p>

<blockquote>
  <p>E79: Cannot expand wildcards</p>
  
  <p>""`find . -type f -not -path"" [New File]</p>
</blockquote>

<p>It works from the command line as expected:</p>

<pre><code>$ find . -type f -not -path ""*/\.*""
</code></pre>

<p>Basically the extra <code>-not -path ""*/\.*""</code> means to ignore all the hidden files starting with dot, such as git repository files.</p>

<p>What I'm doing wrong? Do some characters needs to be escaped (which one)?</p>
","<p>You were close. Enclose the path pattern in single quotes instead of double quotes for the find command like so:</p>

<pre><code>args `find . -type f -not -path '*/\.*'`
</code></pre>

<p>By the way, a handy way to ignore hidden files is to use <code>:args **</code>. But this will include folders too.</p>

<p>I'm not completely sure why you need to enclose it in single quotes, I believe that Vim will evaluate the special characters inside double quotes. See <a href=""http://vimhelp.appspot.com/eval.txt.html#expr-quote""><code>:help expr-quote</code></a> and <a href=""http://vimhelp.appspot.com/eval.txt.html#literal-string""><code>:help literal-string</code></a>. A single quote will treat the pattern as a literal string and prevent Vim evaluating special characters inside the quote. </p>

<p>In this case, since <code>\.</code> is one of the special characters Vim will evaluate in a double quoted string, I believe this was the culprit.</p>
","2999"
"Why won't vim source my vimrc?","1233","","<p>I am root on the machine, and have my .vimrc at <code>/root/.vimrc</code>.  Vim ignores this, even though </p>

<pre><code># echo $HOME
/root
</code></pre>

<p>If I do</p>

<pre><code># vim -u /root/.vimrc some-file-to-edit
</code></pre>

<p>vim still ignores it.  Setting <code>export MYVIMRC=root/.vimrc</code> has no effect.</p>

<p>Vim sources my file without problems if I start vim and type <code>:source /root/.vimrc</code>.</p>

<p>Note <code>VIMINIT</code> is unset.</p>

<p><strong>What could be preventing vim from sourcing my .vimrc when starting up?</strong></p>

<p>I'm happy to supply any other information that may be helpful, just let me know what.</p>

<hr>

<p><strong>EDIT 1: excerpt from running <code>vim -V filename</code>:</strong></p>

<pre><code>...
finished sourcing $VIM/vimrc
chdir(/root)
fchdir() to previous dir 
sourcing ""$HOME/.vimrc""
Searching for ""filetype.vim"" in ""/root/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/root/.vim/after""
Searching for ""/root/.vim/filetype.vim""
...
</code></pre>

<p>The full output is long, so this is just an excerpt to show the line that verifies sourcing of <code>/root/.vimrc</code>.</p>

<hr>

<p><strong>EDIT 2: output from running <code>:scriptnames</code> after vim normally*</strong></p>

<pre><code>  1: /usr/share/vim/vimrc
  2: /usr/share/vim/vim74/debian.vim
  3: /usr/share/vim/vim74/syntax/syntax.vim
  4: /usr/share/vim/vim74/syntax/synload.vim
  5: /usr/share/vim/vim74/syntax/syncolor.vim
  6: /usr/share/vim/vim74/filetype.vim
  7: ~/.vimrc
  8: /usr/share/vim/vim74/indent.vim
  9: /usr/share/vim/vim74/ftplugin.vim
 10: /usr/share/vim/vim74/syntax/nosyntax.vim
 11: /usr/share/vim/vim74/plugin/getscriptPlugin.vim
 12: /usr/share/vim/vim74/plugin/gzip.vim
 13: /usr/share/vim/vim74/plugin/matchparen.vim
 14: /usr/share/vim/vim74/plugin/netrwPlugin.vim
 15: /usr/share/vim/vim74/plugin/rrhelper.vim
 16: /usr/share/vim/vim74/plugin/spellfile.vim
 17: /usr/share/vim/vim74/plugin/tarPlugin.vim
 18: /usr/share/vim/vim74/plugin/tohtml.vim
 19: /usr/share/vim/vim74/plugin/vimballPlugin.vim
 20: /usr/share/vim/vim74/plugin/zipPlugin.vim
 21: /usr/share/vim/vim74/indent/python.vim
 22: /usr/share/vim/vim74/ftplugin/python.vim
 23: /usr/share/vim/vim74/syntax/python.vim
</code></pre>

<p>Again, seems to be sourcing <code>/root/.vimrc</code> (item 7).  Soo... line 8 makes me suspicious: my problem is that the indent settings in my vimrc aren't reflected.  Maybe they are being superceeded...</p>

<hr>

<p><strong>EDIT 3: Placing my file in <code>~/.vim/after/...</code></strong></p>

<p>Moving my file to the following locations had no effect on the output of <code>scriptnames</code>:</p>

<ul>
<li><code>~/.vim/after/indent.vim</code></li>
<li><code>~/.vim/after/indent.vim/myscript.vim</code></li>
<li><code>~/.vim/after/indent/myscript.vim</code> </li>
<li><code>~/.vim/after/syntax/myscript.vim</code></li>
<li><code>~/.vim/after/indent/myscript.vim</code></li>
<li><code>~/.vim/after/myscript.vim</code></li>
</ul>

<p>And, while moving my to </p>

<ul>
<li><code>~/.vim/after/plugin/.vimrc</code> </li>
</ul>

<p>did change the output of <code>:scriptnames</code>, causing my file to be sourced after item 20 (see above), it seems my indent settings are still getting overridden (probably by item 21).</p>

<p>Use of the <code>after</code> directory doesn't work how I imagined (see my list of attempts).  Only <code>after/plugins/</code> seems to be considered.</p>

<p>Is there a way to ensure that the file is sourced after everything?</p>
","<p>Here is what worked for me:</p>

<p>First opening vim normally and doing <code>:scriptnames</code> showed that, in fact, my <code>~/.vimrc</code> <em>was</em> sourced.  Other scripts were just overridding my indent settings.</p>

<p>Moving just the lines pertaining to indentation from my <code>~/.vimrc</code> into a new file at <code>~/.vim/after/ftplugin/python.vim</code> solved the problem.  The filename is crucial, and it is only executed when reading python files.  </p>

<p>Alternatively put the file in <code>~/.vim/after/ftplugin/python/some-name.vim</code>.</p>
","7526"
"How to save a file for which I have no write permissions?","1226","","<p>Sometimes it happens that I open a file and make some modifications as my own
user, without noticing or ""forgetting"" to noticing the <code>[read-only]</code> warning in
the status line (ie. some random <code>/etc</code> config file like <code>/etc/resolv.conf</code>).</p>

<p><code>:w!</code> obviously fails in this case because my user has no write permission
anyway.  So I have to <code>:w /home/filename</code>, exit and <code>sudo mv ...</code>, very
uncomfortable.</p>

<p>Is there a way so that I escalate temporarily to root to be able to save the
file currently opened? (given I am in <code>sudoers</code> or/and I can <code>su</code> directly)?</p>
","<p>The trick is to use an external call to <code>sudo</code>:</p>

<pre><code>:w !sudo tee %
</code></pre>

<p>How this works:</p>

<ul>
<li><code>:w !&lt;command&gt;</code> executes <code>&lt;command&gt;</code> with the contents of the buffer as stdin.</li>
<li><code>tee</code> duplicates stdin to a file &amp; stdout; <code>%</code> expands to the current filename..</li>
<li>You prefix this with <code>sudo</code> for root permissions.</li>
</ul>

<p>You're not <em>really</em> saving the file with Vim, rather, you're calling an external program to overwrite the contents of the file you're editing. This is why you will get a warning from Vim:</p>

<pre><code>W12: Warning: File ""xxx"" has changed and the buffer was changed in Vim as well
See "":help W12"" for more info.
[O]K, (L)oad File: 
</code></pre>

<p>You could turn this into a function:</p>

<pre><code>fun! SuperWrite()
        write !sudo tee %
        "" Or with :silent (but that doesn't seem to work for everyone)
        ""silent write !sudo tee %
        edit!
endfun
</code></pre>

<p>And keybind:</p>

<pre><code>nnoremap &lt;Leader&gt;w! :call SuperWrite()&lt;CR&gt;
</code></pre>

<p>With <code>su</code>, only the root user can use <code>-c</code> to immediately execute a command. I don't think you can use <code>su</code> to do this, but perhaps there is a trick I am unaware of...</p>
","476"
"Neovim python3 support not working","1226","","<p>I have problems getting python3 support working in neovim. 
I have followed the instructions in <code>:help nvim-python</code>, but <code>:echo has('python3')</code> returns 0.</p>

<p>I have tried installing the neovim python modules both from git and pip, and also the AUR on arch linux, but <code>:echo has('python3')</code> still returns 0.</p>

<p>I tried setting the path to python manually in neovim, and I also tried rebuilding neovim from source from github after installing python modules, but still nothing.</p>

<p>Edit: I found out clipboardprovider didn't work either.</p>
","<p>Okay, I found out there was an error in my init.vim. I was overwriting the runtimepath instead of appending to it. </p>

<p>I had this line:</p>

<pre><code>set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
</code></pre>

<p>Change to this:</p>

<pre><code>set runtimepath+=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
</code></pre>

<p>And then it works.</p>
","6398"
"if else endif oneliner","1222","","<p>I have this oneliner in my <code>vimrc</code> but it does not work :</p>

<pre><code>if has(""patch-7.4.710"") | set listchars+=space:· else | set listchars+=trail:· | endif
</code></pre>

<p>VIM says :</p>

<pre><code>E518: Unknown option: else
</code></pre>

<p>Can you help me ?</p>
","<p>You need to put another <code>|</code> before <code>else</code> otherwise vim will think your command is <code>set listchars+=space:· else</code> instead of two separate commands. That's why you got the error message: <code>else</code> is an unknown option for the command <code>set</code>.</p>

<p>The correct syntax is the following:</p>

<pre><code>if has(""patch-7.4.710"") | set listchars+=space:· | else | set listchars+=trail:· | endif
</code></pre>
","13536"
"Is Vim's default 'path' option redundant?","1218","","<p>From Vim's help document (see: <code>:help 'path'</code>):</p>

<blockquote>
  <p>'path' String(default on Unix: ""<code>.,/usr/include,,</code>"")</p>
  
  <p>-To search relative to the directory of the current file, use:</p>

<pre><code>:set path=.
</code></pre>
  
  <p>-To search in the current directory use an empty string between two commas:</p>

<pre><code>:set path=,,
</code></pre>
</blockquote>

<p>It seems that <code>.</code> and <code>,,</code> have no difference in  'path' option. They both mean the current directory.</p>

<p>I cannot understand why we need to put both <code>.</code> and <code>,,</code> to the path option.  What is the difference between <code>:set path=.</code> and <code>:set path=,,</code>?</p>
","<p>""Current directory"" and ""directory of the current file"" are two different things.</p>

<p>The ""current directory"" is by default the directory in which you started Vim. You ask Vim what it is with <code>:pwd</code> and change it with <code>:cd</code> or <code>:lcd</code> or by setting the <code>autochdir</code> option. If you never change it, it will stay the same until you close the current session.</p>

<p>The ""directory of the current file"" is exactly what it claims to be. If the current file is in the ""current directory"", both have the same value. If the current file is in another directory, they have different values.</p>

<p>For <code>path</code> to be useful, it is necessary to address those two scenarios with <code>.</code> and <code>,,</code>.</p>

<p>Example:</p>

<pre><code>$ cd /foo/bar/baz
$ vim filename
:pwd                   --&gt;  /foo/bar/baz
:echo expand(""%:p:h"")  --&gt;  /foo/bar/baz
:e ../file
:pwd                   --&gt;  /foo/bar/baz
:echo expand(""%:p:h"")  --&gt;  /foo/bar
</code></pre>
","5999"
"What is the functional difference between :nohlsearch and :set nohlsearch?","1214","","<p>I noticed that when I use <code>:nohlsearch</code> that it does not actually do the same thing as <code>:set nohlsearch</code>. </p>

<p>In particular, the <code>hlsearch</code> setting is not actually switched off (which is what <code>:set hlsearch</code>) accomplishes. </p>

<p>To demonstrate what I mean: </p>

<pre><code>:set hlsearch
:nohlsearch
:echo &amp;hlsearch
</code></pre>

<p>This prints <code>1</code> (<strong>hlsearch is still set!</strong>)</p>

<pre><code>:set hlsearch
:set nohlsearch
:echo &amp;hlsearch
</code></pre>

<p>This prints <code>0</code> because we switched hlsearch off using the standard way to switch a setting off in vim.</p>

<p>So I'm sort of wondering because there has to be some actual reason for the <code>:nohlsearch</code> ex command to exist. </p>

<p>The reason why I care is that I now have a need in my vim scripting to test whether the search highlight is active, and since I was using <code>:nohlsearch</code> instead of "":set nohlsearch"" in my other scripting, my <code>&amp;hlsearch</code> test always returns <code>1</code>. So I am wondering what I'm changing by no longer using the <code>nohlsearch</code> ex command.</p>
","<p>From <code>:h :nohlsearch</code></p>

<pre>
                                                        :noh :nohlsearch
:noh[lsearch]           Stop the highlighting for the 'hlsearch' option.  It
                        is automatically turned back on when using a search
                        command, or setting the 'hlsearch' option.
                        This command doesn't work in an autocommand, because
                        the highlighting state is saved and restored when
                        executing autocommands autocmd-searchpat.
                        Same thing for when invoking a user function.
</pre>

<p>The key point is that it automatically turns the highlighting back on when you start a new search. <code>:set nohlsearch</code> actually turns <code>hlsearch</code> off, which means the next time you search for something no highlighting occurs.</p>

<p>Example: Assume <code>hlsearch</code> is on, If you are currently searching for ""hello"" in a buffer, all ""hello""s will be highlighted . If you use <code>:nohlsearch</code> nothing will be highlighted. But if you then search for ""world"", all ""world""s will be highlighted. If you had used <code>set nohlsearch</code> instead ""world"" would not be highlighted.</p>

<hr>

<p>Also note that this command does basically nothing inside a user function. For example,</p>

<pre><code>function! NoHlsearch()
    nohlsearch
endfunction
</code></pre>

<p>has no visible effect when run.</p>

<hr>

<p>To see if hlsearch is actually active you want to check the variable <code>v:hlsearch</code>. When <code>v:hlsearch = 0</code> highlighting is off, and when <code>v:hlsearch = 1</code> highlighting is on. You should probably make sure the <code>&amp;hlsearch = 1</code> before checking <code>v:hlsearch</code>.</p>

<p>From <code>:h v:hlsearch</code></p>

<pre>
                                        v:hlsearch hlsearch-variable
v:hlsearch      Variable that determines whether search highlighting is on.
                Makes sense only if 'hlsearch' is enabled which requires
                +extra_search. Setting this variable to zero acts the like
                :nohlsearch command, setting it to one acts like
                        let &hlsearch = &hlsearch
</pre>
","3149"
"Disable <Esc> but keep <C-[>","1210","","<p>For switching back from Insert mode I'm used to <code>&lt;Esc&gt;</code>. Now I'm looking to retrain myself to <code>&lt;C-[&gt;</code> instead of  <code>&lt;Esc&gt;</code>. For that i need to disable <code>&lt;Esc&gt;</code> to help with the retraining.</p>

<p>The problems is </p>

<pre><code>:inoremap &lt;Esc&gt; &lt;Nop&gt;
</code></pre>

<p>also disables <code>&lt;C-[&gt;</code>. For vim they seem to be the same thing. </p>

<p>Is there any way to disable one without the other?</p>
","<p>First, a bit of history. In the old days, when you typed some text on a <a href=""http://en.wikipedia.org/wiki/Teletype_Corporation"" rel=""noreferrer"">terminal</a>, each key sent a character to the application. As the machines that the terminal was connected to became more powerful, terminals standardized on a <a href=""http://en.wikipedia.org/wiki/Control_key#History"" rel=""noreferrer"">control key</a>, which would send some special characters, which were not printed but had some kind of function. The eventually triumphant character set was <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""noreferrer"">ASCII</a>, with 128 characters out of which 32 are control characters. Pressing <kbd>Ctrl</kbd> together with a letter or other symbol written 10xxxxx₂ (binary notation) sends the control character whose code is 00xxxxx₂, e.g. <kbd>Ctrl</kbd>+<kbd>[</kbd> sends character number 27₁₀ = 0011011₂ because <code>[</code> is 91₁₀ = 1011011₂.</p>

<p>A few function keys on terminals sent control characters:</p>

<ul>
<li><kbd>Backspace</kbd> = <code>Ctrl-H</code> (BS = BackSpace)¹</li>
<li><kbd>Tab</kbd> = <code>Ctrl-I</code> (HT = Horizontal Tab)</li>
<li><kbd>Linefeed</kbd> = <code>Ctrl-J</code> (LF = Line Feed) (few terminals ever had this key)</li>
<li><kbd>Return</kbd> or <kbd>Enter</kbd> = <code>Ctrl-M</code> (CR = Carriage Return)</li>
<li><kbd>Escape</kbd> = <code>Ctrl-[</code> (ESC = Escape)</li>
</ul>

<p>When terminals had more function keys, there weren't enough control characters to represent them all. So they sent <em>sequences</em> of character, and the universal convention is that these character sequences begin with the escape character, <code>Ctrl-[</code>.</p>

<p>As time went by, hardware terminals became rarer and rarer; nowadays there are <a href=""https://unix.stackexchange.com/questions/116629/how-do-keyboard-input-and-text-output-work"">many levels of translation between the keyboard and the application</a>. The limitation in numbers of available characters and the hard-coded correspondences between certain key combinations and certain control characters is no longer relevant. However, applications have remained compatible with existing terminals, and terminals have remained compatible with existing applications, which made it difficult to change anything.</p>

<p>So even today, on Unix-like systems, applications running in a terminal emulator receive the character <code>Ctrl-I</code> when the user presses the <kbd>Tab</kbd> key, the character <code>Ctrl-[</code> when the user presses <kbd>Esc</kbd>, etc. If Vim is running in a Unix terminal, it can't distinguish between <code>&lt;Esc&gt;</code> and <code>&lt;Ctrl-[&gt;</code> because the terminal sends the same information.</p>

<p>Vim running in other environments doesn't have this limitation, so in principle it would be possible for them to send different information. Given that Vim uses the <code>Ctrl-[</code> character to represent <code>&lt;Esc&gt;</code> in a lot of places, changing that would be impractical; instead <kbd>Ctrl</kbd>+<kbd>[</kbd> could be made to send a different input event.</p>

<p>I'm not aware of any version of Vim itself that does differentiate between <kbd>Esc</kbd> and <kbd>Ctrl</kbd>+<kbd>[</kbd> (but it isn't like I'd ever used any). Gvim, for one, seems to <a href=""https://superuser.com/questions/770068/in-vim-how-can-i-remap-tab-without-also-remapping-ctrli"">emulate a garden variety terminal</a>.</p>

<p>Ironically, your best bet may be Vim running in a terminal emulator. Some terminal emulators allow you to customize escape sequences sent by keys and keychords. So you might arrange for <kbd>Ctrl</kbd>+<kbd>[</kbd> to send not the ␛ (<code>Ctrl-[</code>) character, but some escape sequence. Xterm, the “reference” terminal emulator for Unix-like systems, supports two such schemes. For example:</p>

<ul>
<li><kbd>Esc</kbd> sends <code>␛</code> and <kbd>Tab</kbd> sends <code>␉</code>, in all configurations.</li>
<li>With <code>?.VT100.modifyOtherKeys: 0</code> (default) or <code>?.VT100.modifyOtherKeys: 1</code>, <kbd>Ctrl</kbd>+<kbd>[</kbd> sends <code>␛</code> and <kbd>Ctrl</kbd>+<kbd>I</kbd> sends <code>␉</code>. <code>?.VT100.modifyOtherKeys: 1</code> only affects meta combinations and control combinations that lack an ASCII character.</li>
<li>With <code>?.VT100.modifyOtherKeys: 2</code> and <code>?.VT100.formatOtherKeys: 0</code> (default),  <kbd>Ctrl</kbd>+<kbd>[</kbd> sends <code>␛[27;5;91~</code> and <kbd>Ctrl</kbd>+<kbd>I</kbd> sends <code>␛[27;5;105~</code>.</li>
<li>With <code>?.VT100.modifyOtherKeys: 2</code> and <code>?.VT100.formatOtherKeys: 1</code>, <kbd>Ctrl</kbd>+<kbd>[</kbd> sends <code>␛[91;5u</code> and <kbd>Ctrl</kbd>+<kbd>I</kbd> sends <code>␛[105;5u</code>.</li>
</ul>

<p>Support can be turned on by setting the <code>modifyOtherKeys</code> <a href=""http://invisible-island.net/xterm/manpage/xterm.html#h2-RESOURCES"" rel=""noreferrer"">resource</a> when starting xterm (and <code>formatOtherKeys</code> to select between the two schemes), or it can be turned on and off dynamically by the application.</p>

<p>Vim has no built-in support that I know of. You can write your own bindings for these escape sequences. It may be possible to get Vim to automatically set the terminal in the <code>modifyOtherKeys</code> mode by feeding it a modified terminal definition, but doing so is beyond the scope of this answer.</p>

<p>Neovim <a href=""https://github.com/neovim/neovim/issues/176"" rel=""noreferrer"">has built-in support for one of the variants</a>. As far as I understand, it doesn't switch support on if the terminal supports it, that's up to the user to do.</p>

<p>¹ Increasingly and most commonly nowadays, <kbd>Backspace</kbd> sends character 127.</p>
","3570"
"How to toggle comments with ctrl+/?","1203","","<p>I'm coming from Atom, and with that I can highlight multiple lines and hit <kbd>ctrl</kbd><kbd>/</kbd> and it'll toggle comments for those lines. I how easy this is.</p>

<p>Can I do something similar using <kbd>ctrl</kbd><kbd>/</kbd> with vim? I don't want to be doing <kbd>ctrl</kbd><kbd>v</kbd>, highlight rows, <code>//</code>, escape. That's too much effort.</p>
","<p>It all depends on how extensive you want it to be. What type of files are you editing? I have the following in my <code>.vimrc</code> that works with python files:</p>

<pre><code>let Comment='#'

xnoremap # :norm 0i&lt;C-r&gt;=Comment&lt;CR&gt;&lt;CR&gt;
xnoremap &amp; :norm ^&lt;C-r&gt;=len(Comment)&lt;CR&gt;x&lt;CR&gt;
</code></pre>

<p>This works well, but you have to manually setup each filetype, so a little bit of a pain.</p>

<p>Would a plugin work for you? <a href=""https://github.com/tpope/vim-commentary"">tpope/commentary</a> is a very useful and popular plugin for comments. It has this mapping:</p>

<pre><code>                                                *v_gc*
{Visual}gc              Comment or uncomment the highlighted lines.
</code></pre>

<p>You could easily add </p>

<pre><code>xnoremap &lt;C-\&gt; gc
</code></pre>

<p>to your vimrc, and this would do what exactly what you describe.</p>

<p>As well as many other useful mappings so you don't need to even enter visual mode. For exampe:</p>

<pre><code>gc}                     Comment or uncomment a paragraph
</code></pre>
","8129"
"Open quickfix in vertical split","1202","","<p>If I use the command <code>:copen</code> the quickfix buffer will be opened as a horizontal split.</p>

<p>Is there a way (a command) to open it in a vertical split instead?</p>
","<p>Prefixing your command with <a href=""https://vimhelp.appspot.com/windows.txt.html#%3Avert""><code>:vert</code></a> modifies it to use a vertical split:</p>

<pre><code>:vert copen
</code></pre>
","2573"
"How do I turn Vi colors off in Ubuntu Linux 14.04","1196","","<p>How do I turn vi colors off? I was using vim-tiny on on Ubuntu 14.04. Installed vim-nox. Version is version 7.4.52. Once I installed that, I got all these syntax colors by default. I have my Terminal set to a black background with bright green text. Now when I use vi with the colors, some of the text is unreadable against the dark background. I would rather just turn the colors off. How do I do this?</p>
","<p>You can use:</p>

<pre><code>:set t_Co=0
</code></pre>

<p>This will tell Vim that you're not using a colour terminal. The difference with using <code>:syntax off</code> is that this will still enable <em>some</em> syntax highlighting features with bold, underlined, and ""reverse video"".</p>
","7162"
"Vimscript save file","1191","","<p>I am making a function to compile and run my application. I have been able to get it to run the shell command however I cannot get it to save the file.</p>

<p>Here is my code so far.</p>

<p>Try 1)</p>

<pre><code>function Compile_and_run(game, major, minor)
    :w &lt;CR&gt;
    execute '!_compile' shellescape(a:game) shellescape(a:major) shellescape(a:minor)
endfunction
</code></pre>

<p>Try 2)</p>

<pre><code>function Compile_and_run(game, major, minor)
    execute "":w &lt;CR&gt;""
    execute '!_compile' shellescape(a:game) shellescape(a:major) shellescape(a:minor)
endfunction
</code></pre>

<p>What is it that Im doing wrong? How would I get this function to save before the <code>execute '!_compile'</code> command?</p>
","<p>Something like <code>:w&lt;CR&gt;</code> makes sense for creating a Normal mode mapping. In Normal mode, you need the <code>:</code> to enter Command-line mode, and the <code>&lt;CR&gt;</code> to execute the command and return to Normal mode.</p>

<h2>Writing VimScript</h2>

<p>Here, since you're writing VimScript, every line is interpreted as if it's in Command-line mode already. You don't need to lead with a <code>:</code> (though it's harmless if you do), and you don't need the <code>&lt;CR&gt;</code> to execute the command (and in this case, it's incorrect to use it).</p>

<p>You only need <code>write</code> (or <code>w</code> for short) in this context.</p>

<pre><code>function Compile_and_run(game, major, minor)
    write
    execute '!_compile' shellescape(a:game) shellescape(a:major) shellescape(a:minor)
endfunction
</code></pre>

<p>Take a look at <a href=""http://vimhelp.appspot.com/usr_41.txt.html#vim-script-intro""><code>:help vim-script-intro</code></a> to learn more.</p>
","2409"
"NERDTree How to open a file and automatically close the explorer buffer","1190","","<p>When using <a href=""https://github.com/scrooloose/nerdtree"">NERDTree plugin</a> the default behavior is to open a new file and keeping the NERDTree buffer open. What I want to do is to keep this default behavior but also overriding it when I want so the NERDTree buffer will be closed after I opened a file.</p>

<p>I know I can use <code>let NERDTreeQuitOnOpen=1</code> to automatically close the NERDTree buffer when I open a new file but this option totally overrides the default behavior (which is not what I want).</p>

<p>Ideally I would like to know if there is a built-in feature in NERDTree to do what I want. (I've been searching but didn't find anything like that so I suppose it doesn't exists actually)</p>

<p>And if that doesn't exists I had two ideas: </p>

<ul>
<li><p>First one is to create a function which would set <code>NERDTreeQuitOnOpen</code> to <code>1</code>, open the file and then set again <code>NERDTreeQuitOnOpen</code> to <code>0</code>.</p></li>
<li><p>Second one is to create the following mapping: <code>map d&lt;CR&gt; &lt;CR&gt; :NERDTree &lt;CR&gt; :bd&lt;CR&gt;</code> which opens the file (first <code>&lt;CR&gt;</code>), goes back to NERDTree buffer (<code>:NERDTree &lt;CR&gt;</code>) and close this buffer (<code>:bd &lt;CR&gt;</code>). I should improve it so the mapping only exists in the NERDTree buffer but I feel that's a pretty ugly solution and I thik it can be improved. </p></li>
</ul>

<p>Which idea would be the best and why? Or is there an even better option?</p>
","<p>As the question doesn't seem to generate a lot of answer I'll just answer it with the suggestion of @muru which is what I have used for a week before I switched to the netrw explorer. (Of course if a better option answer comes up I'll gladly unmark mine as accepted and accept the new one)</p>

<p>The idea is to use the folowing mapping:</p>

<pre><code>map d&lt;cr&gt; &lt;cr&gt;:NERDTreeClose&lt;cr&gt;
</code></pre>

<p>Which opens the file as it is done usually and then calls the function which close the NERDTree buffer no matter where the cursor is.</p>

<p><strong>EDIT:</strong> I recently switched back to NERDTree and reworked my solution: The mapping I suggested before was working but as it existed in every buffer I had to double press <kbd>d</kbd> each time I wanted to delete something which is pretty annoying. <em>(Maybe I could have changed the <code>timeout</code> settings but I like the way it is currently set for me, also I didn't want to map it on another key combination).</em></p>

<p>So I replaced my first solution by the following lines to my <code>.vimrc</code>:</p>

<pre><code>autocmd BufEnter NERD_tree_* nmap  d&lt;CR&gt; &lt;CR&gt; :NERDTreeToggle &lt;CR&gt;
autocmd BufLeave NERD_tree_* unmap d&lt;CR&gt;
</code></pre>

<p>This way the mapping is created only in the <code>NERDTree</code> buffers and it doesn't mess with my workflow in the other buffers.</p>
","3545"
"Vim Powerline is at top of window instead of bottom","1188","","<p>I just installed Powerline for the first time and the Powerline bar shows up at the top of my Vim window instead of at the bottom. </p>

<p>This is both on MacVim and on terminal Vim. </p>

<p>Running OS X 10.10 and iTerm2, with Vim version 7.4.258. </p>

<p>Powerline was installed with Vundle as such: </p>

<pre><code>Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
</code></pre>

<p><img src=""https://i.stack.imgur.com/0X0z2.png"" alt=""Powerline at top instead of bottom. Works fine otherwise. ""></p>
","<p>That is not Powerline, that is Airline. The plugin has a feature that displays a fake tabline at the top of the screen and that's what you see.</p>

<p>How to enable that feature is probably explained somewhere in <code>:help airline</code>, which you almost certainly failed to read.</p>

<p>Also, you need <code>set laststatus=2</code> in your <code>vimrc</code> to enable the <em>actual</em> statusline for all windows.</p>

<hr>

<p>Now, for what it's worth, all the *line plugins are worthless gimmicks that obviously go hand in hand with the most gimmicky colorscheme ever. You should get rid of the cruft, read <code>:h 'statusline'</code> and go back to work.</p>
","2720"
"Regex in Vi: How does one use character classes inside groups? (e.g. [\s\w])","1185","","<p>In Vim, the character class <code>\s</code> matches any whitespace character. When I'm using those special characters in groups e.g. <code>[\s\w]</code> it does not match any single whitespace or word character, it does match <code>s</code> or <code>w</code>.</p>

<p>How does one use character classes inside groups?</p>
","<p>That's not a group, it's a range, and in Vim you can't use character classes (although it's possible in other regex implementations, e.g. in <a href=""https://stackoverflow.com/questions/13142440/python-regex-including-whitespace-inside-character-range"">python</a>). You'll have to use an <a href=""http://vimregex.com/#alternations"" rel=""nofollow noreferrer"">alternation</a> instead:</p>

<pre><code>/\(\w\|\s\)
</code></pre>

<p>or:</p>

<pre><code>/\v(\s|\w)
</code></pre>

<p>(or, the <a href=""https://vi.stackexchange.com/a/4505/1111"">solution proposed</a> by <a href=""https://vi.stackexchange.com/users/2942/peter-lewerin"">Peter Lewerin</a>).</p>
","4117"
"How can I convert words to camelCase in a macro?","1181","","<p>I have a list of words, like this:</p>

<pre><code>these are
some
words that I want
to convert to
camel case
</code></pre>

<p>I need a way to turn, for example, <code>camel case</code> into <code>camelCase</code> within a macro (or a way to turn every line of a visual line selection into camel case).</p>

<p>I could use something like <code>wgUlhx</code> as many times as necessary, but the problem is that this doesn't work for words of varying lengths (so, for example, <code>wgUlhxwgUlhx</code> would work for <code>convert this please</code> but not for <code>convert these pretty please</code>).</p>

<p>The desired output for the above lines would be</p>

<pre><code>theseAre
some
wordsThatIWant
toConvertTo
camelCase
</code></pre>

<p>Is there any way to automate this?</p>
","<h2>A One Liner</h2>

<p>I found a simple regular expression replacement (assuming 'magic' is set):</p>

<pre><code>:s/ \([a-zA-Z]\)/\u\1/g
</code></pre>

<p>This match any single letter after a space, saving the letter. Then, it replaces it with the saved letter made upper case (<code>\u</code> = upper case, <code>\1</code> = first saved match), for every match in the line.</p>

<p>Apply over the entire file by putting a <code>%</code> between <code>:</code> and <code>s</code>.</p>

<p>The downside to this solution is that it is linewise (which works for your examples), but would fall short if you only wanted to camel case a few words out of many within a line.</p>

<h2>A fuller solution</h2>

<pre><code>map &lt;leader&gt;g~ :set opfunc=MyCamelCase&lt;CR&gt;g@
function! MyCamelCase(type, ...)
  let searchsave=@/
    silent s/\%&gt;'\[ \([a-zA-Z]\)\%&lt;']/\u\1/g
  let @/=searchsave
 endfunction
</code></pre>

<p>This creates a new operator that can operate on a motion. If you have <code>&lt;leader&gt;</code> as <code>\</code>, then given the following text (with <code>|</code> as the cursor):</p>

<pre><code>This is some |example text to work with.
</code></pre>

<p>Typing <code>\g~3w</code> gives</p>

<pre><code>This is some exampleTextTo work with.
</code></pre>

<p>That is, we camel cased over 3 words.</p>

<p>Description of that substitution:</p>

<p><code>s/</code> starts the substitution.<br>
<code>\%&gt;'\[</code> is a bit painful. The <code>\%&gt;'m</code> says to match to the right of a mark. We want mark <code>[</code>, but that also has to be escaped in this pattern. So, this starts the match after the motion given to the operator.<br>
<code>\([a-zA-Z\)</code> is the same as from the one-liner above.<br>
<code>\%&lt;']</code> this is the other end, matching before the end of the motion.<br>
<code>/\u\1/g</code> is the replacement from the one-liner above.</p>
","1888"
"How to remap gg to g?","1177","","<p>I don't use any <code>g combinations</code> except of <code>gg</code>, in normal mode. How can I make it so that pressing <code>g</code> once will be enough?</p>

<p><code>nnoremap g gg</code> makes it wait for 3 seconds or so for a continuation of the command. Unmapping <code>g</code> beforehand doesn't work either, because I can't map to <code>gg</code> if I unmap <code>g</code>. Should I unmap every single combination that isn't <code>gg</code>?</p>
","<p>Assuming you have a newer version of Vim (7.3.1261+) you can use <code>&lt;nowait&gt;</code></p>

<pre><code>nnoremap &lt;nowait&gt; g gg
</code></pre>

<p>Although, I can not stress the usefulness of some of the <code>g</code> mappings. Here is a short list of useful <code>g</code> mappings:</p>

<ul>
<li><code>gE</code> - backwards end of word motion</li>
<li><code>g_</code> - to the last non-blank character of a line</li>
<li><code>gt</code> &amp; <code>gT</code> - tab navigation</li>
<li><code>g,</code> &amp; <code>g;</code> - back and forth through the change list</li>
<li><code>gu</code> &amp; <code>gU</code> - case changing</li>
<li><code>gn</code> - visually select current pattern</li>
<li><code>gv</code> - reselect previous visual selection</li>
<li><code>gi</code> - start insert mode in the same position Insert mode was last stopped</li>
<li><code>gf</code> - go to file under cursor (My personal favorite)</li>
</ul>

<p>See <code>:h g</code> for a list of all <code>g</code> mappings.</p>

<p>Personally I would just learn to use <code>gg</code> as it is a good habit and less is not known to be a good Vi/Vim emulator.</p>

<p>For more help see:</p>

<pre><code>:h g
:h :map-nowait
</code></pre>
","5690"
"Why doesn't Vim regex allow more than 9 capture groups?","1177","","<p>From <a href=""http://vimhelp.appspot.com/pattern.txt.html#E65"" rel=""nofollow noreferrer""><code>:h E65</code></a> we can see that Vim doesn't allow more than 9 capture groups in a substitution command.</p>

<p>For example the following command will work:</p>

<pre><code>s/\v(a)(b)(c)(d)(e)(f)(g)(h)(i)/\9\8\7\6\5\4\3\2\1
</code></pre>

<p>But this one with one more capture group will fail:</p>

<pre><code>s/\v(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)/\10\9\8\7\6\5\4\3\2\1
</code></pre>

<p>My question is not about <em>why it fails</em> (it's a Vim hard limit) but about <strong>why does Vim have this limit at all?</strong></p>

<p>Also, I'm aware that a real life regex with more than 9 capture group would probably be pretty monstrous to read and to maintain but I'm still curious.</p>
","<p>The obvious reason is that groups with two or more digits are ambiguous: should <code>\12</code> be taken as group 12, or as group 1 followed by the string <code>2</code>?</p>

<p>There are other reasons related to efficiency (exponential matching time and the like).  These were a show stopper when <code>ed</code> was written.  Better algorithms have been discovered since then.</p>
","9643"
"Can I map a Ctrl + upper-case letter separately from Ctrl + lower-case letter?","1176","","<p>I am trying to figure out how to navigate windows little quicker, so I would like to map the following:</p>

<p><code>:nmap &lt;silent&gt; &lt;C-F&gt; :wincmd f&lt;CR&gt;</code></p>

<p>The problem is this remaps the <code>^f</code> (lower-case <code>f</code>) mapping, which is page down.  Is there any way to remap only <code>^F</code> (upper-case <code>F</code>) and leave the <code>^f</code> as it was?</p>
","<p>Mapping <code>&lt;C-F&gt;</code> (<kbd>Ctrl+letter</kbd>) is always the same as mapping <code>&lt;C-f&gt;</code> (<kbd>Ctrl+Shift+letter</kbd>). You can't map one without the other.</p>

<p>The root of the problem is that Vim reads characters from the terminal, which sends <code>^F</code> (ASCII code <code>0x06</code>) for both <kbd>Ctrl+f</kbd> and <kbd>Ctrl+Shift+f</kbd>; Vim has no way of knowing whether you pressed the Shift key. <a href=""https://vi.stackexchange.com/questions/3225/disable-esc-but-keep-c/3570#3570"">This post provides some more information about terminals &amp; control characters</a>.</p>

<p>In theory, this <em>could</em> be done with gVim, since most (or all?) graphic environments send much more detailed key events. But unfortunately, gVim operates much like a terminal emulator, and can't distinguish between <code>&lt;C-f&gt;</code> and <code>&lt;C-F&gt;</code> either (this was perhaps a design decision for Vim-gVim compatibility).</p>

<hr>

<p>Possible solutions:</p>

<ul>
<li><p>You could configure your terminal emulator to send a different code to Vim when you press <kbd>Ctrl+Shift+f</kbd>. For example, for xterm you could do:</p>

<pre><code>XTerm*VT100.translations: #override \n\
    Ctrl ~Meta Shift &lt;Key&gt;f: string(0x1b) string(""[24;6~"")\n\
    Ctrl ~Meta Shift &lt;Key&gt;r: string(0x1b) string(""[23;6~"")
</code></pre>

<p>This will send the code for <code>&lt;C-S-F12&gt;</code> and <code>&lt;C-S-F11&gt;</code> to Vim, which you can pick up with:</p>

<pre><code>nnoremap &lt;C-S-F12&gt; :echo 'ctrl+F pressed!'&lt;CR&gt;
nnoremap &lt;C-S-F11&gt; :echo 'ctrl+R pressed!'&lt;CR&gt;
</code></pre></li>
<li><p>Note that you <em>can</em> map <kbd>Alt+Shift+letter</kbd>, since the terminal sends a different code for those: <code>&lt;Esc&gt;f</code> (<code>0x1b0x66</code>) or <code>&lt;Esc&gt;F</code> (<code>0x1b0x46</code>).</p></li>
<li><p>NeoVim has, as far as I can find, not fixed this problem except for a few cases such as <kbd>Ctrl+Shift+Enter</kbd> and <kbd>Ctrl+Shift+Tab</kbd>, but it's possible that this feature will be added in the future.</p></li>
</ul>
","4291"
"find next occurrence of word or line at cursor","1173","","<p>For example when editing a big <code>.gitignore</code> file and pasting in a block for a newly added toolset's suggested ignore patterns,
I manually looked at each line and typed <code>/\.filetype</code> where filetype is what's on that line, to confirm that this wasn't already represented elsewhere.</p>

<p>I don't plan to use <code>sort -u</code> or <code>uniq</code> because I wish to retain the blocks of ignores organized by toolchain involved.</p>

<p>It occurs to me that there must be an even shorter method of basically highlighting other lines that match this line, or searching for the word at the cursor. Would someone be able to tell me how, or if it is not a feature?</p>
","<p>You can use <code>*</code> in normal mode which will go to the next occurrence of the word under your cursor.</p>

<p>As @Sato pointed it out in the comments <code>*</code> allows to search forward and <code>#</code> is the equivalent to search backward. Once you've pressed <code>*</code> or <code>#</code> you can use the keys <code>n</code> and <code>N</code> to just between the matches just like you do after searching with <code>/</code> and <code>?</code>.</p>

<p>Also if you want to search more terms, an option is to yank what you are looking for and then past it in the search:</p>

<ul>
<li><code>/</code> to start search</li>
<li><code>&lt;C-r&gt;""</code> to insert the search terms you just yanked</li>
<li><code>&lt;CR&gt;</code> to begin the search</li>
</ul>

<p>Note that this method will affect the content of the unamed register.</p>
","4799"
"How can I get Vim to ignore all user configuration, as if it were freshly installed?","1172","","<p>In order to ensure that behaviour is not affected by my personal config, I want to start Vim in a way that ignores <em>all</em> my user-installed config files, as if Vim had just been freshly installed for the first time and the user had run it immediately.</p>

<p>This is addressed <a href=""http://vimhelp.appspot.com/vim_faq.txt.html#faq-2.5"" rel=""noreferrer"">in the FAQ</a> which suggests that the answer is to start Vim with the following command:</p>

<pre><code>vim -u NONE -U NONE -N -i NONE
</code></pre>

<p>This gets <em>most</em> of the way there, but the <code>runtimepath</code> option still contains <code>~/.vim</code> and, notably, <code>~/.vim/after</code>, (so e.g. if I subsequently turn on file type detection and change filetype, code in <code>~/.vim/after/syntax/the_relevant_filetype.vim</code> will be executed).</p>

<p>I can workaround this specific problem by invoking the following commands on startup*:</p>

<pre><code>:set runtimepath-=~/.vim
:set runtimepath-=~/.vim/after
</code></pre>

<p>...but I'm not sure if:</p>

<ol>
<li>This is a robust solution: Are those the only paths that can cause user-configuration to take effect? Is there anything else I haven't thought of?</li>
<li>There is a better way of achieving the desired result.</li>
</ol>

<p><sub>* By using <code>--cmd</code> or <code>-u vimrc</code> shell arguments, or simply by typing them manually.</sub></p>

<p><strong>EDIT</strong>: Here's one specific example of the sort of problem I'm trying to fix. (Although I'd like the solution to fix any other possible issues I might not yet have encounted.):</p>

<ol>
<li><p>Create a file ~/.vim/after/ftplugin/c.vim, containing the content:</p>

<pre><code>noremap i :echom ""This is not default behaviour""&lt;CR&gt;
</code></pre>

<p>Now we have some user-installed configuration that we want to ignore. Let's test the solution suggested by the FAQ.</p></li>
<li><p>Run Vim with the command:</p>

<pre><code>vim -u NONE -U NONE -N -i NONE
</code></pre></li>
<li><p>Enter the commands:</p>

<pre><code>:filetype plugin on
:set ft=c
i
</code></pre></li>
</ol>

<p><strong>Desired behaviour</strong>: Vim should enter Insert mode. This is what it would do if no user configuration existed.</p>

<p><strong>Observed behaviour</strong>: Vim prints out ""This is not default behaviour""</p>
","<p>One way to eliminate user-specific files would be to use a different value of <code>$HOME</code>. To allow nothing to be read, or written to (such as viminfo), you could use <code>/dev/null</code>:</p>

<pre><code>HOME=/dev/null vim -u NONE
</code></pre>

<p>This will cause errors about <code>viminfo</code>, so, instead you could create a temporary folder, or use an existing one (like <code>/tmp</code>):</p>

<pre><code>HOME=$(mktemp -d) vim -u NONE
</code></pre>

<p>With such a <code>$HOME</code>, <code>-u NONE</code> may not be needed, depending on what your administrator has added to the system-wide <code>vimrc</code>. For example, on all lab systems I administer, I added a <code>/etc/vim/vimrc.local</code> (sourced by the packaged Vim's default <code>/etc/vim/vimrc</code>) that has <code>nocompatible</code>, <code>syntax</code>, etc., set, and <code>filetype on</code> as well.</p>
","6114"
"How can I type the alphabetic subscripts?","1164","","<p>I want to type the subscript i as follows:</p>

<p><a href=""https://i.stack.imgur.com/b6uEz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b6uEz.png"" alt=""subsript i""></a></p>

<p>What I have tried:</p>

<ol>
<li>I got to know how to type numerial subscripts, by following <a href=""http://vimdoc.sourceforge.net/htmldoc/digraph.html"" rel=""nofollow noreferrer"">this documentation</a>.<br>
<code>&lt;ctrl-k&gt;[digit]s</code>    </li>
<li><p>I search the local help doc (absolutely the same as the above) by <code>:h digraphs</code> and find only those for numbers also.    </p>

<p><a href=""https://i.stack.imgur.com/aw9Mg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aw9Mg.png"" alt=""help doc""></a>    </p>

<p>No more no less.  </p></li>
<li><p>I have found <a href=""https://github.com/Rykka/mathematic.vim/blob/master/keymap/mathematic.vim"" rel=""nofollow noreferrer"">a plugin</a> for doing this and got to know the author's <a href=""https://github.com/Rykka/mathematic.vim/blob/master/keymap/mathematic.vim#L105"" rel=""nofollow noreferrer"">implementation</a>.    </p>

<pre><code>_i                       &lt;char-0x1D62&gt; "" ᵢ
</code></pre></li>
</ol>

<p>I raise this question for asking if I can type the alphabetic subscripts without plugins (which also means don't use the daunting commands as                   <code>&lt;char-0x1D62&gt;</code>). I need commands like <code>&lt;ctrl-k&gt;[alphabet]s</code>. Please don't recommend me LaTex as <a href=""https://superuser.com/a/41747/462466"">this answer</a> since I'm learning it.     </p>
","<p>First off, <a href=""https://stackoverflow.com/a/6614102/5274741"">this answer</a> suggests that there are no unicode subscript letters for all latin characters.
However you can still get some of them (a list is provided by several answers in the linked answer) by using <code>:digraphs</code> with argumenst, e.g.</p>

<pre><code>:digraphs as 8336
</code></pre>

<p>where <code>8336</code> is the unicode encoding of the ""LATIN SUBSCRIPT SMALL LETTER A"" written in decimal.
This will allow you to type <code>&lt;C-K&gt;as</code> and get a subscript <code>a</code>, as desired.</p>

<p>Since unicode encodings are usually given in hexadecimal, I suggest to do the following (here, <code>2901</code> is the encoding of ""LATIN SUBSCRIPT SMALL LETTER E"" in hexadecimal):</p>

<pre><code>:execute ""digraphs es "" . 0x2091
</code></pre>

<p>which lets vim take care of the hex to decimal conversion and will give you the <code>&lt;C-K&gt;es</code> mapping for a subscript e.</p>

<p>For more information, see <a href=""http://vimdoc.sourceforge.net/htmldoc/digraph.html#:digraphs"" rel=""nofollow noreferrer""><code>:help :digraphs</code></a></p>
","7372"
"Why won't vim-plug install my plugins? [typo]","1158","","<p>I'm pretty new to Vim and <a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow"" title=""junegunn/vim-plug: Minimalist Vim Plugin Manager"">vim-plug</a> and I can't get the latter to install my plugins.</p>

<p>I think I've set everything up—see my files below. But when I start Vim and enter <code>:PlugStatus</code>, it shows a blank list. <code>:PlugInstall</code> returns <code>No plugin to install</code>.</p>

<p>Can somebody tell me what I'm doing wrong?</p>

<h2>Context</h2>

<ul>
<li>Mac OS X 10.11.6</li>
<li>Vim 8.0.2</li>
<li>I don't know how vim-plug is versioned, but <code>:PlugUpgrade</code> returns <code>vim-plug is already up-to-date</code></li>
<li>git 2.7.4 (Apple Git-66)</li>
<li><code>:ruby puts RUBY_VERSION</code>: <code>2.3.1</code></li>
<li><code>:python import platform; print(platform.python_version())</code>: <code>2.7.12</code></li>
</ul>

<h2>Files:</h2>

<h3><code>.vimrc</code>:</h3>

<p>(note the last line)</p>

<pre><code>syntax on
filetype plugin indent on
set relativenumber
set number

"" searching
set incsearch
set hlsearch
set ignorecase
set smartcase

"" backspace over everything
set backspace=indent,eol,start

"" number of spaces inserted by tab
set shiftwidth=4

"" status line
hi User1 ctermbg=gray  ctermfg=black
hi User2 ctermbg=gray  ctermfg=red cterm=bold

set laststatus=2
set statusline=     ""reset statusline
set statusline+=%1* ""black on gray
set statusline+=%F      ""full filename
"" set statusline+=[%{strlen(&amp;fenc)?&amp;fenc:'none'}, ""file encoding
"" set statusline+=%{&amp;ff}] ""file format
set statusline+=\ %y    ""filetype
set statusline+=\ %h    ""help file flag
set statusline+=\ %2*   ""white on red
set statusline+=%m      ""modified flag
set statusline+=%1* ""black on gray
set statusline+=\ %r    ""read only flag
set statusline+=%=      ""left/right separator
set statusline+=%c,     ""cursor column
set statusline+=%l/%L   ""cursor line/total lines
set statusline+=\ \ %P  ""percent through file

"" load vim-plug
source ~/.vim/.plug.vim
</code></pre>

<h3><code>.vim.plug</code>:</h3>

<pre><code>"" plug
"" Config for vim-plug
"" https://github.com/junegunn/vim-plug

"" install vim-plug if we don't already have it
if empty(glob('~/.vim/autoload/plug.vim'))
    "" ensure directories exist
    execute '!mkdir -p ~/.vim/autoload'
    execute '!mkdir -p ~/.vim/plugged'
    "" download vim-plug
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source ~/.vim/.plug.vim
endif

call plug#begin('~/.vim/plugged')

"" Defaults everyone can agree on
Plug 'tpope/vim-sensible'

"" quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

"" syntax highlighting
Plug 'tomvanderlee/vim-kerboscript', { 'for': 'kerboscript' }

call plug#begin()
</code></pre>
","<p>@P1h3r1e3d13 Please try the following configuration</p>

<p><strong><em>For .vim.plug:</em></strong></p>

<pre><code>"" =============================================================================
"" Plugin Manager Setup
"" =============================================================================
""
filetype off

"" Install the plugin manager if it doesn't exist
let s:plugin_manager=expand('~/.vim/autoload/plug.vim')
let s:plugin_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

if empty(glob(s:plugin_manager))
  echom 'vim-plug not found. Installing...'
  if executable('curl')
    silent exec '!curl -fLo ' . s:plugin_manager . ' --create-dirs ' .
          \ s:plugin_url
  elseif executable('wget')
    call mkdir(fnamemodify(s:plugin_manager, ':h'), 'p')
    silent exec '!wget --force-directories --no-check-certificate -O ' .
          \ expand(s:plugin_manager) . ' ' . s:plugin_url
  else
    echom 'Could not download plugin manager. No plugins were installed.'
    finish
  endif
  augroup vimplug
    autocmd!
    autocmd VimEnter * PlugInstall
  augroup END
endif

"" Create a horizontal split at the bottom when installing plugins
let g:plug_window = 'botright new'

let g:plug_dir = expand('~/.vim/bundle')
call plug#begin(g:plug_dir)

"" Defaults everyone can agree on
Plug 'tpope/vim-sensible'

"" quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

"" syntax highlighting
Plug 'tomvanderlee/vim-kerboscript', { 'for': 'kerboscript' }

"""""" All of your Plugins must be added before the following line
"" Add plugins to &amp;runtimepath
call plug#end()   ""required
</code></pre>

<p>And then try the following for your</p>

<p><strong><em>.vimrc:</em></strong></p>

<pre><code>"" load vim-plug
source ~/.vim/.plug.vim

syntax on
filetype plugin indent on
set relativenumber
set number

"" searching
set incsearch
set hlsearch
set ignorecase
set smartcase

"" backspace over everything
set backspace=indent,eol,start

"" number of spaces inserted by tab
set shiftwidth=4

"" status line
hi User1 ctermbg=gray  ctermfg=black
hi User2 ctermbg=gray  ctermfg=red cterm=bold

set laststatus=2
set statusline=     ""reset statusline
set statusline+=%1* ""black on gray
set statusline+=%F      ""full filename
"" set statusline+=[%{strlen(&amp;fenc)?&amp;fenc:'none'}, ""file encoding
"" set statusline+=%{&amp;ff}] ""file format
set statusline+=\ %y    ""filetype
set statusline+=\ %h    ""help file flag
set statusline+=\ %2*   ""white on red
set statusline+=%m      ""modified flag
set statusline+=%1* ""black on gray
set statusline+=\ %r    ""read only flag
set statusline+=%=      ""left/right separator
set statusline+=%c,     ""cursor column
set statusline+=%l/%L   ""cursor line/total lines
set statusline+=\ \ %P  ""percent through file
</code></pre>
","9563"
"Is it possible to use two different color backgrounds in a single vim buffer?","1148","","<p>I am looking for a possible solution for applying two different background colors inside a single vim buffer depending on context <a href=""https://raw.github.com/SublimeText-Markdown/MarkdownEditing/master/screenshots/light.png"">like in this sublime text example</a>.</p>

<p>One use case of that is to color code snippets inside markup files differently so they stand out more.</p>

<p>However I have never seen an example with a setup like that.</p>

<p>Is this at all possible in vim?</p>
","<p>Because I was curious how well this would work, I've hacked something together
that sort of works.</p>

<p><img src=""https://i.stack.imgur.com/2AA8m.png"" alt=""enter image description here""></p>

<p>As mentioned in the comments on the earlier answer, the only way to do this is
to fill up regions with spaces; which is exactly what we do; before write, we
remove these spaces, so you shouldn't be bothering anyone else with it.</p>

<p>Note that this example is very specific for the markdown filetype!</p>

<p><em>Side effects</em>:</p>

<ul>
<li>Copying text will also copy a lot of spaces</li>
<li>Using <kbd>$</kbd> and <kbd>End</kbd> no longer work as expected (it goes to column 80), and keys such as
<kbd>j</kbd> and <kbd>k</kbd> also behave different.</li>
<li>The background is not displayed when <code>'list'</code> is enabled</li>
<li>Completely blank lines don't work, you need to manually add a tab or 4 spaces</li>
<li>... Perhaps more?</li>
</ul>

<p>First, you need to add this to your <code>~/.vim/after/syntax/markdown.vim</code>:</p>

<pre><code>syn clear markdownCodeBlock                                                 
syn region markdownCodeBlock start=""    \|\t"" end=""$""                       
hi def markdownCodeBlock ctermbg=230 guibg=lightyellow                      
</code></pre>

<p>You can adjust the colours to your liking, of course ;-)</p>

<p>Then, add this to your vimrc:</p>

<pre><code>fun! MarkdownBlocks()                                                       
    fun! s:fill(line)                                                       
        "" Remove all trailing whitespace                                    
        let l:line = substitute(a:line, "" *$"", """", """")                      

        "" Add trailing whitespace up to 'textwidth' length                  
        return l:line . repeat(' ', (&amp;tw &gt; 0 ? &amp;tw : 80) - strdisplaywidth(l:line))
    endfun                                                                  

    "" Get all lines in a list                                               
    let l:lines = getline(1, line('$'))                                     

    "" Map s:fill() to the lines that are a code block                       
    call map(l:lines, 'v:val[0] == ""\t"" || v:val[:3] == ""    "" ? s:fill(v:val) : v:val')

    "" Reset the buffer to the lines                                         
    call setline(1, l:lines)                                                
endfun                                                                      

"" Remove all the trailing spaces                                            
fun! MarkdownBlocksClean()                                                  
    let l:save_cursor = getpos(""."")                                         
    silent %s/^\(    \|\t\)\(.\{-}\)\( *\)$/\1\2/e                          
    call setpos('.', l:save_cursor)                                         
endfun                                                                      
au BufWritePre *.markdown call MarkdownBlocksClean()                        

"" Set spaces on loading the file, leaving insert mode, and after writing it 
au FileType markdown call MarkdownBlocks()                                  
au InsertLeave *.markdown call MarkdownBlocks()                             
au BufWritePost *.markdown call MarkdownBlocks()                            
</code></pre>

<p>I'm not going to explain the code line-by-line, the comments should make
the general gist of it clear ;-)</p>
","2210"
"Use Vim with virtualenv","1147","","<p>I do a lot of Python and I use almost all the time a <a href=""https://virtualenv.pypa.io/en/latest/"" rel=""nofollow"">virtualenv</a> along with <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/"" rel=""nofollow"">virtualenvwrapper</a> to keep my modules organised.</p>

<p>But when I want to use those plugin from inside vim, through an external command, it seems that the shell is not aware of that config.</p>

<p>I need to have access to the <code>virtualenv</code> because </p>

<p>e.g.</p>

<pre><code>(venv) $ python
&gt;&gt; import simple_history
&gt;&gt; # OK here

(venv) $ vim
:!python 
&gt;&gt; import simple_history
ImportError: No module named simple_history
</code></pre>

<p>My shell is <code>shell=/bin/zsh</code>, I guess I need to use this setting to access my <code>virtualenv</code>, but I can't figure out how...</p>
","<p>I actually fixed this myself a long time ago.  The problem is that when you run <code>!python</code> you're starting up a new shell with your existing environment.  But, this means <code>workon xxxx</code> wasn't called to actually activate the virtualenv.  This lead to a lot of confusion for me since <code>$VIRTUAL_ENV</code> was set.</p>

<p>I got around it by adding the following to my <code>~/.zshenv</code> script:</p>

<pre><code>if [[ -n $VIRTUAL_ENV &amp;&amp; -e ""${VIRTUAL_ENV}/bin/activate"" ]]; then
  source ""${VIRTUAL_ENV}/bin/activate""
fi
</code></pre>

<p>Since <code>~/.zshenv</code> is sourced within the current session, it's a pretty safe assumption that the <code>$VIRTUAL_ENV</code> wasn't activated.  Now when you run <code>!python</code> in Vim, it should use the virtualenv interpreter.  You can confirm this by running <code>:echo system('which python')</code>.</p>
","7654"
"search for lines which contain a pattern but do not contain a second pattern","1146","","<p>I need to search for lines which contain some word but do <em>not</em> contain a second word.</p>

<p>For example, find lines that contain the word ""This"" but not the word ""red""</p>

<p>so that for a file containing these lines</p>

<pre><code>This is a blue coat
This is a red  coat
This is a purple coat
That is a coat
</code></pre>

<p>The search would locate the first and third lines only.</p>

<p>Thanks for any advice!</p>
","<p>You can use this command to print lines containing <code>This</code> and not <code>red</code>:</p>

<pre><code>:g/\(.*This\)\&amp;\(.*red\)\@!
</code></pre>

<ul>
<li><code>\&amp;</code> separates the branches like a logical <code>AND</code> because we want the lines that satisfy the two conditions (branches),</li>
<li><code>\(.*This\)</code> is the first branch, it could simply be <code>This</code> but it is more generic that way,</li>
<li><code>\(.*red\)\@!</code> is the second branch, <code>\@!</code> means ""zero width match if the preceding atom doesn't match"", like a logical <code>NOT</code>.</li>
</ul>

<p>In other words:</p>

<pre><code>\(.*This\)  \&amp;  \(.*red\)\@!
°°°°°°°°°°  °°  °°°°°°°°°°°°
'This'      AND NOT 'red'
</code></pre>
","4903"
"Enter in Quickfix window gives ""E73: tag stack empty"" error","1145","","<p>I am using the Lid.vim plugin to navigate my C++ project. 
Once I run <code>:Lid</code>, it shows me the list of matching tags in the quickfix window.</p>

<p>When I switch to the quickfix window, select the occurence I'm interested in and press <code>Enter</code> it produces an error:</p>

<pre><code>E73: tag stack empty
</code></pre>

<p>and does not go to the location.</p>

<p>Instead of <code>Enter</code> if I use <code>Ctrl-Enter</code> it opens a new window and goes to the location correctly. </p>

<p>I want to open the quickfix location in the current window itself. Why is this error happening?</p>
","<p>The issue was that i had  a mapping <code>map &lt;C-m&gt; :tnext&lt;CR&gt;</code> in my vimrc . 
In vim, <code>&lt;C-m&gt;</code> is equivalent to <code>Enter</code>. 
More detailed answer at <a href=""https://stackoverflow.com/questions/3935970/vim-how-to-map-ctrl-m-without-affecting-return-keypress-as-well"">how to map Ctrl-m without affecting return keypress</a></p>
","3547"
"Can I open a file in an existing Vim instance from an external command?","1144","","<p>Some applications have the notion of a <em>""session""</em>, where you can run a command to load a file in an existing instance of an application.</p>

<p>For example, when I type:</p>

<pre><code>$ firefox http://vi.stackexchange.com
</code></pre>

<p>Firefox re-uses an existing Firefox process, rather than creating a new one.</p>

<p>Is this possible with Vim?</p>
","<p>You need vim compiled with <code>+clientserver</code>, and then you can use the command <code>vim --servername SERVER</code> to start a vim instance and <code>vim --remote --servername SERVER FILE</code> to open the file in the named vim instance.</p>

<hr>

<h3>macOS only</h3>

<p>MacVim runs a server by default - you can use <code>mvim --remote-tab-silent</code> to open a file in a new tab in your existing MacVim instance, or <code>mvim --remote-silent</code> to open the file in a new buffer in the same tab.</p>
","318"
"How to change last occurrence of the string in the line?","1143","","<p>I've the following example line:</p>

<pre><code>aa ... abc abc abc ... zz
</code></pre>

<p>I'm aware that <code>:s/abc/ok/</code> will change the first occurrence of <code>abc</code> in the current line and adding <code>g</code> flag will change all of them.</p>

<p>How do I change last occurrence of the string (without knowing how many there are and what's after the last)?</p>
","<p>Greedy matching:</p>

<pre><code>:s/.*\zsabc//
</code></pre>

<p>The <code>.*</code> will consume as many characters as possible (therefore leaving you at the last occurrence), and the <code>\zs</code> sets the start of the actual match (<code>\zs</code> and <code>\ze</code> are useful substitutes for positive lookaheads/lookbehinds in Vim) so that the text before isn't removed as well.</p>
","2104"
"Copy a word and paste the same word at multiple places in vim","1142","","<p>If I try to copy a word via this yw – yank the current word and paste it to somewhere, it works but If I try to paste it somewhere else one more time old world gets lost with previous replaced word.</p>

<p>I want to paste multiple times with the original yanked word.</p>
","<p>You should use the register <code>0</code>. It contains the last yanked text.</p>

<p>By default, <code>c</code>, <code>d</code>, <code>y</code> use the unnamed register <code>""""</code> to store all modified text.</p>

<p>But the numbered registers <code>""0</code> contains the previously yanked text and only that. You can use :</p>

<pre><code>""0p
</code></pre>

<p>With confidence it will past the last yanked text.</p>
","8289"
"Search entire file for a pattern; every time it's found, delete up until a certain character appears","1136","","<p>I'm trying to search for the string <code>/c</code> in the entire file, and when it's found I'd like to delete everything - including the <code>/c</code> itself - up until the next occurrence of <code>/</code> (but not the <code>/</code> itself). For the purposes I'm using this for, you can assume that:</p>

<ol>
<li>not every line will have a <code>/c</code> in it, </li>
<li>but when there is one in a line, it will always be the only one in that line, and </li>
<li>there will always be a <code>/</code> following it at some point in that same line.</li>
</ol>

<p>I've learned of macros recently, and I found that if I create a macro with <code>qa/\/c&lt;CR&gt;dt/q</code> and then run it a large number of times with <code>:g//normal 500@a</code>, that it will make all the desired deletions (until it gets to the end of the file when it gives the error <code>E486: Pattern not found: \/c</code>). But I was wondering if there is a simpler way to do it - with some kind of <code>:%s</code> search command - that requires only one line. I'm quite certain there is, I just don't know how to do it. Alternatively, if a command or function could be created in the <code>_vimrc</code> file that would accomplish this task, that would work too.</p>
","<p>I think the following command should do what you need:</p>

<pre><code>:g:/c:s:/c[^/]*/:/:
</code></pre>

<p>Breaking it up:</p>

<ul>
<li><code>:g</code>: for every line that satisfies the condition

<ul>
<li>that it match <code>/c</code> (note, I'm using <code>:</code> as the regex delimiter for convenience, or I'd have to escape each <code>/</code> that I use)</li>
</ul></li>
<li>run <code>s:/c[^/]*/:/:</code>, which:

<ul>
<li>looks for <code>/c</code>, followed by any number of non-<code>/</code> characters and then a <code>/</code>, and</li>
<li>replaces it with a <code>/</code>. In effect, it leaves one <code>/</code> in place of the matched text, which includes both the boundary <code>/</code>.</li>
</ul></li>
</ul>

<p>Of course, you could have used your macro and run:</p>

<pre><code>:g:/c:normal @a
</code></pre>

<p>The trick is to only run on those lines which match your condition.</p>
","6580"
"Vim HardMode Fine Grain Movements","1135","","<p>I recently found out about Vim hard mode and I've decided to try and use it. However, I'm running into some problems with fine grain movements.</p>

<p>For example, let's say I really just want to move up or down one line. Since <code>j</code> and <code>k</code> are disabled, I'm not sure what better alternatives there are for this.</p>

<p>I've run into the same problem when I want to move one or two characters to right or left. Does anyone know how one would replace these types of movements?</p>

<p>This is the plugin I am using: <a href=""https://github.com/wikitopian/hardmode"" rel=""nofollow noreferrer"">https://github.com/wikitopian/hardmode</a>.</p>
","<p>These are just a few of the movements that vim is capable of, these should get you going for now.</p>

<h2>TL;DR</h2>

<ol>
<li>Use Vim's built in help feature on <code>navigation</code> or better still <code>usr_03.txt</code></li>
<li>Search google for <code>vim advanced movements</code></li>
<li>Navigate with/to words</li>
<li>go here <a href=""http://vim.wikia.com/wiki/All_the_right_moves"">All the right moves</a></li>
</ol>

<h2>Movements</h2>

<p>There are many ways of getting around in vim I have listed some that I found by searching for <code>vim advanced movements</code>, and a few that I use all the time. Im sure you know of most of these but the ones I think you will want to pay particular attention too are the word navigation's.</p>

<p>Here are a few that allow for navigation inside a line.</p>

<ul>
<li><code>0</code> – go to the starting of the current line.</li>
<li><code>^</code> – go to the first non blank character of the line.</li>
<li><code>$</code> – go to the end of the current line.</li>
<li><code>g_</code> – go to the last non blank character of the line.</li>
</ul>

<p>Navigation with words can be very helpful. To be more granular, you should navigate in relation to words, using:</p>

<ul>
<li><code>e</code> – go to the end of the current word.</li>
<li><code>E</code> – go to the end of the current WORD.</li>
<li><code>b</code> – go to the previous (before) word.</li>
<li><code>B</code> – go to the previous (before) WORD.</li>
<li><code>w</code> – go to the next word.</li>
<li><code>W</code> – go to the next WORD.</li>
</ul>

<p>A word consists of a sequence of letters, digits and underscores.
A WORD consists of a sequence of non-blank characters, separated with white space.
words|WORDS may also change depending on your vim settings.</p>

<p>Example to show the difference between WORD and word</p>

<p><code>192.168.1.1</code> is single WORD.</p>

<p><code>192.168.1.1</code> is seven words.</p>

<p>The search movements can be extremely useful too.</p>

<ul>
<li><code>/pattern</code> – Search for a pattern which will you take you to the next occurrence of <code>pattern</code>

<ul>
<li><code>n</code> will take you to the next match of <code>pattern</code> below the cursor.</li>
</ul></li>
<li><code>?pattern</code> – Search for a pattern which will you take you to the previous occurrence of <code>pattern</code>.

<ul>
<li><code>N</code> will take you to the next match of <code>pattern</code> above the the cursor.</li>
</ul></li>
<li><code>*</code> – Go to the next occurrence of the current word under the cursor.</li>
<li><code>#</code> – Go to the previous occurrence of the current word under the cursor.</li>
<li><code>%</code> – Go to the matching braces, or parenthesis inside code.</li>
</ul>

<p>Here are a few you can do even before you open vim, from the command line
<code>Vim +N filename</code> allows you to go to the Nth line of the file after opening it.</p>

<p><code>vim +10 /etc/passwd</code></p>

<p><code>Vim +/pattern filename</code> opens the file to the first line with the occurrence of the <code>pattern</code>. In the following example, vim will open the README file and jump to the first occurrence of the word “install”.</p>

<p><code>vim +/install README</code></p>

<p><code>Vim +?patten filename</code> opens the file to the last occurrence of <code>pattern</code>. In the following example, it will open the README file and jump to the last occurrence of the word “bug”.</p>

<p><code>vim +?bug README</code></p>
","7382"
"vim indentation setup - Ruby","1124","","<p>I have a problem with indentation using vim.</p>

<p>Lets say I have a file:</p>

<pre><code>class My
end // &lt;-- cursor is here
</code></pre>

<p>When I press O vim will create new line in between <strong>class</strong> and <strong>end</strong> and it will be indented. When I add a method def to it so the file looks like this:</p>

<pre><code>class My
  def my
  end
end
</code></pre>

<p>Vim inserts tab for the automatic indentation not spaces so in git diff it looks like this:</p>

<pre><code>class My
    def my
    def
end
</code></pre>

<p>My .vimrc is very basic:</p>

<pre><code>set nocompatible
filetype off
let mapleader = ""\&lt;space&gt;""
set tabstop=2 shiftwidth=2 expandtab "" setting up tab behaviour
set number "" show line numbers
set relativenumber "" make the line numbers relative

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-surround'
Plugin 'vim-ruby/vim-ruby'

call vundle#end()            "" required
filetype plugin indent on    "" required

map &lt;Leader&gt;t :call RunCurrentSpecFile()&lt;CR&gt;
map &lt;Leader&gt;s :call RunNearestSpec()&lt;CR&gt;
map &lt;Leader&gt;l :call RunLastSpec()&lt;CR&gt;
map &lt;Leader&gt;a :call RunAllSpecs()&lt;CR&gt;
nmap 0 ^
nmap &lt;leader&gt;vr :tabe $MYVIMRC&lt;cr&gt;
nmap &lt;leader&gt;so :source $MYVIMRC&lt;cr&gt;
nmap &lt;leader&gt;cs :tabe db/schema.rb&lt;cr&gt;
imap jk &lt;esc&gt;
imap kj &lt;esc&gt;

syntax on
</code></pre>

<p>Any idea on how to fix this so the automatic indention is two spaces? 
It drives my <strong>nuts!</strong> I have to spend so much time fixing indentation after every commit....</p>
","<p>If you need to use two spaces instead of tab, try</p>

<pre><code>set shiftwidth=2
set tabstop=2
set expandtab 
</code></pre>

<p>More on this here on <a href=""http://vim.wikia.com/wiki/Converting_tabs_to_spaces"" rel=""nofollow"">wiki</a> or in help</p>

<pre><code>:h shiftwidth
:h tabstop
:h expandtab 
</code></pre>
","4766"
"How to further increase cmdline history size?","1122","","<p>I have already put the following setting in my <code>.vimrc</code> file: </p>

<pre><code>set history=1000
</code></pre>

<p>It's been there for a while, I work in vim on a daily basis, so there have been many commands executed by now. I know from vim help, that duplicates and mapped command-lines are not stored, and it also says:</p>

<pre><code>Use the 'history' option to set the number of lines that are remembered
(default: 20).
</code></pre>

<p>Currently there are around 130 lines in my history (<code>:his</code> and <kbd>q</kbd><kbd>:</kbd> vary a little bit, second one has about 90 entries), but in my opinion there should be more. There are some commands missing, like opening certain files or some substitution commands with complex regex. There have not been used for a while, but I have this history size increased long enough.</p>

<p>Is there another limit, which I didn't know about? Or maybe it's not a correct way of increasing cmdline history size?</p>
","<p>A <code>:</code> value in your <code>'viminfo'</code> option may limit the number of persisted commands. See <code>:help viminfo-:</code>:</p>

<blockquote>
<pre><code>: Maximum number of items in the command-line history to be
  saved.  When not included, the value of 'history' is used.
</code></pre>
</blockquote>
","2921"
"What to follow to create a vim plugin?","1121","","<p>So my question is simple. Is it a good idea to learn vim scripting just to create vim or we should adopt some other more accepted languages to that.</p>

<p>For example <a href=""https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjg_uiq063JAhWGj44KHey0ADIQtwIIMDAD&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvMAeYp8mX_M&amp;usg=AFQjCNHIrZLmVe5tlbtZ6inZrY1vqAonRw&amp;sig2=dZiwP7LG0oxpsIduwW6OBw"">This</a> link opens a YouTube videos which shows How to use Python to create vim plugins. </p>

<p>Vim scripts are not entirely useful unless one intends to create some vim plugins. So is there any particular thing that can not be done unless vim scripts are used only ?</p>
","<p>My plugins are 99% in VimL. The reason is that VimL is available where vim is installed. It's much more complicated with other languages -- for instance, it's rare I have Python installed on the windows boxes where I use Vim.</p>

<p>Of course VimL is cumbersome, it's missing many cool features, but at least, it's easier to have something portable.</p>

<p>The 1% not in VimL is when I need to interact with external API which offer python bindings.</p>

<p>BTW, almost everything you learn regarding VimL can be used interactively when you play with commands like <code>:substitute</code>. Most mappings or macros don't need python either.</p>
","5608"
"Why do `cw` and `ce` do the same thing?","1121","","<p>This has always bugged me about the <code>w</code> and <code>W</code> motion commands—they seem to work differently when used with the <code>c</code>hange command than they do when used alone, or with the <code>d</code>elete command.</p>

<hr>

<p>For example, with the cursor on the ""q"" of this text:</p>

<pre><code>The quick brown fox jumps over the lazy dog.
</code></pre>

<p>typing <code>dw</code> results in</p>

<pre><code>The brown fox jumps over the lazy dog.
</code></pre>

<p>and typing <code>de</code> results in</p>

<pre><code>The  brown fox jumps over the lazy dog.
</code></pre>

<p>(Notice the two spaces between ""The"" and ""brown"".)</p>

<hr>

<p>The <code>y</code>ank command also treats <code>w</code> and <code>e</code> differently, as can be shown by comparing <code>yeP</code>:</p>

<pre><code>The quickquick brown fox jumps over the lazy dog.
</code></pre>

<p>and <code>ywP</code>:</p>

<pre><code>The quick quick brown fox jumps over the lazy dog.
</code></pre>

<hr>

<p><strong>However, typing either <code>ceslow&lt;Esc&gt;</code> or <code>cwslow&lt;Esc&gt;</code> results in the same thing</strong>:</p>

<pre><code>The slow brown fox jumps over the lazy dog.
</code></pre>

<p>Is this documented somewhere?  What is the logic behind it and how can I predict the results of a command that uses <code>w</code>?</p>
","<p>It's a special case. Check <a href=""http://vimhelp.appspot.com/motion.txt.html#WORD"">the documentation for WORD</a>, under ""Special case"":</p>

<blockquote>
  <p>Special case: ""cw"" and ""cW"" are treated like ""ce"" and ""cE"" if the cursor is on a non-blank.  This is because ""cw"" is interpreted as
  change-word, and a word does not include the following white space. 
  {Vi: ""cw"" when on a blank followed by other blanks changes only the
  first blank; this is probably a bug, because ""dw"" deletes all the
  blanks}</p>
  
  <p>Another special case: When using the ""w"" motion in combination with an
  operator and the last word moved over is at the end of a line, the end
  of that word becomes the end of the operated text, not the first word
  in the next line.</p>
  
  <p>The original Vi implementation of ""e"" is buggy.  For example, the ""e""
  command will stop on the first character of a line if the previous
  line was empty. But when you use ""2e"" this does not happen.  In Vim
  ""ee"" and ""2e"" are the same, which is more logical.  However, this
  causes a small incompatibility between Vi and Vim.</p>
</blockquote>
","6197"
"Substituting something with empty string?","1120","","<p>How can I substitute something with empty string? So far the best I can do seems to be substituting with a whitespace. If I write <code>:s/target//</code> then it's deemed invalid.</p>
","<p>Your command should work but you could also try this as an alternative: </p>

<pre><code>:s/target/\=''/
</code></pre>

<ul>
<li><code>\=</code> tells vim to evaluate the replace string as an expression</li>
<li><code>''</code> Is an empty string</li>
</ul>
","9490"
"How to programmatically visually select a text block?","1119","","<p>Is there a way to select a text block (e.g. a first word ""TODO:"") programmatically (with some commands or functions from a script)? Not simply highlight, like with a search, but visually select like with mouse? </p>
","<p>If you are looking to visually select a search pattern you can do it using two commands. For example searching for ""TODO...."" lines:</p>

<pre><code>/^TODO.*$/s
v//e
</code></pre>

<p>This will search your your pattern and then visually select to the end of it.</p>

<p>If you want to move this to a function and then be able to call it in a single action:</p>

<pre><code>function! VisualSelectSearch (query)
  execute ""normal /"".a:query.""/s\&lt;CR&gt;v//e\&lt;CR&gt;""
endfunction

command! -nargs=+ VSS call VisualSelectSearch(&lt;q-args&gt;)
</code></pre>

<p>Now you can type <code>:VSS ^TODO.*$</code> and visually select the next instance. If you want to call the function directly in a script use <code>VisualSelectSearch(""^TODO.*$"")</code>.</p>
","2925"
"Why does the same color scheme look better in gvim than Cygwin?","1119","","<p>I installed Cygwin/x on my PC, and I've set the terminal to xterm-256. But when I start vim from cygwin terminal, the look and feel of the same color scheme is different on cygwin and gvim. gvim always looks more pleasant, more clear. How can I make the look and feel of vim in cygwin be the same as gvim?</p>

<p><img src=""https://i.stack.imgur.com/WhMkj.png"" alt=""enter image description here""></p>
","<h3>Cygwin terminal limitations</h3>

<p>The default Cygwin terminal is based on the Windows console and inherits its limitations (very few colors, no font styles like bold or italic). You can find out how many colors are available to Vim via</p>

<pre><code>:set t_Co?
</code></pre>

<p>For me, that gives a meager <code>8</code>. To get 256 colors, you need to use a terminal emulator that support high colors, e.g. PuTTY:</p>

<pre><code>putty.exe -ssh localhost
</code></pre>

<h3>Need colorscheme with terminal support</h3>

<p>Of course, all of this assumes you've chosen a colorscheme that actually supports color terminals. This is the case if the <code>:highlight</code> output contains <code>ctermfg=</code> / <code>ctermbg=</code> definitions, not just ones starting with <code>gui</code>.</p>

<p>What if you have a GUI-only colorscheme (but you like it)? Plugins like <a href=""http://www.vim.org/scripts/script.php?script_id=2390"" rel=""nofollow"">CSApprox</a> can take the GUI color definitions and convert them to a closely matching 256-color <code>cterm</code> color palette for high-color terminals. This helps with colorschemes that otherwise only pick from the bland default 16-color terminal color palette, or only provide GUI color definitions.</p>

<p>Another approach is taken by <a href=""https://github.com/KevinGoodsell/vim-csexact"" rel=""nofollow"">csexact</a>, which modifies the (supported) terminal's palette to exactly match Vim's GUI colors.</p>
","2442"
"timeoutlen breaks <leader> and vim-commentary","1112","","<p>I installed vim-airline about 2 weeks ago. At that time I read a section in the <a href=""https://github.com/bling/vim-airline/wiki/FAQ"" rel=""nofollow"">FAQs</a> about a delay occurring after exiting insert mode and into normal mode. I noticed the delay and applied the fix suggested by adding <code>timeoutlen=50</code> to my <code>.vimrc</code>. After setting that vim-commentary started to not work. I would issue the command <code>gcc</code> and vim would do nothing until I hit hjkl or an arrow key, at which vim would delete the line and enter insert mode. I also noticed that my maps that used <code>&lt;leader&gt;</code> wouldn't work. Vim would skip a few characters and then enter visual mode.</p>

<p>I narrowed the problem down to the <code>timeoutlen=50</code>. I then set it to <code>timeoutlen=1000 ttimeoutlen=10</code> and that resolved all the problems. Now, could anyone explain what's going on with vim when <code>timeoutlen</code> is set to a number like 50? Why was I having such weird issues? and why is everything resolved by setting <code>timeoutlen</code> to a much higher number and setting <code>ttimeoutlen</code>? and why did the FAQ suggest 50 when it created these errors?</p>
","<p>I think <a href=""https://www.johnhawthorn.com/2012/09/vi-escape-delays/"" rel=""nofollow"">this post</a> explains the difference between <code>timeoutlen</code> and <code>ttimeoutlen</code> nicely, especially when used to fix issues with airline/powerline:</p>

<blockquote>
  <p>Another solution is to use <a href=""http://www.polarhome.com/vim/manual/v57/options.html#&#39;timeoutlen&#39;"" rel=""nofollow""><code>timeoutlen</code> and <code>ttimeoutlen</code></a>. <code>timeoutlen</code> is used for mapping delays, and <code>ttimeoutlen</code> is used for key code delays. My <code>.vimrc</code> has:</p>
  
  <p><code>set timeoutlen=1000 ttimeoutlen=0</code></p>
  
  <p>It might be more reasonable to give <code>ttimeoutlen</code> a more reasonable value, like 10ms, although I have encountered no issues yet.</p>
  
  <p>This is especially nice with vim-powerline, which gives clear visual indication of the current mode.</p>
</blockquote>
","7254"
"How do I count the words in a part of a file, without leaving vim?","1110","","<p>I have a file full of text (say Markdown or LaTeX). I would like to count the number of words in a part of this file. </p>

<p>I know I can do <kbd>:! wc -w %</kbd> to run wc -w on the current buffer. And I know that I can yank the section of interest into a named register. I'm guessing there's a way to send a named register to the operating system for use in a command or pipe, but I haven't been able to find one. Or is there a better way to count the words in a register?</p>

<p>My use case is that I do a lot of non-programming writing (notes, thesis, etc) in vim, and I would like to count how many words I've added to a given section of the file in the middle of an editing session.</p>
","<p>You can use <kbd>g</kbd><kbd>CTRL+g</kbd>, which will give you:</p>

<pre><code>Col 1 of 118-121; Line 1 of 5; Word 1 of 142; Byte 1 of 678
</code></pre>

<p>You can also use this from visual mode, if you want to get the word count for just the selection, which is especially useful combined with text objects such as <a href=""http://vimhelp.appspot.com/motion.txt.html#ip"" rel=""nofollow noreferrer""><code>ip</code></a>. (e.g. you can use <code>vipg&lt;C-g&gt;</code> to get the word count of the current paragraph).</p>

<p>See: <a href=""http://vimhelp.appspot.com/editing.txt.html#word-count"" rel=""nofollow noreferrer""><code>:help word-count</code></a> and <a href=""http://vimhelp.appspot.com/motion.txt.html#text-objects"" rel=""nofollow noreferrer""><code>:help text-objects</code></a>.</p>

<hr>

<p>The above option is probably better, but you can also use <code>wc</code> utility to count the number of words in a section. Aside from the <code>:! wc -w %</code> form you use, you can also use<code>:%!wc -w</code>. This will filter a motion to a shell tool (in this case <code>%</code>, the entire buffer), but you can also use other ranges (such as <code>:1,5!wc -w</code> for the first 5 lines, <code>!,+5!wc -w</code> for the current and next 5 lines, etc.). You can also select text in visual mode, and type <code>:!wc -w</code> to filter your selection.</p>

<p>Note that this will replace the motion with the output of the shell tool, but you can <code>u</code> to undo this.</p>

<p>See <a href=""http://vimhelp.appspot.com/change.txt.html#%3Arange%21"" rel=""nofollow noreferrer""><code>:help :range!</code></a>, 
<a href=""http://vimhelp.appspot.com/cmdline.txt.html#%7Baddress%7D"" rel=""nofollow noreferrer""><code>:help range</code></a>, and <a href=""https://vi.stackexchange.com/a/3232/51"">this answer</a> where I give more examples of ranges.</p>
","3741"
"How to preview the result of markdown file edited in vim?","1110","","<p>I use vim to edit <code>latex</code>, but latex is bit too heavy for taking notes casually on daily basis, so I decided to use markdown instead.  </p>

<p>So, I want to configure vim so that I could view markdown formatted file using <code>\lv</code> command  </p>

<p>I am using <code>Mac OS X 10.11</code>. How should I modify .vimrc file?</p>
","<p>While I mostly agree with @romainl comment (markdown was made to be explicit enough not to need a preview) you can do this in different ways:</p>

<p><strong>[OSX / Unix]</strong> The <a href=""https://github.com/suan/vim-instant-markdown"" rel=""nofollow noreferrer"">instant-markdown plugin</a> is a solution. You need to have node.js installed and issue: </p>

<pre><code>[sudo] npm -g install instant-markdown-d
</code></pre>

<p>You also need to have the packages <code>xdg-utils</code>, <code>curl</code> and <code>nodejs-legacy</code> installed.</p>

<p>With that when you open a markdown buffer, an html page will be opened in your web browser and you'll see the changes in real time.</p>

<hr>

<p><strong>[Unix]</strong> <a href=""https://unix.stackexchange.com/a/4141/90314"">This answer</a> suggests to use the <a href=""http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip"" rel=""nofollow noreferrer"">daringfireball markdown</a> program. </p>

<p>One you have downloaded it you can use the following command to see the file in <a href=""http://lynx.browser.org/"" rel=""nofollow noreferrer"">lynx</a>:</p>

<pre><code>./Markdown.pl ~/testfile.markdown | lynx -stdin
</code></pre>

<p>You could adapt it to it from Vim with something like that:</p>

<pre><code>!./Markdown.pl % | lynx -stdin
</code></pre>

<hr>

<p><strong>[Unix]</strong> Another plugin which could be useful is <a href=""https://github.com/greyblake/vim-preview"" rel=""nofollow noreferrer"">vim-preview</a> it seems to have some dependencies but should work on markdown, rdoc, textile, ronn and rts files.</p>

<hr>

<p><strong>[Windows / OSX]</strong> Finally the github user natesilva made <a href=""https://gist.github.com/natesilva/960015"" rel=""nofollow noreferrer"">a very good gist</a> which only requires the <code>markdown</code> command in your path. Once you sourced the script <kbd>,p</kbd> should open your markdown in the default browser.</p>

<pre><code>""
"" While editing a Markdown document in Vim, preview it in the
"" default browser.
""
"" Author: Nate Silva
""
"" To install: Place markdown.vim in ~/.vim/ftplugin or
"" %USERPROFILE%\vimfiles\ftplugin.
""
"" To use: While editing a Markdown file, press ',p' (comma p)
""
"" Tested on Windows and Mac OS X. Should work on Linux if you set
"" BROWSER_COMMAND properly.
""
"" Requires the `markdown` command to be on the system path. If you
"" do not have the `markdown` command, install one of the following:
""
"" http://www.pell.portland.or.us/~orc/Code/discount/
"" http://www.freewisdom.org/projects/python-markdown/
""
function!PreviewMarkdown()
    "" **************************************************************
    "" Configurable settings

    let MARKDOWN_COMMAND = 'markdown'

    if has('win32')
        "" note important extra pair of double-quotes
        let BROWSER_COMMAND = 'cmd.exe /c start """"'
    else
        let BROWSER_COMMAND = 'open'
    endif

    "" End of configurable settings
    "" **************************************************************

    silent update
    let output_name = tempname() . '.html'

    "" Some Markdown implementations, especially the Python one,
    "" work best with UTF-8. If our buffer is not in UTF-8, convert
    "" it before running Markdown, then convert it back.
    let original_encoding = &amp;fileencoding
    let original_bomb = &amp;bomb
    if original_encoding != 'utf-8' || original_bomb == 1
        set nobomb
        set fileencoding=utf-8
        silent update
    endif

    "" Write the HTML header. Do a CSS reset, followed by setting up
    "" some basic styles from YUI, so the output looks nice.
    let file_header = ['&lt;html&gt;', '&lt;head&gt;',
        \ '&lt;meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""&gt;',
        \ '&lt;title&gt;Markdown Preview&lt;/title&gt;',
        \ '&lt;link rel=""stylesheet"" type=""text/css"" href=""http://yui.yahooapis.com/3.3.0/build/cssreset/reset-min.css""&gt;',
        \ '&lt;link rel=""stylesheet"" type=""text/css"" href=""http://yui.yahooapis.com/3.3.0/build/cssbase/base-min.css""&gt;',
        \ '&lt;link rel=""stylesheet"" type=""text/css"" href=""http://yui.yahooapis.com/3.3.0/build/cssfonts/fonts-min.css""&gt;',
        \ '&lt;style&gt;body{padding:20px;}div#container{background-color:#F2F2F2;padding:0 20px;margin:0px;border:solid #D0D0D0 1px;}&lt;/style&gt;',
        \ '&lt;/head&gt;', '&lt;body&gt;', '&lt;div id=""container""&gt;']
    call writefile(file_header, output_name)

    let md_command = '!' . MARKDOWN_COMMAND . ' ""' . expand('%:p') . '"" &gt;&gt; ""' .
        \ output_name . '""'
    silent exec md_command

    if has('win32')
        let footer_name = tempname()
        call writefile(['&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'], footer_name)
        silent exec '!type ""' . footer_name . '"" &gt;&gt; ""' . output_name . '""'
        exec delete(footer_name)
    else
        silent exec '!echo ""&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"" &gt;&gt; ""' .
            \ output_name . '""'
    endif

    "" If we changed the encoding, change it back.
    if original_encoding != 'utf-8' || original_bomb == 1
        if original_bomb == 1
            set bomb
        endif
        silent exec 'set fileencoding=' . original_encoding
        silent update
    endif

    silent exec '!' . BROWSER_COMMAND . ' ""' . output_name . '""'

    exec input('Press ENTER to continue...')
    echo
    exec delete(output_name)
endfunction

"" Map this feature to the key sequence ',p' (comma lowercase-p)
map ,p :call PreviewMarkdown()&lt;CR&gt;
</code></pre>

<hr>

<p><strong>Edit</strong> @TommyA also suggested <a href=""https://github.com/joeyespo/grip"" rel=""nofollow noreferrer"">grip</a> this is not a vim plugin but it can be installed with <code>pip install grip</code>. The main advantage of this program is that it uses GitHub's markdown API so the render should be pretty close to what your markdown will look like on Github pages.</p>

<p>This program will serve your markdown files on <code>localhost:6419</code> by default. You should be able to invoke it from Vim with <code>:!grip</code></p>
","8537"
"Is there a way to AND events in the autocmd?","1110","","<p>I'd like to trigger an <code>autocmd</code>  on two events but not in a way it is usually done, i.e. if either of the events happened then trigger an <code>autocmd</code>. I want to trigger it if both events happened.</p>

<p>For example:<br/>
The usual way to do it</p>

<pre><code>autocmd BufWrite,BufRead *.c *.py *.h :call StripTrailingWhitespaces()
</code></pre>

<p>This code will call StripTrailingWhiteSpaces() on either BufWrite or BufRead</p>

<p>I would like to do something like:</p>

<pre><code>autocmd Filetype c,cpp,python AND BufWrite :call StripTrailingWhiteSpaces()
</code></pre>

<p>In other words trigger an <code>autcmd</code> when the filetype is one of c, cpp, python and the write on this buffer happens.</p>

<p>Any help is appreciated.  </p>
","<p>An autocommand command is executed when one event occurs. You want a command to be executed after a sequence of events has occurred. One way to do that is like this:</p>

<pre><code>autocmd FileType c,cpp,python
    \ autocmd BufWritePre &lt;buffer&gt; call StripTrailingWhiteSpaces()
</code></pre>

<p>The <code>&lt;buffer&gt;</code> pattern causes the autocommand to be be triggered when the current buffer is written. See</p>

<pre><code>:help autocmd-buflocal
</code></pre>

<p><strong>Update</strong></p>

<p>The solution above is pretty simple and has some flaws that were discussed in the Comments. Here is a more complete solution that addresses some of those flaws. It puts the autocommands in a group and deletes the BufWritePre autocommand, if one exists, before creating a new one. It still creates one autocommand per buffer, but only one.</p>

<pre><code>augroup TrailSpace
    autocmd FileType c,cpp,python
        \ autocmd! TrailSpace BufWritePost &lt;buffer&gt; call SkipTrailingWhiteSpaces()
augroup END
</code></pre>

<p>Another solution, similar to the answer posted by lcd047, now deleted, is to recognize that when the FileType event occurs, the 'filetype' option is set. Then you can condition the response to the BufWritePost event on the value of 'filetype', as in the following example. It has the advantage over the other solutions that only one autocommand is created.</p>

<pre><code>autocmd BufWritePre * if count(['c','cpp','python'],&amp;filetype)
    \ | call SkipTrailingWhiteSpaces()
    \ | endif
</code></pre>
","3971"
"What is the meaining of '#' symbol in function name?","1109","","<p>I would like to know what is the meaning of the <code>#</code> symbol in function names e.g.:</p>

<pre><code>execute pathogen#infect()
</code></pre>
","<p>That's part of the autoload
 mechanism. From
<a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/53.html"" rel=""noreferrer""><code>Autoloading</code></a> at 
<a href=""http://learnvimscriptthehardway.stevelosh.com/"" rel=""noreferrer"">Learn Vimscript the Hard Way</a> 
and <a href=""http://vimhelp.appspot.com/eval.txt.html#autoload"" rel=""noreferrer""><code>:help autoload</code></a>:</p>

<p>Autoload lets you delay loading code until it's actually needed, so if the 
following function</p>

<pre><code>execute pathogen#infect()
</code></pre>

<p>has already been loaded, Vim will simply call it normally.  Otherwise Vim will
look for a file called <code>autoload/pathogen.vim</code> in your <code>~/.vim</code> directory . If this
file exists, Vim will load/source the file. It will then try to call the
function normally.</p>

<p>Every <code>#</code> in the function name works like a path separator.  Thus when calling a
function:</p>

<pre><code>:call foo#bar#func()
</code></pre>

<p>Vim will look for the file <code>autoload/foo/bar.vim</code></p>
","13007"
"Do large numbers make vim run slowly?","1105","","<p>This seems like a really daft question, but I have a Python file that has a number in it that's a thousand digits long and that file seems to be running very slowly, I'm not sure if there's some kind of processing going on that I'm unaware of. </p>

<p>I press line up <code>j</code> and there's a definite pause of ~1 second thats very painful! </p>

<p>I only have this on the Python file though, it doesn't happen on others. </p>

<p>After deleting the number the file works normally again... </p>

<p>Here is the number : </p>

<pre><code>number=(""""""7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"""""")
</code></pre>

<p>It's not even a number really, its a string.</p>
","<p>I can reproduce this with the <code>syntax/python.vim</code> that ships with Vim 7.4.663.</p>

<p>Using <code>:syntime</code>, this seems to be caused by the following syntax group / pattern:</p>

<pre><code>TOTAL      COUNT  MATCH   SLOWEST     AVERAGE   NAME               PATTERN
73.870736   20     0       3.940215    3.693537  pythonNumber       \%(^\|\W\)\@&lt;=\d*\.\d\+\%([eE][+-]\=\d\+\)\=[jJ]\=\&gt;
</code></pre>

<p>You should report this problem to its maintainer (his name and email address is in the script's header).</p>

<p>Incidentally, I originally could not reproduce this, because I use an alternative syntax script from <a href=""https://github.com/hdima/python-syntax"">here</a>. Switching to that (if it fits your requirements), would be a viable workaround, too.</p>

<hr>

<p><strong>Edit:</strong> Looking further into the probably cause, this seems to be due to pathological performance of the new NFA-based regexp engine. With <code>:set regexpengine=1</code>, I don't see that huge slowdown. So one possible workaround / fix would be switching to the old engine for that syntax match; this can be done by prepending <code>\%#=1</code> to the pattern (cp. <code>:help NFA</code>).</p>
","2685"
"Edit different words simultaneously, one the same line like in Sublime Text with multiplie selections","1103","","<p>is it possible to edit more than one word simultaneously, which are on the same line?</p>

<p>For example, let's say I have this:</p>

<pre><code>Spam and Eggs is all you need for a healthy breakfast
</code></pre>

<p>and I would like to change the line to:</p>

<pre><code>organic_Spam and organic_Eggs is all you need for a healthy breakfast
</code></pre>

<p>I would like to highlight ""Spam"" and ""Eggs"" and prepend ""organic_"" simultaneously to ""Spam"" and ""Eggs"". A bit like using visual block to write simultaneously on different lines, but here write stuff on the same line. I saw a colleague doing this with Sublime Text, and tried googling but to no avail. </p>
","<p>I agree with Alexander here. In day to day editing I would probably use the <kbd>.</kbd> command as well, but if you want to execute just one command I would use the substitute command:</p>

<pre><code>:s/S\|E/organic_&amp;/g
</code></pre>

<p>whereas the <code>&amp;</code> is the matched pattern from <code>/S\|E/</code>.</p>
","3169"
"Tag navigation using CTRL+] does not work with Non English keyboard on Windows","1102","","<p>When using <em>gVim</em> on <em>Windows 7</em> I cannot use <strong>^]</strong> (<kbd>CTRL</kbd>+<kbd>]</kbd>) to jump to tags as described in the <em>Vim</em> documentation:</p>

<pre><code>&lt;C-LeftMouse&gt;                   *&lt;C-LeftMouse&gt;* *CTRL-]*
CTRL-]      Jump to the definition of the keyword under the
            cursor.  Same as "":tag {ident}"", where {ident} is the
            keyword under or after cursor.
            When there are several matching tags for {ident}, jump
            to the [count] one.  When no [count] is given the
            first one is jumped to. See |tag-matchlist| for
            jumping to other matching tags.
            {Vi: identifier after the cursor}
</code></pre>

<p>This used to bother me a lot when learning <em>Vim</em>. In the end I managed to solve it by using this hacky mapping</p>

<pre><code>nnoremap &lt;leader&gt;t :tag &lt;c-r&gt;&lt;c-w&gt;&lt;cr&gt;
</code></pre>

<p>which allowed me to jump to tags using <code>\t</code> (I used the default setting of <code>\</code> as<code>&lt;leader&gt;</code>).</p>

<p>This is not a problem for me anymore as I now only use <em>gnu/linux</em> for programming and I have already read pretty much all help there is to read. But considering that this contributed to making my experience learning <em>Vim</em> so much worse I ask here to get this solved for people who are in the same situation I was in.</p>

<p>Why doesn't <kbd>CTRL</kbd>+<kbd>]</kbd> work for me on <em>Windows 7</em> and how can it be fixed?</p>

<p><strong>Edit</strong>: The title has been edited with the information that this problem is caused by the keyboard layout I used.</p>
","<p>Say hello to knowledge fragmentation: <a href=""https://stackoverflow.com/q/6932702/520162"">https://stackoverflow.com/q/6932702/520162</a> This question was already asked and answered on StackOverflow.</p>

<p><strong>The key is to  press <kbd>CTRL</kbd> and the key that is located where the <kbd>]</kbd> lives on the US keyboard</strong>. I had the issue with a QUERTZ German keyboard and have to press <kbd>CTRL</kbd>-<kbd>+</kbd></p>

<p>Compare: US keyboard:
<a href=""https://i.stack.imgur.com/53fZv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/53fZv.png"" alt=""US keyboard""></a></p>

<p>German keyboard:
<a href=""https://i.stack.imgur.com/hhRpq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hhRpq.png"" alt=""German keyboard""></a></p>

<p>Another obvious way would be to simply remap the functionality to a different keystroke. Since you want to g<strong>o</strong> t<strong>o</strong> the tag under the cursor, you could use <kbd>o</kbd><kbd>o</kbd> for this:</p>

<pre><code>:map oo &lt;C-]&gt;
</code></pre>
","5736"
"Prevent Vim from clearing the terminal after exit","1101","","<p>If I do:</p>

<pre><code>$ less file
</code></pre>

<p>And press <code>q</code> to exit <code>less</code>, I stil see the same text as I had on the screen when <code>less</code> was still running.</p>

<p>However, if I do</p>

<pre><code>$ vim file
</code></pre>

<p>And <code>:q</code>, my terminal is blanked...</p>

<p>Screenshots of my terminal after quiting <code>less</code> and <code>vim</code>:</p>

<p><img src=""https://i.stack.imgur.com/RXIAc.png"" alt=""enter image description here"">
<img src=""https://i.stack.imgur.com/tniz2.png"" alt=""enter image description here"">  </p>

<p>Can I somehow prevent this? This is <em>only</em> on my Linux system. My FreeBSD system actually works as expected (using the same software/settings all around, <code>TERM</code> is <code>xterm-color</code> for both, <code>vim -u NONE</code> doesn't make a difference).</p>

<p>Example of what I would like to have:</p>

<p><img src=""https://i.stack.imgur.com/mxeMe.png"" alt=""enter image description here""></p>
","<p>By default VIM, when terminating, sends the string configured with the option <code>t_te</code> to the hosting terminal to tell it to clear the screen. To avoid it just <code>:set t_te=</code> to send nothing to the terminal and avoid screen clearing. See <code>:help term</code> form more information about terminal capabilities.</p>
","435"
"Prevent NERDTree from switching tabs when opening a file node?","1095","","<p>In NERDTree, if I select a file node and hit <kbd>o</kbd>, it opens the file in a window in the current tab. However, if that particular file is already open in another tab, NERDTree switches to that tab. I find this quite disorienting in my workflow.</p>

<p>Is there an option to tell NERDTree to stay in the current tab?</p>

<hr>

<p>Update: I opened a pull request on the NERDTree repo at Github to add an option to prevent this tab-switching: <a href=""https://github.com/scrooloose/nerdtree/pull/417"" rel=""nofollow"">https://github.com/scrooloose/nerdtree/pull/417</a> </p>
","<p>There is currently no way to do this.</p>

<p>From the source code (ref. <a href=""https://github.com/scrooloose/nerdtree/blob/c2dd750860288b8cf81f6bd5ff49dc5ee76a34d5/lib/nerdtree/opener.vim#L238"" rel=""nofollow"">lib/nerdtree/opener.vim line 238</a>):</p>

<pre><code>function! s:Opener._openFile()
    if self._reuse &amp;&amp; self._reuseWindow()
        return
    endif
</code></pre>

<p>And the <code>_reuseWindow()</code> function (ref. <a href=""https://github.com/scrooloose/nerdtree/blob/c2dd750860288b8cf81f6bd5ff49dc5ee76a34d5/lib/nerdtree/opener.vim#L309"" rel=""nofollow"">line 309</a>):</p>

<pre><code>function! s:Opener._reuseWindow()
    ""check the current tab for the window
    let winnr = bufwinnr('^' . self._path.str() . '$')
    if winnr != -1
        call nerdtree#exec(winnr . ""wincmd w"")
        call self._checkToCloseTree(0)
        return 1
    else
        ""check other tabs
        let tabnr = self._path.tabnr()
        if tabnr
            call self._checkToCloseTree(1)
            call nerdtree#exec('normal! ' . tabnr . 'gt')
            let winnr = bufwinnr('^' . self._path.str() . '$')
            call nerdtree#exec(winnr . ""wincmd w"")
            return 1
        endif
    endif
    return 0
endfunction
</code></pre>

<p>It wouldn't be too hard, however, to simply remove the entire <code>else</code>  block in the code above (or comment it out). Since we're on the Vim site, why not do it with Vim:</p>

<pre><code>vim ""+/function! s:Opener._reuseWindow()"" ""+/else"" ""+normal d9j"" ""+wq"" lib/nerdtree/opener.vim
</code></pre>

<p>Run this command from the directory in which the NERDTree plugin is located to automagically remove this functionality.</p>
","717"
"Replace the word at the cursor with a single character?","1092","","<p>An operation I do often in vim is to replace the word at the cursor with a single letter.</p>

<p>Currently, I do this via:</p>

<p><kbd>c</kbd><kbd>w</kbd> x <kbd>Esc</kbd></p>

<p>(Where x is my replacement letter).</p>

<p>This isn't bad, but is there a way to do this without entering insert mode, so that I don't have to hit Escape when I'm done?</p>
","<p><code>rXldw</code></p>

<p>Replace the first character with X then move right and delete the rest of the word. No insert mode required. </p>

<p><code>rXlde</code> is actually needed if you are working with a word with trailing space, rather than a delimiter.</p>
","14278"
"How to redirect the output of a command as the quickfix list to a vim server / function?","1089","","<p>When I click on a link in thunderbird and firefox is already running, it doesn't open a new window, just a new tab.</p>

<p>I want the same thing for vim: no matter where I am and how I send a bunch of files to it, I want them opened in a single session.</p>

<p>To do this, I've added the following code in my <code>~/.bashrc</code> and <code>~/.zshrc</code>.</p>

<pre><code>function nv {

vim --serverlist | grep -q VIM

if [ $? -eq 0 ]; then

    if [ $# -eq 0 ]; then
        vim
    else
        vim --remote ""$@""
    fi

else
    vim --servername vim ""$@""
fi

}
</code></pre>

<p>It defines the function <code>nv</code> which can do 3 things :</p>

<ul>
<li>if no VIM server is running, <code>nv</code> launches one</li>
<li>if a VIM server is
running and one or more arguments were passed to <code>nv</code>, it sends them
to the server</li>
<li>if a VIM server is running but no argument was passed
to <code>nv</code>, it launches a simple vim session (so that I can still launch a separate vim session by using the same function / alias)</li>
</ul>

<hr>

<p>I've recently <a href=""https://www.reddit.com/r/vim/comments/3u23ro/vim_q_ftw/"" rel=""nofollow"">read</a> that you could redirect the output of a shell command as the quickfix list to vim. For example :</p>

<pre><code>vim -q &lt;(grep -Rn foo *)
</code></pre>

<p>It works with vim but not with my function <code>nv</code>.</p>

<p>I would like to use the same syntax so that the output of <code>grep</code> is not opened by a new vim session, but by the VIM server.</p>

<p>When I use <code>nv -q &lt;(grep -Rn foo *)</code>, the VIM server doesn't receive the output of <code>grep</code> but a file called <code>-q</code> and another one : <code>/proc/&lt;pid&gt;/fd/11</code>.</p>

<p>I know why it doesn't work, the function was not written with that case in mind.</p>

<p>But then, I tried something simpler : <code>vim --remote -q &lt;(grep -Rn foo *)</code></p>

<p>And the result is the same, it doesn't work, the server still receives two files : <code>-q</code> and <code>/proc/&lt;pid&gt;/fd/11</code>.</p>

<p>I would like to know if it's possible to edit the code of my <code>nv</code> function so that it works when I use it with the <code>-q</code> switch to remotely populate the quickfix list of an already running vim server, and if so receive some advice on how to do it.</p>

<p>If it's not, at least, I would like to know how to use the <code>-q</code> and <code>--remote</code> switch simultaneously.</p>

<hr>

<p><strong>Edit</strong> : I may be wrong but I don't think <code>-q</code> and <code>--remote</code> can be used simultaneously.</p>

<p>For the moment, I've come up with the following command :</p>

<pre><code>vim --remote-send "":grep -Rn foo *&lt;cr&gt;&lt;cr&gt;""
</code></pre>

<p>Now I need to edit the <code>nv</code> function to integrate it, but I don't know how to do it.</p>

<p>Edit bis: I don't think it's worth the trouble, I'll stick with <code>nv</code> and the last command when needed.</p>
","<p>You cannot use <code>--remote</code> with <code>-q</code>, any arguments after <code>--remote</code> are treated as filenames:</p>

<pre><code>--remote    Connect to a Vim server and make it edit the files given in
            the rest of the arguments.  If no server is found a warning
            is given and the files are edited in the current Vim.
</code></pre>

<p>That said, you cannot use the result of process substitution (<code>&lt;(cmd)</code>) with a program running elsewhere. If you notice, the file name from process substitution uses <code>/proc/self</code>:</p>

<pre><code>$ echo &lt;(date)
/proc/self/fd/11
</code></pre>

<p>The shell sets up the file descriptors of the executed command so that one of them points the substituted process. Naturally, this <code>fd</code> cannot be easily used by a separate process - you'll at least need to translate <code>/proc/self</code> to <code>/proc/&lt;PID&gt;</code>.</p>

<p>Therefore, it would be easier if we could run the command in Vim itself. The <a href=""http://vimhelp.appspot.com/quickfix.txt.html#%3Acexpr"" rel=""nofollow""><code>cexpr</code></a> command should help us there:
quickfix.txt  For Vim version 7.4.  Last change: 2015 Sep 08</p>

<pre><code>                                                        :cex :cexpr E777
:cex[pr][!] {expr}      Create a quickfix list using the result of {expr} and
                        jump to the first error.
                        If {expr} is a String, then each new-line terminated
                        line in the String is processed using the global value
                        of 'errorformat' and the result is added to the
                        quickfix list.
                        If {expr} is a List, then each String item in the list
                        is processed and added to the quickfix list.  Non
                        String items in the List are ignored.
                        See :cc for [!].
                        Examples: 
                                :cexpr system('grep -n xyz *')
                                :cexpr getline(1, '$')
</code></pre>

<p>Huh, one of the examples uses <code>grep</code> much the same way you do.</p>

<p>Using <code>cexpr</code>, the following function could work:</p>



<pre><code>function nv (
    if vim --serverlist | grep -q VIM; then
        if [ $# -eq 0 ]; then
            vim
        elif [[ $1 == -q ]]; then
            shift
            IFS=' '
            vim --remote-send "":cexpr system('$*')&lt;cr&gt;&lt;cr&gt;""
        else
            vim --remote ""$@""
        fi
    else
        vim --servername VIM ""$@""
    fi
)
</code></pre>

<p>Use it thus:</p>

<pre><code>nv -q grep -Rn foo *
</code></pre>

<p>That's to say, you pass the command as you would write it to <code>nv -q</code>. The function checks if the first argument is <code>-q</code>, and then uses <code>vim --remote-send</code> to call <code>cexpr</code> and <code>system()</code> on the rest of the arguments.</p>

<p>This bit might need explaining:</p>

<pre><code>shift
IFS=' '
... system('$*') ...
</code></pre>

<p>Since the first argument is <code>-q</code> and it's no longer needed, and using <code>$*</code> is more convenient, I simply discard <code>-q</code>.</p>

<p>Now, there are two quick ways of combining the arguments: <code>$@</code> and <code>$*</code>. A quoted <code>$@</code> is usually preferred, if you want separate words (we don't). So, we use <code>$*</code>, which combines the arguments using the first character of <code>IFS</code>. What the value of IFS is depends on the shell, so I set it to a space to get the needed effect.</p>

<p>The best effect is if you send a quoted command:</p>

<pre><code>nv -q 'grep -Rn foo *'
</code></pre>

<p>Then <code>*</code> won't be expanded by the shell you called it from, thus preventing problems when called by <code>system()</code>.</p>

<h3>Note</h3>

<p>My <a href=""http://paste.ubuntu.com/13516374/"" rel=""nofollow"">earlier version</a> of the function used <code>{}</code> to group the command. This version uses <code>()</code>, to create a subshell. This makes it easier to set variables like <code>IFS</code> locally without disturbing the shell.</p>
","5618"
"How do I convert a String to a Number, catching invalid strings?","1085","","<p>I am trying to convert a String <code>'1'</code> to a Number (int) <code>1</code> in a vimL script. I have used the built-in command <code>str2nr()</code> so far, however I was not able to write this in an elegant and effective way.</p>

<p>Ideally I would like to catch invalid strings before attempting to convert them to an integer.</p>

<p>For example:
<code>'abc1'</code> will return <code>0</code> when run through the <code>str2nr()</code> command.</p>

<p>I probably need the right regex pattern to catch anything such as:
<code>'a'</code>, <code>'a1b'</code> <code>'7xy'</code> as an illegal value and anything like: <code>'1'</code> or <code>'7'</code> as a legal value, thus filtering out all non-integer values.</p>

<p>I tried something in the lines of:</p>

<pre><code>let l:value = 'abcX1'
let l:debug = l:value =~ '\[0-9]^\[A-Z]\^[a-z]\' ? ""YES"" : ""NO""
echom l:debug
</code></pre>

<p>This is expected to return a <code>NO</code>, while this:</p>

<pre><code>let l:value = '7'
let l:debug = l:value =~ '\[0-9]^\[A-Z]\^[a-z]\' ? ""YES"" : ""NO""
echom l:debug
</code></pre>

<p>is expected to return a <code>YES</code>.</p>

<p>However, as I said, I am not good with regular expressions and probably building the wrong pattern up in those examples above as they are not working.</p>

<p>Thanks.</p>
","<p>You can represent the set of non-digit characters with the atom <code>\D</code> or with the expression <code>[^0-9]</code>.</p>

<p>So, if your definition of an invalid string is any string containing a non-digit character, you could probably detect it like this:<br>
<code>let debug = value =~ '\D' ? ""NO"" : ""YES""</code><br>
or like this:<br>
<code>let debug = value =~ '[^0-9]' ? ""NO"" : ""YES""</code>  </p>

<p>You can describe a set of characters with a pair of brackets <code>[]</code>, and then put inside all the characters you want. You could imagine they're separated by the logical operator OR.  </p>

<pre><code>[012]  = 0 or 1 or 2
[0-9]  = 0 or 1 or 2 or ... 9
[^0-9] = anything except 0 or 1 or ... 9
</code></pre>

<p>A caret sign (<code>^</code>) positioned inside the pair of brackets just after the opening one allows you to invert the set of characters. It could be read as: <em>anything except what follows</em>.</p>

<p>The regex engine of Vim provides another kind of notation to describe some sets of characters which are then called atoms. For example:</p>

<ul>
<li><code>\d</code> for digit, same as <code>[0-9]</code></li>
<li><code>\s</code> for whitespace, a space or a tab</li>
<li><code>\w</code> for word character, same as <code>[0-9A-Za-z_]</code></li>
</ul>

<p>Usually you can ""invert"" an atom by using an uppercase character (there are some exceptions though):</p>

<ul>
<li><code>\D</code> for non-digit, same as <code>[^0-9]</code></li>
<li><code>\S</code> for non-whitespace, anything except a space or a tab</li>
<li><code>\W</code> for non-word character, same as <code>[^0-9A-Za-z_]</code></li>
</ul>

<p>If you want to know more about the various sets of characters or atoms you can use to build your regexes, see:</p>

<p><code>:help /character-classes</code></p>
","6163"
"How do I avoid exiting vim to open a new file?","1084","","<p>I usually exit vim to open other files, I know it is not productive and I want to avoid it. I want to use <em>netrw</em> instead to open the files I want. Is there any way to prevent me from exiting vim, using <code>:x</code>, <code>:wq</code> and others ?</p>

<p>I've found out <a href=""http://www.vim.org/scripts/script.php?script_id=1072"" rel=""nofollow"">this</a> script but it requires a graphical vim</p>

<p>I cannot recompile vim. Below I've included version information:</p>

<blockquote>
<pre><code>VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Feb  4 2012 09:50:29)
Included patches: 1-108
Compiled by 'http://www.opensuse.org/'
Huge version without GUI.  Features included (+) or not (-):
+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent 
-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments 
+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic 
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path 
+float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand 
+jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap 
+menu +mksession +modify_fname +mouse -mouseshape +mouse_dec -mouse_gpm 
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte 
+multi_lang -mzscheme -netbeans_intg -osfiletype +path_extra -perl +postscript 
+printer +profile -python +quickfix +reltime +rightleft -ruby +scrollbind 
+signs +smartindent +sniff +statusline -sun_workshop +syntax +tag_binary 
+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
 -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo 
+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp
 -xterm_clipboard -xterm_save 
   system vimrc file: ""/etc/vimrc""
     user vimrc file: ""$HOME/.vimrc""
      user exrc file: ""$HOME/.exrc""
  fall-back for $VIM: ""/etc""
 f-b for $VIMRUNTIME: ""/usr/share/vim/current""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -fmessage-length=0 -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector -funwind-tables -fasynchronous-unwind-tables -g -Wall -pipe -fno-strict-aliasing -fstack-protector-all        
Linking: gcc   -L/usr/local/lib -o vim       -lm -lncurses -lacl
</code></pre>
</blockquote>
","<p><strong>Update</strong>: I created a <a href=""http://code.arp242.net/confirm_quit.vim"">confirm_quit.vim</a> plugin; it has some additional options, like only asking for confirmation when quiting the last buffer (rather than closing <em>any</em> buffer).</p>

<p>I will leave the below code as-is because it demonstrates how you can achieve something like this in a simple way, but I recommend you use the code from the link :-)</p>

<hr>

<p><strong>Update2</strong>: After re-reading your post and reading <em>statox</em>'s answer, I had another idea; instead of asking for confirmation, why not run <code>:Explore</code> when using <code>:q</code>?</p>

<p>My plugin now supports this with the <code>confirm_quit#command()</code> function. It's not mapped by default (this would be too surprising), but you can map it like so:</p>

<pre><code>let g:confirm_quit_nomap = 1
cnoremap &lt;silent&gt; x&lt;CR&gt;  :call confirm_quit#confirm(1, 'last')&lt;CR&gt;
nnoremap &lt;silent&gt; ZZ     :call confirm_quit#confirm(1, 'last')&lt;CR&gt;
cnoremap &lt;silent&gt; q&lt;CR&gt;  :call confirm_quit#command(0, 'last', 'Explore')&lt;CR&gt;
cnoremap &lt;silent&gt; wq&lt;CR&gt; :call confirm_quit#command(1, 'last', 'Explore')&lt;CR&gt;
</code></pre>

<p>See <code>confirm_quit#command()</code> for some more information.</p>

<hr>

<p><strong>Original</strong>: The <a href=""http://www.vim.org/scripts/script.php?script_id=1072"">script you link to</a> also works without a GUI. The only reason it doesn't is because it's wrapped in <code>""if has(""gui_running"")</code>...<br>
I'm not sure why the author thinks this only runs with gVim; perhaps he was confused/mistaken, or perhaps something changed in Vim in the 11 years since that plugin was published.</p>

<p>Here is a modified version which works in terminal Vim. It also fixes a bug where <code>:wq</code> didn't work, I added a mapping for <code>ZZ</code>, and made a few small improvements.</p>

<pre><code>fun! ConfirmQuit(writeFile)
    if (a:writeFile)
        if expand('%') == ''
            echohl ErrorMsg | echomsg 'E32: No file name' | echohl None
            return
        endif
        write
    endif

    let l:confirmed = confirm('Do you really want to quit?', ""&amp;Yes\n&amp;No"", 2)
    if l:confirmed == 1
        quit
    endif
endfun

cnoremap &lt;silent&gt; q&lt;CR&gt;  :call ConfirmQuit(0)&lt;CR&gt;
cnoremap &lt;silent&gt; wq&lt;CR&gt; :call ConfirmQuit(1)&lt;CR&gt;
cnoremap &lt;silent&gt; x&lt;CR&gt;  :call ConfirmQuit(1)&lt;CR&gt;
nnoremap &lt;silent&gt; ZZ     :call ConfirmQuit(1)&lt;CR&gt;
</code></pre>

<p>You can also add more commands if you want (such as <code>:quit</code>, <code>:q!</code>, etc.)</p>
","3712"
"Is there a way to reliably go back and forth in file history","1084","","<p>I would like to go to the file I just edited last and next kind of like MRU plugins do.</p>

<p><code>:bnext</code> and <code>:bprev</code> works sometimes, but most often than not I just end up in some obscure file I don't remember editing and forced to fall back to MRU plugin.</p>

<p>Is there a way to fix it?</p>

<p><code>Ctrl-^</code> swaps between two last files. What is the best way to navigate between more?</p>

<p>I understand it might be tricky but I agree to anything that can improve current <code>:bn</code> <code>:bp</code> behavior. The buffers I often see are totally out of place. Maybe there is a plugin that can keep track of the recent files and provide hooks so I can create mappings?</p>

<p>Replying to comments cleared up my thoughts a bit. I believe what I want is to be able to move through files in order of latest saves. That way if I go back in history the order won't change until I save the file which then becomes last and make one step ""back"" to the file saved right before that, i.e. the one I've started from. </p>

<p>Something like <code>Ctrl-O</code> <code>Ctrl-I</code> pair that switches files immediately without jumping around the current buffer. Sort of like <code>u</code> and <code>U</code> in netrw:</p>

<pre><code>   u    Change to recently-visited directory                 |netrw-u|
   U    Change to subsequently-visited directory             |netrw-U|
</code></pre>
","<p>I wrote a little function to repeatedly hit CTRL-O for me, until the buffer changes.</p>

<p>You can find it <a href=""https://github.com/joeytwiddle/rc_files/blob/master/.vim/plugin/back_to_recent_buffer.vim"" rel=""nofollow"">here</a>.  I mapped it to CTRL-U but you could override CTRL-O if you wanted to.</p>

<pre><code>function! GoBackToRecentBuffer()
  let startName = bufname('%')
  while 1
    exe ""normal! \&lt;c-o&gt;""
    let nowName = bufname('%')
    if nowName != startName
      break
    endif
  endwhile
endfunction

nnoremap &lt;silent&gt; &lt;C-U&gt; :call GoBackToRecentBuffer()&lt;Enter&gt;
</code></pre>

<p>You could probably write something similar for <code>&lt;C-I&gt;</code>.</p>

<p>Issues:</p>

<ul>
<li>If there is no previous buffer, it will continue silently looping until you hit CTRL-C!</li>
</ul>

<p>Related:</p>

<ul>
<li><code>:jumps</code> lists the historical locations that CTRL-O will step back through.</li>
<li>Vim's default CTRL-T is a good alternative to mashing CTRL-O, because it is coarser grained: it moves back through tag jumps only.</li>
</ul>
","4077"
"How can I insert text from the command prompt?","1082","","<p>I was working on building a regex in the command prompt. After a few iterations, my prompt looks like this:</p>

<pre><code>:echom 'test_foo_bar.py' =~ '^test_.*\.py$' ? 'yes' : 'no'
</code></pre>

<p>Now that I have my regex ready, I want to put it in the script I'm editing. Is there an easy way to take the text from my command prompt and stick it in the current buffer? I'm specifically interested in the regex, but if I could dump the whole prompt to the buffer it would be easy enough to edit out the rest.</p>
","<p>In addition to the <kbd>Ctrl</kbd><kbd>F</kbd>, which provides complete navigation on the command history, you could use <a href=""http://vimhelp.appspot.com/insert.txt.html#i_CTRL-R""><kbd>Ctrl</kbd><kbd>R</kbd>+<kbd>:</kbd> in insert mode</a> (faster but works only for the latest command):</p>

<pre><code>CTRL-R {0-9a-z""%#*+:.-=}                    *i_CTRL-R*
        Insert the contents of a register.  Between typing CTRL-R and
        the second character, '""' will be displayed to indicate that
        you are expected to enter the name of a register.
        The text is inserted as if you typed it, but mappings and
        abbreviations are not used.  If you have options like
        'textwidth', 'formatoptions', or 'autoindent' set, this will
        influence what will be inserted.  This is different from what
        happens with the ""p"" command and pasting with the mouse.
        Special registers:
            '""' the unnamed register, containing the text of
                the last delete or yank
            '%' the current file name
            '#' the alternate file name
            '*' the clipboard contents (X11: primary selection)
            '+' the clipboard contents
            '/' the last search pattern
            ':' the last command-line
            '.' the last inserted text
            '-' the last small (less than a line) delete
</code></pre>

<p>You could also use the equivalent in <a href=""http://vimhelp.appspot.com/change.txt.html#p"">normal mode: <kbd>""</kbd><kbd>:</kbd><kbd>p</kbd></a>:</p>

<pre><code>                            *p* *put* *E353*
[""x]p           Put the text [from register x] after the cursor
            [count] times.  {Vi: no count}

                            *P*
[""x]P           Put the text [from register x] before the cursor
            [count] times.  {Vi: no count}
</code></pre>
","8364"
"Is it possible to open a tab in a window and not a window in a tab?","1077","","<p>The question in short: <strong>Is it possible to open a tab in a window and not a window in a tab?</strong>. Like this:</p>

<p><a href=""https://i.stack.imgur.com/Mdyai.png""><img src=""https://i.stack.imgur.com/Mdyai.png"" alt=""vim the tabs in the windows""></a></p>

<p>Instead of this:</p>

<p><a href=""https://i.stack.imgur.com/E4lNv.png""><img src=""https://i.stack.imgur.com/E4lNv.png"" alt=""vim the windows in the tabs, the windows visible""></a>
<a href=""https://i.stack.imgur.com/xOkcF.png""><img src=""https://i.stack.imgur.com/xOkcF.png"" alt=""vim the windows in the tabs, the windows hidden""></a></p>

<p><strong>Some background related to the question:</strong></p>

<p>I'm used to the interface like the one on the first screen shot above, where the tabs are in the windows.</p>

<p>Initially I was able to achieve this in Vim with the help of a console app's functionality, because I was very new to Vim and didn't want to remember even more commands to work with windows. But this approach has some inconveniences to me:</p>

<ul>
<li>no sharing of registers</li>
<li>the <code>.viminfo</code> file is opened separately for each instance of vim, and therefore some important information can be lost, if the instance of vim, where it was present was closed first (because each instance of the editor overwrites the <code>.viminfo</code> file).</li>
</ul>

<p>I've managed some workarounds for each of these problems, listed below in case anyone other will face this issue:</p>

<ul>
<li>for the sharing of registers between windows of a terminal, I installed the <code>xclip</code> application and copy registers with ex-commands like: <code>call system('xclip', @"")</code></li>
<li>for the <code>.viminfo</code> rewrite issues I just try to pay attention to the order of closing Vim instances.</li>
</ul>

<p>But the other day I got tired of this, and decided to try the windows in Vim, and the first thing I found was that the tabs are sort of ""above"" the windows, what I personally do not like.</p>

<p>I looked <a href=""http://vim.wikia.com/wiki/Using_tab_pages"">some Vim docs</a> about this, and it seems that it is not possible to open a tab in a window. Can anyone answer to this by either explaining how it is possible, or affirming that it is not possible?</p>
","<p>From <a href=""http://vimdoc.sourceforge.net/htmldoc/tabpage.html#tab-page-intro""><code>:h tab-page-intro</code></a>:</p>

<blockquote>
  <p>A tab page holds one or more windows.  You can easily switch between tab
  pages, so that you have several collections of windows to work on different
  things.</p>
  
  <p>Usually you will see a list of labels at the top of the Vim window, one for
  each tab page.</p>
</blockquote>

<p>Tabs containing windows is the way Vim was designed to work. I think you should get used to this workflow because trying to use Vim in a different way will introduce more problems than it solves.</p>
","11073"
"Deleting In Vim and Then Pasting Without new Line","1075","","<p>Many times in vim I would like to delete a line completely, so I use dd. However, I then need to paste that line into some other position within a line, but this inserts a newline before pasting, therefore, making it very difficult for me to get the desired result.
For example,</p>

<pre><code>while( pasteInHere )
{
    cin &gt;&gt; n; // Delete this line completely with dd
}
</code></pre>

<p>when I do this with the above code I get:</p>

<pre><code>while( pasteInHere )
cin &gt;&gt; n; // Delete this line completely with dd
{
}
</code></pre>

<p>which is very far from the result I want...how can I suppress this newline behaviour, or use another method that does it very efficiently? I don't think d$ is good because I not  only have to go to beginning of line, but if I want to delete the empty line too I need to delete it in another register, I feel like there should be an easier way! Thanks.</p>
","<p>You can go anywhere in the line above the line you want to delete, then press <code>JD</code> and paste it with <code>p</code> at the desired point. </p>

<ul>
<li><code>J</code> joins the two lines and moves you at the start of the text you wanted to delete. This deletes a new-line character and the indentation of the line you want to move. </li>
<li><code>D</code> deletes from the current cursor position to the end of the line but preserves the new-line character. </li>
</ul>

<p><strong>Hint:</strong> You can use <code>:pu</code> if you deleted with <code>D</code> or yanked with <code>y$</code> and you want to paste <em>with</em> a new line. </p>
","3955"
"Get the current window/buffer/tabpage in Vimscript","1071","","<p>In python, when using the vim module, it is incredibly simple to get the current window/buffer/tabpage:</p>

<pre><code>current_win = vim.current.window
current_buff = vim.current.buffer
current_tabpage = vim.current.tabpage
</code></pre>

<p>My question is, how do you do this in pure VimL / Vimscript and what type of object is returned? I really can't seem to find this anywhere in <code>windows.txt</code> (<code>:h windows</code>).</p>
","<p>Well… it's just as simple in vimscript.</p>

<h3>Current window</h3>

<p>Python:</p>

<pre><code>current_win = vim.current.window
</code></pre>

<p>Vimscript:</p>

<pre><code>let current_win = winnr()
</code></pre>

<h3>Current buffer</h3>

<p>Python:</p>

<pre><code>current_buff = vim.current.buffer
</code></pre>

<p>Vimscript:</p>

<pre><code>let current_buff = bufnr(""%"")
</code></pre>

<h3>Current tabpage</h3>

<p>Python:</p>

<pre><code>current_tabpage = vim.current.tabpage
</code></pre>

<p>Vimscript:</p>

<pre><code>let current_tabpage = tabpagenr()
</code></pre>

<p>See <code>:help functions</code>.</p>
","5485"
"How can I run a function once after the buffer has been completely loaded?","1071","","<p>I am writing a filetype plugin that will (among other things) <a href=""https://github.com/lervag/vimtex/blob/master/autoload/vimtex/fold.vim"" rel=""nofollow"">fold LaTeX documents</a> by use of a custom foldlevel function. In order to make the folding efficient, I use <code>foldmethod=manual</code> during editing and I define a function to refresh the folds, something like: </p>

<pre><code>function! RefreshFolds()
  setlocal foldmethod=expr
  normal! zx
  setlocal foldmethod=manual
endfunction
</code></pre>

<p>A small catch is that this requires me to refresh the folds manually after I open a buffer. In general, I want to refresh the folds manually, but I want them to be refreshed and defined when the buffer is opened. The first thought was that I could simply call <code>Refreshfolds()</code> during initialization, but for some reason this didn't work. Instead I have found that I can refresh the folds by utilizing a self destructing autocommand as follows:</p>

<pre><code>augroup init_folds
  autocmd!
  autocmd CursorMoved &lt;buffer&gt; call InitFolds()
augroup END

function! InitFolds()
  call RefreshFolds()
  autocmd! init_folds
endfunction
</code></pre>

<p>This works as desired in most cases, but not if I open several buffers in separate tabs with <code>vim -p *.tex</code>. In this case, it seems the buffers are opened simultaneously, which means the autocommand is only run for one of the buffers before it self destructs.</p>

<p>What I want is to keep <code>foldmethod=manual</code>, but at the same time I want to ensure that folds are refreshed through <code>RefreshFolds()</code> after a buffer is opened. Does anyone know how to either fix the above approach so that it works when buffers are loaded simultaneously, or of a different approach that does not have the same problem?</p>

<p>Note: This problem comes from <a href=""https://github.com/lervag/vimtex/issues/52#issuecomment-130080829"" rel=""nofollow"">this Github issue</a>.</p>
","<p>The problem was that when the buffers are loaded simultaneously, then the autocommand group was deleted by one buffer before it was applied on the other buffers.</p>

<p>To solve the issue, I modified the code so that each buffer has a unique autocommand group name. I did this with a script local counter and by saving the name to a buffer local variable. I delete the variable when it is no longer needed.</p>

<p>For completeness, here is a working example:</p>

<pre><code>let s:id = get(s:, 'id', 0) + 1
let b:my_augroup = 'init_folds_' . s:id
execute 'augroup' b:my_augroup
  autocmd!
  autocmd CursorMoved &lt;buffer&gt; call InitFolds()
augroup END

function! InitFolds()
  call RefreshFolds()
  execute 'autocmd!' b:my_augroup
  execute 'augroup!' b:my_augroup
  unlet b:my_augroup
endfunction
</code></pre>
","4283"
"How can I open multiple tabs at once?","1061","","<p>If I use:</p>

<pre><code>:tabedit file1 file2
</code></pre>

<p>I get:</p>

<pre><code>E172: Only one file name allowed
</code></pre>

<p>Is there any way to use <code>:tabedit</code> with multiple file names? Or another way to open multiple tabs at once?</p>
","<p>Given the problems &amp; complexity in <a href=""https://vi.stackexchange.com/a/2109/51"">my other answer</a> using the ""built-in"" way by modifying the argument list, I've added by own small function to do this:</p>

<pre><code>"" Open multiple tabs at once
fun! OpenMultipleTabs(pattern_list)
    for p in a:pattern_list
        for c in glob(l:p, 0, 1)
            execute 'tabedit ' . l:c
        endfor
    endfor
endfun

command! -bar -bang -nargs=+ -complete=file Tabedit call OpenMultipleTabs([&lt;f-args&gt;])
</code></pre>

<p>You can now use <code>:Tabedit *.vim</code>. This function will expand all globbing patterns, and execute <code>:tabedit &lt;f&gt;</code> for every file. You can add as many pathnames as you want, for example this all works:</p>

<pre><code>:Tabedit file.rb
:Tabedit *.c
:Tabedit file1.py file2.py _*.py
:Tabedit /etc/hosts file{1,2}.sh
</code></pre>

<p>Well, and so forth...</p>

<p>I put this in a little <a href=""https://github.com/Carpetsmoker/globedit.vim"" rel=""nofollow noreferrer"">globedit.vim</a> plugin, which also contains command for <code>:Edit</code>, <code>:Split</code>, etc.</p>
","2110"
"Why is set exrc dangerous?","1061","","<p>I've seen <code>set exrc</code> mentioned in various places for using per-directory <code>.vimrc</code> files, but every time it's been mentioned it's been with strong admonition not to actually use it because it's dangerous. I've also come across <code>set secure</code> which is supposed to fix some of the inherit danger of <code>set exrc</code>, but even with that the consensus seems to be not to use <code>set exrc</code>. </p>

<p>I've heard bits and pieces of why, but what exactly are the dangers of using <code>set exrc</code>, with or without <code>set secure</code>?</p>
","<p>Because you're telling vim to perform some commands from a file you may not have control over or someone else could have written. Say you grab something from github, and deep in the tree there's a .vimrc. If you vim something in that directory and have <code>set exrc</code>, you're telling vim to run the commands in the .vimrc you got from github. Do you completely trust whoever created that file? Because you're letting vim run whatever commands they put in that file. Or say you're on a machine regularly used by multiple people (they still exist :-) ), and someone asks you to look at something in their home directory (or /tmp, or any place they can write to). You cd there, it's a text file, so you do a <code>vim file</code>. With <code>set exrc</code>, you're also telling vim to run the commands in .vimrc in that directory. Do you completely trust that user, or in a world writable directory like /tmp, every user who can log in to that machine?</p>

<p><code>set secure</code> mitigates the problem somewhat by limiting some things that can be done in a .vimrc, but if the per-directory .vimrc can made to be owned by you (such as in the github example, or on a multi-user machine where some users can chown files to you), <code>set secure</code> is ignored, so you still have the same problems.</p>
","5059"
"How can I start vim and then execute a particular command that includes a \, from the command line?","1059","","<p>In my <code>~/.vimrc</code>, I have a command defined approximately like this:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;Leader&gt;n ':new ~/Notes/' . strftime('%F') . '-'
</code></pre>

<p>It is designed for creating notes files that contain the current date in the filename. The keybinding is designed to leave my cursor on the command line so that I can type the topic of the note and hit <kbd>Return</kbd>.</p>

<p>This works from within vim fine. However, I am also trying to specify a terminal command that I can use to open vim and then fire this command. I've tried:</p>

<pre><code>vim -c '\n'
</code></pre>

<p>(my Leader is set to the default of <code>\</code>, which I would prefer not to change)</p>

<p>However, this doesn't work - instead I just get <strong>Error detected while processing command line: E10: \ should be followed by /, ? or &amp;</strong>. I'm not sure if this is a bug in vim or if I'm doing something wrong. I also tried:</p>

<pre><code>vim -c '&lt;Leader&gt;n'
</code></pre>

<p>But this gives: <strong>Error detected while processing command line: E488: Trailing characters: n Press ENTER or type command to continue</strong>.</p>

<p>Is there a way to achieve what I want?</p>
","<p>You could make a function that creates the new entry, and then use the function as part of your mapping:</p>

<pre><code>nnoremap &lt;leader&gt;t :call NewEntry()&lt;cr&gt;
function! NewEntry()
  let title = expand('~/Notes/') . strftime('%F') . '-' . input(""Title: "")
  execute 'edit ' . title
endfunction
</code></pre>

<p>The mapping may be called as described by @Carpetsmoker:</p>

<pre><code>vim -c 'execute ""normal \\t""'
</code></pre>
","1880"
"What does :open do in vim?","1056","","<p>Vim's documentation has this to say about the <code>:open</code> command:</p>

<pre><code>This command is in Vi, but Vim only simulates it:

                                                        *:o* *:op* *:open*
:[range]o[pen]                      Works like |:visual|: end Ex mode.
                                {Vi: start editing in open mode}

:[range]o[pen] /pattern/    As above, additionally move the cursor to the
                                column where ""pattern"" matches in the cursor
                                line.

Vim does not support open mode, since it's not really useful.  For those
situations where "":open"" would start open mode Vim will leave Ex mode, which
allows executing the same commands, but updates the whole screen instead of
only one line.
</code></pre>

<p>It does not comment on the nature of the ""simulation"", and why this is considered to be a simulation rather than a real command with different behavior. When run from ex mode (Q), it does indeed behave as described.</p>

<p>However, there also appears to be a different open command. When run from the normal command line, or from ex mode with different arguments, it <em>appears</em> to be a synonym for <code>:edit</code>. When run from command mode <em>with</em> a <code>/pattern/</code>, it positions the cursor <em>and</em> apparently runs <code>:edit</code> (with the cursor position only being evident if :edit fails.) It can also be run as <code>:open /pattern/ file</code>, which positions the cursor and runs <code>:edit file</code></p>

<p>My question is: Why is this not documented? Are there any differences from <code>:edit</code> that I am not noticing? Was <code>:open</code> once a synonym for <code>:edit</code> and only changed later in an attempt to halfway comply with POSIX?</p>
","<p>The ""open mode"" of vi was useful for terminals that had a single line, such as hardcopy terminals. In open mode, vi had a ""single line view"" of the file. Moving the cursor around would redraw the entire line, and deleted characters printed differently. </p>

<p>The ""simulation"" that vim does is simply supporting the command, making it act (as the documentation says) like <code>:visual</code> and since <code>:visual</code> is ""otherwise the same as <code>:edit</code>,"" that's probably why you see it acting like <code>:edit</code>.</p>

<p>From a source code perspective, <code>:open</code> is implemented in <code>ex_docmd.c</code> (<code>ex_open()</code>). It does some stuff to deal with the case where it is provided a regular expression, but always ends with a call to <code>do_exedit()</code>.</p>

<p>The implementation of <code>:edit</code>, <code>:badd</code> and <code>:visual</code> is contained in the <code>ex_edit()</code> function in the same file, and that function is a <em>direct call</em> to <code>do_exedit()</code> (nothing else). Thus, other than when handling the regular expression parameter, the same code gets called. <code>do_exedit()</code> is a bit hairy, and it's behavior is modified heavily based on the actual command that was issued, but it never explicitly checks for the command tokens for open/edit/visual. Thus, the three commands result in more-or-less the same code getting run in <code>do_exedit()</code>.</p>
","2277"
"Folding fails: vim can't find any fold","1053","","<p>I'm trying to fold some PHP code, and I have included a cut-down version of some of the code I'm trying to fold at the end of the post.</p>

<p>I've tried the following vim commands, but only the ex commands below work. The non-ex commands don't work and produce a white-on-red message in the status line saying: I can't find any folds.</p>

<pre><code>:help folding
:help fold-commands
:help foldmethod

:set foldmethod=syntax

zi - toggle folding

zj - move to top of next fold
zk - move to bottom of previous fold

za - toggle current fold open and closed
zo - open current fold
zc - close current fold

zA - toggle all current folds at the current cursor position
zO - open all current folds at the current cursor position
zC - close all current folds at the current cursor position
</code></pre>

<p>How can I get vim to find the folds (e.g. I want to fold code between <code>{</code> and <code>}</code>, or between <code>(</code> and <code>)</code>.</p>

<p>Here is some sample code (just to show that it is syntactically correct and hence the vim commands should work):</p>

<pre><code>function getTree() {

  return array(
    ""node1"" =&gt; array(
      ""node11"" =&gt; array(
        ""node111"" =&gt; ""leaf111"",
        ""node112"" =&gt; ""leaf112"",
        ""node113"" =&gt; ""leaf113"",
      ),
          ""node12"" =&gt; array(
        ""node121"" =&gt; ""leaf121"",
        ""node122"" =&gt; ""leaf122"",
        ""node123"" =&gt; ""leaf123"",
      ),
      ""node13"" =&gt; array(
        ""node131"" =&gt; ""leaf131"",
        ""node132"" =&gt; ""leaf132"",
        ""node133"" =&gt; ""leaf133"",
      ),
    ),
    ""node2"" =&gt; array(
      ""node21"" =&gt; array(
        ""node211"" =&gt; ""leaf211"",
        ""node212"" =&gt; ""leaf212"",
        ""node213"" =&gt; ""leaf213"",
      ),
          ""node22"" =&gt; array(
        ""node221"" =&gt; ""leaf221"",
        ""node222"" =&gt; ""leaf222"",
        ""node223"" =&gt; ""leaf223"",
      ),
      ""node23"" =&gt; array(
        ""node231"" =&gt; ""leaf231"",
        ""node232"" =&gt; ""leaf232"",
        ""node233"" =&gt; ""leaf233"",
      ),
    ),
    ""node3"" =&gt; array(
      ""node31"" =&gt; array(
        ""node311"" =&gt; ""leaf311"",
        ""node312"" =&gt; ""leaf312"",
        ""node313"" =&gt; ""leaf313"",
      ),
          ""node32"" =&gt; array(
        ""node321"" =&gt; ""leaf321"",
        ""node322"" =&gt; ""leaf322"",
        ""node323"" =&gt; ""leaf323"",
      ),
      ""node33"" =&gt; array(
        ""node331"" =&gt; ""leaf331"",
        ""node332"" =&gt; ""leaf332"",
        ""node333"" =&gt; ""leaf333"",
      ),
    ),
  );

}
</code></pre>
","<p>Vim doesn't come with PHP syntax folding built-in. However, if all of your code is properly indented (as your example is), you can use a different fold method:</p>

<pre><code>:set foldmethod=indent
</code></pre>
","535"
"""set hidden"" leaves many *empty* buffers. Can I automatically get rid of them?","1052","","<p>I recently added <code>set hidden</code> to my <code>vimrc</code> script because I didn't always want to <code>:w</code>rite a file before <code>:e</code>diting another file. (With <code>set nohidden</code>, which is the default, this resulted in a <code>E37: No write since last change (add ! to override)</code> error).</p>

<p>Setting <code>hidden</code> solved this problem, but introduced a new one. Sometimes, I split the window (<code>ctrl-w n</code>) before I <code>:e</code>dit a file. This creates an empty buffer for each split that I have done. This is of course not what I want.</p>

<p>So, is there some setting or autocommand or anything that I am not aware of that gets rid of unused empty buffers automatically?</p>
","<p>Cut out the middle man. If you want to edit a file in a split, use <code>:split file.txt</code>.</p>

<p>It is the very nature of using <code>&lt;C-W&gt;n</code> that creates these new buffers. It's like using the <code>:new</code> command, which is wasteful if you plan to immediately edit some other file.</p>

<p>If you like the visual confirmation of seeing the new window before editing the file, you could use <code>&lt;C-W&gt;s</code> which opens a split with the current buffer (so you'll see two of the same file) and then proceed to use <code>:edit file.txt</code>.</p>
","4315"
"How to copy across terminals?","1044","","<p>I'm using Linux system. Two vims are opened in two terminals. Now I'd like to copy text from A to B. One way to do so is to select text in A, use mouse to copy, then switch to B, in the insert mode, command <code>&lt;c-r&gt;+</code> will paste the text.</p>

<p>Is there anyway to perform it without using mouse? like <code>""+yy</code> in A, when switch to B, <code>o&lt;c-r&gt;+</code>? I explored couple of combinations in vain. And I searched for ""copy across terminals"", but find nothing.</p>

<p>user @statox suggests one solution using visual mode, i.e. <code>v$""+y</code> in A, when switch to B, <code>o&lt;c-r&gt;+</code>.</p>

<p>Is there any simple way that can copy the text in A without entering into v mode? Admittedly entering into v-mode does not involve too many key strikes, just wonder if there is better way. Eg. if the cursor is at the middle of a line, <code>yy</code> copies the whole line (to register <code>""</code>), while <code>0v$y</code> does the same thing with extra key stroke.</p>

<p>Or, my question can be reduced to if there is any way with fewer key strokes than <code>0v$""+y</code> for <strong>copy</strong> such that I can use <code>&lt;alt-tab&gt;o&lt;c-r&gt;+</code> to paste.</p>
","<p>You can check if Vim is built with clipboard support with:</p>

<pre><code>:echo has('clipboard')
</code></pre>

<p>If the output is <code>1</code>, the following should be enough to achieve your goal:</p>

<pre><code>""*y    in source Vim
""*p    in destination Vim
</code></pre>

<p>You can make it all a lot more seamless by synchronizing the clipboard register and the default register with this setting in your <code>vimrc</code>:</p>

<pre><code>set clipboard^=unnamed
</code></pre>

<p>If the output of <code>:echo has('clipboard')</code> is <code>0</code>, consider installing a proper Vim like <code>vim-gtk</code> or <code>vim-gnome</code> (the name of the package may differ from distro to distro).</p>
","4605"
"How to activate vim-snippets for UltiSnips and Pathogen?","1043","","<p>I've installed the UltiSnips and vim-snippets plugins. In order for the snippets to work, I need to activate <code>vim-snippets</code> for UltiSnips in my <code>.vimrc</code> file.</p>

<p>Vundle version for snipmate looks like this:</p>

<blockquote>
  <p>ActivateAddons vim-snippets snipmate</p>
</blockquote>

<p>I need to do the same, but for Pathogen and UltiSnips instead of snipmate.</p>

<p>How can I do it?</p>

<p><strong>Update 1:</strong> My current <code>.vimrc</code> (UltiSnips doesn't work).</p>

<pre><code>set encoding=utf-8
set fileencoding=utf-8
syntax on
execute pathogen#infect()
filetype plugin indent on
let g:UltiSnipsJumpForwardTrigger=""&lt;c-b&gt;""
let g:UltiSnipsJumpBackwardTrigger=""&lt;c-z&gt;""
</code></pre>

<p>I'm using Windows 10 (Russian locale, German keyboard layout).</p>

<p><strong>Update 2:</strong> With this <code>.vimrc</code> file, snippet expansion works in gVim, but not in Vim.</p>

<pre><code>set nocompatible
set encoding=utf-8
set fileencoding=utf-8
syntax on
execute pathogen#infect()
filetype plugin indent on
let g:UltiSnipsJumpForwardTrigger=""&lt;c-b&gt;""
let g:UltiSnipsJumpBackwardTrigger=""&lt;c-z&gt;""
let g:UltiSnipsSnippetsDir = $HOME.'/vimfiles/bundle/vim-snippets/UltiSnips'
</code></pre>
","<p>I don't think you have to do that for Pathogen + UltiSnips + vim-snippets.
I have such setup and only thing in my vimrc is <code>let g:UltiSnipsExpandTrigger=""&lt;c-j&gt;""</code>. Both plugins are in <code>~/.vim/bundle</code>.</p>
","8913"
"What is a scratch window?","1037","","<p>Sometimes I see a window open with name <code>scratch</code>. </p>

<p>I know it is some kind of temporary buffer/window. </p>

<p>How can I crate one?</p>

<p><code>:h scratch</code> returns nothing.</p>
","<p>It is probably a scratch buffer, which can be named. From the help:</p>

<blockquote>
  <p>scratch</p>
  
  <p>Contains text that can be discarded at any time.  It is kept
        when closing the window, it must be deleted explicitly.
        Settings: ></p>

<pre><code>      :setlocal buftype=nofile
      :setlocal bufhidden=hide
      :setlocal noswapfile
  The buffer name can be used to identify the buffer, if you give it a meaningful name.
</code></pre>
</blockquote>

<p>This can be found in <a href=""http://vimhelp.appspot.com/windows.txt.html#special-buffers"" rel=""noreferrer""><code>:help special-buffers</code></a>.</p>
","11311"
"How to search for lines matching current line in vim","1033","","<p>I usually search for words by <code>:/string</code>, but if I have to search entire current line, how to do that.</p>

<pre><code>event: 1  beacon: 0x02              //line 1
event: 19 beacon: 0x02              //line 2
event: 1  beacon: 0x03              //line 3
event: 1  beacon: 0x02              //line 4
event: 8  beacon: 0x01              //line 5
event: 19 beacon: 0x02              //line 6
event: 1  beacon: 0x02              //line 7
</code></pre>

<p>For example, if <code>cursor</code> is presently at <code>line 1</code> how to search similarly as <code>:/</code> for text containing entire current line. The cursor should jump then to matching <code>line 4</code>, and again to <code>line 7</code></p>
","<p>Here's how I'd do it:</p>

<ol>
<li>Yank the line (into the unnamed register), without including the newline at the end: <code>0y$</code></li>
<li>Initiate a <em>very nomagic</em> search: <code>/\V</code></li>
<li>Add the yanked line: <code>&lt;c-r&gt;""</code></li>
<li>Fire off the search: <code>&lt;cr&gt;</code></li>
</ol>

<p>As <a href=""https://vi.stackexchange.com/questions/6208/how-to-search-for-lines-matching-current-line-in-vim/6210?noredirect=1#comment9636_6210"">@EvergreenTree points out in a comment</a>, you can of course create a mapping to perform all the steps in one go:</p>

<pre><code>nnoremap &lt;leader&gt;* 0y$/\V&lt;c-r&gt;""&lt;cr&gt;
</code></pre>

<p>Relevant help topics:</p>

<pre><code>:help registers
:help /magic
:help c_CTRL-R
</code></pre>

<p>N.B. If the line you're searching for contains backslashes, you'll still need to go through and escape them (by adding another backslash), even with a <em>very nomagic</em> search.</p>
","6210"
"Undo <CR> in insert mode","1028","","<p>Sometimes in insert mode I hit <code>&lt;CR&gt;</code> by mistake  and I have to hit the backspace multiple times (depends on the indentation) to get back where I was.</p>

<p>e.g. </p>

<pre><code>&lt;div&gt;
  &lt;p&gt; This is some text []&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>The cursor is <code>[]</code> and I hit <code>&lt;CR&gt;</code> :</p>

<pre><code>&lt;div&gt;
  &lt;p&gt; This is some text 
  []&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>Now I have to hit backspace twice to get back to the previous line (this case isn't so bad but it doesn't have a lot of indentation).</p>

<p>Do you know a better way to do ?</p>
","<p>How about:</p>

<pre><code>inoremap &lt;C-\&gt; &lt;C-o&gt;:left 0&lt;Cr&gt;&lt;BS&gt;
</code></pre>

<p><code>&lt;C-o&gt;</code> will execute a normal mode command (<code>:left 0</code>), which will remove all indent, this will also put your cursor at the start of the line. <code>&lt;BS&gt;</code> will get you back to the last line.</p>

<p>This is a bit like a ""backwards <code>J</code>"".</p>

<p>Unfortunately, mapping Shift+Enter or Ctrl+Enter doesn't seem possible, so I choose <code>&lt;C-\&gt;</code>, as being ""near the enter"".</p>
","3864"
"Why do custom highlights in my vimrc get cleared or reset to default?","1028","","<p>I would like to highlight (part of) my statusline with <code>%1*</code>, for example:</p>

<pre><code>set statusline=%1*%f%0*
highlight User1 ctermbg=0 ctermfg=10 cterm=bold
</code></pre>

<p>However, this always shows up as ""empty"" (the default terminal colours):</p>

<p><img src=""https://i.stack.imgur.com/Z0HOr.png"" alt=""enter image description here""></p>

<p>If I type <code>:highlight User1</code>, it shows <code>User1 xxx cleared</code>, and if I type <code>:highlight User1 ctermbg=0 ctermfg=10 cterm=bold</code> in the command window, it does seem to work.</p>

<p>How can I put this in my <code>.vimrc</code> file?</p>

<p>My full vimrc file I used for testing:</p>

<pre><code>set nocompatible
set background=light
colorscheme default
set laststatus=2
set statusline=%1*%f%0*

highlight User1 ctermbg=0 ctermfg=10 cterm=bold
</code></pre>
","<p>The problem is that many (all?) colorschemes will clear all highlights with <code>highlight clear</code> before setting their own colours. For example from <code>/usr/share/vim/vim74/colors/peachpuff.vim</code>:</p>

<pre><code>"" First remove all existing highlighting.
set background=light
hi clear
if exists(""syntax_on"")
  syntax reset
endif

let colors_name = ""peachpuff""

hi Normal guibg=PeachPuff guifg=Black

hi SpecialKey term=bold ctermfg=4 guifg=Blue
"" ... Many more highlights follow ...
</code></pre>

<p>This <em>also</em> clears the <code>User1..9</code> groups (which doesn't make a lot of sense, IMHO).</p>

<p>The solution is to put custom <code>User1..9</code> highlights in the <code>ColorScheme</code> autocmd. From <a href=""http://vimhelp.appspot.com/autocmd.txt.html#ColorScheme"" rel=""noreferrer""><code>:help ColorScheme</code></a>:</p>

<blockquote>
  <p>After loading a color scheme. <code>:colorscheme</code> The pattern is matched against
  the colorscheme name. <code>&lt;afile&gt;</code> can be used for the name of the actual file
  where this option was set, and <code>&lt;amatch&gt;</code> for the new colorscheme name.</p>
</blockquote>

<p>So instead of using a ""bare"" <code>highlight</code> command, use:</p>

<pre><code>autocmd ColorScheme *
        \ highlight User1 ctermbg=0 ctermfg=10 cterm=bold |
        \ highlight User2 ctermbg=0 ctermfg=9 cterm=bold
</code></pre>

<p>If you frequently switch colorschemes, you can even use:</p>

<pre><code>autocmd ColorScheme colorscheme_one_name  highlight User1 ctermbg=0 ctermfg=10 cterm=bold
autocmd ColorScheme another_scheme        highlight User1 ctermbg=0 ctermfg=11 cterm=bold
</code></pre>

<p>to get colours matched to specific colorschemes.</p>
","3356"
"Git mergetool vimdiff command","1021","","<p>I'm attempting to get something setup that invokes the vimdiff git merge tool externally, but because of the way the setup works, I need to invoke vimdiff manually (without git mergetool). Does anyone know the exact command git runs with vimdiff to get the proper layout (three windows split horizontally and one vertically)?</p>

<p>Usually, <code>git mergetool</code> results in this layout:</p>

<pre><code>-------------------------
| LOCAL | BASE | REMOTE |
-------------------------
|        MERGED         |
-------------------------
</code></pre>

<p>However, I can only get either an all horizontal or all vertical layout using the <code>vimdiff ...</code> command.</p>

<pre><code>-----------------     -----------------
| L | B | R | M |     |       L       |
-----------------     -----------------
                      |       B       |
                      -----------------
                      |       R       |
                      -----------------
                      |       M       |
                      -----------------
</code></pre>

<p>I'd like to know the proper sequence of arguments to either the <code>vim -d</code> command or <code>vimdiff</code> command.</p>
","<p>I used the trick from <a href=""https://stackoverflow.com/questions/10357374/is-it-possible-to-access-vims-command-line-arguments-in-vimscript"">this SO question</a> to see what the command line was, and got this:</p>

<pre><code>:exe '!tr ""\0"" "" "" &lt;/proc/' . getpid() . '/cmdline'
:!tr ""\0"" "" "" &lt;/proc/23932/cmdline
gvim -f -d -c wincmd J foo ./foo_LOCAL_23800 ./foo_BASE_23800 ./foo_REMOTE_23800
</code></pre>

<p>So the trick is using <a href=""http://vimhelp.appspot.com/windows.txt.html#CTRL-W_J"" rel=""nofollow noreferrer""><kbd>Ctrl-W</kbd><kbd>J</kbd></a> (via <a href=""http://vimhelp.appspot.com/windows.txt.html#%3Awincmd"" rel=""nofollow noreferrer""><code>:wincmd</code></a>):</p>

<pre><code>                                                :winc :wincmd
:[count]winc[md] {arg}
                Like executing CTRL-W [count] {arg}.  Example: 
                        :wincmd j
               Moves to the window below the current one.
                This command is useful when a Normal mode cannot be used (for
                the CursorHold autocommand event).  Or when a Normal mode
                command is inconvenient.
                                                CTRL-W_J
CTRL-W J        Move the current window to be at the very bottom, using the
                full width of the screen.  This works like closing the current
                window and then creating another one with "":botright split"",
                except that the current window contents is used for the new
                window.
</code></pre>

<p>@lcd047 has a better way of getting the arguments: use a (wrapper) script that dumps its arguments before proceeding to <code>exec</code> them. For example:</p>

<pre><code>$ cat args-echo
#! /bin/sh
echo ""$0"" ""$@"" &gt; args 
# since I don't really need to merge
# exec vim ""$@""
$ git config mergetool.gvimdiff.path ""${PWD}/args-echo""
$ yes n | git mergetool
Merging:
foo

Normal merge conflict for 'foo':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (gvimdiff): 
foo seems unchanged.
Was the merge successful? [y/n] merge of foo failed
Continue merging other unresolved paths (y/n) ? 
$ cat args 
/tmp/bar/args-echo -f -d -c wincmd J foo ./foo_LOCAL_18649 ./foo_BASE_18649 ./foo_REMOTE_18649
$ git config --unset mergetool.gvimdiff.path
</code></pre>
","3986"
"What is the most convenient way to work with different keyboards in vim?","1019","","<p>I sometimes need to write Greek words, but when I am using the Greek keyboard, hitting, say, <code>&lt;C-p&gt;</code> will be understood as <code>&lt;C-π&gt;</code> and not as the command I intend. This can be fixed with <code>:map &lt;C-p&gt; &lt;C-π&gt;</code>. Can I do this for all letters without making a list of all?</p>

<p>PS. Making a list of all does not produce a perfect result. E.g., <code>q</code> is <code>;</code> on the Gr. keyboard, but we don’t want to map ; to q. Also, for some reason, ΖΖ (zeta zeta) does not work after <code>:map Ζ Z</code>. And a command I defined, <code>\lw</code>, does not work as <code>\λς</code>. </p>
","<p>I would recommend <code>keymap</code>, which can solve your trouble. Put these in your vimrc</p>

<pre><code>"" set keymap=greek_utf-8
set iminsert=0
set imsearch=-1
</code></pre>

<p>to disable Greek as a default.You can toggle the option on (Greek) and off (English) using <code>&lt;ctrl&gt;+^</code> (you can also use <code>&lt;ctrl&gt;+6</code>, it is mapped on key, not on symbol) in insert mode and Replace mode (doesn't work in Normal mode). To automatically disable  when leaving insert mode you can use</p>

<pre><code>inoremap &lt;ESC&gt; &lt;ESC&gt;:set iminsert=0&lt;CR&gt;
</code></pre>

<p>More on these</p>

<p><a href=""http://vimhelp.appspot.com/options.txt.html#%27iminsert%27"" rel=""nofollow""><code>:h iminsert</code></a>
<a href=""http://vimhelp.appspot.com/options.txt.html#%27keymap%27"" rel=""nofollow""><code>:h keymap</code></a>
<a href=""http://vimhelp.appspot.com/options.txt.html#%27imsearch%27"" rel=""nofollow""><code>:h imsearch</code></a>
<a href=""http://vimhelp.appspot.com/insert.txt.html#i_CTRL-%5E"" rel=""nofollow""><code>:h i_CTRL-^</code></a></p>

<hr>

<p>EDIT to second comment:</p>

<p>You can try this to switch Greek on automatically, if entering insert mode (and replace mode), and to switch off automatically, if leaving (then you don't need mapping mentioned before).</p>

<pre><code>augroup Greek
    au InsertEnter * set iminsert=1
    au InsertLeave * set iminsert=0
augroup END
</code></pre>
","4772"
"How to map two commands with only one key","1018","","<p>My question comes from this two commands I added on my <code>_vimrc</code> file:</p>

<pre><code>nnoremap &lt;C-[&gt; :set columns+=1&lt;CR&gt;
nnoremap &lt;C-]&gt; :set lines+=1&lt;CR&gt;
</code></pre>

<p>As is known, it will resize your gvim (I am using gvim on windows) with one more column when you hit <kbd>Ctrl-[</kbd>, and one more line when you hit <kbd>Ctrl-]</kbd>. That is really cool since you can achieve that resizement as though you are using your mouse. </p>

<p>I wonder if I can map those two command with only one key to make it more comfortable.</p>
","<p>You can do this with <code>|</code> (on windows, in the <code>_vimrc</code> file, so you have to replace it with <code>&lt;bar&gt;</code>).</p>

<p>e.g.</p>

<pre><code>"" unix
nnoremap &lt;C-[&gt; :set columns+=1 | lines+=1&lt;CR&gt; 
"" windows
nnoremap &lt;C-[&gt; :set columns+=1 &lt;bar&gt; lines+=1&lt;CR&gt; 
</code></pre>

<p>See the documentation : <code>:help :bar</code></p>

<p>ref: <a href=""https://stackoverflow.com/a/3249303/2558252"">https://stackoverflow.com/a/3249303/2558252</a></p>
","3886"
"How to jump to middle of buffer","1015","","<p>By pressing <code>gg</code> and <code>G</code> you can jump to both ends of a buffer.</p>

<p><code>42G</code> jumps to the line 42.</p>

<p>Is there any quick <code>g</code> shortcut to jump to the middle of buffer. Something like roughly <code>round(number of lines/2)G</code> ?</p>
","<p>You can use <code>N%</code> to jump to the Nth percent of the file. So e.g. <code>50%</code> jumps roughly to the middle of the buffer. See the help at <code>:h N%</code></p>
","10465"
"Vim normal and insert mode cursor not changing in GNU screen","1012","","<p>I use vim in a few different contexts; typically, I like to put this in my <code>.vimrc</code>:</p>

<pre><code>let &amp;t_ti.=""\&lt;Esc&gt;[1 q""
let &amp;t_SI.=""\&lt;Esc&gt;[5 q""
let &amp;t_EI.=""\&lt;Esc&gt;[1 q""
let &amp;t_te.=""\&lt;Esc&gt;[0 q""
</code></pre>

<p>This makes it so that insert and normal mode use different cursors (normal mode is a block cursor and insert mode is a vertical line). This works for me in mintty with cygwin, xterm, and also rvxt just fine. However, whenever I use GNU screen, my cursor no longer changes. I've seen references to fixing this for tmux (for instance here: <a href=""https://vi.stackexchange.com/questions/3379/cursor-shape-under-vim-tmux"">Cursor shape under vim + tmux</a>), but nothing I've tried for Screen has worked. For now, I'm using this in my <code>.vimrc</code>:</p>

<pre><code>""Underline currently edited line
if !has(""gui_running"")
    :autocmd InsertEnter * set cul
    :autocmd InsertLeave * set nocul
endif
</code></pre>

<p>That makes it so that when in insert mode the current line is underlined (the <code>:has(""gui_running"")</code> prevents it from taking effect in gvim). I also use <code>set laststatus=2</code> to keep the status bar on the bottom, which also helps. I just wish it worked a bit more like gvim. Has anyone found a fix for this?</p>
","<p>I think I figured it out, although I don't totally understand the fix. This appears to work for mintty, xterm, and rxvt:</p>

<pre><code>"" Set up vertical vs block cursor for insert/normal mode
if &amp;term =~ ""screen.""
    let &amp;t_ti.=""\eP\e[1 q\e\\""
    let &amp;t_SI.=""\eP\e[5 q\e\\""
    let &amp;t_EI.=""\eP\e[1 q\e\\""
    let &amp;t_te.=""\eP\e[0 q\e\\""
else
    let &amp;t_ti.=""\&lt;Esc&gt;[1 q""
    let &amp;t_SI.=""\&lt;Esc&gt;[5 q""
    let &amp;t_EI.=""\&lt;Esc&gt;[1 q""
    let &amp;t_te.=""\&lt;Esc&gt;[0 q""
endif
</code></pre>

<p>This leans on your screenrc having something like ""term screen"" or ""term screen-256color"" so that the vimrc file can identify which terminal you're on. The only remaining terminal I use regularly where this <em>doesn't</em> work is PuTTY, but I think it literally doesn't support terminal commands to change the cursor shape. Mintty was forked from PuTTY a while back, and I saw here (<a href=""https://www.cygwin.com/ml/cygwin-announce/2009-07/msg00011.html"" rel=""nofollow"">https://www.cygwin.com/ml/cygwin-announce/2009-07/msg00011.html</a>) that DECSCUSR support was added to mintty after that fork.</p>

<p>This is good enough for me - if I'm ssh'ing into a machine where I really want my block cursor in Vim, I guess I can either cygwin/ssh or PuTTY/XMing/rxvt my way through it instead of PuTTY.</p>
","7420"
"How do I reverse a string with Vim script","1011","","<p>I am trying to reverse a string, so that <code>'abc defg hij'</code> becomes <code>'jih gfed cba'</code>. The solution I came up with is</p>

<pre><code>join(reverse(split(l:text, '.\zs')), '')
</code></pre>

<p>Is there a more elegant solution or should I stick with what I have come up with?</p>
","<p>Your solution is very elegant! An alternative if you are in Unix based env:</p>

<pre><code>!!rev
</code></pre>
","4949"
"How to restore the position of the cursor after executing a normal command?","1011","","<p>I am trying to code a function that replaces the character in the sixth column of my current line with a dollar symbol (<code>$</code>), but I would like my cursor to remain at the position it was before calling the function. </p>

<p>So I tried to store the current column, execute my changes, and then come back with the following function :</p>

<pre><code>function! DollarSplit()
   let col_number=col(""."")     ""stores the current column number of the cursor
   normal! 6|r$                "" replaces the 6th caracter in line with a $
   execute col_number.""|"" 
endfunction
</code></pre>

<p>I am probably misunderstanding something about the <code>execute</code> command... Or maybe I should create a string containing the command I want to be executed ? </p>
","<p>You should use <code>getpos()</code>:</p>

<p>To save you position in a variable:</p>

<pre><code>let save_pos = getpos(""."")
</code></pre>

<p><code>getpos()</code> takes as argument a mark, here <code>"".""</code> represents the current position of your cursor.</p>

<p>And to restore it:</p>

<pre><code>call setpos('.', save_pos)
</code></pre>

<p>Here the first argument indicate that you will move the mark of the current position of your cursor (hence your current position) and the second is where to put the mark (the position that you saved earlier).</p>

<p>Your function would look like this:</p>

<pre><code>function! DollarSplit()
   let save_pos = getpos(""."")
   normal! 6|r$                "" replaces the 6th caracter in line with a $
   call setpos(""."", save_pos)
endfunction
</code></pre>

<p>For more details see: <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#getpos()"" rel=""noreferrer""><code>:h getpos()</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#setpos()"" rel=""noreferrer""><code>:h setpos()</code></a></p>

<hr>

<p>For more details about your usage of <code>execute</code>: this function will take a string and execute it. Your string can be only hardcoded characters between double quotes or the contents of variables.</p>

<p>When you write </p>

<pre><code>execute col_number.""|""
</code></pre>

<p>If you are on the 12th column the expanded string will be <code>12|</code>. Execute will try to execute this command but it won't work because <code>12|</code> is not a vimscript function but a normal mode command.</p>

<p>To execute it from a vimscript you have to say ""execute it as if I had typed it in normal mode`, that's what normal is used for.</p>

<p>So without the execute you would have wrote:</p>

<pre><code>normal 12|
</code></pre>

<p>Now to make your <code>execute</code> call work you have to add the <code>normal</code> keyword to your expanded string, like this:</p>

<pre><code>execute ""normal "" . col_number . ""|""
</code></pre>
","7762"
"How can I lookup LaTeX symbols in Vim?","1008","","<p>Can I integrate some form of symbol completion to Vim? Dedicated TeX editors like TeXMaker provide a list of symbols for completion (for example, <code>\al</code> shows a list with <code>\alpha</code>, <code>\la</code> shows <code>\lambda</code> and <code>\langle</code>).</p>

<p>Please note that TeX has a rather large number of symbols, so suggestions involving manual mapping of <code>\al</code> to <code>\alpha</code> would be useless.</p>

<p>Related plugins I have:</p>

<ul>
<li><a href=""https://github.com/ervandew/supertab"" rel=""nofollow noreferrer"">SuperTab</a> with <code>let g:SuperTabDefaultCompletionType=""context""</code> and
<code>set omnifunc=syntaxcomplete#Complete</code></li>
<li><a href=""https://github.com/LaTeX-Box-Team/LaTeX-Box"" rel=""nofollow noreferrer"">LaTeX-Box</a></li>
</ul>

<p>If it matters, I use XeLaTeX for compiling.</p>

<p>Related:</p>

<ul>
<li><a href=""https://tex.stackexchange.com/questions/14/how-to-look-up-a-symbol-or-identify-a-math-symbol-or-character"">How to look up a symbol or identify a math symbol or character?</a></li>
</ul>
","<p>To expand commands in LaTeX, I use a dictionary copied from <a href=""https://github.com/gerw/vim-latex-suite"" rel=""nofollow noreferrer"">latex-suite</a> (in details, <a href=""https://github.com/gerw/vim-latex-suite/blob/master/ftplugin/latex-suite/dictionaries/dictionary"" rel=""nofollow noreferrer"">this one</a>) and put it in <code>~/.vim/dictionaries</code> and then using</p>

<pre><code>autocmd FileType * exec(""setlocal dictionary+="".$HOME.""/.vim/dictionaries/"".expand('&lt;amatch&gt;'))
set completeopt=menuone,longest,preview
set complete+=k
</code></pre>

<p>Idea from <a href=""https://stackoverflow.com/questions/3723493/latex-and-vim-usage"">here</a>. I use it with supertab; the dictionary file is not really complete (it has <code>\alpha</code> but not <code>\langle</code>) but that would be a matter of completing it...</p>

<p>One option for adding symbols would be to parse (not complex --- just a bit of shell magic will do it) the <a href=""https://raw.githubusercontent.com/kirel/detexify/master/lib/latex/symbols.yaml"" rel=""nofollow noreferrer"">detexify database</a>. For example, one could use:</p>

<pre><code>{ curl -sL https://raw.githubusercontent.com/kirel/detexify/master/lib/latex/symbols.yaml |
   grep -Po '(?&lt;=\\)[[:alpha:]]{2,}';
   curl -sL https://raw.githubusercontent.com/gerw/vim-latex-suite/master/ftplugin/latex-suite/dictionaries/dictionary
} | sort -u | tee ~/.vim/dictionaries/tex
</code></pre>
","2360"
"Nested matching group in regex","1008","","<p>I have a common usecase when I transform some python expression the following way:</p>

<pre><code>value 1
value 2
value 3
</code></pre>

<p>into</p>

<pre><code>['value 1', 'value 2', 'value 3']
</code></pre>

<p>The easiest way may be to use a mapping, but I wanted to use a substitution for this task.</p>

<p>So far I got:</p>

<pre><code>s/\(.*\n\)\+/[&amp;]/g
</code></pre>

<p>Which result in </p>

<pre><code>[value 1
value 2
value 3
]
</code></pre>

<p>This raise a question, because I want to be able to match the <code>\(.*\)</code>, but not the <code>\n</code> and the use the result of the matched inside a <code>'...'</code>.</p>

<p>Do you know how to do this?</p>
","<p><strong>Edit</strong> </p>

<p>It is possible to do this in one expression if we use a ""sub-replace-expression."" See bottom for info on that.</p>

<p><strong>/Edit</strong></p>

<p>The problem here is that you want to do two different things.</p>

<ol>
<li><p>Operate on the match as a whole (i.e. surround it with <code>[]</code>)</p></li>
<li><p>Operate on each item in the match (i.e. surround them with <code>'',</code>)</p></li>
</ol>

<p>You can easily do either one:</p>

<ol>
<li><code>:s/\(.\+\n\)\+/[&amp;]/</code></li>
<li><code>:%s/\(.\+\)\n/'\1', /</code></li>
</ol>

<p>but as far as I know there's no way to do both in a single operation. I did try to get the proper output with something like:</p>

<pre><code>:s/\(\(.\+\)\n\)\+/[\2]/
</code></pre>

<p>But of course the problem with this is that the <code>\2</code> matches only the last match from the second set of memory parentheses <code>\(\)</code> and doesn't ""remember"" anything before that. So you end up with only the last line.</p>

<p>I would recommend doing some pre/post processing with an additional <code>:s///</code> command to get rid of the newlines before/after the fact. Here's what I came up with</p>

<pre><code>function! FormatExpression()
   .,/\n^$/s/\(.*\)\n/'\1', /
   s/\(.*\), /[\1]/
endfunction
</code></pre>

<p>1st line (Remove newlines)</p>

<ul>
<li><code>.,/\n^$/</code> This is a range modifier for the search and replace. Without this, the command will go on to mutilate your entire file. Currently it goes from the current line <code>.</code>, to the next blank line <code>\n^$</code>. I'm not sure how you were intending to split things up, but you need some way to tell it to stop.</li>
<li><code>s/</code> The beginning of a search and replace command</li>
<li><code>\(.*\)\n</code> Match the whole line, but only save the part without the newline.</li>
<li><code>'\1',</code> Replace line with the match surrounded by single quotes and append a comma.</li>
</ul>

<p>2nd line (Surround in brackets)</p>

<ul>
<li><code>\(.*\),</code> Match the whole line but not the last comma and space</li>
<li><code>[\1]</code> Surround with brackets and also remove superfluous ending comma and space.</li>
</ul>

<p>I'm going to keep looking into this, but at the moment I don't think it's possible with a single expression. :(</p>

<p><strong>EDIT:</strong></p>

<p>I have found a way to do this with one expression! Internally this is actually two substitutions, but it <em>is</em> technically one expression. Here's what I came up with:</p>

<pre><code>:s/\v((.+\n)*.+)\n/\= ""['"" . substitute(submatch(1), '\n', ""', '"", 'g') . ""']"" /
</code></pre>

<ul>
<li><code>:s///</code>: Do a substitution</li>
<li><code>\v((.+\n)*.+)\n</code>: Basically gathers up all the next non-blank lines and stores it all except for the final <code>\n</code></li>
<li><code>\=</code> Allows us to use an expression in the replacement (see <code>:h sub-replace-expression</code>)</li>
<li><code>substitute(submatch(1)...)</code>: Replaces all stored <code>\n</code> with <code>', '</code></li>
<li><code>""['"" . ... . ""']""</code>: Prepends <code>['</code> and appends <code>']</code></li>
</ul>

<p>This will start at the position of the cursor and go until it finds a blank line (<code>^\n</code>). Not grabbing the last <code>\n</code> is important as without that bit we're left with an additional <code>',</code> that we don't want at the end.</p>

<p>Some might consider this more complex than the previous two-expression answer. But I thought I would go ahead and add this since it is in fact possible to do it with one expression. :)</p>
","7746"
"Disable syntax highlighting depending on file size and type","1005","","<p>I often have to edit various XML files with vim, which vary wildly in size - from configuration files containing a few hunded lines to production data files with sizes up to 2GB. Having syntax highlighting enabled is of course a very bad idea when dealing with huge files, thus I want to disable it if the file is bigger than a threshold.</p>

<p>I could not get this to work using <code>autocommand</code> directly to disable syntax highlighting, as apparently the command is executed <em>before</em> syntax is enabled when starting vim from the shell:</p>

<pre><code>"" this autocmd has no effect except for the echo:
autocmd Filetype xml if getfsize(@%) &gt; 1000000 | echom '!' | syntax off | endif
</code></pre>

<p>I found a workaround in that I can disable syntax highlighting globally, then turn it on again for all other filetypes than xml, and turn it on for filetype xml if the file is not bigger than the threshold:</p>

<pre><code>syntax off
autocmd Filetype * syntax off
autocmd Filetype * if &amp;ft != 'xml' | syntax enable | endif
autocmd Filetype xml if getfsize(@%) &lt; 1000000 | syntax enable | endif
</code></pre>

<p>This seems to work, but feels wrong and will become unmanageable once I want to do this for more filetypes and conditions. Furthermore, it influences all buffers. What is the proper way to disable syntax highlighting in one buffer under specific conditions?</p>
","<p><a href=""https://vi.stackexchange.com/questions/298/disable-syntax-highlighting-depending-on-file-size-and-type#comment291_299"">This comment</a> by <a href=""https://vi.stackexchange.com/users/31/derobert"">derobert</a> led me to the solution:</p>

<pre><code>autocmd Filetype xml if getfsize(@%) &gt; 1000000 | setlocal syntax=OFF | endif
</code></pre>

<p>This seems to reliably disable syntax highlighting in one buffer only.</p>

<p>The <code>autocmd BufReadPre</code> was a bit of a red herring. <code>syntax off</code>  works in the <code>BufReadPre</code> context but not in the <code>Filetype</code> context (and of course disables syntax globally); while <code>setlocal syntax=OFF</code> does <em>not</em> work in the <code>BufReadPre</code> context but works in the <code>Filetype</code> context.</p>
","411"
"How does vimgolf record all keystrokes?","1002","","<p>From time to time I like to engage in a round of <a href=""http://vimgolf.com/"" rel=""noreferrer"">vimgolf</a>. It can be enlightening.</p>

<p>How are they able to record all the keystrokes? That must be a vim feature. Anybody any idea how to do that. It could come in handy to record everything in certain circumstances.</p>
","<p>They probably use the built-in parameter <code>-w</code>, see <a href=""http://vimhelp.appspot.com/starting.txt.html#-w"" rel=""noreferrer""><code>:h -w</code></a>:</p>

<pre><code>-w {scriptout}  All the characters that you type are recorded in the file
        ""scriptout"", until you exit Vim.  This is useful if you want
        to create a script file to be used with ""vim -s"" or
        "":source!"".  When the ""scriptout"" file already exists, new
        characters are appended.  See also |complex-repeat|.
        {scriptout} cannot start with a digit.
        {not in Vi}
</code></pre>

<p><em>Edit</em> As @B Layer pointed out the actual code uses the <code>-W</code> parameter which is basically the same as <code>-w</code> but the log file is overwritten instead of appending the keystrokes to it (<a href=""http://vimhelp.appspot.com/starting.txt.html#-W"" rel=""noreferrer""><code>:h -W</code></a>):</p>

<pre><code>-W {scriptout}  Like -w, but do not append, overwrite an existing file.
        {not in Vi}
</code></pre>
","14442"
"How to set up Vim to work with one sentence per line?","1002","","<p>I'm currently writing a lot of plain text (and LaTeX with minimal formatting in paragraphs), and it would be nice if I could set up vim to keep each sentence (for simplicity, text terminated by a '. ',  '! ', or '? '; that is a terminating punctuation followed by a space so as to avoid breaking on decimal numbers) on its own line so the VCS diffs will be more useful.</p>

<p>Minimally, I'd like <code>gq</code> to format text from:</p>

<pre><code>He lay flat on the brown, pine-needled floor of the forest, his chin on his
folded arms, and high overhead the wind blew in the tops of the pine trees.
The mountainside sloped gently where he lay; but below it was steep and he
could see the dark of the oiled road winding through the pass. There was a
stream alongside the road and far down the pass he saw a mill beside the
stream and the falling water of the dam, white in the summer sunlight. 
</code></pre>

<p>To:</p>

<pre><code>He lay flat on the brown, pine-needled floor of the forest, his chin on his folded arms, and high overhead the wind blew in the tops of the pine trees.
The mountainside sloped gently where he lay; but below it was steep and he could see the dark of the oiled road winding through the pass.
There was a stream alongside the road and far down the pass he saw a mill beside the stream and the falling water of the dam, white in the summer sunlight.
</code></pre>

<p>But it would be nice if vim would also perform this formatting as I type (like it does with textwidth reflow). Is this possible?</p>

<p>My current solution is to join a paragraph with <code>J</code>, then run <code>:'&lt;,'&gt;s/\. /.\r/g</code> which is pretty good as there are few exclamation and question marks, but it would be much better if I could make gq slightly smarter.</p>
","<h2>The <code>'formatexpr'</code> option</h2>

<p>You can achieve this using the <a href=""http://vimhelp.appspot.com/options.txt.html#%27formatexpr%27"" rel=""nofollow""><code>'formatexpr'</code></a> option. From the help:</p>

<blockquote>
  <p>Expression which is evaluated to format a range of lines for the gq operator or automatic formatting (see 'formatoptions').  When this option is empty 'formatprg' is used.</p>
</blockquote>

<p>Setting your <code>'formatexpr'</code> correctly will work both when using <code>gq</code> and while inserting text.</p>

<h2>A simple example</h2>

<p>Here's a simple VimScript function and corresponding <code>'formatexpr'</code> value that should do the job. I haven't tested it around all the edge cases, but it worked nicely for my simple tests.</p>

<pre><code>function! MyFormatExpr(start, end)
    silent execute a:start.','.a:end.'s/[.!?]\zs /\r/g'
endfunction

set formatexpr=MyFormatExpr(v:lnum,v:lnum+v:count-1)
</code></pre>

<h3>Explanation</h3>

<p>The expression is a call to the function <code>MyFormatExpr()</code>, passing in the starting and ending lines over which the formatting will be applied. These lines are computed using the automatically populated variables <code>v:lnum</code> (the first line to be formatted) and <code>v:count</code> (the number of lines to be formatted).</p>

<p>The <code>MyFormatExpr()</code> function constructs a <a href=""http://vimhelp.appspot.com/change.txt.html#%3Asubstitute"" rel=""nofollow""><code>:substitute</code></a> command with the passed in range, and replaces a whitespace following an end-of-sentence punctuation mark (<code>.</code>, <code>!</code>, or <code>?</code>) with a newline (<code>\r</code>).</p>

<h3>Caveats</h3>

<ul>
<li>The <code>MyFormatExpr()</code> function doesn't preserve leading indentation. Some more sophisticated logic would be needed to fix that.</li>
<li>There may be other edge cases where this falls apart. Give it a test drive and tweak as necessary!</li>
</ul>
","2848"
"Custom syntax highlighting: highlight word following keyword","999","","<p>I am currently trying to set a custom syntax highlighting using a <code>mysyntax.vim</code> file.
I have several keywords (<code>int</code>, <code>real</code>, <code>real2D</code>, <code>real1D</code>, etc) currently highlighted using</p>

<pre><code>syn keyword VariableType real real1D real2D real3D int
hi VariableType ctermfg=darkgreen
</code></pre>

<p>Now I would like to also highlight the 'word' that comes right after. 
I added <code>nextgroup=VarName</code> to my first line above, and tried a few things like </p>

<pre><code>syn match VarName '\w' contained
syn region VarName start=' ' end=' ' 
</code></pre>

<p>(in my understanding, <code>'\w'</code> accounts for a word).
However none of the solutions I tried worked. Am I missing something ?</p>

<p>The problem seems to come from the way I define this : it should neither be a ""region"" or ""match"", that would be evaluated as true basically at each word...</p>
","<p>It is possible to tell Vim to match something after a keyword, using <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-nextgroup"" rel=""nofollow noreferrer""><code>nextgroup</code></a>:</p>

<pre class=""lang-none prettyprint-override""><code>nextgroup={group-name},..                               :syn-nextgroup

The ""nextgroup"" argument is followed by a list of syntax group names,
separated by commas (just like with ""contains"", so you can also use patterns).

If the ""nextgroup"" argument is given, the mentioned syntax groups will be
tried for a match, after the match or region ends.  If none of the groups have
a match, highlighting continues normally.  If there is a match, this group
will be used, even when it is not mentioned in the ""contains"" field of the
current group.  This is like giving the mentioned group priority over all
other groups.
</code></pre>

<p>So, something like:</p>

<pre class=""lang-vim prettyprint-override""><code>syn keyword VariableType real real1D real2D real3D int nextgroup=VarName skipwhite
syn match VarName '\i\+' contained
hi VariableType ctermfg=darkgreen
hi VarName ctermfg=darkblue
</code></pre>

<ul>
<li><code>skipwhite</code> tells Vim to skip spaces and tabs when looking for the <code>nextgroup</code>. </li>
<li><a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5Ci"" rel=""nofollow noreferrer""><code>\i</code></a> might be better than <code>\w</code>. <code>\i</code> matches identifier characters.</li>
<li><code>VarName</code> is still contained so that it doesn't automatically apply to every identifier string in the file.</li>
</ul>

<p>Effect:</p>

<p><a href=""https://i.stack.imgur.com/EjdOn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EjdOn.png"" alt=""enter image description here""></a></p>

<hr>

<p>You could also define a region or match containing these keywords and the word that follows, and then contain the keywords within. For example:</p>

<pre class=""lang-vim prettyprint-override""><code>syn match VarDecl '\v&lt;(real([123]D)?|int)\s+\i+&gt;' contains=VariableType,VarName
syn keyword VariableType real real1D real2D real3D int contained
syn match VarName '\i' contained
hi VariableType ctermfg=darkgreen
hi VarName ctermfg=darkblue
</code></pre>

<p>The regex:</p>

<ul>
<li><code>\v</code>: ""very magic"". See <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2Fmagic"" rel=""nofollow noreferrer""><code>:h /magic</code></a>. Saves a lot on backslashes.</li>
<li><a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5C%3E"" rel=""nofollow noreferrer""><code>\&lt;</code> and <code>\&gt;</code></a> match at word boundaries. This way, we won't match in the middle of a word (the middle line was intended to test this).</li>
<li><code>real([123]D)?</code> matches <code>real</code> with an <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5C%3F"" rel=""nofollow noreferrer"">optional</a> <code>1D</code>, <code>2D</code> or <code>3D</code> after it.</li>
<li><code>(real([123]D)?|int)</code> matches either the above or <code>int</code>.</li>
<li><code>\s+</code> matches <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5C%2B"" rel=""nofollow noreferrer"">one or more</a> <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5Cs"" rel=""nofollow noreferrer"">whitespace</a> characters.</li>
<li><code>\i+</code> matches one or more <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5Ci"" rel=""nofollow noreferrer"">identifier</a> characters.</li>
<li><code>\(</code>, <code>\)</code>, <code>\&lt;</code>, <code>\&gt;</code>, <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%08ar"" rel=""nofollow noreferrer""><code>\|</code></a>, <code>\?</code> and <code>\+</code> don't need backslashes because of <code>\v</code>.</li>
</ul>
","7710"
"Using a variable in a regex pattern","998","","<p>I'm trying to write a function that will delete each line that matches a pattern. But that pattern will change based on the words held in a list (made from a dictionary). I was thinking it would be a simple <code>for</code> loop but the <code>for</code> loop variable doesn't expand inside the pattern.</p>

<pre><code>for key in sort(keys(myDict))
    %g/^The key/d
endfor
</code></pre>

<p>But the loop looks for <code>^The key</code> instead of <code>^The red</code>, <code>^The green</code>, <code>^The blue</code>, etc. It doesn't expand the <code>key</code> variable to whatever it's holding.</p>

<p>How can I use a variable inside a regex pattern and have the variable expand? Or is there a better way entirely of achieving my goal?</p>
","<p>You need to ""build"" your global command using <code>:execute</code> like so:</p>

<pre><code>for key in sort(keys(myDict))
    execute '%g/^The ' . key . '/d'
endfor
</code></pre>

<p>See <code>:h :exe</code> for more help using <code>:execute</code>.</p>

<p>Some thoughts:</p>

<ul>
<li>You may need to escaping your keys</li>
<li>Might consider alternation. e.g. <code>\(red\|blue\|green\)</code></li>
<li>You may want to <code>:delete</code> into the black hole register to prevent any surprises. e.g. <code>:d_</code></li>
</ul>
","2588"
"No syntax highlighting in tmux","997","","<p>I installed <code>tmux</code> in iTerm 2.(Build 3.0.13) When I execute <code>vim</code> in <code>tmux</code>, syntax highlighting looks like this.</p>

<p><a href=""https://i.stack.imgur.com/zlKpP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zlKpP.png"" alt=""no syntax highlighting""></a></p>

<p>But outside tmux, syntax highlighting looks fine.</p>

<p><a href=""https://i.stack.imgur.com/8vizB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8vizB.png"" alt=""ordinary syntax highlighting""></a></p>

<p>My <code>$TERM</code> inside and outside tmux is <code>xterm-256color</code>. I also added </p>

<pre><code>set -g default-terminal ""screen-256color""
</code></pre>

<p>in <code>.tmux.conf</code> and added this</p>

<pre><code>set t_Co=256
set t_AB=m
set t_AF=m
if &amp;term =~ '256color'
    set t_ut=
endif
</code></pre>

<p>in <code>.vimrc</code>.</p>

<p>I also tried <code>tmux -2</code> command and read these questions.</p>

<p><a href=""https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode"">lose vim colorscheme in tmux mode</a></p>

<p><a href=""https://stackoverflow.com/questions/7278267/incorrect-colors-with-vim-in-iterm2-using-solarized"">Incorrect colors with vim in iTerm2 using Solarized</a></p>

<p>Is this a problem of <code>tmux</code>, <code>vim</code>, or my configuration?</p>

<p><strong>EDIT:</strong></p>

<p>My <code>.vimrc</code> in GitHub Gist</p>

<p><a href=""https://gist.github.com/sohnryang/3c63397f332f2e30c7d7b2a83c3c9f52"" rel=""nofollow noreferrer"">https://gist.github.com/sohnryang/3c63397f332f2e30c7d7b2a83c3c9f52</a></p>
","<p>Well, I solved the problem by myself.</p>

<p>as @Carpetsmoker♦ commented, I started to suspect that my <code>.vimrc</code> is a problem. I read <a href=""https://vi.stackexchange.com/questions/2003/how-do-i-debug-my-vimrc-file"">this question</a> and started vim with this command inside tmux.</p>

<pre><code>vim -u NONE -U NONE -N ~/.vimrc
</code></pre>

<p>After starting vim with command above, I ran this command inside vim.</p>

<pre><code>:syn on
:colorscheme solarized8_dark
</code></pre>

<p>These highlighted my <code>.vimrc</code> file. So, I started to debug my <code>.vimrc</code>.</p>

<p>Long story short, <code>set termguicolors</code> was the problem. If I ran vim with <code>set termguicolors</code> commented in <code>.vimrc</code>, I could see corrected syntax highlighting in tmux.</p>
","11062"
"How to execute python statement for each line?","996","","<p>I've the following sample code which modifies the current line using Python statement:</p>

<pre><code>:py import vim; vim.current.line=""[""+vim.current.line+""]""
</code></pre>

<p>How I can execute this statement for each line in the current file?</p>

<p>Related: <a href=""https://stackoverflow.com/questions/501585/how-can-you-use-python-in-vim"">How can you use Python in Vim?</a> at stackoverflow</p>
","<p>You can use the <code>pydo</code> command available since Vim 7.4, the manual describe how it works better than I could:</p>

<blockquote>
  <p>:[range]pydo {body}   </p>
  
  <p>Execute Python function ""def _vim_pydo(line, linenr): {body}"" for each
  line in the [range], with the function arguments being set to the text
  of each line in turn, without a trailing &lt;EOL&gt;, and the current line
  number. The function should return a string or None. If a string is
  returned, it becomes the text of the line in the current turn. The
  default for [range] is the whole file: ""1,$"".</p>
</blockquote>

<p>For your example you can use a command like:</p>

<pre><code>:python import vim
:pydo vim.current.buffer[linenr - 1] = '[%s]' % line
</code></pre>

<p>The <code>linenr - 1</code> bit is there because lines in <code>vim.current.buffer</code> are 0-indexed but Vim start to count lines from 1.</p>

<p>The nice thing is that you can easily define a custom command to execute your Python code on a range of lines:</p>

<pre><code>command! -range=% BracketLines 
    \ &lt;line1&gt;,&lt;line2&gt;pydo vim.current.buffer[linenr - 1] = '[%s]' % line
</code></pre>
","851"
"Word level diffs in vim","996","","<p>As far as I understand the default vimdiff is doing only linewise diffs. However somtimes is useful to do word level diff, especially for text files like Markdown, LaTeX etc. There are some tools like wdiff or dwdiff which do the diff in word level. Is it possible to use them in vim to compare side-by-side two text files?</p>
","<p>One solution, as suggested by <a href=""https://vi.stackexchange.com/users/205/muru"">muru</a> (thanks), is to use the <a href=""http://www.vim.org/scripts/script.php?script_id=4932"" rel=""nofollow noreferrer"">diffchar.vim</a> plugin and setting the <code>let g:DiffUnit=""Word1""</code>. This plugin should be used in the standard <code>vimdiff</code> session.</p>
","3610"
"non-default colorschemes can't be loaded; setting them manually after startup works","995","","<p>Currently, I use <a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow"">vim-plug</a> for managing plugins and <a href=""https://github.com/flazz/vim-colorschemes"" rel=""nofollow"">vim-colorschemes</a> for my  colorschemes - which doesn't work.</p>

<p><strong>Approach 1:</strong></p>

<p>in my init.vim:</p>

<pre><code>Plug 'flazz/vim-colorschemes'
[...]
syntax on
colorscheme babymate256
set background=dark
</code></pre>

<p>Putting those colorscheme settings at the end of my init.vim(=after my mappings), works. Putting those before my mappings (but after <code>filetype plugin</code>
and that) doesn't. That doesn't make much sense to me, but as neovim supports asynchron execution, that may be the cause.</p>

<p>Putting <code>set runtimepath+=~/.dotfiles/nvim/plugged/vim-colorschemes/colors</code> before those colorscheme settings doesn't work either.</p>

<p><strong>Approach 2:</strong></p>

<p>Putting all colorschemes from <code>nvim/plugged/vim-colorschemes/colors</code> into <code>nvim/colors/</code> doesn't change anything.</p>

<p>Of course, i can set my colorscheme manually after nvim has started.</p>

<ul>
<li>I thought of using just an if structure for setting the colorscheme, but i don't know what i could test, as the colorscheme set doesn't provide any variables.</li>
<li>why does the manual configuration using nvim/color doesn't work?</li>
<li>Do you have suggestions on how to manage colorschemes?</li>
</ul>

<p><strong>EDIT:</strong> I don't like setting it at the end of my file, as it destroys my file structure.</p>
","<p>Although, i haven't found out what exactly was the problem or how i could solve it in the expected way (just placing colorscheme babymate256 in my config as everyone else does) </p>

<p><strong>=></strong> i now use just <code>autocmd VimEnter * colorscheme babymate256</code>
(which is not as fine as without an autocmd, but it doesn't disorganize up my config structure.)</p>

<p>Btw: Additionally, i just haven't found the exact name of my default colorscheme, "":colorscheme "" had just printed ""default""</p>

<p><hr>
<strong>EDIT</strong>
Afterwards, i solved a very similar problem by putting ""set background=dark"" <em>before</em> the colorscheme setting.</p>
","5665"
"How to get the current byte offset in whole file","992","","<p>I saw that you could display the current byte offset in the statusline using <code>%o</code>, but I found no function or command which does the same.  Is there a way of getting the current byte offset pragmatically?</p>
","<p>Try this:</p>



<pre><code>function! FileOffset()
    return line2byte(line('.')) + col('.') - 1
endfunction
</code></pre>

<p>This returns the 1-based offset in file, which is the same as <code>%o</code> in <code>statusline</code>.  You can, of course, subtract 1 to get the 0-based offset.</p>
","3850"
"Vim is displaying some info and ""Press ENTER ..."" when I open a file","987","","<p>From time to time I see something like in the status bar when I open a file:</p>

<pre><code>""Gemfile"" 112L, 2941C
""Gemfile"" 112 lines --62%--
Press ENTER or type command to continue
</code></pre>

<p>Where is it coming from? How to disable it forever?</p>

<p>This is seriously getting out of hand, I am editing wrong lines in files because when I switch to the file it is off by one line.</p>

<p><strong>Update</strong></p>

<p>When multiple files are opened in buffers and you bring vim to foreground especially after some changes like <code>git merge</code> vim seem to reload files.</p>

<p>Settings <code>cmdheight</code> to 2 doesn't help because there might be more messages. This is what I just had after merge:</p>

<pre><code>NORMAL  +3 ~9 departments  ... STATUS BAR
""app/assets/stylesheets/_menu.sass.erb"" 144L, 3372C
""app/assets/stylesheets/_users.sass"" 120L, 2110C
""spec/factories/users.rb"" 19L, 469C
Press ENTER or type command to continue
</code></pre>

<p>There should be a way to get rid of this.</p>
","<p>This is controlled with the <code>shortmess</code> option. In particular, you probably want to set the <code>O</code> (upper-case o) flag with <code>set shortmess+=O</code>.</p>

<pre><code>O     message for reading a file overwrites any previous message.
      Also for quickfix message (e.g., "":cn"").
</code></pre>

<p>Note that this is included in the Vim default, which is <code>filnxtToO</code>. So I think you either added this to your vimrc some time in the past and forgot about it, or some plugin is resetting it. In <a href=""https://vi.stackexchange.com/q/771/51"">How do I debug my vimrc file?</a> you can find some tips on how to figure out where this is being reset.</p>

<p>Also see <a href=""http://vimhelp.appspot.com/options.txt.html#%27shm%27"" rel=""nofollow noreferrer""><code>:help 'shortmess'</code></a>. And <a href=""https://vi.stackexchange.com/q/771/51"">this question</a> is almost exactly the same.</p>
","3084"
"How to label tmux tabs with the name of the file edited in vim?","984","","<p>Whenever I open a tmux session in terminal, all of the tabs containing vim sessions are labelled <code>vim</code>. </p>

<p>My question is: How to configure it to label tmux tabs with the name of the edited file or something like <code>vim | test.cpp</code> used as the title of the tabs in question.</p>
","<p>There you go : </p>

<pre><code>autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call system(""tmux rename-window 'vim | "" . expand(""%:t"") . ""'"")
</code></pre>

<p>Decomposing : </p>

<pre><code>autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call
</code></pre>

<p>On buffer read, file read or buffer new file event (see <code>:help autocmd-events</code>) execute the next command : </p>

<pre><code>call system()
</code></pre>

<p>Call a system function and pass it the text : </p>

<pre><code>""tmux rename-window 'vim | ""  
</code></pre>

<p>Rename the current window with a string starting with <code>vim |</code></p>

<pre><code>. expand(""%:t"") 
</code></pre>

<p>Add to the string the filename (see <a href=""http://vim.wikia.com/wiki/Get_the_name_of_the_current_file"" rel=""nofollow noreferrer"">this article</a> for the formatting and <a href=""https://stackoverflow.com/questions/10842051/how-to-pass-argument-to-a-script-in-vim-system-call"">this post</a> for the expand insert)</p>

<pre><code>. ""'""
</code></pre>

<p>Add the final <code>'</code> to close the command.</p>

<p>After expanding it will look like (while editing the .vimrc file): </p>

<pre><code>system(""tmux rename-window 'vim | .vimrc'"")
</code></pre>

<p>As @erthalion said in the comment, you can clean up when leaving vim with :</p>

<pre><code>autocmd VimLeave * call system(""tmux rename-window 'tmux'"")
</code></pre>
","3898"
"How to detect whether swp files contain unsaved changes?","983","","<p>When editing source code using gvim (v.7.4.488), I want to commit some changes the vcs (I'm using git 2.1.4 from the command line in Ubuntu linux).</p>

<pre><code>git --status
</code></pre>

<p>shows which files I changed.  However, it also shows the vim <code>.*.swp</code> of the currently visible buffer(s) (both if the file contain unsaved changes and when the edited file is the same as the <code>.*.swp</code>-file).  Ofcourse, git can <a href=""https://help.github.com/articles/ignoring-files/"" rel=""nofollow noreferrer"" title=""Ignoring files - User Documentation"">ignore</a> these files or vim can store the swap files in a different location (see <a href=""http://vim.wikia.com/wiki/Remove_swap_and_backup_files_from_your_working_directory"" rel=""nofollow noreferrer"" title=""Remove swap and backup files from your working directory - Vim Tips Wiki"">vim.wikia</a> or <a href=""https://stackoverflow.com/q/1636297/814206"" title=""swapfile - How to change the folder path for swp files in Vim - Stack Overflow"">this question at stackoverflow</a>).  But I like the <code>.*.swp</code>-files showing up in <code>git --status</code> when they contain unsaved changes, since it signals me that I'm committing files in a different state than what I think they are in.</p>

<p>How can I avoid the false positives of <code>.*.swp</code>-files showing up in <code>git --status</code> when the saved file is the same as the <code>.*.swp</code>-file, while being able to see that file to commit are in a different state than the ones I'm editing with vim?</p>

<ul>
<li>Is it possible to only have <code>.*.swp</code>-files, when file on disk and file in vim are different?</li>
<li>Is there an other way to detect unsaved files?</li>
</ul>

<p><strong>Combining the comments of <a href=""https://vi.stackexchange.com/users/342/elyashiv"" title=""User elyashiv - Vi and Vim Stack Exchange"">@elyashiv</a> and <a href=""https://vi.stackexchange.com/users/1800/vanlaser"" title=""User VanLaser - Vi and Vim Stack Exchange"">@VanLaser</a> results in a simpler method than detecting whether swap files imply unsaved files:</strong></p>

<ol>
<li>do not let git ignore the .*.sw[po] files;</li>
<li>when committing, if <code>git --status</code> reveals any <code>.*.sw[po]</code>-files do a <code>:wa</code> in vi; and,</li>
<li>add and commit.</li>
</ol>
","<p><code>vim -r</code> at the command line will list all swap files in the current directory and temporary directories, and whether they contain any unsaved changes. Look for the line that says <code>modified: no/YES</code>.</p>

<p>I don’t know how to tell Vim to look in a different directory, so you’ll need to change to each directory that contains a swap file and run <code>vim -r</code>. You could come up with a script that parsed the output of <code>git status</code>, or used <code>find -name '.*.sw[po]'</code>, and then ran <code>vim -r</code> in each directory, to show all swap files with unsaved changes.</p>

<p>(I use <code>.*.sw[po]</code> instead of <code>.*.swp</code>, because sometimes <code>.swo</code> files are created in addition to <code>.swp</code> files, when you edit a file that already has a swap file. <code>.swn</code> files can be created too if you edit a file with two existing swap files, but I don’t think I’ve ever seen one in the wild. If you’re really paranoid, you could use <code>.*.sw[a-p]</code> or simply <code>.*.sw?</code>.)</p>

<p>See <a href=""http://vimdoc.sourceforge.net/htmldoc/starting.html#-r"" rel=""nofollow""><code>:help -r</code></a> for (a little) more information on the <code>-r</code> option, or <a href=""http://vimdoc.sourceforge.net/htmldoc/recover.html"" rel=""nofollow""><code>:help recover.txt</code></a> for more information on recovery and swap filenames.</p>
","4237"
"Why are my windows scrolling together?","979","","<p>I have two windows open on the same buffer and I want to edit two parts of the same file at the same time.  I can't because the windows are scrolling together.  I have <code>noscrollbind</code> set so I am confused by this.  What else could be causing this?</p>

<p>If I start a new session then the problem goes away.  I'd prefer not to have to close my session because I have memorized all the buffer numbers.  </p>
","<p>As suggested by <a href=""https://vi.stackexchange.com/questions/5601/why-are-my-windows-scrolling-together#comment8656_5601"">Christian Brabandt</a> in the comments, this was caused by the <code>'cursorbind'</code> setting.</p>

<p><code>:help 'cursorbind'</code>:</p>

<blockquote>
  <p>When this option is set, as the cursor in the current window moves other cursorbound windows (windows that also have this option set) move their cursors to the corresponding line and column.  This option is useful for viewing the differences between two versions of a file (see 'diff'); in diff mode, inserted and deleted lines (though not characters within a line) are taken into account.</p>
</blockquote>
","12468"
"Why won't vim source my .vimrc file","977","","<p>Today, I found my <code>.vimrc</code> didn't take effect. It was ok just hours ago.</p>

<p>When I launched vim with <code>$vim --plugin</code>, <code>:scriptnames</code> echoed nothing: <code>.vimrc</code> file was not sourced. (Note: <code>/etc/vimrc</code> was removed to debug this problem.) </p>

<p>Then I tried to google and found <code>$VIMINIT</code> variable suspicious. </p>

<p>Here is the value of <code>$VIMINIT</code>:</p>

<pre><code>$ echo $VIMINIT
set number
</code></pre>

<p>Vim documentation about <code>VIMINIT</code>:</p>

<pre><code> c. Four places are searched for initializations.  The first that exists
    is used, the others are ignored.  The $MYVIMRC environment variable is
    set to the file that was first found, unless $MYVIMRC was already set.
    -  The environment variable VIMINIT (see also |compatible-default|) (*)
       The value of $VIMINIT is used as an Ex command line.
    -  The user vimrc file(s):
                ""$HOME/.vimrc""      (for Unix and OS/2) (*)
                ""s:.vimrc""          (for Amiga) (*)
                ""home:.vimrc""       (for Amiga) (*)
                ""$VIM/.vimrc""       (for OS/2 and Amiga) (*)
                ""$HOME/_vimrc""      (for MS-DOS and Win32) (*)
                ""$VIM/_vimrc""       (for MS-DOS and Win32) (*)
            Note: For Unix, OS/2 and Amiga, when "".vimrc"" does not exist,
            ""_vimrc"" is also tried, in case an MS-DOS compatible file
            system is used.  For MS-DOS and Win32 "".vimrc"" is checked
            after ""_vimrc"", in case long file names are used.
            Note: For MS-DOS and Win32, ""$HOME"" is checked first.  If no
            ""_vimrc"" or "".vimrc"" is found there, ""$VIM"" is tried.
            See |$VIM| for when $VIM is not set.
    -  The environment variable EXINIT.
       The value of $EXINIT is used as an Ex command line.
    -  The user exrc file(s).  Same as for the user vimrc file, but with
       ""vimrc"" replaced by ""exrc"".  But only one of "".exrc"" and ""_exrc"" is
       used, depending on the system.  And without the (*)!
</code></pre>

<p>I could not understand the vim documentation fully. It seems that <code>$VIMINIT</code> may mess the startup of vim. </p>

<p>Clear <code>$VIMINIT</code>:</p>

<pre><code>$ VIMINIT=
$ echo $VIMINIT
</code></pre>

<p>Problem still exist.</p>
","<p>Expanding on @mMontu's answer; Vim hunts for initialization in order of that list till it finds one. Since the <code>$VIMINIT</code> variable take precedent to the <code>.vimrc</code> file, it satisfies the search and any other option after that is <strong>ignored</strong>.</p>

<p>The reason it still didn't work after:</p>

<pre><code>$ VIMINIT=
$ echo $VIMINIT
</code></pre>

<p>Is (1) you're setting a local variable not an environment variable. That needs to be exported:</p>

<pre><code>$ export VIMINIT=
</code></pre>

<p>(2) this still won't work because <code>VIMINIT</code> is still defined:</p>

<pre><code>$ printenv | grep VIMINIT
VIMINIT=
</code></pre>

<p>What needs to happen is removal from the environment all together:</p>

<pre><code>$ unset VIMINIT
$ printenv | grep VIMINIT || echo ""Gone""
Gone
</code></pre>

<p>(These commands are Bash specific. Change them to suit your preferred shell if needed.)</p>
","5883"
"Error while processing .vimrc in vagrant when I run `git commit -v`","973","","<p>I am working on a CentOs machine. <strong>Vim works fine</strong>. But when I <code>git commit -v</code> It seems that something is wrong:</p>

<pre><code>[vagrant@localhost dotfiles]$ git add .
[vagrant@localhost dotfiles]$ git commit -v
Error detected while processing /home/vagrant/.vimrc:
line    6:
E492: Not an editor command: Plugin 'gmarik/Vundle.vim'            "" vim bundle manager
line    7:
E492: Not an editor command: Plugin 'kien/ctrlp.vim'               "" finder ...
line    8:
E492: Not an editor command: Plugin 'fugitive.vim'                 "" git integration
line    9:
E492: Not an editor command: Plugin 'MarcWeber/vim-addon-mw-utils' "" add your local vimrc
line   10:
E492: Not an editor command: Plugin 'tomtom/tlib_vim'
line   11:
E492: Not an editor command: Plugin 'garbas/vim-snipmate'          "" add snippets to your vim
line   12:
E492: Not an editor command: Plugin 'scrooloose/nerdtree'          "" tree of files and folders
line   13:
E492: Not an editor command: Plugin 'tommcdo/vim-lion'             "" align equals
line   14:
E492: Not an editor command: Bundle 'vim-php/vim-composer'
line   29:
E518: Unknown option: foldlevel=1
line   30:
E518: Unknown option: foldlevelstart=42
line   31:
E518: Unknown option: foldmethod=indent
Press ENTER or type command to continue
</code></pre>
","<p>The error comes from the fact that Vundle isn't installed on your vagrant VM.</p>

<p>You should connect to your VM, issue the following command:</p>

<pre><code>git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre>

<p>And issue <code>:PluginInstall</code> in vim on your VM.</p>

<p>I think it is possible to use puppet to pre-configure your vagrant installation to include Vundle but I never tried it; I always do it manually.</p>

<p>Also you might be interested in a scrip like <a href=""https://gist.github.com/fideloper/7552992"" rel=""nofollow"">this one</a> to get inspiration on how to automatically add Vundle to a fresh install <em>(as said in the article linked on top of the page the script works only with an empty <code>.vimrc</code>. I give you this link only as an inspiration)</em>.</p>
","4042"
"How can I map d[count]d?","973","","<p><em>N.B. This is</em> not <em>a duplicate of <a href=""https://vi.stackexchange.com/questions/2301/how-does-the-d3fg-command-work"">How does the &quot;d3fg&quot; command work?</a> Please read it before voting to close!</em></p>

<p>I've come to a bit of an impasse in my <a href=""https://vi.stackexchange.com/questions/2493/can-i-make-vim-also-save-small-deletions-into-register-1"">quest to get small deletions work like big ones</a>. The problem I've got is that I can't figure out how to remap commands like <kbd>d</kbd><kbd>3</kbd><kbd>d</kbd>. In fact, I can't even understand how they work in the first place, nor find any mention of them in Vim's help.*</p>

<p><kbd>d</kbd><kbd>3</kbd><kbd>j</kbd> is straightforward: it applies the <code>d</code> operator to the <code>3j</code> motion,</p>

<p><kbd>3</kbd><kbd>d</kbd><kbd>d</kbd> is also straightforward: it runs the <code>dd</code> command with a ""count"" of 3.</p>

<p><kbd>d</kbd><kbd>3</kbd><kbd>d</kbd> <em>looks</em> like it should be straightforward, it applies the <code>d</code> operator to the&hellip; but what is <code>3d</code>? It's not a motion. If you type <kbd>3</kbd><kbd>d</kbd> on its own, Vim treats it as a count followed by an operator, and waits patiently for further input.</p>

<p>And you can't apply operators to other operators. <kbd>d</kbd><kbd>d</kbd> isn't described in the help as a sequence of two operators. It's a separate, two-keystroke command. (cf. <kbd>d</kbd><kbd>c</kbd>, which does nothing.)</p>

<p>It also doesn't appear to be the case that the positioning of the count is flexible for commands that require two keystrokes: <kbd>2</kbd><kbd>g</kbd><kbd>j</kbd> moves the cursor down two screen-lines, but <kbd>g</kbd><kbd>2</kbd><kbd>j</kbd> discards the first two keypresses entirely and moves the cursor down one line.</p>

<p>So how does it work? Is this just a special case in Vim's internal code? Is there any way I can create a <code>d[count]d</code> mapping?</p>

<p><strong>EDIT</strong>: Is it a text object? <code>:h text-objects</code> doesn't include it in the list of ""text object selection commands"", but then it <em>does</em> include dd in a list of deletions ""grouped from small to big objects"". And <kbd>d</kbd><kbd>2</kbd><kbd>a</kbd><kbd>w</kbd> does delete the word under the cursor and the following one. On the other hand, <kbd>c</kbd><kbd>2</kbd><kbd>d</kbd> does nothing.</p>

<p><sub>* I'm sure some mention of them must exist, but I can't find it. I've read <code>:help deleting</code>, <code>:help motion.txt</code>, and tried <code>:helpgrep dNd</code> for all values of N from 1&ndash;9</sub>.</p>
","<h1>Operator-pending mode</h1>

<p>Between typing an operator (like <code>d</code>, <code>c</code>, or <code>gU</code>) and a motion (like <code>w</code>, <code>i}</code>, or <code>/foo&lt;CR&gt;</code>), Vim is in Operator-pending mode. You can create mappings for this using <code>:omap</code> and <code>:onoremap</code>.</p>

<p>In my examples, I'm going to map the Operator-pending <code>d</code> to <code>w</code>. This is a random choice, because I don't know what you actually wanted to use it for.</p>

<h2>Create an omap</h2>

<p>Let's create a mapping for <code>d</code> in Operator pending mode. I'm gonna assume we're writing VimScript here (such as in your <code>.vimrc</code>), so I'll omit leading <code>:</code>s.</p>

<pre><code>onoremap d w
</code></pre>

<p>This makes <code>dd</code> act like <code>dw</code>. It also makes <code>d[count]d</code> act like <code>d[count]w</code>. But I bet you didn't want to affect the behaviour of <code>dd</code> (i.e., no <code>[count]</code> supplied).</p>

<h2>Expression mappings</h2>

<p>Expression mappings let you evaluate a VimScript expression to produce the right-hand-side of the mapping. The expression should evaluate to a string. Expression mappings are denoted by the <code>&lt;expr&gt;</code> keyword.</p>

<p>Vim also has some built-in variables that get populated at various times, and are often useful during mappings. One of them is <code>v:count</code>, which is the <code>[count]</code> supplied to an operator or motion.</p>

<p>Let's put that all together. If no <code>[count]</code> is supplied, <code>v:count</code> will be <code>0</code>. We can tell our mapping to just use <code>d</code> in that case.</p>

<pre><code>onoremap &lt;expr&gt; d v:count == 0 ? 'd' : 'w'
</code></pre>

<p>Now <code>dd</code> behaves like the default (deletes a line), but <code>d[count]d</code> behaves like <code>d[count]w</code>. Cool!</p>

<h2>Restrict it to use after the <code>d</code> operator</h2>

<p>You might notice something, though. Now <code>cd</code> also behaves like <code>cw</code>. This may not be a problem, but for completeness, let's restrict it so it only works after the <code>d</code> operator.</p>

<p>Vim has another variable, <code>v:operator</code>, which contains the operator most recently used. Let's check that, too, before doing anything special.</p>

<pre><code>onoremap &lt;expr&gt; d (v:count == 0 \|\| v:operator != 'd') ? 'd' : 'w'
</code></pre>

<p><strong>NOTE:</strong> Since <code>:map</code> commands can be chained with <code>|</code>, we have to escape them in our expression here. So the logical OR operator <code>||</code> becomes <code>\|\|</code>.</p>

<p>Cool, so <code>cd</code> and <code>c[count]d</code> are back to doing nothing, just like they used to. This is good so that other plugins can define <code>cd</code>.</p>

<h2>I don't want to just delete some other motion</h2>

<p>If you wanted to map <code>d[count]d</code> to something totally different, nothing to do with deleting text, we can make that work too.</p>

<p>When you're typing commands in Normal mode, and you start typing a command by mistake, you can hit <code>&lt;Esc&gt;</code> to cancel that command. The same applies to your mappings.</p>

<p>Let's make <code>d[count]d</code> change the current line to whatever <code>[count]</code> is.</p>

<pre><code>onoremap &lt;expr&gt; d (v:count == 0 \|\| v:operator != 'd') ? 'd' : '&lt;Esc&gt;cc' . v:count . '&lt;Esc&gt;'
</code></pre>

<p>The last part of the mapping is a VimScript expression: <code>&lt;Esc&gt;cc' . v:count . '&lt;Esc&gt;'</code>. That's <code>&lt;Esc&gt;</code> to cancel the pending <code>d</code> command, then <code>cc</code> to change the current line, <code>v:count</code> to type the value of the <code>[count]</code> (in Insert mode), and <code>&lt;Esc&gt;</code> to return to Normal mode. Note that we're building a string here using the VimScript concatenation operator, <code>.</code>.</p>

<hr>

<p>Your actual use case is probably going to be different from what I've outlined here, but hopefully this helps you to get the ball rolling.</p>

<p>Happy Vimming!</p>
","2546"
"How do I move vertically until reaching a non-whitespace character?","973","","<p>In a very long file with (accurately-) indented code, it may be helpful to move directly to a line of text above or below the cursor which delimits the indenting.</p>

<p>(One way of doing this could be via the indent foldmethod, by folding the current indent level, which collapses the lines delimiting the indent level to be only a <code>j</code> or <code>k</code> away from the cursor. However, I have found instances where indent folding hasn't been able to work on the indent I'm interested in.)</p>

<p>Here's an example, with the cursor marked by the underscore <code>_</code> (at the second character column between the definitions of <code>class Bazz</code> and <code>class Qux</code>), but imagine that the number of paragraphs or lines within the <code>module</code>s is unknown or variable:</p>

<pre><code>module Foo
  # lots of code...
end

module Bar
  class Baz
    # ...
  end

  class Bazz
    # lots of code...
  end
 _
  class Qux
    # ...
  end

  class Quux
    # lots of code...
  end
end
</code></pre>

<p>...how could I quickly navigate to the <code>o</code> of <code>module Bar</code> above the cursor, or the <code>n</code> of the <code>end</code> below the cursor at the very last line? Note that the vertical column contains whitespaces, but also no characters at the second column in between the <code>class</code> definitions.</p>
","<p>How about this function?</p>

<pre><code>function FloatUp()
    while line(""."") &gt; 1
                \ &amp;&amp; (strlen(getline(""."")) &lt; col(""."")
                \ || getline(""."")[col(""."") - 1] =~ '\s')
        norm k
    endwhile
endfunction
</code></pre>

<p>You could <code>nnoremap gU :call FloatUp()&lt;CR&gt;</code> (<code>gU</code> for ""go up""), and then invoke with <code>gU</code>.</p>

<p>Here's an explanation:</p>

<ul>
<li>The code repeatedly moves up the cursor (with <code>norm k</code>) as long as the <code>while</code> condition holds.</li>
<li>The <code>while</code> condition holds if this is not the first line (<code>line(""."") &gt; 1</code>) and either
<ul>
<li>this line is too short (probably empty); or</li>
<li>the current line (<code>getline(""."")</code>)'s character at the current column (<code>[col(""."") - 1]</code>) is whitespace (<code>=~ '\s'</code>; i.e., matches the whitespace pattern).</li>
</ul></li>
</ul>
","156"
"Vim, lua and ctags","967","","<p>I work a bit on a lua project (not small, but most of the code is not my own), and I'd like to get tags working. Current ctags contains bug, which can be fixed by getting the latest code from svn apparently, but even without that bug, it's not very usefull to me, since it does not know about the structure of tables. To give an example, a file might contain</p>

<blockquote>
  <p>function table1:func1(arg1,arg2)</p>
</blockquote>

<p>and then I have a call</p>

<blockquote>
  <p>table1:func1(a1,a2)</p>
</blockquote>

<p>somewhere in my code. When the cursor is on <code>table1:func1</code>, <kbd>Ctrl-]</kbd> should take me to the first mentioned file (assuming it's uniqe or the first in the list), but actually it can't find the tag. Using <code>:ts /table1:func1</code> kinda does the job, but isn't nice to use.</p>

<p>So, long story short, does someone have a nice working setup for working with lua? How did you deal with the tag thing? I found some plugins that look kinda nice, but nothing seems to include a remedy to the tag problem.</p>
","<p><code>&lt;c-]&gt;</code> only looks at the keyword under the cursor. Normally <code>:</code> is not defined as a keyword character. To define <code>:</code> as a keyword character you can put</p>

<pre><code>setlocal iskeyword+=:
</code></pre>

<p>in <code>~/.vim/ftplugin/lua.vim</code> so that this happens automatically for lua files (and only for lua files)</p>

<hr>

<p>Or if you just want to add something to your vimrc, you can add the following</p>

<pre><code>augroup filetype_lua
    autocmd!
    autocmd FileType lua setlocal iskeyword+=:
augroup END
</code></pre>

<p>This creates an autocmd that only activates on the lua filetype to set the <code>:</code> as a keyword character. The <code>augroup</code> command creates a autocmd group which stops the autocmd from being defined multiple times if you resource your vimrc.</p>
","2815"
"Visual Differences between vim on virtualbox Ubuntu guest (through putty) OR gVim on Windows host","966","","<p>Ok, it's a curiosity more than a real question, I apologize in advance for long post:</p>

<p>Usually I code with vim on a ubuntu headless, as a virtualbox guest on my stupid windows 7 host; I access linux terminal using amazing putty (<a href=""http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"" rel=""nofollow noreferrer"">http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</a>)</p>

<p>BTW, I love putty full-screen mode (Alt-Enter) and here a screenshot of a editing:</p>

<p><img src=""https://i.stack.imgur.com/L4LT2.jpg"" alt=""vim screeenshot using putty""></p>

<p>Yesterday I tryied to port my ubuntu vim environment using <a href=""http://www.vim.org/download.php#pc"" rel=""nofollow noreferrer"">http://www.vim.org/download.php#pc</a> native gVim on windows...:
I copied ""as is"" my .vimrc and plugins directories from the ubuntu to windows, to have my beloved configurations, plugins, colorscheme (BTW, I use ""Monokay-Refined"" colorscheme).</p>

<p>BTW, the environment is perfectly replicated, a part the Session.vim (that seem incompatible).</p>

<p>gVim configuration:
After some moments of panic with gVim configuration... by example I spent some time to understand how to make configurations persistent (changing and fixing the awful default font, remove menubar/toolbar, etc.) achieving a full-screen experience similar to that I use with putty.... </p>

<p>BTW, I found excellent beautiful utility to do that: <a href=""https://github.com/derekmcloughlin/gvimfullscreen_win32/tree/master"" rel=""nofollow noreferrer"">https://github.com/derekmcloughlin/gvimfullscreen_win32/tree/master</a>)</p>

<p>OK, with gVim on windows I finally got the ""same"" full-screen feeling I usually have using vim on ubuntu through putty, see:
<img src=""https://i.stack.imgur.com/qqSPa.jpg"" alt=""gVim screenshot on windows""></p>

<p>BUT, to be meticulous, as you can see here below... screenshots are similar but not exactly the SAME!?</p>

<p>I mean, I realized that COLORS are a bit differents accessingsame ruby file (by example) on the ubuntu through putty, and a copy of the same file on windows, acccessed with gVim ?!  despite the colorscheme, font and all other configs are identical! It seems to me that colors on the gVim installation are a bit ""better""... and last but not least some character attributes (italic, bold, etc.) are bettere visualized on gVim that on putty ssh access...</p>

<p>It's a question of putty color/font ""rendering"" ?  </p>

<p>BTW, visualized code is from my ruby project: <a href=""https://github.com/solyaris/pere"" rel=""nofollow noreferrer"">https://github.com/solyaris/pere</a></p>

<p>thanks
giorgio</p>
","<p>PuTTY, like other high-color terminals, only supports a fixed color palette of 256 colors. GVIM can use the full 24-bit RGB color space; that's why you see ""finer"" nuances there.</p>

<p>As for attributes, GVIM offers <em>undercurl</em>, which is not present in any terminal, and free mixture of bold (depending on configuration shown with lighter color instead) and italic (not offered in PuTTY).</p>
","3324"
"Sort based on comma separated words","963","","<p>Normal command :sort can sort lines based on column or virtual column (<code>\%c</code> or <code>\%v</code>), could the higher level logical column be used as sorting key? Using regular expression looks a little complex for this scenario (the column is around the end of the line?) and it looks similar as what the sort utility does (<code>sork -k</code>), but sort with this functionality is unavailable on Windows. Vim plug-in will also help.</p>

<p>For example, I'd like to sort the 2 lines below according to the last column separated by comma. My real scenario has much more columns and string pattern. Specify column delimiter will simplify it a lot.</p>

<pre><code>xxx,yyy,zzz,0x123
zzxz,xxxx,yyyy,0x121
</code></pre>
","<p>Vim's sort allows you to either skip <code>{pattern}</code>, or only consider it (with the <code>r</code> flag). A regular expression for the last comma-delimited column is easy to formulate: Skip everything until and including the last comma in a line:</p>

<pre><code>:sort/.*,/
</code></pre>

<p>For any other column, I would use the <code>r</code> flag, and skip N (here: <code>2</code>) previous columns via <code>\zs</code>:</p>

<pre><code>:sort/\([^,]*,\)\{2}\zs[^,]*/
</code></pre>
","3371"
"What is the variable $MYVIMRC?","963","","<p>One of my project folders has a file <code>$MYVIMRC</code>. I didn't create it. 
I have a .vimrc file I created in my home folder. What is the difference and what is <code>$MYVIMRC</code> and when/how is it created. </p>
","<p>From <a href=""http://vimhelp.appspot.com/starting.txt.html#%24MYVIMRC"" rel=""nofollow noreferrer""><code>:h $MYVIMRC</code></a>:</p>

<blockquote>
  <p><em>VIMINIT</em> <em>.vimrc</em> <em>_vimrc</em> <em>EXINIT</em> <em>.exrc</em> <em>_exrc</em> <em>$MYVIMRC</em></p>
  
  <p>c. Four places are searched for initializations.  The first that exists
  is used, the others are ignored.  <strong>The $MYVIMRC environment variable is
  set to the file that was first found, unless $MYVIMRC was already set
  and when using VIMINIT.</strong><br/></p>
  
  <ul>
  <li>The environment variable VIMINIT (see also |compatible-default|) (*)<br/>
  The value of $VIMINIT is used as an Ex command line.<br/></li>
  <li>The environment variable VIMINIT (see also |compatible-default|) (*)<br/>
  The value of $VIMINIT is used as an Ex command line.<br/></li>
  <li>The user vimrc file(s):<br/>
  
  <ul>
  <li>""$HOME/.vimrc""    (for Unix and OS/2) (*)<br/></li>
  <li>""$HOME/.vim/vimrc""    (for Unix and OS/2) (*)<br/></li>
  <li>""s:.vimrc""        (for Amiga) (*)<br/></li>
  <li>""home:.vimrc""     (for Amiga) (*)<br/></li>
  <li>""home:vimfiles:vimrc""  (for Amiga) (*)<br/></li>
  <li>""$VIM/.vimrc""     (for OS/2 and Amiga) (*)<br/></li>
  <li>""$HOME/_vimrc""    (for MS-DOS and Win32) (*)<br/></li>
  <li>""$HOME/vimfiles/vimrc"" (for MS-DOS and Win32) (*)<br/></li>
  <li>""$VIM/_vimrc""     (for MS-DOS and Win32) (*)<br/></li>
  </ul></li>
  </ul>
</blockquote>

<p>So basically <code>$MYVIMRC</code> contains the location of the file which as used as your configuration file</p>
","10351"
"Define word boundaries","962","","<p>I use, e.g., <code>dw</code> to delete a word based on word boundaries defined by changing character classes, so that this command applied on <code>abc,def,ghi</code> will result in <code>,def,ghi</code>. (So far so good, and it worked for me for decades.) Now, since just recently, that does not work any more on dots (<code>.</code>); that <code>dw</code> command applied on <code>abc.def;ghi</code> will result in <code>;ghi</code>.</p>

<p>Can anyone explain what happens here; maybe whether I changed some setting by accident. - How can that misbehaviour be fixed?</p>

<p><strong>Update:</strong> Following Peter's hint in his answer I obtained:</p>

<pre><code>  iskeyword=@,48-57,_,192-255,.
        Last set from /usr/share/vim/vim73/syntax/sh.vim
</code></pre>

<p>and found this content in <code>/usr/share/vim/vim73/syntax/sh.vim</code>:</p>

<pre><code>"" AFAICT ""."" should be considered part of the iskeyword.  Using iskeywords in
"" syntax is dicey, so the following code permits the user to prevent/override
"" its setting.
if exists(""g:sh_isk"")          "" override support
 exe ""setlocal isk="".g:sh_isk
elseif !exists(""g:sh_noisk"")   "" prevent modification support
 setlocal isk+=.
endif
</code></pre>

<p>Now this seems to be a system setting. I have no reservations against changing that file - only that it will be changed again on system updates, I fear. But since I am not familiar with vim's script language I'd be interested to know what the correct way to fix it would be. Personally I'd just remove the <code>.</code> so that the <code>+=</code> becomes a no-op, but I guess the whole <code>if</code> statement need to be fixed. (What's that <code>""g:sh_noisk""</code>?)</p>
","<p>Sounds like <code>'iskeyword'</code> changed recently. You can do <code>:verbose set iskeyword?</code> to see where <code>'iskeyword'</code> was last set.</p>

<p>Your specific issue is with the <code>sh</code> filetype. Here is an excerpt from <code>:h g:sh_isk</code>:</p>

<pre><code>The shell languages appear to let ""."" be part of words, commands, etc;
consequently it should be in the isk for sh.vim.  As of v116 of syntax/sh.vim,
syntax/sh.vim will append the ""."" to 'iskeyword' by default; you may control
this behavior with:
    let g:sh_isk  = '..whatever characters you want as part of iskeyword'
    let g:sh_noisk= 1  "" otherwise, if this exists, the isk will NOT chg
</code></pre>

<p>According to this you will need to add the following to your <code>vimrc</code>:</p>

<pre><code>let g:sh_noisk = 1
</code></pre>

<p>For more help see:</p>

<pre><code>:h 'iskeyword'
:h :set-verbose
:h local-options
:h g:sh_isk
:h ft-sh-syntax
</code></pre>
","3803"
"Performing certain operations without clearing register","961","","<p>Frequently, in configuration files I might copy and paste a block of lines, then I want to make small changes to that block. After pasting, I use <code>x</code> to delete characters that I want to remove, then move on to paste the next block. Except <code>x</code> puts the deleted characters on the clipboard, so I have to recopy the block of lines again.</p>

<p>Is there a way to do this without going into insert mode?</p>
","<p>Your options are:</p>

<ol>
<li>Use the black hole register <code>_</code>.  For example, to delete a line you would type <code>""_dd</code>.  This deletes without affecting the clipboard.</li>
<li>Explicitly name a register for the original yank.  For example, to yank a line into a named register you would type <code>""ayy</code> then to paste you would type <code>""ap</code></li>
<li>Use the yank registers to retrieve the original yank instead.  You can yank, then delete as necessary, then when you go to paste type <code>""0p</code></li>
<li>Use a plugin such as <a href=""https://github.com/svermeulen/vim-easyclip"">vim-easyclip</a> to provide a cut operator that is distinct from the delete operator (full disclosure: I wrote that)</li>
</ol>

<p>Run <code>:help registers</code> for more detail on the first 3</p>
","125"
"Is cpo&vim a special syntax?","960","","<p>In scripts it is customary to do something like:</p>

<pre><code>let s:save_cpo = &amp;cpo
set cpo&amp;vim

... script ...

let &amp;cpo = s:save_cpo
</code></pre>

<p>To ensure nocompatible mode for the script.</p>

<p>Is:</p>

<pre><code>set cpo&amp;vim
</code></pre>

<p>some sort of special syntax, as in <code>foo &amp; bar</code>? Or is it more like a command, trigger line or something else?</p>
","<p>Yes, it's a special syntax to reset options to the Vim defaults. From <a href=""http://vimhelp.appspot.com/options.txt.html#%3Aset-%26vim""><code>:help :set-&amp;vim</code></a>:</p>

<pre><code>:se[t] {option}&amp;        Reset option to its default value.  May depend on the
                        current value of 'compatible'. {not in Vi}
:se[t] {option}&amp;vi      Reset option to its Vi default value. {not in Vi}
:se[t] {option}&amp;vim     Reset option to its Vim default value. {not in Vi}

:se[t] all&amp;             Set all options, except terminal options, to their
                        default value.  The values of 'term', 'lines' and
                        'columns' are not changed. {not in Vi}
</code></pre>

<p>I found it by just typing <code>:help &amp;vim</code> (which also goes to <code>:help :set-&amp;vim</code>) :-)</p>
","2117"
"Are there alternatives to Gvim for a GUI for Vim?","958","","<p>Gvim is odd and ugly. It provides only a minimal GUI wrapper for Vim. Like has been done for Neovim, has anyone made an nicer alternative GUI front-end for Vim? </p>
","<p>No.</p>

<p>Vim and NeoVim don't share the same structure and Vim doesn't have the possibility to have a separate GUI.</p>

<p>Also, it is not necessarily ugly: it all depends on your configuration.</p>
","10765"
"How to write condition with regular expression?","956","","<p>I'm aware of the following comparison:</p>

<pre><code>if @% == ""/tmp/crontab.zi5NeVPGRc""
  set nobackup
  set nowritebackup
  set noundofile
  set noswapfile
endif
</code></pre>

<p>But how can I use regular expression? For example if the filename contains ""crontab"", then do this and that?</p>
","<p>You just have to use one of <a href=""http://vimhelp.appspot.com/eval.txt.html#expr-%3D%7E"" rel=""nofollow"">the regular expression match operators</a>. For example, using <code>=~#</code> to perform a case sensitive match:</p>

<pre><code>if @% =~# 'crontab'
  # the file name contains 'crontab', 
  # do this and that
endif
</code></pre>
","2741"
"Quickfix support for Python tracebacks","956","","<p>Say I have a python script with a runtime error:</p>

<pre><code>$ cat example.py  
#! /usr/bin/env python3

a = 1/0
</code></pre>

<p>which gives:</p>

<pre><code>$ python3 example.py 
Traceback (most recent call last):
  File ""example.py"", line 3, in &lt;module&gt;
    a = 1/0
ZeroDivisionError: division by zero
</code></pre>

<p>I want Vim to jump to the problematic line of that file (line 3 in this case). I know Vim can do this because it works just fine for catching errors at compile time in C with <code>gcc</code> using <code>:make</code> and the <code>quickfix</code> window.</p>

<p><a href=""https://i.stack.imgur.com/n3SXg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/n3SXg.png"" alt=""quickfix output from gcc""></a></p>

<p>Sure, I can populate Vim's quickfix window with <code>:set makeprg=python3\ %</code> and then <code>:make</code>, but it does not jump to the line number where the traceback points to. When I look in <code>:copen</code> it just highlights the first line of the trace, and I can't jump to the relevant line number.</p>

<p><a href=""https://i.stack.imgur.com/BRZdQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BRZdQ.png"" alt=""quickfix output from python3""></a></p>

<p>(I'm using Vim 7.4  on Debian <code>jessie</code> in case that matters.)</p>

<p>My questions are:</p>

<ul>
<li><p>Can I configure Vim so that it knows how to get the relevant line number from a Python traceback?</p></li>
<li><p>Can I modify the Python interpreter to spit out an error format that Vim already knows how to parse and get the relevant line number?</p></li>
</ul>
","<p>Vim comes with a set of ""compiler"" scripts, one of which is called <a href=""https://vimhelp.appspot.com/quickfix.txt.html#compiler-pyunit"" rel=""nofollow noreferrer"">""pyunit""</a>.  If you run <code>:compiler pyunit</code> and then <code>:make</code> (with your suggested value for <code>'makeprg'</code>), quickfix is populated as you expect.  However, it only works well if there's one level to the stack trace.</p>

<p>Improving that compiler script would be a useful exercise.</p>

<p>The <a href=""https://github.com/mattboehm/vim-unstack"" rel=""nofollow noreferrer"">unstack</a> plugin may be of interest, as it provides a general mechanism to parse and view the locations reported in a stack trace and has Python support built in.</p>
","10147"
"Showing command history with showcmd","954","","<p>When using <code>set showcmd</code> Vim shows partial commands in the last line of the screen. For example, in Normal mode when typing the command <code>dt.</code> the last line shows <code>dt</code> and then, when you hit <code>.</code> the command is complete and therefore nothing is shown.</p>

<p>Is there a way to show full commands? For example when typing <code>dt.gU(</code>, first <code>dt.</code> would be shown; and when starting to type the second command the first would be cleared, so that in the end only <code>gU(</code> would is displayed.</p>

<p>This could be useful for example in illustrating GIFs; and to check that you typed what you wanted if you face some unexpected result.</p>
","<p>I couldn't find any way to do this in a regular Vim. However, if you are willing to patch Vim, the following may work for you.</p>

<p>The very simple patch (applied against Vim-7.4.052) disables the actual update to the screen that clears the history at the end of a normal command. It does this by returning whether or not <code>showcmd_is_clear</code> is set prior to updating the display,. (alternatively, you can comment out the if statement and leave just the one original <code>return</code> line. <strong>note</strong>: The patch below didn't paste very well; you may have to apply this by hand, though it is just a short one-liner. <strong>note</strong>: I did <em>not</em> comment out the actual <code>display_showcmd()</code> because it appears to be used in visual mode to update the display of the number of selected lines or other possibly other stuff. I have not extensively tested this.</p>

<pre><code>--- src/normal.c    2015-02-14 00:21:23.286352257 -0500
+++ src/normal.c    2015-02-14 00:21:25.238352173 -0500
@@ -4029,6 +4029,7 @@
    /* Don't actually display something if there is nothing to clear. */
    if (showcmd_is_clear)
        return;
+   return;
     }

     display_showcmd()
</code></pre>

<p>The result looks like this:</p>

<p><img src=""https://i.stack.imgur.com/Dg1gi.gif"" alt=""Screencast showing the patch""></p>

<p>A few interesting things to note:</p>

<ul>
<li>This shows even simple movements, like <code>j</code>, <code>k</code>, <code>b</code>, etc.</li>
<li>The <code>x</code> command actually becomes <code>dl</code> in the showcmd_buf.</li>
<li>Commands that change the bottom line obliterate the showcmd area (for example, using the <code>:</code> command, or entering insert mode (at least in my setup))</li>
<li>The capture program stopped recording many strokes after I typed a <code>""</code>, but my key sequence is visible in the vim window for my long register specified yank.</li>
<li>Not shown in the cast, but hitting <kbd>esc</kbd> in normal mode shows <code>^[</code> in the showcmd area</li>
</ul>
","786"
"How to restore bash terminal title if using 'set title' in vim?","949","","<p>I recently got to know that useful info can be shown in title of bash terminal when editing files using vim. Adding below displays file name, path of the file being edited.</p>

<pre><code>set title
</code></pre>

<p>But on exiting vim, the title is set to 'Thanks for flying vim'. I have different title set for each bash terminal and would like it to be restored once I close the vim?</p>

<p>Any way to change this behaviour of vim?</p>

<p>Before:<br>
<a href=""https://i.stack.imgur.com/R1uo0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/R1uo0.png"" alt=""enter image description here""></a></p>

<p>While editing a file in vim:<br>
<a href=""https://i.stack.imgur.com/C0hl8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/C0hl8.png"" alt=""enter image description here""></a></p>

<p>After:<br>
<a href=""https://i.stack.imgur.com/tDz9O.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tDz9O.png"" alt=""enter image description here""></a></p>

<p>Animation: see the title text
<a href=""https://i.stack.imgur.com/BpCPU.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BpCPU.gif"" alt=""Animation""></a></p>
","<p>Use the <code>titleold</code> setting:</p>

<pre><code>"" Update term title but restore old title after leaving Vim
set title
set titleold=
</code></pre>

<p>From <a href=""http://vimhelp.appspot.com/options.txt.html#%27titleold%27""><code>:help 'titleold'</code></a>:</p>

<blockquote>
  <p>This option will be used for the window title when exiting Vim if the original title cannot be restored.  Only happens if 'title' is on or 'titlestring' is not empty.</p>
</blockquote>
","8408"
"Replace . with -> in specific places","945","","<p>Sometimes I need to replace <code>.</code> with <code>-&gt;</code> when fixing code.</p>

<p>Usually search and replace cannot be used because there will be many (hundreds of) dots (<code>.</code>) and only a few ones of them must be changed. </p>

<p>However, I find the ones that need to be changed when I am going through a make <em>changelist</em>.</p>

<p>Using the repetition operator does not quite work because if I change one instance and then repeat with the dot command, then I get this:</p>

<pre><code>structBlah-&gt;.memberBlah
</code></pre>

<p>If I then use <kbd>x</kbd> to delete the extraneous dot, then paste and dot no longer work because the last change was a delete. </p>

<p>So, basically the problem is that the repetition operator repeats a motion and an edit, whereas here we need to repeat two edits: a delete and an insert.</p>

<p>Is there any convenient way to do this? One idea I had was to maybe use a macro like this:</p>

<pre><code>xi-&gt;&lt;ESC&gt;
</code></pre>
","<p>The cw(change word) command will solve your problem.</p>

<p>Put your cursor on the period and type <code>cw-&gt;&lt;Escape&gt;</code></p>

<blockquote>
  <p>something.somethingelse</p>
</blockquote>

<p>turns into </p>

<blockquote>
  <p>something->somethingelse</p>
</blockquote>

<p>and the <code>.</code> operator will still work, because cw is one operation that does both the deletion and substitution. </p>
","8638"
"How to escape single quote in Vim","940","","<p>I have this mapping in my <code>.vimrc</code></p>

<pre><code>nnoremap &lt;silent&gt;&lt;leader&gt;vlc :exe ""!open -a vlc '"".getline('.').""'""&lt;CR&gt;
</code></pre>

<p>It does work great with some files, but I'm getting error message with files that have single quote in it:</p>

<blockquote>
  <p>/Users/dude/Downloads/check/39min tpope's Vim Config and
  Plugins-MGmIJyTf8pg.mp4</p>
</blockquote>

<p>The error message:</p>

<blockquote>
  <p>/bin/bash: -c: line 0: unexpected EOF while looking for matching `''</p>
  
  <p>/bin/bash: -c: line 1: syntax error: unexpected end of file</p>
  
  <p>shell returned 2</p>
  
  <p>Press ENTER or type command to continue</p>
</blockquote>
","<p>Rather than add quotes yourself, use the <a href=""http://vimhelp.appspot.com/eval.txt.html#shellescape%28%29"" rel=""noreferrer""><code>shellescape()</code></a> function, which should take care or all edge cases:</p>

<pre><code>:nnoremap &lt;silent&gt;&lt;leader&gt;vlc :exe ""!open -a vlc "" . shellescape(getline('.'))&lt;CR&gt;
</code></pre>

<p>Another way is to use the <a href=""http://vimhelp.appspot.com/cmdline.txt.html#%25%3aS"" rel=""noreferrer""><code>%:S</code></a> filename modifier:</p>

<pre><code>:echo fnamemodify(""Hello 'world"", '')
Hello 'world

:echo fnamemodify(""Hello 'world"", ':S')
'Hello '\''world'

:echo expand('%')
hello 'world

:echo expand('%:S')
'hello '\''world'
</code></pre>

<p>In this particular case <code>shellescape()</code> probably makes more sense, but <code>:S</code> is useful especially when you want to combine it with other filename modifiers.</p>
","9177"
"Navigating using SSH","936","","<p>I know one can use <code>vim scp://host/path/to/file</code> to edit locally remote files then update the remote machine when saving (<code>:w</code>).
However I would like to know if it's possible to navigate through directories using ssh (or if there's a plugin to do that)</p>

<p>NERDTree doesn't support it, and when viming into a folder, although netrw allow me to navigate into directories, opening a file doesn't work.</p>
","<p>Oops forgot I had this question opened !</p>

<p>So the problem was that, with the netrw version I had (packaged with vim-gnome on Debian Jessie), modifying a file from the explorer (through ssh) would not use the correct URI (from memory, the '@' in the 'user@host' was missing).
It opened an empty file (because it didn't find anything) but it still saved the new file using the good URI (effectively overwriting the original file).</p>

<p>@user21497's answer also helped me though because I never found that 'new file' shortcut, which is quite handy because using ':e' creates the file locally.</p>

<p>Finally, <a href=""https://stackoverflow.com/questions/9160499/go-to-back-directory-browsing-after-opening-file-in-vim"">this question helped me navigate better using netrw</a> (getting back to the explorer after opening a file using :Ex)</p>

<p>Thanks for your help guys !</p>
","7769"
"How to enable syntastic only for Python?","932","","<p>There are various <a href=""https://vi.stackexchange.com/questions/2954/how-do-i-disable-syntastic-for-python-files"">questions</a> <a href=""https://stackoverflow.com/questions/20030603/vim-syntastic-how-to-disable-the-checker"">and</a> <a href=""https://stackoverflow.com/questions/31818109/how-to-selectively-disable-checkers-for-certain-file-types-when-using-syntastic"">answers</a> about disabling/blacklisting certain file types.</p>

<p>How do I disable syntastic <strong>for all but one</strong> filetype? (Let's say Python.)</p>
","<p>From the <a href=""https://github.com/scrooloose/syntastic/blob/1926693d1bcf786a526ff0980bc120ab4bad0dee/doc/syntastic.txt#L480-L513"" rel=""nofollow"">syntastic docs</a>:</p>

<blockquote>
<pre><code>                                                       'syntastic_mode_map'
Default: { ""mode"": ""active"",
           ""active_filetypes"": [],
           ""passive_filetypes"": [] }
</code></pre>
  
  <p>Use this option to fine tune when automatic syntax checking is done (or not
  done).</p>
  
  <p>The option should be set to something like:</p>

<pre><code>let g:syntastic_mode_map = {
    \ ""mode"": ""active"",
    \ ""active_filetypes"": [""ruby"", ""php""],
    \ ""passive_filetypes"": [""puppet""] }
</code></pre>
  
  <p>""mode"" can be mapped to one of two values - ""active"" or ""passive"". When set
  to ""active"", syntastic does automatic checking whenever a buffer is saved or
  initially opened.  When set to ""passive"" syntastic only checks when the user
  calls :SyntasticCheck.</p>
  
  <p>The exceptions to these rules are defined with ""active_filetypes"" and
  ""passive_filetypes"". In passive mode, automatic checks are still done for
  filetypes in the ""active_filetypes"" array (and ""passive_filetypes"" is
  ignored). In active mode, automatic checks are not done for any filetypes in
  the ""passive_filetypes"" array (""active_filetypes"" is ignored).</p>
  
  <p>If any of ""mode"", ""active_filetypes"", or ""passive_filetypes"" are left
  unspecified, they default to values above.</p>
  
  <p>If local variable 'b:syntastic_mode' is defined its value takes precedence
  over all calculations involving 'syntastic_mode_map' for the corresponding
  buffer.</p>
  
  <p>At runtime, the :SyntasticToggleMode command can be used to switch between
  active and passive modes.</p>
</blockquote>

<p>You probably want something like:</p>

<pre><code>let g:syntastic_mode_map = {
    \ ""mode"": ""passive"",
    \ ""active_filetypes"": [""python""],
    \ ""passive_filetypes"": [] }
</code></pre>
","5292"
"How can I get vim to not auto-wrap pasted text?","931","","<p>I am pasting several lines of text into vim at once (from another application, so I am using the OS's copy and paste and insert mode in vim). The longest of these lines is below:</p>

<pre><code>"" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
</code></pre>

<p>The problem with this line is that vim inserts a new line after ""to"" so it looks like this:</p>

<pre><code>"" :PluginClean      - confirms removal of unused plugins; append `!` to 
"" auto-approve removal
</code></pre>

<p>How can I keep this line together when pasting?</p>
","<p>Before pasting, do <code>:set paste</code>. This changes a bunch of settings like 'textwidth' and 'autoindent' for specifically this purpose. Then enter insert mode, paste with your OS, hit <code>&lt;Esc&gt;</code> to leave insert mode, and do <code>:set nopaste</code>.</p>

<p>You can also toggle settings with a <code>!</code>, i.e. <code>:set paste!</code> to turn it on/off.</p>
","1987"
"How do I make Vim always display several lines after EOF?","931","","<p>In Vim, I don't like how when you reach end of file it puts the last line at the bottom of the screen.</p>

<p>Is there anyway to make the last line be something like 10 lines above the bottom of the screen and just make blank lines under it?</p>
","<p>You can use <kbd>ctrl</kbd><kbd>E</kbd> to scroll down your file, when you are at the end of the file it will add ""virtual"" line so the last line of the file is not at the bottom of the windows.</p>

<p>Additionally you can use the option <code>scrolloff</code> to always let some lines after your cursor, add this to your <code>.vimrc</code>:</p>

<pre><code>set scrolloff=10
</code></pre>

<p>For more details see <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27scrolloff%27""><code>:h 'scrolloff'</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/scroll.html#CTRL-E""><code>:h CTRL-E</code></a>.</p>
","7700"
"How can I suppress the ""reading from STDIN"" message from within Vim?","922","","<p>When using Vim to read from stdin, it prints a informative message:</p>

<pre><code>$ echo foo | vim -
Vim: Reading from stdin...

$
</code></pre>

<p><strong>This is just an example. The actual use doesn't allow shell constructs.</strong> <a href=""https://groups.google.com/forum/#!topic/vim_dev/MATXOzr2AdM""><code>vim &lt;(echo foo)</code></a> is not an option.</p>

<p>Can I suppress that using <em>only</em> Vim options and/or vimrc settings?</p>

<hr>

<p>In case you do need to know what this is for, I'm trying to use <a href=""http://murukesh.me/2015/08/28/vim-for-man.html"">Vim for reading manpages</a> (shameless plug). GNU man doesn't allow shell constructs in <code>MANPAGER</code>, and by using <code>ftplugin/man.vim</code> and other things, I have successfully managed to have a comfortable experience using just <code>MANPAGER=""vim -""</code>. The last remaining annoyance is the unsightly message printed after every manpage that I viewed.</p>
","<p>Starting with <a href=""https://github.com/vim/vim/issues/1552"" rel=""nofollow noreferrer"">Vim 8.0.1308</a> (Nov 2017), you can use the <code>--not-a-term</code> option to suppress this message; for example with <code>quit</code>:</p>

<pre><code>$ echo hello | vi - --not-a-term -esc '%p|q!'
hello
</code></pre>

<p>Or with <code>exit</code>:</p>

<pre><code>$ echo hello | vi - --not-a-term -esc 'x!/dev/stdout'
hello
</code></pre>
","11722"
"installing vimtex?","922","","<p>I am trying to install <a href=""https://github.com/lervag/vimtex"" rel=""nofollow"">vimtex</a>, and I am not how to do that. What plugin manager should I use?</p>

<p>How do I combine it with ""vim-surround""? ""snipmate""?</p>

<p>I went through the <a href=""https://github.com/lervag/vimtex/blob/master/README.md"" rel=""nofollow"">readme</a> file, but could not really understand how vimtex could be used with other plugin managers. I could not install <code>vim-plug</code> </p>
","<p>To install with <a href=""https://github.com/tpope/vim-pathogen"" rel=""nofollow"">vim-pathogen</a>, this should work (taken directly from the readme, I just swapped vim-sensible with vimtex):</p>

<blockquote>
  <p>Now any plugins you wish to install can be extracted to a subdirectory under ~/.vim/bundle, and they will be added to the 'runtimepath'. Observe:</p>
</blockquote>

<pre><code>cd ~/.vim/bundle
git clone https://github.com/lervag/vimtex.git
</code></pre>

<blockquote>
  <p>Now vimtex is installed. If you really want to get crazy, you could set it up as a submodule in whatever repository you keep your dot files in. I don't like to get crazy.</p>
</blockquote>

<p>I further suggest you read the full readme of vim-pathogen, as well as other plugin managers that might be of interested, e.g.:</p>

<ul>
<li><a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow"">vim-plug</a></li>
<li><a href=""https://github.com/gmarik/vundle"" rel=""nofollow"">vundle</a></li>
<li><a href=""https://github.com/Shougo/neobundle.vim"" rel=""nofollow"">neobundle</a></li>
</ul>

<hr>

<p>Regarding how to combine vimtex with other plugins: I don't understand the question. In principle, it should just work.</p>
","6092"
"Why does remapping <Esc> make the cursor jump?","919","","<p>In <code>.vimrc</code>:</p>

<pre><code>inoremap ii &lt;esc&gt;                               "" ii to go back into command mode
</code></pre>

<p>The problem is, after <kbd>ii</kbd>, cursor jumps 35 columns right. The only other line which affects <kbd>Esc</kbd>:</p>

<pre><code>nnoremap &lt;esc&gt;&lt;esc&gt; :noh&lt;return&gt;&lt;esc&gt;
</code></pre>

<p>I have tried commenting it out, doesn't help.</p>

<hr>

<p><a href=""http://pastebin.com/8ARcKfNm"" rel=""nofollow"">Full <code>.vimrc</code></a>:</p>

<pre><code>set nocompatible
filetype off


"" Vundle ---------------------------------------------------------------------
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'freitass/todo.txt-vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-fugitive'                     "" :GitCommands
Plugin 'tpope/vim-git'                          "" allows to see branch in airline
Plugin 'airblade/vim-gitgutter'                 "" git status in SL area
Plugin 'ctrlpvim/ctrlp.vim'                     "" TODO: learn more about this
Plugin 'Shougo/neocomplete.vim'                 "" TAB completion
"" Plugin 'tmhedberg/SimpylFold'                 "" should we add FastFold?
Plugin 'spf13/vim-autoclose'                    "" autoclose brackets(properly)
Plugin 'godlygeek/tabular'                      "" V -&gt; : -&gt; /SYMBOL_TO_LINE-UP
Plugin 'terryma/vim-multiple-cursors'           "" steep learning curve
Plugin 'Yggdroot/indentLine'                    "" shows | intendation
Plugin 'mhinz/vim-startify'                     "" start screen
Plugin 'hashivim/vim-vagrant'
Plugin 'pearofducks/ansible-vim'
Plugin 'whatyouhide/vim-gotham'
Plugin 'ryanoasis/vim-devicons'                 "" glyph icons everywhere
call vundle#end()


"" System ---------------------------------------------------------------------
set lazyredraw                                  "" do we need this?
set ttyfast                                     "" theoretically make things faster
set mouse=a                                     "" enable mouse
set guicursor=a:blinkon0                        "" don't blink with the cursor
set termencoding=utf-8                          "" terminal is UTF-8
set encoding=utf8                               "" ...as well as the editor
set fileformat=unix                             "" *nix format
set clipboard=unnamed                           "" Fix clipboard in *nix
set wildmenu
set wildmode=longest:full,full
set wildignore=*.o,*.pyc,*.DS_Store
set magic                                       "" needed for regexp
set hidden                                      "" allow switching buffers w/o saving
set nojoinspaces                                "" don't join spaces on paste
set formatoptions-=r formatoptions-=c formatoptions-=o "" don't autoextend comments
set lines=40 columns=90                         "" default size for GUI
set gdefault                                    "" replace all without /g
set virtualedit=all                             "" keep cursor horizontal pos. when scrolling

set backup                                      "" backups ON
set undofile                                    "" persistent undo
set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set undolevels=1000                             "" max number of undos
set undoreload=10000                            "" max lines to to save for undo
set history=1000                                "" 1000 of history (what?)

set incsearch                                   "" incremental search
set smartcase                                   "" ... and case sensitive if Uppercase is present

set expandtab                                   "" spaces instead of tabs
set smarttab                                    "" smart tabs/intends
set tabstop=4                                   "" TAB = 4 spaces
set softtabstop=4
set smartindent
set autoindent
set shiftwidth=4
set shiftround                                  "" round to 4

let NERDSpaceDelims=1                           "" add space before comment
let NERDTreeMapOpenInTab='\r'                   "" open files in new tab
let g:vim_markdown_folding_disabled=1           "" don't fold *.md

let g:neocomplete#enable_at_startup = 1         "" NeoComplete
let g:neocomplete#enable_auto_select = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#min_keyword_length = 2        "" min symbols before autocomplete


"" Visuals --------------------------------------------------------------------
filetype plugin indent on                       "" enable filetype plugins
syntax enable                                   "" enable syntax highlighting
let python_highlight_all=1                      "" full python highlighting
colorscheme gotham256                           "" GUI colours
let g:airline_theme = ""gotham256""               "" airline theme
if has(""gui_running"")
    set cul
endif

set title                                       "" set terminal title
set t_Co=256                                    "" 256 colors terminal
set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline\ Nerd\ Font\ Complete\ Windows\ Compatible:h12
set guioptions=L                                "" disable right scrlbar
set guioptions=R                                "" disable left scrlbar
set number                                      "" show line numbers
set nowrap                                      "" don't wrap long lines
set fillchars+=vert:\?                          "" vertical unicode split
set shortmess+=I                                "" remove startup message

set splitbelow                                  "" Natural splits
set splitright

set hlsearch                                    "" highlight search results
set showmatch                                   "" show matching brackets

set noerrorbells                                "" disable bells
set novisualbell
set vb t_vb=

set laststatus=2                                "" always show airline
let g:airline_powerline_fonts=1                 "" use glyph fonts
let g:airline#extensions#tabline#enabled=1      "" enable tabline (top)
let g:airline#extensions#tabline#fnamemod=':t'  "" filename only

set completeopt-=preview                        "" don't show doc. window by default
let g:SimplylFold_docstring_preview=1           "" keep docstring unfolded.

let g:gitgutter_sign_added = '?'                "" Gitgutter
let g:gitgutter_sign_modified = '•'
let g:gitgutter_sign_removed = '?'
let g:indentLine_char = '¦'                     "" intendation vertical lines


"" Hotkeys --------------------------------------------------------------------
nnoremap &lt;F1&gt; &lt;nop&gt;                             "" F1 does noothing
map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;                    "" F2 to open NerdTree
set pastetoggle=&lt;F3&gt;                            "" F3 to switch in paste mode
map &lt;F4&gt; :mksession! ~/.vim/vim_session&lt;CR&gt;     "" F4 to write current session
map &lt;F5&gt; :source ~/.vim/vim_session&lt;CR&gt;         "" F5 to load prev. session

inoremap ii &lt;esc&gt;                               "" ii to go back into command mode
let mapleader = ""\&lt;Space&gt;""                      "" remap leader key from '\' to Space
map &lt;leader&gt;cd :cd %:p:h&lt;cr&gt;:pwd&lt;cr&gt;            "" CWD to the dir of the open buffer
nnoremap &lt;esc&gt;&lt;esc&gt; :noh&lt;return&gt;&lt;esc&gt;           "" 2xESC clears search highlights

nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;                       "" switch splits with CTRL+hjkl
nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;
nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;
nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;

nmap &lt;leader&gt;l :bn&lt;CR&gt;                          "" next buffer by Space+l
nmap &lt;leader&gt;h :bp&lt;CR&gt;                          "" previous buffer by Space+h
nmap &lt;leader&gt;q :bp &lt;BAR&gt; bd #&lt;CR&gt;               "" close buffer by Space+q

vnoremap &lt; &lt;gv                                  "" leave txt selected after &lt;&gt;
vnoremap &gt; &gt;gv

set t_ku=OA                                   "" fix arrow keys
set t_kd=OB
set t_kr=OC
set t_kl=OD

nmap &lt;leader&gt;f1 :set foldlevel=0&lt;CR&gt;            "" change folding levels
nmap &lt;leader&gt;f2 :set foldlevel=1&lt;CR&gt;
nmap &lt;leader&gt;f3 :set foldlevel=2&lt;CR&gt;
nmap &lt;leader&gt;f4 :set foldlevel=3&lt;CR&gt;

nnoremap &lt;silent&gt; &lt;leader&gt;gs :Gstatus&lt;CR&gt;       "" GIT shortcuts
nnoremap &lt;silent&gt; &lt;leader&gt;gd :Gdiff&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gc :Gcommit&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gb :Gblame&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gl :Glog&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gp :Git push&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gr :Gread&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;gw :Gwrite&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;ge :Gedit&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;leader&gt;ga :Git add %:p&lt;CR&gt;

set backspace=eol,start,indent                  "" esoteric backspace fix
set whichwrap+=&lt;,&gt;                              "" move to another line with &lt;- -&gt;

if bufwinnr(1)                                  "" resize splits with +-
  map + &lt;C-W&gt;+
  map - &lt;C-W&gt;-
endif

"" NeoComplete
"" &lt;CR&gt;: close popup and save indent.
inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;
function! s:my_cr_function()
    "" return neocomplete#close_popup() . ""\&lt;CR&gt;""
    "" For no inserting &lt;CR&gt; key.
    return pumvisible() ? neocomplete#close_popup() : ""\&lt;CR&gt;""
endfunction

"" &lt;TAB&gt;: completion.
inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? ""\&lt;C-n&gt;"" : ""\&lt;TAB&gt;""


"" Macros ---------------------------------------------------------------------

"" Emulate any other editor with tabs
try
 set switchbuf=useopen,usetab,newtab
catch
endtry

"" Close vim if NerdTree is the only buffer left
autocmd bufenter * if (winnr(""$"") == 1 &amp;&amp; exists(""b:NERDTreeType"") &amp;&amp; b:NERDTreeType == ""primary"") | q | endif

"" Return to last edit position when opening files
autocmd BufReadPost *
    \ if line(""'\"""") &gt; 0 &amp;&amp; line(""'\"""") &lt;= line(""$"") |
    \   exe ""normal! g`\"""" |
    \ endif

"" Python with virtualenv support
py &lt;&lt; EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

"" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

"" format JSON code
com! FormatJSON %!python -m json.tool

"" BG fix for tmux
set t_ut=
</code></pre>
","<p>Your problem is that you put comments at the end of your lines separated by whitespaces. Vim interprets these whitespaces as part of your commands and mappings.</p>

<p>If you replace:</p>

<pre><code>inoremap ii &lt;esc&gt;                               "" ii to go back into command mode
</code></pre>

<p>By</p>

<pre><code>"" ii to go back into command mode
inoremap ii &lt;Esc&gt;
</code></pre>

<p>You will solve your problem.</p>

<p><strong>As a general rule</strong> don't put comments at the end of your lines in your <code>.vimrc</code></p>

<hr>

<p><strong>And as a bonus</strong> Here is a method to transform your <code>.vimrc</code> in a proper format.</p>

<p><strong>Edit</strong> Use this command. (Compared to the original one, the new line character <code>\r</code> can be directly copied and you don't have to use <code>^M</code>. Thanks @Sato!) </p>

<pre><code> :%s/\(^.*\)\s\+\("".*\)/\2\r\1
</code></pre>

<p><strong>Original command</strong></p>

<pre><code> :%s/\(^.*\)\s\+\("".*\)/\2^M\1
</code></pre>

<p><em>(To insert the <code>^M</code> properly use <kbd>Ctrl-v</kbd><kbd>Enter</kbd> to insert a real new line character)</em></p>

<p>This command will capture the beginning of lines containing a comment on the end of the line and replace the full line with two lines containing the comment and then the command.</p>

<p><em>(Note that the command seems to mess with the function <code>my_cr_function</code> so you might want to check that it doesn't create to much trouble in your <code>.vimrc</code> maybe replace <code>%</code> by some ranges and change your <code>.vimrc</code> step by step)</em></p>

<hr>

<p>@Sato also suggested <a href=""https://github.com/vim/vim/issues/694#issuecomment-198063315"" rel=""nofollow"">this link</a> about how comments and multiline works it is worth reading it.</p>
","6922"
"How to execute a command on vim startup","916","","<p>I just installed a plugin for python which displays methods tree. So I would like to open the tree on startup, so not necessary to push the buttons everytime I open some <code>.py</code> file. But, I want this command is executed only for <code>.py</code> files. Here is how my vimrc piece looks like:</p>

<pre><code>nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;
</code></pre>

<p>Is there a way to execute this command at startup only for <code>.py</code> files?</p>
","<p>Add in your <code>.vimrc</code>:</p>

<pre><code>au BufEnter *.py :TagbarToggle&lt;CR&gt;
</code></pre>

<p>where</p>

<ul>
<li><p><code>au</code> is <code>autocmd</code>, execute the command automatically.</p></li>
<li><p><code>BufEnter</code> is when you enter the file for first time.</p></li>
<li><p><code>*.py</code> is for filetype python.</p></li>
<li>and the rest is the command to be executed </li>
</ul>
","13357"
"Grok Vim motions and simple edits","914","","<p>I'm returning to Vim after using Emacs for a few years. I'm trying to <a href=""https://stackoverflow.com/a/1220118/580010"">grok</a> Vim by reading and watching tutorials, as well as actually using it daily.</p>

<p>When editing text, I find the Emacs commands of Alt-F, Alt-B, Ctrl-a, Ctrl-e, Alt-D and Alt-Backspace to be very useful and intuitive, allowing for quick and easy local edits while working with text (words/code).</p>

<p>What is the Vim-way of implementing similar functionality? Returning to <code>NORMAL</code> mode to issue a single motion, only to re-enter <code>INSERT</code> mode is not optimal.</p>

<p>Example 1: When in <code>INSERT</code> mode to insert a <code>(</code> at the start of an expression, how should I move to the end of the expression or the line to insert the corresponding <code>)</code> in Vim?</p>

<p>Example 2: When editing text, one may often want to delete a word forwards or backwards while writing or editing a sentence or code. It would be unusual to have a perfectly-formed sentence/code in one's mind, ready to type ""once-off"" ahead of time; often a sentence changes as one is working with the text. The restrictions of <code>INSERT</code> mode are making this kind of editing difficult for me in Vim. I feel unable to effectively manipulate the text in insert mode, always finding myself having to switch back to <code>NORMAL</code> mode for simple movements or deleting words.</p>

<p>PS: Alt-F and -B move the cursor forward or backward one word. Ctrl-a and -e move the cursor to the start or end of line. Alt-F deletes the word under the cursor. Alt-Backspace deletes the word before the cursor.</p>
","<p><strong>1</strong></p>

<p>You can achieve those or better (pinky) command mappings very quickly. I'm not recommending this solution, but as an example, if you want to move the cursor to the beginning of line with <code>&lt;C-a&gt;</code> you can execute the following line after hitting <code>:</code> from normal mode (or add the line to your vimrc)</p>

<pre><code>inoremap &lt;C-a&gt; &lt;C-o&gt;0
</code></pre>

<p>or, if start of line means first non-blank character of line</p>

<pre><code>inoremap &lt;C-a&gt; &lt;C-o&gt;^
</code></pre>

<p>Curious thing, I just tested these mappings in the buffer in which I'm writing this answer, and I was confused for a moment because they didn't work. Then I realized I had forgotten to enter insert mode. You seem to find it a pain to leave insert mode to execute normal mode commands. You may find after using Vim for a while that it's the reverse–that you linger in normal mode while you're thinking and only make excursions to insert mode for particular occasions. Vim is probably only (or mostly) worth learning if you find that you do more <em>editing</em> than <em>writing</em> text.</p>

<p>So one part of an answer to your question about executing normal mode commands quickly from insert mode is <code>&lt;C-o&gt;</code>, which lets you leave insert mode temporarily to execute one normal mode command, then reenter. Read about it at <code>:help i_Ctrl-o</code>. This is useful for one-off conveniences. A more sustainable route is probably to try to embrace normal mode as a default for navigation and editing, and only enter insert mode when you actually want to insert new characters by hand into the buffer.</p>

<p><strong>2</strong></p>

<p>Your examples are very general so it's hard to give specific answers. I'm going to make up a specific example in hopes it fits or is translatable to something you encounter. For your number 1, it depends on <em>how you know</em> where the closing parenthesis is supposed to go. let's say I have a line like</p>

<pre><code>let cchar = s:cchar[""atx""]
</code></pre>

<p>This is meant to be a line of VimL, vim's scripting language, and it (or something like it) occurs in a Vim syntax file I am currently disagreeing with. Let's say I want to change the right hand part of this expression to a function call, perhaps because the function provides defaults when the dictionary <code>s:cchar</code> has not been assigned a value yet for the <code>""atx""</code> key. With my cursor (in normal mode) on the first character, 'l', I might type</p>

<pre><code>f=wcf[MyFunction(&lt;Esc&gt;$r)
</code></pre>

<p>Briefly, this says</p>

<ul>
<li><code>f=</code> - forward to '=' (I could have said <code>fs</code>, but I probably wouldn't pause long enough to see that the 's' I want to reach is the first s on the line, so I'd go for the character that is obviously unique, and continue from there)</li>
<li><code>w</code> - next word, now my cursor is on the 's' of 's:cchar'</li>
<li><code>cf[</code> - change to forward to '['</li>
</ul>

<p>at this point the line looks like</p>

<pre><code>let cchar = |""atx""]
</code></pre>

<p>where <code>|</code> is the cursor, and I am in insert mode. I then type <code>MyFunction(</code> and leave insert mode (<code>&lt;Esc&gt;</code>).</p>

<ul>
<li><code>$</code> - move cursor to end of line. I could have used <code>E</code> for end-of-big-word or <code>f]</code> for forward-to-']' or some other motion, but <code>$</code> occurred to me first.</li>
<li><code>r)</code> - replace character under cursor with a ')'</li>
</ul>

<p>Now I have changed the assignment expression from assigning from a script-local dictionary to using the return value of a function, and in doing so I introduced parentheses. I don't know how your particular need for parentheses looks, perhaps it's very different, in which case there will be a different string of commands to achieve it. If I paused to think longer about my made up example I might find more efficient ways to achieve that also, but who has time to pause and think.</p>

<p>(Try it, copy-paste (sorry, yank-put) the text and the command to a buffer, and with your cursor on the first character, 'f', of the command hit <code>y$</code>. Now the command is in your unnamed register. Move to the beginning of the first line and hit <code>:normal &lt;C-r&gt;""</code> to a) enter command line mode, b) begin executing a normal mode command from the command line, and c) to paste (<em>atchoo</em> put) the unnamed register into the command line as the normal mode command to be executed. The only thing you need to change in the command is to replace the phony <code>&lt;Esc&gt;</code> series of characters (because you copy-pasted <em>atchoo</em> from your browser) with the actual Escape key code, so delete it and hit <code>&lt;C-v&gt;</code> and then your Esc key. It will look sort of like <code>^[</code>. Now hit return to run the command. Or... just type the string of keys to test the commands, I just wanted to show you that you can interact with normal mode from cmdline mode as well, and <code>&lt;C-v&gt;</code>, and <code>&lt;C-r&gt;</code>, and all the other glories of Wonderland. Also, see <code>:help Cmdline-mode</code>.)</p>

<p><strong>3</strong></p>

<p>For deleting a word backwards you can use the standard mapping <code>&lt;C-w&gt;</code> (see <code>:help i_Ctrl-w</code>). I don't know if there is a default mapping to delete a word forwards, but I suppose you could make one with</p>

<pre><code>inoremap &lt;C-S-w&gt; &lt;C-o&gt;dw
</code></pre>

<p>Again, <code>&lt;C-o&gt;</code> will take you out of insert mode for a one-off command and <code>dw</code> will ""delete"" over the ""word"" motion. See <code>:help d</code>, <code>:help w</code>. If the forward words you delete are not actual words but class.function#names, you may want to use <code>W</code> (see <code>:help W</code>). If you're already mostly in normal mode you don't need these mappings, just do <code>dw</code>, <code>db</code> or friends.</p>

<p>Some help chapters to look closer at</p>

<ul>
<li><code>:help &lt;C-o&gt;</code></li>
<li><code>:help Insert</code></li>
<li><code>:help f</code> and the following sections (<code>F</code>,<code>t</code>,<code>T</code>,<code>;</code> and <code>,</code>)</li>
<li><code>:help word-motions</code></li>
</ul>
","4166"
"How to translate Unicode escape sequences to the Unicode character?","914","","<p>I have a file with a lot of characters represented like this: <code>\u05E2</code>. (These are the actual characters in the file: backslash, lowercase u, and four hexadecimal digits.) Due to that, the file is impossible to read. Is there a way to translate the code to the actual symbol? (in the example above, ע).</p>
","<p>If I understand you correctly, you have a file where certain characters are represented by their decimal value in the format <code>\uXXXX</code>, with <strong>X</strong> being any hexadecimal character but always 4, correct?</p>

<p>If so, you can transform those sequences into the actual values they represent by doing a clever search and replace. In this particular case, I would do:</p>

<pre><code>:%s/\\u\(\x\{4\}\)/\=nr2char('0x'.submatch(1),1)/g
</code></pre>

<p>This translates to</p>

<pre><code>:%s/      - start a search/replace command in the complete buffer
\\u       - Search for the characters \u
\(...\)   - remember the next chars
\x\{4\}   - 4 hexadecimal characters - they will be remembered and be available as submatch(1)
/         - replace each match by
\=        - evaluate the following to an expression
nr2char(  - return the character for the number given
'0x'      - put a '0x' in front of the number to force hexadecimal value
.         - append
submatch(1) - the hexadecimal number remembered above
)         - closing paren of nr2char()
/g        - replace for every occurrence in each line
</code></pre>

<p>While this will replace each occurrence of the pattern \u\x\x\x\x that does not necessarily mean,
there will be a glyph available for that character. In such cases it could be shown as a blank square or a '?'.</p>

<p>Note, if you also have less than 4 or more than 4 hexadecimal characters after
the \u (or you had an upper 'U' instead of the lower 'u') you would need to
adjust the search pattern. This is left as an exercise to the reader.</p>

<p>See the help at <code>:h sub-replace-special</code> and <code>:h nr2char()</code> (among others) </p>
","2303"
"How do I search for a line that contains a pattern at column n","913","","<p>In writing some Vimscript to try to answer <a href=""https://vi.stackexchange.com/a/145/182"">this question</a>, I was exploring ways to ""search for a line with pattern P in position X"" (P is a search pattern, X is a number).</p>

<p>One way to do this would be to search for (e.g.) <code>^.....[a-z]</code>, where <code>[a-z]</code> is the pattern, and <code>5</code> is the position.</p>

<p>But how would I use Vimscript to make <code>.....</code>, from <code>.</code> and <code>5</code>?</p>
","<p>Simply use regex syntax for ""repeat <code>n</code> times"":</p>

<pre><code>/^.\{5}[a-z]
</code></pre>

<p>This searches for 5 <code>.</code>s and then an <code>[a-z]</code>.</p>

<p>If you just want to repeat a character <code>c</code> <code>n</code> times, simply do:</p>

<pre><code>let dots = repeat('.', 5)
"" dots is now '.....'
</code></pre>
","212"
"Strange input from the number pad?","912","","<p>When I am typing in <code>vim</code> (Linux via SSH), I will automatically try to use the number pad on my keyboard to enter long numbers (like IP addresses).  <code>Vim</code> does not seem to like that very much.  (I am using Putty for Windows to SSH into Debian.)</p>

<p>Pressing <code>123</code> gives me this regardless of if I am in insert mode or not:</p>

<pre><code>s
r
q
</code></pre>

<p>When I use the ""normal"" number keys, everything works fine.  What is going on there?</p>
","<p>Your terminal (PuTTY) is configured to send escape sequences for keypad keys, rather than digits. This is called “application keypad mode” in Unix terminal terminology.</p>

<p>You can <a href=""http://vim.wikia.com/wiki/PuTTY_numeric_keypad_mappings"" rel=""nofollow"">configure Vim to understand these escape sequences</a>.</p>

<p>Alternatively, you can configure PuTTY to send digits. In the configuration, <a href=""http://the.earth.li/~sgtatham/putty/0.64/htmldoc/Chapter4.html#config-appkeypad"" rel=""nofollow"">in the Keyboard panel</a>, turn off application keypad mode. Alternatively, turn it off altogether <a href=""http://the.earth.li/~sgtatham/putty/0.64/htmldoc/Chapter4.html#config-features-application"" rel=""nofollow"">in the Features panel</a>.</p>
","3876"
"opening another file with path relative to current directory","909","","<p>I want to open another file in the same directory or any file with its path relative to the current directory  in command line.</p>

<p>My path is <code>/home/sibich/</code></p>

<pre><code> /home/sibich&gt; vim a.pl
</code></pre>

<p>In vim,  I want to open b.pl in same directory, so I use :</p>

<pre><code>:vim b.pl
</code></pre>

<p>Bit I receive this message <code>Invalid pattern or filename</code></p>

<p>So, I had to give it in shell.</p>

<pre><code>  :!vim b.pl
</code></pre>

<p>I want to directly execute this in vim.</p>

<p>Example 2: sub is a folder under <code>/home/sibich</code></p>

<pre><code>  :vim sub/c.pl
</code></pre>

<p>Is there a way to set options such that command line accepts path relative to current directory and allows opening files through split, tabnew and vim commands?</p>
","<p>Have you tried the edit command?</p>

<pre><code>:edit b.pl
</code></pre>

<p>Edit: Not sure if you edited in the last question, or I just missed it the first time. But the only reason you wouldn't be able to use relative paths on <code>:split</code> or <code>:tabnew</code> is if your current working directory isn't the same as the file you're currently editing. So I think what you're looking for is </p>

<pre><code>:set autochdir
</code></pre>

<p>This option basically makes your current working directory ""follow"" you whenever you change buffers. With that options set, you should be able to use relative paths. See <code>:h autochdir</code> for more info.</p>
","7666"
"Adding 80-column wide comment header block with centered text","907","","<p>For some reason or another I often divide the code into subsections separated by headers like these:</p>

<pre><code>################################################################################
#################################### LOAD ######################################
################################################################################
</code></pre>

<p>These are 3 80-column wide lines of <code>#</code> with a title centered in the middle.
So far I haven't find a quick way to generate these in vim.</p>

<p>What I usually do is something along the lines of <code>80i#</code> and then <code>yypp</code> to give me 3 lines, but then I need to navigate to the middle and add text. I usually do this with replace, but replace does not center the header inside <code>#</code>…<code>#</code> So I delete the excess of <code>#</code>'s manually.</p>

<p>How to center the text in the middle row? And what would be a faster way to achieve this result?</p>
","<p>Here's a slightly more efficient / easier method. Type it with the cursor at the beginning of the line of text (i.e. <code>LOAD</code>) that you want to center.</p>

<ul>
<li><code>:center 80&lt;cr&gt;</code>: center the text with Vim's built in function</li>
<li><code>hhv0r#</code>: add the <code>#</code>s on the left</li>
<li><code>A&lt;space&gt;&lt;esc&gt;40A#&lt;esc&gt;</code>: add plenty of <code>#</code>s on the right</li>
<li><code>d80|</code>: delete excess <code>#</code>s on the right</li>
<li><code>YppVr#kk.</code>: add top and bottom <code>#</code>s</li>
</ul>

<p>So, the full command:</p>

<pre><code>:center 80&lt;cr&gt;hhv0r#A&lt;space&gt;&lt;esc&gt;40A#&lt;esc&gt;d80&lt;bar&gt;YppVr#kk.
</code></pre>

<p>You could put something like this in your .vimrc in order to add a convenient mapping:</p>

<pre><code>nnoremap &lt;C-b&gt; :center 80&lt;cr&gt;hhv0r#A&lt;space&gt;&lt;esc&gt;40A#&lt;esc&gt;d80&lt;bar&gt;YppVr#kk.
</code></pre>

<p>Mini-screencast demonstration:</p>

<p><img src=""https://i.stack.imgur.com/SYuBs.gif"" alt=""demonstration""></p>
","421"
"Vim displaying incorrect indentation","905","","<p>I have encountered something that I have never seen before in Vim.  While I was tentatively modifying some of the source code for software I've been planning to work on, I noticed vim was displaying incorrect spacing for the line of code that I added.  Gedit shows the code with the correct spacing.  I know Gedit has the correct spacing because the Python code delivers errors if I change the code in Vim to be where it appears to belong within the Vim window.  I have attached the Images below.  The line that I added is the line that says: print ""I am about to evaluate a factorial"".  I have included my short .vimrc file as well.  Has anyone seen this?  I have been using vim for months now and can't recall anything like this ever occuring.</p>

<ul>
<li><p>Vim (Incorrect):</p>

<p><a href=""https://i.stack.imgur.com/Pygxb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Pygxb.png"" alt=""Vim wrong""></a></p></li>
<li><p>Gedit (Correct):</p>

<p><a href=""https://i.stack.imgur.com/rs8tl.jpg"" rel=""nofollow noreferrer"" title=""gedit""><img src=""https://i.stack.imgur.com/rs8tl.jpg"" alt=""Gedit right"" title=""gedit""></a></p></li>
<li><p>Vimrc: </p>

<p><a href=""https://i.stack.imgur.com/wAJdo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wAJdo.png"" alt=""Vimrc file""></a></p></li>
</ul>
","<p>It gets reset by the Python filetype plugin; from <code>/usr/share/vim/vim74/ftplugin/python.vim</code>:</p>

<pre><code>"" As suggested by PEP8.
setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8
</code></pre>

<p>This file is loaded every time a Python file is loaded. Personally I find adding indentation settings here a bit surprising though.</p>

<p>At any rate, to override this use this in your vimrc:</p>

<pre><code>augroup python
    autocmd!

    "" Real men always use real tabs, and I like it four spaces wide.
    autocmd FileType python setlocal ts=4 sts=4 sw=4
augroup end
</code></pre>

<p>This will get loaded after the ftplugin file, overriding the settings set there.</p>
","8383"
"How to repeat last action with movement?","902","","<p>Assume the content:</p>

<pre><code>foo fnord bar;"" &gt;&gt; /tmp/foo/derp
gnarf foo fnord bar;"" &gt;&gt; /tmp/foo/derp
</code></pre>

<p>I want to jump to the "" and delete to end of line and repeat that over the rest of lines.</p>

<p>Yet when I:</p>

<pre><code>f""d$
j
.
</code></pre>

<p>it only deletes from my current cursor position to the end of file.</p>

<pre><code>foo fnord bar;
gnarf foo fno
</code></pre>

<p>Yet I would have expected the line to read:</p>

<pre><code>gnarf foo fnord bar;
</code></pre>

<p>How can I have vim repeat the jump movement as well on repeat?</p>
","<p>From the <a href=""http://vimdoc.sourceforge.net/htmldoc/repeat.html"">repeat documentation</a> :</p>

<pre><code>.           Repeat last change, with count replaced with [count].
            Also repeat a yank command, when the 'y' flag is
            included in 'cpoptions'.  Does not repeat a
            command-line command.
</code></pre>

<p>So, as expected, you're repeating the last change (<code>d$</code>). </p>

<p>If you want to repeat your movement, use <code>;</code>:</p>

<pre><code>;           Repeat latest f, t, F or T [count] times. See |cpo-;|
</code></pre>

<p>IE:</p>

<pre><code>f""d$
j
;.
</code></pre>

<p>You could map a binding to perform <code>;.</code> at the same time, if you want.</p>
","6538"
"How to achieve selection different length of texts on different lines?","901","","<p>assume I have following texts:</p>

<p>aaa-dd-e: ""aaa"",<br>
bb-x: ""bb"",<br>
c-9: ""c""</p>

<p>I want to do selection like below:</p>

<p><code>aaa-dd-e:</code> ""aaa"",<br>
<code>bb-x:</code> ""bb"",<br>
<code>c-9:</code> ""c""</p>

<p>I tried using c-v to create a visual block, but after I create selection on the first column and I press ""f:""( I meant to expand the selection to colon mark on every line like above), what I get is:</p>

<p><code>aaa-</code>dd-e: ""aaa"",<br>
<code>bb-x</code>: ""bb"",<br>
<code>c-9:</code> ""c""</p>

<p>the selection stops at the first colon and creates a rectangle.</p>
","<p>Selection is generally a mean to an end, more so in Vim where selection is often not necessary in the first place.</p>

<p>Assuming you still want to put quotes around property names in your non-JSON file to turn it into proper JSON:</p>

<ol>
<li>select the lines to modify, character-wise or line-wise, it doesn't matter,</li>
<li><code>:'&lt;,'&gt;norm I""^[f:i""</code> (<code>'&lt;,'&gt;</code> is automatically inserted for you and <code>^[</code> is obtained with <code>&lt;C-v&gt;&lt;Esc&gt;</code>).</li>
</ol>

<p>If you have the beautiful surround plugin, step 2 becomes:</p>

<pre><code>:'&lt;,'&gt;norm ^vt:S""
</code></pre>

<p>With a substitution, step 2 could become:</p>

<pre><code>:'&lt;,'&gt;s/^\s*\([^:]*\):/""\1""
</code></pre>
","2799"
"Managing autoload directories efficiently","901","","<p>There are a few questions intertwined -- I hope I convey my intentions well enough so that someone understands where I'm confused and what I'm trying to do. I apologize ahead of time for the chaotic state of this post.</p>

<p>I have <strong>neovim</strong> installed via homebrew (OSX/macOS).</p>

<p>I plan to use <code>nvim</code> exclusively as a replacement for <code>vim</code>, and I plan to utilise <code>gvim</code> once I sort out this confusion.</p>

<p>The directory <code>/usr/local/Cellar/neovim/0.1.7/share/nvim/runtime</code> contains an <code>autoload</code> directory amongst much more:</p>

<p>├── autoload/<br />
├── bugreport.vim<br />
├── colors/<br />
├── compiler/<br />
├── delmenu.vim<br />
├── doc/<br />
├── filetype.vim<br />
├── ftoff.vim<br />
├── ftplugin/<br />
├── ftplugin.vim<br />
├── ftplugof.vim<br />
├── indent/<br />
├── indent.vim<br />
├── indoff.vim<br />
├── keymap/<br />
├── macmap.vim<br />
├── macros/<br />
├── makemenu.vim<br />
├── menu.vim<br />
├── mswin.vim<br />
├── optwin.vim<br />
├── pack/<br />
├── plugin/<br />
├── print/<br />
├── scripts.vim<br />
├── synmenu.vim<br />
├── syntax/<br />
├── tutor/<br />
└── vimrc_example.vim</p>

<p>When installing <a href=""https://github.com/tpope/vim-pathogen"" rel=""nofollow noreferrer"">vim-pathogen</a>, the installation leads you to create the directories <code>autoload</code> and <code>bundle</code> within the <code>~/.vim</code> directory.</p>

<p>I see that there are many important vim files in the <code>runtime</code> directory. I want to avoid redundancy as much as possible.</p>

<p>Would it be more efficient to symlink one/more of the directories in <code>~</code> to the <code>runtime</code> directory - or perhaps one/more of its subdirectories?</p>

<p>When installing vim plugins and other vim files to the config directory in my home directory, should I ensure that the same plugin files aren't located in both homebrew's <code>autoload</code> directory and <code>~/.vim/autoload</code>? In other words, do I need to verify beforehand that a particular vim file isn't already located in homebrew's <code>runtime</code> directory for <code>nvim</code> before installing said vim file in <code>~/.vim/</code>? Would it be more efficient to install all files in <code>~/.config/nvim</code> instead of <code>~/.vim</code>?</p>

<p>Should I modify the <code>execute pathogen#infect()</code> line in my <code>.vimrc</code> to reflect the runtime (or some other) directory?</p>

<p>I have <code>/usr/bin/vim</code> but not <code>vim</code> from homebrew. Would it make things easier if I installed homebrew's <code>vim</code> installed? This is something I eventually plan to do.</p>

<hr>

<p>With <code>syntax on</code> in my <code>.vimrc</code> I receive this error every time I launch <code>vim</code> or <code>nvim</code>:</p>

<p><code>Can't open file /usr/bin/vim/syntax/syntax.vim</code></p>

<p>Yet <code>syntax.vim</code> exists within the <code>runtime</code> directory for <code>nvim</code> mentioned above.</p>

<hr>

<p>What I have done so far:</p>

<ul>
<li><p>Per <a href=""https://neovim.io/doc/user/nvim.html#nvim-from-vim"" rel=""nofollow noreferrer"">here</a> I have</p>

<pre><code>mkdir ~/.config
ln -s ~/.vim ~/.config/nvim
ln -s ~/.vimrc ~/.config/nvim/init.vim
</code></pre></li>
<li><p>In attempt to troubleshoot, I've started with a new <code>.vimrc</code> that contains</p>

<pre><code>execute pathogen#infect()
syntax on
filetype plugin indent on
</code></pre></li>
<li><p><code>pathogen.vim</code> is the only file located within <code>~/.vim/autoload</code></p></li>
<li><p>Variable <code>EDITOR</code> is set to <code>nvim</code> in <code>.bash_profile</code></p></li>
<li><p>I've reviewed <a href=""https://vi.stackexchange.com/questions/4969/is-the-vim-directory-used-for-anything-other-than-plugins"">this question</a>.</p></li>
</ul>

<p>With <code>.vimrc</code> containing only the three lines above, I get the following errors when I run <code>vim</code> and <code>nvim</code>, respectively:</p>

<h3>vim</h3>

<pre><code>    Error detected while processing /Users/user/.vimrc:
    line    2:
    E484: Can't open file /usr/bin/vim/syntax/syntax.vim
    Press ENTER or type command to continue
</code></pre>

<h3>nvim</h3>

<pre><code>    Error detected while processing /Users/user/.config/nvim/init.vim:
    line    1:
    E117: Unknown function: pathogen#infect
    E15: Invalid expression: pathogen#infect()
    line    2:
    E484: Cannot open file /usr/bin/vim/syntax/syntax.vim
    Press ENTER or type command to continue
</code></pre>

<hr>

<p>The <em><strong>ultimate</strong></em> question isn't necessarily surrounding <code>vim-pathogen</code>, but rather trying to find a sound way to understand and manage all configurations (including directories) between <code>vim</code>, <code>nvim</code>, <code>gvim</code>, etc.</p>

<p>I sincerely appreciate any help.</p>
","<p>You're looking at this all wrong.  Read <code>:h 'runtimepath'</code>.</p>

<p><code>'runtimepath'</code> or <code>'rtp'</code> is analogous to <code>$PATH</code> in the shell.  The files you see in <code>/usr/local/Cellar/neovim/0.1.7/share/nvim/runtime</code> is the <strong>pristine</strong> runtime files that come with Neovim.  You <strong>should not</strong> add files to it.</p>

<p>If you want to see where scripts will be loaded from by default, run:</p>

<pre><code>nvim -u NONE
</code></pre>

<p>Then</p>

<pre><code>:echo &amp;rtp
</code></pre>

<p>For Neovim, the default location is <code>$HOME/.config/nvim</code>.  The directory structure there is expected to be the same as what's described in <code>:h 'rtp'</code>.</p>

<p>Specific plugin managers aside, all they do is help you manage <code>'rtp'</code>.  As an example, say you want to use one of my plugins: <a href=""https://github.com/tweekmonster/django-plus.vim"" rel=""noreferrer"">django-plus.vim</a></p>

<p>You will note that it has an <code>autoload</code>, <code>after</code>, and <code>doc</code> directory.  These aren't meant to be merged into a monolithic directory.  The entire repository is meant to be taken as-is in its own directory.  If you decided to download it and place it into <code>~/vim-plugins</code>, without a plugin manager, you would need to add it to <code>'rtp'</code> in your <code>init.vim</code> script:</p>

<pre><code>set rtp+=~/vim-plugins/django-plus.vim
</code></pre>

<p>Now the plugin is ""installed"".  But, this is not the best method since it's being <em>appended</em> to the list.  Ideally it should be <em>prepended</em> because <code>django-plus.vim</code> has a script <code>filetype.vim</code> that should run <em>before</em> <code>$VIMRUNTIME/filetype.vim</code> (like how <code>$PATH</code> is searched).  All plugins will want to be prepended to the <code>'rtp'</code> since the whole point is to override defaults.  This is where plugin managers help you manage all of this.</p>

<blockquote>
  <p>I plan to use nvim exclusively as a replacement for vim, and I plan to utilise gvim once I sort out this confusion.</p>
</blockquote>

<p><a href=""https://github.com/neovim/neovim/wiki/Related-projects"" rel=""noreferrer"">Neovim has GUIs</a>.</p>

<blockquote>
  <p>With syntax on in my .vimrc I receive this error every time I launch vim or nvim:</p>

<pre><code>Can't open file /usr/bin/vim/syntax/syntax.vim
</code></pre>
</blockquote>

<p>You somehow changed <code>'rtp'</code> or broke the runtime directories.  Again, confirm with <code>:echo &amp;rtp</code>.</p>

<hr>

<p>On the topic of plugin managers, just use <a href=""https://github.com/junegunn/vim-plug"" rel=""noreferrer"">vim-plug</a>.  Everyone has their opinion about what the best plugin manager is, but I've <em>never</em> heard anyone say that <code>vim-plug</code> was hard to use.</p>

<pre><code>call plug#begin('~/.local/share/nvim/plugged')
Plug 'tweekmonster/django-plus.vim'
"" ...and so on...
call plug#end()
</code></pre>

<p>Then you run <code>:PlugUpdate</code> every now and then to keep things up to date.</p>

<p>Pathogen is minimalistic and leaves you still managing the plugins yourself.  There's people that like this, but I'm not among them.  I use <em>a lot</em> of plugins and I don't want to spend my time checking in on each one to see if they've been updated.</p>
","11127"
"How to find every occurrence of a word and append some text to it?","900","","<p>I have to find a word and append some other text to in in Vim:
for instance I have to append to every occurrence of the word ""<code>public_html</code>"" the text ""<code>/Text-Analysis-Tool</code>"" to obtain ""<code>public_html/Text-Analysis-Tool</code>"".</p>

<p>I've tried using the following command: </p>

<pre><code>:%s/public_html/public_html/Text-Analysis-Tool/gg
</code></pre>

<p>But is is producing the error <code>E488: trailing characters</code>.</p>

<p>Can someone please tell me how can I do this?</p>
","<p>The problem here is that Vim is interpreting the <code>/</code> character in your <em>replacement</em> as a delimiter character used by the <code>:substitute</code> command. The syntax of the <code>:s</code> command is as follows:</p>

<pre><code>:[range]s/pattern/replacement/flags
</code></pre>

<p>The above syntax uses the <code>/</code> character to delimit <em>pattern</em>, <em>replacement</em>, and <em>flags</em>; however, some other characters (usually punctuation or symbols) can be used.</p>

<p>To fix your problem, you have two options.</p>

<h2>Option 1</h2>

<p>Escape any <code>/</code> characters in your <em>pattern</em> and <em>replacement</em> using <code>\</code>:</p>

<pre><code>:%s/public_html/public_html\/Text-Analysis-Tool/gg
</code></pre>

<h2>Option 2</h2>

<p>Use a different delimiter character. To avoid escaping, choose one that does not appear in your <em>pattern</em> or <em>replacement</em>. For this case, let's use <code>#</code>:</p>

<pre><code>:%s#public_html#public_html/Text-Analysis-Tool#gg
</code></pre>

<h2>Bonus</h2>

<p>Appending to a search pattern is a special situation where we can use some features that are fairly unique to Vim's flavour of regex. Vim has zero-width anchors <code>\zs</code> and <code>\ze</code> that define the start and end (respectively) of the part of your pattern that you want to match. Anything before <code>\zs</code> or after <code>\ze</code> in your <em>pattern</em> will not be part of the patch, and thus will remain unaffected by <em>replacement</em>.</p>

<p>Instead of repeating the <em>pattern</em> part in the <em>replacement</em>, we can define the start of the match as the end of the pattern. Below, I'll continue with the technique from <strong>Option 2</strong> to avoid escaping.</p>

<pre><code>:%s#public_html\zs#/Text-Analysis-Tool#gg
</code></pre>

<p>You can look at it like this: we're replacing an empty string that follows <code>public_html</code> with <code>/Text-Analysis-Tool</code>.</p>

<p>Note that omitting either of these zero-width anchors is like having <code>\zs</code> at the start of the pattern and/or <code>\ze</code> at the end of the pattern.</p>

<hr>

<h3>Side note</h3>

<p>I noticed you're using <code>gg</code> for your <em>flags</em>. This is identical to not using any <code>g</code> in your <em>flags</em> at all -- each <code>g</code> inverts the <em>global</em> behaviour. If this wasn't merely a typo, I suspect that you might have the <code>'gdefault'</code> option enabled. This has the effect that using <code>g</code> will make the substitution <em>not</em> global, and no <code>g</code> in <em>flags</em> (or <code>gg</code>) will make it global.</p>

<p>Turning this option off (rather, not turning it on, as it's off by default) will let you use a single <code>g</code> for the global behaviour.</p>
","2842"
"Detect most resource hungry plugin","893","","<p>I have some plugins installed for vim, I would like to know how can I find out what plugin uses most resources (CPU, RAM) ?</p>
","<p>This isn't really possible.  Vim doesn't have any concept of isolation, everything lives in a big, happy, single-threaded process, and resources are democratically shared among all plugins.  The best you can do is enable profiling (see <code>:help profiling</code>) and see which functions take the most time to run, but that won't tell you much about either CPU or memory use.</p>

<p>You might consider asking the neovim people though, they might have pondered about these issues.</p>
","3393"
"Mapping Ctrl with equal sign","893","","<p>I am trying to map my Ctrl and plus sign together. This is what I am trying in my vimrc:</p>

<pre><code>nnoremap &lt;C-=&gt;    : echo ""Hello"" &lt;CR&gt; 
</code></pre>

<p>However it seems like the mapping is not being triggered.
Any suggestions on what I might be doing wrong? I am using macvim.</p>
","<p>Unfortunately, there's no reliable way of mapping <kbd>Ctrl-=</kbd>.</p>

<p>Because of the way that <code>ctrl+key</code> chords interact with the terminal and are represented internally, the only safe Ctrl-mappings are the ones defined in the ASCII standard. Here is every <code>ctrl+key</code> that you can map to, and the byte it represents. </p>

<pre><code>Ctrl-@                 0x00            NUL
Ctrl-A to Ctrl-Z       0x01 to 0x1A
Ctrl-a to Ctrl-z       0x01 to 0x1A
Ctrl-[                 0x1B            ESC
Ctrl-\                 0x1C
Ctrl-]                 0x1D
Ctrl-^                 0x1E
Ctrl-_                 0x1F
Ctrl-?                 0x7F            DEL
</code></pre>

<p>Source: <a href=""http://vimhelp.appspot.com/vim_faq.txt.html#faq-20.5"" rel=""nofollow noreferrer"">Vim-FAQ</a></p>

<p>You might be able to get around this by configuring you terminal to send a certain byte-sequence for this mapping, like in <a href=""https://stackoverflow.com/a/2179779/3524982"">this stack-overflow thread</a>, but that will definitely be a pain. Personally, I'd rather just pick a different mapping.</p>

<p>This might eventually be fixed, but it's unlikely, since vim relies upon the terminal it's running in. However, there's a good possibility this will work in neovim. I don't know if that works right now or not.</p>
","8857"
"delete repeated line in vim, keep the n-th line in Vim","892","","<p>I want to ask how to delete repeated lines in vim.
For now, I have a file which contained 12740 lines. There are only 98 unique lines, and each line is duplicated 129 times.</p>

<p>I have tried:</p>

<pre><code>g/^\(.*\)$\n\1$/d
</code></pre>

<p>But my problem is, some unique lines are the same to each other, I don't know which lines are those.</p>

<p>When I input that command, my file becomes 95 lines, not 98 which I want. (3 lines are the same to each other, I guess, so it's also deleted).<br>
Any other solution?<br>
I'll edit if my question is still not clear enough.</p>

<p>My file:<br>
<code>-0.00697568</code> - line 1<br>
<code>-0.00697568</code> - line 2<br>
<code>...</code><br>
<code>0.00697568</code>  - line 131<br>
<code>0.00697568</code>  - line 132<br>
<code>0.00697568</code>  - line 133<br>
<code>...</code><br>
<code>0.020909881</code> - line 261<br>
<code>0.020909881</code> - line 262<br>
<code>...</code><br>
  And so on.<br>
I need to keep the 130n+1 line, from n=0 until n=97.</p>

<p><strong>Edit</strong> I need the lines to keep their order so a solution sorting the lines would not be an acceptable one.</p>
","<p>To delete <em>n</em> lines starting from every line, you can do:</p>

<pre><code>:%norm ndd
</code></pre>

<p>For example, if I started with the numbers 1 to 10 repeated 5 times:</p>

<pre><code>1
1
1
1
1
2
2
2
2
2
3
3
3
3
3
4
4
4
4
4
5
5
5
5
5
6
6
6
6
6
7
7
7
7
7
8
8
8
8
8
9
9
9
9
9
10
10
10
10
10
</code></pre>

<p>And I do:</p>

<pre><code>:%norm 4dd
</code></pre>

<p>I get:</p>

<pre><code>1
2
3
4
5
6
7
8
9
10
</code></pre>

<p>So, try <code>:%norm 129dd</code>.</p>

<p>This is one of those instances where you <em>want</em> <code>:%</code> instead of <code>:g</code>. <code>:g</code> tags the lines so that modifications while running the <code>g</code> command aren't counted for running the remaining iterations. <code>%</code>, on the other hand, will run from every line from 1 to the end, and it will only look at the current line numbers at each iteration.</p>
","7882"
"How to write vertically?","892","","<p>Lets say I want to produce the following text in my document:</p>

<pre><code>%
%            Not Important
%    O -------------------------&gt;
%    |
%  S |
%  o |
%  m |
%  e |
%    |
%  M |
%  s |
%  g |
%    |
%    V
</code></pre>

<p>Is there any easy way of writing the ""Some Msg"" vertically as above without having to manually insert each character in each line?</p>
","<p>Really good solution would probably require some more work, but ""not bad"" is
not very hard to achieve.</p>

<h3>Idea</h3>

<p>All we need is to move one line down after each character, so let's do just
that via <code>InsertCharPre</code> auto-command!</p>

<h3>Code</h3>

<p>Put it into <code>.vimrc</code> or better yet to some file under <code>plugin/</code> directory.</p>

<pre><code>"" enters insert mode to write vertically
function! VertStart()
    augroup Vert
        autocmd!
        "" handles each entered character and moves cursor down
        autocmd InsertCharPre * call feedkeys(""\&lt;left&gt;\&lt;down&gt;"", 'n')
        autocmd InsertLeave * call VertEnd()
    augroup END

    inoremap &lt;BS&gt; &lt;Up&gt;&lt;Del&gt;
    startinsert
endfunction

"" cleans up on leaving insert mode
function! VertEnd()
    iunmap &lt;BS&gt;
    augroup Vert
        autocmd!
    augroup END
endfunction

"" command to start writing vertically
command! Vert call VertStart()
</code></pre>

<h3>Usage</h3>

<p>Enter <code>:Vert</code> command to start writing vertically.  Leaving insert mode
automatically disables this ""mode"".  Of course, you can map it to a shortcut
if you need to use this command often.</p>

<h3>Known Issues</h3>

<ol>
<li>Vertical writing won't be disabled if you leave insert mode via
<kbd>Ctrl-C</kbd> (this is a result of <kbd>Ctrl-C</kbd> being implemented in a slightly strange way with regard to <code>InsertLeave</code> event, which is not fired; thus using the key requires one to be careful).</li>
</ol>
","2289"
"Can't get deoplete plugin working in Neovim","890","","<p>I have installed <a href=""https://github.com/Shougo/deoplete.nvim"" rel=""nofollow"">deoplete</a> plugin into my Neovim using <a href=""https://github.com/Shougo/dein.vim"" rel=""nofollow"">dein</a>. I have put <code>let g:deoplete#enable_at_startup = 1</code> into my <code>init.vim</code> and I can see the autocomplete list when I type in the insert mode - so far so good. However I am not able to autocomplete the word I am typing from the list which has appeared (I guess it should be done using Tab but none of the keys I tried worked). I am a Vim beginner so I am actually getting lost now. </p>
","<p>Vim uses <code>Ctrl-n</code> (next item) and <code>Ctrl-p</code> (previous item), <code>Ctrl-y</code> (accept match) or <code>Ctrl-e</code> (cancel) and so on for completion. See <code>:h ins-completion-menu</code> and <code>:h popupmenu-keys</code> for details.</p>

<p>The following <code>deoplete</code> settings may help (they use <code>Tab</code>, <code>Enter</code> and <code>Esc</code>) - see the comments for what they do:</p>

<pre><code>""use &lt;tab&gt; for completion
function! TabWrap()
    if pumvisible()
        return ""\&lt;C-N&gt;""
    elseif strpart( getline('.'), 0, col('.') - 1 ) =~ '^\s*$'
        return ""\&lt;tab&gt;""
    elseif &amp;omnifunc !~ ''
        return ""\&lt;C-X&gt;\&lt;C-O&gt;""
    else
        return ""\&lt;C-N&gt;""
    endif
endfunction

"" power tab
imap &lt;silent&gt;&lt;expr&gt;&lt;tab&gt; TabWrap()

"" Enter: complete&amp;close popup if visible (so next Enter works); else: break undo
inoremap &lt;silent&gt;&lt;expr&gt; &lt;Cr&gt; pumvisible() ?
            \ deoplete#mappings#close_popup() : ""&lt;C-g&gt;u&lt;Cr&gt;""

"" Ctrl-Space: summon FULL (synced) autocompletion
inoremap &lt;silent&gt;&lt;expr&gt; &lt;C-Space&gt; deoplete#mappings#manual_complete()

"" Escape: exit autocompletion, go to Normal mode
inoremap &lt;silent&gt;&lt;expr&gt; &lt;Esc&gt; pumvisible() ? ""&lt;C-e&gt;&lt;Esc&gt;"" : ""&lt;Esc&gt;""
</code></pre>
","9470"
"How to resize vim on Windows 7?","886","","<p>I am wondering how to resize the gVim application on Windows 7. For example, I want to grab the corner of the window with my mouse and resize the application so it takes up more space on my screen. Does anyone know how to do this? This question seems silly, but searching on Google just brings back results on resizing Vim windows and splits, not the Vim program as a whole.</p>

<p>I am using gVim 7.4 on Windows 7. When I start it up it is a very small window, not even 30 lines long.</p>

<p>gVim Easy lets me resize the application, but I don't want to use gVim Easy. </p>
","<p>You can set the 
<a href=""http://vimhelp.appspot.com/options.txt.html#E593"" rel=""nofollow noreferrer""><code>'lines'</code></a> and 
<a href=""http://vimhelp.appspot.com/options.txt.html#E594"" rel=""nofollow noreferrer""><code>'columns'</code></a>
options from within Vim to resize the window. For example:</p>

<pre><code>:set lines=55
:set columns=120
</code></pre>

<p>You can add this to your vimrc file to do it automatically. This will work on gVim on any platform, and in <em>most</em> terminal emulators.</p>

<p>Related question: <a href=""https://vi.stackexchange.com/q/1937/51"">How do I get gvim to start maximised in Windows?</a></p>
","3720"
"Make :edit {file} use current directory during :Explore","880","","<p>I often use <code>:Ex</code> or <code>:Sex</code> to explore the filesystem from an opened file directory, or just invoke vim passing a directory to start exploring the filesystem and then opening a file.</p>

<p>In any case, while navigating the directory tree, using the <code>:edit {file}</code> command to open new files always takes paths relative to the current directory from which vim was executed; so:</p>

<pre><code>~# vim .
-&gt; navigate to Development/
-&gt; open a file
:e &lt;tab&gt; will complete path from home dir
</code></pre>

<p>or:</p>

<pre><code>~# vim Development/
-&gt; open a file
:Sex
:e &lt;tab&gt; will complete paths from Development/
</code></pre>

<p>is it possible (automagically or with a command) to change vim current working directory to the current selected directory while navigating the filesystem? </p>
","<p>It is possible by setting the netrw configuration variable <code>g:netrw_keepdir</code> to 0  (default is 1).<br>
To make it permanent, add in the .vimrc file this line:</p>

<pre><code>let g:netrw_keepdir=0
</code></pre>
","632"
"Scroll a quarter (25%) of the screen up or down","879","","<p>I often find scrolling a full page too disorienting, half a page too much, but a quarter page is just right. I currently do it just by holding down the arrow keys.</p>

<p>How do I scroll 25% of the page down and up easily?</p>
","<p>Maybe <kbd>ctrl</kbd><kbd>d</kbd> and <kbd>ctrl</kbd><kbd>u</kbd> could be what you are looking for. By default then move half of the screen.</p>

<p>From <a href=""http://vimhelp.appspot.com/scroll.txt.html#CTRL%2DD"" rel=""nofollow""><code>:h CTRL-D</code></a>:</p>

<blockquote>
  <p>Scroll window Downwards in the buffer.  The number of
  lines comes from the 'scroll' option (default: half a
  screen).</p>
  
  <p>If [count] given, first set 'scroll' option
  to [count].</p>
</blockquote>

<p>Which means that the first time you want to scroll in a window you can do <kbd>XX</kbd><kbd>ctrl</kbd><kbd>d</kbd> where XX is the 25% of the number of lines in your window. As it sets <code>scroll</code> to the XX value you can then use <kbd>ctrl</kbd><kbd>d</kbd> and <kbd>ctrl</kbd><kbd>u</kbd> to move 25% of the screen.</p>

<p>Also I think that <a href=""http://vimhelp.appspot.com/scroll.txt.html#scrolling"" rel=""nofollow""><code>:h scrolling</code></a> might be interesting for you.</p>

<hr>

<p><strong>Edit</strong></p>

<p>And here is another solution with a function and some mappings to add to your vimrc:</p>

<pre><code>function! ScrollQuarter(move)
    let height=winheight(0)

    if a:move == 'up'
        let key=""^Y""
    else
        let key=""^E""
    endif

    execute 'normal! ' . height/4 . key
endfunction

nnoremap &lt;silent&gt; &lt;up&gt; :call ScrollQuarter('up')&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;down&gt; :call ScrollQuarter('down')&lt;CR&gt;
</code></pre>

<p>The function will get the height of the current window, and accordingly to its parameter will scroll the screen up or down of one quarter of the height.</p>

<p><strong>Important note</strong> On the lines <code>let key=""^Y""</code> and <code>let key=""^E""</code>, you have to enter manually <code>^Y</code> and <code>^E</code>. To do so use the key combinations <kbd>CTRL+v</kbd><kbd>CTRL+y</kbd> and <kbd>CTRL+v</kbd><kbd>CTRL+e</kbd>. If you simply copy these lines vim will understand the command as the literal characters <code>^</code> followed by <code>y</code> whereas what we want is Vim to use the keycode <code>^Y</code> which represent the code sent by the terminal when you press <kbd>ctrl</kbd><kbd>y</kbd></p>

<p>The mappings will call the function, the first one to go up and the second one to go down.</p>

<p>Of course you can change <code>&lt;up&gt;</code> and <code>&lt;down&gt;</code> to some other keys if you want to keep the default behavior of your arrow keys.</p>
","10033"
"Problem with color, symbols and upper bar using airline with Vim in terminal","877","","<p>I noticed 3 problems with my Vim terminal setup on Ubuntu which can be illustrated by the following picture of my current Vim. I get the same look with a lot of airline-themes (e.g. molokai, jellybeans, dark, etc.)
<a href=""https://i.stack.imgur.com/XA0rI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XA0rI.png"" alt=""current Vim""></a></p>

<ul>
<li>The first problem is that I'd like to have colors with my status bar which are clearly not appearing.</li>
<li>Also I don't know if the symbols of the status bar are correct, because the arrows do not look like the ones shown below.
<a href=""https://i.stack.imgur.com/ZjcvA.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZjcvA.gif"" alt=""enter image description here""></a></li>
<li>Finally the upper bar indicating the buffers or the tabs clearly do not look like mine.</li>
</ul>

<p>Also, here are some potentially useful informations</p>

<ul>
<li>I installed the powerline patched Mac OS font Monaco. This helped me to replace some weird symbols and get the ones shown above.</li>
<li>The only airline theme that was different was base16.</li>
<li>I tried changing the Vim colorscheme to different ones, but it didn't solve anything.</li>
</ul>

<p>Finally here is a copy of my .vimrc</p>

<pre><code>set encoding=utf8

set rtp+=~/.vim/bundle/Vundle.vim
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'https://github.com/Valloric/YouCompleteMe.git'
Plugin 'https://github.com/scrooloose/nerdtree.git'
Plugin 'https://github.com/tpope/vim-surround.git'
Plugin 'https://github.com/terryma/vim-multiple-cursors.git'

Plugin 'dkprice/vim-easygrep'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

"" Optional:
Plugin 'honza/vim-snippets'

call vundle#end()

filetype plugin indent on
filetype plugin on
filetype indent on
syntax on

"" air-line
let g:airline_powerline_fonts = 1

""highlight Pmenu ctermfg=15 ctermbg=4 guifg=#ffffff guibg=#0000ff

let g:ycm_show_diagnostics_ui = 1
let g:ycm_enable_diagnostic_highlighting = 0
set number
set autochdir
set ruler
set ts=4
set expandtab
set shiftwidth=4
set cursorline
set showmatch
set ignorecase
set showcmd
set list listchars=tab:\ \ ,trail:·
"" set timeoutlen = 200
set nofoldenable
set wildmode=full
set laststatus=2
set completeopt-=preview

map &lt;Tab&gt; &lt;C-W&gt;W
nnoremap &lt;F5&gt; :NERDTreeToggle&lt;CR&gt;
:nmap &lt;F3&gt; :vimgrep //j ** &lt;bar&gt; copen
</code></pre>

<p>If more information is needed to solve these problems, I'll gladly provide it.</p>

<p><strong>UPDATE:</strong> I solved the first two problems by putting 'set t_Co=256' in my .vimrc, but the upper bar is still the same is it normal?</p>
","<p>I solved the first two problems by putting the <code>set t_Co=256</code> in my .vimrc and solved the missing upper bar problem by putting this in my .vimrc.</p>

<pre><code>let g:airline#extensions#tabline#enabled = 1
"" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
</code></pre>
","7448"
"Filetype that LaTeX should be","874","","<p><a href=""http://vimdoc.sourceforge.net/htmldoc/filetype.html"" rel=""nofollow"">From <code>:help filetype</code></a>:</p>

<blockquote>
  <p>If the first line of a *.tex file has the form    <code>%&amp;&lt;format&gt;</code> then this
  determined the file type:  plaintex (for plain TeX), context (for
  ConTeXt), or tex (for LaTeX).<br>
  Otherwise, the file is searched for keywords to choose context or tex.  If > no keywords are found, it
  defaults to plaintex. 
  You can change the default by defining the
  variable <code>g:tex_flavor</code> to the format (not the file type) you use most. 
  Use one of these:<br>
  <code>let g:tex_flavor = ""plain""</code><br>
  <code>let g:tex_flavor = ""context""</code><br>
  <code>let g:tex_flavor = ""latex""</code> </p>
</blockquote>

<p>If I open a file from the terminal using <code>vim t.tex</code> then run </p>

<pre><code>:set ft?
</code></pre>

<p>It returns</p>

<pre><code>filetype=plaintex
</code></pre>

<p>This should be <code>filetype=latex</code> shouldn't it?</p>

<p>If I open a previous document (that was written in TexMaker) within vim and run <code>:set ft?</code> it returns <code>filetype=tex</code>. hmm. </p>

<p>I have added <code>let g:tex_flavour = ""latex""</code> to my vimrc, but this doesn't seem to make a difference. </p>

<p>I'm not sure what's best here, and what should be the prefered option. I appreciate that the question perhaps part LaTeX part Vim, but the issues I'm having aren't related to LaTeX afaik.</p>
","<p>When there's not enough information to decide otherwise, <code>'filetype'</code> is set to the most basic -- <code>plaintex</code>.  Your existing file must have had enough content for the detection to determine that it was actually LaTeX, so <code>'filetype'</code> was set to <code>tex</code>.</p>

<p>The required command to prefer LaTex when there isn't enough information is</p>

<pre><code>let g:tex_flavor = ""latex""
</code></pre>

<p>Note, that's <code>flavor</code>, not <code>flavour</code>.</p>
","2662"
"Refresh files in NERDTree?","874","","<p>How do I refresh file tree in NERDTree ?</p>

<p>If I use: </p>

<pre><code>:!touch SomeNewFile
</code></pre>

<p>It is not rendered in the tree.</p>
","<p>The NERD tree quick help is accessible from the NERD tree window by typing <kbd>?</kbd> There I read:</p>

<blockquote>
  <p>"" Filesystem mappings~<br>
  ...<br>
  "" r: refresh cursor dir<br>
  "" R: refresh current root  </p>
</blockquote>

<p>These should do what you ask.</p>
","3380"
"What does ""filetype plugin on"" really do?","874","","<p>I understand that it loads the <code>ftplugin.vim</code> file, but what does it really do? Does it set options (depending on the filetype)?</p>

<p>If I were to include this line at the start of my vimrc</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>and then I set some options after this line (like autoindent, smartindent, etc.), would it mess with them? How can I know which options are affected by a filetype plugin or indent file?</p>
","<p>There is actually a good description in <code>help filetype</code>.</p>

<p>Any options that are defined for a filetype will be set with <code>setlocal</code>:</p>

<pre><code>:setl[ocal] ...     Like "":set"" but set only the value local to the
                    current buffer or window.  Not all options have [..]
</code></pre>

<p>For example <code>/usr/share/vim/vim80/ftplugin/javascript.vim</code> defines:</p>

<pre><code>setlocal commentstring=//%s
</code></pre>

<p>Because local options have priority over global ones your <code>.vimrc</code> settings might be ignored. In that case you need to create a file <code>~/.vim/after/ftplugin/javascript.vim</code> (with the name of the filetype you wish to change) and set your own <code>setlocal</code> options in there.</p>

<p>The easiest way to see which options are set is to just open the files for the filetype in <code>/usr/share/vim/vim80/ftplugin</code>, <code>../indent</code> and <code>../syntax</code>.</p>

<p>Btw, <code>filetype plugin indent on</code> are three separate commands: <code>filetype on</code>, <code>plugin on</code> and <code>indent on</code>.</p>
","11705"
"what is the command for ""Select All"" in vim and VsVim?","871","","<p>How do I select all the content of a file in Vim and VsVim? Like in other editors <code>ctrl+A</code> does the job for select all.</p>
","<p><code>ggVG</code> selects all content. <code>gg</code> moves to first line. <code>V</code> starts visual mode. <code>G</code> jumps to last line thereby selecting from first to last line </p>
","9029"
"How do I exclude certain file extensions from completion?","870","","<p>Is there a way to configure vim regarding what file types it considers ""suitable"" for opening?</p>

<p>Let me clarify by an example. Imagine you are working on a latex document. Once you build your file, you have the following in your directory (along with other files related to the build):</p>

<pre><code>X.aux  X.log  X.out  X.pdf  X.tex
</code></pre>

<p>Now if you are working on another file (say <code>Y.tex</code>), and you want to <code>:sp X.tex</code>, you can use <code>&lt;Tab&gt;</code> to cycle through possible files, i.e.:</p>

<pre><code>:sp X&lt;Tab&gt;
</code></pre>

<p>It seems that vim already makes a selection of what files you are most likely to want, and autocompletes to those files first. This is the order in which my vim is autocompleting files:</p>

<pre><code>X.pdf
X.tex
X.aux
X.log
X.out
</code></pre>

<p>Again, it looks like vim has decided I probably want to open either the <code>.pdf</code> or <code>.tex</code> file and is presenting them to me first and in alphabetical order. Then it shows the rest of the files, again in alphabetical order. First, is my understanding correct?</p>

<p>If so, how can I tell vim that it shouldn't think I am interested in opening <code>.pdf</code> files with it? This way, the first <code>&lt;Tab&gt;</code> would immediately get me the <code>.tex</code> file as the file I am really looking for.</p>
","<p>You can use <code>wildignore</code>, for example:</p>

<pre><code>set wildignore+=*.pdf,*.o,*.obj,*.jpg,*.png
</code></pre>

<p>If you want to list them, but give low priority – list at end, one option is to use <code>suffixes</code>, for example with:</p>

<pre><code>set suffixes+=.pdf
</code></pre>

<p>PDF files are going to be listed, but at the end of file list. Read up on <code>:h suffixes</code> with links for more detail.</p>
","2427"
"YouCompleteMe cannot complete C function with parameters","866","","<p>I have set this <code>let g:ycm_key_invoke_completion = ""&lt;c-q&gt;""</code>, and then I can see the pop menu without parameters.</p>

<p>If I press Ctrl+q, the pop menu is the same one.</p>

<p>How can it complete a global function with parameters.</p>
","<p>Sounds like issues <a href=""https://github.com/Valloric/YouCompleteMe/issues/234"" rel=""nofollow"">294</a> and <a href=""https://github.com/Valloric/YouCompleteMe/issues/1193"" rel=""nofollow"">1193</a> on GitHub. </p>

<blockquote>
  <p>Valloric commented on Nov 18, 2014:</p>
  
  <p>This is on my TODO list, but I mostly don't have time for a large-scale feature like this. Sometimes I find some of it, but it's rare (every few months).</p>
</blockquote>
","3637"
"GitHub for .vimrc and plugins","865","","<p>I know many people store their .vimrc on GitHub to make it easier to get right to work on new machines, and that makes complete sense to me. Including plugins, however, is problematic, because the plugins I use are already git repositories. How does one create a repo that will track both their .vimrc and any plugins that might be installed?</p>
","<p>How to deal with repositories-within-repositories has been an ongoing question with git. Git's <a href=""http://git-scm.com/docs/git-submodule"">submodules</a> are one way of addressing the situation, at the expense of adding a little more complexity to keep track of. The git site has <a href=""http://git-scm.com/book/en/v2/Git-Tools-Submodules"">an introduction to submodules</a>.</p>

<p>The basic idea is to keep a reference to another git repository associated with a path on your repository. These references are stored in a file <code>.gitmodules</code> in the root of your repository (which is managed by git, so leave it alone). Some of the complexity comes in to play when cloning a repo which has submodules: you must explicitly <code>git submodule init</code> to create the <code>.gitmodules</code> file, and then <code>git submodule update</code> to clone the submodules.</p>

<hr>

<p>Here's a walkthrough of how I'll add a new vim plugin to my dotfiles repository (I have <code>~/.vim/</code> aliased to this repo's <code>.vim/</code>) using a submodule:</p>

<pre><code>$ cd dotfiles/
$ git submodule add https://github.com/elixir-lang/vim-elixir.git .vim/bundle/vim-elixir
</code></pre>

<p>After the <code>submodule add</code>, a <code>git status</code> would show that you've modified (or created) the <code>.gitmodules</code> file, with something like this:</p>

<pre><code>[submodule "".vim/bundle/vim-elixir""]
    path = .vim/bundle/vim-elixir
    url = https://github.com/elixir-lang/vim-elixir.git
</code></pre>

<p>It should also show <code>.vim/bundle/vim-elixir</code> as a new file. Git treats that path specially now: it's a normal directory on your file system (so vim loads it up normally), but <code>git diff</code> will treat it as a specific commit from its repository. When looking at diffs or logs for that path (e.g. <code>git log -1 -u .vim/bundle/vim-elixir</code>), git will show it as a one-line string like this:</p>

<pre><code>Subproject commit 2d59d1d52a9bcf9342d42fa7d6b59e6a1aaa7b9e
</code></pre>

<p>Updating to the latest version of the plugin corresponds to going into the submodule's repository and checking out a new commit, and then committing <em>that</em> to your repository:</p>

<pre><code>$ cd .vim/bundle/vim-elixir
$ git remote -v            # note: the submodule repo's origin, not my repo's
origin  https://github.com/elixir-lang/vim-elixir.git (fetch)
origin  https://github.com/elixir-lang/vim-elixir.git (push)

$ git pull
# ...

$ cd -     # back to my repository's root
$ git status
# ...
    modified:   .vim/bundle/vim-elixir (new commits)

$ git diff .vim/bundle/vim-elixir
# ...
-Subproject commit 2d59d1d52a9bcf9342d42fa7d6b59e6a1aaa7b9e
+Subproject commit d59784e7afbd0d55c501e40c43b57cbe6f6e04c2

$ git commit -m ""update vim-elixir"" .vim/bundle/vim-elixir
</code></pre>
","548"
"Talking to vim from outside","862","","<p>Can I change a variable in an instance of vim from another shell (without sending keys through tmux)?</p>

<p>I ask because I would like to use latexmk's compiling_cmd, success_cmd, and failure_cmd options to show compilation status on the statusline.</p>

<p>Perhaps I could have vim look for the existence or non-existence of certain files (using files as boolean variables)? But this seems a bit dirty; hopefully there is a better way.</p>
","<p>If you launch your first Vim session with the argument <code>--servername VIM</code>:</p>

<pre><code>$ vim --servername VIM
</code></pre>

<p>then you can send any command from any other shell with the argument <code>--remote-send</code>.  </p>

<p>For example, if you use your statusline to display the value of some variable <code>g:myvar</code>, and you have the following lines in your vimrc:</p>

<pre><code>let g:myvar = ""foo""
set stl+=%{g:myvar}
</code></pre>

<p>Then you can change its value (<code>:let g:myvar = ""bar""</code>) from another shell:</p>

<pre><code>$ vim --remote-send ':let g:myvar = ""bar""&lt;cr&gt;'
</code></pre>

<p>The statusline should reflect the change of the value.</p>

<hr>

<p>As your last <a href=""https://vi.stackexchange.com/questions/7022/talking-to-vim-from-outside#comment11473_7023"">comment</a> says it, if your Vim instance is not in normal mode, the previous command will not work as expected. There may be simpler, but here are 2 possible solutions:</p>

<p>1) add the key <code>&lt;esc&gt;</code> to be in normal mode<br>
2) use the argument <code>--remote-expr</code> instead of <code>--remote-send</code> to evaluate an expression and write a small helper function whose code will assign the new value to your variable</p>

<p>First solution:</p>

<pre><code>$ vim --remote-send '&lt;esc&gt;:let g:myvar = ""bar""&lt;cr&gt;'
</code></pre>

<p>Second solution:</p>

<p>Define the following function in your vimrc:</p>

<pre><code>function! Myfunc(value)
    let g:myvar = a:value
endfunction
</code></pre>

<p>Then, in your shell:</p>

<pre><code>$ vim --remote-expr 'Myfunc(""bar"")'
</code></pre>
","7023"
"Opening built-in cheat sheet","856","","<p>Every now and then when I try to quit vim, I incidentally open window with command cheat sheet as in attached picture. How do I do this and how is it called?</p>

<p><a href=""https://i.stack.imgur.com/qk1Ka.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qk1Ka.png"" alt=""enter image description here""></a></p>
","<p>That's not a cheat sheet; it's a history of the commands you've executed. It allows you to find, edit and repeat commands you've previously executed. There are a couple of ways you can enter it. One is to type <code>Ctrl-F</code> while on the ex command line. Another way is to type <code>q:</code> while in normal mode. You can read more about it here:</p>

<pre><code>:help 20.4
:help 20.5
:help cmdwin
</code></pre>
","4263"
"How to write message strings to a file using vim script?","855","","<p>I would like to create two functions, one for sending a message string to Vim's own messaging system and one to dump the message string to a file.</p>

<p>Now, I have already progressed in figuring this out with different approaches however, my solution is not elegant enough and sometimes the messages sent to <code>:messages</code> are getting lost on the status line at the moment of printing them out. However once I run <code>:messages</code> I can see those <em>skipped</em> messages in there. So this must be related to the way I deal with new lines etc. Here are bits of my script that should illustrate what approaches I have tried so far:</p>

<pre><code>"" Lets assume this is a part of the SendToStatus() function
"" and it is a bit like a pseudo-code.
execute 'echohl' error
for l:line in split('My message.', '\\n')
  echomsg l:line
endfor
echohl NONE
</code></pre>

<p>The traditional way of sending the messages to <code>:messages</code> works fine on it's own. The problems start when I use the following to write the same message to a file:</p>

<pre><code>"" Lets assume this is a part of the SendToFile() function
"" and this is also a bit like a pseudo-code.
try
    echon ""\r""
    execute 'redir &gt;&gt; ' . l:file
    silent echomsg l:msgString
    silent echo ""\n""
    silent! redir END
catch /E190:/
    throw s:myException('Cannot write to file: %s', l:file)
end-try
</code></pre>

<p>So when I execute these commands one after another like this:</p>

<pre><code>function! SomeMoreComplexWrapper() abort
    ...
    SendToStatus('some message')
    SendToFile('some message')
    ....
    SendToStatus('some more messages')
    ....
    SendToStatus('some more messages')
    SendToFile('even more messages')
    ...
endfunction
</code></pre>

<p>The strings are written to the file with no issues what so ever, however, the status messages are getting lost on some occasions. It must be the way the echoing order is managed.</p>

<p>I have also tried the <code>readfile()</code> and <code>writefile()</code> approaches, which worked just fine. This helped me to take the process of echoing to a file out of the equation, thus removed the need of dealing with <code>echo</code> and <code>echomsg</code> on both sides and only keep <code>echomsg</code> to send the strings to the <code>:message</code> facility. However I need to store the contents of my log file into a list and append the new string to that every time I need to send something to the file, which I find a bit scary.</p>

<p>Could you please help me with this issue?</p>
","<p>The problem was related to that bit:</p>

<pre><code>echon ""\r""
</code></pre>

<p>... in the file dumper function, used to reset the cursor position. Stack multiple <code>SendToFile()</code> and you get the cursor aligned too many time causing the next <code>echom</code> commands to be not visible in the status line.</p>

<p>The solution (for now) is to use a variable <code>s:isFileStreamActive</code> that is set to 1 inside <code>SendToFile()</code> and to 0 inside <code>SendToStatus()</code>. In that way, consecutive <code>echon ""\r""</code> commands can be skipped with an <code>if</code> statement:</p>

<pre><code>if !s:isFileStreamActive
    echon ""\r""
endif
</code></pre>
","5664"
"Tutorial for vim programming?","854","","<p>I am a veteran user of <code>vi</code>. When I started using it, there was basically nothing... Now, we have <code>vim</code>. But, how do I program it?  Where does one start? With <code>help</code>? Not sure this is a good start.</p>
","<p>I can recommend <a href=""http://learnvimscriptthehardway.stevelosh.com/"">Learn Vimscript the hard way</a> from Steve Losh. It is a good tutorial which gives you most of the relevant knowledge and links you to <code>:help</code> when it makes sense.</p>
","6617"
"How to enable/disable an augroup on the fly?","853","","<p>I created an <code>augroup</code> in my <code>.vimrc</code> containing several <code>autocmd</code> and I need to enable/disable these <code>autocommand</code> on the fly. </p>

<p>The idea is to create a mapping (let's say <kbd>F4</kbd> for example) which would enable these autocommands when pressed once and disable them when pressed again without having to source a file or reload the <code>.vimrc</code>.</p>

<p>How can I do that?</p>
","<p>Building on your answer: you don't need a variable to keep state of the <code>augroup</code>, you can use <a href=""http://vimhelp.appspot.com/eval.txt.html#exists%28%29""><code>exists()</code></a> for that, provided that you know at least one of the <code>autocmd</code>s that are part of the group:</p>

<pre><code>function! ToggleTestAutoGroup()
    if !exists('#TestAutoGroup#BufEnter')
        augroup TestAutoGroup
            autocmd!
            autocmd BufEnter   * echom ""BufEnter "" . bufnr(""%"")
            autocmd BufLeave   * echom ""BufLeave "" . bufnr(""%"")
            autocmd TabEnter   * echom ""TabEnter "" . tabpagenr()
            autocmd TabLeave   * echom ""TabLeave "" . tabpagenr()
        augroup END
    else
        augroup TestAutoGroup
            autocmd!
        augroup END
    endif
endfunction

nnoremap &lt;F4&gt; :call ToggleTestAutoGroup()&lt;CR&gt;
</code></pre>
","4123"
"Vim hide buffer like in emacs?","851","","<p>I'm trying to figure out how the vim concept of buffers, windows, and tabs maps onto emacs.</p>

<p>It seems to me that <code>&lt;c-w&gt;s</code> and <code>&lt;c-w&gt;v</code> are roughly equivalent to Emacs <code>C-x 2</code> and <code>C-x 3</code>. They're not exactly equivalent since vim splits are equally spaced by default and emacs will bisect the current window. </p>

<p>What is the equivalent of <code>C-x 0</code> (close this window), <code>C-x 1</code> (close everything except this window) for vim? I'd like to be able to hide the buffers I'm not currently looking it without closing them, so they can still be summoned later with bufexplorer or something similar.</p>
","<p>By default, Vim will refuse to replace the current buffer with another one if it contains unsaved changes. You'll need to add the option below to your <code>vimrc</code> if you don't want that behavior (and you don't want that):</p>

<pre><code>set hidden
</code></pre>

<p>Buffers are Vim's equivalent of documents in other programs. When you switch to another document, you switch to another buffer. This is done with commands like:</p>

<pre><code>:b2            switch to buffer number 2
:b#            switch to previous buffer
:b foo&lt;tab&gt;    switch to buffer with foo in its name + tab completion
...
</code></pre>

<p>Windows are a limited abstraction built on top of buffers. They are viewports used to display buffers but <strong>they are not and can't be tied to any specific buffer</strong>. Switching to a window or closing a window are definitely not the same as switching to buffer or closing a buffer. You can work with windows with the commands listed under <code>:help ctrl-w</code>:</p>

<pre><code>&lt;C-w&gt;s    split current window in two, focus on the new one
&lt;C-w&gt;c    close the current window
&lt;C-w&gt;o    closes all other windows
&lt;C-w&gt;p    switch to previous window
...
</code></pre>

<p>Tab pages are another limited abstraction built on windows. They are workspaces designed to contain one or more windows. Like windows, <strong>they can't be used as file/document proxies.</strong></p>

<p>See <code>:help windows</code> and <code>:help tab-page</code> for a thorough description.</p>
","8359"
"How to make <enter> open new tabs for the quickfix window when it is opened with ""tab copen"" including the first time?","849","","<p>I want to work with quickfix without ever having a split window.</p>

<p>So I've set:</p>

<pre><code>set switchbuf=newtab
</code></pre>

<p>as mentioned at <a href=""https://stackoverflow.com/questions/6852763/vim-quickfix-list-launch-files-in-new-tab"">https://stackoverflow.com/questions/6852763/vim-quickfix-list-launch-files-in-new-tab</a></p>

<p>Now:</p>

<pre><code>tab copen
</code></pre>

<p>opens the quickfix window on a new tab.</p>

<p>But if I hit enter on a quickfix item, instead of creating a new tab, it first opens the location on a split in the current tab.</p>

<p>Only after this first split do new tabs get opened.</p>

<p>Is it possible to get new tabs from the first <code>&lt;enter&gt;</code>, and never see any splits?</p>

<p>Tested on Vim 7.4.</p>
","<p>This workaround seems to work (mind the capitalized <code>T</code> in the end):</p>

<pre><code>autocmd FileType qf nnoremap &lt;buffer&gt; &lt;Enter&gt; &lt;C-W&gt;&lt;Enter&gt;&lt;C-W&gt;T
</code></pre>

<p>It will create a mapping that is local to the <code>quickfix</code> buffer (it also works in <code>location lists</code>, since they have the same filetype, i.e. <code>qf</code>).
This mapping will first open the item under the cursor in a new window using <code>&lt;C-W&gt;&lt;Enter&gt;</code> and then move it to an new tab using <code>&lt;C-W&gt;T</code>.</p>

<p>See</p>

<pre><code>:help :autocmd
:help quickfix
:help CTRL-W_&lt;Enter&gt;
:help CTRL-W_T
</code></pre>
","6999"
"How can I get both splits to scroll left or right at the same time?","845","","<p>I want to open up two different parts of a document in horizontal splits (using <code>:sp</code>) and scroll both of them left and right together. For vertical scrolling, you would use <a href=""http://vimdoc.sourceforge.net/htmldoc/scroll.html""><code>scrollbind</code></a>. However, I'm not sure what to use for horizontal scrolling.</p>

<p>I know the capability must be available because when I use <code>vimdiff</code>, it scrolls horizontally in both documents at the same time.</p>
","<p>To scroll two windows together in vim, need to run <code>:set scrollbind</code> in each of them. As you noted, by default, this only binds vertical scrolling. In the docs for scrollbind, it mentions:</p>

<pre><code>The behavior of 'scrollbind' can be modified by the 'scrollopt' option.
</code></pre>

<p><code>:help scrollopt</code> reveals that you want to say <code>:set scrollopt+=hor</code> to enable horizontal scrolling.</p>

<p>If you just want horizontal scrolling (i.e. disable vertical scrolling), then you will also want to say <code>:set scollopt-=ver</code> or explicitly set scrollopt via <code>set scrollopt=hor</code> or <code>:set scrollopt=hor,jump</code>.</p>
","2267"
"How to replace inner text with yanked text","840","","<p>An editing pattern I frequently run into is the following: I want to yank a piece of text inside quotes or brackets, and replace that piece of text inside another pair of quotes/brackets.</p>

<p>For example, if I want to copy the the class name <code>foo bar</code> and paste that somewhere else:</p>

<pre><code>&lt;span class=""foo bar""&gt;

&lt;div class=""this-should-be-replaced-with-foo-and-bar""&gt;
</code></pre>

<p>What I know is this: If I move inside the span's class, I use <code>yi""</code> to yank the text inside the quotes.</p>

<p>Now I have this in my register, so I should be able to replace the class content of the div with it. But I can't find a handy way of doing this.</p>

<p>If I use <code>ciw</code> this ends up overwriting my register with content to change, so I loose my yanked text.</p>

<p>The best thing I can come up with is moving to the first quote of the div's class, hitting <code>p</code>, then deleting to the next quote with <code>dt""</code>.</p>

<p>Usually I screw up my position though, and I paste it somewhere inside the quotes merging the two strings, and it is messing things up.</p>

<p>I'm hoping there's some way to do a ""replace the inner text with my yanked content please"" combination to make this easier.</p>
","<p>You can use <code>vi""p</code> when inside <code>""""</code>. This can replace text in yank register, so it matters when you want to use original yanked text more than once.</p>

<p><strong>EDIT</strong>:
Additional info from Octaviour comment regarding making it reusable more than once:</p>

<blockquote>
  <p>In order to do that I would yank to a named register, which makes the two commands: <code>""ayi""</code> and and <code>vi""""ap</code> if you use register <code>a</code>.</p>
</blockquote>
","10163"
"solarized in xterm256(terminal.app) has wrong background","835","","<p>I using solarized in both terminal.app and vim, but in vim the background, airline and other things are not the color scheme's appearance which is different with MacVim.</p>

<p>So how to deal with it?</p>

<p>I have tried iTerm2 and it is the same result in terminal.app.</p>
","<p><a href=""http://ethanschoonover.com/solarized/vim-colors-solarized"" rel=""nofollow"">http://ethanschoonover.com/solarized/vim-colors-solarized</a></p>

<p><strong>IMPORTANT NOTE FOR TERMINAL USERS:</strong></p>

<p>If you are going to use Solarized in Terminal mode (i.e. not in a GUI version like gvim or macvim), <strong>please please please</strong> consider setting your terminal emulator’s colorscheme to use the Solarized palette. I’ve included palettes for some popular terminal emulator as well as Xdefaults in the official Solarized download available from Solarized homepage. If you use Solarized without these colors, Solarized will need to be told to degrade its colorscheme to a set compatible with the limited 256 terminal palette (whereas by using the terminal’s 16 ansi color values, you can set the correct, specific values for the Solarized palette).</p>

<p>If you do use the custom terminal colors, solarized.vim should work out of the box for you. If you are using a terminal emulator that supports 256 colors and don’t want to use the custom Solarized terminal colors, you will need to use the degraded 256 colorscheme. To do so, simply add the following line before the colorschem solarized line:</p>

<pre><code>let g:solarized_termcolors=256
</code></pre>

<p>Again, I recommend just changing your terminal colors to Solarized values either manually or via one of the many terminal schemes available for import.</p>
","3707"
"Why do symbols look ugly in gvim?","835","","<p>I'm on Windows 7 with Vim 7.4, and Unicode symbols with the <a href=""https://github.com/chrissimpkins/Hack"" rel=""nofollow noreferrer"">Hack</a> font look awful. Am I missing a setting somewhere? Is there a way to improve this?</p>

<p>For reference, this is gvim:</p>

<p><img src=""https://i.imgur.com/BsnG19t.png"" alt=""gvim""></p>

<p>and this is atom:</p>

<p><img src=""https://i.imgur.com/uRxugep.png"" alt=""atom""></p>

<p>I've also done the same with the Consolas font, and it's still bad.</p>

<p>This issue also exists in terminal vim, but it is slightly better.</p>
","<p>If you have a recent Vim, you may try to enable DirectX rendering. It should improve ""wide"" font rendering, among other things. Here's an example <code>vimrc</code> snip:</p>

<pre><code>if has(""gui_running"")
    set guioptions=icpM
    if has('win32') || has('win64')
        if (v:version == 704 &amp;&amp; has(""patch393"")) || v:version &gt; 704
            set renderoptions=type:directx,level:0.75,gamma:1.25,contrast:0.25,
                        \geom:1,renmode:5,taamode:1
        endif
endif
</code></pre>

<p><em>Reference</em> <code>:h rop</code></p>

<hr>

<p>Some other remarks, more generic, which may or may not be useful in your case:</p>

<p>Font spacing (horizontal, vertical) sometimes is not the same between Linux, Mac and Windows (in Vim, but also happens with other apps, e.g. Emacs). You can tweak those using <code>set linespace=...</code> (vertical) and, (only) if you use <a href=""http://www.kaoriya.net/software/vim/"" rel=""nofollow"">Kaoriya's gVim build</a>, <code>set charspace=...</code> (horizontal). This may indirectly improve font appearance.</p>
","6384"
"Using Vim Diff To Create A Patch File?","834","","<p>I'm currently using vim 7.3 on Windows 7.</p>

<p>The first question I have is it even possible to create the patch file from within vim itself? I understand the basic idea, but anytime I attempt to run</p>

<pre><code>diff -u file.txt file_new.txt &gt; file.patch
</code></pre>

<p>I get a <code>E488: Trailing characters</code> error. However, using the Windows command prompt to run <code>diff.exe</code> from the vim folder seems to work just fine. I'm not sure if I'm doing something wrong here.</p>

<p>Second - and I'm sure there's an explanation in the manual but <code>:help diff</code> didn't seem to show anything - what's the difference between <code>diff -u</code> and <code>diff -c</code>? From what I saw online, both <code>-u</code> and <code>-c</code> were both used to create a patch file. When I tested it myself using the command prompt, they both appeared to generate identical files.</p>

<p>[Edit] I realized I must have done something wrong as I just checked again and the files generated by <code>diff -u</code> and <code>diff -c</code> are different. Still curious what the differences are and when I should use one or the other.</p>
","<p><code>:!&lt;cmd&gt;</code> is how we usually run external commands from within Vim. See <a href=""http://vimhelp.appspot.com/various.txt.html#%3A%21"" rel=""nofollow""><code>:he :!</code></a>. <code>:diff</code> presumably calls Vim's <code>:diffget</code> command, but definitely not the external <code>diff</code> program as you intended it.</p>

<p><code>:help diff</code> won't say anything about difference between <code>diff -u</code> and <code>diff -c</code>, because those are options for the external <code>diff</code> program, and nothing to do with Vim. Assuming you're using GNU <code>diff</code> (POSIX <code>diff</code> doesn't specify <code>-u</code>), <code>-u</code> produces  <em>unified</em> diffs, and <code>-c</code> produces a <em>context</em> diff with, 3 lines of context. See the <a href=""http://www.gnu.org/software/diffutils/manual/diffutils.html#Context-Format"" rel=""nofollow"">GNU <code>diff</code> manual</a> for more information.</p>

<hr>

<p>It seems you must be using GNU <code>diff</code>, since the GNU docs say about unified diffs:</p>

<blockquote>
  <p>At present, only GNU diff can produce this format and only GNU patch can automatically apply diffs in this format.</p>
</blockquote>
","3661"
"Move existing window to existing tab","833","","<p>Sometimes I need to move windows into an already existing tab, and I was wondering if there was a command/keyboard shortcut that could do this.  I know I can close the window, switch to the tab, and then open it in a new split, but I was wondering if there was a shorter way of accomplishing this.  Note that I want to move it to an <em>existing</em> tab, not a new tab like <code>&lt;C-w&gt;T</code> does.</p>
","<p>Though there are commands to move existing windows around in the current tab page (i.e. affect the window layout by rotating, resizing, and moving), there are no commands to move a window to another tab.</p>

<p>As a window is just a viewport into a loaded buffer, you have to:</p>

<ol>
<li>Note the buffer number displayed in the current window.</li>
<li><code>:close!</code> the window.</li>
<li>Switch to the existing target tab page.</li>
<li><code>:sbuffer</code> the buffer number to re-open it.</li>
</ol>

<p>You'll lose any window-specific options by this. You could save and restore those in a script, too.</p>
","3394"
"Using vim and Caffeine on the same machine","832","","<h2>Background</h2>

<p>I work at a research laboratory and use three different OS's daily. On the Windows and Mac machines I make use of <a href=""http://www.zhornsoftware.co.uk/caffeine/"" rel=""nofollow"">Caffeine</a> to keep those machines from enabling the screensaver while I work on a different machine (Linux doesn't have this problem). It's very annoying to have to log in again when I switch back.</p>

<h2>Problem</h2>

<p>When vim or gvim are in insert mode, the character <code>&lt;F15&gt;</code> sporadically appears in the document. I tracked it back to Caffeine after a bit of research. The website for Caffeine states that the software works by occasionally simulating a <code>&lt;F15&gt;</code> key press event:</p>

<blockquote>
  <p>Of all the key presses available, F15 is probably the least intrusive (I've never seen a PC keyboard with that key!), and least likely to interfere with your work.</p>
</blockquote>

<p>So Caffeine is the obvious culprit. However, I still prefer to use my favorite text editor on all three machines, and don't intend to change that just to accommodate using Caffeine.</p>

<h2>Question</h2>

<p><strong>Is there something I can put in my <code>vimrc</code> to make vim ignore <code>&lt;F15&gt;</code> key press events?</strong></p>

<hr>

<h2>Edit For Clarity</h2>

<p>I can't disable the screensaver timeout; it is set by the IT department for security purposes. So with the Caffeine work-around, in order to remain compliant, I have to manually lock my machines when I step away from my desk. That's not so bad; but unlocking them every few minutes is.</p>

<p>Also, I didn't write Caffeine, so I don't know why the developer chose to click <code>&lt;F15&gt;</code> once a minute. I probably would have done it differently, perhaps with a slight mouse motion or touchpad tap, as @Random832 suggested.</p>
","<p>You can map a key to <code>&lt;nop&gt;</code> (short for ""no operation"") to make it ""do nothing"".</p>

<p>This should make Vim ignore the <code>&lt;F15&gt;</code> key in all modes:</p>

<pre><code>:noremap &lt;F15&gt; &lt;nop&gt; 
:noremap! &lt;F15&gt; &lt;nop&gt;
</code></pre>

<p>This will <em>probably</em> fix your problem, but I haven't tested it in your specific situation, as I don't have various Windows/OSX machines with Caffeine  installed standing by  :-)</p>
","3343"
"Can't change directory to network drive","830","","<p>Our company has recently changed to networked home directories. This includes setting enviroment variables. </p>

<p>This has created the odd situation that gvim thinks my home directory is :</p>

<pre><code>:echo $HOME
H:\
</code></pre>

<p>but I cannot change the current directory to that drive or edit any files there. This also means that my <code>vimrc</code> is not loaded. </p>

<pre><code>:cd H:\
E344: Can't find directory ""H:\"" in cdpath
E472: Command failed 
</code></pre>

<p><strong>Can any one help me get vim to change to H:\ and edit files there?</strong><br>
I use Windows 7, gvim 7.4 </p>

<p><strong>EDIT</strong>
I tried later CREAM versions 7.4.638 (the latest) and 7.4.099 (closest to 7.4.096 suggested by Christian Brabandt), both had the same error.</p>

<p><strong>EDIT</strong></p>

<p>Thanks for suggestions, but none have helped so far. </p>

<p>I can change to <code>h:\</code> in the vim.exe file which comes with Git on windows (vim 7.3, 32 bit windows console version, but not any of the gvim versions I have tried.</p>
","<p>I solved this problem myself by using <a href=""https://bitbucket.org/Haroogan"" rel=""nofollow"">Haroogan vim</a>. When I cd to h:\ in Haroogan vim it works, and it also successfully runs my vimrc files there.</p>

<p>I guess this was either something strange about my work's network drive and/or a bug in vim that will eventually be resolved. Still, if you have this problem, I would try Haroogan vim.</p>
","3141"
"How do I insert a comment into my vimrc fie?","830","","<p>What is the syntax for inserting a comment or comments into the vimrc file?</p>

<p>Having trouble finding this on <a href=""http://vimdoc.sourceforge.net/htmldoc/starting.html#vimrc"" rel=""nofollow noreferrer"">vim documentation online</a>.</p>
","<p>It's in a different help file (<a href=""http://vimdoc.sourceforge.net/htmldoc/cmdline.html#:comment"" rel=""noreferrer"">cmdline</a>, <a href=""http://vimdoc.sourceforge.net/htmldoc/cmdline.html#:comment"" rel=""noreferrer"">help :comment</a>):</p>

<pre><code>                            *:quote* *:comment*
'""' at the start of a line causes the whole line to be ignored.  '""'
after a command causes the rest of the line to be ignored.  This can be used
to add comments.  Example:
    :set ai     ""set 'autoindent' option
It is not possible to add a comment to a shell command "":!cmd"" or to the
"":map"" command and a few others, because they see the '""' as part of their
argument.  This is mentioned where the command is explained.
</code></pre>

<p>The reason it's there is because <code>vimrc</code> is nothing but a sequence of command-line commands. Pretty much everything that applies to command-line mode works in <code>vimrc</code>.</p>

<p>Example of whole-line comment in <code>vimrc</code>:</p>

<pre><code>"" show tab line always
set showtabline=2
</code></pre>
","11598"
"How to find what slows down Vim?","830","","<p>In some occasions, Vim respond is very slow. Is there a procedure to easily identify what causes the problem?</p>
","<p>Vim has a built-in profile set of commands. See <code>:h profile</code>.</p>

<p>You would open up vim, and then run the following</p>

<pre><code>:profile start profile.log
</code></pre>

<p>This sets up the file <code>profile.log</code> to be the log file. If it already exists, it will be overwritten. We now need to tell vim what to profile</p>

<pre><code>:profile func *
:profile file *
</code></pre>

<p>This says to profile all functions and all script files. Overkill, perhaps. Now, you should do things that make vim act slowly. They are being profiled in the background. Once you have concluded, end the profiling.</p>

<pre><code>:profile pause
</code></pre>

<p>And quit vim. Now, read the <code>profile.log</code> file and see what's slow. Note that this is for slow running inside of vim. If vim is slow to start up (a different problem), you should start vim with</p>

<pre><code>vim --startuptime log.txt
</code></pre>

<p>and read the times, see what's taking so long.</p>
","277"
"VimPlug unknown function plug#begin in NeoVim","829","","<p>Recently I decided to switch from Vundle to VimPlug, and I noticed that after installing it...</p>

<ul>
<li><p>putting the <code>plug.vim</code> in my autoload directory <code>~/.vim/autoload/</code></p></li>
<li><p>and making sure that my vim and neovim was symbol linked so I didn't have to create a whole new set of directories just for neovim with this...</p>

<pre><code> ln -s ~/.vim ~/.config/nvim
 ln -s ~/.vimrc ~/.config/nvim/init.vim
</code></pre></li>
</ul>

<p>

<p>I was still getting errors. It works perfectly in vim, but soon as I start up nvim I get these list of errors. </p>

<pre><code> Error detected while processing /home/username/.config/nvim/init.vim:
 line   26:
 E117: Unknown function: plug#begin
 line   28:
 E492: Not an editor command: Plug 'vim-airline/vim-airline'
 line   29:
 E492: Not an editor command: Plug 'vim-airline/vim-airline-themes'
 line   30:
 E492: Not an editor command: Plug 'scrooloose/nerdtree'
 line   31:
 E492: Not an editor command: Plug 'ctrlpvim/ctrlp.vim'
 line   32:
 E492: Not an editor command: Plug 'flazz/vim-colorschemes'
 line   34:
 E117: Unknown function: plug#end
</code></pre>

<p>This is the VimPlug section of my .vimrc</p>

<pre><code>""[VIMPLUG]
call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'flazz/vim-colorschemes'

call plug#end()
""[VIMPLUG_END]
</code></pre>

<p>What am I doing wrong ?</p>
","<p>For whatever reason it doesn't seem to see VimPlug with the first symbolic link I had in my post. This is the only plugin I couldn't get to work in neovim with it. </p>

<p>So instead of making a symbolic link of <code>~/.vim</code> to <code>~/.config/nvim</code>. I decided to make a symbolic link of <code>~/.vim</code> to <code>~/.config/</code> (<em>note that I'm truncating the</em> <code>nvim</code> <em>part</em>). </p>

<p>So in terminal that will be <code>ln -s ~/.vim ~/.config/</code></p>

<p>You'll see that it'll create a folder symbolic link called <code>.vim</code> rename it <code>nvim</code></p>

<p>And then run this command <code>ln -s ~/.vimrc ~/.config/nvim/init.vim</code></p>

<p>This will create a symbolic link of your <code>.vimrc</code> named <code>init.vim</code> inside that symbol link folder. </p>

<p>However, if you go to your vanilla <code>.vim</code> folder in your home directory you'll notice a <code>init.vim</code> there as well. <strong>DON'T</strong> delete this. Deleting this would result in the one you just created to get deleted, since putting a file in the folder your linking is basically putting it in that folder as well. This is the only way I got it to work without putting <code>plug.vim</code> in the nvim's system wide autoload folder.</p>
","10110"
"key mapping best practices","826","","<p>I found that I frequently needed a command in <code>INSERT</code> mode to open a line above the cursor (what <kbd>O</kbd> does in <code>NORMAL</code> mode)</p>

<p>I put this in my <code>.vimrc</code></p>

<pre><code>inoremap ao &lt;esc&gt;O
</code></pre>

<p>It works well. I chose the key sequence <code>ao</code> because I rarely encounter <kbd>a</kbd> and <kbd>o</kbd> together (also I remember it as ""<strong>a</strong>bove <strong>o</strong>pen"").</p>

<p>This set me thinking if there are some best practices when coming up with such mappings.<br>
I use Tim Pope's <a href=""https://github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt"" rel=""noreferrer"">vim-unimpaired</a> plugin and love his choice of keys (He says those are extracted out of his <code>vimrc</code>).</p>

<p>What are some best practices that I can follow to find good key sequences that my <code>.vimrc</code> will also be easy to use for someone else?</p>
","<p><code>:help map-which-keys</code> gives some information on the subject:</p>

<pre><code>If you are going to map something, you will need to choose which key(s) to use
for the {lhs}.  You will have to avoid keys that are used for Vim commands,
otherwise you would not be able to use those commands anymore.  Here are a few
suggestions:
- Function keys &lt;F2&gt;, &lt;F3&gt;, etc..  Also the shifted function keys &lt;S-F1&gt;,
  &lt;S-F2&gt;, etc.  Note that &lt;F1&gt; is already used for the help command.
- Meta-keys (with the ALT key pressed).  Depending on your keyboard accented
  characters may be used as well. :map-alt-keys
- Use the '_' or ',' character and then any other character.  The ""_"" and "",""
  commands do exist in Vim (see _ and ,), but you probably never use them.
- Use a key that is a synonym for another command.  For example: CTRL-P and
  CTRL-N.  Use an extra character to allow more mappings.
- The key defined by &lt;Leader&gt; and one or more other keys.  This is especially
  useful in scripts. mapleader

See the file ""index"" for keys that are not used and thus can be mapped without
losing any builtin function.  You can also use "":help {key}^D"" to find out if
a key is used for some command.  ({key} is the specific key you want to find
out about, ^D is CTRL-D).
</code></pre>

<hr>

<p>They suggest:</p>

<ul>
<li>function keys and shifted function keys <code>&lt;F1&gt;</code>, <code>&lt;S-F2&gt;</code>, ...</li>
<li>Meta-keys (ALT + <code>{key}</code>)</li>
<li><code>_</code> or <code>,</code> + <code>{keys}</code></li>
<li>using keys that are synonyms for a same command as a namespace<br>
e.g. <code>&lt;C-N&gt;</code>, <code>+</code> and <code>j</code> all move the cursor down one line ; you only need one and probably only use <code>j</code> so <code>&lt;C-N&gt;</code> and <code>+</code> could be good candidates to build a <code>{lhs}</code> such as <code>&lt;C-N&gt; + {key}</code></li>
<li><code>&lt;leader&gt;</code> + <code>{keys}</code></li>
<li>typing on the command line <code>:help {key}^D</code><br>
<code>{key}</code> is the <code>{lhs}</code> you would like to use for a mapping, and <code>^D</code> is <kbd>Ctrl</kbd>+<kbd>D</kbd>  </li>
</ul>

<p>In the <code>unimpaired</code> plugin, <code>[</code> and <code>]</code> have been chosen as namespaces.<br>
You could do the same, find some <code>{key}</code> (or sequence of keys like <code>co</code>) which is not used alone and use the latter as a namespace.  </p>

<p>Then, as <code>:h map-which-keys</code> suggests, to avoid overriding a default Vim command, you could type <code>:h {key}^D</code>, to find out which commands begin with <code>{key}</code>.<br>
For example, when typing <code>:h [^D</code>, you should see <code>[c</code> (a normal command to jump backwards to the previous start of a change in diff mode), but not <code>[a</code> neither <code>[b</code>.<br>
So <code>[a</code> and <code>[b</code> could be used as the <code>{lhs}</code> of a mapping but not <code>[c</code>.</p>
","6917"
"Visual select from cursor to next empty line?","825","","<p>How does one select from the current line to the next empty line?</p>

<p>I'm aware of <kbd>SHIFT</kbd>+<kbd>V</kbd> but then I have to either jump to the next empty line or press the down key a bunch of times.  I know how to do this well when there's a matching character like a <code>}</code> but I have no idea how to do this for an empty line.</p>
","<p>Vim understands the concept of a ""paragraph"". Vim's definition of a paragraph is a block of text surrounded by blank lines<sup>*</sup>. There are several motions and text objects to work with this.</p>

<ul>
<li><code>[count]}</code> – Move <code>[count]</code> paragraphs forward. You can use <code>&lt;S-v&gt;}</code> to select all lines from the current line to the next blank line. This will include the blank line, so you may want to use <code>&lt;S-v&gt;}k</code>.</li>
<li><code>[count]ip</code> – Select <code>[count]</code> paragraphs. It's like <code>iw</code> (inner word) except for, well, paragraphs. Using <code>vip</code> will select <em>all</em> of the paragraph though, rather than from the current line to the end of the paragraph.</li>
<li><code>[count]ap</code> – like <code>ip</code>, except that this will include the blank lines surrounding the paragraph.</li>
</ul>

<p>One caveat here is that Vim <em>doesn't</em> consider a line with only whitespace as a ""blank line"". So make sure to check this (e.g. with <code>:set list</code>) if it doesn't appear to work.</p>

<hr>

<p>Also remember you can always <em>search</em> for the pattern you want. You can get an empty line with <code>/^$</code>; or if you don't want to select the empty line itself you can use <code>\n\n</code> to put the cursor at the end of the line before the first blank line:</p>

<ul>
<li><code>&lt;S-v&gt;/^$&lt;CR&gt;</code></li>
<li><code>&lt;S-v&gt;/\n\n&lt;CR&gt;</code></li>
</ul>

<hr>

<p><sup>*</sup> There are some exceptions, see <a href=""http://vimhelp.appspot.com/motion.txt.html#paragraph"" rel=""noreferrer""><code>:help paragraph</code></a> for the full logic. But for most intents and purposes this definition works fine.</p>
","10830"
"How do I make vim look in a set of directories for a file, if it doesn't exist in the current directory?","819","","<p>When I want to edit my <code>zshrc</code>, I just type:</p>

<pre><code>vim .zshrc
</code></pre>

<p>Without specifying the full path (<code>~/.zshrc</code>), if I am in a different directory, this will instead start a new file. This is very annoying, since I only have one <code>.zshrc</code>, in <code>~</code>, and only one <code>vimrc</code>, in <code>~/.vim/</code>. So, how do I get vim to open <code>~/.zshrc</code> or <code>~/.vim/vimrc</code> when I do <code>vim .zshrc</code> or <code>vim vimrc</code> in some other directory?</p>

<hr>

<p>While creating some configuration for each individual file is one way, I was thinking of something along the lines of <code>CDPATH</code>. <code>CDPATH</code> is a variable in some shells that contains a list of paths where <code>cd</code> will look for a directory. For example, if I had <code>CDPATH=:/home/muru</code>, and I were in <em>any</em> directory that doesn't contain a directory named <code>Desktop</code>, I could do <code>cd Desktop</code> and reach <code>/home/muru/Desktop</code>. Simple, elegant, flexible. If <code>vim</code> had a <code>VIMPATH</code> where it would look for files to edit, that would be the best option.</p>
","<p>Vim's <a href=""http://vimhelp.appspot.com/options.txt.html#%27path%27""><code>'path'</code></a> option allows you to specify directories which commands like <code>gf</code> and <code>:find</code> will search for a file.</p>

<p>If you only want this functionality to trigger for a specific set of files, then you could use an autocmd to automatically ""redirect"" your <code>:edit</code> command to the file in one of the <code>'path'</code> directories.</p>

<pre><code>set path+=~/
function! FindInPath(name)
    let found = findfile(a:name)
    if !empty(found)
        exe 'silent keepalt file '. fnameescape(found)
        edit
    endif
endfunction
autocmd BufNewFile .vimrc,.zshrc nested call FindInPath(expand('&lt;afile&gt;'))
</code></pre>

<p>This uses the <code>BufNewFile</code> autocmd as a trigger for <code>file not found, so try to find it somewhere else</code>.  When that situation is detected, use <code>findfile()</code> to try to find the file in the <code>'path'</code> directories.  If it is found, change the name of the current buffer to that file and re-edit the buffer, otherwise just continue using the new buffer.</p>

<p>The <code>nested</code> qualifier is required here since autocmds don't normally nest.  In this case, you do want the typical autocmds to trigger when the <code>:edit</code> command opens your file.</p>

<p>Note that this will still create an extra buffer as compared to just editing the file manually.  By the time <code>BufNewFile</code> is run, the buffer for the originally specified file name is already created.  Using <code>:file</code> to change the name of a buffer creates a new, unloaded buffer with the original name.</p>

<p>If you always want to search in <code>'path'</code>, then the autocmd can simply be changed to use the <code>*</code> file pattern rather than specifying certain files.</p>

<hr>

<p>Here's an updated version which should match your requirements better.  It uses <code>:find</code> to directly open the file instead of setting the buffer name based on the result of <code>findfile()</code>.</p>

<pre><code>function! FindInPath(name)
    let path=&amp;path
    "" Add any extra directories to the normal search path
    set path+=~,~/.vim,/etc
    "" If :find finds a file, then wipeout the buffer that was created for the ""new"" file
    setlocal bufhidden=wipe
    exe 'silent! keepalt find '. fnameescape(a:name)
    "" Restore 'path' and 'bufhidden' to their normal values
    let &amp;path=path
    set bufhidden&lt;
endfunction
autocmd BufNewFile * nested call FindInPath(expand('&lt;afile&gt;'))
</code></pre>

<p>This solves the problem in the previous function where Vim would complain when trying to save the <code>:file</code>-named buffer.</p>
","2206"
"Pop up auto-complete suggestion automatically?","819","","<p>Auto-complete window can be pop-ed up when I use <code>&lt;C-N&gt;</code>, could I set it to pop up automatically when input keyword exceeds some length (3 characters)? YCM can do this but I don't want to install it. Does the default completion support this?</p>
","<p>Automatic completion suggestions aren't built into Vim; plugins (like YouCompleteMe) implement this via <code>:autocmd CursorMovedI</code> triggers.</p>

<p>Another plugin is <a href=""http://www.vim.org/scripts/script.php?script_id=1879"">AutoComplPop</a>; it purely implements the automatic suggestions. Unlike YCM, it doesn't offer additional completions or any other extensions, so that may be a good alternative to try if you don't want to install YCM.</p>
","3361"
"Warning when opening commit message with Neovim","817","","<p>I've been using Neovim for a few days with no problem, so I decided to switch my git config to use Neovim instead of vim. Here's what I put in my global <code>.gitconfig</code>:</p>

<pre><code>[core]
    editor = nvim
</code></pre>

<p>And here's the warning when I run <code>git commit</code> now:</p>

<pre><code>Warning: Cannot find word list ""en.utf-8.spl"" or ""en.ascii.spl""
Press ENTER or type command to continue
</code></pre>

<p>After pressing a key, it works fine, except that it doesn't do spell checking like vim used to do. Here's what I've got in my <code>.nvimrc</code> to turn on spell checking in git commit messages.</p>

<pre><code>autocmd Filetype gitcommit setlocal spell textwidth=72
</code></pre>
","<p>If I run <code>:set spell</code>, I get:</p>

<pre><code>spellfile#LoadFile(): There is no writable spell directory
Shall I create /Users/adamharris/.nvim/spell
(Y)es, [N]o: 
</code></pre>

<p>Select y</p>

<pre><code>Cannot find spell file for ""en"" in utf-8
Do you want me to try downloading it?
(Y)es, [N]o: 
</code></pre>

<p>Select y, and it will download the file.</p>

<pre><code>In which directory do you want to write the file:
1. /Users/adamharris/.nvim/spell
[C]ancel, (1):
</code></pre>

<p>Select 1</p>

<pre><code>Do you want me to try to get the .sug file?
This will improve making suggestions for spelling mistakes,
but it uses quite a bit of memory.
[N]o, (Y)es:
</code></pre>

<p>I selected y, and downloaded the file.</p>

<p>Then spellchecking works just fine!</p>
","2515"
"How to test if a string is a vim command?","815","","<p>Hopefully, the solution is efficient if it exists.</p>

<p>A solution that tests if it is a vim builtin command suffices.</p>

<hr>

<p><strong>EDIT</strong> To answer @Xiong Chiamiov comment, here is what I do in my <code>.vimrc</code>:<br>
basically <strong>get input, then run command, capture and put</strong>.</p>

<pre><code>nnoremap &lt;M-x&gt; :&lt;C-u&gt;call GetInputCommandThenCaptureAndPut()&lt;CR&gt;

func! GetInput()    "" https://stackoverflow.com/a/15274117/3625404
    call inputsave()
    let cmd = input('ex-command to execute: ')
    call inputrestore()
    return cmd
endfunc
func! GetInputCommandThenCaptureAndPut()
    "" cmdline keymap works, eg, &lt;C-k&gt; to get last input, &lt;C-f&gt; to open edit window, &lt;C-r&gt; insert register.
    let cmd = GetInput()
    if cmd =~ '^\s*!'   "" eg, '!ls', '!ll', redraw needed.
        exec 'r'.cmd
        redraw!
    elseif cmd =~ '^ [[.a-zA-z0-9].*'    "" one space before shell command, add '!', then run and read.
        exec 'r!' cmd
    elseif cmd =~ '^    [[.a-zA-z0-9].*'  "" leading '&lt;Tab&gt;' key, execute shell command, witout capture.
        exec '!' cmd
    else
        if strlen(cmd) == 1     "" customized shortcut
            if cmd == 's'
                let cmd = 'scr'
            elseif cmd == 'k' || cmd == 'm'   "" :k is alias of :mark
                let cmd = 'marks'
            endif
        elseif cmd =~ '^\s*''\(\w*\)''\?\s*$'   "" option start with single quote, closing one optional.
            let cmd = 'set '. substitute(cmd, '^\s*''\(\w*\)''\?\s*$', '\1', '').'?'
            "" let cmd = 'set '.cmd.'?'
        endif
        let command = matchstr(cmd, '\w\+')
        if exists(':'.command)
            call PutAfterCapture(cmd)
        else    "" not ex command, try run and read shell command.
            exec 'r!'.cmd
            redraw!
        endif
    endif
endfunc
</code></pre>

<p>The <code>PutAfterCapture()</code> is as below:</p>

<pre><code>func! Capture(excmd) abort  "" from tpope's scriptease.vim
try
    redir =&gt; out
    exe 'silent! '.a:excmd
finally
    redir END
endtry
return out
endfunc

func! PutAfterCapture(command)
    if a:command =~ '^\s*$'
        return
    endif
    let oldpos = getpos('.')
    silent! let @c = Capture(a:command)
    call setpos('.', oldpos)
    put c
    call setpos('.', oldpos)
endfunc!

command! -bar -nargs=+ Icapture call PutAfterCapture(&lt;q-args&gt;)
</code></pre>

<p><strong>The workflow is type <code>&lt;M-x&gt;</code>, then type the cmd to run and capture.</strong>  <code>&lt;C-f&gt;</code> is handy for longer input here, <code>&lt;C-r&gt;</code> works too.</p>

<p>Examples:  </p>

<ul>
<li><code>ls</code> -- list of open buffers  </li>
<li><code>&lt;Space&gt;ls</code> or <code>!ls</code>  -- list of files in current directory  </li>
<li><code>s</code> -- vim files being sourced  </li>
<li><code>m</code> -- marks  </li>
<li><code>&lt;Tab&gt;bc</code> -- use <code>bc</code> calculator interactively</li>
</ul>
","<p>I you only need to know if it is a built-in command, you can use</p>

<pre><code>exists(':yourstring')
</code></pre>

<p>See <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#exists()"" rel=""noreferrer""><code>:h exists()</code></a> for more details.</p>
","13873"
"How do I trigger an autocommand when user enters/leaves command mode","813","","<p>I'm using a <a href=""http://myusuf3.github.io/numbers.vim/"" rel=""nofollow"">really clever plugin</a> that changes the line number style (relative/normal) contextually. Basically when you enter insert mode you have normal line numbers and when you leave insert mode it switches to relative numbers. A missing feature is to have normal line numbers when your in command-line mode.</p>

<p>Looking at <a href=""https://github.com/myusuf3/numbers.vim/blob/master/plugin/numbers.vim#L104-L111"" rel=""nofollow"">how it is implemented</a> it uses Vim's events system to trigger the change. I've looked but Vim's documentation seems to only offer events on insert enter/leave. (Funny aside: <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#UserGettingBored"" rel=""nofollow"">UserGettingBored</a>).</p>

<p>At first I thought of adding <code>nnoremap : :call MyFunc()&lt;CR&gt;:</code> which works on enter but not on exit. Also relying on a map seems flaky.</p>

<p>How do I trigger a function when the user enters command-line mode (presses <kbd>:</kbd>)? And how do I trigger a function when the user leaves this mode (presses <kbd>enter</kbd>, <kbd>ctrl</kbd><kbd>c</kbd> or <kbd>esc</kbd>)?</p>
","<p>You can use mappings to override <code>:</code>, <code>/</code>, and <code>?</code> to do some action first:</p>

<pre><code>nnoremap : :set number&lt;CR&gt;:
nnoremap / :set number&lt;CR&gt;/
nnoremap ? :set number&lt;CR&gt;?
</code></pre>

<p>Because we use <em>non-recursive</em> mappings, the <code>:</code> at the end will call the original built-in <code>:</code>.</p>

<p>To hide the numbers again, you can use command-line mappings to override <code>&lt;CR&gt;</code>, <code>&lt;Esc&gt;</code>, and <code>&lt;C-c&gt;</code>:</p>

<pre><code>cnoremap &lt;silent&gt; &lt;CR&gt; &lt;CR&gt;:set nonumber&lt;CR&gt;
cnoremap &lt;silent&gt; &lt;Esc&gt; &lt;Esc&gt;:set nonumber&lt;CR&gt;
cnoremap &lt;silent&gt; &lt;C-c&gt; &lt;C-c&gt;:set nonumber&lt;CR&gt;
</code></pre>

<p>This same trick should also work with the commands from your plugin.</p>
","3515"
"(How) can I convert full-width characters to half-width ones?","811","","<p>I need to transform the full-width characters(<code>ＮＢＡ</code>) in the following sentence to half-width ones.  </p>

<blockquote>
  <p>ＮＢＡ中曾有“怒吼天尊”之称的已退役球员是谁? 拉希德·华莱士<br>
  Ｈ５Ｎ２疫苗可对抗Ｈ５禽流感病毒</p>
</blockquote>

<p>I know I can realize it in Python using <code>unicodedata.normalize</code> module(with a parameter ""NFKC""). But is there any method to do it directly in Vim? I have tried <code>char2nr</code> and <code>eval</code> and found that they don't work. </p>
","<p>There you go:</p>

<pre><code>:%s/[\uff01-\uff5e]/\=nr2char(char2nr(submatch(0))-65248)/g
</code></pre>

<p>This matches the range of full-width characters, and via <code>:help sub-replace-expr</code> and <code>char2nr()</code> converts this to a number, subtracts to get this into the ASCII range for <code>!</code> - <code>~</code>, and converts it back to characters.</p>

<h3>Addendum</h3>

<p>If you need to support other (non-contiguous) characters, you can define a Map and check that first. For example, for the arrow symbols mentioned in your comment:</p>

<pre><code>let g:fullToHalf = { ""\u2190"": ""\uFFE9"", ""\u2192"": ""\uFFEB"", ""\u2191"": ""\uFFEA"", ""\u2193"": ""\uFFEC"" }
:execute '%s/[\uff01-\uff5e' . join(keys(g:fullToHalf), ''). ']/\=get(g:fullToHalf, submatch(0), nr2char(char2nr(submatch(0))-65248))/g'
</code></pre>

<p>Note: As a one-liner, this gets really ugly. I would strongly recommend to put this into a function.</p>
","10548"
"How do I close Vim externally?","809","","<p>Let's say I have a X11 server that's hanging, keeping me from saving the work from the XTerm Vim session that X11 server controls. (Not GVim, just regular Vim-in-XTerm.)</p>

<p>Is there a way that I could (from a different terminal) tell the running Vim process to ""save all &amp; exit"" from the command line? By sending a signal, or through some other means?</p>

<p>I know about Vim swap files, and that I could just kill Vim and recover from the swap. I am asking if there is a ""cleaner"" way.</p>
","<p>Having recently run into this problem (via another way: Vim running on a remote server, and I'd forgotten screen), I decided to hunt for a way.</p>

<p>The first idea was to look up the file descriptors used by Vim and try writing to it. Vim's fds point to the psedoterminal opened by the terminal emulator, naturally enough:</p>

<pre class=""lang-none prettyprint-override""><code>$ ls -l /proc/$(pgrep -n vim)/fd/
total 0
lrwx------ 1 muru muru 64 Nov 17 01:25 0 -&gt; /dev/pts/14
lrwx------ 1 muru muru 64 Nov 17 01:25 1 -&gt; /dev/pts/14
lrwx------ 1 muru muru 64 Nov 17 01:25 2 -&gt; /dev/pts/14
lrwx------ 1 muru muru 64 Nov 17 01:25 3 -&gt; socket:[99564312]
</code></pre>

<p>However, my initial few attempts failed:</p>

<pre class=""lang-sh prettyprint-override""><code>echo '^[:wq^M' &gt; /proc/$(pgrep -n vim)/fd/0
echo ':wq^M' &gt; /proc/$(pgrep -n vim)/fd/0
echo ':wq^M' &gt; /proc/$(pgrep -n vim)/fd/0
echo '^C' &gt; /proc/$(pgrep -n vim)/fd/0
printf ""%s"" '^[:wqa!^M' &gt; /proc/$(pgrep -n vim)/fd/0
</code></pre>

<p><sup><sub>The <code>^[</code> and <code>^M</code> were obtained by <kbd>Ctrl</kbd><kbd>V</kbd><kbd>Esc</kbd> and <kbd>Ctrl</kbd><kbd>V</kbd><kbd>Enter</kbd>, respectively.</sub></sup></p>

<p>They all resulted in the characters showing up on the terminal (I was testing this out locally, before applying it to the remote session). Googling around, I found <a href=""https://stackoverflow.com/a/20386980/2072269"">this SO post</a>, using Python to write to the pseudoterminal device:</p>

<pre class=""lang-python prettyprint-override""><code>#!/usr/bin/python

import sys,os,fcntl,termios
if len(sys.argv) != 3:
   sys.stderr.write(""usage: ttyexec.py tty command\n"")
   sys.exit(1)
fd = os.open(""/dev/"" + sys.argv[1], os.O_RDWR)
cmd=sys.argv[2]
for i in range(len(cmd)):
   fcntl.ioctl(fd, termios.TIOCSTI, cmd[i])
fcntl.ioctl(fd, termios.TIOCSTI, '\n')
os.close(fd)
</code></pre>

<p>And trying it out on an interactive python shell worked:</p>

<pre class=""lang-none prettyprint-override""><code>$ sudo python3
Python 3.5.0 (default, Sep 20 2015, 11:28:25) 
[GCC 5.2.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import os, fcntl, termios
&gt;&gt;&gt; fd = os.open('/dev/pts/14', os.O_RDWR)
&gt;&gt;&gt; a = '\033:wqa!\n'
&gt;&gt;&gt; for i in a: fcntl.ioctl(fd, termios.TIOCSTI, i);
... 
b'\x1b'
b':'
b'w'
b'q'
b'a'
b'!'
b'\n'
&gt;&gt;&gt; 
</code></pre>

<p>Done!</p>
","5500"
"How to use substitution on register?","807","","<p>Let say I've register which has string stored in it, but I'd like to use <em>substitute</em> command to change it.</p>

<p>For example I've 5x5 html table:</p>

<pre><code>let @t='&lt;table&gt;'.repeat('&lt;tr&gt;'.repeat('&lt;td&gt;_&lt;/td&gt;',5).'&lt;/tr&gt;',5).'&lt;/table&gt;'
</code></pre>

<p>and I'd like to replace placeholder (<code>_</code>) with some other data ideally by modifying existing register (not assigning to another).</p>

<p>I've tried the following syntax:</p>

<pre><code>""ts/_/test/g
""@ts/_/test/g "" with modifiable set
</code></pre>

<p>which doesn't give any errors, but it doesn't work as expected (in similar way as prefixing with <code>%</code> works).</p>

<p>What's the proper way of doing that?</p>
","<p>Ex commands work on the buffer contents; for register (or variable) contents, you need to use a corresponding Vimscript function (if it exists).</p>

<p>For <code>:substitute</code>, the equivalent is <code>substitute()</code> (that was easy, right?) So:</p>

<pre><code>:let @t = substitute(@t, '_', 'test', 'g')
</code></pre>
","2707"
"Delete from cursor till first character x (spanning multiple lines)","806","","<p>I know that I can delete from the cursor till and including the first occurence of a character <i>x</i> with <code>dfx</code>. This only works on one line. How can I delete from the current cursor position till the first occurence of <i>x</i> when <i>x</i> is not in the same line?</p>

<p>E.g., if the cursor is after the first space in</p>

<blockquote>
  <p>yada yada yada<br>
  yada yada yada x
  yada yada yada x</p>
</blockquote>

<p>and I type <code>dfx</code> the result needs to be:</p>

<blockquote>
  <p>yada</p>
</blockquote>
","<p>Use <code>/</code> for forward search:</p>

<pre><code>d/x&lt;CR&gt;
</code></pre>

<p>and <code>?</code> for backward search:</p>

<pre><code>d?x&lt;CR&gt;
</code></pre>
","5240"
"How to append some line at the end of the file only if it's not there yet?","801","","<p>I'd like to edit a file in-place by appending a line, only if doesn't exist yet to make my script bullet-proof.</p>

<p>Normally I'd do something like:</p>

<pre><code>cat &gt;&gt; ~/.bashrc &lt;&lt;EOF
export PATH=~/.composer/vendor/bin:\$PATH
EOF
</code></pre>

<p>It is also possible to do it via ansible (<code>line</code>+<code>insertafter=EOF</code>+<code>regexp</code>), but it's another story.</p>

<p>In vi/ex I could do something like:</p>

<pre><code>ex +'$s@$@\rexport PATH=\~/.composer/vendor/bin:$PATH@' -cwq ~/.bashrc
</code></pre>

<p>but then how do I check if the line is already there (and thus do nothing) ideally without repeating the same line?</p>

<p>Or maybe there is some easier way to do it in Ex editor?</p>
","<p>If you want <em>bulletproof</em>, you probably want something a little more portable than the complicated options above.  I would stick to <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html"" rel=""nofollow"">POSIX features of <code>ex</code></a> and make it stupid-simple: Just remove the line if it's there (regardless of how many times it's there), add it to the end of the file, then save and exit:</p>

<pre><code>ex -sc 'g/^export PATH=\~\/\.composer\/vendor\/bin:\$PATH$/d
$a
export PATH=~/.composer/vendor/bin:$PATH
.
x' ~/.bashrc
</code></pre>

<p>I anchored the regex for added robustness, though I think it's almost impossible to <em>accidentally</em> match this regex.  (Anchored means using <code>^</code> and <code>$</code> so the regex will only match if it matches an <em>entire</em> line.)</p>

<p>Note that the <code>+cmd</code> syntax is not required by POSIX, nor is the common feature of allowing multiple <code>-c</code> arguments.</p>

<hr>

<p>There are a multitude of other <strong>simple</strong> ways to do this.  For instance, add the line to the end of the file, then run the last two lines of the file through the external UNIX filter <code>uniq</code>:</p>

<pre><code>ex -sc '$a
export PATH=~/.composer/vendor/bin:$PATH
.
$-,$!uniq
x' input
</code></pre>

<p>This is very very clean and simple, and is also fully POSIX-compliant.  It uses the <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html#tag_20_40_13_52"" rel=""nofollow"">Escape feature of <code>ex</code></a> for external text filtering, and the <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/uniq.html"" rel=""nofollow"">POSIX-specified shell utility <code>uniq</code></a></p>

<p>The bottom line is, <code>ex</code> is <em>designed</em> for in-place file editing and it is by far the most portable way to accomplish that in a non-interactive fashion.  It predates even the original <code>vi</code>, actually—the name <code>vi</code> is for ""visual editor"", and the non-visual editor it was built upon <em>was</em> <code>ex</code>.)</p>

<hr>

<p>For even greater simplicity (and to reduce it to a single line), use <code>printf</code> to send the commands to <code>ex</code>:</p>

<pre><code>printf %s\\n '$a' 'export PATH=~/.composer/vendor/bin:$PATH' . '$-,$!uniq' x | ex input
</code></pre>
","6248"
"Dump the output of internal vim command into buffer","800","","<p>How do I dump an internal vim command (not shell command) into a new buffer?</p>

<p>For example, I want to dump a listing of all plugins into <code>:enew</code> from <code>:scriptnames</code> so that I can search it.</p>
","<p>You can use <code>:redir</code> to redirect the output to a variable, register, or file. Example of redirecting to the unnamed register:</p>

<pre><code>:redir @""&gt;|silent scriptnames|redir END|enew|put
</code></pre>

<p>Alternatively Tim Pope's <a href=""https://github.com/tpope/vim-scriptease"" rel=""nofollow"">scriptease.vim</a> provides the <code>:Scriptnames</code> command which will load <code>:scriptnames</code> into the quickfix list and <code>:copen</code>.</p>

<p>If you find yourself redirecting many commands you may want to wrap up this up in a command:</p>

<pre><code>command! -nargs=+ -complete=command Redir let s:reg = @@ | redir @""&gt; | silent execute &lt;q-args&gt; | redir END | new | pu | 1,2d_ | let @@ = s:reg
</code></pre>

<p>Now you can use the <code>:Redir</code> command to redirect the output to a new buffer. e.g. <code>:Redir scriptnames</code> or <code>:Redir ls</code>.</p>

<p>For more help see:</p>

<pre><code>:h :redir
:h :silent
:h :scriptnames
:h :enew
:h :put
</code></pre>
","8379"
"How to switch between syntastic error window and editor window","800","","<p>I am new to vim and currently learning as well.
I just started using syntastic in vim to lint my code.</p>

<p>I have set following vars in my <code>.vimrc</code> file:</p>

<pre><code>let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
</code></pre>

<p>If any error comes error window gets open, and show the list of errors.
I just want to know is there any way to switch betweeb opened error window and current window. </p>

<p>Also is there any keystroke which I can use to move to next and prev error? (not by using <code>:lnext</code> and <code>:lprev</code>)</p>

<p><a href=""https://i.stack.imgur.com/YfWew.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YfWew.png"" alt=""enter image description here""></a></p>

<p>Thanks</p>
","<p>To switch between two windows see <a href=""http://vimdoc.sourceforge.net/htmldoc/windows.html#window-move-cursor"" rel=""noreferrer""><code>:h window-move-cursor</code></a>. Here you'll use <kbd>Ctrl-w</kbd><kbd>j</kbd> and <kbd>Ctrl-w</kbd><kbd>k</kbd>, since the windows are horizontally split.</p>

<p>Now to use <code>:lnext</code> and <code>:lprev</code> more easily you could use a mapping as suggested by @muru. To do so add something like that to your <code>.vimrc</code>:</p>

<pre><code>nnoremap &lt;c-n&gt; :lnext&lt;CR&gt;
</code></pre>

<p>This line will make <kbd>Ctrl-n</kbd> execute <code>:lnext</code> in normal mode. See <a href=""http://vimdoc.sourceforge.net/htmldoc/map.html#mapping"" rel=""noreferrer""><code>:h mapping</code></a>.</p>

<p>Of course change the mapped keys (here <code>&lt;c-n&gt;</code>) to whatever fits your needs.</p>
","8104"
"How to make auto-indent XML in vim?","799","","<p>I am thinking on a similar solution, which Eclipse also does: during the editing, the editor tries to always hold in a ""well-indented"" format of the edited textual data.</p>

<p>Ideally, it would happen very strong: the best were if anything breaking the well-formatting would be corrected on the spot.</p>

<p>Is it somehow possible?</p>
","<p>I commented out my entire .vimrc file, then added a few indentation related things. Using the process of elimination, I landed on the following line being solely responsible getting my XML indentation to work:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>However, this only worked when loaded from the .vimrc file. Manually typing it in had no effect for me.</p>

<p>According to <code>:h filetype-indent-on</code>:</p>

<blockquote>
  <p>You can enable loading the indent file for specific file types with:
         :filetype indent on</p>
  
  <p>If filetype detection was not switched on yet, it will be as well.
  This actually loads the file ""indent.vim"" in 'runtimepath'.
  The result is that when a file is edited its indent file is loaded (if there
  is one for the detected filetype). |indent-expression|</p>
</blockquote>

<p>If you have <code>filetype indent on</code> enabled in your .vimrc and don't have indentation, you're probably missing the indentation definition file.</p>
","687"
"Cut vim load time","797","","<p>I'm using <a href=""https://github.com/carlhuda/janus"" rel=""noreferrer"">https://github.com/carlhuda/janus</a> vim distribution and clearly not satisfied with load time.</p>

<p>What would be the best way to profile and speed-up vim load time?
Also would be interesting to compare load time with <a href=""http://vim.spf13.com/"" rel=""noreferrer"">http://vim.spf13.com/</a></p>
","<p>If you just want to see what's consuming start up time, then you can use the <code>--startuptime</code> option.</p>

<pre><code>vim --startuptime timing.out
</code></pre>

<p>The file will look like this:</p>

<pre><code>times in msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.000  000.000: --- VIM STARTING ---
000.000  000.000: Allocated generic buffers
000.000  000.000: locale set
000.000  000.000: GUI prepared
000.000  000.000: clipboard setup
000.000  000.000: window checked
000.000  000.000: inits 1
000.000  000.000: parsing arguments
000.000  000.000: expanding arguments
000.000  000.000: shell init
000.000  000.000: Termcap init
000.000  000.000: inits 2
000.000  000.000: init highlight
000.000  000.000  000.000: sourcing /usr/share/vim/vim74/debian.vim
000.000  000.000  000.000: sourcing $VIM/vimrc
000.000  000.000  000.000: sourcing /home/mccoyj1/.vim/autoload/pathogen.vim
008.004  004.002  004.002: sourcing /home/mccoyj1/.vim/bundle/janah/colors/janah.vim
040.022  032.018  032.018: sourcing /usr/share/vim/vim74/filetype.vim
...
</code></pre>
","191"
"Mouse wheel scrolling inserts characters","795","","<p>I'm using macvim inside tmux inside iTerm2. Basically I just want to be able to scroll the buffer using the mousewheel. I've set</p>

<pre><code>set -g moude-mouse on
</code></pre>

<p>in my <code>.tmux.conf</code>, and</p>

<pre><code>set mouse=a
set ttymouse=xterm2
</code></pre>

<p>in my <code>.vimrc</code>. Additionally I enabled 'xterm mouse reporting' in iTerm2.</p>

<p>Whenever I use the mouse wheel, vim will switch to insert mode and insert seemingly random characters. I'm guessing vim can't correctly interpret the mouse escape-codes.</p>

<p>The problem also appears outside of tmux and in the default Terminal.app which leads me to believe that it's a vim issue.</p>

<p>I've expiremented with all possible values of <code>ttymouse</code>, none had the desired effect.</p>
","<p>Ah, I found the culprit by bisecting my <code>.vimrc</code> file. I had mapped <kbd>Escape</kbd> in normal mode to clear search highlighting:</p>

<pre><code>"" Clear highlighting on escape in normal mode
nnoremap &lt;esc&gt; :noh&lt;return&gt;&lt;esc&gt;
</code></pre>

<p>However, that will confuse vim as it tries to parse the mouse's escape codes. So what I ended up doing is taking the solution from <a href=""https://stackoverflow.com/a/1037182/337591"">this answer</a>, and also mapping:</p>

<pre><code>"" needed so that vim still understands escape sequences
nnoremap &lt;esc&gt;^[ &lt;esc&gt;^[
</code></pre>

<p>Which will fix that issue.</p>
","4908"
"Delete until the right end of the current inner block","794","","<p>Let's say that I have a code like this (<em><code>|</code> represents the cursor position</em>):</p>

<pre><code>func1(x|, func2(), y); 
</code></pre>

<p>I would like to get:</p>

<pre><code>func1(x|);
</code></pre>

<p>Is there a way to <em>delete the code from the position of the cursor to the position preceding the right end of the current inner block</em>?</p>

<p>I know that I can go with <code>dt).</code> but I wonder if there is a way to mix it with what <code>di)</code> does.</p>
","<p>I would use</p>

<pre><code>d])
</code></pre>

<p>which means delete (<code>d</code>) to the next unmatched ')' (<code>])</code>).</p>

<p>See <a href=""http://vimhelp.appspot.com/motion.txt.html#%5D%29"" rel=""nofollow noreferrer""><code>:help ])</code></a>.</p>
","10437"
"How can I add additional syntax highlighting rules in my local vimrc?","794","","<p>I installed gvim on both Fedora and Win7. I found that both vim and gvim on Fedora didn't highlight the function name in c code while gvim on win7 did highlight it. </p>

<p>I found that on win7, <code>vim73/syntax/c.vim</code> has the additional lines at the end:</p>

<pre><code>syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;[^()]*)(""me=e-2 
syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;\s*(""me=e-1 
hi cFunction gui=NONE guifg=#B5A1FF
</code></pre>

<p>If I add these lines into the <code>c.vim</code> on Fedora, gvim can highlight the function name, too.</p>

<p>To maintain the portability, I want to just modify the <code>.vimrc</code> to highlight the function name. However after adding these lines into the <code>.vimrc</code>, it didn't work.</p>

<p>So, can anyone help me? I did a search and there are many solutions to highlight the function names in vim. But I am just curious about how to make these lines work in <code>.vimrc</code>. Thanks very much!</p>
","<blockquote>
  <p>However after adding these lines into the .vimrc, it didn't work.</p>
</blockquote>

<p>The reason for this is that Vim clears existing syntax items when setting the <a href=""http://vimhelp.appspot.com/options.txt.html#%27syntax%27"" rel=""nofollow noreferrer""><code>'syntax'</code></a> option. This is done because keeping the old syntax items would lead to some strange situations; if you have a buffer which has <code>syntax=foo</code> and use <code>set syntax=bar</code> then you'll end up with a buffer which has syntax highlighting for <em>both</em> <code>foo</code> and <code>bar</code>.</p>

<p>When Vim starts it loads your <code>vimrc</code> once (on startup), but it loads the filetype and syntax files every time the <code>filetype</code> or <code>syntax</code> options are set, which will reset the values you've set in your vimrc.</p>

<p>Even if it wouldn't reset it, it wouldn't be a good idea to just add it to your vimrc, since it would apply to <em>all</em> buffers, and not just buffers with <code>syntax=c</code>.</p>

<hr>

<p>The below text assumes Vim on a Unix-y system, but it will work for Neovim and Windows users as well:</p>

<ul>
<li><em>Neovim</em> users should replace <code>~/.vim/</code> with <code>~/.config/nvim/</code>.</li>
<li><em>Windows</em> users should replace <code>~/.vim/</code> with <code>%USERPROFILE%\vimfiles\</code>.</li>
</ul>

<h2>Overriding an entire file</h2>

<p>The easiest way to change something is to <em>just override it</em>. To do so create a file in <code>~/.vim/&lt;file&gt;.vim</code>.</p>

<p><code>&lt;file.vim&gt;</code> is the path relative to <code>$VIMRUNTIME</code> (including subdirectories). In your example, it should be <code>syntax/c.vim</code>. It will be loaded instead of the file in <code>$VIMRUNTIME</code>.</p>

<p>The upshot of this is that it's easier to make changes – amending exiting syntax files can be a bit tricky sometimes. The downside is that you won't get any future updates made to the system-wide file.</p>

<p>I often use this as a <em>starting point</em> to experiment with syntax files, and then later extract my local changes to a local addition using one of the methods described below.</p>

<h2>Local additions</h2>

<p>There are two ways to add local additions to syntax files, they are functionally identical, and you can use the method you prefer.</p>

<h3><code>Syntax</code> autocmd</h3>

<p>Use the <code>Syntax</code> autocmd:</p>

<pre><code>    augroup ft_c
      autocmd!
      autocmd Syntax c syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;[^()]*)(""me=e-2 
      autocmd Syntax c syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;\s*(""me=e-1 
      autocmd Syntax c hi cFunction gui=NONE guifg=#B5A1FF
    augroup end
</code></pre>

<p>Note that chaining several commands with <code>|</code> is problematic here, since they tend to get interpreted as part of the <code>:syn</code> command, which is why I've repeated the <code>autocmd Syntax c</code> several times. An alternative would be to use a function:</p>

<pre><code>fun s:c()
    syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;[^()]*)(""me=e-2 
    syn match cFunction ""\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;\s*(""me=e-1 
    hi cFunction gui=NONE guifg=#B5A1FF
endfun

augroup ft_c
  autocmd!
  autocmd Syntax c call s:c()
augroup end
</code></pre>

<p>The advantage is that all changes can be contained to a single file. The disadvantage is that it's a bit ugly, especially if you have a lot of changes.</p>

<h3>after directory</h3>

<p>Use the after-directory: <code>~/.vim/after/&lt;file&gt;.vim</code>.</p>

<p>This will be loaded after <code>&lt;file&gt;.vim</code> has, where <code>&lt;file.vim&gt;</code> is the path relative to <code>$VIMRUNTIME</code> (including subdirectories). In your example, it should be <code>syntax/c.vim</code>.</p>

<p>Also see <a href=""http://vimhelp.appspot.com/options.txt.html#after%2ddirectory"" rel=""nofollow noreferrer""><code>:help after-directory</code></a>.</p>

<p>The advantage is that it's a bit more readable than the autocmd, especially if you have many changes. The disadvantage is that you'll need to copy over an additional file if you want to mirror your Vim setup to different machines (this is an important reason many people keep their Vim files in a GitHub repo, so it can be easily mirrored across machines).</p>
","10815"
"How to set the size of the Neovim-qt GUI?","790","","<p>I am using <a href=""https://github.com/equalsraf/neovim-qt"" rel=""nofollow"">neovim-qt</a> but cannot figure out how to set the size of the window.  I tried:</p>

<pre><code>nvim-qt -h
nvim-qt --help
nvim-qt --width=80
nvim-qt --geom 80x120
</code></pre>

<p>But nothing gave me any indication as to how to do it. The <a href=""https://github.com/equalsraf/neovim-qt/wiki"" rel=""nofollow"">wiki</a> is equally unhelpful.</p>

<hr>

<p>See <a href=""https://github.com/equalsraf/neovim-qt/issues/108"" rel=""nofollow"">issue 108: How should window resizing behave?</a>.</p>
","<p>Oh look, <code>--geometry</code> is a <a href=""http://doc.qt.io/qt-5/qguiapplication.html"" rel=""nofollow"">QT GUI application's main settings</a> thus</p>

<pre><code>nvim-qt --geometry 500x320
</code></pre>

<p>will create a windows just big enough to have 24 lines of 80 characters.</p>
","6920"
"How do I open a new buffer without opening it in a split?","789","","<p>I know I can use <code>:new</code> to open a new buffer in a split window (defined by <code>set splitbelow</code> and <code>set splitright</code>).</p>

<p>But how can I just open a new, empty buffer without opening it in a split?</p>
","<p>You can use <code>:enew</code>. See <a href=""http://vimdoc.sourceforge.net/htmldoc/editing.html#:enew""><code>:h :enew</code></a>:</p>

<blockquote>
  <p>Edit a new, unnamed buffer.  This fails when changes
              have been made to the current buffer, unless 'hidden'
              is set or 'autowriteall' is set and the file can be
              written.</p>
</blockquote>

<p>And you can use <code>:enew!</code> to discard unsaved changes in the current buffer.</p>
","8216"
"Error detected while processing BufReadPost Auto commands for ""*.html"": E20: Mark not set","784","","<p>I have what I thought was a pretty simple setup in my neovim init.vim file.  Basically all I wanted it to do was configure the tab settings when opening an HTML file.  My configuration is:</p>

<pre><code>au BufNewFile,BufRead *.html, *.css
    \ set tabstop=2
    \ softtabstop=2
    \ shiftwidth=2
</code></pre>

<p>When I open an HTML file I get the following error message:</p>

<pre><code>Error detected while processing BufReadPost Auto commands for ""*.html"":
E20: Mark not set
</code></pre>

<p>I don't understand why this is throwing an error.  I have a similar line in my config file for <code>*.py</code> yet I receive no errors when opening Python files.</p>
","<p>You need to use <code>|</code> to run multiple commands:</p>

<pre><code>set tabstop=2 | softtabstop=2
</code></pre>

<p>It doesn't matter if you're using multiple lines, you still need to use the <code>|</code>:</p>

<pre><code>au BufNewFile,BufRead *.html, *.css
    \  set tabstop=2
    \| set softtabstop=2
    \| set shiftwidth=2
</code></pre>

<p>You can set multiple values with <code>set</code>, so the same can be expressed as:</p>

<pre><code>au BufNewFile,BufRead *.html, *.css
    \ set tabstop=2 softtabstop=2 shiftwidth=2
</code></pre>

<p>You probably want to use <code>setlocal</code>, rather than <code>set</code>. <code>set</code> will affect <em>all</em> buffers, so your autocommand will also change the settings for a <code>.js</code> buffer for example. <code>setlocal</code> will only affect the current buffer.</p>

<pre><code>au BufNewFile,BufRead *.html, *.css
    \ setlocal tabstop=2 softtabstop=2 shiftwidth=2
</code></pre>

<p>Using the <code>Filetype</code> autocommand is probably better too. There may be other cases where the <code>html</code> or <code>css</code> syntax is loaded (for example my setting it manually):</p>

<pre><code>au FileType html,css
    \ setlocal tabstop=2 softtabstop=2 shiftwidth=2
</code></pre>

<p>Personally, I always want these three settings to have the same value, if you use <code>shiftwidth=0</code> it will use the value of the <code>tabstop</code> setting, and <code>softtabstop=-1</code> will make that use the <code>shiftwidth</code> setting, so then you can use:</p>

<pre><code>set shiftwidth=0    "" Use tabstop
set softtabstop=-1  "" Use shiftwidth

au FileType html,css setlocal tabstop=2
</code></pre>
","11686"
"How to cache file editing history in Vim, that it would not disappear after switching the file?","782","","<p>Each time when I open another file in Vim all editing history disappears. </p>

<p>Is it possible to configure Vim that it would automatically save and restore file editing history when hopping through files?</p>
","<p>What I do is add the following to my <code>.vimrc</code>:</p>

<pre><code>set undofile
set undodir=~/.vim/undo/
</code></pre>

<p>That way all your undo/change tree information is saved across vim sessions, and next time you open your file you can still undo/redo old edits.</p>
","290"
"What does <Shift-v><Shift-j> do in Vim","781","","<p>I accidentally discovered that the key combination  will concatenate the current line and the next line. However, I do not recall it being mentioned in the <code>quickref</code>. After a quick Google, I did not find anything. Do any have a clue about where in the
documents can I find more about this key combination?</p>

<h2>BTW, I have confirmed that this is not mapped in the <code>:map</code>.</h2>

<p><strong>Update</strong>:</p>

<p>With the help from a comment, (Curiously, I saw it in a message. But after I opened the website, it disappeared.) I found that I am actually using the <code>&lt;shift-j&gt;</code>, i.e. <code>&lt;J&gt;</code> key to join lines. Thanks to this <a href=""https://stackoverflow.com/questions/1912905/how-do-i-join-two-lines-in-vi"">post</a>.</p>

<p><strong>Update 2</strong>: </p>

<p><code>J</code> in visual mode provides extra capabilities. See <code>:help v_J</code>. (Thanks to @Antony's comment.)</p>
","<p>I am guessing you were holding the <kbd>Shift</kbd> key even while pressing <code>j</code>. 
Because <code>V + j</code> alone would not have concatenated the lines. </p>

<p><code>V</code> is for selecting the entire line.</p>

<p><code>j</code> moves the selection down. </p>

<p>So, this is not the combination that did that for you.</p>

<p><code>V + J</code> on the other hand does exactly that. (holding <code>shift</code> for v and j)</p>

<p><code>J</code> here joins the current line to next line (J for Join), which is a default setting in Vim. </p>

<p>You will get the same functionality without having to press <code>V</code>. Press <code>J</code> in normal mode and it will Join the next line with the current line. </p>

<p>For more info, try <code>help :join</code> in Vim.</p>
","8795"
"How can I easily list the content of the registers before pasting?","779","","<p>I use the registers a lot for copy/pasting, but I always forgot in which register my content is.</p>

<p>Is there a way to display the registers before pasting?</p>

<p>Ideally it would leave the register on screen when selecting the one we want. </p>
","<p>I made up this mapping to display the register list and select the one to be pasted:</p>

<pre><code>nnoremap ""p :reg &lt;bar&gt; exec 'normal! ""'.input('&gt;').'p'&lt;CR&gt;
</code></pre>

<p>This display the register list with <code>:reg</code> and execute the normal command</p>

<pre><code>""Xp 
</code></pre>

<p>Where <code>X</code> is the result of <code>input()</code>.</p>
","8468"
"ignoring spaces in search like ignoring cases","772","","<p>I frequently search in my files using <code>/</code>, and <code>\c</code> is really helpful in these situations.  Is there any similar way to ignore white space and line breaks?  It would really be nice to be able to add something, like <code>\&lt;something&gt;</code>, to the search</p>

<pre><code>/the words I am looking for
</code></pre>

<p>so that it would match this, even if there where multiple white spaces and line breaks in-between the words.  It is a bit tedious to have to write</p>

<pre><code>/the\_\s*words\_\s*I\_\s*am\_\s*looking\_\s*for
</code></pre>

<p>every time I want to search.  In this example I somehow indicated that it was the spaces <code></code> that represented the places where the extra white space or line breaks could occur, however, it would not bother me if it also matched something like</p>

<pre><code>t h e   wo r d sI a   m l o o k i ngfor
</code></pre>

<p>as there will usually not be any ""silly"" matches of this sort (or at least few) in the searches I make.</p>

<p>I am not in very high hopes that this is possible, and, in case there is nothing like this, is there other ways to obtain something similar, with a function maybe.  However, it is only relevant, it if makes it easier than typing</p>

<pre><code>/the\_\s*words\_\s*I\_\s*am\_\s*looking\_\s*for
</code></pre>
","<p>You can use a mapping and replace all spaces by e.g.  <code>\_s*</code> which would match linebreaks as well. Something like this should work:</p>

<pre><code>:func! ReplaceSearch()
if getcmdtype() =~# '[?/]'
    return substitute(getcmdline(), ' \+', '\\_s*', 'g')
else
    return getcmdline()
endif
:endfunc
:cmap &lt;F7&gt; &lt;C-\&gt;eReplaceSearch()&lt;CR&gt;
</code></pre>

<p>This maps <kbd>F7</kbd> in command line mode, so hit <kbd>F7</kbd> when entering a search pattern to have it transformed.</p>

<p>Theoretically, you could use the enter key for mapping, but if your function makes an error you will never get out of the command line again. Therefor I usually don't advise to map that key.</p>
","8819"
"How does vim determine the size of a single ""edit"" when using ""u"" and ""CTL-R""?","771","","<p>When using <code>u</code> or <code>CTL-R</code> to undo or re-do an edit in vim, I seem to alter chunks of text, not just the most recent keystroke.  </p>

<p>What determines the size of the chunk that is considered to be a single edit?</p>
","<p>You are looking for the definition of <code>undo-blocks</code>.</p>

<p>From <a href=""http://vimhelp.appspot.com/undo.txt.html#undo-blocks""><code>:h undo-blocks</code></a>:</p>

<blockquote>
  <p>One undo command normally undoes a typed command, no matter how many changes
  that command makes.  This sequence of undo-able changes forms an undo block.
  Thus if the typed key(s) call a function, all the commands in the function are
  undone together.</p>
</blockquote>

<p>The same block is used for <code>redo</code>. From <a href=""http://vimhelp.appspot.com/undo.txt.html#redo""><code>:h redo</code></a>:</p>

<blockquote>
  <p>The last changes are remembered.  You can use the undo and redo commands above
  to revert the text to how it was before each change.  You can also apply the
  changes again, getting back the text before the undo.</p>
</blockquote>
","6351"
"How to change the value of timeout for one key command?","771","","<h2>What I want</h2>

<p>To temporarily change the timeout value for certain key commands</p>

<h2>Where I've looked</h2>

<p>From <code>:help 'timeout'</code> I have : </p>

<pre><code>The timeout only happens when the 'timeout' and 'ttimeout' options
tell so.  A useful setting would be &gt;
    :set timeout timeoutlen=3000 ttimeoutlen=100
(time out on mapping after three seconds, time out on key codes after
a tenth of a second).
</code></pre>

<p>I'm not sure how I would implement this in a key command though, or how to check the current setting of timeout. </p>

<p>For example, I wanted to try and set <code>hh</code> to go to the start of a line, but I wanted the timeout for that particular key command to be pretty quick, say 100 milliseconds. </p>

<h2>What I've tried</h2>

<pre><code>:set timeout timeoutlen=100 ttimeoutlen=100
nmap hh &lt;S-^&gt;
:set timeoutlen=1000 ttimeoutlen=1000
</code></pre>
","<p>The <code>'timeoutlen'</code> option is a global one, and it applies at mapping <em>invocation</em>, not during <em>definition</em>.</p>

<p>I can understand your motivation (using a special <code>hh</code> mapping while still being able to quickly move via <code>h</code>, <code>h</code>), but I would nonetheless advise against such tricks. Better choose another mapping that doesn't overlap with a built-in command.</p>

<p>If you really must, have a look at the <a href=""http://www.vim.org/scripts/script.php?script_id=2425"" rel=""nofollow"">arpeggio plugin</a>. It performs some tricks to map simultaneously pressed keys.</p>
","2805"
"how to close tab and remove this file from buffers","771","","<p>I often use <code>:tab sball</code> to open all buffers as tabs, but sometimes after doing so I would like to close the tab and remove file from buffers at the same time. How can I achieve that?</p>

<p>I know already that if I open a new tab with<br>
<code>:tabe</code> and don't save it- it close it with buffer using: <code>q!</code>.</p>

<p>Is there something similar to close tab and buffer at the same time?</p>

<p>I'm using neovim (NVIM 0.1.3-dev).</p>
","<p><code>:bd</code> will do that.</p>

<p>From the <a href=""http://vimdoc.sourceforge.net/htmldoc/windows.html#:bdelete"">documentation</a>:</p>

<pre><code>:[N]bd[elete][!]            *:bd* *:bdel* *:bdelete* *E516*
:bd[elete][!] [N]
        Unload buffer [N] (default: current buffer) and delete it from
        the buffer list.  If the buffer was changed, this fails,
        unless when [!] is specified, in which case changes are lost.
        The file remains unaffected.  Any windows for this buffer are
        closed.  If buffer [N] is the current buffer, another buffer
        will be displayed instead.  This is the most recent entry in
        the jump list that points into a loaded buffer.
        Actually, the buffer isn't completely deleted, it is removed
        from the buffer list |unlisted-buffer| and option values,
        variables and mappings/abbreviations for the buffer are
        cleared.
</code></pre>
","6826"
"Can I write Japanese (SKK) text in Vim?","770","","<p>I need to be break it to you guys, I use <code>emacs</code>.  But just for one little thing.</p>

<p>Recently I've been working with a good deal of Japanese people (the company is Japanese) and I got some idea of the language, moreover sometimes I need to write something in Japanese.  I do not have a Japanese keyboard and I need to convert some form of ""romaji"" (Japanese written in latin letters).  At first I used google translated but then I learned about <code>emacs</code>'s japanese mode.  Here is a screenshot of it:</p>

<p><a href=""https://i.stack.imgur.com/cGmap.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cGmap.gif"" alt=""enter image description here""></a></p>

<p>(forgive my Japanese please)</p>

<p><code>emacs</code> does this with the help of the <a href=""http://openlab.ring.gr.jp/skk/dic.html"" rel=""nofollow noreferrer"">skk dictionary</a> with some customisations for the actual typing (<code>lisp/international/ja-dic-cvn.el</code>, <code>lisp/international/ja-dic-utl.el</code> and <code>lisp/international/kkc.el</code> in <code>emacs</code> code).  Everything happens in UTF-8, the above screenshot is <code>emacs</code> running inside a UTF-8 terminal.</p>

<hr>

<p>Is there a viable way to perform this in Vim?  I'm hoping someone wrote an interface to SKK already, since my Japanese is definitely not good enough to read its documentation.</p>

<p>Or maybe, is there a different method to write Japanese text in Vim?</p>
","<p>OK, this took several days of struggle against the <a href=""https://github.com/tyru/skk.vim"" rel=""nofollow noreferrer""><code>skk.vim</code> plugin</a> mentioned by @SatoKatsura.  All the documentation is in Japanese therefore I still do not know of most of its features, and, certainly, there are better ways to accomplish SKK conversion (""Henkan"" in Japanese) in Vim than the one presented here.  Yet, it works well enough to be comparable to <code>emacs</code>' SKK mode.</p>

<p>First of all you need to donwload the SKK dictionary.  Any of them would be enough but I suggests the <a href=""http://openlab.ring.gr.jp/skk/dic/SKK-JISYO.L.gz"" rel=""nofollow noreferrer"">large dictionary</a> for the sake of completeness.  The dictionary comes in the <code>EUC-JP</code> encoding, therefore we need to convert it:</p>

<pre><code>gunzip SKK-JISYO.L.gz
iconv -f euc-jp -t utf-8 SKK-JISYO.L &gt; skk-jisyo-utf-8.l
</code></pre>

<p>If your Vim has the <code>+iconv</code> feature the <code>iconv</code> utility should be available on your machine.</p>

<p>The SKK dictionary is in the correct format to be used as a thesaurus, therefore we will set that in Vim and use <code>&lt;c-x&gt;&lt;c-t&gt;</code> to perform thesaurus completion.  Every line in the SKK dictionary looks as follows:</p>

<pre><code>&lt;kana entry&gt; / &lt;kanji entry&gt; / &lt;kanji entry&gt; / ...
わきでy / 湧き出 / 涌き出 /
</code></pre>

<p>Now, we only need to write the <code>&lt;kana entry&gt;</code> part and Vim will be capable of completing the rest for us.</p>

<p><code>skk.vim</code> can write in Kana in insert-mode.  It can write in both Hiragana and Katakana but the SKK dictionary has entries in Hiragana only.  Therefore we add a Toogle function wrapper around <code>skk.vim</code> to use either Hiragana or Katakana when in insert-mode.  When we want SKK completion we must be in Hiragana mode (this is analogous to <code>emacs</code>'s SKK mode).</p>

<p>Here is what I wrote in my <code>.vimrc</code> to wrap <code>skk.vim</code> and use the SKK dictionary as a thesaurus:</p>

<pre><code>let g:skk_initial_mode = 'hira'
let g:skk_script = '~/vim/skk/skk.vim'

set completeopt=menuone,preview
set thesaurus=~/vim/skk/skk-jisyo-utf-8.l

function! ToogleMode()
  if 'hira' ==# g:skk_initial_mode
    let g:skk_initial_mode = 'kata'
  else
    let g:skk_initial_mode = 'hira'
  endif
  execute ""source "" . g:skk_script
endfunction
</code></pre>

<p>To enter Kana mode you press <code>&lt;c-j&gt;</code> to complete a Kanji you need to press <code>&lt;c-j&gt;</code> to exit Kana mode and then <code>&lt;c-x&gt;&lt;c-t&gt;</code> to bring up thesaurus completion.</p>

<p>And here is how it looks (the text is exactly the same as in the question):</p>

<p><a href=""https://i.stack.imgur.com/ymjlZ.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ymjlZ.gif"" alt=""enter image description here""></a></p>

<p>Disadvantages and quirks:</p>

<ul>
<li><p>Since we are using Vim's thesaurus we need to add spaces between words.  This is not needed in <code>emacs</code>'s SKK becuase it keeps a selection trailing behind (see the screenshot in the question).</p></li>
<li><p>This code is terribly hacky, I just cannot understand about 70% of <code>skk.vim</code> because I'm unable to read the documentation.  There certainly are better ways to perform this.</p></li>
<li><p>You need to exit the Kana mode to perform the thesaurus completion, in Kana mode <code>&lt;c-x&gt;&lt;c-t&gt;</code> does not work as expected.</p></li>
</ul>
","8792"
"Insert a text selected via visual block","769","","<p>I'm facing a behavior that I find unatural when trying to paste a block of text selected with visual block mode (<code>&lt;C-v&gt;</code>): I can't insert it between two lines without messing with the already existing line.</p>

<p>Here's an example:</p>

<p>If I have this file</p>

<pre><code>abc
def
hij
klm

This is a text
on several lines
and this is another line
</code></pre>

<p>Let's say I want to put the first letters of each of the 4 first lines between the 2 others lines of text.</p>

<ul>
<li>First I'll select the 4 letters: <code>&lt;C-v&gt; 3j y</code></li>
<li>Then I put my cursor on the <code>o</code> of the last line</li>
<li>Finally I put my letters before my cursor with <code>P</code></li>
</ul>

<p>The result I get is:</p>

<pre><code>This is a text
aon several lines
dand this is another line
g
j
</code></pre>

<p>Where as what I expected was</p>

<pre><code>this is a text 
a
d
g
j
on several lines
and this is another line
</code></pre>

<p>So it means that each time I want to past a block this way I have to insert the corresponding number of empty lines before I past which is pretty unatural in my opinion.</p>

<p>I found a vim tip suggesting to use <code>1vp</code> to select a corresponding number of lines before pasting but that allows a replacement not an insertion of the block.</p>

<p><strong>So my question is:</strong> What is the good way to insert a visually selecting block between two existing lines?</p>

<p><strong>Also</strong> I once saw a plugin (which I can't remember the name) which ""improved"" visual block mode, but I'd like not to add a plugin just to enable this behavior.</p>
","<p>That plugin you're referring to might be my <a href=""http://www.vim.org/scripts/script.php?script_id=3355"">UnconditionalPaste plugin</a>, which provides (among many related other commands) the exact <code>glp</code> (force linewise paste) command you're looking for here.</p>

<p>As its author, I surely think the plugin provides very helpful functionality that warrants installing it, but you can achieve the same via a simple built-in command. After yanking, execute:</p>

<pre><code>:call setreg('', '', 'ac')
</code></pre>

<p>Then paste with <code>P</code>. This changes the <em>type</em> of the default register from blockwise to characterwise. (As there's no <code>setregtype()</code> function, it does this by appending (<code>a</code>) nothing (<code>''</code>) to the register.)</p>

<p>The <code>setreg()</code> approach also works for other such conversions (e.g. characterwise to linewise with <code>'al'</code> parameter.)</p>

<p>For your particular example, there's an even shorter (but less general) way:</p>

<pre><code>:put!
</code></pre>

<p>will always paste in new lines.</p>
","3321"
"Applying settings to a directory tree only","768","","<p>At my work we use a standard <code>ts</code> of 2; my personal preference is 4, which is what I use for my hobby projects, and this other project we inherited has the convention of <code>ts=8</code>.</p>

<p>There are also some other settings I want to set on a project basis (for example folding). Basing these settings on the filetype or auto-detecting them based on what the file uses are <em>not</em> good options, since I want to respect each project's conventions.</p>

<p>Can I make Vim use a settings file that applies to a project (everything in a directory tree) without adding a modeline to all the files?</p>
","<p>There are a few lightweight ways to do this.</p>

<ol>
<li><p><strong>Check for a file of given name and source it</strong></p>

<pre><code>if filereadable("".vimscript_file"")
    so .vimscript_file
endif
</code></pre>

<p>The file is hidden in the example but that's optional.</p></li>
<li><p><strong>Local <code>.vimrc</code> files</strong> (not the same as the plugin)</p>

<pre><code>set exrc
</code></pre>

<p>This is similar to 1. but the file will be called "".vimrc"".</p>

<p>A common suggestion to accompany this is to use</p>

<pre><code>set secure
</code></pre>

<p>which prevents a <code>.vimrc</code> file from doing potentially dangerous things like running
shell commands. The idea is that you wouldn't want to have vim read a <code>.vimrc</code> file written by someone else that does something nasty.</p></li>
<li><p><strong>Autocommands that check the current path</strong></p>

<pre><code>au BufNewFile,BufRead *path-possibly-using-globbing setlocal setting=value
</code></pre>

<p>This is the option I use. I don't change much between different projects so YMMV but if you just want to do one or two things based on path and keep it in your <code>.vimrc</code> this is nice and simple.</p></li>
</ol>
","288"
"Showing colors in vim's quickfix window from Dispatch tasks","768","","<p>I'm currently using vim-dispatch to run tests on my code which outputs the test results to the quickfix panel via tmux. However, all colors seem to be disabled in the output.</p>

<p>There's <a href=""https://github.com/tpope/vim-dispatch/issues/51"" rel=""nofollow"">this</a> two year old issue where tpope talks about it a bit, but that's all i've managed to find.</p>

<p>Is there any way to colorize the quickfix output to improve legibility?</p>
","<p>If you want your tests to embed colour codes (presumably ANSI) in their output and then have the colours show in the quickfix window, you're out of luck.</p>

<p>However the quickfix buffer is just a buffer, you can add highlighting patterns to it.  For example to highlight <code>Ok:</code> and <code>Err:</code> you could create a file <code>~/.vim/after/syntax/qf.vim</code>, with contents something like this:</p>



<pre><code>highlight TestOk    ctermbg=green
highlight TestError ctermbg=red

syn match TestOk    ""\&lt;Ok:""
syn match TestError ""\&lt;Err:""
</code></pre>

<p>Just make sure to write the regexps in the <code>syn</code> clauses so that they don't match the filename or the error column.</p>
","3256"
"How to automatically set wrapping for quickfix window?","765","","<p>I'm using Dispatch.vim, and often when there's a test error, some lines in the quickfix list are really long. I don't use soft wrapping for my code, so quickfix also isn't wrapped. Is it possible to automatically <code>setlocal wrap</code> only for the quickfix window?</p>
","<p>Autocommands to the rescue!</p>

<p>Put these lines in your <code>vimrc</code>:</p>

<pre><code>augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
augroup END
</code></pre>

<p>There's also this slightly cleaner method:</p>

<ol>
<li>create <code>~/.vim/after/ftplugin/qf.vim</code>,</li>
<li><p>and put this line in it:</p>

<pre><code>setlocal wrap
</code></pre></li>
</ol>

<hr>

<p>The first method adds yet another autocommand to the possibly large pile of autocommands already in your config.</p>

<p>The second method takes advantage of the fact that Vim already runs its own set of autocommands to determine filetype and source the appropriate ftplugins.</p>
","2844"
"What is a more efficient way to use buffers?","765","","<p>Lately I've been drastically reducing the number of plugins I'm using so I'm
looking for answers using only built-in Vim features.</p>

<p>I've been noticing a flaw in my workflow when I'm editing a lot of buffers: I am
on a buffer and I want to switch to another one of which I don't remember the
name and which isn't the alternative buffer. So using <code>:b#</code> is not possible and
using the completion with the command <code>:b</code> isn't convenient neither.</p>

<p>To do that I was doing the following:</p>

<ul>
<li>First use <code>:buffers</code> to get the list of open buffers</li>
<li>Remember the number of the buffer I want to use</li>
<li>Press <kbd>Enter</kbd> to close the list of buffers</li>
<li>Use <code>:bX</code> with <code>X</code> the number of the buffer to use.</li>
</ul>

<p>This workflow seemed pretty heavy to me so I added the following lines to my
<code>.vimrc</code>:</p>

<pre><code>"" Improve the navigation in the buffers 
nnoremap &lt;Leader&gt;&lt;S-b&gt; :B&lt;CR&gt; 
command! B call Buffers() 

function! Buffers() 
    execute ""buffers"" 
    let buffer=input(""Enter a buffer:"") 
    execute ""b"" . buffer 
endfunction 
</code></pre>

<p>This give me a command <code>:B</code> (and a mapping) which calls the function <code>:buffers</code> wait for an input
and finally calls <code>:b</code> followed by the input.</p>

<p>It works well but I'm surprised that I had to develop such a function: usually
Vim has a pretty efficient default workflow so I'm wondering if there is a
better way to switch to a buffer of which I don't know anything excepted that it
as already been opened in my editing session.</p>
","<blockquote>
  <p>I've been noticing a flaw in my workflow when I'm editing a lot of buffers: I am on a buffer and I want to switch to another one of which I don't remember the name and which isn't the alternative buffer. So using <code>:b#</code> is not possible and using the completion with the command <code>:b</code> isn't convenient neither.</p>
</blockquote>

<p>On the contrary, I find tab-completion to be extremely convenient. Setting the right options to values that work for you may help a lot. These are the relevant lines from <em>my</em> <code>vimrc</code> <em>(they work for me but they may not work for you so don't just copy them)</em>:</p>

<pre><code>nnoremap ,b :buffer *
set wildmenu
set wildignore+=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=*/min/*,*/vendor/*,*/node_modules/*,*/bower_components/*
set wildignore+=tags,cscope.*
set wildignore+=*.tar.*
set wildignorecase
set wildmode=full
</code></pre>

<p>With that, the right buffer is rarely more than five or six keystrokes away:</p>

<p><a href=""https://i.stack.imgur.com/Mu4lE.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Mu4lE.gif"" alt=""tab-completion""></a></p>

<hr>

<blockquote>
  <p>This give me a command <code>:B</code> (and a mapping) which calls the function <code>:buffers</code> wait for an input and finally calls <code>:b</code> followed by the input.</p>
</blockquote>

<p>Barry Arthur came up with a much simpler solution years ago that has become quite popular since then:</p>

<pre><code>nnoremap &lt;leader&gt;b :ls&lt;CR&gt;:b&lt;Space&gt;
</code></pre>

<p>of which I proposed a slightly more versatile variant a couple years ago:</p>

<pre><code>nnoremap gb :ls&lt;CR&gt;:b
</code></pre>

<p><a href=""https://i.stack.imgur.com/U8jDD.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/U8jDD.gif"" alt=""gb""></a></p>

<hr>

<p>Since we are talking vimscript, here is a nice little function I wrote that ""auto-populates"" the command-line with the right command stub after list-like commands like <code>:ls</code> or <code>:ilist</code>. The advantage of that function over the mappings above is that I don't have to remember specific mappings. It works just like Vim, <em>but with a little twist</em>.</p>

<pre><code>"" smooth listing
cnoremap &lt;expr&gt; &lt;CR&gt; &lt;SID&gt;CCR()

function! s:CCR()
    if getcmdtype() == "":""
        let cmdline = getcmdline()
            if cmdline =~ '\v\C^(dli|il)' | return ""\&lt;CR&gt;:"" . cmdline[0] . ""jump  "" . split(cmdline, "" "")[1] . ""\&lt;S-Left&gt;\&lt;Left&gt;""
        elseif cmdline =~ '\v\C^(cli|lli)' | return ""\&lt;CR&gt;:silent "" . repeat(cmdline[0], 2) . ""\&lt;Space&gt;""
        elseif cmdline =~ '\C^changes' | set nomore | return ""\&lt;CR&gt;:sil se more|norm! g;\&lt;S-Left&gt;""
        elseif cmdline =~ '\C^ju' | set nomore | return ""\&lt;CR&gt;:sil se more|norm! \&lt;C-o&gt;\&lt;S-Left&gt;""
        elseif cmdline =~ '\C^ol' | set nomore | return ""\&lt;CR&gt;:sil se more|e #&lt;""
        elseif cmdline =~ '\C^undol' | return ""\&lt;CR&gt;:u ""
        elseif cmdline =~ '\C^ls' | return ""\&lt;CR&gt;:b""
        elseif cmdline =~ '/#$' | return ""\&lt;CR&gt;:""
        else | return ""\&lt;CR&gt;"" | endif
    else | return ""\&lt;CR&gt;"" | endif
endfunction
</code></pre>

<p><a href=""https://i.stack.imgur.com/Vnl3e.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Vnl3e.gif"" alt=""ccr""></a></p>

<hr>

<p>That said, I'm a big proponent of ""symbol-based navigation"" over ""file-based navigation"". When applicable, symbol-based navigation is much faster and much more economic than file-based navigation.</p>

<p>The last GIF shows <em>one</em> mean of symbol-based navigation, by the way. The example is silly but… oh well. </p>
","9161"
"Is there a way to search files with netrw similar to find command in linux?","762","","<p>Is there a way to search files with netrw similar to find command in linux?</p>

<p>So in command line I can do</p>

<pre><code>find . -name ""pattern""
</code></pre>

<p>Is there something similar in netrw?</p>
","<p>You have plugins to do so :</p>

<ul>
<li><a href=""http://kien.github.io/ctrlp.vim/"" rel=""nofollow"">Ctrl-P</a></li>
<li><a href=""http://www.vim.org/scripts/script.php?script_id=3025"" rel=""nofollow"">Command-T</a></li>
</ul>

<p>Or you can do by hand :</p>

<p>With a unix command from vim :</p>

<pre><code>:!find . -name ""pattern""
</code></pre>

<p>With the <code>Explore</code> command :</p>

<pre><code>:Explore pattern
</code></pre>

<p>Based on <a href=""http://vim.wikia.com/wiki/Find_files_in_subdirectories"" rel=""nofollow"">this post</a> this function is available through the <code>netrw.vim</code> file. </p>
","4568"
"Substitute second occurence on line","762","","<p>I have a list of files:</p>

<pre><code>./a.temp.txt     ./a.temp.txt
./a/b.temp.txt   ./a/b.temp.txt
./a/b/c.temp.txt ./a/b/c.temp.txt
</code></pre>

<p>And I want to remove the <code>temp.</code> on each line, but only the <strong>second occurence</strong>, thus, the file should look like:</p>

<pre><code>./a.temp.txt     ./a.txt
./a/b.temp.txt   ./a/b.txt
./a/b/c.temp.txt ./a/b/c.txt
</code></pre>

<p>How should I do this?</p>
","<p>In general you can match the Nth occurrence of something
using <code>\zs</code> and <code>\{N}</code>. There's an example given at <code>:help \zs</code>.</p>

<p>In your case the command would be:</p>

<pre><code>:%s/\(.\{-}\zstemp\.\)\{2}//
</code></pre>
","8662"
"How do you change the last n characters for a range of lines?","758","","<p>Generally you can select a visual block for the first n characters of a range of lines, and just press <kbd>c</kbd>, insert characters, and press <kbd>Esc</kbd> to have it apply to all.</p>

<p>However, this method is rarely possible for all the latter characters, because lines of code are likely to vary in length.</p>

<p>How can I easily change the last three characters of a range of lines?</p>
","<p>It would not work all the time, but maybe you could temporarily right-align the right border of the code.</p>

<p>Suppose you have the following code containing 3 lines, each with the same level of indentation (<code>8</code>):</p>

<pre><code>        here is foo
        here will be foo
        here was foo
</code></pre>

<p>And you want to change <code>foo</code> with <code>bar</code>. You could use the following commands:</p>

<ul>
<li><code>vip</code>       = select the current paragraph</li>
<li><code>:right</code>    = right-align it</li>
<li><code>ff</code>        = move the cursor on the <code>f</code> character</li>
<li><code>C-v G</code>     = go into visual block mode and select the column of <code>f</code> characters</li>
<li><code>C</code>         = cut everything after the column</li>
<li><code>bar Esc</code>   = insert <code>bar</code> and escape to go back in normal mode</li>
<li><code>gv</code>        = visually select the last changed text (the <code>bar</code> column)</li>
<li><code>:left 8</code>   = left-align the paragraph, giving it back its original level of indentation <code>8</code></li>
</ul>

<p>It would look like this:
<a href=""https://i.stack.imgur.com/JA1W9.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JA1W9.gif"" alt=""enter image description here""></a></p>

<p>If however, the lines in the block have different levels of indentation, then I don't think this solution can work, as you would probably have to remember the original level of each line, then fix it afterwards.</p>
","8375"
"Mapping a command in Visual Mode results in error E481: No range alllowed","757","","<p>I'm trying to make a keyboard binding in Neovim that would send a selected block to the opened Neovim terminal. I've used these answers as guidelines <a href=""https://vi.stackexchange.com/a/3390/3405"">https://vi.stackexchange.com/a/3390/3405</a> <a href=""https://stackoverflow.com/a/6271254/859391"">https://stackoverflow.com/a/6271254/859391</a></p>

<p>Though when i'm trying to call the  command with a Visual Line selected I keep getting the No Range Allowed error. Am I missing something obvious?</p>

<pre><code>function! s:get_visual_selection()
  "" Why is this not a built-in Vim script function?!
  let [lnum1, col1] = getpos(""'&lt;"")[1:2]
  let [lnum2, col2] = getpos(""'&gt;"")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&amp;selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, ""\n"")
endfunction

augroup Terminal
  au!
  au TermOpen * let g:last_terminal_job_id = b:terminal_job_id
augroup END

function! REPLSend(lines)
  call jobsend(g:last_terminal_job_id, lines[0])
  call jobsend(g:last_terminal_job_id, ""\r"") "" needed for the way REPL handles the input
endfunction

command! REPLSendLine call REPLSend([s:get_visual_selection()])
vnoremap &lt;silent&gt; &lt;leader&gt;l :REPLSendLine&lt;cr&gt;
"" leader is &lt;Space&gt;
</code></pre>
","<p>I'm not sure, but I think that when you hit <code>&lt;leader&gt;l</code> to call <code>:REPLSendLine</code>, Vim automatically inserts the visual range <code>'&lt;,'&gt;</code>, and since your command is not defined with the attribute <code>-range</code>, it raises an error.</p>

<p>In your visual mapping, you should probably add the keycode <code>&lt;C-U&gt;</code> to remove the visual range (it won't affect the marks <code>'&lt;</code> and <code>'&gt;</code>, they will still be valid inside <code>s:get_visual_selection()</code>):</p>

<pre><code>vnoremap &lt;silent&gt; &lt;leader&gt;l :&lt;C-U&gt;REPLSendLine&lt;cr&gt;
</code></pre>

<p>Also, maybe you could try removing the inline comment <code>"" needed for the way REPL handles the input</code> and put it on a separate and dedicated line.</p>
","7150"
"Why does >3k move the cursor up when >3j does not move it down?","757","","<p>Hitting <code>&gt;3j</code> indents the current line and the three below it, and <code>&gt;3k</code> does the same but with the three lines above. However, when indenting down, my cursor is left on the same line as it started, but when indenting up, the cursor moves to the top most indented line. Why?</p>

<p>Do Vim automatically move to the top most indented line, but that just happens to be the same as the starting line when indenting downwards, or is there something else behind it?</p>
","<p>Yes, Vim automatically moves to the top most indented line. To see this, position the cursor in the middle of a paragraph and use <code>&gt;ap</code> to indent the whole paragraph.</p>

<p>Note that this is not specific to indenting. If you use <code>!ipsort</code> to sort all lines of the current paragraph, the cursor moves to the top of the sorted paragraph as well.</p>
","9998"
"Folding by regex search pattern","756","","<p>I got a plain text file with whitespace separated columns of values.
Like this:</p>

<pre><code>AU 3030 .... ... ....  
AU 3031 .... ... ....  
AU 3032 .... ... .... 
AU 3033 .... ... .... 
IT 48100 ... .. .....
IT 40100 ... .. .....
IT 48123 ... .. .....
UK 3333 ... ... ..... 
UK 4444 ... ... .....
UK 5555 ... ... .....
</code></pre>

<p>I also got this regex which will match any adjacent line with the same value in the first column (assume the file is sorted on the first column) except the last:</p>

<pre><code>/^\(\([A-Z0-9]\+\)\s\+.*\n\)\(\2\)\@=
</code></pre>

<p>(or to make it less ""hairy""):</p>

<pre><code>/^\v([A-Z0-9]+)\s+.*\n(\1)@=
</code></pre>

<p>Is it possible to fold lines over the line which was not matched? Having this result:</p>

<pre><code>+-- 4 lines AU ....
+-- 3 lines IT ....
+-- 3 lines UK ....
</code></pre>
","<p>Do <code>set foldmethod=expr</code> and use <code>'foldexpr'</code> to set a vim script expression that will define the fold start points.</p>

<pre><code>set foldmethod=expr
set foldexpr=get(split(getline(v:lnum-1)),0,'')!=get(split(getline(v:lnum)),0,'')?'&gt;1':'='
</code></pre>

<p>This looks more complicated than it is, because we can't easily use spaces in <code>:set</code>, but with spaces, and a newline or 2, it looks like:</p>

<pre><code>get(split(getline(v:lnum - 1)), 0, '') != get(split(getline(v:lnum)), 0, '')
    \ ? '&gt;1'
    \ : '='
</code></pre>

<h3>Overview</h3>

<p>Basically this compares the first word of each line with the previous line. If the words are different then the line is start of the fold, <code>&gt;1</code>. Otherwise it keeps the same fold level, <code>=</code>.</p>

<h3>Glory of Details</h3>

<ul>
<li><code>set foldmethod=expr</code> to tell Vim to use a vim script expression to determine the foldings</li>
<li><code>'foldexpr'</code> option holds the vim script expression</li>
<li>Evaluating the condition with a ternary that returns <code>&gt;1</code> when a fold should start and <code>=</code> when the fold level should continue</li>
<li><code>v:lnum</code> is the current line that that <code>'foldexpr'</code> is running on to update the folds</li>
<li>Get the contents the current line (<code>v:lnum</code>) and the previous line (<code>v:lnum - 1</code>) via <code>getline()</code></li>
<li>Split each line into words via <code>split()</code></li>
<li>Use <code>get()</code> to get the first index of the freshly split words</li>
<li>Use a default value of <code>''</code> in case of a blank line. e.g. <code>get(words, 0, '')</code></li>
<li>Compare the first word of the current line with the first word of the previous line in the condition portion of the ternary</li>
</ul>

<p>Note: this method may have some performance issues with very large documents</p>

<p>For more help see:</p>

<pre><code>:h 'foldmethod'
:h 'foldexpr'
:h getline(
:h v:lnum
:h split(
:h get(
</code></pre>
","2169"
"Undo multiple changes in Cygwin's vim","756","","<p>I have two installations of vim: 7.4 in cygwin and 7.2 in a Linux virtual machine.  The vim in the virtual machine can undo multiple edits by repeatedly pressing the <code>u</code> key.  The vim in cygwin can only undo the most recent change.  Pressing it a second time is a ""redo"" (which in the virtual machine can be accomplished with the Ctrl-r sequence).  </p>

<p>I would like to get the cygwin installation to be able to undo multiple edits through repeatedly pressing the u key, like it does in the virtual machine.</p>

<p>I have tried comparing the features included in both installations, but I have not identified what could be causing this difference in behavior.  Another post on this website suggested I could use the <code>.</code> key after using the <code>u</code> to undo multiple times, but that has not worked for me in the cygwin installation.  I also haven't found any settings in the vimrc files that seem like they would modify this behavior.</p>
","<p>Try to <code>:set nocompatible</code> and see if that does it.  vi had only one undo level so Vim's ability to behave differently is one of the non-compatible changes the <code>nocompatible</code> setting implements.</p>
","2318"
"How does Vim know how to syntax-highlight some files with strange extension or without extension at all?","754","","<p>Take markdown file  as an example. I often found that some downloaded files suffixed with <code>.md</code> (rather than <code>.markdown</code>) can be recognized as markdown file, and syntax-highlighted as such. However, it won't work if I plainly create a file suffixed with <code>.md</code> and open it. I have to <code>:set syntax=markdown</code> so that Vim can highlight the file properly.</p>

<p>Also, I noticed that the syntax in some system files with strange suffix such as <code>.list</code> can be magically highlighted. For example, on my Ubuntu system there is a file <code>/etc/apt/sources.list</code>. Upon opening it, Vim can correctly recognize the syntax in the file is <code>debsources</code>. But it won't be so if I copy the file to <code>~/Desktop</code> and open again.</p>

<p>Another example, in the same directory <code>/etc/apt/apt.conf.d</code>, there are files with no extension at all, and they can all be recognized having <code>aptconf</code> syntax.</p>

<p>So how does Vim determine which syntax to use for highlighting when encountering strange extensions or no extension at all?</p>
","<p>In the file recognition procedure used to detect what syntax highlighting to use, there can be a few kinds of checks. The most known one is checking the the file extension. This is done by a command of the following structure:</p>

<pre><code>au BufRead,BufNewFile *.my             setfiletype my-type
</code></pre>

<p>Another way, used for makefiles for example, is assigning the auto-cmd too the file name. </p>

<p>The methods that confused you are checking the file path, and checking the file contents in order to detect the file type.</p>

<p>In order to check file contents you can write code similar to this:</p>

<pre><code>if did_filetype()       "" filetype already set..
   finish                "" ..don't do these checks
endif
if getline(1) =~ '^#!.*\&lt;mine\&gt;'
  setfiletype mine
elseif getline(1) =~? '\&lt;drawing\&gt;'
  setfiletype drawing
endif
</code></pre>

<p>More info can be fond in <a href=""http://vimhelp.appspot.com/filetype.txt.html#new-filetype""><code>:help new-filetype</code></a></p>
","2530"
"Are Vim's regex magics compatible with well-known regex classes?","753","","<p>Many Unix tools' regular expression syntaxes are often the POSIX-codified Basic and Extended Regular Expressions (BRE and ERE, respectively), and, in some modern implementations, Perl-style (PCRE being an implementation of this). </p>

<p>Is there a one-to-one correspondence between Vim's levels of magic and such externally defined, but well-known, classes? It looks like <code>\m</code> is BRE and <code>\v</code> is ERE, except POSIX doesn't include lookarounds. </p>

<p>If such a correspondence exists, is it defined somewhere? <a href=""http://vimhelp.appspot.com/pattern.txt.html""><code>pattern.txt</code></a> has only one mention of <code>POSIX</code>.</p>

<p>Or do we have to stick with ""magic"" to describe Vim regular expressions?</p>
","<p>In summary, no. Vim's regex is a unique flavour, and there are no options to make it behave more like another flavour.</p>

<p>I think this is a good thing.</p>

<h1>Magic</h1>

<p>The <code>'magic'</code> option doesn't change the flavour of regex that Vim uses. It simply inverts the behaviour of many <code>\</code>-escaped atoms.</p>

<p>For example, by default, <code>+</code> is a literal <code>+</code> character, where <code>\+</code> means ""one or more of the preceding atom"". In contrast, <code>*</code> means ""zero or more of the preceding atom"", while <code>\*</code> is a literal <code>*</code>. Many people find this quite confusing. Using <code>\v</code> in your pattern makes it a bit more consistent. <code>:help 'magic'</code> gives a good summary:</p>

<blockquote>
<pre><code>after:    \v       \m       \M       \V         matches ~
                'magic' 'nomagic'
          $        $        $        \$         matches end-of-line
          .        .        \.       \.         matches any character
          *        *        \*       \*         any number of the previous atom
          ()       \(\)     \(\)     \(\)       grouping into an atom
          |        \|       \|       \|         separating alternatives
          \a       \a       \a       \a         alphabetic character
          \\       \\       \\       \\         literal backslash
          \.       \.       .        .          literal dot
          \{       {        {        {          literal '{'
          a        a        a        a          literal 'a'
</code></pre>
</blockquote>

<p>Personally, I think the default behaviour is nice for code files, where it's not uncommon to search for things like <code>foo(</code>, using the literal <code>(</code>.</p>

<h1>Vim's own regex flavour</h1>

<p>I've witnessed many people wishing Vim supported PCRE. Personally, I wish other tools supported Vim's flavour of regex. It has some capabilities that are either impossible or too cumbersome to achieve in PCRE.</p>

<h2>Impossible in PCRE</h2>

<p><a href=""http://www.regular-expressions.info/lookaround.html"">Lookaround</a> is a common feature where you can assert that a pattern either does or does not match before or after the pattern you're trying to match. For example, the PCRE pattern <code>q(?!u)</code> (or Vim regex pattern <code>qu\@!</code>) matches a <code>q</code> that's not followed by a <code>u</code>. (This is more correct than <code>q[^u]</code>, which requires that there is <em>some</em> character after the <code>q</code>.)</p>

<h3>Variable-length negative lookbehind</h3>

<p>PCRE, and many other flavours, have a restriction that a negative lookbehind pattern must be of a fixed length. That means that a pattern like <code>(?&lt;![a-z]{3})foo</code>, meaning ""the string <code>foo</code> <em>not preceded by</em> exactly 3 lowercase letters"") is fine, but <code>(?&lt;![a-z]+)foo</code> (meaning ""the string <code>foo</code> not preceded by <em>any number</em> of lowercase letters"") is not.</p>

<p>This restriction doesn't exist in Vim. In Vim, a pattern like <code>\([a-z]\+\)\@&lt;!foo</code>, while maybe a bit ugly to look at, is perfectly valid.</p>

<h2>Easier in Vim regex</h2>

<p>Some things are a lot nicer in Vim's flavour of regex.</p>

<h3>Start and end of match anchors</h3>

<p>The most notable, in my opinion, are the <code>\zs</code> and <code>\ze</code> anchors. These allow you to specify the start and end of the match. For example, <code>foo(\zs.*\ze)</code> matches only what's between the <code>(</code> and <code>)</code> in a function call like <code>foo(...)</code>. This can be done in PCRE, but it requires the use of lookaround, which is slightly tedious: <code>(?&lt;=foo\().*(?=\))</code></p>

<h3>Prefix matching</h3>

<p>Another cool thing that Vim can do is match any prefix (including the empty prefix) of a particular sequence of characters. For example, to match on <code>f</code>, <code>fo</code>, <code>foo</code>, or <code>food</code>, the pattern <code>f\%[ood]</code> can be used. In PCRE, such a pattern would look like <code>f(o(od?)?)?</code>. (Imagine that for a longer string!)</p>

<h3>Matching cursor, line, and column positions</h3>

<p>Vim's regex has some anchors for matching positions in the buffer.</p>

<ul>
<li><code>\%23c</code> matches column 23</li>
<li><code>\%&lt;23c</code> matches <em>before</em> column 23</li>
<li><code>\%&gt;23c</code> matches <em>after</em> column 23</li>
<li><code>\%16l</code> matches line 16
<ul>
<li>Similar to column, there are anchors for <em>before</em> or <em>after</em> a line number</li>
</ul></li>
<li><code>\%#</code> matches the cursor position
<ul>
<li>This is useful for things like <a href=""http://vim.wikia.com/wiki/Highlight_unwanted_spaces"">highlighting trailing whitespace except when you're typing at the end of the line</a></li>
</ul></li>
</ul>

<hr>

<p>I think it's worth-while to embrace Vim's flavour of regex. It's well-suited for use in a text editor used primarily for programming, and it's quite powerful.</p>
","2279"
"Tmux messing with Vim highlighting","753","","<p>When I load up vim inside tmux there is a background color behind all text as so:</p>

<p><a href=""https://i.stack.imgur.com/XzcLD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XzcLD.png"" alt=""enter image description here""></a></p>

<p>If I load it up not in tmux I get the following:</p>

<p><a href=""https://i.stack.imgur.com/iLW5L.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iLW5L.png"" alt=""enter image description here""></a></p>

<p>I want it to be like image 2, I can not understand why tmux is interfering?</p>
","<p>Add this line to your <code>tmux.conf</code> file</p>

<pre><code>set -g default-terminal ""screen-256color""
</code></pre>

<p>Add the line below to you shells rc file in my case its my <code>.zshrc</code></p>

<pre><code>if [[ $TERM == xterm ]]; then TERM=xterm-256color; fi
</code></pre>

<p>Add the line below to your <code>.vimrc</code></p>

<pre><code>set t_Co=256
</code></pre>

<p>The above configuration works for me, but if this fails try to follow this link for another methor to fix <a href=""http://sunaku.github.io/vim-256color-bce.html"" rel=""nofollow"">Fixing Vim's Background Color</a> </p>
","7114"
"How do I ShaDon't?","752","","<p>I really don't care about any of the ""value"" that viminfo or its replacement in neovim, ShaDa, provide. I couldn't care less about whether or not my cursor is in the exact place I left it when I open a file or whether my registers are restored, but I am very tired of seeing seemingly random ShaDa-related errors. Is there a way that I can just turn off shared data? <code>:help shada</code> has not been very helpful in this endeavor. </p>
","<p><code>set shada=""NONE""</code> will prevent shada files from being generated or read in Neovim.</p>

<p>For vim, <code>set viminfo=""NONE""</code> will disable viminfo files.</p>
","9571"
"Delete all consecutive duplicates","749","","<p>I have a file that looks like this.</p>

<pre><code>Move to 230.00
Hold
Hold
Hold
Hold
Hold
Hold
Move to 00.00
Hold 
Hold 
Hold 
Hold 
Hold 
FooBar
Hold 
Spam
Hold
</code></pre>

<p>I would like it to look like this:</p>

<pre><code>Move to 230.00
Hold
Move to 00.00
Hold 
FooBar
Hold
Spam
Hold
</code></pre>

<p>I'm sure there must be a way that vim could quickly do this, but I can't quite wrap my head around how. Is this beyond the power of macros, and needs vimscript?</p>

<p>Also, it's OK if I have to apply the same macro to each block of ""Holds"". It doesn't have to be a single one macro that gets the whole file, although that would be awesome.</p>
","<p>I think the following command should work :   </p>

<pre><code> :%s/^\(.*\)\(\n\1\)\+$/\1/
</code></pre>

<p>Explanation :</p>

<p>We use the substitution command on the whole file to change <code>pattern</code> into <code>string</code> :</p>

<pre><code>:%s/pattern/string/
</code></pre>

<p>Here <code>pattern</code> is <code>^\(.*\)\(\n\1\)\+$</code> and <code>string</code> is <code>\1</code>.</p>

<p><code>pattern</code> can be broken down like this :</p>

<pre><code>^\(subpattern1\)\(subpattern2\)\+$
</code></pre>

<p><code>^</code> and <code>$</code> match respectively a beginning of line and an end of line.  </p>

<p><code>\(</code> and <code>\)</code> are used to enclose <code>subpattern1</code> so that we can refer to it later by the special number <code>\1</code>.<br>
They are also used to enclose <code>subpattern2</code> so that we can repeat it 1 or more times with the quantifier <code>\+</code>.</p>

<p><code>subpattern1</code> is <code>.*</code><br>
<code>.</code> is a metacharacter matching any character except new line and <code>*</code> is a quantifier that matches the last character 0, 1 or more times.<br>
So <code>.*</code> matches any text containing no new line.  </p>

<p><code>subpattern2</code> is <code>\n\1</code><br>
<code>\n</code> matches a new line and <code>\1</code> matches the same text that was matched inside the first <code>\(</code>, <code>\)</code> which here is <code>subpattern1</code>.</p>

<p>So <code>pattern</code> can be read like this :<br>
<em>a beginning of line (<code>^</code>) followed by any text containing no new line (<code>.*</code>) followed by a new line (<code>\n</code>) then the same text (<code>\1</code>), the latter two being repeated one or more times (<code>\+</code>), and finally an end of line (<code>$</code>)</em>.</p>

<p>Wherever <code>pattern</code> is matched (a block of identical lines), the substitution command replaces it with <code>string</code> which here is <code>\1</code> (the first line of the block).</p>

<p>If you want to see which blocks of lines will be affected without changing anything in your file, you can enable the <code>hlsearch</code> option and add the <code>n</code> substitution flag at the end of the command :</p>

<pre><code>:%s/^\(.*\)\(\n\1\)\+$/\1/n
</code></pre>

<p>For more granular control, you can also ask for a confirmation before changing each block of lines by adding the <code>c</code> substitution flag instead :</p>

<pre><code>:%s/^\(.*\)\(\n\1\)\+$/\1/c
</code></pre>

<p>For more information on the substitution command read <code>:help :s</code>,<br>
for the substitution flags <code>:help s_flags</code>,<br>
for the various metacharacters and quantifiers read <code>:help pattern-atoms</code>,<br>
and for regular expressions in vim read <a href=""http://vimregex.com/"" rel=""nofollow noreferrer"">this</a>.</p>

<p>Edit: <a href=""https://vi.stackexchange.com/questions/5362/delete-all-consecutive-duplicates#comment8232_5366"">Wildcard</a> fixed a problem in the command by adding a <code>$</code> at the end of <code>pattern</code>.</p>

<p>Also <a href=""https://vi.stackexchange.com/a/5370/4939"">BloodGain</a> has a shorter and more readable version of the same command.</p>
","5366"
"regex: how to replace ""\[""?","749","","<p>I have this sample line in the buffer:</p>

<pre><code>export PS1=""\[${Cyan}\]$(((SHLVL&gt;1)) &amp;&amp; echo ""${SHLVL}\[${IBlack}\]."")\[${IGreen}\]\u\[${IBlack}\]@\[${Purple}\]\h\[${IYellow}\] \w \$ \[${Color_Off}\]""
</code></pre>

<p>and i want to delete all <code>\[</code> so while the cursor is on the line i write <code>:s/\\[//g</code> and get the error</p>

<pre><code>E486: Pattern not found: \\[//g
</code></pre>

<p>What do i do wrong? Somehow vim thinks that <code>//g</code> is part of the pattern?</p>

<p>When i search with <code>/\\[</code> i get proper results.</p>
","<p>I found the reason: <code>[</code> is special character so vim treats next characters as part of the set (<code>[...]</code>) although it doesn't have the closing bracket. The proper replace should be:</p>

<pre><code>:s/\\\[//g
</code></pre>

<p>(One backslash more)</p>
","2539"
"Why does the order of :set bg=dark and :set bg=light matter?","747","","<p>While trying to match up my terminal's colour palette and GVim's I noticed this:</p>

<ol>
<li>When I open GVim and Vim, I see:
<img src=""https://i.stack.imgur.com/ALGee.png"" alt=""enter image description here"">
(That's the same file, my <code>vimrc</code>.)</li>
<li>If I do <code>:set t_Co=256</code>, nothing happens in GVim (except it blinks), whereas the colours in the terminal now look different. If I do <code>:set bg=dark</code> now, it makes no difference (again GVim blinks).
If I then do <code>:set bg=light</code> and then <code>:set bg=dark</code> again, I get:
<img src=""https://i.stack.imgur.com/85eAY.png"" alt=""enter image description here""></li>
</ol>

<p>Both <code>:set bg=dark</code> and <code>:set t_Co=256</code> are present in my <a href=""https://github.com/murukeshm/vimrc/blob/master/vimrc"" rel=""noreferrer"">vimrc</a>. Why aren't my <code>:set bg</code> and <code>:set t_Co</code> sticking, and why does setting <code>:set bg=dark</code> again after <code>:set bg=light</code> make a difference where it originally didn't?</p>

<p>I'm using Arch Linux, the terminal is GNOME Terminal, and I don't have a <code>.gvimrc</code>.</p>

<pre><code>$ vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Feb  4 2015 08:03:11)
Included patches: 1-617
Compiled by Arch Linux
Huge version with GTK2 GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
+balloon_eval    +float           +mouse_urxvt     -tag_any_white
+browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
+clientserver    -hangul_input    +netbeans_intg   +title
+clipboard       +iconv           +path_extra      +toolbar
+cmdline_compl   +insert_expand   +perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       -python          +viminfo
+cscope          +lispindent      +python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con_gui  +lua             +rightleft       +windows
+diff            +menu            +ruby            +writebackup
+digraphs        +mksession       +scrollbind      +X11
+dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     +xim
+emacs_tags      +mouseshape      -sniff           +xsmp_interact
+eval            +mouse_dec       +startuptime     +xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: ""/etc/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  system gvimrc file: ""/etc/gvimrc""
    user gvimrc file: ""$HOME/.gvimrc""
2nd user gvimrc file: ""~/.vim/gvimrc""
    system menu file: ""$VIMRUNTIME/menu.vim""
  fall-back for $VIM: ""/usr/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz  -D_FORTIFY_SOURCE=2  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -L. -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE  -Wl,-O1,--sort-common,--as-needed,-z,relro -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype  -lSM -lICE -lXt -lX11 -lXdmcp -lSM -lICE  -lm -lncurses -lelf -lnsl   -lacl -lattr -lgpm -ldl  -L/usr/lib -llua -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector -L/usr/local/lib  -L/usr/lib/perl5/core_perl/CORE -lperl -lnsl -ldl -lm -lcrypt -lutil -lpthread -lc  -L/usr/lib/python3.4/config-3.4m -lpython3.4m -lpthread -ldl -lutil -lm  -lruby -lpthread -lgmp -ldl -lcrypt -lm  -L/usr/lib
</code></pre>
","<ol>
<li><p>The elflord colorscheme does <code>set background=dark</code>. Since it is sourced <em>after</em> your <code>set bg=light</code> it will override it.</p></li>
<li><p><code>set t_Co=256</code> is <em>pointless</em>. It doesn't do anything in GVim and you should set your terminal emulator up properly instead.</p>

<p>Also, elflord only uses basic ANSI colors in color terminals so it doesn't really matter if you force Vim to see 256 colors or if you set your <code>TERM</code> to a 256colors value; your colorscheme won't use that extended palette anyway. What happens instead is that your original <code>TERM</code> is probably <code>xterm</code> or <code>screen</code> or some other value that restricts Vim to 8 colors. But Elflord uses both ""dark"" and ""light"" colors which need a <code>TERM</code> above 8. So, forcing 256 colors will alter your colors.</p></li>
<li><p>Recommendations:</p>

<ul>
<li>Don't change the value of <code>'t_Co'</code>.</li>
<li>Don't <code>set background</code>.</li>
</ul></li>
</ol>
","1891"
"How do I conditionally set :colorscheme?","745","","<p>My <code>.vimrc</code> chooses my preferred color scheme (solarized) which is installed via  plugin management system. Yet on some systems which don't have that plugin the <code>:colorscheme solarized</code> command runs but the result is whacky.</p>

<p>how do I conditionally test if solarized is indeed installed and use it if it is but use a different (built in) color scheme if not?</p>
","<h3>Lets fail with Style!</h3>

<pre><code>silent! colorscheme evening
silent! colorscheme solarized
</code></pre>

<p>The <code>:silent!</code> will ignore the errors at start up. Just put color schemes in reverse order of what you really want.</p>

<p>For more help see:</p>

<pre><code>:h :silent
</code></pre>
","3400"
"Execute content of buffer as vimscript","744","","<p>I have a <code>nofile</code> buffer that contains vimscript, and I want to execute it.  However, <code>:so %</code>  will not work because it requires a saved file, not a buffer.  Is there a vim command to do this by default?  If not, is it possible to create a function which does the same things?</p>
","<p>Yes, you can yank the whole buffer with <code>ggyG</code> or <code>:%y</code> and execute it with <code>:@""</code>.</p>

<p>In short:</p>

<pre><code>:%y|@""&lt;CR&gt;
</code></pre>

<p>Used in a mapping:</p>

<pre><code>nnoremap &lt;key&gt; :%y|@""&lt;CR&gt;
</code></pre>

<p>Used in a flexible command that works on the whole buffer by default or an optional range:</p>

<pre><code>command! -bar -range=% Foo execute &lt;line1&gt; . ',' . &lt;line2&gt; . 'y|@""'
</code></pre>
","3187"
"How to save color scheme in gVim between sessions?","743","","<p>I want to select a color scheme in gVim such that it's used always (i. e. if I select color scheme X, close gVim, and start it again, it should start with X as the color scheme, not the default one).</p>

<p><a href=""https://i.stack.imgur.com/30bY0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/30bY0.png"" alt=""Screenshot""></a></p>

<p>How can I do it? </p>

<p>Just selecting the color scheme (see menu in the screenshot above) doesn't help.</p>
","<p>In Vim, settings are saved across sessions by writing them in an init script called <code>vimrc</code>.</p>

<p>On Windows, that <code>vimrc</code> is supposed to be at this location:</p>

<pre><code>$HOME/vimfiles/vimrc
</code></pre>

<p>The installer may or may not have created that file for you, so you'll have to create if it doesn't exist. Do <code>:echo $HOME</code> in Vim to know where to create that directory and that file.</p>

<p>To save your colorscheme choice, add this line to your <code>vimrc</code>:</p>

<pre><code>colorscheme slate
</code></pre>

<p>See <a href=""https://github.com/romainl/idiomatic-vimrc/blob/master/idiomatic-vimrc.vim"" rel=""nofollow"">this document</a>.</p>
","8975"
"Calling function to insert text with inoremap","741","","<p>I have a function that is called via a mapping when I am in insert mode:</p>

<pre><code>inoremap &lt;buffer&gt; &lt;M-i&gt; &lt;ESC&gt;:call TheFunc()&lt;CR&gt;
</code></pre>

<p>The function is supposed to ""calculate"" a string (<code>l:text</code>) and to insert it at the current cursor position:</p>

<pre><code>fu! TheFunc()

   if g:FOO = 1
      let l:text = XYZ()
   elseif g:FOO = g:BAR
      let l:text = ABC()
   ... etc etc
   endif

   execute 'normal a' . l:text

   execute 'normal l'
   startinsert

endfu
</code></pre>

<p>I use <code>execute 'normal l'</code> so that after calling the function, further typed text is inserted <em>after</em> the text inserted by the function.</p>

<p>This works fine, <em>except</em> when the cursor is on the end of a line. In this case, the <code>normal l</code> cannot move the cursor one to the right, and the subsequent <code>startinsert</code> inserts one character to early.</p>

<p>I can circumenvent this problem by replacing the <code>startinsert</code> command with this construct</p>

<pre><code>if col('.') + 1 == col('$')
   startinsert!
else
  execute 'normal l'
  startinsert
end
</code></pre>

<p>This works as I need it.</p>

<p>Yet, I <em>feel</em> there should be a more elegant way to achieve what I want. Is there?</p>
","<p>There is a better way of using functions in mappings, and that is by using the <code>&lt;expr&gt;</code> flag.  For example, say you wanted to insert the current line number at the cursor position by typing <code>ln</code> in insert mode.  This is how you would accomplish that with an <code>&lt;expr&gt;</code> mapping:</p>

<pre><code>inoremap &lt;expr&gt; ln line(""."")
</code></pre>

<p>Instead of directly putting the keys you want to type in the mappping, you put a function whose return value is treated like normal keypresses.  In this case, it inserts the output of the <code>line()</code> function.  A normal vimscript expression can be used as well.  For more on these kinds of mappings, see <code>:help :map-&lt;expr&gt;</code>.</p>
","4276"
"What is the difference between set and :set?","740","","<p>I was looking at <a href=""https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim"">Tim Pope's vim-sensible plugin</a> and I noticed this in the README...</p>

<blockquote>
  <p>See the source for the authoritative list of features. (Don't worry, it's mostly <code>:set</code> calls.)</p>
</blockquote>

<p>When I looked at the source, the <code>:set</code> calls are like this...</p>

<pre><code>set autoindent
</code></pre>

<p>There's no <code>:</code> before the <code>set</code>.</p>

<p>I'm pretty sure I've actually seen <code>:set</code> in example <code>.vimrc</code>s also.</p>

<p>What is the difference?</p>

<p>Which form should I use in my <code>.vimrc</code>?</p>
","<p>A ""script"" does nothing more than run a sequence of ex commands. An ""ex command"" is what you type when you use <code>:</code> in Vim. For example <code>:wq</code>, <code>:set wrap</code>, <code>:e file</code>, etc. are all ex commands.</p>

<p>The <code>:</code> is not part of the command; it is merely a keystroke to start the command-line mode; you don't always need to include the <code>:</code>, for example when you chain multiple commands with <code>|</code> you don't need to repeat the <code>:</code> more than once. For example, <code>:write | quit</code> will work fine.</p>

<p>For convenience, the <code>:</code> may be included though. This aids with copy/pasting and such, but you don't have to. It doesn't matter. In fact, all leading <code>:</code>s are simply ignored. <code>:write</code>, <code>write</code>, and <code>:::::::::write</code> are all equivalent in terms of functionality (although obviously not in terms of sanity).</p>

<p>It's often useful to include the <code>:</code> in documentation to clarify that this is an ex command. For example <code>w</code> could refer either to <code>:w</code> or the normal mode command <code>w</code> to go to the next word.</p>

<p>Note that this applies to <em>everything</em>. Control structures such as <code>if</code> and <code>endif</code> are <em>also</em> just ex commands; you can type something like this:</p>

<pre><code>:if 1
:echo 'one'
:endif
</code></pre>

<p>from the Vim commandline just fine; no need for a ""script"". Vim scripts are very ""non-magic"" and ""non-special""; everything you can do from the ex commandline you can do in a Vim script, and vice versa.</p>
","6781"
"What is the best way to re-factor a variable name in vim?","737","","<p>I know there is one way to search and replace variable occurrences across a source file.</p>

<p>But is there any better way by which if I rename a variable at one place it gets renamed at other places as well without search and replace or substitute?</p>
","<p>You can just use the usual workflow <code>search</code> and <code>replace</code>:</p>

<pre><code>/original
cwreplaced
n.n.
</code></pre>

<hr>

<p>You can take also advantage of the <code>gn</code> motion:</p>

<pre><code>/original&lt;CR&gt;
cgnreplaced&lt;ESC&gt;
.....
</code></pre>

<p><code>cgn</code> will <code>c</code>hange the <code>n</code>ext matched pattern, so instead of using <code>n.n.</code> to <code>go to next</code> and <code>repeat</code> you can just <code>..</code> which means <code>replace next</code>.</p>

<p><code>gn</code> means ""search for next occurence and start a visual selection over it"", you can read more about it on the doc: <code>:h gn</code>.</p>
","8288"
"How should the option 'switchbuf' work?","736","","<p>I recently discovered the option <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27switchbuf%27"" rel=""noreferrer""><code>switchbuf</code></a> and tried to use it but I can't say if I don't understand how it should work or if it actually doesn't work on my Vim.</p>

<p>About the different possible values, the doc says:</p>

<blockquote>
  <p><em>useopen</em> If included, jump to the first open window that <br/>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contains the specified buffer (if there is one).<br/>
  <em>usetab</em>  Like ""useopen"", but also consider windows in other tab  pages.</p>
</blockquote>

<p>I have then used <code>set switchbuf=useopen,usetab</code> and the following commands in a new vim instance:</p>

<ul>
<li>Open a first buffer <code>:e file1</code> </li>
<li>Split the screen <code>:split</code></li>
<li>Open a second buffer <code>:e file2</code></li>
<li>Go back to the first buffer <code>:e file1</code> (I have also used <code>:bN</code>)</li>
</ul>

<p>The last commands to go to the first buffer open it in the second split. From what I understand from the doc the commands should place the cursor to the first split where the buffer is already open thanks to <code>useopen</code>. Also the behavior is the same when I try the same commands with tabs instead of splits.</p>

<ul>
<li>Is this behavior the expected one? </li>
<li>If so could you explain what this option should do?</li>
<li>If not I know that I'll have to debug my <code>.vimrc</code> but maybe is there a common setting known to interfere with <code>switchbuf</code>?</li>
</ul>
","<p><code>'switchbuf'</code> is only honored by quickfix commands (like <code>:cc</code>) and buffer-splitting commands (like <code>:sb</code>).</p>

<p>It doesn't affect <code>:buffer</code> and other ""regular"" buffer-related commands.</p>
","4889"
"Permanently set Font size and font selection in vim (compiled from source)","735","","<p>I have searched both Stack Overflow and the Vi and Vim Stack Exchange sites and the few questions regarding font size in vim are regarding gvim and the guifont. However, I am using vim from command line. Some of the posts are regarding setting font size on the fly, which also does not apply to my situation.</p>

<p>I have a two part question.</p>

<p><strong>First part:</strong> How do I permanently enlarge the display font size? (Poor vision necessitates this.)</p>

<p><strong>Second part:</strong> How do I set the font to be displayed?</p>

<p>I am separating these points, because I may choose to just enlarge the default font (whatever that is.)</p>

<p>I have compiled vim from source and am using version 7.4.899. When configuring the source code, I used</p>

<pre><code>--with-features=huge --enable-multibyte
</code></pre>

<p>I am hoping for a simple solution in the .vimrc file, but would rebuild from source if necessary.</p>
","<p>You can only change the font face and the font size in GVim/MacVim.</p>

<p>If you use Vim in a terminal emulator you will have to do that in your terminal emulator.</p>
","5269"
"Cannot exit Vim even using q!","734","","<p>I cannot exit vim even when I type <code>:q!</code>. I get the error </p>

<pre><code>E37: No write since last change (add ! to override)
E162: No write since last change for buffer...
</code></pre>

<p>I think the buffer is a NetrwTreeListing readonly.</p>
","<p>To solve this nuisance with netrw permanently, I added this to my <code>.vimrc</code>:</p>

<pre><code>"" Per default, netrw leaves unmodified buffers open. This autocommand
"" deletes netrw's buffer once it's hidden (using ':q', for example)
autocmd FileType netrw setl bufhidden=delete
</code></pre>

<p>From <a href=""https://github.com/tpope/vim-vinegar/issues/13#issuecomment-47133890"" rel=""nofollow noreferrer"">Tim Pope</a>.</p>
","13012"
"How to replace a word with a yanked word in normal mode","734","","<p>When I have to replace a word with another word I yank before, I usually use a workflow which seems unnatural to me:</p>

<p>Let's say I have this text:</p>

<pre><code>foo bar buzz
</code></pre>

<p>And I want to yank <code>foo</code> and replace <code>bar</code> with what I yanked before.</p>

<p>After yanking <code>foo</code>, I see the following options:</p>

<p><strong>Option 1</strong></p>

<ol>
<li><p>Place the cursor on <code>bar</code> with <code>w</code></p></li>
<li><p>Put <code>foo</code> in front of <code>bar</code> with <code>P</code></p></li>
<li><p>Put the cursor on the <code>b</code> of the remaining <code>bar</code> and delete the word with <code>de</code></p></li>
</ol>

<p><strong>Option 2</strong></p>

<ol>
<li><p>Put the cursor on bar with <code>w</code></p></li>
<li><p>Use <code>de</code> to erase <code>bar</code></p></li>
<li><p>Put the content of the register 0 with <code>""0P</code> (since I erased <code>bar</code>, <code>foo</code> isn't accessible anymore with a simple <code>p</code>)</p></li>
</ol>

<p>Both ways seems over-complicated to me and I'm sure there is a more efficient way to achieve this action but I can't find how. This idea would be to combine the delete and the put actions in only one, or at least avoid to keep the deleted word in the yank register so as I can put the desired word with a simple <code>p</code>.</p>

<p>Also I know the replace mode triggered with <code>R</code> but it doesn't allow to put what was yanked.</p>

<p><strong>TL;DR</strong>: How to replace a word with the content of the yank register?</p>
","<p>Assuming you've already yanked <code>foo</code> with <code>ye</code> or something similar, and that the cursor is somewhere on <code>foo</code>, you can use <code>Wvep</code>:</p>

<ul>
<li><code>W</code> to go to <code>bar</code> (this is obviously optional and will depend on the current cursor position);</li>
<li><code>v</code> to start visual mode;</li>
<li><code>e</code> to go to the end of the word (you can also use other motions here, like <code>iw</code>);</li>
<li><code>p</code> to paste <code>foo</code>; this will replace the current visual selection (which is put in the unnamed register, <code>""""</code>).</li>
</ul>
","3329"
"In an autocmd what's the use of the BufRead event?","733","","<p>I'm trying to learn a bit of vimscript and currently reading <a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/12.html"" rel=""nofollow"">the 12th chapter</a> of Learn Vimscript the Hard Way.</p>

<p>In this page, the author says :</p>

<blockquote>
  <p>A common idiom in Vim scripting is to pair the BufRead and BufNewFile
  events together to run a command whenever you open a certain kind of
  file, regardless of whether it happens to exist already or not.</p>
</blockquote>

<p>So I thought I would try this for a problem I have.
I've got a folder in which I would like to be sure all files have the filetype markdown.
The folder contains existing files, which have the filetype text and don't have any extension.</p>

<p>I added the following line to my vimrc :</p>

<pre><code>autocmd BufNewFile,BufRead /path/to/my/folder/* set filetype=markdown
</code></pre>

<p>Now, when I create a new file inside my folder, the filetype is automatically set to markdown.
So the BufNewFile event is triggered as expected.
However, when I open an existing file, the filetype remains text, as if the BufRead event was not triggered.</p>

<p>I found two solutions :</p>

<ol>
<li>delete the content of ~/.vim/view</li>
<li>change the event to watch from BufNewFile,BufRead to BufEnter.</li>
</ol>

<p>But out of curiosity I would like to understand a few things:</p>

<ol>
<li>Why is the BufRead event not working ?</li>
<li>What's the difference between BufRead and BufEnter ?</li>
<li>For each file previously edited in vim, the ~/.vim/view folder seems to have a corresponding file which stores its settings (filetype, indentation...). The settings stored in that file seem to have priority over an autocmd triggered by the BufRead event.
So, what's the purpose of this event if it's unable to bypass what's inside the view/ folder ?</li>
<li>If I want to be sure to automatically change any setting for a file with an autocmd, is the BufEnter event the right one to choose ?</li>
</ol>
","<p>As far as I know, there is no precedence for views using <code>mkview</code> and <code>loadview</code> over buffer triggers such as <code>BufRead</code>. Whatever is executed last, will define which configuration is to be used.</p>

<p>Per discussed in the comments, there are two possible solutions to this question:</p>

<ul>
<li>Remove the <code>BufWinLeave</code> and <code>BufWinEnter</code> autocommands which make and load views.</li>
<li>Or place the <code>BufRead</code> etc. commands after the view commands. </li>
</ul>
","5307"
"Blocking changes to read only file","730","","<p>When using Vim to edit a read only file it will just provide a warning the first time it is edited but allow any changes to take place. I can understand this behaviour could be useful for someone intending on saving the file under another name; but I sometimes open files that I don't have write access to, then forget and make changes. </p>

<p>Is it possible to enter a mode where Vim will allow the file to be viewed but block any option that makes changes?</p>
","<p>I found a solution. Setting <code>nomodifiable</code> prevents the file being edited (as used in help windows). I created a simple function to set or unset <code>modifiable</code> depending on if <code>readonly</code> is set and attached it to an autocmd. </p>

<pre><code>"" Don't allow editing of read only files
autocmd BufRead * call RONoEdit()

function! RONoEdit()
  if &amp;readonly == 1
    set nomodifiable
  else
    set modifiable
  endif
endfunction
</code></pre>
","3457"
"How to wait for user input in the middle of a mapping?","730","","<p>I want to make a mapping that does the following:</p>

<pre><code>nnoremap &lt;F1&gt; oHello, (user inputs their name. Ex. Jason). You have a very nice name.&lt;ESC&gt;
</code></pre>

<p>This mapping should make a non-recursive map to F1 that starts a new line in insert mode. Next it types ""Hello, "" then waits for the user to type their name and then enter or some other signal command to say they are done. After that input the map moves forward and completes the statement with ""You have a very nice name."" then exits insert mode with ESC.</p>
","<p>You can use a mapping with the <code>&lt;expr&gt;</code> flag to achieve this.  Mappings with the <code>&lt;expr&gt;</code> flag will evaluate the right hand side of the mapping as an expression and then apply the result as key strokes.  This can be combined with the <code>input()</code> function to achieve what you want.  Here is your mapping implemented with these features:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;F1&gt; ""oHello, "" . input(""Please give your name: "") . "". You have a very nice name.\&lt;ESC&gt;""
</code></pre>

<p>Here is a break down of what happens:</p>

<ul>
<li><code>nnoremap &lt;expr&gt;</code> - create a non-recursive expr mapping</li>
<li><code>&lt;F1&gt;</code> - the key you press to activate the mapping</li>
<li><code>""oHello, "" . input(""Please give you name: "") . "". You have a very nice name.\&lt;ESC&gt;""</code> - concatenates the result of the input function with the rest of the mapping.  It is necessary to escape <code>&lt;ESC&gt;</code> because if you don't, it won't be interpreted as the escape key.</li>
</ul>

<p>See <code>:help input()</code> and <code>:help :map-&lt;expr&gt;</code> for more.</p>
","6030"
"Linespace in Vim using iTerm2","729","","<p>I am using Vim 7.4.488 in iTerm2. Currently I've configured the 'linespace' setting in iTerm2's preferences. However, I would like to set a different linespace for Vim. I know that <code>:set linespace=1</code> should to the trick. However this does not work, as seen <a href=""https://stackoverflow.com/a/8206341/739972"">here</a>.</p>

<p>I would like to know if there is some kind of trick or setting that allows me to set different linespaces for iTerm and Vim, instead of using iTerm's 'global' preferences.</p>
","<p>Terminal Vim has no control over, or knowledge of, the line spacing that is currently being used in the terminal within which it is running. It just sends characters to the terminal (in your case, iTerm2), which renders them according to its own settings. There isn't, therefore, a clean way to do this.</p>

<p>What you <em>can</em> do, however, is tell iTerm2 to switch profiles on the fly by using its <a href=""https://iterm2.com/documentation-escape-codes.html"" rel=""nofollow"">proprietary escape codes</a>.</p>

<p>So, to switch line-spacing when you exit and enter Vim:</p>

<ol>
<li>Create a copy of your iTerm2 profile: (With <em>Preferences... -> Profiles -> Other Actions... -> Duplicate Profile</em></li>
<li>Set the name of your new profile: Under the <em>General</em> tab set the <em>Name</em> to <strong>LineSpaced</strong></li>
<li>Set up the required line spacing: Under the <em>Text</em> tab, click on <em>Change Font</em> and drag the slider for <em>Character Spacing -> Vertical</em> to your preferred value.</li>
<li><p>Add the following code to your <code>.vimrc</code>:</p>

<pre><code>if exists('$ITERM_PROFILE')
  silent !printf '\e]50;SetProfile=LineSpaced\x7'
  autocmd VimLeave * silent !printf '\e]50;SetProfile=Default\x7'
endif
</code></pre>

<p>This will switch to the iTerm2 profile named ""LineSpaced"" when you run Vim, and sets up an <code>autocommand</code> to switch back to the profile named ""Default"" when you exit Vim.</p></li>
</ol>

<p>This has the side-effect of changing the height of the iTerm2 window (because you are changing the line-spacing without changing the number of lines). If you don't want this to happen, you can use some AppleScript to tell iTerm2 to change the number of rows dynamically, in order to keep the height of the window roughly consistent:</p>

<pre><code>if exists('$ITERM_PROFILE')
  silent !printf '\e]50;SetProfile=LineSpaced\x7'
  silent !osascript -e ""tell application \""iTerm\"" to tell the current terminal to set number of rows to 36""
  autocmd VimLeave * silent !printf '\e]50;SetProfile=Default\x7'
  autocmd VimLeave * silent !osascript -e ""tell application \""iTerm\"" to tell the current terminal to set number of rows to 48""
endif
</code></pre>

<p><em>N.B. You might need to tweak the number of rows specified to work well with the line-spacings you have set for your two profiles.</em></p>
","2338"
"What is the difference between Ex mode and improved Ex mode?","729","","<p>There are two vim Ex modes:</p>

<ul>
<li>the vi compatible Ex-mode (<code>vim -e -s</code>),</li>
<li>vim improved Ex mode (<code>vim -E -s</code>).</li>
</ul>

<p>Vim improved Ex mode allows for more advanced commands than the vi compatible Ex-mode, however what are the main differences? Or where I can find them?</p>
","<p>This is actually documented in a somewhat 'hidden' non-obvious way, from <a href=""http://vimhelp.appspot.com/intro.txt.html#E501"" rel=""noreferrer""><code>:help Ex-mode</code></a></p>

<pre><code>Q                       Switch to ""Ex"" mode.  This is a bit like typing "":""
                        commands one after another, except:
                        - You don't have to keep pressing "":"".
                        - The screen doesn't get updated after each command.
                        - There is no normal command-line editing.
                        - Mappings and abbreviations are not used.
                        In fact, you are editing the lines with the ""standard""
                        line-input editing commands (&lt;Del&gt; or &lt;BS&gt; to erase,
                        CTRL-U to kill the whole line).
                        Vim will enter this mode by default if it's invoked as
                        ""ex"" on the command-line.
                        Use the "":vi"" command :visual to exit ""Ex"" mode.
                        Note: In older versions of Vim ""Q"" formatted text,
                        that is now done with gq.  But if you use the
                        vimrc_example.vim script ""Q"" works like ""gq"".

                                        gQ
gQ                      Switch to ""Ex"" mode like with ""Q"", but really behave
                        like typing "":"" commands after another.  All command
                        line editing, completion etc. is available.
                        Use the "":vi"" command :visual to exit ""Ex"" mode.
                        {not in Vi}
</code></pre>

<p>The first paragraph (<code>Q</code>) documents ex mode (<code>-e</code>), and the second one documents the improved ex mode (<code>-E</code>).</p>

<p>With ex mode (<code>-e</code>), Vim tries to ""emulate"" Ex as much as possible, and a number of Vim improvements won't work (such as mappings, user-defined functions, line editing).</p>

<p>With improved ex mode (<code>-E</code>), Vim ""really behaves like typing "":"" commands after another"".</p>
","2695"
"File Type dependent key mapping","728","","<p>I'm trying to setup mappings for <code>&lt;C-]&gt;</code> that, depending on the buffer's file type, trigger different functions. For example, if I'm in a Javascript buffer, I want <code>&lt;C-]&gt;</code> to trigger <code>:TernDef</code>. If I'm in a C buffer, I want it to trigger <code>:YcmCompleter GoTo</code>. I tried <code>autocmd FileType c nnoremap &lt;C-]&gt; :YcmCompleter GoTo&lt;CR&gt;</code> but it just seems to ignore that. </p>
","<p>That autocmd looks fine; however, you should define <em>buffer-local</em> mappings (with <code>&lt;buffer&gt;</code>); else, editing one type of file will override the other type's (global) mapping:</p>

<pre><code>autocmd FileType c          nnoremap &lt;buffer&gt; &lt;C-]&gt; :YcmCompleter GoTo&lt;CR&gt;
autocmd FileType javascript nnoremap &lt;buffer&gt; &lt;C-]&gt; :TernDef&lt;CR&gt;
</code></pre>

<h3>Critique of the autocmd approach</h3>

<p>You can define mappings for certain filetypes by prepending <code>:autocmd Filetype {filetype} ...</code>, and put that into your <code>~/.vimrc</code>. But that gets unwieldy as you add mappings and other settings for various filetypes. Better put the <code>:map</code> commands into <code>~/.vim/ftplugin/{filetype}_mappings.vim</code>. (This requires that you have <code>:filetype plugin on</code>.)</p>
","10666"
"Same vimrc, customized per machine","722","","<p>I use the same versioned .vimrc on several machines. </p>

<p>Is there a way of customise that file to enable/disable a plugin based on machine name or something like that?</p>

<p>As example, I have something like that in my .bash_profile:</p>

<pre class=""lang-bash prettyprint-override""><code># common things
...

if [[ $(uname) == ""Darwin"" ]]
then
     # mac settings
else
     # linux settings
fi
</code></pre>
","<p>You can access your environment variable and external command from vim, so you can do:</p>

<pre><code>if system('uname') =~ ""Darwin""
     echo 'mac'
else
     echo 'other'
endif
</code></pre>

<p>Note that you can use <code>=~</code> instead of <code>==</code> to match the regex instead of the exact string (on my machine, <code>uname</code> gives me a newline).</p>

<p>or</p>

<pre><code>if exists('$TMUX')
  echo 'in tmux'
else
  echo 'not in tmux'
endif
</code></pre>
","7660"
"How can I move the cursor to the top or bottom of the screen?","721","","<p>I know that <code>gg</code> and <code>G</code> can move the cursor to the top and bottom of the file. But is there a way to jump to the top or bottom of the visible window?</p>
","<p>Type <kbd>H</kbd> (capital H) to move to the top of the screen.</p>

<p>Type <kbd>L</kbd> (capital L) to move to the bottom of the screen.</p>
","81"
"How to share config between vim and Neovim","719","","<p>I started using neovim and moved my <code>.vimrc</code> to <code>.config/nvim/init.vim</code> and other stuff is located in <code>.local/share/nvim</code>.</p>

<p>What is the best way to share configs or even plugins between vim and Neovim?
Symlinks? Can I change the directories in the .vimrc to use only one symlink?</p>

<p>After migriting my vim config to Neovim's default location, this seems to work almost:</p>

<pre><code>ln -s ~/.local/share/nvim/site ~/.vim 
ln -s .config/nvim/init.vim .vimrc
</code></pre>

<p>Some plugins (using using <a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow noreferrer"">vim-plug</a>) don't seem to work correctly. I can't load custom colorschmes nor vim-airline.</p>

<p><strong>Edit:</strong> I think I found a way to make it work, but feel free to post better ways, e.g. with less symlinks.</p>
","<p>Turns out my solution above actually works, there were just two minor tweaks missing.</p>

<p>Having your config in Neovim's default location, do something:</p>

<pre><code>mkdir -p ~/.local/share/nvim/site
ln -s ~/.local/share/nvim/site ~/.vim 
ln -s .config/nvim/init.vim .vimrc
</code></pre>

<p>To fix the colorscheme I <a href=""https://stackoverflow.com/a/10778126/859591"">had to set to</a> <a href=""http://vim.wikia.com/wiki/256_colors_in_vim"" rel=""nofollow noreferrer"">256 terminal color mode</a>, i.e. add this to your .vimrc (= init.vim) file, which <a href=""https://github.com/neovim/neovim/wiki/FAQ#colors-arent-displayed-correctly"" rel=""nofollow noreferrer"">will be ignored by nvim</a>:</p>

<pre><code>set t_Co=256  "" Note: Neovim ignores t_Co and other terminal codes.
</code></pre>

<p>To get vim-airline I <a href=""https://github.com/vim-airline/vim-airline/wiki/FAQ#vim-airline-doesnt-appear-until-i-create-a-new-split"" rel=""nofollow noreferrer"">added the following snippet</a> to .vimrc:</p>

<pre><code>set laststatus=2
</code></pre>

<p>I don't quite understand why this is necessary only in vim and not in Neovim, but I am not <a href=""https://github.com/vim-airline/vim-airline/issues/130"" rel=""nofollow noreferrer"">the</a> <a href=""https://github.com/vim-airline/vim-airline/issues/334"" rel=""nofollow noreferrer"">only</a> <a href=""https://github.com/vim-airline/vim-airline/issues/20"" rel=""nofollow noreferrer"">one</a> stumbling upon this thing.</p>
","12795"
"Exuberant Ctags: CTRL-] and "":tag"" went wrong","717","","<p>When I hit <code>&lt;C-]&gt;</code> or type <code>:tag {indent}</code>, vim does not jump to the first tag that matches the keyword under the cursor. Instead, it prompts me to select from multiple matches for the word.</p>

<p>Vim mistakes <code>&lt;C-]&gt;</code> for <code>g&lt;C-]&gt;</code> and <code>:tag {indent}</code> for <code>tjump {indent}</code>.</p>

<hr>

<p><strong>Update:</strong></p>

<ol>
<li><p>When I launch vim without sourcing my <code>.vimrc</code> file, <code>&lt;C-]&gt;</code> or <code>:tag {indent}</code> is ok, whether all initializations are skipped with the argument <code>-u NONE</code>, or just the plugins are sourced with the argument <code>-u NORC</code>.</p></li>
<li><p>When I launch vim sourcing my <code>.vimrc</code> file, <code>&lt;C-]&gt;</code> or <code>:tag {indent}</code> goes wrong, whether I skip loading plugins with the argument <code>--noplugin</code> or not.</p></li>
</ol>
","<p>To see all the files that Vim sourced during launch, I typed <code>:scriptnames</code>.</p>

<p>I found that:</p>

<ol>
<li>When launching vim with the command <code>$vim --noplugin</code> or <code>$vim</code>, there is a <code>/etc/vimrc</code> file which is sourced;</li>
<li>When launching vim with <code>$vim -u NONE</code> or <code>$vim -u NORC</code>, this <code>/etc/vimrc</code> file is gone.</li>
</ol>

<p>There are other differences in the list of sourced files, but only <code>/etc/vimrc</code> caught my eye because <code>vimrc</code> is included in this path.</p>

<p>Then I experimented with <code>/etc/vimrc</code> and I found that one statement in it was modifying the behavior <code>&lt;C-]&gt;</code> and <code>:tag {indent}</code>:</p>

<pre><code>set cscopetag
</code></pre>

<p>When I comment out this line, the problem no longer exists.</p>

<p>From the vim help (<code>:help cscopetag</code>):</p>

<blockquote>
  <p>If 'cscopetag' is set, the commands "":tag"" and CTRL-] as well as ""vim
  -t"" will always use :cstag instead of the default :tag behavior.</p>
</blockquote>

<p><code>:help :cstag</code>:</p>

<blockquote>
  <p>If you use cscope as well as ctags, |:cstag| allows you to search one
  or the other before making a jump.  For example, you can choose to
  first search your cscope database(s) for a match, and if one is not
  found, then your tags file(s) will be searched.  The order in which
  this happens is determined by the value of |csto|.  See
  |cscope-options| for more details.</p>
  
  <p>|:cstag| performs the equivalent of "":cs find g"" on the identifier
  when searching through the cscope database(s).</p>
  
  <p><strong>|:cstag| performs the equivalent of |:tjump| on the identifier when
  searching through your tags file(s).</strong></p>
</blockquote>
","5993"
"Start Vim in insert mode for new files","717","","<p>I mostly use Vim to edit configuration files so I understand why it starts in <strong>normal mode</strong>. But I also use <em>vi mode</em> for the REPL (bash, zsh, ipython, etc.) and the shell always starts in <strong>insert mode</strong> (this makes sense because you just want to start typing a command).</p>

<p>For the same reason, when I open a new empty file <code>vim foo.txt</code>, I want to be in insert mode. So I'm looking for a <em>vimrc</em> function that checks if the file is empty and then put me in insert mode.</p>

<p>In this way I can be consistent across the terminal. When there aren't text objects I know I'm in insert mode.</p>
","<p>You need to add this to your vimrc:</p>

<pre><code>autocmd BufNewFile * startinsert
</code></pre>

<p>The autocommand creates a command which is executed on a specific event.</p>

<p>Here the event is <code>BufNewFile</code> the doc descibes it has:</p>

<blockquote>
  <p>When starting to edit a file that doesn't
                exist.  Can be used to read in a skeleton
                file.</p>
</blockquote>

<p>The <code>*</code> is here to execute the command on every new file (not a specific filetype or name)</p>

<p>And the command to be executed is <code>startinsert</code> which starts insert mode.</p>

<p>Note that it will also work for new files edited from vim with <code>e foo.txt</code> for example.</p>

<p>See:</p>

<ul>
<li><a href=""http://vimhelp.appspot.com/autocmd.txt.html#autocmd%2devents"" rel=""noreferrer""><code>:h autocmd-events</code></a></li>
<li><a href=""http://vimhelp.appspot.com/autocmd.txt.html#BufNewFile"" rel=""noreferrer""><code>:h BufNewFile</code></a></li>
<li><a href=""http://vimhelp.appspot.com/insert.txt.html#%3astartinsert"" rel=""noreferrer""><code>:h :startinsert</code></a></li>
</ul>
","13517"
"Adding conceal to already existing syntax highlighting?","716","","<p>I'm using Vim with the Vaxe plugin for syntax highlighting, the plugin's highlighting file is <a href=""https://github.com/jdonaldson/vaxe/blob/master/syntax/haxe.vim"" rel=""nofollow"">here</a> for reference.</p>

<p>I'm trying to add some conceals to tidy up the code visually, but I can't seem to get anything to apply.</p>

<p>The simplest thing I'm trying to achieve as to conceal the word ""package"" as just the letter ""p"".</p>

<p>Using various plugins like SyntaxAttr.vim, I determined the syntax attributes for the word package are:</p>

<pre><code>hi&lt;haxeTypeDecl&gt; trans&lt;haxeTypeDecl&gt; lo&lt;Statement&gt;
</code></pre>

<p>So I try to add it with:</p>

<pre><code>:syn match haxeTypeDecl /package/ conceal cchar=p
</code></pre>

<p>The entry seems to be added as I can see it with "":syn"" as:</p>

<pre><code>haxeTypeDecl   xxx abstract interface from import to using enum class package
               match /^class\&gt;/
               match /[^.]\s*\&lt;class\&gt;/ms=s+1
               match /package/  conceal
               links to Keyword
</code></pre>

<p>Then I set conceal level to 2, but the text is not concealed. It works when I test it in an empty stand alone document, but doesn't in a real document. I'm guessing I'm not properly overriding the highlighting, but I'm not sure what I'm meant to do. Do I make my own group and linked it with "":hl! link""?, add a match higher priority match with matchadd()? Do I have to also override the Statement group or the Keywords group? Vim's syntax highlighting seems unbelievably dense.</p>

<p>Thank's in advance!</p>
","<p>The problem in your case is, that the syntax highlighting script for <a href=""https://github.com/jdonaldson/vaxe/blob/master/syntax/haxe.vim#L23"" rel=""nofollow"">package</a> uses a keyword (<code>:h syn-keyword</code>) and that always has priority before any of the syn-match or syn-region rules.</p>

<p>In your case, I would therefore simply use a <code>matchadd()</code> call like this:</p>

<pre><code> :call matchadd('Conceal', 'package', 10, 99, {'conceal': 'p'})
 :set conceallevel=2 concealcursor=nv
</code></pre>

<p>this needs a relatively new Vim version (I don't remember the exact patch level, but a 7.4.700 should work)</p>
","5698"
"How to get git diff in vim when writing a commit message?","716","","<p>This may be a weird question, because I already have this setup in my dotfiles somewhere, I just don't know how to tell a friend to set it up in their dotfiles.</p>

<p>I want to know how to get a nice git diff displayed in your gitcommit file, whenever you compose a git commit message with vim. Here are <a href=""https://github.com/aharris88/dotfiles"" rel=""nofollow noreferrer"">my dotfiles</a> if that helps. I couldn't find the answer online and it was hard to search without knowing what to search for.</p>

<p><img src=""https://i.stack.imgur.com/Y2p3W.png"" alt=""enter image description here""></p>
","<p>This behavior seems to come from calling <code>git commit -v</code> or <code>git commit --verbose</code>. Not sure where you're doing that in your dotfiles, but I'd recommend telling him to set an alias in his git config that does that.</p>
","3191"
"Can't get Jedi's autocompletion on SuperTab","715","","<p>I installed both plugins using Pathogen, but they don't work together as it should be. That is, if I use TAB, I get SuperTab's completion (autocomplete what I have previously written) whereas if I use CTRL + SPACE I get Jedi's completion (everything from libs: classes, modules, etc).</p>

<p>In theory, if both plugins are installed SuperTab should handle Jedi seamlessly, but that's not my case. I found <a href=""https://github.com/davidhalter/jedi-vim/issues/165"" rel=""nofollow"">this report</a> of some people experiencing the same behavior, while others saying it works for them. There is no solution provided though.</p>

<p>The plugins I'm using don't override each other:</p>

<pre><code>ls ~/.vim/bundle/
auto-pairs  nerdtree  syntastic    vim-trailing-whitespace
jedi-vim    supertab  vim-airline
</code></pre>

<p>So what else may be causing this behavior?</p>

<p>vimrc:</p>

<pre><code>set nu
set ts=4
set sw=4
set mouse=a
set showmatch
set expandtab
set background=dark
syntax on
filetype plugin indent on

execute pathogen#infect()

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
</code></pre>
","<p>As a simple solution, try adding this line to your vimrc:</p>

<pre><code>let g:SuperTabDefaultCompletionType = ""context""
</code></pre>

<p>This will result in the following behavior, which should be what you need in most cases:</p>

<pre><code>/usr/l&lt;tab&gt;  # will use filename completion
myvar.t&lt;tab&gt; # will use user completion if completefunc set, or
             # omni completion if omnifunc set.
myvar-&gt;&lt;tab&gt; # same as above
</code></pre>

<p>You can always check <code>:help supertab-completioncontexts</code> if you need a more personalized behavior.</p>

<p>What jedi-vim does is set <code>omnifunc</code> option to use the function it provides. This means that jedi-vim is only used when performing omni-completion. If you want to force SuperTab to <strong>always</strong> use omni-completion then you can also use the following option <strong>instead</strong> of the above one:</p>

<pre><code>let g:SuperTabContextDefaultCompletionType = ""&lt;c-x&gt;&lt;c-o&gt;""
</code></pre>
","5450"
"Why can't UltiSnips use python while 'python' is enabled?","715","","<p>I want to use the <a href=""https://github.com/SirVer/ultisnips"" rel=""nofollow"">UltiSnips</a> plugin in Vim 7.4 under Windows 10.</p>

<p>When enter <code>:version</code> I see that python is there, but when I launch gVim, it says in a dialog box </p>

<pre><code>UltiSnips requires py &gt;= 2.7 or py3`
</code></pre>

<p>How can I make my system compatible with UltiSnips (e. g. find a Vim distro with support for Python 2.7 or 3) ?</p>
","<p>The problem comes from the fact that your Vim setup supports python, but python is not installed on your system.</p>

<p>When Vim has the <code>'python'</code> and/or <code>'python3'</code> features enabled that means that it provides an interface to interact with python code: you can make Vim to ask the system to execute a python statement or a whole python code.</p>

<p>Even if the interface is enabled, Vim is not a python compiler/executer: you still need to install them on your system so that Vim can make a call to these tools. See <a href=""https://www.python.org/downloads/windows/"" rel=""nofollow"">this page</a> to get the executable to install python.</p>

<hr>

<p>In the comments OP also had a question about which version of python (python2 or python3) to install:</p>

<p>Here python was needed to make UltiSnips working, as UltiSnips doesn't recommend a specific version I'd recommend to install whatever version you want, both should work. Remember that it is possible to install several version of python on the same system.</p>
","8905"
"How to check with Vimscript whether python support is enabled?","713","","<p>I think it would be very nice if I can check whether current vim was compiled with python support, instead of having error message popping out every time vim is launched.</p>

<p>Can this check be done in vimscript?</p>

<p>Note that running shell wouldn't work if multiple vim's are installed and user launch one of them:</p>

<pre><code>vim --version | grep -q '\+python\&gt;'
</code></pre>

<p>It would be considered as a better approach if it could be checked within vimscript alone.</p>
","<p>How about</p>

<pre><code>if has('python')
    ...
endif
</code></pre>

<p>See <code>:help has()</code> and <code>:help feature-list</code> at list item 1 and <code>/python</code>.</p>
","4311"
"Quickfix Window not Opening Automatically","707","","<p>I have realized that the quickfix window isn't opening automatically when it's supposed to. I have tested this on both Gvim and vim 7.4 on Windows 10 Version   10.0.10586 Build 10586. I have a few plugins installed but I want to know how I might debug this first before I strip my vim configuration down to a minimum working example. Where do I start looking for the problem?</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Feb 18 2016 07:00:12)
MS-Windows 32-bit GUI version
Included patches: 1-1345
Compiled by jrinehar@JRINEHAR
Huge version with GUI.  Features included (+) or not (-):
+acl                +emacs_tags         +modify_fname       -sun_workshop
+arabic             +eval               +mouse              +syntax
+autocmd            +ex_extra           +mouseshape         +tag_binary
+balloon_eval       +extra_search       +multi_byte_ime/dyn +tag_old_static
+browse             +farsi              +multi_lang         -tag_any_white
++builtin_terms     +file_in_path       -mzscheme           -tcl
+byte_offset        +find_in_path       +netbeans_intg      -tgetent
+channel            +float              -ole                -termresponse
+cindent            +folding            +path_extra         +textobjects
+clientserver       -footer             -perl               +title
+clipboard          +gettext/dyn        +persistent_undo    +toolbar
+cmdline_compl      -hangul_input       -postscript         +user_commands
+cmdline_hist       +iconv/dyn          +printer            +vertsplit
+cmdline_info       +insert_expand      +profile            +virtualedit
+comments           +job                +python/dyn         +visual
+conceal            +jumplist           -python3            +visualextra
+cryptv             +keymap             +quickfix           +viminfo
+cscope             +langmap            +reltime            +vreplace
+cursorbind         +libcall            +rightleft          +wildignore
+cursorshape        +linebreak          -ruby               +wildmenu
+dialog_con_gui     +lispindent         +scrollbind         +windows
+diff               +listcmds           +signs              +writebackup
+digraphs           +localmap           +smartindent        -xfontset
-directx            +lua/dyn            -sniff              -xim
-dnd                +menu               +startuptime        -xterm_save
-ebcdic             +mksession          +statusline         +xpm_w32
   system vimrc file: ""$VIM\vimrc""
     user vimrc file: ""$HOME\_vimrc""
 2nd user vimrc file: ""$HOME\vimfiles\vimrc""
 3rd user vimrc file: ""$VIM\_vimrc""
      user exrc file: ""$HOME\_exrc""
  2nd user exrc file: ""$VIM\_exrc""
  system gvimrc file: ""$VIM\gvimrc""
    user gvimrc file: ""$HOME\_gvimrc""
2nd user gvimrc file: ""$HOME\vimfiles\gvimrc""
3rd user gvimrc file: ""$VIM\_gvimrc""
    system menu file: ""$VIMRUNTIME\menu.vim""
Compilation: gcc -Iproto -DWIN32 -DWINVER=0x0500 -D_WIN32_WINNT=0x0500 -DHAVE_PATHDEF -DFEAT_HUGE -DHAVE_GETTEXT -DHAVE_LOCALE_H -DDYNAMIC_GETTEXT -DFEAT_CSCOPE -DFEAT_NETBEANS_INTG -DFEAT_CHANNEL -DFEAT_GUI_W32 -DFEAT_CLIPBOARD -DFEAT_MBYTE -DFEAT_MBYTE_IME -DDYNAMIC_IME -DDYNAMIC_ICONV -pipe -w -march=i686 -Wall -IC:/Lua/include -IC:/Lua -DFEAT_LUA -DDYNAMIC_LUA -DDYNAMIC_LUA_DLL=""lua53.dll"" -DFEAT_PYTHON  -DDYNAMIC_PYTHON -DDYNAMIC_PYTHON_DLL=""python27.dll"" -DFEAT_XPM_W32 -I xpm/x86/include -I xpm/x86/../include -O3 -fomit-frame-pointer -freg-struct-return -s
Linking: gcc -Iproto -DWIN32 -DWINVER=0x0500 -D_WIN32_WINNT=0x0500 -DHAVE_PATHDEF -DFEAT_HUGE -DHAVE_GETTEXT -DHAVE_LOCALE_H -DDYNAMIC_GETTEXT -DFEAT_CSCOPE -DFEAT_NETBEANS_INTG -DFEAT_CHANNEL -DFEAT_GUI_W32 -DFEAT_CLIPBOARD -DFEAT_MBYTE -DFEAT_MBYTE_IME -DDYNAMIC_IME -DDYNAMIC_ICONV -pipe -w -march=i686 -Wall -IC:/Lua/include -IC:/Lua -DFEAT_LUA -DDYNAMIC_LUA -DDYNAMIC_LUA_DLL=""lua53.dll"" -DFEAT_PYTHON  -DDYNAMIC_PYTHON -DDYNAMIC_PYTHON_DLL=""python27.dll"" -DFEAT_XPM_W32 -I xpm/x86/include -I xpm/x86/../include -O3 -fomit-frame-pointer -freg-struct-return -s -mwindows -o gvim.exe -lkernel32 -luser32 -lgdi32 -ladvapi32 -lcomdlg32 -lcomctl32 -lversion -lwsock32 -Lxpm/x86/lib -lXpm -lole32 -luuid
</code></pre>
","<p>In <a href=""https://github.com/LucHermitte/vim-build-tools-wrapper"" rel=""nofollow"">BuildToolWrappers</a>, I have encapsulated <code>:make</code> + <code>:cwindow</code> behind another <code>:Make</code> command. (the command does many more things, but this is the part you are looking for)</p>
","6609"
"Copying multiple words (from different lines) and paste them at once","704","","<p>I want to copy different strings from different lines of the file and then paste them together at once. In other words, I want to collect different words in a basket and then paste them at once. How can I do this?</p>
","<p>Use an uppercase register when yanking (copying):</p>

<pre><code>""Ay
</code></pre>

<p><code>""A</code> says to <em>append</em> to the <code>a</code> register, as opposed to <code>""a</code> which would <em>replace</em> the contents of the <code>a</code> register.</p>

<p>Once you've copied everything into the register, you can then paste it all at once with:</p>

<pre><code>""ap
</code></pre>
","11097"
"Is it possible to use a delegate or to pass a function as argument in Vimscript?","700","","<p>I am trying to create a small plugin to learn vimscript, my goal is to create some functions processing a selected text and replacing it with the result. The script contains the following items:</p>

<ul>
<li><p><strong>Two functions processing text:</strong> they take a string as parameter an return the string which should be used to replace the original text. For now I have only two but there might by a lot more in a few time.</p></li>
<li><p><strong>A function getting the selected text:</strong> which simply yank the last selection and return it.</p></li>
<li><p><strong>A wrapper function:</strong> which call a processing function, get its result and replace the old selection with this result.</p></li>
</ul>

<p>For now my wrapper function looks like this:</p>

<pre><code>function! Wrapper()
    "" Get the string to insert
    let @x = Type1ProcessString(GetSelectedText())

    "" remove the old selection
    normal gvd

    "" insert the new string
    normal ""xp
endfunction
</code></pre>

<p>And I have to create a second wrapper replacing the line 3 with</p>

<pre><code>let @x = Type2ProcessString(GetSelectedText())
</code></pre>

<p>I'd like to give to my wrapper function a parameter containing the Process function to execute and use a generic call in line 3. For now I have tried using <code>call</code> different ways like, for example, this: </p>

<pre><code>let @x = call('a:functionToExecute', GetSelectedText()) 
</code></pre>

<p>but I haven't been really succesful and <code>:h call</code> hasn't been really helpful on the delegate topic.</p>

<p><strong>To sum it up here are my questions:</strong></p>

<ul>
<li>How can I make only one wrapper function for all the processing ones?</li>
<li>Is there something which works as a delegate in vimscript?</li>
<li>If delegates doesn't exist what would be a ""good"" way to do what I want?</li>
</ul>
","<p>To answer youre question: the prototype of <code>call()</code> in the manual is <code>call({func}, {arglist} [, {dict}])</code>; the <code>{arglist}</code> argument needs to be literally a List object, not a list of arguments.  That is, you have to write it like this:</p>

<pre><code>let @x = call(a:functionToExecute, [GetSelectedText()])
</code></pre>

<p>This assumes <code>a:functionToExecute</code> is either a Funcref (see <code>:help Funcref</code>), or the name of a function (i.e. a string, such as <code>'Type1ProcessString'</code>).</p>

<p>Now, that's a powerful feature that gives Vim a sort of LISP-like quality,  but you'd probably seldom use it as above.  If <code>a:functionToExecute</code> is a string, the name of a function, then you can do this:</p>

<pre><code>function! Wrapper(functionToExecute)
    "" ...
    let s:processing = function(a:functionToExecute)
    let @x = s:processing(GetSelectedText())
    "" ...
endfunction
</code></pre>

<p>and you'd call the wrapper with the name of the function:</p>

<pre><code>call Wrapper('Type1ProcessString')
</code></pre>

<p>If on the other hand <code>a:functionToExecute</code> is a Funcref, you can call it directly:</p>

<pre><code>function! Wrapper(functionToExecute)
    "" ...
    let @x = a:functionToExecute(GetSelectedText())
    "" ...
endfunction
</code></pre>

<p>but you need to call the wrapper like this:</p>

<pre><code>call Wrapper(function('Type1ProcessString'))
</code></pre>

<p>You can check for existence of functions with <code>exists('*name')</code>.  This makes possible the following little trick:</p>

<pre><code>let s:width = function(exists('*strwidth') ? 'strwidth' : 'strlen')
</code></pre>

<p>i.e. a function that uses the built-in <code>strwidth()</code> if Vim is new enough to have it, and falls back to <code>strlen()</code> otherwise (I'm not arguing that such a fallback makes sense; I'm just saying it can be done). :)</p>

<p>With dictionary functions (see <code>:help Dictionary-function</code>) you can define something resembling classes:</p>

<pre><code>let g:MyClass = {}

function! g:MyClass.New(...)
    let newObj = copy(self)

    if a:0 &amp;&amp; type(a:1) == type({})
        let newObj._attributes = deepcopy(a:1)
    endif
    if exists('*MyClassProcess')
        let newObj._process = function('MyClassProcess')
    else
        let newObj._process = function('s:_process_default')
    endif

    return newObj
endfunction

function! g:MyClass.getFoo() dict
    return get(get(self, '_attributes', {}), 'foo')
endfunction

function! g:MyClass.setFoo(val) dict
    if !has_key(self, '_attributes')
        let self._attributes = {}
    endif
    let self._attributes['foo'] = a:val
endfunction

function! g:MyClass.process() dict
    call self._process()
endfunction

function! s:_process_default()
    echomsg 'nothing to see here, define MyClassProcess() to make me interesting'
endfunction
</code></pre>

<p>Then you'd instantiate objects like this:</p>

<pre><code>let little_object = g:MyClass.New({'foo': 'bar'})
</code></pre>

<p>And call its methods:</p>

<pre><code>call little_object.setFoo('baz')
echomsg little_object.getFoo()
call little_object.process()
</code></pre>

<p>You can also have class attributes and methods:</p>

<pre><code>let g:MyClass.__meaning_of_life = 42

function g:MyClass.GetMeaningOfLife()
    return get(g:MyClass, '__meaning_of_life')
endfunction
</code></pre>

<p>(notice no need for <code>dict</code> here).</p>

<p><strong>Edit:</strong>  Subclassing is something like this:</p>

<pre><code>let g:MySubclass = copy(g:MyClass)
call extend(g:MySubclass, subclass_attributes)
</code></pre>

<p>The subtle point here is the use of <code>copy()</code> instead of <code>deepcopy()</code>.  The reason for this is to be able to access the attributes of the parent class by reference.  This can be achieved, but it's highly fragile and getting it right is far from trivial.  Another potential problem is that this kind of subclass conflates <code>is-a</code> with <code>has-a</code>.  For this reasons class attributes are usually not really worth the pain.</p>

<p>Ok, this should be enough to give you some food for thought.</p>

<p>Back to your initial code snippet, there are two details with it that could be improved:</p>

<ul>
<li>you don't need <code>normal gvd</code> to remove the old selection, <code>normal ""xp</code> will replace it even if you don't kill it first</li>
<li>use <code>call setreg('x', [lines], type)</code> instead of <code>let @x = [lines]</code>.  This explicitly sets the type of the register <code>x</code>.  Otherwise you're relying on <code>x</code> already having the correct type (i.e. characterwise, linewise, or blockwise).</li>
</ul>
","3923"
"How to display invoked keystrokes and commands in normal mode?","699","","<p>How I can activate option which will display my pressed keystrokes or executed commands in normal mode on the screen?</p>

<p>Especially it would be good, if it would give a slight info what specific keystroke did (like in case of errors).</p>

<p>I've tried to use <code>:set showcmd</code>, but it doesn't show single keystrokes like <code>w</code>, <code>b</code>, <code>j</code>, etc.</p>

<p>I know it's possible to <a href=""https://vi.stackexchange.com/questions/570/can-i-see-the-history-of-key-presses-in-normal-mode"">show a command history</a> by <code>q:</code>, but I'm looking for some method of displaying them automatically on the screen while using/pressing them.</p>
","<p>Possibly related: <a href=""https://vi.stackexchange.com/questions/570/can-i-see-the-history-of-key-presses-in-normal-mode"">Can I see the history of key presses in normal mode?</a></p>

<p>That question is about displaying the history of the commands in normal mode. If you are asking about the ex command history, then do
<code>
q:
</code></p>
","1898"
"How do I get Vim to compile my .tex file when executing :w?","698","","<p>My writing routine is like this: </p>

<ol>
<li>I edit a .tex file using vim </li>
<li>I go to the command line and I compile it using <code>pdflatex</code>. I find myself always saving the file with <code>:w</code> and immediately having to switch terminals to execute <code>pdflatex</code> (I use Ubuntu) to compile it. </li>
</ol>

<p>This annoys me. I would like to make this more efficient so that I can manage to do both steps with a single shot. Is there a way to configure vim so that every time I save a <code>.tex</code> file with <code>:w</code>, the command <code>pdflatex</code> is executed automatically?</p>
","<p>Don't be so inefficient! Your time is valuable. Use the <code>vimtex</code> plugin offered by @lervag: <a href=""https://github.com/lervag/vimtex/"" rel=""nofollow"">see here</a>. You can control all of the plugins you install by using <a href=""https://github.com/VundleVim/Vundle.vim"" rel=""nofollow""><code>Vundle</code></a> or any similar plugin manager (<code>vim-plug</code> is getting pretty popular).</p>

<p>Why waste your time installing <code>vimtex</code>? Great question!</p>

<h3>Features</h3>

<ol>
<li>Continuous compilation using <code>latexmk</code> (please and thank you!)</li>
<li>Automatic warning/error notification using the vim quickfix window.</li>
<li>Forward and inverse search.</li>
<li>Support for a variety of PDF viewers.</li>
<li>Support for multi-file projects (I love this one) in conjunction with <code>gf</code> and <code>&lt;ctrl-w&gt;gf</code>.</li>
<li> commands that make things perform operations like <code>latexmk -C</code>.</li>
<li>It's under active development!</li>
<li>So much more!</li>
</ol>

<p>Note, feature number 1 is the one which addresses your question. Each time you execute <code>:w</code> your document will be saved and automatically recompiled by <code>latexmk</code>. <code>latexmk</code> watches your LaTeX file for changes, automatically recompiling when changes are detected.</p>

<p>This post is not sponsored by or promoted by any developer or affiliate of the <code>vimtex</code> team (I'm just a lover).</p>

<p>Go be efficient!</p>
","7130"
"How to check if file is binary?","692","","<p>Is there any way to determine within Vim that the file which I'm editing is either in text or binary format?</p>

<p>For example:</p>

<pre><code>vim http://example.com/
</code></pre>

<p>vs:</p>

<pre><code>vim http://cdn.sstatic.net/vi/img/apple-touch-icon.png
</code></pre>

<p>Something that would return either True or False based on the content of the current file. One <a href=""https://vi.stackexchange.com/q/3211/467"">possible scenario</a> would be, if the file is in gzip format, I'd like to perform uncompression of it.</p>
","<p>Most programs (such as <code>grep</code>, <code>git</code>, <code>mercurial</code>, etc.) consider a file to be binary if it contains a NULL byte.</p>

<p>You can check this with Vim like so:</p>

<pre><code>fun! IsBinary()
    return !!search('\%u0000', 'wn')
endfun
</code></pre>

<p>Note that this searches the entire buffer; and won't be very fast for large files. A faster way would be to use the <code>file</code> utility:</p>

<pre><code>fun! IsBinary2()
    return system('file -ib ' . shellescape(expand('%:p'))) !~# '^text/plain'
endfun
</code></pre>

<p><code>file</code> has a list known ""magic"" patterns it can check against, and will be a lot faster for some files. The downside is that <code>file</code> isn't available by default on some systems (Windows, some Linuxes).</p>

<p>It gets the MIME type, so you can do more advanced matching, such as:</p>

<pre><code>fun! IsGzip()
    return system('file -ib ' . shellescape(expand('%:p'))) =~# '^application/x-gzip'
endfun
</code></pre>

<blockquote>
  <p>if the file is in gzip format, I'd like to perform uncompression of it.</p>
</blockquote>

<p>gzip files pretty much always end in <code>.gz</code>; in fact, some <code>gzip</code> flavours won't even work if the file <em>doesn't</em> end in .gz; with GNU gzip:</p>

<pre><code>$ gzip z
$ mv z.gz aaaaa
$ gzip -d aaaaa
gzip: aaaaa: unknown suffix -- ignored
Exit 2
</code></pre>

<p>So matching the filename with an autocmd would probably be a better solution :-) In fact, there's already an example of this in the help: <a href=""http://vimhelp.appspot.com/autocmd.txt.html#gzip-example""><code>:help gzip-example</code></a> ;-)</p>
","3207"
"How do I stop a recursive macro at the end of the line?","691","","<p>How can I create a recursive macro so that it only runs until the end of the line?</p>

<p>Or how to run a recursive macro until the end of the line only?</p>
","<p>There is probably a simpler method but maybe you could try the following.</p>

<p>Let's say you will use register <code>q</code> to record your recursive macro.</p>

<p>At the very beginning of the recording, type:</p>

<pre><code>:let a = line('.')
</code></pre>

<p>Then, at the very end of the recording, instead of hitting <code>@q</code> to make the macro recursive, type the following command:</p>

<pre><code>:if line('.') == a | exe 'norm @q' | endif
</code></pre>

<p>Finally end the recording of the macro with <code>q</code>.</p>

<p>The last command you typed will replay the macro <code>q</code> (<code>exe 'norm @q'</code>) but only if the current line number (<code>line('.')</code>) is the same as the one initially stored in variable <code>a</code>.</p>

<p>The <code>:normal</code> command allows you to type normal commands (like <code>@q</code>) from Ex mode.<br>
And the reason why the command is wrapped into a string and executed by the command <code>:execute</code> is to prevent <code>:normal</code> from consuming (typing) the rest of the command (<code>|endif</code>).</p>

<hr>

<p>Usage example.</p>

<p>Let's say you have the following buffer:</p>

<pre><code>1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4
</code></pre>

<p>And you want to increment all the numbers from an arbitrary line with a recursive macro.</p>

<p>You could type <code>0</code> to move your cursor to the beginning of a line then start the recording of the macro :</p>

<pre><code>qqq
qq
:let a=line('.')
&lt;C-a&gt;
w
:if line('.')==a|exe 'norm @q'|endif
q
</code></pre>

<ol>
<li><code>qqq</code> clears the contents of register <code>q</code> so that when you initially call it during the definition of the macro, it will not interfere</li>
<li><code>qq</code> starts the recording</li>
<li><code>:let a=line('.')</code> stores current line number inside variable <code>a</code></li>
<li><kbd>Ctrl</kbd>+<kbd>a</kbd> increments the number under the cursor</li>
<li><code>w</code> moves the cursor to the next number</li>
<li><code>:if line('.')==a|exe 'norm @q'|endif</code> recalls the macro but only if
the line number didn't change</li>
<li><code>q</code> stops the recording</li>
</ol>

<p>Once you have defined your macro, if you position your cursor on the third line, hit <code>0</code> to move it to the beginning of the line, then hit <code>@q</code> to replay the macro <code>q</code>, it should only affect the current line and not the others:</p>

<pre><code>1 2 3 4
1 2 3 4
2 3 4 5
1 2 3 4
</code></pre>

<hr>

<p><strong>Make a macro recursive after the recording</strong></p>

<p>If you want, you can make your macro recursive after its recording using the fact that it's stored in a string inside a register and that you can concatenate two strings with the dot <code>.</code> operator.</p>

<p>This would give you several benefits:</p>

<ul>
<li>no need of clearing the register before the recording, because the characters <code>@q</code> will be added in the macro after it has been defined, and after you have overwritten whatever old contents was there</li>
<li>no need of typing anything unusual during the recording, you could focus on making a simple, working macro</li>
<li>possibility of testing it before making it recursive to see how it behaves</li>
</ul>

<p>If you record your macro as usual (non-recursively), you can make it recursive afterwards with the following command:</p>

<pre><code>let @q = @q . ""@q""
</code></pre>

<p>Or even shorter: <code>let @q .= ""@q""</code><br>
<code>.=</code> is an operator which allows to append a string to another one.</p>

<p>This should add the 2 characters <code>@q</code> at the very end of the sequence of keystrokes stored inside register <code>q</code>.
You could also define a custom command:</p>

<pre><code>command! -register RecursiveMacro let @&lt;reg&gt; .= ""@&lt;reg&gt;""
</code></pre>

<p>It defines the command <code>:RecursiveMacro</code> which waits for the name of a register as an argument (because of the <code>-register</code> attribute passed to <code>:command</code>).<br>
It's the same command as before, the only difference is you replace every occurrence of <code>q</code> with <code>&lt;reg&gt;</code>. When the command will be executed, Vim will automatically expand every occurrence of <code>&lt;reg&gt;</code> with the register name you provided.</p>

<p>Now, all you have to do is record your macro as usual (non-recursively), then type <code>:RecursiveMacro q</code> to make the macro stored inside register <code>q</code> recursive.</p>

<hr>

<p>You could do the same thing to make a macro recursive on the condition it stays on the current line:</p>

<pre><code>let @q = "":let a=line('.')\r"" . @q . "":if line('.')==a|exe 'norm @q'|endif\r""
</code></pre>

<p>It's the exact same thing described at the beginning of the post, except this time you do it after the recording. You just concatenate two strings, one before and one after whatever keystrokes the <code>q</code> register currently contains:  </p>

<ol>
<li><code>let @q =</code> redefines the contents of register <code>q</code></li>
<li><code>"":let a=line('.')\r""</code> stores the current line number inside the variable <code>a</code> before the macro does its work<br>
<code>\r</code> is necessary to tell Vim to press Enter and execute the command, see <code>:help expr-quote</code> for a list of similar special characters,  </li>
<li><code>. @q .</code> concatenates the current contents of the <code>q</code> register with the previous string and the next one,</li>
<li><code>"":if line('.')==a|exe 'norm @q'|endif\r""</code> recalls the macro <code>q</code> on the condition that the line didn't change</li>
</ol>

<p>Again, to save some keystrokes, you can automate the process by defining the following custom command:</p>

<pre><code>command! -register RecursiveMacroOnLine let @&lt;reg&gt; = "":let a=line('.')\r"" . @&lt;reg&gt; . "":if line('.')==a|exe 'norm @&lt;reg&gt;'|endif\r""
</code></pre>

<p>And again, all you have to do is record your macro as usual (non-recursively), then type <code>:RecursiveMacroOnLine q</code> to make the macro stored inside register <code>q</code> recursive on the condition it stays on the current line.</p>

<hr>

<p><strong>Merge the 2 commands</strong></p>

<p>You could also tweak <code>:RecursiveMacro</code> so that it covers the 2 cases:  </p>

<ul>
<li>make a macro recursive unconditionally,   </li>
<li>make a macro recursive on the condition it stays on the current line</li>
</ul>

<p>To do this, you could pass a second argument to <code>:RecursiveMacro</code>. The latter would simply test its value and, depending on the value, would execute one of the 2 previous commands. It would give something like this:</p>

<pre><code>command! -register -nargs=1 RecursiveMacro if &lt;args&gt; | let @&lt;reg&gt; .= ""@&lt;reg&gt;"" | else | let @&lt;reg&gt; = "":let a=line('.')\r"" . @&lt;reg&gt; . "":if line('.')==a|exe 'norm @&lt;reg&gt;'|endif\r"" | endif
</code></pre>

<p>Or (using line continuations/backslashes to make it a little more readable):</p>

<pre><code>command! -register -nargs=1 RecursiveMacro
           \ if &lt;args&gt; |
           \     let @&lt;reg&gt; .= ""@&lt;reg&gt;"" |
           \ else |
           \     let @&lt;reg&gt; = "":let a = line('.')\r"" .
           \                  @&lt;reg&gt; .
           \                  "":if line('.')==a | exe 'norm @&lt;reg&gt;' | endif\r"" |
           \ endif
</code></pre>

<p>It's the same as before, except this time you have to provide a 2nd argument to <code>:RecursiveMacro</code> (because of the <code>-nargs=1</code> attribute).<br>
When this new command will be executed, Vim will automatically expand <code>&lt;args&gt;</code> with the value you provided.<br>
If this 2nd argument is non-zero/true (<code>if &lt;args&gt;</code>) the first version of the command will be executed (the one which makes a macro recursive unconditionally), otherwise if it's zero/false then the second version will be executed (the one which makes a macro recursive on the condition it stays on the current line).</p>

<p>So going back to the previous example, it would give the following thing:</p>

<pre><code>qq
&lt;C-a&gt;
w
q
:RecursiveMacro q 0
3G
0@q
</code></pre>

<ol>
<li><code>qq</code> begins the recording of a macro inside register <code>q</code></li>
<li><code>&lt;C-a&gt;</code> increments the number under the cursor</li>
<li><code>w</code> moves the cursor to the next number</li>
<li><code>q</code> ends the recording</li>
<li><code>:RecursiveMacro q 0</code> makes the macro stored inside register <code>q</code>
recursive but only until the end of the line (because of the second argument <code>0</code>)</li>
<li><code>3G</code> moves your cursor to an arbitrary line (3 for example)</li>
<li><code>0@q</code> replays the recursive macro from the beginning of the line</li>
</ol>

<p>It should give the same result as before:</p>

<pre><code>1 2 3 4
1 2 3 4
2 3 4 5
1 2 3 4
</code></pre>

<p>But this time you didn't have to type the distracting commands during the recording of your macro, you could simply focus on making a working one.</p>

<p>And during step 5, if you had passed a non-zero argument to the command, that is if you had typed <code>:RecursiveMacro q 1</code> instead of <code>:RecursiveMacro q 0</code>, the macro <code>q</code> would have become recursive unconditionally, which would have given the following buffer:</p>

<pre><code>1 2 3 4
1 2 3 4
2 3 4 5
2 3 4 5
</code></pre>

<p>This time the macro wouldn't have stopped at the end of the 3rd line but at the end of the buffer.</p>

<hr>

<p>For more information, see:</p>

<pre><code>:help line()
:help :normal
:help :execute
:help :command-nargs
:help :command-register
</code></pre>
","6427"
"Go to X bytes from here","689","","<p>How can I move X bytes forward, starting from the current cursor location (including line breaks)?</p>

<p><a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#go"" rel=""nofollow noreferrer""><code>[count]go</code></a> could be used to move forward X bytes from the start of the buffer. I tried <code>Shift + V, G, [count]go</code> (assuming that <code>[count]go</code> would start counting from the begin of my selection), but unfortunately that did not work either because <code>go</code> only starts counting from the begin of the buffer.</p>

<p>I have also tried <code>:set rulerformat=%o</code> to display the current byte offset (as suggested by <a href=""https://vi.stackexchange.com/questions/3006/jumping-to-a-byte-offset-and-displaying-position-as-byte-offset"">Jumping to a byte offset, and displaying position as byte offset</a>), added the numbers in my head and finally issued <code>[count]go</code>. This works, but it is not very practical...</p>
","<p>I ended up using the following solution, which implements the logic from my question.</p>

<ul>
<li><code>[count]GO</code> to move <code>[count]</code> bytes forward.</li>
<li><code>[count]Go</code> to move <code>[count]</code> bytes backwards.</li>
</ul>

<p>Add this to your <code>.vimrc</code>:</p>

<pre><code>function! JumpToByte(byte_nr)
    "" See https://vi.stackexchange.com/a/3911/2720 for the byte counting bug
    let crt_byte = line2byte(line('.')) + col('.') - 1
    if version &lt; 781 &amp;&amp; &amp;l:binary == 1 &amp;&amp; &amp;l:eol == 0
        let crt_byte += 1
        let crt_byte += line('.') == 1
    endif
    let dst_byte = crt_byte + a:byte_nr
    execute ""normal "" . dst_byte . ""go""
endfunction
nnoremap &lt;expr&gt; &lt;silent&gt; GO "":&lt;c-u&gt;call JumpToByte("" . v:count . "")&lt;cr&gt;""
nnoremap &lt;expr&gt; &lt;silent&gt; Go "":&lt;c-u&gt;call JumpToByte(-"" . v:count . "")&lt;cr&gt;""
</code></pre>

<p>Thanks to VanLaser for his initial implementation, which put me in the right direction.</p>
","3852"
"Append lines of text after pattern using global command","688","","<p>I'm reworking a section of logic in some C code to avoid a memory leak that looks like this:</p>

<pre><code>switch (result) {
case CASE_1:
     return report(...);
case CASE_2:
     return report(...);
/*
 * More cases follow with the same pattern.
 */
}
</code></pre>

<p>I've used <code>%s/return report/report/</code> to remove the <code>return</code> statements, but now I need to add a line with <code>break;</code> after that, so the final result resembles something like this:</p>

<pre><code>switch (result) {
case CASE_1:
     report(...);
     break;
case CASE_2:
     report(...);
     break;
/*
 * More cases follow with the same pattern.
 */
}
</code></pre>

<p>I've tried using the <code>global</code> command to execute the <code>append</code> command with no success:</p>

<pre><code># Error ""E448: Trailing characters"" (potential bug in Vim?)
:g/report(""/a\
     break;

# Appends nothing and does not wait for text to be input.
:g/report(""/a
</code></pre>

<p>Trying the above in ex mode with Vim fails, and visual mode doesn't seem to work well with the insertion commands in general, regardless of the variant of vi. If I omit the <code>global</code> command, it will work: I can enter text and type a single ""."" character on a line by itself to return to command mode (or visual mode, depending on which mode I was in). However, this cannot be repeated using the <kbd>.</kbd> key in visual mode because it's an ex command, not a motion command.</p>

<p>In an unusual twist, the first attempt works in ex mode with the port of <a href=""http://ex-vi.sourceforge.net/"">""The Traditional Vi""</a> and even <code>ed</code> of all things, though nothing is auto-indented due to the usage of to the <code>global</code> command. That's fine anyway since the structure is predictable enough to manually insert indentation characters.</p>

<p>I've also attempted the following:</p>

<pre><code>%s/report("".*$/&amp;\
    break;/
</code></pre>

<p>This is the result of one line as displayed by Vim:</p>

<pre><code>    report(""No match"");^@
break;
</code></pre>

<p>Can anybody explain how to use the <code>global</code> command with the <code>append</code> command to append one or even more than one line of text in Vim, even if I have to leave visual mode to do it?</p>
","<p>If I understand your post correctly, you had this snippet of C code :</p>

<pre><code>switch (result) {
case CASE_1:
     return report(""..."");
case CASE_2:
     return report(""..."");
}
</code></pre>

<p>And you wanted to transform it to :</p>

<pre><code>switch (result) {
case CASE_1:
     report(""..."");
     break;
case CASE_2:
     report(""..."");
     break;
}
</code></pre>

<p>I don't know all the details of the global command, but here's how I would do it :</p>

<pre><code>g/return report/normal! _dawobreak;
</code></pre>

<p>Explanation :</p>

<p>The global command searches the pattern <code>return report</code>, then on each line that matches this pattern, it executes the following command :</p>

<pre><code>normal! _dawobreak;
</code></pre>

<p>The <code>normal</code> command types every character that follows as if we were in normal mode. Here it reads <code>_dawobreak;</code> as a sequence of keystrokes that can be broken down like this :</p>

<ul>
<li><code>_</code> = go to first non whitespace character</li>
<li><code>daw</code> = delete a word (including the space after it)</li>
<li><code>o</code> = open a new line under the current one</li>
<li><code>break;</code> = insert <code>break;</code></li>
</ul>

<p>The exclamation mark after the <code>normal</code> command, is to prevent recursiveness.<br>
It means : <em>if inside the sequence of keystrokes you detect a subsequence corresponding to a mapping, don't interpret it.</em></p>
","5490"
"XOR two lines to see differences","687","","<p>I need to compute a ""XOR""-like of two lines to find every char that differs between the two lines. I know the <code>vim-diff</code> feature can easily achieve that, but for comparing two lines I wanted to keep everything in the same buffer.</p>

<p>e.g.</p>

<pre><code>1wYT4SH8f8VjRA25u8AItlrTdAY4Y7n-g8if8VjRA3q25u8AItlrTdwTbv8if8VjRA3q25u8AItlrTdJjMY
1wYT4SH8f8VjRA25u8AItlrTdAY4Y7n-g8if8VjRA3q25u8AIt1rTdwTbv8if8VjRA3q25u8AItlrTdJjMY
                                                  1
</code></pre>

<p>How can it be done ?</p>
","<p>This solution doesn't show the difference between the two lines but highlight them and allow you to navigate through them with <code>n</code> and <code>N</code> like this:</p>

<p><a href=""https://i.stack.imgur.com/HaB5Y.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HaB5Y.gif"" alt=""Screen cast of the function""></a></p>

<p>To do so add this function to your <code>.vimrc</code>:</p>

<pre><code>function! CompareLines(line1, line2)
    let l1 = getline(a:line1)
    let l2 = getline(a:line2)
    let pattern = """"

    for i in range(strlen(l1))
        if strpart(l1, i, 1) != strpart(l2, i, 1)
            if pattern != """"
                let pattern = pattern . ""\\|""
            endif
            let pattern = pattern . ""\\%"" . a:line1 . ""l"" . ""\\%"" . ( i+1 ) . ""c""
            let pattern = pattern . ""\\|"" . ""\\%"" . a:line2 . ""l"" . ""\\%"" . ( i+1 ) . ""c""
        endif
    endfor

    execute ""let @/='"" . pattern . ""'""
    set hlsearch
    normal n
endfunction
</code></pre>

<p>You can call the function with <code>:call CompareLines(1, 2)</code> where the arguments are the numbers of the lines to compare.</p>

<p>To add a bit more details about how the function works:</p>

<ul>
<li>The first lines gets the lines to compare in some variables.</li>
<li><p>The loop iterates through these strings. Each characters of the strings are compared and when they don't match a pattern of the form <code>\%Xl\%Yc</code> is added to the variable <code>pattern</code> where <code>X</code> and <code>Y</code> are the line and the column of a character.</p>

<p>(See <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/ordinary-atom"" rel=""nofollow noreferrer""><code>:h /ordinary-atom</code></a> and especially the last lines which explains that the pattern <code>\%23l</code> allows to match the 23rd line and <code>\%23c</code> the 23rd column)</p></li>
<li><p>Once the pattern is build it is injected in the search register (<code>let @/=</code> allow to define the content of the register and the pattern has to be quoted).</p></li>
<li><p>Finally <code>set hlsearch</code> is used to highlight all the matches of the pattern and <code>normal n</code> brings the cursor to the first different character.</p></li>
</ul>

<p><strong>Note 1</strong> The function will change your search history.</p>

<p><strong>Note 2</strong> The part which uses the pattern to make the search could probably be greatly improved.</p>

<p><strong>And as a bonus</strong> Add this line to your <code>.vimrc</code> to create a command which will faster the call of the function:</p>

<pre><code>command! -nargs=* CompLines call CompareLines(&lt;f-args&gt;)
</code></pre>

<p>This way you can simple use <code>:CompLines 1 2</code> to compares two lines.</p>

<hr>

<p><strong>EDIT</strong> And here is an improved version of the function and of the command. The difference is that you can call it in 3 different ways:</p>

<ul>
<li><code>:CL</code> will diff the current line and the following one</li>
<li><code>:CL 23</code> will diff the current line and the line 23</li>
<li><code>:CL 23 42</code> will diff the lines 23 and 42</li>
</ul>

<p>Here is the code:</p>

<pre><code>command! -nargs=* CL call CompareLines(&lt;f-args&gt;)

function! CompareLines(...)

    "" Check the number of arguments
    "" And get lines numbers
    if len(a:000) == 0
        let l1=line(""."")
        let l2=line(""."")+1
    elseif len(a:000) == 1
        let l1 =line(""."")
        let l2 =a:1
    elseif len(a:000) == 2
        let l1 = a:1
        let l2 = a:2
    else
        echom ""bad number of arguments""
        return;
    endif

    "" Get the content of the lines
    let line1 = getline(l1)
    let line2 = getline(l2)

    let pattern = """"

    "" Compare lines and create pattern of diff
    for i in range(strlen(line1))
        if strpart(line1, i, 1) != strpart(line2, i, 1)
            if pattern != """"
                let pattern = pattern . ""\\|""
            endif
            let pattern = pattern . ""\\%"" . l1 . ""l"" . ""\\%"" . ( i+1 ) . ""c""
            let pattern = pattern . ""\\|"" . ""\\%"" . l2 . ""l"" . ""\\%"" . ( i+1 ) . ""c""
        endif
    endfor

    "" Search and highlight the diff
    execute ""let @/='"" . pattern . ""'""
    set hlsearch
    normal n
endfunction
</code></pre>

<hr>

<p><strong>EDIT 2</strong> I made it <a href=""http://github.com/statox/vim-compare-lines"" rel=""nofollow noreferrer"">a plugin</a>. You can install it with a regular plugin manager with (e.g.):</p>

<pre><code>Plug 'statox/vim-compare-lines'
</code></pre>
","7350"
"How to replace URL resource path with regex?","686","","<p>I am trying to write a regular expression that will match a link-attribute in .png  files.</p>

<p>Example: I have a lot of .png like this</p>

<pre><code>https://jnTb6EZom8c/s144/800px-s%25252Ct%252529%2520%25282%2529.png
https://jnTb6EZom8c/s1300/800px-s%25252Ct%252529%2520%25282%2529.png
https://jnTb6EZom8c/s50/800px-s%25252Ct%252529%2520%25282%2529.png
</code></pre>

<p>I want to search for <code>/s144</code> <code>/s1300</code> <code>/s50</code> and so on and replace it with <code>/s400+c</code>. My Regex <code>/\/s\B\d{2,4}/</code> works fine in Regex-Tester. </p>

<p>Now I want to do the job with vim, but I always get 'pattern not found'. What is wrong with my regular-expression?</p>
","<p>There's a few problems with your version. <code>/</code> needs to be backslash escaped in the Vim find command line*, and <code>{2,4}</code> type repeats also need a preceding backslash. The <code>\B</code> zero-width non-word boundary atom does not exist in Vim-flavour regular expressions, but I don't think it's actually required for your purpose, anyway.</p>

<p>Try <code>/\/s\d\{2,4}/</code></p>

<p>See <code>:help pattern-overview</code> for details of Vim's regular expressions.</p>

<p><sub>* Note that in other contexts, such as in an <code>:s</code> command, you can use almost any non-alphanumeric character as a regular expression delimiter. If you want to include <code>/</code> characters in your expression, just use a different character for your delimiter.</sub></p>
","2080"
"Include symbols in <cword>","685","","<p><code>expand(&lt;cword&gt;)</code> gives me the word under the cursor, but it excludes symbols such as <code>@</code> or <code>.</code>. For example, if I call it at the end of <code>@word</code>, it will get me <code>word</code> and exclude the <code>@</code>.</p>

<p>Is there a way that I could include symbols as part of the current word?</p>
","<p>The characters that are included in a Vim <code>word</code> are set by the <code>'iskeyword'</code> option. See</p>

<pre><code>:help &lt;word&gt;
:help word
:help 'iskeyword'
</code></pre>

<p>To add another character to this set, such as <code>.</code>, execute the following:</p>

<pre><code>:set iskeyword+=.
</code></pre>

<p>See</p>

<pre><code>:help :set+=
</code></pre>

<p>Note that the character <code>@</code> is special, so it has be added like this:</p>

<pre><code>:set iskeyword+=@-@
</code></pre>

<p>See</p>

<pre><code>:help 'isfname'
</code></pre>
","4011"
"How to copy multiple lines and paste at the end of a file","684","","<p>Suppose I have a file:</p>

<pre><code>class X(arg):
\t#blabbla
\tdef fun1(arg):
\t\tsome code
\n
\tdef fun2(arg):
\t\tsome code
\n
class A(arg):
\t#blabbla
\tdef fun0(arg):
\t\tsome code
\n
\tdef fun3(arg):
\t\tsome code
</code></pre>

<p>And I wish to copy all lines start with <code>class</code> and <code>\tdef</code>, and paste them to the end of file preserving the order, i.e.</p>

<pre><code>class X(arg):
\tdef fun1(arg):
\tdef fun2(arg):
class A(arg):
\tdef fun0(arg):
\tdef fun3(arg):
</code></pre>

<p>How can I achieve that without using extra plug-ins? (\t is tab, \n is new line)</p>
","<p>Depending on what you want to perform (copy and paste or cut and paste), you could try one of the 2 following commands:</p>

<pre><code>:g/\v^(class|\tdef)/t$
:g/\v^(class|\tdef)/m$
</code></pre>

<hr>

<p>To duplicate (copy and paste) the current line after the last one, you can use the <code>:t</code> command: <code>:t$</code></p>

<p>Like most Ex commands <code>:t</code> can be prefixed with an optional range, and like most Ex commands, when you don't give one, the current line is assumed.
So <code>:t$</code> is the same as <code>:.t$</code> or <code>:.,.t$</code></p>

<p>The <code>:t</code> command must be followed by a line address which is the number of the line after which the duplicated lines must be pasted.</p>

<p>With these 2 informations, you can perform an arbitrary duplication, such as: <code>:5,10t42</code><br>
Copy the lines between <code>5</code> and <code>10</code> and paste them below the line <code>42</code>.</p>

<p>When you express a line address, there are some useful symbols (called specifiers by the help) such as:</p>

<pre><code>.      current line
$      last line
'x     line where the mark x has been last set
/foo/  next line where foo is found
</code></pre>

<p>See <code>:help :range</code> for a comprehensive list of specifiers.</p>

<hr>

<p>To move (cut and paste) the current line after the last one, you can use the <code>:move</code> command: <code>:m$</code></p>

<hr>

<p>In your question, you want to repeat the same command <code>:t$</code> or <code>:m$</code> on a set of lines where the same pattern can be found.
Usually, this is a job for the global command <code>:g</code>.</p>

<p>So, you could use the command: <code>:g/pattern/t$</code> or <code>:g/pattern/m$</code><br>
It would execute <code>:t$</code> or <code>:m$</code> on every line where <code>pattern</code> is found.  </p>

<p>Besides, you want to operate on all the lines which begin with the word <code>class</code>, or with a hard tab followed by the word <code>def</code>.<br>
In a regex, it could be expressed like this: <code>\v^(class|\tdef)</code></p>

<p>Thus, the command <code>:g/pattern/t$</code> should be rewritten, like this: <code>:g/\v^(class|\tdef)/t$</code><br>
And <code>:g/pattern/m$</code> like this: <code>:g/\v^(class|\tdef)/m$</code></p>

<p>If you execute the first command on your buffer, here's the transformation you should get (assuming there's an empty line at the end):</p>

<pre><code>class X(arg):               class X(arg):     
    #blabbla                    #blabbla      
    def fun1(arg):              def fun1(arg):
        some code                   some code 

    def fun2(arg):              def fun2(arg):
        some code                   some code 

class A(arg):         ==&gt;   class A(arg):     
    #blabbla                    #blabbla      
    def fun0(arg):              def fun0(arg):
        some code                   some code 

    def fun3(arg):              def fun3(arg):
        some code                   some code 

                            class X(arg):     
                                def fun1(arg):
                                def fun2(arg):
                            class A(arg):     
                                def fun0(arg):
                                def fun3(arg):
</code></pre>

<hr>

<p>More generally, when you want to copy or cut a set of lines and paste them at the end of your buffer, you can follow a 2-steps process:</p>

<ol>
<li>progressively build a search pattern until your search matches the desired lines</li>
<li>type <code>:g//t$</code> or <code>:g//m$</code></li>
</ol>

<p>It works because, when you don't supply a pattern to the global or substitute command, they reuse the last search (the one in the search register <code>:reg /</code>).</p>

<hr>

<p>For more information, see:</p>

<pre><code>:help :global
:help :t (or :copy)
:help :move
</code></pre>
","6813"
"How to make autocmd FileType work when a file has multiple / compound dot separated types?","683","","<p>While working <a href=""https://github.com/plasticboy/vim-markdown"" rel=""nofollow"">a Markdown plugin</a>, we've wanted to change the filetype from <code>mkd</code> to <code>markdown</code> to increase compatibility with other plugins.</p>

<p>To avoid breaking users <code>.vimrc</code> that had autocommands like:</p>

<pre><code>autocmd FileType mkd echo 'a'
</code></pre>

<p>we've tried using:</p>

<pre><code>set filetype=mkd.markdown
</code></pre>

<p>from <code>ftdetect/markdown.vim</code>, since <code>help 'ft'</code> says both types would be tried.</p>

<p>Now the syntax works fine, but the autocmd does not run. The only way to make it run is to use:</p>

<pre><code>autocmd FileType mkd.markdown echo 'a'
</code></pre>

<p>which is obviously bad.</p>

<p>Is there a way to avoid breaking user autocommands in this case?</p>
","<p>Use</p>

<pre><code>:autocommand Filetype *markdown* :echom ""a""
</code></pre>

<p>This will match for the mk.markdown pattern as well as the regular markdown pattern. It's important to keep the '*' to have the pattern match even when other subtypes have been provided (otherwise markdown would not match the string mkd.markdown, since this is implictly anchored to the start and end and can be seen by using <code>:echo glob2regpat('markdown')</code></p>
","4897"
"Swap values ""true"" and ""false"" via ctrl+a, ctrl+x","682","","<p>I think it would be useful to have possibility to swap <code>true</code> and <code>false</code> values in the code rapidly, with combination <kbd>ctrl</kbd>+<kbd>a</kbd> or <kbd>ctrl</kbd>+<kbd>x</kbd>. Is there some plugin for that or something else?</p>
","<p>I wrote a plugin (<a href=""https://github.com/sagarrakshe/toggle-bool"" rel=""nofollow"">toggle-bool</a>) to toggle the boolean values you can try it. It supports the following boolean values:</p>

<ul>
<li><code>true</code> &lt;-> <code>false</code></li>
<li><code>yes</code> &lt;-> <code>on</code></li>
<li><code>on</code> &lt;-> <code>off</code></li>
<li><code>0</code> &lt;-> <code>1</code></li>
</ul>
","5217"
"How do I switch around 2 pieces of text?","681","","<p>I have 2 pieces of text, what is a proper way to switch those pieces of text. around e.g. I have this:</p>

<pre><code>This is one piece of text.
Here is another sentence.
</code></pre>

<p>And I want to switch around the 3 first words in these sentences, so it becomes:</p>

<pre><code>Here is another piece of text.
This is one sentence.
</code></pre>

<p>Another variant of a similar thing:</p>

<pre><code> &lt;paragraph&gt;Some text here&lt;/paragraph&gt;
 &lt;paragraph&gt;&lt;note&gt;And something else here&lt;/note&gt;&lt;/paragraph&gt;
</code></pre>

<p>And I'd want to switch the innermost text so it becomes:</p>

<pre><code> &lt;paragraph&gt;And something else here&lt;/paragraph&gt;
 &lt;paragraph&gt;&lt;note&gt;Some text here&lt;/note&gt;&lt;/paragraph&gt;
</code></pre>
","<p>There are a number of ways to do this, but I would say the most useful &amp; generic way is to use visual mode (<a href=""http://vimhelp.appspot.com/visual.txt.html#visual-mode"" rel=""nofollow""><code>:help visual-mode</code></a>).</p>

<p>In your first example:</p>

<pre><code>This is one piece of text.
Here is another sentence.
</code></pre>

<p>I would put the cursor on the first <code>T</code> (in <code>This</code>), start visual mode with <kbd>v</kbd>, and select the text you want to replace by using <kbd>l</kbd> (that's a lower case L) or the arrow key, and select the text up to and including the <code>e</code> in <code>one</code>).<br>
You can then delete the text with <kbd>d</kbd>.</p>

<p>Note that <kbd>d</kbd> doesn't actually <em>delete</em> the text, it copies the text to the unnamed register (<code>""""</code>), and then removes it from the buffer. So it's more like ""cut"" (<kbd>Ctrl+x</kbd>) as used in many applications, and not delete (also see <a href=""http://vimhelp.appspot.com/change.txt.html#quotequote"" rel=""nofollow""><code>:help """"</code></a>).</p>

<p>Armed with this information, we can now go to the second line, start visual mode with <kbd>v</kbd> again, and select the text we want to replace (in this case, <code>Here is another</code>), and press <kbd>p</kbd>.<br>
The <kbd>p</kbd> is for ""put"", which is Vi-speak for ""paste"". Because we've selected some text with visual mode, it will replace this text. But again, this text is not lost: it's put in the unnamed register (replacing the text that was there before).</p>

<p>We can now go to the start of the first line, and press <kbd>P</kbd>, this will put the text from the second line at the cursor position.</p>

<p><kbd>p</kbd> and <kbd>P</kbd> both ""put"" (paste) text, the difference is that the former puts the text <em>after</em> the cursor, while the latter puts it <em>before</em> this cursor.  I often use the wrong one by accident: remember that you can use <kbd>u</kbd> to undo and then use the correct one :-)</p>

<p>I hope it will be obvious how to use this technique in your second example :-)</p>

<hr>

<p><strong>Bonus tip: The motion picture</strong></p>

<p>Above I told you to select the text with <kbd>l</kbd> or the arrow keys, but there are better ways!</p>

<p>For example, we could also have used <kbd>v3wd</kbd>. The <kbd>v</kbd> starts visual mode, and <kbd>3w</kbd> selects the next 3 words, and the <kbd>d</kbd> deletes it. This is obviously a lot quicker.</p>

<p>In fact, you don't even need visual mode, just using <kbd>3wd</kbd> will work the same. I personally prefer to start visual mode, because you can easily see what you're about to delete, and adjust if required.</p>

<hr>

<p><strong>Bonus tip 2: The wrath of motions</strong></p>

<p>In your second example:</p>

<pre><code>&lt;paragraph&gt;And something else here&lt;/paragraph&gt;
&lt;paragraph&gt;&lt;note&gt;Some text here&lt;/note&gt;&lt;/paragraph&gt;
</code></pre>

<p>I would put the cursor on the <code>A</code> of <code>And</code>, and type <kbd>t&lt;</kbd>. This put the cursor just before the first occurrence <code>&lt;</code>; very useful!<br>
There's also <kbd>f</kbd>, which puts the cursor <em>on</em> the first occurrence of what you find, and you could also use <kbd>2t&lt;</kbd> to put the cursor before the <em>second</em> occurrence of <code>&lt;</code>.</p>

<p>See <a href=""http://vimhelp.appspot.com/motion.txt.html#navigation"" rel=""nofollow""><code>:help cursor-motions</code></a> for more information about cursor motions. Note that you could also use the mouse to do all of this if you've enable it, but that's of course not the <em>true</em> Vi way ;-)</p>

<hr>

<p><strong>Bonus tip 3: The search for registers</strong></p>

<p>The <kbd>d</kbd> and <kbd>p</kbd> use the unnamed register by default, but you can specify a register; for example, <kbd>""ad</kbd> would delete (""cut') the text to the <code>a</code> register (leaving the unnamed <code>""</code> register alone), and <kbd>""ap</kbd> would put (""paste"") from this register. This can be quite useful in a number of scenarios.</p>

<p>See <a href=""http://vimhelp.appspot.com/change.txt.html#registers"" rel=""nofollow""><code>:help registers</code></a>.</p>
","2098"
"How to escape a whole string in a : command?","681","","<p>Let's see. I have a <code>gvim</code> running and I want open a file, respecting the <code>autocmd</code>s (<a href=""https://vi.stackexchange.com/questions/2066/different-autocmd-behavior-when-using-remote-tab-silent"">which rules out <code>--remote-tab</code></a>). </p>

<p>Now I know I can do (basically, with some tweak): </p>

<pre><code>gvim --remote-send "":tabe my_file&lt;CR&gt;"" 
</code></pre>

<p>which works. But if a file has spaces or strange chars in it, I have to do the following: </p>

<pre><code>gvim --remote-send "":tabe my\\ file&lt;CR&gt;""
</code></pre>

<p>(the double <code>\\</code> is because one of them is eaten by the shell; this is equivalent to manually type </p>

<pre><code>`:tabe my\ file` 
</code></pre>

<p>in <code>vim</code> and it works). Now, I can find a way to create that string in the shell or whatever, but I hoped I could ""globally quote"" the string in the "":tabe"" command, like </p>

<pre><code> gvim --remote-send "":tabe 'my file'&lt;CR&gt;""
</code></pre>

<p>or </p>

<pre><code> gvim --remote-send "":tabe \""my file\""&lt;CR&gt;""
</code></pre>

<p>--- this is equivalent to writing directly in the vim command line <code>:tabe ""my file""</code>; it seems it is not working. I can explicitly quote all space in the string with the shell, doing something like </p>

<pre><code># &lt;ESC&gt; because the gvim instance can be in a mode different from normal
# the double CR: do not ask. 
# the argument MUST be a full path
file=""$(readlink -f ""$@"")""
fileq=""$(echo ""$file"" |  awk '{gsub(/ /,""\\\ "")}1')"" # quote spaces FIXME add other chars
exec gvim 2&gt;/dev/null --servername $desktop --remote-send ""&lt;ESC&gt;:tabe $fileq &lt;CR&gt;&lt;CR&gt;""
</code></pre>

<p>but it works just for spaces and not other special chars like tabs and <code>""</code> (nor newlines, but if you have newlines in your file names you deserve it!).</p>

<p><strong>The question</strong>:</p>

<p>Independently on the particular shell, with which I will deal after :-), is there a way <em>when directly typing</em> in the vim <code>tabe:</code> line to globally quote a filename without going to quote the ""strange"" chars one by one? </p>
","<p>For general info, and thanks to all the comments, this is the script I use to have an ""open in a tab on the gvim on this desktop"" script: </p>

<pre><code>#!/bin/bash -x
#
# this is convoluted because it has to finish in an exec to keep the DM happy
# remember to set StartupNotify=false in the .desktop file
#
desktop=desktop_$(xprop -root -notype  _NET_CURRENT_DESKTOP | perl -pe 's/.*?= (\d+)/$1/')

if ! vim --serverlist | grep -iq $desktop; then #we need to start the server
    if [ $# != 0 ]; then 
        exec gvim 2&gt;/dev/null --servername $desktop ""$@""
    else
        exec gvim 2&gt;/dev/null --servername $desktop  #no files 
    fi
fi
# the only case here is if we need to open a tab in an existing server
if [ $# != 0 ]; then  
        # Do not use --remote-tab, see http://vi.stackexchange.com/questions/2066/different-autocmd-behavior-when-using-remote-tab-silent
        # &lt;ESC&gt; because the gvim instance can be in a mode different from normal
        # the double CR: do not ask. 
        # the argument MUST be a full path
        file=""$(readlink -f ""$@"")""
        #fileq=""$(echo ""$file"" |  awk '{gsub(/ /,""\\\ "")}1')"" # quote spaces FIXME add other chars
        fileq=${file// /\\ } # quote spaces FIXME add other chars
        exec gvim 2&gt;/dev/null --servername $desktop --remote-send ""&lt;ESC&gt;:tabe $fileq &lt;CR&gt;&lt;CR&gt;""
fi
</code></pre>
","2300"
"How to add a control character inside a string executed by the execute command?","680","","<p>I would like to have a mapping that opens a buffer with all the lines containing the word under the cursor.</p>

<p>I know such a mapping already exists in vanilla vim in normal mode <code>[I</code>.<br>
But I don't like the output, the controls to move seem limited and I don't know how to edit it like a normal buffer.</p>

<p>I've come up with the following code:</p>

<pre><code>function! LinesWithWordUnderCursor()

    "" Clear register a
    let @a=""""
    "" Save cursor position
    let save_cursor = getcurpos()

    "" Copy all the lines containing the word under cursor with format :
    "" line number &lt;space&gt; line &lt;CR&gt;
    ""
    "" Resulting command :
    "" g/{cword}/let @a = @a . line('.') . ' ' . getline('.') . '\r'

    execute ""g/"" . expand(""&lt;cword&gt;"") . ""/let @a = @a . line('.') . ' ' . getline('.') . '\r'""

    "" Put the cursor back where it was
    call setpos('.', save_cursor)
    "" Open a new tab
    tabnew
    "" Set buffer as temporary
    setlocal buftype=nofile noswapfile nobuflisted bufhidden=wipe nomodified
    "" Paste register a
    put =@a

endfunction

nnoremap [I :&lt;c-u&gt;call LinesWithWordUnderCursor()&lt;cr&gt;
</code></pre>

<p>The function appends all the lines inside the register <code>a</code>.
I would like the following formatting :</p>

<p><em>{the line number} {a tab character} {the line} {a newline character}</em></p>

<p>The function works, but I don't know how to insert a control character like a tab or a newline on each copied line.<br>
The command responsible for copying and formatting a line is:</p>

<pre><code>execute ""g/"" . expand(""&lt;cword&gt;"") . ""/let @a = @a . line('.') . ' ' . getline('.') . '\r'""
</code></pre>

<p>I've tried adding <code>\t</code> and <code>\n</code> in different ways (escaping the double quotes, using single quotes, using the <code>string()</code> function ...), but it always ends with an error or with undesirable single quote characters.</p>

<p>I'm trying to build a global command by concatenating a few strings and then execute it with <code>execute</code>.</p>

<p>At the end of the concatenation, <code>execute</code> should execute something like this :</p>

<pre><code>g/{word under cursor}/let @a = @a . line('.') . ""\t"" . getline('.') . ""\n""
</code></pre>

<p>For the moment I use a litteral space instead of a tab character, and a carriage return (<code>\r</code>) instead of a newline (which produces a weird output with the caret notation <code>^M</code> at the end of every line).</p>

<p>How can I modify the concatenation of strings executed by the <code>execute</code> command so that it integrates a tab character instead of a space and a newline character instead of a carriage return ?</p>
","<p>You command looks like follow without the <code>:execute</code>:</p>

<pre><code>:g/pat/let @a.= line('.') . ""\t"" . getline('.') . ""\n""
</code></pre>

<p>Adding in the <code>:execute</code> means you need to quote things correctly. The real trick is to use single quote. Also properly escape your single quotes or switching to double quotes.</p>

<pre><code> :execute 'g/' . expand('&lt;cword&gt;') . '/let @a.= line(""."") . ""\t"" . getline(""."") . ""\n""'
</code></pre>

<p>For more help see:</p>

<pre><code>:h expr-string
:h literal-string
</code></pre>
","5678"
"Is there an elegant way to determine if a file exists in/under runtimepath?","678","","<p>I wonder if there is an elegant way to determine if a specific file exists in/under one of the entries of <code>&amp;rtp</code>.</p>

<p>Currently, I use the following construct:</p>

<pre><code>let s:found_ = 0
for s:dir_ in split(&amp;rtp, ',')
  let s:file_ = s:dir_ . '/autoload/FooBarBaz.vim'
  if filereadable(s:file_)
     let s:found_ = 1
     break
  endif
endfor

if s:found_
   call FooBarBaz#func()
endif
</code></pre>

<p>I am under the impression that vim could offer a function or something that does it more elegantly, such as <code>exists('*FooBarBaz#func')</code> which unfortunately didn't work as I intended.</p>
","<p>You're looking for <code>globpath()</code>. If it returns a non empty string, then there is at least a match.</p>

<pre><code>if !empty((globpath(&amp;rtp, '/autoload/FooBarBaz.vim'))
</code></pre>

<p>You may also want to check <code>filereadable()</code> if you suspect you may not be able to open the file. BTW, I'd have used <code>filter()</code> in your solution (I hate debugging vim loops) -> <code>if !empty(filter(split(&amp;rtp,','), 'filereable(v:val.""autoload/FooBarBaz.vim"")')</code></p>

<p>But in that case, I often simply run a:</p>

<pre><code>runtime autoload/FooBarBaz.vim
if !exists('*FooBarBaz#func')
</code></pre>

<p>(See my convoluted <a href=""https://github.com/LucHermitte/lh-dev/blob/master/autoload/lh/dev/option.vim#L73"" rel=""noreferrer""><code>lh#dev#option#call()</code></a> which searches the first function that matches <code>prefix#{filetype}#postfix(args)</code> among a list of filetypes.)</p>
","10354"
"What is the rationale for \r and \n meaning different things in s command?","678","","<p>We all know that, when searching, <code>\n</code> is newline and <code>\r</code> is carriage return (<code>^M</code>), but when replacing <code>\r</code> is newline while <code>\n</code> is a null byte (<code>^@</code>).</p>

<p>What is the origin of this asymmetry? Given that this behavior is... peculiar to say the least (and quite counterproductive when you get it wrong the first time) I expect there's some bizarre historical reason.</p>

<p>(incidentally, is there some way to ""fix"" this behavior and get something more intuitive?)</p>
","<p>At the most basic level, there's already an asymmetry between the search and replace portions of <code>:substitute</code> because the former is a regular expression and the latter is text, with specific additional <a href=""http://vimhelp.appspot.com/change.txt.html#sub-replace-special"" rel=""nofollow"">escape sequences</a>.  This is just highlighted by the intuition you have about what <code>\n</code> means.</p>

<p>For example, consider that <code>\n</code> in the search doesn't match a literal <code>\n</code>.  It matches the end of line (EOL) byte sequence, which may be <code>\r</code>, <code>\r\n</code>, or just <code>\n</code> depending on the <code>'fileformat'</code> of the buffer.</p>

<p>As far as why <code>\r</code> is used to mean ""insert an EOL"", there's some <a href=""http://vimhelp.appspot.com/pattern.txt.html#NL-used-for-Nul"" rel=""nofollow"">history</a> behind that.  Vi had no way to handle a NUL byte in a file.  Vim improved on that by replacing NUL bytes with an NL byte internally (since C strings are NUL delimited).</p>

<p>This implementation detail leaked into the behavior of <code>:substitute</code> since <code>\n</code> in the replacement is simply inserted into the internal representation of that line, which is used to indicate a NUL byte.  <code>\r</code> inserts an EOL, breaking the internal line in two.  Vim doesn't actually store the EOL bytes in memory, instead (de)serializing them when reading/writing the buffer.</p>

<p>It can't be changed now without breaking the many scripts and the muscle memory of many users.  Thankfully, it's documented in <a href=""http://vimhelp.appspot.com/change.txt.html#sub-replace-special"" rel=""nofollow""><code>:help sub-replace-special</code></a>.</p>
","9389"
"Save current file and open another for editing","677","","<p>Is there a way to effectively combine <code>:w</code> and <code>:e</code> commands so that the current file is saved and a new one is opened for editing in one go? And to do so in a way that allows tab completion of path and filename on the command line?</p>
","<p>You can use <a href=""http://vimhelp.appspot.com/map.txt.html#%3Acommand""><code>command</code></a> to add new commands. These have to start with a capital letter.</p>

<p>Something like this should do what you want:</p>

<pre><code>command! -nargs=1 -complete=file WE write | edit &lt;args&gt;
</code></pre>

<p>You can then do:</p>

<pre><code>:WE new-file
</code></pre>

<ul>
<li><code>-nargs=1</code> -  accept one argument</li>
<li><code>-complete=file</code> - do file completion</li>
<li><code>WE</code> - the command name</li>
<li><code>write | edit &lt;args&gt;</code> - first call <code>:w</code>, and then <code>:e</code> with the argument we gave it.</li>
</ul>

<hr>

<p>Note that there's also the <a href=""http://vimhelp.appspot.com/options.txt.html#%27noaw%27""><code>autowrite</code></a> option:</p>

<blockquote>
  <p>Write the contents of the file, if it has been modified, on each
  <code>:next</code>, <code>:rewind</code>, <code>:last</code>, <code>:first</code>, <code>:previous</code>, <code>:stop</code>, <code>:suspend</code>, <code>:tag</code>, <code>:!</code>,
  <code>:make</code>, <code>CTRL-]</code> and <code>CTRL-^</code> command; and when a <code>:buffer</code>, <code>CTRL-O</code>, <code>CTRL-I</code>,
  <code>'{A-Z0-9}</code>, or <code>`{A-Z0-9}</code> command takes one to another file. </p>
</blockquote>

<p>and the <a href=""http://vimhelp.appspot.com/options.txt.html#%27noawa%27""><code>autowriteall</code></a> option:</p>

<blockquote>
  <p>Like <code>'autowrite'</code>, but also used for commands <code>:edit</code>, <code>:enew</code>, <code>:quit</code>,
  <code>:qall</code>, <code>:exit</code>, <code>:xit</code>, <code>:recover</code> and closing the Vim window.
  Setting this option also implies that Vim behaves like <code>'autowrite'</code> has
  been set.</p>
</blockquote>
","3459"
"Open multiple files in tabs from Explore mode","675","","<p>While navigating file system in <code>:Explore</code> mode, is it possible to select and open multiple files, each in a new tab?</p>

<p><strong>Edit:</strong></p>

<p>I ended up using a function proposed by <em>Jair López</em>, because it works pretty much as I envisioned it, although <em>statox</em> provided a good explanation for built-in netrw mechanics.</p>

<p>For consistency, I also added a normal mode mapping to make <kbd>Shift</kbd><kbd>T</kbd><kbd>T</kbd> open a new tab, while keeping netrw tab in focus. It simplifies opening tabs for multiple files that aren't listed consecutively.</p>

<pre><code>autocmd Filetype netrw nmap &lt;buffer&gt; &lt;silent&gt; TT VT
</code></pre>
","<p>Let's Vim do it for you. You can put the following code at the end of your 
<code>vimrc</code> file:</p>

<pre><code>function! NetrwOpenMultiTab(current_line,...) range
   "" Get the number of lines.
   let n_lines =  a:lastline - a:firstline + 1

   "" This is the command to be built up.
   let command = ""normal ""

   "" Iterator.
   let i = 1

   "" Virtually iterate over each line and build the command.
   while i &lt; n_lines
      let command .= ""tgT:"" . ( a:firstline + i ) . ""\&lt;CR&gt;:+tabmove\&lt;CR&gt;""
      let i += 1
   endwhile
   let command .= ""tgT""

   "" Restore the Explore tab position.
   if i != 1
      let command .= "":tabmove -"" . ( n_lines - 1 ) . ""\&lt;CR&gt;""
   endif

   "" Restore the previous cursor line.
   let command .= "":"" . a:current_line  . ""\&lt;CR&gt;""

   "" Check function arguments
   if a:0 &gt; 0
      if a:1 &gt; 0 &amp;&amp; a:1 &lt;= n_lines
         "" The current tab is for the nth file.
         let command .= ( tabpagenr() + a:1 ) . ""gt""
      else
         "" The current tab is for the last selected file.
         let command .= (tabpagenr() + n_lines) . ""gt""
      endif
   endif
   "" The current tab is for the Explore tab by default.

   "" Execute the custom command.
   execute command
endfunction

"" Define mappings.
augroup NetrwOpenMultiTabGroup
   autocmd!
   autocmd Filetype netrw vnoremap &lt;buffer&gt; &lt;silent&gt; &lt;expr&gt; t "":call NetrwOpenMultiTab("" . line(""."") . "","" . ""v:count)\&lt;CR&gt;""
   autocmd Filetype netrw vnoremap &lt;buffer&gt; &lt;silent&gt; &lt;expr&gt; T "":call NetrwOpenMultiTab("" . line(""."") . "","" . (( v:count == 0) ? '' : v:count) . "")\&lt;CR&gt;""
augroup END
</code></pre>

<p>Restart Vim and then you can:</p>

<ol>
<li>Open Netrw (e.g., with <code>:Explore</code>)</li>
<li>Move the cursor to the first file.</li>
<li>Enter Line-wise Visual mode by hitting <kbd>Shift</kbd>-<kbd>V</kbd></li>
<li>Hit <kbd>J</kbd> (That's not <kbd>Shift</kbd>-<kbd>J</kbd>, just in case)
as much as you need to.</li>
<li>Hit <kbd>T</kbd></li>
</ol>

<h2>Advantages</h2>

<ul>
<li>You don't need to add any plugin</li>
<li>It doesn't stuff the arglist</li>
<li>You'll preserve the order of the buffer list and tabs</li>
<li>You can choose which tab will be the current one by using or not using a
count in the mapping.</li>
</ul>

<h2>Explanation</h2>

<p>There's a lot going on here so if you're in doubt, just let me know. Let's 
say the directory you open with <code>:Explore</code> is as follows:</p>

<pre><code>../
./
a.txt
b.txt
c.txt
d.txt
</code></pre>

<p>And the cursor is on file <code>a.txt</code> and next, you press 
<kbd>Shift</kbd>-<kbd>V</kbd> and move the cursor to the line with <code>d.txt</code>.
You can hit:</p>

<ul>
<li><kbd>T</kbd> to open each file in a tab and select the file <code>d.txt</code> as the 
current tab</li>
<li><kbd>1</kbd><kbd>T</kbd> to open each file in a tab and select the file <code>a.txt</code> as the
current tab</li>
<li><kbd>2</kbd><kbd>T</kbd> to open each file in a tab and select the file <code>b.txt</code> as the
current tab</li>
<li>And so on</li>
</ul>

<p>Or you can hit:</p>

<ul>
<li><kbd>Shift</kbd>-<kbd>T</kbd> to open each file in a tab and keep the
current tab.</li>
<li><kbd>1</kbd><kbd>Shift</kbd>-<kbd>T</kbd> to do the same as <kbd>1</kbd><kbd>T</kbd></li>
<li><kbd>2</kbd><kbd>Shift</kbd>-<kbd>T</kbd> to do the same as <kbd>2</kbd><kbd>T</kbd></li>
</ul>

<p>The differences between <kbd>Shift</kbd>-<kbd>T</kbd> and <kbd>T</kbd> are:</p>

<ul>
<li><kbd>T</kbd> select the last selected file as the current tab by default</li>
<li><kbd>Shift</kbd>-<kbd>T</kbd> keeps the current tab by default</li>
</ul>
","13351"
"How to shorten the result of `ls` to get only the file name and not the whole path?","672","","<p>I've been using Gvim for a while, but lately stopped using GUI options and went to just commands. <code>:ls</code> is used all the time, but I have a huge project and it is hard to see the file name quickly in the long path. I like how GVim displays buffers in the ""Buffers"" menu:</p>

<pre><code>&lt;file name&gt;             &lt;path from $HOME&gt;
</code></pre>

<p>Is there a way to either </p>

<ol>
<li>Use built in functionality of vim to display just the filename in <code>:ls</code></li>
<li>Write a function that will use <code>:ls</code> and show just the filename. </li>
</ol>

<p>I have a preference for the second solution because I don't want to totally override <code>:ls</code>.</p>

<p>Some quick notes: I am pretty comfortable with Vim commands (over a year using it as the only editor). But I've just started VimScript and this function would be a great first personal tool. If someone knows how to write a command for this, I would really appreciate a hint rather than a solution on where to start to write this function that would display just a file names of open buffers. I will promise to post what I write pretty quickly. :)</p>
","<p>I came up with a solution which I think does what you want. </p>

<p>I know that you asked only for hints, so I'll write hints I would have given and then the final function. You'll be free to read it or not.</p>

<p>So here are my tips:</p>

<h3>Creating a function</h3>

<p>You said you were really new to vimscript, so here is a short reminder on functions.</p>

<p>They begins with <code>function! NameOfTheFunc()</code> (note the first capital letter on the name and the parentheses) and end with <code>endfunction</code>. You can put them in your <code>.vimrc</code> file to let vim source them at each start.</p>

<h3>Getting the output of a function</h3>

<p>If you want to get the output of a function to manipulate it, you can put it in  a register thanks to the <code>redir</code> function. A use case using <code>:ls</code> <em>(hey that's also a hint ;-) )</em> would be the following:</p>

<pre><code>redir @n exec 'ls' redir END
</code></pre>

<p>This would put the result of <code>:ls</code> in the register <code>@n</code>.</p>

<h3>Doing substitutions on the content of a register</h3>

<p>I think you probably know the <code>:s</code> command and maybe the <code>substitute()</code> function. It is possible to use the latter to do substitution on the text of a register:</p>

<pre><code>substitute(@n, {pattern}, {sub}, {flag})
</code></pre>

<p>Will apply the substitution on the register <code>@n</code>.</p>

<h3>What about submatches?</h3>

<p>I don't know how familiar you are with the <code>substitute</code> command so I'll also remind you that it is possible to create submatches. I think <a href=""http://vimhelp.appspot.com/change.txt.html#%3Asubstitute"" rel=""nofollow noreferrer""><code>:h :substitute</code></a> could interest you on this topic (I'll maybe edit this answer to put a link to a more relevant documentation). Basically it allows us to capture only a part of the pattern you're matching and reuse it.</p>

<p>The important point is that to use submatches with the <code>substitute()</code> function your call should look like this:</p>

<pre><code>substitute(@n, {pattern}, '\=submatch(X)', {tags})
</code></pre>

<p>Where <code>X</code> is the number of the submatch you want to use. <code>\=</code> allows us to evaluate the content of the <code>{sub}</code> part instead of just using it literally.  </p>

<h3>And finally some regex</h3>

<p>I will not make a complete explanation of regex here because it would be really long and I'm really not qualified to do that :-) This topic should be a start: <a href=""http://vimhelp.appspot.com/pattern.txt.html#regexp"" rel=""nofollow noreferrer""><code>:h regexp</code></a>.</p>

<p>Also the function <code>substitute()</code> use magic parameter by default. So see <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2Fmagic"" rel=""nofollow noreferrer""><code>:h magic</code></a>.</p>

<h3>Creating a command to feel ""pro""</h3>

<p>As we will create a function <em>(let's call it <code>ListBuffers()</code>)</em> that we will
potentially call (very) often, we could create a custom ex command which is way faster to call than a function. To do so, we simply have to add the following line:</p>

<pre><code>command! LS call ListBuffers()
</code></pre>

<p>With this line, typing <code>:LS</code> will be equivalent to typing <code>call ListBuffers()</code>.</p>

<p><em>For the next step, I'll shamelessly stole a hint that I got from <a href=""https://vi.stackexchange.com/a/4231/1841"">this VanLaser answer</a>, many thanks to him. OP will probably not want to follow this step since you stated that you don't want to override <code>:ls</code>.</em></p>

<p>Our command <code>:LS</code> fills the same purpose as <code>:ls</code>, it is possible thanks to <a href=""https://github.com/kana/vim-altercmd"" rel=""nofollow noreferrer"">the <code>alterCmd</code> plugin</a> to override the original <code>:ls</code> to use it instead our command.  </p>

<p>With <code>alterCmd</code> installed, we can use the following line:</p>

<pre><code>:AlterCommand ls LS
</code></pre>

<p>To replace the original <code>:ls</code> command with our custom one. This way, typing <code>:ls</code> will show the buffer list with the shortened names.</p>

<h3>And then we have a function</h3>

<p>Finally, with those different elements, I came up with a function which: </p>

<ul>
<li>Gets the output of <code>:ls</code> in a register</li>
<li>Substitutes the full path to simply the name of the file</li>
<li>Put this result in a variable</li>
<li>Output this variable</li>
</ul>

<hr>

<blockquote class=""spoiler"">
  <p><pre><code>function! ListBuffers()
    redir @n
    silent exec 'ls'
    redir END

    let list = substitute(@n, '""(\f*\)*(\f*)""' , '\=submatch(2)', ""g"")
    echo list
 
endfunction</code></pre></p>
</blockquote>

<p>Note the <code>silent</code> on line 3 which ensures that we execute <code>ls</code> but don't output its result on the screen so you have the list only once.</p>

<p>Note also the regex which can probably be improved. It creates 2 submatches. The first one contains <code>\f*\\</code> which is as many file-name characters as possible followed by a literal <code>\</code> and repeated as many time as possible. The second submatch only contains file-name characters and is the one used to replace the whole path.</p>

<p><strong>Note</strong>: I created this regex on Windows because I don't have access to a Linux box right now, you might need to replace the literal <code>\</code> by a literal <code>/</code> to make it work on Linux.</p>

<p>Here is the result of <code>:ls</code> on my machine:</p>

<p><a href=""https://i.stack.imgur.com/GUSDV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GUSDV.png"" alt=""enter image description here""></a></p>

<p>And the result of my <code>ListBuffers()</code> function:</p>

<p><a href=""https://i.stack.imgur.com/hHLfO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hHLfO.png"" alt=""enter image description here""></a></p>

<p><strong>PS</strong>: Sorry for the long answer, I hope it helped ;-)</p>

<p><strong>EDIT</strong> Carpetsmoker suggested using a variable instead of a register and I think he is particularly right. This way, using the function will not clobber the state of the register. So a better version of the function is:</p>

<blockquote class=""spoiler"">
  <p><pre><code>function! ListBuffers()
    redir => ls_output
    silent exec 'ls'
    redir END

    let list = substitute(ls_output, '""(\f*\)*(\f*)""' , '\=submatch(2)',    ""g"")

    echo list 
 
endfunction</code></pre></p>
</blockquote>

<p>An alternative was to use <code>getRegister()</code> to save the state of <code>@n</code> and <code>setRegister()</code> to give it its previous state, but that's less effective than using a variable.</p>
","4210"
"Change default syntax highlighting scheme","671","","<p>I'm unhappy with the default syntax highlighting in vim and would like to change it. I tried to follow the accepted answer on <a href=""https://stackoverflow.com/questions/1890103/change-syntax-color-in-vim"">this page</a>, but I think my vim version (7.4) is different. </p>

<p>Inside <code>/usr/share/vim/vim74/syntax</code> I have tons of files, so I decided to edit <code>php.vim</code>. But I find that the format in the file isn't like the one in the link I mentioned. Here's my <a href=""http://pastebin.com/jU2bsmMh"" rel=""nofollow noreferrer"">php.vim</a> file. </p>

<p>Can someone help me figure out how to customize vi syntax highlighting?</p>
","<p>(I'm answering my own question so that it can be closed. All credit to @Nobe4 and @lcd047)</p>

<p>The <code>/usr/share/vim/vim74/syntax</code> directory doesn't have colors, surprisingly. What is needed to change syntax highlighting in <code>vim</code> is a colorscheme. These can be placed in <code>~/.vim/colors/</code> and activated in <code>vi</code> with <code>set syntax on</code> and <code>colorscheme cool_color_scheme.vim</code>. It's also possible to make one's own color schemes; check out <a href=""http://bytefluent.com/vivify/"" rel=""nofollow"">http://bytefluent.com/vivify/</a> for a visual colorscheme maker/editor for vim.</p>
","3900"
"Replace a string without changing case?","671","","<p>Due to a quirk in the domain-specific language I am working with, I frequently face the task of (selectively, not globally) replacing <code>term</code> or <code>TERM</code> with <code>word</code> or <code>WORD</code>, respectively.</p>

<p>This means, I search case-insensitively for <code>term</code>, and want to replace that with <code>word</code> <em>while keeping the uppercase / lowercase of the original <code>term</code> intact</em>.</p>

<p>Since checking the whole of <code>term</code> for <em>consistent</em> upper-/lowercase would be difficult and is not really necessary, I would settle for uppercase / lowercase of <code>word</code> / <code>WORD</code> being decided on the first letter of <code>term</code>.</p>

<p>How could I achieve this?</p>
","<p>Michaels Geddes' plugin <a href=""http://vim.sourceforge.net/scripts/script.php?script_id=6"">keepcase</a> has all you need:</p>

<pre><code>:%SubstituteCase/\cterm/word/g
</code></pre>

<p>Other syntax elements from <code>:substitute</code> are also supported.</p>
","5682"
"How to abbreviate(ca) normal command with ""Esc"" and ""Enter"" key?","668","","<p>Yesterday I'm trying to make a doc command abbreviation for python.</p>

<p>The original command is <code>normal 0i""""""^M""""""</code>, which works in command-line mode.<br>
But failed when using alias <code>doc</code> defined by <code>ca doc normal 0i""""""^M""""""</code>.</p>

<p>And later, I find I need to quit insert mode, do some movement, and then enter insert mode again.<br>
The command <code>normal 0i""""""^[$a^M""""""</code> failed both in command-line mode and with alias.</p>

<p>How should I deal with <code>^M</code> and <code>^[</code> in normal command alias,<br>
and how should I manipulate insert mode quit and enter again action with normal command?</p>

<p>PS: The <code>^M</code> and <code>^[</code> character was made by combining <code>CTRL-V</code> + <code>Enter</code>/<code>Esc</code>.</p>
","<blockquote>
  <p>And later, I find I need to quit insert mode, do some movement, and then  ...</p>
</blockquote>

<p>I'm not sure where you found that from, but it's the other way around - you should quit insert mode before ending a <code>:normal</code> command, otherwise <code>:normal</code> will cancel the last operation. From <a href=""http://vimhelp.appspot.com/various.txt.html#%3Anormal"" rel=""nofollow""><code>:h :normal</code></a>:</p>

<pre><code>{commands} should be a complete command.  If
{commands} does not finish a command, the last one
will be aborted as if &lt;Esc&gt; or &lt;C-C&gt; was typed.
This implies that an insert command must be completed
(to start Insert mode, see :startinsert).  A "":""
command must be completed as well.  And you can't use
""Q"" or ""gQ"" to start Ex mode.
</code></pre>

<p>Now, your original command:</p>

<pre><code>ca doc normal 0i""""""^M""""""
</code></pre>

<p>using an abbreviation instead of a proper command, <code>^M</code> will be taken assumed to end the <code>normal</code> command (the way it would be if you'd actually typed it), and not be a part of it. Then you'd have to do:</p>

<pre><code>ca doc normal 0i""""""&lt;cr&gt;""""""
</code></pre>

<p>Use <a href=""http://vimhelp.appspot.com/map.txt.html#map_return"" rel=""nofollow"">the <code>&lt;cr&gt;</code> code</a> available for maps and abbreviations.
Though I think you'd be better off using a normal-mode map instead of using a command-mode one. Or use a proper command:</p>

<pre><code>command! Doc normal 0i""""""&lt;cr&gt;""""""
</code></pre>

<p>Then you can use the <code>:Doc</code> command.</p>
","4676"
"How can I get syntax highlighting to support multiline JavaScript strings?","667","","<p>Currently I have JavaScript (.js) files that contain multiline strings. Vim's syntax highlighting does not seem to support these, as seen in the image below:
<img src=""https://i.stack.imgur.com/3o8HH.png"" alt=""Improper multiline syntax highlighting""></p>

<p>Anything below the first line is not properly recognized as a string, and everything after the end quote is incorrectly considered a string. Any way to fix this?</p>
","<p>The <code>/usr/share/vim/vim74/syntax/javascript.vim</code> uses this to define what a ""string region"" is in Javascript:</p>

<pre><code>syn region javaScriptStringD start=+""+ skip=+\\\\\|\\""+ end=+""\|$+ contains=javaScriptSpecial,@htmlPreproc
</code></pre>

<p>The <code>end</code> option matches either the <code>""</code> character, <em>or</em> the end of the line <code>$</code>, which is why the syntax highlighting stops after the first line.</p>

<p>We can override this by making a <code>~/.vim/after/syntax/javascript.vim</code> file with:</p>

<pre><code>syn region javaScriptStringD start=+""+ skip=+\\\\\|\\""+ end=+""+ contains=javaScriptSpecial,@htmlPreproc
syn region javaScriptStringS start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=javaScriptSpecial,@htmlPreproc
</code></pre>

<p>One line for <code>""strings""</code>, and another for <code>'strings'</code>. We just removed the <code>|$</code> part (<code>|</code> for ""or"", <code>$</code> for end of line).</p>

<p>Note: I think it would be better to <em>only</em> highlight the string if the previous line escapes the <code>\n</code> (ie. ends with <code>\</code>). I happen to know that the C syntax does this, but I can't seem to <s>steal</s> borrow that and get it working in Javascript :-/</p>
","1965"
"How to add multiple git projects to Ctrl-P search path","666","","<p>The main project I work on is split up into multiple git projects.  I'd like to be able to Ctrl-P search for files in a different project than the one I'm currently in, but as far as I can tell, I can't make Ctrl-P search anything other than the current git project (since it stops when it finds the .git ancestor).</p>

<p>Is there a way to tell Ctrl-P to search in multiple .git projects?</p>
","<p>There are a few options depending on the layout of directories.</p>

<p>If all these repos are contained in a single root folder that you want to search, then you can search that directory explicitly by running <code>:CtrlP myproject</code>. Alternatively, I believe you could say <code>let g:ctrlp_root_markers=['.root']</code> and make a .root file in the root (myproject) directory.</p>

<p>If for some strange reason you can't put all these directories in one root, you could make a directory somewhere else, put symlinks in it to all the directories you want searched, put <code>let g:ctrlp_follow_symlinks=1</code> in your .vimrc, and explicitly tell CtrlP to use this directory when running (<code>:CtrlP mynewroot</code>).</p>

<p>Failing that, you could modify <code>ctrlp_user_command</code>, but doing so gets complicated and will ignore other ctrlp settings.</p>
","2727"
"Indenting VHDL as other programming languages","666","","<p>When I write VHDL Vim uses a mix of tabs and spaces which aim to align columns beneath the last parenthesis. For example, Vim will produce something like</p>

<pre><code>Inst_IMem: IMem PORT MAP(
                            CLK =&gt; clk,
                            ADDR =&gt; foo,
                            DATA =&gt; bar
                        );
</code></pre>

<p>instead of</p>

<pre><code>Inst_IMem: IMem PORT MAP(
    CLK =&gt; clk,
    ADDR =&gt; foo,
    DATA =&gt; bar
);
</code></pre>

<p>How can I make Vim indent VHDL as it would indent programming languages such as C and Java? I.e. a new indentation level (either a tab or say four spaces) for every new nesting level.</p>
","<p>This seems to be fairly simple, you only need to use:</p>

<pre><code>:let g:vhdl_indent_genportmap = 0
</code></pre>

<p>And you're done :-)</p>

<p>I found this in <code>/usr/share/vim/vim74/indent/vhdl.vim</code>:</p>

<pre><code>"" option to disable alignment of generic/port mappings
if !exists(""g:vhdl_indent_genportmap"")
  let g:vhdl_indent_genportmap = 1
endif
</code></pre>

<p>Which is used further below:</p>

<pre><code>if g:vhdl_indent_genportmap
  return ind2 + stridx(prevs_noi, '(') + &amp;sw
else
  return ind2 + &amp;sw
endif
</code></pre>

<p>So if it's off (0), it will only indent a single <code>shiftwidth</code>, if it's on (1), it uses the location of the <code>(</code> on the previous line + `shiftwidth.</p>

<p>This (and some other things) are also documented in <a href=""http://vimhelp.appspot.com/indent.txt.html#ft-vhdl-indent"" rel=""nofollow""><code>:help ft-vhdl-indent</code></a>; I found this page by typing <code>:help vhdl</code> (a number of filetypes have their own help pages).</p>
","2346"
"Navigation with Tagbar","664","","<p>I'm using <a href=""http://majutsushi.github.io/tagbar/"" rel=""nofollow"">Tagbar</a> (with C++) and I would like to understand if and how it is possible to navigate the code as follow:</p>

<ul>
<li>Find all references of a variable or methods (where the variable or method is used/called... Something like <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>G</kbd> in Eclipse). It would be great if they would list in the Quickfix list.</li>
<li>Leave <em>fixed</em> the Tagbar window while I moving around in my files. So I would like to have a toggle to stop Tagbar <em>following</em> me.</li>
<li>Regenerate the tags from the root folder (the current folder when I opened Vim)</li>
</ul>
","<ul>
<li>A variety of methods are at your disposal

<ul>
<li>There are some very useful commands listed <a href=""http://vim.wikia.com/wiki/Displaying_a_variable/macro_definition"" rel=""nofollow noreferrer"">here</a>, most notably <code>[I</code>, which will <strong>display all lines in the current and all included files containing the keyword under the cursor</strong>. See <code>:h [I</code> and <code>:h include-search</code>.</li>
<li>You can <code>:grep</code> or <code>:vimgrep</code> to search for occurrences of a particular symbol (or any pattern for that matter), and the results will be loaded into the Quickfix (or location) list which you can browse using <code>:copen</code> (or <code>:lopen</code>). See <code>:h :grep</code>. There is also <a href=""https://github.com/rking/ag.vim"" rel=""nofollow noreferrer""><code>Ag.vim</code></a>.</li>
<li>You could make use of cscope, as suggested in the first part of this <a href=""https://stackoverflow.com/a/9616315/1208424"">answer</a> to a similar question</li>
</ul></li>
<li>Try <code>:TagbarTogglePause</code>.</li>
<li>Use one of the handful of tag generation plugins floating around, or create a mapping that runs ctags. As far as Tagbar being able to do this for you, I'm uncertain. Browse <code>:h tagbar</code> and find out for yourself.</li>
</ul>
","2648"
"Copy and pasting blocks of text anywhere","656","","<p>I have two blocks of text and I want to merge them. However, the problem is that the blocks are not synchronous and I want to place one in front of the other completely. For example, suppose we have the following block of text:</p>

<pre><code>aaaaaaaa
aaaaaaaa
aaaaaaaa
aaaaaaaa
aaaaaaaa
</code></pre>

<p>and the following block:</p>

<pre><code>bbbbbbbb
bbbbbbbb
bbbbbbbb
bbbbbbbb
</code></pre>

<p>And I want to merge them thus:</p>

<pre><code>aaaaaaaabbbbbbbb
aaaaaaaabbbbbbbb
aaaaaaaabbbbbbbb
aaaaaaaabbbbbbbb
</code></pre>

<p>I can't copy line by line because there are many lines in both files and they could be different. </p>
","<p>Select all 'bbbb..' text using <code>Ctrl-V</code> (visual block selection mode), yank; then go to the last char of the first <code>aaaa...</code> string, hit <code>Ctrl-V</code> again; go down to the last <code>aaaa ...</code> string, while staying in the same column (so cursor is still on the last <code>a</code> character). You are still in block selection mode. Hit 'p' to paste.</p>
","5405"
"How to access a custom python module inside vim?","656","","<p>This is a Python 2.7 question. I have a custom python 2.7, that I have compiled and have been using successfully across my system. My custom python has the YAML modules installed as well.</p>

<p>The system wide Python 2.7 is in it's usual path on OSX:
<code>/System/Library/Frameworks/Python.framework/Versions/2.7/</code></p>

<pre><code>function! MyPythonFunction() abort
    echo a:testString
    python &lt;&lt; EOF
    import yaml
    print yaml
    print ""PYTHON: My Python function.""
    EOF
    return 1
endfunction
</code></pre>

<p>When I run a Python based function as the one above, I can see that the system wide Python2.7 is active. So for that reason my YAML import fails, as I do not have YAML installed under my system Python.</p>

<p>Is there a way to tell VIM to use my custom Python2.7 that lives inside:
<code>/Users/me/apps/Darwin64/python2.7/</code></p>

<p>or somehow call my custom YAML module?</p>

<p>I have done a bit of research and I think there are things that I can tweak through VIM's Python modules (import vim) and there is a Python2 <code>rtp</code> config. However I am not sure how to set those up.</p>

<p>Thanks.</p>
","<p>Here is the answer to this question, however, first things first:</p>

<ul>
<li>I do not use macports or brew.</li>
<li>The ideal workflow for me would be to download the source code of any package, module, library or app and compile it myself.</li>
</ul>

<p>For those reasons listed above, <code>brew</code> was not an option for me. So here is the solution:</p>

<pre><code>export CC=clang # Will be assumed automatically, most of the times
export vi_cv_path_python=/Users/me/apps/Darwin64/python2.7/bin/python
export vi_cv_dll_name_python=/Users/me/apps/Darwin64/python2.7/lib/libpython2.7.dylib
export DYNAMIC_PYTHON_DLL=/Users/me/apps/Darwin64/python2.7/lib/libpython2.7.dylib

./configure --with-features=huge \
    --enable-cscope=yes \
    --enable-pythoninterp=yes \
    --enable-rubyinterp=yes \
    --enable-perlinterp=yes \
    --enable-luainterp=yes \
    --with-lua-prefix=/Users/me/apps/Darwin64/lua-5.2.3-clang-500.2.79 \
    --with-python-config-dir=/Users/me/apps/Darwin64/python2.7/lib/python2.7/config \
    --with-compiledby=Symbolix
</code></pre>

<p><em>(Some of the ENV variables above, might not be necessary. I not sure about what I did regarding the $PYTHONHOME and $DYLD_LIBRARY_PATH variables. As far as I remember, those were not important for the above command to be successful. You might need to have your custom Python at the front of your $PATH variable though.)</em></p>

<p>Please note that I am linking against my own custom lua.</p>

<p>Then:</p>

<pre><code>make
cd ./MacVim/build/Release/
open MacVim.app
cp -vr MacVim.app /Applications/
</code></pre>

<p>This worked for me on OSX 10.10.5 and VIM 7.4.1553 and I can confirm that VIM is linked properly against my own version of Python2.7. When I type: <code>:py import yaml; print yaml</code> I get the following:</p>

<pre><code>&lt;module 'yaml' from '/Users/me/apps/Darwin64/python2.7/lib/python2.7/site-packages/yaml/__init__.pyc'&gt;
</code></pre>

<p>I am still testing this and it seems to be stable and working so far. Now, I am not depending on System Python and I can take care of my own packages etc. If something breaks, I will let you know. Also I do not need to alter any of the <code>sys.path</code> or in fact I do not need to do anything extra to access my own python and the modules inside.</p>

<p>One important aspect is that if you run into trouble compiling this, make sure that you have the latest Xcode and you have run <code>xcode-select --install</code> before compiling VIM from source. If things are still not working make sure to check the build log inside <code>./src/auto/config.log</code> everything that you need to debug your build process is in there. Good luck.</p>
","7124"
"How can I source a visual selection of vimscript?","655","","<p>If I have a couple of lines of vimscript that I want to test before putting in my vimrc, is it possible to visually select, then source them?</p>

<p>I have tried </p>

<ul>
<li>make visual selection <kbd>v</kbd>, then motions to make selection etc, then</li>
<li><code>:'&lt;,'&gt;so</code></li>
</ul>

<p>But vim gives an error </p>

<blockquote>
  <p>no range allowed</p>
</blockquote>

<p>also</p>

<pre><code>:'&lt;,'&gt;w | so
</code></pre>

<p>gives </p>

<blockquote>
  <p>Use ! to write partial buffer</p>
</blockquote>

<p>How can I source visually selected vimscript?</p>
","<p>On the command line hit <code>&lt;C-u&gt;</code> then type <code>@*</code> and enter.</p>

<p><code>&lt;C-u&gt;</code> will delete the visual range <code>'&lt;,'&gt;</code> that has been automatically inserted if some text is visually selected.</p>

<p><code>:@*</code> will execute the content of the <code>*</code> register which contains whatever is visually selected at the moment.</p>

<p>Even if the text that is selected / highlighted is in your web browser (firefox, chrome, ...), it will work, the <code>*</code> register will allow you to access it directly in vim.</p>

<hr>

<p>If your text is selected in a vim buffer, another solution is to copy it in a named register, for example the <strong>a</strong> register by typing <code>""ay</code>.</p>

<p>Then, on the command line, type : <code>&lt;C-r&gt;a</code> and enter.<br>
<kbd>Ctrl</kbd> + <kbd>r</kbd> will give you a sort of prompt represented by the character <code>""</code> (for more information read <code>:h c_Ctrl-r</code>).<br>
At this new prompt, if you give the name of a register, its content will be inserted on the command line, where you'll be able to edit it before execution. </p>

<hr>

<p>Besides if you copy some text without specifying a register, it will be accessible from the unnamed register <strong>""</strong>.</p>

<p>So suppose you've got a line of vimscript in a file and want to source it quickly, you can copy it with <code>Y</code>, then source it on the command line with : <code>:&lt;C-r&gt;""</code> and enter.</p>

<p>Finally, if you use this last solution, there's just a problem you must be aware of.<br>
If you see a strange character on the command line like this <code>^M</code>, it's the <a href=""https://en.wikipedia.org/wiki/Caret_notation"">caret notation</a> of the carriage return. You should delete it, otherwise you'll probably get an error.</p>

<p>In summary, you :</p>

<ol>
<li>copy your line of vimscript with <code>Y</code></li>
<li>switch to command mode with <code>:</code></li>
<li>hit <code>&lt;C-r&gt;</code> to enter the registers prompt</li>
<li>type <code>""</code> to call the unnamed register</li>
<li>hit backspace to delete the <code>^M</code> character</li>
<li>and hit enter.</li>
</ol>
","5463"
"How can I search for a string between certain line numbers?","654","","<p>This is a problem I had recently. I have a file with several hundred lines of text. How can I search for a string between two specific line numbers? For e.g. I want to search between line numbers 100 and 325.</p>
","<pre><code>:firstline,lastline/search/
</code></pre>

<p>For example, on the list generated for <a href=""https://vi.stackexchange.com/questions/12/how-can-i-generate-a-list-of-sequential-numbers-one-per-line/14#14"">this question</a>, this works:</p>

<pre><code>:1,10/8/
</code></pre>
","22"
"How do I get back to the previous line after moving?","653","","<p>I am new to Vim. My code file has 300 lines. Suppose currently the cursor is on line 254, and I used <code>gg</code> command the cursor turn to line 1. I want to go back to line 254 but I forget that line number. Is there a command the can do this?</p>
","<p>Use <code>``</code> to jump back to the exact position you were in before you searched/jumped, or <code>''</code> to jump back to the start of the line you were on before you searched/jumped.</p>

<p>You can also use <kbd>CTRL+O</kbd> and <kbd>CTRL+I</kbd> for jumping back and forward.</p>

<p>See also:</p>

<ul>
<li><a href=""https://stackoverflow.com/q/53911/123527"">In vim, how do I go back to where I was before a search?</a></li>
<li><a href=""https://stackoverflow.com/q/5052079/123527"">Move cursor to its last position</a></li>
</ul>
","4763"
"Supertab or Jedi for Python Autocompletion","653","","<p>I'm trying to add a good Tab autocompletion plugin for VIM and I've found <a href=""https://github.com/davidhalter/jedi-vim"" rel=""nofollow"">Jedi</a>, but on its docs it says to use <a href=""https://github.com/ervandew/supertab"" rel=""nofollow"">Supertab</a>.</p>

<p>I don't understand the difference between the two. I'm writing Python and I would like tab completion. Why should I use one or the other?</p>
","<p>I do not use Vim-Jedi but from what the doc says, the plugin allows completion using <kbd>Ctrl</kbd><kbd>Space</kbd>.</p>

<p>Supertab is another plugin which remaps <kbd>Tab</kbd> to a sensible autocomplete behavior. </p>

<p>The author only suggests to use supertab if you want to use the <kbd>Tab</kbd> key to trigger Vim-Jedi completion <em>(This is easier than remapping the key by
yourself in your <code>.vimrc</code>)</em>. </p>

<p>This means that you can use Vim-Jedi without supertab if you like its original completion with <kbd>Ctrl</kbd><kbd>Space</kbd>. IMO you should just give Vim-Jedi a try without supertab and when you're comfortable with it, you'll see if you want to use supertab and make your choice.</p>
","4876"
"Manipulate chars with their ascii code","652","","<p>Let say I have</p>

<pre><code>let l:letter = 'A'
</code></pre>

<p>is there a function that takes <code>l:letter</code> ascii code and transforms it to <code>'B'</code>? I mean something like</p>

<pre><code>let l:next_letter = l:letter + 1
</code></pre>

<p>I know there's <code>&lt;Ctrl-A&gt;</code> with <code>set nf=alpha</code>, but that requires to have the cursor over the character in the document and I was wondering if it's possible to do it with a variable without modifying the document.</p>

<p>Here's what I try so far, but as I said, it modifies the document and the cursor position:</p>

<pre><code>fu! s:get_next_char(letter)
    set nf=octal,hex,alpha
    call setline(line('$') + 1, a:letter)
    exe ':normal! G^'.""\&lt;C-A&gt;""
    set nf=octal,hex

    let l:next_letter = getline('$')
    normal! Gdd
    return l:next_letter
endfu
</code></pre>
","<p>It's easy to do with <a href=""http://vimhelp.appspot.com/eval.txt.html#nr2char%28%29""><code>:help nr2char()</code></a> and <a href=""http://vimhelp.appspot.com/eval.txt.html#char2nr%28%29""><code>:help char2nr()</code></a>.</p>

<p>Example usage:</p>

<p><code>:let b_char = nr2char(char2nr('A') + 1)</code></p>

<p>Then, <code>:echo b_char</code> will return 'B'</p>
","3014"
"Why doesn't vimscript provide a random number generator?","651","","<p>I recently needed to generate a random number in vim and <a href=""https://vi.stackexchange.com/questions/807/how-to-generate-random-numbers/"">this question</a> gave me all the solutions I needed.</p>

<p>But I still have a question: <strong>Why is there no built-in function to generate a random number?</strong> </p>

<p>I mean the vimscript language provides functions to work with numbers like <code>round()</code>, <code>min()</code>, the basic operators <code>+-*/</code>, so what explains that the absence of a <code>rand()</code> function?</p>

<p>For now I see 2 possible explanations but I wasn't able to validate any of them:</p>

<ul>
<li><p>Technical limitations: I know the bad reputation of this language but I don't see what would make it unable to generate a random number.</p></li>
<li><p>""Ideological"" limitation: The creator of vim script could have decided that the language being made to edit text, doesn't need to generate random numbers and this functionality shouldn't be available to the user. I'm not a Vim guru but I don't understand how including such a function would hurt anything or anyone.</p></li>
</ul>

<p>Is there another reason that I couldn't figure out by myself? Could someone enlighten me on this? </p>
","<p>Because <a href=""https://groups.google.com/forum/#!topic/vim_dev/dyimEYRG_Ao"">the</a> <a href=""https://groups.google.com/forum/#!msg/vim_dev/9ELfTp_rbW8/dMgXd3h2nt0J"">patches</a> have been sitting in the TODO list for almost five years.</p>

<p>Don't forget, vimscript wasn't <em>designed</em>: it is only the ever-changing interim result of a slow evolutionary process. Hell, it didn't even have an actual name in the doc until ""VimL"" was discreetly slipped in a bit before 7.4.</p>
","3834"
"How do I prevent Vim from loading plugins on older configurations?","650","","<p>I have a couple of plugins that don't work correctly on some machines running earlier versions of Vim. </p>

<p>Is there a way to supress the <code>Error detected while processing...</code> errors when I start up vim in these environments?</p>
","<p>If you happen to have <a href=""https://github.com/tpope/vim-pathogen"" rel=""nofollow"">pathogen</a>, another solution here is to use its <code>g:pathogen_disabled</code> array variable. In your .vimrc you can add bundle names to this array based on vim's reported environment. Upon calling call <code>pathogen#infect()</code>, it will not enable the listed plugins.</p>

<pre><code>""Airline only works on Vim 7.2+
let g:pathogen_disabled = []
if v:version &lt; 702
  call add(g:pathogen_disabled, 'vimproc')
endif
pathogen#infect()
</code></pre>
","4277"
"Solarized color scheme doesn't work Mac Terminal.app","647","","<p>I want to use the Solarized Light theme in both my Terminal and VIM.</p>

<p>I seem to have got it working in Terminal, I downloaded the entire package from their website, <code>tree</code> output, and then in my terminal preferences I imported the <code>Solarized Light xterm-256color</code> profile from the download.</p>

<p><a href=""https://i.stack.imgur.com/jl3H8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jl3H8.png"" alt=""enter image description here""></a></p>

<p>And I set this as my default profile and it seems to look ok:</p>

<p><a href=""https://i.stack.imgur.com/8qbLN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8qbLN.png"" alt=""enter image description here""></a></p>

<p>Then, I proceeded to try to set VIM's color scheme to Solarized Light as well, so I git-cloned git://github.com/altercation/vim-colors-solarized.git into my <code>~/.vim/bundle</code> (I use Pathogen).</p>

<p>See a paste bin of some <code>ls</code> and <code>tree</code> outputs in my <code>~/.vim/bundle</code> <a href=""http://pastebin.com/5uQW7RwD"" rel=""nofollow noreferrer"">here</a></p>

<p>But even after adding the correct information to <a href=""http://pastebin.com/NcXHJAKu"" rel=""nofollow noreferrer"">my vimrc</a> it looks really ugly:</p>

<p><a href=""https://i.stack.imgur.com/P598h.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/P598h.png"" alt=""enter image description here""></a></p>

<p>Why does it not seem to work? You can see around the edges of the terminal the colors it should be, why is the text so unreadable and the background color so ugly?</p>
","<p>I fixed the issue by setting <code>g:solarized_termcolors</code> to <code>16</code> instead of <code>256</code>.</p>

<pre><code>let g:solarized_termcolors=16
</code></pre>
","10191"
"Is there a way to insert a single character and then exit insert mode?","646","","<p>When I'm going through text and, for instance, adding backticks around certain words or quotes or whatever, it is irritating that I have to press Esc or Ctrl-[ after each insert.  The inserts (and appends) are different, so <code>.</code> doesn't help much.</p>

<p>Is there anything similar to <code>r</code> that returns to normal mode after a single character—but uses insert mode instead of replace mode?</p>
","<p>If there isn't (I haven't looked), you can use this mapping in your <code>.vimrc</code>:</p>

<pre><code>nnoremap &lt;C-I&gt; i &lt;ESC&gt;r
</code></pre>

<p>It <code>i</code>nserts, places a space, <code>ESC</code>apes, and starts a single letter <code>r</code>eplace. This gets mapped to <kbd>Ctrl</kbd><kbd>I</kbd>.</p>

<p>It's a hack, and will leave a hanging space if you hit escape before you type a letter - but it's better than nothing!</p>
","5177"
"Detect neovim terminal from bash in bashrc","645","","<p>Does neovim set any environment variables that would let me detect from bash that the terminal is neovim? I want to change the behavior of my <code>.bashrc</code> if neovim is the terminal.</p>
","<p>I compared the output of running <code>env</code> in a standard terminal to the output when running it within Neovim, and it looks like these variables are new:</p>

<pre><code>VIMRUNTIME=/usr/local/Cellar/neovim/HEAD/share/nvim/runtime
VIM=/usr/local/Cellar/neovim/HEAD/share/nvim
NVIM_LISTEN_ADDRESS=/var/folders/_8/sy7jjpw55mbgn2prml0fbsgc0000gn/T/nvimaLHjPR/0
</code></pre>

<p>(The <code>vim</code> I have also has <code>$VIM</code> and <code>$VIMRUNTIME</code> so their mere presence doesn't indicate Neovim vs Vim...)</p>
","6179"
"Incorrect auto-indent in python code","645","","<p>I have a following python code, which contains both 4 space and 2 space indents.</p>

<pre><code>class Foo(object):
    def __init__(self,
                 flag = False):
      if flag:
        print(""hello"")
        print(""how are you?"")
</code></pre>

<p>When I auto-indent the python code below with <code>gg=G</code>, the above code becomes</p>

<pre><code>class Model(object):
    def __init__(self,
                 flag = False):
        if flag:
            print(""hello"")
        print(""how are you?"")
</code></pre>

<p>The code is wrong because the last line should be under the <code>if</code> block. Why is this happening?</p>
","<p>In this case, the auto-indentation seems confused because the <code>def __init__()</code> is indented by four spaces, while the others are indented by two spaces. This is valid Python, but the Vim Python indentation code doesn't seem to be advanced enough to deal with this.</p>

<p>In the Python source there's <code>Tools/scripts/reindent.py</code>, which can fix indentation. When I run it on your example it seems to work as expected.</p>

<p>You can use <a href=""http://vimhelp.appspot.com/options.txt.html#%27equalprg%27""><code>'equalprg'</code></a> to run this with <code>=</code>:</p>

<pre><code>autocmd FileType python setlocal equalprg=/home/martin/src/Python-3.5.1/Tools/scripts/reindent.py
</code></pre>

<p>Some distros also package this script with the main Python package. Debian/Ubuntu puts it in the <code>python-examples</code> package. </p>

<p>There are also some other tools, like <a href=""https://pypi.python.org/pypi/autopep8"">autopep8</a>. Personally, I don't like autoformatting tools that do too much, as they break the most important style rule of all: think and do something sane.</p>

<p>I looked at the source of <code>reindent.py</code>, and it seems like a well-built script (<em>Carpetsmoker seal of approval™</em>). I believe <code>autopep8</code> is used quite a lot, so I'll assume that works well enough too.</p>
","6948"
"How can I run a batch file in Vim's console?","644","","<p>I want to use Vim as a simple c++ editor in windows (I have no experience with Linux). Nothing fancy, just want to get things started.</p>

<p>To compile a .cpp file from CMD I have to run a batch file in the CMD and then I can compile and run the program, i.e <code>g++ -o program program.cpp</code>. </p>

<p>I want to do this directly from Vim, like a custom command that does both runs the specific batch file and the run command.</p>

<p>I am completely beginner in Vim and currently have no idea what to do next. Thanks for helping me.</p>

<p>Edit :</p>

<p>All i want is a way to open <strong>Windows CMD</strong> then <strong>Run my batch file</strong> and then <strong>run  <code>g++ -o program program.cpp</code></strong>. How can i do that with single command in Vim. </p>
","<p>Why do you need to run that batch file? To set <code>PATH</code> to include <code>g++</code> and all? If so, you should consider opening a console, running that script from the console and eventually launching Vim from that same console. Or you could make sure the <em>""environment variables""</em> set in that script are defined to be always set on your windows system.</p>

<p>Then, depending on what provides you gcc, it could be very simple to compile single file programs from vim. Typing <code>:make %&lt;</code> is enough with a correctly configured programming environment. On Windows, this means installing g++ through cygwin distribution. Mingw is very badly configured. With this one, you'll have to set <code>:set makeprg=g++\ -o\ $*\ $*.cpp</code> (typed from memory -- I stay away from mingw and thus, I never need to do this) -- or if you really want to run vim from the window explorer: <code>:let &amp;makeprg = 'c:/path/to/that/script.bat &amp;&amp; g++ -o $* $*.cpp'</code>. Or you can define a Makefile as others have explained you.</p>

<p>More details about what is possible with a correctly configure programming environment on the big sister/brother site: <a href=""https://stackoverflow.com/a/35702919/15934"">https://stackoverflow.com/a/35702919/15934</a></p>
","10494"
"Is it possible to get tag navigation that works with RequireJS?","643","","<p>Are there any features/plugins/external tools which can be used to get tag navigation that understands RequireJS imports? </p>
","<h1>Built-in definition search</h1>

<p>Vim is able to follow ""includes"" for completion and for navigation. What constitutes an ""include"" can be defined with the <code>'include'</code> option.</p>

<p>Sadly, Vim's include mechanism is not flexible enough to work with RequireJS's standard way to define multiple dependencies in a same line:</p>

<pre><code>define(foo, [""bar"", ""module/baz""], function(Bar, Baz) {
</code></pre>

<p>but we can sort of work around that limitation by putting every dependency on its own line (which is a lot cleaner anyway… I'm looking at you, K. ;-)):</p>

<pre><code>define(foo, [
    ""bar"",
    ""module/baz""
], function(Bar, Baz) {
</code></pre>

<p>It is possible (but not really straightforward) to craft an <code>'include'</code> value that deals with the notation above <em>and</em> the new <code>import</code> from ES6 or its bastard copycats found in recent libraries like RequireJS.</p>

<p>Adding the code below to <code>~/.vim/after/ftplugin/javascript.vim</code> should give you a reasonably working setup:</p>

<pre><code>setlocal define=^\\s*\\(function\\\|var\\\|define\\)[('\""]\\{-\\}
setlocal suffixesadd+=.js
if &amp;expandtab
    let &amp;l:include = '^\s\{,' . &amp;shiftwidth . ""}\\(import[^'\\\""]*\\)*['\\\""]\\zs[^'\\\""]*\\ze""
else
    let &amp;l:include = ""^\t\\(import[^'\\\""]*\\)*['\\\""]\\zs[^'\\\""]*\\ze""
endif
</code></pre>

<p>With that, you should be able to do:</p>

<pre><code>:dlist foobar
</code></pre>

<p>in this buffer:</p>

<pre><code>define(main, [
    ""imports/imports""
], function(imports) {
    return ""main"";
});
</code></pre>

<p>and get a list like this:</p>

<pre><code>imports/imports.js
  1:    2     function foobar() {
</code></pre>

<p>Basically, Vim can now search for stuff in the current buffer <em>and</em> imported files which will make the features below work with your code:</p>

<pre><code>:dlist foo     list possible definitions of foo
[D             jump to definition of current word
:ilist bar     list occurrences of bar
[I             jump to first occurrence of current word
gf             jump to include under the cursor
&lt;C-n&gt;/&lt;C-p&gt;    keyword completion from many sources including includes
</code></pre>

<p>This can be slower than tag-based navigation but it is often a lot more accurate: <code>:dlist foo</code> will only list the <code>foo</code> that are relevant to your current context (from the current buffer, the files ""included"" in the current file and the files included in those ""includes"") whereas <code>tselect foo</code> will list every <code>foo</code> in your project.</p>

<h3>Resources</h3>

<pre><code>:help include-search
:help 'include'
:help 'suffixesadd'
:help 'define'
</code></pre>

<h1>Tags</h1>

<p><a href=""http://ctags.sourceforge.net/"" rel=""nofollow"">Ctags</a> doesn't follow includes: it merely indexes whatever indexable files it finds where you tell it to search. Tag search being a bit naïve, it can be cumbersome to find the right tag in large projects with many dependencies. This is not a JavaScript issue, though, the same applies to every supported language.</p>

<p><a href=""http://cscope.sourceforge.net/"" rel=""nofollow"">Cscope</a> follows includes in some languages and is generally smarter than ctags but its ""oldschool"" JavaScript parser obviously doesn't care about your fancy ES6 imports or RequireJS dependencies. Like ctags, it can perfectly be used to search methods and such across your project but don't expect anything ""smart"".</p>

<p><a href=""http://ternjs.net/"" rel=""nofollow"">Tern</a> is a code-analysis engine designed to work with ""modern"" JavaScript so you can expect it to find your definitions and usages, even in large projects. I find it too slow but it is really good at what it does.</p>

<h3>Resources</h3>

<pre><code>:help tags
:help ctags
:help cscope
</code></pre>
","3733"
"Youcompleteme on Mac OS X","642","","<p>I'm trying to use the <a href=""https://github.com/Valloric/YouCompleteMe"" rel=""nofollow noreferrer"">YouCompleteMe</a> auto completion plugin.</p>

<p>I have installed MacVim version 7.4.</p>

<p>I followed the instructions on the linked page for Mac OS X  by making the symlink:</p>

<pre><code>ln -s /usr/local/bin/mvim vim
</code></pre>

<p>When installing the plugin with Vundle, I got some errors, which I unfortunately didn't copy or save. YCM however seems to be instaled.</p>

<p>When I open vim from the Terminal however, I get this, and there is no auto completion:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;string&gt;"", line 19, in &lt;module&gt;
  File ""/Users/user/.vim/bundle/YouCompleteMe/autoload/../python/ycm/setup.py"", line 37, in SetUpSystemPaths
    from ycmd import server_utils as su
  File ""/Users/user/.vim/bundle/YouCompleteMe/python/ycm/../../third_party/ycmd/ycmd/server_utils.py"", line 25, in &lt;module&gt;
    import io
  File ""/Users/user/anaconda/lib/python2.7/io.py"", line 51, in &lt;module
    import _io
ImportError: dlopen(/Users/user/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/user/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/user/anaconda/lib/python2.7/lib-dynload/_io.so
YouCompleteMe unavailable: dlopen(/Users/user/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/user/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/user/anaconda/lib/python2.7/lib-dynload/_io.so
Press ENTER or type command to continue
</code></pre>
","<p><a href=""https://github.com/Valloric/YouCompleteMe/issues/1241"" rel=""nofollow noreferrer"">YouCompleteMe does not work with Anaconda Python.</a></p>

<p>Disable Anaconda by commenting out the relevant line from your <code>~/.bash_profile</code> and then try to install YouCompleteMe again. After that you can reenable Anaconda.</p>
","12832"
"Do VimScript functions have to start with a capital letter and if so, why?","640","","<p>Is there a good reason why VimScript functions that I put in my <code>.vimrc</code> or <code>_vimrc</code> have to begin with a capital letter?  </p>
","<p>To quote <a href=""http://vimhelp.appspot.com/eval.txt.html#user-functions""><code>:help user-functions</code></a></p>

<blockquote>
  <p>The function name must start with an uppercase letter, to avoid confusion with
  builtin functions.</p>
</blockquote>

<p>The same restriction is placed on user-defined commands, although there are a few builtin commands (<code>:N[ext]</code>, <code>:P[rint]</code>, <code>:X</code>) which start with capital letters.</p>
","2660"
"Is it possible to create custom ""set"" commands in my rc file and call them from a modeline?","640","","<p>I recently <a href=""https://vi.stackexchange.com/q/2547/267"">asked a question</a> in which I learned that it is not possible to pass anything except parameters to <code>:set</code> in vim modelines. I understand the security concerns, but I'm wondering if there isn't another way around this. A <a href=""https://stackoverflow.com/q/29097673/313192"">recent question on SO</a> about setting large batches of parameters to comply with a coding standard got me to thinking—would it be possible to define a ""group"" of things in my rc file that can be turned on or off from the modeline?</p>

<p>Excuse the pseudo code, but is there a way to create a function that is triggered from a set parameter?</p>

<pre><code>set_function! codestyle()
    if &amp;1 == 'psr-2'
        set ts=4
        set sw=4
    endfi
    if &amp;1 == 'drupal7'
        set ts=2
        set sw=2
        iab D8 Drupal 8
    endif
endset_function
</code></pre>

<p>This could then be triggered by a modeline such as</p>

<pre><code># vim: codestyle=psr-2
</code></pre>

<p>This would be in some ways be similar to file type matching, but allow manual overrides. It would also setting up the environment in other pre-defined ways, avoiding the security issues of having a file run other arbitrary commands in vim but allowing a more customized environment. Is there a way to do this?</p>
","<p>You have a few choices.</p>

<ol>
<li><p>First one: You can write your own kind of modeline decoder, i.e. a plugin. This is a very similar answer to the one I gave to your other question.</p>

<p>Indeed, we cannot add new vim options (that can be set with <code>:set</code>), but we can add new variables. And we cannot use the standard modelines to do more than setting vim options. </p></li>
<li><p>Second possibility: <a href=""https://raw.githubusercontent.com/LucHermitte/lh-misc/master/plugin/let-modeline.vim"">let-modeline</a> could be exploited through the <em>callback</em> feature to call one function or another. You could have your <code>CodeStyle()</code> function in your <code>.vimrc</code> or a (autoload?) plugin, then have your files contains:</p>

<pre><code># VIM: let b:codestyle='psr-2' b:ModeLine_CallBack='CodeStyle'
</code></pre>

<p>But if your need is this precise and if you really don't want plugins like <a href=""https://github.com/LucHermitte/local_vimrc"">local_vimrc</a>, then write your own modeline-like decoder.</p></li>
<li><p>The third, and IMO, better choice in that case would be to define a new filetype and set <code>'ft'</code> to this filetype in modelines with: <code># vim: set ft=php.psr2</code>. With <code>php</code> being the global usual filetype (I'm not sure about this one), and <code>psr2</code> being the specialized filetype that'll correspond to your coding styles. You'll have to define two ftplugins: ftplugin/psr2.vim and and ftplugin/drupal7.vim where you'll put your calls to <code>:setlocal</code> (and not <code>:set</code>).</p></li>
</ol>
","2599"
"Current line number aligned to the left with number and relativenumber","639","","<p>I use relative line numbers along with an absolute line number for the current line:</p>

<pre><code>set number
set relativenumber
</code></pre>

<p>The absolute current line number is always aligned to the left, and the help pages (or Google) don't seem to provide an option to change this.</p>

<p>Is it possible to prevent this left align, or will I have to learn to live with it?</p>

<p><img src=""https://i.stack.imgur.com/cCatW.png"" alt=""enter image description here""></p>
","<p>From <code>screen.c</code>, <code>win_line()</code> function (around line 3707):</p>

<pre><code>/* 'number' + 'relativenumber' */
num = lnum;
fmt = ""%-*ld "";
</code></pre>

<p>The <code>%-</code> makes it left-aligned (See <code>sprintf(3)</code>). As you can see, this value is hard-coded.</p>

<p>If you really want this, you can modify it to:</p>

<pre><code>fmt = ""%*ld "";
</code></pre>

<p>and recompile. The result should be something like:</p>

<p><img src=""https://i.stack.imgur.com/poWa2.png"" alt=""enter image description here""></p>

<p>Of course, this might make a good candidate for an option/patch :-)</p>
","3517"
"Can I repeat a macro with the ""dot operator""?","637","","<p>Can I repeat a macro with the <code>.</code> command? For example, I'd like to be able to type:</p>

<pre><code>@q...
</code></pre>

<p>and have it effectively call <code>@q</code> 4 times. With the default behavior, this works only if 'q' holds a single command, for example <code>dw</code>, <code>x</code>, or <code>iHello&lt;esc&gt;</code>. (This makes sense though, since '.' repeats the last <em>change</em>, not the last keystrokes/command)</p>

<p>I'd also love to have this work with counts. For example, typing:</p>

<pre><code>3@q.
</code></pre>

<p>would be effectively the same as running <code>@q</code> 6 times. How can I configure this behavior?</p>
","<p>Give this a try. It remaps <code>@</code> so that <code>g@</code> (plus a dummy motion <code>l</code>) is used afterwards, thus becoming the last operator and subject to repeating with <code>.</code>.</p>

<pre><code>"" When . repeats g@, repeat the last macro.
fun! AtRepeat(_)
    "" If no count is supplied use the one saved in s:atcount.
    "" Otherwise save the new count in s:atcount, so it will be
    "" applied to repeats.
    let s:atcount = v:count ? v:count : s:atcount
    "" feedkeys() rather than :normal allows finishing in Insert
    "" mode, should the macro do that. @@ is remapped, so 'opfunc'
    "" will be correct, even if the macro changes it.
    call feedkeys(s:atcount.'@@')
endfun

fun! AtSetRepeat(_)
    set opfunc=AtRepeat
endfun

"" Called by g@ being invoked directly for the first time. Sets
"" 'opfunc' ready for repeats with . by calling AtSetRepeat().
fun! AtInit()
    "" Make sure setting 'opfunc' happens here, after initial playback
    "" of the macro recording, in case 'opfunc' is set there.
    set opfunc=AtSetRepeat
    return 'g@l'
endfun

"" Enable calling a function within the mapping for @
nno &lt;expr&gt; &lt;plug&gt;@init AtInit()
"" A macro could, albeit unusually, end in Insert mode.
ino &lt;expr&gt; &lt;plug&gt;@init ""\&lt;c-o&gt;"".AtInit()

fun! AtReg()
    let s:atcount = v:count1
    let c = nr2char(getchar())
    return '@'.c.""\&lt;plug&gt;@init""
endfun

nmap &lt;expr&gt; @ AtReg()
</code></pre>

<p>I've tried to handle as many corner cases as I can think of. You can
repeat <code>@:</code> with <code>.</code>. Counts to <code>@</code> or <code>.</code> are retained for subsequent
presses of <code>.</code>.</p>

<p>This is tricky, and I'm not convinced that something won't break
somewhere along the way. So no guarantees, warranties, or promises with
this one.</p>

<p>Personally, I'm okay having a difference between the fine-grained
repeats of <code>.</code> for the last change, and the macro repeats of <code>@@</code>.</p>

<p><strong>EDIT</strong></p>

<p>I figured, having gone this far, that I may as well add some additional code that will allow pressing <code>.</code> immediately
after recording a macro to play it back.</p>

<pre><code>fun! QRepeat(_)
    call feedkeys('@'.s:qreg)
endfun

fun! QSetRepeat(_)
    set opfunc=QRepeat
endfun

fun! QStop()
    set opfunc=QSetRepeat
    return 'g@l'
endfun

nno &lt;expr&gt; &lt;plug&gt;qstop QStop()
ino &lt;expr&gt; &lt;plug&gt;qstop ""\&lt;c-o&gt;"".QStop()

let s:qrec = 0
fun! QStart()
    if s:qrec == 1
        let s:qrec = 0
        return ""q\&lt;plug&gt;qstop""
    endif
    let s:qreg = nr2char(getchar())
    if s:qreg =~# '[0-9a-zA-Z""]'
        let s:qrec = 1
    endif
    return 'q'.s:qreg
endfun

nmap &lt;expr&gt; q QStart()
</code></pre>
","12590"
"How can I append text to the current line?","632","","<p>I'm currently trying to figure out vimscript and I stumbled upon the <code>append()</code> function. The documentation states that you can specify the line to which an expression should be appended to, so I tried:</p>

<pre><code>:call append(line('.'), Foo())
</code></pre>

<p><code>Foo()</code> returns a string.</p>

<p>The weird thing is that the string is appended to the next line after my current one. So I tried <code>line('.') - 1</code>, just to see that it appends to the line above the current one.</p>

<p>I'm amazed, confused and speechless at this moment.</p>

<p>Hope someone can shed some light on this.</p>
","<p><code>append()</code> inserts <em>several lines</em> of text below the line specified as the first argument.  This is in line with the <code>append</code> ex command.  You can for example type <code>:append</code> (and enter ex mode) then write several lines of text and exit ex mode (by pressing <code>&lt;c-c&gt;</code> for example), the lines will appear after the line your cursor is on.  In other words, the <code>append</code> command means: append the lines of text I'll write below the current one.</p>

<p>The VimScript function <code>append()</code> allows for line specifiers, which makes it more useful than the ex command.  Useful things that come often are ways of injecting pieces of text at the beginning and end of a file.  e.g. for LaTeX this may be useful:</p>

<pre><code>call append(line('^'), [ '\documentclass[12pt]{article}'
\                      , '\begin{document}'])
call append(line('$'), '\end{document}')
</code></pre>

<p>Where <code>line('$')</code> is the last line in the file and <code>line('^')</code> always returns <code>0</code> (and I could have written that instead without problems).</p>

<p>To get the behaviour of Vim's <code>A</code>, or any other Vim normal mode command you can use <code>normal</code>.  To get the output of <code>Foo()</code> to appear at the end of a line may be a little more complicated, one way is to use <code>execute</code>:</p>

<pre><code>execute ':normal! A' . Foo()
</code></pre>

<p>Or you can use append and then perform <code>J</code>:</p>

<pre><code>call append(line('.'), Foo())
normal! Jx
</code></pre>

<p>(Note that <code>x</code> is needed to remove the space generated by <code>J</code>, but this may not work as expected if the string generated by <code>Foo()</code> starts with spaces).</p>
","12447"
"How to remap ""i"" in netrw?","632","","<p>I remapped my hjkl keys to ijkl, but in netrw, ""i"" switches view styles.</p>

<p>How to change this? Is it possible to change this?</p>
","<p>If you want your cursor to move left when pressing <code>i</code> in the built-in file browser netrw, then try adding the following code in your <code>$MYVIMRC</code> file :</p>

<pre><code>augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
    noremap &lt;buffer&gt; i h
endfunction
</code></pre>

<p>The reason why your custom mapping didn't have the expected result, is probably because netrw set up mappings that are local to the buffer (using the <code>&lt;buffer&gt;</code> option), which means they override your global mappings.</p>

<p>The previous code adds an autocommand that automatically calls a function whenever you enter a buffer whose filetype is netrw. The function then sets up your mapping using the <code>&lt;buffer&gt;</code> option, which means it should be able to override the local mapping previously done by netrw.</p>

<p>I found the workaround from <a href=""https://unix.stackexchange.com/a/42939/125618"">this post</a>.</p>
","5532"
"Syntax highlight region / keyword overlap","632","","<p>I'm trying to write a syntax file for Linux logrotate scripts.</p>

<p>Often they contain inline definitions of scripts to be run before or after the rotate action.</p>

<p>An example (the <code>cups-daemon</code> logrotate script as provided by Ubuntu 14.04):</p>

<pre><code>    prerotate
            if [ -e /var/run/cups/cupsd.pid ]; then
                    invoke-rc.d --quiet cups stop &gt; /dev/null
                    touch /var/run/cups/cupsd.stopped
            fi
    endscript
    postrotate
            if [ -e /var/run/cups/cupsd.stopped ]; then
                    rm /var/run/cups/cupsd.stopped
                    invoke-rc.d --quiet cups start &gt; /dev/null
                    sleep 10
            fi
    endscript
</code></pre>

<p>Is there any way to both:</p>

<ul>
<li>highlight <code>prerotate</code> and <code>postrotate</code> as keywords, and</li>
<li>highlight all in between as a region?</li>
</ul>

<p>I may define proper highlighting for either of those, but it seems not for both.</p>

<pre><code>"" this works
syntax keyword LogrotateKeyword prerotate postrotate endscript

"" this also works
syntax region LogrotateScript start=/prerotate/ms=e+1 end=/endscript/me=s-1
</code></pre>

<p>Now both of those in the same syntax file yield only highlighting for keywords, regardless of the rule order used.</p>

<p>I tried <code>match</code> (with <code>\zs</code>/<code>\ze</code> or lookaheads/lookbehinds) instead of <code>region</code> too. I also tried to use <code>match</code> for both the keywords and inline scripts, hoping it would not make the definitions overlap, the results seem to be just the same.</p>

<p>I might keep the default color for the inline script, but apparently frequently the inline stuff contains other logrotate keywords, which might be confusing.</p>

<p>Most likely irrelevant to this issue: Vim 7.4 with patches 1-1529 (pi-rho PPA) and Ubuntu 14.04.</p>
","<p>After some experimenting, here's something that works:</p>

<pre><code>syntax keyword LogrotateKeyword prerotate postrotate endscript contained
syntax region LogrotateScript start=/\v^\s*(pre|post)rotate\s*$/rs=e+1 end=/^\s*endscript\s*$/re=s-1 keepend contains=LogrotateKeyword
</code></pre>

<p>To get one <code>syntax</code> set to cooperate with another that's overlapping, we can <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-contains"" rel=""nofollow noreferrer""><em>contain</em></a> the narrower match within the broader match.</p>

<p>In this case:</p>

<ul>
<li>I mark the keywords as <code>contained</code> and the region as containing the keywords. Marking the keywords is not necessary, but, considering the nature of these keywords, they will always be accompanied by this region in the valid case.</li>
<li>I had to use <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-keepend"" rel=""nofollow noreferrer""><code>keepend</code></a> so that the match for the keyword doesn't obscure the match for the end of the region.</li>
<li>I picked the broader regular expressions that cover the whole line, so that highlighting doesn't extend to these lines (or if you set a coloured background, it will look very weird).</li>
</ul>

<p>Combining with Vim's shell script syntax highlighting:</p>

<pre><code>syntax include @sh syntax/sh.vim
syntax keyword LogrotateKeyword prerotate postrotate endscript contained
syntax region LogrotateScript start=/\v^\s*(pre|post)rotate\s*$/rs=e+1 end=/^\s*endscript\s*$/re=s-1 keepend contains=LogrotateKeyword,@sh
highlight LogrotateKeyword ctermfg=yellow 
</code></pre>

<p>I get:</p>

<p><a href=""https://i.stack.imgur.com/m3c6X.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/m3c6X.png"" alt=""enter image description here""></a></p>

<p>Note that I used <code>re</code> and <code>rs</code> instead of <code>ms</code>/<code>hs</code>, <code>me</code>/<code>he</code>. With the other options, combining the keywords with shell script syntax didn't work, though I don't know why.</p>

<hr>

<p>The following would be better:</p>

<pre><code>syntax region LogrotateScript matchgroup=LogrotateKeyword start=/\v(pre|post)rotate/ end=/endscript/ contains=@sh
</code></pre>

<p>In this case, I take advantage of <a href=""http://vimhelp.appspot.com/syntax.txt.html#%3Asyn-matchgroup"" rel=""nofollow noreferrer""><code>matchgroup</code></a>:</p>

<pre><code>                                                        :syn-matchgroup
        ""matchgroup"" can be used to highlight the start and/or end pattern
        differently than the body of the region.  Example: 
  :syntax region String matchgroup=Quote start=+""+  skip=+\\""+  end=+""+
       This will highlight the quotes with the ""Quote"" group, and the text in
        between with the ""String"" group.
</code></pre>

<p>Looking back, <code>matchgroup</code> was meant to solve exactly this problem. We don't need to list out the delimiting keywords separately, since <code>matchgroug</code> lets us highlight the delimiters separately.</p>
","6960"
"How to get rid of the command line bar?","629","","<p>I am using <a href=""https://github.com/vim-airline/vim-airline"" rel=""nofollow noreferrer"">vim-airline</a> and it's really nice.</p>

<p><a href=""https://i.stack.imgur.com/jMB0Y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jMB0Y.png"" alt=""vim statusbar screenshot""></a></p>

<p>However, I get that second status bar below it which I want to hide.</p>

<p>I have tried <code>set noshowmode</code> in my <code>.vimrc</code>, but that only seemed to hide the default mode indicator.</p>

<p>Obviously the filename there is redundant (airline covers it) and the lines and char count aren't so useful to me.</p>

<p>Also, if I hide it, will it come back if I use <code>echoe ""hello""</code> in my <code>.vimrc</code>?</p>

<p><a href=""https://raw.githubusercontent.com/alexanderdickson/dotfiles/896344cabc02f29da7c2cb6979c9e97c4fad575b/vimrc"" rel=""nofollow noreferrer"">My <code>.vimrc</code></a></p>
","<p>No, it's impossible to hide the command-line.</p>

<p>-- EDIT --</p>

<p>You can prevent Vim from echoing <code>""filename"" XXXL, XXXC</code> when editing a file by prepending <code>silent</code> to <code>e</code>:</p>

<pre><code>:silent e foo
</code></pre>
","6733"
"Is the ~/.vim directory used for anything other than plugins?","629","","<p>What is <code>~/.vim</code> used for, if anything, other than plugins? Is it part of Vim proper or was it ""invented"" by plugin managers like Vundle?</p>

<p><em>I'm not sure what to tag this with, sorry</em></p>
","<p>I don't have conclusive evidence, but:</p>

<ul>
<li><p><code>.vim</code> is one of the default values of <a href=""http://vimhelp.appspot.com/options.txt.html#%27runtimepath%27""><code>'runtimepath'</code></a>:</p>

<pre><code>                                'runtimepath' 'rtp' vimfiles
'runtimepath' 'rtp'     string  (default:
                                        Unix: ""$HOME/.vim,
                                                $VIM/vimfiles,
                                                $VIMRUNTIME,
                                                $VIM/vimfiles/after,
                                                $HOME/.vim/after""
...
    This is a list of directories which will be searched for runtime
    files:
      filetype.vim  filetypes by file name new-filetype
      scripts.vim   filetypes by file contents new-filetype-scripts
      autoload/     automatically loaded scripts autoload-functions
      colors/       color scheme files :colorscheme
      compiler/     compiler files :compiler
      doc/          documentation write-local-help
      ftplugin/     filetype plugins write-filetype-plugin
      indent/       indent scripts indent-expression
      keymap/       key mapping files mbyte-keymap
      lang/         menu translations :menutrans
      menu.vim      GUI menus menu.vim
      plugin/       plugin scripts write-plugin
      print/        files for printing postscript-print-encoding
      spell/        spell checking files spell
      syntax/       syntax files mysyntaxfile
      tutor/        files for vimtutor tutor
</code></pre></li>
<li><p>I think <a href=""http://www.vim.org/scripts/script.php?script_id=2332"">Pathogen</a> was one of the first plugins to allow you to easily install plugins in other directories</p></li>
<li><p>Even its <a href=""http://www.vim.org/scripts/download_script.php?src_id=9085"">first release</a> used <code>~/.vim</code>:</p>

<pre><code>"" pathogen.vim - path option manipulation
"" Maintainer:   Tim Pope
"" Last Change:  Apr 26, 2008

"" Install in ~/.vim/autoload (or ~\vimfiles\autoload).
""
"" API is documented below.

if exists(""g:loaded_pathogen"") || &amp;cp
  finish
</code></pre></li>
<li><p><code>runtimepath</code> support was introduced in, or before, 2008. From <a href=""http://vimdoc.sourceforge.net/htmldoc/version6.html""><code>version6.txt</code></a>:</p>

<pre><code>*version6.txt*  For Vim version 7.3.  Last change: 2008 Aug 06

...

Plugin support                  *new-plugins*

To make it really easy to load a Vim script when starting Vim, the ""plugin""
runtime directory can be used.  All ""*.vim"" files in it will be automatically
loaded.  For Unix, the directory ""~/.vim/plugin"" is used by default.  The
'runtimepath' option can be set to look in other directories for plugins.
|load-plugins| |add-plugin|

The |:runtime| command has been added to load one or more files in
'runtimepath'.
</code></pre></li>
<li><p>Vim 6.2 makes use of <code>runtimepath</code>, adding support for the <code>ftplugin</code> directory. See <a href=""http://ftp.vim.org/pub/vim/patches/6.2.073"">patch 6.2.073</a>:</p>

<pre><code>*** ../vim-6.2.072/runtime/doc/filetype.txt Sun Jun  1 12:20:32 2003
--- runtime/doc/filetype.txt    Thu Aug 14 11:22:30 2003
***************
*** 1,4 ****
! *filetype.txt*  For Vim version 6.2.  Last change: 2003 Apr 25


          VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *filetype.txt*  For Vim version 6.2.  Last change: 2003 Aug 14


          VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 147,157 ****
  This means that the contents of compressed files are not inspected.

                            *new-filetype*
! If a file type that you want to use is not detected yet, there are two ways to
! add it.  In any way, it's better not modify the $VIMRUNTIME/filetype.vim file.
! It will be overwritten when installing a new version of Vim.

! A. If your file type can be detected by the file name.
     1. Create your user runtime directory.  You would normally use the first
        item of the 'runtimepath' option.  Example for Unix: &gt;
    :!mkdir ~/.vim
</code></pre></li>
</ul>

<p>So, <code>runtimepath</code> has been in use since at least 2003, well before Pathogen was released. We can safely conclude its invention predated Vundle and similar plugins. (Though it could have been invented by someone who wanted to make using plugins easier.) And its use was definitely making user-level extensions to functionality easier, by allowing one to drop files in various directories to easily affect Vim behaviour.</p>
","4971"
"What is the difference between the vimrc files in /etc/vim and /usr/share/vim?","628","","<p>My OS is Debian, with LXDE.</p>

<pre><code>find  / -name '*vimrc'
/usr/share/vim/vimrc
/etc/vim/vimrc
</code></pre>

<p>What is the difference between these two vimrc? Which one controls my vim?</p>
","<blockquote>
  <p>I want to know What is the difference between two vimrc?</p>
</blockquote>

<p>In the Debian packaged version of vim, <code>/usr/share/vim/vimrc</code> is a  symlink to <code>/etc/vim/vimrc</code> - i.e., they are the same file.</p>

<pre><code>% ls -al /usr/share/vim/vimrc
lrwxrwxrwx 1 root root 14 Dec 27 16:26 /usr/share/vim/vimrc -&gt; /etc/vim/vimrc
</code></pre>

<p>If you want to know information about a file alway at least look inside it, e.g. the first few lines of comments give some explanation.</p>

<pre><code>% head -5 /etc/vim/vimrc 

"" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
"" the call to :runtime you can find below.  If you wish to change any of those
"" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
"" will be overwritten everytime an upgrade of the vim packages is performed.
</code></pre>

<p>This is a system wide vimrc file, I believe it is run everytime vim is launched and for every user on the system.<br>
If you want to make custom changes to vim, you should do it in your <code>$HOME/.vimrc</code> file.</p>
","6790"
"How to use a range function in a normal command?","627","","<pre><code>:set cc=1,5,9,13,17
</code></pre>

<p>The command above here can create a series red lines on the edited file in vim whose version is lager than 7.3.</p>

<p>Why can't write it as <code>:set cc=range(1,17,4)</code>  ?</p>
","<p>There's two reasons you can't use this syntax:</p>

<ul>
<li><p>Firstly you can't mix functions calls and normal commands without distinction. Your syntax should be <code>exec "":set cc="" . range(1, 17, 4)</code>. to concatenate the result of the function <code>range()</code> with the normal command <code>:set cc=</code>.</p></li>
<li><p>Secondly even with this syntax your command will not work: When you use <code>:echo range(1, 17, 4)</code> you get a list: <code>[1, 5, 9, 13, 17]</code> so the previous command would expand to <code>:set cc=[1, 5, 9, 13, 17]</code> which isn't a correct syntax.</p></li>
</ul>

<p>A possible solution would be to cast the result of <code>range</code> as a string, remove the <code>[</code> and <code>]</code> characters and then concatenate the result with <code>:set cc=</code> with the <code>exec</code> command.</p>

<p><strong>Edit</strong> @Saginaw suggested to use the function <code>join()</code> to implement the transformation of the list to a string without brackets characters. Using this idea the final solution for your question would be:</p>

<p>Use this:</p>

<pre><code>exec ""set cc="" . join(range(1, 17, 4), "","")
</code></pre>

<p>Thanks to @Saginaw for his idea.</p>

<hr>

<p>You might want to read:</p>

<ul>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#:execute"" rel=""nofollow""><code>:h :execute</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#join()"" rel=""nofollow""><code>:h join()</code></a></li>
</ul>
","6987"
"Open .md files as Markdown","627","","<p>Vim, by default, opens all .md files as ""modula2"" code. I have never heard of modula2, nor do I plan to use it.</p>

<p>How can I tell vim to always treat <code>foo.md</code> as Markdown (as if I had typed <code>:set ft=markdown</code>)?</p>
","<p>In the file <code>filetype.vim</code> that is shipped with your distribution you will find a line that looks probably similar to this (on my machine it lives at <code>/usr/share/vim/vim74</code>) :</p>

<pre><code>au BufNewFile,BufRead *.md,*.m2,*.mi setf modula2
</code></pre>

<p>Now, this tells vim to set the filetype as modula2 if your file has such an ending.</p>

<p>To override this behaviour you can put a line like this in your own <code>.vimrc</code> (Taken from the Archlinux filetype.vim) :</p>

<pre><code>au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  set ft=markdown
</code></pre>

<p><strong>Edit:</strong></p>

<p>I previously had <code>setf</code> as the function to be called, but it seems to be a reserved function for the <code>filetype.vim</code> file.</p>
","227"
"Bash-like partial tab-complete for filenames in Vim","625","","<p>In Bash, when there are several files with the same prefix and I type part of the prefix and hit <kbd>Tab</kbd>, it completes the common prefix and allows me to continue typing to differentiate among the possible results.</p>

<p>In Vim, when there are several files with the same prefix and I type part of the prefix and hit <kbd>Tab</kbd>, it completes the entire first match and lets me then select among all the matches. To reduce the set, I have to backspace until I get to the end of the common part, then type some more and hit <kbd>Tab</kbd> again.</p>

<p>I often have <em>lots</em> of files where there is a long common prefix, and the file I want is not among the first (for example, a directory of project files containing, among other things, various makefiles all with the name <code>Makefile.{whatever}</code>).</p>

<p>Can I make Vim complete more like Bash to save lots of key strokes?</p>

<p>Bonus if this can apply to other completions as well (for example, enum values that all have the same prefix)</p>
","<p>You can use the <code>wildmode</code> option to control this.</p>

<p>If you use <code>:set wildmode=list:longest</code>, you get behaviour similar to bash.</p>

<p>I personally prefer to use <code>:set wildmode=list:longest,full</code>; this will list completions, but on the <em>second</em> <kbd>Tab</kbd> press, you can cycle between the entries (and <kbd>Shift+Tab</kbd> to cycle in the reverse).</p>

<p>This applies to <em>all</em> completions done by Vim.</p>

<p>See: <a href=""http://vimhelp.appspot.com/options.txt.html#%27wildmode%27""><code>:help 'wildmode'</code></a></p>
","657"
"How does one append to the clipboard register in vim?","625","","<p>I already know that you can copy something to the a register using:
(plus a yank, delete, etc. command)</p>

<pre><code>""a
</code></pre>

<p>I also understand that you can append to the a register using:</p>

<pre><code>""A
</code></pre>

<p>In addition I understand how to copy something to the clipboard register using:</p>

<pre><code>""+
</code></pre>

<p>What do I type to append to the clipboard register?</p>

<p>My vim version:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan 2 2014 19:39:59) Huge version with GTK2 GUI.
</code></pre>
","<p>There is no normal mode command for that but you can simply append to another register and <code>:let</code> the clipboard register to the content of that register:</p>

<pre><code>""Ay
""Ay
""Ay
:let @+ = @A
</code></pre>
","3823"
"nnoremap is not working with `[v`]","624","","<p>I'm trying to add a simple mapping to visually select recently pasted text. However, even though <code>`[v`]</code> is working correctly in a vim session, when I try to use it in my .vimrc file, it doesn't work. Other mappings work correctly, though.</p>

<p>This is the mapping as described <a href=""https://vi.stackexchange.com/questions/31/how-do-i-visually-select-the-block-of-text-i-just-pasted-in-vim"">here</a>:</p>

<pre><code>nnoremap  gV `[v`]
</code></pre>

<p>What could be causing this issue? I tried to disable the plugins but the issue still occurs.</p>

<p>By the way, the keyboard I'm using was configured to include a dead tilde. I just changed it to type backtick <code>`</code> instead of <code>`&lt;space&gt;</code>.</p>

<p>I also tried to change the encoding using <code>set encoding=utf-8</code> but didn't help.</p>

<p>UPDATE:</p>

<p>Since I can't escape backticks in the comments, I will be answering here.</p>

<p>@Nobe4 I'm just adding <code>nnoremap gV `[v`]</code> at the end of my .vimrc file and then after pasting some text, I press gV. As I said, other mappings are working but this one doesn't do anything noticeable. I also tried to use gp as a replacement, but then vim listens to the p command and simply pastes again the same text.</p>

<p>@Christian Brabandt The thing that doesn't work is the mapping from gV to <code>`[v`]</code>. If I type <code>`[v`]</code> in some file, it does visually select the pasted text as intended.</p>

<p>UPDATE 2:</p>

<p>@Nobe4 helped me to figure this out. The issue was that vim wasn't responding to mappings containing two (or more) characters. The issue was caused by the timeoutlen option. I'm using set timeoutlen=50 to remove a delay after pressing escape in order to change to normal mode. In the meanwhile, I change it to timeoutlen=300 but this has a noticeable delay in the status bar. Any suggestions are welcomed.</p>

<p>UPDATE 3: </p>

<p>Okay. I'm using <code>set timeoutlen=1000 ttimeoutlen=10</code> and now the delay is fixed and mappings are working correctly. Hopefully, this won't have unintended effects down the road.</p>
","<p>After some discussion with <a href=""https://vi.stackexchange.com/users/210/robert-smith"">Robert Smith</a>, here is the conclusion:</p>

<p>The problem was not the mapping nor the command per se. The problem was the timeout that the vim configuration was using.</p>

<p>The timeout is configured by the options: </p>

<pre><code>timeoutlen   : mapping delay
ttimeoutlen  : key code delay 
</code></pre>

<p>For example, in MacVim 7.4 the default configuration is:</p>

<pre><code>timeoutlen=1000
ttimeoutlen=-1
</code></pre>

<p>It means that for both mappings and key codes, the time of 1000 ms is applied. Vim will wait 1 second before the mapping/key code completes.</p>

<p>The set of values that solves the problem are:</p>

<pre><code>timeoutlen=1000 
ttimeoutlen=10
</code></pre>

<p>It means that a mapping will wait 1 second to complete (as before) whereas a keycode will complete after only 10ms.</p>

<p>When checking for a non-firing mapping, it should be good advice to see those values.</p>
","4471"
"Why does vim complain about weak crypto when using blowfish2?","623","","<p>I opened up a document from 2015 I saved using the built in crypto in vim (<code>:X</code>). That was saves using <code>blowfish</code> at the time.</p>

<p>The message I got now (2017) was this:</p>

<pre><code>Warning: Using a weak encryption method; see :help 'cm'
Enter encryption key: *********************************************
Enter same key again: *********************************************
</code></pre>

<p>That was weird, I thought, but I assumed it had to do with some flaw, and after reading up on the crypto methods I <code>set cryptomethod=blowfish2</code>. This works after opening it, showing cryptomethod as blowfish 2. The problem is that I still get the message about using weak encryption! Why? Are there remnants of the old blowfish1 crypto signature? Do I have to export the text and resave it in order to fix it?</p>
","<p>The cryptmethod is stored in the file itself, and isn't automatically updated.</p>

<p>You can see this with <code>less</code>:</p>

<pre><code>$ less a
VimCrypt~02!!&lt;C7&gt;\&lt;E1&gt;wZzm
^E^X^Z&lt;92&gt;5&lt;C9&gt;I6&lt;9C&gt;S
</code></pre>

<p><code>VimCrypt~01!</code> is <code>cm=zip</code>, <code>VimCrypt~02!</code> is <code>cm=blowfish</code>, and I think you can deduce what <code>VimCrypt~03!</code> stands for :-)</p>

<p>To upgrade a file, open it, explicitly set <code>cm=blowfish2</code>, and write it:</p>

<pre><code>$ vim a
Need encryption key for ""a""
Warning: Using a weak encryption method; see :help 'cm'
Enter encryption key: [enter-key]

:set cm?
  cryptmethod=blowfish
:set cm=blowfish2
:w
""a"" [blowfish2] 1L, 3C written
:q

$ less a
VimCrypt~03!O[P&lt;D5&gt;1&lt;D1&gt;&lt;DA&gt;^Zis&lt;88&gt;q&lt;AB&gt;&lt;99&gt;&lt;8C&gt;&lt;A6&gt;&lt;C4&gt;&lt;FB&gt;6
a lines 1-1/1 (END)
</code></pre>
","11345"
"Can I script Vim using Python?","621","","<p>Vimscript looks somewhat similar to Python code.</p>

<p>Can Vim be integrated with high-level language interpreters, such as Python?</p>
","<p>Yes, vim can be built with several different language interpreters available. This is something you (or your distro) picked when compiling vim from source.</p>

<p>Available at least are Python (as you requested), Perl, Ruby, and Tcl. The vim documentation has details for each; the python one is in <a href=""http://vimhelp.appspot.com/if_pyth.txt.html""><code>:help if_pyth.txt</code></a>. That document has plenty of examples.</p>

<p>For reference, here are the ones for other languages:</p>

<ul>
<li>Perl: <a href=""http://vimhelp.appspot.com/if_perl.txt.html""><code>:help if_perl.txt</code></a></li>
<li>Ruby: <a href=""http://vimhelp.appspot.com/if_ruby.txt.html""><code>:help if_ruby.txt</code></a></li>
<li>Tcl: <a href=""http://vimhelp.appspot.com/if_tcl.txt.html""><code>:help if_tcl.txt</code></a></li>
<li>Lua: <a href=""http://vimhelp.appspot.com/if_lua.txt.html""><code>:help if_lua.txt</code></a></li>
<li>MzScheme: <a href=""http://vimhelp.appspot.com/if_mzsch.txt.html""><code>:help if_mzscheme.txt</code></a> (It's called Racket now, but in Vim it's still called MzScheme for historical reasons).</li>
</ul>
","23"
"How do I switch between the command-line history and file panes?","621","","<p>When using the command-line history window, I'd like to go back to the file I use it on to see what I'm working with. When revisualizing a block of code (<code>gv</code>), the cursor will go to the top after entering command-line history (<code>q:</code>). How do I switch between these two windows/panes?</p>

<p><img src=""https://i.stack.imgur.com/extHS.png"" alt=""command-line history""></p>
","<h2><em>Generic</em> answer:</h2>

<p><code>&lt;C-w&gt;p</code> moves the cursor to the <em>previous</em> window.</p>

<p>See <code>:help window-move-cursor</code> and, more generally, <code>:help windows</code>.</p>

<h2><em>Specific</em> answer:</h2>

<p>You can't switch to another window while the command-line window is focused, as stated in <code>:help cmdline-window</code>:</p>

<pre><code>In the command-line window the command line can be edited just like editing
text in any window.  It is a special kind of window, because you cannot leave
it in a normal way.
</code></pre>
","3198"
"Can I move my current tab to a split in a different tab?","620","","<p>This happens to me semi-frequently. I have two tabs open, and I would like to merge them into one tab with a vertical split. Essentially, I want to do the opposite of <a href=""http://vimdoc.sourceforge.net/htmldoc/windows.html#CTRL-W_T"" rel=""nofollow"">CTRL-w_T</a>. Right now, I have to this:</p>

<pre><code>:wq&lt;cr&gt;&lt;C-w&gt;v:browse old&lt;cr&gt;q1&lt;cr&gt;
</code></pre>

<p>Is there any more convenient way to do this? If there isn't a builtin way, I wouldn't be opposed to adding a vimscript function, or installing a plugin.</p>
","<p>Assuming I understand you correctly, try the following:</p>

<pre><code>function! MergeTab()
    let bufnums = tabpagebuflist()
    hide tabclose
    topleft vsplit
    for n in bufnums
        execute 'sbuffer ' . n
        wincmd _
    endfor
    wincmd t
    quit
    wincmd =
endfunction
command! MergeTab call MergeTab()
</code></pre>

<p>It will merge all windows in a tab into a vertical
split at the left hand side of the following tab (or the preceding tab
if you happen to be on the last tab).</p>

<p>There might be issues if you run out of room, but you'll
still have your buffers in the buffer list.</p>
","8783"
"How do I visually select the block of text I just pasted in Vim?","619","","<p>I usually need to move/copy code snippets between my source files. After I paste a block of text, I usually need to apply some operation to that block such as reindenting them with <code>=</code>.</p>

<p>Is there a way to easily visually select the block of text I just pasted without doing it manually?</p>
","<p>The <code>'[</code> and <code>']</code> marks delimit the first and last line of the previously changed or yanked text.  The <code>`[</code> and <code>`]</code> counterparts delimit the respective lines &amp; columns.</p>

<p>Using that, you could visually select the last changed block of lines with <kbd>'</kbd><kbd>[</kbd><kbd>V</kbd><kbd>'</kbd><kbd>]</kbd> and then apply the <code>=</code> command.</p>

<p>However, since a paste leaves your cursor at the first line of the content that was pasted, you could also just specify a motion over which the <code>=</code> command should be applied, in this case to the <code>']</code> mark.  This would be <kbd>=</kbd><kbd>'</kbd><kbd>]</kbd>.</p>
","38"
"Delete all of a file except for certain words that contain certain letters","618","","<p>I have a file that contains words that I want to save, along with other junk that I do not need.  I just want to delete everything except the words that contain a certain pattern. Take email addresses for example:</p>

<p><code>foo foo foo foo foo foo@foo.com
foo foo foo2@foo2.net</code></p>

<p>Run some magic and save everything from <code>@</code> to the previous and next <code>space</code>.</p>

<p><code>foo@foo.com foo2@foo2.net</code></p>

<p>This would be useful in so many applications (especially email addresses).</p>
","<h3>Easy way - <code>grep</code></h3>

<p>The easiest technique is to use <code>:%!grep -o {pat}</code>. The <code>-o</code>/<code>--only-matching</code> make grep only display the matches.</p>

<pre><code>:%!grep -o 'foo\w*bar'
</code></pre>

<p>Note: that grep's regex's are a different variant from PCRE and Vim's.</p>

<h3>Pure Vim method with plugin - still easy</h3>

<p>For a pure native vim solution I suggest you look at <a href=""http://www.vim.org/scripts/script.php?script_id=4795"" rel=""nofollow"">ExtractMatches</a> or <a href=""https://github.com/idanarye/vim-yankitute"" rel=""nofollow"">Yankitute</a> plugins.</p>

<h3>(Ab)Using <code>:s</code> for fun and profit</h3>

<p>You want to roll your ""extract matches"" command with <code>:s</code> with a sub-replace-expression (<code>\=</code>) and a list.</p>

<pre><code>let lst = []
:%s/pattern/\=add(lst, submatch(0))[-1]/g
:%d
:pu=lst
:1d
</code></pre>

<p>The basic idea is to add each match to the list, <code>lst</code>, using a sub-replace-expression for the <code>:s</code> command. We can use some in-place array trickery to make sure the text doesn't change by always returning the last element of the array (what we just added).</p>

<p>This <code>:s</code> trick is often done in the form:</p>

<pre><code>:let lst = []
:%s//\=add(lst, submatch(0))[-1]/g
:call setreg('""', join(lst, ""\n""), 'l')
</code></pre>

<p>This will capture the current matches (uses last used pattern) into the default register. If you have Vim 7.4 then the <code>:s</code> can be simplified further: <code>:%s//\=add(lst, submatch(0))/gn</code></p>

<h3>More information</h3>

<pre><code>:h :range!
:h :s
:h sub-replace-expression
:h List
:h add()
:h submatch()
:h :d
:h :pu
:h @=
</code></pre>
","3871"
"Should I use xmap or vmap in my mappings?","618","","<p><code>xmap</code> creates a mapping for just Visual mode whereas <code>vmap</code> creates one for both Visual mode and Select mode.</p>

<p>As far as I understand, the intent of Select mode was to make Vim behave just like every other non-modal editor when text is selected, i.e., typing anything immediately replaces the selection with the typed text.</p>

<p>It seems to me that you would almost NEVER want to map anything in Select mode because in Select mode you would want your typed text to appear literally as if you were in Insert mode.</p>

<p>So I'm leaning towards using <code>xmap</code> instead of <code>vmap</code> in all of my mappings. Is this a good/bad idea?</p>
","<p>Indeed prefer mappings to visual-mode only, in particular keys that could be displayed. Things like <code>&lt;F1&gt;</code>, <code>&lt;m-left&gt;</code> could usually be mapped with <code>:vmap</code> with no harm done.</p>

<p>Select-mode is used when setting Vim in other-editor-like mode (see the infamous mswin.vim). Select-mode is also used by all snippet plugins. When we jump to a placeholder, we end up in select-mode. That's why it's important to not map things that could be legitimately inserted in insert-mode or in select-mode.</p>
","11855"
"Mapping with motion","616","","<p>I'm trying to understand how can I use operator with subsequent motion inside a mapping. For example:</p>

<pre><code>nmap /c c{here we pending for a motion}/&lt;C-r&gt;""&lt;CR&gt;
</code></pre>

<p>The map should do the following: </p>

<ol>
<li>Activate <code>c</code> operator and listen for the next motion;</li>
<li>Eg, I can type here <code>t,</code> to change everything before the next comma;</li>
<li>Go to insert mode deleting everything between cursor and the comma;</li>
<li>Deleted text is automatically searched as a pattern </li>
</ol>

<p>So to put it simple, after motion text is removed, I'm leaved in insert mode with highlighted occurrences of the deleted text. I would be very grateful if somebody help me to puzzle out this case.</p>

<p><strong>UPDATE</strong></p>

<p>The answers are almost what I want. But!  When I press <code>/cw</code>, type something instead of the word, then press <code>&lt;Esc&gt;</code>. After I expect to do the same with the next occurrences. But after presing <code>n</code> (go to next occurrence) and <code>.</code> (repeat last command) it just prepend last typed text instead of replacing it. The main goal of the mapping is using it with <code>n/N</code> and <code>.</code> to repeat. Have I missed something?</p>
","<p>vim supports operator-mapping  <code>:h map-operator</code>. </p>

<p>What you need is an <code>operatorfunc</code>, and a mapping. for your needs, the followings codes work. Well it is just an example, you refine further.</p>

<pre><code>nmap  &lt;silent&gt; /c :set opfunc=SpecialChange&lt;CR&gt;g@
function! SpecialChange(type)
    silent exec 'normal! `[v`]d'    
    silent exec 'let @/=@""' 
    startinsert
endfunction
</code></pre>

<p>Note that 
    <code>exec 'let @/=@""'</code> just for highlighting the codes in buffer. If you don't want to see the highlighting immediately, you can just <code>let @/=@""</code></p>
","5497"
"How to save and restore a mapping?","615","","<p>I am developing a plugin for Vim and I would like to define a mapping which would be available only while the ""execution of the plugin"".</p>

<p>So far the (simplified) workflow of the plugin is the following:</p>

<ol>
<li>The user call a command of the plugin</li>
<li><p>The command calls the pre-treatment function:</p>

<pre><code>function! s:PreTreatmentFunction(function, ...)
    "" Do some pretreatment stuff

    "" Create a mapping to call the TearDown
    nnoremap &lt;C-c&gt; :call TeardDown()&lt;CR&gt;

    "" Call a function depending on the parameter passed to this one
    if function == ""foo""
        call Foo()
    else
        call Bar()
    endif
endfunction
</code></pre></li>
<li><p>Another function is called which change the state of the buffer (<code>Foo()</code> or <code>Bar()</code> in the last lines of the previous function)</p></li>
<li>The user use the mapping to call the teardown function</li>
<li><p>The tear down function remove the created mapping:</p>

<pre><code>function! s:TearDown()
    "" Do some tear down stuff

    "" Remove the mapping
    unmap &lt;C-c&gt;
endfunction
</code></pre></li>
</ol>

<p>I am not satisfied with the way I handle my mapping: if the user already mapped it to something else he will loose his original mapping.</p>

<p>So my question is: <strong>How can I save what <code>&lt;C-c&gt;</code> is mapped to (if it is mapped) and restore it in my tear down function?</strong>
Is there a built-in feature to do so?
I though about <code>grep</code>ing the result of <code>:nmap &lt;C-c&gt;</code> but that doesn't feel really ""clean"".</p>

<p>A few side notes:</p>

<ul>
<li>I know that LearnVimScriptTheHardWay has <a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/51.html#custom-mappings"">a section about that</a>, but they say to use a ftplugin which is not possible here: the plugin is not dependent on a file type</li>
<li>I could create a variable to let the user choose what keys to use: It is probably what I will do but I'm mainly interested in how to do the save and restore.</li>
<li>I could use a local leader but I think it's a little bit overkill and I'm still mainly curious about the save and restore thing.</li>
</ul>
","<p>You could use the <code>maparg()</code> function.</p>

<p>To test if the user mapped something to <code>&lt;C-c&gt;</code> in normal mode, you would write:</p>

<pre><code>if !empty(maparg('&lt;C-c&gt;', 'n'))
</code></pre>

<p>If the user mapped something, to store the <code>{rhs}</code> in a variable, you would write:</p>

<pre><code>let rhs_save = maparg('&lt;C-c&gt;', 'n')
</code></pre>

<p>If you want more information about the mapping, like:</p>

<ul>
<li>is it silent (<code>&lt;silent&gt;</code> argument)?</li>
<li>is it local to the current buffer (<code>&lt;buffer&gt;</code> argument)?</li>
<li>is the <code>{rhs}</code> the evaluation of an expression (<code>&lt;expr&gt;</code> argument)?</li>
<li>does it remap the <code>{rhs}</code> (<code>nnoremap</code> vs <code>nmap</code>)?</li>
<li>if the user has another mapping which begins with <code>&lt;C-c&gt;</code>, does Vim wait for more characters to be typed (<code>&lt;nowait&gt;</code> argument)?</li>
<li>...</li>
</ul>

<p>Then, you could give a third and a fourth argument: <code>0</code> and <code>1</code>.<br>
<code>0</code> because you're looking for a mapping and not an abbreviation, and <code>1</code> because you want a dictionary with a maximum of information and not just the <code>{rhs}</code> value:</p>

<pre><code>let map_save = maparg('&lt;C-c&gt;', 'n', 0, 1)
</code></pre>

<hr>

<p>Assuming the user didn't use any special argument in his mapping, and that it doesn't remap the <code>{rhs}</code>, to restore it, you could simply write:</p>

<pre><code>let rhs_save = maparg('&lt;C-c&gt;', 'n')

"" do some stuff which changes the mapping

exe 'nnoremap &lt;C-c&gt; ' . rhs_save
</code></pre>

<p>Or to be sure and restore all the possible arguments:</p>

<pre><code>let map_save = maparg('&lt;C-c&gt;', 'n', 0, 1)

"" do some stuff which changes the mapping

exe (map_save.noremap ? 'nnoremap' : 'nmap') .
     \ (map_save.buffer ? ' &lt;buffer&gt; ' : '') .
     \ (map_save.expr ? ' &lt;expr&gt; ' : '') .
     \ (map_save.nowait ? ' &lt;nowait&gt; ' : '') .
     \ (map_save.silent ? ' &lt;silent&gt; ' : '') .
     \ ' &lt;C-c&gt; ' .
     \ map_save.rhs
</code></pre>

<hr>

<p>Edit: Sorry, I've just realised it wouldn't work as expected if the user calls a script-local function in the <code>{rhs}</code> of the mapping.</p>

<p>Suppose that the user has the following mapping inside his <code>vimrc</code>:</p>

<pre><code>nnoremap &lt;C-c&gt; :&lt;C-U&gt;call &lt;SID&gt;FuncA()&lt;CR&gt;

function! s:FuncA()
    echo 'hello world!'
endfunction
</code></pre>

<p>When he hits <code>&lt;C-c&gt;</code>, it displays the message <code>hello world!</code>.</p>

<p>And in your plugin, you save a dictionary with all the information, then temporarily change his mapping like this:</p>

<pre><code>let map_save = maparg('&lt;C-c&gt;', 'n', 0, 1)
nnoremap &lt;C-c&gt; :&lt;C-U&gt;call &lt;SID&gt;FuncB()&lt;CR&gt;

function! s:FuncB()
    echo 'bye all!'
endfunction
</code></pre>

<p>Now, it will display <code>bye all!</code>.
Your plugin does some work, and when it's over, it tries to restore the mapping with the previous command.</p>

<p>It will probably fail with a message looking like this:</p>

<pre><code>E117: Unknown function: &lt;SNR&gt;61_FuncA
</code></pre>

<p><code>61</code> is just the identifier of the script in which your mapping command would be executed. It could be any other number. If your plugin is the 42th file sourced on the user's system, it will be <code>42</code>.</p>

<p>Inside a script, when a mapping command is executed, Vim automatically translates the notation <code>&lt;SID&gt;</code> into the special key code <code>&lt;SNR&gt;</code>, followed by a number which is unique for the script, and an underscore. It has to do this, because when the user will hit <code>&lt;C-c&gt;</code>, the mapping will be executed outside of the script, and thus it won't know in which script <code>FuncA()</code> is defined.</p>

<p>The problem is that the original mapping was sourced in a different script than your plugin, so here the automatic translation is wrong. It uses the identifier of your script, while it should use the identifier of the user's <code>vimrc</code>.</p>

<p>But you could do the translation manually. The dictionary <code>map_save</code> contains a key called <code>'sid'</code> whose value is the correct identifier.<br>
So, to make the previous restoration command more robust, you could replace <code>map_save.rhs</code> with:</p>

<pre><code>substitute(map_save.rhs, '&lt;SID&gt;', '&lt;SNR&gt;' . map_save.sid . '_', 'g')
</code></pre>

<p>If the <code>{rhs}</code> of the original mapping contained <code>&lt;SID&gt;</code>, it should be properly translated. Otherwise, nothing should be changed.</p>

<p>And if you want to shorten the code a little, you could replace the 4 lines which take care of the special arguments with:</p>

<pre><code>join(map(['buffer', 'expr', 'nowait', 'silent'], 'map_save[v:val] ? ""&lt;"" . v:val . ""&gt;"": """"'))
</code></pre>

<p>The <code>map()</code> function should convert each item from the list <code>['buffer', 'expr', 'nowait', 'silent']</code> into the corresponding mapping argument but only if its key inside <code>map_save</code> is non-zero. And<code>join()</code> should join all the items into a string.</p>

<p>So, a more robust way of saving and restoring the mapping could be:</p>

<pre><code>let map_save = maparg('&lt;C-c&gt;', 'n', 0, 1)

"" do some stuff which changes the mapping

exe (map_save.noremap ? 'nnoremap' : 'nmap') .
    \ join(map(['buffer', 'expr', 'nowait', 'silent'], 'map_save[v:val] ? ""&lt;"" . v:val . ""&gt;"": """"')) .
    \ map_save.lhs . ' ' .
    \ substitute(map_save.rhs, '&lt;SID&gt;', '&lt;SNR&gt;' . map_save.sid . '_', 'g')
</code></pre>

<hr>

<p>Edit2:</p>

<p>I'm facing the same issue as you, how to save and restore a mapping in a drawing plugin. And I think I found 2 issues that the initial answer didn't see at the time I wrote it, sorry about that.</p>

<p>First issue, suppose that the user uses <code>&lt;C-c&gt;</code> in a global mapping but also in a buffer-local mapping. Example:</p>

<pre><code>nnoremap          &lt;C-c&gt;    :echo 'global mapping'&lt;CR&gt;
nnoremap &lt;buffer&gt; &lt;C-c&gt;    :echo 'local  mapping'&lt;CR&gt;
</code></pre>

<p>In this case, <code>maparg()</code> will give priority to the local mapping:</p>

<pre><code>:echo maparg('&lt;C-c&gt;', 'n', 0, 1)

---&gt; {'silent': 0, 'noremap': 1, 'lhs': '&lt;C-C&gt;', 'mode': 'n', 'nowait': 0, 'expr': 0, 'sid': 7, 'rhs': ':echo ''local  mapping''&lt;CR&gt;', 'buffer': 1}
</code></pre>

<p>Which is confirmed in <code>:h maparg()</code>:</p>

<pre><code>    The mappings local to the current buffer are checked first,
    then the global mappings.
</code></pre>

<p>But maybe you aren't interested in the buffer-local mapping, maybe you want the global one.<br>
The only way I found to, reliably, get the information about the global mapping, is to try to temporarily unmap a potential, shadowing, buffer-local mapping using the same key.</p>

<p>It could be done in 4 steps:</p>

<ol>
<li>save a (potential) buffer-local mapping using the key <code>&lt;C-c&gt;</code></li>
<li>execute <code>:silent! nunmap &lt;buffer&gt; &lt;C-c&gt;</code> to delete a (potential) buffer-local mapping</li>
<li>save the global mapping (<code>maparg('&lt;C-c&gt;', 'n', 0, 1)</code>)</li>
<li>restore the buffer-local mapping</li>
</ol>

<p>The second issue is the following. Suppose that the user didn't map anything to <code>&lt;C-c&gt;</code>, then the output of <code>maparg()</code> will be an empty dictionary. And in this case, the restoration process doesn't consist in the installation of a mapping (<code>:nnoremap</code>), but in the destruction of a mapping (<code>:nunmap</code>).</p>

<p>To try to solve these 2 new issues, you could try this function to save mappings:</p>

<pre><code>fu! Save_mappings(keys, mode, global) abort
    let mappings = {}

    if a:global
        for l:key in a:keys
            let buf_local_map = maparg(l:key, a:mode, 0, 1)

            sil! exe a:mode.'unmap &lt;buffer&gt; '.l:key

            let map_info        = maparg(l:key, a:mode, 0, 1)
            let mappings[l:key] = !empty(map_info)
                                \     ? map_info
                                \     : {
                                        \ 'unmapped' : 1,
                                        \ 'buffer'   : 0,
                                        \ 'lhs'      : l:key,
                                        \ 'mode'     : a:mode,
                                        \ }

            call Restore_mappings({l:key : buf_local_map})
        endfor

    else
        for l:key in a:keys
            let map_info        = maparg(l:key, a:mode, 0, 1)
            let mappings[l:key] = !empty(map_info)
                                \     ? map_info
                                \     : {
                                        \ 'unmapped' : 1,
                                        \ 'buffer'   : 1,
                                        \ 'lhs'      : l:key,
                                        \ 'mode'     : a:mode,
                                        \ }
        endfor
    endif

    return mappings
endfu
</code></pre>

<p>... and this one to restore them:</p>

<pre><code>fu! Restore_mappings(mappings) abort

    for mapping in values(a:mappings)
        if !has_key(mapping, 'unmapped') &amp;&amp; !empty(mapping)
            exe     mapping.mode
               \ . (mapping.noremap ? 'noremap   ' : 'map ')
               \ . (mapping.buffer  ? ' &lt;buffer&gt; ' : '')
               \ . (mapping.expr    ? ' &lt;expr&gt;   ' : '')
               \ . (mapping.nowait  ? ' &lt;nowait&gt; ' : '')
               \ . (mapping.silent  ? ' &lt;silent&gt; ' : '')
               \ .  mapping.lhs
               \ . ' '
               \ . substitute(mapping.rhs, '&lt;SID&gt;', '&lt;SNR&gt;'.mapping.sid.'_', 'g')

        elseif has_key(mapping, 'unmapped')
            sil! exe mapping.mode.'unmap '
                                \ .(mapping.buffer ? ' &lt;buffer&gt; ' : '')
                                \ . mapping.lhs
        endif
    endfor

endfu
</code></pre>

<hr>

<p>The <code>Save_mappings()</code> function could be used to save mappings.<br>
It expects 3 arguments:</p>

<ol>
<li>a list of keys; example: <code>['&lt;C-a&gt;', '&lt;C-b&gt;', '&lt;C-c&gt;']</code></li>
<li>a mode; example: <code>n</code> for normal mode or <code>x</code> for visual mode</li>
<li>a boolean flag; if it's <code>1</code>, it means you're interested in global mappings, and if it's <code>0</code>, in local ones</li>
</ol>

<p>With it, you could save the global mappings using the keys <code>C-a</code>, <code>C-b</code> and <code>C-c</code>, in normal mode, inside a dictionary:</p>

<pre><code>let your_saved_mappings = Save_mappings(['&lt;C-a&gt;', '&lt;C-b&gt;', '&lt;C-c&gt;'], 'n', 1)
</code></pre>

<p>Then, later, when you'll want to restore the mappings, you could call <code>Restore_mappings()</code>, passing the dictionary containing all the info as an argument:</p>

<pre><code>call Restore_mappings(your_saved_mappings)
</code></pre>

<hr>

<p>There could be a 3rd problem, when saving/restoring buffer-local mappings.  Because, between the moment when we saved the mappings, and the moment when we try to restore them, the current buffer may have changed.</p>

<p>In this case, maybe the <code>Save_mappings()</code> function could be improved by saving the number of the current buffer (<code>bufnr('%')</code>).</p>

<p>And then, <code>Restore_mappings()</code> would use this info to restore the buffer-local mappings in the right buffer. We could probably use the <code>:bufdo</code> command, prefix the latter with a count (matching the buffer number previously saved), and suffix it with the mapping command.</p>

<p>Maybe something like:</p>

<pre><code>:{original buffer number}bufdo {mapping command}
</code></pre>

<p>We would have to check first if the buffer still exists, using the <code>bufexists()</code> function, because it could have been deleted in the meantime.</p>
","7735"
"Why vim-airline displays ☰ character?","615","","<p>I am trying to configure the statusline using plugins ""vim-airline"" and ""vim-airline-themes"". And i get this character ""☰""</p>

<p>Please help me understand why is this being displayed and how to fix this. </p>

<p>Following is my .vimrc settings: </p>

<pre><code>"" Backup Settings
set backup
set noswapfile
set backupdir=~/.vim/tmp/backup//
set undodir=~/.vim/tmp/undo//
set directory=~/.vim/tmp/swap//

"" Vundle Settings
set nocompatible
filetype off

"" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"" let Vundle manage Vundle, required
Plugin 'flazz/vim-colorschemes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'junegunn/vim-easy-align'
Plugin 'vim-airline/vim-airline'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'
Plugin 'garbas/vim-snipmate'
Plugin 'scrooloose/syntastic'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()

filetype plugin indent on

set tabstop=4
set softtabstop=4
set shiftwidth=4
set showmatch
set ruler
set nohlsearch
set incsearch
set cursorline
set wildmenu
set laststatus=2
set guitablabel=%t
syntax on
set showcmd
set autoindent
set hidden
set smartindent
set smarttab
set completeopt+=longest,menuone,preview

"" Begin of airline settings
"" Load powerline fonts/symbols for airline
let g:airline_powerline_fonts = 1

"" AirLine Theme
:let g:airline_theme='badwolf'

"" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

"" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"" End of airline settings

"" Show two lines for the status line
set laststatus=2

"" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
     au!
         au BufReadPost *
                 \ if line(""'\"""") &gt; 0 &amp;&amp; line(""'\"""") &lt;= line(""$"") |
        \     execute 'normal! g`""zvzz' |
        \ endif
augroup END

"" Always show the last line
set display+=lastline

"" Set encoding to utf-8
set encoding=utf-8

"" Set dictionary
set dictionary=/usr/share/dict/words

"" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_enable_signs=1
let g:syntastic_error_symbol = '✗✗'
let g:syntastic_style_error_symbol = '✠✠'
let g:syntastic_warning_symbol = '∆∆'
let g:syntastic_style_warning_symbol = '≈≈'
</code></pre>

<p><a href=""https://i.stack.imgur.com/nfeqI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nfeqI.png"" alt=""vim-airline issue""></a></p>
","<p>That symbols stands for the last line number. So if it displays:
<code>1/10 ☰</code> you know that you are on line 1 of 10 lines. </p>

<p>BTW: this symbol is in the documentation, search for maxlinenr.</p>
","8135"
"c:\Program is not recognized error while running vimdiff","614","","<p>I use windows XP for testing and running some programs. I installed Vim on the machine, but when I run <code>vimdiff</code> on two files, I get the following error:</p>

<pre><code>'""""C:\Program' is not recognized as an internal or external command,
operable program or batch file.
</code></pre>

<p>along with errors <a href=""http://vimhelp.appspot.com/diff.txt.html#E810"" rel=""nofollow"">E810 and E97</a>.</p>

<p>Looking around the web, it seems that some variable in Vim is not quoted.</p>

<p>I think it's the <code>VIMRUNTIME</code>, but I'm not sure, and cannot find where to change it.</p>

<p>I'm using the default vimrc (<code>_vimrc</code> on windows).</p>

<p>As requested in the comments by @Ben, in order to run vimdiff I use the following command: <code>vimdiff file1 file2</code>.</p>
","<p><strong>Getting a fixed Vim</strong></p>

<p>This specific bug was fixed in <a href=""https://code.google.com/p/vim/source/detail?r=v7-4-103"" rel=""nofollow"">7.4.103</a> back in 2013.  Bram typically only publishes Windows installers on vim.org for major releases, so the installer there doesn't have this fix.</p>

<p>The <a href=""http://sourceforge.net/projects/cream/"" rel=""nofollow"">Cream</a> project regularly builds a Windows installer containing the latest Vim patches and provides them in their <a href=""http://sourceforge.net/projects/cream/files/Vim/"" rel=""nofollow"">Vim without Cream</a> download.  This is a commonly recommended resource for Windows users.</p>

<p>Using their installer and having it overwrite the common _vimrc will fix the <code>MyDiff</code> function.</p>

<p><strong>Avoiding the problem</strong></p>

<p>That being said, there's no need to use the <code>MyDiff</code> function defined in that <code>_vimrc</code>.  If you just create your own <code>$HOME\_vimrc</code>, then the system one won't be used.  This is what I do and have never had a problem using vimdiff on Windows without a custom <code>'diffexpr'</code>.</p>

<p>I'd recommend creating your own <code>_vimrc</code> anyway so you can freely customize it without risking it being overwritten next time you upgrade Vim.</p>
","2424"
"Is it possible to populate the quickfix list with the errors of vimscript functions?","614","","<p>I often write functions in my <code>~/.vimrc</code> or in <code>~/.vim/autoload/myfunctions.vim</code>, which when executed result in an error such as:  </p>

<pre><code>Error detected while processing function SomeFunction:
line   xx:
</code></pre>

<p>Those errors can be read in the output of the Ex command <code>:messages</code>.<br>
Is there a way to populate the quickfix list with them, so that I can type <code>:copen</code>, navigate through them, hit <code>Enter</code> on one, and be automatically redirected to the file and line where an error has been raised?</p>
","<p>A <a href=""https://stackoverflow.com/a/34078655/15934"">recent question on SO</a> inspired me to develop a <a href=""https://github.com/LucHermitte/lh-vim-lib/blob/master/autoload/lh/exception.vim"" rel=""nofollow noreferrer"">function that decodes <code>v:throwpoint</code></a> that I use in a new <a href=""https://github.com/LucHermitte/lh-vim-lib/commit/268a18a5c9af7e5f411934a67f29e15ce0bbed8f"" rel=""nofollow noreferrer"">logger</a> that fills the quickfix list, and <a href=""https://github.com/LucHermitte/vim-UT"" rel=""nofollow noreferrer"">my unit testing framework for vim</a>.</p>

<p>This can be used to enhance romainl's answer in order to decode file+line from error messages.</p>

<pre><code>function! Bar() abort
    bar
endfunction

function! Foo()
  try
    call Bar()
  catch /.*/
    let bt = lh#exception#callstack(v:throwpoint)
    let data = map(copy(bt), '{""filename"": v:val.script, ""text"": ""called from here"", ""lnum"": v:val.pos}')
    let data[0].text = v:exception
    call setqflist(data)
  endtry
endfunction
</code></pre>
","6024"
"Does powerline and vim work in windows using Cmder shell terminal?","612","","<p>I am using the <a href=""http://cmder.net/"" rel=""nofollow"">cmder</a> under windows 7.</p>

<p>I am using Vim version 7.4; I'm using the airline plugin and I installed the powerline font/patch.</p>

<p>I followed the instruction and also added the following to my <code>vimrc</code>:</p>

<pre><code>if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

"" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

"" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
</code></pre>

<p>But still the status bar shows funny characters. Does the airline for Vim even work on windows (NOT using the cygwin) just using the cmder?</p>

<p>Thanks</p>
","<p>From <a href=""https://github.com/cmderdev/cmder/issues/225"" rel=""nofollow"">issue#225</a> of cmder:</p>

<blockquote>
  <p>This not a specific problem of cmder, but rather of cmd in general,
  which does not use UTF-8 by default.</p>
</blockquote>

<p>So just run <code>chcp 65001</code> from cmder terminal to set unicode code page to <em>UTF8</em>.</p>

<p>BUT this way you should run this code every time you are going to use cmder; To automate this:</p>

<blockquote>
  <p>You can just add a ""@chcp 65001 >nul"" at the bottom of the
  vendor/init.bat.</p>
</blockquote>

<p>This way unicode will set on cmder initiation.</p>
","9419"
"How can I avoid warnings about unused variables?","612","","<p>I have some code in my <code>~/.vimrc</code> that (simplified) looks like this:</p>

<pre><code>function! SomeAppendFunction()
    let failed = append(0, [""Some header text""])
endfunction
command SomeAppendFunction :call SomeAppendFunction()
</code></pre>

<p>The intent is to provide a command that prepends some fixed text to any file I wish. I don't really care too much about handling errors from the <code>append()</code> function.</p>

<p>When I run <a href=""https://github.com/scrooloose/syntastic"" rel=""nofollow"">Syntastic</a> over this, which uses <a href=""https://github.com/scrooloose/syntastic/wiki/VimL%3A---vimlint"" rel=""nofollow"">vimlint</a> to check it, it quite rightly warns that I'm not using the return variable <code>failed</code>:</p>

<pre><code>/Users/xyz/.vimrc|255 col 9 warning| [EVL102] unused variable `l:failed`
</code></pre>

<p>However, if I remove the <code>let failed =</code> from the line inside the function, so it looks like this:</p>

<pre><code>function! SomeAppendFunction()
    append(0, [""Some header text""])
endfunction
command SomeAppendFunction :call SomeAppendFunction()
</code></pre>

<p>... I instead now see: ...</p>

<pre><code>line  301:
E126: Missing :endfunction
</code></pre>

<p>... when I start vim.</p>

<p>How can I avoid the warning about the unused variable, but also have a syntactically correct function?</p>
","<p><code>append()</code> is a function and no command. As such, it must be called using the <code>:call</code> command. So use <code>:call append()</code>. Second, if you want to ignore errors, you can wrap the whole command into a <code>try...catch...endtry</code> statement like this:</p>

<pre><code>try
   call append()   "" could fail for whatever reason
catch
   "" no-op
endtry
</code></pre>
","5530"
"Visual block insert new line","611","","<p>I work a lot with visual block mode, which I find really useful for quick changes across a lot of lines.</p>

<p>But something I'm struggling to do is inserting a newline like so:</p>

<p>Selection is noted as <code>[]</code>:</p>

<pre><code>Some [t]ext
Some [t]ext
Some [t]ext
Some [t]ext
Some [t]ext
</code></pre>

<p>I press <code>I</code> and I can add some text to be inserted before the <code>t</code>:</p>

<pre><code>Some other text
Some [t]ext
Some [t]ext
Some [t]ext
Some [t]ext
</code></pre>

<p>When I press <code>&lt;Esc&gt;</code> I get the following:</p>

<pre><code>Some other text
Some other text
Some other text
Some other text
Some other text
</code></pre>

<p>But now if I press <code>&lt;CR&gt;</code> instead of the text I want to add, the newline is inserted as desired but not for the other lines. The result is the following:</p>

<pre><code>Some 
text
Some text
Some text
Some text
Some text
</code></pre>

<p>Do you know why this isn't working?</p>

<p><strong>Note:</strong> since it works for <code>c</code> and <code>r</code> I'm not sure why is this not working...</p>
","<p>Visual block <code>I</code> doesn't work like that. The best you can probably do is something like the following.</p>

<p>Highlight a column in visual block mode (with <code>[b]</code> denoting a highlighted character as in your question):</p>

<pre><code>aaa[b]bb
aaa[b]bb
aaa[b]bb
aaa[b]bb
cccccc
</code></pre>

<p>Perform a substitution on the visual area with <code>\%V</code>:</p>

<pre><code>:'&lt;,'&gt;s/\%V/\r/
</code></pre>

<p>Vim will insert the <code>'&lt;,'&gt;</code> for you when you press <code>:</code>, so you don't need to type that bit.</p>

<p>And the result:</p>

<pre><code>aaa
bbb
aaa
bbb
aaa
bbb
aaa
bbb
cccccc
</code></pre>

<p>If you need to split lines at a visual block often, chances are it'll be readily available in your history, and you may not need to do any more than highlight, then <code>:&lt;up&gt;&lt;return&gt;</code>.</p>
","8076"
"Regex to match spaces that are NOT at the beginning of a line?","610","","<p>I want to remove repeated spaces, but not if they occur at the start of a line (indendation).</p>

<p>Before:</p>

<pre><code>line 1
  hi  there      i      have    spaces
</code></pre>

<p>After:</p>

<pre><code>line 1
  hi there i have spaces
</code></pre>

<p>I've gotten as far as <code>s/^\s\+/ /g</code>, but that deletes only duplicate spaces that <em>are</em> at the start of the line. I need to know how to negate the <code>^</code>.</p>
","<p>You don't need to match the start of the line. Instead, match any non-whitespace character. This should work:</p>

<pre><code>s/\S\zs\s\{2,}/ /g
</code></pre>

<p>Explanation:</p>

<ul>
<li><code>\S\zs</code> match any non-whitespace character and set start of pattern match after the character</li>
<li><code>\s\{2,}</code> match at two or more spaces</li>
</ul>
","7915"
"How to check whether Vim is built as a 32-bit or 64-bit application?","608","","<p>How do I check if Vim is compiled as 64-bit or 32-bit from within vimscript? Specifically on Windows.</p>
","<p>Testing the value of <code>has(""win64"")</code> should tell you. See</p>

<pre><code>:help has()
:help feature-list
</code></pre>

<p>and search for <code>64</code>.</p>
","3235"
"Adding emmet plugin to Vim in Windows","606","","<p>I am using Vim in my windows PC . Currently I am working with a web project and I want to use Vim as code editor.</p>

<p>I tried to download and add the <a href=""http://emmet.io/"" rel=""nofollow"">http://emmet.io/</a> plugin to Vim editor from <a href=""https://github.com/mattn/emmet-vim"" rel=""nofollow"">this site</a> but couldn't get how to do it. The documentation I found is only for Linux machine. Can any body help? </p>
","<p>First, lets view the steps listed in the <code>README</code> for installing the plugin in Linux. the steps are:</p>

<ol>
<li>Download the zip.</li>
<li>run <code>cd ~/.vim</code></li>
<li>run <code>unzip emmet-vim.zip</code></li>
</ol>

<p>I'm assuming you know how to do the first step.</p>

<p>The second step requires you to <strong>c</strong>hange <strong>d</strong>irectory into the <code>~/.vim</code> folder - the folder where (also) the plugins are saved on Linux systems. This folder on windows gVim is called <code>vimfiles</code>, so just open the file explorer in the installation directory of gVim, and open the <code>vimfiles</code> folder.</p>

<p>The third step is extracting the contents of <code>emmet-vim.zip</code> into the folder you navigated to in the previous step. You should be able to do that quite easily in windows.</p>

<p>The answer is based on the following doc: <a href=""http://www.vim.org/ugrankar.pdf"">Simple steps to help you install gVim on windows 7</a></p>
","592"
"Why is Y a synonym for yy instead of y$?","606","","<p>Is there a specific historical reason for this?</p>

<hr>

<p><strong>Background</strong> — (you can skip this part if you already understand the question.)</p>

<p>As intermediate/advanced <code>vi</code> users will know, <code>y</code> is the ""yank"" command—it yanks (copies) the text specified by the following movement command.*  Thus <code>ye</code> yanks to the end of the word, <code>y0</code> yanks from cursor position to the beginning of the line, <code>y_</code> yanks the entire current line, <code>y$</code> yanks from cursor position to the end of the current line, etc.</p>

<p>The <code>d</code> (delete) command and the <code>c</code> (change) command can both be used with all of these motions as well.</p>

<p><code>dd</code> is a synonym for <code>d_</code> and deletes the entire current line.  Likewise, <code>cc</code> is a synonym for <code>c_</code> and will <em>change</em> the current line (i.e. it will delete all the text and put you in insert mode at the beginning of the line).**</p>

<p>The ""yank"" command follows this convention; <code>yy</code> will yank the entire current line just like <code>y_</code>.</p>

<p>There is another set of synonyms: <code>D</code> is a synonym for <code>d$</code> and will delete from the cursor position to the end of the line.  <code>C</code> is a synonym for <code>c$</code> and will change the text from the cursor position to the end of the line, placing you in insert mode to type the new text.</p>

<p>However, <strong><code>Y</code> is <em>another</em> synonym for <code>yy</code> or <code>y_</code> and will yank the <em>entire</em> line</strong>, not just from the cursor to the end of the line as you would expect from the <code>C</code> and <code>D</code> patterns.</p>

<hr>

<p>I understand that in Vim it was kept this way to preserve backward compatibility with <code>vi</code>, as is mentioned in the Vim help under <code>:help Y</code>:</p>

<blockquote>
  <p>If you like ""Y"" to work from the cursor to the end of line (which is more logical, but not Vi-compatible) use "":map Y y$"".</p>
</blockquote>

<p>So this is a holdover from <code>vi</code>.  Fine.</p>

<p>But, <strong>why was the command designed that way in the first place?  Was there any logic to it ever?</strong></p>

<hr>

<p><sub>*Specifically it places the text in register 0 and points the unnamed register at register 0.</sub></p>

<p><sub>**Although it's not relevant to my question, <code>S</code> is another synonym for <code>cc</code> or <code>c_</code>.</sub></p>
","<p>I found a paper <a href=""https://docs.freebsd.org/44doc/usd/12.vi/paper.html"">""An Introduction to Display Editing with Vi""</a> by William Joy (vi creator) and Mark Horton (vi maintainer since 1979).</p>

<p>From the paper it is clear that the default Y behavior is not a mistake, but a desired feature.
In the <a href=""https://docs.freebsd.org/44doc/usd/12.vi/paper-4.html#section26"">""Rearranging and duplicating text"" section</a> they mention this:</p>

<pre><code>Try the command YP. This makes a copy of the current line 
and leaves you on this copy, which is placed before the current line. 
The command Y is a convenient abbreviation for yy. 
The command Yp will also make a copy of the current line, 
and place it after the current line. 
You can give Y a count of lines to yank, and thus duplicate 
several lines try 3YP.
</code></pre>

<p>Later in the list of commands (see the <a href=""https://docs.freebsd.org/44doc/usd/12.vi/paper.pdf"">appendix in the pdf version</a>), the description for Y is this:</p>

<pre><code>Y  Yanks a copy of the current line into the unnamed buffer, 
   to be put back by a later p or P; a very useful synonym for yy.
</code></pre>

<p>This way I am sure that Y was a feature and not a bug.</p>

<p>As for inconsistency with <code>D</code> and <code>C</code> - I also have a logical explanation.
If you try to think as a text editor author than your main desire would be to create new text and not delete it. 
They (text editor authors) want their users to write more text and more and more...</p>

<p>So for the syntactic sugar commands (and <code>Y</code>, <code>D</code> and <code>C</code> are kind of syntactic sugar because they duplicate already existing features) they choose the operations which add as much text as possible (<code>Y</code> duplicates the whole line) or delete as less text as possible (<code>D</code> and <code>C</code> delete until the end of line and not the whole line).</p>
","6135"
"How to substitute in multiple lines?","605","","<p>I'd like to insert a word in multiple lines, is there any command like</p>

<pre><code>:[2,3,5,7,11]s/^/word\ /g
</code></pre>

<p>which would insert <code>word</code> at the beginning of line 2, line 3, line 5, line 7 and line 11?</p>

<p>Here, multiple lines are not contiguous.</p>
","<p>Performing a substitution on several consecutive lines is pretty easy:</p>

<pre><code>:2,11s/^/word /
</code></pre>

<p>but a range can't cover non-consecutive lines.</p>

<p>With a bit of creativity, though, it is entirely possible to work around that ""limitation"".</p>

<p>Indeed, you can repeat the last substitution with <code>:&amp;</code> or <code>:&amp;&amp;</code> (the former will not preserve the original flags, the latter will) so you can chain substitutions pretty easily:</p>

<pre><code>2s/^/word /|3&amp;|5&amp;|7&amp;|11&amp;
</code></pre>

<p>See <code>:help :&amp;</code> and scroll around for <code>:&amp;&amp;</code>.</p>
","4592"
"How do you indent > < without leaving visual mode and losing your current selection?","604","","<p>I often have to manually indent, but when I enter a visual mode, select my lines to indent, and press <code>&lt;</code> or <code>&gt;</code>, I leave visual mode whether I want to or not.</p>

<p>I would rather have it so I stay in visual mode, and keep my selection and cursor position intact.</p>

<p>How can I achieve this?</p>
","<p>I have this in my vimrc:</p>

<pre><code>""keep visual mode after indent
vnoremap &gt; &gt;gv
vnoremap &lt; &lt;gv
</code></pre>

<p>Note that you could also simply use <code>.</code> (dot) to repeat the last indent action.</p>
","8436"
"How to move cursor in a specific column","603","","<p>I know that there is already a method to move the cursor to a particular line in vim like <code>:25</code> and it moves to line number 25. But can I configure vim to move to 15th column in 25th line say something like this <code>:25:15</code> ?  </p>
","<p>If you want to do it from the normal mode, just type: <code>15|</code>. If you want to move to 15th column in 25th, type <code>25G15|</code>. If you want to do it as a command you can type: <code>:call cursor(25,15)</code> but I think it is easier to type <code>25G15|</code>.</p>
","5566"
"Join multiple lines","600","","<p>I have a file similar to this:</p>

<pre>
aaaaaaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbbb
cccccccccccccccccccc
dddddddddddddddddddd


aaaaaaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbbb
cccccccccccccccccccc
dddddddddddddddddddd


aaaaaaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbbb
cccccccccccccccccccc
dddddddddddddddddddd


</pre>

<p>I would like to join them to this:</p>

<pre><code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
</code></pre>

<p>Until now I have done this by selecting blocks in (<kbd>ctrl</kbd> + <kbd>v</kbd>) and deleting them (<kbd>x</kbd>) and pasting them to the end of the first block (<kbd>g</kbd><kbd>g</kbd><kbd>$</kbd><kbd>p</kbd>). This is very time consuming and I did not manage to get these things working in a macro.</p>

<p><em>How can I combine multiple blocks of lines?</em></p>
","<p>I got the macro working:</p>

<pre><code>qqgg5j^V4j$xgg$p9jV4kd
</code></pre>

<ul>
<li><code>qq</code> starts a macro called <code>q</code></li>
<li><code>gg</code> sets the startingpoint to the first line of the file</li>
<li><code>5j</code> goes down 5 lines (the start of the block below it)</li>
<li><code>^V4j$</code> goes into column selection mode and selects the first block</li>
<li><code>x</code>  cut the content of the selection</li>
<li><code>gg$p</code> paste it to the end of the first block</li>
<li><code>9jV4kd</code> delete the empty lines left after cutting</li>
</ul>

<p>Typing in <code>2@q</code> performs this action twice combining all lines</p>
","6861"
"Exuberant Ctags - Duplicate tags problem","599","","<p>Here is a file -- <code>ChipBooter.cpp</code> -- in my project(Omit some details that are not related to this question):</p>

<pre><code>class ChipBooter {
public:   
    void Boot() {
        this-&gt;DpDetect();
    }
    void DpDetect() {}
}
</code></pre>

<p>When I hit <code>g&lt;C-]&gt;</code> to jump to the definition of <code>DpDetect</code>, Vim displayed a list with duplicate matching tags:</p>

<pre><code># pri kind tag               file
1 F C f    DpDetect          OMU/src/boot/src/ChipBooter.cpp
             class:ChipBooter
             void ChipBooter::DpDetect()
2 F C f    DpDetect          OMU/src/boot/src/ChipBooter.cpp
             class:ChipBooter
             void ChipBooter::DpDetect()
</code></pre>

<p>This is the same definition! </p>

<p>This problem happens every time I hit <code>g&lt;C-]&gt;</code> and always doubles the length of the list. </p>

<hr>

<p><strong>More Details</strong></p>

<p>Exuberant Ctags version: <code>5.8</code>. Vim version is <code>7.3</code></p>

<p>Here is a visual representation of my directory hierarchy:</p>

<pre><code>Source
  `---tags
  |       
  `---OMU
       `---src
            `---boot
                 `---src
                      `---ChipBooter.cpp
</code></pre>

<p>I ran <code>ctags -R</code> in <code>Source</code> which contains the <code>OMU</code> directory to generate the <code>tags</code> file.</p>

<p>I launch vim using <code>vim -u NONE -N</code>; <code>.vimrc</code> and plugins is disabled.</p>

<p>There is only one entry about <code>DpDetect</code> in the <code>tags</code> file:</p>

<pre><code>DpDetect    OMU/src/boot/src/ChipBooter.cpp /^void ChipBooter::DpDetect()$/;""   f   class:ChipBooter
</code></pre>

<p><code>tags</code> is default value, because <code>.vimrc</code> is disabled.</p>

<pre><code>:set tags?
tags=./tags,./TAGS,tags,TAGS
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>@romainl said Vim seems to be using both two <em>tags</em> files: <code>tags</code> and <code>TAGS</code>. </p>

<pre><code>:echo tagfiles()
['tags', 'TAGS']
</code></pre>

<p>If I change <code>tags</code> option to exclude <em>TAGS</em> file(<code>:set tags=./tags,tags</code>), duplicate tags problem does not exist.</p>

<p>Where is the <code>TAGS</code> file? There is only a <code>tags</code> file in my project directory.</p>

<pre><code>$ find {My project root directory} -iname tags
./tags
</code></pre>
","<p>As @romainl said, It is indeed an FS(file system) case-sensitivity issue.</p>

<p>My project file is mounted from Window 7 to my Fedora using:</p>

<pre><code>mount {Windows 7 Dir} {Fedora Dir} /local_folder -t cifs -o username=xxxx,password=xxxx
</code></pre>

<p>From the <a href=""http://linux.die.net/man/8/mount.cifs"" rel=""nofollow"">mount.cifs</a> man page:</p>

<blockquote>
  <p>case sensitive is the default if the server supports it.</p>
</blockquote>

<p>It means that the Mount will preserve the case-sensitivity of the server FS. If the server's FS is case-sensitive, these mounted files will be case-sensitive; If the server's FS is case-insensitive, they will be case-insensitive.</p>

<p>Windows 7 is case-insensitive, which makes these project files case-insensitive.</p>

<pre><code>$ cd {My project root directory}
$ ls tags
tags
$ ls TAGS
TAGS
</code></pre>

<p>If 'tags' option includes both <em>tags</em> and <em>TAGS</em>:</p>

<pre><code>:set tags=tags,TAGS
</code></pre>

<p>Vim will search the tags file twice: one for <em>tags</em>, another for <em>TAGS</em>. In both times, Vim finds that there is one fits. This makes Vim mistake one same <em>tags</em> file for two different files. </p>

<p>Consequently, Vim will use two tags files:  </p>

<pre><code>:echo tagfiles()
['tags', 'TAGS']
</code></pre>

<p>Thus, duplicate tags problem happened.</p>

<p>If 'tags' option includes only <em>tags</em>:</p>

<pre><code>:set tags=tags
</code></pre>

<p>The problem will not exist.</p>
","6001"
"Why is the c.vim plugin not working?","598","","<p>I have just tried to install c.vim from this <a href=""http://www.vim.org/scripts/script.php?script_id=213"" rel=""nofollow"">URL</a>. The only issue is I do not think it is working. This is because I cannot view the help by doing <code>:help csupport</code>. How would I fix this?</p>

<p>If it helps here is my <code>.vim</code> tree.</p>

<pre><code>.vim
├── c-support
│   ├── codesnippets
│   │   ├── Makefile
│   │   ├── Makefile.multi-target.template
│   │   ├── calloc_double_matrix.c
│   │   ├── calloc_int_matrix.c
│   │   ├── main.c
│   │   ├── main.cc
│   │   ├── print_double_array.c.noindent
│   │   └── print_int_array.c.noindent
│   ├── doc
│   │   ├── ChangeLog
│   │   ├── c-hotkeys.pdf
│   │   └── c-hotkeys.tex
│   ├── rc
│   │   ├── customization.ctags
│   │   ├── customization.gvimrc
│   │   ├── customization.indent.pro
│   │   └── customization.vimrc
│   ├── scripts
│   │   └── wrapper.sh
│   ├── templates
│   │   ├── Templates
│   │   ├── c.comments.template
│   │   ├── c.cpp.template
│   │   ├── c.idioms.template
│   │   ├── c.preprocessor.template
│   │   ├── c.statements.template
│   │   ├── cpp.comments.template
│   │   ├── cpp.cpp.template
│   │   ├── cpp.idioms.template
│   │   ├── cpp.preprocessor.template
│   │   └── cpp.statements.template
│   └── wordlists
│       ├── c-c++-keywords.list
│       ├── k+r.list
│       └── stl_index.list
├── doc
│   └── csupport.txt
├── ftplugin
│   └── c.vim
└── plugin
    ├── c.vim
    └── cvim
        ├── README.csupport
        ├── c-support
        │   ├── codesnippets
        │   │   ├── Makefile
        │   │   ├── Makefile.multi-target.template
        │   │   ├── calloc_double_matrix.c
        │   │   ├── calloc_int_matrix.c
        │   │   ├── main.c
        │   │   ├── main.cc
        │   │   ├── print_double_array.c.noindent
        │   │   └── print_int_array.c.noindent
        │   ├── doc
        │   │   ├── ChangeLog
        │   │   ├── c-hotkeys.pdf
        │   │   └── c-hotkeys.tex
        │   ├── rc
        │   │   ├── customization.ctags
        │   │   ├── customization.gvimrc
        │   │   ├── customization.indent.pro
        │   │   └── customization.vimrc
        │   ├── scripts
        │   │   └── wrapper.sh
        │   ├── templates
        │   │   ├── Templates
        │   │   ├── c.comments.template
        │   │   ├── c.cpp.template
        │   │   ├── c.idioms.template
        │   │   ├── c.preprocessor.template
        │   │   ├── c.statements.template
        │   │   ├── cpp.comments.template
        │   │   ├── cpp.cpp.template
        │   │   ├── cpp.idioms.template
        │   │   ├── cpp.preprocessor.template
        │   │   └── cpp.statements.template
        │   └── wordlists
        │       ├── c-c++-keywords.list
        │       ├── k+r.list
        │       └── stl_index.list
        ├── doc
        │   └── csupport.txt
        ├── ftplugin
        │   └── c.vim
        └── plugin
            └── c.vim
</code></pre>

<p>Also if you need to know this is using vim inside the Mac terminal</p>
","<p>The old way to install plugins is directly within <code>~/.vim/</code>, and the doc database was to be updated with <code>:helptags ~/.vim/doc</code>. Now, with plugin managers around, we tend to install them into <code>~/.vim/addons/</code> or <code>~/.vim/bundle/</code> (depending on the plugin manager used).</p>

<p>But it seems you've chosen another place to install your plugin. So, to use it, in your .vimrc, you'll have to fix your runtimepath -> <code>:set rtp+=~/.vim/c-support</code>, and you may have to update the doc database as well: <code>:helptags ~/.vim/c-support/doc</code></p>
","2375"
"Add constant integer to visually selected numbers","596","","<p>I have a file like the following : two different files were yanked one after another, and the numbers subsequently don't match anymore.</p>

<pre><code>                ...   46
atom   142   option   47
atom   143   option   48       
atom    12   option    7  # There's a discontinuity in the numbers at this line
atom    13   option    8
atom    14   option    9
atom    ...
</code></pre>

<p>I would like to take the columns of numbers <strong>using visual-selection</strong>, and <strong>add the missing constant</strong> (in my example, for the first column, adding 132 to the last three lines would be perfect).</p>

<p>I don't know if regexp allow mathematical operations (otherwise I could try  a macro using Ctrl-X / Ctrl-A, but it won't use visual selection anymore and I'd like to keep it).</p>

<p>(The expected result would be something like:) </p>

<pre><code>                ...   46
atom   142   option   47
atom   143   option   48       
atom   144   option    7  # Discontinuity in the first numbers column is gone !
atom   145   option    8
atom   146   option    9
atom    ...
</code></pre>
","<p>Visually select all the lines you want to increment, and do the following:</p>

<pre><code>:s/\d\+/\=submatch(0) + 132
</code></pre>

<p>Does exactly what you describe. Visually selects a bunch of numbers, and adds a mathematical constant to each of them. If you leave of the <code>/g</code> flag, it will only increment the first number on each line. This uses the ""expression register"". To learn more, <code>:help ""=</code> has much more useful info.</p>

<p>Since you mentioned trying a macro, here's what you were probably missing from your macro. Add <code>gv</code> to the beginning of your macro. This reselects your last visual selection. For example:</p>

<pre><code>qqgv&lt;C-a&gt;q132@q
</code></pre>

<p>(Note, I don't know if this works in 7.2, and since I don't have it installed I can't test it)</p>
","8253"
"What is the difference between single and double quoted strings?","596","","<p>What is the difference between single and double quoted strings?</p>

<p>Is there a way to get a variable expanded inside a string, or do they always need to be joined like: <code>'Hello, ' . s:name . '!'</code></p>
","<p>The only difference between single and double quoted string is related to backslash. To <em>display</em> special characters like newline, bells, tabs, etc, you need to use double-quotes -> <code>""\n""</code>. </p>

<p>Within a single-quoted string, <code>'\'</code> is itself => <code>'\n'</code> is a two-characters string (a backslash + <code>n</code>). Within double quotes, you have to double it -> <code>""\\""</code>, which makes them un-practical to define regexes. </p>

<p>Regarding string expansion, you have a few choices:</p>

<ul>
<li><code>'Hello, ' . s:name . '!'</code></li>
<li><code>join(['Hello, ', s:name, '!'], '')</code> -- which we never use</li>
<li><code>printf('Hello %s!', s:name)</code></li>
<li><code>lh#fmt#printf('Hello %1!', s:name)</code> -- from lh-vim-lib, when we don't want to know about types, and when we don't need to format fields, but when we want to use formats like: <code>'Hello %1. How are you doing %1 this %2</code>'.</li>
</ul>
","9707"
"When using bash or another shell from a buffer, how do I modify text?","595","","<p>Inside vim, I often use <a href=""https://code.google.com/p/conque/"" rel=""nofollow"">conque</a> plugin, so I can run a bash shell inside a vim buffer. I also may try out <a href=""https://github.com/Shougo/vimshell.vim"" rel=""nofollow"">VimShell</a> soon.</p>

<p>In conque, lets say I start typing some bash command, and before I enter it, I realize I have a typo. Since this is vim, naturally I want to go to normal mode, navigate to the typo, and modify it using some vim command. But when I try that it either says 'change mode disabled within shell' or it does look like it changed, but when I try to run the command, it runs it with the original typo in tact.</p>

<p>Is this possible to do in conque? If not, is there an alternative that allows this?</p>

<p>I understand that it would not make sense to change text from the shell that has already been entered as a command or that is output from some program, but I would still like to change a command that is partially typed out, before I enter it.</p>

<p>What about VimShell, does that allow this?</p>

<p><strong>Further thoughts</strong></p>

<p>After further thought, I take back something I said here. I think it does make sense to be able to edit the output of another program and edit commands I previously entered. Mind you I don't think editing them should do anything other than change what I see in front of me, but this is a Vim buffer, so I  don't see any reason why I can't do that.</p>

<p>I also have some thoughts on how I would like commands I am currently typing out to be truly editable before entering them. The plugin should just do whatever it takes to make the command that is eventually entered match what I see on the screen after the prompt. After each edit of the not yet entered command, it could translate those into keystrokes that would result in the same output and current cursor position thus far. Such an approach should also preserve the ability to use tab completion, up and down arrows, and other things that the prompt interprets in a special way.</p>

<p>Is there anything out there that allows something like this?</p>
","<p>Actually <code>VimShell</code> does what you want and allows to edit both command line and the text generated by previous commands.
Other vim shells I tried do not allow this.</p>

<p>Nvim's terminal also doesn't allow terminal buffer editing, you can't even edit the current command line in normal mode.</p>

<p>Also works in emacs <code>shell</code> (checked in spacemacs), <code>term</code> and <code>eshell</code> both allow edit only the command line, but in <code>shell</code> you can also edit the buffer.</p>

<p><a href=""https://i.stack.imgur.com/bmmon.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bmmon.png"" alt=""Vim with VimShell on the left, spacemacs with shell on the right""></a></p>
","6192"
"How do I paste the same line of code X times but change one word in the line each time?","594","","<p>I'm writing HTML lists, and I want to be able to automagically paste 10 list items where the item text is the only thing that changes.</p>

<p>I could accomplish this using PHP and then just copying the rendered HTML code but if there's a way to skip that step and do it directly from Vim that would save me so much time.</p>
","<p>For what you want to do, <a href=""https://github.com/mattn/emmet-vim"">emmet-vim</a>, as nobe4 suggested, is your best bet.</p>

<p>In insert mode, <code>li{item $}*10&lt;c-y&gt;,</code> will expand 10 <code>&lt;li&gt;</code>s with <code>item N</code> prefilled as the text.  You'll start editing the contents of the first one.  While still in insert mode, pressing <code>&lt;c-y&gt;n</code> will move to the next tag for editing.</p>

<p>If your list items are not a sequence repeated text, you can use <a href=""https://github.com/tpope/vim-surround"">vim-surround</a> to help.</p>

<p>Example list of text that needs to be wrapped:</p>

<pre><code>abc
def
ghi
</code></pre>

<p>If you start with your cursor somewhere in the text, pressing <code>^vip$&lt;c-v&gt;Stli&lt;cr&gt;</code> will wrap each line with <code>&lt;li&gt;&lt;/li&gt;</code>.</p>

<pre><code>^     - move to the first column
vip   - select the paragraph
$     - Move to the last column in the selection
&lt;c-v&gt; - Convert the visual selection into a block. Without the
        previous $, it would only select 1 column.
St    - Start vim-surround's tag entry
li    - The tag name
&lt;cr&gt;  - Enter
</code></pre>

<p>This can be made into an easy to use key map:</p>

<pre><code>nmap &lt;leader&gt;li ^vip$&lt;c-v&gt;Stli&lt;cr&gt;
</code></pre>
","8086"
"Edit a directory inside Vim","593","","<p>Is it possible to edit a directory inside Vim? (Some commands are working for directories). </p>

<p>I want to know what kind of operations can be done in a directory inside Vim. Vim can open the directories for editing, I believe it will have commands also to work with. But usual commands behave differently for directories.</p>

<p>For example, pressing <kbd>I</kbd> and typing a filename and saving the directory. When I give <code>ls</code>, it should show that file. </p>
","<p>I'm assuming you are using <code>netrw</code> here, as it's the default action when you do <code>vim .</code> or <code>vim some/directory/</code>.</p>

<p>You can create a file/directory from <code>netrw</code> with the following commands:</p>

<pre><code>d : create a directory, you will be prompted to input the directory name
% : create a file, same workflow
</code></pre>

<p>Have a look at <code>:h netrw</code> for more informations.</p>
","7642"
"How do I get Vim to correctly highlight Math mode in LaTeX command options?","593","","<p>I adopted the bracket notation, e.g., <code>x[i]</code>, for the discrete signal <code>x</code> where <code>i</code> is the time index. The problem occurs in a <code>pgfplots</code> figure but I figured, the syntax highlighting behavior is due to being math mode in a LaTeX command option, i.e., <code>\begin{command}[option] ... \end{command}</code>.</p>

<p>Here is a MWE originally named <code>demonstration.tex</code> which compiles correctly:</p>

<pre class=""lang-tex prettyprint-override""><code>\documentclass{article}
\usepackage{pgfplots}
\pgfplotsset{compat=1.12}
\begin{document}
Here, I show you a not so very interesting graph
\begin{figure}
    \centering
    \begin{tikzpicture}
        \begin{axis}[
                xlabel=$i$,
                ylabel={$x[i]$},
            ]
            \addplot+[ycomb] plot coordinates
            {
                (1,1)
                (2,2)
                (3,1)
            };
        \end{axis}
    \end{tikzpicture}
    \caption{Example figure}
\end{figure}
\end{document}
</code></pre>

<p>The erroneous syntax highlighting occurs in the line with <code>ylabel={$x[i]$}</code>. There, the closing bracket <code>]</code> is matched with the opening <code>[</code> two lines above. Then everything after the closing <code>$</code> is displayed as if in math mode.</p>

<p>I assume the issue can be resolved by allowing math mode in command option mode (if these are the right terms) but I wasn't able to find or comprehend the right spot in the syntax file.</p>
","<p>To achieve what you ask is, I believe, quite difficult. I'm the author of <a href=""https://github.com/lervag/vimtex/"" rel=""nofollow"">vimtex</a>, and I've added some custom syntax highlighting, see <a href=""https://github.com/lervag/vimtex/blob/master/after/syntax/tex.vim"" rel=""nofollow"">vimtex/after/syntax/tex.vim</a>. As you might notice, the syntax highlighting syntax can become quite complex, and I think in this particular case, it will be very nontrivial.</p>

<p>Therefore, instead of a direct answer to what you ask, I will instead suggest a workaround that I think should work well: Instead of adding the plot settings as an optional argument to the <code>axis</code> environment, you can add them with <code>\pgfplotsset</code>,</p>

<pre class=""lang-tex prettyprint-override""><code>\documentclass{article}
\usepackage{pgfplots}
\pgfplotsset{compat=1.12}
\begin{document}
Here, I show you a not so very interesting graph
\begin{figure}
    \centering
    \begin{tikzpicture}     
        \pgfplotsset{
            xlabel=$i$,
            ylabel={$x[i]$},
        }
        \begin{axis}
            \addplot+[ycomb] plot coordinates
            {
                (1,1)
                (2,2)
                (3,1)
            };
        \end{axis}
    \end{tikzpicture}
    \caption{Example figure}
\end{figure}
\end{document}
</code></pre>

<p>For more information about this, see the <a href=""http://pgfplots.sourceforge.net/pgfplots.pdf"" rel=""nofollow"">pgfplots manual</a>, section 4.3.</p>
","7592"
"How to concatenate two registers?","592","","<p>Is there some built in functionality in Vim to merge the contents of two registers into a single register by appending the two?</p>
","<p>It is not exactly clear what you would like to happen when e.g. one register contains a linewise selection and the other one contains a block selection. But for the easy case, you can always do (as noted in a comment)</p>

<pre><code>:let @c=@a.@b
</code></pre>

<p>and have the concatenation of register a and b in register c. But note, this might have funny effects, if the registers contain blockwise selections (or one register is of a different type than the other).</p>
","13496"
"How do I move to the last character in a sentence?","591","","<p>In normal mode <code>(</code> and <code>)</code> move to the previous or next first character in the sentence, respectively.
How do I move to the very <em>last</em> character.</p>

<p>If all of my sentences end with a period I can use <code>)T.</code> (first character of the next sentence, then backwards to the first period) but I want a more robust solution to use in a macro.</p>

<p>I know about <code>as</code> and <code>is</code> while in visual mode, so <code>vis&lt;ESC&gt;</code> works (visual mode, then select inside the sentence, then exit visual mode), but that seems
pretty ugly to me, and I can't use it as a motion with other commands.</p>

<p>I'm at a loss.  Help!</p>
","<p>From my research into this, you need to define at least two custom motions. The first will be for just moving the cursor, and the second will be for use in operators. For a full functioning setup, it is much more complicated, and I would recommend looking at the code in <a href=""http://www.vim.org/scripts/script.php?script_id=1905"" rel=""nofollow noreferrer"">CamelCaseMotion</a> by <a href=""https://vi.stackexchange.com/users/970/ingo-karkat"">Ingo Karkat</a> which shows significantly more thought on doing this right than I do below. Most of my answer is based on quick information found in Vim help and experimentation.</p>

<p>In the following examples, I'm going to <em>remap</em> the <code>)</code> and <code>(</code> motions to do the each end of a sentence. You can use other characters as you wish by modifying the example. I'm also going your example of <code>vis&lt;ESC&gt;</code> as the more robust option (compared to <code>)T.</code>). In doing so, if you are <em>already</em> at the end of a sentence, you end up staying at the end instead of moving to the end after this one, because of the way <code>is</code> works. You can try replacing it with <code>as</code> for different results. This should actually work for turning either side of a text object into a motion.</p>

<h2>First, the normal mode movement</h2>

<p><strong>Note</strong> This doesn't work in visual mode or operator pending mode</p>

<pre><code>function! MoveToEnd(type, ...)
    exe ""normal `]""
endfunction
map &lt;silent&gt; \) :set opfunc=MoveToEnd&lt;CR&gt;g@
nmap ) \)is
</code></pre>

<p>First, we define a new function called <code>MoveToEnd</code> whose sole job is to put the cursor at the the ""last character of the previously changed or yanked text"", which is the <code>]</code> mark (see <code>:help ']</code>).</p>

<p>Next, we create a custom operator <code>\)</code> that calls our <code>MoveToEnd</code> function on whatever motion is given to it. In this way, the <code>]</code> mark becomes the end of the selection given to our new operator. (see <code>:help map-operator</code>)</p>

<p>Finally, we map <code>)</code> to call our custom operator with the <code>is</code> mostion, thereby effectively giving the equivalent of <code>vis&lt;ESC&gt;</code> without changing the last visual selection and without changing modes.</p>

<p>The reverse is similar, just using the other directions:</p>

<pre><code>function! MoveToBeginning(type, ...)
    exe ""normal `[""
endfunction
map &lt;silent&gt; \( :set opfunc=MoveToBeginning&lt;CR&gt;g@
:nmap ( \(is
</code></pre>

<h2>Second, the operator movement</h2>

<p>This one is trickier. Our motion above destroys the start position, so operators like 'd' end up working against nothing. What we need is to be able to save our start position and add the end position. <code>:help omap-info</code> (operator pending mapping) gives a tip on doing this, which is to actually use visual mode.</p>

<p>What we'll do then, is save our position to one end of the visual selection register, use our normal mode motion from above, set the other visual selection register, and then activate visual mode:</p>

<pre><code>function! SelectToEnd()
    normal m&lt;  ""Set start point of visual selection
    normal )   ""Move to end of sentance (relies on mapping from earlier)
    normal m&gt;  ""Set end point of visual selection
    normal gv  "" 'Go Visual' activate visual mode using selection marks
endfunction
omap ) :call SelectToEnd()&lt;CR&gt;
</code></pre>

<p>And for our back motion:</p>

<pre><code>function! SelectToBeginning()
    normal m&gt;  ""Set end point to current position (since we are moving backwards)
    normal (   ""Move to beginning of sentence (relies on mapping from earlier)
    normal m&lt;  ""Set start point
    normal gv  ""Activate visual mode based on our new marks
endfunction
omap ( :call SelectToBeginning()
</code></pre>

<p>With this, you can do <code>d)</code> to delete to the end of the sentence (instead of the original of deleting to the beginning of the next one). All other operators should work as well.</p>
","2240"
"Disable Ctrl-Z in normal mode","590","","<p>If I press <kbd>Ctrl</kbd><kbd>z</kbd> in normal mode, it makes my gVim ""minimized"" or in vim (not gVim ) it goes back to the shell.</p>

<p>I want to disable this feature but</p>

<ul>
<li>I can't unmap <kbd>Ctrl</kbd><kbd>z</kbd>: <code>unmap &lt;c-z&gt;</code> returns <code>no such mapping</code></li>
<li>There is no option called <code>suspend</code>, allowing me to use <code>unset suspend</code>.</li>
</ul>

<p>I did <code>:help suspend</code> but the document doesn't mention anything about disabling ""suspend"".</p>
","<p>So there are several things that you need to understand:</p>

<p>Firstly you can't use <code>:unset suspend</code> and that is normal. Suspending Vim is not controlled by and option (that you could unset) but by a command: <code>:suspend</code>. See <a href=""http://vimdoc.sourceforge.net/htmldoc/starting.html#:suspend""><code>:h :suspend</code></a></p>

<p>Secondly you want to disable the suspension triggered by <kbd>ctrl</kbd><kbd>z</kbd>. This is a built-in command, thus you can not ""unmap"" this key combination. The only mappings that you can unmap are the one that you (or a plugin) created with a command <code>:map &lt;key&gt; &lt;action&gt;</code>.</p>

<p>What you can do is to say to Vim ""When I press <kbd>ctrl</kbd><kbd>z</kbd> do nothing instead of suspending as you usually do"".</p>

<p>This is what this command does:</p>

<pre><code>nnoremap &lt;c-z&gt; &lt;nop&gt;
</code></pre>

<p>You can understand it like this:</p>

<pre><code>n                      Do the following mapping only in normal mode
 nore                  Don't make it recursive (This is not necessary here but strongly recommended in all your mappings)
     map               Create a mapping
         &lt;c-z&gt;         The keys that you want to remap
               &lt;nop&gt;   This is the short for ""no operation"" i.e. Do nothing
</code></pre>

<p>You can add the line to your vimrc or simply type in vim's command line <code>:nnoremap &lt;c-z&gt; &lt;nop&gt;</code> so that the mapping will only exists in the current session.</p>

<p>See <a href=""http://vimdoc.sourceforge.net/htmldoc/map.html#&lt;nop&gt;""><code>:h &lt;nop&gt;</code></a>.</p>
","9833"
"Integration (or emulation) of Vim with NetBeans or Eclipse","590","","<p><strong>Notice</strong>:
I hope this question fits our site, I'm open to any comments.</p>

<hr>

<p>I've been a Vim user for 15 years now, always as an editor on its own, with some IDE functionalities such as autocompletion among others.</p>

<p>Right now at work I've had to use NetBeans, and I installed <a href=""http://jvi.sourceforge.net/"" rel=""nofollow"">jVi</a>. It works pretty well, provided you've enabled some settings<sup>[1]</sup>, with only a few missing features like plugins.</p>

<p>Is there any review or experience regarding the integration of Vim with NetBeans in comparison with the integration of Vim with Eclipse (whose only plugin I know of is <a href=""https://marketplace.eclipse.org/content/vrapper-vim"" rel=""nofollow"">Vrapper</a>)?</p>

<p>What I want to know is: should I consider Eclipse as an alternative to NetBeans regarding only its integration with respect to Vim?</p>

<hr>

<p><sup>[1]: The most important setting is enabling (both on Linux [what I use] or Mac): ""Mac Retina Cursor Xor Bug"".</sup></p>
","<p>I've had great luck recently with <a href=""http://eclim.org/"" rel=""nofollow noreferrer"">Eclim</a>, an Eclipse plugin that gives you vim windows. I sometimes find myself still just using Vim by itself, but it does give you the best of both worlds, sort of. I've never used Vrapper, but I imagine it would also work well.</p>

<p>It's possible an Eclipse environment might require additional setup on the vim side; mine certainly did. Once the IDE is able to load a vim window, it's a matter of getting rid of any strange behavior the new environment creates, such as additional ENTER prompts. I had to fix a couple such annoyances but it works great now.</p>

<p>So yes, you should definitely consider Eclipse an alternative to NetBeans for vim integration. At least give it a try, and if you don't like it, then no harm done.</p>
","10327"
"How do I manage and remember many abbreviations in my vimrc?","589","","<p>I have over 500 abbreviations(<code>iabbr</code>, <code>abbr</code>) and some mappings in my vimrc file from Java, PHP, C/C++ and Latex.</p>

<p>It is not easy to remember right away when I don't use the languages for some time.</p>

<p>I'm wondering whether I can do completion on abbreviation name. Is there any better way to access/manage all these abbreviations?</p>
","<p>I don't know what's the best way to manage over 500 abbreviations. Maybe in the long term, as @statox explained, you could have a look at snippets to reduce this number.</p>

<p>And if you want to auto-complete abbreviations, you could try the following code:</p>

<pre><code>augroup GetAbbrev
    autocmd!
    autocmd VimEnter * let s:abbrev_list = [] |
                \ call substitute(join(readfile($MYVIMRC), ""\n""), '\v%(^|\n)\s*i?%(nore)?ab%[brev]\s+%(%(\&lt;expr\&gt;|\&lt;buffer\&gt;)\s+){,2}(\k+)', '\=add(s:abbrev_list, submatch(1))', 'gn')
augroup END

set completefunc=CompleteAbbrev
function! CompleteAbbrev(findstart, base)
    if a:findstart
        return searchpos('\&lt;\k', 'bcnW', line('.'))[1] - 1
    else
        return filter(copy(s:abbrev_list), 'v:val =~ ""^"" . a:base')
    endif
endfunction
</code></pre>

<p>To use it, you would have to hit <code>C-x C-u</code> after the beginning of an abbreviation.</p>

<hr>

<p>The autocmd sets up the variable <code>s:abbrev_list</code> which should contain all your abbreviations.</p>

<p>The function <code>CompleteAbbrev()</code> should return a list of candidates based on the word before the cursor.</p>

<p>The <code>'completefunc'</code> option's value tells Vim which function to call when you hit <code>C-x C-u</code>.<br>
Note that the option is local to the buffer, so you could still use other functions in different kind of buffers, using an autocmd and the <code>FileType</code> event for example.</p>

<p>See <code>:h complete-functions</code> for more info on how the function works.</p>

<hr>

<p>Another solution would be to use synonyms completion. From <code>:h i_^x^t</code>:</p>

<pre><code>                            *i_CTRL-X_CTRL-T*
CTRL-X CTRL-T       Works as CTRL-X CTRL-K, but in a special way.  It uses
                    the 'thesaurus' option instead of 'dictionary'.  If a
                    match is found in the thesaurus file, all the
                    remaining words on the same line are included as
                    matches, even though they don't complete the word.
                    Thus a word can be completely replaced.

                    For an example, imagine the 'thesaurus' file has a
                    line like this:
                            angry furious mad enraged
                    Placing the cursor after the letters ""ang"" and typing
                    CTRL-X CTRL-T would complete the word ""angry"";
                    subsequent presses would change the word to ""furious"",
                    ""mad"" etc.
                    Other uses include translation between two languages,
                    or grouping API functions by keyword.
</code></pre>

<p>To use this solution, you would have to do 3 things:</p>

<ol>
<li>Write the <code>{lhs}</code> of all your abbreviations inside a dedicated file.<br>
For example, <code>/home/user/mysynonyms.txt</code>. And group them around similar themes.</li>
<li><p>Add the path to this file to the option <code>'thesaurus'</code>:</p>

<pre><code>set thesaurus+=/home/user/mysynonyms.txt
</code></pre></li>
<li><p>Hit <code>C-x C-t</code> after the beginning of the name of any abbreviation inside a group.</p></li>
</ol>

<p>For example, suppose you have the following abbreviations:</p>

<pre><code>iab cfa CFuncA
iab cfb CFuncB
iab cfc CFuncC

iab jfa JavaFuncA
iab jfb JavaFuncB
iab jfc JavaFuncC

iab pfa PhpFuncA
iab pfb PhpFuncB
iab pfc PhpFuncC
</code></pre>

<p>You could group them according to the programming language they belong to.<br>
Inside <code>/home/user/mysynonyms.txt</code>, you would write:</p>

<pre><code>cpp cfa cfb cfc
php pfa pfb pfc
java jfa jfb jfc
</code></pre>

<p>Now, whenever you hit <code>C-x C-t</code> after the name of an abbreviation (or just its beginning), Vim should display, in the popup menu, all the abbreviations which are on the same line.</p>

<p>Here's how it would look:</p>

<p><a href=""https://i.stack.imgur.com/XQovq.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/XQovq.gif"" alt=""enter image description here""></a></p>

<p>Note that the abbreviations don't need to begin with the same characters to be grouped, they could be entirely different. As long as they're on the same line in your synonyms file, Vim will show all of them.  </p>

<p>And you don't have to use the programming language to decide in which group put an abbreviation. You could group them according to any meaningful similarity/topic/category you have in mind.</p>

<p>So, when you forget a specific abbreviation, you could type the first letters of a category, hit <code>C-x C-t</code> and choose the relevant one inside the menu.</p>

<p>Edit:<br>
To dump all your abbreviations inside <code>/home/user/mysynonyms.txt</code>, you could use these 3 Ex commands:</p>

<pre><code>:let abbrev_list = []
:call substitute(join(readfile($MYVIMRC), ""\n""), '\v%(^|\n)\s*i?%(nore)?ab%[brev]\s+%(%(\&lt;expr\&gt;|\&lt;buffer\&gt;)\s+){,2}(\k+)', '\=add(abbrev_list, submatch(1))', 'gn')
:call writefile(abbrev_list, '/home/user/mysynonyms.txt')
</code></pre>

<p>Edit2:<br>
I've added the flag <code>n</code> when the <code>substitute()</code> function is called because you don't need any substitution. Its only purpose is to add an abbreviation inside a list whenever one is found.<br>
But because you have many abbreviations, it could make the process uselessly slow, I don't know. Initially, I didn't put it because I don't know which Vim version you're using. If your version is newer than <a href=""https://groups.google.com/forum/#!msg/vim_dev/Rbx48dxW8Fs/R14P09nNB8UJ"" rel=""noreferrer"">7.3.627</a>, it should be ok, otherwise you would have to remove the <code>n</code> flag.</p>
","7763"
"How to return to netrw from a file","589","","<p>Suppose that I'm editing a file, then I press <code>:w</code> to store it. And then I use <code>:e.</code> to navigate its containing folder in the netrw. Suppose its containing folder is <code>./A/B/</code>. In netrw, I open a file with path <code>./D/E</code>.</p>

<p>My question is when I enter into the file <code>./D/E</code>, how can I return to <code>./D/</code> or <code>./A/B/</code>?</p>

<p>I tried <code>:b#</code>, but only to return to the previous edited file, not to the netrw. I know that I can use <code>:e.</code> again to return to <code>./A/B/</code> since it's current path. Is there any way to return to <code>./D/</code>, the containing folder of the currently being edited file?</p>

<p>Thanks</p>
","<pre><code>:E[xplore]
</code></pre>

<p>does the same thing as <code>:e %:h</code>, and is shorter to type.</p>

<p>If you look up <code>:help :Explore</code>, you can see that there are also variations to open the directory of the current file in a new tab or split instead of in the current window.</p>
","3774"
"Why does ci"" and ci( behave differently?","589","","<p>When using <kbd>ci""</kbd> the cursor does not have to reside in the double quoted area. </p>

<pre><code>|String somestring = ""some text"";
</code></pre>

<p>Assuming the pipe is the cursor position, <kbd>ci""</kbd> will make it jump to the quoted area.</p>

<p>On the other hand, when using <kbd>ci(</kbd>, the cursor must be inside the parentheses to work and will not move the cursor inside them.</p>

<p>What is the reason for this difference in behavior?
I assume there is a way to map the keys so that this behavior is present. Are there any drawbacks to doing this?</p>
","<p>The main difference here is that parenthetical statements (targeted by <code>ci(</code>) can be nested, while quoted strings (targeted by <code>ci""</code>) cannot.</p>

<p>If your cursor is outside of some parenthetical statement, it could still be inside of some other one. For example (<code>*</code> marks the cursor position):</p>

<pre><code>$foo = array(
    'x' =&gt; ar*ray(1, 2, 3),
);
</code></pre>

<p>The line the cursor is on contains <code>(1, 2, 3)</code>, but the cursor is also inside the larger <code>array(...)</code> block. In this case, the larger one is the appropriate target for <code>ci(</code>.</p>

<p>If your cursor is outside of some quoted string, since they can't be nested, there's no perfectly sensible thing to do. So, Vim takes advantage and finds the first quoted string on the line.</p>
","33"
"Differentiating between left and right shift key","587","","<p>I have a bad habit of using the shift key of the same side of the keyboard as the letter when tying uppercase letters. To type a <code>D</code>, for example, I press the left shift with my left pinky and <code>d</code> with  my left index finger. It is better to use the right shift in combination with keys on the left hand side of the keyboard, and <em>vise versa</em>. </p>

<p>To get rid of this habit I would like to disable the combinations of either shift key with keys on the same side of the keyboard. I can map shift-d with <code>&lt;S-d&gt;</code>, but this applies to both shift keys. Is there a to apply only to the right hand shift key? </p>
","<p>From the <a href=""http://vimhelp.appspot.com/vim_faq.txt.html#faq-20.4"">Vim FAQ 20.4. ""I am not able to create a mapping for the  key. What is wrong?""</a>:</p>

<blockquote>
  <p>1) First make sure, the key is passed correctly to Vim. To determine
  if this is the case, put Vim in Insert mode and then hit Ctrl-V (or
  Ctrl-Q if your Ctrl-V is remapped to the paste operation (e.g. on
  Windows if you are using the mswin.vim script file) followed by your
  key.</p>
  
  <p>If nothing appears in the buffer (and assuming that you have
  'showcmd' on, ^V remains displayed near the bottom right of the Vim
  screen), then Vim doesn't get your key correctly and there is nothing
  to be done, other than selecting a different key for your mapping or
  using GVim, which should recognise the key correctly.</p>
</blockquote>

<p>On my setup issuing <kbd>Ctrl</kbd>-<kbd>q</kbd>+<kbd>Left Shfit</kbd>-<kbd>d</kbd> displays 'D', and issuing <kbd>Ctrl</kbd>-<kbd>q</kbd>+<kbd>Right Shfit</kbd>-<kbd>d</kbd> leads to the same result. So at least here Vim is unable to detect the difference.</p>

<p>But maybe you could use some other tool to aid you on this; for instance, on Windows you could try <a href=""https://www.autohotkey.com/"">AutoHotkey</a> with something like this:</p>

<pre><code>#ifWinActive ahk_class Vim
LShift &amp; d::MsgBox You pressed the wrong 'Shift'!
#ifWinActive
</code></pre>

<p>or to simple ignore the combination:</p>

<pre><code>#ifWinActive ahk_class Vim
LShift &amp; d::
#ifWinActive
</code></pre>
","6741"
"Paste from clipboard into CtrlP input in GVim","587","","<p>Using CtrlP with <strong>GVim</strong> I often need to open a file with the name from the system clipboard (on Windows). So my workflow should be:</p>

<ul>
<li><kbd>Ctrl+P</kbd></li>
<li>{somehow paste name from the clipboard}</li>
<li>Select file and open it</li>
</ul>

<p>In the CtrlP input line I tried:</p>

<ul>
<li><kbd>Ctrl+R</kbd><kbd>+</kbd> - it didn't work. <kbd>Ctrl+R</kbd> is remapped by CtrlP.</li>
<li><kbd>Ctrl+Ins</kbd> it inserts <code>""+P</code></li>
</ul>

<p>The equivalent without CtrlP plugin would be:</p>

<p><code>:e</code> **/<kbd>Ctrl+R</kbd><kbd>+</kbd><kbd>TAB</kbd></p>

<p>So my question is, how can I paste into the CtrlP input line from the system clipboard?</p>

<p><em>Note:</em> This is not a problem, if using vim within the console, where proprietary coping and pasting is implemented.</p>
","<p>You can paste from any register (including the clipboard) into CtrlP, as explained in <code>:help ctrlp-pasting</code>:</p>

<pre><code>  &lt;Insert&gt;,                                                   *'ctrlp-pasting'*
  &lt;MiddleMouse&gt;
    Paste the clipboard content into the prompt.

  &lt;c-\&gt;
    Open a console dialog to paste &lt;cword&gt;, &lt;cfile&gt;, the content of the search
    register, the last visual selection, the clipboard or any register into the
    prompt.

Choose your own mappings with |g:ctrlp_prompt_mappings|.
</code></pre>

<p>Using the default mappings you should type <kbd>Ctrl</kbd>+<kbd>\</kbd> followed by <kbd>c</kbd> (the 'c' appears on the input prompt for clipboard).</p>

<p>Another options are to use the <kbd>Insert</kbd> key or the middle mouse button.</p>
","6504"
"How do I align C++ comments to be compliant with Google styling?","586","","<p>Any way to get Vim to format my comments to comply with Google cpplint?</p>

<p><a href=""https://i.stack.imgur.com/ylpkg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ylpkg.png"" alt=""enter image description here""></a></p>

<p>Top section is not compliant, to comply 5 changes are required.</p>

<ol>
<li>keep this comment at the same level</li>
<li>Add a space after <code>//</code> </li>
<li>add minimum of two spaces between code and comment</li>
<li>align comments</li>
<li>add space after <code>//</code></li>
</ol>

<p>(Note I am also asking this question here, it may be possible to do with Tabular <a href=""https://github.com/godlygeek/tabular/issues/44"" rel=""nofollow noreferrer"">https://github.com/godlygeek/tabular/issues/44</a>)</p>

<p>EDIT: As per recommendation below, this works:</p>

<p>Plugin => <a href=""https://github.com/rhysd/vim-clang-format"" rel=""nofollow noreferrer"">https://github.com/rhysd/vim-clang-format</a></p>

<p>.nvimrc or .vimrc Configuration:</p>

<pre><code>let g:clang_format#code_style='google'

let g:clang_format#style_options = {
            \ ""AccessModifierOffset"" : -3,
            \ ""Standard"" : ""C++03""}
</code></pre>
","<p><a href=""http://clang.llvm.org/docs/ClangFormat.html"">clang-format</a> is a command line tool that formats c++ code. One of the default formatters is google.</p>

<pre><code>clang-format -style=google
</code></pre>

<p>There are plugins that would allow you to run clang-format in vim. One such plugin is <a href=""https://github.com/rhysd/vim-clang-format"">https://github.com/rhysd/vim-clang-format</a> (I have not used it, it was the first I found)</p>
","6444"
"Create mappings that only apply to diff mode","584","","<p>In my vimrc I have <code>&lt;C-H&gt;</code>, <code>&lt;C-J&gt;</code>, <code>&lt;C-K&gt;</code> and <code>&lt;C-L&gt;</code> mapped to navigate between split windows in normal mode.  When I use diff mode I only ever have windows in vertical splits, so I'd like to re-purpose <code>&lt;C-J&gt;</code> and <code>&lt;C-K&gt;</code> to jump to the previous/next diff.</p>

<p><code>:help diff</code> mentions <code>&amp;diff</code> when using vimdiff to determine whether you are in diff mode.  It looks like this also gets set when you start a diff from an existing vim session, so I assume I should leverage this somehow to re-set the mappings, but I'm not exactly sure how.  Based on my 2 second test just before posting this, I tried checking <code>&amp;diff</code> in my vimrc and performing the mapping as needed, but as I suspected the vimrc doesn't get read in again when going into diff mode from an existing vim session.</p>

<p>What would be the best way to detect going to/from diff mode and re-setting the mappings accordingly?</p>
","<p>You can create an expression mapping that checks <code>&amp;diff</code>. This is done using the <code>&lt;expr&gt;</code> keyword.</p>

<h3>Example</h3>

<pre><code>nnoremap &lt;expr&gt; &lt;C-J&gt; &amp;diff ? ']c' : '&lt;C-W&gt;j'
</code></pre>

<p>With this, each time you type <code>&lt;C-J&gt;</code>, the expression <code>&amp;diff ? ']c' : '&lt;C-W&gt;h'</code> is evaluated, and the result (a string) is used for your map. So, in diff-mode, <code>&lt;C-J&gt;</code> will be like <code>]c</code> (jump to start of next change); otherwise, it will be like <code>&lt;C-W&gt;j</code> (move to window below).</p>
","2706"
"How to escape angle brackets in mappings (the ones that appear in <esc> and <cr>)","583","","<p>I am making a complex mapping that requires me to insert angle brackets (<code>&lt;</code>and <code>&gt;</code>) but I do not know how to escape them so vim does not interpret them as special key-codes.</p>

<p>It seems like escaping them are not required if you do a simple mapping like:</p>

<pre><code>nnoremap &lt;leader&gt;x yi&lt;pppp
</code></pre>

<p>But my mapping looks more like this:</p>

<pre><code>nnoremap &lt;leader&gt;x a&lt;?&lt;&lt;cr&gt;lyi&lt;/&lt;&lt;cr&gt;a/&lt;c-r&gt;""&gt;&lt;esc&gt;
</code></pre>

<p>And I become really confused about all angle brackets. I also think that Vim might become confused.</p>

<p>Is there a way to escape angle brackets when making mappings in Vim?</p>
","<p>You can do so with <code>&lt;lt&gt;</code> (see <code>:h &lt;lt&gt;</code>) :</p>

<pre><code>nnoremap &lt;leader&gt;x a&lt;lt&gt;CR&gt;
</code></pre>

<p>Will enter <code>&lt;CR&gt;</code> literaly, whereas :</p>

<pre><code>nnoremap &lt;leader&gt;x a&lt;CR&gt;
</code></pre>

<p>Will execute <code>&lt;CR&gt;</code></p>
","4611"
"Language-Specific Configuration: ColorColumn","583","","<p>I used <code>set colorcolumn=80</code> and set the color to red in the python.vim file. Works like a champ - even for all other files.</p>

<p>I'd also like to <code>set colorcolumn=110</code> for C files though; this one has been set to darkgray for color separation.</p>

<p>It seems the <a href=""https://github.com/todd-dsm/vimSimple/blob/master/vim/after/loadlangs.vim"" rel=""nofollow"">order of loading</a> is the problem; if <a href=""https://github.com/todd-dsm/vimSimple/blob/master/vim/after/langs/python.vim"" rel=""nofollow""><code>python.vim</code></a> loads last, its column and color are used; if <code>clang.vim</code> is loaded last, then it stomps the <code>python.vim</code>. </p>

<p>Turning the dial back, I've been diddling with my own tailored vim setup for quite a while now. I clearly got a little carried away with the modularity; that notwithstanding:</p>

<p><strong><em>Within the existing context, how would one make this change so it's language specific?</em></strong></p>
","<p>the standard way to do this is to create <code>autocommands</code> groups:</p>

<pre><code>augroup python
    au! "" clear augroup when reloading vimrc
    autocmd FileType python set colorcolumn=80
augroup END

augroup cc
    au! "" clear augroup when reloading vimrc
    autocmd FileType c,cpp set colorcolumn=110
augroup END
</code></pre>

<p>is a way to execute specific commands for a given filetype.</p>

<p>But as you want to source specific files given a filetype, then you should use:</p>

<pre><code>~/.vim/ftplugin/python.vim
~/.vim/ftplugin/clang.vim
</code></pre>

<p>to load your personal commands.</p>
","4663"
"What does :%! mean?","583","","<p>I saw an editor command which started like this:</p>

<pre><code>:%! sort
</code></pre>

<p>What does that mean? Specifically, the <code>:%!</code>.</p>
","<pre><code>:%! command
</code></pre>

<p>pipes the current file's contents to <code>command</code>'s stdin.</p>

<p>So, <code>:%! sort</code> is pretty much the same as (from a shell) <code>cat file | sort</code>.</p>
","10109"
"Why is MacVim starting differently every other invocation?","581","","<p>I noticed when I sat down to do some work on my MacBook today that at some point recently something had gotten screwed up with respect to my <code>.gvimrc</code> settings: when I launched MacVim, everything seemed normal except that my window was very small (approximately the default size). Curious, I tried <code>verbose set columns?</code> which told me ""180, last set from ~/.gvimrc"" even though the window was <em>obviously</em> not 180 columns wide. <code>set columns=180</code> restored the window to the expected width.</p>

<p>After the usual debugging and bisection of my RC files, I noticed something unusual. I'm not sure if this is related to my column sizes not applying or not, either way it's curious and I can't figure it out.</p>

<p>If I run: <code>mvim -u NONE -c ""set columns=100""</code>, I get a window like this:
<img src=""https://i.stack.imgur.com/XzVuy.png"" alt=""mvim 1""></p>

<p>If I run <em>exactly the same command</em> again, I get this:
<img src=""https://i.stack.imgur.com/eoSqd.png"" alt=""mvim 2""></p>

<p><code>verbose set co?</code> reports 100 and 66, respectively, in both cases saying ""last set from -c argument."" Repeating the launch command causes the window state to alternate.</p>

<p>I've tried nuking <code>.viminfo</code> between runs; it has no effect. </p>

<p>I'm using MacVim snapshot 74 now, although I was on an earlier version when this started happening and upgraded to see if it was just a versioning thing. I'm on 10.10.3, and it's possible that this behavior is due to a MacVim-specific bug that has surfaced as a result of the OS update (which only happened recently). However if I install MacVim on my wife's laptop (running the same OS version) the behavior does not reproduce.</p>

<p>I'm at a loss. What on earth could be causing this behavior?</p>

<hr>

<p>EDIT: After continued debugging, I've noticed it seems to only reproduce this way if I have an external monitor connected to the laptop. This leads me to believe it's some kind of bug.</p>
","<p>After spelunking the MacVim code base for a few hours, I think I can see why this happens.</p>

<p>When MacVim starts, it reads the previously-saved window position from <code>NSUserDefaults</code> and tries to restore that position. At the point the window hasn't actually been shown yet, and it's origin is some (possibly OS selected) default that is always on the 'main' screen. If the previous position of the window was on a different monitor, <em>changing</em> the window's position will trigger a ""resized"" event (it's possible this is new, or a bug, in 10.10.3, since a corresponding ""will resize"" event is not generated).</p>

<p>This will cause MacVim to try to resize the Vim backend, but it's too early in the execution of the process for the state which is used to effect that resize to be properly constructed. Thus, MacVim requests that Vim resize itself to what is effectively a default value, which causes the window to shrink the next time MacVim gets a response to the resize from the Vim backend (MacVim resizes windows lazily).</p>

<hr>

<p>EDIT:
<a href=""https://github.com/macvim-dev/macvim/pull/5"" rel=""noreferrer"">This change fixes the bug</a>, I think. It causes window resizes not to propagate down into the Vim backend until the window has been presented. </p>
","2946"
"Duplicate tab with windows","580","","<p>I have opened several files in vim (particularly, in vimdiff). They are opened in multiple (vertically split) windows.</p>

<p>Is there a simple way, in which I can duplicate all this to another tab?</p>

<p>I could write a function, which will open a new tab &amp; loop through all buffers in current tab to open in new tab using split/diffsplit. But I wanted to know, if there is an easier way.</p>
","<p>You can use <code>:mksession</code> with a specialized <code>'sessionoptions'</code> to make this easier.</p>

<pre><code>:set sessionoptions=blank,help,folds,winsize,localoptions
:mksession
:tabnew
:source Session.vim
</code></pre>

<p>Using this technique we can create an easy to use command. Put the following command in your <code>vimrc</code>:</p>

<pre><code>command! -bar DuplicateTabpane
      \ let s:sessionoptions = &amp;sessionoptions |
      \ try |
      \   let &amp;sessionoptions = 'blank,help,folds,winsize,localoptions' |
      \   let s:file = tempname() |
      \   execute 'mksession ' . s:file |
      \   tabnew |
      \   execute 'source ' . s:file |
      \ finally |
      \   silent call delete(s:file) |
      \   let &amp;sessionoptions = s:sessionoptions |
      \   unlet! s:file s:sessionoptions |
      \ endtry
</code></pre>

<p>Now you can just call <code>:DuplicateTabpane</code>.</p>

<p>For more information see:</p>

<pre><code>:h :mksession
:h :mkview
:h 'sessionoptions'
:h :tabnew
:h :source
</code></pre>
","3899"
"How to Autocomplete CSS class names that include a minus character?","580","","<p>I'm having the following CSS class structure </p>

<pre><code>.mAIcon
.mAIcon-reject
.mAIcon-edit
.mAIcon-accept
.event
</code></pre>

<p>and so on.</p>

<p>Inside my HTML files I want to autocomplete these class names.</p>

<p>But when I type</p>

<pre><code>&lt;span class=""mAIcon mA|""&gt;
</code></pre>

<p>and I want to autocomplete the rest the only thing I get is</p>

<pre><code>&lt;span class=""mAIcon mAIcon|""&gt;
</code></pre>

<p>To get what I really want I have to type an extra <code>-</code> and for example <code>e</code> and use the autocompletion again.
But then I get everything that starts with an <code>e</code>, even the class <code>event</code>.
This is really annoying and makes the autocompletion rather useless in this case.</p>

<p>I use Vim's generic keyword completion with the <code>i_CTRL-N</code> command and I don't have any additional completion plugins installed.</p>

<p>Is it possible to include the <code>-</code> to the detection of CSS class names for the autocompletion?</p>
","<p>I solved the problem by writing a small python script that creates a tag file. The script searches for CSS classes and prints a tag line for every class.</p>

<p>At the moment I run the script by hand with</p>

<pre><code>css_tags $file &gt;&gt; tags
</code></pre>

<p>which adds the files to the tags file.
This works since tag completion isn't limited by the <code>iskeyword</code> setting.</p>

<p>Here is the contents of the script which is also available on <a href=""https://github.com/tantSinnister/CSSTags"" rel=""nofollow"">GitHub</a>.</p>

<pre><code>#!/usr/bin/env python3

import argparse
import re

parser = argparse.ArgumentParser(description='CSStags.')
parser.add_argument('css_file', type=argparse.FileType('r'))


def create_tag(tag_name, filename, line):
    """"""
    Create a ctag line for the CSS class
    """"""
    print('%s\t%s\t/^%s$/;""\tc' % (tag_name, filename, line))


def main():
    args = parser.parse_args()

    class_regex = re.compile('^\.([\w-]+)\s*{')

    for line in args.css_file:
        class_match = class_regex.match(line)
        if class_match:
            create_tag(class_match.group(1), args.css_file.name, class_match.group(0))


if __name__ == '__main__':
    main()
</code></pre>
","4928"
"How to check the syntax of a file on the fly?","580","","<p>For those who might not know, <a href=""http://www.flycheck.org/en/latest/"" rel=""noreferrer"">Flycheck</a> is a plugin which checks the syntax of the code you're writing on the fly, without forcing you to save the file. It does that by periodically saving the buffer to a temporary file, and running the syntax checker on <em>that</em>.</p>

<p>This way, you get instant feedback whenever you make a mistake, just like in an IDE, and (most importantly) if you're doing live development, with your program running in the background and reloading its files whenever it detects a change, it won't crash and burn if you make a small typo or syntax error.</p>

<p>The plugins I've looked into (Syntastic and python-mode) only run the syntax checker on save. Is there a better alternative?</p>
","<p>If you're using Vim 8 or Neovim, you can use <a href=""https://github.com/w0rp/ale"" rel=""nofollow noreferrer"">Asynchronous Lint Engine</a>.</p>

<p>Note that it doesn't work well with Syntastic (<a href=""https://github.com/w0rp/ale/blob/master/test/test_conflicting_plugin_warnings.vader#L30"" rel=""nofollow noreferrer"">source</a>):</p>

<blockquote>
  <p>ALE conflicts with Syntastic. Uninstall it, or disable this warning with <code>let g:ale_emit_conflict_warnings = 0</code> in your vimrc file, <em>before</em> plugins are loaded.</p>
</blockquote>
","12339"
"How do I get multiple vimwikis to show under ""Vimwiki / Open Index"" in the gvim menu?","579","","<p>I want to work between two vimwiki directories: a private vimwiki and a public vimwiki.</p>

<p>How do I get multiple vimwikis in the gvim <code>Vimwiki &gt; Open index &gt;</code>  menu?</p>

<p>In my ~/.vimrc I have the two wikis defined:</p>

<pre><code>"" vimwiki 
let wiki_1 = {}
let wiki_1.path = '~/vimwiki'
let wiki_1.path_html = '~/vimwiki_html'
let wiki_2 = {}
let wiki_2.path = '~/private'
let wiki_2.path_html = '~/private_html'
let g:vimwiki_list = [wiki_1, wiki_2]
</code></pre>

<p>In vim and gvim, when I press <code>\ws</code> I can see the two options, as I expect:</p>

<pre><code>1   ~/vimwiki/                                         
2 * ~/private/
Select Wiki (specify number):
</code></pre>

<p>However, in gvim the menu only shows one entry, the tilde ( ~ ) </p>

<p><a href=""https://i.stack.imgur.com/qYpzT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qYpzT.png"" alt=""gvim menu item Vimwiki &gt; &quot;Open Index&quot; submenu item""></a></p>

<p>What am I missing?</p>
","<p>I was missing a trailing slash on both <code>wiki_?.path</code> values.</p>

<p>I corrected my ~/.vimrc as follows:</p>

<pre><code>"" vimwiki 
let wiki_1 = {}
let wiki_1.path = '~/vimwiki/'
let wiki_1.path_html = '~/vimwiki_html/'

let wiki_2 = {}
let wiki_2.path = '~/private/'
let wiki_2.path_html = '~/private_html/'

let g:vimwiki_list = [wiki_1, wiki_2]
</code></pre>

<p>After a trailing slash is added, the correct entries show up in  the gvim <code>Vimwiki &gt; Open index &gt; menu</code></p>

<p><a href=""https://i.stack.imgur.com/ynkwK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ynkwK.png"" alt=""gvim Vimwiki Open index menu with options matching Leaderws""></a></p>

<p>What threw me was that in vim and gvim when I pressed <code>\ws</code> I got the result I expected, yet the gvim menu showed a different set of wikis.  Both methods show the same result set now.</p>
","7911"
"How do I display any marks that are set on the current line?","578","","<p>I usually jump to next mark in file using <code>]'</code> and <code>['</code> commands. But I am not able to find a way to discover whether there are any marks set on current line.</p>
","<p>There is no way to make marks <strong>visible</strong> in vim proper.</p>

<p>If it is however enough to just list them you can issue the <code>:marks</code> <em>normal</em>-mode command, which will give you a list of all marks in the current buffer and all global marks (the one with capitalized letters).</p>

<p>Additionally there is a plugin called <em>showmarks</em> that will do the job. It displays a column left to the linenumbers-column which will contain the names of the marks on a specific line. This includes global marks.</p>

<p>A few versions of this plugin exist, i've found that Jacques Bodin-Hullin's version is the only one that seems to work without problems in any current version of vim (greater or equal than 7.4). It is located on github: <a href=""https://github.com/jacquesbh/vim-showmarks"">jacquesbh/vim-showmarks</a>.</p>

<p>If you are using <a href=""https://github.com/gmarik/Vundle.vim"">Vundle</a> as your plugin manager you can register it with the following line in your <em>.vimrc</em>, after doing a <code>:PluginInstall jacquesbh/vim-showmarks</code>.</p>

<pre><code>call vundle#begin()
"" ... other plugins
Plugin 'jacquesbh/vim-showmarks'
call vundle#end()
</code></pre>

<p>After you've installed showmarks you can make the marks visible with <code>:DoShowMarks</code> and hide them again with <code>:NoShowMarks</code> - an <code>!</code> at the end will execute the command for all buffers.</p>
","2532"
"neovim: use new .vimrc and .vim","577","","<p>I wanted to take a look into neovim coming from vim and my question is about the <code>.vimrc</code>/<code>.viminfo</code> as well as the <code>.vim</code> folder. Preferably I would like to use fresh instances of these. </p>

<p>Do I have to create them by myself or will neovim create them? I don't want to link them together and like the idea of a <strong><em>reset</em></strong>.</p>
","<p>Neovim dosn't use .vimrc/.viminfo as well as the .vim folder.</p>

<p>For Neovim:</p>

<ul>
<li>Use <code>$XDG_CONFIG_HOME/nvim/init.vim</code> instead of <code>.vimrc</code> for storing
configuration.</li>
<li>Use <code>$XDG_CONFIG_HOME/nvim</code> instead of <code>.vim</code> to store configuration
files.</li>
<li>Use <code>$XDG_DATA_HOME/shada/main.shada</code> instead of <code>.viminfo</code> for<br>
persistent session information.</li>
</ul>
","5627"
"Toggle highlighting of trailing whitespace","576","","<p>I put the following lines from <a href=""http://vim.wikia.com/wiki/Highlight_unwanted_spaces"" rel=""nofollow"">this page</a> into my <code>~/.vimrc</code> to highlight trailing whitespace in red:</p>

<pre><code>highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
</code></pre>

<p>I would like to have this be the default behavior, but be able to toggle this behavior on and off with something like <kbd>\</kbd><kbd>w</kbd>. I found a code snippet from this answer that looks promising. After editing it I had something like this:</p>

<pre><code>let g:toggleHighlightWhitespace = 1
function! ToggleHighlightWhitespace(...)
  if a:0 == 1 ""toggle behaviour
    let g:toggleHighlightWhitespace = 1 - g:toggleHighlightWhitespace
  endif

  if g:toggleHighlightWhitespace == 1 ""normal action, do the hi
    highlight ExtraWhitespace ctermbg=red guibg=red
    match ExtraWhitespace /\s\+$/
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
  else
    call clearmatches()
  endif
endfunction

autocmd BufWinEnter * call ToggleHighlightWhitespace()
autocmd InsertEnter * call ToggleHighlightWhitespace()
autocmd InsertLeave * call ToggleHighlightWhitespace()
autocmd BufWinLeave * call ToggleHighlightWhitespace()
nnoremap &lt;leader&gt;w :call ToggleHighlightWhitespace(1)&lt;cr&gt;
</code></pre>

<p>With these lines, typing <kbd>\</kbd><kbd>w</kbd> in normal mode gets rid of the highlighting, but as soon as I re-enter insert mode, the highlighting returns. How do I get the toggling to work? </p>

<p><strong>EDIT</strong></p>

<p>Thanks to help from Grochmal, my final snippet from <code>~/.vimrc</code> is shown below. I split the toggle function into a toggle function and a refresh function for clarity.</p>

<pre><code>let g:toggleHighlightWhitespace = 1    
function! ToggleHighlightWhitespace()    
  let g:toggleHighlightWhitespace = 1 - g:toggleHighlightWhitespace     
  call RefreshHighlightWhitespace()    
endfunction    

function! RefreshHighlightWhitespace()    
  if g:toggleHighlightWhitespace == 1 "" normal action, do the hi    
    highlight ExtraWhitespace ctermbg=red guibg=red    
    match ExtraWhitespace /\s\+$/    
    augroup HighLightWhitespace    
      autocmd BufWinEnter * match ExtraWhitespace /\s\+$/    
      autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/    
      autocmd InsertLeave * match ExtraWhitespace /\s\+$/    
      autocmd BufWinLeave * call clearmatches()    
    augroup END    
  else "" clear whitespace highlighting    
    call clearmatches()    
    autocmd! HighLightWhitespace BufWinEnter    
    autocmd! HighLightWhitespace InsertEnter    
    autocmd! HighLightWhitespace InsertLeave    
    autocmd! HighLightWhitespace BufWinLeave    
  endif    
endfunction    

autocmd BufWinEnter * call RefreshHighlightWhitespace()    
autocmd BufWinLeave * call RefreshHighlightWhitespace()    
nnoremap &lt;leader&gt;w :call ToggleHighlightWhitespace()&lt;cr&gt;
</code></pre>
","<h3>Extraneous <code>autocmd</code></h3>

<p>First, you told Vim to call your toggle function every time you enter or leave the insert mode.  i.e. by using the <code>InsertEnter</code> and <code>InsertLeave</code> events as follows:</p>

<pre><code>autocmd InsertEnter * call ToggleHighlightWhitespace()
autocmd InsertLeave * call ToggleHighlightWhitespace()
</code></pre>

<p>Those events are <strong>not needed there</strong>.  Therefore, kill these two lines.</p>

<h3>Long standing <code>autocmd</code></h3>

<p>On the other hand <strong>these events are needed in the match sections</strong>, because in insert mode you might be typing at spaces at the end of the line:</p>

<pre><code>autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
</code></pre>

<p>Do not kill these <code>autocmd</code>s.  But that is not all, these <code>autocmd</code>s will trigger <code>match</code> whether your toggle is on or off, which is not what a toggle is intended for.</p>

<p>These <code>autocmd</code>s need to be disabled when the toggle is off, but there is no way to disable an <code>autocmd</code>!  You need to wrap these <code>autocmd</code>s inside an <code>augroup</code> so they are not <em>long standing</em>, i.e. so they can be disabled.</p>

<p>In essence, your condition needs to looks as follows:</p>

<pre><code>if g:toggleHighlightWhitespace == 1 ""normal action, do the hi
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
  augroup HighlightWhitespace
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()
  augroup END
else
  call clearmatches()   
  autocmd! HighlightWhitespace BufWinEnter
  autocmd! HighlightWhitespace InsertEnter
  autocmd! HighlightWhitespace InsertLeave
  autocmd! HighlightWhitespace BufWinLeave
endif
</code></pre>

<p><code>autocmd!</code> can only disable an <code>autocmd</code> if it is named by an <code>augroup</code> (I'm not 100% certain of this statement, but it does work well for the script at hand).</p>
","8564"
"Check if value matches any regex in a list","573","","<p>I have encountered some situations where I need to check if a value matches a regex in a list of regexes.  For instance, say I have a list of regexes which match filetypes:</p>

<pre><code>['gundo', 'nerdtree', 'git*']
</code></pre>

<p>I need to find out if the filetype of the current file matches any of these regexes.  The way I would do it currently would look like this:</p>

<pre><code>fun! IsIgnored()
    for ignored_ft in ignored_filetypes
        if &amp;filetype =~ ignored_ft
            return 1
        endif
    endfor
    return 0
endfun
</code></pre>

<p>However, it would be nice if there was a shorter way of doing this.  Does vim have a function to do this, or do I just have to stick with the for loop?</p>
","<p>I did define <a href=""https://github.com/LucHermitte/lh-vim-lib#lists-related-functions""><code>lh#list#match_re()</code></a> (based on a loop for the purpose of finding which regex from a list is matched by a text).</p>

<p>However, in you case, why don't you just test <code>&amp;ft =~ join(ignored_filetypes, '\|')</code> ? </p>
","3088"
"How to Write File Name Specific Snippets Using UltiSnips or Otherwise","573","","<p>I have been using the plugin called Ultisnips and it is great.</p>

<p>But I am looking for the following feature.</p>

<p>Suppose I have two files <code>history.tex</code> and <code>geography.tex</code> which I edit regularly.</p>

<p>I want to have snippets for each of them but I want them to be independent of each other. What I mean by this is that if I am working on <code>history.tex</code>, a snippet named <code>samplesnip</code> serves some purpose while when I am working on <code>geography.tex</code> the snippet named <code>samplesnip</code> serves a completely different purpose.</p>

<p>Right now what I have is a file named <code>tex.snippets</code> where all my snippets for tex files go. So I do not have the kind of flexibility that I want.</p>
","<p>You want to use <code>UltiSnipsAddFiletypes</code>. As the <a href=""https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt#L218"" rel=""nofollow"">docs</a> say:</p>

<blockquote>
  <p>The UltiSnipsAddFiletypes command allows for explicit merging of other
  snippet filetypes for the current buffer. For example, if you edit a
  .rst file but also want the Lua snippets to be available you can issue
  the command ></p>
  
  <p>:UltiSnipsAddFiletypes rst.lua</p>
</blockquote>

<p>To automatically set the filetype when you edit a file, add the following to your vimrc:</p>

<pre><code>autocmd BufNewFile,BufRead history.tex UltiSnipsAddFiletypes history.tex
</code></pre>

<p>Note that as stated in <code>:help 'filetype'</code>, vim natively supports the idea of dotted filetypes, so you could change the filetype to history.tex to do custom filetype plugins, syntax, and more.</p>
","4691"
"Altering HTML templates in vimwiki","572","","<p>The vimwiki plugin offers a great feature of converting whole Wiki to HTML: <code>:VimwikiAll2HTML</code>. But it bothers me that there are no back links to the main page, and the only way to navigate back to the main page is using the browser's ""back"" button.</p>

<p>Is there a way to modify the template vimwiki uses to produce HTML? Preferably without touching the plugin internals (I use pathogen and I want it to be portable between Vim installations).</p>
","<p>Found a solution in vimwiki documentation. Here's a modification to my <code>.vimrc</code>:</p>

<pre><code>let g:vimwiki_list = [{
  \ 'path': '$HOME/Dropbox/vimwiki',
  \ 'template_path': '$HOME/Dropbox/vimwiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]
</code></pre>

<p>I had to create <code>$HOME/Dropbox/vimwiki/templates/default.html</code>, and I took original HTML file content from <code>vimwiki/autoload/vimwiki/default.tpl</code>.</p>

<p>Obviously <code>$HOME/Dropbox/vimwiki</code> is to be replace with whatever directory your wiki is in.</p>

<p>EDIT: Wrote an article with more detail: <a href=""http://www.rosipov.com/blog/custom-templates-in-vimwiki/"" rel=""nofollow"">http://www.rosipov.com/blog/custom-templates-in-vimwiki/</a></p>
","401"
"Auto Highlighting identical lines text","571","","<p>I saw a skilled vim ninja do this a while back but I have no idea were to start.</p>

<p>A) Is there a way to set up vims background colour so that consecutive lines with identical content get highlighted.</p>

<p>B) If somebody knows how to do that a nice tweak to this would be if the highlighting happened on consecutive lines but only consider the first word (not the whole line).</p>

<p>A second tweak if the highlighting could be configured to different colours are used based on the number of matching lines (or words depending on A B is active). So of we only have two consecutive lines that match then green,  3-5 consecutive lines then orange, 6+ then red.</p>
","<p>The following <code>match</code> sets seem to work for (A):</p>

<pre><code>:syn match Low /\v(.+)\n(\1\n)/
:syn match Medium /\v(.+)\n(\1\n){2,4}/
:syn match Critical /\v(.+)\n(\1\n){5,}/
:hi Critical  ctermfg=red
:hi Medium  ctermfg=yellow
:hi Low  ctermfg=green
</code></pre>

<p>It seems the order is crucial here. If the <code>Low</code> or <code>Medium</code> matches come after <code>Critical</code>, it gets subsumed by the looser requirements of these, and similarly for <code>Low</code> w.r.t. <code>Medium</code>.</p>

<p>The highlighting doesn't appear immediately after you add, say, a 3rd or 6th dupe line, but once you move around a bit after adding them. I'm not sure what triggers it, exactly.</p>

<p>For B, I imagine you could replace the regex with:</p>

<pre><code>/\v(\S+).*\n(\1.*\n)/
</code></pre>

<p>In general, replace all the <code>(.*)</code> with <code>(\S+).*</code> and <code>\1</code> with <code>\1.*</code>, or whatever constitutes a word for you.</p>
","2229"
"How to record my keyboard input to do statistics on it?","570","","<p>I would like to find out what are the most common patterns i'm using during coding. So I'm looking for a way to record all my keyboard input while i'm in vim, preferably with timestamps. Then I could do some analysis on the most recent used patterns/motions what time does an action take, and find out things to optimize.</p>

<p>Is there an idiomatic way to do this in Vim?
Shall I try and write a plugin for this?
What would be the performance implications of doing something like this?</p>

<p>Thanks</p>
","<p>Vim allows logging all input when the <code>-w</code> command line option is passed with a file:</p>

<blockquote>
  <p>-w {scriptout}
                    All the characters that you type are recorded in the file   {scriptout}, until you exit Vim.  This is useful if you want to create a script file to be used with ""vim -s"" or "":source!"".  If the {scriptout} file exists, characters are appended.</p>
</blockquote>

<p>Now that we have access to the input we can redirect it where we want. The following way for instance (<strong>*nix systems only</strong>):</p>

<pre><code>vim -w &gt;(./timestamper.py &gt; log)
vim -w &gt;(tee raw-log | ./timestamper.py &gt; log) # If we want the raw log, too
</code></pre>

<p>Where <code>timestamper.py</code> is the following short python script:</p>

<pre><code>#!/usr/bin/env python

import sys
import datetime

while True:
    if (sys.stdin.closed):
        sys.stdout.write(""Input closed\n"")
        break

    a = sys.stdin.read(1)
    if (not a):
        break
    sys.stdout.write(""[{}]: {}\n"".format(datetime.datetime.now(), a))
</code></pre>

<p>The script can be replaced with any other programme that takes input if you want to do something more sophisticated.</p>

<p><em>NOTE: After some short testing I found out that vim seems to keep a buffer of the inputs that it flushes at some point and on exit. This makes the timestamps fairly unreliable.</em></p>
","4635"
"How to split window directly from command line?","570","","<p>I'm using Ubuntu system. I have files: A.txt, B.txt, C.txt</p>

<p>I can split window in the following way: </p>

<pre><code>vim A.txt
:vs B.txt    // after entering into vim
:vs C.txt
</code></pre>

<p>Is there any way to achieve the same effect using command line? like vim -option A.txt B.txt C.txt ?</p>

<pre><code>vim A.txt B.txt    doesn't work, it doesn't show the files simultaneously
vimdiff *.txt     works, but I really don't need the difference shown
</code></pre>

<p>Thanks!</p>
","<p>Vim's <code>-o</code> and <code>-O</code> options will open the files while splitting them horizontally or vertically respectively.</p>

<p>Taken from Vim's help page <code>:help -o</code> and <code>:help -O</code>:</p>

<pre><code>                            *-o*
-o[N]       Open N windows, split horizontally.  If [N] is not given,
        one window is opened for every file given as argument.  If
        there is not enough room, only the first few files get a
        window.  If there are more windows than arguments, the last
        few windows will be editing an empty file.
        {not in Vi}

                            *-O*
-O[N]       Open N windows, split vertically.  Otherwise it's like -o.
        If both the -o and the -O option are given, the last one on
        the command line determines how the windows will be split.
        {not in Vi}
</code></pre>

<p>Example:</p>

<ol>
<li><code>vim -o A.txt B.txt C.txt</code> will open three horizontal splits for each file.</li>
<li><code>vim -O A.txt B.txt C.txt</code> will open three vertical splits for each file</li>
</ol>
","2931"
"Mapping Ctrl-Z in insert mode?","570","","<p>I often <kbd>Ctrl</kbd>-<kbd>Z</kbd> to the command line. Is there a way to do that in response to hitting <kbd>Ctrl</kbd>-<kbd>Z</kbd> in insert mode?</p>

<p>The <code>iabbrev</code> command does not seem to work.</p>
","<p>Using <code>:h CTRL-Z</code> as inspiration, the following solutions can be cooked:</p>

<pre><code>:inoremap &lt;c-z&gt; &lt;esc&gt;:stop&lt;cr&gt;
</code></pre>

<p>or (shorter &amp; literally closer):</p>

<pre><code>:inoremap &lt;c-z&gt; &lt;esc&gt;&lt;c-z&gt;
</code></pre>
","6137"
"How to disable moving the cursor with the mouse","569","","<p>I've been using Vim for decades (and Vi before it since around 1984.)  I use it now on Linux.  Somewhere along the line one behavior crept in that I'd like to disable: when I click in a window to move the focus, and the click happens to be in the body of the window, Vim moves the cursor to wherever the click landed.  If the window is large, it's sometimes not obvious where the cursor was, and that can be important for what I'm trying to do.</p>

<p>I know I could try to click on the window border somewhere, and this wouldn't happen.  But I'd rather not have to be that meticulous, especially when there are a lot of windows around.  I also know there are other ways to change focus, but I don't want to cycle through every window on my 3-monitor workspace.</p>

<p>I'm running Ubuntu and Xubuntu, and have loaded Vim-gtk because I sometimes want to run full graphical, where I could live with this behavior.  But I'm usually not in graphical mode.</p>

<p>I see there's a Vim-tiny that probably does not have this behavior, but I don't know what else I would lose.</p>

<p>I've looked through the setup stuff for the window manager and don't see anything relevant.  The Vim man page doesn't have anything that jumped out at me either.  My <code>.vimrc</code> doesn't seem to address the issue (but it's long and I may have forgotten/missed something.)</p>

<p>Any suggestions?</p>
","<p>Here's a heavy solution:</p>

<pre><code>nnoremap &lt;LeftMouse&gt; ma&lt;LeftMouse&gt;`a
</code></pre>

<p>It will let the click go through (thus changing the focus), but make sure the cursor always goes back to where it was before the click was initiated.</p>
","12143"
"How to generate a syntax highlighting file for vim from a syntax file for notepad++?","569","","<p>I have to use a very specific software with its own syntax and file format: <code>.htc</code>. </p>

<p>I have been supplied a <code>.xml</code> and <code>.lang</code> that can be used for Notepad++ and gedit to support syntax highlighting but no such file for Vim. </p>

<p>Is there a way I can convert/import this to VIM? </p>
","<p><strong>Note 1</strong>: In the comments OP requested examples of syntax files in both formats, so this is not a complete answer but maybe some elements which could be useful to have in mind.</p>

<p><strong>Note 2</strong>: My knowledge of Notepad++ is pretty limited so as said in the Note1 let's hope that someone with a deeper knowledge will see this post and make a better answer.</p>

<p>First to answer the question, as said <a href=""https://superuser.com/a/575529/386795"">here</a> it seems that there is no existing tool able to automatically convert a Notepad++ language file to Vim syntax file. The main reason is that the vim syntax files use some very specific mechanisms which don't have equivalents in Notepad++. Hence translating a file might be much longer than writing one from scratch.</p>

<p>Here are some resources which might be useful:</p>

<ul>
<li><a href=""http://docs.notepad-plus-plus.org/index.php/User_Defined_Languages"" rel=""nofollow noreferrer"">A documentation</a> about user-defined Notepad++ language files.</li>
<li><a href=""http://docs.notepad-plus-plus.org/index.php?title=User_Defined_Language_Files"" rel=""nofollow noreferrer"">A list</a> of Notepad++ language files.</li>
<li><a href=""http://vim.wikia.com/wiki/Creating_your_own_syntax_files"" rel=""nofollow noreferrer"">A wikia tip</a> and <a href=""http://docs.notepad-plus-plus.org/index.php?title=User_Defined_Language_Files"" rel=""nofollow noreferrer"">a really good tutorial</a> about Vim syntax files.</li>
</ul>

<p>I think it is possible to get the keywords on the Notepad++ file to create a basic Vim file.</p>

<p>Once again this answer is not complete at all and really doesn't solve the problem.</p>
","4939"
"How do I access variables in if statements?","565","","<p>Following on from <a href=""https://vi.stackexchange.com/questions/4602/put-variable-to-line-above-current-line-vim/4603#4603"">Put variable to line above current line VIm</a></p>

<p>I added some logic to only run if the begin and end tags in the list are present, snippet</p>

<pre><code>....
let findStart='&lt;'.taglist[s1].'&gt;'
let findEnd='&lt;'.'\/'.ns.taglist[s1].'&gt;'

let fs=0
let fe=0


while something
  let fs=search(expand(findStart))
  let fe=search(expand(findEnd))
  if ( &amp;fs&gt;0 &amp;&amp; &amp;fe&gt;0 )
      call search(findStart,'b')
      ""paste the beginning fold
      :-1put =foldbegin
      .....
      :let fs=0
      :let fe=0
  endif 
let something=something +1
endwhile
</code></pre>

<p>In modeline this <code>:let fs=0|:call search('&lt;')|echo fs</code> returns the position of the search. In Vimscript the only way I can use the variable in an if statement is <code>if ( &amp;fs&gt;0 ... )</code>.</p>

<p>I can't find anything to explain why the statements work differently so I can make sense of it. Any suggestions of where to look for answers?</p>

<p>Also  <code>:let fs=0</code> within the if doesn't reset the variable. Why?</p>

<p>UPDATE: It's something to do with using 2 letter variables but I don't know what the issue is despite googling it.</p>
","<p>It would help, if you could include the error message in your question.</p>

<p>When using '&amp;variables' you are effectively accessing option values. See the help at <code>:h expr-option</code>.</p>

<p>So in your if statement you should <strong>not</strong> use <code>if &amp;fs</code> if you want to check a variable and not the option value 'fsync', but using &amp;fe will cause an error, because there exists no option with that (short-)name.</p>
","4686"
"Undo diffget in vimdiff","563","","<p>Say I have a merge conflict in Git, and try to resolve it with <strong>vimdiff</strong> using <code>diff3</code> view. Here is a screenshot:</p>

<p><a href=""https://i.stack.imgur.com/ggg8g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ggg8g.png"" alt=""Initial State""></a></p>

<p>Now while resolving, I want to <code>diffget</code> once from <code>LO</code> see how it looks like, undo, and then <code>diffget</code> from <code>RE</code>. Another situation is that I have <code>diffget</code>ed from the wrong place, say <code>LO</code>, so I want to undo and <code>diffget</code> the correct one, say <code>RE</code>.</p>

<p>So first of all I do <code>:diffget LO</code> and get what is expected:</p>

<p><a href=""https://i.stack.imgur.com/hG3Me.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hG3Me.png"" alt=""After &lt;code&gt;:diffget LO&lt;/code&gt;""></a></p>

<p>So far everything is ok, but now I want to undo the last <code>diffget</code>, to <code>diffget</code> from <code>RE</code>. So I undo with <code>u</code> and get to what I had before (though, note the highlighting difference):</p>

<p><a href=""https://i.stack.imgur.com/nALvv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nALvv.png"" alt=""After undo""></a></p>

<p>And now simply <code>diffget</code> from <code>RE</code>:</p>

<p><a href=""https://i.stack.imgur.com/npERK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/npERK.png"" alt=""After &lt;code&gt;diffget RE&lt;/code&gt;""></a></p>

<p>So I got one additional redundant <code>octocat</code> line <code>diffget</code>ed from <code>RE</code>.</p>

<p>Below is what I was expecting:</p>

<pre><code>        +----------+------------+
        |  actual  |  expected  |
        +----------+------------+
        |    cat   |    cat     |
        |    dog   |    dog     |
   ??   |  octodog |   octodog  |
  ----&gt; |  octocat |   octocat  |
        |  octocat |            |
        +----------+------------+
</code></pre>

<p>So my question is, why is this happening? And how can I achieve the behaviour I expected?</p>
","<p>(cf <a href=""http://chat.stackexchange.com/rooms/29120/discussion-between-nobe4-and-n9code"">discussion</a>)</p>

<p>It seems that at some point, running the <code>diffupdate</code> command solves the problem.</p>

<p><code>:diffupdate</code> updates the current diff view. It changes the diff colors to match the new state between files. It also update the folds, that are displayed to keep the diff buffer relatively small.</p>
","4740"
"Spacing appears in Vim Airline on right side","562","","<p>I just successfully installed <a href=""https://github.com/bling/vim-airline"" rel=""nofollow noreferrer"">vim-airline</a>, and all the required stuff. I've downloaded the powerline-fonts, and successfully installed them. The only problem right now I'm having is: On right side of the bar from my angle, it shows some spacing between arrows and boxes like in the following picture:</p>

<p><a href=""https://i.stack.imgur.com/oXWc3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oXWc3.png"" alt=""Spacing between arrow and box on right side""></a></p>

<p>I've applied a lot of techniques to make it look properly, but nothing makes it work. </p>

<p>Note: No matter, how wide or short the screen is - the spacing remains consistent.</p>
","<p>You should try adding the following line in your vimrc :</p>

<pre><code>let g:airline#extensions#whitespace#mixed_indent_algo = 1
</code></pre>

<p>Also, some fonts may work better than others. e.g. :</p>

<ul>
<li><a href=""http://larsenwork.com/monoid/"" rel=""nofollow"">http://larsenwork.com/monoid/</a></li>
<li><a href=""https://github.com/powerline/fonts/tree/master/Inconsolata"" rel=""nofollow"">https://github.com/powerline/fonts/tree/master/Inconsolata</a></li>
</ul>
","4416"
"How can I make Vim position the cursor at the start of a tab character instead of the end?","560","","<p>Open an empty buffer and insert a tab character then exit to normal mode. When you place the cursor (normal mode) on the tab it will be at the right side of the whitespace. I'm looking for a way so the cursor will be at the left side of the whitespace instead. Thanks!</p>
","<p>It's only a clumsy workaround, but if you <code>:set list</code> the cursor will be positioned on the other ""side"" of the tab.</p>
","2242"
"softtabstop == tabstop VS softtabstop=0","560","","<p>Are this:</p>

<pre><code>set noexpandtab
set shiftwidth=4
set tabstop=4
set softtabstop=0
</code></pre>

<p>..and this:</p>

<pre><code>set noexpandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
</code></pre>

<p>..exactly the same? I thought that if <code>softtabstop=0</code>, then nothing happens if <kbd>Tab</kbd> is pressed, but this does not seem to be the case.</p>
","<p>Think of <code>'softtabstop'</code> as an additional control over <code>'tabstop'</code>, allowing you to reach indents ""in between"" tab stops.</p>

<p>With your indent setting, you don't actually need that, so the value of <code>'softtabstop'</code> doesn't really matter: You can set it to <code>0</code>, turning this off, set this equal to <code>'tabstop'</code>, in which case the effect is the same as off, or <code>:set softtabstop=-1 shiftwidth=0</code>, and both will follow the <code>'tabstop'</code> setting.</p>
","9450"
"How can I reload my .vimrc without appending anything to my current settings?","559","","<p>I'm aware of <a href=""https://vi.stackexchange.com/questions/24/how-do-i-reload-my-vimrc-without-leaving-vim"">this question</a>, but sourcing that way is not the same as restarting Vim.  I want to do that without restarting Vim.</p>

<p>Like, if you have <code>set fo+=c</code> in your <code>vimrc</code> then re-sourcing changes it to something like this:</p>

<pre><code>fo=&lt;default_values&gt;,c,c
</code></pre>

<p>How can I avoid this behavior? Is there any default config inside Vim that I could source before <code>vimrc</code> to get the same effect as a clean restart?</p>

<p>I'm using neovim.</p>
","<p>I have not tried it, and I would not be surprised if it has some unexpected side effects, but you could try to add</p>

<pre><code>set all&amp;
</code></pre>

<p>at the top of your <code>.vimrc</code> file. This will reset all options to their default setting, cf. <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#:set-&amp;"" rel=""nofollow""><code>:h :set-&amp;</code></a>.</p>

<p>In particular, I am not sure how well this will work with respect to plugins. That is, some/many plugins set some vim options, and if you reset all options in your <code>.vimrc</code> file, and then resource the <code>.vimrc</code> file, then this might affect one or more of your active plugins.</p>

<p>A workaround might be to parse the output of <code>:scriptnames</code> and reload each of the loaded scripts in the given order. This should be done after the <code>.vimrc</code> file has been reloaded, and it should only happen after reloading, not upon restarting.</p>
","8922"
"How to make a movement function work with delete, yank, etc","557","","<p>In hope of answering 
<a href=""https://vi.stackexchange.com/questions/2817/using-the-command-on-a-line-without-a-bracket"">Using the % command on a line without a bracket</a>
I tried to write my first Vim script.</p>

<p>My thought was to check if there was a <code>{</code> on the current line. If there was one I wanted <code>%</code> to behave as usual. If not <code>%</code> would be called on the next line by doing <code>j%</code>. This is what I wrote</p>

<pre><code>function Percent_nextline()
    let line = getline('.')
    if line =~ ""{""
        normal %
    else
        normal j%
    endif
endfunction

nnoremap g% :call Percent_nextline()&lt;cr&gt;
</code></pre>

<p>Then I tried it on this file</p>

<pre><code>foo
{
    { }
}
</code></pre>

<p>With the cursor on the first line typing <code>g%</code> does indeed move the cursor to the last <code>}</code>. Then I tried <code>dg%</code>, meaning to delete all the block. This failed, and made the bell sound. The buffer was left unchanged.</p>

<p>So I have two questions:</p>

<ul>
<li><p>how could I make commands like <code>c</code>, <code>y</code>, <code>d</code>, etc. work with this new mapping?</p></li>
<li><p>if I want to use just <code>%</code> rather than <code>g%</code> how could I stop the function from recursing?</p></li>
</ul>
","<p><em>how could I make commands like c, y, d, etc. work with this new mapping?</em></p>

<p>In Vim, it's all in the <em>modes</em>. The one after commands like <code>c</code>, <code>y</code>, etc., where Vim is waiting for the <code>{motion}</code>, is called <em>operator-pending mode</em>. <code>:help omap-info</code> explains that you can visually select the block to work upon. Likewise, you probably want to define a visual-mode mapping, too:</p>

<pre><code>:nnoremap % :&lt;C-u&gt;call Percent_nextline()&lt;cr&gt;
:xnoremap % :&lt;C-u&gt;execute 'normal! gv'&lt;Bar&gt;call Percent_nextline()&lt;cr&gt;
:onoremap % :&lt;C-u&gt;execute 'normal! V'&lt;Bar&gt;call Percent_nextline()&lt;cr&gt;
</code></pre>

<ul>
<li>the <code>&lt;C-u&gt;</code> removes the range inserted in visual mode (and if you use a <code>[count]</code>)</li>
<li>the visual mode mapping first re-creates the existing selection with <code>gv</code></li>
<li>likewise, the <code>:omap</code> goes into line-wise (I think this makes the most sense here) selection</li>
</ul>

<p><em>if I want to use just % rather than g% how could I stop the function from recursing?</em></p>

<p>By using <code>:normal!</code> (with <code>!</code>), existing mappings are ignored. Like <code>:noremap</code>, you should always use this, unless you explicitly need mappings to apply. Here, you only lose the functionality of the <em>matchit</em> plugin (in case you have that installed), but for pure <code>{</code>...<code>}</code> matching, you don't need that. You might consider sticking to the <code>g%</code> alternative mapping (or using a filetype-specific <code>:map &lt;buffer&gt; %</code> only for C/C++).</p>

<h3>Open issues</h3>

<ul>
<li>When there's no matching <code>{</code>...<code>}</code>, your mappings go one line down, which I find irritating. I think you can fix that easily yourself.</li>
<li>Drop the <code>:</code> sigil; in a script, this isn't needed.</li>
</ul>
","2821"
"Show current file name and parent directory in tabline of vim-airline","557","","<p>I have the following directory structure</p>

<p>Current Directory</p>

<p>|--components</p>

<p>|--|--Artist</p>

<p>|--|--|--index.js</p>

<p>so i want to display ""Artist/index.js"" or ""C/c/Artist/index.js"" in my tabline in vim-airline</p>
","<p>I figured it out. Sorry if it was too easy for it to be a question.
Here is how to do it</p>

<pre><code>let g:airline#extensions#tabline#fnamemod = ':.'
let g:airline#extensions#tabline#fnamecollapse = 0
</code></pre>
","5705"
"cnoremap and the <esc> key","553","","<p>The following mapping doesn't work as expected:</p>

<pre><code>cnoremap $ &lt;esc&gt;
</code></pre>

<p>I would expect that when I press <kbd>$</kbd> in command line mode, it cancels the current command line and returns to normal mode.</p>

<p>But instead of that, it <em>runs</em> the current command line, and returns to normal mode (as if I had pressed the <kbd>Return</kbd> key).</p>

<p>For example:</p>

<pre><code> :echo ""Hello""$
</code></pre>

<p>will echo <code>Hello</code> before exiting the command line.</p>

<p>Is it a normal behaviour, and how can I map a key to cancel the command line mode?</p>
","<p>I don't know why <code>&lt;esc&gt;</code> doesn't work, but you <em>can</em> use <code>&lt;C-c&gt;</code>. I.e.:</p>

<pre><code>cnoremap $ &lt;C-c&gt;
</code></pre>

<p><strong>Edit:</strong></p>

<p>Found the reason for this behavior in <code>:h c_&lt;Esc&gt;</code>:</p>

<blockquote>
  <p>In macros or when 'x' present in 'cpoptions', start entered command.</p>
</blockquote>
","8227"
"Efficient way to find & open files deep in a project tree?","553","","<p>Without plugins like <code>ctrlp</code> and <code>NERDTree</code>, what would be the most efficient way to find and open files deep in a project tree? </p>

<p>Setting the <code>path</code> to <code>**/*</code> results in useless files in <code>.git</code> and other hidden directories, so that appears to be out of the question.</p>

<p>Is there a way to set the path in a <em>smart</em> manner, so that it only includes files in <code>git ls-files</code> or something?</p>
","<p>Here are the relevant parts of my setup:</p>

<ul>
<li><p>enable the wildmenu,</p>

<pre><code>set wildmenu
</code></pre></li>
<li><p>make filename-completion skip these files and directories,</p>

<pre><code>set wildignore+=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=*/min/*
set wildignore+=tags,cscope.*
set wildignore+=*.tar.*
</code></pre></li>
<li><p>make it case-insensitive,</p>

<pre><code>set wildignorecase
</code></pre></li>
<li><p>list files and let the user choose with the wildmenu,</p>

<pre><code>set wildmode=list:full
</code></pre></li>
<li><p>add the directory of the current file and every directory under the working directory to Vim's <code>path</code>,</p>

<pre><code>set path=.,**
</code></pre>

<p><strong>WARNING! The path option is <em>extremely</em> useful. The value above — <code>.,**</code> — works for <em>me</em> but the languages I use don't have a standard library. The <em>proper</em> value depends entirely on <em>your</em> needs.</strong></p></li>
<li><p>a bunch of <code>:find</code> mappings, the uppercase variants start the search from the directory of the current file for better performance,</p>

<pre><code>nnoremap ,f :find *
nnoremap ,F :find &lt;C-R&gt;=expand('%:p:h').'/**/*'&lt;CR&gt;
nnoremap ,s :sfind *
nnoremap ,S :sfind &lt;C-R&gt;=expand('%:p:h').'/**/*'&lt;CR&gt;
nnoremap ,v :vert sfind *
nnoremap ,V :vert sfind &lt;C-R&gt;=expand('%:p:h').'/**/*'&lt;CR&gt;
</code></pre></li>
</ul>

<p>And here is how it looks like:</p>

<p><img src=""https://i.stack.imgur.com/d00pr.gif"" alt="":find""></p>
","2555"
"How to place multiple lines of text in one single table cell in vimwiki?","553","","<p>I want to have multiple lines of text appear in one cell (one row and one column).  </p>

<p>In Vimwiki it looks adequate.  However, when I convert Vimwiki to HTML, each sentence gets its own row.  So I know I am not getting it right, but I have not yet been able to figure out what I am missing.</p>

<h1>MWE</h1>

<p>This vimwiki text</p>

<pre><code>= Test =

Regular Text

    Blockquote

| Special Table               |
|-----------------------------|
| First Sentence              |
| Second Sentence, same cell. |
| Third Sentence, same cell.  |
|                             |
|                             |  

Regular text
</code></pre>

<p>produces this HTML:</p>

<pre><code>&lt;p&gt;
Regular Text
&lt;/p&gt;
&lt;blockquote&gt;
Blockquote
&lt;/blockquote&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;
Special Table
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
First Sentence
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Second Sentence, same cell.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Third Sentence, same cell.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&amp;nbsp;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&amp;nbsp;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
Regular text
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>I want HTML to look like this:</p>

<pre><code>&lt;p&gt;
Regular Text
&lt;/p&gt;
&lt;blockquote&gt;
Blockquote
&lt;/blockquote&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;
Special Table
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
First Sentence&lt;br&gt;
Second Sentence, same cell.&lt;br&gt;
Third Sentence, same cell.&lt;br&gt;
&amp;nbsp;
&amp;nbsp;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
Regular text
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>I have read the help pages:</p>

<pre><code>If you set &gt; in a cell, the cell spans the left column.
If you set \/ in a cell, the cell spans the above row
</code></pre>

<p>I have not been able to use those details to produce the output I want.</p>

<p><strong>How do I tell Vimwiki to put all of those lines of text into one single table cell?</strong></p>
","<p>I added the functionality I wanted to vimwiki and <a href=""https://github.com/vimwiki/vimwiki/pull/331"" rel=""nofollow noreferrer"">submitted a pull request</a> to get it incorporated into the main body of code.</p>

<p>In the process of doing this, I realized I can accomplish my larger goal using <code>blockquote</code> and CSS that vimwiki also currently provides.</p>
","12067"
"Capture group in substitute function","551","","<p>I try to do a substitution from a vim script and to operate over a captured group like so:</p>

<pre><code>let string = ""{b1} {b2} ({b3})""
echo substitute(string, ""{\([^}]*\)}"", ""a"", ""g"")
</code></pre>

<p>It doesn't match anything and the result doesn't change.</p>

<p>If I remove the <code>\( \)</code>:</p>

<pre><code>echo substitute(string, ""{[^}]*}"", ""a"", ""g"")
</code></pre>

<p>Then the whole <code>{b1}</code> is replaced with <code>a</code>, when I only want to replace the content of it: <code>{a}</code>.</p>

<p>I have read that the pattern in the substitute command always work in <code>magic</code> mode. And that in the magic mode, the capture group is: <code>\( \)</code>.</p>

<p>Do you know the trick to make this work?</p>

<p><strong>Edit:</strong>
Thanks to Christian Brabandt I was able to make it work (see his answer below). I had to change the <code>\( \)</code> to <code>\zs \ze</code> also.</p>
","<p>In double-quote strings, the backslash has a special meaning. And will probably be skipped when parsing the quoted string. The details can be seen at <code>:h expr-quote</code>. You would have to double the slashes to make that work. </p>

<p>Therefore, it is usually easier to read and maintain using single quoted strings. See <code>:h literal-string</code> as there the backslash won't be skipped.</p>
","4607"
"How to make the two windows equal width when comparing files?","550","","<p>How to make the two windows  equal width when comparing files with command 
<code>vim -d file1 file2</code>?</p>

<p><a href=""https://i.stack.imgur.com/NXXWn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NXXWn.png"" alt=""enter image description here""></a></p>

<p>How to make the two windows be equal width?</p>
","<p>You can equalize the size of windows with <code>&lt;c-w&gt;=</code>.</p>
","5357"
"Jump to next occurrence of the word I just changed","550","","<p>If I have the following:</p>

<pre><code>function foo(bar) {
    return bar + 1;
}
</code></pre>

<p>And I use <code>cw</code> to change the first <code>bar</code> to <code>baz</code>, how do I jump to the next matching <code>bar</code>, so that I can use <code>.</code> to make the same change?</p>

<p>I can't use <code>*</code>, because that searches for the <em>current</em> word under the cursor, and I foolishly didn't search for <code>bar</code> the first time, so <code>n</code> won't work.</p>

<p>Is there a simple way to search for the next occurrence of the word as it was <em>before</em> I changed it?</p>

<p>I <em>don't</em> want to do a search and replace, because either there are other occurrences of <code>bar</code> in my file that I don't want to change, or because there were only two instances of <code>bar</code>, and I forgot about <code>:%s/bar/baz/</code> before I started and that's too much effort to change the only remaining instance.</p>
","<p>The text you just changed with <code>cw</code> was cut into the unnamed register so you can reuse it with:</p>

<pre><code>/&lt;C-r&gt;""&lt;CR&gt;
</code></pre>

<p>to jump to the next occurrence of the text covered by your last change.</p>
","7755"
"Paste buffer/clipboard into brand new file?","550","","<p>I am breaking apart some files, and I'd like to paste what I cut into a brand new file, which I specify the name of. Something like:</p>

<pre><code>:c file-that-doesnt-exist.txt
</code></pre>

<p>Where <code>c</code> is a key command.</p>

<p><strong>Edit</strong> I've found <code>:e</code>, but that just takes me to a new buffer with the same clipboard. I would just like to magically dump the clipboard into a new file and continue editing the original file, without seeing a new buffer.</p>
","<p>A fast way, working on entire lines, is to visually select the lines to move (<code>V</code> ...), then:</p>

<pre><code>:'&lt;,'&gt;write! &gt;&gt; the_other_file.txt
</code></pre>

<p>... where <code>'&lt;,'&gt;</code> is automatically appended by Vim after you press <code>:</code>. This will append the range to that file, creating it if it doesn't exist. Then, a <code>gv</code> in normal mode will reselect the range, so you can easily delete it (<code>d</code>).</p>

<p>Then, it's even easier - select another range (<code>V</code> ...), hit <code>:</code> to open command-line, <code>Ctrl-P</code> to bring back the last command, <code>Enter</code> to copy the lines <sup>1</sup>. Then <code>gvd</code> to delete them locally; rinse and repeat.</p>

<p><strong>Alternatively</strong>, you could ""cut"" to a named register by <em>appending</em> to it (using the capital letter), e.g. on first text selection to cut: <code>""ad</code>, then (repeatedly): <code>""Ad</code> (on other selected text). At the end, edit the new file and paste from that register (<code>""ap</code>).</p>

<hr>

<p><sup><sup>1</sup>Even better, use <code>@:</code> to repeat the last command (as <a href=""https://vi.stackexchange.com/users/21/karl-yngve-lerv%c3%a5g"">Karl Yngve Lervåg</a> suggests in the 1st comment below).</sup></p>
","4562"
"Is there search and replace history in vim?","549","","<p>We can retrieve search and replace history on IDEs and text editors.
Likewise is there a search history or a way to retrieve previously searched expression in vim?</p>
","<p>Yes, you have the <code>history</code> command:</p>

<pre><code>:history /
</code></pre>

<p>Note that it can be used for <code>/</code>, <code>:</code>, <code>=</code>, <code>&gt;</code>, <code>?</code>, <code>@</code>, <code>all</code>, <code>cmd</code>, <code>debug</code>, <code>expr</code>, <code>input</code> and <code>search</code>.</p>

<p>Alternatively you can use the <code>q:</code>, <code>q/</code> and <code>q?</code> commands to see previously entered commands and searches on a sepearate buffer. You can then modify as you want and replay them by pressing <code>&lt;CR&gt;</code>.</p>

<p>See <code>:h :history</code>, <code>:h q:</code>.</p>
","7714"
"Writing modified buffer to a temporary file","549","","<p>I'd like to write the modified buffer I'm currently editing to a temporary file periodically. In the background I could then, for example, use external tools to analyze the file. </p>

<p>I don't want to write the file to it real location in this process - I want the user to be in charge of that through the normal <code>:w</code> command. </p>

<p>How can I do this in a vimscript called by the <code>CursorHold</code> autocommand? Vim 7.4 and up is fine. </p>
","<p>Basically, this is rather simple:</p>

<pre><code>:autocmd CursorHold *
\   let save_modified = &amp;modified |
\       silent! execute 'write' fnamescape(tempname()) |
\   let &amp;modified = save_modified
</code></pre>

<p>However, this has the side effect of naming a <code>:new</code> buffer on the first triggering. (It doesn't affect existing files; this is the difference between <code>:write</code> and <code>:saveas</code>.) You can either add another check (<code>empty(bufname(''))</code>) and undo that via <code>:0file</code>, or move to lower-level functions altogether:</p>

<pre><code>:autocmd CursorHold * call writefile(getline(1, '$'), tempname())
</code></pre>

<p>The caveat of this approach is that the file contents will always be persisted</p>

<ul>
<li>with Vim's <code>'encoding'</code> setting, i.e. you lose any custom <code>'fileencoding'</code> of the original buffer, and </li>
<li>with Unix (LF) line endings (which you could restore with a <code>map()</code> over the list returned by <code>getline()</code>).</li>
</ul>
","2653"
"How to I get around ""normal"" exiting visual mode?","546","","<p>I'm trying to write a vimscript function that moves the cursor all the way up or all the way down without changing the column. (similar to the way <code>:set nostartofline</code> works). </p>

<p>It works, but when I tried to add a mapping for visual mode, it would exit visual mode.</p>

<p>Here is my script:</p>

<pre><code>function! StraightDown()
  let line=line('.')
  let end=line('$')
  exe ""normal "".eval(end-line).""j""
endfunction

function! StraightUp()
  let line=line('.')
  exe ""normal "".eval(line-1).""k""
endfunction

nnoremap &lt;M-j&gt; :&lt;C-u&gt;call StraightDown()&lt;cr&gt;
nnoremap &lt;M-k&gt; :&lt;C-u&gt;call StraightUp()&lt;cr&gt;

xnoremap &lt;M-j&gt; :&lt;C-u&gt;call StraightDown()&lt;cr&gt;
xnoremap &lt;M-k&gt; :&lt;C-u&gt;call StraightUp()&lt;cr&gt;
</code></pre>

<p>After experimenting with it, it seems like any command executed with <code>normal ...</code> will leave visual mode unless it starts with <code>v</code>.</p>

<p>One possible workaround I thought of is to add some more logic, and if I call the function in visual mode, add <code>v</code> to the normal command. However, this doesn't work if I'm in visual line or visual block mode. </p>

<p>So really, my TL;DR question is how can I do a <code>normal</code> command in visual mode without changing modes?</p>
","<p>There are two things we need to do:</p>

<ol>
<li><p>Since you are using a mapping to execute your function, the mapping rightly has to do <code>:&lt;c-u&gt;</code> in order to reliably call the function.  But calling a function that way will indeed break us out of visual mode.  So you should restore the last visual selection by putting <code>normal gv</code> near the top of your function.</p>

<p>But since you only want to do that in visual mode, let's do it like this:</p>

<pre><code>function! StraightDown()
    ...
endfunction

function! StraightDownVisual()
    normal gv
    call StraightDown()
endfunction

nnoremap &lt;M-j&gt; :&lt;C-u&gt;call StraightDown()&lt;cr&gt;

vnoremap &lt;M-j&gt; :&lt;C-u&gt;call StraightDownVisual()&lt;cr&gt;
</code></pre>

<p>(An alternative single-function approach would be to pass an argument to indicate whether we were in visual mode or not: <code>call StraightDown(0)</code> or <code>call StraightDown(1)</code>.  Or another approach is <a href=""https://github.com/joeytwiddle/rc_files/blob/master/.vim/plugin/move_until_char_changes.vim"" rel=""nofollow"">here</a>.)</p></li>
<li><p>I suspect your <code>exe ""normal ...""</code> will now work fine, preserving the visual selection.  But if it really does clear it, then don't use <code>normal</code> to move the cursor, call a Vim function instead:</p>

<pre><code>let target_col = getcurpos()[4]
call setpos('.', [0, end, target_col])
</code></pre>

<p>For more info, see:</p>

<pre><code>:h setpos(
:h getcurpos(
</code></pre>

<p>You could use <code>[2]</code> of <code>getcurpos()</code> for the current column, but if <code>[4]</code> works for you, then that's probably what you really wanted.</p>

<p>Interestingly, if I press <code>$</code> and then ask</p>

<pre><code>:echo getcurpos()
</code></pre>

<p>then the last number displayed is 2147483647.  I think that is Vim's way of telling me the user wants to be on the <em>final</em> column, not whatever column they have actually landed on.</p></li>
</ol>
","8336"
"Do a forward slash search but don't have vim immediately jump to the string?","543","","<p>When I do a <code>/someStringtoFind</code> in vim it immediately jumps to the closest matched string.</p>

<p>Almost always this is what I want it to do. Sometimes though, I want to be able to enter a string to find and not have my cursor move while I am typing the string. Then, after I have finished typing the string, I could hit enter for vim to jump to the string.</p>

<p>How can I do this?</p>
","<p>Type <code>:</code> before searching: <strong><code>:/someStringtoFind</code> <kbd>Enter</kbd></strong>. If the match isn't at the beginning of the line, press <code>n</code> to go to the beginning of the match.</p>

<p><code>/someStringtoFind/</code> is an empty ex command with the range of lines <code>/someStringtoFind/</code> (a 1-line range). The empty ex command means “jump to the end of the range”, so the command jumps to the next line containing a match for <code>someStringtoFind</code>. You can drop the final <code>/</code> if you have nothing to put afterwards.</p>

<p><code>:/someStringtoFind</code> drops you to the beginning of the target line. The search is stored in the search history, so <code>n</code> brings you to the beginning of the next match, which is on the current line. There's an exception: if the match starts at the beginning of the line, then you're already at the beginning of the match, and <code>n</code> would bring you to the next match. As long as the match doesn't span lines, <code>$N</code> brings you to the beginning of the match reliably, if you don't mind the extra typing (or are writing a macro).</p>
","6018"
"Gvim how to open several files in different buffers from MS Windows explorer","542","","<p>On MS Windows using gVim, is it possible to select several files from the explorer and open them in the same instance of gVim in different buffers?</p>

<p>At the moment if I select 3 different files on Windows graphical explorer and press <kbd>enter</kbd> they get open in 3 different instances of gVim. What I want is to open them in the same instance.</p>

<p>When I work on linux and I want to edit all the files of a directory with vim I can simply from command line do the folowing:</p>

<pre><code>$ vim ./*.sh
</code></pre>

<p>This will open all the files in the same instance of vim in different buffers. I'm looking for a way to do the same but from Windows GUI with gVim.</p>

<p><strong>Note 1:</strong> Using MS Windows command line is not an option here neither is using a cygwin console.</p>

<p><strong>Note 2</strong>: I know that I can open only one file and then, from gVim open the others but that would be slower than simply openning them all in one time from GUI.</p>

<p><strong>Note 3 (edit):</strong> Out of curiosity I just tried to do it on a Debian Jessie with a gVim 7.3 and it worked as I want (one instance - several buffers) out of the box with the same <code>.vimrc</code> as the one of the windows machine (without any <code>.gvimrc</code> file). So I deduce that:</p>

<ul>
<li>It is possible to do what I want.</li>
<li>The behavior of gVim depends on the OS running it which is a little bit disturbing.</li>
</ul>
","<p>By default gVim for Windows adds an option to the Explorer right-click menu that contains an option <em>Edit with single Vim</em> when multiple files are selected and that works as expected, opening them in a single window. That doesn't handle pressing <kbd>Enter</kbd> with multiple files selected though.</p>

<p>There is a solution presented on the <a href=""http://vim.wikia.com/wiki/Launch_files_in_new_tabs_under_Windows"" rel=""nofollow noreferrer"">vim wiki</a> though. In short, you need to modify the registry (using Registry Editor, <code>regedit.exe</code>) so that the appropriate file associations call <code>gvim.exe</code> with the <code>--remote-tab-silent</code> option. Searching for any occurrences of the vim executable with a full path and <code>""%1""</code> as a parameter and changing them to include that parameter before the <code>""%1""</code> should do it. </p>

<p>I just did this and the only occurrence I found was:</p>

<pre>HKEY_CLASSES_ROOT\Applications\gvim.exe\shell\edit\command</pre>

<p>See below for the key <strong>after</strong> editing.</p>

<p><img src=""https://i.stack.imgur.com/CMxQS.png"" alt=""gVim registry key""></p>

<p>Once the change was made, hitting <kbd>Enter</kbd> with multiple files associated with gVim opened them all in the same session.</p>

<p><strong>Note:</strong> You almost certainly need Administrator privileges to edit that registry key.</p>
","3693"
"How to execute a command in an inactive window","541","","<p>I was playing around with the MiniBufExplorer plugin, and I thought it would be nice if the MBE window could stick to the bottom of my ViM screen, even if I specifically open a new window with e.g. <code>:bot split xyz</code>.  If I can get that working, then as a bonus I can set laststatus=0 when the MBE window is active, because having a statusline on it doesn't really accomplish anything.  I already have an autocmd that customizes my statusline that I could piggyback off of, so at first I thought I could make a quick tweak to that function like so:</p>

<pre><code>function! s:RefreshStatus()
    let l:mbe = 2
    for nr in range(1, winnr('$'))
        if '-MiniBufExplorer-' == expand('%')
            let l:mbe = 0
            wincmd J
        else
            call setwinvar(nr, '&amp;statusline', '%!Status(' . nr . ')')
        endif
    endfor
    call setwinvar (0, '&amp;laststatus', l:mbe)
endfunction
</code></pre>

<p>Oops, of course that didn't work.  I'm not actually jumping through the buffers to set the status line, so <code>expand('%')</code> and <code>wincmd J</code> don't actually behave correctly.  So my biggest question is, how do I execute <code>wincmd J</code> in window #nr?
EDIT:
I found the <code>bufname()</code> function, which solves the problem of correctly identifying the MBE window, but I'd still like to be able to move the window to the bottom when something has snuck in under it.</p>

<p>EDIT 2:
MiniBufExplorer seems to have some logic for window positioning built in that interferes with what I am attempting to accomplish, even when using noautocmd.  Here's the function I ended up with, following Ingo's answer:</p>

<pre><code>function! FixMBE()  "" Now a separate function
    let l:mbenr = 0
    for nr in range(1, winnr('$'))
        if '-MiniBufExplorer-' == bufname(nr)
            call setwinvar(nr, '&amp;statusline', '')
            let l:mbenr = nr
        endif
    endfor
    if l:mbenr
        set laststatus=0
        let l:active = winnr()
        try
            exe 'noautocmd ' . l:mbenr . 'wincmd w'
            wincmd J
            if l:active &gt; l:mbenr
                let l:active = l:active -1   "" window numbers will change after we move MBE
            endif
        finally
            exe 'noautocmd ' . l:active . 'wincmd w'
        endtry
    else
        set laststatus=2
    endif
endfunction
</code></pre>

<p>It mostly works with horizontal splits, but goes badly belly up when vertical splits are added to the mix.  However, if I disable the MBE plugin and create a normal window with that name, this script behaves exactly as expected.</p>
","<p>Vim has no means to execute command in a non-active window, and the internal implementation also mostly depends on being in the active one, so it would be hard to implement such. You actually have to briefly move to that window, and then back:</p>

<pre><code>let currentWinNr = winnr()
execute targetWinNr . 'wincmd w'
try
    execute command "" This could be your wincmd J
finally
silent execute currentWinNr . 'wincmd w'
endtry
</code></pre>

<p>Note that this still clobbers the <em>previous window</em> (i.e. <code>&lt;C-W&gt;p</code>); additional commands would be necessary to restore that, too. And autocmds might be triggered, which can be avoided via <code>:noautocmd wincmd w</code>.</p>
","2935"
"remap not working; <NL> in appears in other binding","539","","<p>I'm trying to remap Control + [hjkl] to navigate among splits, by setting this in my rc file:</p>

<pre><code>"" splits navigation
nnoremap &lt;C-h&gt; &lt;C-w&gt;h
nnoremap &lt;C-j&gt; &lt;C-w&gt;j
nnoremap &lt;C-k&gt; &lt;C-w&gt;k
nnoremap &lt;C-l&gt; &lt;C-w&gt;l
</code></pre>

<p>However, <code>&lt;C-h&gt;</code> isn't working; it moves the cursor left a character, as if I had hit backspace (i.e. it traverses lines, unlike my <code>h</code>). The other movements work.</p>

<p>Asking (neo)vim for mapping information about <code>&lt;C-h&gt;</code> doesn't show anything suspicious looking:</p>

<pre><code>:verbose map &lt;C-h&gt;
n  &lt;C-H&gt;         &lt;C-W&gt;h
        Last set from ~/workspace/dotfiles/.nvimrc
</code></pre>

<p>However, if I ask about <code>&lt;C-j&gt;</code> (which works as expected), it says that <code>&lt;NL&gt;</code> is involved?</p>

<pre><code>:verbose map &lt;C-j&gt;
n  &lt;NL&gt;          &lt;C-W&gt;j
        Last set from ~/workspace/dotfiles/.nvimrc
</code></pre>

<p>Changing the order of my <code>nnoremap</code>s doesn't seem to change the behavior.</p>

<p>How should I debug this?</p>
","<p>This is due to a <a href=""https://github.com/neovim/neovim/issues/2048"" rel=""nofollow"">bug</a> in Neovim.</p>

<p>A suggested <a href=""https://github.com/neovim/neovim/issues/2048#issuecomment-78045837"" rel=""nofollow"">workaround</a> in that bug is to run the following commands to adjust your terminal's terminfo entry to match what Neovim expects:</p>

<pre><code>infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' &gt; $TERM.ti
tic $TERM.ti
</code></pre>
","2520"
"Within a function, Is there a way to determine if vim is in insert mode?","539","","<p>Within a function, is there a way to determine if vim is in insert mode (or was in insert mode prior to calling the function)?</p>
","<p><em>Something</em> must have invoked your function. Setting the (new in Vim 8.0) asyncronous timers aside, this will be either</p>

<ul>
<li>a custom command, which cannot be invoked from insert mode, only command-line mode</li>
<li>a mapping</li>
<li>an <code>:autocmd</code> event</li>
</ul>

<p>For the latter, you can split into two separate <code>:autocmd</code>s, and pass an <code>isInsertMode</code> flag into your function:</p>

<pre><code>autocmd CursorHold,CursorHoldI * call MyFunc()
</code></pre>

<p>turns into</p>

<pre><code>autocmd CursorHold  * call MyFunc(0)
autocmd CursorHoldI * call MyFunc(1)
</code></pre>

<p>For mappings, you can pass a similar flag, or a character representing the mode (to also handle visual mode and so on):</p>

<pre><code>:nnoremap &lt;F2&gt; :call MyFunc('n')&lt;CR&gt;
:vnoremap &lt;F2&gt; :&lt;C-u&gt;call MyFunc('v')&lt;CR&gt;
:inoremap &lt;F2&gt; &lt;C-o&gt;:call MyFunc('i')&lt;CR&gt;
</code></pre>

<p>That is the canonical approach, and should work for most use cases. If you have a really special need, please elaborate in your question.</p>
","10397"
"Can I get vim to fold comments when using foldmethod=indent","538","","<p>When editing Python files at work I have to include 20+ lines of boilerplate legalese at the start of the file. ""start of the file"" is not that strict: I'm allowed to include the Python docstring, and future imports before the boilerplate. But the boilerplate itself is very strict, I have to include it verbatim from a company template. Specifically: I am not allowed to indent it.</p>

<p>For Python I use</p>

<pre><code>:set foldmethod=indent
</code></pre>

<p>but I would like to be able to fold away that boilerplate as well.</p>

<p>Is it possible to tweak the indent foldmethod to fold lines starting/ending with '#' as well? Or will I need to change to <code>foldmethod=expr</code> and write my own folding function?</p>
","<p>The cleanest would be to re-implement Vim's indent-folding via a custom <code>'foldexpr'</code>, and make that consider the legalese via a special case. <code>:help fold-indent</code> even gives implementation hints:</p>

<blockquote>
<pre><code>  The indent() function can be used in 'foldexpr' to get the indent of a line.
</code></pre>
</blockquote>

<p>Another option is described nearby:</p>

<blockquote>
<pre><code>Some lines are ignored and get the fold level of the line above or below it,
whichever is lower.  These are empty or white lines and lines starting
with a character in 'foldignore'.  White space is skipped before checking for
characters in 'foldignore'.  For C use ""#"" to ignore preprocessor lines.
</code></pre>
</blockquote>

<p>To use this, you'd need to have non-commented indented Python statements both above and below the block of legalese, like this:</p>

<pre><code>    some Python statement
# legalese
# is comments
# starting in first column
    another Python statement
</code></pre>

<p>With <code>:setlocal foldmethod=indent foldignore=#</code>, the above will be folded as one block.</p>
","2262"
"How to disable search highlight automatically after searching?","538","","<p>Search highlight is very convenient for me when I'm searching, but after I'm done with doing stuff with search matches it's distracting to me, so I'm using <code>:noh</code> mapped to <code>F3</code> everytime I've done what I needed to do with matches.</p>

<p>I'd like to automate this process as it is very annoying to me (this is what vim is about right?).
Is it possible to turn off highlighting if <code>n</code> or <code>N</code> isn't pressed for a couple of seconds?</p>

<p><strong>Edit1</strong></p>

<p>Guys, don't bother explain to me how YOU use vim (toggle highlight in insert mode etc).
I know exactly what I want and asked precise question. I know you're trying to be helpful, but you're not, sorry.</p>
","<p>I recently wrote <a href=""https://github.com/romainl/vim-cool"">a small plugin</a> that seems to do exactly what you want.</p>

<p>It works by remapping search-related normal mode commands <code>/?nN*#g*g#</code> and <code>&lt;CR&gt;</code> in command-line mode, and installing a <code>cursorMoved</code> autocommand.</p>
","8065"
"Autocommand groups syntax and usage","537","","<p>What are some of the ways to construct autocommand groups in the .vimrc? What is the benefit of grouping autocommands? Can you provide some materials on proper use of autocommand groups? Any help here is greatly appreciated. Thanks!</p>
","<p>One of the most common uses of autocommands is to allow you to execute commands only on specific filetypes, or to customize a keymapping to execute differently in different filetypes.</p>

<p>For example, I could do </p>

<pre><code>augroup filetype_ruby
    autocmd!
    autocmd FileType ruby nnoremap &lt;buffer&gt; &lt;localleader&gt;t :!rake test
augroup END

augroup filetype_erlang
    autocmd!
    autocmd FileType erlang nnoremap &lt;buffer&gt; &lt;localleader&gt;t :!rebar eunit
augroup END
</code></pre>

<p>What this example does is it maps the <code>&lt;localleader&gt;t</code> hotkey to running tests through the appropriate build tool - using rake in a ruby project, and rebar in an erlang project.</p>

<p>This is especially useful for developers making plugins specific to a certain programming language, like vim-ruby or any of <a href=""https://github.com/tpope"" rel=""nofollow"">tpope's</a> ruby plugins.</p>

<p>There are other events you can use besides FileType - there's:</p>

<ul>
<li>BufWrite (when a buffer is written)</li>
<li>FileAppendCmd ( when a file is appended to)</li>
<li>FileAppendPost</li>
</ul>

<p>and many others. Basically, if you want vim to execute specific commands when these events are fired, augroups are the way to go.</p>

<p>Some good references for reading and learning:</p>

<ul>
<li><a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/14.html"" rel=""nofollow"">Learn VimScript the hard way</a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html"" rel=""nofollow"">Vim Documentation</a></li>
<li>:h autocmd-groups</li>
</ul>
","325"
"What is the significance of ""Incomplete last line"" when opening a file?","536","","<p>I occasionally open a file with vim and see something like this:</p>

<pre><code>""&lt;file name&gt;"" [Incomplete last line][dos format] 71 lines, 2912 characters
</code></pre>

<p>I understand all of that information except <code>Incomplete last line</code>. I realize this just means that there isn't a line termination character on the last line, and I know if I resave the file and reopen it, that message goes away, which implies that vim automatically adds the line termination character if it isn't already present. My question is: why does this matter, and why does vim bother to tell me about it?</p>
","<p>The Unix convention is that a line is a sequence of zero or more characters ending with a newline character. A text file is a sequence of such lines. This is just a convention, but adhering to that convention allows text-processing tools to work together. It avoids problems of ambiguity in commands such as <code>cat foo bar</code> when the last character of <code>foo</code> is not a newline.</p>

<p>A sequence of characters that does not end with a newline is not a ""line"", in this sense. It is incomplete and some tools will not process it as the user might expect. Vim warns you about it because it is a potential problem and fixes it because Vim attempts to write proper files.</p>
","11630"
"How can I highlight matching ""%"" names (e.g. if/end, for/end) defined by matchit.vim on selection?","535","","<p>Currently my Vim highlights matching parentheses, brackets, quotes, etc. with Cyan background and white foreground -- the cursor can be moved between these with <code>%</code>. Thanks to my matchit.vim, I can also switch with <code>%</code> between if/end, for/end, etc. -- however these are not highlighted on selection.</p>

<p><strong>How can I automatically highlight these matching pairs upon selection, like is automatically done with parentheses?</strong></p>

<p>Furthermore, how can I modify the background color used for these pairs using <code>:highlight</code>?</p>

<p>Thanks in advance.</p>

<hr>

<p><strong>I've updated the answer by @Tommy A below</strong> to account for poorly specified <code>matchit.vim</code> groups, and other situations where the <code>%</code> operator does not return the cursor to the original position, ever. Check out the differences in the ""while"" loop. Anyone reading this thread is advised to use this version, to avoid infinite loops:</p>

<pre><code>function! s:get_match_lines(line) abort
  "" Loop until `%` returns the original line number; abort if
  "" (1) the % operator keeps us on the same line, or
  "" (2) the % operator doesn't return us to the same line after some nubmer of jumps
  let a:tolerance=25
  let a:badbreak=1
  let a:linebefore=-1
  let lines = []
  while a:tolerance &amp;&amp; a:linebefore != line('.')
    let a:linebefore=line('.')
    let a:tolerance-=1
    normal %
    if line('.') == a:line
      "" Note that the current line number is never added to the `lines`
      "" list. a:line is the input argument 'line'; a is the FUNCTION BUFFER
      let a:badbreak=0
      break
    endif
    call add(lines, line('.'))
  endwhile
  ""Return to original line no matter what, return list of lines to highlight
  execute ""normal "".a:line.""gg""
  if a:badbreak==1
    return []
  else
    return lines
  endif
endfunction

function! s:hl_matching_lines() abort
  "" `b:hl_last_line` prevents running the script again while the cursor is
  "" moved on the same line.  Otherwise, the cursor won't move if the current
  "" line has matching pairs of something.
  if exists('b:hl_last_line') &amp;&amp; b:hl_last_line == line('.')
    return
  endif
  let b:hl_last_line = line('.')
  "" Save the window's state.
  let view = winsaveview()
  "" Delete a previous match highlight.  `12345` is used for the match ID.
  "" It can be anything as long as it's unique.
  silent! call matchdelete(12345)
  "" Try to get matching lines from the current cursor position.
  let lines = s:get_match_lines(view.lnum)
  if empty(lines)
    "" It's possible that the line has another matching line, but can't be
    "" matched at the current column.  Move the cursor to column 1 to try
    "" one more time.
    call cursor(view.lnum, 1)
    let lines = s:get_match_lines(view.lnum)
  endif
  if len(lines)
    "" Since the current line is not in the `lines` list, only the other
    "" lines are highlighted.  If you want to highlight the current line as
    "" well:
    "" call add(lines, view.lnum)
    if exists('*matchaddpos')
      "" If matchaddpos() is availble, use it to highlight the lines since it's
      "" faster than using a pattern in matchadd().
      call matchaddpos('MatchLine', lines, 0, 12345)
    else
      "" Highlight the matching lines using the \%l atom.  The `MatchLine`
      "" highlight group is used.
      call matchadd('MatchLine', join(map(lines, '''\%''.v:val.''l'''), '\|'), 0, 12345)
    endif
  endif
  "" Restore the window's state.
  call winrestview(view)
endfunction
function! s:hl_matching_lines_clear() abort
  silent! call matchdelete(12345)
  unlet! b:hl_last_line
endfunction

"" The highlight group that's used for highlighting matched lines.  By
"" default, it will be the same as the `MatchParen` group.
highlight default link MatchLine MatchParen
augroup matching_lines
  autocmd!
  "" Highlight lines as the cursor moves.
  autocmd CursorMoved * call s:hl_matching_lines()
  "" Remove the highlight while in insert mode.
  autocmd InsertEnter * call s:hl_matching_lines_clear()
  "" Remove the highlight after TextChanged.
  autocmd TextChanged,TextChangedI * call s:hl_matching_lines_clear()
augroup END
</code></pre>
","<p>I thought this idea was interesting, so I gave it a shot.  It will be particularly useful in dense files, such as HTML.</p>

<p><a href=""https://i.stack.imgur.com/CcpTo.gif""><img src=""https://i.stack.imgur.com/CcpTo.gif"" alt=""match lines""></a></p>

<p>The following script simply lets <code>matchit.vim</code> do what it does while recording the line numbers.  Explanations are in the script's comments.</p>

<p><a href=""https://github.com/tweekmonster/dootfiles/blob/ba90beafb092e1559fb89d72b6d0818cc45bc5c5/vim/_source/all/99-matchlines.vim"">matchlines.vim</a></p>

<pre><code>function! s:get_match_lines(line) abort
  let lines = []

  "" Loop until `%` returns the original line number
  while 1
    normal %
    if line('.') == a:line
      "" Note that the current line number is never added to the `lines`
      "" list.
      break
    endif
    call add(lines, line('.'))
  endwhile

  return lines
endfunction

function! s:hl_matching_lines() abort
  "" `b:hl_last_line` prevents running the script again while the cursor is
  "" moved on the same line.  Otherwise, the cursor won't move if the current
  "" line has matching pairs of something.
  if exists('b:hl_last_line') &amp;&amp; b:hl_last_line == line('.')
    return
  endif

  let b:hl_last_line = line('.')

  "" Save the window's state.
  let view = winsaveview()

  "" Delete a previous match highlight.  `12345` is used for the match ID.
  "" It can be anything as long as it's unique.
  silent! call matchdelete(12345)

  "" Try to get matching lines from the current cursor position.
  let lines = s:get_match_lines(view.lnum)

  if empty(lines)
    "" It's possible that the line has another matching line, but can't be
    "" matched at the current column.  Move the cursor to column 1 to try
    "" one more time.
    call cursor(view.lnum, 1)
    let lines = s:get_match_lines(view.lnum)
  endif

  if len(lines)
    "" Since the current line is not in the `lines` list, only the other
    "" lines are highlighted.  If you want to highlight the current line as
    "" well:
    "" call add(lines, view.lnum)
    if exists('*matchaddpos')
      "" If matchaddpos() is availble, use it to highlight the lines since it's
      "" faster than using a pattern in matchadd().
      call matchaddpos('MatchLine', lines, 0, 12345)
    else
      "" Highlight the matching lines using the \%l atom.  The `MatchLine`
      "" highlight group is used.
      call matchadd('MatchLine', join(map(lines, '''\%''.v:val.''l'''), '\|'), 0, 12345)
    endif
  endif

  "" Restore the window's state.
  call winrestview(view)
endfunction

function! s:hl_matching_lines_clear() abort
  silent! call matchdelete(12345)
  unlet! b:hl_last_line
endfunction


"" The highlight group that's used for highlighting matched lines.  By
"" default, it will be the same as the `MatchParen` group.
highlight default link MatchLine MatchParen

augroup matching_lines
  autocmd!
  "" Highlight lines as the cursor moves.
  autocmd CursorMoved * call s:hl_matching_lines()
  "" Remove the highlight while in insert mode.
  autocmd InsertEnter * call s:hl_matching_lines_clear()
  "" Remove the highlight after TextChanged.
  autocmd TextChanged,TextChangedI * call s:hl_matching_lines_clear()
augroup END
</code></pre>

<p>I don't really like this happening on <code>CursorMoved</code>, though.  I think it's better as a key map that can be used when I need it:</p>

<pre><code>nnoremap &lt;silent&gt; &lt;leader&gt;l :&lt;c-u&gt;call &lt;sid&gt;hl_matching_lines()&lt;cr&gt;
</code></pre>
","8708"
"How can I prevent the default loading of ftplugin/text.vim for certain *.txt files","534","","<p>I have to edit a bunch of *.txt files for which I want to define a specific filetype. So, in my <code>vimrc</code>, I add a</p>

<pre><code>autocmd! BufReadPost bunchOfFiles/*.txt :set ft=bunchOfFilesFT
</code></pre>

<p>This reads <code>ftplugin/bunchOfFilesFT.vim</code> as wanted. The problem is that it also reads <code>ftplugin/text.vim</code> since there is an according autocmd that was defined in <code>filetype.vim</code> that comes with a vim installation.</p>

<p>Since my <em>bunchOfFilesFT</em> filetype should be completely independent of the <em>text</em> filetype (despite its suffix), I'd rather have vim not load <code>ftplugin/text.vim</code>. Is this somehow possible?</p>
","<p>It is a good idea to begin plugins, colorschemes, etc., by checking that it has not already been run for the current buffer. This prevents running the plugin again if it's not necessary and it gives the user the ability to easily disable it. For an ftplugin this usually looks like </p>

<pre><code>if exists(""b:did_ftplugin"")
  finish
endif
let b:did_ftplugin = 1
</code></pre>

<p>If your <code>text.vim</code> ftplugin does this, you can prevent it loading by setting the <code>b:did_ftplugin</code> variable before <code>text.vim</code> is loaded.</p>

<p>For example, Vim's <code>ftplugin/vim.vim</code> does a check like that. So I put the above snippet in <code>ftplugin/jjvim.vim</code> and </p>

<pre><code>autocmd! BufReadPost *.vim :set ft=jjvim
</code></pre>

<p>in my vimrc. Then I start a new vim session and edit <code>ftplugin/jjvim.vim</code> again, and now only that ftplugin is loaded, not Vims <code>vim.vim</code>.</p>

<p>So make sure that your <code>text.vim</code> contains a check like above, and make sure you set <code>b:did_ftplugin</code> before <code>text.vim</code> is loaded, for instance from your <code>bunchofFilesFT.vim</code>, and you should be fine.</p>
","4287"
"Is it possible to include coding style vim modelines e.g. psr-2 or drupal?","534","","<p>In <a href=""http://vim.org/"" rel=""nofollow"">vim</a> you can include <code>modelines</code> in comments at the start/end of a file, like</p>

<pre><code>// vim:sw=4 ts=4 et
</code></pre>

<p>I regularly work with PHP and try to stick to <a href=""https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md"" rel=""nofollow"">PSR-2</a> but Drupal (of course *rolls eyes*) has to be different.</p>

<p>I would like to be able to include something like</p>

<pre><code>// vim:codestyle=psr-2
</code></pre>

<p>or</p>

<pre><code>// vim:codestyle=drupal7
</code></pre>

<p>and have this trigger various setup options in my <code>.vimrc</code> that define that code style, for example <code>ts=2 sw=2 et</code> for <code>drupal7</code> and <code>ts=4 sw=4 et</code> for <code>psr-2</code>.</p>

<p>Is this possible? (well I suppose I'm hoping it is, so what I really mean is How can I do this?)</p>
","<p>Per the answers to <a href=""https://vi.stackexchange.com/q/2547/267"">a question</a> I recently asked on the <a href=""http://vi.stackexchange.com"">Vi and Vim Stack Exchange</a>, the vim modeline can only be used to trigger a predefined subset of parameters to the <code>:set</code> command already built into vim. It sounds like you could hack something up using <code>.exrc</code>, but a more promising direction that is probably better for your use case is setting up per-project rc files using a plugin such as <a href=""https://github.com/LucHermitte/local_vimrc"" rel=""nofollow noreferrer"">local_vimrc</a>.</p>
","2617"
"VIM syntax file, how to match capturing groups?","534","","<p>Lets say I have a line like the following in a vim syntax file:</p>

<pre><code>syntax match Emphasis ""\v\s+_\zs[^_\n]+\ze_\s+""
</code></pre>

<p>In this line I'd like to create multiple capture groups:</p>

<ol>
<li>the first underscore as ""EmphasisStartMarker""</li>
<li>the content between the two underscores as ""Emphasis""</li>
<li>the second underscore as ""EmphasisEndMarker""</li>
</ol>

<p>I know that <code>\zs</code> starts matching and <code>\ze</code> ends it. So I tried:</p>

<pre><code>syntax match EmphasisStartMarker ""\v\s+\zs_\ze[^_\n]+_\s+""
</code></pre>

<p>And</p>

<pre><code>syntax match EmphasisEndMarker ""\v\s+_[^_\n]+\zs_\ze\s+""
</code></pre>

<p>However, this does not work, probably because somehow the start marker already consumes the content and the end marker text.</p>

<p>I could not find a description for matching capture groups and how to write that in a syntax file. I'd like to have something like:</p>

<pre><code>syntax match ""\v\s+(_)([^_\n]+)(_)\s+""
1=EmphasisStartMarker
2=Emphasis
3=EmphasisEndMarker
</code></pre>

<p>I know there is something with <code>region</code> and <code>start</code> and <code>end</code>, but that won't be useful if I have more than 3 capturing groups.</p>

<p>What is VIM's syntax for this? Is it possible? If not, how to workaround?</p>
","<p>Yes, <code>\zs</code> and <code>\ze</code> cannot be used for this because the actual <em>match</em> still is the full expression, as these special atoms just ""cut off"" parts of the result, but don't change the actual regular expression matching.</p>

<p>You could use lookbehind / lookahead (<code>\@&lt;=</code> / <code>\@=</code>) instead, but this usually is solved via syntax containment (<code>contains=</code>), or priorization (<code>nextgroup=</code>).</p>

<hr>

<p>Your example is pretty simple. Assuming you don't actually want different highlighting for the identical start and end markers, you can match the entire emphasis with your regexp and then contain the start and end markers:</p>

<pre><code>syntax match Emphasis ""\v\s+\zs_[^_\n]+_\ze\s+"" contains=EmphasisMarker
syntax match EmphasisMarker ""_"" contained
</code></pre>

<p>This works because the inner emphasis cannot include an <code>_</code> character. If it could, I would have defined this the other way around:</p>

<pre><code>syntax match EmphasisMarker ""\v\s+\zs_[^_\n][^\n]+[^_\n]_\ze\s+"" contains=Emphasis
syntax match Emphasis ""\v[^_\n][^\n]+[^_\n]\ze_"" contained
</code></pre>

<p>I'm still using <code>\z*</code> to exclude the whitespace around it. Note that one usually uses <code>(^|\s)\zs...\ze(\s|$)</code> (or <code>\&lt;...\&gt;</code> if possible) to also allow matches at the start and end of the line. (But I don't know your exact syntax, so I kept this as it was.)</p>
","10144"
"How do I automatically add a character at end of line?","533","","<p>I am very new to vim and would like to know if I could have a script in my <code>vimrc</code> file that automatically adds a <code>;</code> to the end of every line.</p>

<p>The only exceptions is if the line has the strings <code>for(</code>, <code>while(</code>, <code>#include</code>, <code>//</code>, <code>/*</code>, <code>*/</code> etc.</p>

<p>I would like this to be turned on by default and toggled on and off via the shortcut <kbd>Ctrl</kbd>+<kbd>;</kbd>.</p>
","<p>As has been stated, your list of exceptions is by no means comprehensive and you will probably find that this often creates more problems than it solves.</p>

<p>However, it's still doable and it was kind of fun to write out the code to do so, so here goes:</p>

<pre><code>""When hitting Enter, if the line doesn't start with a /*, insert a semicolon
:inoremap &lt;CR&gt; &lt;C-R&gt;=match(getline('.'), '\s*/\*')==-1?';':''&lt;CR&gt;&lt;CR&gt;
</code></pre>

<p>Feel free to expand this regex to capture your conditions above. I didn't want to write all of that out as I feel like it would obfuscate what I was writing and would still not be a complete solution for what your intent is.</p>

<p>You would probably want to only do this for certain filetypes, in which case you'd want to add the <code>&lt;buffer&gt;</code> argument to this command and do it inside an <code>autocmd Filetype</code> block.</p>

<p>To disable the mapping, you would say <code>:iunmap &lt;CR&gt;</code></p>
","2348"
"Is there any list of filetype extension names?","533","","<p>I was told when add a line like <code># vim: filetype=r</code> in a file, vim can recognizes the file type. It seems that for some files like <code>*.cpp</code>,<code>*.java</code>, vim can recognize the file while for files like <code>*.CPP</code>, <code>*.JAVA</code>, it needs the first line information.</p>

<p>I have two questions. The first is that what should I type in the first line of a <code>*.sh</code> shell script file? The second is that is there any list for the extension names or the extension name to be typed in the first line is simply the extension name of the original file with all letters in small case?</p>

<p>BTW, I've read <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#%27filetype%27"">this</a> link, but didn't find my answer.</p>
","<p>The reason Vim detects the filetype for <code>*.cpp</code> and not for <code>*.CPP</code> files is that Vim has auto-commands for <code>*.cpp</code> setting the filetype, but nothing for <code>*.CPP</code>:</p>

<pre class=""lang-vim prettyprint-override""><code>:au BufRead *.cpp
--- Auto-Commands ---
filetypedetect  BufRead
    *.cpp     if exists(""cynlib_syntax_for_cpp"")|setf cynlib|else|setf cpp|endif

:au BufRead *.java
--- Auto-Commands ---
filetypedetect  BufRead
    *.java    setf java

:au BufRead *.CPP
--- Auto-Commands ---
</code></pre>

<p>What you need is a similar <code>autocmd</code> for <code>*.CPP</code> and <code>*.JAVA</code> files:</p>

<pre class=""lang-vim prettyprint-override""><code>au BufRead *.CPP setf cpp
au BufRead *.JAVA setf java
</code></pre>

<p>You can add these to your <code>.vimrc</code>, or more appropriately from an organizational view, to a <code>.vim</code> file in <code>~/.vim/ftdetect/</code>.</p>

<hr>

<p>For <code>.sh</code> files, Vim should already be detecting the filetype correctly, and the filetype would be <code>sh</code>.</p>

<p><code># vim: filetype=r</code> is  <a href=""http://vimhelp.appspot.com/options.txt.html#modeline"">a modeline</a>:</p>

<pre class=""lang-none prettyprint-override""><code>There are two forms of modelines.  The first form:
        [text]{white}{vi:|vim:|ex:}[white]{options}
…
Examples:
   vi:noai:sw=3 ts=6 
   vim: tw=77 

The second form (this is compatible with some versions of Vi):

        [text]{white}{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]
…
Examples:
   /* vim: set ai tw=75: */ 
   /* Vim: set ai tw=75: */
</code></pre>

<p>If you absolutely must use a modeline, try something like the following <em>after</em> the shebang:</p>

<pre class=""lang-sh prettyprint-override""><code># vim: ft=sh
</code></pre>

<hr>

<p>The filetypes are not necessarily the extensions. For example, <code>.conf</code> files can have a filetype of <code>apache</code>, <code>.sh</code> files can have a filetype of <code>zsh</code> if the shebang is <code>#! /bin/zsh</code>, and so on. Open a file for which you know the filetype is correctly detected and run <code>set ft?</code>:</p>

<pre><code>:set ft?
  filetype=apache
</code></pre>

<p>The default rules for setting the filetype are in <a href=""https://github.com/vim/vim/blob/master/runtime/filetype.vim""><code>$VIMRUNTIME/filetype.vim</code></a>:</p>

<pre class=""lang-sh prettyprint-override""><code>vim +'e $VIMRUNTIME/filetype.vim'
</code></pre>

<p>Look for <code>setf</code> in that file.</p>
","8013"
"What does it mean to replace slashes (/) by exclamation marks (!) in a substitute command?","532","","<p>I recently saw a substitute command where the author had the <code>/</code> replaced by a <code>!</code> like this: <code>:s!abc!ABC!g</code></p>

<p>I tried to find some documentation on this usage but I couldn't find anything relevant. So I tried to experiment by myself and once again I couldn't figure out the real difference between the two signs. Here's what I found:</p>

<ul>
<li>It's not possible to mix <code>!</code> and <code>/</code> in a command. For example <code>:s!abc/ABC</code> fails.</li>
<li>It may be useful to use <code>!</code> to avoid escaping a <code>/</code>in a pattern. For example if I want to replace <code>&lt;/</code> with <code>%</code> I can use <code>:%s!&lt;/!%!g</code> instead of <code>:%s/&lt;\//%/g</code>. </li>
<li>It seems that in some case some regex won't work with <code>/</code> and works properly with <code>!</code> but as I'm not really a regex expert i'm not sure of that.</li>
</ul>

<p>So my question is simple: What is the advantage of using <code>!</code> in a substitute command and when should I decide to use it instead of <code>/</code>?</p>
","<p>From <a href=""http://vimhelp.appspot.com/repeat.txt.html#E148""><code>:help :global</code></a>:</p>

<blockquote>
  <p>Instead of the '/' which surrounds the <code>{pattern}</code>, you can use any other
  single byte character, but not an alphabetic character, '\', '""' or '|'.
  This is useful if you want to include a '/' in the search pattern or
  replacement string.</p>
</blockquote>

<p>As you already devised from your experimentation, this is to prevent the so-called ""<a href=""http://en.wikipedia.org/wiki/Leaning_toothpick_syndrome"">leaning toothpick syndrome</a>"". Consider this:</p>

<pre><code>:%s/\/home\/martin\/test/\/home\/jake\/x/
</code></pre>

<p>versus:</p>

<pre><code>:%s!/home/martin/test!/home/jake/x!
</code></pre>

<p>The second form is obviously a lot more readable.</p>

<p>This is the only reason you can change the delimiter; to make it more readable for us humans. The computer doesn't care.</p>

<p>Some other programs are even more flexible by the way, in GNU <code>sed</code> for example you can use <code>x</code> as delimiter if you wanted. <code>sed sxaxbxg file</code> is the same as <code>sed s/a/b/g file</code>.</p>
","3157"
"How to load plugins from my vimrc and from another file?","529","","<p>I have my dotfiles synchronized on github which is a current practice.</p>

<p>As I use several machines I want to be able to have some part of my configuration not synched on my github repo. To do so I added these lines in my synched <code>.vimrc</code>:</p>

<pre><code>let $MYLOCALVIMRC = $HOME . ""/.local.vim""
if filereadable($MYLOCALVIMRC)
    source $MYLOCALVIMRC
endif
</code></pre>

<p>Which allows me to add some configuration to <code>~/.local.vim</code> which isn't synched.</p>

<p>This works well but now I'd like to extend that to the plugins: I'd like to have some plugins only loaded on some machines.</p>

<p>I'm using <a href=""https://github.com/junegunn/vim-plug"" rel=""nofollow"">vim-plug</a> as my plugin manager and it is not possible to call <code>plug#begin('~/.vim/plugged')</code> and <code>plug#end()</code> several times. Even when changing the directory of <code>plug#begin()</code>.</p>

<p>The only solution I could imagine was to use a second plugin manager for the local vimrc but it is pretty ugly and I think that it might create some conflicts on the runtime path.</p>

<p><strong>TL;DR</strong> Is it possible, using a plugin manager, to load some plugins in a <code>.vimrc</code> file and some other plugins in a local configuration file sourced by the first <code>.vimrc</code>?</p>
","<p>(I <strong>haven't</strong> tested this)</p>

<p>You could use another local file, that contains exclusively <code>Plug ...</code> commands. The main <em>vimrc</em> would load this, <em>inside</em> the <code>plug#begin</code> - <code>plug#end</code> section. Something like:</p>

<pre><code>let $MYLOCALPLUGINS = $HOME . ""/.local.plugins.vim""

plug#begin('~/.vim/plugged')
Plug '...'

"" load local plugins
if filereadable($MYLOCALPLUGINS)
    source $MYLOCALPLUGINS
endif

Plug '...'
plug#end()

let $MYLOCALVIMRC = $HOME . ""/.local.vim""
if filereadable($MYLOCALVIMRC)
    source $MYLOCALVIMRC
endif
</code></pre>

<hr>

<p>Alternatively (and simpler), just move the <code>$MYLOCALVIMRC</code> creation above <code>plug#begin</code>, and load the extra (locally-used) plugins directly in the main vimrc, on condition that this local vimrc exists:</p>

<pre><code>let $MYLOCALVIMRC = $HOME . ""/.local.vim""

plug#begin('~/.vim/plugged')
Plug '...'

"" load local plugins HERE
if filereadable($MYLOCALVIMRC)
    Plug '...'
    Plug '...'
endif

Plug '...'
plug#end()

if filereadable($MYLOCALVIMRC)
    source $MYLOCALVIMRC
endif
</code></pre>
","4722"
"Includes in vimrc?","526","","<p>Is it possible to include external files to be sourced in the vimrc file?  </p>

<p>Is it as simple a matter as just adding <code>source somefile</code>?</p>
","<p>Unlike <code>:source</code>, <code>:runtime</code> doesn't need an absolute path to work. It is much better than <code>:source</code> for building portable setups.</p>

<p>See <code>:help :runtime</code>.</p>

<p>In the following example, we tell Vim to look for a <code>vimrc</code> file in the directories given by the <code>runtimepath</code> variable. Since <code>~/.vim/</code> is the first directory in the list, <code>runtime vimrc</code> works just like <code>:source ~/.vim/vimrc</code> without the need to provide a system-dependent path.</p>

<p>In <code>~/.vimrc</code>:</p>

<pre><code>runtime vimrc
</code></pre>
","9254"
"How to deactive colorcolumn quickly in different situation?","524","","<p>I have read the manual in vim with <code>:h cc</code> or <code>h: 'cc'</code>, but I found nothing about how to remove the red lines.</p>

<p><strong>First use case</strong></p>

<p>I create the red line with this command:</p>

<pre><code>:set cc=1,5,9,13,17,21
</code></pre>

<p>With the following command I can disable <code>cc</code> ,or to remove all the red lines created by the previous command:</p>

<pre><code>:set cc-=1,5,9,13,17,21  ""Use minus `-` to remove all the red lines here.
</code></pre>

<p>Is there a more quickly way to remove all the red lines?</p>

<p><strong>Use case 2</strong></p>

<p>I create the red line with this command:</p>

<pre><code>:exec ""set cc="".join(range(1,21,4),"","")
</code></pre>

<p>How to deactive cc command in this case?</p>

<p><a href=""https://i.stack.imgur.com/WatTh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WatTh.png"" alt=""enter image description here""></a></p>
","<p>You can clear all the lines by just setting <code>cc</code> to an empty value like so:</p>

<pre><code>:set cc=
</code></pre>

<p>You also can create a command or mapping to toggle between the two, <code>&amp;cc</code> refers to the <code>cc</code> setting, we need to use <code>let</code> since we want to use an expression:</p>

<pre><code>command! ToggleCC :let &amp;cc = &amp;cc == '' ? '1,4,21' : ''

nnoremap &lt;F2&gt; :let &amp;cc = &amp;cc == '' ? '1,4,21' : ''&lt;CR&gt;
</code></pre>

<p>If <code>&amp;cc</code> is empty, we set it to <code>1,4,21</code>, if it has a value, we set it to nothing.</p>

<p>This is really a shorter version of the longer:</p>

<pre><code>fun! ToggleCC()
  if &amp;cc == ''
    set cc=1,4,21
  else
    set cc=
  endif
endfun

nnoremap &lt;F2&gt; :call ToggleCC()&lt;CR&gt;
</code></pre>
","6989"
"How to use ""-c"" command line option?","524","","<p>Fully realizing the heritage of <code>vi</code>, I know that its predecessor (<code>ex</code>) could be, and was, used for command line processing of files (""sed-style"", if you like).</p>

<p>The manpage says:</p>

<blockquote>
  <p><code>-c</code> {command}</p>
  
  <p>{command} will be executed after the first file has been read.  {command} is interpreted as an Ex command.  If the {command} contains spaces it must be enclosed in double  quotes  (this depends on the shell that is used).</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p><code>-e</code></p>
  
  <p>Start Vim in Ex mode, just like the executable was called ""ex"".</p>
</blockquote>

<p>But I was unable to find ""real-life"" examples, or get something like a simple search-and-replace to work myself. I like examples...</p>

<p>So let's assume a <code>file.txt</code>...</p>

<pre><code>abcdef
</code></pre>

<p>...and I would like to open that file, remove all occurrences of <code>e</code> in it (<code>:%s/e//g</code> if I were in full <code>vim</code> mode), save, and close.</p>

<p>How would I go about it?</p>
","<p>An ""ex command"" means anything that you type in the commandline after the <code>:</code>, such as <code>:write</code>, it doesn't really have anything to do with ""ex mode"", as such. ex mode is a ""mode"" where you only have the commandline, and not the graphical editor (""vi"" stands for ""visual ex mode"").</p>

<p>So it's really as simple as:</p>

<pre><code>vim -c ':%s/e//g' -c ':wq' file.txt
</code></pre>

<p>There's no need to use ""ex mode"". You can if you want:</p>

<pre><code>vim -e -c ':%s/e//g' -c ':wq' file.txt
</code></pre>

<p>It has the advantage of not messing with your terminal so much, but other than that there's little difference.</p>
","5275"
"Is it possible to create mappings with parameters?","524","","<p>I have created a few mappings like so:</p>

<pre><code>:nnoremap &lt;buffer&gt; &lt;leader&gt;xyzABC   :call SomeFunc('ABC')&lt;CR&gt;
:nnoremap &lt;buffer&gt; &lt;leader&gt;xyzDE    :call SomeFunc('DE')&lt;CR&gt;
:nnoremap &lt;buffer&gt; &lt;leader&gt;xyzFoo18 :call SomeFunc('Foo18')&lt;CR&gt;
:nnoremap &lt;buffer&gt; &lt;leader&gt;xyzBar22 :call SomeFunc('Bar22')&lt;CR&gt;
</code></pre>

<p>which works as desired.</p>

<p>I am now looking for a possibility to create a map-template that would allow me to remove the obvious redundant parts of my mappings, something like</p>

<pre><code>:nnoremap &lt;buffer&gt; &lt;leader&gt; xyz? :call SomeFunc(?)&lt;CR&gt;
</code></pre>

<p>so that I could pass <em>any</em> value as parameter to <code>SomeFunc</code>.</p>

<p>Is there such a possibility?</p>
","<p>As @peter-rinckler said, it is probably easier to do it with a command:</p>

<pre><code>command! -nargs=* Xyz :call SomeFunc(&lt;q-args&gt;)
</code></pre>

<p>Makes it possible to do (in normal mode)</p>

<pre><code>:Xyz ABC
</code></pre>

<p>I don't really like the <code>input()</code> because you can't repeat those kinds of things easily.</p>
","4757"
"How can I move windows from a vertical split to a horizontal split?","523","","<p>I have three vertically split windows. I want the leftmost window to remain as it is, but move the two other windows from a vertical to a horizontal split. How can I achieve this?</p>

<p>I want to get from</p>

<pre><code>----------------
| b1 | b2 | b3 |
|    |    |    |
|    |    |    |
----------------
</code></pre>

<p>to</p>

<pre><code>----------------
| b1   | b3    |
|      |-------|
|      | b2    |
----------------
</code></pre>

<p>I can't figure out how to do this with the <kbd>CTRL-W</kbd> maps listed in <code>:h window-moving</code>. The only thing I could think of involves opening and closing windows, not moving them, and before I create a mapping or command for it I wanted to ask if there isn't a way to do it by window movement. Here's what I've got:</p>

<ol>
<li><kbd>:spl</kbd> - split middle window</li>
<li><kbd>:b 3</kbd> - open the buffer from the rightmost window in the new split</li>
<li><kbd>CTRL-W</kbd>+<kbd>l</kbd> - move cursor to rightmost window</li>
<li><kbd>CTRL-W</kbd>+<kbd>c</kbd> - close current (rightmost) window</li>
</ol>
","<p>I don't know if it is the best way to do what you want, but you can accomplish this only with window movements by doing (start from the rightmost window b3):</p>

<p>1 - <kbd>CTRL-W</kbd>+<kbd>K</kbd> - You'll have:</p>

<pre><code>----------------
| b3           |
|------|-------|
|b1    | b2    |
----------------
</code></pre>

<p>2 - Go to b1 with <kbd>CTRL-W</kbd>+<kbd>j</kbd></p>

<p>3 - <kbd>CTRL-W</kbd>+<kbd>H</kbd> to move b1 to the left.</p>

<p>You should have the layout you want now. The only downside I see with this method is that size and position of b1 are changed temporarily during the movement.</p>
","2957"
"Why is there a limit on the number of function arguments?","523","","<p>I am reading <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#:call""><code>:help :call</code></a>, which states the following:</p>

<blockquote>
  <p>Call a function. The name of the function and its arguments are as
  specified with <code>:function</code>. Up to 20 arguments can be used.</p>
</blockquote>

<p>This makes me wondering: why is there a seemingly artificial limit on the number of function arguments?</p>
","<p>Because this is the size of the data structures used to store function arguments. From <code>eval.c</code>:</p>

<pre><code>#define MAX_FUNC_ARGS   20      /* maximum number of function arguments */

/* structure to hold info for a function that is currently being executed. */
typedef struct funccall_S funccall_T;

struct funccall_S
{
[..]
    listitem_T  l_listitems[MAX_FUNC_ARGS];     /* listitems for a:000 */
[..]
};

[..]

/*
 * Allocate a variable for the result of a function.
 * Return OK or FAIL.
 */
    static int
get_func_tv(
)
{
    typval_T    argvars[MAX_FUNC_ARGS + 1];     /* vars for arguments */

[..]

    /*
     * Get the arguments.
     */
    argp = *arg;
    while (argcount &lt; MAX_FUNC_ARGS - (partial == NULL ? 0 : partial-&gt;pt_argc))
    {
[..]
    }
}
</code></pre>

<p>Well, and so forth.</p>

<p>Could this be made dynamic to allow an arbitrary amount of arguments? Sure. But why?</p>

<pre><code>fun! TooManyForSanity(one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twentyone)
    echo ""Well...""
endfun

call TooManyForSanity('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty', 'OH MY GOD IT NEVER ENDS')
</code></pre>

<p>This is the sort of code that makes programmers go mad and murder innocent bunnies in their sleep.</p>
","7069"
"Creating a Vim function mapping that takes a count","521","","<p>I'm trying to create a function mapping that takes a count, in this case the number of lines to yank to the system clipboard.   </p>

<pre><code>func! Clipboard()
  echo 'Clipboard function called'
  if v:count is 0
    normal ""+yy
  else
    exec 'normal ' . v:count . '""+yy'
  endif
endfunc
nmap YY :call Clipboard()&lt;CR&gt;
</code></pre>

<p>Problem is it's being called multiple times when a count is provided and even then the clipboard ends up with only one entry. Pretty bizarre.</p>

<p>e.g. with this text</p>

<pre><code>first line
second line
third line
fourth line
fifth line
sixth line
seventh line
eighth line
</code></pre>

<p>I place the cursor at 'first line' and hit '4YY' and the clipboard ends up with these lines:</p>

<pre><code>fourth line
fifth line
sixth line
seventh line
</code></pre>

<p>How's this happening?<br>
The messages printed are:</p>

<pre><code>4 lines yanked
4 lines yanked
4 lines yanked
4 lines yanked
</code></pre>

<p>If the function is really being called 4 times like the message says, why do I have only one entry in the clipboard?</p>
","<p><em>(just to move the relevant comments in an answer)</em></p>

<p>Use <code>range</code>, so that the function handles the range itself (<code>a:firstline</code>, <code>a:lastline</code>), so it's called only once. See <a href=""http://vimhelp.appspot.com/eval.txt.html#E124"" rel=""nofollow"">here</a> (<code>:h func-range</code>).</p>

<p>Another approach: use <code>:&lt;C-u&gt;call Clipboard()&lt;CR&gt;</code> in your map. You clear the range prior to calling your function, so it's called only once, but you still have access to <code>v:count</code> (also <code>v:count1</code>) - so it's probably easier to use in your case.</p>
","4380"
"Problem following links of vim's doc (:help) on the terminal","520","","<p>I'm having some trouble reading vim's documentation on the terminal because I can't follow the links that are given.</p>

<p>I quote:</p>

<blockquote>
  <p>Jump to a subject:  Position the cursor on a tag (e.g. |bars|) and
  hit CTRL-].</p>
</blockquote>

<p>The problem is that i'm using a spanish keyboard where the ""+"" and the ""]"" are on the same button so when I hit CTRL-], I make a zoom.</p>

<p>Can I map the CTRL-] to any other keys somehow or is there any other option? </p>
","<p>One option (if you don't mind a bit of typing) is to type <code>:tag tagname</code> and press enter.  This is exactly equivalent to Ctrl-] according to <code>:help CTRL-]</code>.</p>

<p>If you use this, please note that you can use tab completion just as when typing <code>:help topic</code> commands, and you can use Ctrl-D to list the possible autocompletions of what you've typed so far.</p>

<p>I admit this isn't much of an alternative, but it's worth knowing.</p>
","5306"
"Set an option dependent on the filetype","519","","<p>How to configure on the <code>.vimrc</code> file to use a particular set options for a particular filetype, but others for a different filetype?</p>

<p>For example, I want to enable expand tab (set tabs to be spaces) for Python files, but disable it for C++ files.</p>
","<p>I put this sort of thing in <code>$HOME/.vim/ftdetect/{FILETYPE}.vim</code>.  To accomplish what you want I would have the following files.</p>

<p>For python...</p>

<pre><code>""$HOME/.vim/ftdetect/python.vim
autocmd BufRead,BufNewFile *.py set noexpandtab
</code></pre>

<p>And for C++...</p>

<pre><code>""$HOME/.vim/ftdetect/cpp.vim
autocmd BufRead,BufNewFile *.cpp set expandtab
</code></pre>

<p>What these commands do is set the <code>expandtab</code> or <code>noexpandtab</code> options for a specific buffer which gets created for, or reads in, a file that matches one of the patterns <code>*.py</code> or <code>*.cpp</code>.</p>
","654"
"How to disable '-- INSERT --' text beneath statusline?","518","","<p>I have powerline statusline plugin and <code>set laststatus=2</code> in <code>.vimrc</code>, so I have two places it tells me my mode in. What is the bottom one called and can I disable it?</p>

<p><img src=""https://i.stack.imgur.com/FOaWO.png"" alt=""enter image description here""></p>
","<p>From the <a href=""https://github.com/vim-airline/vim-airline/wiki/FAQ"">airline-FAQ</a>:</p>

<blockquote>
  <p>How do i get rid of the default mode indicator?</p>
  
  <p>Add <code>set noshowmode</code> to your vimrc.</p>
</blockquote>
","6357"
"Why does this <Esc> normal mode mapping affect startup?","518","","<p>I'm experiencing a weird problem with a normal mode mapping of <kbd>Esc</kbd>.</p>

<p>If you create the file <code>escmapvimrc</code> with the contents:</p>

<pre><code>set nocompatible
set showcmd "" Doesn't affect the problem: just makes it easier to see
nnoremap &lt;Esc&gt; :noh&lt;CR&gt;&lt;esc&gt;
</code></pre>

<p>And then start vim using this vimrc:</p>

<pre><code>vim --noplugin -u escmapvimrc
</code></pre>

<p>Then vim will start in operator-pending mode with a <code>c</code> command waiting for further input, displaying an empty file, and with the command-line displaying <code>:noh</code>.</p>

<p>If you remove the <code>nnoremap</code> line, then the problem goes away.</p>

<p>If you debug and step through everything you get the following output:</p>

<pre><code>Entering Debug mode.  Type ""cont"" to continue.
/[...]/escmapvimrc
line 1: set nocompatible
&gt;s
/[...]/escmapvimrc
line 2: set showcmd "" Doesn't affect the problem: just makes it easier to see
&gt;s
/[...]/escmapvimrc
line 3: nnoremap &lt;Esc&gt; :noh&lt;CR&gt;&lt;esc&gt;
&gt;s
/[...]/escmapvimrc
line 4: End of sourced file
&gt;s
Press ENTER or type command to continue
</code></pre>

<p>After you press enter, the Vim startup screen is displayed, and underneath:</p>

<pre><code>Entering Debug mode.  Type ""cont"" to continue.
cmd: noh
&gt;s
</code></pre>

<p>The Vim startup screen then disappears, and you're in operator-pending mode, as described above.</p>

<p>What's going on?</p>

<p><strong>EDIT:</strong> Behaviour is as described in Vim 7.3. In Vim 7.4.52, the <code>nmap</code> causes Vim to start up in Replace mode when starting Vim without a file. (If Vim 7.4.52 is started <em>with</em> a file, however, it also starts up with a c-command underway.) Either way, the problem goes away when the nmap is removed.</p>
","<p>Vim sends during startup some special terminal codes (that usually contain the <code>&lt;esc&gt;</code> key) to determine several things (colors, bs,...) If you mapped <code>&lt;esc&gt;</code> this will most likely confuse the parser of the return codes and weird things can happen.</p>

<p>Therefore, use your above map only after everything has been setup correctly (e.g. via a VimEnter autocommand).</p>
","2620"
"Why doesn't Vim recognize HTML inside PHP?","517","","<p>The HTML that's being returned by this PHP function doesn't have any syntax highlighting.</p>

<p>If I delete the <code>'</code> on line 13 the HTML highlighting works (but the PHP function breaks), with it the HTML highlighting does not work.</p>

<p>How do I get the HTML to have its proper syntax highlighting inside of this function?</p>

<p><a href=""https://i.stack.imgur.com/79vQL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/79vQL.png"" alt=""html loses syntax highlighting inside php return function""></a></p>

<p>Do I want to be doing <a href=""http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file"" rel=""nofollow noreferrer"">something like this</a>?  I'm having a hard time figuring out what to make of that and how I would adapt it for my situation, let alone whether or not that's the right approach.</p>

<p>It would be great if Vim could automatically recognize HTML inside a PHP file without having to type any hard-to-remember commands.</p>
","<p>From <a href=""http://vimhelp.appspot.com/syntax.txt.html#ft%2dphp%2dsyntax"" rel=""nofollow""><code>:help ft-php-syntax</code></a>:</p>

<pre><code>There are the following options for the php syntax highlighting.

[..]

Enable HTML syntax highlighting inside strings:

  let php_htmlInStrings = 1
</code></pre>

<p>You can add that your vimrc.</p>
","6284"
"Escape quotes within quotes in command","515","","<p>I'm trying to run a command (from within a function) that goes somewhat like this:</p>

<pre><code>execute a:firstline . ',' . a:last line . 'g/\(\.\|!\|?\)\()\|]\|""\|'\)*\($\|\s\)/execute ""normal! v(:call MyFunction()\&lt;cr&gt;""'
</code></pre>

<p>But it doesn't work and I think it's because of all the quotes. I tried escaping them with backslashes, but that doesn't work either.</p>

<p>Any ideas?</p>
","<p>Either put the quotes into an extra variable and use that, which saves you from the effort to escape them, or double the single quotes. 
But notes, this makes it really hard to read (and understand) later your regex.</p>

<p>Quote from the help (<code>:h literal-string</code>)</p>

<blockquote>
  <p>This string is taken as it is.    No backslashes are removed or have a
  special meaning.  The only exception is that two quotes stand for one
  quote.</p>
</blockquote>
","9046"
"How does vimscript know which buffer these buffer-local variables use?","515","","<p>Consider the following vimscript:</p>

<pre><code>function! DecideWhetherToStrip()
    let l:search = @/
    "" Check if a file being opened has trailing spaces in the first place.
    let b:dostrip = !search('\s\+$', 'npw')
    let @/ = l:search
endfunction

function! StripTrailingWhitespace()
    if b:dostrip
        let l:search = @/
        let l:winview = winsaveview()
        %s/\s\+$//e            "" Kill spaces at EOL
        %s/\($\n\s*\)\+\%$//e  "" Kill lines at EOF
        let @/ = l:search
        call winrestview(l:winview)
    endif
endfunction

augroup whitespace
    autocmd!
    autocmd BufReadPost * call DecideWhetherToStrip()
    autocmd BufWritePre * call StripTrailingWhitespace()
augroup END
</code></pre>

<p>The <code>StripTrailingWhitespace</code> function is probably familiar to many people as I've mostly stolen it from the internet, but the <code>DecideWhetherToStrip</code> and the <code>b:dostrip</code> variable were put together by me, just now.</p>

<p>The intention of this code is that I want to detect whether a newly opened file contains trailing whitespace, and then only strip trailing whitespace if the file didn't have any to begin with. This is because I need to edit certain files that actually require trailing whitespace, but for the most part I want files to start clean and stay clean. </p>

<p>My question is: does this code work the way I think it does? </p>

<p>It seems to work in my preliminary testing but I'm worried that there will be unexpected surprises down the line, in certain corner cases. Like what if I have two files open, one with <code>b:dostrip</code> set to <code>1</code>, and one <code>0</code>. How does <code>StripTrailingWhitespace</code> know which buffer it's operating on? What if two files are modified and I call <code>:wall!</code>, is <code>autocmd</code> smart enough to call <code>StripTrailingWhitespace</code> once each with each buffer active? Or will I run into issues where <code>StripTrailingWhitespace</code> will only be called once with the setting from one buffer but will actually modify both buffers?</p>

<p>Are there any other failure modes to this code I should be wary of?</p>

<p>Thanks.</p>
","<blockquote>
  <p>if I have two files open, one with b:dostrip set to 1, and one 0. How does StripTrailingWhitespace know which buffer it's operating on?</p>
</blockquote>

<p><code>b:</code> always relates to the currently active buffer. It's exactly the same as function-local (<code>foo</code>) or class-local (<code>self.foo</code>) variables that exist is most programming languages: it's <em>always</em> local to the current function, never local to another function (you <em>can</em> still access buffer-local variables from other buffers by the way, but not with the <code>b:</code> syntax; you need the <a href=""http://vimhelp.appspot.com/eval.txt.html#getbufvar%28%29"" rel=""nofollow""><code>getbufvar()</code></a> function for that).</p>

<p>See <a href=""http://vimhelp.appspot.com/eval.txt.html#b%3a"" rel=""nofollow""><code>:help b:</code></a> for the documentation by the way.</p>

<blockquote>
  <p>What if two files are modified and I call :wall!, is autocmd smart enough to call StripTrailingWhitespace once each with each buffer active?</p>
</blockquote>

<p>Yes. The <code>Buf*</code> events are run for every bufffer.</p>

<blockquote>
  <p>will I run into issues where StripTrailingWhitespace will only be called once with the setting from one buffer but will actually modify both buffers?</p>
</blockquote>

<p>No. Vim commands always operate on the current buffer except for a few commands that work on multiple buffers (like <code>:bufdo</code>).
Remember that Vim commands are <em>exactly</em> the same as what you're doing in Vim whenever you're editing some file. There's little ""magic"" here.</p>
","4692"
"How to show non-printable characters for all buffers, windows & tabs","515","","<p>Is there any way to show non-printable characters by default, for all windows, buffers, tabs, opened inside Vim (including man pages, <code>netrw</code> buffers, etc.)?</p>

<p>Additionally I also like to see the non-printable characters for all the buffers. And here goes my <code>_vimrc</code> lines for that:</p>

<pre><code>    scriptencoding utf-8
    set listchars+=space:·
    set listchars=eol:¶,tab:» ,trail:~,extends:&gt;,precedes:&lt;,space:·
    set list 
</code></pre>

<p>And again, this is working for all the file buffers. As soon as I open up a manual page or <code>netrw</code> directory listing or <code>NERDTree</code> buffer, I have to run <code>:se list</code> for each buffer.</p>

<p>Can anybody help me or at least give me some hint to get this setting done? </p>
","<p>You can get <code>'list'</code> on all the windows by using the following:</p>

<pre><code>augroup setList
   au!
   au BufWinEnter *  set list
augroup END
</code></pre>

<p>The (long) explanation of why it doesn't work only by setting it on the vimrc can be found at <code>:help local-options</code>.</p>
","6440"
"Use single ftplugin for more than one filetype","515","","<p>I have an ftplugin under <code>&amp;runtimepath/ftplugin/c.vim</code> which sets all my preferred options for c files.  However, I would also like to use the same settings for <code>cpp</code> files.  I could just copy the settings over, but that seems redundant.  Is there a way of loading an ftplugin for more than one filetype?</p>
","<p>The default ftplugin (<code>/usr/share/vim/vim74/ftplugin/cpp.vim</code> on my system) should already do this:</p>

<pre><code>"" Only do this when not done yet for this buffer
if exists(""b:did_ftplugin"")
  finish
endif

"" Behaves just like C
runtime! ftplugin/c.vim ftplugin/c_*.vim ftplugin/c/*.vim
</code></pre>

<p><code>runtime</code> should be relative to the <code>runtimepath</code>:</p>

<blockquote>
  <p>There can be multiple <code>{file}</code> arguments, separated by spaces.  Each <code>{file}</code> is
  searched for in the first directory from <code>'runtimepath'</code>, then in the second
  directory, etc.</p>
</blockquote>

<p>If I create a <code>~/.vim/ftplugin/c.vim</code>, this also gets executed for C++ files without doing anything!</p>

<p>If you don't have this file in your Vim version,, you can create a new <code>~/.vim/ftplugin/cpp.vim</code> file with the <code>runtime!</code> statement.</p>

<hr>

<p>Or, if you're on a UNIX-y system you can use a symlink:</p>

<pre><code>$ ln -s ~/.vim/ftplugin/c.vim ~/.vim/ftplugin/cpp.vim
</code></pre>
","3178"
"How can I use a line number to copy a line to where my cursor is?","514","","<p>A lot of times I'm in a situation similar to this:</p>

<pre><code>1. &lt;Line 1&gt;
2. &lt;Line 2&gt;
3. &lt;Line 3&gt;
4. &lt;Cursor is here&gt;
5. &lt;I want to copy line 1 here&gt;
</code></pre>

<p>An easy solution is <code>mm:1&lt;CR&gt;yy`mp</code> - that is, make a mark at line 4, go to line 1, copy it, go back to the mark, and paste. </p>

<p>Is there a shorter/more fluid solution to this? I do this often enough that I'm happy to make a mapping for it. </p>
","<p>Looks like a case for ex copy (<code>:help :co</code> or <code>:help :t</code>):</p>

<pre><code>:1t4
</code></pre>

<p>or, using your cursor's position:</p>

<pre><code>:1t.
</code></pre>

<p>This does not copy the line to the yank register, which might or might not be what you want.</p>
","3057"
"Creating a regex to match html attributes","513","","<p>I know that there are a lot of answers to vim/regex, but I can't seem to find one that fits the bill for me. So, I'm trying to remove some attributes from HTML using the following:</p>

<pre><code>%s/( id=""\| onfocus=""\| onBlur=""\| style=""\| title="") [a-zA-Z0-9:;&amp;$_\.\s\(\)\-\,]*""//gc
</code></pre>

<p>I'd like to be able to replace any of the specified attributes and everything up to and included the second <code>=</code>.</p>

<p>When I run this, I get <code>pattern not found</code>. However, if I take the parens off of <code>id=""\| onfocus=""\| onBlur=""\| style=""\| title=""</code> I get a match for <code>id=</code> and I get a match for everything on <code>title=""hi""</code> How can I include all of the attributes in one regex?</p>

<p><strong>Edit:</strong> A result of running</p>

<pre><code>%s/ id=""\| onfocus=""\| onBlur=""\| style=""\| title="" [a-zA-Z0-9:;&amp;$_\.\s\(\)\-\,]*""//gc
</code></pre>

<p>will change</p>

<pre><code>&lt;input type=""submit"" id=""submit"" title=""submit"" value=""submit"" /&gt;
</code></pre>

<p>To</p>

<pre><code>&lt;input type=""submit"" submit"" value=""submit"" /&gt;
</code></pre>

<p>You can see it picks up the <code>id=</code> but not the text and double quote after the attribute up to the next space. However, it is pattern matching the correct thing for the <code>title</code> attribute. In this example <code>title=""submit""</code> has been fully removed.</p>
","<p>I found a way to do it:</p>

<pre><code> %s/\(id\|class\)=""\([^""]*\)""/\2/gc
</code></pre>

<ol>
<li><p>You catch <code>id</code> and <code>class</code> in the first group to add the <strong>big fat or</strong> <code>\|</code> operator.</p></li>
<li><p>You match <code>=""</code></p></li>
<li><p>You catch the text you want to keep in the second capture group <code>\([^""]*\)</code> (assuming here you want anything up to a <code>""</code>).</p></li>
<li><p>You match the closing <code>""</code></p></li>
<li><p>And you leave only the second group.</p></li>
</ol>

<p>You can then use <code>\2</code> as you want.</p>
","7312"
"How do I make dictionary completion look in a different file if triggered after the @ sign?","513","","<p>I have been using Vim as a research database, and I use tags in the form of <code>@tag</code> for each note, written in the second line after the title. I might have more than one tag.</p>

<p>How can I make dictionary completion (C-x C-k in insert mode) look in a <code>'tags'</code> when triggered after an <code>@</code> sign in insert mode?</p>
","<p>Does it have to be dictionary completion, triggered via <code>i_CTRL-X_CTRL-K</code>? If another trigger key is fine (e.g. <code>i_CTRL-X_CTRL-@</code>), you can do this:</p>

<ol>
<li>Save the <code>'dictionary'</code> option value</li>
<li>Change it to point to your tags file</li>
<li>Install an <code>:autocmd CompleteDone</code> handler that resets the option value</li>
<li>Trigger dictionary completion</li>
</ol>

<h3>Alternative</h3>

<p>If you don't actually need dictionary completion, just some values from a particular file, you can alternatively look at my <a href=""http://www.vim.org/scripts/script.php?script_id=5073"" rel=""nofollow"">EntryComplete plugin</a>; it provides configuable sources.</p>
","2272"
"How can I make vim's flowing aware of email replies?","511","","<h1>Problem summary</h1>

<p>I use <code>vim</code> to edit emails that I send with <code>mutt</code>. I also use <code>format=flowed</code>, which ""reflows"" text. That is, lines are limited to a fixed number of characters, and a ""soft wrap"" is applied, as indicated by the presence of a trailing space.</p>

<p>In <code>vim</code>, I have the following set:</p>

<pre><code>setl tw=72
setl fo=aw
</code></pre>

<p>This sets the line length to 72 charaters, and sets up autoformatting with the trailing space. This works well in general. However, if I attempt to quote something with <code>&gt;</code>, this character is not treated as a special character, and will be considered ""inline"" to the text.</p>

<h1>Example</h1>

<p>Copy the following text and paste it into <code>vim</code>.</p>

<pre><code>Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing nullam nec gravida non, at posuere enim, consectetuer ve. [1]
</code></pre>

<p><code>vim</code> correctly breaks it into two lines, the first with a trailing space.</p>

<pre><code>Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing nullam 
nec gravida non, at posuere enim, consectetuer ve. [1]
</code></pre>

<p>I add <code>&gt;</code> by selecting the lines and using <code>:'&lt;,'&gt;s/^/&gt; /</code>, which results in the following.</p>

<pre><code>&gt; Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing nullam 
&gt; nec gravida non, at posuere enim, consectetuer ve. [1]
</code></pre>

<p>However, I now want to remove the <code>[1]</code> from the end, so I navigate to the end and delete. <code>vim</code> now reflows to the following, with the <code>&gt;</code> ""inline"".</p>

<pre><code>&gt; Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing 
nullam &gt; nec gravida non, at posuere enim, consectetuer ve.
</code></pre>

<p>What's even worse is that I can delete the <code>&gt;</code> manually and insert a new <code>&gt;</code> before <code>nullam</code>, but this will immediately be reflowed to the previous line as follows.</p>

<pre><code>&gt; Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing &gt; 
nullam nec gravida non, at posuere enim, consectetuer ve.
</code></pre>

<h1>Question</h1>

<p>Is there a way to make <code>vim</code>'s flowing aware of <code>&gt;</code>? FWIW I've also tried <a href=""https://gist.github.com/wcaleb/633a63e9c29887493d3f"" rel=""noreferrer"">this</a> <code>mail.vim</code> customised for format=flowed, but it suffers from the same problems.</p>
","<p>From <a href=""https://vi.stackexchange.com/a/6034/205"">one of my previous answers</a>, you can get this to work if:</p>

<ol>
<li>You have <code>nb:&gt;</code> in your <code>comments</code> setting.</li>
<li>And you have <code>q</code> in your <code>formatoptions</code> setting.</li>
</ol>

<p>So:</p>

<pre><code>setlocal comments+=nb:&gt;
setlocal fo+=q
</code></pre>

<p>After doing these, I get the expected wrapping:</p>

<pre><code>&gt; Tempus. Vivamus. Dis natoque vitae erat. Consectetuer adipiscing 
&gt; nullam nec gravida non, at posuere enim, consectetuer ve.
</code></pre>
","6775"
"How to Contribute to Vim?","510","","<p>I have been using Vim since 4 years. I am looking forward to contribute to the open source project vim. I would like a few tips on where to start and whom to contact to contribute to Vim. Help from people who have already contributed to Vim would help a lot :). Thanks in advance. </p>

<p>PS - I am not even sure whether i can post this here but finally decided to post it here as this would be the place with the most Vim enthusiasts to talk with.</p>
","<h2>It's a bit old school</h2>

<p>As <a href=""https://vi.stackexchange.com/users/1577/lcd047"">lcd047</a> pointed out, there is the <a href=""https://groups.google.com/forum/#!forum/vim_dev"" rel=""nofollow noreferrer"">vim_dev Google Group</a> where you can submit patches. At present, Vim is under version control in a Mercurial repository. You can submit patches by opening a new topic in that group and attaching your patch file (a text file with the diff output). The Vim source is in the process of moving to GitHub, but I don't think it's quite there yet.</p>

<h2>The nature of contributing</h2>

<p>While many open-source projects, including Vim, have a to-do list, it's not likely that you will be assigned anything just by volunteering your services. Most open-source contributions are impromptu: you identify a bug fix or improvement, implement it, and submit it for review, then the maintainer can choose to merge it in.</p>

<p>I have a very simple contribution in the Vim source. I noticed that the <code>i(</code> text object didn't behave nicely when the contents of the parentheses were on their own lines. In contrast, the analogous <code>i{</code> text object behaved appropriately in similar situations. I submitted <a href=""https://groups.google.com/forum/#!searchin/vim_dev/patch$207.4.328/vim_dev/fAPwP1bGjsY/4DFgsaR96y0J"" rel=""nofollow noreferrer"">my patch</a> and it was actually merged in swiftly. Of course, this was a <em>very small</em> change; more significant patches tend to be subject to longer review.</p>

<h2>My advice</h2>

<p>Don't enter into the game with the plan to contribute to Vim. Good ideas don't normally come from trying to think of good ideas. They come when you're trying to do something else. Keep using Vim and an idea may present itself. Then put in the effort to implement it and submit a patch.</p>
","3938"
"How to initialize variables in while loops","509","","<p>In <code>C</code> you can do something like this:</p>

<pre><code>int foo(int a) { return a + 1; }
int main(void) {
    int a = 0;
    while ((a = foo(a)) &lt; 10) {
        /* */
    }
}
</code></pre>

<p>How can I do the same thing in vimscript, i.e. something like this:</p>

<pre><code>function! s:foo()
    let l:foo = 0
    while (let l:foo = l:foo + 1) &lt; 10)
        echo 'hi'
    endwhile
endfunction
</code></pre>

<p>i.e. I want to make the while loop dependent on a value that is assigned anew with every loop. You could do this with traditional for or do-while loops, but sadly Vimscript doesn't have these. One way I see how you can do this is, is like this:</p>

<pre><code>function! s:foo()
    let l:foo = 0

    while l:foo + 1 &lt; 10
        let l:foo = l:foo + 1
        echo 'hi'
    endwhile
endfunction
</code></pre>

<p>But if the operation is expensive and you need to make more than one comparison (<em>is it equal to 5, 7, or 12</em>, <em>etc</em>), this gets ridiculous pretty quickly.</p>

<p>There must be a better way to do this...</p>
","<p>You can't.  Every line in the script is the same as running it in the command window (e.g. <code>:while 1 | echo 'hi' | endwhile</code>).  The <code>:while</code> command evaluates a boolean/numeric expression to the right of it, and <code>:let</code> is a command that defines a variable.  Commands don't return a value.</p>

<p>The <code>for...endfor</code> loop is the only loop that I know of that will create variables if you're iterating over a sequence, like <code>for i in range(10)</code>.</p>

<p>If your loop condition is really going to be complicated you could use an indefinite loop and break when your condition is met:</p>

<pre><code>let foo = 0

while 1
  if foo + 1 &gt;= 10 || s:other_condition()
    break
  endif
  let foo += 1
  echo 'hi'
endwhile
</code></pre>

<p>Or</p>

<pre><code>let done = 0
let foo = 1

while !done
  let foo += 1
  echo 'hi'
  let done = foo + 1 &gt; 10 || s:other_condition()
endwhile
</code></pre>

<p>IMO, both are the equivalent of what you're wanting to accomplish.  Except that in the second one, you can't thoughtlessly <code>continue</code> from anywhere in the body.</p>
","8326"
"Is it possible to change the message display location?","509","","<p>If editing a buffer in the right side window when using two vertical split windows in a big display screen, we have to move our eyes all across the screen to the bottom left corner to see any messages Vim is displaying.</p>

<p>This is specially important because many times I need to re-indent the code I've just pasted, so I look at the ""X more lines"" message to understand how many lines I need to indent.</p>

<p>Is it possible to modify the location of these messages depending in which window the cursor is located?</p>
","<p>Messages are displayed in the commandline, and there is no way to change the position of the commandline, except for changing the height.</p>

<p>The only workaround I can think of is using the message history (<code>:messages</code>), and putting that in the statusline.</p>

<p>Note that <code>:echo</code> will <em>not</em> put the message in the message history, only <code>:echomsg</code> and <code>:echoerr</code> do, so it won't replicate what you see in the commandline completely.</p>

<p>First, we make a function to get the last message:</p>

<pre><code>fun! LastMessage()
    redir =&gt; l:test
        silent messages
    redir end
    return split(l:test, '\n')[-1]
endfun
</code></pre>

<p>Then, we put that in the statusline with <code>%{</code>, which will eval any expression. Note that the <code>statusline</code> is empty by default, and created internally, so we'll have to ""re-create"" the default statusline.</p>

<p>For bonus points, I'm also using <code>%1*</code> to make it a different colour (the <code>User1</code> highlight group) so it stands out a bit more.</p>

<pre><code>set statusline=
let &amp;stl .= '%&lt;%f'                      "" Filename, truncate right
let &amp;stl .= ' %h%m%r'                   "" [Help] [modified] [read-only]
let &amp;stl .= ' %1*[%{LastMessage()}]%0*' "" Show last message from history
highlight User1 ctermbg=0 ctermfg=150 cterm=bold
</code></pre>

<p>Here's what it looks like:</p>

<p><img src=""https://i.stack.imgur.com/OKIOb.png"" alt=""enter image description here""></p>

<p>Note that the bottom statusline isn't updated. This will be updated once you switch to that window.</p>

<p>My original idea was to put 2 lines in the statusline (and putting the message above or below the default statusline), but as far as I can find out this is also not possible.</p>
","3354"
"How can I repeat last Ex-mode command in normal mode?","508","","<p>I'm looking for something like <code>.</code> or <code>@@</code> that will work in normal mode for repeating the last Ex-mode command.</p>

<p>As per the rule of the XY problem, I'll also state the broader goal:</p>

<p>I have a fancy regex search and replace command in Ex-mode that I want to apply to <em>almost</em> all matches in the file.  But I need to review each one before I change it.  If I could use <code>.</code> to repeat an Ex-mode command, I could just use <code>n</code> and <code>.</code> to do what I need.</p>

<p>So any way to apply my search and replace to all lines <strong>interactively</strong> would help me—but I'd still be interested in an answer to the title question.</p>
","<p>Use the <code>/c</code> flag at the end of your substitution in order to confirm each substitution:</p>

<pre><code>:%s/foo/bar/gc
</code></pre>

<p>See <code>:help s_flags</code>.</p>

<p>Use <code>&amp;</code> to repeat the last substitution <em>without the flags</em>. See <code>:help &amp;</code>.</p>

<p>Use <code>@:</code> to repeat the last ex command.</p>
","5167"
"Why does gvim read /usr/share/vim/vimrc instead of ~/.vim/vimrc","507","","<p><code>:help startup</code> states, under <code>3. Execute Ex commands, from environment variables and/or files</code> that (for Unix systems) <code>$HOME/.vimrc or $HOME/.vim/vimrc</code> is read and that <code>The files are searched in the order specified above and only the first one that is found is read.</code></p>

<p>I <em>do</em> have a (read/writeable) ~/.vim/vimrc file, so I have expected this file to be read first.</p>

<p>However, when I start <code>gvim</code> (debugged with the <code>-V20</code> flag) I see that gvim first reads <code>/usr/share/vim/vimrc</code>. When it is finished reading this file, it <em>then</em> reads my <code>~/.vim/vimrc</code> file. I don't want the <code>/usr/share/vim/vimrc</code> file to be read at all.</p>

<p>The environment variable <code>$VIM</code> is not set.</p>

<p>Interestingly (and somewhat surprisingly for me): after gvim is started up fully, <code>:echo $MYVIMRC</code> prints <code>/home/rene/.vim/vimrc</code>.</p>

<p>So, my questions are: why does it behave differently from what is stated in the help file and how do I make sure that only <code>~/.vim/vimrc</code> is read.</p>
","<p>Reading system-level configuration before user-level configuration is totally normal and expected in UNIX land.</p>

<p>Anyway, this sentence:</p>

<pre><code>The files are searched in the order specified above and only the first one
that is found is read.
</code></pre>

<p>only applies to ""personal initializations"".</p>

<p>As explained a few paragraphs below, the system <code>vimrc</code> is read no matter what: </p>

<pre><code>b. For Unix, MS-DOS, MS-Windows, OS/2, VMS, Macintosh, RISC-OS and Amiga
   the system vimrc file is read for initializations.  The path of this
   file is shown with the "":version"" command.  Mostly it's ""$VIM/vimrc"".
   Note that this file is ALWAYS read in 'compatible' mode, since the
   automatic resetting of 'compatible' is only done later.  Add a "":set
   nocp"" command if you like.
</code></pre>
","6883"
"Get 2 lines yanked or 1 line yanked confirmation","503","","<p>This is a small thing, but it still annoys me. When I select at least 3 lines with <code>V</code>isual line mode, and then <code>y</code>ank them, I get a confirmation: n lines yanked appears at the bottom of my screen. However, if I yank just 1 or 2 lines, no such thing happens.</p>

<p>The same thing happens with <code>v</code> and <code>Ctrl-v</code>, or something lie <code>y}</code> where these confirmations only appear if the selection is spread over at least 3 lines.</p>

<p>Is there a way to turn on these confirmations, now matter how much I yank?</p>
","<p>You are looking for the <a href=""http://vimhelp.appspot.com/options.txt.html#%27report%27"" rel=""nofollow""><code>'report'</code></a> option:</p>

<pre><code>'report'        number  (default 2)
            global
    Threshold for reporting number of lines changed.  When the number of
    changed lines is more than 'report' a message will be given for most
    "":"" commands.  If you want it always, set 'report' to 0.
    For the "":substitute"" command the number of substitutions is used
    instead of the number of lines.
</code></pre>

<p>This should solve your issue: </p>

<pre><code>:set report=0
</code></pre>

<hr>

<p><strong>Edit</strong></p>

<p>I believe there is no built-in option to issue messages for changes smaller than a line -- you could check the documentation or use the <a href=""http://vimhelp.appspot.com/options.txt.html#:options"" rel=""nofollow""><code>:options</code> command</a> (specially the ""messages and info"" section). Maybe issuing a message for every change would be distracting for most people.</p>

<p>You will probably need to overwrite the <code>y</code> operator to include your custom messages, similar <a href=""http://vimhelp.appspot.com/map.txt.html#:map-operator"" rel=""nofollow"">to the example at <code>:help :map-operator</code></a>.</p>
","10038"
"vim under tmux looses color scheme in iterm2","503","","<pre><code>OSX - sierra
iterm2 3.0.13
tmux 2.3
vim 8.0.176
</code></pre>

<p>colors work fine in bare iterm2:</p>

<p><a href=""https://i.stack.imgur.com/O586h.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/O586h.png"" alt=""enter image description here""></a></p>

<p>but under tmux:</p>

<p><a href=""https://i.stack.imgur.com/076xs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/076xs.png"" alt=""enter image description here""></a></p>

<p>iterm2:</p>

<pre><code>echo $TERM
xterm-256color
</code></pre>

<p>tmux:</p>

<pre><code>echo $TERM
screen-256color
</code></pre>

<p>tmux config</p>

<p><a href=""https://i.stack.imgur.com/TWwDq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TWwDq.png"" alt=""enter image description here""></a></p>

<p>vimrc</p>

<p><a href=""https://i.stack.imgur.com/07vKD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/07vKD.png"" alt=""enter image description here""></a></p>

<p>I'm running out of ideas. and google foo is not helping.</p>
","<p><code>t_*</code> is needed because these are not set automatically by vim for anything but <code>xterm</code>. But tmux only supports <code>screen-256</code></p>

<pre><code>:h xterm-true-color
</code></pre>

<p>Moving <code>t_8f</code> and <code>t_8b</code> below <code>set termguicolors</code> fixed my problem.</p>

<p>long version: <a href=""https://github.com/vim/vim/issues/993"" rel=""nofollow noreferrer"">https://github.com/vim/vim/issues/993</a></p>
","10990"
"Why `NERDTree` doesn't trigger the autocommand `BufEnter`?","503","","<p>I am writing a vimscript function which should keep in a consistent state a ""home made buffer manager"". The idea is that I want to keep a trace of my buffers in the tabs they were open in.</p>

<p>This ""buffer manager"" simply is a dictionary which has the numbers of the tabs as keys and lists of buffers numbers as values.</p>

<p>To add the different buffers to this dictionary I created the following autocommand:</p>

<pre><code>autocmd! BufEnter * call AddBufferToTab()
</code></pre>

<p>And then I have my function:</p>

<pre><code>function! AddBufferToTab()
    let newBufNr = bufnr(""%"") 

    "" create an entry for the current tab if necessary
    if !has_key(g:BuffersManager, tabpagenr())
        let  g:BuffersManager[tabpagenr()] = []
    endif

    "" Add the buffer to the tab
    if buflisted(newBufNr) &amp;&amp; index(g:BuffersManager[tabpagenr()], newBufNr) == -1
        call add (g:BuffersManager[tabpagenr()],newBufNr)
    endif
endfunction
</code></pre>

<p>When vim enters a buffer the function is called, an empty list is created if the tab wasn't already managed.</p>

<p>Then I test if the buffer is listed by <code>:ls</code> with <code>buflisted(newBufNr)</code> and if the buffer is already in the list of the tab.</p>

<p>It is important to note that the first test seems to work: I don't want to add buffers which are not listed by <code>:ls</code> and when I open an help buffer for example, the buffer is not added</p>

<p>The function seems to work properly excepted for one use case:</p>

<p>When I open NERDTree with <code>:NERDTree</code> or <code>:NERDTreeToggle</code> the function doesn't seems to be executed <em>(at least the debug <code>echom</code> that I used never appeared)</em> and the buffer still end added to the manager.</p>

<p>Note that when I add</p>

<pre><code>echom ""ADD "" . bufnr(""%"") . ""  "" . bufname(""%"") . ""  "" . buflisted(bufnr(""%""))
</code></pre>

<p>To the function the informations seems to be the good ones (the ones of the currently entered buffer).</p>

<p>I also checked that NERDTree buffer have their property <code>buflisted</code> to 0.</p>

<p>I have been working on this problem for several days now and I really can't figure out what's happening. </p>

<p><strong>TL;DR</strong> Why NERDTree buffers are added to the dictionary when the function is meant to ignore <code>nobuflisted</code> buffers?</p>

<p><strong>NOTE</strong> If ones wants a big picture of the problem the function is a part of a plug-in I'm developing and which is available on <a href=""https://github.com/statox/bettertabs.vim"" rel=""nofollow noreferrer"">github</a> </p>

<p><strong>NOTE 2</strong> Of course if someone needs any additional information I'll gladly add them to this question, ask in the comments.</p>

<hr>

<p><strong>Additional information</strong></p>

<p>I followed the comment of @VanLaser and splitted the <code>if</code> condition and based my test also on the name of the buffer. I also added some debugging message, here is the function in ""debugging state"":</p>

<pre><code>function! AddBufferToTab()
    let newBufNr = bufnr(""%"") 

    "" create an entry for the current tab if necessary
    if !has_key(g:BuffersManager, tabpagenr())
        let  g:BuffersManager[tabpagenr()] = []
    endif

    "" Get conditions to add the tab
    let isListed = buflisted(newBufNr)

    let isAlreadyInManager = 1
    if (index(g:BuffersManager[tabpagenr()], newBufNr) == -1)
        let isAlreadyInManager = 0
    endif

    let isNERDTreeBuffer = 0
    if (bufname(""%"") =~ ""NERD_Tree_"")
        let isNERDTreeBuffer = 1
    endif

    "" Debugging messages
    echom bufname(""%"")
    if (isListed)
        echom ""is Listed""
    else 
        echom ""is not Listed""
    endif

    if (isAlreadyInManager)
        echom ""is AlreadyInManager""
    else 
        echom ""is not AlreadyInManager""
    endif

    if (isNERDTreeBuffer)
        echom ""is NERDTreeBuffer""
    else 
        echom ""is not NERDTreeBuffer""
    endif
    echom ""=========""

    "" Add the buffer to the tab
    if isListed &amp;&amp; !isAlreadyInManager &amp;&amp; !isNERDTreeBuffer
        call add (g:BuffersManager[tabpagenr()],newBufNr)
    endif
endfunction
</code></pre>

<p>I am sure that I don't have a call to the <code>add</code> function anywhere else than in this function. </p>

<p>I then followed this workflow:</p>

<ul>
<li>sourcing the file, the buffer manager is empty</li>
<li><code>:e %</code> (add the current file to the manager)</li>
<li><code>:e $MYVIMRC</code></li>
<li><code>:NERDTree</code></li>
<li>select the first file <code>betterTabs.vim</code> in NERDTree.</li>
</ul>

<p>And here is the log I had:</p>

<p><a href=""https://i.stack.imgur.com/bJQx5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bJQx5.png"" alt=""enter image description here""></a></p>

<p>As you can see the opening of NerdTree doesn't seem to trigger the function (since I don't have any message about it in the log) BUT when I output the content of my dictionnary I get:</p>

<p><a href=""https://i.stack.imgur.com/4BOne.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4BOne.png"" alt=""enter image description here""></a></p>

<p>As I said I don't have any other call to <code>add</code> in my whole file (I gave sooner in the post the link to the github repo if anyone wants to check).</p>

<p>I don't understand how the buffer can be added when it doesn't even trigger the function.</p>

<hr>

<p><strong>More infos to follow the investigations of @VanLaser in the comments</strong> (many thanks to him):</p>

<p>First, to quote <a href=""http://vimdoc.sourceforge.net/htmldoc/windows.html#:ls"" rel=""nofollow noreferrer""><code>:h ls</code></a>:</p>

<blockquote>
  <p>Each buffer has a unique number.  That number will not change,
  so you can always go to a specific buffer with <code>:buffer N</code> or
  <code>N CTRL-^</code>, where N is the buffer number.</p>
</blockquote>

<p>So in theory if I get the number of the buffer I'm using it shouldn't change in the future. </p>

<p>Also I added the following lines at the very beginning of my function:</p>

<pre><code>echom bufnr('%')
echom expand('&lt;abuf&gt;')

if bufnr('%') != expand('&lt;abuf&gt;')
    echom ""RETURN""
    return
endif
</code></pre>

<p>and with the same workflow I get the same results, also I checked that the buffer numbers was the good ones:</p>

<p>Here is the output of <code>messages</code>:</p>

<p><a href=""https://i.stack.imgur.com/KU0Tz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KU0Tz.png"" alt=""enter image description here""></a></p>

<p>The output of <code>ls!</code>:</p>

<p><a href=""https://i.stack.imgur.com/UWUhH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UWUhH.png"" alt=""enter image description here""></a></p>

<p>And finally the content of my dictionary:</p>

<p><a href=""https://i.stack.imgur.com/o0dim.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/o0dim.png"" alt=""enter image description here""></a></p>

<p>As you can see it seems that the numbers are correctly returned, but once again NERDTree is launched but doesn't trigger the function.</p>

<hr>

<p><strong>More infos to follow the comments of @lcd047</strong></p>

<p>I changed the autocommand to </p>

<pre><code>autocmd! BufEnter * call AddBufferToTab(expand('&lt;abuf&gt;'))
</code></pre>

<p>The function prototype to </p>

<pre><code>function! AddBufferToTab(bufNumber)
</code></pre>

<p>and I replaced <code>let newBufNr = bufnr(""%"")</code> with <code>let newBufNr = a:bufNumber</code> and the behavior gets even weirder:</p>

<p>I added after the assignation of <code>newBufNr</code> the following debugging echos:</p>

<pre><code>echom newBufNr
echom bufnr('%')
echom expand('&lt;abuf&gt;')
echom a:bufNumber
</code></pre>

<p>For every buffers they show the same number (so using <code>&lt;abuf&gt;</code> in the autocommand doesn't make a difference in the cases I tried). </p>

<p><strong>But</strong> it get even weirder because then every buffers appears as not listed: for a reason that I don't understand <code>buflisted(expand('&lt;abuf&gt;'))</code> returns 0 for every buffers.</p>

<hr>

<p><strong>PS</strong> I'm sorry for the length of this post I'm just trying to give as much informations as possible because I really absolutely don't understand what's happening there.</p>
","<h1>tl;dr</h1>

<p>You cannot filter the buffer at its creation, you should wait until you have 
more informations.</p>

<h1>First attempt</h1>

<p>I used the <code>:debug NERDTree</code> command to see all the calls that this function
makes. When trying to stop it before the end I noticed something : A buffer was
created, without name, without filetype. And it had the position/size of the
nerdtree buffer (left split about 20 columns width).</p>

<p>It got me thinking that maybe you are trying to filter a buffer before it get's
enough informations. So the buffer doesn't <em>know</em> that it will be a nerdtree
buffer yet.</p>

<h1>Second attempt</h1>

<p>Instead of debugging manually I did a little log function that allows me to see
the flow of events when calling <code>:NERDTree</code> :</p>

<pre><code>augroup DebugGroup
  autocmd!
  autocmd BufAdd      * :call s:Debug('BufAdd')
  autocmd BufCreate   * :call s:Debug('BufCreate')
  "" idem for BufDelete BufWipeout BufFilePre BufFilePost BufEnter BufLeave BufWinEnter
  ""          BufWinLeave BufUnload BufHidden BufNew FileType Syntax
augroup END

function! s:Debug(message) abort
  silent execute '!echo '.a:message.' '.bufnr(""%"").' &gt;&gt; debug'
endfunction
</code></pre>

<p>Sample result : </p>

<pre><code>BufNew 1
BufAdd 1
BufCreate 1
BufLeave 1
BufEnter 5
BufWinEnter 5
BufDelete 5
BufWipeout 5
BufUnload 5
BufNew 5
BufAdd 5
BufCreate 5
BufEnter 5
BufWinEnter 5
BufDelete 5
Syntax 5
FileType 5
</code></pre>

<p>You can see here that the buffer <code>1</code> is the original buffer and the <code>5</code> is the
nerdtree one. And to create the nerdtree buffer, there are : two times the
events <code>BufEnter</code>, <code>BufDelete</code> and <code>BufWinEnter</code>. It's kind of strange why
nerdtree needs to open and delete two times the buffer to get working (but I'm
sure they have a good reason).</p>

<h1>Third attempt</h1>

<p>This time I used the methods that you provide in your script and in your
question to add details to the log : </p>

<pre><code>function! s:DebugBuffer(event)
    let newBufNr = bufnr(""%"")
    let isListed = buflisted(newBufNr)
    let isAlreadyInManager = (index(g:BuffersManager[tabpagenr()], newBufNr) == -1)?0:1
    let isNERDTreeBuffer = (bufname(""%"") =~ ""NERD_Tree_"")?1:0
    let newBufSyntax = &amp;ft

    call s:Debug('""'.a:event.' ['.newBufNr.'/'.bufname(""%"").' '.newBufSyntax.'] listed : '.isListed.' / managed : '.isAlreadyInManager.' / NERDTree '.isNERDTreeBuffer.'""')
    call s:Debug('""=&gt; '.isListed.' &amp; '.!isAlreadyInManager.' &amp; '.!isNERDTreeBuffer.'""')
endfunction

augroup BuffersManagerGroup
  autocmd!
  autocmd BufAdd      * :call s:DebugBuffer('BufAdd')
  autocmd BufCreate   * :call s:DebugBuffer('BufCreate')
  "" idem for BufDelete BufWipeout BufFilePre BufFilePost BufEnter BufLeave BufWinEnter
  ""          BufWinLeave BufUnload BufHidden BufNew FileType Syntax
augroup END

function! s:Debug(message) abort
  silent execute '!echo '.a:message.' &gt;&gt; debug'
endfunction
</code></pre>

<p>The syntax is the following : </p>

<pre><code>Event [BufferNumber/Filename FileType] listed : isListed / managed : isManaged / NERDTree : isNERDTree
=&gt; litteral condition to be tested
</code></pre>

<p>The <code>isNERDTree</code> is checked using the name, as you did in your question.</p>

<p>The log is :</p>

<pre><code>BufNew [4/betterTabs.vim vim] listed : 1 / managed : 0 / NERDTree 0
=&gt; 1 &amp; 1 &amp; 1
BufAdd [4/betterTabs.vim vim] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufCreate [4/betterTabs.vim vim] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufLeave [4/betterTabs.vim vim] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufEnter [5/ ] listed : 1 / managed : 0 / NERDTree 0
=&gt; 1 &amp; 1 &amp; 1
BufWinEnter [5/ ] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufDelete [5/ ] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufWipeout [5/ ] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufUnload [5/ ] listed : 1 / managed : 1 / NERDTree 0
=&gt; 1 &amp; 0 &amp; 1
BufNew [5/NERD_tree_1 ] listed : 1 / managed : 1 / NERDTree 1
=&gt; 1 &amp; 0 &amp; 0
BufAdd [5/NERD_tree_1 ] listed : 1 / managed : 1 / NERDTree 1
=&gt; 1 &amp; 0 &amp; 0
BufCreate [5/NERD_tree_1 ] listed : 1 / managed : 1 / NERDTree 1
=&gt; 1 &amp; 0 &amp; 0
BufEnter [5/NERD_tree_1 ] listed : 1 / managed : 1 / NERDTree 1
=&gt; 1 &amp; 0 &amp; 0
BufWinEnter [5/NERD_tree_1 ] listed : 1 / managed : 1 / NERDTree 1
=&gt; 1 &amp; 0 &amp; 0
BufDelete [5/NERD_tree_1 ] listed : 0 / managed : 1 / NERDTree 1
=&gt; 0 &amp; 0 &amp; 0
Syntax [5/NERD_tree_1 nerdtree] listed : 0 / managed : 1 / NERDTree 1
=&gt; 0 &amp; 0 &amp; 0
FileType [5/NERD_tree_1 nerdtree] listed : 0 / managed : 1 / NERDTree 1
=&gt; 0 &amp; 0 &amp; 0
</code></pre>

<p>Here you can clearly see something : the new buffer (number 5) does not get
noticed by the <code>isNERDTree</code> condition when triggering the <code>BufEnter</code> event, in fact it is not a nerdtree buffer yet.
Later, on triggering the <code>BufNew</code> event its name change (but not its filetype).</p>

<p>Based on your primary conditions : </p>

<pre><code>if isListed &amp;&amp; !isAlreadyInManager &amp;&amp; !isNERDTreeBuffer
    call add (g:BuffersManager[tabpagenr()],newBufNr)
endif
</code></pre>

<p>The add get called only one time : on the <code>BuffEnter</code> (notice the <code>1 &amp; 1 &amp; 1</code>).
When called on <code>BufEnter</code>, the buffer is added to the list, but after, because
it already got considered, it doesn't change.</p>

<p>Once you know this you can do multiple things :</p>

<ol>
<li>On events, you check if the buffer should be removed, like so :</li>
</ol>

<p>new condition :</p>

<pre><code>if isListed &amp;&amp; isAlreadyInManager &amp;&amp; isNERDTreeBuffer
  "" should be removed
endif
</code></pre>

<ol start=""2"">
<li>You can use a different condition, instead of checking the name. As listed in
my log, you can recognize for the filetype and on the <code>FileType</code> event delete
the buffer.</li>
</ol>

<h1>Conclusion</h1>

<p>For the nerdtree plugin, you should double check the <em>validity</em> of the
buffer. As you cannot filter the buffer on it's creation, you should wait for
another event to remove the new buffer if needed.</p>

<p><strong>Notes</strong> :</p>

<ul>
<li>Sorry for the long post, I wanted to be thorough.</li>
<li>If you want more details, feel free to ask, I'll be happy to add them.</li>
</ul>
","4377"
"Executing a function on buffer enter and on buffer leave events?","501","","<p>I would like to execute a certain function every time I leave a buffer associated with <strong>C++</strong>, and another function every time I enter a <strong>C++</strong> buffer. I came up with this so far:</p>

<pre><code>"" Buffer Leave
augroup myBufferLeave
    autocmd BufLeave *.cpp,*.c,*.h call s:ExecuteLeave()
augroup END

"" Buffer Enter
augroup myBufferEnter
    autocmd BufEnter *.cpp,*.c,*.h call s:ExecuteEnter()
augroup END
</code></pre>

<p>Another alternative is to hook into the global <code>BufEnter</code> event and set a buffer variable or check the current <code>&amp;ft</code> and execute the appropriate function:</p>

<pre><code>autocmd BufEnter * if &amp;ft = 'cpp' |
    \ call s:ExecuteEnter() |
    \ endif

autocmd BufLeave * if &amp;ft = 'cpp' |
    \ call s:ExecuteLeave() |
    \ endif
</code></pre>

<p>Is there a cleaner way to do this? Ideally, without tapping into the <code>*</code> global buffer events. Ideally, I would like to use something like this:</p>

<pre><code> autocmd BufLeave cpp call s:ExecuteLeave()
 autocmd BufEnter cpp call s:ExecuteEnter()
</code></pre>

<p>Is there a way to pack the <code>*.cpp,*.c,*.h</code> condition into one single definition such as <code>cpp</code>? The <code>cpp</code> definition is a <code>FileType</code>, but file-types are not triggered on <code>BufEnter</code> and <code>BufLeave</code>. If one needs to add another file extension, such as <code>*.CXX</code> for example, the list will become bloated eventually <code>*.cpp,*.c,*.h, *.CXX, *.C,</code> and a bit hard to maintain.</p>
","<p>As the <code>completeopt</code> is a global option, you are correct in that you need a way to toggle the <code>preview</code> setting. I suggest you do this via the <code>BufEnter</code> autocmd with a <code>*</code> as the pattern.</p>

<pre><code>augroup TogglePreview
  autocmd!
  autocmd Filetype,BufEnter * execute 'set completeopt'.(&amp;ft == 'cpp' ? '+' : '-').'=preview'
augroup END
</code></pre>

<p>The idea is that the autocmd uses <code>'filetype'</code> upon entering a new buffer or settings the buffer's <code>'filetype'</code> to decide to turn on/off the <code>preview</code> option.</p>

<p>You may want to consider using <code>:pclose</code> to close the preview window as well.</p>

<p>For more help see:</p>

<pre><code>:h :au
:h BufEnter
:h 'completeopt'
:h :exe
:h :pclose
</code></pre>
","7253"
"Ternjs plugin is not working as expected","501","","<p>I installed <a href=""https://github.com/marijnh/tern_for_vim"" rel=""nofollow"">ternjs_for_vim</a> plugin but can't figure out how to use it properly. RTFM didn't help. What I get is list random JS-methods in the omni-completion. But things like completing for Node.JS modules doesn't work. For example if I type:</p>

<pre><code>var fs = require('fs');
fs.
</code></pre>

<p>and after <code>.</code> there is no relevant completion (like methods <code>readFile</code>, <code>readFileSync</code> etc.)</p>

<p>Here is my .tern-project file:</p>

<pre><code>{
    ""libs"": [
        ""underscore"",
        ""jquery""
    ],
    ""plugins"": {
        ""node"": {}
    }
}
</code></pre>
","<p>Actually, there was a problem in my .vimrc config.<br>
A long time ago I created some settings regarding Omni completion and forgot about them. So I just deleted this lines from my config:</p>

<pre><code>set ofu=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
</code></pre>

<p>and everything works like a charm now.</p>
","2497"
"Ethan Schoonover's Solarized color scheme does not work as expected","500","","<p>I'm trying to use <a href=""http://ethanschoonover.com/solarized"" rel=""nofollow noreferrer"">this</a> color scheme on my Ubuntu system. I installed the package using Option 1 in <a href=""https://github.com/altercation/vim-colors-solarized"" rel=""nofollow noreferrer"">GitHub</a>, and modified .vimrc as instructed.</p>

<p>It turns out that the colors displayed are different as in the author's website. C code has the following scheme according to the website:</p>

<p><a href=""https://i.stack.imgur.com/8GcEk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8GcEk.png"" alt=""enter image description here""></a></p>

<p>The C++ code has the following scheme on my own machine:</p>

<p><a href=""https://i.stack.imgur.com/xXLk7.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xXLk7.jpg"" alt=""enter image description here""></a></p>

<p>How can I configure my <code>.vimrc</code> to have the same display effect as in the website? Or do I need to setup something on my terminal?</p>

<p>-------------Edited-------</p>

<p>gvim displays the color as expected. The only problem is vim on terminal</p>
","<p>To be able to take advantage of that theme you must select an appropriate palette in your terminal settings as well.</p>

<p><a href=""https://i.stack.imgur.com/8n7fHm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8n7fHm.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/FqmIum.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FqmIum.png"" alt=""screenshot""></a></p>

<p>If you don't find that palette in your terminal settings (for instance if you are on Ubuntu 14.04 LTS) you must install a <em>solarized</em> Theme for the gnome-terminal first.</p>

<ol>
<li>Get the repo from <a href=""https://github.com/Anthony25/gnome-terminal-colors-solarized"" rel=""nofollow noreferrer"">gnome-terminal-colors-solarized
</a> on Github</li>
<li>create a new profile for your terminal to easily get rid of that color-scheme in case you don't like it
<a href=""https://i.stack.imgur.com/DuaKpm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DuaKpm.png"" alt=""enter image description here""></a><br>
<a href=""https://i.stack.imgur.com/tMKMFm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tMKMFm.png"" alt=""enter image description here""></a></li>
<li>switch to that profile<br>
<a href=""https://i.stack.imgur.com/SxUgKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SxUgKm.png"" alt=""enter image description here""></a></li>
<li>now install the color-scheme with <code>./install.sh</code> from the cloned git-repo, you will be asked two questions, be sure to answer the second one with the profile you just created</li>
</ol>

<blockquote>
  <p>Please select a Gnome Terminal profile:<br>
        1) Default<br>
        2) solarized<br>
        #? 2</p>
</blockquote>

<p>Now you are ready to install the vim-solarized theme.</p>
","8058"
"Clipboard sharing broke under MacOS X","499","","<p>I'm using (roughly) the same config for my mac and my ubuntu machine. I use</p>

<pre><code>set clipboard=unnamed,unnamedplus
</code></pre>

<p>To conveniently share vim's clipboard with the system clipboard. However, lately the clipboard sharing broke under Mac OS X.</p>

<p>I have no idea what I did to break it, it still works fine under ubuntu. I've tried completely removing and reinstalling vim (via homebrew), deleting my <code>.vimrc</code> and <code>.zshrc</code> files, and still it doesn't seem to work.</p>

<p>Now, when I have</p>

<pre><code>set clipboard=unnamed,unnamedplus
</code></pre>

<p>I cannot paste at all with vim. When I set</p>

<pre><code>set clipboard=
</code></pre>

<p>then I can at least paste in vim, but of course it doesn't share the system clipboard (duh). Using <code>:reg</code> confirms that with anything other than <code>set clipboard=</code>, nothing is written to vim's registers. <code>:version</code> gives me <code>+clipboard</code> and <code>+xterm_clipboard</code>. I've also tried it in iTerm2 and Terminal.app, both in and outside of tmux (same results). Also, manually copying to the registers (<code>""*yy</code>, <code>""+yy</code>) didn't work.</p>

<p>Interestingly, the the GUI-version (MacVim <code>7.4-74</code>, also installed via homebrew) still functions fine in this regard, I can happily copy/paste to/from the system register there.</p>

<p>Do you guys have any ideas? Cause I'm desperate at this point...</p>

<p>Here's my <code>.vimrc</code>: <a href=""https://github.com/DeX3/dotfiles/blob/master/.vimrc"" rel=""noreferrer"">https://github.com/DeX3/dotfiles/blob/master/.vimrc</a></p>
","<h2>MacVim</h2>

<p>Under OS X, it's best to use <a href=""https://macvim-dev.github.io/macvim/"" rel=""nofollow noreferrer"">MacVim</a>. OS X behaves differently to other operating systems when it comes to things like clipboard management. MacVim is specifically designed to address the areas where Vim falls short on the Mac.</p>

<h3>Coming to a terminal near you</h3>

<p>Although MacVim runs as a GUI (like GVim) by default, you can use MacVim in the terminal using <code>mvim -v</code>. I'd recommend an alias such as the following (I'm using bash syntax; adjust according to your shell):</p>

<pre><code>alias vim='mvim -v'
</code></pre>
","3130"
"CursorLine colors","499","","<p>I configured my CursorLine to be lightyellow.</p>

<p><a href=""https://i.stack.imgur.com/Vfaz5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Vfaz5.png"" alt=""cursorline screenshot""></a></p>

<p>I have a couple of issues here:</p>

<ul>
<li>First, lightyellow is marked as an error when it is a valid color. How can I avoid this?</li>
<li>Second, when the cursor line is over an error, the error background color disappears and it is really hard to read the text. Is there any way of preventing this behavior?</li>
</ul>

<p><a href=""https://i.stack.imgur.com/NDELI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NDELI.png"" alt=""screenshot cursor line error""></a></p>
","<ol>
<li><p>The default syntax script for vim doesn't have <code>lightyellow</code> listed for <code>vimHiCtermColor</code>. You could patch it and submit your change to the vim_dev mailing list.</p>

<p>Or, better, ask them if that is intentional.</p></li>
<li><p><code>Error</code> as a lower priority than <code>CursorLine</code> but you can force it with this simple hack:</p>

<pre><code>hi Error cterm=reverse ctermbg=white ctermfg=red
</code></pre>

<p>Instead of white text on red background, you use red text on white background and reverse them with the <code>reverse</code> attribute:</p>

<ul>
<li>it gives you white on red,</li>
<li>it increases the priority of <code>Error</code>.</li>
</ul></li>
</ol>
","6828"
"Is there a way to alias `:w'` to `:w`, to avoid creating files named '?","499","","<p>Occasionally, my pinky will graze the <code>'</code> key while reaching for enter, resulting in <code>:w'&lt;Enter&gt;</code>.</p>

<p>I've tried:</p>

<pre><code>cabbrev w' :w
cabbrev w\' :w
cabbrev ""w'"" :w
</code></pre>

<p>None of them work.  Is there a way to alias <code>:w'</code> to <code>:w</code>?</p>

<p>I also use cmdwin (<code>:help cmdwin</code> + <code>nnoremap : :&lt;C-F&gt;</code>) instead of the normal command-line, so bonus points if it works there too.</p>
","<p>As Peter Rincker points out, <code>cmap</code>s can expand in other places as well, so a <a href=""https://stackoverflow.com/questions/7513380/vim-change-x-function-to-delete-buffer-instead-of-save-quit""><code>cnoreabbrev</code> would be better</a>:</p>

<pre><code>cnoreabbrev w' w
</code></pre>

<p>Or, the safest, again thanks to Peter:</p>

<pre><code>cnoreabbrev &lt;expr&gt; w' getcmdtype() == "":"" &amp;&amp; getcmdline() == ""w'"" ? ""w"" : ""w'""
</code></pre>

<p>By explicitly checking if the command line contains only <code>w'</code>, unwanted expansions in situations can be avoided.</p>

<p>You can use a <a href=""http://vimhelp.appspot.com/map.txt.html#%3Acmap"" rel=""nofollow noreferrer""><code>cmap</code></a>:</p>

<pre><code>cmap w' w
</code></pre>

<p>You'd still have to press <kbd>Enter</kbd>, but an accidental <code>'</code> should be ignored now.</p>

<p>If you're using <code>cmdwin</code>, a <code>inoremap</code> set by <code>autocmd</code> might be useful:</p>

<pre><code>autocmd CmdwinEnter * inoremap w' w
autocmd CmdwinLeave * iunmap w'
</code></pre>
","2008"
"Edit Neovim terminal commandline within the same Neovim instance","498","","<p>In bash one can edit the current commandline in <code>$EDITOR</code> by pressing <code>&lt;c-x&gt;&lt;c-e&gt;</code>.</p>

<p>I am running bash inside a terminal buffer within Neovim. I would like to be able to press <code>&lt;c-x&gt;&lt;c-e&gt;</code> and have Neovim open a new buffer (<code>:new</code>), in the same Neovim instance, with the current contents of the commandline. When I close that buffer (<code>:bdelete</code>) I would like to have the contents of the buffer replace what was on the commandline.</p>

<p>Is this possible?</p>
","<p>I've now turned the script below into a plugin: <a href=""https://github.com/brettanomyces/nvim-editcommand"" rel=""nofollow noreferrer"">nvim-editcommand</a>, or if you don't mind starting you terminals with a plugin command <a href=""https://github.com/brettanomyces/nvim-terminus"" rel=""nofollow noreferrer"">nvim-terminus</a> provides a few more features</p>

<hr>

<p>Finally got it working in pure (ugly) vimscript:</p>

<pre><code>    "" set the name of the current buffer, useful for setting the name of terminal buffers
function! SetFileName()
  execute 'file ' . input('Enter name: ')
endfunction

"" - yank from last line with prompt ('&gt; ') to last line into register c
"" - clear commandline
"" - call function
tnoremap &lt;c-x&gt; &lt;c-\&gt;&lt;c-n&gt;:execute ':?&gt; ?,$y c'&lt;cr&gt;A&lt;c-c&gt;&lt;c-\&gt;&lt;c-n&gt;:call EditCommandline()&lt;cr&gt;

function! EditCommandline()
  "" clear search highlighting
  let @/ = """"

  "" - set an autocmd on the current (terminal) buffer that will run when the buffer is next entered
  "" - put from register c (where the new command will be)
  "" - remove the autocmd
  "" - go to insert mode
  autocmd BufEnter &lt;buffer&gt; put c | autocmd! BufEnter &lt;buffer&gt; | call feedkeys('A')

  "" get all text after prompt '&gt; '
  let s:command = strpart(@c, strridx(@c, ""&gt; "") + 2)

  "" open new empty buffer
  new 

  "" make buffer a scratch buffer
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile

  "" put command into buffer
  put! =s:command

  "" remove extra lines
  %join!

  "" copy buffer to register when it is closed
  autocmd BufLeave &lt;buffer&gt; :%yank c

endfunction
</code></pre>
","5871"
"How can I have (g)vim start in insert mode by default (when opening a .txt file)?","496","","<p>I often just need to create a <code>notes.txt</code> file in Windows to just quickly paste some text from some other place, save it from the <code>gvim</code> UI, and close the file. I want to be able to perform this operation quickly without having to press <code>i</code> on the keyboard, and <code>gvim</code> is my editor of choice on Windows and all files with the <code>.txt</code> extension have been associated with <code>gvim</code>.</p>

<p>So, I want to configure my <code>_Vimrc</code> so that when a <code>.txt</code> file is opened, insert mode is enabled by default. For other files, if at all possible, starting in command mode is preferable as I often start a <code>gvim</code> session by jumping to a line number in command mode.</p>

<p>If the above is not possible, then how can I simply configure <code>gvim</code> to start in insert mode?</p>

<p>Thanks.</p>
","<p>This should do it:</p>

<pre><code>autocmd BufRead *.txt startinsert
</code></pre>
","802"
"Using % in languages without curly braces","496","","<p>In C and C-like languages, I can use <code>%</code> to jump to the corresponding curly brace that the cursor is on. This is a well-known ""trick"".</p>

<p>But in Ruby for example:</p>

<pre><code>def fun
    [1, 2].each do |n|
    end
end 
</code></pre>

<p>This doesn't work, since ruby doesn't use the characters in <code>matchpairs</code> (set to <code>(:),{:},[:],&lt;:&gt;</code> by default.</p>

<p>I tried setting that, but it doesn't work:</p>

<pre><code>:set matchpairs=def:end
E474: Invalid argument: matchpairs=def:end
</code></pre>

<p>Can I get this to work with languages such as Ruby as well? Note this is <em>not</em> a Ruby-specific question, other examples might be shell scripts (<code>if</code>/<code>fi</code>) or Lua (<code>function</code>/<code>end</code>), and many many more.</p>
","<p>You can use the <a href=""http://www.vim.org/scripts/script.php?script_id=39"">matchit</a> plugin. This is included in modern vim distributions, so all you have to do to use it is add the following to your vimrc:</p>

<pre><code>runtime macros/matchit.vim
</code></pre>

<p>You can also get it packaged as a plugin if you prefer. It recognizes many keywords by default (including <code>def</code> and <code>end</code>) and can be extended to recognize more.</p>
","132"
"Vim won't open if ""execute pathogen#infect()"" in .vimrc","496","","<p>I recently found out about vim-pathogen, and installing vim plugins on my Mac and on remote shared Linux machines has been working great. However, I can't get vim-pathogen working on one remote shared Linux machine I use. I tried using vim-pathogen on an external Linux cluster, but if I have the recommended <code>execute pathogen#infect()</code> line in my <code>.vimrc</code> file, Vim suddenly won't even open if I clone a plugin repository in my <code>.vim/bundle</code> directory. Below is a copy of one of my sessions where I tried to get vim-pathogen working. I had the same problem with other plugins, so it's not just vim-autoclose. How do I go about getting vim-pathogen working? I have Vim 7.0 on this machine.</p>

<pre><code>lindsb@rrlogin:~$ ls .vim
lindsb@rrlogin:~$ cat .vimrc
lindsb@rrlogin:~$ mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; \
&gt; curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
lindsb@rrlogin:~$ ls .vim/*
.vim/autoload:
pathogen.vim

.vim/bundle:
lindsb@rrlogin:~$ echo -e ""execute pathogen#infect()\nsyntax on\nfiletype plugin indent on"" &gt; .vimrc
lindsb@rrlogin:~$ cat .vimrc
execute pathogen#infect()
syntax on
filetype plugin indent on
lindsb@rrlogin:~$ vi
lindsb@rrlogin:~$ git clone https://github.com/Townk/vim-autoclose .vim/bundle/vim-autoclose
Cloning into '.vim/bundle/vim-autoclose'...
remote: Counting objects: 326, done.
remote: Total 326 (delta 0), reused 0 (delta 0), pack-reused 326 
Receiving objects: 100% (326/326), 97.85 KiB | 0 bytes/s, done.
Resolving deltas: 100% (132/132), done.
Checking connectivity... done.
lindsb@rrlogin:~$ ls .vim/*
.vim/autoload:
pathogen.vim

.vim/bundle:
vim-autoclose
lindsb@rrlogin:~$ vi
*** glibc detected *** vim: double free or corruption (fasttop): 0x00000000197ee800 ***
======= Backtrace: =========
/lib64/libc.so.6[0x326da714af]
/lib64/libc.so.6(cfree+0x4b)[0x326da757ab]
vim(clear_tv+0x4e)[0x453c7e]
|      |      |
|      |      |
V      V      V
[ a bunch more lines of similar error output ]
</code></pre>
","<p>As Christian Brabandt suggested, my issue was caused by an old version of vim. I installed locally by cloning the <a href=""https://github.com/vim/vim.git"" rel=""nofollow noreferrer"">vim git repo</a> then executing <code>./configure --prefix=$HOME/usr/vim &amp;&amp; make &amp;&amp; make install</code> within the top directory of the vim repo. (<code>$HOME/usr/vim</code> is where I wanted vim installed) The new vim worked great with the pathogen plugin installation method, but it opened really slowly. By analyzing the startup time with <code>vim --startuptime out.log</code> I found that setting up the clipboard was taking up most of the startup time. Following the instructions in <a href=""https://stackoverflow.com/questions/14635295/vim-takes-a-very-long-time-to-start-up"">this post</a> I found that <code>vim -X</code> opened much faster, so I added <code>set clipboard=exclude:.*</code> to my <code>.vimrc</code> file. Now everything works great.</p>
","5263"
"End of python block motion","495","","<p>I need a motion that moves to end/beginning of a python block, and I need another motion that moves to begining/end of previous/next method/class (all combinations).</p>

<p>I've tried vim-indent-object, python-mode, chapa, vim-python-object, etc. None of them support end of block, and none of them support all combinations of above motions.</p>

<p>I remember once upon a time I had a plugin that provided <code>]]</code>, <code>[[</code>, <code>][</code> and <code>[]</code> motions for begining/end of previous/next method/class, but I can't find it in my plugged directory (searched ""]["" and ""[]"" in my plugged directory and analyzed all occurrences but didn't find anything that defines ""]["" or ""[]"").</p>

<p>Do you know the plugin I used to use? Do you know any plugin that provides this functionality?</p>
","<p>With the recent update (Nov 2017) of <a href=""https://github.com/vim/vim/blob/master/runtime/ftplugin/python.vim"" rel=""nofollow noreferrer""><code>$VIMRUNTIME/ftplugin/python.vim</code></a> following ft-specific motions are now available for the python language</p>

<ul>
<li><code>[[</code> Jump backwards to begin of current/previous toplevel</li>
<li><code>[]</code> <strong>Jump backwards to end of previous toplevel</strong></li>
<li><code>][</code> <strong>Jump forwards to end of current toplevel</strong></li>
<li><code>]]</code> Jump forwards to begin of next toplevel</li>
<li><code>[m</code> Jump backwards to begin of current/previous method/scope</li>
<li><strong><code>[M</code> Jump backwards to end of previous method/scope</strong></li>
<li><strong><code>]M</code> Jump forwards to end of current/next method/scope</strong></li>
<li><code>]m</code> Jump forwards to begin of next method/scope</li>
</ul>

<p>Example python file</p>

<pre class=""lang-python prettyprint-override""><code>class previous:             # [[[[

    def method_first:
        pass
    # ...

    def method_last:
        pass                # []

class current:              # [[ or [m...[m[m

    def method_first:       # [[]m or [m...[m
        pass                # [[]M or [M...[M
    # ...

    def method_previous:    # [m[m
        pass                # [M

    def method_current:     # [m
        # CURSOR &lt;---------------------------
        pass                # ]M

    def method_next:        # ]m
        pass                # ]M]M
    # ...

    def method_last:        # ][[m or ]m...]m
        pass                # ][   or ]M...]M

class previous:             # ]]   or ]m...]m]m

    def method_first:
        pass
    # ...

def global_func:            # ]]]]
    pass
</code></pre>

<p>This update should be included if your vim patch level is at least <code>8.0.1256</code>. </p>

<p>If you can't update but want to use this functionality, you can install the most recent version into the <code>~/.vim</code> directory:</p>

<pre><code>$ curl https://raw.githubusercontent.com/vim/vim/master/runtime/ftplugin/python.vim --create-dirs -o ~/.vim/ftplugin/python.vim
</code></pre>
","14115"
"How to apply a setting in all open tabs and windows?","495","","<p>Is there an option to apply a setting in all tabs and windows, e.g. apply <code>:set number</code> to all open tabs?</p>
","<p>Yes there is! You can accoplish this with <code>:tabdo</code> and <code>:windo</code>. For your case spefically:</p>

<pre><code>:tabdo windo set number
</code></pre>

<p>See <a href=""http://vimhelp.appspot.com/tabpage.txt.html#%3Atabdo"" rel=""noreferrer""><code>:help :tabdo</code></a> and <a href=""http://vimhelp.appspot.com/windows.txt.html#%3Awindo"" rel=""noreferrer""><code>:help :windo</code></a> for more info.</p>
","12062"
"Generate ctags for bash variables?","494","","<p>When I run ctags for a project written in bash, tags for functions are generated, but not for variables.<br>
e.g. if I run <code>ctags --list-kinds=sh</code></p>

<blockquote>
  <p>f  functions</p>
</blockquote>

<p>As compared to if I run the list for the ""c"" language alot more tag types get included.<br>
Is it possible to generate tags for bash variables? or does anyone know of a custom regex that can added to <code>~/.ctags</code> to enable this?</p>
","<p>based on the prompt from @Cometsong I added wrote the regex expression below and added to my <code>~/.ctags</code></p>

<pre><code>--regex-sh=/^[ \t]*(local)?[ \t]*([A-Za-z0-9_-]+)=/\2/v,variable,variables/
</code></pre>

<p>So far it seems to be working quite nicely</p>
","5817"
"Replace with hex character","493","","<p>Given this file:</p>

<pre><code>printf 'hello\x19world\n' &gt; hello.txt
</code></pre>

<p>I can replace a hex character:</p>

<pre><code>$ ex -sc '%s/\%x19/ /|x' hello.txt
$ od -c hello.txt
0000000   h   e   l   l   o       w   o   r   l   d  \n
</code></pre>

<p>However I cannot replace with a hex character:</p>

<pre><code>$ ex -sc '%s/ /\%x19/|x' hello.txt
$ od -c hello.txt
0000000   h   e   l   l   o   %   x   1   9   w   o   r   l   d  \n
</code></pre>
","<p>From <code>:help todo</code>:</p>

<blockquote>
  <p>Substitute with hex/unicode number ""\%xff"" and ""\%uabcd"".  Just like
      ""\%uabcd"" in search pattern.</p>
</blockquote>

<p>In other words, this isn't implemented yet.</p>

<p>You can do it interactively, in Vim.  See <code>:help 24.8</code>.</p>

<p>Type <code>:%s/ /</code>, then type <code>Ctrl-V</code>, then <code>x19</code>, then press Enter.</p>
","10089"
"How to output result of vim commands to shell","492","","<p>Let's say I'm in the shell (<code>bash</code>) and want to see output that <code>:scriptnames</code> would give, but don't want to start vim or maybe I want to echo that into another file.</p>

<p>So I execute</p>

<pre><code>vim +scriptnames
</code></pre>

<p>Which shows me all the scripts, but how do I echo that into the shell's stdout?</p>
","<p>That happens, because usually Vim switches to the alternate screen and works there. Upon exiting, Vim will switch back and therefore you don't see anything left from your Vim session, but the result of the command executed even before starting Vim. </p>

<p>This feature is explained at <code>:h xterm-screens</code> <a href=""https://vimhelp.appspot.com/tips.txt.html#xterm-screens"">(link)</a></p>

<p>So you basically don't want that and therefore want to disable that. You can do so, by setting <code>:set t_ti= t_te=</code> the terminal codes that perform this to empty. </p>

<p>Putting it all together, you would want to start Vim like this:</p>

<p><code>vim -c ':set t_ti= t_te= nomore' -c 'scriptnames|q!'</code></p>

<p>We are resetting the <code>'more'</code> option, so that you don't see the hit-enter-prompt.</p>
","8836"
"How to map ""make"" to ""make | copen""?","491","","<p>It would be fine if after <code>:make</code> command vim opened the new buffer with errors and put the cursor to it. Exactly like <code>:make | copen</code> command. How to map sequence <code>:make | copen</code>?</p>
","<p>You could create an abbreviation in the command line mode by adding this to your vimrc:</p>

<pre><code>cabbrev mc make&lt;bar&gt;copen
</code></pre>

<p>Now when you'll type <code>mc</code> in the command line it will be replaced by <code>make|copen</code> making it faster to type.</p>

<p>You could also create a mapping to invoke the commands you want:</p>

<pre><code>nnoremap &lt;key&gt; :make&lt;bar&gt;copen&lt;CR&gt;
</code></pre>

<hr>

<p><strong>EDIT</strong> As @Sato Katsura pointed it out in the comment my first version of <code>cabbrev</code> is not a good one: Indeed in the first version <code>mc</code> will be replaced no matter where it is placed in the command line, so for example I you want to search in a buffer for the string <code>mc</code> and you try to hit <code>/mc</code> it will be replaced by <code>/make|copen</code>.</p>

<p>To resolve that @Sato linked <a href=""http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev"" rel=""nofollow"">an interesting tip</a>. With the following syntax <code>mc</code> will be replaced only if it is the first thing typed in the command line:</p>

<pre><code>cabbrev make &lt;c-r&gt;=(getcmdtype()==':' &amp;&amp; getcmdpos()==1 ? 'make&lt;bar&gt;copen' : 'make')&lt;CR&gt;
</code></pre>
","9191"
"How can I edit my Vim configuration whilst working in Vim?","490","","<p>I am new to Vim and I want to be able to edit scripts with my keyboard bindings and other Vim settings while still working in Vim.</p>

<p>For instance I would like all most of my <code>set xx</code> commands to be in one file and have the ability to update the file and reapply its settings while still in Vim. Is it a matter of <code>source</code>-ing the file as I am editing it?</p>
","<blockquote>
  <p>Is it a matter of <code>source</code>-ing the file as I am editing it?</p>
</blockquote>

<p>Yes! <code>:so %</code> should do the trick when you're editing your <code>vimrc</code>. Or you can also use the special variable <code>$MYVIMRC</code> to access it from anywhere. I have a mapping like the following:</p>

<pre><code>nnoremap &lt;F5&gt; :source $MYVIMRC&lt;CR&gt;
</code></pre>

<p>Caveats:</p>

<p>There are a few things you need to do to your <code>vimrc</code> to make sure you can re-<code>source</code> it safely. </p>

<ul>
<li>Make sure all your functions start with <code>function!</code>. The <code>!</code> makes a re-declaration of the function simply overwrite the function without a warning.</li>
<li>If you have any <code>autocmd</code>s, make sure you include them in a group and start the group with <code>au!</code>. This will make sure that you don't set up your <code>autocmd</code>s more than once. And if you edit one, it will delete the old instance.</li>
</ul>

<p>Example:</p>

<pre><code>augroup MyAutocmds
   au!
   autocmd...
   autocmd...
augroup END
</code></pre>
","12172"
"Vertical equivalent of ""control+w n""?","486","","<p>I often want a new empty vertical pane (vim window / viewport ...) in my current Vim tab.</p>

<p>I know I can get a new empty horizontal pane by doing <code>control+w n</code>.</p>

<p>I know I can split the current pane into two identical vertical copies with <code>control+w v</code>, but then I always resort to the awkward workaround of opening a new empty horizontal pane within this vertical pane and then closing the duplicate view of the original pane which I didn't want.</p>

<p>Is there a built in way to just get a blank vertical pane?</p>
","<p>From <a href=""http://vimhelp.appspot.com/windows.txt.html#%3Avnew""><code>:help vnew</code></a>:</p>

<pre><code>    Like |:new|, but split vertically.  If 'equalalways' is set
    and 'eadirection' isn't ""ver"" the windows will be spread out
    horizontally, unless a width was specified.
</code></pre>

<p>However, it seems like Vim does not provide a mapping for <code>:vnew</code> which creates a new <em>blank</em> vertical split. It's easy to create this mapping yourself. For instance:</p>

<p><code>nnoremap &lt;leader&gt;v :vnew&lt;CR&gt;</code></p>
","2812"
"Execute a command in the NeoVim terminal emulator on startup","484","","<p>I currently am using a command within a larger bash script to start an instance of NeoVim with some options:</p>

<pre><code>nvim -c ""terminal""
</code></pre>

<p>What I would like to do is be able to execute a terminal command from the NeoVim terminal that is opened with this command. In particular, I want to execute a specific version of a Python interpreter.</p>

<p>Something like this:</p>

<pre><code>nvim -c ""terminal:~/environments/env1/bin/python""
</code></pre>

<p>Can something like this be achieved with NeoVim?</p>
","<p>As described in <code>:help :terminal</code>, you can specify a command that will run in the terminal buffer.</p>

<pre><code>nvim -c 'terminal ~/environments/env1/bin/python'
</code></pre>

<p>When <code>:terminal</code> isn't given an explicit command to run, it runs the shell.</p>
","12648"
"How to exit vim from split mode?","484","","<p>How to efficiently exit vim when editing multiple files in the split mode at one go?</p>

<p>It seems when I'm having e.g. 10 split windows, I've to repeat 10 times <code>:q!</code> command for each window which is a bit time consuming.</p>

<p>Are there any better methods of quitting the editor?</p>

<p>As for dirty workaround, it can be quit by pressing <kbd>Control</kbd>+<kbd>Z</kbd> and typing <code>kill %1</code> to kill it.</p>
","<p>Use the command <code>:qall!</code>, <code>:qa!</code> for short, or its safer alternative <code>:qall</code> that prevent to discard modified buffers. To save all buffers before quitting use the command <code>:wqall</code>. See <code>:help window-exit</code> for the full set of commands to quit multiple windows at once.</p>
","736"
"How to differentiate visually the white spaces in vim?","482","","<p>My goal were to somehow make visible, if a whitespace is space, tab, or even newline (and, ideally, in case of newline I would be happy to see <code>\r\n</code> and <code>\n</code> differently).</p>

<p>I am thinking to a similar thing as the GUI text editors can do.</p>

<p>Is it somehow with vim also possible?</p>
","<p>Yes, look at <a href=""http://vimhelp.appspot.com/options.txt.html#%27listchars%27"" rel=""nofollow""><code>:help listchars</code></a>.</p>

<p><code>listchars</code> is a string that will be parsed when <code>list</code> is set to determine what to render for certain special characters. You can set <code>listchars</code> in your <code>.vimrc</code> like so:</p>

<pre><code>set listchars=eol:!,tab:&gt;=,trail:.
set list
</code></pre>

<p>This will use the <code>!</code> character to show the end of every line, tabs like <code>&gt;===</code> (assuming four-space tabs), and <em>trailing</em> spaces with a <code>.</code> character. The characters are highlighted with the <code>SpecialKey</code> group.</p>

<p>In addition, you can include the following tokens in <code>listchars</code>:</p>

<ul>
<li><code>extends:&lt;character&gt;</code> for the last character in a long line</li>
<li><code>precedes:&lt;character&gt;</code> for the first character in a long line</li>
<li><code>conceal:&lt;character&gt;</code> for concealed text </li>
<li><code>nbsp:&lt;character&gt;</code> for non-breaking spaces</li>
</ul>

<p>Note that you cannot get vim to display visible whitespace for spaces that are not trailing without a relatively modern version of vim; check <code>if has(""patch710"")</code> to see if <code>space</code> is supported in <code>listchars</code>.</p>
","729"
"What does <C-@> do?","482","","<p>I have seen <kbd>CTRL</kbd><kbd>@</kbd> being used in Insert Mode in <a href=""http://vimgolf.com/challenges/57343555fd77ad227900df4a"" rel=""nofollow"">a VimGolf challenge</a>. In this scenario it inserts the text that was last typed and switches to Normal Mode.</p>

<p>However, I wonder if this is the real purpose of this binding or just a side effect, so I tried to find information on what it does but found nothing on <code>:help</code> or Google.</p>

<p>So, the question is: Where can I find documentation about <kbd>CTRL</kbd><kbd>@</kbd>?</p>
","<p>From <a href=""http://vimdoc.sourceforge.net/htmldoc/insert.html#i_CTRL-@""><code>:h i_CTRL-@</code></a>:</p>

<blockquote>
  <p>CTRL-@        Insert previously inserted text and stop insert.</p>
</blockquote>

<p>Also the mappings existing in insert mode are referenced in <a href=""http://vimdoc.sourceforge.net/htmldoc/insert.html""><code>:h insert.txt</code></a></p>
","7785"
"From a TextChanged autocommand event, how to get the range that has been changed?","479","","<h2>Problem</h2>

<p>I am trying to implement ""trimming trailing whitespace in changed lines only"". For this purpose, I intercept <code>TextChanged</code> and <code>TextChangedI</code> autocmd events and record the current line (<code>line(.)</code>) in the handler. The changed lines are then trimmed in a <code>BufWritePre</code> autocmd event handler.</p>

<p>It works OK, except for the case when a line is inserted/removed. In this case, I need to shift existing records.</p>

<p>Initially I assumed that the cursor always gets placed on last inserted/first removed line (with this knowledge, it is possible to calculate the range, if you remember the previous line count), but with undo and paste this is not true.</p>

<h2>Question</h2>

<p>How to determine the exact line range which has been inserted/removed with current TextChanged event?</p>

<h2>Code</h2>

<p>The current (broken) python handler code is here (I use <a href=""https://github.com/amoffat/snake"" rel=""nofollow"">amoffat/snake</a> to script in python):</p>

<pre><code>@on_autocmd(""TextChanged,TextChangedI"", ""*"")
def trim_whitespace_remember_line(context):
    line_count_old = int(my_get(""line_count""))
    line_count = int(vim.eval(""line(\""$\"")""))
    line = int(vim.eval(""line(\"".\"")""))

    if line_count_old != line_count:
        log(""trim_whitespace_remember_line: line_count %d -&gt; %d"" % (line_count_old, line_count))
        if line_count &gt; line_count_old:
            # FIXME: we assume that the cursor is placed on the last inserted line
            diff = line_count - line_count_old
            log(""trim_whitespace_remember_line: %d lines inserted, current line %d"" % (diff, line))
            trim_whitespace_lines_inserted(context, line - diff + 1, line)
        else:
            # FIXME: we assume that the cursor is placed on the first line after removed block,
            # i. e. on the first removed line (before reaccounting)
            diff = line_count_old - line_count
            log(""trim_whitespace_remember_line: %d lines removed, current line %d"" % (diff, line))
            trim_whitespace_lines_removed(context, line, line + diff - 1)
    else:
        log(""trim_whitespace_remember_line: line changed, current line %d"" % line)
        lines = my_get(""modified_lines"")
        line = str(line) + "" ""
        if lines.rfind("" "" + line) == -1:
            lines = lines + line
            my_let(context, ""modified_lines"", lines)

    my_let(context, ""line_count"", line_count)

    log(""trim_whitespace_remember_line: new lines = '%s'"" % my_get(""modified_lines""))
</code></pre>

<h2>Clarification</h2>

<p>This all is needed because I often work on projects with a legacy codebase where no one paid attention to trailing whitespace and/or sanity of code formatting altogether.</p>

<p>Trimming <em>all</em> trailing whitespace produces a diff polluted with unrelated changes all over the file, which makes troubles at code review. Hence, I want to avoid trimming whitespace on unchanged lines, but at the same time ensure that there is no trailing whitespace introduced by <em>me</em>.</p>
","<p>Is your concern about performance?  Calling out to Python code will add unneeded overhead that would make an attempt at performance optimization moot.  In any case, you can get the boundaries with <code>getpos()</code> using the marks <code>'[</code> and <code>']</code></p>

<pre><code>let start = getpos(""'["")[1:2]
let end = getpos(""']"")[1:2]
</code></pre>

<p>However, I think you may be over-engineering the problem.  The solution can be much simpler using <code>autocmd</code>'s depending on when you want the trailing whitespace trimmed:</p>

<h3>After leaving insert mode</h3>

<pre><code>autocmd InsertLeave * '[,']s/\s\+$//e | normal! `^
</code></pre>

<p>Using the marks mentioned above, replace trailing whitespace only on the last inserted lines.  The <code>/e</code> flag ignores the ""pattern not found error"".  <code>normal! `^</code> returns your cursor to the last insert position.</p>

<h3>On TextChanged</h3>

<pre><code>autocmd TextChanged * silent! '[,']s/\s\+$//e | normal! `.
</code></pre>

<p>The same as above, but with <code>silent!</code> since the marks may be invalid after a delete/undo.  <code>normal! `.</code> returns the cursor to the last change position.</p>

<h3>When the buffer is saved</h3>

<pre><code>autocmd BufWritePre * g/\s\+$/s///e
autocmd BufWritePost * normal! `^
</code></pre>

<p>This is the one I prefer since I don't like surprises while I'm typing.  It uses <code>:global</code> to first find lines that have trailing whitespace.  Then the <code>s///e</code> substitution reuses the pattern from <code>:global</code> to remove the trailing whitespace. The <code>BufWritePost</code> autocmd puts your cursor back after the buffer is saved.</p>

<h3>When the buffer is saved (A better implementation)</h3>

<pre><code>function! s:strip_whitespace()
    let saved = @/
    let l = line(""."")
    let c = col(""."")
    %s/\s\+$//e
    let @/ = saved
    call cursor(l, c)
endfunction

autocmd BufWritePre * call s:strip_whitespace()
</code></pre>

<p>This one is wrapped in a function that restores the previous search and cursor position.  It uses <code>:%s</code> which operates on all buffer lines.  <code>g/\s\+$/s///e</code> already does this, but the pattern would match twice on each line.</p>

<h3>Remove blank lines</h3>

<p>In case you want to also remove blank lines, you can again use <code>:global</code> to find and remove them, e.g. <code>'[,']g/^\s*$/normal! ""_dd</code></p>
","8031"
"How can I unmap <esc> key in vim, it keeps reverting despite setting it in .vimrc?","479","","<p>Hi I am having some issue trying to unmap this key in my .<strong>vimrc</strong>. I've tried a lot of suggestions and remapping but it seems to be resetting itself every time.</p>

<pre><code>unamp &lt;Esc&gt; 
unmap! &lt;Esc&gt;
map &lt;Esc&gt;^[ &lt;Esc&gt;^[
map &lt;Esc&gt; &lt;Nop&gt;
</code></pre>

<p>Everytime I open a file in vim and type the following in command mode:</p>

<pre><code>:map &lt;Esc&gt;
</code></pre>

<p>The following shows up and I want to get rid of the <code>n &lt;Esc&gt; *:bprevious&lt;CR&gt;</code> mapping completely, that is not in my .<code>vimrc</code> file but it keeps resetting.</p>

<pre><code>n &lt;Esc&gt;     * :bprevious&lt;CR&gt;
  &lt;Esc&gt;^[     &lt;Esc&gt;^[
ov &lt;Esc&gt;      &lt;Nop&gt;
</code></pre>

<p>The out from the command suggested in the comment: </p>

<pre><code>:verbose :map &lt;Esc&gt;
</code></pre>

<p><strong>Result:</strong></p>

<pre><code>n  &lt;Esc&gt;     * :bprevious&lt;CR&gt;
       Last set from ~/.vimrc
   &lt;Esc&gt;^[   [Esc]^[
       Last set from ~/.vimrc
ov &lt;Esc&gt;     &lt;Nop&gt;
   Last set from ~/.vimrc 
</code></pre>

<p>I've checked my .<code>vimrc</code> and I definitely don't have it set.</p>
","<p><kbd>Ctrl</kbd>-<kbd>[</kbd> <a href=""http://vim.wikia.com/wiki/Avoid_the_escape_key"">is the the same as ESC</a>, as mentioned in <code>:help &lt;Esc&gt;</code>:</p>

<pre><code>notation    meaning         equivalent  decimal value(s)    ~
-----------------------------------------------------------------------
&lt;Nul&gt;       zero            CTRL-@    0 (stored as 10) *&lt;Nul&gt;*
&lt;BS&gt;        backspace       CTRL-H    8 *backspace*
&lt;Tab&gt;       tab         CTRL-I    9 *tab* *Tab*
                            *linefeed*
&lt;NL&gt;        linefeed        CTRL-J   10 (used for &lt;Nul&gt;)
&lt;FF&gt;        formfeed        CTRL-L   12 *formfeed*
&lt;CR&gt;        carriage return     CTRL-M   13 *carriage-return*
&lt;Return&gt;    same as &lt;CR&gt;                *&lt;Return&gt;*
&lt;Enter&gt;     same as &lt;CR&gt;                *&lt;Enter&gt;*
&lt;Esc&gt;       escape          CTRL-[   27 *escape* *&lt;Esc&gt;*
</code></pre>
","5802"
":silent makes my vim go blank","476","","<p>When I used <code>:silent</code> to run a terminal command in the background, my vim screen goes blank, until I navigate through my code, at which point each line I move to reappears. </p>

<p>What gives?</p>
","<p>This works as designed, and is documented under <code>:help :silent</code>:</p>

<blockquote>
<pre><code>      "":silent"" will also avoid the hit-enter prompt.  When
      using this for an external command, this may cause the
      screen to be messed up.  Use |CTRL-L| to clean it up
      then.
</code></pre>
</blockquote>

<p>You can also use the <code>:redraw</code> command.</p>
","2810"
"What is the difference between :quit and :close commands?","476","","<p>In vim docs, the description is very similar:</p>

<p>Quit:</p>

<pre><code>:q[uit]
:{count}q[uit]
CTRL-W q                        *CTRL-W_q*
CTRL-W CTRL-Q                       *CTRL-W_CTRL-Q*
    Without {count}: Quit the current window.  If {count} is
    given quit the {count} window.

    When quitting the last window (not counting a help window),
    exit Vim.

    When 'hidden' is set, and there is only one window for the
    current buffer, it becomes hidden.  When 'hidden' is not set,
    and there is only one window for the current buffer, and the
    buffer was changed, the command fails.

    (Note: CTRL-Q does not work on all terminals).

    If [count] is greater than the last window number the last
    window will be closed: &gt;
        :1quit  "" quit the first window
        :$quit  "" quit the last window
        :9quit  "" quit the last window
             "" if there are less than 9 windows opened
        :-quit  "" quit the previews window
        :+quit  "" quit the next window
        :+2quit "" quit the second next window
</code></pre>

<p>Close:</p>

<pre><code>:clo[se][!]
:{count}clo[se][!]
CTRL-W c                    *CTRL-W_c* *:clo* *:close*
    Without {count}: Close the current window.  If {count} is
    given close the {count} window.

    When the 'hidden' option is set, or when the buffer was
    changed and the [!] is used, the buffer becomes hidden (unless
    there is another window editing it).

    When there is only one window in the current tab page and
    there is another tab page, this closes the current tab page.
    |tab-page|.

    This command fails when:            *E444*
    - There is only one window on the screen.
    - When 'hidden' is not set, [!] is not used, the buffer has
      changes, and there is no other window on this buffer.
    Changes to the buffer are not written and won't get lost, so
    this is a ""safe"" command.
</code></pre>
","<p>Open Vim and enter <code>:close</code>. You'll get:</p>

<pre><code>E444: Cannot close last window
</code></pre>

<p>And this is the difference. We can also see this in the source implementation (from <code>ex_docmd.c</code>):</p>

<pre><code>/*
 * "":quit"": quit current window, quit Vim if the last window is closed.
 */
    static void
ex_quit(exarg_T *eap)
</code></pre>



<pre><code>/*
 * "":close"": close current window, unless it is the last one
 */
    static void
ex_close(exarg_T *eap)
</code></pre>

<p>Furthermore, if you compile Vim without window support only <code>:quit</code> is available (almost all − if not all − Vim builds are compiled with window support).</p>
","9480"
"Don't touch file upon write if the file was not changed","475","","<p>Occasionally I absentmindedly type <code>:w</code> when I'm reading something. This causes the modification time of the file to change and sometimes causes my build system to unnecessarily rebuild a substantial chunk of a project.</p>

<p>Is there a way to set vim to simply not do anything if I try to write a file and it hasn't been changed?</p>
","<p>Extending @lcd047's answer you can use <code>cabbrev</code> to modify <code>w</code></p>

<pre><code>:cabbrev w &lt;c-r&gt;=(getcmdtype()==':' &amp;&amp; getcmdpos()==1 ? 'up' : 'w')&lt;CR&gt;
</code></pre>

<p>When you type <code>:w</code> you will notice that it will be replaced with <code>:up</code> when you press return.</p>
","2929"
"Is there a way to set an abbreviation in a modeline so it is always available local to one file buffer?","475","","<p>I have a handful of files (LaTeX documents) that have one specific proper name that is really obnoxious to type out but used frequently. I've eased the pain of this with an abbreviation like so:</p>

<pre><code>iab Eİ Elçilerin İşleri
</code></pre>

<p>This works great, but I don't want to pollute my global vimrc with document specific hacks like this. Is there a way to set an abbrieviation in the modeline? I tried appending it as is, but modelines appear to only work with <code>set</code> commands.</p>
","<p>As it has been said, it's not possible by design.</p>

<p>If you want something like modelines, you'll have to write your own plugin. In the early 2000 I wrote <a href=""https://github.com/LucHermitte/lh-misc/blob/master/plugin/let-modeline.vim"" rel=""nofollow"">let-modeline</a> that decodes a slightly different format of modelines (i.e. <code>Vim: let var=expr</code>) to set variables. </p>

<p>For something more complex than a variable, I'd also use a local vimrc. However I wouldn't use <code>.exrc</code> that works only for files in the same directory where the <code>.exrc</code> file is. Plugins like <a href=""https://github.com/LucHermitte/local_vimrc"" rel=""nofollow"">local_vimrc</a> support hierarchies of directories.</p>
","2551"
"Is there any vim plugin that implement hot exit feature from sublime text","475","","<p>Hot exit is one of killer features of Sublime Text editor. It allows to close editor at any point of time without worrying about modifications in opened files - it just closes without any question. When launch ST again all opened and edited files will be at the same state as they were before close</p>

<p>I wonder is there a way doing the same in vim?</p>
","<p>Vim can do this, though it may be a bit clunky and take some setup.</p>

<p><a href=""https://vi.stackexchange.com/a/5794/2736"">romainl</a> gets you partway with <code>session</code>. The missing bits are swap files, <code>:preserve</code>, and the <code>&amp;</code> flag for <code>cpoptions</code>.</p>

<p>Swap files are intended for recovery if Vim or your system crashes. They enable you to recover any unsaved changes (with some limitations, see <code>:he swap-file</code>). However, when Vim exits normally, it deletes any swap files it was using, even if the buffer had unsaved changes.</p>

<p>That's where <code>:preserve</code> and <code>cpoptions</code>'s <code>&amp;</code> come in. <code>:preserve</code> forces Vim to write all buffers to their swap files immediately (as opposed to the standard after 4 seconds or 200 characters, or whatever your options have set it to). Doing <code>:set cpoptions+=&amp;</code> tells Vim <em>not</em> to delete swap files saved with <code>:preserve</code> when exiting normally.</p>

<p>Unfortunately, Vim does not automatically clean up swap files when recovering from them, so you can soon end up with a directory looking like this:</p>

<pre><code>.foo.txt.swn
.foo.txt.swo
.foo.txt.swp
foo.txt
</code></pre>

<p>You can delete the older ones manually, but Vim will only automatically offer to recover if there is a <code>*.swp</code> file where it would put its new swap file. The <code>:recover</code> command will force Vim to look for swap files to recover from.</p>

<p>By using autocommands, you can automate preserving (probably with the <code>QuitPre</code> event) and recovering (probably with <code>BufRead</code> or <code>BufReadPost</code>). <a href=""https://github.com/chrisbra/Recover.vim"" rel=""nofollow noreferrer"">Recover.vim</a> is a plugin that might work as a friendlier alternative for managing recovering. It appears to also handle cleaning up swap files. I'm not sure how it would handle a directory with a <code>.swo</code> but no <code>.swp</code> file. You may still need to use <code>:recover</code> for that case.</p>

<p><a href=""https://github.com/tpope/vim-obsession"" rel=""nofollow noreferrer"">vim-obsession</a> is another plugin that claims to make handling sessions much easier.</p>
","5798"
"How does p command work in vim?","474","","<p>I'm experimenting with vim and got a little stuck with the <code>p</code> command and the way it works. </p>

<pre><code>TEST Data to copy //copy from here

test data to copy //line for experiments
</code></pre>

<p>RESULTS:</p>

<pre><code>tTEST est data // cursor at the beginning, ""TEST "" pasted with p
TEST test data // cursor at the beginning, ""TEST "" pasted with P

test data      // cursor at the begining, pasted the whole line with p
TEST Data to copy

TEST Data to copy
test data     // cursot at the beginning, pasted the whole line with P
</code></pre>

<p>I thought, <code>p</code> pastes after the current cursor position, but pasting a line with it does not work this way.</p>

<p>So, if we paste a word with <code>p</code>, it will be pasted after the character, the cursor points to. But if we yank the whole line it will be pasted after the line the cursor was at when we pressed <code>p</code>.</p>

<p><strong><em>QUESTION:</em></strong> How does it actually work?</p>
","<p><code>p</code> and <code>P</code> always work the same way:</p>

<ul>
<li><code>p</code> puts text <em>after</em> the cursor,</li>
<li><code>P</code> puts text <em>before</em> the cursor.</li>
</ul>

<p>But what you put with <code>p</code> and <code>P</code> can be ""character-wise"", ""line-wise"", or ""block-wise"". This means that the end result varies not because of <code>p</code> and <code>P</code> but because of the nature of what you put.</p>

<h2>Character-wise text</h2>

<p>The text you put is ""character-wise"" if it was yanked with a character-wise motion or from character-wise visual mode.</p>

<p>Examples: <code>yiw</code>, <code>y}</code>, <code>vf)y</code>, etc.</p>

<p>If you put <em>character-wise</em> text with <code>p</code>, the text is put <em>inline</em>, after the cursor:</p>

<pre><code>foo bar baz              source line
   ^^^^                  you yanked "" bar""

lorem ipsum dolor        destination line
    ^                    the cursor is on the ""m"" of ""lorem""

lorem bar ipsum dolor    result
</code></pre>

<p>With <code>P</code>, the text is put <em>inline</em>, before the cursor:</p>

<pre><code>lore barm ipsum dolor    result
</code></pre>

<h2>Line-wise text</h2>

<p>The text you put is ""line-wise"" if it was yanked with a line-wise motion or from line-wise visual mode.</p>

<p>Examples: <code>yip</code>, <code>y3j</code>, <code>V25jy</code>, etc.</p>

<p>If you put <em>line-wise</em> text with <code>p</code>, the text is put <em>below</em> the current line:</p>

<pre><code>foo bar baz              source line
^^^^^^^^^^^              you yanked the whole line, including the newline character

lorem ipsum dolor        destination line
    ^                    the cursor is on the ""m"" of ""lorem""

lorem ipsum dolor        result
foo bar baz
</code></pre>

<p>With <code>P</code>, the text is put <em>above</em> the current line:</p>

<pre><code>foo bar baz              result
lorem ipsum dolor
</code></pre>

<h2>Block-wise text</h2>

<p>The text you put is ""block-wise"" if it was yanked from block-wise visual mode.</p>

<p>Example: <code>&lt;C-v&gt;iw6jy</code>, etc.</p>

<p>If you put <em>block-wise</em> text with <code>p</code>, the text is put <em>inline</em>, after the cursor, and overwrites any character in his way:</p>

<pre><code>foo 000 baz              source text
foo 000 bar              the yanked text is the column of zeroes
baz 000 bar

lorem ipsum dolor        destination text
lorem ipsum dolor        the cursor is on the ""m"" of the first ""lorem"" 
lorem ipsum dolor

lorem000 ipsum dolor     result
lorem000 ipsum dolor
lorem000 ipsum dolor
</code></pre>

<p>With <code>P</code>, the text is put <em>inline</em>, before the cursor, and overwrites any character in his way:</p>

<pre><code>lore000m ipsum dolor     result
lore000m ipsum dolor
lore000m ipsum dolor
</code></pre>
","9657"
"How to manage fugitive commit with a git pre-commit hook?","474","","<p>When working on a git project in vim, I use the <a href=""https://github.com/tpope/vim-fugitive"" rel=""nofollow"">fugitive</a> plugin.</p>

<p>I like to open a <code>:Gstatus</code> split, press <code>-</code> to add file and then press <code>C</code> to commit my changes. I also have a git pre-commit hook, it runs some test. In case of an error, it prompts me
to make sure if I still want to commit.</p>

<p>But, when following this pattern, I don't see the output for the tests, neither the final prompt. Instead, vim freezes while the tests are running.</p>

<p>How would I make fugitive and a pre-commit hook get along together smoothly?</p>

<p>Update: This is the prompt in the git pre-commit hook:</p>

<pre><code>#!/bin/bash
exec &lt; /dev/tty

while true; do
  read -p ""There were some errors in the test, do you still want to commit? (Y/n) "" yn
  if [ ""$yn"" = """" ]; then
    yn='Y'
  fi
  case $yn in
      [Yy] ) break;;
      [Nn] ) exit;;
      * ) echo ""Answer y or n."";;
  esac
done
</code></pre>
","<p>On line 1019 of <code>plugin/fugive.vim</code> we can see how the <code>:Gcommit</code> command executes <code>git</code>:</p>

<pre><code>noautocmd silent execute '!'.command.' &gt; '.outfile.' 2&gt; '.errorfile
</code></pre>

<p>With the variables replaced, the command looks like:</p>

<pre><code>!env GIT_EDITOR=false git --git-dir=/home/martin/git-test/.git commit  &gt; /tmp/vC4Lbak/1 2&gt; /tmp/vC4Lbak/2
</code></pre>

<p>Notice the <code>env GIT_EDITOR=false</code>, this is just to prepare the <code>.git/COMMIT_EDITMSG</code> and checking if any error occurred! We then open a new buffer with <code>COMMIT_EDITMSG</code> which the user can edit, and after this is saved, we run <code>git commit</code> again.</p>

<p>Fugitive also uses stderr for error checking, and the pre-commit hook outputs to stderr (not stdout!)</p>

<p>You could work around this by extensively modifying this function, but I would say that running interactive pre-commit hooks is incompatible with how <code>:Gcommit</code> works, the hook would be run twice, and you lose error detection.</p>

<p>So you'll have to run <code>git commit</code> from outside of Vim, or use <code>!git commit</code> from Vim which will work fine, except that it will launch a <em>second</em> Vim instance for the commit message (unless you use <code>-m</code>).</p>

<p>You can create a command for this like so:</p>

<pre><code>:command! Commit !git commit
</code></pre>
","2749"
"Add tab in front of each line","473","","<p>I'm working with python code. After some modifications, I want to update the identation but obviously, select everything and press '=' doesn't work, python being python.</p>

<p>So, is there any other way to add (and/or remove) some character (here, tabs) at the beggining of each line ?</p>
","<p>As Sato mentioned in comments, <code>:help v_&gt;</code> will show you help for the best tool you can use for this.  <code>&gt;&gt;</code> in normal mode will indent the current line; <code>&gt;3&gt;</code> will indent the current line and the following two lines; <code>&lt;&lt;</code> will decrease indentation.</p>

<p>Another feature that works will in combination with <code>&gt;</code> can be found at <code>:help text-objects</code>.  (<code>aB</code>, <code>a[</code>, and so on.)  For example in C-style code that uses curly braces, <code>&gt;aB</code> or <code>&gt;iB</code> to indent the current block <em>including</em> curly braces, or only indent the lines <em>between</em> the curly braces, respectively.  For Python code, <code>&gt;ap</code> (indent a paragraph) may be more useful, but using visual mode to select the lines as described in <code>:help v_&gt;</code> is even more adjustable.</p>

<p>For the general answer to ""How to add a character/some text at the beginning of each line?"" i.e., when you want to insert something other than tabs or spaces, there are a couple ways:</p>

<p><code>:%normal Itext to insert</code> will prepend <code>text to insert</code> to every line in the file.  <code>%</code> can be replaced with any range you like.  (See <code>:help range</code> and also <code>:help :normal</code>)</p>

<p>Or you can use <kbd>Ctrl</kbd><kbd>v</kbd>to enter blockwise-visual mode, use <code>j</code> and <code>k</code> to select a column of characters, then <code>I</code> (capital) to insert text at that point in <em>all</em> selected lines.  (It will only be visible in all the lines after you <kbd>Esc</kbd> and then make another motion of any sort.)  This has the advantage that you can enter text at ANY point in the line, not only at the beginning.  (See <code>:help v_b_I</code>)</p>
","5124"
"How to treat underscores like space?","472","","<p>Is it possible for vim to treat underscores like spaces or hypens, so when I use the sequence <code>dw</code>, it doesn't delete whole sentence <code>some_long_text_with_underscores</code>, when the cursor is at the beginning?</p>
","<p><code>dw</code> deletes a word, and what constitutes a word is defined by the <a href=""http://vimhelp.appspot.com/options.txt.html#%27iskeyword%27""><code>iskeyword</code></a> setting. From <a href=""http://vimhelp.appspot.com/motion.txt.html#word""><code>:h word</code></a>:</p>

<pre><code>                                                        word
A word consists of a sequence of letters, digits and underscores, or a
sequence of other non-blank characters, separated with white space (spaces,
tabs, &lt;EOL&gt;).  This can be changed with the 'iskeyword' option.  An empty line
is also considered to be a word.
</code></pre>

<p>To remove <code>_</code> from <code>iskeyword</code>, do:</p>

<pre><code>set iskeyword-=_
</code></pre>
","4882"
"Keeping personal vimrc and syntax files etc in source control?","472","","<p>I am trying to create a (git) repository for my vim files. Now, I am already struggling as to what directory I would store my files under. As far as I can see there is either <code>%HOME%</code> or <code>%VIM%</code>, right? Naturally, I feel more inclined to use <code>%VIM%</code>. So I go</p>

<pre><code>set VIM=x:\path\to\repo

cd %VIM%

notepad vimrc
</code></pre>

<p>to create a basic vimrc file in my repo. The <code>vimrc</code> also contains <code>syntax enable</code>. Now, when I start gvim and the startup process reaches the <code>syntax enable</code> line, it gives an error message:</p>

<blockquote>
  <p>Error detected while processing x:\path\to\repo\vimrc<br>
  line 86<br>
  E484: Can't open file x:\path\to\repo\syntax\syntax.vim</p>
</blockquote>

<p>This seems to be because vim automatically sets <code>$VIMRUNTIME</code> to the value of <code>$VIM</code> if <code>$VIM</code> is set. This is of course not what I want, since I was happy with vim's default determining of <code>$VIMRUNTIME</code> at startup. Neither do I want to globally set <code>%VIMRUNTIME%</code> as I don't want to change it if I install a newer vim version.</p>

<p>So, what is the canonical way to keep my personal vim files in a repository?</p>
","<p>Since 7.4, all your configuration files (even your vimrc) are expected to be in this directory:</p>

<pre><code>%userprofile%\vimfiles\
</code></pre>

<p>But the name and location of that directory only matter to Vim. From Git's point of view, that directory could as well be <code>/etc/foo/bar/</code> without any impact whatsoever.</p>

<p>So...</p>

<ol>
<li>put your <code>vimrc</code> and all your third-party scripts in  <code>%userprofile%\vimfiles\</code>,</li>
<li>put that directory under version control.</li>
</ol>

<p>When you need to clone your repo on a unix-like system you do:</p>

<pre><code>$ git clone &lt;remote url&gt; ~/.vim
</code></pre>

<p>or, in git bash on Windows:</p>

<pre><code>$ git clone &lt;remote url&gt; $HOME/vimfiles
</code></pre>

<p>No need to mess with environment variables.</p>
","4030"
"How can I get python library help in vim?","471","","<p>I tried python-mode, it seems that it can work when I press <kbd>K</kbd> on ""numpy.array"", but if I want to press <kbd>K</kbd> on ""np.array"", it won't work.</p>
","<p>Try using the <a href=""https://github.com/davidhalter/jedi-vim"">vim-jedi</a> plugin.  It uses <a href=""https://github.com/davidhalter/jedi"">Jedi</a> to get completions and is much better at doing so than python-rope is.  It will resolve <code>np.array</code> to <code>numpy.array</code> and show the appropriate documentation in a tab/split.  Be warned that numpy is notoriously slow for Jedi to resolve when it's not cached.</p>

<p>zondo's suggestion to use <code>:!pydoc numpy.array</code> does work, but I find it annoying because I can't use Vim mappings to navigate the output, yank text from it, or leave it open for reference.  There's also the issue of using a virutalenv, which may not have <code>pydoc</code> in the virtualenv's <code>$PATH</code>.  In that case, you would have to use: <code>:!python -m pydoc numpy.array</code>.</p>
","7690"
"How to change all numbers in file into float format","471","","<p>I have a file containing nothing but integers and words, separated by arbitrary numbers of spaces, along the following lines:</p>

<pre><code>1 alpha plural 1   0
6   1440
3 1 4 1 5 9 2 6 5 3 5 8 9
2 7 1 8 2 8 1 8 2 8 4 5 9
42   972 insert point here
16 7 88
</code></pre>

<p>But the software that a third party has written to <em>read</em> that file requires that it be floating point.</p>

<p>So, how can I add <code>.0</code> to all the numbers, and leave the words and spacing intact?</p>
","<p>I think the following substitution would be sufficient:</p>

<pre><code>:%s/\&lt;\d\+\&gt;/&amp;.0/g
</code></pre>

<p>The effect:</p>

<pre><code>1.0 alpha plural 1.0   0.0
6.0   1440.0
3.0 1.0 4.0 1.0 5.0 9.0 2.0 6.0 5.0 3.0 5.0 8.0 9.0
2.0 7.0 1.0 8.0 2.0 8.0 1.0 8.0 2.0 8.0 4.0 5.0 9.0
42.0   972.0 insert point here
16.0 7.0 88.0
</code></pre>

<ul>
<li><code>\d</code> matches digits, <code>&amp;</code> is the text that matched the whole pattern.</li>
<li>We use word boundaries (<code>\&lt;</code> and <code>\&gt;</code>) so that digits in the middle of a word are not affected.</li>
</ul>
","2034"
"Jumping from function definition tag to prototype tag","471","","<p>As far as I understand Vim has a built-in support for tags (<code>ctags</code> in this case)</p>

<p>Now I have a common C source and C header file. The header file has <code>void foo(void);</code> and the source file has <code>void foo(void) { /* */ }</code>.</p>

<p>Now when I'm in the source file, I can use <code>:tags foo</code>, it will jump to the function definition in the source file. But if I use <code>:tnext</code> now, it won't jump to the function declaration in the header file.</p>

<p>I feel like this should be somehow possible. Is it?</p>
","<p>Okay I've done it:</p>

<p>It all has to do with <code>ctags</code>:
First create two files called <code>foo.c</code> and <code>foo.h</code> to test it:
In <code>foo.h</code> write down:</p>

<pre><code>int bar(void);
</code></pre>

<p>In <code>foo.c</code> write down:</p>

<pre><code>int bar(void) { /* */ }
</code></pre>

<p>And in the directory where those two files is, execute:</p>

<pre><code>ctags --list-kinds
</code></pre>

<p>You get a long list of languages with there types of tags. Find C. Notice the following line:</p>

<blockquote>
  <p>p  function prototypes [off]</p>
</blockquote>

<p>I would call it <em>function declaration</em> but anyway. So you need to activate tags for <em>function prototypes</em> when executing <code>ctags</code>. You do that by calling:</p>

<pre><code>ctags -R --c-kinds=+p
</code></pre>

<p>Notice that the same applies to any other languages, e.g.:</p>

<pre><code>ctags -R --java-kinds=+l
</code></pre>

<p>Now you can open <code>foo.c</code> (<code>vim foo.c</code>) and enter <code>:tag bar</code>. It will show you the function definition. Enter <code>:tnext</code> and you will jump into <code>foo.h</code> to the declaration of <code>bar</code>.</p>

<p>However also notice that <code>ctags</code> doesn't care about correctness. E.g. the <code>bar</code> declaraction couldn't even apply to the definition of <code>bar</code>, as I havn't included the header file.</p>
","8206"
"Vim `cpp` Syntax highlighter prematurely ends macros mid-word","471","","<p><strong>NOTE:</strong> This question is a ""manual migration"" from here: <a href=""https://superuser.com/q/875751/199803"">https://superuser.com/q/875751/199803</a></p>

<hr>

<p>My Vim syntax highlighter for <code>ft=cpp</code> is prematurely ending some macros mid-line. For example:</p>

<p><img src=""https://i.stack.imgur.com/ZL4HY.png"" alt=""highlighting error example""></p>

<p>(The italicization may make this example a little hard to understand; the final character in the second line is <code>\</code>.)</p>

<p>This is part of a multi-line macro; note that the transition from blue (the ""macro"" style) to grey and italicized (the ""comment"" style) occurs *mid-word. </p>

<p>Does anyone have any ideas what's going on here? I tried googling to see if this was a known issue, but I didn't see anyone stating that they had this particular problem.</p>

<p>I'm using <code>vim-gtk</code> (Vim 7.4) from the Wheezy-Backports repo.</p>

<hr>

<p>It appears that the macro highlighting style ends as soon as the first <code>0</code> is encountered anywhere other than at the start of a token. For instance, the number <code>0</code> itself does not end the macro, nor does the word <code>0DIAGNOSTIC</code>, but <code>DIAGNOSTIC0</code> <em>does</em> (regardless of what follows the <code>0</code>).</p>

<hr>

<p>Since the problem is reproducible even with <code>-N -u NONE</code> (see comments on Ingo Karkat's answer), here's the complete output of <code>vim --version</code>, just in case it's helpful:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 14 2014 15:36:29)
Included patches: 1-488
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version with GTK2 GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
+balloon_eval    +float           +mouse_urxvt     -tag_any_white
+browse          +folding         +mouse_xterm     +tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
+clientserver    -hangul_input    +netbeans_intg   +title
+clipboard       +iconv           +path_extra      +toolbar
+cmdline_compl   +insert_expand   +perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con_gui  +lua             +rightleft       +windows
+diff            +menu            +ruby            +writebackup
+digraphs        +mksession       +scrollbind      +X11
+dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     +xim
+emacs_tags      +mouseshape      -sniff           +xsmp_interact
+eval            +mouse_dec       +startuptime     +xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    +xpm
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  system gvimrc file: ""$VIM/gvimrc""
    user gvimrc file: ""$HOME/.gvimrc""
2nd user gvimrc file: ""~/.vim/gvimrc""
    system menu file: ""$VIMRUNTIME/menu.vim""
  fall-back for $VIM: ""/usr/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/i386-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12     -g -O2 -fPIE -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1     -I/usr/include/tcl8.5  -D_REENTRANT=1  -D_THREAD_SAFE=1  -D_LARGEFILE64_SOURCE=1  
Linking: gcc   -L. -Wl,-z,relro -rdynamic -Wl,-export-dynamic -Wl,-E  -fPIE -pie -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lglib-2.0   -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm  -L/usr/lib -llua5.2 -Wl,-E  -fstack-protector -L/usr/local/lib  -L/usr/lib/perl/5.14/CORE -lperl -ldl -lm -lpthread -lcrypt -L/usr/lib/python2.7/config -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions  -L/usr/lib -ltcl8.5 -ldl -lpthread -lieee -lm -lruby-1.9.1 -lpthread -lrt -ldl -lcrypt -lm  -L/usr/lib   
</code></pre>

<hr>

<p>I'm using the <a href=""http://www.vim.org/scripts/script.php?script_id=383"" rel=""nofollow noreferrer"">SyntaxAttr plugin</a> to get information about the last macro-highlighted character and the first comment-highlighted character.</p>

<p>Last macro character: <code>group: cDefine-&gt;PreProc guifg=5(5) guibg=-1(-1)</code>
First non-macro character: <code>cCppOut2-&gt;Comment guifg=6(6) guibg=-1(-1)</code></p>

<hr>

<p>The output of <code>:scriptnames</code>:</p>

<pre><code>1: /usr/share/vim/vim74/menu.vim
2: /usr/share/vim/vim74/autoload/paste.vim
3: /usr/share/vim/vim74/syntax/syntax.vim
4: /usr/share/vim/vim74/syntax/synload.vim
5: /usr/share/vim/vim74/syntax/syncolor.vim
6: /usr/share/vim/vim74/filetype.vim
7: /usr/share/vim/vim74/syntax/cpp.vim
8: /usr/share/vim/vim74/syntax/c.vim
</code></pre>
","<p><code>cCppOut2</code> comes from <code>c.vim</code>:</p>

<pre><code>syn region  cCppOut2    contained start=""0"" end=""^\s*\(%:\|#\)\s*\(endif\&gt;\|else\&gt;\|elif\&gt;\)"" contains=cSpaceError,cCppSkip
</code></pre>

<p>It is <code>contained</code>, and the definition for <code>cDefine</code> is:</p>

<pre><code>syn region  cDefine     start=""^\s*\(%:\|#\)\s*\(define\|undef\)\&gt;"" skip=""\\$"" end=""$"" keepend contains=ALLBUT,@cPreProcGroup,@Spell
</code></pre>

<p>The use of the special <code>ALLBUT</code> value at the start of the contains list means that everything except the listed groups can be contained in <code>cDefine</code>... including <code>cCppOut2</code>. </p>

<p>Prior to <a href=""https://code.google.com/p/vim/source/diff?spec=svnbd18da914be9d43a70713f6af02770a0d3280159&amp;r=bd18da914be9d43a70713f6af02770a0d3280159&amp;format=side&amp;path=/runtime/syntax/c.vim"" rel=""nofollow"">October 2nd, 2014</a>, the definition of <code>cCppOut2</code> was guarded by <code>c_no_cformat</code> existing (which is not the case by default) and thus you could only experience this by setting that option to some value. You can thus fix it by unletting that option (reload the file via <code>:e</code> afterwards).</p>

<p>As of the October 2nd change, however, <code>cCppOut2</code> is <em>always</em> defined, so this bug will be much more prevalent. This was reported as a bug in <code>c.vim</code> (<a href=""https://groups.google.com/forum/#!topic/vim_dev/W3nUTRhOeUo"" rel=""nofollow"">here</a>). </p>

<p>If your version of vim is built with the October 2nd changes, your options are to:</p>

<ul>
<li><p>Re-link <code>cCppOut2</code> to <code>cDefine</code> to ""hide"" the problem until an official fix makes it in. To do this in <code>.vimrc</code>:</p>

<pre><code>`hi link cCppOut2 PreProc`
</code></pre></li>
<li><p>Attempt the fix yourself, as described below.</p></li>
</ul>

<p>It appears that <code>@cStringGroup</code> should be listed in the contains set of the <code>cDefine</code> and <code>cPreProc</code> regions (added at the end, here):</p>

<pre><code>syn region  cDefine     start=""^\s*\(%:\|#\)\s*\(define\|undef\)\&gt;"" skip=""\\$"" end=""$"" keepend contains=ALLBUT,@cPreProcGroup,@Spell,@cStringGroup
syn region  cPreProc    start=""^\s*\(%:\|#\)\s*\(pragma\&gt;\|line\&gt;\|warning\&gt;\|warn\&gt;\|error\&gt;\)"" skip=""\\$"" end=""$"" keepend contains=ALLBUT,@cPreProcGroup,@Spell,@cStringGroup
</code></pre>
","2221"
"Vim lost custom highlight settings after recovering from sessions","471","","<p>I defined some highlights in the vimrc file and it works well in gvim. However after I <code>mksession</code> and sourced it back, I found that some (maybe all) of the custom highlights were lost and vim used the default settings of the colorscheme.<br>
The <code>sessionoptions</code> is <code>blank,buffers,curdir,folds,help,options,tabpages,winsize</code>.<br>
Snippet from my vimrc file:<br></p>

<pre><code>let current_color = """"

if has(""gui_running"")
    colorscheme desert
    let current_color = ""desert""
else
    colorscheme torte
    let current_color = ""torte""
endif

"" Section about changing color
if current_color == ""desert""
    hi LineNr guifg=DarkKhaki
    "" Or guibg=NavajoWhite1
    hi StatusLine guifg=black guibg=LightGoldenrod3
    hi PmenuSel guifg=black guibg=LightGoldenrod3
    "" Or guibg=Plum3
    hi Pmenu guifg=black guibg=RosyBrown
    hi CursorLine guibg=Grey27
elseif current_color == ""torte""
    hi CursorLine term=NONE cterm=NONE ctermbg=238
    hi Search term=reverse ctermfg=229 ctermbg=136
    hi StatusLine ctermfg=16 ctermbg=179 cterm=NONE
    hi StatusLineNC ctermfg=244 ctermbg=144 cterm=NONE
    hi Comment term=bold ctermfg=74
    hi Constant term=underline ctermfg=217
    hi LineNr term=underline ctermfg=143
    hi Folded ctermfg=220
    hi FoldColumn ctermfg=220
    hi Special ctermfg=214
    hi NonText ctermfg=152 ctermbg=239
    hi Visual ctermfg=186 ctermbg=64 cterm=NONE
    hi PmenuSel ctermfg=16 ctermbg=179 cterm=NONE
    hi Pmenu ctermfg=16 ctermbg=138
    hi ColorColumn ctermbg=88
    hi WarningMsg ctermfg=202
    hi ErrorMsg ctermfg=15 ctermbg=160
    hi Error ctermfg=15 ctermbg=160
endif
hi Modifier cterm=inverse ctermfg=118 gui=inverse guifg=#87ff00
hi StatuslineWarning cterm=inverse ctermfg=210 gui=inverse guifg=#ff8787
</code></pre>

<p>Any help? Thanks very much!</p>
","<p>Your last <a href=""https://vi.stackexchange.com/questions/5371/vim-lost-custom-highlight-settings-after-recovering-from-sessions#comment8261_5371"">comment</a> says that your default colorscheme is sourced twice : once before your custom highlight groups, and once after.</p>

<p>The second time it's loaded, your custom highlight groups must be overwritten.
I think the reason why your default theme is loaded a second time when you source your <a href=""https://gist.github.com/tamlok/89d124e70839c333f729"" rel=""nofollow"">Session.vim</a>, is because the latter includes this line (83) :</p>

<pre><code>set background=dark
</code></pre>

<p><code>:h 'background'</code> says :</p>

<blockquote>
  <p>When a color scheme is loaded (the ""g:colors_name"" variable is set)
  setting 'background' will cause the color scheme to be reloaded.</p>
</blockquote>

<p>So I suppose that when the <code>set background=dark</code> from your Session.vim is executed, your default theme is reloaded but not your custom colors because they are defined in a different place (your vimrc).</p>

<p>I don't know if it will work, but here are a few suggestions you could try :</p>

<ul>
<li><p>Delete this line from your Session.vim. This should solve the issue
now, but you will have to do it again every time you create a new
session with the <code>:mksession</code> command.</p></li>
<li><p>Change the value of the <code>sessionoptions</code> option.  </p>

<p>At the moment you say
it's <code>blank,buffers,curdir,folds,help,options,tabpages,winsize</code>.<br>
The <code>options</code> part is responsible for saving options (including the
<code>background</code> one) and mappings.  </p>

<p>You could use the following command before
saving the session or include it inside your vimrc : <code>set sessionoptions-=options</code></p>

<p>As a result, your <code>sessionsoptions</code> value will be
<code>blank,buffers,curdir,folds,help,tabpages,winsize</code> and your options
will not be saved anymore.</p></li>
<li><p>Write your custom highlight groups into a dedicated file (let's say custom_colors.vim) and then, inside your vimrc, add an autocmd that automatically source this file at the end of the startup. For example, something like this :</p>

<p><code>autocmd VimEnter * source /path/to/custom_colors.vim</code></p>

<p>Since this file should be sourced after Session.vim, its settings should not be overwritten.</p>

<p>Here I used the <code>VimEnter</code> event but you could also try the <code>SessionLoadPost</code> event :</p>

<p><code>autocmd SessionLoadPost * source /path/to/custom_colors.vim</code></p></li>
</ul>
","5395"
"What is '\%' and '\@' token's name in vim regex? And what does it do?","471","","<p>While editing syntax file, I found something like:</p>

<pre><code>\s*\%(\%(:\@&lt;!\/\/.*\)\=\|\%(\/\*.*\*\/\s*\)*\)$
</code></pre>

<p>I'm familiar with any other than <code>\%</code> and <code>\@</code> there. I can't even googling because I don't know what is it's name. So what it is and what it does?</p>
","<p>Before googling, try the doc:</p>

<p>From <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#E53""><code>:h \%</code></a></p>

<pre><code>\%(\)   A pattern enclosed by escaped parentheses.
    Just like \(\), but without counting it as a sub-expression.  This
    allows using more groups and it's a little bit faster.
    {not in Vi}
</code></pre>

<p>And <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C@&lt;!""><code>:h \@&lt;!</code></a></p>

<pre><code>\@&lt;!    Matches with zero width if the preceding atom does NOT match just
    before what follows.  Thus this matches if there is no position in the
    current or previous line where the atom matches such that it ends just
    before what follows.

    Like ""(?&lt;!pattern)"" in Perl, but Vim allows non-fixed-width patterns.
    The match with the preceding atom is made to end just before the match
    with what follows, thus an atom that ends in "".*"" will work.
    Warning: This can be slow (because many positions need to be checked
    for a match).  Use a limit if you can, see below.

    Example         matches ~

    \(foo\)\@&lt;!bar      any ""bar"" that's not in ""foobar""

    \(\/\/.*\)\@&lt;!in    ""in"" which is not after ""//""
</code></pre>
","9234"
"How to prevent ""echo"" output from being overwritten when leaving visual mode?","470","","<p>I am using gvim 7.4 on Windows (32 bit) and using the <a href=""http://www.vim.org/scripts/script.php?script_id=1191"">wc</a> word-counting macro <code>:WC</code> by jcline.  When I manually set a range and run the macro, e.g., <code>:'a,.WC&lt;CR&gt;</code>, I get the expected <code>counted XXX words</code> output.  <code>:WC</code> produces this using <code>echo ""counted "" . wc_count . "" words"" . stop</code>.  </p>

<p>Problem: when I select text in visual mode and then run the macro with, e.g., <code>vap:WC&lt;CR&gt;</code> (command line <code>'&lt;,'&gt;WC</code>), the ""<code>counted</code>"" output flickers for a moment and then disappears at the same time the visual highlighting disappears from the window.  Usually it is too fast for me to read the word count.</p>

<p>Question: Is there any way to leave the <code>echo</code> output visible when existing visual mode so that I can use visual mode to select the text input to <code>:WC</code>?</p>

<p>Thanks!</p>
","<p>I found a solution thanks to the lead from @lcd047, which I greatly appreciate!  I edited the script to run <code>redraw</code> before the <code>echo</code> per <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#:echo-redraw"" rel=""nofollow""><code>:help :echo-redraw</code></a>.  At least in my particular situation, the message now stays visible until I start scrolling.  The relevant portion of the script is below for anyone who would like it.</p>

<pre><code>func JCWC(line1, line2)
  let wc_start_line = 1
  let wc_end_line = 1
  if a:line2 &gt;= a:line1
    let wc_start_line = a:line1
    let wc_end_line = a:line2
  else
    let wc_start_line = a:line2
    let wc_end_line = a:line1
  endif

  let wc_count = 0

  let stop = """"
  let n = wc_start_line
  while n &lt;= wc_end_line
      let line = getline(n)
      if match(line, ""^--------"") &gt;= 0
          let stop = "" until '^--------'""
          break
      endif
      let c = JCWC_line(line)
      let wc_count = wc_count + c
      let n = n + 1
  endwhile

  redraw "" &lt;----- Added this
  echo ""counted "" . wc_count . "" words"" . stop

endfunc
</code></pre>
","3644"
"Change what vim displays when there is a fold","467","","<p>When I create a fold with <code>zfap</code>, vim displays something like:</p>

<pre><code>+--  15 lines: myFunctionPrototype :: Test -&gt; Test -&gt; Bool 
</code></pre>

<p>However, I would like vim not to display this number of lines.
I find this distracting, and not adding sufficient information in my case.</p>

<p>I'd prefer:</p>

<pre><code>+-- : myFunctionPrototype :: Test -&gt; Test -&gt; Bool
</code></pre>

<p>or even better:</p>

<pre><code>+-- myFunctionPrototype :: Test -&gt; Test -&gt; Bool
</code></pre>

<p>Is there a way to suppress the line count, or a way to modify what vim displays when there's a fold that I could put in my vimrc ?</p>
","<p>to put in <code>.vimrc</code>:</p>

<pre><code>set foldtext=MyFoldText()
function MyFoldText()
  let line = getline(v:foldstart)
  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
  return v:folddashes . sub
endfunction
</code></pre>

<p><code>MyFoldText</code> is now the function that is responsible for displaying some text, when some lines have been folded.</p>
","4650"
"How to put custom functions at bottom?","467","","<p>I want to organize my vimrc better, so I want to put all the custom functions at bottom:</p>

<pre><code>""different setting between different os
if MyDetectOS() ==? ""windows""
    set rtp+=~/vimfiles/bundle/Vundle.vim/
    let path='~/vimfiles/bundle'
else 
    set rtp+=~/.vim/bundle/Vundle.vim
endif
if MyDetectOS() ==? ""linux"" 
    set clipboard=unnamedplus
else
    set clipboard=unnamed
endif



function! MyDetectOS()
    if has(""win32"") || has(""win16"") || has(""win64"")
        return ""windows""
    elseif has(""mac"") || has(""macunix"")
        return ""mac""
    elseif has(""win32unix"")
        return ""cygwin""
    elseif has(""unix"")
        let l:uname = substitute(system(""uname""), '\n', '', '')
        if l:uname ==? ""linux""
            return ""linux""
        else
            return ""unix""
        endif
    endif
endfunction
</code></pre>

<p>If I put the <code>MyDetectOS</code> function at bottom like above. Then I'll get errors like below:</p>

<pre><code>E117: Unknown function: MyDetectOS
E15: Invalid expression: MyDetectOS() ==? ""linux""
</code></pre>

<p>Why it doesn't work?</p>
","<p>The way to understand this is that a function decleration is just an assignment, similar to <code>x = 2</code>.</p>

<p>So when you do:</p>

<pre><code>function! MyDetectOS()
    [...]
endfunction
</code></pre>

<p>You're really just doing:</p>

<pre><code>MyDetectOS = function!
    [...]
endfunction
</code></pre>

<p>So it doesn't work for the same reason that something like this doesn't work:</p>

<pre><code>a = 40 + b
b = 2
</code></pre>

<p>The reason that it does work in <em>some</em> languages, is that those languages use a more advanced parser; they will first look for all functions and assign references to them, and then do a second pass where the code is actually executed with those references in place. Note that neither method can be considered ""better"" than the other; the simpler method is more flexible in some ways and suited for functional programming, the more complex allows you to not worry so much about the order of code and is somewhat less surprising for some.</p>

<p>One technique that you can use to ""get around"" this is put most code in a function, and kick that off at the end:</p>

<pre><code>function! Main()
    if MyDetectOS() ==? ""windows""
        [...]
    endif
endfunction

function! MyDetectOS()
    [...]
endfunction

Main()
</code></pre>

<p>This way the entire file is read, before the actual code is being executed.</p>

<p>An alternative method putting your functions in a seperate file, and then use <code>source</code> to include that:</p>

<pre><code>source ~/.vim/functions.vim

if MyDetectOS() ==? ""windows""
    [...]
endif
</code></pre>
","5166"
"How to quickly add content in a new line at end of file?","466","","<p>I often have to add stuff at the end of a file, hence I go to the last line:</p>

<pre><code>:$
</code></pre>

<p>yet this is at the beginning of the line. Often I discover myself doing:</p>

<p><kbd>Ctrl</kbd> + <kbd>Arrow Right</kbd> to jump by word until I am at the end of the line.</p>

<p>Then I enter insert mode us via <code>a</code>, and hit Enter and do whatever I need there.</p>

<p>This feels overcomplicated. How to add content at the end of the file?</p>

<p>Bonus point if I can do it by just one command.</p>
","<h2>If file is already opened in normal mode</h2>

<p>Use:</p>

<pre><code>Go
</code></pre>

<ul>
<li><code>G</code> goes to the end of the file</li>
<li><code>o</code> enters insert mode on a line below the current one</li>
</ul>

<h2>If you are opening the file from the command line</h2>

<p>You can open vim on the last line of a file from the command line using:</p>

<pre><code>vim + filename
</code></pre>

<p>The <code>+</code> lets to specify the line number. Leaving it blank defaults to the last line of the file as explained in the man page:</p>

<pre><code>       +[num]      For the first file the cursor will be  positioned  on  line
                   ""num"".   If ""num"" is missing, the cursor will be positioned
                   on the last line.
</code></pre>

<p>Then you can use <code>o</code> as above to enter insert mode on the line below.</p>

<h2>What about inserting at the top of the file (or an arbitrary line number)?</h2>

<p>In normal mode <code>gg</code> can be used to jump to any line in the file by number. So <code>5gg</code> jumps to line 5. gg without a number is a shortcut for the first line of the file. </p>

<p>If you wanted to insert a line above the first line, you could do that with:</p>

<p><code>ggO</code></p>
","5633"
"How to resolve E303 (Unable to open swap file) on Linux machine?","466","","<p>I get E303 (<em>Unable to open swap file for ""{filename}"", recovery impossible</em>) when I open a file in vim in my Ubuntu system.</p>

<p>I see that the backupdir and directory environment variables are set correctly in vim -  </p>

<p><code>:se backupdir</code></p>

<blockquote>
  <p>backupdir=~/tools/Vim_Files/vim_backup</p>
</blockquote>

<p><code>:se directory</code></p>

<blockquote>
  <p>directory=~/tools/Vim_Files/vim_backup</p>
</blockquote>

<p>This is the output of ls -l in the shell -<br>
<code>ls -l ~/tools/Vim_Files/</code></p>

<blockquote>
  <p>drwxrwxr-x  2 me  me  4096 Oct 12 17:02 vim_backup</p>
</blockquote>

<p>This is the relevant portion of my .vimrc setting up these variables -  </p>

<pre><code>se nobackup writebackup
let s:vim_cstmztn_files_dir='~/tools/Vim_Files/'   
let &amp;directory=s:vim_cstmztn_files_dir.'vim_backup'
let &amp;backupdir=s:vim_cstmztn_files_dir.'vim_backup'
</code></pre>
","<p>Vim does not interpolate the <code>~</code> when using the <code>let &amp;</code> syntax.  You must do this manually using <code>expand()</code>.</p>

<pre><code>se nobackup writebackup
let s:vim_cstmztn_files_dir=expand('~/tools/Vim_Files/')
let &amp;directory=s:vim_cstmztn_files_dir.'vim_backup'
let &amp;backupdir=s:vim_cstmztn_files_dir.'vim_backup'
</code></pre>
","13910"
"How to iterate over buffers in Vimscript","465","","<p>How can I iterate over the current open buffers and say, load the buffer numbers into an array in vimscript?</p>

<p>I know there exists arrays or similar data structures in vimscript.<br>
I know that every buffer gets assigned a unique number.<br>
My goal is to put each of those numbers into an array of the same length as   the number of buffers i.e   <code>for i in number of open buffers: array[i] = #buffer</code><br>
I would like to let <code>array</code> be a variable in my vimscript file.</p>
","<p>You can iterate over buffers if you use <code>:bnext</code> and all. I highly advice against this method. It'll trigger autocommands, and you'll have to remember where you were. In other words, it can be damn slow, and with plenty side effects. Stay away if you can.</p>

<p>Until now my preferred approach was to use <code>filter()</code> on <code>range(1, bufnr('$'))</code> to keep the buffers I'm interested in (<code>bufloaded()</code>, <code>bufexists()</code> or <code>buflisted()</code>). Which gives:</p>

<pre><code>:let buffers = filter(range(1, bufnr('$')), 'bufexists(v:val)')
</code></pre>

<p>We can even go further and use other ways to filter the buffer list: according to their name, or buffer-variables (.e.g <code>getbufvar(v:val, 'foo', sentinelvalue) =~ ""regex for b:foo"")</code>). </p>

<p>As you see, there are plenty options. The entry points are <code>filter()</code> and functions with <code>buf</code> in their name -> <code>:h *buf*()^D</code> (<code>^D</code> as in <em>hit ctrl+D</em> to see the list of functions)</p>

<p>Note also that recent versions of vim provide a new <code>getbufinfo()</code> function that'll return a list dictionaries: each dictionary is filled with plenty information for each existing buffer. Another way to obtain existing buffers is with:</p>

<pre><code>:let buffers = map(copy(getbufinfo()), 'v:val.bufnr')
</code></pre>

<p>Or listed buffers with</p>

<pre><code>:let buffers = map(filter(copy(getbufinfo()), 'v:val.listed'), 'v:val.bufnr')
</code></pre>
","10478"
"Problems with paths that includes swedish characters","464","","<h1>Update</h1>

<p>I've now also tried this on my Arch setup and everything works fine there.<br>
<code>vim --version</code> on that machine says:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Sep 28 2015 08:49:36)
Included patches: 1-884
Compiled by Arch Linux
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   +perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      +lua             +rightleft       +windows
+diff            +menu            +ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: ""/etc/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  fall-back for $VIM: ""/usr/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -D_FORTIFY_SOURCE=2  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       
Linking: gcc   -L. -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE  -Wl,-O1,--sort-common,--as-needed,-z,relro -L/usr/local/lib -Wl,--as-needed -o vim        -lm -lncurses -lelf -lnsl   -lacl -lattr -lgpm -ldl  -L/usr/lib -llua -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector-strong -L/usr/local/lib  -L/usr/lib/perl5/core_perl/CORE -lperl -lpthread -lnsl -ldl -lm -lcrypt -lutil -lc -L/usr/lib/python2.7/config -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic   -lruby -lpthread -lgmp -ldl -lcrypt -lm  -L/usr/lib
</code></pre>

<hr>

<h1>Original Question</h1>

<p>I'm having problems with both NERDTree and CtrlP after upgrading to Vim 7.4. </p>

<p>CtrlP can't find any entries in some folders and NERDTree doesn't display all content of all folders. I've had none of these problems before upgrading. I have the same problem when testing <a href=""https://github.com/szw/vim-ctrlspace"" rel=""nofollow"">ctrlspace</a>.</p>

<p>I think that the problem is that the path have Swedish characters (å, ä, ö) in it. Though this weren't a problem before upgrading from the built-in Vim in OS X (El Capitan). If I rename the folders in the path so that there are no such characters, then I don't have the problem anymore.</p>

<hr>

<p>Try the following path while standing in <code>åäö</code></p>

<pre><code>åäö/foo/bar:

baz.txt
</code></pre>

<hr>

<p>My <code>vim.rc</code>:</p>

<pre><code>"" -------- Vundle -------
set nocompatible              "" be iMproved, required
filetype off                  "" required

"" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"" alternatively, pass a path where Vundle should install plugins
""call vundle#begin('~/some/path/here')

"" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'

"" All of your Plugins must be added before the following line
call vundle#end()            "" required
filetype plugin indent on    "" required
</code></pre>

<p>I upgraded using <code>brew install vim</code> and this is what <code>vim --version</code> says:</p>

<pre><code>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct  1 2015 17:36:26)
MacOS X (unix) version
Included patches: 1-884
Compiled by Homebrew
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         -gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
+clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   +perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            +ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        -mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
  fall-back for $VIM: ""/usr/local/share/vim""
Compilation: /usr/bin/clang -c -I. -Iproto -DHAVE_CONFIG_H   -F/usr/local/Frameworks -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -DMACOS_X_UNIX  -Os -w -pipe -march=native -mmacosx-version-min=10.11 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1
Linking: /usr/bin/clang   -L. -L/usr/local/lib -L/usr/local/lib -F/usr/local/Frameworks -Wl,-headerpad_max_install_names -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -F/private/tmp/vim20151001-44506-3ot6hp/vim-7.4.884/Frameworks -o vim        -lm  -lncurses -liconv -framework Cocoa   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl -framework Python   -lruby.2.0.0 -lobjc
</code></pre>
","<p>This is solved by removing <code>mac_precompose_path</code> from the Vim source code.</p>

<p>A fork where this is fixed can be found here: <a href=""https://github.com/OskarPersson/vim"" rel=""nofollow"">https://github.com/OskarPersson/vim</a></p>

<p>I tested this by creating a Homebrew formula of the repository above.</p>
","5107"
"automatically rewrap lines when writing markdown in VIM","462","","<p>Very often, I write markdown in VIM, and there will be paragraphs in those markdown. To help my editing, I setup my Vim to wrap a line on 80 chars. It works nice if I just keep typing, but the problem is if I need to do some correction, it becomes very annoying. </p>

<p>demo(taken from wikipedia first order logic):</p>

<pre><code>The adjective ""first-order"" distinguishes first-order logic from higher-order logic 
in which there are predicates having predicates or functions as arguments. In first-order 
theories, predicates are often associated with sets. In interpreted higher-order 
theories, predicates may be interpreted as sets of sets.
</code></pre>

<p>So far so good. But when I revise the article, I might decide to add something in the middle, say:</p>

<pre><code>The adjective ""first-order"" distinguishes first-order logic from higher-order logic 
in which there are predicates having predicates or functions as arguments,
or in which one or both of predicate quantifiers or function quantifiers are permitted.
In first-order theories, predicates are often associated with sets. In interpreted higher-order
theories, predicates may be interpreted as sets of sets.
</code></pre>

<p>notice line 3 is the one I want to wrap. If I do it in VIM, I will need to manually join the lines and rewrap the whole paragraph.</p>

<p>Anyone got idea how to make VIM do it automatically?</p>
","<p>Even simpler: the <code>a</code> flag for <code>'formatoptions'</code> enables automatic formatting of paragraphs whenever text is inserted or deleted. See <a href=""http://vimhelp.appspot.com/change.txt.html#fo-table"" rel=""noreferrer""><code>:help fo-table</code></a> for details on <code>'formatoptions'</code> flags and <a href=""http://vimhelp.appspot.com/change.txt.html#autoformat"" rel=""noreferrer""><code>:help autoformat</code></a>.</p>

<pre><code>:set formatoptions+=a
</code></pre>

<hr>

<p><a href=""http://vimhelp.appspot.com/change.txt.html#gq"" rel=""noreferrer""><code>gq</code></a> and <a href=""http://vimhelp.appspot.com/change.txt.html#gw"" rel=""noreferrer""><code>gw</code></a> will format the lines that the following motion moves over.</p>

<pre><code>Formatting is done with one of three methods:
                1. If 'formatexpr' is not empty the expression is
                   evaluated.  This can differ for each buffer.
                2. If 'formatprg' is not empty an external program
                   is used.
                3. Otherwise formatting is done internally.

                In the third case the 'textwidth' option controls the
                length of each formatted line
</code></pre>

<p>The difference between the two, is that <code>gq</code> will leave the cursor on the first non-blank of the last formatted line. <code>gw</code> will put the cursor back where it started.</p>

<p>You can easily manually rewrap the paragraph your cursor is currently in with <code>gwap</code>, or the entire document with <code>gggwG</code>, though that will move your cursor thanks to the leading <code>gg</code>.</p>

<p>With an autocommand, you can have formatting happen automatically. Here's an example that formats the current paragraph when leaving insert mode:</p>

<pre><code>augroup myformatting
    autocmd!
    autocmd InsertLeave * normal gwap&lt;CR&gt;
augroup END
</code></pre>

<p>There are other autocommand triggers that you may find work better for you. You can explore the options under <a href=""http://vimhelp.appspot.com/autocmd.txt.html#autocmd-events"" rel=""noreferrer""><code>:help autocmd-events</code></a>. The most relevant ones are probably under the ""various"" subheading.</p>
","11611"
"Replace a series of asterisk bullet points with a numbered list","462","","<p>Imagine I have the following text:</p>

<pre><code>some random stuff
* asdf
* foo
* bar
some other random stuff
</code></pre>

<p>I want to replace the asterisk bullets with numbers, like so:</p>

<pre><code>some random stuff
1. asdf
2. foo
3. bar
some other random stuff
</code></pre>

<p>How can this be done in vim ?</p>
","<p>You could try the following command:</p>

<pre><code>:let c=0 | g/^* /let c+=1 | s//\=c.'. '
</code></pre>

<hr>

<p>First it initializes the variable <code>c</code> (<code>let c=0</code>), then it executes the global command <code>g</code> which looks for the pattern <code>^*</code> (a beginning of line, followed by an asterisk and a space).</p>

<p>Whenever a line containing this pattern is found, the global command executes the command:<br>
<code>let c+=1 | s//\=c.'. '</code><br>
It increments the variable <code>c</code> (<code>let c+=1</code>), then (<code>|</code>) it substitutes (<code>s</code>) the previous searched pattern (<code>//</code>) with the evaluation of an expression (<code>\=</code>):<br>
the contents of variable <code>c</code> concatenated (<code>.</code>) with the string <code>'. '</code></p>

<hr>

<p>If you don't want to modify all the lines from your buffer, but only a specific paragraph, you can pass a range to the global command.
For example, to modify only the lines whose number is between 5 and 10:</p>

<pre><code>:let c=0 | 5,10g/^* /let c+=1 | s//\=c.'. '
</code></pre>

<hr>

<p>If you have a file containing several similar lists which you want to convert, for example something like this:</p>

<pre><code>some random stuff                 some random stuff                      
* foo                             1. foo                                 
* bar                             2. bar                                 
* baz                             3. baz                                 
some other random stuff           some other random stuff                
                           ==&gt;                                                
some random stuff                 some random stuff                      
* foo                             1. foo                                 
* bar                             2. bar                                 
* baz                             3. baz                                 
* qux                             4. qux                                 
some other random stuff           some other random stuff                
</code></pre>

<p>You can do it with the following command:</p>

<pre><code>:let [c,d]=[0,0] | g/^* /let [c,d]=[line('.')==d+1 ? c+1 : 1, line('.')] | s//\=c.'. '
</code></pre>

<p>It's just a variant of the previous command, which resets the variable <code>c</code> when you switch to another list. To detect whether you are in another list, the variable <code>d</code> is used to store the number of the last line where a substitution was made.<br>
The global command compares the current line number (<code>line('.')</code>) with <code>d+1</code>. If they are the same, it means we are in the same list as before so <code>c</code> is incremented (<code>c+1</code>), otherwise it means we are in a different list, so <code>c</code> is reset (<code>1</code>).</p>

<p>Inside a function, the command <code>let [c,d]=[line('.')==d+1 ? c+1 : 1, line('.')]</code> could be rewritten like this:</p>

<pre><code>let c = line('.') == d+1 ? c+1 : 1
let d = line('.')
</code></pre>

<p>Or like this:</p>

<pre><code>if line('.') == d+1
    let c = c+1
else
    let c = 1
endif
let d = line('.')
</code></pre>

<hr>

<p>To save some keystrokes, you could also define the custom command <code>:NumberedLists</code>, which accepts a range whose default value is <code>1,$</code> (<code>-range=%</code>):</p>

<pre><code>command! -range=% NumberedLists let [c,d]=[0,0] | &lt;line1&gt;,&lt;line2&gt;g/^* /let [c,d]=[line('.')==d+1 ? c+1 : 1, line('.')] | s//\=c.'. '
</code></pre>

<p>When <code>:NumberedLists</code> will be executed, <code>&lt;line1&gt;</code> and <code>&lt;line2&gt;</code> will be automatically replaced with the range you used.</p>

<p>So, to convert all the lists in the buffer, you would type: <code>:NumberedLists</code></p>

<p>Only the lists between line 10 and 20: <code>:10,20NumberedLists</code></p>

<p>Only the visual selection: <code>:'&lt;,'&gt;NumberedLists</code></p>

<hr>

<p>For more information, see:</p>

<pre><code>:help :range
:help :global
:help :substitute
:help sub-replace-expression
:help list-identity    (section list unpack)
:help expr1
:help :command
</code></pre>
","6380"
"How to search multiple occurences of a vimwiki tag?","461","","<p>I'm using the vimwiki plugin and trying to figure out tagging with vimwiki-syntax-tags.  </p>

<p>I can add a tag <code>:tag-example:</code> to a vimwiki .wiki file.</p>

<p>I can search <code>:VimwikiSearchTags tag-example</code> and it will find the tag properly.</p>

<p>If there are two instances of this tag, the search returns the first instance and displays <code>(1 of 2): :tag-example:</code></p>

<p>Does anyone know how to go to the next tag instance found by the search?</p>

<p>Any other suggestions related to tagging / vimwiki would be appreciated as well.</p>

<p>Thanks</p>
","<p>The results from <code>:VimwikiSearchTags</code> are populated in the <a href=""http://vimhelp.appspot.com/quickfix.txt.html#location%2dlist""><code>location-list</code></a> window, so you can navigate using <a href=""http://vimhelp.appspot.com/quickfix.txt.html#%3alnext""><code>:lnext</code></a> and <a href=""http://vimhelp.appspot.com/quickfix.txt.html#%3alprevious""><code>:lprevious</code></a>, or you can check all the results using <a href=""http://vimhelp.appspot.com/quickfix.txt.html#%3alopen""><code>:lopen</code></a>.</p>

<p>To be honest, despite I have been using Vimwiki for several years, I didn't know about the tags. Maybe it is because my wikis are not that large (~2 MB at most), but I find it easier to simple <a href=""http://vimhelp.appspot.com/quickfix.txt.html#%3agrep""><code>:grep</code></a> (or <a href=""https://github.com/mileszs/ack.vim""><code>:Ack</code></a>) everything, which is quite fast, instead of writing the tags in advance.</p>
","10788"
"Mapping with square bracket","461","","<p>I am looking at some plugin that happens to be configurable through a curious mapping (e.g. <a href=""https://github.com/Shougo/unite.vim/blob/master/doc/unite.txt#L210-L232"" rel=""nofollow"">unite.vim</a>):</p>

<pre><code>More advanced configuration example:
&gt;
    "" The prefix key.
    nnoremap    [unite]   &lt;Nop&gt;
    nmap    f [unite]

    nnoremap &lt;silent&gt; [unite]c  :&lt;C-u&gt;UniteWithCurrentDir
            \ -buffer-name=files buffer bookmark file&lt;CR&gt;
</code></pre>

<p>What does the <code>[unite]</code> means ? </p>

<p>I understand that it stands for a custom leader/prefix only for the plugin, but what is it's meaning for Vim ?</p>
","<p>After discussion with <a href=""https://vi.stackexchange.com/users/1800/vanlaser"">VanLaser</a>, it seems that the <code>[unite]</code> mapping is used only with a combination of another key.</p>

<p>Let's break down the mappings:</p>

<pre><code>nnoremap    [unite]   &lt;Nop&gt;
</code></pre>

<p>Map <code>[unite]</code> to nothing.</p>

<pre><code>nmap    f [unite]
</code></pre>

<p>Map <code>f</code> to <code>[unite]</code>. At this point if we press <code>f</code>, nothing will happen, as <code>[unite]</code> is mapped to <code>&lt;nop&gt;</code>.</p>

<p>But when we add a <code>[unite]</code>-based mapping:</p>

<pre><code>nnoremap &lt;silent&gt; [unite]c  :&lt;C-u&gt;UniteWithCurrentDir ...
</code></pre>

<p>Then the <code>[unite]c</code> (which will be triggered by pressing <code>fc</code>) will call the desired command. If the <code>f</code> key is pressed alone, after the map timeout, nothing will append as it will be translated to <code>[unite]</code> alone.</p>
","6729"
"How do I run a command on creation of a new file?","460","","<p>I'm aiming to make scripts I write in a certain directory (or of a certain extension) automatically executable on creation. I can do this whenever a file is written to, using <a href=""https://askubuntu.com/a/546239/158442"">the following <code>autocmd</code></a>:</p>

<pre><code>autocmd BufWritePost *.py silent execute ""! chmod +x %""
</code></pre>

<p>What I don't like is that this runs every time the file is written. If I had decided to reset the permissions of a particular script, I wouldn't want it to be set again, for example. And if the command is expensive, or is not idempotent, it would be undesirable to run it again and again. While this particular example uses <code>chmod</code>, please consider a more general case.</p>

<p>There is an event for when a buffer is created for a new file (<a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocmd-events"" rel=""nofollow noreferrer""><code>BufNewFile</code></a>), but is there some way to do this when such a buffer is written the first time?</p>
","<p>This would set the file to be executable after writing to the file if it's not already executable</p>

<pre><code>autocmd BufWritePost *.py if getfperm(expand('%')) !~# 'x' | silent execute ""! chmod +x %"" | endif
</code></pre>

<p>I think this should be the better approach.</p>

<p>Edit:</p>

<p>To make only a new file executable :</p>

<pre><code>autocmd BufWritePre *.py if !filereadable(expand('%')) | let b:is_new = 1 | endif
autocmd BufWritePost *.py if get(b:, 'is_new', 0) | silent execute '!chmod +x %' | endif
</code></pre>
","270"
"Trouble to call a bash command from vimrc with autocommands | ""Error: no previous command"" (neovim)","458","","<p>basically i want to test within my vimrc, if <code>/home/$USER/.dotfiles/nvim/bundle/vim-snippets/snippets</code> was symlinked to <code>/home/$USER/.dotfiles/nvim/snippets</code>
If not, it should create the symlink.</p>

<p><strong>the code:</strong></p>

<pre><code>au VimEnter * :!bash -c ""! [  -L /home/$USER/.dotfiles/nvim/snippets  ] &amp;&amp; ln -sb /home/$USER/.dotfiles/nvim/bundle/vim-snippets/snippets /home/$USER/.dotfiles/nvim/snippets""
</code></pre>

<p>The <code>"":""</code> before <code>!bash</code> doesn't change anything.</p>

<p><strong>the error message:</strong></p>

<pre><code>Error detected while processing VimEnter Auto commands for ""*"":                                                                                              
E34: No previous command  
</code></pre>

<p>My problem is, i don't know what is wrong with my code and google/help pages also aren't very helpful.</p>
","<p>I think the problem comes from the second bang in your command which has a special meaning for vim. It is automatically replaced with the previous external command.</p>

<blockquote>
  <p>Any '!' in {cmd} is replaced with the previous          external command
  (see also 'cpoptions').  But not when             there is a backslash before
  the '!', then that            backslash is removed.  Example: "":!ls"" followed
  by            "":!echo ! ! \!"" executes ""echo ls ! !"".</p>
</blockquote>

<p>And since the autocommand is triggered by the <code>VimEnter</code> event, which means as soon as vim is launched, there can't be any previous external command.</p>

<p>You should probably escape the second bang to protect it from being interpreted by vim before the command is sent to the shell :</p>

<pre><code>au VimEnter * :!bash -c ""\! [  -L /home/$USER/.dotfiles/nvim/snippets  ] &amp;&amp; ln -sb /home/$USER/.dotfiles/nvim/bundle/vim-snippets/snippets /home/$USER/.dotfiles/nvim/snippets""
</code></pre>

<p>For more information, see <code>:help :!</code>.</p>
","5738"
"How to update vim plugins with pathogen package manager","457","","<p>I'm searching for a way to update all my vim plugins with pathogen. 
Cause i see this is simple in other package managers <em>like Neobundle and vundle.</em></p>

<p>Please share a <strong>The vim way</strong> on how i can update all my plugins without having to use some hacky script <em>that i haven't thought of yet</em> to accomplish this.</p>
","<p>pathogen manages the run time path of Vim.  It is not the same as vim-plug nor vundle.  </p>

<p>The <a href=""https://vi.stackexchange.com/questions/388/what-is-the-difference-between-the-vim-plugin-managers"">differences between the vim plugin managers</a> has many good answers.  :-) </p>

<p><a href=""https://gist.github.com/romainl/9970697"" rel=""nofollow noreferrer"">How to use Tim Pope's Pathogen</a> was created by romainl who has a lot of reputation on this site.  I hope that helps.</p>

<hr>
","9770"
"Delete to EOL without entering insert mode","456","","<p>I have a file that looks like this:</p>

<pre><code>Bunch of text      trailing...
Bunch of text      trailing... 
Bunch of text      trailing...
Bunch of text      trailing...
Bunch of text      trailing...
</code></pre>

<p>I can use <kbd>C</kbd> to remove the <code>trailing...</code> text, but that puts me into <strong>insert mode</strong>; Is there a way to delete to the end of the line without leaving <strong>normal mode</strong>?</p>
","<p>Yes. You want to use the ""delete"" operator instead of the ""Change"" operator. The delete operator is </p>

<pre><code>d&lt;motion&gt;
</code></pre>

<p>and it deletes everything that <code>&lt;motion&gt;</code> moves over.</p>

<p>In this case, the motion you want is <code>$</code> which moves to the end of the current line. Of course, you may also use <code>D</code> which is simply a shortcut for <code>d$</code></p>
","11143"
"Stop highlighting when entering Insert mode","455","","<p>I would like Vim to stop highlighting matches when entering Insert mode. And not to highlight them again until a new search is performed.</p>

<p>A first thought would be to add the following line to my <code>.vimrc</code>.</p>

<pre><code>autocmd InsertEnter * nohlsearch
</code></pre>

<p>But from <code>:help :nohlsearch</code> we know that <code>nohlsearch</code> does not work in automatic commands.</p>

<p>One alternative would be this line, which clears the last search pattern. Having nothing to match, Vim will have nothing to highlight.</p>

<pre><code>autocmd InsertEnter * let @/ = """"
</code></pre>

<p>This stops the highlighting as intended. Nonetheless, it has side effects: because the last search pattern is cleared, commands such as <code>n</code> or <code>/&lt;CR&gt;</code> will not behave as intended.</p>

<p>So my question is: how can one stop highlighting when entering Insert mode in an efficient way and with no major side effects or no side effects at all?</p>
","<p>You can use <code>feedkeys()</code> to execute <code>:nohlsearch</code>. A small challenge is to avoid the recursion, as the <code>:call</code> temporarily leaves (and then re-enters) insert mode. I've used a simple boolean flag for that here:</p>

<pre><code>let didit = 0
autocmd! InsertEnter * if ! didit | call feedkeys(""\&lt;C-\&gt;\&lt;C-o&gt;:nohlsearch|let didit = 1\&lt;CR&gt;"", 'n') | endif
autocmd! InsertLeave * let didit = 0
</code></pre>
","10426"
"What is the relevance of has(""autocmd"") today?","453","","<h3>Context</h3>

<p>I have been using Vim for more than 6 years and have compiled it from source a couple of times during that period.  Over the years my <code>vimrc</code> did grow.  Now, I am trying to clean my <code>vimrc</code> and I came upon a dinosaur configuration:  <code>has(""autocmd"")</code>.</p>

<p>When I started using Vim I copied my first <code>vimrc</code> from a colleague and it already contained a condition with a call to <code>has(""autocmd"")</code>, as follows:</p>

<pre><code>if has(""autocmd"")
    "" ... several autocmds, most of them on the FileType event
endif
</code></pre>

<p>Vim (likely) can be compiled without <code>autocmd</code> support, and, I believe, during those days it was still possible to find a Vim instance without <code>autocmd</code> support.</p>

<p>Over the years some 60-70% of my <code>vimrc</code> migrated into that <code>if</code> block, and now that block is huge (300+ lines).  If I run a Vim without <code>autocmd</code> support I'll lose the majority of my <code>vimrc</code>.</p>

<hr>

<p>On the other hand, I believe that <code>has(""autocmd"")</code> is rather irrelevant these days.  And, therefore, I want to get rid of that <code>if</code> altogether.</p>

<p>I looked through <a href=""https://github.com/vim/vim/blob/master/src/configure.in"" rel=""nofollow"">Vim's <code>configure.in</code></a> and there is no way to explicitly disable <code>autocmd</code> in there.  Looking through <a href=""https://github.com/neovim/neovim/tree/master/cmake"" rel=""nofollow""><code>neovim</code>'s source tree</a> I do not see an <code>Find*</code> cmake for <code>autocmd</code> either, I do not believe that <code>neovim</code> can be compiled without <code>autocmd</code>.</p>

<hr>

<h3>The Question</h3>

<p>Since ""relevance"" is a rather opinionated topic, let's focus on the objective points of <code>has(""autocmd"")</code>:</p>

<ul>
<li><p>Under which conditions Vim can be/is compiled without <code>autocmd</code> support?</p></li>
<li><p>Are there official compiled packages/distribution of Vim without <code>autocmd</code> support?  (Maybe on embedded devices)</p></li>
<li><p>Both questions above but for <code>neovim</code>.</p></li>
</ul>
","<ol>
<li><p>If you install from your package manager a Vim with the feature set tiny or small, you won't get autocommand support. 
Also if you compile your own Vim and disable autocommand feature in feature.h (or used the <code>--with-features=small</code> or <code>--with-features=tiny</code> argument)</p></li>
<li><p>depends on how you install Vim. Debian/Ubuntu provides official tiny and I think small packages. </p></li>
<li><p>don't know.</p></li>
</ol>

<p>In short, that line is still relevant and does not hurt.</p>
","8568"
":Explore shows the ""."" directory","451","","<p>Why does the <code>:Explore</code> command shows the <code>.</code> directory? This seems  to be unnecessary as it's just one more line that I have to <code>j</code>.</p>

<p>Is there some way I can disable this?</p>
","<p>You could hide the dot directory (<code>./</code>) by setting the global variables <code>g:netrw_list_hide</code> and <code>g:netrw_hide</code> in your <code>vimrc</code> like this:</p>

<pre><code>let g:netrw_list_hide = '^\./$'
let g:netrw_hide = 1
</code></pre>

<p>The first variable can contain a comma separated list of regex patterns describing what you want to hide.  Here, the pattern used is <code>'^\./$'</code>:<br>
a beginning of string (<code>^</code>), a literal dot <code>\.</code>, a slash <code>/</code> and an end of string <code>$</code>.  </p>

<p>You can also edit this variable from the file explorer netrw, by hitting <code>&lt;C-h&gt;</code>.</p>

<p>Once the variable is set, from netrw, hitting <code>a</code> will switch between different views:  </p>

<ul>
<li>showing everything</li>
<li>hiding items described by <code>g:netrw_list_hide</code></li>
<li>only showing items in <code>g:netrw_list_hide</code></li>
</ul>

<p>You can configure which view is chosen by default by setting up <code>g:netrw_hide</code> which can take 3 values (<code>0</code>, <code>1</code> or <code>2</code>).<br>
<code>1</code> means hiding by default the items in <code>g:netrw_list_hide</code>.</p>

<hr>

<p>For more information, see:</p>

<pre><code>:help g:netrw_list_hide
:help g:netrw_hide
</code></pre>
","6839"
"NeoVim hides the * chars when editing markdown","450","","<p>I am using <a href=""https://github.com/tpope/vim-markdown"" rel=""nofollow"">tpope's vim-markdown plugin</a> to edit markdown files. Somehow, neovim <strong>hides</strong> the <code>_</code> and <code>*</code> chars and changes the text in between to italic or bold depending on quantity of chars.  I want to see these chars. How do I configure neovim or vim-markdown to <strong>not hide</strong> the chars? (note, I looked for vim-markdown help and there is none)</p>
","<p>Those chars are hidden because the <code>conceal</code> feature as you can see on the vim-markdown <a href=""https://github.com/tpope/vim-markdown/blob/63074a52/syntax/markdown.vim#L84-L90"">source</a>.</p>

<p>You can adjust how to this feature is applied to text using the option <a href=""https://neovim.io/doc/user/options.html#&#39;conceallevel&#39;""><code>conceallevel</code></a>. Setting it to <code>0</code> will always show the text.</p>

<pre><code>:set conceallevel=0
</code></pre>
","6516"
"Is it possible to have vim show the list of available marks when using marks?","449","","<p>That is, when you hit the marks operator key <kbd>`</kbd> or <kbd>'</kbd> you get a list of the available marks - i.e. the list vim gives from the ex command <code>:marks</code>. Then, when you press a letter to jump to the mark, you will be taken there - as usual. So if I want to jump to say mark <code>m</code>, with the normal mode command <kbd>`m</kbd> you would type:</p>

<ul>
<li><kbd>`</kbd></li>
<li>the <code>:marks</code> window or similar would appear and you can see the available marks</li>
<li><kbd>m</kbd></li>
<li>cursor jumps to the <code>m</code> mark</li>
</ul>

<p>For those people familiar with it, the <a href=""http://ranger.nongnu.org/"">ranger file manager</a> already performs the exact way I would like vim to regarding the usage of marks. Ranger is terminal file explorer that uses vim key bindings and concepts, a ranger bookmark denotes a file and not a line and column position in a text file, but the concept is the same. Here is a <a href=""https://youtu.be/qooLR8NmYKs?t=10m25s"">screencast demonstration of ranger's marks feature</a> that I want to make happen in vim.</p>

<p>Is it possible to do this in vim, or is there a plugin that does this?</p>
","<p>You can define a very simple custom mapping that lists the available marks and pre-populates the command-line with the right command stub, ready for you to type the desired mark name:</p>

<pre><code>nnoremap &lt;key&gt; :&lt;C-u&gt;marks&lt;CR&gt;:normal! `
</code></pre>

<hr>

<p>Note that this simply follows the same pattern as <a href=""http://of-vim-and-vigor.blogspot.fr/p/vim-vigor-comic.html"" rel=""nofollow"">that famous mapping</a>:</p>

<pre><code>nnoremap &lt;key&gt; :ls&lt;CR&gt;:b&lt;Space&gt;
</code></pre>

<p>which can be expanded to other similar uses:</p>

<pre><code>nnoremap &lt;key&gt; :undolist&lt;CR&gt;:u&lt;Space&gt;
</code></pre>
","8453"
"Override a mapping with leader key","449","","<p>I am trying to create a mapping that has 2 functions: </p>

<p>On 1st use: redefine itself to be used</p>

<p>After: execute the newly saved mapping</p>

<p>The workflow could be : </p>

<p><code>&lt;leader&gt;r</code> -> <code>map &lt;leader&gt;r dd</code></p>

<p><code>&lt;leader&gt;r</code> -> <code>dd</code></p>

<p><code>&lt;leader&gt;r</code> -> <code>dd</code></p>

<p>...</p>

<p>So I came up with this mapping : </p>

<p><code>map &lt;Leader&gt;r :nnoremap &lt;Leader&gt;r</code></p>

<p>And I get :</p>

<p><code>&lt;leader&gt;r</code> -> <code>:nnoremap  r</code></p>

<p>My leader key is <code>\&lt;Space&gt;</code>  and so a space is inserted and now I can trigger the mapping but with only pressing <code>r</code>.</p>

<p>Do you know a method to ""escape"" the leader key in a mapping ?</p>
","<p>Inside a mapping, escape <code>&lt;</code> with <code>&lt;lt&gt;</code> (and <code>|</code> with <code>&lt;Bar&gt;</code>). The following example shows a working demo of your idea:</p>

<pre><code>:nnoremap &lt;Leader&gt;r :nnoremap &lt;lt&gt;Leader&gt;r :echo ""hi""&lt;lt&gt;CR&gt;&lt;CR&gt;
</code></pre>

<p>PS: <a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/05.html"" rel=""nofollow"">You should use <code>:noremap</code></a> for the initial mapping, too.</p>
","3136"
"Highlighted undo in Vim","448","","<p>I'm trying to have a highlighted undo in Vim, like spacemacs default config.
Sometimes when I want quick undo's, I can't realize what changed because it's instantaneous. So I am trying to have something like this when a press undo:</p>

<p><a href=""https://i.stack.imgur.com/FWWTU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FWWTU.png"" alt=""highlighted undo""></a></p>

<p>Anyone have an idea how to do this in Vim?</p>

<p>(I already have Gundo plugin, i just want to make the default undo more smooth)</p>

<p><strong>Edit</strong>: The <a href=""https://github.com/mbbill/undotree"" rel=""nofollow noreferrer"">undotree</a> plugin does the work (<a href=""https://github.com/sjl/gundo.vim"" rel=""nofollow noreferrer"">Gundo</a> doesn't highlight the changes), just use the <code>UndotreeToggle</code> command and all future changes on the file will be highlighted.</p>
","<h1>New solution</h1>

<p>You can view your last changes with the <code>:changes</code> command. So you can fecth your most recent line change with a regex and then apply the line to <code>matchadd()</code> as suggested by @joeytwiddle.</p>

<p>Here is the code :</p>

<pre><code>function! DiffWithPrevious()
  call clearmatches()
  redir =&gt; message
  silent changes
  redir END
  let line = matchstr(message, '\v\n\s{4}1[^0-9]*\zs\d+\ze')
  highlight TemporalDiff ctermbg=green guibg=green
  let m = matchadd('TemporalDiff', '\%'.line.'l')
endfunction
</code></pre>

<p><strong>Note</strong> : </p>

<ul>
<li><s>This function only add a new highlight without removing the old one, so you'd have to remove the old one first.</s> With the <code>clearmatches</code> function you can remove the matches before adding a new one. Careful, it will remove <strong>ALL</strong> matches. If you want more granularity, you can save your match and remove it manually : </li>
</ul>

<p>e.g.</p>

<pre><code>function! DiffWithPrevious()
  call matchdelete(m)
  ... 
  let m = matchadd('TemporalDiff', '\%'.line.'l')
endfunction
</code></pre>

<ul>
<li>After some tests, I found out it only works for one-line change.</li>
</ul>

<p>References :</p>

<ul>
<li><a href=""https://stackoverflow.com/a/73438/2558252"">Why is \r a newline for Vim?</a></li>
<li><a href=""https://stackoverflow.com/a/3135448/2558252"">regex in vimscript</a></li>
<li><a href=""http://vim.wikia.com/wiki/Capture_ex_command_output"" rel=""nofollow noreferrer"">http://vim.wikia.com/wiki/Capture_ex_command_output</a></li>
<li><a href=""http://vim.wikia.com/wiki/Highlight_long_lines"" rel=""nofollow noreferrer"">http://vim.wikia.com/wiki/Highlight_long_lines</a></li>
</ul>

<hr>

<h1>Old solution</h1>

<p>Here is a possible solution, mainly inspired by <a href=""http://vim.wikia.com/wiki/Diff_current_buffer_and_the_original_file"" rel=""nofollow noreferrer"">Diff current buffer and the original file</a> :</p>

<pre><code>function! DiffWithPrevious()
  undo
  write
  redo
  let filetype=&amp;ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe ""setlocal bt=nofile bh=wipe nobl noswf ro ft="" . filetype
endfunction
</code></pre>

<p>The idea is to diff the file with the file on the system, so you undo your last change, write it, redo the las change and execute the diff.</p>

<p>I think this should do the job for time-to-time temporal diff visualisations.</p>
","4392"
"Can I use the mouse for folding/unfolding in Gvim?","447","","<p>The title says most of it.</p>

<p>For the curious, folding is something I haven't yet included in my workflow.
I use <a href=""/questions/tagged/gvim"" class=""post-tag"" title=""show questions tagged &#39;gvim&#39;"" rel=""tag"">gvim</a> most of the time and I often have my hand on the mouse, scrolling through code.</p>

<p><strong>Is there a way I can fold/unfold using the mouse?</strong></p>

<p>Some IDE editors would have a <code>+</code> or <code>-</code> sign where unfolding/folding is possible.</p>

<p><strong>Is there a way to add this to the GUI?</strong></p>

<p>As with all things vim, I'm looking for a quick way to do it (least amount of clicks possible).</p>
","<p>Credits to <a href=""https://stackoverflow.com/a/13924974/2072269"">Ingo Karkat</a>, you just need to set <code>foldcolumn</code> for using the mouse to open and close folds. From <a href=""http://vimhelp.appspot.com/fold.txt.html#fold-foldcolumn"" rel=""nofollow noreferrer""><code>:he fold-foldcolumn</code></a>:</p>

<pre><code>FOLDCOLUMN                                              fold-foldcolumn

'foldcolumn' is a number, which sets the width for a column on the side of the
window to indicate folds.  When it is zero, there is no foldcolumn.  A normal
value is 4 or 5.  The minimal useful value is 2, although 1 still provides
some information.  The maximum is 12.

An open fold is indicated with a column that has a '-' at the top and '|'
characters below it.  This column stops where the open fold stops.  When folds
nest, the nested fold is one character right of the fold it's contained in.

A closed fold is indicated with a '+'.

Where the fold column is too narrow to display all nested folds, digits are
shown to indicate the nesting level.

The mouse can also be used to open and close folds by clicking in the
fold column:
- Click on a '+' to open the closed fold at this row.
- Click on any other non-blank character to close the open fold at this row.
</code></pre>

<p>Even though it says <code>2</code> is the minimal useful value, I'd say <code>1</code> is enough (<code>:set foldcolumn=1</code>):</p>

<p><img src=""https://i.stack.imgur.com/oSEnm.png"" alt=""enter image description here""></p>

<p>Higher values make a better visual experience, but you still need to hit the <code>+</code> exactly.</p>

<hr>

<p>On a side note, this section is the only instance of the word <code>mouse</code> in <code>fold.text</code>. (<code>:he folding</code>, <code>/mouse</code>)</p>
","3495"
"How can I delete a function call, leaving its inner content intact?","447","","<p>Let's say I have a line like this:</p>

<pre><code>a = x(y(z));
</code></pre>

<p>And I want to change it to:</p>

<pre><code>a = y(z);
</code></pre>

<p>What's the most efficient way to do this?</p>
","<p>If you start with your cursor on the <code>x</code> type</p>

<p><code>%x``2x</code></p>

<ul>
<li><code>%</code> move to the corresponding parenthesis to the one closest to you, i.e. <code>)</code></li>
<li><code>x</code> delete it</li>
<li><code>``</code> jump back to your previous jump, the starting <code>x</code></li>
<li><code>2x</code> delete the next two characters, <code>x(</code></li>
</ul>

<p>If you want this to be more robust you can do a find next and delete instead of the <code>2x</code></p>

<pre><code>%x``df(
</code></pre>

<p>This works when your function name is variable length.</p>
","2985"
"How to scroll through a really long line?","447","","<p>My web service log file has a line that's 34151 characters wide (lots of Soap XML). When wrapped it fills more than 1 screen. How can I scroll it smoothly in vim? Using navigation keys like $ and w isn't quite working, is there another key that jumps say 1000 characters at a time?</p>
","<p>Vim as a line based editor. It's movement commands and it's ranges are all based on lines. This partly due to it's origins from Vi designed to edit most text documents that span multiple lines.</p>

<p>In your case there are a few options:</p>

<ol>
<li><p>Optimize for the editor. Since Vim is line based use a lint program to pretty print the XML (SOAP) document into multiple lines instead of one long line. This has the advantage of organizing the chaos and increase in performance and ultimately productivity.</p></li>
<li><p>Create some mappings to help with the limited column based movements. This solution has the disadvantage that all the commands are rendered pretty useless (any command starting with <code>:</code> is effectively the same as <code>:%</code> with one line). But it does have the advantage of not having to reformat the document.</p></li>
</ol>

<p>The first solution is easy using Vim's filter command <code>:%!xmllint</code> (with the xmllint program installed).</p>

<p>The second option you could use the <kbd>g</kbd><kbd>j</kbd>/<kbd>g</kbd><kbd>k</kbd> commands (<code>10</code><kbd>g</kbd><kbd>j</kbd>/<code>10</code><kbd>g</kbd><kbd>k</kbd> also). Then there are the word and sentence movements like: <kbd>w</kbd>/<kbd>W</kbd>, <kbd>b</kbd>/<kbd>B</kbd>, <kbd>e</kbd>/<kbd>E</kbd>, and <kbd>(</kbd>/<kbd>)</kbd>. And finally if you happen to know the column number you can use it with the <kbd>|</kbd> movement as in <code>1024</code><kbd>|</kbd> to jump to the 1024<sup>th</sup> character of the line.</p>

<p>Lastly I can't forget about the find movements. As you know you can type a <kbd>/</kbd> to search for a pattern or use <kbd>f</kbd>/<kbd>F</kbd> and <kbd>t</kbd>/<kbd>T</kbd> keys to search by characters. For example you can type <kbd>f</kbd><kbd>&gt;</kbd> to jump to the next <code>&gt;</code> character then press <kbd>;</kbd> and <kbd>,</kbd> keys to move to the next or previous <code>&gt;</code> character.</p>
","2308"
"Incorrectly indents JavaScript chain calls","447","","<p>For example, if I have some JavaScript code like this:</p>

<pre><code>var widget = library()
  .chainCall1()
  .chainCall2()
  .chainCall3();
</code></pre>

<p>If I use the <code>=</code> command to auto indent it, it comes out looking this this:</p>

<pre><code>var widget = library()
.chainCall1()
.chainCall2()
.chainCall3();
</code></pre>

<p>Which isn't what I want. I want it to indent the chain calls like it originally was. How can I fix this?</p>
","<p>I had the same problem - for the most part the JavaScript formatting done by vim is not bad, but in examples like the one you give it fails miserably.</p>

<p>I've been using the <a href=""https://github.com/maksimr/vim-jsbeautify"" rel=""nofollow"">vim-jsbeautify</a> plugin to fix things where the vim indentation fails, and also to clean up ugly code other people have written. It works really well, you can run it on the whole file or just a region, and it's customisable using an <a href=""http://editorconfig.org/"" rel=""nofollow"">EditorConfig</a> file.</p>
","399"
"Effects of set paste","446","","<p><a href=""http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste"" rel=""nofollow"">This</a> wikia page explains how to paste text from a different application into vim when in insert mode. Simply apply the command <code>set paste</code> and things will work as expected. After you are done, just enter command <code>set nopaste</code> to go back to the original state.</p>

<p>Is there some unwanted behavior of staying in the <code>set paste</code> state? If I put that command in my .vimrc, will it affect any other command? </p>
","<p>As the <a href=""https://vimhelp.appspot.com/options.txt.html#%27paste%27"" rel=""nofollow"">documentation states</a> setting the <code>paste</code> option disables many features:</p>

<pre><code> When the 'paste' option is switched on (also when it was already on):
                - mapping in Insert mode and Command-line mode is disabled
                - abbreviations are disabled
                - 'autoindent' is reset
                - 'expandtab' is reset
                - 'formatoptions' is used like it is empty
                - 'revins' is reset
                - 'ruler' is reset
                - 'showmatch' is reset
                - 'smartindent' is reset
                - 'smarttab' is reset
                - 'softtabstop' is set to 0
                - 'textwidth' is set to 0
                - 'wrapmargin' is set to 0
        These options keep their value, but their effect is disabled:
                - 'cindent'
                - 'indentexpr'
                - 'lisp'
</code></pre>

<p>You can of course stay in paste mode, but one usually doesn't, because it disables too many features.</p>
","5572"
"How to go to function or class definition in current file","446","","<p>Is it possible to go to a class or function definition by search?</p>

<p>E.g. in Sublime it is possible to search the file for class and function names, and the viewport will automatically jump to the current closest match.</p>

<p>Right now if I want to find a specific function i use</p>

<pre><code>/&lt;function name&gt;/
</code></pre>

<p>and press <kbd>n</kbd> or <kbd>N</kbd> accordingly, but I also find all the places it has been used in the code. Also, as this highlights the text as well I need to type <code>:noh</code> afterwards to remove it.</p>
","<p>You don't necessarily have to install a plugin like ctags (although this would be reliable and allow many more great features, because you have semantic knowledge of your code, of course). </p>

<p>Vim has a built in function to go to the definition by doing a clever search:
With the cursor over a keyword, press <code>gd</code> or <code>gD</code>. 
I recommend reading the help page on these, if you want to understand how they work exactly. </p>

<p>If you want to search for a function from anywhere in your code, I would recommend the <a href=""https://github.com/majutsushi/tagbar"" rel=""nofollow"">tagbar plugin</a>. It requires ctags, however. I use it in a very similar way: Toggle the bar with a shortcut which gives me an automatically created list of function names and other tags. Like any other buffer, I can search it and jump to the definition with enter.</p>
","7013"
"Vim keep last line at bottom of buffer","446","","<p>I need to configure Vim in such a way that it has a normal scrolloff of 3 or 5. But in such a way that it keeps the last line at the bottom of the screen. I don't want that as I scroll, the last lines of the buffer to come up to the top of the screen under any circumstance.
To make this more precise I want this:</p>

<p><img src=""https://i.stack.imgur.com/wtjOb.png"" alt=""enter image description here""></p>

<p>and no matter what key I press, I explicitly do not want this:</p>

<p><img src=""https://i.stack.imgur.com/7GJQR.png"" alt=""enter image description here""></p>

<p>How can this be accomplished?</p>
","<p>If you try scrolling when you are at the bottom vim assumes you want to move to move the text up.</p>

<p>You can replace commands like <code>ctrl-f</code> with an additional ""move cursor to bottom of screen"" using <code>zb</code>. This modification would need to be added to any other commands you wish this to not occur.</p>

<p><code>:nnoremap &lt;c-f&gt; &lt;c-f&gt;zb</code></p>

<p>Now when you <code>ctrl-f</code> at the bottom of the screen it stays at the bottom, but so does every instance of <code>ctrl-f</code>.</p>

<p><strong>Update</strong></p>

<p>If you would like to do it conditionally you'll need to write a little function that compares your current position to the end of the file.</p>

<pre><code>function! NoScrollAtEOF()
  let curpos = getpos('.')
  let lnum = get(curpos, 1, -1)
  let len = line('$')
  if lnum + winheight(0) &gt;= len 
    normal! zb
  endif
endfunction

nnoremap &lt;c-f&gt; &lt;c-f&gt;:call NoScrollAtEOF()&lt;cr&gt;
</code></pre>

<p>This function pulls the current position and the end of file position and calls <code>zb</code> if the current position plus the height of your window is greater than the end of file...if you can see the end of the file in your window.</p>
","2865"
"Using marks with dead keys","445","","<p>I am using a keyboard layout in which the backtick (<code>`</code>) is a <a href=""http://en.wikipedia.org/wiki/Keyboard_layout#Dead_keys"" rel=""noreferrer"">dead key</a>.</p>

<p>This means that when I type a backtick followed by a vowel (for example <code>`a</code>) what Vim sees is an accented character (<code>à</code>). So if I set a mark with <code>ma</code> I can jump to the line of the mark with <code>'a</code>. But jumping to the specific location of the mark with <code>`a</code> won't work.</p>

<p>I found a workaround for this: when typing a dead key I can make Vim receive a backtick by striking the backtick and then the space bar. So if I want to go to mark <code>a</code> I type <code>`␣a</code>.</p>

<p>Is there a way to jump to the mark without having to strike that extra space? With no side effects?</p>
","<p>Try making it a mapping:</p>

<pre><code>"" Mapping dead keys in normal mode
nmap á 'a
</code></pre>

<p>That way, when Vim gets the accented a, it interprets it as <kbd>`</kbd>+<kbd>a</kbd></p>

<p>Using <code>nmap</code> allows this to happen in normal mode only; in insert mode or command mode, you'll get the accented <code>a</code> as you'd expect.</p>

<p>It is possible to apply this to other keys:</p>

<pre><code>nmap à `a
nmap Á 'A
nmap À `A
nmap ç 'c
nmap Ç 'C
nmap é 'e
nmap è `e
nmap É 'E
nmap È `E
nmap í 'i
nmap ì `i
nmap Í 'I
nmap Ì `I
nmap ó 'o
nmap ò `o
nmap Ó 'O
nmap Ò `O
nmap ú 'u
nmap ù `u
nmap Ú 'U
nmap Ù `U
</code></pre>
","804"
"Go to the next word starting with specific letter on current line","443","","<p>I want to have the command which is stated in the title. I looked for it in intrinsic Vim command but did not find it. I ran some tutorial online about functions in vim, The idea would be to have something like that in my <code>.vimrc</code>:</p>

<pre><code>map &lt;command&gt; &lt;argument&gt;: call nextWordWithLetter(argument)

function nextWordWithLetter(letter)
    "" for word i in line
    "" if word i's first letter = letter
        "" col = column of word i
        "" break
    col | ""The command to jump to column number 'col'
end function
</code></pre>
","<p>You can use <code>getchar()</code> and <code>search()</code> to accomplish your goal.</p>

<pre><code>nnoremap &lt;key&gt; :call search('\&lt;' . nr2char(getchar()), 'W', line('.'))&lt;cr&gt;
</code></pre>

<p>The idea is we use <code>nr2char(getchar())</code> to wait for a character to be typed and use <code>search()</code> to search for the next instance of the character at the beginning of a word via <code>\&lt;</code>. We limit this to the current line by supplying the current line, <code>line('.')</code>, as the third parameter to <code>search()</code>.</p>

<p>Personally I think I would rather just use <code>/</code> or <code>f</code>, however there are other plugins that provide similar functionality:</p>

<ul>
<li><a href=""https://github.com/easymotion/vim-easymotion"" rel=""nofollow"">EasyMotion</a></li>
<li><a href=""https://github.com/goldfeld/vim-seek"" rel=""nofollow"">vim-seek</a></li>
<li><a href=""https://github.com/justinmk/vim-sneak"" rel=""nofollow"">vim-sneak</a></li>
<li><a href=""https://github.com/rhysd/clever-f.vim"" rel=""nofollow"">clever-f.vim</a></li>
<li><a href=""https://github.com/unblevable/quick-scope"" rel=""nofollow"">quick-scope</a></li>
</ul>

<p>For more help see:</p>

<pre><code>:h search(
:h getchar(
:h /\&lt;
</code></pre>
","5592"
"matchpairs makes vim slow","443","","<p>I use <code>set matchpairs+=&lt;:&gt;</code> in my config (to help when editing HTML, for instance), but I just noticed it made vim very slow when editing emails.</p>

<p>Is there a way to have this setting without paying a performance penalty? (e.g., automatically disabling it in cases like emails when it's obviously not relevant to see the numerous <code>&gt;</code> as delimiters)</p>
","<p>The slowness of delimiter matching is not caused by vim itself but by the <a href=""https://github.com/vim/vim/blob/master/runtime/plugin/matchparen.vim"" rel=""nofollow"">matchparen plugin</a>, which is part of the vim distribution and loaded by default in <code>/etc/vim/vimrc</code> in Debian. (This is why I still had the problem without a vimrc.)</p>

<p>Fortunately the matchparen plugin supports a timeout when looking for matches, so the slowness can be avoided by setting those timeout to lower values. I added the following to my vimrc:</p>

<pre><code>let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2
</code></pre>

<p>2 milliseconds is plenty of time on modern machines to find a relevant delimiter, and when scrolling down in <a href=""http://paste.fulltxt.net/7BxA"" rel=""nofollow"">this file</a> on my machine, display is no longer slugging and CPU usage for vim stays at 15% or so.</p>

<p><strong>Edit:</strong> actually I increased it to 20, otherwise I sometimes see it fail. This means there is still some sluggishness, but it's better than without the setting.</p>
","5318"
"Regex to match any character including newline","442","","<p>I frequently find myself trying to do transformations like </p>

<pre><code>  author    = {{foo
                bar}},
</code></pre>

<p>to </p>

<pre><code>  author    = {foo
                bar},
</code></pre>

<p>and I can't find a regex to match the part in between the curly braces.</p>

<pre><code>%s/{{\(.*\)}}/{\1}/g
</code></pre>

<p>doesn't work since <code>.</code> does not match newlines. But <code>[\.\r]</code> or something doesn't seem to work either. I tried <code>[\s\S]</code> as well to match whitespace and non-whitespace, but to no avail.</p>
","<p>You should use <code>\_.\{-}</code> instead of <code>.*</code>. </p>

<p><code>\_.</code> matches any character including end-of-line. However, as <code>:h \_.</code> warns, using it with <code>*</code> will match all text to the end of the buffer.</p>

<p><code>\{-}</code> is similar to <code>*</code>, matching 0 or more instances of the proceeding atom. But it matches <strong>as few as possible</strong> instead of as many as possible. This makes <code>\{-}</code> safe if your example pattern appears more than once. For example:</p>

<pre><code>author = {{foo
           bar}},

editor = {{buz
           baz}},
</code></pre>

<p>Using <code>%s/{{\(\_.*\)}}/{\1}/g</code> changes the starting double brace for author, but the closing double brace for editor. Since <code>*</code> matches as many atoms as possible, the pattern matches until the last double brace it finds. This results in the following:</p>

<pre><code>author = {foo
           bar}},

editor = {{buz
           baz},
</code></pre>

<p>However, using <code>%s/{{\(\_.\{-}\)}}/{\1}/g</code> gives the desired result for both author and editor as it stops searching at the first double brace it finds:</p>

<pre><code>author = {foo
           bar},

editor = {buz
           baz},
</code></pre>
","13991"
"How do I parse URL's from the text","441","","<p>I have a multiline text file. Some lines have URL's.
What would be the most efficient way to extract those URL's?</p>

<p>I wrote macros and did a bunch of unnecessary things.
Now I'm thinking about regex groups or global command...</p>

<p>text example:</p>

<pre><code>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, https://en.wikipedia.org/wiki/Lorem_ipsum#1  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit https://en.wikipedia.org/wiki/Lorem_ipsum#2 in voluptate velit esse cillum https://en.wikipedia.org/wiki/Lorem_ipsum#3 dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</code></pre>

<p>expectation:</p>

<pre><code>https://en.wikipedia.org/wiki/Lorem_ipsum#1
https://en.wikipedia.org/wiki/Lorem_ipsum#2
https://en.wikipedia.org/wiki/Lorem_ipsum#3
</code></pre>
","<p>The tricky part is getting a valid URL. Take some reasonable regex (say <code>/http[s]\?:\/\/[[:alnum:]%\/_#.-]*/</code> - or if you want to be pedantic, <a href=""https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url"">this one</a>). First get the URLs on individual lines, and then delete lines which aren't URLs:</p>

<pre><code>:%s/.\{-}\(http[s]\?:\/\/[[:alnum:]%\/_#.-]*\)/\1\r/g
:g!//d
</code></pre>

<ul>
<li>The substitution uses a <a href=""http://vimhelp.appspot.com/pattern.txt.html#non-greedy"" rel=""nofollow noreferrer"">non-greedy</a> regex to match characters before a URL. Otherwise, if multiple URLs were present in the same line, all but the last would be covered by <code>.*</code>.</li>
<li>The second command specifies an empty regex, reusing the last regex used. The initial <code>.\{-}</code> will match the empty string, so this regex can be reused without problems. </li>
</ul>

<p>If you have <code>grep</code> with <code>-o</code>:</p>

<pre><code>:%!grep -o 'http[s]\?:\/\/[[:alnum:]\%\/_\#.-]*'
</code></pre>

<ul>
<li>The <code>%</code> and <code>#</code> have to escaped to prevent vim from interpreting them.</li>
</ul>
","2021"
"How do I replace a character with its hex value?","441","","<p>I want to replace a character with its hex literal. For example before regex:</p>

<pre><code>h
</code></pre>

<p>After regex:</p>

<pre><code>0x68
</code></pre>

<p>I'm trying this:</p>

<pre><code>s/\([a-z]\)/\=printf(""%#02x"", submatch(0))/
</code></pre>

<p>But this replaces it with </p>

<pre><code>00
</code></pre>

<p>What am I doing wrong? Is this even possible? </p>
","<p>In that way, <code>printf</code> expects a decimal number to be converted to a hexadecimal one. All you need to do is convert the character to a number as follows:</p>

<pre><code>s/\([a-z]\)/\=printf(""%#02x"", char2nr(submatch(0)))/
</code></pre>

<p>See <a href=""http://vimhelp.appspot.com/eval.txt.html#char2nr%28%29""><code>:help char2nr()</code></a> for details.</p>
","7106"
"Why do I get a missing quote error when using the following in a mapping using execute and normal?","441","","<p>The command is</p>

<pre><code>nnoremap &lt;leader&gt;; :execute ""normal! mqA;\&lt;esc&gt;`q""
</code></pre>

<p>If you then press <code>&lt;leader&gt;;</code>, you will <code>E114: Missing quote: ""normal! mqA;\</code> followed by <code>E15: Invalid expression: ""normal! mqA;\</code>. Why is this? The command works fine if input directly into the commandline.</p>

<p>The command adds a <code>;</code> at the end of the current line, without changing the cursors position.</p>

<p>I realise that I can just do <code>nnoremap &lt;leader&gt;; mqA;&lt;esc&gt;`q</code> which works, the question is why the above doesn't work, and what can be done to make it work in the execute-normal form.</p>

<p>My guess would be that some level of nested escaping is needed, but I couldn't find one that works.</p>
","<p>You need to escape the <code>&lt;</code> via <code>&lt;lt&gt;</code>:</p>

<pre><code>nnoremap &lt;leader&gt;; :execute ""normal! mqA;\&lt;lt&gt;esc&gt;`q""&lt;cr&gt;
</code></pre>

<p>Note: added <code>&lt;cr&gt;</code> to execute the command as well.</p>

<p>However this can be simplified quite a bit:</p>

<pre><code>nnoremap &lt;leader&gt;; mqA;&lt;esc&gt;`q
</code></pre>

<p>Using an expression mapping you can make your mapping conditional based on a trailing <code>;</code> character:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;leader&gt;; getline('.') =~ ';$' ? '' : ""mqA;\&lt;esc&gt;`q""
</code></pre>

<p>For more help see:</p>

<pre><code>:h &lt;lt&gt;
:h map-&lt;expr&gt;
</code></pre>
","3723"
"Append to global variable and completion","439","","<p>I would like to create a global (configuration) variable that ideally would work as a comma separated list but that we could also append to it. The idea is to have the same behavior as when using <code>+=</code> when setting <code>&amp;runtimepath</code>.</p>

<p>So, it would be possible to do something like:</p>

<pre><code>let g:myvar+=""newitem""
</code></pre>

<p>And the variable contents would become:</p>

<pre><code>""item1"",""item2"",""newitem""
</code></pre>

<p>Two questions:</p>

<ol>
<li>Can such a variable be implemented in Vim (and how)?</li>
<li>Would it be possible to allow and define a list for its tab completion?</li>
</ol>
","<p>You could have your variable be a list and add values with <code>:let g:var += ['item']</code>. However, it won't be possible to prevent the same item to be added several times.</p>

<p>That's why I've come up with <a href=""https://github.com/LucHermitte/lh-vim-lib/blob/master/autoload/lh/list.vim#L555"" rel=""nofollow""><code>lh#list#push_if_new()</code></a></p>

<pre><code>function! lh#list#push_if_new(list, value) abort
  let matching = filter(copy(a:list), 'v:val == a:value')
  if empty(matching)
    call add (a:list, a:value)
  endif
  return a:list
endfunction
</code></pre>

<p>It's quite cumbersome to use. Having a command that calls the function would help though. It would look like this.</p>

<pre><code>"" some plugin
command! -nargs=+ -complete=customlist,lh#let#_push_options_complete
      \ PushOptions call lh#let#_push_options(&lt;f-args&gt;)
</code></pre>

<p>And can be used this way regarding completion</p>

<pre><code>:let g:foobar = {'titi': []}
:let g:acceptable_options_for['g:foobar.titi'] = ['s', 'foo', 'toto', 'titi' ]

:PushOptions foo&lt;tab&gt;
"" -&gt; g:foobar.
"" &lt;tab&gt; again -&gt; g:foobar.titi
"" &lt;space&gt;&lt;tab&gt; -&gt; list of possible choices: s, foo, toto, titi
</code></pre>

<p>Completion properties:</p>

<ul>
<li>It can complete variables names, and even search for list/dict fields in dictionaries</li>
<li>It can complete values from a list of possible values, which is filtered out of the values already set</li>
</ul>

<p>And here are the functions required for the completion:</p>

<pre><code>"" # PushOptions {{{2
""
"" Function: lh#let#_push_options(variable, ...) {{{3
function! lh#let#_push_options(variable, ...) abort
  let var = lh#let#if_undef(a:variable, '[]')
  for val in a:000
    call lh#list#push_if_new(var, val)
  endfor
  return var
endfunction

"" Function: lh#let#_list_all_list_variables_in_scope(scope) {{{3
function! lh#let#_list_all_list_variables_in_scope(scope) abort
  let vars = map(keys({a:scope}), 'a:scope.v:val')
  "" Keep only lists and dictionaries
  call filter(vars, 'type({v:val}) == type([]) || type({v:val}) == type({})')
  return vars
endfunction

"" Function: lh#let#_list_variables(lead) {{{3
function! lh#let#_list_variables(lead) abort
  if empty(a:lead)
    "" No variable spécified yet
    let vars 
          \ = lh#let#_list_all_list_variables_in_scope('g:')
          \ + lh#let#_list_all_list_variables_in_scope('b:')
          \ + lh#let#_list_all_list_variables_in_scope('w:')
          \ + lh#let#_list_all_list_variables_in_scope('t:')
  elseif stridx(a:lead, '.') &gt;= 0
    "" Dictionary
    let [all, dict, key ; trail] = matchlist(a:lead, '\v(.*)\.(.*)')
    let vars = keys({dict})
    call filter(vars, 'type({dict}[v:val]) == type([]) || type({dict}[v:val]) == type({})')
    call map(vars, 'v:val. (type({dict}[v:val])==type({})?""."":"""")')
    call map(vars, 'dict.""."".v:val')
    return vars
  else
    "" Simple variables
    if         (len(a:lead) == 1 &amp;&amp; a:lead    =~ '[gbwt]')
          \ || (len(a:lead) &gt; 1  &amp;&amp; a:lead[1] == ':')
      let scope = a:lead[0]
      let filter_scope = ''
    else
      let scope = 'g'
      let filter_scope = 'g:'
    endif
    let vars = lh#let#_list_all_list_variables_in_scope(scope.':')
    call filter(vars, 'v:val =~ ""^"".filter_scope.a:lead')
  endif
  "" Add dot to identified dictionaries
  call map(vars, 'v:val. (type({v:val})==type({})?""."":"""")')
  return vars
endfunction

"" Function: lh#let#_push_options_complete(ArgLead, CmdLine, CursorPos) {{{3
call lh#let#if_undef('g:acceptable_options_for', '{}')

function! lh#let#_push_options_complete(ArgLead, CmdLine, CursorPos) abort
  let tmp = substitute(a:CmdLine, '\s*\S*', 'Z', 'g')
  let pos = strlen(tmp)

  call s:Verbose('complete(lead=""%1"", cmdline=""%2"", cursorpos=%3)', a:ArgLead, a:CmdLine, a:CursorPos)

  if     2 == pos
    "" First argument: a variable name
    return lh#let#_list_variables(a:ArgLead)
  elseif pos &gt;= 3
    "" Doesn't handle 'foo\ bar', but we don't need this to fetch a variable
    "" name
    let args = split(a:CmdLine, '\s\+')
    let varname = args[1]
    call s:Verbose('complete: varname=%1', varname)
    "" Other arguments: acceptable values
    let acceptable_values = get(g:acceptable_options_for, varname, [])
    let crt_val = '\v^'.join(exists(varname)? eval(varname) : [], '|').'$'
    let acceptable_values = filter(copy(acceptable_values), 'v:val !~ crt_val')
    return acceptable_values
  endif
endfunction
</code></pre>
","6623"
"Any recommendations to enforce use of keybindings rather than equivalent command mode commands?","438","","<p>Context: I learned about the <code>:[v]split</code> command long before I learned the shortcuts <code>Ctrl-w+[s|v]</code> and as a result I find myself typing these commands often. Is there a way to break this habit ? (as a similar example, when I was first learning vim I mapped the arrow keys to <code>nop</code> to force me to use <code>hjkl</code>.</p>

<p>The catch is I'd like <code>:[v]split &lt;...&gt;</code> to still work.</p>

<p>Generically, do you have any recommendations to force the use of keybindings rather than the equivalent command mode commands ?</p>
","<p>You could try to add this code in your <code>vimrc</code>:</p>

<pre><code>let g:my_overlooked_commands = [
                            \   { 'old': 'vsplit', 'new': 'C-w v' },
                            \   { 'old': 'split',  'new': 'C-w s' },
                            \   { 'old': 'q!',     'new': 'ZQ' },
                            \   { 'old': 'x',      'new': 'ZZ' },
                            \]

fu! s:alternative_reminder(cmd) abort
    call timer_start(0, {-&gt;
    \ execute('echohl WarningMsg | echo ""['.a:cmd.'] was equivalent"" | echohl NONE', '') })
    return ''
endfu

fu! s:remember(list) abort
    for cmd in a:list
        let old = cmd.old
        let sold = string(old)
        exe printf('
        \            cnorea &lt;expr&gt; %s getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# %s
        \?                   %s.&lt;sid&gt;alternative_reminder(%s)
        \:                   %s
        \',          old, sold, sold, string(cmd.new), sold
        \         )
    endfor
endfu

call s:remember(g:my_overlooked_commands)
</code></pre>

<p>To use it, inside the list <code>g:my_overlooked_commands</code>, you would need to add the old commands you're currently using, and their new counterparts you would like to use, but frequently forget to.</p>

<p>After executing an old command, a message should be displayed in the command-line to remind you that there's an alternative.</p>

<hr>

<p>Edit: Concerning these 2 <a href=""https://vi.stackexchange.com/questions/13887/any-recommendations-to-enforce-use-of-keybindings-rather-than-equivalent-command/13891?noredirect=1#comment23861_13891"">questions</a>:</p>

<blockquote>
  <ol>
  <li>How does the %s.alternative_reminder(%s) part work?</li>
  </ol>
</blockquote>

<p><code>printf()</code> expects a string as its first argument (called <code>{fmt}</code> by the help, probably as an abbreviation for <code>format</code>), and one or more expressions. The format (first argument) can contain one or several <code>%</code> items. There are several types of items, <code>%s</code> is one of them. The <code>s</code> stands for <code>s</code>tring. It means that you want <code>printf()</code> to replace it with the value of an expression whose type is a string. Here's an example:</p>

<pre><code>:let var = 'string' | echo printf('here is a %s', var)
</code></pre>

<p>Going back to the code, the contents of the format is:</p>

<pre><code>cnorea &lt;expr&gt; %s getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# %s
\?                   %s.&lt;sid&gt;alternative_reminder(%s)
\:                   %s
</code></pre>

<p>It contains 5 <code>%s</code> items. So, <code>printf()</code> expects 5 more arguments after the format. Here they are given on the next line:</p>

<pre><code>old, sold, sold, string(cmd.new), sold
</code></pre>

<p>The values of these expressions will replace the items in the format, respecting the order in which they are passed to <code>printf()</code>.</p>

<p>So, this command:</p>

<pre><code>exe printf('
\            cnorea &lt;expr&gt; %s getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# %s
\?                   %s.&lt;sid&gt;alternative_reminder(%s)
\:                   %s
\',          old, sold, sold, string(cmd.new), sold
\         )
</code></pre>

<p>Should be (untested) equivalent to something like this:</p>

<pre><code>exe 'cnorea &lt;expr&gt; '.old.' getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# '.sold
\.              '?     '.sold.'.&lt;sid&gt;alternative_reminder('.string(cmd.new).')'
\.              ':     '.sold
</code></pre>

<p>You don't need to invoke the <code>printf()</code> function. But as soon as I get a concatenation of strings and other expressions, I find that using <code>printf()</code> makes the code a little more readable.</p>

<p>Once <code>printf()</code> has done its job, <code>:execute</code> should receive a string looking like this:</p>

<pre><code>    cnorea &lt;expr&gt; vsplit getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# 'vsplit'
                  \?     'vsplit'.&lt;sid&gt;alternative_reminder('vsplit')
                  \:     'vsplit'
</code></pre>

<p>This is an abbreviation which expands the word <code>vsplit</code> into the value of an expression, which uses
the ternary operator <code>?:</code>. If the test:</p>

<pre><code>getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# 'vsplit'
</code></pre>

<p>… is true, then, the value of the expression is:</p>

<pre><code>'vsplit'.&lt;sid&gt;alternative_reminder('vsplit')
</code></pre>

<p>… otherwise:</p>

<pre><code>'vsplit'
</code></pre>

<p>Note that <code>&lt;sid&gt;alternative_reminder('vsplit')</code> is an expression whose value is the one returned at the end of the function. By default, a function returns the number <code>0</code>. But here the function explicitly returns an empty string. So, the function doesn't add anything to the expansion of <code>vsplit</code>, because it's replaced with an empty string. However, to get to the returned value, Vim must process the code of the function. The latter contains some logic to trigger a warning message when necessary.</p>

<p>The goal of the test is to prevent the reminder to be triggered if you're not on a regular Ex command-line, or if you're not at the beginning of the command-line.</p>

<p>Basically, <code>vsplit</code> should always be expanded into <code>vsplit</code> (unchanged), but the reminder should be triggered when you execute the command at the beginning of a regular Ex command-line</p>

<hr>

<blockquote>
  <ol start=""2"">
  <li>Is it possible to adapt this to actually prevent the split from occurring? Removing the %s. from the quoted line above almost achieves
  this, but it breaks the :vsplit  case.</li>
  </ol>
</blockquote>

<p>I haven't tested it very long and I don't know how reliable it is, but you could try this code:</p>

<pre><code>let g:my_overlooked_commands = [
                            \   { 'old': 'vsplit', 'new': 'C-w v' },
                            \   { 'old': 'split',  'new': 'C-w s' },
                            \   { 'old': 'q!',     'new': 'ZQ' },
                            \   { 'old': 'x',      'new': 'ZZ' },
                            \]

fu! s:alternative_reminder(old, new) abort
    if getcmdline()[-1:-1] ==# ' '
        call feedkeys(""\&lt;bs&gt;"".a:old.' ', 'int')
    else
        call timer_start(0, {-&gt;
        \ execute('echohl WarningMsg | echo ""['.a:new.'] was equivalent"" | echohl NONE', '') })
    endif
    return ''
endfu

fu! s:remember(list) abort
    for cmd in a:list
        let old = cmd.old
        let sold = string(old)
        exe printf('
        \            cnorea &lt;expr&gt; %s getcmdtype() ==# "":"" &amp;&amp; getcmdline() ==# %s
        \?                   timer_start(0, {-&gt; execute(""call &lt;sid&gt;alternative_reminder(%s, %s)"") }) ? """" : """"
        \:                   %s
        \',          old, sold, sold, string(cmd.new), sold
        \         )
    endfor
endfu

call s:remember(g:my_overlooked_commands)
</code></pre>
","13891"
"Can vim make use of the meta key?","437","","<p>Is the meta key supposed to do anything in vim? It would be nice if the things that can be done on the command line could also be done in insert mode (such as <code>&lt;M-t&gt;</code> for transposing words). As it is (on my mac with iterm configured to use the command key as meta), it serves only as a quicker alternative to the escape key, because <code>&lt;meta+b&gt;</code> = <code>&lt;esc&gt;b</code>.</p>

<p>I found a post saying one could put</p>

<pre><code>"" fix meta-keys which generate &lt;Esc&gt;a .. &lt;Esc&gt;z
let c='a'
while c &lt;= 'z'
  exec ""set &lt;M-"".toupper(c).""&gt;=\e"".c
  exec ""imap \e"".c."" &lt;M-"".toupper(c).""&gt;""
  let c = nr2char(1+char2nr(c))
endw
</code></pre>

<p>into .vimrc; but that only made my meta produce some useless symbols.</p>

<p>PS. I think the answer to this quæstion is simply no. Though it is useful for escaping to normal mode with the first command, <code>&lt;M-d&gt;d</code> for <code>&lt;esc&gt;dd</code> &amp;c.</p>
","<p>If you are able/willing to switch to Neovim, that has full support for meta key combinations, as documented here: <a href=""https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#L86"">https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#L86</a></p>
","4794"
"Paste clipboard shortcut in vimrc","437","","<p>I know that I can paste the clipboard in by by typing <kbd>ctrl-shift-v</kbd>.</p>

<p>The problem is that this is a very counterintuitive shortcut. It requires me to move my hand in a very uncomfortable way.</p>

<p>I would like to paste the clipboard with something better, such as <code>gcp</code>.</p>

<p>I am trying to put a line in my vimrc file that will accomplish this, but I am getting major headaches as it seems to be impossible to do. Instead I must resort to some buffers, which i have been looking at for a while without result.</p>

<p>How do I place a line in the Vimrc which allows me to paste the clipboard content onto the file I'm in, upon a click of a shortcut of my choosing?</p>

<p>p.s.
Solution was to install vim-gtk
and after that i could do:
:put +</p>
","<p><em>Update: In order to access the system clipboard(s) Vim needs to be compiled with support for this. You can use the commands <code>:echo has('clipboard')</code> and, on Unix, <code>:echo has('xterm_clipboard')</code> to check for this. As it turns out, question asker did</em> not <em>have these features compiled in. Their <code>ctrl-shift-v</code> shortcut was pasting into the</em> terminal <em>and Vim was receiving the text as if it were typed. <a href=""https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim"">This existing question</a> describes how to get the system clipboard accessible from within Vim.</em></p>

<p>The standard method of pasting from the system clipboard is via the <code>+</code> register, which you can access from normal mode with a command such as <code>""+p</code>. (Outside of X11 sytems, the <code>*</code> register will also work. See <code>:help x11-selection</code> for a discussion of the difference.)</p>

<p>You can therefore create your <code>gcp</code> mapping for normal/visual/select modes with the commands:</p>

<pre><code>:nnoremap gcp ""+p
:noremap gcp ""+p
</code></pre>

<p>The following works for insert mode (see <code>:help i_CTRL-O</code>), but <code>gcp</code> isn't the best choice of trigger in insert mode, for obvious reasons, so you're probably going to want to pick something else:</p>

<pre><code>:inoremap gcp &lt;c-o&gt;""+p
</code></pre>

<p>N.B. <code>ctrl-shift-v</code> is not a standard Vim shortcut, and as far as I'm aware, <a href=""https://stackoverflow.com/questions/1506764/how-to-map-ctrla-and-ctrlshifta-differently"">such a shortcut can only be set up <em>outside</em> of Vim</a>. Is there any chance you're on Windows, you have <code>clipboard=unnamed</code> set, and you're actually just using <code>mswin.vim's</code> <code>ctrl-v</code> shortcut?</p>
","9994"
"SpecialKey foreground color w/ cursorline set","437","","<p>In <a href=""https://stackoverflow.com/questions/9869057/vim-linenr-and-cursorline-colour-configuration-change"">this Q&amp;A</a>, it's observed that there is a highlight group for <code>CursorLineNr</code>, which applies to the line number for the cursor line when <code>set cursorline</code> is on.</p>

<p>I notice that using cursorline also changes the color for another highlight group, <code>SpecialKey</code>, which applies if you have, e.g.:</p>

<pre><code> set list listchars=tab:\|_,trail:-
</code></pre>

<p>The problem with this for me is I use a dark background (and so a dark cursorline).  My normal <code>SpecialKey</code> setting is also very dark, so that the <code>listchar</code> symbols are only marginally visible.  But using <code>cursorline</code> <em>they're white</em>, which makes the <code>trail</code> char indistinguishable from having actually hit <code>-</code>.  The trail character is used every time you type a space at the end of a line, so this is more than a minor issue; usually typing a line from beginning to end involves a number of spaces that should be easily distinguished from a dash typo while working (or vice versa, a space typo when you intended a dash).</p>

<p>Since none of the other highlight groups seem to be affected, something like <code>CursorLineNr</code> is presumably being applied, but looking through the <code>hi</code> list I don't see anything appropriate.</p>

<p>Does anyone know what this is?  Better yet, does anyone know of a way to modify any highlight group for cursorline?</p>
","<p>I've been struggling with that behavior for a <em>long</em> time.</p>

<p>Basically, the foreground color of <code>SpecialKey</code> on the current line is changed to the foreground color of <code>Normal</code> if:</p>

<ul>
<li>the <code>cursorline</code> option is enabled,</li>
<li>the <code>CursorLine</code> highlight group has a background color set.</li>
</ul>

<p>I've never been able to fix that behavior, no matter what I tried. The problem lies somewhere in Vim's source code.</p>
","7926"
"Can relative number be changed so that current line is 1?","436","","<p>I <em>knew</em> this site would teach me more about my beloved <code>vim</code> :-) In posting a question/answer on <a href=""https://vi.stackexchange.com/questions/1915/how-do-i-delete-a-large-block-of-text-without-counting-the-lines"">how to delete large blocks without having to count lines</a>, one of the answers taught me something I didn't know, that being relative line numbers along the lines of:</p>

<pre><code>  2 This is line 1
  1 This is line 2
3   This is line 3, the current line.
  1 This is line 4.
  2 Line 5.
  3 Line 6.
</code></pre>

<p>Now, if you wanted to delete lines 3, 4 and 5, you can simply add one to the relative line number (2) and use that to set the count, the command being <code>3dd</code>.</p>

<p>However, adding one seems a bit obscure so I was wondering if you could configure the line numbers in relative mode to be more like this:</p>

<pre><code>  2 This is line 1
  1 This is line 2
3 1 This is line 3, the current line.
  2 This is line 4.
  3 Line 5.
  4 Line 6.
</code></pre>

<p>That way you could simply transcribe the number into the command without having to think about it.</p>
","<p>Don't do that.  A numbering system that goes from -1 to +1 without a zero in between is just asking for trouble.</p>

<p>As an alternative habit, I suggest <kbd>d</kbd><kbd>2</kbd><kbd>j</kbd> — ""delete this line and the next two lines"".  That works both ways: <kbd>d</kbd><kbd>2</kbd><kbd>k</kbd> deletes upward.</p>

<p>A long-winded ex command version of that would be <code>:+2d</code>.</p>
","1925"
"cancel complete","436","","<p>Usually insert mode completion (<code>&lt;C-n&gt;</code>) inserts the right word the first time I press <code>&lt;C-n&gt;</code>, but not always. Therefore, I would like Vim to insert the match it deems best when I press <code>&lt;C-n&gt;</code>, but still allow me to cancel this insertion afterwards should the correct match not show up or be a long way down the list.</p>

<p>Of course I could code this behavior, but I have a feeling there should be a standard key(-combination) to do this. Could someone point me in the right direction?</p>

<p>Bonus question: is there another key I can use to get the longest match (as it was before I hit <code>&lt;C-n&gt;</code>)?</p>

<p>For what it's worth, I'm using <code>completeopt=menu</code></p>
","<p>From <code>:h complete_CTRL-E</code>:</p>

<pre>
                                                        *complete_CTRL-E*
When completion is active you can use CTRL-E to stop it and go back to the
originally typed text.  The CTRL-E will not be inserted.
</pre>

<p>Also if you, say, type <code>a</code> then <code>^P</code>and you get a very long list, you can hit <code>^N</code>
to return to your original text with the completion popup still active. You can then type extra characters to narrow the completion list.</p>
","10706"
"Ignore URLs and email addresses in spell file","435","","<p>Is there a way to have vim not flag HTTP URLs and email addresses as spelling errors? Or, more generally, a way to list regexes of valid spellings?</p>
","<p>You can add custom syntax rules, and give them the
<a href=""http://vimhelp.appspot.com/spell.txt.html#spell%2dsyntax"" rel=""nofollow noreferrer""><code>@nospell</code></a> keyword,
this will tell Vim not to apply spell checking to this syntax match. For example:</p>

<pre><code>:syn match UrlNoSpell ""\w\+:\/\/[^[:space:]]\+"" contains=@NoSpell
</code></pre>

<p>The above will work for text files, and <em>some</em> filetypes (such as
markdown), but not for all filetypes.</p>

<p>Note that I used a fairly simple regex here; see <a href=""https://vi.stackexchange.com/q/2014/51"">How do I parse URL's from the text</a> for some alternatives.</p>

<hr>

<p>For other filetypes, you need to do a bit more work. For example, for <code>python</code> files, comments are contained in a <code>pythonComment</code>
group, from <code>/usr/share/vim/vim74/syntax/python.vim</code>:</p>

<pre><code>syn match   pythonComment   ""#.*$"" contains=pythonTodo,@Spell
</code></pre>

<p>To override this, we need to do:</p>

<pre><code>:syn match UrlNoSpellComment ""\w\+:\/\/[^[:space:]]\+"" contains=@NoSpell containedin=pythonComment
:highlight def link UrlNoSpellComment Comment
</code></pre>

<p>The trick is to add a list of previously matched syntax matches in which our
custom syntax match may be contained with <code>containedin=</code> This tells Vim to look for the
<code>UrlNoSpell</code> regex <em>within</em> the <code>pythonComment</code> matches.</p>

<p>We also need to use <code>highlight</code> to set the correct colours, since these aren't
inherited.</p>

<p>You need to do this in a number of places, for example for Python strings:</p>

<pre><code>:syn match UrlNoSpellString ""\w\+:\/\/[^[:space:]]\+"" contains=@NoSpell containedin=pythonString
:highlight def link UrlNoSpellString String
</code></pre>

<p>We need 2 different syntax match groups so we can apply the correct syntax highlighting.</p>

<p>Of course, for other filestypes you need to use other <code>containedin=</code> syntax
matches... There is, AFAIK, no ""universal"" solution, but looking up the correct
ones in <code>/usr/share/vim/vim74/syntax/*.vim</code> should not be too difficult.</p>

<hr>

<p>Note that all of the above commands must be executed <em>after</em> the syntax files;
there are 2 ways to do this:</p>

<ul>
<li><p>From a command or key mapping, this must be invoked manually every time. e.g.</p>

<pre><code>fun! NoUrlSpell()
    if &amp;filetype == 'python'
        :syn match UrlNoSpellComment ""\w\+:\/\/[^[:space:]]\+"" contains=@NoSpell containedin=pythonComment
        :highlight def link UrlNoSpellComment Comment
        :syn match UrlNoSpellString ""\w\+:\/\/[^[:space:]]\+"" contains=@NoSpell containedin=pythonString
        :highlight def link UrlNoSpellString String
    elseif &amp;filetype == 'ruby'
        "" ...
    else
        syn match   pythonComment   ""#.*$"" contains=pythonTodo,@Spell
    endif
endfun
command NoUrlSpell :call NoUrlSpell()
</code></pre></li>
<li><p>Put the commands in in the <code>~/.vim/after/syntax/[filetype].vim</code>. Vim will pick up
these files and execute them <em>after</em> the default syntax files (see:
<a href=""http://vimhelp.appspot.com/options.txt.html#after%2ddirectory"" rel=""nofollow noreferrer""><code>:help after-directory</code></a>).</p></li>
</ul>
","4003"
"What's the difference between call and execute?","434","","<p>E.g., in this snippet</p>

<pre><code>    if words[0] == ""\""spellgood:""
      call remove(words, 0)
      for word in words
        execute ""silent spellgood! "" . word
      endfor
    endif
</code></pre>

<p>taken from ""<a href=""https://vi.stackexchange.com/questions/6479/the-first-and-last-5-lines-of-a-file-use-for-file-specific-spell-ignore-list/6542?s=1|0.1230#6542"">The first and last 5 lines of a file? Use for file specific spell ignore list?</a>""</p>
","<p>As described in <code>:help call</code>, <code>call</code> is for invoking a built-in or user-defined <em>function</em>. It's useful to use <code>call</code> if you're invoking a function without the intention of capturing the return value, because of how vim's scripting works. That is, if you have a function <code>foo</code> that returns an integer, you <em>must</em>:</p>

<pre><code>call foo()
</code></pre>

<p>to call <code>foo</code> without caring about the result, whereas:</p>

<pre><code>let result = foo()
</code></pre>

<p>can be used to call <code>foo</code> and put the result in <code>result</code>. Note how <code>call</code> is <em>not</em> required for the second example. <code>call</code> also can take a range, which has the effect of invoking the function for every line in that range, usually.</p>

<p><code>:help execute</code>, on the other hands, reveals that <code>execute</code> is for evaluating strings as <em>Ex commands</em>. Normally you don't need to use <code>execute</code> in vim scripts, as most of what you type in them is interpreted as an Ex command. However, <code>execute</code> exists and is particularly useful for invoking commands built up at <em>runtime</em>, as was done in the answer you linked to in order to add a word discovered at runtime to the spelling dictionary.</p>
","6646"
"Yanking and pasting while incrementing","434","","<p>I am editing a .sql file in Vim:</p>

<pre><code>INSERT INTO apps_forms (app_id, form_id) VALUES
(1, 1),
</code></pre>

<p>What I'm looking to do is yank the <code>(1, 1),</code> line and paste it 137 times; however, I want the <em>second</em> number in parenthesis to be incremented each time. The output would look like:</p>

<pre><code>INSERT INTO apps_forms (app_id, form_id) VALUES
(1, 1),
(1, 2),
(1, 3),
...
(1, 137),
</code></pre>

<p>Is there a way to do that in Vim and, if so, what command would I use?</p>

<p>Thanks!</p>
","<p>Put your cursor on the <code>(1, 1),</code> line then type :</p>

<pre><code>qaVypt)&lt;C-a&gt;q135@a
</code></pre>

<p>Explanation :</p>

<p><code>qa</code> begins the recording of a macro inside the register <strong>a</strong> (you could choose another letter).  </p>

<p><code>Vyp</code> duplicates the current line, by selecting the whole line (V), copying it (y) and then pasting it below (p).  </p>

<p><code>t)</code> move the cursor just before the next closed parenthesis, so that it's on the second number.  </p>

<p><code>&lt;C-a&gt;</code> (<kbd>Ctrl</kbd> and <kbd>a</kbd>) increments the number.  </p>

<p><code>q</code> ends the recording of the macro.  </p>

<p><code>135@a</code> replays the macro stored in the register <strong>a</strong> 135 times.</p>

<p>Edit : <a href=""https://vi.stackexchange.com/questions/5436/yanking-and-pasting-while-incrementing/5437#comment8342_5437"">Peter Rincker</a> has a shorter command :</p>

<pre><code>qqYpW&lt;c-a&gt;q135@q
</code></pre>

<p>The differences are :</p>

<p>it uses the register <strong>q</strong> to store the macro (faster to type <code>qq</code> than <code>qa</code> because it's the same key),<br>
it copies the line with only one keystroke <code>Y</code> (instead of two <code>Vy</code>),<br>
and it moves the cursor to the second number with only one keystroke <code>W</code> (instead of <code>t)</code>).</p>
","5437"
"Duplicate block of code","433","","<p>I'm using vim a lot and I'm trying to optimize few movements I do with too much key pressed. </p>

<p>For exemple I have this :</p>

<pre><code>module SanitizeIdsParams
  def self.my_method ids
    ...code
  end
end
</code></pre>

<p>And I want this</p>

<pre><code>module SanitizeIdsParams
  def self.my_method ids
    ...code
  end

  def self.my_method ids
    ...code
  end
end
</code></pre>

<p>For the moment I'm doing something like <code>j&lt;CR&gt;v3jy&lt;ESC&gt;4Go&lt;ESC&gt;p</code> I'm not a huge fan of <code>:2,4t.4Go&lt;ESC&gt;</code>, any other ideas without specifying exact line number ? </p>

<p>I would like to know also if when I yank I can stay where I yank and not going at the beginning of my visual selection.</p>

<p>Open to classic vim motions and plugins.</p>
","<p>Once you have your visual selection you can do:</p>

<pre><code>:'&lt;,'&gt;t'&gt;
</code></pre>

<p>(it's actually <code>:t'&gt;</code> because Vim adds the visual range automatically)</p>

<p>to copy it after the visual selection and do:</p>

<pre><code>'[O&lt;Esc&gt;
</code></pre>

<p>to add an empty line.</p>

<p>If you don't want to use visual selection, something like this should work:</p>

<pre><code>:,/end/t//
</code></pre>

<p>You will still need to add the empty line manually.</p>
","4992"
"Is it possible to add inline comments in a multiline statement?","433","","<p>I have a function that looks like</p>

<pre><code>fu! MultiLineTest(u, v)
    if    a:u != 2 &amp;&amp;
       \  a:v != 2

       return 'yes'
    else
       return 'no'
    end
endfu
</code></pre>

<p>Of course, the actual function is longer and more complicated.</p>

<p>Now, I'd like to add comments to the multi line expression, like so:</p>

<pre><code>    if    a:u != 2 &amp;&amp;  "" Neither u nor
       \  a:v != 2     "" v must be 2
</code></pre>

<p>If the function is called now, I get an error:</p>

<blockquote>
  <p>E15: Invalid expression: a:u != 2 &amp;&amp;  "" neither u nor  a:v != 2     "" v must be 2</p>
</blockquote>

<p>I understand why this error is thrown. But I'd still find it nice if I could somehow add comments to such a multi line expression. Is this possible?</p>
","<p>Not directly. But: if the comment applies to the whole line, you better place it above the line. If the comment(s) are each to indicate something about a portion of the line, you could consider splitting the line into exactly those pieces, and use variables named such as that they can <em>replace</em> your comments. It's better (IMHO) when the code ""speaks"" directly. E.g.</p>

<pre><code>fu! MultiLineTest(u, v)
    let meaning_one = (a:u != 2) ""there can also be details (if needed)
    let meaning_two = (a:v != 2) ""other details
    return (meaning_one &amp;&amp; meaning_two) ? 'yes' : 'no'
endfu
</code></pre>
","4230"
"Show partially hidden wrapped lines","433","","<p>I have turned on line wrapping with <code>set wrap linebreak nolist</code> in my .vimrc. However, this has the annoying behavior that lines not <em>completely</em> visible on the screen are hidden outright and replaced with @ signs:</p>

<p><img src=""https://i.stack.imgur.com/zrsie.png"" alt=""""></p>

<p>How can I make these lines show up even though they are partially hidden?</p>
","<p>You can use:</p>

<pre><code>:set display+=lastline
</code></pre>

<p>From <a href=""http://vimhelp.appspot.com/options.txt.html#%27display%27""><code>:help 'display'</code></a>:</p>

<pre><code>lastline        When included, as much as possible of the last line
                in a window will be displayed.  When not included, a
                last line that doesn't fit is replaced with ""@"" lines.
</code></pre>
","103"
"What bad things can happen if I use :bwipeout?","433","","<p>I have just discovered the <code>:bwipeout</code> command, for which the <code>:help</code> states:</p>

<blockquote>
  <p>Like <code>:bdelete</code>, but really delete the buffer.  Everything
  related to the buffer is lost.  All marks in this buffer
  become invalid, option settings are lost, etc. Don't use this
  unless you know what you are doing.</p>
</blockquote>

<p>Other than the obvious, I'm unclear on what the downside to using this command is.</p>

<p>My option settings will almost always be reset to the same values when I next open the file in question, and losing my marks doesn't seem to warrant the ominous warning: ""Don't use this unless you know what you are doing.""</p>

<p>What is included in the ""etc."", and what terrible consequences could there be that I'm not foreseeing?</p>
","<p>""Bad"" is a bit relative (your hard drive won't be erased or anything).</p>

<p><code>bdelete</code> makes the buffer unlisted, but doesn't purge marks, options, the buffer name, the buffer number, and so on. If you reload the buffer that information is retained (less what may be modified by autocommands), which may be useful because</p>

<ul>
<li>it allows you to keep using any marks, or the buffer number, you may have in your short-term memory.</li>
<li>it prevents vim from having to reparse <code>viminfo</code> for the relevant information (trading the cost of keeping that info in RAM for the cost of reading that file from the disk, which is admittedly something we don't generally need to consciously worry about that much on modern computers).</li>
</ul>

<p><code>bwipeout</code>, on the other, gets rid of <em>all</em> of that (everything that is associated with the buffer), so that if you reopen the buffer it will be as if vim never saw that buffer before during this session.</p>

<p>It's not really as ""dangerous"" as the documentation implies. I presume the dire writing is simply to warn you that wiping out a buffer is significantly more destructive of an action than simply deleting it.</p>
","2213"
"Apply normal mode command to regex matches","432","","<p>I am using the following regular expression to match a documentation string underneath a Clojure function definition:</p>

<pre><code>\vdefn.*\n\s*\zs""([^""]|\n)*""
</code></pre>

<p>Is there a way to run the normal mode <code>gq</code> (format lines) command on all matches of this pattern in a given file?</p>
","<p>Power of <code>g</code>:</p>

<pre><code>:g/\vdefn.*\n\s*\zs""([^""]|\n)*""/normal gngq
</code></pre>

<p>The part between the <code>/</code>s is fairly self-explanatory, since it's the regex from your original question.</p>

<p><code>normal gngq</code> at the end is somewhat interesting. <code>gn</code> will select the next match of the regular expression, and <code>gq</code>, of course, formats this selection (as you mentioned in your question).</p>

<p><code>:g</code> is the really great part. This is, in my opinion, one of Vim's most useful features. The <code>g</code> ex command takes a regex and an Ex command, and it executes the command on every line the regex matches. If you haven't learned about <code>:g</code> already, I highly recommend doing so, as it'll vastly increase your productivity. A few resources are Vim's own <code>:help :g</code> or <a href=""http://vim.wikia.com/wiki/Power_of_g"" rel=""nofollow"">Power of g</a> on Vim wiki.</p>
","2007"
"Jump to next identifier in Vim help files","432","","<p>I regularly find myself in the situation that I am reading a help topic and see an identifier (the blue underlined words) that I want to follow with <code>&lt;C-]&gt;</code>. However, most of the time the identifier is not (yet) under my cursor.</p>

<p>Instead of searching for the identifier with <code>/part_of_identifier&lt;CR&gt;</code> I would like to use a smarter variant, a <a href=""https://github.com/tpope/vim-unimpaired"" rel=""noreferrer"">unimpaired-like</a> mapping like <code>]i</code> to go to the next available identifier after my cursor (and <code>[i</code> to go to the previous identifier).</p>

<p>How could I create such a mapping? Or is there a builtin command already for that? If not, do you see an alternative/smarter way how I could navigate identifiers inside Vim help files? Or can I tag all Vim's and the plugins' help files with ctags and use <code>]t</code> somehow?</p>
","<p>In the help files the identifiers are actually marked as <code>|identifier|</code> (but you don't see the <code>|</code> because of the syntax file, use <code>set ft=txt</code> in an help buffer to check what I'm talking about).</p>

<p>You could then create a mapping which would look for the next pattern <code>\|\W*\|</code> and you should be good.</p>

<p>Something like:</p>

<pre><code>execute ""nnoremap ]i :call search('\\|\\w*\\|')&lt;CR&gt;""
</code></pre>

<p>(The execute and multi <code>\\|</code> are here to deal with the escaping problems)</p>

<p><strong>Edit</strong> @EvergreenTree came up with a much more elegant solution:</p>

<pre><code>nnoremap ]i :call search('\v\\|.{-}\\|')&lt;CR&gt;
</code></pre>

<hr>

<p>It is also possible to use the same method to jump to the help topics (the string used in the commands <code>:h foo</code>) which are delimited by <code>*</code> characters:</p>

<pre><code>nnoremap ]i :call search('*\w*\*')&lt;CR&gt;
</code></pre>
","7945"
"Change a font in Vim/GVim in a simple way","431","","<p>I merely want to change a font in Vim/GVim. That's it. This doesn't work:</p>

<pre><code>font=Monaco\ 14
</code></pre>

<p>I've done a google search and I wonder, why is for such a elementary task there's no simple answer which works, instead I've found a lot of ambiguous, complex solutions. And none of them worked.  How can I do that?</p>
","<p>Reading the <code>'guifont'</code> option is useful here. I do understand your frustrations with this option however. It seems that how you set the <code>'guifont'</code> setting, is dependent on the OS.</p>

<p>On macOS, you set 'guifont' the following way (which is noted in <a href=""http://vimhelp.appspot.com/options.txt.html#%27guifont%27"" rel=""nofollow noreferrer"">:help 'guifont'</a>):</p>

<pre><code>set guifont=Monaco:h14
</code></pre>

<p>On other OSes (Linux, etc) you use the backslash instead to specify the font size:</p>

<pre><code>set guifont=Monaco\ 14
</code></pre>

<p>Another useful way to set the font is to use <code>:set guifont=*</code> which will bring up the Font chooser for your OS. Selecting a font then will apply it for your Gvim instance.</p>

<p>Why this distinction between the ""\"" and "":"" to set the font size exists, however, is a separate question which I would like to know as well.</p>
","11488"
"Vim slows down with multiple buffers etc","431","","<p>I think noticing a slow redrawing and slow cursor movement on a fastest PC, is one of the popular frustrations with Vim. Here I am as a yet another instance.</p>

<p>I have a fresh installation of VIM, with the <code>$MYVIMRC</code> at the bottom.</p>

<p>My problem is basically a painful slowdown of cursor movements and screen redraws, which are seen often after a while when</p>

<ul>
<li>lot many buffers parallelly open</li>
<li>a longer sessions with multiple buffers used
but not immediately after I start vim. They may not be the only cases though.</li>
</ul>

<p>This is frustrating because, the problem is not easily reproducible. I cannot debug by line by line in $VIMRC, because I don't know how long should I wait to see slow down. All that I could do over the time is to observe the two above cases. </p>

<p>Can some of the vim-monks quickly see where the problem is in the vimrc below? (I copied all except a heap of <code>:nnoremap</code> commands that I often use)</p>

<pre><code>:set nocompatible
:set regexpengine=1     ""The new engine replaced with old (suggested on vi.SE)
:set foldmethod=marker   ""fold based on default-markers 
:set foldnestmax=10      ""deepest fold is 10 levels
:set nofoldenable        ""dont fold by default
:set noswapfile     ""Realized that swap troubles much more than it helps 
:set number
:set wildmenu
:set guifont=Monospace\ 12
:colorscheme industry

""Make search more user-friendly
:set incsearch  ""Search as you go
:set hlsearch   ""Highlight matches
:set ignorecase ""Case-insensitive searches

:set showmatch  ""Quickly jump to matching bracket/brace etc

 %for highlighting in red all exceedingly longer lines
:au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%&gt;85v.\+', -1)
                      ""==&gt; This seems to be the potential culprit..

:filetype plugin on
:runtime macros/matchit.vim

:set formatoptions=tcroqlj

:au VimLeave * :mapclear 
:au VimLeave * :mksession! ~/.hari_vim_session
:au VimLeave * :%normal g_lD


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/tComment'   "" Toggle Comments -- comment/uncomment
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'        
Plugin 'vim-airline/vim-airline-themes'
Plugin 'bling/vim-bufferline'
                 ""Is this bufferline the culprit? Thought it was nice!!
Plugin 'vim-scripts/vis'    ""Vertically selection to filters
call vundle#end()

:set lazyredraw   ""Don't redraw unnecessarily too many times
:set ttyfast 
</code></pre>

<p>BTW, following 
<a href=""https://vi.stackexchange.com/questions/2003/how-do-i-debug-my-vimrc-file?noredirect=1&amp;lq=1"">How do I debug my vimrc file?</a> when I started vim in no-plugin no-vimrc mode, I see no slow down, but the default interface is not usable to me. I need some modifications as I did in above <code>$MYVIMRC</code>. Hope you don't ask me to withdraw the whole <code>$MYVIMRC</code>.</p>
","<p>I have no idea if any of the following will help, but here are a few things you could try.</p>

<p>You have the following autocmd:</p>

<pre><code>:au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%&gt;85v.\+', -1)
</code></pre>

<p>I can't read your whole <code>vimrc</code> file, so maybe you already did it in the missing part, but in case you didn't, you should probably wrap this autocmd (and the other ones) inside an augroup.</p>

<pre><code>augroup long_lines
    au!
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%&gt;85v.\+', -1)
augroup END
</code></pre>

<p>The line <code>au!</code> makes sure to delete all the autocmds inside the current augroup every time you source your <code>vimrc</code>.</p>

<p>Without this augroup and the <code>au!</code> line, each time you source your <code>vimrc</code>, a new identical autocmd is added, and you should be able to reproduce some slowdown by sourcing your <code>vimrc</code>:</p>

<pre><code>:so $MYVIMRC
</code></pre>

<p>... then repeating this command enough time.<br>
For example, to repeat it <code>40</code> times, you could type, in normal mode, <code>40@:</code>.<br>
<code>@:</code> will reexecute the last Ex command, the number of times you asked (here <code>40</code>).</p>

<p>See <a href=""http://learnvimscriptthehardway.stevelosh.com/chapters/14.html"" rel=""nofollow noreferrer"">here</a> and <a href=""https://vi.stackexchange.com/questions/9455/why-should-i-use-augroup"">here</a> for more info.</p>

<hr>

<p>Currently, the autocmd adds a new identical match every time a buffer is displayed in a window, which is probably unnecessary.  </p>

<p>If you reload your current buffer, by typing <code>:e</code>, you should see that a new identical match has been created. You can see it with the <code>getmatches()</code> function, by typing:</p>

<pre><code>:echo getmatches()
"" info about the current matches

:echo len(getmatches())
"" number of matches
</code></pre>

<p>If you reload your buffer enough times, by typing for example <code>40@:</code> (to reexecute the last Ex command, which here is <code>:e</code>, fourty times), you should see a big list of identical matches.</p>

<p>From there, if you load one of your usual files, you should probably experience some slowdown.</p>

<p>The previous augroup and the <code>au!</code> command won't protect you from these duplications. You need a second protection on top of the augroup.</p>

<p>For example, you could ask Vim to check whether you already created a match with the <code>exists()</code> function:</p>

<pre><code>if !exists('w:m2')
    "" create your match and store its identifier inside the variable `w:m2`
endif
</code></pre>

<p>The exclamation mark before <code>exists()</code> is there to invert the test. You don't want to create the match when one already exists. You want to create a match when one does NOT already exist.</p>

<p>So, all in all, you could try this autocmd:</p>

<pre><code>augroup long_lines
    au!
    au BufWinEnter * if !exists('w:m2') | let w:m2=matchadd('ErrorMsg', '\%&gt;85v.\+', -1) | endif
augroup END
</code></pre>

<hr>

<p>You don't need to disable the <code>'compatible'</code> option, because it should be done automatically by Vim if it finds a <code>vimrc</code>. From <code>:h 'cp</code>:</p>

<pre><code>When a |vimrc| or |gvimrc| file is found while Vim is starting up,
this option is switched off, and all options that have not been
modified will be set to the Vim defaults.
</code></pre>

<hr>

<p>It's not linked to your issue, but you don't need to prefix your commands with a colon <code>:</code>, because when Vim sources your <code>vimrc</code> it interprets the lines as Ex commands (and not normal commands).</p>

<p>You don't need to prefix your autocmds with a colon either. Because an autocmd executes Ex commands by default. It doesn't execute normal commands, like <code>dd</code> (you would have to write <code>normal! dd</code>, but <code>normal</code> is still an Ex command).</p>

<p>So, as an example, you could rewrite this part:</p>

<pre><code>:au VimLeave * :mapclear 
:au VimLeave * :mksession! ~/.hari_vim_session
:au VimLeave * :%normal g_lD
</code></pre>

<p>Like this:</p>

<pre><code>augroup my_augroup
    au!
    au VimLeave * mapclear 
    au VimLeave * mksession! ~/.hari_vim_session
    au VimLeave * %normal g_lD
augroup END
</code></pre>

<hr>

<p>You could also try to avoid writing comments right after an Ex command.<br>
Try to write your comments on their own dedicated lines.<br>
In particular avoid adding a comment right after a mapping.</p>

<hr>

<p>If Vim is still slow, and you suspect something in your <code>vimrc</code> is the cause, you could write the line <code>finish</code> somewhere in the middle of it. But don't write <code>finish</code> between the lines:</p>

<pre><code>call vundle#begin()
</code></pre>

<p>and</p>

<pre><code>call vundle#end()
</code></pre>

<p>Anything after <code>finish</code> won't be executed by Vim. If the problem persists, it means the cause is somewhere before <code>finish</code>, otherwise after.</p>

<p>Then, you repeat the process.<br>
If you know that the cause is in the first half of your <code>vimrc</code>, you move <code>finish</code> in the middle of it (that is after <code>1/4</code> of the file), otherwise in the middle of the second half (that is after <code>3/4</code> of the file).</p>

<p>So, in the first step, you write <code>finish</code> after half of the file.<br>
In the second step, you write it after <code>1/4</code> or <code>3/4</code> of the file (depending on the result of the previous step).<br>
In the third step, you write it after <code>1/8</code>, <code>3/8</code>, <code>5/8</code> or <code>7/8</code> of the file.<br>
...</p>

<p>After each step, you should be able to eliminate half of the remaining lines as possible suspects.</p>

<p>To move your cursor right after the first half of your file, from normal mode, you can type <code>50%</code>.<br>
To move it after <code>1/4</code> of the file, you can type <code>25%</code>.<br>
After <code>1/8</code>, <code>12%</code> or <code>13%</code>, etc.</p>
","10637"
"What is the use of the black hole register (""_)?","431","","<p>I recently read about the black hole register <code>""_</code> which is a write-only register.</p>

<p>Vim documentation describes it this way:</p>

<blockquote>
  <ol start=""9"">
  <li>Black hole register ""_</li>
  </ol>
  
  <p>When writing to this register, nothing happens.  This can be used to delete
  text without affecting the normal registers.  When reading from this register, nothing is returned.</p>
</blockquote>

<p>In all the articles and books I read the authors always use the same example which is to use this register when we need to delete some text without erasing what we previously yanked.</p>

<p>I understand this use but I'm surprised by the fact that I can't find other use cases of this register, which leads me to 2 questions:</p>

<ul>
<li><p><strong>Is this register useful in some other use cases</strong>? If yes, which ones?</p></li>
<li><p>If the only purpose of this register is to be used in the use case I quoted before, <strong>why did the creators of Vim decided to solve this problem with such a register</strong>? I mean <a href=""https://vi.stackexchange.com/a/3329/1841"">this answer</a> shows a solution to the problem which implies less keystrokes than using <code>""_</code>. Using <code>""0</code> can also avoid the use of the black hole register so why did they create it?</p></li>
</ul>
","<p>The black hole register is used in the same situations as <code>/dev/null</code>: when you do an action that normally outputs something but you have no use for that output.</p>

<p>Vim's default behavior is to ""cut"", not ""delete"". In most cases it doesn't matter but, sometimes, users may actually need to ""delete"". That's where the black hole register comes handy.</p>

<p><strong>Is this register useful in some other use cases?</strong></p>

<p>The black hole register is here to let us cut stuff without clobbering the unnamed register and the numbered registers.</p>

<p>The possible use cases are numerous but all unsurprisingly very similar:</p>

<ul>
<li>provide an actual ""delete"",</li>
<li>have a better control over registers, mainly the unnamed one,</li>
<li>keep the numbered registers in a stable state,</li>
<li>cut something while retaining the ability to put from the unnamed register, giving us ""repeatable puts"",</li>
<li>put something over something you don't care about,</li>
<li>prevent side effects in scripts…</li>
</ul>

<p>One could use <code>""0p</code> for the ""repeated puts"" scenario (the most common use case, hence its ubiquity in the Vim literature) but that register is far from being as useful as <code>""_</code> for the other scenarios.</p>
","3383"
"Does any solution exist to use vim from touch screen?","430","","<p>Actually, I hit this problem when I used ssh from my android phone to log in into a linux server, and I tried to use vim to edit some files.</p>

<p>It was a little bit... displeasing, although I could do everything which I could do from a normal desktop/keyboard.</p>

<p><em>Extension:</em> There was a question, why it was displeasing if I could do anything I wanted. For example, typing <code>5j45|</code> on an emulated keyboard on a touchscreen has a <em>much</em> lower information rate (between your brain and your device) as touching the intended character position on a touchscreen.</p>
","<p>Does enabling mouse helps? This way you should be able at least do selections via touch. Maybe navigate files and buffers/tabs. Depends on plugins I guess.</p>

<pre><code>set mouse=a
</code></pre>
","2561"
"How to make YCM load <GL/glew.h> by default?","430","","<p>I am currently learning OpenGL and C++ and I would like to have gl* completion ready on my C++ projects.</p>

<p>YCM is not scanning the <code>&lt;GL/glew.h&gt;</code> header when I include it - isn't it supposed to do it by default? That's how I understood it to work in the first place - maybe I'm wrong here.</p>

<p>I am using following default global YCM config file:</p>

<pre><code># Generated by YCM Generator at 2016-03-06 01:49:19.854235

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to &lt;http://unlicense.org/&gt;

import os
import ycm_core

flags = [
    '-x',
    'c++',
    '-std=c++11',
    '-isystem', '/usr/include',
    '-isystem', '/usr/local/include',
    '-I', 'src',
    '-I', 'include'
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a ""list-like"" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }
</code></pre>

<p>I'm not very good at Python, though, and have not enough knowledge of compiler settings to configure this.</p>

<p>How can I make YCM to give me OpenGL completions in my case?</p>

<p><strong>Edit:</strong> I think this option <a href=""https://github.com/Valloric/YouCompleteMe#the-gycm_semantic_triggers-option"" rel=""nofollow"">https://github.com/Valloric/YouCompleteMe#the-gycm_semantic_triggers-option</a> may have something to do with it, but I haven't managed to find the solution yet.</p>
","<p>So, after some iterations and tests, the answer to this is by using the <code>g:ycm_semantic_triggers</code> option as described here: <a href=""https://github.com/Valloric/YouCompleteMe#the-gycm_semantic_triggers-option"" rel=""nofollow"">https://github.com/Valloric/YouCompleteMe#the-gycm_semantic_triggers-option</a> This has to be done via the regex mode.</p>

<p>Here's the relevant config line from my <code>.vimrc</code>:</p>

<pre><code>let g:ycm_semantic_triggers =  { 'cpp,objcpp' : ['-&gt;', '.', '::', 're!gl'] }
</code></pre>

<p>It adds the <code>'re!gl'</code> item to the list of default semantic triggers in C++ and Obj-C++. This will trigger semantic completion on anything starting with <code>gl</code>.</p>
","6849"
"Working with shell command strings in vim's system() function","429","","<p>I am trying to write simple function which runs a shell command and prints the result into vims shell output window, this here is a basic version of the function which does work:<br>
function defined in <code>~/.vimrc</code></p>

<pre><code>function! Runphp()
    let s:runphp='cat /tmp/php_snippet | php'
    echo(system(s:runphp))
endfunction
</code></pre>

<p>file /tmp/php_snippet</p>

<pre><code>&lt;?php
$a = ['apple', 'orange', 'bannana', 'pear'];
print_r($a);
</code></pre>

<p>If I run <code>:call Runphp()</code> vim prints the result of the executed PHP in the result window, all good.<br>
The problem occurs where the <code>&lt;?php</code> tag doesn't already exist in <code>/tmp/php_snippet</code> i.e.</p>

<p>file /tmp/php_snippet looks like this:</p>

<pre><code>$a = ['apple', 'orange', 'bannana', 'pear'];
print_r($a);
</code></pre>

<p>and I try to inject <code>&lt;?php</code> as part of the shell command, i.e.</p>

<pre><code>function! Runphp()
    let s:runphp='{ echo ""&lt;?php""; cat /tmp/php_snippet } | php'
    echo(system(s:runphp))
endfunction
</code></pre>

<p>If I <code>:call Runphp()</code> now, vim returns</p>

<blockquote>
  <p>Error detected while processing function Runphp:<br>
  line    3:<br>
  E484: Can't open file /tmp/vReTqKG/9</p>
</blockquote>

<p>How can I deal with this error so I can get this extra <code>&lt;?php</code> injected into the shell command?</p>
","<p>From <a href=""http://manpages.ubuntu.com/manpages/trusty/en/man1/bash.1.html"" rel=""nofollow""><code>man bash</code></a>:</p>

<pre><code>Compound Commands
   A compound command is one of the following:
   ...
   { list; }
          list  is simply executed in the current shell environment.  list
          must be terminated with a newline or semicolon.  This  is  known
          as  a  group  command. 
</code></pre>

<p>Note: in <code>{ echo ""&lt;?php""; cat /tmp/php_snippet } | php</code>, you need a <code>;</code> before the closing brace. Unless you're using zsh, in which case the whole thing would have worked fine.</p>

<p>The output from bash isn't particularly helpful:</p>

<pre><code>$ bash -c '{ echo ""&lt;?php""; cat /tmp/php_snippet } | php'  
bash: -c: line 1: syntax error: unexpected end of file
</code></pre>

<p>However, I can find no way to get <code>system</code> to return even this error message, without manually calling <code>bash -c</code>.</p>
","7814"
"Vimscript file rewrites itself and complains of a mismatched endfor","428","","<p>I want to remap <code>&lt;C-i&gt;*character*</code> to <code>i*character*&lt;Esc&gt;</code> for easy inserting of single characters. This is what I've written:</p>

<pre><code>let printable_characters = [ '!', '""', '#', '$', '%', '&amp;', '''', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '&lt;', '=', '&gt;', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~']
for val in printable_characters
    silent! execute ""nnoremap &lt;C-i&gt;"" . val . "" i"" . val . ""&lt;Esc&gt;""
    silent! execute ""nnoremap &lt;C-a&gt;"" . val . "" a"" . val . ""&lt;Esc&gt;""
    unlet val
endfor
</code></pre>

<p>When I try to source it by executing <code>:source %</code>, the following happens:</p>

<ol>
<li>It will complain about how I forgot the <code>endfor</code></li>
<li><p>Once I press return, the file will look like this:</p>

<pre><code>let printable_characters = [ '!', '""', '#', '$', '%', '&amp;', '''', '(',          ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '&lt;', '=', '&gt;', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~']
for val in printable_characters
    silent! execute ""nnoremap &lt;C-i&gt;"" . val . "" i"" . val . ""&lt;Esc&gt;""
    silent! execute ""nnoremap &lt;C-a&gt;"" . val . "" a"" . val . ""&lt;Esc&gt;""
    unlet val
    silent! execute ""nnoremap &lt;C-a&gt;"" . val . "" a"" . val . ""&lt;Esc&gt;""
    unlet val
    endfor
endfor
</code></pre></li>
</ol>
","<p>There is a much better way of accomplishing this than brute forcing it.  You can use these simple expr mappings instead:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;c-i&gt; ""i"" . nr2char(getchar()) . ""&lt;Esc&gt;""
nnoremap &lt;expr&gt; &lt;c-a&gt; ""a"" . nr2char(getchar()) . ""&lt;Esc&gt;""
</code></pre>

<p>Here is how they work:</p>

<ul>
<li><code>nnoremap &lt;expr&gt; &lt;c-i&gt;</code> - Create a mapping for <kbd>Ctrl</kbd><kbd>i</kbd> with the <code>&lt;expr&gt;</code> flag.  This flag tells vim to interpret all of the characters after <code>&lt;c-i&gt;</code> as an expression when the mapping is triggered, which means you can use functions, variables, operators and the like.</li>
<li><code>""i"" . nr2char(getchar()) . ""&lt;Esc&gt;""</code> - A simple expression which concatenates <code>""i""</code>, a single character given by the user, and <code>""&lt;Esc&gt;""</code>.  <code>getchar</code> returns a number representing the pressed key, so <code>nr2char</code> is used to convert it to a string.  The result of this concatenation is what is used as the final mapping when the user presses <kbd>Ctrl</kbd><kbd>i</kbd>.  For example, if the user presses <kbd>Ctrl</kbd><kbd>i</kbd><kbd>t</kbd> then this expression evaluates to <code>""it&lt;Esc&gt;""</code>, which then results in those keys being pressed.</li>
</ul>

<p>For more, see <code>:help :map-&lt;expr&gt;</code>.</p>

<p>Also, look at the other answers for why your current solution doesn't work.</p>
","6371"
"Adding ctags for a 3rd party library","426","","<p>I would like to know how to generate ctags and find them with auto-complete plugins for new libraries that I install in order to 1) auto-complete for 3rd party library namespaces, classes, etc. and 2) not have my syntax checking plugin think I have undefined references. In order to generate tags for my own new projects, I use this command:</p>

<pre><code>map &lt;C-F12&gt; :!ctags -R --sort=yes --c++-kinds=+pl --fields=+iaSl --extra=+q .&lt;CR&gt;
</code></pre>

<p>But how do I adapt this to new libraries in my system? I have tried going to a library's include directory, run the above command, and then set the ctag path to find the tags file, e.g.</p>

<pre><code>:set tags+=/usr/include/pcl-1.7/pcl/tags
</code></pre>

<p>But then it seems that the tags are not found. I use the YouCompleteMe and I have the collect_identifiers parameter set:</p>

<pre><code>let g:ycm_collect_identifiers_from_tags_files = 1
</code></pre>

<p>How can I enable ctags to find them? I can using Exuberant Ctags 5.9 and VIM 7.4.</p>
","<p>You could use this to tell Vim to look recursively for <code>tags</code> files under <code>/usr/include/</code>:</p>

<pre><code>set tags+=/usr/include/**/tags
</code></pre>

<p>For the generation part, I'm afraid you will still have to generate <code>tags</code> files manually for each new library… or write a shell script.</p>

<hr>

<p>By the way, Vim comes with what it calls ""include-search""; you will probably find the following help sections interesting:</p>

<pre><code>:help include-search
:help definition-search
:help 'include'
:help 'define'
</code></pre>
","5740"
"How can I print from vim using the native KDE print dialogue?","426","","<p>I'm using <code>vim</code> from a terminal emulator, and I'd like to be able to print using KDE's native print dialogue. This would let me select options such as printer, collating, number of copies and pages per piece of paper.</p>

<p>(There is an older tip <a href=""http://vim.wikia.com/wiki/Printing_using_kprinter"" rel=""nofollow"">here</a> explaining how to link vim with <code>kprinter</code>, but this does not work, and I suspect <code>kprinter</code> has been deprecated.)</p>

<p>I know that I can ""print"" to a postscript file with <code>:ha &gt; foo.ps</code> (or <code>:hardcopy</code>), then open this up with a GUI viewer, such as <code>okular</code>, but is there a way to get directly to the print dialogue from <code>vim</code>? (Also, I assume it's impossible, but can I open up a print preview window too?)</p>
","<p>The loss of kprinter in the move to kde4 was one of the reasons I stuck with kde3 for as long as I could.</p>

<p>After some searching, I found this ""3rd party"" replacement: <a href=""http://kde-apps.org/content/show.php/KPrinter4?content=163537"" rel=""nofollow noreferrer"">http://kde-apps.org/content/show.php/KPrinter4?content=163537</a>, <a href=""https://github.com/credativ/kprinter4"" rel=""nofollow noreferrer"">https://github.com/credativ/kprinter4</a>.</p>

<p>It looks like you have to compile it yourself (Its not included in distros since it isn't core kde). The result works like the old one that came with kde3, but in the kde4 environment. It is used the same way, except the executable is called kprinter4.</p>

<p>Note: Some non-KDE alternatives are presented at the bottom.</p>

<p>I tried following the instructions at the vimwiki link you posted to use it, but I found those difficult to follow (too many escaped characters), so I based my vimrc on the function method found in <code>:help pexpr-option</code></p>

<h1>Building the executable</h1>

<p>This bit isn't about Vim, but is a prereq to the solution. I'm writing this with limited assumptions about your (or whoever else finds this answer useful) knowledge of building software.</p>

<ol>
<li><p>Download the ""latest"" source to kprinter4 from the link above. I used <a href=""http://kde-apps.org/content/download.php?content=163537&amp;id=1&amp;tan=32050597"" rel=""nofollow noreferrer"">http://kde-apps.org/content/download.php?content=163537&amp;id=1&amp;tan=32050597</a></p></li>
<li><p>Extract into some directory: <code>tar xf 163537-kprinter4-12.tar.xz</code> (filename may be different for a newer version)</p></li>
<li><p>Cd into the source directory: <code>cd kprinter4-12</code> (directory may be different in a newer version)</p></li>
<li><p>Create a build directory and change into it: <code>mkdir build &amp;&amp; cd build</code></p></li>
<li><p>Run cmake. I used the options given at the kde-apps page, but changed the INSTALL_PREFIX such that I don't need to be administrator to install (but the install is only for me):</p>

<pre><code>cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/home/john/opt/kprinter4 ..
</code></pre>

<p>The trailing <code>..</code> is important. The INSTALL_PREFIX can be whatever you want, but it will be used in your vimrc (see below). You'll at least want to replace my username with your own.</p>

<p>If the command fails, it will probably tell you that you are missing libraries (for me it was missing LIBSPECTRE). Install whatever is missing and loop until cmake is successful. (e.g. in my case: <code>apt-get install libspectre-dev</code>) Depending on your distro and setup, different commands and package names may be needed.</p></li>
<li><p>Run make: <code>make</code></p></li>
<li><p>Install: <code>make install</code></p></li>
</ol>

<h1>Configure Vim</h1>

<p>I'm using the install path  from my sample isntructions above (which include my home directory). Change the paths as appropriate for your system (e.g. replacing my username with yours, or whatever you did for the INSTALL_PREFIX in the above section)</p>

<p>In my vimrc:</p>

<pre><code>function PrintFile(fname)
   call system(""/home/john/opt/kprinter4/bin/kprinter4 "" . a:fname)
   call delete(a:fname)
   return v:shell_error
endfunction
set printexpr=PrintFile(v:fname_in)
</code></pre>

<p>This creates a function that calls your newly built <code>kprinter4</code> program and then cleans up the file whenever you run :hardcopy.</p>

<p>After that, run <code>:hardcopy</code> on a document and get a pretty printer selector:</p>

<p><img src=""https://i.stack.imgur.com/XbFIR.png"" alt=""Screenshot of kprinter4 on top of a vim session that had just run :hardcopy""></p>

<h1>Non-KDE Alternatives</h1>

<p>Some Linux distributions provide <code>gpr</code> and/or <code>gtklp</code> (thanks @derobert and @Sparhawk for pointing out and testing these in the comments/chat)</p>

<h2>gpr</h2>

<p>Example for using gpr (presently available on Ubuntu but not Arch). Note that this errors on my system due to a missing PPD file or something. Your mileage may vary.</p>

<pre><code>function PrintFile(fname)
   call system(""gpr "" . a:fname)
   call delete(a:fname)
   return v:shell_error
endfunction
set printexpr=PrintFile(v:fname_in)
</code></pre>

<p><img src=""https://i.stack.imgur.com/PhEOa.png"" alt=""Screenshot of gpr after :hardcopy""></p>

<h2>gtklp</h2>

<p>Example for using gtklp (Available on both Ubuntu and Arch)</p>

<pre><code>function PrintFile(fname)
   call system(""gtklp "" . a:fname)
   call delete(a:fname)
   return v:shell_error
endfunction
set printexpr=PrintFile(v:fname_in)
</code></pre>

<p><img src=""https://i.stack.imgur.com/2MAyF.png"" alt=""Screenshot of gtklp after :hardcopy""></p>

<h2>Alternative gtklp</h2>

<p>At least one person has had an issue where gtklp on Arch Linux doesn't accept files specified on the command line. Below is an alternative method that works in that case (or in any case) that passes the contents of the file instead.</p>

<pre><code>function PrintFile(fname)
   call system(""cat "" . a:fname . "" | gtklp"")
   call delete(a:fname)
   return v:shell_error
endfunction
set printexpr=PrintFile(v:fname_in)
</code></pre>

<p><img src=""https://i.stack.imgur.com/jHbLD.png"" alt=""Screenshot of gtklp after :hardcopy but with a pipe""></p>

<p>Note that with this method, gtklp doesn't even have a files tab displayed, but it does in fact print the document when <code>print</code> is selected.</p>
","2435"
"How to join all lines together which matching pattern?","426","","<p>I would like to join lines together only for lines which have certain pattern (such as <code>;</code>), however when using <code>g/;/j</code> it doesn't work as expected unless called couple of times.</p>

<p>For example the following content:</p>

<pre><code>a
1;
2;
3;
4;
5;
b
6;
7;
8;
9;
c
</code></pre>

<p>when using: <code>:g/;/j</code> the output is:</p>

<pre><code>a
1; 2;
3; 4;
5; b
6; 7;
8; 9;
c
</code></pre>

<p>or <code>:g/;/-j</code> gives:</p>

<pre><code>a 1; 2; 3; 4; 5;
b 6; 7; 8; 9;
c
</code></pre>

<p>similar with: <code>:g/;\_.\{-};/j</code>.</p>

<p>My expected output is:</p>

<pre><code>a 
1; 2; 3; 4; 5;
b
6; 7; 8; 9;
c
</code></pre>

<p>or something similar, so all lines containing the pattern are joined together.</p>

<p>How this can be achieved?</p>
","<p><strong>Possible explanation of the problem</strong></p>

<p>I think the reason why <code>:g/;/j</code> doesn't work is because the <code>:g</code> command operates with a 2-pass algorithm:</p>

<ul>
<li>during the first pass it marks the lines containing the pattern <code>;</code></li>
<li>during the second pass it operates on the marked lines</li>
</ul>

<p>During the second pass, <code>:g</code> joins the line <code>1;</code> with line <code>2;</code> because <code>1;</code> was marked during the first pass.
However I suspect (not sure) that it doesn't join <code>1; 2;</code> with <code>3;</code> because the line <code>2;</code> doesn't exist anymore, its content has been merged with the line <code>1;</code> which has already been processed.  </p>

<p>So <code>:g</code> looks for the next line which was marked during first pass (<code>3;</code>) and joins it with the following one (<code>4;</code>). After that the problem repeats, it can't join <code>3; 4;</code> with <code>5;</code> because the line <code>4;</code> doesn't exist anymore.</p>

<p><strong>Solution 1 (with vimscript)</strong></p>

<p>Maybe you could call a function whenever a line containing <code>;</code> is found to check whether the previous line also contains a semicolon:</p>

<pre><code>function! JoinLines()
    if getline(line('.')-1) =~ ';'
        .-1join
    endif
endfunction
</code></pre>

<p>Then use the following global command:</p>

<pre><code>:g/;/call JoinLines()
</code></pre>

<p>Or without a function:</p>

<pre><code>:g/;/if getline(line('.')-1) =~ ';' | -j | endif
</code></pre>

<p><strong>Solution 2 (without vimscript)</strong></p>

<pre><code>:g/;/.,/^[^;]*$/-1j
</code></pre>

<p>Whenever the global command <code>:g</code> finds the pattern <code>;</code> it executes the command:  <code>.,/^[^;]*$/-1j</code></p>

<p>It can be broken down like this:</p>

<pre><code>:g/pattern/a,bj
</code></pre>

<p>Where :</p>

<pre><code>pattern = ;
a       = .           = number of current line
b       = /^[^;]*$/-1 = number of next line without any semicolon minus one
</code></pre>

<p><code>b</code> can be broken down further like this:</p>

<pre><code>/    = look for the number of the next line matching the following pattern
^    = a beginning of line
[^;] = then any character except a semicolon
 *   = the last character can be repeated 0 or more times
 $   = an end of line
 /   = end of pattern
 -1  = removes one to the number you just got
</code></pre>

<p><code>j</code> is the abbreviated form of the Ex command <code>:join</code> which like most other Ex commands can be preceded by a range.<br>
Here it's preceded by the range: <code>.,/^[^;]*$/-1</code> (<code>a,b</code>)<br>
A range follows the form <code>a,b</code> where <code>a</code> and <code>b</code> are generally 2 line numbers, and allows you to operate on a group of lines whose number is between <code>a</code> and <code>b</code>, instead of just one.  </p>

<p>So the <code>j</code> command joins all the lines between the current one (<code>a</code>) and the next one which doesn't contain any semicolon minus one (<code>b</code>).</p>

<p>For more information, see:</p>

<pre><code>:help :global
:help :join
:help :range
</code></pre>
","6009"
"Swap file directory often ignored","426","","<p>I have this in my <code>.vimrc</code>:</p>

<pre><code>set directory=~/.vim/tmp-backup-swapfiles
</code></pre>

<p>This directory is read- and writable by me, sensibly enough.  It is part of the local filesystem and never inaccessible.</p>

<p>However, vim seems to often ignore this and instead use <code>~/tmp</code>.  I've sometimes thought it does this with files from a remote mounted filesystem, but since I do that much of the time it is hard to tell.  Also, there are inconsistencies -- for example, right now I have gvim (7.4.475) open with a local file who's swap turns out to be in <code>~/tmp</code> and a remote file whose swap is in <code>~/.vim/tmp-backup-swapfiles</code>.  It is easy to see they are both still in play by making a change to the buffer and checking the timestamp.  I also have a source and header file from the same location open, but the <code>.hpp.swp</code> is in <code>~/tmp</code> and the <code>.cpp.swp</code> is in <code>~/.vim/tmp-backup-swapfiles</code> :\</p>

<p>This gets irritating when I have to clean up for whatever reason, or fail to, and get told there's suddenly a swapfile from last week in play on something I've been editing since.  What can I do to force it to just use the one directory specified to ensure there's no confusion?</p>
","<p>Use</p>

<pre><code>:set dir?
</code></pre>

<p>to see which directories are used to store your swap files. If you insist on having just one directory, you could use</p>

<pre><code>set directory=
set directory=~/.vim/tmp-backup-swapfiles//
</code></pre>

<p>Using double trailing slashes in the path tells Vim to create swap files using the whole path of the files being edited to avoid collisions.</p>
","5111"
"Vim ignore terminal color schemes when setting colors","426","","<p>I don't want <code>vim</code> to be affected by my terminal's color scheme.</p>

<p>Is there a way to do this?</p>

<p>In particular, I want my <code>LineNr</code> column to be colored black.</p>

<hr>

<p>I have seen it is possible because airline manages to do it:</p>

<p><a href=""https://i.stack.imgur.com/USSjk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/USSjk.png"" alt=""enter image description here""></a></p>

<p>However, my terminal seems to have changed the meanings of <code>black</code>, <code>blue</code> etc.</p>

<p><a href=""https://i.stack.imgur.com/b2QEz.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b2QEz.gif"" alt=""enter image description here""></a></p>
","<p>By using color names like <code>cyan</code> or <code>black</code> or numbers below <code>16</code> you are actively telling Vim to use your terminal color scheme.</p>

<p>If you don't want Vim to use your terminal emulator color scheme you will have to:</p>

<ol>
<li>make sure your <code>$TERM</code> contains the string <code>-256color</code>,</li>
<li>use color numbers from 16 to 255.</li>
</ol>

<p>For 1, possible values are <code>xterm-256color</code>, <code>screen-256color</code> (in screen and tmux), <code>rxvt-unicode-256color</code>, etc.</p>

<p>For 2, you can use <a href=""https://en.wikipedia.org/wiki/File:Xterm_256color_chart.svg"" rel=""nofollow noreferrer"">this handy chart</a> for reference.</p>
","10159"
"Including dictionary terms with spaces","422","","<p>We can use dictionaries to help us complete keywords. To set a new dictionary you can use <code>set dictionary+=path/to/dict</code>. This way you will be able to complete from a dictionary by typing <code>&lt;C-x&gt;&lt;C-k&gt;</code> in Insert mode; and then use <code>&lt;C-n&gt;</code> or <code>&lt;C-p&gt;</code> to browser the suggestions. Moreover, you can <code>set complete+=k</code> and now you can type <code>&lt;C-n&gt;</code> or <code>&lt;C-p&gt;</code> right away.</p>

<p>From <code>:help 'dictionary'</code></p>

<blockquote>
  <p>Each file should
          contain a list of words.  This can be one word per line, or several
          words per line, separated by non-keyword characters (white space is
          preferred).</p>
</blockquote>

<p>But maybe I would like a term
    <code>Monty Python</code>
in my dictionary, such that when I write <code>Mon</code> one of the suggestions would be <code>Monty Python</code>. The <a href=""https://www.gnu.org/software/miscfiles/"" rel=""nofollow"">GNU Miscfiles</a> <code>web2a</code> is an example of a dicionary in which each line is made up of two words that go together.</p>

<p>Is there a way to include dictionary terms which have spaces?</p>
","<p>I looked at the source code last week, and I don't think this is possible. As xaizek pointed out in a comment, this would make completion ambiguous.</p>

<p>However, I've thought of a workaround :-) There's the <code>CompleteDone</code> autocmd, which is run when:</p>

<blockquote>
  <p>After Insert mode completion is done.  Either when something was completed or abandoning completion.</p>
</blockquote>

<p>What we can do is write a dictionary not with spaces, but with another character; and use the <code>CompleteDone</code> autocmd to replace this character afterwards.</p>

<p>In my example, I use the underscore (<code>_</code>). I originally tried to use a more ""special"" character (such as <code>·</code>), but that doesn't seem to work.</p>

<p>An example <code>dictionary</code> file looks like:</p>

<pre><code>Monty_Python
Monty_Python_Flying_Circus
The_Black_Adder
Captain_Darling
</code></pre>

<p>And with this <code>autocmd</code> the underscores get replaced with spaces; it should be fairly obvious how it works, so I'll not explain that any further:</p>

<pre><code>fun! CompleteSpace()
    "" Save cursor position
    let l:save_cursor = getpos(""."")

    "" Get word we just completed ('borrowed' from: http://stackoverflow.com/a/23541748/660921)
    let l:word = matchstr(strpart(getline('.'), 0, col('.') - 1), '\k\+$')

    "" Replace _ with space
    let l:new = substitute(l:word, ""_"", "" "", ""g"")

    "" Run :s
    exe ""s/"" . l:word . ""/"" . l:new . ""/e""

    "" Restore cursor
    call setpos(""."", l:save_cursor)
endfun

if has(""patch-7.3-598"")
    au CompleteDone * call CompleteSpace()
endif
</code></pre>

<p>This could perhaps be optimized a bit, but this seems to be 'good enough' for now ;-)</p>

<hr>

<h1>Caveat!</h1>

<p>Unfortunately, this autocmd is not perfect, as documented in the <code>todo.txt</code> file:</p>

<blockquote>
  <p>The CompleteDone autocommand needs some info passed to it:<br>
  - The word that was selected (empty if abandoned complete)<br>
  - Type of completion: tag, omnifunc, user func.</p>
  
  <p>[..]</p>
  
  <p>Patch to add v:completed_item. (Shougo Matsu, 2013 Nov 29).</p>
</blockquote>

<p>The problem is that it might cause side-effects when completing source code as well; for example <code>my_variable_name()</code> gets ""fixed"" to <code>my variable name</code>. The <code>autocmd</code> below is for <em>all</em> files, you can restrict the autocmd for certain files... There is <a href=""https://groups.google.com/forum/?fromgroups=#!searchin/vim_dev/CompleteDone$20Shougo/vim_dev/fhGAStSCAMg/q5BIr2EcH4YJ"" rel=""nofollow"">actually a patch</a> floating around which seems to fix this, but it's not applied yet for whatever reason. Perhaps it's simply forgotten, or maybe it needs some love to fix a minor issue; you could pursue it :-)</p>
","2214"
"jinja2 indentation with gg=G","422","","<p>I develop django templates, and I need to indent them with <code>gg=G</code>, but jinja2 tags seem to be immune to it. Here is an example of poorly indented, hard to read <i>if-else</i> tags:</p>

<pre><code>{% extends ""base.html"" %}
{% block content %}
{% load my_tags %}
&lt;center&gt;
    &lt;form action=""#"" method=""get""&gt;{% csrf_token %}
        &lt;input type=""text"" value=""{{ ids }}"" name=""search_items"" size=""40""&gt; 
        &lt;input type=""submit"" value=""Search Items""&gt;
    &lt;/form&gt;
    {% if searching == True %}
    {% if insert_quantity &gt; 0 %}
    &lt;br&gt;&lt;i&gt;{{ insert_quantity }} from {{ match_quantity }} matches selected:&lt;/i&gt;&lt;br&gt;
    {% item_list items %}
    {% else %}
    No such items in database.
    {% endif %}
    {% else %}
    &lt;h2&gt;Item List (10 randomly selected)&lt;/h2&gt;
    {% item_list items %}
    {% endif %}
&lt;/center&gt;
{% endblock %}
</code></pre>

<p>I have installed <code>Glench/Vim-Jinja2-Syntax</code>, but it does nothing. I also use <code>YouCompleteMe</code>, which detects and highlights jinja2 syntax (what makes previous plugin redundant?).</p>

<p>Question:
Is it possible to indent those <i>if-else</i> (and <i>for</i> loops) tags with <code>gg=G</code> with some plugin?</p>
","<p>The best thing is to indent them yourself with <em>tabs</em> and <em>spaces</em>.</p>

<p>There is one project that is almost what you want, <a href=""https://github.com/Glench/Vim-Jinja2-Syntax/pull/10"" rel=""nofollow"">here is a pull request</a> that someone made with auto-indentation for jinja2 templates (I haven't tested, it can be buggy).</p>
","4517"
"understand the logic between Vim script ""if"" statement and filetype command","422","","<p>I have a following very simple <code>.vimrc</code> file based on an example in <a href=""https://pragprog.com/book/dnvim2/practical-vim-second-edition"" rel=""nofollow"">Practical Vim</a> book:</p>

<pre><code>set nocompatible
set hidden
if has(""autocmd"")
  filetype on
  autocmd FileType sh setlocal ts=2 sts=2 sw=2 expandtab
endif
</code></pre>

<p>As I understand, if file is a shell script file, then <code>FileType</code> event happens, if condition is started and <code>setlocal ts=2 sts=2 sw=2 expandtab</code> command is executed? However, what is the point of keeping the <code>filetype on</code>(<a href=""http://vimdoc.sourceforge.net/htmldoc/filetype.html#filetypes"" rel=""nofollow"">enables file type detection</a>) inside the <code>if</code> statement? Shouldn't this be outside and before the <code>if</code> statement?</p>
","<blockquote>
  <p>However, what is the point of keeping the filetype on(enables file type detection) inside the if statement? Shouldn't this be outside and before the if statement?</p>
</blockquote>

<p>The point is to avoid parse errors if <code>filetype</code> isn't available.</p>

<p><code>if(has(""autocmd""))</code> is testing if the version of vim parsing the <code>.vimrc</code> was <em>compiled with</em> autocommand support. <a href=""https://github.com/vim/vim/blob/d29459baa61819e59961804ed258efac5733ec70/src/ex_docmd.c#L410"" rel=""nofollow""><code>:filetype</code> isn't available unless autocommand support has been compiled in</a>, so trying to call it outside the body of that if statement on those version of vim would produce errors.</p>
","9395"
"Duplicate lines beginning with ""x"", replacing ""x"" in the duplicate with ""y""?","421","","<p>I have a file with the following pattern:</p>

<pre><code>foo 111
baz
foo 222
baz
foo 333
baz
</code></pre>

<p>which needs to be turned into</p>

<pre><code>foo 111
bar 111
baz
foo 222
bar 222
baz
foo 333
bar 333
baz
</code></pre>

<p>So, duplicate all the lines beginning with <code>foo</code>, and change only <code>foo</code> in the duplicate but leave the rest of the line (which differs in each case) intact. How to do this?</p>
","<p>Here you go:   </p>

<pre><code>:g/foo/t.|s//bar
</code></pre>

<p>Decomposing:</p>

<pre><code>:g/foo/    "" start a global command applied on all lines matching 'foo'
t.         "" duplicate the current line (the cursor is now on the new line)
|          "" chain a new command
s//bar     "" substitute the last searched element with 'bar'
</code></pre>

<p>Because the <code>g</code> command will update the search pattern, so you can omit the pattern to replace in the substitute command. (ref: <code>:h :g</code>, search for <code>search pattern</code>).</p>

<hr>

<p><strong>Older version:</strong></p>

<pre><code>:g/foo/norm! yyp:s/foo/bar^M
</code></pre>

<p>Decomposing:</p>

<pre><code>:g            start a global command
/foo/         apply only on lines having 'foo'
norm!         execute a normal command
yyp           duplicate the line
:s//bar       replace foo with bar on the line (the duplicated one)
^M            add enter to execute the substitution
</code></pre>

<p>To insert the <code>^M</code> press <kbd>Ctrl+v</kbd> and <kbd>enter</kbd>.</p>

<p><strong>Note</strong>: I originally came up with the ""older"" version, before I learned about the <code>t</code> command. I'll leave it but I won't recommend using it. The first one is cleaner more straightforward.</p>
","7337"
"Merge blocks by interleaving lines","421","","<p>Is there a dedicated way to merge two blocks of text by interleaving lines, like passing from this:</p>

<pre><code>a1
a2
a3
a4
  b1
  b2
  b3
  b4
</code></pre>

<p>to that:</p>

<pre><code>a1
  b1
a2
  b2
a3
  b3
a4
  b4
</code></pre>

<p>in a few commands?</p>

<p><strong>EDIT</strong>: I really like <a href=""https://vi.stackexchange.com/a/4576/1841"">Sato Katsura's solution</a>, here is how I have implemented it:</p>

<pre><code>function! Interleave()
    "" retrieve last selected area position and size
    let start = line(""."")
    execute ""normal! gvo\&lt;esc&gt;""
    let end = line(""."")
    let [start, end] = sort([start, end], ""n"")
    let size = (end - start + 1) / 2
    "" and interleave!
    for i in range(size - 1)
        execute (start + size + i). 'm' .(start + 2 * i)
    endfor
endfunction

"" Select your two contiguous, same-sized blocks, and use it to Interleave ;)
vnoremap &lt;pickYourMap&gt; &lt;esc&gt;:call Interleave()&lt;CR&gt;
</code></pre>
","<p>There is no dedicated way to do that (as far as I know), but yeah, it can be done with a few commands:</p>

<pre><code>function! Interleave(start, end, where)
    if a:start &lt; a:where
        for i in range(0, a:end - a:start)
            execute a:start . 'm' . (a:where + i)
        endfor
    else
        for i in range(a:end - a:start, 0, -1)
            execute a:end . 'm' . (a:where + i)
        endfor
    endif
endfunction
</code></pre>

<p>You can run it with <code>:call Interleave(5, 8, 1)</code>.  The first parameter is the first line to move, the second one the last line, and the third one where to move them.  You probably want to turn on line numbers to see what you're doing (<code>:set number</code>).</p>

<p>This assumes the blocks don't overlap.  See <code>:help :move</code> and <code>:help range()</code> to understand how the function works.</p>

<p>There are probably better ways to pick up the two blocks.  There is a plugin floating around that is supposed to let you swap two blocks.  I can't remember the name of the plugin, but the author (perhaps the famous Dr. Chip?) has put more thought into finding an interface than I did. :)</p>
","4576"
"How can I run :substitute on only part of the line and not all of it?","420","","<p>I have a line like this one:</p>

<pre><code>function my_function(argument, another argument, but there are spaces)
</code></pre>

<p>I want to substitute the space characters (inside the argument's names) with underscore. I thus would like to use :</p>

<pre><code>:s/\ /_/g
</code></pre>

<p>but how can I choose not to apply it to the whole line, but starting from, say, the cursor position ? (Or the third word) ?</p>
","<p>You could use the following solution:</p>

<p>First use <kbd>v$</kbd> to select the text from the cursor to the end of the line. Then use the following command:</p>

<pre><code>:s/\%V\ /_/g
</code></pre>

<p>The <code>\%V</code> indicate to change the text in the previously visually selected area, see <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C%V""><code>:h /\%V</code></a>.</p>

<p>If I take your example:</p>

<pre><code>function my_function(argument, another argument, but there are spaces)
</code></pre>

<p>If my cursor is on the 40th column and I use the command I just wrote I get:</p>

<pre><code>function my_function(argument, another argument,_but_there_are_spaces)
</code></pre>

<hr>

<p>In answer to your comment you can also use </p>

<ul>
<li><code>\%#</code> which matches from the cursor position</li>
<li><code>\%&gt;23c</code> which matches after the 23rd column.</li>
<li><code>\%&gt;'m</code> which matches after the position of a mark</li>
</ul>

<p>See <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C%#""><code>:h /\%#</code></a>, <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C%&gt;c""><code>:h /\%&gt;c</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C%&gt;%27m""><code>:h /\%&gt;'m</code></a>.</p>

<p>@User9433424 gave a way to use <code>\%#</code> in his comment. For the pattern with the mark you can set it wit <kbd>ma</kbd> and then use:</p>

<pre><code>:s/\%&gt;'a /_/g
</code></pre>

<hr>

<p>An explanation of the pattern given by @User9433424 is the following:</p>

<pre><code>:s/\v(%#.*)@&lt;= /_/
:s/                    substitution command
   \v                  Enable the very magic mode
      %#.*             Any characters from the cursor position
           @&lt;=         Check for matches just before what follows
              space    Followed by a space
               /_/     Substitute the matches by underscores
</code></pre>

<p>You'll want to see <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#%5Cv""><code>:h \v</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/%5C@&lt;=""><code>:h /\@&lt;=</code></a></p>
","8115"
"Uninstalling a plugin that was installed through a Vimball","419","","<p>I came across a plugin for vim and it comes in a .vmb file. Currently I use pathogen and it's quite simple I place the downloaded files into the bundle folder and it gets picked up automagically (in a sense). I am not sure about a vmb based plugin. So far in order to install it I found this regarding installing a .vmb plugin</p>

<blockquote>
  <p>The easiest way to install SuperTab is to grab the file supertab.vmb
  (which is an archive called a “vimball”) and place it into your
  “~/.vim/bundle” directory. Then open it in Vim and source the file:</p>
  
  <p>vim supertab.vmb :so %</p>
</blockquote>

<p>My question is how would I go about deleting this plugin if i did not want it?</p>
","<p>Use the <code>:RmVimball</code> command. From <a href=""http://vimhelp.appspot.com/pi_vimball.txt.html#%3aRmVimball""><code>:help :RmVimball</code></a></p>

<pre><code>REMOVING A VIMBALL                      :RmVimball

        :RmVimball vimballfile [path]

    This command removes all files generated by the specified vimball
    (but not any directories it may have made).  One may choose a path
    for de-installation, too (see 'runtimepath'); otherwise, the
    default is the first existing directory on the 'runtimepath'.
    To implement this, a file (.VimballRecord) is made in that directory
    containing a record of what files need to be removed for all vimballs
    used thus far.
</code></pre>

<p>Note that you an also install it to a specific path with <a href=""http://vimhelp.appspot.com/pi_vimball.txt.html#%3aUseVimball""><code>:UseVimball</code></a></p>

<pre><code>MANUALLY INVOKING VIMBALL EXTRACTION                :UseVimball

        :UseVimball [path]

    This command is contained within the vimball itself; it invokes the
    vimball#Vimball() routine which is responsible for unpacking the
    vimball.  One may choose to execute it by hand instead of sourcing
    the vimball; one may also choose to specify a path for the
    installation, thereby overriding the automatic choice of the first
    existing directory on the 'runtimepath'.
</code></pre>

<p>So if you want to install a vimball to <code>~/.vim/bundle/plugin</code> so it will be loaded with pathogen instead of <code>~/.vim</code> you can use this.</p>
","9163"
"How can I remove the red highlighting of ejs code braces?","418","","<p>I'm pretty new to vim and am working on a node.js project with ejs files. I have syntax highlighting turned on with <code>syntax on</code> in my <code>.vimrc</code> file. I also have an ejs file that contains JavaScript code within a tag. Here's a basic example:</p>

<pre><code>&lt;input type=""text"" &lt;%- typeof due == 'undefined' ? '' : ('value=""' + due + '"" ') %&gt;/&gt;
</code></pre>

<p>My problem is that the <code>&lt;&gt;</code> characters that enclose the JavaScript are both highlighted in bright red. I assume this is supposed to indicate an error, but there is no error in this code. How can I let vim know that something like this is okay?</p>
","<p>I ended up using <a href=""https://github.com/briancollins/vim-jst"" rel=""nofollow"">this plugin</a>, installed with <a href=""https://github.com/gmarik/Vundle.vim"" rel=""nofollow"">Vundle</a> using <code>Bundle 'briancollins/vim-jst'</code> in my <code>.vimrc</code>. Note for those who haven't used Vundle before, there's a bunch of other stuff you have to put in the <code>.vimrc</code> as well, see its github for more detail.</p>
","1993"
"How to force quit if input was stdin?","418","","<p>I have</p>

<ol>
<li><kbd>q</kbd> <a href=""https://github.com/jalanb/dotjab/blob/master/vim/vimrc#L53"" rel=""nofollow"">mapped to <kbd>:</kbd><kbd>q</kbd><kbd>enter</kbd></a></li>
<li><kbd>Q</kbd> <a href=""https://github.com/jalanb/dotjab/commit/2b7996373b5b2ef933c633a34837f1343fe75e98"" rel=""nofollow"">mapped to <kbd>&lt;esc></kbd><kbd>:</kbd><kbd>q</kbd><kbd>a</kbd><kbd>!</kbd><kbd>enter</kbd></a></li>
</ol>

<p>which means</p>

<ol>
<li>quit, unless something needs to be saved </li>
<li>just quit</li>
</ol>

<p>My meanings for these keys clashes with vim's idea that <code>stdin</code> needs to be saved, e.g.</p>

<ol>
<li><code>$ git log | vim -</code></li>
<li><kbd>q</kbd></li>
<li>vim says <code>No write since last change ...</code></li>
<li>Look at keyboard, find <kbd>shift</kbd></li>
<li><kbd>Q</kbd></li>
</ol>

<p>And I can then quit.</p>

<p>How can I tell vim to ignore file saving when using ""-"" to read for input from stdin?</p>
","<p>I would start vim with a command that tells it the current file is a scratch buffer (which vim will not prompt you to save):</p>

<pre><code>git log | vim -c ""setlocal buftype=nofile bufhidden=hide noswapfile"" -
</code></pre>

<p>Because I do this a lot, I save the scratch buffer settings to a command in my .vimrc</p>

<pre><code>"":ScratchBuffer makes current buffer disposable
command! ScratchBuffer setlocal buftype=nofile bufhidden=hide noswapfile
</code></pre>

<p>I also add a bash function in my .bashrc</p>

<pre><code>v() {
    vim -c ScratchBuffer -
}
</code></pre>

<p>This means I can type <code>git log | v</code> to achieve the desired effect</p>
","2726"
"How to inspect the cursor position in Vim command line (Cmdline mode)?","415","","<p>How to inspect the cursor position in Vim command line (Cmdline mode) from Vim script?</p>

<p>I would like to configure my Command-line mode key bindings in Vim to behave <a href=""http://linuxcommand.org/man_pages/tcsh1.html"" rel=""nofollow"">like in <em>tcsh</em></a>.  In particular, i would like <kbd>Ctrl-d</kbd> to delete one character after the cursor except at the end of the command line, and to list all possible completions otherwise (what <kbd>Ctrl-d</kbd> does in Cmdline mode by default).  The first thing that comes to mind is to make some mapping similar to the following one:</p>

<pre><code>cnoremap &lt;expr&gt; &lt;C-d&gt; (col('.')==col('$')?'&lt;C-d&gt;':'&lt;Del&gt;')
</code></pre>

<p>Of course, this one does not do what i want because it is the cursor position in the text that is being inspected, not the cursor position in the command line.</p>

<p>So, what Vim functions can inspect the cursor position in Vim command line?</p>

<p>I would also be interested to know how to move the cursor in the command line and how to modify the command line from Vim script.</p>
","<p>After a hint to use <code>getcmdpos()</code>, i have ended up with the mapping</p>

<pre><code>cnoremap &lt;expr&gt; &lt;C-d&gt; (getcmdpos()==len(getcmdline())+1?'&lt;C-d&gt;':'&lt;Del&gt;')
</code></pre>
","7794"
"How to open a file from active buffer into a split window?","415","","<p>I have some files in my vim buffer.</p>

<p><code>:ls</code> shows the list of active buffer,
I want to open a file from buffer into a vertically/horizontally split window.</p>

<p>I know <code>:vsp</code> or <code>:sp</code> open split window in vim but how to open a split window from files in buffer?</p>
","<p>You can give </p>

<pre><code>:vsplit | buffer buffernumber/buffername
</code></pre>

<p>to open a buffer in vertical split mode.</p>

<p><strong>Example:</strong></p>

<pre><code>:split | buffer 3
</code></pre>

<p>Same applies to horizontal split mode too. You can use <code>:sp</code> as a shortcut for <code>:split</code> and <code>:vs</code> for <code>:vsplit</code></p>
","8123"
"The right shebang for Vim to parse the file from the argument?","415","","<p>I'm following the page where there is an example how to set-up <a href=""http://vim.wikia.com/wiki/Vim_as_a_system_interpreter_for_vimscript"" rel=""nofollow"">Vim as a system interpreter for vimscript</a> by setting the following shebang line:</p>

<pre><code>#!/usr/bin/vim -nNesc:let&amp;verbose=1|let&amp;viminfo=""""|source%|echo""""|qall!
</code></pre>

<p>so I did the test by adding <code>%print</code>, but it prints the current script file.</p>

<p>I obviously don't want to parse my current file which consist commands for Vim, but I want to parse the file from the argument.</p>

<p>What shebang line should I use, so I can use the script as a parser for the file which I will specify in the argument?</p>

<p>For example to execute commands from <code>parser.vim</code> on file <code>my_file.txt</code> I would run:</p>

<pre><code>./parser.vim my_file.txt
</code></pre>
","<p><code>source%</code> should give you a hint what's going on: the first argument <em>is</em> the current script, while <code>my_file.txt</code> is the second argument.  Adding <code>args</code> or <code>ls</code> to the script confirms that.  This means you have to add <code>bnext</code> to the top of your script to edit the text file rather than the script itself.  It also means you'll have to manage arguments in your script.  The wiki page is misleadingly optimistic about that.</p>

<p><strong>Edit:</strong> One way to overcome the problem of the current buffer pointing to the script itself is to add <code>bnext</code> to the shebang line.  However, running <code>bnext</code> before <code>source %</code> is too early (after <code>bnext</code> the script can no longer be sourced), and running it after <code>source %</code> is too late (the script has already run).  A workaround is to add it to a <code>SourcePre</code> autocommand.  But since an autocommand would consume the rest of the command line, it has to be wrapped in an <code>exec</code>.  And you probably also want to limit <code>SourcePre</code> to the script itself.  This leads to something like this, which mostly works:</p>

<pre><code>#! /usr/bin/vim -nNesc:let&amp;verbose=1|let&amp;viminfo=""""|exec ""autocmd SourcePre "".fnameescape(expand(""%:p"",1))."" bnext""|source%|qall!
</code></pre>

<p>You'd still need to do something about <code>args</code> if your script uses <code>argdo</code> and friends.</p>
","5231"
"Substitution with math goes wrong","414","","<p>I have a large xhtml document that is broken into some 245 long paragraphs, each with a unique id in the form of ""ud###""</p>

<pre><code>&lt;p class=""windowbg"" id=""ud000""&gt;
   &lt;!--- lots of content ---&gt;
&lt;/p&gt;
...
&lt;p class=""windowbg"" id=""ud244""&gt;
   &lt;!--- and a bit more ---&gt;
&lt;/p&gt;
</code></pre>

<p>Since each 'paragraph' is several times larger than the viewport, i wanted to add links at the top of each to enable jumping around.</p>

<p>Here's what i came up with:</p>

<pre><code>%s/\""ud\(\d\{3}\)\""&gt;/\=submatch(0).""&lt;a href =\""#ud"".printf(""%03d"", submatch(1) - 1).""\""&gt;prev&lt;\/a&gt; &lt;a href=\""#ud"".printf(""%03d"", submatch(1) + 1).""\""&gt;next&lt;\/a&gt;""/
</code></pre>

<p>Now, the problem is that it didn't work.</p>

<p>The first 9 replacements were perfect, with the relevant line coming out like this:</p>

<pre><code>&lt;p class=""windowbg"" id=""ud001""&gt;&lt;a href=""#ud000""&gt;prev&lt;/a&gt; &lt;a href=""#ud002""&gt;next&lt;/a&gt;
</code></pre>

<p>But from 010 to 017, they came out weird, the links off by two </p>

<pre><code>&lt;p class=""windowbg"" id=""ud010""&gt;&lt;a href=""#ud007""&gt;prev&lt;/a&gt; &lt;a href=""#ud009""&gt;next&lt;/a&gt;
</code></pre>

<p>Then 018 and 019 were perfect, 020 through 027 came out off by four, 028 and 029 were correct, 030 through 037 were off by 6...</p>

<p>I don't know how long the pattern holds, and I can't figure out why it shows up in the first place.</p>

<p>Any ideas? Is this some well known bug?</p>
","<p>Octal numbers! Numbers starting with <code>0</code> are taken to be in octal. So, 0010<sub>8</sub> = 0008<sub>10</sub>, and subtracting one, we get 0007<sub>10</sub> = 0007<sub>8</sub>.</p>

<p>See <a href=""http://vimhelp.appspot.com/eval.txt.html#octal"" rel=""nofollow""><code>:h octal</code></a>:</p>

<pre><code>                                                    octal
Conversion from a String to a Number is done by converting the first digits to
a number.  Hexadecimal ""0xf9"", Octal ""017"", and Binary ""0b10"" numbers are
recognized.  If the String doesn't start with digits, the result is zero.
…
To avoid a leading zero to cause octal conversion, or for using a different
base, use str2nr().
</code></pre>

<p>So, your substitution replacement will look like:</p>

<pre><code>\=printf(""%s &lt;a href='#ud%03d'&gt;prev&lt;\/a&gt; &lt;a href='#ud%03d'&gt;next&lt;\/a&gt;"", submatch(0), str2nr(submatch(1)) - 1, str2nr(submatch(1)) + 1)/
</code></pre>

<p>Note that you can use a single <code>printf</code> for the whole thing.</p>

<p><a href=""http://vimhelp.appspot.com/eval.txt.html#str2nr%28%29"" rel=""nofollow""><code>str2nr</code></a> can take a base, but:</p>

<pre><code>When {base} is omitted base 10 is used.  This also means that
a leading zero doesn't cause octal conversion to be used, as
with the default String to Number conversion.
</code></pre>
","6674"
"Defining a custom rgb map for creating a color scheme?","413","","<p>Please excuse my ignorance, I'm probably missing something pretty fundamental here in regards to how 256 color terminals actually work with vim.</p>

<p>I'm trying to create a custom color scheme for vim and upon looking at the source of some existing color schemes such as <a href=""https://github.com/junegunn/seoul256.vim/blob/master/colors/seoul256.vim"" rel=""nofollow"">seoul256</a> and <a href=""https://github.com/sjl/badwolf/blob/master/colors/badwolf.vim"" rel=""nofollow"">badwolf</a>, I notice that they are defining their own custom color palettes that are not a part of the standard 256 colors. I was under the impression that the colors available are confined to the <a href=""http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html"" rel=""nofollow"">256 terminal colors?</a></p>

<p>Are they simply overriding the default colors? Am I able to replace any 8-bit addressable color with my own arbitrary ones?</p>
","<p>The <code>s:rgb_map</code> in seoul256 and all the <code>s:bwc.*</code> in badwolf do not define colors outside of the xterm palette. Rather, they are just there to <em>map</em> the finely-tuned hexadecimal colors used in GUI Vim with their closest equivalent in the xterm palette used in color terminals.</p>

<p>Taking seoul256 as an example, <code>#999872</code> will be used for some highlight groups in GVim/MacVim while the similar but slightly darker <code>101</code> (<code>#87875f</code>) will be used for the same highlight groups in Vim.</p>

<p>Such compromises are <em>very</em> commonplace in the colorscheme business. If you don't like that, I see four ""solutions"" which all come with their own issues and compromises:</p>

<h2>Choose all your colors from the xterm palette</h2>

<p>This is the path I chose when I started work on <a href=""https://github.com/romainl/Apprentice"" rel=""nofollow"">my own colorscheme</a>. The good side is that your colorscheme is more or less guaranteed to look the same in Vim <em>and</em> GVim but you will soon find out that the xterm palette has <em>many</em> shortcomings (no browns, dark colors too intense…) that will restrict your creativity.</p>

<h2>Ask your users to change their xterm palette</h2>

<p>Programs like <a href=""https://github.com/trapd00r/colorcoke"" rel=""nofollow"">colorcoke</a> let you change the xterm palette in <a href=""https://github.com/trapd00r/colorcoke/wiki"" rel=""nofollow"">many crazy ways</a>. If using a very specific palette is an important part of your concept you can make that program — or some script that you generated with it — part of the requirements for installing/using your colorscheme.</p>

<h2>Target custom builds or Neovim running in a handful of terminal emulators</h2>

<p>You can patch Vim so that it can use the <code>rgb(00,00,00)</code> notation in the <a href=""https://gist.github.com/XVilka/8346728"" rel=""nofollow"">terminal emulators that support that feature</a>. <a href=""https://bitbucket.org/ZyX_I/vim/commits/branch/24-bit-xterm"" rel=""nofollow"">That patch</a> recently found its way in Neovim so that could be another option for you.</p>

<h2>Build your colorscheme for 16 colors terminal emulators</h2>

<p>…and give your users a ready made palette for customizing their terminal emulator.</p>

<h2>So…</h2>

<p>My preference goes to the first process because all the others have too many requirements and dependencies that make installation and support too hard.</p>
","3799"
"Spell mistakes have weird coloring","413","","<p>I am using spell checker in vim, and I find one feature very annoying: errors are being highlighted with some weird color, which is nowhere to be found in gnome terminal settings:</p>

<p><a href=""https://i.stack.imgur.com/u8gXn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/u8gXn.png"" alt=""highlighted error""></a></p>

<hr>

<p>I would like to change the highlight color to something else, so it doesn't obscure the <code>wordd</code>, without changing my global font color. How can I configure this?</p>
","<p>The <code>SpellBad</code> highlighting group should allow you to configure the appearance of misspelled words.</p>

<p>Let's say you want them to be red on yellow background. Then you could add the following code somewhere in your vimrc file or in your colorscheme file (but in any case after the colorscheme has set up the <code>SpellBad</code> group, otherwise it would override your settings):</p>

<pre><code>:highlight clear SpellBad
:highlight SpellBad ctermfg=009 ctermbg=011 guifg=#ff0000 guibg=#ffff00
</code></pre>

<p>The <code>ctermfg</code>, <code>ctermbg</code> arguments control the colors of the foreground and background colors in a terminal while <code>guifg</code>, <code>guibg</code> do the same for vim inside a gui.</p>

<p>For the terminal, the colors can be expressed with a name (red, yellow...) or a decimal code between 000 and 007 / 015 / 255 when it supports 8 / 16 / 256 colors.
You can check how many colors it supports from vim with: <code>echo &amp;t_Co</code></p>

<p>For a gui, the colors can be expressed with a name or a code in hexadecimal.</p>

<p>Here's a <a href=""https://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg"">chart</a> which shows codes for some colors.</p>

<p>There are other highlighting groups (<code>SpellCap</code>, <code>SpellLocal</code> and <code>SpellRare</code>) which control the appearance of other kinds of words.</p>

<p>Note that setting the <code>'background'</code> option causes your colorscheme to be reloaded.
So if you have <code>set background=dark</code> somewhere in your vimrc, put the previous code which changes the <code>SpellBad</code> group after that line, otherwise the colorscheme will again override your settings.</p>

<p>For more information, see:</p>

<pre><code>:help hl-SpellBad
</code></pre>
","5834"
"Why does vim create a new file when opening an existing file?","413","","<p>First and foremost, I'm using Arch Linux. I have a file <code>dir/data.tex</code>.</p>

<p>I execute this command in terminal (when in the <code>dir</code> directory)</p>

<pre><code>$ vim data.tex
</code></pre>

<p>I get the following output:</p>

<pre><code>""indent"" [New File]
Press ENTER or type command to continue
</code></pre>

<p>Upon pressing <kbd>enter</kbd>, Vim opens up an empty file!</p>

<p>Here is what my <code>.vimrc</code> looks like in my home directory <code>~/.vimrc</code></p>

<pre><code>n indent on
set grepprg=grep\ -nH\ $*
let g:tex_flavor = ""latex""
</code></pre>
","<p>That line:</p>

<pre><code>n indent on
</code></pre>

<p>means ""open the file called <code>indent</code> that is at the root of the working directory"". Basically, you tell Vim to do something silly and… it does just that.</p>

<p>It should be:</p>

<pre><code>filetype plugin indent on
</code></pre>

<p>Be more careful about what you copy and paste.</p>
","4731"
"How to specify a vim flag in the vimrc","411","","<p>I know that you can pass several flags to vim at startup. </p>

<p>For example: the <code>-w</code> flags enables to records every keystrokes on the file output.</p>

<pre><code>vi -w output 
</code></pre>

<p>But I wonder if there is a way of doing this from the vimrc file, without having the <code>-w</code> flag at vim startup.</p>

<p>More generally :  how can I specify a vim flag/option from within the vimrc ?</p>
","<p>This is not possible.</p>

<p>If the <code>-w</code> or <code>-W</code> flags are given, Vim will set the <code>scriptout</code> variable to a filehandle (<code>main.c</code>, <code>command_line_scan()</code>, around line 2374). This variable is referenced in only 2 other places; <code>getchar.c</code> for writing to the file, and <code>message.c</code>, to work around a problem which causes a character to be recorded twice.</p>

<p>The only viable options I see are either a shell alias, or a wrapper script which calls Vim with the <code>-w</code> flags.</p>
","5427"
"Remapping Ctrl-(h j k l) to move between windows","411","","<p>Im trying to increase my efficiency at moving between buffers, and the Ctrl-w-(hjkl) movement doesn't work for me. How can I remap Ctrl-(hjkl) to the Ctrl-w version? I have already tried:</p>

<pre><code>inoremap &lt;C-j&gt; &lt;C-wj&gt;
</code></pre>

<p>but that doesnt work.</p>
","<p>You almost had it. Try:</p>

<pre><code>noremap &lt;C-h&gt; &lt;C-w&gt;h
noremap &lt;C-j&gt; &lt;C-w&gt;j
noremap &lt;C-k&gt; &lt;C-w&gt;k
noremap &lt;C-l&gt; &lt;C-w&gt;l
</code></pre>

<p>You can also add the <code>inoremap</code> if you want it to work from insert mode.</p>
","8590"
"Switching to the local directory after loading a file?","411","","<p>When running <code>gvim</code> by double clicking with a file in a graphical file manager, like nautilus, the vim instance is called with a strange current directory (seems root sometime, but I am not sure). This has the effect that file name completion (<code>C-x C-f</code>) is, well, not so useful. </p>

<p>I have a map that solve this: </p>

<pre><code>nnoremap &lt;silent&gt; &lt;F3&gt; :lchdir %:p:h &lt;CR&gt;
</code></pre>

<p>so that I can hit <code>F3</code> and I am done. I was trying to make it happens automatically whenever I start editing, so I tried: </p>

<pre><code>autocmd FileReadPost *.tex :lchdir %:p:h &lt;CR&gt;
</code></pre>

<p>and with <code>BufReadPost</code> too, but it doesn't work. </p>

<p>What am I doing wrong? </p>

<p><em>Notice</em>: Although <code>set autochdir</code> is working, it is doing this globally; in the help there is a scary notice: </p>

<blockquote>
  <p>Note: When this option is on some plugins may not work.</p>
</blockquote>

<p>So it would be nice to be able to select for which buffers I want to do it, and not setting it globally.</p>
","<p>I just installed nautilus, and it seems the current working directory is always set to the directory nautilus was started from (ie. Vim inherits nautilus' working directory).</p>

<p>This is a problem in nautilus (IMHO), and not Vim. When nautilus starts a new process (Vim) it can set the working directory, but doesn't. If I check <code>/proc/22656/cwd</code> it's set to <code>/home/martin</code>.</p>

<p>I also have space-fm installed, and if I open the same file in that, <code>/proc/22803/cwd</code> is set to <code>/home/martin/code</code> (where I would expect it to be).</p>

<hr>

<p>So, now we know what the problem is, let's look at your autocmd:</p>

<blockquote>
<pre><code>autocmd FileReadPost * :lchdir %:p:h &lt;CR&gt;
</code></pre>
</blockquote>

<p>The <code>FileReadPost</code> does something different from what you expect, from <code>:help FileReadPost</code>:</p>

<blockquote>
  <p>After reading a file with a "":read"" command.</p>
</blockquote>

<p>But that's not what we're doing; when you open a file Vim doesn't use <code>:read</code>. What you want to use instead, is <code>BufReadPost</code>, from <code>:help BufReadPost</code>.</p>

<blockquote>
  <p>When starting to edit a new buffer</p>
</blockquote>

<p>In Vi &amp; Vim, when you think ""file"", or <em>usually</em> (though not always) want to think ""buffer"".</p>

<p>So this is what you want to use. You also don't need the <code>&lt;CR&gt;</code> here; that's just for key mappings (not autocmd)</p>

<p>So a working solution would be:</p>

<pre><code>autocmd BufReadPost * :lchdir %:p:h
</code></pre>

<hr>

<p><strong>But wait, there's more!</strong></p>

<p>Vim has the <code>autochdir</code> option which does the same thing! From <code>:help autochdir</code>:</p>

<blockquote>
  <p>When on, Vim will change the current working directory whenever you
          open a file, switch buffers, delete a buffer or open/close a window.
          It will change to the directory containing the file which was opened
          or selected.<br>
          Note: When this option is on some plugins may not work. </p>
</blockquote>

<p>The note about plugins not working also applies to the autocmd.</p>
","2053"
"How to use vundle for vim installed from AUR","408","","<p>I'm in a process of completely switching to <code>vim</code> for my development purposes. In order to make it more IDE-like I want to install a couple of plugins and I decided to use <code>vundle</code> as a plugin manager.</p>

<p>As I'm using Arch Linux the first thing I did was installing <code>vundle</code> from AUR using <code>yaourt</code>. The problem I encountered is that it installs all the <code>vundle</code> stuff somewhere in <code>/usr/share/vim/</code> folder (I run <code>sudo find / -name autoload</code> to actually locate <code>vundle</code> specific directories). But according to <code>vundle</code> <a href=""https://github.com/VundleVim/Vundle.vim"" rel=""nofollow noreferrer"">Git repo</a> it should be located in <code>~/.vim/bundle/Vundle.vim</code>. </p>

<p>Then in <code>.vimrc</code> file I have to add bunch of lines including <code>set rtp+=~/.vim/bundle/Vundle.vim</code> to make <code>vundle</code> work. But I can't locate this file at all and I have no idea how to make it work with a <code>vundle</code> installed with <code>yaourt</code>. </p>

<p>Yep, and the reason I want to install <code>vundle</code> in that particular way is in order to get this package automatically updated.</p>

<p>Any thoughts on how to make things work?</p>

<p>P.S. I searched this Stack site and did not managed to find any similar question so I do believe it's not a duplicate. </p>
","<p>Well, so after some investigation I finally located a <code>vundle</code> file. It start from a lower-cased letter and that's why I did not find it at the first place. </p>

<p>It's located in <code>/usr/share/vim/vimfiles/autoload/vundle.vim</code> folder. To make <code>vundle</code> work with such a setup, the following tweaks to a config from <code>vundle</code> <a href=""https://github.com/VundleVim/Vundle.vim"" rel=""nofollow noreferrer"">repo</a> are necessary:</p>

<pre><code>...
set rtp+=/usr/share/vim/vimfiles/autoload/vundle.vim
call vundle#begin()
Plugin 'VundleVim/vundle.vim'
...
call vundle#end()
</code></pre>

<p>Then place your plugins in place of second three dots (<code>...</code>). Then running <code>PluginInstall</code> from <code>vim</code> all the added plugins will be install in <code>~/.vim/bundle/</code> folder.</p>
","11805"
"What's the best way to initialize a list of a predefined length?","408","","<p>I need to create a list containing a predefined number of zeros.</p>

<p>I know that I can create an empty one with <code>let foo = []</code> but I would need to initialize it with a number of zeros contained in a variable.</p>

<p><a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#List"" rel=""nofollow""><code>:h List</code></a> doesn't seem to mention this use case, what's the most efficient way to do that?</p>

<hr>

<p>A second part of my question is about nested lists:</p>

<p>I need to create a list of lists, with the number of inner lists contained in a variable and the length of the inner lists in another variable. (The inner lists are all of the same size)</p>

<p>Is it possible to the method used for one list in this case?
If not how to do it?</p>
","<p>You can combine the <code>map</code> and <code>range</code> function for that:</p>

<pre><code>:echo map(range(4), 0)
[0, 0, 0, 0]
</code></pre>

<p><code>range(4)</code> returns a list of number defined by the arguments:</p>

<pre><code>[0, 1, 2, 3]
</code></pre>

<p><code>map([0, 1, 2, 3], 0)</code> replace every element in the array with <code>0</code></p>

<p>You can use the following function:</p>

<pre><code>function! Fill(len, char)
    return map(range(a:len), a:char)
endfunction
</code></pre>

<p>You can use it like so:</p>

<pre><code>:echo Fill(4, 'a')
['a', 'a', 'a', 'a']
</code></pre>

<hr>

<p>For the recursive fill, you can use the following function:</p>

<pre><code>function! FillRecursive(len1, len2, char)
  if a:len2 == -1
    return map(range(a:len1), 'a:char')
  endif

  return map(range(a:len1), 'FillRecursive(a:len2, -1, a:char)')
endfunction
</code></pre>

<p>You can use it like so:</p>

<pre><code>:echo FillRecursive(4,4,'a')
[['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]
</code></pre>

<p>You can see the interesting part in the map: instead of passing the <code>l:inner</code> directly, because the <code>map</code> function cannot accept a list, but it can accept the literal string containing the list.</p>
","8047"
"Disable swap file for large files","406","","<p>I normally like to keep swap files on, but if I am editing huge log files I usually don't want them.  Since I am just viewing the files in vim, it is unnecessary to have a swap file.  I could just run <code>set noswapfile</code> for <code>*.log</code> files, but I was wondering if I could just disable it if the file is larger than a specified amount.</p>
","<p>You can combine autocommands with the <code>getfsize(file)</code> function to automatically disable options for large files.</p>

<pre><code>"" A global variable that contains the size of which a file is considered
"" large.  In this case, it is 10 megabytes.
let g:large_file = 1024 * 1024 * 10

"" This autocmd runs before reading the file into the buffer.  It
"" gets the file that the autocmd is running on by running expand on
"" &lt;afile&gt;, which is short for the path to the file that the autocmd
"" is running on.  Then, it gets the size of the file running
"" getfsize on the file and sees if it is larger than the size
"" specified in g:large_file.  If it is, it disables the swap file.
autocmd BufReadPre * let f=expand(""&lt;afile&gt;"") | if getfsize(f)
            \ &gt; g:large_file | set noswapfile | endif
</code></pre>

<p>Note that you can add any other options you want where <code>set noswapfile</code> is to improve performance on large files.  If you have a lot of them, you might want to create a function which sets all of them, and then add a call to that function where <code>set noswapfile</code> is.</p>

<p>Related to performance when editing large files, here are some options that can help:</p>

<ul>
<li><code>:help 'bufhidden'</code></li>
<li><code>:help 'buftype'</code></li>
<li><code>:help 'eventignore'</code></li>
<li><code>:help 'undolevels'</code></li>
</ul>

<p>For instance, those options can be set to the below for better performance:</p>

<pre><code>setlocal bufhidden=unload "" (save memory when other file is viewed)
setlocal buftype=nowrite "" (is read-only)
setlocal eventignore+=Filetype "" (ignores autocommands with FileType as their trigger event)
setlocal undolevels=-1 "" (no undo possible)
</code></pre>

<h1>Related help topics:</h1>

<ul>
<li><code>:help getfsize()</code></li>
<li><code>:help expand()</code></li>
<li><code>:help &lt;afile&gt;</code></li>
</ul>

<p>I got some of this information from <a href=""http://vim.wikia.com/wiki/Faster_loading_of_large_files"" rel=""nofollow"">http://vim.wikia.com/wiki/Faster_loading_of_large_files</a> which has useful information on performance when editing large files.</p>
","3485"
"How can I use Vim's spellcheck with ‘smart quotes’","406","","<p>There are the ""normal"" straight quotes:<br>
' ""</p>

<p>And you have the angled ""smart quotes"":<br>
‘ ’ “ ”</p>

<p>Vim's spellcheck works with ""straight"" quotes, but not angeled quotes, so this is considered ""wrong"":<br>
It’s ... Monty Python’s</p>

<p>Even though it's not.</p>

<p>Screenshot, in case your font doesn't show the difference:</p>

<p><img src=""https://i.stack.imgur.com/AYqye.png"" alt=""enter image description here""></p>

<p>How do I fix this? I would prefer to get it working for both variants (it's and it’s).</p>
","<pre><code>$ grep ""'"" /usr/share/dict/words | wc -l
26226
$ grep -i python /usr/share/dict/words
Python
Python's
python
python's
pythons
</code></pre>

<p>The problem is that all these words with apostrophes are actually in your dictionary file.
So if you're okay with modifying your vim spelling dictionary, then do so:</p>

<pre><code>$ grep ""'"" /usr/share/dict/words | sed ""s/'/’/g"" &gt;&gt; ~/.vim/spell/en.utf-8.add
</code></pre>

<p>This will</p>

<ul>
<li><code>grep</code> to find all words in your system dictionary that contain an apostrophe (<code>'</code>);</li>
<li><code>sed</code> to change the straight quotes to smart quotes (that's <code>s/'/’/g</code>, where the first quote is straight and the second is smart); and</li>
<li>append it to your language dictionary (replace with whatever your language is).</li>
</ul>

<p>You will need to recompile this to a <code>.spl</code> file, which you can do from Vim:</p>

<pre><code>:mkspell! ~/.vim/spell/en.utf-8.add
</code></pre>

<p>If you want to use the actual spell files that Vim uses as a starting place (instead of your system dictionary), you can use the <code>:spelldump</code> command.
The output will include <em>all</em> the words Vim uses for the current <code>spelllang</code>, <em>including</em> those already added from the <code>.add</code> file.
Save the result of <code>:spelldump</code> to a file and remove the first two lines (header info), then use the same commands as above.
You may also want to pipe it through <code>uniq</code> as well, to remove duplicate entries.
(No need to <code>sort</code>; the output of <code>:spelldump</code> is already sorted.)</p>
","172"
"How to prevent Vim from scrolling buffers when I open split","406","","<p>When I open a new split Vim is scrolling both buffers up despite having enough space.</p>

<p>Here is an <a href=""https://asciinema.org/a/18333"" rel=""nofollow"">asciicast</a></p>

<p>This behaviour comes out-of-the box in <code>vim -u NONE</code>.</p>

<p>It is really annoying. My guess it tries to keep the cursor in the middle of the screen or something. But even if the both splits end up well above the middle line the buffers are being scrolled up.</p>

<p>Is there a way to turn it off? Thanks.</p>
","<p>I found a <a href=""https://stackoverflow.com/q/12897276/151007"">solution</a> which came from Vim's own help docs.  It's not perfect but it is an improvement.</p>

<pre><code>nnoremap &lt;C-W&gt;s Hmx`` \|:split&lt;CR&gt;`xzt``
</code></pre>
","2919"
"Can I be notified when I'm undoing changes from the undofile?","404","","<p>I've been using the <a href=""https://vi.stackexchange.com/questions/6/how-can-i-use-the-undofile?s=3|0.0000"">undofile feature</a> in Vim for a while now. It's a very nice feature.</p>

<p>However, one annoyance is that it's very easy to accidentally undo changes that I did the last time I opened the file; which may be 2 minutes ago, an hour ago, last week, or a month ago.</p>

<p>For example, let's say I open a file, make a few changes, go off and change some other files, and discover that my changes weren't required, or perhaps they were just a few temporary debug statements.</p>

<p>Previously, I could just hold the <kbd>u</kbd> key until Vim said ""Already at oldest change"", <code>:wq</code>, and be done. But now I have to be very careful not to undo the changes I did last time I opened the file. There is no obvious way to see when you are doing this.</p>

<p>Is there any way to either make this more explicit? For example by showing it somewhere, issuing a warning, or even asking for a confirmation.</p>
","<p><strong>Update 2015-06-28</strong>: I fixed a small bug, and <a href=""http://code.arp242.net/undofile_warn.vim"" rel=""nofollow noreferrer"">released this as a
plugin</a>. The plugin code is slightly
better, in that it warns again after moving the cursor; I recommend you use the
plugin.</p>

<hr>

<hr>

<p>The answer from <a href=""https://vi.stackexchange.com/a/2150/51"">superjer</a> works great, but has the unfortunate side-effect that you can only undo changes from the last Vim session, and not <em>all</em> previous Vim sessions.</p>

<p>This is because <code>wundo</code> overwrites the undo file; it's not merged. As far as I know, there is no way to fix this.</p>

<p>So here's my alternative solution, it will show a big red warning message when you're undoing changes from the undo file.</p>

<p>This is similar to <a href=""https://vi.stackexchange.com/a/2797/51"">Ingo Karkat's answer</a>, but it doesn't require an external plugin and has some subtle differences (displays warning instead of beep, doesn't require you to press <code>u</code> twice).</p>

<p>Note this <em>only</em> modifies the <code>u</code> and <code>&lt;C-r&gt;</code> binds, and <em>not</em> the <code>U</code>, <code>:undo</code>, and <code>:redo</code> commands.</p>

<pre><code>"" Use the undo file
set undofile

"" When loading a file, store the curent undo sequence
augroup undo
    autocmd!
    autocmd BufReadPost,BufCreate,BufNewFile * let b:undo_saved = undotree()['seq_cur'] | let b:undo_warned = 0
augroup end 

"" Remap the keys
nnoremap u :call Undo()&lt;Cr&gt;u
nnoremap &lt;C-r&gt; &lt;C-r&gt;:call Redo()&lt;Cr&gt;


fun! Undo()
    "" Don't do anything if we can't modify the buffer or there's no filename
    if !&amp;l:modifiable || expand('%') == '' | return | endif

    "" Warn if the current undo sequence is lower (older) than whatever it was
    "" when opening the file
    if !b:undo_warned &amp;&amp; undotree()['seq_cur'] &lt;= b:undo_saved
        let b:undo_warned = 1
        echohl ErrorMsg | echo 'WARNING! Using undofile!' | echohl None
        sleep 1
    endif
endfun

fun! Redo()
    "" Don't do anything if we can't modify the buffer or there's no filename
    if !&amp;l:modifiable || expand('%') == '' | return | endif

    "" Reset the warning flag
    if &amp;l:modifiable &amp;&amp; b:undo_warned &amp;&amp; undotree()['seq_cur'] &gt;= b:undo_saved
        let b:undo_warned = 0
    endif
endfun
</code></pre>
","3151"
"Delete block of code if a pattern is (not) detected in one of the lines","404","","<p>I have managed to do this with a super long find-replace but I'm sure there's a simpler way:</p>

<p>I have a file of the form:</p>

<pre><code>E01 2017 10 24 00 00 00-1.90001e-04-8.79280e-12 0.00000e+00
            3.20000e+01 8.53750e+01 2.90408e-09 3.04855e+00
            4.08463e-06 3.01205e-04 1.49385e-06 5.44061e+03
            1.72800e+05 6.14672e-08-1.45096e+00-7.45058e-09
            9.95466e-01 3.22187e+02-2.16382e+00-5.72952e-09
            7.50018e-11 2.58000e+02 1.90000e+03 0.00000e+00
            3.12000e+00 0.00000e+00-4.49424e-09 0.00000e+00
            1.73500e+05 0.00000e+00 0.00000e+00 0.00000e+00
E01 2017 10 24 00 00 00-1.90001e-04-8.79280e-12 0.00000e+00
            3.20000e+01 8.53750e+01 2.90410e-09 3.04855e+00
            4.08460e-06 3.01205e-04 1.49380e-06 5.44061e+03
            1.72800e+05 6.14672e-08-1.45100e+00-7.45058e-09
            9.95470e-01 3.22187e+02-2.16380e+00-5.72952e-09
            7.50020e-11 5.21000e+02 1.90000e+03 0.00000e+00
            0.00000e+00 0.00000e+00-4.49420e-09-5.35510e-09
            1.73400e+05 0.00000e+00 0.00000e+00 0.00000e+00
E02 2017 10 24 00 00 00-5.65248e-06 9.24880e-13 0.00000e+00
            3.20000e+01 1.05375e+02 2.89100e-09-7.19798e-01
            4.93710e-06 2.56068e-04 2.77200e-06 5.44061e+03
            1.72800e+05 4.84287e-08-1.49240e+00-8.75443e-08
            9.95490e-01 2.94906e+02-1.54180e+00-5.75452e-09
            1.30070e-10 2.58000e+02 1.90000e+03 0.00000e+00
            0.00000e+00 0.00000e+00-6.99620e-09 0.00000e+00
            1.73500e+05 0.00000e+00 0.00000e+00 0.00000e+00
...
</code></pre>

<p>Each line starting with <code>E</code> represents the beginning of a ""block"". All blocks are 8 lines long, and the width of the columns is fixed for the whole file. I want to delete a block if the second element of the sixth line of the block is (not) <code>2.58000e+02</code>.</p>

<p>So after deleting all blocks which do have <code>2.58000e+02</code> as the second element of their sixth line I would expect:</p>

<pre><code>E01 2017 10 24 00 00 00-1.90001e-04-8.79280e-12 0.00000e+00
            3.20000e+01 8.53750e+01 2.90410e-09 3.04855e+00
            4.08460e-06 3.01205e-04 1.49380e-06 5.44061e+03
            1.72800e+05 6.14672e-08-1.45100e+00-7.45058e-09
            9.95470e-01 3.22187e+02-2.16380e+00-5.72952e-09
            7.50020e-11 5.21000e+02 1.90000e+03 0.00000e+00
            0.00000e+00 0.00000e+00-4.49420e-09-5.35510e-09
            1.73400e+05 0.00000e+00 0.00000e+00 0.00000e+00
</code></pre>

<p>After deleting all blocks whose second element in the sixth line is not <code>2.58000e+02</code> I would expect:</p>

<pre><code>E01 2017 10 24 00 00 00-1.90001e-04-8.79280e-12 0.00000e+00
            3.20000e+01 8.53750e+01 2.90408e-09 3.04855e+00
            4.08463e-06 3.01205e-04 1.49385e-06 5.44061e+03
            1.72800e+05 6.14672e-08-1.45096e+00-7.45058e-09
            9.95466e-01 3.22187e+02-2.16382e+00-5.72952e-09
            7.50018e-11 2.58000e+02 1.90000e+03 0.00000e+00
            3.12000e+00 0.00000e+00-4.49424e-09 0.00000e+00
            1.73500e+05 0.00000e+00 0.00000e+00 0.00000e+00
E02 2017 10 24 00 00 00-5.65248e-06 9.24880e-13 0.00000e+00
            3.20000e+01 1.05375e+02 2.89100e-09-7.19798e-01
            4.93710e-06 2.56068e-04 2.77200e-06 5.44061e+03
            1.72800e+05 4.84287e-08-1.49240e+00-8.75443e-08
            9.95490e-01 2.94906e+02-1.54180e+00-5.75452e-09
            1.30070e-10 2.58000e+02 1.90000e+03 0.00000e+00
            0.00000e+00 0.00000e+00-6.99620e-09 0.00000e+00
            1.73500e+05 0.00000e+00 0.00000e+00 0.00000e+00
</code></pre>

<h1>My attempt</h1>

<h2>To delete the blocks which contain <code>2.58000e+02</code></h2>

<p>First delete the block themselves with:</p>

<pre><code>:%s/^E[0-9 .e+-]\+\n\([0-9 .e+-]\+\n\)\{4}[ ]\+[0-9.e+-]\+ 2.58000e+02\([0-9 .e+-]\+\n\)\+//g
</code></pre>

<p>Then remove the blank lines which remain after the blocks that have been preserved:</p>

<pre><code>:%s/\n^[ ]\{}$//g
</code></pre>

<h2>To delete the blocks which do <em>not</em> contain <code>2.58000e+02</code>:</h2>

<p>This one was tougher. What I did is store the result of the previous command in a separate file, and from terminal perform the diff between the original file and the new file, and keep the lines which are in the original one and not the second one. This however requires leaving ViM.</p>

<p>Is there a simpler way to achieve these two things?</p>
","<p><strong>To delete</strong> the blocks containing <code>2.58000e+02</code>, you can use following global command </p>

<pre><code>:g/\v^E(.*$\n){5}\s+.{-}2.58000e\+02/,+7d_
</code></pre>

<p>This breaks down as</p>

<pre><code>:g/                                 starts a global command
\v^E(.*$\n){5}\s+.{-}2.58000e\+02   searches for blocks containing 2.58
/,+7d_                              sets a range from the start of a match up until 
                                    the next 7 lines and deletes the lines
</code></pre>

<p><strong>To retain</strong> the blocks containing <code>2.58000e+02</code>, instead of searching and deleting blocks <em>not</em> containing your search pattern I'd suggest to use a register to copy the required blocks to. This way you can reuse your search pattern.</p>

<pre><code>:let @a=''|g/\v^E(.*$\n){5}\s+.{-}2.58000e\+02/,+7y A
</code></pre>

<p>This breaks down as    </p>

<pre><code>:let @a=''|g/                       clears the a register and starts a global command
\v^E(.*$\n){5}\s+.{-}2.58000e\+02   searches for blocks containing 2.58
/,+7y A                             sets a range from the start of a match up until 
                                    the next 7 lines and appends the lines to a register
</code></pre>

<hr>

<p>Following all this, your workflow could be as follows</p>

<ol>
<li>Search your pattern: <code>/\v^E(.*$\n){5}\s+.{-}2.58000e\+02</code></li>
<li>Copy all matching blocks to register <code>a</code>: <code>:let @a=''|g//,+7y A</code></li>
<li>Delete all matching blocks from buffer: <code>:g//,+7d_</code></li>
<li>Paste register <code>a</code> into a new buffer: <code>""ap</code></li>
</ol>

<p><strong>Edit</strong></p>

<p>even easier </p>

<ol>
<li>Search your pattern: <code>/\v^E(.*$\n){5}\s+.{-}2.58000e\+02</code></li>
<li>Cut all matching blocks to register <code>a</code>: <code>:let @a=''|g//,+7d A</code></li>
<li>Paste register <code>a</code> into a new buffer: <code>""ap</code></li>
</ol>
","14547"
"Move inside next quotes?","403","","<p>I have a file with several lines like so:</p>

<pre><code>{""latin"": """", ""french"": """", ""italian"": """", ""catalan"": """", ""portuguese"": """", ""romanian"": """", ""spanish"": """", ""english"": """"}
</code></pre>

<p>I want to quickly move between the empty quotes to enter data. Is there a short-cut that could be used here?</p>
","<p><code>f""</code> jumps to the next quote, and <code>F""</code> jumps to the previous one. <code>3f""</code> jumps three more quotes, and so on. This seems enough to me. If the cursor is inside the quote, and you want to jump to the position just before the ending quote, <code>t""</code> may be used, and similar is said of <code>T""</code>. In your case, <code>e</code> (jump to the last character of the current word) and <code>b</code> (jump to the first character of the current word) also do the same thing.</p>
","11698"
"When should I use vim-addon-manager instead of a regular package manager?","403","","<p>On Debian based systems, there is a package named <a href=""https://packages.debian.org/sid/vim-addon-manager"" rel=""nofollow noreferrer""><code>vim-addon-manager</code></a>.</p>

<p>My understanding is that it allows to install some plugins based on a repository of available plugins. To be able to install them, the plugins have to be packaged and pushed to the debian repos.</p>

<p>I don't understand the point of this package because it seems much less flexible than the <a href=""https://vi.stackexchange.com/questions/388/what-is-the-difference-between-the-vim-package-managers/3678#3678"">other plugin managers</a> which allows to install any plugin from github, a git repo or even a local folder, which allow parallel installation, lazy-loading, etc...</p>

<p>In the first place I thought that the package was an old solution created before the other plugin managers and more or less deprecated, but its <a href=""https://anonscm.debian.org/gitweb/?p=pkg-vim/vim-addon-manager.git"" rel=""nofollow noreferrer"">git repo</a> seems to indicate that its development is still active.</p>

<p><strong>So my questions are:</strong></p>

<ul>
<li>Is there other differences than the available plugins betwwen vim-addon-manager and the other plugin managers? And if so, which differences?</li>
<li>Are the packages and the other managers meant for the same purpose or are they complementary</li>
<li>In which use-case is it more convenient to use the package instead of the other plugins?</li>
</ul>

<p><strong>Note</strong> that my question is inspired by <a href=""https://vi.stackexchange.com/q/7249/1841"">this one</a> but here I am not asking how to use the package, but rather why would someone need it.</p>
","<p>N.B., I'm one of the original authors of <a href=""http://manpages.debian.org/cgi-bin/man.cgi?query=vam&amp;sektion=1"">Debian's vim-addon-manager</a> (which I'll refer to as dvam for the rest of this answer, to avoid confusion with <a href=""https://github.com/MarcWeber/vim-addon-manager"">Marc Weber's vam</a>).</p>

<p>dvam is intended solely to manage addons that are distributed in the form of Debian packages.  There are people that prefer, for various reason, to use packaged software even for things like Vim addons, instead of getting the software directly from upstream.</p>

<p>In the broader sense, yes dvam and more general tools like plug, vundle, etc. are meant for the same purpose -- providing a mechanism for enabling the use of certain addons in your Vim environment.  They are targeting different use cases, though, and can be used to complement each other.</p>

<p>dvam intends to give a user of a Debian-based system control over which packaged addons are enabled, both system-wide and for a specific user.  That is, it tries to solve the use cases of a sysadmin installing and enabling a packaged addon in the system-wide config but allowing the user to disable it, as well as the reverse (enabling an addon that's disabled in the system-wide config).</p>

<p>There are some warts in the way Debian's tool was initially designed (symlinking individual files rather than working on directory like pathogen does) which haven't fully been addressed yet.  I've been dragging my feet on fixing that, but should revisit it to see if Vim's new <code>'packpath'</code>/<code>:packadd</code> features help me with that at all.</p>
","7267"
"Get the offset/position of the current window in the layout","402","","<p>There may be any number of nested vertical and horizontal splits on a Vim screen. I'd like to find the (x, y) coords, in terms of columns and lines inside Vim, of the top-left corner of the current window.</p>

<p>It's easy to find the dimensions of the current window (<code>winheight(0)</code> and <code>winwidth(0)</code>), how many windows there are (<code>winnr('$')</code>), as well as all of their widths and heights (<code>winrestcmd()</code>), but this doesn't say enough about the adjacency of windows to each other. All we know is that windows with smaller numbers will generally be towards the top and left of those with larger numbers. Also, I'm not even sure how to find the number of lines and columns of the whole Vim screen (including all of the windows and the command line)...</p>

<p>Right now I'm doing this. It's suitable for me, but it makes the mouse cursor flicker a bit.</p>

<pre><code>funct! CountLinesAboveWindow()
    let lz_setting = &amp;lazyredraw
    set lazyredraw
    let original_nr = winnr()
    let last_nr = original_nr
    let lines_above = 0
    while 1
        wincmd k
        let nr = winnr()
        if nr == last_nr
            break
        endif
        let lines_above = lines_above + winheight(0) + 1
        let last_nr = nr
    endwhile
    exe original_nr . ""wincmd w""
    let &amp;lazyredraw = lz_setting
    return lines_above
endfunct!
#And similarly for CountColumnsToTheLeftOfWindow()
</code></pre>

<p>Is there a more elegant way? It has to be faster than the above, which excludes <code>:mksession</code> as an option.</p>

<p>The reason I want this is to write functions <code>screenline()</code> and <code>screencol()</code>, analogous to the built-in <code>winline()</code> and <code>wincol()</code>.</p>
","<p><code>screenrow()</code> and <code>screencol()</code> give you the coordinates relative to the top left corner of the ""screen"" (i.e. of Vim's window).  The manual warns you that something like <code>:echo screencol()</code> will return the column in the command line (i.e. 1).  It works better from within a map:</p>

<pre><code>nnoremap &lt;silent&gt; GG :echom screencol()&lt;CR&gt;
</code></pre>
","3511"
"How to make 'spellfile' work for multiple languages?","401","","<p>I want to keep my Vim spelling synchronised across machines. For that reason I put my spelling file
into Dropbox by adding <code>set spellfile=$HOME/Dropbox/vim/spell/en.utf-8.add</code> to my <em>.vimrc</em>. It
worked just fine for a single language.</p>

<p>When I've added another spelling file for Ukrainian by changing <code>'spellfile'</code> value to
<br> <code>$HOME/Dropbox/vim/spell/en.utf-8.add,$HOME/Dropbox/vim/spell/uk.utf-8.add</code> it gets ignored. <code>zg</code> (with <code>:set spelllang=uk</code>)
adds a word to en.utf-8.add instead of uk.utf-8.add. Words are added to the correct file when
doing <code>2zg</code> but that's not what I want to do manually.</p>

<p><strong>How can I make Vim use correct spelling file based on <code>'spellang'</code> value?</strong></p>

<p>I've read Vim help on <code>'spellfile'</code> and it says:</p>

<blockquote>
  <p>Normally one file is used for all regions, but you can add the region  name if you want to.  However, it will then only be used when
    'spellfile' is set to it, for entries in 'spelllang' only files
    without region name will be found.</p>
</blockquote>

<p>Initialy I've thought it means regions like <code>en_us</code> <code>en_gb</code>. Do I misunderstand something?</p>

<p>Another even better option would be to change location /spell directory location to live outside .vim/</p>
","<p>You can <a href=""http://en.wikipedia.org/wiki/Symlink"" rel=""nofollow"">symlink</a> <code>~/.vim/spell</code> to <code>~/Dropbox/vim/spell</code>:</p>

<pre><code>$ rmdir ~/.vim/spell
$ ln -s ~/Dropbox/vim/spell ~/.vim/spell
</code></pre>

<p>This will work on UNIX-like systems (Linux, BSD, OSX), for Windows, you can use:</p>

<pre><code>$ mklink /D ""$HOME\Dropbox\vim\spell"" ""$HOME\_vim\spell""
</code></pre>
","3079"
"How to use sensitive data in .vimrc?","401","","<p>I want to have my .vimrc synced through github so it has to be public file, but at the same time i have to put some sensitive data (for example db passwords/hosts for dbext.vim) in it, without giving them away to others. What is the best way and how to do it?</p>
","<p>You can include another file using the <code>source</code> command. Simply put this at the top of your vimrc:</p>

<pre><code>source($MYVIMRC . "".private"")
</code></pre>

<p>Assuming your vimrc is <code>~/.vimrc</code>, that will expand to <code>~/.vimrc.private</code>. From now on, you can define variables in that file like this:</p>

<pre><code>let my_db_password = ""bacon""
</code></pre>

<p>Then you can simply refer to them by name in your main vimrc.</p>

<h1>Notes</h1>

<ul>
<li>You can call the private vimrc file whatever you want, it can even be in a different directory.</li>
<li>If you want to use <code>~</code> in the path, you will need to use <code>expand()</code>. For example: <code>source expand(""~/.private-vimrc"")</code></li>
<li>To concatenate the variable's value with a string, use the <code>.</code> operator. For example: <code>""jdbc:mysql://example.com/waffles?user=admin&amp;password="" . my_db_password</code></li>
</ul>
","2379"
"Vim navigate to next dot symbol in text","401","","<p>I'm trying to navigate to next dot in a file using windows version of vim:</p>

<pre><code>f.
</code></pre>

<p>but it doesn't do anything as well as all other similar commands:</p>

<pre><code>F.
d.
D.
</code></pre>

<p>What is correct way to do it?</p>
","<p>You can use the <a href=""https://github.com/rhysd/clever-f.vim"" rel=""nofollow"">Clever-F</a> or <a href=""https://github.com/justinmk/vim-sneak"" rel=""nofollow"">Vim-Sneak</a> plugins to make the <code>f</code> and <code>t</code> motions automatically search over multiple lines, because usually they will only search within the current line.</p>
","5584"
"How can I comment code with a command in Vim","400","","<p>In various editors one can mark a block of code and with a shortcut, comment it right away. Is there a possible way to do it in Vim without an extra plugin? If not, which plugin or script would you suggest?</p>
","<p>The best way that I found is using <a href=""https://github.com/tpope/vim-commentary"" rel=""nofollow"">tpope's vim-commentary plugin</a>. You're able to use the <code>ctrl+v I#</code> mentioned in the question linked to in the comment to the OP, but this will automatically work with different comment types with different languages.</p>
","333"
"How do I apply a set of keystrokes to every occurrence of a word?","400","","<p>If I want to delete every word, that is easy, because I would do something like this:</p>

<pre><code>:s%/WORD//g
</code></pre>

<p>But what if I want to do <code>xyz</code> to every occurrence of ""WORD""? For example, let's say I want to delete every line that contains ""WORD"". I can think of a couple ways to do this, but none of them seem ideal. </p>

<p>1)</p>

<pre><code>/WORD
</code></pre>

<p>and then manually press <code>ddnddnddnddn...</code> until there are no more occurrences. But this is time consuming if there are many lines to do this on.</p>

<p>2)</p>

<pre><code>qd/WORD&lt;enter&gt;ddq
</code></pre>

<p>and then guess how many times WORD occurs, and then, for example:</p>

<pre><code>500@d 
</code></pre>

<p>But this will either A) miss a bunch of lines or B) delete of bunch of extra lines.</p>

<p>Is there a better way to do this?</p>
","<p>You can use the <code>:global</code> and <code>:normal</code> commands for this.  The <code>:global</code> command has the following syntax:</p>

<pre><code>:global/{pattern}/{command}
</code></pre>

<p>This will run ""command"" on every occurrence of ""pattern"".  You can then use the <code>:normal</code> command to run a series of keystrokes on each occurrence of a word using <code>:global</code>.  Like so:</p>

<pre><code>:g/WORD/normal {keystrokes}
</code></pre>

<p>If those keystrokes involve special keys like <code>&lt;Ctrl&gt;</code>, you can combine it with the <code>:execute</code> command like so:</p>

<pre><code>:g/WORD/exe ""normal {keystrokes}""
</code></pre>

<p>Do note that you must put a backslash before each occurrence of a special key.</p>

<p>For more on these commands, see <code>:help :normal</code> and <code>:help :global</code>.</p>
","5093"
"Tab keep triggering jump backward in ultisnips","400","","<p>I have a problem with UltiSnips. It keeps jump backwards even tough I didn't
map it in my <code>.vimrc</code> file. My <code>.vimrc</code> look like this</p>

<pre><code>let g:UltiSnipsExpandTrigger=""&lt;C-l&gt;""                                             
let g:UltiSnipsJumpForwardTrigger=""&lt;C-k&gt;""                                        
let g:UltiSnipsJumpBackwardTrigger=""&lt;C-i&gt;""

let g:ycm_key_list_select_completion = ['&lt;Tab&gt;', '&lt;Down&gt;']                       
let g:ycm_key_list_previous_completion = ['&lt;S-Tab&gt;', '&lt;Up&gt;']                     

let g:SuperTabDefaultCompletionType = '&lt;Tab&gt;' 
</code></pre>

<p>No there saying anything about <code>&lt;Tab&gt;</code> executing <code>JumpBackwardTrigger</code>. But,
when type this:</p>

<pre><code>fpri                             \\ Then hit &lt;tab&gt;, it expands to:
fprintf(stderr, ""%s\n"", str__);  \\ My cursor at __. YCM need to do the job
                                 \\ when I start typing. Then I hit &lt;tab&gt;
fprintf(stderr, ""__\n"", str);    \\ But it bring back!!
</code></pre>

<p>I have no mapping that involves <code>&lt;tab&gt;</code> key. So, what is causing this?</p>
","<p>Unfortunately <code>&lt;c-i&gt;</code> and <code>&lt;tab&gt;</code> are parsed as the exact same key by most terminals. You can follow a discussion about this on this neovim issue: <a href=""https://github.com/neovim/neovim/issues/176"" rel=""nofollow"">https://github.com/neovim/neovim/issues/176</a></p>

<p>The easiest solution is to pick a different mapping for jumping backwards, like <code>&lt;leader&gt;i</code>. If you really want this fixed, I suggest following the linked issue and looking into leonerd's work.</p>
","4793"
"Escape sequences from external commands cluttering output in GVim","399","","<p>One of the reasons i prefer to run Vim from a terminal instead of running gVim is that the output of external gets cluttered up by escape sequences each time I execute commands like <code>ls</code> and <code>grep</code> that I have aliased to colorize the output in my <code>.bashrc</code>.</p>

<p>When executing <code>:!ls</code> I get output that looks like this:</p>

<pre><code>[0m[01;34mDesktop[0m    [01;34mDocuments[0m    [01;34mDownloads[0m
[01;34mGit[0m    [01;34mMail[0m    [01;34mMusic[0m
[01;34mPictures[0m    [01;34mProgramming[0m
[01;34mPublic[0m    [01;34mSoftware[0m    [01;34mTemplates[0m    todo.txt    [01;34mVideos0m
</code></pre>

<p>Screenshot here:<a href=""https://i.stack.imgur.com/kbeDJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kbeDJ.png"" alt=""enter image description here""></a></p>

<p>Try executing <code>:!vi</code> in gVim and your entire screen will explode.</p>

<p>Is there a solution to this problem? Is it possible to make gVim discard escape sequences when printing the output of an external command?</p>
","<p>You should take a look at the manual of those commands: they may allow you to define when to show colors or not.</p>

<p><code>ls</code>, for example, has the <code>--color=auto</code> option that makes it show colors only when possible.</p>
","4157"
"Neovim: plugins installed but not working","399","","<p>I am using Ubuntu 16.04. I installed Neovim using apt-get. I downloaded the plug.vim script &amp; put it into the <code>autoload</code> folder in <code>~/.config/nvim</code>. I put the following in my <code>init.vim</code>:</p>

<pre><code>call plug#begin()
Plug 'https://github.com/luochen1990/rainbow.git'
Plug 'https://github.com/davisdude/vim-love-docs.git'
Plug 'https://github.com/morhetz/gruvbox.git'
call plug#end()
</code></pre>

<p>I did <code>:PlugInstall</code>. The plugins were installed &amp; show OK in <code>:PlugStatus</code>. But they are not working. As in nothing's changed at all.</p>

<p>I am new to both Vim &amp; Neovim. I tried googling for a solution but there is almost no information on Neovim. </p>
","<p>My guess is that you haven't activated the plug-ins. In the <code>rainbow</code> case you should add</p>

<pre><code>let g:rainbow_active = 1
</code></pre>

<p>to your init file (Neovim's one is located in <code>~/.config/nvim/init.vim</code>). In case of <code>gruvbox</code> you should add</p>

<pre><code>colorscheme gruvbox 
</code></pre>

<p>Usually it's done after the <code>plug#end()</code>.</p>

<p>As for <code>vim-love-docs</code>, the GitHub code only includes the code for <strong>generating</strong> the plugin. From the GitHub page:</p>

<blockquote>
  <p>Vundle: Clone the repo and follow the instructions below to generate the documentation (or download from vim.org). Then activate it using <code>Plugin 'file:///home/gmarik/path/to/plugin</code>'. See <code>:h vundle</code> for more.</p>
</blockquote>
","10113"
"vimrc is not the ultimate configuration file","398","","<p>I have to make explicit source file, eg:</p>

<pre><code>vim -S ~/.vimrc whatever.md
</code></pre>

<p>otherwise it's either ignored or superseded by other configuration files.</p>

<p>I've found running with strace the following order in which is such a directories/files are read:</p>

<p>Edited according comment from muru (using :scriptnames):</p>

<pre><code>  1: /etc/vimrc
  2: /usr/share/vim/vim74/syntax/syntax.vim
  3: /usr/share/vim/vim74/syntax/synload.vim
  4: /usr/share/vim/vim74/syntax/syncolor.vim
  5: /usr/share/vim/vim74/filetype.vim
  6: /usr/share/vim/vimfiles/ftdetect/stp.vim
  7: /usr/share/vim/vim74/ftplugin.vim
  8: ~/.vimrc
  9: /usr/share/vim/vim74/syntax/nosyntax.vim
 10: /usr/share/vim/vim74/ftoff.vim
 11: ~/.vim/bundle/Vundle.vim/autoload/vundle.vim
 12: ~/.vim/bundle/Vundle.vim/autoload/vundle/config.vim
 13: ~/.vim/plugin/acp.vim
 14: ~/.vim/autoload/acp.vim
 15: ~/.vim/plugin/plugin/NERD_tree.vim
 16: ~/.vim/plugin/plugin/clam.vim
 17: ~/.vim/bundle/vim-fugitive/plugin/fugitive.vim
 18: ~/.vim/bundle/L9/plugin/l9.vim
 19: ~/.vim/bundle/L9/autoload/l9.vim
 20: ~/.vim/bundle/command-t/plugin/command-t.vim
 21: ~/.vim/bundle/tabular/plugin/Tabular.vim
 22: /usr/share/vim/vim74/plugin/getscriptPlugin.vim
 23: /usr/share/vim/vim74/plugin/gzip.vim
 24: /usr/share/vim/vim74/plugin/logiPat.vim
 25: /usr/share/vim/vim74/plugin/matchparen.vim
 26: /usr/share/vim/vim74/plugin/netrwPlugin.vim
 27: /usr/share/vim/vim74/plugin/rrhelper.vim
 28: /usr/share/vim/vim74/plugin/spellfile.vim
 29: /usr/share/vim/vim74/plugin/tarPlugin.vim
 30: /usr/share/vim/vim74/plugin/tohtml.vim
 31: /usr/share/vim/vim74/plugin/vimballPlugin.vim
 32: /usr/share/vim/vim74/plugin/zipPlugin.vim
 33: ~/.vim/bundle/tabular/after/plugin/TabularMaps.vim
 34: ~/.vim/bundle/tabular/autoload/tabular.vim
</code></pre>

<p>My config file is:</p>

<pre><code>syntax on
set background=dark
set tabstop=3
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
call vundle#end()            "" required
ab animr {:&amp;.rollIn}
ab animm {:&amp;.moveIn}
ab animz {:&amp;.zoomIn}
ab animf {:&amp;.fadeIn}
ab animb {:&amp;.bounceIn}
ab s[ [slide]
let g:vim_markdown_folding_disabled = 1
</code></pre>

<p>The version of vim is 7.4 and the Operating System is Fedora 23.</p>

<p>Any ideas about this behaviour?</p>
","<p>The problem is by mistake, I've deleted the following line:</p>

<pre><code>filetype plugin indent on    "" required
</code></pre>

<p>That line goes right after:</p>

<pre><code>call vundle#end()            "" required
</code></pre>

<p>Explanation from vim documentation about <code>filetype plugin indent</code>:</p>

<pre><code>You can enable loading the indent file for specific file types with:
        :filetype indent on
If filetype detection was not switched on yet, it will be as well.
This actually loads the file ""indent.vim"" in 'runtimepath'.
The result is that when a file is edited its indent file is loaded (if there
is one for the detected filetype). indent-expression
</code></pre>
","7395"
"Vundle/vim can't see changes in .vimrc","398","","<p>I'm enforcing some strange behaviour of Vundle plugin. Basically, from time to time, i'm not able to install new plugins using <code>:PluginInstall</code> because Vundle can't see the new <code>Plugin</code> entries in my <code>.vimrc</code> file. The results displayed by <code>:PluginInstall</code> contains few plugins from .vimrc but not the recently added ones. I was able to fix that temporary by closing MacVim, opening a terminal vim and running <code>PluginInstall</code> there but it stopped working and now i'm completely not able to install new plugins anywhere.</p>

<p>It behaves like the <code>.vimrc</code> file has been cached somewhere but i can't find such cached one and there is no any <code>.vimrc.swp</code> file present so i feel quite lost.</p>

<p>Any help much appreciated.</p>
","<p>Vim parses your <code>.vimrc</code> once when it is started. Whenever you change something in it (in your case add a new plugin), vim needs to be told manually that something changed so that the <code>.vimrc</code> gets parsed again. You do that by running <code>:source $MYVIMRC</code>. I often shorten that to <code>:so %</code> when my <code>.vimrc</code> is opened (<code>%</code> gets expanded to current file name).</p>

<p>After sourcing your <code>.vimrc</code>, all saved changes are processed and should take effect, so you can run your <code>:PluginInstall</code> command.</p>

<p>In general, your <code>:PluginInstall</code> command will only work if the <code>.vimrc</code> was sourced. What you can do to save you doing this small step manually over and over again is to <a href=""http://www.bestofvim.com/tip/auto-reload-your-vimrc/"" rel=""nofollow"">automate it</a>:</p>

<pre><code>augroup reload_vimrc "" {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END "" }
</code></pre>

<p>That way, whenever you save changes to your <code>.vimrc</code>, it gets sourced automatically.</p>
","5410"
"Cursor moves one character backwards on exiting insert mode","397","","<p>I recently have noticed that entering and then exiting insert mode will move your cursor one space to the left.  This is a default behavior of vim, since it still occurs with <code>vim -u NONE -U NONE -N</code>.  I found <a href=""https://stackoverflow.com/questions/2295410/prevent-cursor-from-moving-back-one-character-on-insert-mode-exit"">this</a> answer and stackoverflow, but it doesn't really explain why this is default behavior.  Why is this default behavior, and should I use I use a workaround like his answer suggests?</p>

<p>If I were to use a workaround, it would look something like this:</p>

<pre><code>inoremap &lt;Esc&gt; &lt;Esc&gt;l
</code></pre>

<p>Also, I did try <code>set virtualedit=onemore</code> but that just seems to do what it says on its help page and nothing more.</p>
","<p>First you should understand that the cursor is between characters in insert mode and on a character in normal mode. This means that when you exit insert mode the cursor needs to move onto a character. (This is more noticeable in gvim or MacVim, where the default insert mode cursor is a pipe instead of a block)</p>

<p>If you enter insert mode with <code>a</code> then hitting <code>&lt;esc&gt;</code> will place the cursor back exactly where it was. When vim exits insert mode, it needs to move the cursor back onto some character. However since appending is indistinguishable from inserting, one of them was chosen as a default. In this case moving left was chosen.</p>

<p>If you changed the default so that <code>&lt;esc&gt;</code> went to the character on the right, people would be complaining that <code>a&lt;esc&gt;</code> was moving the cursor to the right.</p>
","3140"
"Jumping to a file in vimscript","397","","<p>Using gF I can jump to a file with the format foobar.py:27:6 to open foobar.py on line 27. My question is how I can make this jump in vimscript?</p>

<p>For example, this won't work:</p>

<pre><code>execute ""normal gF "" . foobar.py:27:6
</code></pre>

<p>because gF doesn't take an argument - it uses the word under the cursor - but hopefully this gives an impression of what I'm trying to do.</p>
","<p>If you don't care about the column, and as an example you have the linenumber and filename in variables, you could do this:</p>

<pre><code>execute ""edit +"" . linenumber . "" "" . filename
</code></pre>

<p>Or, as from your example</p>

<pre><code>execute ""edit +27 foobar.py""
</code></pre>

<p>To expand the colon separation and then edit would look like this:</p>

<pre><code>let fileLine=""foobar.py:27""
let filename=split(fileLine,"":"")[0]
let linenumber=split(fileLine,"":"")[1]
execute ""edit +"" . linenumber . "" "" . filename
</code></pre>

<p>I'm hard coding the value of fileLine there, but you could obtain it however you like. I'm ignoring the column for simplicity and because you only mentioned jumping to the line in your question.</p>
","248"
"How to set commands for unrecognised file type","395","","<p>I want to set some commands for specific filetypes. For example an abbreviation: </p>

<pre><code>:iabbr Sb SameBatch
</code></pre>

<p>The files have extension like <code>.data</code>, <code>.pro</code>. Their grammar, syntax-highlighting are defined in the framework. I am unaware of those things. Those files contain variables and their values for Perl scripts.</p>

<p>I tried </p>

<pre><code>:au FileType data iabbr di ditto
</code></pre>

<p>But it doesn't work.</p>

<p>I thought that the extension is the file type of a file. Is it wrong and how to get it worked?</p>
","<p>You could use the <code>BufEnter</code> autocommand event like this:</p>

<pre><code>autocmd! BufEnter *.data :iabbr &lt;buffer&gt; di ditto
</code></pre>

<p>The abbreviation will be created when you enter a buffer which is named anything followed by <code>.data</code> and will exists only in this buffer thanks to <code>&lt;buffer&gt;</code>.</p>

<p>To answer more precisely the comment of @SibiCoder I'll detail the line:</p>

<ul>
<li><code>BufEnter</code> trigger the command when a the user enter a buffer.</li>
<li><code>*.data</code> restrict the execution of the autocommand to files ending with <code>.data</code> this way when you enter a file named <code>foo.c</code> or <code>bar.sh</code> the autocommand is not trigger.</li>
<li><code>:iabbr &lt;buffer&gt; di ditto</code> is the command to execute and because of the <code>&lt;buffer&gt;</code> argument the abbreviation will be defined only for the current buffer.</li>
</ul>

<p>See <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html#autocommand-events"" rel=""nofollow""><code>:h autocommand-events</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/map.html#:abbreviate-%3Cbuffer%3E"" rel=""nofollow""><code>:h :abbreviate-&lt;buffer&gt;</code></a></p>
","7601"
"I have a something in my vimrc to match text over 80 characters as an error. It only works in the right most split. Any ideas?","395","","<p>From my .vimrc: <code>match ErrorMsg '\%&gt;80v.\+'</code></p>

<p>And a screenshot: <img src=""https://i.stack.imgur.com/LADSi.png"" alt=""enter image description here""></p>

<p>I have tried a minimal vimrc and it still doesn't work in the left splits.</p>
","<p>From <code>:help :match</code>:</p>

<blockquote>
  <p>Define a pattern to highlight in the <strong>current</strong> window</p>
</blockquote>

<p>This is fixed by making the original command into an autocommand:</p>

<p><code>autocmd WinEnter * match ErrorMsg '\%&gt;80v.\+'
</code></p>
","2624"
"Unexplained gq indentation issue","395","","<p>I insert this text in Vim:</p>

<pre><code>t tttt ttttttttt tt tttt tt ttt tttttt-tttt-ttttttt
tttttttttttttttttttttttttttttttttttttttttttttttttttttt ttttt ttt ttt tttttt
ttttttt tttt ttttttt: ttttttt tt ttttttt, ttttttt tt tttttt, tttttt tt ttttttt,
tttttt tt tttttt ttt. t tttttt tt ttt (tttt) ttttttt-tttttt-tt-ttttttt tttttt
for the ""tttttt in ttttttt"" part of the issue (in the previous week I have
worked on the ""objects in objects"" part). This part is about making it
possible for the end user to add arrays in objects. First of all I checked
that the current implementation allows putting arrays in objects at least
from the schema passed to the plugin constructor.
</code></pre>

<p>then I visually select all these lines and press <code>gq</code>. The contents become:</p>

<pre><code>t tttt ttttttttt tt tttt tt ttt tttttt-tttt-ttttttt
tttttttttttttttttttttttttttttttttttttttttttttttttttttt ttttt ttt ttt tttttt
ttttttt tttt ttttttt: ttttttt tt ttttttt, ttttttt tt tttttt, tttttt tt ttttttt,
tttttt tt tttttt ttt. t tttttt tt ttt (tttt) ttttttt-tttttt-tt-ttttttt tttttt
for the ""tttttt in ttttttt"" part of the issue (in the previous week I have
    worked on the ""objects in objects"" part). This part is about making it
    possible for the end user to add arrays in objects. First of all I checked
    that the current implementation allows putting arrays in objects at least
    from the schema passed to the plugin constructor.
</code></pre>

<p>Please explain to me why there is that whitespace at the beginning of the last four lines. Is it possible that the first word (<code>for</code>) on the fifth line, which in some programming languages starts a <code>for</code> loop, makes Vim think it should start a new indented block of code, even if these lines are in an unsaved file or in a Markdown file? How can I avoid this behavior and make <code>gq</code> stop inserting that whitespace?</p>

<p>My <code>comments</code> setting has the default value: <code>s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:&gt;,fb:-</code>. You can see my <code>.vimrc</code> file <a href=""https://github.com/silviubogan/dotfiles/blob/master/.vimrc"" rel=""nofollow"">here</a>.</p>

<p><strong>Update:</strong> My <code>fo</code> (<code>formatoptions</code>) option has the value <code>tcq</code>, the <code>formatexpr</code> and <code>formatprg</code> options are empty.</p>
","<p>The problem is that you have set <code>smartindent</code> in your <code>~/.vimrc</code>. The <code>smartindent</code> options causes Vim to assume that your text is some C-like programming language when indenting. Among other things, it treats <code>for</code> like a keyword and gives an extra level of indentation to the line following. See</p>

<pre><code>:help 'smartindent'
:help 'cinwords'
</code></pre>
","5591"
"Folding slow with vimtex","394","","<p>Automatic folding with the vimtex plugin are unbearably slow.</p>

<p>Is there anything I can do to speed this up? I tried installing the <a href=""https://github.com/vim-scripts/FastFold"" rel=""nofollow"">fastfold</a> plugin but that did nothing I could notice.</p>
","<p>First: Did you bother to read the vimtex documentation, i.e. <code>:h vimtex-folding</code>? The docs clearly point out that the <code>fold-expr</code> method of folding is slow, and so therefore provides an option <code>g:vimtex_fold_manual</code> which if enabled (set to nonzero value) will set <code>foldmethod=manual</code>, and instead will remap <code>zx</code> and <code>zX</code> to recalculate the folds when necessary (typically not very often).</p>

<p>The fastfold plugin is a very good alternative, as it will automatically ensure that the foldmethod is set to manual. This will also work for other file types, and the plugin provides a set of possibilities for when the folds should be refreshed.</p>

<p><em>Disclaimer: I am the developer of vimtex.</em></p>
","6424"
"How to map key to a substitute command with dynamic text?","394","","<p>I've found this little trick in vim wiki.</p>

<pre><code>nnoremap &lt;Leader&gt;s :%s/\&lt;&lt;C-r&gt;&lt;C-w&gt;\&gt;//g&lt;Left&gt;&lt;Left&gt;
</code></pre>

<p>Immediately I thought that in some cases it would be beneficial to use word in substitution, so I've added capturing parentheses for back reference.</p>

<pre><code>nnoremap &lt;leader&gt;* *:%s/\v(&lt;&lt;C-r&gt;&lt;C-w&gt;&gt;)//g&lt;Left&gt;&lt;Left&gt;
</code></pre>

<p>I'm using this primarily as a replacement for rename refactoring, so I thought: ""You know what? In all those IDEs when I've renamed things it's always been a little pain to change one or two words in multiword variable"".</p>

<p>I mean something like <code>first</code> in <code>first_second_third</code> or <code>FirstSecondThird</code> or <code>firstSecondThird</code>. Thanks to extensibility of vim this should be easy to do. I just need to split the word under cursor by rule that depends of whether its a camel case word of snake case word (easy to determine if we would take as a rule, that the word either a snake case or camel case, but not both). And then to produce the argument to the substitute command with each actual word in variable name surrounded by capturing parens, like so.</p>

<pre><code>%s/\v(first)_(second)_(third)//g
</code></pre>

<p>With that if I need to change second word all I need to do is enter</p>

<pre><code>\1something_other\2
</code></pre>

<p>Which is pretty neat in my opinion.
The problem is that I don't know how to make a mapping call substitute with dynamic parameters.</p>
","<p>I'm not sure but maybe the following code could work:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;Leader&gt;s &lt;SID&gt;change_word_under_cursor()
fu! s:change_word_under_cursor() abort
    let word = expand('&lt;cword&gt;')
    let subwords = split(word, word =~# '_' ? '_' : '\ze\u')
    return ':%s/\v' . join(map(subwords, '""("" . v:val . "")""'), word =~# '_' ? '_' : '') . '//g' . ""\&lt;Left&gt;\&lt;Left&gt;""
endfu
</code></pre>

<hr>

<p><code>&lt;expr&gt;</code> is an argument that you can pass to a mapping command such as <code>:nnoremap</code>. It tells Vim to not consider the <code>{rhs}</code> as keys to type, but as an expression to evaluate, and then type the evaluation as keys.</p>

<p>Here the expression is the function <code>s:change_word_under_cursor</code>.<br>
In order to not pollute your global namespace, it's local to the script where you'll write the code.<br>
The problem is that when you'll hit <code>&lt;Leader&gt;s</code>, the function will be called from outside the script, and Vim won't know where to look for it.<br>
The solution is to add <code>&lt;SID&gt;</code> in front of the name of the function. When your mapping will be sourced and add an entry in the mappings table, <code>&lt;SID&gt;</code> will be translated into something like <code>&lt;SNR&gt;{some_number}_</code>. <code>{some_number}</code> will tell Vim in which script to look for the function.</p>

<hr>

<p>The function does the following thing:</p>

<pre><code>let word = expand('&lt;cword&gt;')
</code></pre>

<p>Store the word under the cursor inside the variable <code>word</code>.</p>

<pre><code>let subwords = split(word, word =~# '_' ? '_' : '\ze\u')
</code></pre>

<p><code>word =~# '_' ? '_' : '\ze\u'</code> is an expression using the ternary operator <code>?:</code> which checks whether the word contains an underscore. If it does, its evaluation is the string <code>'_'</code> otherwise the string <code>'\ze\u'</code>. This string will be used by the <code>split()</code> function to know where to split the word.</p>

<p><code>split(word, …)</code> splits the word every time an underscore or an uppercase letter is found, and returns a list containing the result.</p>

<pre><code>return ':%s/\v' . join(map(subwords, '""("" . v:val . "")""'), word =~# '_' ? '_' : '') . '//g' . ""\&lt;Left&gt;\&lt;Left&gt;""
</code></pre>

<p>Return the keys to type.  </p>

<p><code>map(subwords, '…')</code> applies a transformation on each word inside the list <code>subwords</code>, which surrounds them with parentheses.<br>
And <code>join(map(…), word =~# '_' ? '_' : '')</code> concatenates the items inside the list by adding an underscore or nothing between 2 consecutive items.</p>

<hr>

<p>You can find more information on this with:</p>

<pre><code>:h &lt;expr&gt;
:h &lt;sid&gt;
:h /\ze
:h split()
:h map()
:h join()
</code></pre>
","8148"
"How to visual select from vimscript","394","","<p>In Mac OS, I am trying to write a function that will say the current paragraph without moving the cursor, but something doesn't seem to work. This is what I have so far:</p>

<pre><code>function! SayIt()
    let l:line = line(""."")
    let l:col  = col(""."")
    execute ""normal V""
    execute ""silent '&lt;,'&gt;w !say""
   call cursor(l:line,l:col)
endfunction

vnoremap &lt;leader&gt;v :call SayIt()&lt;cr&gt;
</code></pre>

<p>If I remove the <code>execute ""normal V""</code> line the function works when I have previously selected a paragraph (or rather a long soft wrapped line). What am I doing wrong?</p>
","<p>Your selection is being made with the <code>V</code> command, so your <code>'&lt;,'&gt;</code> marks are just set to that line.</p>

<p>Try to select the paragraph with the <code>ip</code> motion after going into visual mode, then the range will be what you want.</p>

<p>The <code>execute</code>s are unnecessary. Also that <code>cursor</code> stuff isn't the way the pros do it. :)</p>

<pre><code>function! SayIt()
    let l:winview = winsaveview()
    normal Vip
    silent '&lt;,'&gt;w !say
    call winrestview(l:winview)
endfunction
</code></pre>
","6624"
"vimrc contents selectively (i.e. highlight) ignored","394","","<p>This one beats me after 30 years of vi/vim usage... Context: I'm on FreeBSD using the latest vim (7.4.796). A month or so ago, syntax highlighting in xterm(318) started acting up. In particular, the highlighting of comments is cyan, not the expected gray.</p>

<p>To track this down I have done the following.</p>

<p>Strip down my <code>~/.vimrc</code> to these few lines</p>

<pre><code>$ vim .vimrc
  1 "" Normal must be set before colors ""fg"" and ""bg"" can be used.
  2 highlight Normal ctermfg=216 ctermbg=233
  3
  4 "" gray        This comment.
  5 highlight Comment   cterm=NONE      ctermfg=250     ctermbg=bg
  6
  7 "" Line numbers indicate this .vimrc was read.
  8 set number
  9 syntax enable
</code></pre>

<p>Note that the line numbers appear; color 250 is gray in my <code>TERM=xterm-256color</code>.</p>

<p>I have moved away my <code>~/.vim</code> directory to avoid any local plugin interference.
Interestingly, when I <code>:so .vimrc</code> the correct color for the comments is used. It appears as if <em>only</em> the highlighting stuff is ignored upon startup, but works when sourced explicitly.</p>

<p><strong>EDIT #1</strong>: I don't have any <code>VIM</code> environment variable set.</p>

<p><strong>EDIT #2</strong>: <code>:verbose hi Comment</code> says</p>

<pre><code>Comment        xxx term=bold ctermfg=14 guifg=#80a0ff
Last set from /usr/local/share/vim/vim74/syntax/syncolor.vim
</code></pre>

<p><strong>EDIT #3</strong>: <code>:scriptnames</code> says</p>

<pre><code>  1: ~/.vimrc
  2: /usr/local/share/vim/vim74/syntax/syntax.vim
  3: /usr/local/share/vim/vim74/syntax/synload.vim
  4: /usr/local/share/vim/vim74/syntax/syncolor.vim
  5: /usr/local/share/vim/vim74/filetype.vim
  6: /usr/local/share/vim/vim74/plugin/getscriptPlugin.vim
  7: /usr/local/share/vim/vim74/plugin/gzip.vim
  8: /usr/local/share/vim/vim74/plugin/logiPat.vim
  9: /usr/local/share/vim/vim74/plugin/matchparen.vim
 10: /usr/local/share/vim/vim74/plugin/netrwPlugin.vim
 11: /usr/local/share/vim/vim74/plugin/rrhelper.vim
 12: /usr/local/share/vim/vim74/plugin/spellfile.vim
 13: /usr/local/share/vim/vim74/plugin/tarPlugin.vim
 14: /usr/local/share/vim/vim74/plugin/tohtml.vim
 15: /usr/local/share/vim/vim74/plugin/vimballPlugin.vim
 16: /usr/local/share/vim/vim74/plugin/zipPlugin.vim
</code></pre>

<p>Now I ran out of ideas what is going on here and how to fix it. Someone hit me with the clue bat, please.</p>
","<p>Patches 7.4.757 on June 25, 7.4.766 on July 3, and 7.4.770 on July 10 added a feature to Vim in terminal mode that queries the terminal for its background color using the T_RGB escape sequence. When Vim receives the background color response from the terminal and the received background is different from the default (light), Vim changes the highlight colors to be compatible with the new background.</p>

<p>A little testing verifies that Vim 7.4.729 running in xterm 318 starts with 'background' = light, but Vim 7.4.797 automatically sets 'background' = dark.</p>

<p>A solution is to put</p>

<pre><code>set background=light
</code></pre>

<p>in your <code>~/.vimrc</code>. I <em>think</em> that setting this tells Vim not to query the terminal. It may just tell Vim to ignore the terminal's response to the background color query.</p>

<p>You can find out a little about the effect of setting 'background' from</p>

<pre><code>:help 'background'
</code></pre>

<p>but I haven't found any documentation on this automatic setting feature.</p>
","4045"
"Buffers comand to show full path and filename","393","","<p>Using <code>:buffers</code> results</p>

<pre><code>:buffers
  1 %a   ""my-jspage.md""                 line 11
</code></pre>

<p>Are there any options so <code>:buffers</code> will list full path and filename? E.g.:</p>

<pre><code>:buffers
  1 %a   ""d:\projects\self-org\my-jspage.md""                 line 11
</code></pre>

<p>I'm on windows Vim 7.4-656. I'm aware of <code>:ls</code> :)</p>
","<p>Vim reduces the filespec of the open buffers to a shorter, relative representation. (That's a feature, not a bug.) You can work around that behavior by switching the current working directory (temporarily) to the file system root / (on Windows:) to a drive not currently used:</p>

<pre><code>:cd C:/ | buffers | cd -
</code></pre>
","3020"
"How can I search and replace within multiple files?","393","","<p>I have the same text that I want to replace in multiple files (say, I'm updating version numbers in multiple files). Even using the command history to reuse commands, it sure is tedious to open each one, search and replace in it, and then save it. Can I do just all of this in one search and replace operation on all of these files?</p>
","<p>Let's say that you decided that you want to update the text <code>use 5.008</code> to <code>use 5.010</code> in multiple Perl script and Perl modules.</p>

<pre><code>:arg *.pl       
:argadd *.pm
:argdo %s/use 5\.008/use 5\.010/ge | update
</code></pre>

<p>note that you need to escape '.', since it it's the wildcard for one character.</p>

<p><code>:arg *.pl</code> fills the argument list with all of the files ending in <code>.pl</code> in the current directory.  </p>

<p><code>:argadd *.pm</code> adds all of the files ending in <code>.pm</code> to the argument list.  </p>

<p><code>:argdo %s/use 5.008/use 5.010/ge | update</code> Does the search and replace on each file in the argument list and <em>saves each file</em> for you.  </p>

<p>See <a href=""http://vim.wikia.com/wiki/Search_and_replace_in_multiple_buffers"" rel=""nofollow"">Search and Replace in Multiple Buffers</a> for more details and variations.</p>
","2342"
"How to write a `completefunc`/`omnifunc` that tries multiple base values?","392","","<p>I've been trying to write a simple complete function for Vim that tries
multiple values for the <code>base</code> argument.</p>

<p>Here is a version that works but which I find unsatisfactory:</p>

<pre><code>function! CompleteFunc(findstart, base)
  if a:findstart
    let start = AmbitiousFindStart()
    "" -1 to exclude cursor, -1 again to convert column to index
    let fake_base = getline('.')[start:col('.')-2]
    if empty(GetCompletions(fake_base))
      let start = FallbackFindStart()
    endif
    return start
  else
    return GetCompletions(a:base)
  endif
endfunction
set completefunc=CompleteFunc
</code></pre>

<p>Specifically in my case, <code>AmbitiousFindStart()</code> tries to set <code>start</code> so as to
consume all non-whitespace characters, but if this fails, I want to use
<code>FallbackFindStart()</code>, which only tries to consume word characters.</p>

<p>Here are the problems I see with this approach:</p>

<ol>
<li>Even in the case when <code>AmbitiousFindStart()</code> succeeds (i.e. produces matches
when calling <code>GetCompletions(fake_base)</code>), <code>GetCompletions()</code> is called
twice.</li>
<li>The <code>fake_base</code> approach seems inelegant to me; Vim is the one who is
suppose to provide me with <code>base</code>, rather than me going out of my way to try
to calculate what <code>base</code> would be. Additionally I'm not even sure if my
<code>base</code> calculation is correct (it seems to work in the cases I've tried, but
there might be problems with e.g. multi-byte characters). I've therefore
called it the ""fake"" <code>base</code> to distinguish it from the ""real"" <code>base</code> that
Vim would provide.</li>
</ol>

<p>My first approach to fix problem (1) was the following, which does not work:</p>

<pre><code>function! BadCompleteFunc(findstart, base)
  if a:findstart
    let start = AmbitiousFindStart()
    return start
  else
    let compl_lst = GetCompletions(a:base)
    if empty(compl_lst)
      let fake_base = getline('.')[start:col('.')-2]
      let compl_lst = GetCompletions(fake_base)
    endif
    return compl_lst
  endif
endfunction
</code></pre>

<p>The problem with this is that Vim uses the <code>start</code> value returned from the
first time <code>BadCompleteFunc()</code> is called to decide what to replace the
completion with, rather than the string value of <code>base</code>.</p>

<p>The second approach I came up with is to use <code>complete()</code>, which has problems
of its own:</p>

<pre><code>function! Complete()
  let startidx = AmbitiousFindStart()
  let startcol = startidx + 1
  let currcol = col('.')
  let curridx = currcol - 1
  let fake_base = getline('.')[startidx:curridx-1]
  let matches = GetCompletions(fake_base)
  if !empty(matches)
    call complete(startcol, matches)
  else
    let startidx = FallbackFindStart()
    let startcol = startidx + 1
    let fake_base = getline('.')[startidx:curridx-1]
    let matches = GetCompletions(fake_base)
    call complete(startcol, matches)
  endif
  return ''
endfunction
</code></pre>

<p>The problem here is that this assumes a usage through a custom insert mode
mapping, such as <code>inoremap &lt;C-X&gt;&lt;C-U&gt; &lt;C-R&gt;=Complete()&lt;CR&gt;</code>, rather than being
able to set <code>completefunc</code>.</p>

<p>What is the right way to approach this sort of complete function?</p>
","<p><code>'completefunc'</code> assumes that you can determine the base just by looking at the text before the cursor; then, the call sequence is just fine. In your case, you want a fallback with a different base in case the original base does not yield any completion candidates. For that, you have to call <code>GetCompletions()</code> to find out. The only way you could optimize this is storing the result of that first call in a script-local variable, and reusing that when your completion function is invoked the second time around (with <code>findstart = 0</code>).</p>

<p>Another way I've solved a similar problem is triggering the fallback only on a second invocation at the same cursor position. So, the user invokes completion, either gets a list of matches or a ""no matches"" error, and then retriggers the completion. It's both more work, but also offers more control to the user.</p>
","9950"
"How can I get ‘n’ to go forward even if I started searching with ‘?’ or ‘#’?","391","","<p>Vim has (at least) two sets of commands that search in opposite directions. Typing <code>/</code> and then a pattern will search forward through the document for the pattern; typing <code>?</code> and then a pattern will search backward. The same relationship exists between the <code>*</code> and <code>#</code> commands.</p>

<p>What I don’t like is that these commands also set the search direction for the <code>n</code> and <code>N</code> commands. After using <code>/</code>, <code>n</code> goes forward through the document and <code>N</code> goes backward; after using <code>?</code>, <code>n</code> goes backward and <code>N</code> goes forward. (In other words, <code>n</code> always goes in the same direction as the original search and <code>N</code> always goes in the other direction.)</p>

<p>How can I get <code>n</code> to go forward through the document, and <code>N</code> to go backward, regardless of which direction I started searching in?</p>
","<p>You can change the behaviour of <code>n</code> and <code>N</code> to search consistently downwards/upwards by useing the following:</p>

<pre><code>nnoremap &lt;expr&gt; n 'Nn'[v:searchforward]
nnoremap &lt;expr&gt; N 'nN'[v:searchforward]
</code></pre>

<p><strong>Update:</strong> How does it work?</p>

<p>This uses expression-maps, which maps the lhs of the map to an expression that will be evaluated, everytime the lhs is encountered. See <code>:h map-expression</code> in the help.</p>

<p>What happens is, that the v:searchforward variable (which determines the internal state of which direction the last search was, see <code>:h v:searchforward</code>) is used as an index for the string in front of it. So in case of the first map, if the last search direction was forward, the n will be mapped to 'n' (index of 1, meaning return the second character) and if it was backward, the 'n' will be mapped to 'N' (because the v:searchforward variable is 0 and therefore the 'N' will be returned. </p>

<p>An alternative way to write those maps would be (which might be clearer):</p>

<pre><code>nnoremap &lt;expr&gt; n (v:searchforward ? 'n' : 'N')
nnoremap &lt;expr&gt; N (v:searchforward ? 'N' : 'n')
</code></pre>

<p>There are also some plugins, that do that (ie the <a href=""http://www.vim.org/scripts/script.php?script_id=4949"">SearchRepeat plugin</a> and possibly others as well).</p>
","2366"
"How to cut/trim line in statusline?","391","","<p>I'm trying to cut string returned from fugitive plugin. It returns branch name of current file. By default returned string is <code>Git(branchname)</code> and this is why I want to get rid of odd <code>Git(..)</code> wrapper. So here is the code:</p>

<pre><code>...
set statusline+=%{strpart(fugitive#statusline(), 4, 1)}
...
</code></pre>

<p>When I update <code>.vimrc</code> it returns error:</p>

<pre><code>E540: Unclosed expression sequence: statusline+=%{strpart(fugitive#statusline(), 
</code></pre>

<p>What do I wrong?</p>
","<p>Values used in <code>:set</code> are strings. See <a href=""http://vimhelp.appspot.com/options.txt.html#%3Aset-args"" rel=""noreferrer""><code>:h set-args</code></a>:</p>

<pre><code>                                                :set-args E487 E521
:se[t] {option}={value}         or
:se[t] {option}:{value}
                        Set string or number option to {value}.
                        ...
                        White space between {option} and '=' is allowed and
                        will be ignored.  White space between '=' and {value}
                        is not allowed.
                        See option-backslash for using white space and
                        backslashes in {value}.
</code></pre>

<p>You should escape the spaces:</p>

<pre><code>set statusline+=%{strpart(fugitive#statusline(),\ 4,\ 1)}
</code></pre>

<p>Consider the example from the help for <a href=""https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt#L339"" rel=""noreferrer""><code>fugitive#statusline</code></a>:</p>

<pre><code>set statusline=%&lt;%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
</code></pre>

<p>Note how all the spaces (all two of them, anyway) are escaped.</p>

<hr>

<p>Aside:</p>

<p><code>strpart(x, 4, 1)</code> is a single character, which is probably not what you wanted. <a href=""http://vimhelp.appspot.com/windows.txt.html#%3Asplit"" rel=""noreferrer""><code>split()</code></a> might be more useful:</p>

<pre><code>:echo strpart(fugitive#statusline(),4,1)
(
:echo split(fugitive#statusline(), '[()]')[1]
master
</code></pre>

<p>So, you probably want:</p>

<pre><code>set statusline+=%{remove(split(fugitive#statusline(),'[()]'),1)}
</code></pre>

<p>This will error out outside git repositories. It might better to write a small function at this point:</p>

<pre><code>function! Current_git_branch()
    let l:branch = split(fugitive#statusline(),'[()]')
    if len(l:branch) &gt; 1
         return remove(l:branch, 1)
    endif
    return """"
endfunction
</code></pre>

<p>And then:</p>

<pre><code>set statusline+=%{Current_git_branch()}
</code></pre>
","6506"
"Is it possible to obtain the displayable area, width and height of current buffer in Vim?","391","","<p>I know Vim provides functions to display window's dimensions. But does it also
provide ways for me to know current buffer/split's dimensions? Like how many lines
and columns in displable area? </p>

<p>Currently all I can find online is the information on how to change the split
width and height rather than obtaining the current dimension. But I don't need
to change the split size, only need to know its size information to
organize some material in the buffer.</p>

<hr>

<p>Edit: As indicated by @Tommy A in his comment, the reason I have this question
is that I misunderstood of the terminology. To quote him:</p>

<blockquote>
  <p>A window is a viewport for a buffer. ""Split"" is just a verb in Vim. I think
  you might be mixing up the terminology for windows and buffers. Soft wrapping
  occurs at winwidth(0) and it's also the the total number of characters that
  can be displayed horizontally. Hard wrapping occurs at &amp;textwidth. </p>
</blockquote>

<p>Hence what I want to do is to show the window dimension, by <code>winwidth(0)</code> and
<code>winheight(0)</code>.</p>

<p>Also, as mentioned in Question <a href=""https://stackoverflow.com/questions/26315925/get-usable-window-width-in-vim-script/26318602#26318602"">Get Usable Window Width in Vim
Script</a>,
<code>winwidth(0)</code> is usually larger than the usable width of the window for the
content. To obtain the correct size information, please refer to the answer in
that question.</p>
","<p>These are the different ways (that I know of) to get dimensional information from Vim.</p>

<h2>Vim</h2>

<p><code>&amp;columns</code> and <code>&amp;lines</code> will give you the total width and height of the screen Vim is displayed in.  These can be changed at runtime, but it's not recommended.</p>

<p><code>&amp;cmdheight</code> will give you the height of the command line.</p>

<h2>Windows</h2>

<p><code>winwidth(0)</code> and <code>winheight(0)</code> will give you the dimensions for the current window.  It includes the width of the gutter columns, but not the window separator.</p>

<p>If you wanted to get the size as a ratio, you would need to turn one of the values into a float:</p>

<pre><code>let width_ratio = winwidth(0) / str2float(&amp;columns)
let height_ratio = winheight(0) / str2float(&amp;lines)
</code></pre>

<h2>Buffers</h2>

<p>If you want the total number of lines in a buffer:</p>

<pre><code>let total_lines = line('$')
</code></pre>

<p>If you want the number of <em>visible</em> lines in a buffer:</p>

<pre><code>let visible_lines = line('w$') - line('w0')
</code></pre>

<p><code>w$</code> is the bottom line and <code>w0</code> is the top line.</p>

<p>To get the maximum column from the buffer, you could use:</p>

<pre><code>function! BufferWidth() abort
  let view = winsaveview()
  let max_col = 0
  g/^/let max_col=max([max_col, col('$') - 1])
  call histdel('search', -1)
  let @/ = histget('search', -1)
  call winrestview(view)
  return max_col
endfunction
</code></pre>

<p>The <code>:global</code> command is used to get the last column in every line and keep the highest value.  The rest of the function saves/restores the state since <code>:global</code> moves the cursor and changes the search history.</p>
","8927"
"Syntax highlighting is gone after :bufdo :e","391","","<p>I'm using console vim within a tmux window, therefore occasionally vim doesn't recognize that files have been modified (gvim does it on a focus change AFAIK) and in order to avoid getting inconsistent buffers, I manually ask vim to reload them all using</p>

<pre><code>:bufdo :e
</code></pre>

<p>However, after this syntax highlighting is lost in all the buffers. Typing <code>:e</code> in a buffer then restores it again. This seems strange, as I'd suppose that <code>:e</code> behaves the same when given directly and when inside <code>:bufdo</code>. Is there a way how to get around that, to have syntax highlighted buffers after <code>:bufdo :e</code>?</p>
","<p>What you are experiencing seems to be a feature. From <code>:help bufo</code>:</p>

<pre><code>    Note: While this command is executing, the Syntax
    autocommand event is disabled by adding it to
    'eventignore'.  This considerably speeds up editing
    each buffer.
</code></pre>

<p>That being said, you probably should focus on which settings you are using on gVim that you are missing on console Vim, as they should be able to behave in the exact same way. If you really need to reload all the buffers, you should try the <code>:checktime</code> command.</p>
","5226"
"Delete all recordings?","390","","<p>I don't want to <a href=""https://stackoverflow.com/questions/1527784/what-is-vim-recording-and-how-can-it-be-disabled"">disable recording entirely</a>, but I'm not happy with vim keeping my recordings between sessions, and occasionally I fat finger the <kbd>@</kbd> key and end up with a bunch of garbage in the active buffer.</p>

<p>How do I ensure that <em>all</em> recordings are deleted (e.g. when I restart vim)?</p>
","<p>As @carpetsmoker mentioned, recorded macros are stored in registers.</p>

<p>Non-empty registers are saved to your viminfo file when you exit Vim. According to <code>:help 'viminfo'</code>, the default for all OSes when not running in vi mode is to store up to 50 lines of text for each register (the <code>&lt;50</code> bit). You might also see it as <code>""50</code> in your setting (they both mean the same thing).</p>

<p>So, to not save registers on Vim exit (with the result of having all empty registers on Vim start) is to change your <code>viminfo</code> setting. You can put something like the following in your .vimrc (a modification of the 
others' default value):</p>

<pre><code>set viminfo='100,&lt;0,s10,h
</code></pre>

<p>You can check the current value of your viminfo setting live by running</p>

<pre><code>:set viminfo?
</code></pre>

<p>and use that as your starting point for getting rid of the registers.</p>

<p><strong>NOTE:</strong> this will also lose any register contents gotten via yank, delete, etc. operations.</p>

<p><strong>NOTE:</strong> There is no need to clean up the old content of the viminfo file; the moment you exit Vim, it will save a new file that won't have the contents you specify it to not have (i.e. it will erase existing saved registers when you exit).</p>

<p><strong>NOTE:</strong> If you do populate a register via a yank, delete, etc. operation and then fat-finger the <code>@</code>, you can still end up with a bunch of garbage on the screen, since <code>@</code> just runs whatever is in a register no matter how it got there (which is convenient for creating macros sometimes, but inconvenient if you accidentally hit <code>@</code>)</p>
","6707"
"hi StatusLine cterm=none displays whitespace characters","390","","<p>I don't like the <code>cterm=reverse</code> used on the StatusLine. Without <code>reverse</code>, I also don't care for <code>bold</code>, so I ended up with <code>hi StatusLine cterm=none</code> in my <code>.vimrc</code>.</p>

<p>However, this lead the spaces caused by the <code>%=</code> in my statusline to be displayed as <code>^</code>'s, which is quite obnoxious.</p>

<p>Here's my statusline code:</p>

<pre><code>if has('statusline')
    if version &gt;= 700
        "" Fancy status line.
        set statusline =
        set statusline+=%n                                 ""buffer number
        set statusline+=%{'/'.bufnr('$')}\                 ""buffer count
        set statusline+=%f%m\                              ""file name/modified flag
        set statusline+=(%{strlen(&amp;ft)?&amp;ft:'none'})        ""file type
        set statusline+=%=                                 ""indent right
        set statusline+=U+%04B\                            ""Unicode char under cursor
        set statusline+=%-6.(%l/%{line('$')},%c%V%)\ %&lt;%P  ""position
    endif
endif
</code></pre>

<p>What's causing that to happen? And can I change it or do I have to settle for <code>cterm=bold</code>?</p>
","<p>No. There is no way around that. This is done on purpose whenever the Statusline highlighting is not different than the normal highlighting.
You could however try to set the Statusline highlighting to a particular highlighting. That should prevent that this happens. E.g. if you are using this in a black terminal, try this:</p>

<pre><code>:hi StatusLine ctermbg=0 term=none
</code></pre>

<p>That means, by setting the highlighting group of the statusline to a particular color it will be different than the Normal highlighting and therefore, the replacement of the fillchars to '^' will not occurr. </p>

<p>You might also want to consider to set the StatuslineNC highlighting to a similar highlighting.</p>
","2385"
"Prevent 'Press ENTER' when pathogen loads but keep for other scripts","390","","<p>I have pathogen setup however when it finishes loading I have to press the <kbd>Enter</kbd> key as shown in this screen shot.<br><img src=""https://i.stack.imgur.com/X2gzD.png"" alt=""enter image description here""></p>

<p>Is there a way how to disable the 'Press Enter or type command to continue' prompt but keep it when other shell scripts are run usng the <code>.vimrc</code> file or another method?</p>

<p>I have had a look at <a href=""https://vi.stackexchange.com/questions/771/how-can-i-suppress-the-press-enter-prompt-when-opening-files-in-diff-mode"">How can I suppress the &quot;press enter&quot; prompt when opening files in diff mode?</a> however the answer looks like it disables the prompt for all scripts when I want it disabled <strong>only</strong> when pathogen loads.</p>
","<p>Change the <code>call pathogen#runtime_append_all_bundles()</code> line in your vimrc to <code>call pathogen#infect()</code>, as the message suggests.</p>
","2500"
"Vim scroll window like in less pager (with single key)?","390","","<p>I really like how the less pager uses <kbd>w</kbd> to scroll up and <kbd>z</kbd> to scroll down since they are single keys, in vim I have to use <kbd>CTRL</kbd>+<kbd>d</kbd>/<kbd>CTRL</kbd>+<kbd>f</kbd> to get the same effect. Having to hold <kbd>ctrl</kbd> is a bit of a nuisance. </p>

<p>Of course I could just remap the scroll keys, but that might break plugins, generate bad karma, etc, etc... </p>

<p>Is there a single key shortcut to move down by a screen already?
Your suggestions?</p>
","<p>If you are not a member of the clan of arrow keys haters, and if your distribution provider didn't screw up your <code>termcap</code> / <code>terminfo</code> database, the <kbd>PgUp</kbd> and <kbd>PgDown</kbd> keys should work just fine.  And so would <kbd>Home</kbd> and <kbd>End</kbd>, <kbd>Insert</kbd> and <kbd>Delete</kbd>, and even the arrow keys, both in insert, normal, select, visual, and Ex modes (and whatever else Vim has in store that I can't remember just now).</p>

<p>On the other hand, if you <em>are</em> a member of said clan, you'll have to stop listening to the filthy arrow keys propaganda and just get used to the One True Way of <kbd>Ctrl</kbd>-<kbd>d</kbd> and <kbd>Ctrl</kbd>-<kbd>f</kbd>.</p>
","3919"
"Put a process started with ! in the background","389","","<p>If I do this from the shell:</p>

<pre><code>$ sleep 100
</code></pre>

<p>I can make it go to the background by doing:</p>

<pre><code>^Z
$ bg
</code></pre>

<p>And then continue using my shell. You can get the same effect by adding a <code>&amp;</code> to the end of the command, but I often forget this.</p>

<p>In Vim, I often do:</p>

<pre><code>:!sleep 100
</code></pre>

<p>And here also, I often forget to add the <code>&amp;</code>. Can I put this process in the background and continue using Vim like in the shell?</p>
","<p><strong>Note</strong>: This answer only seems to work with the <code>tcsh</code> and <code>fish</code> shells. I also tried <code>bash</code>, <code>dash</code>, <code>mksh</code>, and <code>zsh</code>, and it <em>doesn't</em> work there; I'm not sure why, because if I do the same actions from these shells without Vim, it <em>does</em> work as expected... (<code>:!</code> commands are executed though the shell).</p>

<p>I happen to use <code>tcsh</code>, so it works for me...</p>

<p>You can use <code>:set shell=/bin/tcsh</code> to set your shell; this is global, though. So only use it if you think this is a very important feature :-)</p>

<hr>

<p><code>^Z</code> send a <code>SIGTSTP</code> signal, you can send this signal with <code>kill</code>, and then use <code>SIGCONT</code> to continue (resume) the process. This will detach the process from Vim.</p>

<p>Because it's difficult to show with this <code>sleep</code> (how do you know it has continued execution?), I'll use <code>gitk</code> as an example (but any GUI program will do):</p>

<p>For example in Vim:</p>

<pre><code>:!gitk %
</code></pre>

<p>And then in another terminal:</p>

<pre><code>$ ps ax | grep gitk
30105 pts/10   S+     0:00 -bin/tcsh -c gitk
30108 pts/10   Sl+    0:00 wish /sbin/gitk --

$ kill -TSTP 30108
$ kill -CONT 30108
</code></pre>

<p>You can of course also use <code>killall</code>, or <code>pkill</code>; for example:</p>

<pre><code>$ killall -TSTP wish
$ killall -CONST wish
</code></pre>

<p>You do need to open another terminal for this, which is not ideal, but it will allow you to continue using both your Vim and your external process.</p>
","2175"
"Creating C:\Users\MyUserNameHere\_vimrc on Windows seems to override some other vimrc file","388","","<p>I'm running Windows 7 with gvim 7.4 installed in the default location. I have created a file <code>C:\Users\MyUserNameHere\_vimrc</code> with just a few lines as simple as:</p>

<pre><code>set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set foldmethod=indent
</code></pre>

<p>There seems to be nothing wrong with my _vimrc. However, when I open a PHP file, the syntax higlighting is gone after I create this file. Of course I could just add the line</p>

<p>syntax on</p>

<p>to the _vimrc file in the directory corresponding to my username. But the fact that syntax highlighting is gone makes me think that some other useful default settings may be gone as well.</p>

<p>So, what I would like to know is, by creating <code>C:\Users\MyUserNameHere\_vimrc</code>, have I overridden another <code>_vimrc</code> file somewhere on the filesystem? I have tried searching from the windows search box next to the start button but found nothing.</p>
","<p>Hit <code>:version</code> inside Vim, you'll see the paths where Vim will search for a vimrc file. </p>

<p>If you run <code>:echo $VIM</code>, <code>:echo $VIMRUNTIME</code> and perhaps <code>:echo $HOME</code>, you'll see the actual path components.</p>
","4479"
"Pasting from cliboard in osx returns ^M instead of newline","388","","<p>I'm having a problem with pasting on MacOS Sierra.
When I copy text with newlines, I can paste it in a terminal without issue.
e.g.:
Text to be copied:</p>

<pre><code>echo 'Foo'
echo 'Bar'
</code></pre>

<p>result from terminal (same in iTerm, Term using both bash and zsh):</p>

<pre><code>[23:38:29] ~ $ echo 'Foo'
echo 'Bar'
Foo
Bar
</code></pre>

<p>result from vim within terminal</p>

<pre><code>echo 'Foo'^Mecho 'Bar'^MFoo^MBar
</code></pre>

<p>As you see, the carriage return is interpreted as a literal string.
I have tried in <code>pastemode</code> and <code>fileformat=unix</code></p>

<p>My <code>.vimrc</code> can be found at <a href=""https://github.com/zsoobhan/configs/blob/feature/osx/vimrc"" rel=""noreferrer"">https://github.com/zsoobhan/configs/blob/feature/osx/vimrc</a>.</p>

<p>Vim version:</p>

<pre><code>VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Jan 24 2017 14:45:56)
MacOS X (unix) version
Included patches: 1-225
Compiled by Homebrew
Huge version without GUI.  Features included (+) or not (-):
+acl             +file_in_path    +mouse_sgr       +tag_old_static
+arabic          +find_in_path    -mouse_sysmouse  -tag_any_white
+autocmd         +float           +mouse_urxvt     -tcl
-balloon_eval    +folding         +mouse_xterm     +termguicolors
-browse          -footer          +multi_byte      +terminfo
++builtin_terms  +fork()          +multi_lang      +termresponse
+byte_offset     -gettext         -mzscheme        +textobjects
+channel         -hangul_input    +netbeans_intg   +timers
+cindent         +iconv           +num64           +title
-clientserver    +insert_expand   +packages        -toolbar
+clipboard       +job             +path_extra      +user_commands
+cmdline_compl   +jumplist        +perl            +vertsplit
+cmdline_hist    +keymap          +persistent_undo +virtualedit
+cmdline_info    +lambda          +postscript      +visual
+comments        +langmap         +printer         +visualextra
+conceal         +libcall         +profile         +viminfo
+cryptv          +linebreak       +python          +vreplace
+cscope          +lispindent      -python3         +wildignore
+cursorbind      +listcmds        +quickfix        +wildmenu
+cursorshape     +localmap        +reltime         +windows
+dialog_con      -lua             +rightleft       +writebackup
+diff            +menu            +ruby            -X11
+digraphs        +mksession       +scrollbind      -xfontset
-dnd             +modify_fname    +signs           -xim
-ebcdic          +mouse           +smartindent     -xpm
+emacs_tags      -mouseshape      +startuptime     -xsmp
+eval            +mouse_dec       +statusline      -xterm_clipboard
+ex_extra        -mouse_gpm       -sun_workshop    -xterm_save
+extra_search    -mouse_jsbterm   +syntax
+farsi           +mouse_netterm   +tag_binary
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
 2nd user vimrc file: ""~/.vim/vimrc""
      user exrc file: ""$HOME/.exrc""
       defaults file: ""$VIMRUNTIME/defaults.vim""
  fall-back for $VIM: ""/usr/local/share/vim""
Compilation: clang -c -I. -Iproto -DHAVE_CONFIG_H   -DMACOS_X_UNIX  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1
Linking: clang   -L. -fstack-protector -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib  -L/usr/local/lib -o vim        -lncurses -liconv -framework Cocoa   -mmacosx-version-min=10.12 -fstack-protector-strong -L/usr/local/lib  -L/usr/local/Cellar/perl/5.24.0_1/lib/perl5/5.24.0/darwin-thread-multi-2level/CORE -lperl -lm -lutil -lc -F/usr/local/opt/python/Frameworks -framework Python   -lruby.2.4.0 -lobjc
</code></pre>

<p>Any help is greatly appreciated </p>
","<p>Basically when you paste using <kbd>cmd</kbd> + <kbd>V</kbd>, it is just <em>throwing</em> the content of the macOS clipboard at vim. It is just like typing each character that is in the clipboard literally into vim. That sometimes works, but often it doesn't. So the use is discouraged.</p>

<p>For this purpose there is the <code>""*</code> and <code>""+</code> registers which use the system clipboard and paste the content of that into a native vim register. These are <a href=""https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard"" rel=""nofollow noreferrer"">buggy</a> on macOS, but well they seem to work in your case.</p>

<p>Also see <code>help quotestart</code>, <code>help quoteplus</code> and <code>help clipboard</code></p>

<p>The other alternative is using <code>pbpaste</code> and <code>pbcopy</code> and use line filtering. When you <code>.!pbpaste</code>, the current line  is the input and the output (that's signaled by the dot) of the external following command (that's signaled by the exclamation mark) used.</p>

<p>So you can use <code>:.!pbpaste</code> to paste the content.</p>

<p>And you can use <code>:.!pbcopy</code> to copy a single line. But the line vanishes if you do this, because pbcopy has no output. However you can do this: <code>.!tee &gt;(pbcopy)</code></p>
","11208"
"What is the difference between ""mapped key sequences"" and ""key codes""? (timeoutlen v ttimeoutlen)","388","","<p>The <a href=""http://vimhelp.appspot.com/options.txt.html#%27ttimeoutlen%27"" rel=""noreferrer"">vim manual</a> says we can use <code>timeoutlen</code> to specify the timeout length of <em>mapped key sequences</em> and can use <code>ttimeoutlen</code> to specify the timeout length of <em>key codes</em>:</p>

<blockquote>
  <p>A useful setting would be </p>

<pre><code>:set timeout timeoutlen=3000 ttimeoutlen=100
</code></pre>
  
  <p>(time out on mapping after three seconds, time out on key codes after
  a tenth of a second).</p>
</blockquote>

<p>What are <em>key codes</em>? How are they different from <em>mapped key sequences</em>?</p>

<p>I know an example of a mapped key sequence is <code>jk</code> from the below mapping:</p>

<pre><code>inoremap jk &lt;esc&gt;
</code></pre>

<p>In this example, when I'm in insert mode and type <code>j</code>, vim will wait <code>timeoutlen</code> milliseconds for me to press <code>k</code> before deciding what my intent is.</p>

<p>But what is a <em>key code</em> and how does <code>ttimeoutlen</code> affect it? Thanks you. </p>
","<p>In short:</p>

<ul>
<li>keycodes is a way to represent a key</li>
<li>A mapped key sequence is a succession of keycodes triggering an action</li>
</ul>

<hr>

<p>Now I think that your question is more about the difference between <code>timeoutlen</code> and <code>ttimeoutlen</code> instead of the difference between a mapped key sequence and a key code.</p>

<p>My answer is based on <a href=""http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim"" rel=""noreferrer"">this wikia article</a> that you really should read because it addresses some points that I didn't mention here to keep the answer as short and clear as possible.</p>

<hr>

<p>First let's talk about key codes. The article defines two types of keycodes:</p>

<ul>
<li><p><strong>Terminal keycodes:</strong></p>

<p>They are how the terminal represents a key.</p>

<p>These codes that are sent by the terminal to Vim.</p>

<p>To get a list of these keycodes you should use your terminal documentation. You can also see them by typing the command <code>cat</code> in your terminal and typing the key you want to know the keycode. For example on my terminal the key code for <kbd>Shift</kbd><kbd>F1</kbd> looks like:</p>

<blockquote>
  <p><code>^[[23~</code></p>
</blockquote></li>
<li><p><strong>Vim keycodes:</strong></p>

<p>They are how vim represent a key.</p>

<p>Vim needs a consistent way to represent the keys because terminal's keycodes change from a terminal to another. A list of Vim keycodes is accessible at <a href=""http://vimhelp.appspot.com/term.txt.html#t_ku"" rel=""noreferrer""><code>:h t_ku</code></a>. The Vim keycode for <kbd>Shift</kbd><kbd>F1</kbd> looks like:</p>

<blockquote>
  <p><code>&lt;S-F1&gt;</code></p>
</blockquote></li>
</ul>

<p>Thus when I press <kbd>Shift</kbd><kbd>F1</kbd> on my keyboard, the drivers and OS will let the terminal know that I pressed these keys that it will interpret as <code>^[[23~</code>. The terminal will send that to Vim which will understand that it means <code>&lt;S-F1&gt;</code> and will trigger the action mapped to this key code.</p>

<p>We can set Vim keycodes, so if your terminal sends a keycode that Vim doesn't understand as <code>&lt;S-F1&gt;</code> for example you could use the following command. This will tell Vim when your receive the keycode <code>^[[24~</code>, translate it has <code>&lt;S-F1&gt;</code>:</p>

<pre><code>set &lt;S-F1&gt; ^[[24~
</code></pre>

<p><strong>So what is a mapped key sequence?</strong></p>

<p>A mapped key sequence will be a lhs of a mapping and can be Vim key codes or Terminal key codes. For example:</p>

<pre><code>:nmap ^[[24~ :bn&lt;CR&gt;
:nmap &lt;S-F1&gt; :bn&lt;CR&gt;
</code></pre>

<p>The first mapping will map the terminal keycode while the second maps the Vim keycode.</p>

<p><strong>Now for the difference between <code>timeoutlen</code> and <code>ttimeoutlen</code>?</strong></p>

<ul>
<li><p><code>ttimeoutlen</code> is the time Vim will wait for the different parts of a terminal key codes (in our previous example that would be <code>^[</code> then <code>[</code> then <code>2</code>, etc...</p>

<p>As these keycodes are sent by the terminal there should not be a delay between these input (since they are sent 'all at once' by the terminal). This is why the doc recommends a really small value for this setting.</p></li>
<li><p><code>timeoutlen</code> is the time Vim will wait for the successive Vim keycodes which are entered manually by a user and thus is longer to input than a terminal keycode.</p></li>
</ul>

<p>To use an example let's say that:</p>

<ul>
<li>You mapped <code>^[[1;6B</code> to an action</li>
<li><code>^[1;6B</code> is your terminal's keycode for <kbd>ctrl</kbd><kbd>shift</kbd><kbd>down</kbd></li>
<li><code>^[</code> is your terminal's keycode for <kbd>Escape</kbd>.</li>
</ul>

<p>The behavior that you should expect:</p>

<ul>
<li>If you set a large <code>ttimeoutlen</code>, each time you type on <kbd>Escape</kbd>, Vim will wait to see if you meant <code>^[</code> (i.e. <kbd>Escape</kbd>) or <code>^[1;6B</code> (i.e. <kbd>ctrl</kbd><kbd>shift</kbd><kbd>down</kbd>)</li>
<li>If you set a small <code>ttimeoutlen</code>, you will not have a delay when you'll type <kbd>Escape</kbd> because Vim will know that it is a complete keycode.</li>
</ul>

<p>And <code>timeoutlen</code> will act on a 'higher level', if you have the following mappings:</p>

<pre><code>inoremap jj &lt;Esc&gt;
inoremap jk &lt;Esc&gt;:nohl&lt;CR&gt;
</code></pre>

<p>When you type <kbd>j</kbd> vim will wait <code>timeoutlen</code> not because the beginning of the terminal keycode for <kbd>j</kbd> is not complete but because it is waiting for the next Vim keycode.</p>

<hr>

<p>I hope my explanation makes sense, note that some of the mappings I used don't make sense in a functional point of view but are here for the convenience the explanation.</p>
","10284"
"Difference between full and short command","387","","<p>Is there a practical difference between using</p>

<pre><code>:e
</code></pre>

<p>and</p>

<pre><code>:edit
</code></pre>

<p>Except for readability, where it make sense in a mapping to use <code>:edit</code>, because it's more explicit.</p>

<p>Is there a difference between them?</p>

<p><em>Note:</em> This apply as well to <strong>all</strong> other commands. </p>
","<p>There is no actual difference but in <a href=""http://vimdoc.sourceforge.net/htmldoc/usr_20.html#usr_20.txt""><code>:h usr_20.txt</code></a>, you can read:</p>

<blockquote>
  <p>It is recommended that in Vim scripts you write the full command name.  That
  makes it easier to read back when you make later changes.  Except for some
  often used commands like <code>:w</code> (<code>:write</code>) and <code>:r</code> (<code>:read</code>).</p>
  
  <p>A particularly confusing one is <code>:end</code>, which could stand for <code>:endif</code>,
  <code>:endwhile</code> or <code>:endfunction</code>.  Therefore, always use the full name.</p>
</blockquote>

<p>So I would recommend to follow the doc and use the long name.</p>

<p>And another paragraph interesting about the short names:</p>

<blockquote>
  <p>How short can a command get?  There are 26 letters, and many more commands.
  For example, <code>:set</code> also starts with <code>:s</code>, but <code>:s</code> doesn't start a <code>:set</code>
  command.  Instead <code>:set</code> can be abbreviated to <code>:se</code>.</p>
  
  <p>When the shorter form of a command could be used for two commands, it
  stands for only one of them.  There is no logic behind which one, you have to
  learn them.  In the help files the shortest form that works is mentioned.</p>
</blockquote>
","8470"
"How to match a word ending with uppercase letter and a specific letter?","387","","<p>I have words like <code>lblSERINOd</code> in sentences. Words are separated by white space.</p>

<p>I want to replace the <code>d</code> at the end of all such words with <code>u</code>. So for example <code>lblSERINOd</code> will look like <code>lblSERINOu</code>.</p>

<p>I have tried <code>s/.*\ud /u /g</code> but Vim says it cannot find <code>.*\ud</code>.</p>

<p>What is the problem here?</p>
","<p>One way to do it would be this:</p>

<pre><code>:%s/\u\zsd\&gt;/u/g
</code></pre>

<p>Initially I assumed that the new Vim regex engine (being advertised as ""faster, but limited"") can't understand <code>\u</code> in <code>:substitute</code>, but this isn't the case. I <em>rather</em> think now that the OP forgot to use <code>%</code> and simply searched on the wrong line; this would explain the error message, but of course still needs to be confirmed as ""the"" cause.</p>
","5821"
"Open help windows in new buffer instead of split windows","387","","<p>Some time ago I found an interesting trick on <a href=""https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup/blob/master/.vimrc#L875-887"" rel=""nofollow"">Damian Conway's vimrc</a> 
which allows to open help files in new tabs instead of split windows. 
The code is the following:</p>

<pre><code>""Only apply to .txt files...
augroup HelpInTabs
    autocmd!
    autocmd BufEnter  *.txt   call HelpInNewTab()
augroup END

""Only apply to help files...
function! HelpInNewTab ()
    if &amp;buftype == 'help' &amp;&amp; g:help_in_tabs
        ""Convert the help window to a tab...
        execute ""normal \&lt;C-W&gt;T""
    endif
endfunction
</code></pre>

<p>Of course this piece of code works well but I'd like to improve it: I feel that opening the 
help file into a new tab isn't that convenient and I rather open it into a new buffer and
give the focus on this buffer.</p>

<p>So I'm looking for a command which would replace this line:</p>

<pre><code>execute ""normal \&lt;C-W&gt;T""
</code></pre>

<p>and more precisely <code>&lt;C-W&gt;T</code> to turn the window into a new buffer instead of a new tab.</p>

<p>Unfortunately, I could find anything which could help me in the documentation. So is it possible?
And if it is, how can I do it?</p>
","<p>We can open help in the current window by <code>set buftype=help</code> and then using the <code>:help</code> command.</p>

<p>We have the following problems:</p>

<ul>
<li>restore the <code>'buftype'</code> value of the previous buffer, <code>#</code>, in the success case</li>
<li>restore the <code>'buftype'</code> value of the current buffer, <code>%</code>, in the error case</li>
<li>let the <code>:h</code> error message through correctly</li>
</ul>

<p>The <code>:h</code> command like so many of Vim's command will set <code>v:errmsg</code> when an error messages occurs. This means we can detect the error message. However this will give a ""stack trace"" when used inside of a function. We can overcome this by suppressing the error via <code>:silent!</code>. Now we can check <code>v:errmsg</code> and restore <code>'buftype'</code> correctly.</p>

<p>Since you still want to keep the error message we will use <code>:execute</code> in the <code>:command</code> definition and have the function return the failed help command.</p>

<p>Below is the resulting code (Put this in your <code>vimrc</code> file):</p>

<pre><code>function! s:help(subject)
  let buftype = &amp;buftype
  let &amp;buftype = 'help'
  let v:errmsg = ''
  let cmd = ""help "" . a:subject
  silent! execute  cmd
  if v:errmsg != ''
    let &amp;buftype = buftype
    return cmd
  else
    call setbufvar('#', '&amp;buftype', buftype)
  endif
endfunction
command! -nargs=? -bar -complete=help H execute &lt;SID&gt;help(&lt;q-args&gt;)
</code></pre>

<p>This creates the <code>:H</code> command which behave just like <code>:h</code> except open in the same window.</p>

<h3>Thoughts</h3>

<ul>
<li>You may want to look into something like <a href=""http://www.vim.org/scripts/script.php?script_id=746"" rel=""nofollow"">cmdallias.vim</a> to make this command easier to type</li>
<li>Maybe instead of all this trouble just promote the help window to its own tab via <code>&lt;c-w&gt;T</code> (my preference)</li>
<li>the technique will need to be adjusted to take into consideration if there is a different a window with <code>buftype=help</code> already open</li>
</ul>

<h3>More help</h3>

<pre><code>:h 'buftype'
:h :h
:h :silent
:h v:errmsg
:h :exe
</code></pre>
","3717"
"How to keep Vim from exiting Visual Mode due to mouse clicks while mouse=a?","386","","<p>Currently when I click somewhere in the terminal with <code>mouse=a</code> enabled, Vim exits visual mode. How can I force Vim to remain in Visual mode, and thereby use mouse <em>clicks</em> (not drags) to create a selection from the line/location where visual mode was entered?</p>

<hr>

<p><strong>Edit</strong>: I came up with a set of remaps that solves this perfectly (earlier I posted an overly complex macro here; you should use this instead). Just put these in your <code>.vimrc</code>:</p>

<pre><code>nnoremap &lt;silent&gt; v :let b:v_mode='v'&lt;CR&gt;mVv
nnoremap &lt;silent&gt; V :let b:v_mode='V'&lt;CR&gt;mVV
vnoremap &lt;expr&gt; &lt;LeftMouse&gt; '&lt;Esc&gt;&lt;LeftMouse&gt;mN`V'.b:v_mode.'`N'
</code></pre>
","<p>You could do this:</p>

<pre><code>:xnoremap &lt;LeftMouse&gt; m`&lt;LeftMouse&gt;v``
</code></pre>

<p>This allows you to <em>click</em> on where you want to extend the visual selection to, rather than drag. It works best if you also </p>

<pre><code>:set slm=
</code></pre>
","8810"
"Syntax highlightning with custom runtime path","383","","<p>A server only has old versions of vim available in the repo, so I compile and run vim from my ~.</p>

<p>Starting vim it complains</p>

<pre><code>line    2:
E484: Can't open file /usr/local/share/vim/syntax/syntax.vim
</code></pre>

<p>Where line 2 is where I have <code>syntax on</code>. This is obviously caused by the file not being present on the system.
Setting <code>let $VIMRUNTIME=""/home/[user]/vim74/runtime/""</code> makes the error go away, however I still get no syntax highlightning what so ever.</p>

<p>I've checked that <code>/home/[user]/vim74/runtime/""</code> has a syntax directory containing hundreds of [language].vim files.</p>

<p>I've tried commenting out the rest of my settings to make sure I have nothing else interfering.</p>

<p>What am I missing?</p>

<pre><code>$ vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Mar  6 2015 15:34:54)
</code></pre>
","<p>When you compile Vim source code and would like to install it on custom directory, this directory can be specified with <code>--prefix</code> option to the <code>./configure</code> command. Usually I will go as follows:</p>

<pre><code> ./configure --with-features=huge --prefix=$HOME/local
</code></pre>

<p>After this, proceed with <code>make</code> and then <code>make install</code>. This will install the Vim binaries under subdirectory <code>bin</code>, and also manual pages under subdirectory <code>share/man</code>. These path can then be added to your <code>PATH</code> and <code>MANPATH</code> respectively.</p>

<p>Alternatively, assuming Vim source code is extracted into <code>$HOME/vim74</code>, the <code>--prefix</code> and <code>make install</code> may be omitted, if you specify the following in your <code>.vimrc</code>. Please note that this is only based on experiment so it is not recommended -- something may break.</p>

<pre><code> let $VIM         = $HOME . ""/vim74""    
 let $VIMRUNTIME  = $HOME . ""/vim74/runtime""
 set runtimepath^=$VIMRUNTIME           
 set helpfile=$VIMRUNTIME/doc/help.txt  
 syntax on
</code></pre>
","3185"
"Enable completion for CSS using ctags","382","","<p>I have added CSS tags to my project <code>tags</code> file by adding this to <code>~/.ctags</code></p>

<pre><code>--langdef=css
--langmap=css:.css
--langmap=css:+.scss
--langmap=css:+.sass
--langmap=css:+.styl
--langmap=css:+.less
--regex-css=/^[ \t]*(([A-Za-z0-9_-]+[ \t\n,]+)+)\{/\1/t,tag,tags/
--regex-css=/^[ \t]*#([A-Za-z0-9_-]+)/#\1/i,id,ids/
--regex-css=/^[ \t]*\.([A-Za-z0-9_-]+)/.\1/c,class,classes/
</code></pre>

<p>then, after project tags file is updated, it now has entries like this:</p>

<pre><code>.bg-danger  public/CSS/framework/components/utilities.css   /^.bg-danger {$/;""  c
.bg-faded   public/CSS/framework/components/utilities.css   /^.bg-faded {$/;""   c
.bg-info    public/CSS/framework/components/utilities.css   /^.bg-info {$/;""    c
</code></pre>

<p>I would like completion to work when writing html in html or PHP files, e.g. if I am in <code>-- INSERT --</code> mode and have a partial like</p>

<pre><code>    &lt;div class=""bg-d
</code></pre>

<p>Im trying to get completion assistance with <kbd>Ctrl - x</kbd>, <kbd>Ctrl - ]</kbd> but vim simply returns</p>

<blockquote>
  <p>-- Tag completion (^]^N^P) Pattern not found</p>
</blockquote>

<p>Im not fussed whether completion is invoked via the <kbd>Ctrl - ]</kbd> command specifically (but I dont really want to install a plugin for this), I just want completion assistance for CSS classes (and ids) as I type.</p>

<p>Relevant info</p>

<ul>
<li>terminal vim - version 7.4.52</li>
<li>Plugins - ctrlp</li>
</ul>
","<p>The problem comes from the leading dot before class names.</p>

<p>Your search pattern leaves it out but you add it afterwards and, because tag search honors your <code>iskeyword</code> setting which doesn't contain <code>.</code>, Vim looks for <code>^foo</code> instead of <code>^.foo</code> in your tag files and, logically, doesn't find it. </p>

<p>You basically have two ways to fix that issue…</p>

<p><strong>In ctags</strong></p>

<p>Remove <code>.</code> from the second part of your pattern. This will index <code>.foo</code> as <code>foo</code> and allow Vim to find it when doing tag-based completion.</p>

<pre><code>--regex-css=/^[ \t]*\.([A-Za-z0-9_-]+)/.\1/c,class,classes/
</code></pre>

<p>becomes:</p>

<pre><code>--regex-css=/^[ \t]*\.([A-Za-z0-9_-]+)/\1/c,class,classes/
</code></pre>

<p><strong>In Vim</strong></p>

<p>Add <code>.</code> to the <code>iskeyword</code> option to allow Vim to search for <code>^.foo</code> instead of <code>^foo</code>:</p>

<pre><code>set iskeyword+=.
</code></pre>

<hr>

<p>Note that both methods probably have shortcomings so it may be a good idea to do some real world testing.</p>

<p>You might find my <a href=""https://gist.github.com/romainl/085b4db4a26a06ec7e16"" rel=""nofollow""><code>.ctags</code></a> interesting.</p>
","5208"
"Why aren't Vimballs commonly used?","382","","<p>I have seen that a lot of Vim Plug-ins don't seem to have <a href=""http://vimdoc.sourceforge.net/htmldoc/pi_vimball.html"" rel=""nofollow noreferrer"">Vimballs</a>.</p>

<p>Vimballs were/are basically a tarball for a plugin that vim knows how to install.
They were/are thus slightly more convenient that using <code>tar -xvf</code> 
because you didn't/don't  have to have to worry that the tarball had the directory structure nested in different ways
ie if it started at .vim, or within the .vim directory structure, or if there was a parent folder in the tarball with the same name as the plugin etc.</p>

<p>I have been seeing less and less of them and none in plugins that I've seen on Github.</p>

<ul>
<li>Is there an active attempt to deprecate them?

<ul>
<li>If so why?</li>
</ul></li>
<li>Is this because we now have Vundle, Pathogen, etc?</li>
</ul>
","<p>The primary reason is precisely your second point, since there has been an active movement on a community level to use source control for managing plugins with the aid of plugin managers like pathogen, vundle, neobundle etc, it's become more of an easier approach to upgrading the plugins. You can also more easily control which release you would like to lock your plugin on. Also another important aspect of using this approach is that you get to isolate each plugin and keep them in their separate folders which makes dealing with them a lot more easy whether you want to upgrade them individually or remove them altogether.</p>

<p>Vimball approach makes doing this very hard, and hence has been seeing less adoption in the past. I don't think there was ever an explicit attempt to deprecate it, it's just more of a trend towards other better ways of managing plugins.</p>
","493"
"How to make vim to uncompress archive formats?","381","","<p>In <a href=""https://vi.stackexchange.com/a/3209/467"">here</a> it's suggested that vim can do automatic uncompression of gzip/zip files (including other formats) and it's something built-in.</p>

<p>How do I open compressed file then?</p>

<p>Sample scenario:</p>

<pre><code>curl https://html1-f.scribdassets.com/3ltyujem84drr4o/pages/4-e661572124.jsonp | vim -
</code></pre>
","<p>Starting it 2005 vim added support for editing zip files natively. The build in support uses native zip utilities (zip, gzip, jar, xpi, etc) to manipulate these files. It does not look as if there is a direct way to interact with a compressed stream of data unless you use external tools.</p>

<pre><code>vim &lt;zipfile&gt;
</code></pre>

<p>should open a buffer listing all files in the zip file. Move the cursor over and press <kbd>Enter</kbd> and the file is opened in a buffer. Currently there is no support to add new files to a zip.</p>

<p>For more information see <code>:h zip</code> </p>
","3216"
"How to replace two-line match with its first backreference pattern?","380","","<p>Given the following example:</p>

<pre><code>aa
aa
bb
bb
cc
dd
</code></pre>

<p>I'm trying to replace two-line match (<code>bb\nbb</code>) with its first matching line (<code>bb</code>).</p>

<p>What works:</p>

<ul>
<li>these two-lines can be matched by: <code>/bb\_.\{-}bb</code> (as per: <a href=""http://vim.wikia.com/wiki/Search_across_multiple_lines"" rel=""nofollow"">Search across multiple lines</a>),</li>
<li>I can replace two-line match with hardcoded one-line string: <code>%s/bb\_.\{-}bb/foo/g</code>.</li>
</ul>

<p>What doesn't work:</p>

<ul>
<li><p>I can't use first backreference (<code>\1</code>) instead of hardcoded string, so when using:</p>

<pre><code>%s/bb\ze\_.\{-}bb/\1/g
</code></pre>

<p>as result of just adding <code>\ze</code> and <code>\1</code> to the previous example, I expect that this two-line pattern would be replaced by its backreference value (so <code>bb\nbb</code> becomes <code>bb</code>), but instead it removes the 1st line and not touching the 2nd. (so <code>bb\nbb</code> becomes: <code>\nbb</code>).</p></li>
</ul>

<p>Any idea why the following attempt doesn't work? I don't want to join and remove the second line, I'd like to understand what's the problem and what's the correct way of doing it.</p>
","<blockquote>
  <p>I can't use first backreference (<code>\1</code>) instead of hardcoded string</p>
</blockquote>

<p>Well, you haven't captured anything in the search so <code>\1</code> has no value in the replacement.</p>

<p>You can use a matched text later in the pattern, as a back-reference, as well as in the replacement.</p>

<pre><code>:%s/^\(.*\)\n\1/\1/
</code></pre>

<p>This allows you to find a line (<code>\(.*\)</code>) which has a duplicate line immediately following it (<code>\n\1</code>) and remove that duplicate by replacing the search with just the grouped match.</p>

<p>However, this can be simplified by simply starting the match after the initial line and removing all the matched content:</p>

<pre><code>:%s/\(.*\)\zs\n\1//
</code></pre>
","4289"
"How can I change the highlighting of python class name?","379","","<p>How can I define a syntax to highlight the python class name <code>MyClass</code> in vim? </p>

<pre><code>class MyClass(object):
    ......
</code></pre>

<p>Vim has already highlighted the class name. However, it seemingly highlights it with the function name in a same way. Can I have a better way to highlight the two categories?</p>

<p>Is it a right way via <code>syn match ...</code>? In the default <code>syntax/python.vim</code>, I found this:</p>

<pre><code>syn match   pythonFunction  ""\h\w*"" display contained
</code></pre>

<p>I have tried, but my <code>syn</code> definition must be wrong, it does not work.</p>

<pre><code>syn match pythonClassName ""^class \(*\):"" display contained
call HI('pythonClassName',         124, '', 'bold', 'bold')
</code></pre>

<p><code>HI()</code> is a self-defined function, I have used it to modify <code>pythonStatement</code> successfully.</p>

<p>As a matter of fact, I do not know what it really does. It's just a try. Could someone give me some tips? Thanks!</p>
","<blockquote>
  <p>However, it seemingly highlights it with the function name in a same way.</p>
</blockquote>

<p>With <code>:echo synIDattr(synID(line('.'), col('.'), 1), 'name')</code> we can get the
name of the syntax group, which is indeed <code>pythonFunction</code>.</p>

<p>Looking at <code>/usr/share/vim/vim80/syntax/python.vim</code> we can see this is
highlighted with:</p>

<pre><code>syn keyword pythonStatement     class def nextgroup=pythonFunction skipwhite
syn match   pythonFunction  ""\h\w*"" display contained
hi def link pythonFunction      Function
</code></pre>

<p>There is no facility to highlight classes separately. If you want to add this,
you can use something like:</p>

<pre><code>"" Clear default
syn clear pythonStatement

"" Set it to what's in the Python file, minus the class.
syn keyword pythonStatement    False None True
syn keyword pythonStatement    as assert break continue del exec global
syn keyword pythonStatement    lambda nonlocal pass print return with yield
syn keyword pythonStatement    def nextgroup=pythonFunction skipwhite

"" Now make seperate syntax groups for the class.
syn keyword pythonClassStmt class nextgroup=pythonClass skipwhite
syn match   pythonClass ""\h\w*"" display contained

"" Avoid highlighting attributes as builtins – just added ""pythonClass"" here.
syn clear pythonAttribute
syn match   pythonAttribute /\.\h\w*/hs=s+1
    \ contains=ALLBUT,pythonBuiltin,pythonFunction,pythonClass,pythonAsync
    \ transparent

"" Highlight the class statement and the class name.
hi def link pythonClassStmt Statement
hi pythonClass ctermfg=darkgreen guifg=darkgreen
</code></pre>

<p>I used darkgreen because this is what Ruby uses, but feel free to use any colour
you like. You could highlight the <code>class</code> keyword any way you'd like.</p>

<p>To make this loads <em>after</em> the built-in Python syntax file add this to
<code>~/.vim/after/syntax/python.vim</code>.</p>

<p>Also see: <a href=""https://vi.stackexchange.com/a/8773/51"">Fixing “missing” syntax highlighting for python</a>
for a general primer on syntax highlighting and some more details.</p>
","10641"
"How to resume previous multiple cursors?","379","","<p>I'm using <a href=""https://github.com/terryma/vim-multiple-cursors"" rel=""noreferrer"">multiple cursors</a> plugin. </p>

<p>I'm trying to do the same thing as the second example in their github page.
Just trying to add double quote around each of the weekday:</p>

<pre><code>mon
tue
wed
thu
fri
sat
sun
</code></pre>

<p>I can add one double quote at the beginning of each line by creating a visual block with c-v and press ""ctrl-n"" to enter multiple cursors. But when I press <code>&lt;esc&gt;</code> to escape insertion mode, I lost all the cursors. Then I have to do all over again just to resume the multiple cursors and append a double quote on each line. </p>

<p>Is there some easy way to do that? Am I doing it stupidly? Why in the example, the screenshot shows the cursors are not lost?</p>
","<p>Try adding the following to your <code>.vimrc</code>:</p>

<pre><code>let g:multi_cursor_exit_from_insert_mode = 0
</code></pre>

<p>From <code>:help multiple-cursors-global-options</code>:</p>

<blockquote>
  <p><em>g:multi_cursor_exit_from_insert_mode</em> (Default: 1)</p>
  
  <p>If set to 0, then pressing |g:multi_cursor_quit_key| in Insert mode will not quit and delete all existing cursors. This is useful if you want to press Escape and go back to Normal mode, and still be able to operate on all the
  cursors.</p>
</blockquote>
","2813"
"Unicode characters available in shell but not within Vim","379","","<p>I'm using Vim on a machine through SSH with PuTTY.</p>

<p>In my shell (bash), I can copy/paste unicode characters, like <code>‘ ¿ ’</code> using <kbd>Shift</kbd> + <kbd>Insert</kbd> and it works as expected. In Vim, within the same shell session, however, I get this instead.</p>

<pre><code>▒~@~X¿▒~@~Y
</code></pre>

<p>Pulling up <code>:digraphs</code> shows that this is happening with all unicode characters.</p>

<p>I have this in my vimrc:</p>

<pre><code>set encoding=utf-8
set fileencoding=utf-8
</code></pre>

<p>And here is the output from the <code>locale</code> command:</p>

<pre><code>LANG=en_US.UTF-8
LC_CTYPE=""en_US.UTF-8""
LC_NUMERIC=""en_US.UTF-8""
LC_TIME=""en_US.UTF-8""
LC_COLLATE=""en_US.UTF-8""
LC_MONETARY=""en_US.UTF-8""
LC_MESSAGES=""en_US.UTF-8""
LC_ALL=en_US.UTF-8
</code></pre>

<p>Why can I not use special characters within Vim when they work fine on the command line?</p>

<p><strong>Edit:</strong> The remote character set in PuTTY is set to UTF-8.</p>

<p><strong>Edit 2:</strong> Output from <code>vim --version</code></p>

<pre><code>VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Feb 22 2009 06:30:54)
Compiled by steve@v480
Normal version with GTK GUI.  Features included (+) or not (-):
-arabic +autocmd +balloon_eval +browse +builtin_terms +byte_offset +cindent
+clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con_gui +diff +digraphs +dnd -ebcdic
-emacs_tags +eval +ex_extra +extra_search -farsi +file_in_path +find_in_path
+float +folding -footer +fork() -gettext -hangul_input -iconv +insert_expand
+jumplist -keymap -langmap +libcall +linebreak +lispindent +listcmds +localmap
+menu +mksession +modify_fname +mouse +mouseshape -mouse_dec -mouse_gpm
-mouse_jsbterm -mouse_netterm -mouse_sysmouse +mouse_xterm -multi_byte
+multi_lang -mzscheme +netbeans_intg -osfiletype +path_extra -perl +postscript
+printer -profile -python +quickfix +reltime -rightleft -ruby +scrollbind
+signs +smartindent -sniff +statusline -sun_workshop +syntax +tag_binary
+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
 +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
+vreplace +wildignore +wildmenu +windows +writebackup +X11 -xfontset +xim
+xsmp_interact +xterm_clipboard -xterm_save
   system vimrc file: ""$VIM/vimrc""
     user vimrc file: ""$HOME/.vimrc""
      user exrc file: ""$HOME/.exrc""
  system gvimrc file: ""$VIM/gvimrc""
    user gvimrc file: ""$HOME/.gvimrc""
    system menu file: ""$VIMRUNTIME/menu.vim""
  fall-back for $VIM: ""/usr/local/share/vim""
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -I/usr/local/include/gtk-1.2 -I/usr/local/include/glib-1.2 -I/usr/local/lib/glib/include -I/usr/X11R6/include -I/usr/openwin/include -I/usr/local/include -I/usr/local/ssl/include -I/usr/local/pgsql/include -I/usr/local/include/ncurses -I/usr/local/BerkeleyDB.4.2/include -I/usr/openwin/include -I/usr/local/rrdtool-1.2.19/include  -O2 -L/usr/local/pgsql/lib -R/usr/local/pgsql/lib -L/usr/local/lib -R/usr/local/lib -L/usr/local/ssl/lib -R/usr/local/ssl/lib -L/usr/openwin/lib -R/usr/openwin/lib -I/usr/local/rrdtool-1.2.19/include  -I/usr/X11R6/include -I/usr/openwin/include
Linking: gcc  -L/usr/X11R6/lib -R/usr/X11R6/lib -L/usr/openwin/lib -R/usr/openwin/lib   -L/usr/local/lib -R/usr/local/lib -R/usr/lib -L/usr/local/pgsql/lib -R/usr/local/pgsql/lib -L/usr/lib -R/usr/openwin/lib -L/usr/openwin/lib -L/usr/local/ssl/lib -R/usr/local/ssl/lib -L/usr/local/BerkeleyDB.4.2/lib -R/usr/local/BerkeleyDB.4.2/lib -L/usr/X11R6/lib -R/usr/X11R6/lib -o vim   -L/usr/local/lib -L/usr/X11R6/lib -R/usr/X11R6/lib -L/usr/openwin/lib -R/usr/openwin/lib -lgtk -lgdk -lgmodule -lglib -lintl -lXext -lXt -lX11 -lSM -lICE -lm -lncurses -lnsl -lsocket
</code></pre>
","<p>I tried this on my linux box via putty and via cygwin, both seemed to work as expected for me. I'm wondering if perhaps your putty is actually not configured for UTF-8; I know for example ncurses apps with line drawing characters are affected by the putty translation setting. Try right-clicking on your putty title bar, go to ""Change Settings..."", then under Category navigate to ""Window->Translation"", then change the Remote character set to UTF-8. When I change this to Win 1252, I get behavior a little bit like what you're seeing.</p>

<p>For completeness, here are all my translation settings:</p>

<pre><code>Remote character set: UTF-8
Treat CJK ambiguous characters as wide: unchecked
Caps Lock acts as Cyrillic switch: unchecked
Handling of line drawing characters: Use Unicode line drawing code points
Copy and paste line drawing characters as lqqqk: unchecked
</code></pre>

<p>With those settings, I'm able to paste the character you mentioned in vim successfully. If that works for you, obviously you can save those settings with your putty session.</p>

<hr>

<p>It appears that the problem is lack of multi-byte support. If you need to recompile without root access, it's possible but tricky. I did it on my Linux Mint system to test:</p>

<ol>
<li><p>Get the old vim from git:</p>

<pre><code>wget https://github.com/vim/vim/archive/v7.2.000.tar.gz
tar xvzf v7.2.000.tar.gz
</code></pre></li>
<li><p>Edit the Makefile (<code>vim vim-7.2.000/src/Makefile</code>)</p></li>
<li>Find <code>prefix=$(HOME)</code> and uncomment it so that the installer installs to your home directory</li>
<li>Find and uncomment <code>CONF_OPT_MULTIBYTE = --enable-multibyte</code></li>
<li><p>To install it to <code>~/bin/vim</code>, run:</p>

<pre><code>make
make install
</code></pre></li>
<li><p>Run from your home bin directory</p></li>
</ol>

<p>This almost certainly will not work the first time; if you go this route, you'll have to get all the build dependencies built yourself ahead of time by getting each dep's source code. I recommend you try with the version of vim that's already on the system so that at least your runtime dependencies are already there.</p>
","7307"
"How can I specify a command-line command with options as an equalprg?","378","","<p>I am trying to set up the Node.js version of <a href=""https://github.com/beautify-web/js-beautify"" rel=""nofollow"">js-beautify</a> as an <code>equalprg</code> command when I am editing a JavaScript file, so that the Vim <code>=</code> indent commands reflow my JavaScript at the same time.</p>

<p>Initially, I tried this:</p>

<pre><code>autocmd FileType javascript setlocal equalprg=js-beautify -f -
</code></pre>

<p>(the <code>-f -</code> is necessary because js-beautify otherwise doesn't read from stdin).</p>

<p>However, that fails with an error like this when I open a JavaScript file:</p>

<pre><code>Error detected while processing FileType Auto commands for ""javascript"":
E518: Unknown option: -f
</code></pre>

<p>So then I tried adding surrounding quotes:</p>

<pre><code>autocmd FileType javascript setlocal equalprg=""js-beautify -f -""
</code></pre>

<p>That seems to work (JavaScript files open without error), but then <kbd>1</kbd><kbd>G</kbd><kbd>=</kbd><kbd>G</kbd> (or any other <kbd>=</kbd> command) seems to work in exactly the same way as the standard vim behaviour, and it appears it's not set up correctly - if I type <code>:set equalprg</code>, I see:</p>

<pre><code>equalprg=
</code></pre>

<p>If I remove the <code>-f -</code>, the <code>equalprg</code> is set, but it doesn't work, because js-beautify tries to read from a file:</p>

<pre><code>Must define at least one file.
Run `js-beautify -h` for help.
</code></pre>

<p>How can pass these command-line options into js-beautify as part of setting equalprg?</p>

<p>Note I am aware that I could use the js-beautify vim plugin, but I'm trying not to overwhelm my vim setup with plugins, and instead setup the standard vim <code>=</code> keymapping.</p>
","<p>Close, but you have to use single quotes instead of double quotes, because Vim interprets <code>""</code> as a comment in this context:</p>

<pre><code>autocmd FileType javascript setlocal equalprg='js-beautify -f -'
</code></pre>

<p>Or just escape the spaces:</p>

<pre><code>autocmd FileType javascript setlocal equalprg=js-beautify\ -f\ -
</code></pre>
","617"
"Neovim Python script hangs","378","","<p>I'm thinking of migrating from Vim to NeoVim. I decided to begin with a bit of Python code in my <code>.vimrc</code> that sets the backup directory.</p>

<p>Using the <a href=""https://neovim.io/doc/user/if_pyth.html#Python"" rel=""nofollow"">documentation</a>, I wrote the following script:</p>

<pre><code>""------------------------------------------------------------
"" Set swap file directory with Python
python &lt;&lt; endpython
import neovim, os.path
from os import getcwd, environ
from hashlib import md5
cwd = getcwd()
m = md5()
m.update(cwd)
swd = m.hexdigest()
full_swd = os.path.join(environ['HOME'], '.config', 'nvim', '.swap', swd)
if not os.path.exists(full_swd):
    os.makedirs(full_swd)
nvim = neovim.attach('socket', path=environ['NVIM_LISTEN_ADDRESS'])
nvim.command('set backupdir=' + full_swd)
nvim.command('set directory=' + full_swd)
endpython

""------------------------------------------------------------
</code></pre>

<p>The problem I encountered is that this script hangs, even though I'm capable of repeating it via the command line. I tried to insert <code>print</code> statements in various places of the script, and it looks like this is the blocking line:</p>

<pre><code>nvim.command('set backupdir=' + full_swd)
</code></pre>

<p>What am I doing wrong? Thank you very much.</p>
","<p>Don't use the neovim interface for this, its designed to be used asynchronously and you are using it synchronously. (You are deadlocking neovim which is waiting for the nvim socket to respond but it will never respond because it is already in a blocking python call). You should probably use the old vim interface if you need to do stuff synchronously. (AFAIK it still works and isn't being removed)</p>

<pre><code>python &lt;&lt; endpython
import vim
import os
from hashlib import md5
cwd = os.getcwd()
m = md5()
m.update(cwd)
swd = m.hexdigest()
full_swd = os.path.join(os.environ['HOME'], '.config', 'nvim', '.swap', swd)
if not os.path.exists(full_swd):
    os.makedirs(full_swd)

# This should be preferred to manually constructing the string.
vim.options['backupdir'] = full_swd 
vim.options['directory'] = full_swd
endpython
</code></pre>
","5975"
"Searching with vimscript function","378","","<p>I want to create a custom search in vimscript, using this line for searching:</p>

<pre><code>:execute ""normal gg/[A-Z]\\+*.:\&lt;cr&gt;""
</code></pre>

<p>it will tell me (correctly) that it searched for the pattern:</p>

<pre><code>/[A-Z]\+3a.*:
</code></pre>

<p>but it will not highlight/search for anything. Pressing 'n' will continue the last search from before. Executing the exact same command directly in vim has the desired effect.</p>

<p>Can somebody explain to me why this doesn't work and how to do it correctly?</p>
","<p>The reason why this is not working is stated in <code>:h function-search-undo</code>. I worked around this by letting my function return the line and mapping it like this:</p>

<pre><code>map &lt;KEY&gt; :execute function()&lt;CR&gt;
</code></pre>

<p>Credits to VanLaser.</p>
","10088"
"What is wrong with this mapping expression in my .vimrc?","378","","<p>I'm trying to make Vim play nice with wrapped lines and I'm running into some problems. The following line</p>

<pre><code>xnoremap &lt;expr&gt; k ((v:count == 0) || (mode() !=# ""V"") ? 'gk' : 'k')
</code></pre>

<p>gives me the following error when launching Vim</p>

<pre><code>Error detected while processing /cygdrive/c/Users/Chad/.vimrc:
line   76:
E749: empty buffer
</code></pre>

<p>If I remove either of the conditions the map will work fine but I'd like to combine them. Any ideas? Thanks in advance.</p>
","<p>See <code>:h map_bar</code>. The <code>|</code> is used also as a command separator in vim, so you are executing a map command:</p>

<pre><code>xnoremap &lt;expr&gt; k ((v:count == 0) 
</code></pre>

<p>Then an empty command line, and after that a command:</p>

<pre><code>(mode() !=# ""V"") ? 'gk' : 'k')
</code></pre>

<p>To use the <code>|</code> character in mappings, the two best options in my opinion are <code>&lt;Bar&gt;</code> or <code>\|</code>. Your mapping can be written as</p>

<pre><code>xnoremap &lt;expr&gt; k ((v:count == 0) &lt;Bar&gt;&lt;Bar&gt; (mode() !=# ""V"") ? 'gk' : 'k')
</code></pre>

<p>for example.</p>
","2892"
"How do I create buttons on the toolbar to increase and decrease font size?","377","","<p>Many systems offer + and - zoom buttons. Can someone please demonstrate how such two buttons can be emulated with <code>gvim</code>? </p>

<p>This means that clicking the + button would increase the font size by one step.
The - button does just the opposite.</p>
","<p>I think something along the following lines should work:</p>

<pre><code>amenu ToolBar.Builtin#31   :let &amp;guifont=substitute(&amp;guifont, '\(\d\+\)', '\=submatch(1)+1', '')&lt;cr&gt;
amenu ToolBar.Builtin#32   :let &amp;guifont=substitute(&amp;guifont, '\(\d\+\)', '\=submatch(1)-1', '')&lt;cr&gt;
</code></pre>

<p>Now, to include nice icons, you simply need to add the icon argument.</p>
","6524"
"How to search for pattern in certain syntax regions?","377","","<p>I am using vim to edit latex documents. Often, I will want to change the name of a variable to something else. However, it's a little annoying to have to wade through irrelevant matches when I search for the variable name. I would like to search only in ""math zones"" as defined in the tex syntax file. Is there an easy way to limit a search to a specific syntax region?</p>
","<p>Here is a function that you could try. I've only tested it a little bit but it seems to work ok.</p>

<pre><code>function! JJSyntaxSearch(pattern, syntaxitem)
  while search(a:pattern, 'W') &gt; 0
    for id in synstack(line("".""),col("".""))
      if synIDattr(id,""name"") =~? a:syntaxitem
        return line(""."")
      endif
    endfor
  endwhile
  return 0
endfunc

command! -nargs=* JJSyntaxSearch call JJSyntaxSearch(&lt;f-args&gt;)
</code></pre>

<p>The function calls Vim's search function in a loop until it finds an 'ordinary' match that is also a 'qualified' match to a particular syntax item, or until it reaches the end of the buffer.</p>

<p>It takes two arguments. The first is the search pattern and it is passed on unchanged to Vim's <code>search()</code> function. See <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#search()"" rel=""nofollow""><code>:help search()</code></a> for how that function works. The second argument is the name of the syntax item on which you want to filter these matches. This can also be a pattern and is compared as a case-insensitive regular expression.</p>

<p>To find the pattern 'alpha' in math zones you can do</p>

<pre><code>:JJSyntaxSearch alpha texMathZone.
</code></pre>

<p>The <code>.</code> at the end is the pattern atom for any single character, see <a href=""http://vimdoc.sourceforge.net/htmldoc/pattern.html#/."" rel=""nofollow""><code>:help /.</code></a>. This is because there many math zone syntax items called <code>texMathZoneA</code>, <code>texMathZoneB</code> etc.</p>

<p>The <code>search()</code> function moves the cursor to the next 'ordinary' match. Then our function gets all the syntax item IDs for that new cursor position with <code>synstack()</code>. Looping through them, it retrieves the name of each item in turn and tests it against the <code>syntaxitem</code> argument. See <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#synstack()"" rel=""nofollow""><code>:help synstack()</code></a> and <a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#synIDattr()"" rel=""nofollow""><code>:help synIDattr()</code></a>. If there is a 'qualified' match it returns the line number. If it reaches the end of the buffer without finding any 'qualified' match it returns <code>0</code>. The point of the function is to get the cursor to the next 'qualified' match so you can do some operation there, but it is useful to return ""line number or 0"" to indicate whether it is meaningful to call the function again, for instance if you want to call the function repeatedly from another function or a macro.</p>

<p>I chose to use the <code>W</code> flag for the <code>search()</code> because it prevents 'wrapping around' the end of the buffer. Otherwise the function might get stuck as it keeps finding the same 'ordinary' matches but no 'qualified' matches.</p>
","4265"
"Relative number on old vim versions","377","","<p>How can I get the relative number feature on old vim versions (7.2 to be exact in my scenario) ?</p>

<p>I cannot install a newer version because other people are also using vim on the same server.</p>
","<p>Relative numbers were officially added to Vim with the 7.3 release.</p>

<p>If you can't update Vim or can't compile your own you will need to install a plugin like <a href=""http://www.vim.org/scripts/script.php?script_id=2351"">DrChip's RltvNmbr</a>. Maybe there are others. Note that it requires the <code>+signs</code> feature which you may or may not have.</p>
","3381"
"Vim conceal indentation. Replace indentation spaces with utf-8 chars","377","","<p>I use four spaces for indent. I would like to replace the indentation with some UTF-8 chars.</p>

<p>What I have:</p>

<p>1.</p>

<pre><code>def foo(bar):
    for jaffa in bar:
        print jaffa
</code></pre>

<p>2.</p>

<pre><code>var foo = function(bar){
    bar.forEach(function(jaffa){
        console.log(jaffa);
    });
}
</code></pre>

<p>What I want:</p>

<p>1.</p>

<pre><code>def foo(bar):
►for jaffa in bar:
►►print jaffa
</code></pre>

<p>2.</p>

<pre><code>var foo = function(bar){
►bar.forEach(function(jaffa){
►►console.log(jaffa);
►});
}
</code></pre>

<p>I tried using conceal myself, but I couldn't come up with a pattern to match the indentation spaces.</p>

<p>How would I accomplish changing the indentation to UTF-8 chars using vim conceal as described in the examples?</p>

<p>@Muru gave the answer for this question. But what if I want to conceal the last 'block' of the indentation spaces differently than the ones before it? Example:</p>

<pre><code>var foo = function(bar){
►bar.forEach(function(jaffa){
◼►console.log(jaffa);
►});
}
</code></pre>
","<p>With the following:</p>

<pre><code>set conceallevel=2
syn match IndentWS '\v(^( {4}|\t)*)@&lt;=( {4}|\t)' conceal cchar=▶
</code></pre>

<p>I get:</p>

<p><a href=""https://i.stack.imgur.com/NfljX.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/NfljX.png"" alt=""enter image description here""></a></p>

<p>The regex <code>\v(^( {4}|\t)*)@&lt;=( {4}|\t)</code>:</p>

<ul>
<li>uses <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%0B"" rel=""noreferrer"">very magic</a> <code>\v</code></li>
<li>matches a sets of 4 spaces (<code> {4}</code>) or a tab <code>\t</code>, at the beginning of the line, <a href=""http://vimhelp.appspot.com/pattern.txt.html#%2F%5C%40%3C%3D"" rel=""noreferrer"">with zero width <code>\@&lt;=</code></a></li>
<li>and then a set of 4 spaces or a tab.</li>
</ul>

<p>Of course, if you use only tabs or spaces, you can simplify the regex accordingly.</p>

<p>For the update, with:</p>

<pre><code>set conceallevel=2
syn match IndentWS '\v^( {4}|\t)+\S@=' contains=IndentEndWS,IndentStartWS
syn match IndentStartWS '\v( {4}|\t)' conceal cchar== 
syn match IndentEndWS '\v( {4}|\t)\S@=' conceal cchar=▶
</code></pre>

<p>I get:</p>

<p><a href=""https://i.stack.imgur.com/6HjiK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6HjiK.png"" alt=""enter image description here""></a></p>

<p>Making ends highlight differently would need a region, or contained matches. In this case I used two contained matches, one for general  indentation whitespace, and one for indentation just before a non-whitespace character (<code>\S</code>).</p>
","8561"
"How to add a uid to html nodes?","376","","<p>I have a giant html file which is a mess (not my fault). I want to add to some nodes (about 400) a unique id. They all have are of the same class, so I can add the id like this</p>

<pre><code>:% s/class=""some-class""/&amp; id=&lt;some id&gt;/
</code></pre>

<p>My problem is generating the id - its has to be unique for each match.</p>

<p>Any ideas?</p>
","<p>Could you use the expression replacement (<code>:help sub-replace-expression</code>) and a simple counter function? Something like</p>

<pre><code>function! MyCount()
    if exists('w:count')
        let w:count = w:counter + 1
    else 
        let w:count = 1
    endif
    return w:count
endfunc

:%s/class=""some-class""/\=submatch(0) . ' ""id""=""' . MyCount() . '""'/
:unlet w:counter
</code></pre>

<p>Assuming the id attribute and value should both be enclosed in quotes.</p>

<p><code>submatch()</code> is similar to <code>\0</code> in the replacement, but plays well with in an expression replacement (see <code>:help submatch()</code>).</p>
","4832"
"How to create syntax folding for pascal","375","","<p>I mostly want it to automatically create folds for between a <code>begin</code> and an <code>end</code>, although if there's anything more advanced that would be welcome too.</p>

<p>I've looked in the help for the pascal syntax and it doesn't support syntax folding.</p>
","<p>The following seems to patch syntax folding onto the Pascal syntax that ships with Vim. Put this into <code>~/.vim/after/syntax/pascal.vim</code>:</p>

<pre><code>syn clear pascalLabel pascalStatement pascalStruct

syn keyword pascalLabel     goto label
syn keyword pascalStatement procedure function
syn keyword pascalStatement program const var type
if !exists(""pascal_traditional"")
  syn keyword pascalStatement   constructor destructor implementation inherited
  syn keyword pascalStatement   unit uses
  syntax region pascalInterface matchgroup=pascalStatement start=""\&lt;interface\&gt;"" end=""\&lt;end\&gt;"" transparent fold
  syntax region pascalObject matchgroup=pascalStruct start=""\&lt;object\&gt;"" end=""\&lt;end\&gt;"" transparent fold
endif
syn keyword pascalRecordCaseLabel case contained containedin=pascalRecord

syntax region pascalBlock matchgroup=pascalStatement start=""\&lt;begin\&gt;"" end=""\&lt;end\&gt;"" transparent fold
syntax region pascalCase matchgroup=pascalLabel start=""\&lt;case\&gt;"" end=""\&lt;end\&gt;"" transparent fold
syntax region pascalRecord matchgroup=pascalStruct start=""\&lt;record\&gt;"" end=""\&lt;end\&gt;"" transparent fold contains=TOP,pascalCase

highlight def link pascalRecordCaseLabel pascalLabel

setlocal foldmethod=syntax
</code></pre>

<p>I had to <code>:syn-clear</code> some existing definitions. It would be better if the author of the syntax plugin included this into the main script. Also note that I'm not too familiar with Pascal syntax, and hacked this together quickly. No warranties :-)</p>
","2253"
"truncate sentence: delete up to, but not including period","375","","<p>How can I set up a keybinding to delete up to the end of a sentence that ends with a period, but keep the period? </p>

<p>The commands <code>df.</code>, <code>d)</code>, and <code>D</code> all truncate the sentence but don't keep the period. Manually, I can type <code>d/\.&lt;ENTER&gt;:noh&lt;ENTER&gt;</code>.</p>

<p>For example: I have this sentence and the cursor is at the position marked by the caret:</p>

<pre><code>Scholar X's monograph is a groundbreaking study but I don't like it.
                                               ^
</code></pre>

<p>I want to type one command (say, <code>Ds</code>) and get this:</p>

<pre><code>Scholar X's monograph is a groundbreaking study.
</code></pre>
","<p>With no extra configuration involved, I would just use:</p>

<pre><code>c).&lt;Esc&gt;
</code></pre>

<p>Bonus: It's repeatable with the dot command.</p>

<p>Also bonus: It works on <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/vi.html"" rel=""nofollow noreferrer"">any POSIX <code>vi</code></a> and is not Vim-specific.</p>

<p>And actually, I would use <code>&lt;C-[&gt;</code> (or ""Ctrl+["" if you speak Windows) rather than actually pressing the ""Escape"" key.</p>
","11160"
"What does asterisk mean in vim mappings?","375","","<p>For example, easy clip has this mapping when you run <code>smap k</code>:</p>

<pre><code>s  k     * &lt;C-o&gt;""_ck
</code></pre>

<p>The asterisk and <code>&lt;C-o&gt;</code> are highlighted.</p>
","<p>From <a href=""http://vimhelp.appspot.com/map.txt.html#map-listing""><code>:h map-listing</code></a>:</p>

<pre><code>When listing mappings the characters in the first two columns are:

      CHAR      MODE    
     &lt;Space&gt;    Normal, Visual, Select and Operator-pending
        n       Normal
        v       Visual and Select
        s       Select
        x       Visual
        o       Operator-pending
        !       Insert and Command-line
        i       Insert
        l       "":lmap"" mappings for Insert, Command-line and Lang-Arg
        c       Command-line

Just before the {rhs} a special character can appear:
        *       indicates that it is not remappable
        &amp;       indicates that only script-local mappings are remappable
        @       indicates a buffer-local mapping
</code></pre>

<p>So they were created using <code>?noremap</code> commands.</p>
","11044"
"What does vim try to tell me with: 'Sorry, this command is disabled, the Pythons's site module could not be loaded'?","375","","<p>I try to get python support in gvim on windows to work with the help of <a href=""https://tuxproject.de/projects/vim/"" rel=""nofollow"">this</a> binary distribution.<br>
First I got the error <code>python27.dll could not be located</code>, what I successfully fixed by copying <code>python27.dll</code> to the <code>vim74</code> directory.<br>
 Although <code>:echo has('python')</code> returns 1 now, if I try to execute <code>:py print(1)</code> I get this error:</p>

<blockquote>
  <p>Sorry, this command is disabled, the Pythons's site module could not be loaded</p>
</blockquote>

<p>I just don't understand what Vim is trying to tell me by that and what the problem is.</p>

<p>I'm using <code>vim 7.4.1817 64bit</code> with <code>+python/dyn</code> &amp; <code>+python3/dyn</code> and <code>python 2.7.9 64bit</code> (the newer <code>python 2.7.11 64bit</code> produces the same behaviour)</p>
","<p>I installed gvim from <a href=""https://bintray.com/micbou/generic/vim"" rel=""nofollow"">here</a> and <code>Python 2.7.9</code> and it works like a charm now.<br>
I will further try to make it portable and edit the question if I succeed</p>

<p><strong>From my experience trying to get <code>python</code> in gvim under windows to work, I have to say that there seems to be a problem with the 2.7.11 version and gvim 7.4.x</strong></p>
","7748"
"Why is bash not interactive after setting &shell='/bin/bash -i'?","374","","<p>My vimrc sets the shell option:</p>

<pre><code>let &amp;shell='/bin/bash -i'
</code></pre>

<p>which I confirm using</p>

<pre><code>echo &amp;shell
</code></pre>

<p>The <code>-i</code> makes the shell interactive.  I want to do this so that it runs <code>~/.bashrc</code>, which contains the setting</p>

<pre><code>shopt -s extglob
</code></pre>

<p>However, <code>extglob</code> was not being set because <code>~/.bashrc</code> was not being run, which in turn seems to be because the shell is not interactive.  I determined this by putting the vim cursor on each the following lines</p>

<pre><code>echo $-
echo $PS1
</code></pre>

<p>and issuing the normal mode command <code>!!bash</code>.  According to <a href=""http://www.gnu.org/software/bash/manual/html_node/Is-this-Shell-Interactive_003f.html"" rel=""nofollow"">the Bash manual</a>, the string returned by the first command should include the letter <code>i</code> if the shell is interactive, while the string returned by the second command should include the text and control characters for the prompt that is shown at the bash command line (as opposed to nothing).  Both tests show the shell to be not interactive.</p>

<p>Why would the <code>-i</code> flag in the shell option be ignored?  What further troubleshooting steps can I take?</p>
","<p>Your test is flawed. If you run <code>!!bash</code>, you're calling just the <code>bash</code> command explicitly. Why would you expect <code>bash</code> to be interactive in that case?</p>

<p><code>!!</code> is shorthand for <code>:.!</code>, so you're running <code>:.!bash</code>, which would become something like: <code>bash -i -c 'bash'</code>. So the first <code>bash</code> might have <code>extglob</code> set, but the second won't. </p>

<p>Run <code>:!echo $-</code> for a better test:</p>

<pre><code>himBHc

Press ENTER or type command to continue
</code></pre>

<p>In this case, the command run by Vim would look like: <code>bash -i -c 'echo $-'</code>.</p>

<p>If you do want to test with <code>!!</code>, use the <code>pstree</code> command (<code>pstree -psa $$</code>) to see what the parent process is. In my case, the relevant part is:</p>

<pre><code>  `-vim,13387
      `-bash,13527 -i -c (bash) &lt; /tmp/vAaJ5gB/7 &gt;/tmp/vAaJ5gB/8 2&gt;&amp;1
          `-bash,13530
              `-pstree,13531 -psa 13530
</code></pre>

<p>As you can see, Vim did call it with <code>-i</code>.</p>

<p>Or just run <code>:!shopt nullglob</code>:</p>

<pre><code>nullglob        on

Press ENTER or type command to continue
</code></pre>

<hr>

<p>By the way, the Vim way to add an option to the shell being used to run <code>:!</code> commands is <a href=""http://vimhelp.appspot.com/options.txt.html#%27shellcmdflag%27"" rel=""nofollow""><code>shellcmdflag</code></a>. From <a href=""http://vimhelp.appspot.com/various.txt.html#%3A%21"" rel=""nofollow""><code>:h :!</code></a>:</p>

<pre><code>On Unix the command normally runs in a non-interactive
shell.  If you want an interactive shell to be used
(to use aliases) set 'shellcmdflag' to ""-ic"".
</code></pre>

<hr>

<p>From <a href=""http://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html#Invoked-non_002dinteractively"" rel=""nofollow"">the Bash manual</a>, </p>

<blockquote>
  <h3>Invoked non-interactively</h3>
  
  <p>When Bash is started non-interactively, to run a shell script, for
  example, it looks for the variable <code>BASH_ENV</code> in the environment,
  expands its value if it appears there, and uses the expanded value as
  the name of a file to read and execute. Bash behaves as if the
  following command were executed:</p>

<pre><code>if [ -n ""$BASH_ENV"" ]; then . ""$BASH_ENV""; fi
</code></pre>
  
  <p>but the value of the <code>PATH</code> variable is not used to search for the
  filename.</p>
</blockquote>

<p>So a simple way to affect invocations of <code>!!bash</code>, would be to set <code>BASH_ENV=~/.bash_extra</code>:</p>

<pre><code>let $BASH_ENV=""~/.bash_extra""
</code></pre>

<p>where <code>~/.bash_extra</code> would contain (among any other settings you need):</p>

<pre><code>shopt -s nullglob
</code></pre>

<p>Using an interactive shell has undesirable effects, like the output being cluttered with your prompt. This avoids that.</p>
","7175"
"How to export information from vim to bash","373","","<p>When you execute the shell in <code>vim</code> via the <code>:sh</code> command, the shell that is set in the <code>shell</code> option is executed. However, is it possible to pass some information from the vim instance that you are running to the invoked shell?</p>

<p>Of course that would be easily doable if you could alter the <code>shell</code> option to have some environment variables prepended to it (e.g. <code>a=foo b=bar /usr/bin/bash</code>). However that doesn't seem to be possible. Is there some other way?</p>
","<p>You can set or modify an environment variable in Vim like so:</p>

<pre><code>:let $MY_ENV = 'coconuts!'
</code></pre>

<p>Child processes inherit the parent process's environment, so this is available when you start a new shell process with <code>:sh</code> (which is a child of the vim process:</p>

<pre><code>:sh

$ echo $MY_ENV
coconuts!
</code></pre>

<p>It also works with NeoVim's <code>:terminal</code>:</p>

<pre><code>:terminal

$ echo $MY_ENV
coconuts!
</code></pre>

<p>Also see <a href=""http://vimhelp.appspot.com/eval.txt.html#%3alet%2d%24"" rel=""nofollow""><code>:help :let-$</code></a>.</p>
","8943"
"VIM FZF, searching multiple directories","373","","<p>Using <a href=""https://github.com/junegunn/fzf"" rel=""nofollow"">FZF</a> in Vim, is it possible to search project directory and a library directory?  For example when executing FZF, it would search directories:</p>

<p><code>~/project/</code> and <code>~/libs/include</code>, and provide results.</p>
","<p>You can specify the command to obtain the input of fzf by using the <code>fzf#run()</code> function.
In your case, this can look something like this:</p>

<pre><code>call fzf#run({'source': 'find ~/project/ ~/libs/include -type f', 
             \ 'sink':  'edit'})
</code></pre>

<p>and if you want, you can add a command like this</p>

<pre><code>command! FZFLib call fzf#run({'source': 'find ~/project/ ~/libs/include -type f', 'sink':  'edit'})
</code></pre>

<p>The options of <code>fzf#run()</code> are listed on the <a href=""https://github.com/junegunn/fzf#usage-as-vim-plugin"" rel=""nofollow"">fzf homepage</a></p>
","9172"
"Autocmd on directory to replace netrw","372","","<p>I use <a href=""https://github.com/francoiscabrol/ranger.vim"" rel=""nofollow noreferrer"">the ranger plugin</a> wich I can trigger with a shortcut. But when I open a directory I would like to use the plugin instead of netrw.
So I have found that the filetype of directories is <code>netrw</code>, using <code>set filetype</code>on a directory, and decided to put an autocommand in my vimrc:</p>

<pre><code>autocmd FileType netrw :Ranger&lt;CR&gt;
</code></pre>

<p>But it doesn't work. I can't find anything on the web on autocmds on directory.
Anyone has an idea on how to achieve this?</p>
","<p>I had a look at <a href=""https://github.com/justinmk/vim-dirvish/blob/4ae4303748221543aaa37030f209da11de817270/plugin/dirvish.vim#L8-L20"" rel=""nofollow noreferrer"">how</a> <code>Dirvish</code> did it, and tested this:</p>

<pre><code>augroup ranger
    au!
    au VimEnter * sil! au! FileExplorer *
    au BufEnter * if s:isdir(expand('%')) | bd | exe 'Ranger' | endif
augroup END

fu! s:isdir(dir) abort
    return !empty(a:dir) &amp;&amp; (isdirectory(a:dir) ||
                \ (!empty($SYSTEMDRIVE) &amp;&amp; isdirectory('/'.tolower($SYSTEMDRIVE[0]).a:dir)))
endfu
</code></pre>

<p>It seems to work but I don't know how reliable it is.</p>

<p><code>s:isdir()</code> is a function which tests whether the path of the current buffer matches a directory.<br>
The <code>VimEnter</code> autocmd seems to get rid of <code>netrw</code>.<br>
The <code>BufEnter</code> autocmd deletes the buffer (if you want to wipe it completely, replace <code>bd</code> with <code>bw</code>), then calls the <code>ranger</code> file manager.  </p>

<p>In the <code>Dirvish</code> plugin, before calling the <code>:Dirvish</code> command, the <code>BufEnter</code> autocmd redraws the screen and echo an empty string (<code>redraw | echo ''</code>). I don't know why it does this, so I didn't copied it, but if you have some issue (maybe with rendering artifacts, sometimes <code>:redraw!</code> is used to get rid of them), try to add these commands back:</p>

<pre><code>au BufEnter * if s:isdir(expand('%'))
                  \| bd | redraw | echo '' | exe 'Ranger' | endif
</code></pre>
","10474"
"How to append a random number between a range [1,10] at the end of each line in vim","372","","<p>I have a graph data in a file with each line containing the source and destination node of an edge. I want to assign a random weight between [1, 10] for each edge to test my graph algorithm. How can i do that in vim?</p>

<p><strong>Graph data:</strong></p>

<blockquote>
  <p>1 2 <br/>2 3 <br/>1 5</p>
</blockquote>

<p><strong>Data along with weights(Expected Output)</strong></p>

<blockquote>
  <p>1 2 5<br/>2 3 3<br/>1 5
  9</p>
</blockquote>

<p>The last column is the weight of each edge.</p>
","<p>You can do it with a macro : </p>

<pre><code>:r!echo $RANDOM^Mld$kJ
</code></pre>

<p>Decomposing the macro :</p>

<pre><code>:r!echo $RANDOM^M
</code></pre>

<p><strong>Note</strong> : <code>^M</code> is the litteral <code>&lt;CR&gt;</code>, so you should press <code>&lt;CR&gt;</code> instead of <code>^M</code> when you record your macro.</p>

<p>This insert in a new line a random number (you should look at <a href=""https://stackoverflow.com/a/20430735/2558252"">this post</a> for more infos).</p>

<pre><code>l       "" go right
 d      "" delete ... 
  $     "" ... to the end of the line (leaving only the first digit)
   k    "" go up
    J   "" join the line below
</code></pre>

<p><strong>Note</strong> :
As stated by @Doorknob : </p>

<blockquote>
  <p>Bash's $RANDOM returns a random number from 0 to 32767</p>
</blockquote>

<p>So to keep the last digit instead of the first one, you can replace the <code>ld$</code> part by : <code>vehx</code>. I think that a random number generation should be put in a function and be carefully handled.</p>
","4396"
"Passing visual range to a :command as its argument","372","","<p>I have a command:</p>

<pre><code>command! -nargs=1 TmuxSession !tmux.session ""&lt;args&gt;""
</code></pre>

<p>and I want to run it in visual mode so that selected text will be passed as argument.<br>
By selected text I mean selected in visual mode in vim.</p>

<p>How can I achieve that?</p>

<p>I tried running </p>

<pre><code>command -nargs=1 -range -register TmuxSession !tmux.session ""&lt;args&gt;""
</code></pre>

<p>but it keeps saying <code>E471: Argument required</code></p>

<p><strong>Edit:</strong><br>
I know about using <code>&lt;C-r&gt;""</code> to paste an argument and that is how I use the upper command at the moment, but I don't want to copy selection and paste it every time to the command, because this can be done faster using range.</p>

<p><strong>Edit2:</strong></p>

<p>Following solution does not work:</p>

<pre><code>function! PrintRange() range
    echo getline(a:firstline, a:lastline)
endfunction

command! -range PassRange &lt;line1&gt;,&lt;line2&gt;call PrintRange()
</code></pre>

<p>because when I want to select second and third word from line containing <code>one two three</code> - I get the whole line (obviously).</p>

<p>I need to pass only the selected part of the text.</p>

<p>Thanks</p>
","<p>See <a href=""https://stackoverflow.com/a/10573044"">this answer on stackoverflow</a>.</p>

<p>The example given is:</p>

<pre><code> function! PrintGivenRange() range
     echo ""firstline "".a:firstline."" lastline "".a:lastline
     "" Do some more things
 endfunction

 command! -range PassRange &lt;line1&gt;,&lt;line2&gt;call PrintGivenRange()
</code></pre>

<p>Thus you might want to create a function which would use the range and do the tmux call you want.</p>

<p>In your function, to get the text in the range you can use the <code>getline()</code> function which will take <code>a:firstline</code> and <code>a:lastline</code> as parameters and return the text in the buffer between theses lines. You can have a look at <a href=""http://vimhelp.appspot.com/eval.txt.html#getline%28%29"" rel=""nofollow noreferrer""><code>:h getline()</code></a> or <a href=""http://vimhelp.appspot.com/eval.txt.html#getbufline%28%29"" rel=""nofollow noreferrer""><code>:h getbufline()</code></a>.</p>

<hr>

<p><strong>Edit</strong> If you want to get the text characterwise and not linewise you'll have to play with the marks. This edit is inspired from <a href=""https://stackoverflow.com/a/6271254"">this SO answer</a>.</p>

<p>So when you call you command with <code>:'&lt;,'&gt;PassRange</code> the marks <code>'&lt;</code> and <code>'&gt;</code> are set. The doc <a href=""http://vimhelp.appspot.com/motion.txt.html#%27%3C"" rel=""nofollow noreferrer""><code>:h '&lt;</code></a> tells us that these marks are used to describe the last visual selection.</p>

<p>Your function would need to look like this:</p>

<pre><code>function! PrintGivenRange() range
    "" Get the line and column of the visual selection marks
    let [lnum1, col1] = getpos(""'&lt;"")[1:2]
    let [lnum2, col2] = getpos(""'&gt;"")[1:2]

    "" Get all the lines represented by this range
    let lines = getline(lnum1, lnum2)         

    "" The last line might need to be cut if the visual selection didn't end on the last column
    let lines[-1] = lines[-1][: col2 - (&amp;selection == 'inclusive' ? 1 : 2)]
    "" The first line might need to be trimmed if the visual selection didn't start on the first column
    let lines[0] = lines[0][col1 - 1:]

    "" Get the desired text
    let selectedText = join(lines, ""\n"")         

    "" Do the call to tmux
    execute ""!tmux.session "" . selectedText 
endfunction
</code></pre>
","11028"
"Use variable that depends on function for mapping inside vimrc","372","","<p>I'm testing NeoVim and would like to put in my vimrc universal mapping for either vim and nvim.</p>

<p>I've sketch sth like below so far, but it doesn't work and it's <em>very</em> rough.</p>

<pre><code>function! Meta(key) "" define if using alt(it works in neovim) or leader key. Used below for mapping only.
    "" for neovim testing and changing habits
    if has('nvim')
        let meta = ""&lt;A-"" . a:key . ""&gt;""
    else
        let meta = ""&lt;leader&gt;"" . a:key
    endif
    "" return meta
endfunction

call Meta('j')
nnoremap &lt;silent&gt;meta :set paste&lt;CR&gt;m`o&lt;Esc&gt;``:set nopaste&lt;CR&gt;
call Meta('k')
nnoremap &lt;silent&gt;meta :set paste&lt;CR&gt;m`O&lt;Esc&gt;``:set nopaste&lt;CR&gt;
(...)
</code></pre>

<p>How to solve it in a smart way?</p>
","<p>The <code>:map</code> command takes <code>:help key-notation</code>, but not variables. Vimscript is evaluated exactly like the Ex commands typed in the <code>:</code> command-line. There were no variables in <code>ex</code>, so there's no way to specify them. When typing a command interactively, you'd probably use <code>&lt;C-R&gt;=</code> to insert variable contents:</p>

<pre><code>:sleep &lt;C-R&gt;=timetowait&lt;CR&gt;m&lt;CR&gt;
</code></pre>

<p>... but in a script, <code>:execute</code> must be used. All the literal parts of the Ex command must be quoted (single or double quotes), and then concatenated with the variables:</p>

<pre><code>execute 'sleep' timetowait . 'm'
</code></pre>

<h3>Your example</h3>

<p>Here's the variable interpolation applied to your example (using a script-local variable):</p>

<pre><code>function! Meta(key) "" define if using alt(it works in neovim) or leader key. Used below for mapping only.
    if has('nvim')
        let s:meta = ""&lt;A-"" . a:key . ""&gt;""
    else
        let s:meta = ""&lt;leader&gt;"" . a:key
    endif
endfunction

call Meta('j')
execute 'nnoremap &lt;silent&gt;' . s:meta . ' :set paste&lt;CR&gt;m`o&lt;Esc&gt;``:set nopaste&lt;CR&gt;'
</code></pre>

<p>However, I would change your function to <em>return</em> the resulting key, so that you save the separate function invocation and variable:</p>

<pre><code>function! Meta(key) "" define if using alt(it works in neovim) or leader key.
    "" for neovim testing and changing habits
    if has('nvim')
        return ""&lt;A-"" . a:key . ""&gt;""
    else
        return ""&lt;leader&gt;"" . a:key
    endif
endfunction

execute 'nnoremap &lt;silent&gt;' . Meta('j') . ' :set paste&lt;CR&gt;m`o&lt;Esc&gt;``:set nopaste&lt;CR&gt;'
execute 'nnoremap &lt;silent&gt;' . Meta('k') . ' :set paste&lt;CR&gt;m`O&lt;Esc&gt;``:set nopaste&lt;CR&gt;'
</code></pre>
","10330"
"Can I use ""gf"" (or similar) to open a file and jump to a search term?","371","","<p>Is there a way to get vim's <code>gf</code> command (or something similar) to recognize a <code>+{cmd}</code> argument for file-paths?</p>

<p>One can start vim and go directly to a search term by doing:</p>

<pre><code>$ vim +/coding_effort ~/project/file
</code></pre>

<p>Similarly, in command mode you can do:</p>

<pre><code>:e +/coding_effort ~/project/file
</code></pre>

<p>I often take notes and refer to other files like this:</p>

<pre><code>For more info see +/coding_effort ~/project/file where there's a detailed discussion.
</code></pre>

<p>I'd love to be able to select <code>+/coding_effort ~/project/file</code>, type something like <code>gf</code>, and have vim do the right thing.</p>
","<p>No, the first problem is that the necessary space between command and filename is not part of the '<code>isfname'</code> option, and adding it would mean file borders couldn't be recognized at all. You'd either have to always use a visual selection (of both command and filename), or implement custom parsing in a <code>gf</code> command overload.</p>

<p>Secondly, the built-in <code>gf</code> doesn't recognize the <code>+{cmd}</code> syntax, so there's really no way around implementing your own custom mapping. This is certainly possible (using functions like <code>expand('&lt;cfile&gt;')</code>, <code>getline()</code>, etc.), but probably takes a few lines of Vimscript function.</p>

<p>If you choose a different syntax (<code>filename:+command</code>), you can keep the original <code>gf</code> commands and implement the splitting in an <code>:autocmd</code>, similar to what the very related <a href=""http://www.vim.org/scripts/script.php?script_id=2184"" rel=""noreferrer"">file:line</a> plugin does for <code>filespec:linenumber</code>).</p>
","3312"
"Make: Nothing to be done for 'build'","371","","<p>I am using a Gradle compiler plugin for Vim. I run <code>:compiler gradle</code> and then <code>:make build</code>, and Gradle build is executed and error results properly parsed (many thanks to @lcd047 answering my <a href=""https://vi.stackexchange.com/questions/4048/vim-errorformat-question-for-gradle-compiler-plugin/4052?noredirect=1#comment5891_4052"">question</a>). The problem is that after I fix some errors and re-run the build to check if they were properly fixed, <code>make</code> tells me that</p>

<pre><code>make: Nothing to be done for `build'.
</code></pre>

<p>If i restart Vim, i can re-run the build again.</p>

<p>Seems that it's looking for some timestamp that is not changed? How do I tell make to re-run the build anyway?</p>
","<p>Solved by comment from @jjaderberg. The problem is related to the <code>compiler</code> command. To quote Vim's help:</p>

<pre><code>6. Selecting a compiler                                 compiler-select

                                                :comp :compiler E666
:comp[iler][!] {name}           Set options to work with compiler {name}.
                                Without the ""!"" options are set for the
                                current buffer.  With ""!"" global options are set.
</code></pre>

<p>Now, i was using <code>:compiler gradle</code> instead of <code>:compiler! gradle</code>, hence had <code>makeprg</code> properly set in one buffer only. Switching to a different buffer changed its value to the default, which is simply <code>make</code>.</p>
","4115"
"Move to non-existing Nth column","370","","<p>I have some 30 characters in a line. When I press <code>80|</code>, it should move 50 character to the right, thus move the cursor to 80th character. (30, 50, 80 are for examples)</p>

<p>How to achieve this using mapping or commands?
I tried </p>

<pre><code>   :nmap &lt;Bar&gt; a&lt;Space&gt;
</code></pre>

<p>It doesn't work.</p>
","<p>You can use <a href=""https://vimhelp.appspot.com/options.txt.html#%27virtualedit%27""><code>'virtualedit'</code></a> to allow moving to columns that don't contain text.  If you <code>set virtualedit=all</code>, then <code>80|</code> will place the cursor on column 80.</p>

<p>No spaces will be inserted until you actually perform some text editing there, though.  If your sole goal is to just extend the line to an arbitrary column, then a simple mapping taking advantage of <code>'virtualedit'</code> can do that.</p>

<pre><code>nnoremap &lt;Bar&gt; &lt;Bar&gt;i &lt;Esc&gt;
</code></pre>

<p>Or if you only want <code>'virtualedit'</code> active for the mapping, something like:</p>

<pre><code>fun! ExpandLine(col)
    let ve = &amp;ve
    set virtualedit=all
    exe 'normal! '.a:col.'|i '
    let &amp;ve = ve
endfun
nnoremap &lt;silent&gt; &lt;Bar&gt; :&lt;C-u&gt;call ExpandLine(v:count)&lt;CR&gt;
</code></pre>
","7846"
"selecting a range of lines from command line","370","","<p>I need to (visual) select a range of lines from command line.</p>

<p>For example the following command <code>:?^\s*for?+,/^\s*end/- p</code> prints all lines contained between a <code>for</code> and <code>end</code> (exclusive way). Instead of performing the printing operation I would like to switch to visual mode with those lines highlighted. I searched in the manual but I couldn't find such an ex-command.</p>
","<p>The boundaries of a visual mode selection are defined by the <code>&lt;</code> and <code>&gt;</code> marks.</p>

<p>Thus, the following command will enter visual mode with lines 5 through 10 (inclusive) selected:</p>

<pre><code> :5mark &lt; | 10mark &gt; | normal gvV
</code></pre>

<ul>
<li><code>:5mark &lt;</code> sets the start of the selection to line 5,</li>
<li><code>:10mark &gt;</code> sets the end of the selection to line 10,</li>
<li><code>gv</code> enters visual mode with the area defined above selected,</li>
<li><code>V</code> makes the selection linewise.</li>
</ul>

<p>You can pass any Vim range into the <code>:mark</code> command: the following will enter visual mode using the regular expressions <code>foo</code> and <code>bar</code> to define the boundaries of the selection area:</p>

<pre><code>:execute search(""foo"") . ""mark &lt;"" | execute search(""bar"") . ""mark &gt;"" | normal gvV
</code></pre>

<p>The following command is a simpler version of the above, but is dependent on cursor position:</p>

<pre><code>/foo/mark &lt; | /bar/mark &gt; | normal gvV
</code></pre>

<p>For more explanation, see:</p>

<ul>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#mark-motions"" rel=""nofollow noreferrer""><code>:help mark-motions</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#:mark"" rel=""nofollow noreferrer""><code>:help :mark</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/cmdline.html#cmdline-ranges"" rel=""nofollow noreferrer""><code>:help ranges</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/visual.html#gv"" rel=""nofollow noreferrer""><code>:help gv</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/visual.html#v_V"" rel=""nofollow noreferrer""><code>:help v_V</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#:execute"" rel=""nofollow noreferrer""><code>:help :execute</code></a></li>
<li><a href=""http://vimdoc.sourceforge.net/htmldoc/eval.html#search()"" rel=""nofollow noreferrer""><code>:help search()</code></a></li>
</ul>
","11218"
"What is an abandoned buffer in vim?","370","","<p>I've been using vim for more than 5 years now, and I was surprised when I didn't know what an abandoned buffer was. The closest answer I found was in this <a href=""https://stackoverflow.com/a/15950622/1864317"">SO answer</a>.</p>

<p>So is an abandoned buffer one that was loaded but is not displayed any more? What about if there are multiple tabs - are any of the buffers loaded in these tabs abandoned or not?</p>
","<p>An ""abandoned"" buffer is a buffer you left without saving changes.</p>

<p>If you have <code>set nohidden</code> (the default value), Vim generally warns you about unsaved changes when you try to leave a modified buffer. When you force your way with a bang, the previous buffer becomes ""abandoned"" and you loose all your unsaved changes.</p>

<p>If you have <code>set hidden</code>, modified buffers are kept in their current state when you leave them so they are — technically — never ""abandoned"". You will still get a warning if you try to quit Vim with unsaved changes.</p>

<p>As long as it's still displayed in a window, a buffer can't be thought of as ""hidden"" or ""abandoned"" so your buffers currently displayed in another window in another tab page are neither ""hidden"" nor ""abandoned"".</p>
","4547"
"Visual select single column from cursor to last line with text in column","369","","<p>There are already a lot of similar questions to this.</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/16748161/jump-to-last-line-but-stay-in-the-same-column"">Jump to last line, but stay in the same column</a></li>
<li><a href=""https://stackoverflow.com/questions/16631436/how-to-go-to-the-end-of-the-file-in-vim-while-preserving-the-current-column-unde"">How to go to the end of the file in vim while preserving the current column under the cursor?</a></li>
<li><a href=""https://stackoverflow.com/questions/3736678/how-do-you-select-a-whole-column-in-visual-block-mode"">How do you select a whole column in visual block mode?</a></li>
</ul>

<p>They all end with toggling the <code>startofline</code> setting. Using <code>startofline</code> it's possible to start a visual selection with <code>Ctrl-v</code> and then use <code>gg</code> or <code>G</code> to select entire columns of text from the cursor to the beginning or to the end of the file. What if I want to select an entire column that doesn't go to the beginning or end of the file?</p>

<p>So for this text:</p>

<pre><code>first line

x b c
a m w
q y c
a e z

last line
</code></pre>

<p>If the cursor was on <code>b</code> in the line reading <code>x b c</code>, how can I select the column starting at that b and ending on the <code>e</code> in <code>a e z</code>?</p>

<p>For non-column oriented actions similar to this I would use the shift paren/bracket family but they seem unaffected by <code>nostartofline</code>.</p>
","<p>Probably the simplest way to solve this (apart from using something like <code>ctrl-v 4j</code>) is to use the <a href=""https://github.com/coderifous/textobj-word-column.vim"" rel=""nofollow noreferrer"">textojb-word-column</a> plugin: if cursor is placed on the ""right"" column, a simple <code>vic</code> will get the job done. This is the demo from the plugin page:</p>

<p><a href=""https://i.stack.imgur.com/Phohw.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Phohw.gif"" alt=""gif demo from the plugin page""></a></p>
","4064"
"Why cannot I source vimrc for the current file being editing?","369","","<p>And I add this in the vimrc file:</p>

<pre><code>autocmd FileType markdown iabbrev mkdc &lt;!--i--&gt;&lt;left&gt;&lt;left&gt;&lt;left&gt;
</code></pre>

<p>What I want to do is source the vimrc and make the abbreviation effective for the current file I'm editing.</p>

<p>I have tried:</p>

<ol>
<li><code>:!sc</code>, <code>:redraw!</code></li>
<li><code>:source $MYVIMRC</code></li>
<li><code>:q</code> and rerun Vim</li>
</ol>

<p>But it seems that only the last method works. Is there any way to get this to work without leaving Vim? Why doesn't the second method as stated in all other related answers work in this situation?</p>
","<p>Your autocommand is executed when the <code>FileType</code> event is triggered, with the <code>markdown</code> value. Sourcing your <code>vimrc</code> is not enough because it only adds the autocommand but the event is not triggered.</p>

<p>What you need to do is:</p>

<ol>
<li>Source your <code>vimrc</code> with <code>:source $MYVIMRC</code>, this will add your autocommand to the existing ones.</li>
<li>Reload your current buffer with <code>:e</code>, this will trigger the <code>FileType</code> event and thus run your autocommand.</li>
</ol>

<hr>

<p>Also, adding half-understood <code>FileType</code> autocommands to your <code>vimrc</code> is <em>not</em> a good way to get filetype-specific settings/mappings/abbreviations/commands/whatever.</p>

<p>Instead, you should use the built-in filetype detection and put your filetype-specific stuff in proper <em>ftplugins</em>:</p>

<ul>
<li><p>in <code>~/.vimrc</code>:</p>

<pre><code>filetype plugin indent on
</code></pre></li>
<li><p>in <code>~/after/ftplugin/markdown.vim</code>:</p>

<pre><code>iabbrev &lt;buffer&gt; mkdc &lt;!--i--&gt;&lt;left&gt;&lt;left&gt;&lt;left&gt;
</code></pre></li>
</ul>
","9339"
"Current filename not visible in airline","368","","<p>I'm using airline in vim on the terminal (as part of spf-13, fyi). However, all kinds of other random info (including other open buffers) tends to fill up the line and push out or cover what the name of the current file I'm editing is, like so:</p>

<pre><code>NORMAL  +5 ~1 -0  master  &lt;.test --ipdb      python  env_awi  utf-8[unix]   33%   44:  2 
</code></pre>

<p><code>.test --ipdb</code> is the the name of one of the open buffers (not the current one) and is partially cut off by the <code>&lt;.</code> to the left of which are the other open buffers which are covered up.  Any way to make the current file the only one that shows up, so I know which file I'm currently editing?</p>
","<p>With like 5min work  reading <code>:help airline</code> I now realize airline is super customizable. I added the following to my .vimrc which replaces the line number percentage 33%   44:  2 (which I never use) with the current filename:</p>

<pre><code>let g:airline_section_z = '%t'
</code></pre>
","2619"
"Change '\r' to '\n' for search and replace?","367","","<p>In expression <code>:s/foo/bar\n/g</code>
When replacing <code>\n</code> inserts a null byte, according to the docs I have to use <code>\r</code>. Since I insert newlines more frequently than null bytes, is there a way to change this mapping? </p>

<p>So I want <code>:s/foo/bar\n/g</code> to insert a newline, not nullbyte. </p>
","<p>You could do this via a <code>:cnoremap &lt;expr&gt; \r</code> that checks (via <code>getcmdtype()</code> and <code>getcmdpos()</code>) that the current command-line is a <code>:s</code> Ex command, and you're editing the replacement part.</p>

<p>I would recommend against this, and just accept and learn that <code>\r</code> has to be used. Otherwise, you'll become dependent on your mapping and will struggle on systems that are not yours / do not have your configuration.</p>
","3313"
"How do I make list of search results editable?","367","","<p>There are several times, I need to <code>grep</code> for <code>some_pattern</code> in some <code>XHTML</code> files (many a time, file count in a specified folder goes beyond 10K+).</p>

<p>Previously, I have used <a href=""http://www.lugaru.com/"" rel=""nofollow"">Lugaru's Epsilon Programmer's Editor</a> and there was <code>grep</code> command which invokes the search, and results a list of all matched lines in a <code>grep-buffer</code>. Afterwards, a user can use commands (like <code>keep-matching-lines</code>, <code>delete-matching-lines</code>, <code>sort-lines</code>, <code>uniq</code> etc.) on the <code>grep-buffer</code>. Since, the <code>grep-buffer</code> is editable, it is possible to post-process and mold the grep-result to desirable format as required.</p>

<p>But, that was weeks ago! This time, I have started to use Vim as my full-time editor. I am trying to quit all possible habits those are becoming obstacles to learning Vim. So, right now whenever I need to get such a search list, I am trying the same, in following way:</p>

<pre><code>:cd d:\test_files\
:cex [] | vimgrep /pattern/ *.xhtml
:cope
</code></pre>

<p>Now, this servers my purpose well, except that the buffer remains in <code>RO</code> mode. So, every time it requires special post-editing process, I need to prepare a replica for the <code>quickfix-window</code> and then do as required. The <code>quickfix-window</code> is always uneditable.</p>

<p>Is there any way to make the <code>quickfix-window</code> editable? I know the result can be post-processed with some other commands in a single line, but I do need to view all the search list as whole and only then can I judge what the next steps should be.</p>

<p>Is there any tweak that can be applied in the <code>vimrc</code>? Am I missing something? Pointing out my error or any other approach to get job done, is greatly appreciated.</p>
","<p>You definitively should try the plugin <a href=""https://github.com/sk1418/QFGrep"" rel=""nofollow noreferrer"">QFGrep plugin</a>, which was created after the similar question mentioned in the comments: <a href=""https://stackoverflow.com/questions/15406138/is-it-possible-to-grep-vim%ca%bcs-quickfix"">Is it possible to grep Vimʼs quickfix?</a>.</p>

<p>I've been using it for a year and a half, and it works very well. It allows to grep (and reverse grep) the quickfix results, and also allows to restore the original contents. Check plugin homepage, which has <a href=""https://github.com/sk1418/QFGrep"" rel=""nofollow noreferrer"">a nice animated gif</a>.</p>
","6519"
"Can I open other files without closing the file I'm editing?","366","","<p>I'm new to vi/vim.</p>

<p>I learned that I can close a file I'm editing and open the another file at once by typing <code>:vi filename</code></p>

<p>But I sometimes want to open other files without closing the file I'm editing and interchange these buffers with commands like <code>:next</code> or <code>:prev</code></p>

<p>Can I do that?</p>

<p>(I haven't understand the difference among <code>buffer</code>, <code>window</code> and <code>file</code> exactly yet. So some words could be wrong I used avobe.)</p>

<p>my vim's version is 7.2, Small version without GUI and be used on CentOS6.7</p>
","<p>First, I want to recommend that you go through the vimtutor (<code>:h tutor</code>). That will explain a lot of the different concepts in Vim. To learn about the difference between the buffers, windows and a file, you can read for instance: <code>:h windows.txt</code> and <code>:h editing.txt</code>.</p>

<p>The command <code>:vi</code> or <code>:visual</code> is used to get out of ex mode and back to normal mode. If you don't know what ex mode is, then I suggest you instead use the command <code>:e ...</code> to edit new files.</p>

<p>If you want to close a file, but leave the buffer open, I suggest that you use the option <code>:set hidden</code>. See <code>:h 'hidden'</code> for a detailed explanation. In short, this will set closed buffers to hidden instead of wiping them. Thus you can reopen closed files with <code>:bnext</code> and <code>:bprev</code> and similar.</p>
","5876"
"How can I limit number of suggestions when using YouCompleteMe?","365","","<p>I'm working on fairly large php codebase (~1.3 mil lines of code). I have generated tags and now when I'm typing something like</p>

<pre><code>$data-&gt;
</code></pre>

<p>YouCompleteMe lags really hard and basically freezes Vim when trying to fetch list of all possible completions from tags. Is there a way to fix this? For example by limiting number of suggestions, e.g. displaying only 10 top suggestions instead of loading whole list.</p>
","<p>Whether or not you display all of the suggestions probably won't affect the lag. YouCompleteMe will search through all of the possible completions anyway. There is no way to display the ""10 top suggestions"" without having considered all possible suggestions - at least with the way YCM works.  </p>

<p>If you still want to, <code>pumheight</code> sets the menu height. </p>
","3077"
"How to pass a range to the :bd command in a buffer in which a fold has been created?","365","","<p>I'm looking for a command to delete a range of buffers.</p>

<p>I launch vim which opens a new unnamed buffer.<br>
I then switch to a file on which I previously put the mark <code>N</code> (<code>~/Dropbox/notes</code>).</p>

<p>In this file I've written:</p>

<pre><code>:e /tmp/foo
:e /tmp/bar
:e /tmp/baz
:e /tmp/qux
:e /tmp/norf
</code></pre>

<p>I visually select those five lines, and source them (<code>:&lt;c-u&gt;@*</code>).</p>

<p>Now I've got 5 new buffers.</p>

<p>I switch back to the <code>N</code> file and do a listing (<code>ls</code>):</p>

<pre><code>  1  h   ""[No Name]""                    line 1
  2 %a   ""Dropbox/notes""                line 139
  3  h   ""/tmp/foo""                     line 1
  4  h   ""/tmp/bar""                     line 1
  5  h   ""/tmp/baz""                     line 1
  6  h   ""/tmp/qux""                     line 1
  7 #h   ""/tmp/norf""                    line 1
</code></pre>

<p>I want to delete the 5 temporary buffers from 3 to 7.<br>
Most Ex commands accept a range, and I suppose <code>:bd</code> is probably one of them. I may have misunderstood the help but it seems to confirm you can prefix <code>:bd</code> with a range :</p>

<blockquote>
  <p>:N,Mbdelete[!]    Do "":bdelete[!]"" for all buffers in the range N to M
        inclusive.</p>
</blockquote>

<p>So, I type <code>:3,7bd</code> but the result is not what I expected.</p>

<p>All the buffers from 2 to 7 were deleted, including my <code>N</code> file and I'm automatically sent back to the unnamed buffer n° 1.
Here's the final output of <code>:ls</code>:</p>

<pre><code>  1 %a   ""[No Name]""                    line 1
</code></pre>

<p>I tried other ranges like <code>5,6</code> but the result is always the same, everything is unloaded except the first buffer.</p>

<p>Is it possible to pass a range to the <code>:bd</code> command, and if so how ?</p>

<p><strong>Edit</strong>:</p>

<p>I think I've found the cause of the problem, but I don't understand it.
It seems to happen only inside a buffer in which a fold has been created.</p>

<p>Here's how to reproduce it:</p>

<ul>
<li>create a file <code>/tmp/test</code> in which you put :
<code>
:e /tmp/foo
:e /tmp/bar
:e /tmp/baz
:e /tmp/qux
:e /tmp/norf
</code></li>
<li><p>launch vim with an empty vimrc and edit the file <code>/tmp/test</code>:</p>

<p><code>vim -u NONE /tmp/test</code></p></li>
<li>source it to open 5 new buffers: <code>:so%</code></li>
<li>go back to first buffer (<code>/tmp/test</code>): <code>:b1</code></li>
<li>fold the whole buffer: <code>ggzfG</code></li>
<li><p>type <code>:ls</code>:
<code>
  1 %a   ""/tmp/test""                    line 1
  2      ""/tmp/foo""                     line 1
  3      ""/tmp/bar""                     line 1
  4      ""/tmp/baz""                     line 1
  5      ""/tmp/qux""                     line 1
  6 #    ""/tmp/norf""                    line 1
</code></p></li>
<li><p>type <code>:3,4bd</code> to delete buffers from 3 to 4 (bar and baz).</p></li>
</ul>

<p>On my system, vim deletes 5 buffers (1 to 5) instead of 2.</p>

<p>After that the output of <code>:ls</code> is:
<code>
  6 %a   ""/tmp/norf""                    line 1
</code></p>

<p>If I don't fold the buffer, the <code>:bd</code> command interprets the range as expected.</p>

<p>I'm using vim <a href=""https://paste.debian.net/plain/343732"" rel=""nofollow"">version 7.4.942</a> installed from this <a href=""https://launchpad.net/~pi-rho/+archive/ubuntu/dev"" rel=""nofollow"">ppa</a>.</p>

<p>Why is the behavior of the <code>:bd</code> command modified when executed inside a buffer in which a fold has been created ?</p>
","<p>This is mentioned briefly at <code>:h fold-behaviour</code></p>

<pre><code>For Ex commands the range is adjusted to always start at the first line of a
closed fold and end at the last line of a closed fold.  Thus this command:
    :s/foo/bar/g
when used with the cursor on a closed fold, will replace ""foo"" with ""bar"" in
all lines of the fold.
</code></pre>

<p>I can see, how this is confusing, but I am not sure, if this qualifies as a bug.</p>
","5812"
"How to list the available options of a plugin?","364","","<p>I recently found out that <code>YouCompleteMe</code> has an  <code>g:ycm_autoclose_preview_window_after_insertion</code> option that automatically hides the documentation preview window after exiting insert mode, and I also recently started out using vim, so this was the first time I set an option.</p>

<p>So I wondered if other plugins I crammed in my vim environment have options available, without searching for them manually.</p>

<p>Are they registered globally when vim starts, in order for a command that lists them to be available, or this can't be done?</p>
","<p>Vim doesn't provide any way to know all possible plugin options.</p>

<p>As a plugin writer I can tell you this is quite complex as there are many different ways to proceed. For instance either we consider that if the end-user hasn't provided a value for an option in its <code>.vimrc</code> then we force this option to exist and to be equal to a default value, or we can say: ""either take the value set by the end-user, or use an hard-coded default value"". </p>

<p>With that first approach, the end-user can see the list of available options with a <code>c_CTRL-D</code>, or <code>c_TAB</code>, etc.</p>

<p>More and more plugins choose to organize all their options into dictionaries. i.e., instead of having <code>g:plugin_foo_option</code> and <code>g:plugin_bar_option</code>, we have <code>g:plugin.foo_option</code> and <code>g:plugin.bar_option</code>. This avoids polluting the list <code>g:</code> of global options, but we lose command-line autocompletion (I may eventually open an issue of the subject, on vim github).</p>

<p>So far I have only talked about global options. Most plugins don't try to support more specific options even if they should have done it. For instance, I regret that neither <em>YouCompleteMe</em> nor <em>alternate</em>, nor many other plugins, use project specific options instead of global options. Indeed, depending on the project I'm working on I want to set their respective options to different values. Unfortunately, this is not a work-flow they have considered. In my plugins, many options can be specialized on project basis, or on buffer basis. Lately I've come up with an <a href=""https://github.com/LucHermitte/lh-vim-lib/blob/master/doc/Project.md"" rel=""nofollow noreferrer"">experiment</a> on the subject. But even with the usual and simple <code>g:plugin_option</code> + <code>b:plugin_option</code> pair, it's next to impossible to know all available options. </p>

<p>Sometimes I try to offer commands that help setting options as I've done with build-tools-wrappers, or even to display some options in the menu (when using gvim), but it's really far from being perfect.</p>

<p>I'm afraid that the documentation is the best thing available. You can even try a <code>:h pluginname^D</code>. It's probably the best approach available.</p>
","10798"
"How to make sure every 'echo[msg]' command is visible?","363","","<p>I have a couple of functions chained together to verbose messages in my status line in MacVim. I have noticed that in one particular occasion a line is blank and is not delivering the message it is supposed to deliver:</p>

<pre><code>[24_NOV_2015 13:59:03.544470] &lt;devLogger.LogStreamOut&gt; (DEBUG) Cycle: [0], Retry state for current cycle: [FALSE]
(Blank line)
[24_NOV_2015 13:59:03.554405] &lt;devLogger.LogStreamOut&gt; (DEBUG) Reached last cycle of [0] cycle(s).
</code></pre>

<p>However, when I type <code>:messages</code> I can clearly see the missing line:</p>

<pre><code>[24_NOV_2015 13:59:03.544470] &lt;devLogger.LogStreamOut&gt; (DEBUG) Cycle: [0], Retry state for current cycle: [FALSE]
[24_NOV_2015 13:59:03.552491] &lt;devLogger.LogStreamOut&gt; (DEBUG) Success, stream sent to file.
[24_NOV_2015 13:59:03.554405] &lt;devLogger.LogStreamOut&gt; (DEBUG) Reached last cycle of [0] cycle(s).
</code></pre>

<p>If I use a blank <code>echom ''</code> at the end of my message functions, all 3 lines come through fine, but I get a blank line at the end of the message stream.</p>

<p>Is there a more elegant way to make sure that every message appears in the status line in Vim?</p>

<p>My core <code>echom</code> wrapper looks like this:</p>

<pre><code>execute 'echohl' error
for l:line in split('My message.', '\\n')
  echomsg l:line
endfor
echohl NONE
</code></pre>

<p>--- CORRECTION ---</p>

<p>After further investigation, I now know that the <code>echomsg</code> wrapper that I use to send messages to the messaging facility of vim is not the problem. The problem was a function wrapper that sends the <code>echomsg</code> to a file in parallel. So this is where something goes wrong and my <code>echomsg</code> on the status line is messed up (sometimes).</p>

<p>The function looks like this:</p>

<pre><code>try
    echon ""\r""
    execute 'redir &gt;&gt; ' . l:file
    silent echomsg l:msgString
    silent echo ""\n""
    silent! redir END
catch /E190:/
    throw s:myException('Cannot write to file: %s', l:file)
endtry
</code></pre>

<p>So the right question would probably be: What would be the best way of handling <code>echomsg</code> both on the <code>file out</code> and the <code>message</code> sides.</p>

<p>Thanks.</p>
","<p>I have asked this question in a wrong way. The problem was not related to the <code>echomsg</code> command alone but more about writing the messages to a file. I will be posting a more specific question regarding this issue of: <em>How to append a string to a file in vim script?</em></p>
","5655"
"Is there a motion similar to a"" that never includes leading whitespace?","363","","<p>I'm using the <code>a""</code> motion rather often in vim; e.g. using <code>ca""</code> while refactoring a piece of code to replace a hardcoded argument with a variable name. The problem with this approach is that <code>a""</code> <a href=""http://vimdoc.sourceforge.net/htmldoc/motion.html#a%60"">includes leading whitespace if there is no trailing whitespace</a>:</p>

<blockquote>
  <p>Any trailing white space is included, unless there is none, then leading white space is included.</p>
</blockquote>

<p>Thus, when I edit a function call like this:</p>

<pre><code>aFunction(arg1, ""toBeReplaced"", arg3) #original
aFunction(arg1, replacedArg, arg3)    #refactored
</code></pre>

<p>I have to manually re-insert the space before <code>replacedArg</code> as <code>ca""</code> deletes it.</p>

<p>Is there any similar motion that does not include this white space, or is there anything else I can use instead of <code>ca""</code> that saves me from having to type an extra space?</p>

<p>Notes:</p>

<ul>
<li><code>cf""</code> does what I want as long as the string doesn't contain any escaped quotes, but requires me to have the cursor at the beginning of the string. I'd like something I can use from anywhere within the string, and <code>?""&lt;Enter&gt;cf""</code> is rather awkward to type.</li>
<li>It's less about the single <code>&lt;Space&gt;</code> keystroke and more about the fact that I often initially forget to include the space, costing me at least four extra keystrokes (<code>bi&lt;Space&gt;&lt;Esc&gt;</code>) and breaking my focus. Thus the length of the replacement command is not as important, as long as it deletes only the text between the given chars and then enters insert mode.</li>
</ul>
","<p>From <a href=""https://superuser.com/questions/537453/vim-copy-quoted-string-without-whitespace"">https://superuser.com/questions/537453/vim-copy-quoted-string-without-whitespace</a> : use <code>2i""</code> instead of <code>a""</code>. Also see <code>:help i'</code>.</p>
","11973"
"Emulate some of spacemacs leader keys in Vim","362","","<p>I now use Spacemacs Hybrid mode for local files but I often have to SSH into older machines that either do not have a modern Emacs (24) or only have Vim installed.</p>

<p>Thus I have gotten used to editing with vanilla Vim on these remote machines. That being said I have been aiming for some consistency these days and would like some of the Helm-like SPC leader key things to work on Vim so I was curious if anyone knows of a plugin for Vim out there that somewhat matches spacemacs (ie <kbd>space</kbd><kbd>b</kbd><kbd>d</kbd> instead of <code>:bd</code>).</p>

<p>I already have vimacs installed for my messed up ""hybrid"" mind. Just need the leader key mappings.</p>

<p><strong>TL;DR: make Vim a little more like spacemacs.</strong></p>
","<p>You could also try <a href=""https://github.com/liuchengxu/space-vim"" rel=""nofollow noreferrer"">space-vim</a>, which is intended for those who using vim and spacemacs at the same time. Its goal is to switch from spacemacs to vim painlessly.</p>

<p>What's more, <a href=""https://github.com/ctjhoa/spacevim"" rel=""nofollow noreferrer"">spacevim</a> is also a good choice. It can be seen as a full vim distribution or a set of key bindings similar to spacemacs. You can pick out one that suits you best.</p>
","11100"
"how to delete all white spaces until first character?","362","","<p>Is there a simple way to delete all white spaces on a line until the first character on that line is met?</p>

<p>An example:</p>

<pre><code>           #a list of comments
                # item 1
                # item 2
</code></pre>

<p>And I would like it to become: </p>

<pre><code>#a list of comments
# item 1
# item 2
</code></pre>

<p>I know how to delete n characters (ex: <code>8x</code>) and to repeat the command (<code>.</code>), but how could I do without having to input the number of white spaces?</p>
","<p>You can either visually select the lines and use</p>

<pre><code>:'&lt;,'&gt;s/^\s*//
</code></pre>

<p>Which means 'substitute all of the whitespaces following the first column of the line by nothing'</p>

<p>Or go on the first line, use </p>

<ul>
<li><kbd>0</kbd> to go on the first column</li>
<li><kbd>d^</kbd>  to delete until the first character of the line</li>
</ul>

<p>And then go to the next line and use the dot command</p>
","12682"
"Vim indent using ""="" inserts 2 tabs","362","","<p>If I try to indent a code using visual mode or <code>ggVG=</code> vi automatically inserts 2 tabs instead of just 1.</p>

<p>for example: </p>

<pre><code>// inside main
for (int i = 0; i &lt; 10; i++) {
    test += i;
}
</code></pre>

<p>changes to:</p>

<pre><code>        for (int i = 0; i &lt; 10; i++) {
                int test = 2;
        }
</code></pre>

<p>There are two tabs before <code>for</code> and <code>int</code>. I want a single tab. I have set:</p>

<pre><code>set noexpandtab
set tabstop=4
set softtabstop=0
set smartindent
</code></pre>

<p>is there any way to change the two tabs to one?</p>
","<p>Your 'shiftwidth' appears to still be set to the default value of 8. Try changing that to 4 to match your 'tabstop' setting:</p>

<pre><code>:set shiftwidth=4
</code></pre>

<p>See</p>

<pre><code>:help 'shiftwidth'
</code></pre>
","10153"
"How is command history resolved between multiple instances of Vim?","361","","<p>Vim keeps a history of ex commands (accessible via <kbd>:</kbd><kbd>↑</kbd> and <kbd>q</kbd><kbd>:</kbd>), and that history persists after quitting.</p>

<p>If I run multiple instances of Vim (same user, same home directory), how does Vim arbitrate between the command histories?  It seems that the last process to exit wins.  Is there a way to keep the command histories of all instances?</p>
","<p>The answer to your title question is what you observed. From the vim user manual <a href=""https://vimhelp.appspot.com/usr_21.txt.html#21.3"" rel=""nofollow""><code>:help 21.3</code></a></p>

<blockquote>
  <p>When you run Vim multiple times, the last one exiting will store its
  information.  This may cause information that previously exiting Vims
  stored to be lost.  Each item can be remembered only once.</p>
</blockquote>

<p>However, the filename of the viminfo file (where the command history is stored, among other things like global marks and register contents, if so configured) is changeable! This means that you can setup different 'histories' for different projects or instances of vim. Assuming you don't run more than one vim instance per project, managing the viminfo filename via vimrc (or other project settings plugin) is a great way to handle this.</p>

<h2>Setup alternative viminfo files</h2>

<p>For project level management, we want to configure vim to save your viminfo to a different file. This can be done within a running vim prior to quitting, or by your vimrc, for example you might have lines in your vimrc that detect a particular directory as belonging to a project.</p>

<pre><code>:set viminfo+=nPath/to/custom/viminfofile
</code></pre>

<p>An example of having vimrc automatically set this based on directory:</p>

<pre><code> if getcwd() == ""/projects/projA""
     set viminfo+=n~/.viminfo-projA
 endif
</code></pre>

<p>The result of the above is that the project-specific history will be loaded at startup and saved on exit, if vim is launched in the /projects/projA directory.</p>

<h2>Load an alternate viminfo during startup</h2>

<p>This is good for the case where you want to save your history to the side and load it later, without managing it at a project level.</p>

<p>First, to save the history, you add to the viminfo option as above prior to exiting. Then to load the history, launch vim with the -i option</p>

<pre><code>vim -i Path/to/custom/viminfofile
</code></pre>

<p>If you don't want to exit vim to save the viminfo file, you can use <code>:wv</code> (<code>:wviminfo</code>). This saves the viminfo file without exiting vim according to the n setting above. And, you can also do <code>:wv SomeOtherFile</code> to save to a location that isn't the same as the setting in the viminfo option. This may be more convenient than setting up the filename to use at exit, but doesn't stop vim from using the default file once it does exit.</p>

<p>For example, in first vim:</p>

<pre><code>:wv ~/customInfo
</code></pre>

<p>and in second terminal:</p>

<pre><code>vim -i ~/customInfo
</code></pre>

<p>Or, if a second vim is already running and you want to load the viminfo:</p>

<pre><code>:rv ~/customInfo
</code></pre>

<p>Note that <code>:wv</code> and <code>:rv</code> don't change the name of the file vim will save on exit nor the name of the file read during startup.</p>

<h2>Additional information</h2>

<p>Description of <code>set viminfo+=nSomePath</code>: We use the set command to adjust the option named <code>viminfo</code>. The <code>+=</code> indicates we want to append to the option, not change everything. We append the <code>n</code> option which specifies the filename for viminfo. Immediately after <code>n</code> we have <code>SomePath</code> which will be the filename used for saving viminfo.</p>

<p>The documentation for <code>wv</code> (<code>:help wv</code>) indicates that this command will first read the viminfo file, then merge between old and new information. So far I have no information about how the merging works in this case, but I'd guess it keeps marks for unknown files and registers that aren't set in the current session.</p>
","395"
"How to open a file with all folds opened?","361","","<p>I've got the following line in my <code>_vimrc</code> file which enables folding for my PHP (and other) files:</p>

<pre><code>set foldmethod=indent
</code></pre>

<p>However, whenever I open a file it starts with every fold closed, but I would like the file to start with its folds open.</p>

<p>How can I execute the command <code>zi</code> to open up folds when vim 7.4 is launched?</p>

<p>I tried putting this in the <code>_vimrc</code> but I get a pop up window with the error message:</p>

<pre><code>E492: The following is not an editor command: zi
</code></pre>

<p>How do I fix this?</p>
","<p><code>zi</code> inverts the option <code>foldenable</code>. Hence, you have to put the following in your .vimrc:</p>

<pre><code>set nofoldenable
</code></pre>
","4494"
"How do I use a variable with an ex command?","358","","<p>I wrote a moderately complex routine for Vim and I need to programmatically set the height of windows. </p>

<p>The way to do this is with <code>:resize [N]</code> as the help says. </p>

<p>But my invocation didn't work until I employed <code>exec</code>: </p>

<pre><code>exe `resize `.i[1]
</code></pre>

<p>The following doesn't work, it always resizes to a height of 1 instead of the required <code>i[1]</code>:</p>

<pre><code>resize i[1]
</code></pre>

<p>So I understand that <code>resize</code> takes a Number type and I am apparently feeding it a string, but I can't figure out how to avoid <code>exec</code>. </p>

<p>Maybe there's a trick I can use to use the <code>+</code> operator with <code>0</code>? In fact the Vim doc explicitly tells us to do this.</p>

<p>I tried it, but it doesn't work! It works with <code>echo</code> but not <code>res</code>. </p>

<p>Then I tried setting the value <code>i[1] + 0</code> to a variable and then using that. Indeed it seems that when I use <code>res</code>, it does not attempt to expand the value of variables. Really perplexing.</p>

<p>Is there another canonical fast way to convert an integer string into a Number? Perhaps some other thing is causing this unexpected behavior?</p>
","<p>You can't use a variable directly with <code>:res</code>. Compare the help text for <a href=""http://vimhelp.appspot.com/window.txt.html#%3Ares"" rel=""noreferrer""><code>:res</code></a>, <a href=""http://vimhelp.appspot.com/change.txt.html#%3Asubstitute"" rel=""noreferrer""><code>:s</code></a>, <code>:echo</code> and <a href=""http://vimhelp.appspot.com/eval.txt.html#%3Aexecute"" rel=""noreferrer""><code>:exe</code></a>:</p>

<pre><code>:res[ize] -N                                    :res :resize CTRL-W_-
CTRL-W -        Decrease current window height by N (default 1).
</code></pre>

<hr>

<pre><code>:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]
                        For each line in [range] replace a match of {pattern}
                        with {string}.
                        For the {pattern} see pattern.
                        {string} can be a literal string, or something
                        special; see sub-replace-special.
</code></pre>

<hr>

<pre><code>                                                        :ec :echo
:ec[ho] {expr1} ..      Echoes each {expr1}, with a space in between.  The
                        first {expr1} starts on a new line.
                                                        :exe :execute
:exe[cute] {expr1} ..   Executes the string that results from the evaluation
                        of {expr1} as an Ex command.
</code></pre>

<hr>

<p>The text uses <code>expr1</code> for <code>echo</code> and <code>exe</code>, but nothing of the sort for the other commands. For <code>:s</code>, it's specially stated that the replacement can be <a href=""http://vimhelp.appspot.com/change.txt.html#sub-replace-special"" rel=""noreferrer"">something special</a>:</p>

<pre><code>                                        sub-replace-special :s\=
When the {string} starts with ""\="" it is evaluated as an expression, see
sub-replace-expression.  You can use that for complex replacement or special
characters.
</code></pre>

<p>In short, unless the command is expected to be followed by an <em>expression</em>, don't expect variables to evaluated.</p>

<p><code>:exe</code> is the way to go, in this case.</p>

<hr>

<p>By the way, you don't need to use <code>.</code> here, the following will work the same:</p>

<pre><code>:exe 'resize' i[1]
</code></pre>

<p><code>exe</code> implicitly joins arguments with spaces. It's when you <em>don't</em> want the sapce that you should use <code>.</code> with <code>exe</code> arguments.</p>
","7141"
"Position cursor at end of line in insert mode","358","","<p>(This question pertains to <code>nvi</code> instead of <code>vim</code>.)</p>

<p>To facilitate editing, I created the following mappings
<code>map! ( (?)@^[F?xi
map! [ [?]@^[F?xi
map! { {?}@^[F?xi
</code>
so that entering <code>(</code> will insert <code>(|)@</code>, where <code>|</code> denote the cursor position (in insert mode).</p>

<p>Now, what I want is that when I press <code>&lt;TAB&gt;</code>, the cursor will jump to the <code>@</code>, delete it, and go into insert mode. For this, I created the mapping</p>

<p><code>map! ^V^I ^[f@xi
</code></p>

<p>But this works <em>only when @ is <strong>not</strong> the last character in the line</em>. 
Likewise, </p>

<p><code>map! ^V^I ^[f@xa
</code></p>

<p>only works <em>when @ <strong>is</strong> the last character in the line</em>. </p>

<hr>

<p>The problem is that the position of the cursor after <code>x</code> is different depending on whether the last character was removed. </p>

<p>What would solve this problem is if there is another command <code>α</code> (say) such that <code>α</code> acts as <code>i</code> or <code>a</code> depending the cursor is at the end of the line; as far as I know, no such <code>α</code> exists.</p>

<p>What can I do?</p>
","<p>Once the cursor is on the <code>@</code> you can press <code>s</code> to ""substitute"" the current character. This will delete the current character and leave you in insert mode.</p>

<p>Basically, you could replace all your <code>xi</code> and <code>xa</code> with <code>s</code>:</p>

<pre><code>map! [ [?]@^[F?s
map! { {?}@^[F?s

map! ^V^I ^[f@s
</code></pre>
","5353"
"How to map NUM keys?","357","","<p>I am using Vim version 7.4 from 2012-Dez-06 of Ubuntu 16.04 and I use PuTTY 0.67 on W10. I want to map the keys of the NUM pad in <code>.vimrc</code>. This doesn't work:</p>

<pre><code>map &lt;k1&gt; COMMAND
map k1 COMMAND
map &lt;C-k1&gt; COMMAND
map &lt;S-k1&gt; COMMAND
map *keypad-1* COMMAND
map keypad-1 COMMAND
</code></pre>

<p>If I do for example:</p>

<pre><code>map 1 dd
</code></pre>

<p>it works and the line is deleted if I hit <code>1</code>. </p>

<p>If I hit in vi the NUM buttons I get q, r, s, t ... If I map <code>q</code> to a command only the normal <code>q</code> button will execute the command but not <code>1</code> on the NUM pad.
My <code>.vimrc</code> is:</p>

<pre><code># cat ~/.vimrc
syntax on
set t_Co=256
colorscheme elflord
if &amp;diff
    colorscheme apprentice
endif
</code></pre>

<p>The h keycodes (Thanks to Ashok) is:</p>

<pre><code>Notation        Bedeutung                   Äquivalent  Dezimale/r Wert/e   ~
-----------------------------------------------------------------------
&lt;Nul&gt;           Null                    CTRL-@    0 (gespeichert als 10) *&lt;Nul&gt;*
&lt;BS&gt;            Zeichenrückschritt      CTRL-H    8     *backspace*
&lt;Tab&gt;           Tabulator               CTRL-I    9     *tab* *Tab*
                                                        *linefeed*
&lt;NL&gt;            Zeilenvorschub          CTRL-J   10 (benutzt für &lt;Nul&gt;)
&lt;FF&gt;            Seitenvorschub          CTRL-L   12     *formfeed*
&lt;CR&gt;            Wagenrücklauf           CTRL-M   13     *carriage-return*
&lt;Return&gt;        dasselbe wie &lt;CR&gt;                               *&lt;Return&gt;*
&lt;Enter&gt;         dasselbe wie &lt;CR&gt;                               *&lt;Enter&gt;*
&lt;Esc&gt;           Fluchttaste             CTRL-[   27     *escape* *&lt;Esc&gt;*
&lt;Space&gt;         Leertaste                        32     *space*
&lt;lt&gt;            weniger-als             &lt;        60     *&lt;lt&gt;*
&lt;Bslash&gt;        Backslash               \        92     *backslash* *&lt;Bslash&gt;*
&lt;Bar&gt;           vertikaler Strich       |       124     *&lt;Bar&gt;*
&lt;Del&gt;           Löschen                         127
&lt;CSI&gt;           Befehlsfolgeneinleiter  ALT-Esc 155     *&lt;CSI&gt;*
&lt;xCSI&gt;          CSI in der GUI getippt                  *&lt;xCSI&gt;*

&lt;EOL&gt;           Zeilenende (kann &lt;CR&gt;, &lt;LF&gt; oder &lt;CR&gt;&lt;LF&gt; sein, hängt ab vom
                System und 'fileformat')        *&lt;EOL&gt;*

&lt;Up&gt;            Cursor rauf                     *cursor-up* *cursor_up*
&lt;Down&gt;          Cursor runter                   *cursor-down* *cursor_down*
&lt;Left&gt;          Cursor links                    *cursor-left* *cursor_left*
&lt;Right&gt;         Cursor rechts                   *cursor-right* *cursor_right*
&lt;S-Up&gt;          Umschalttaste Cursor rauf
&lt;S-Down&gt;        Umschalttaste Cursor runter
&lt;S-Left&gt;        Umschalttaste Cursor links
&lt;S-Right&gt;       Umschalttaste Cursor rechts
&lt;C-Left&gt;        Steuerung Cursor links
&lt;C-Right&gt;       Steuerung Cursor rechts
&lt;F1&gt; - &lt;F12&gt;    Funktionstaste 1 bis 12         *function_key* *function-key*
&lt;S-F1&gt; - &lt;S-F12&gt; Umschalttaste Funktionstaste 1 bis 12  *&lt;S-F1&gt;*
&lt;Help&gt;          Hilfetaste
&lt;Undo&gt;          Undo-Taste
&lt;Insert&gt;        Einfügetaste
&lt;Home&gt;          Anfang                          *home*
&lt;End&gt;           Ende                            *end*
&lt;PageUp&gt;        Bild rauf                               *page_up* *page-up*
&lt;PageDown&gt;      Bild runter                             *page_down* *page-down*
&lt;kHome&gt;         Anfang auf dem Ziffernblock (oben links)*keypad-home*
&lt;kEnd&gt;          Ende auf dem Ziffernblock (unten links) *keypad-end*
                                                        *keypad-page-up*
&lt;kPageUp&gt;       Bild rauf auf dem Ziffernblock (oben rechts)
                                                        *keypad-page-down*
&lt;kPageDown&gt;     Bild runter auf dem Ziffernblock (unten rechts)
&lt;kPlus&gt;         + auf dem Ziffernblock                  *keypad-plus*
&lt;kMinus&gt;        - auf dem Ziffernblock                  *keypad-minus*
&lt;kMultiply&gt;     * auf dem Ziffernblock                  *keypad-multiply*
&lt;kDivide&gt;       / auf dem Ziffernblock                  *keypad-divide*
&lt;kEnter&gt;        Enter auf dem Ziffernblock              *keypad-enter*
&lt;kPoint&gt;        Dezimalzeichen auf dem Ziffernblock     *keypad-point*
&lt;k0&gt; - &lt;k9&gt;     0 bis 9 auf dem Ziffernblock            *keypad-0* *keypad-9*
&lt;S-...&gt;         Umschalttaste                   *shift* *&lt;S-*
&lt;C-...&gt;         Steuerungstaste                 *control* *ctrl* *&lt;C-*
&lt;M-...&gt;         Alt-Taste oder Meta-Taste       *meta* *alt* *&lt;M-*
&lt;A-...&gt;         dasselbe wie &lt;M-...&gt;            *&lt;A-*
&lt;D-...&gt;         Befehlstaste (nur Macintosh)    *&lt;D-*
&lt;t_xx&gt;          Taste mit dem Eintrag »xx« in der TermCap
</code></pre>

<p>I am using Putty with ssh and the folowing keyboard setting:
. . . </p>

<p><a href=""https://i.stack.imgur.com/rN4nD.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rN4nD.jpg"" alt=""enter image description here""></a>
How can I map the keys of the numeric key pad?</p>
","<p>The default settings of PuTTY are just fine. Do not change anything in <code>PuTTY-&gt; Terminal -&gt; Keyboard</code> (see above) or disable in <code>PuTTY-&gt; Terminal -&gt; Features</code> anything:</p>

<p><a href=""https://i.stack.imgur.com/is7Wh.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/is7Wh.jpg"" alt=""enter image description here""></a></p>

<p>You can map in vi the NUM keys in the following way:</p>

<pre><code>inoremap &lt;Esc&gt;Oq 1
inoremap &lt;Esc&gt;Or 2
inoremap &lt;Esc&gt;Os 3
inoremap &lt;Esc&gt;Ot 4
inoremap &lt;Esc&gt;Ou 5
inoremap &lt;Esc&gt;Ov 6
inoremap &lt;Esc&gt;Ow 7
inoremap &lt;Esc&gt;Ox 8
inoremap &lt;Esc&gt;Oy 9
inoremap &lt;Esc&gt;Op 0
inoremap &lt;Esc&gt;On .
inoremap &lt;Esc&gt;OQ /
inoremap &lt;Esc&gt;OR *
inoremap &lt;Esc&gt;Ol +
inoremap &lt;Esc&gt;OS -
inoremap &lt;Esc&gt;OM &lt;Enter&gt;
</code></pre>

<p>This setting is an example for using the NUM key as they should be. Of course you can change the mappings as usual.</p>
","10247"
"Set the paste option, but for one insertion only","357","","<p>I want to have a quick way of setting the Vim <a href=""http://vimdoc.sourceforge.net/htmldoc/options.html#&#39;paste&#39;""><code>'paste'</code></a> option, inserting some text, and reverting to the previous value of <code>'paste'</code>.</p>

<p>A typical use case insert the OS clipboard content literally, regardless of any insert mode rewriting that may be active, such as automatic indentation, and without changing the state of Vim. Another use case would be to allow an OS macro feature to inject keystrokes into Vim and have them interpreted as literal text.</p>

<p>This obviously generalizes to other options — the general idea is to set some options but only for the duration of one trip through insert mode.</p>

<p>Basically I want to bind a key sequence (say <code>_i</code>) to a macro that does this</p>

<pre><code>:set paste
i…&lt;Esc&gt;
:set nopaste
</code></pre>

<p>where by <code>i…&lt;Esc&gt;</code> I mean switch to insert mode (as with the <code>i</code> command) and resume the macro upon return to command mode, except that I want to end up with the <code>'paste'</code> still active if it was active beforehand. How can I do this?</p>

<p><sub>
Note: The content of the OS clipboard is mapped to the <a href=""http://vimdoc.sourceforge.net/htmldoc/gui.html#clipboard""><code>""*</code> register</a>. When that works, the <code>'paste'</code> option isn't very useful. The motivating scenario for this question is for those times when the conditions for <code>""*</code> register support are not met — Vim isn't compiled with the <a href=""http://vimdoc.sourceforge.net/htmldoc/various.html#+xterm_clipboard""><code>+xterm_clipboard</code></a> feature, or it's running in a terminal such as Screen or over SSH which isolates it from the ambient X server.
</sub></p>
","<p>Give this a try:</p>

<pre><code>function! Paste_Func()
    let s:inPaste = &amp;paste
    if !s:inPaste
        set paste
    endif

    echom s:inPaste
    augroup paste_callback
        autocmd!
        autocmd InsertLeave &lt;buffer&gt; call Paste_End()
    augroup END

    startinsert
endfunction

function! Paste_End()
    augroup paste_callback
        autocmd!
    augroup END
    augroup! paste_callback

    if !s:inPaste
        set nopaste
    endif
endfunction

map _i :call Paste_Func()&lt;cr&gt;
</code></pre>

<p>It stores your current paste status in the inPaste variable and sets paste if it isn't already set. Then it sets up an autocmd for when you leave insert mode, and then puts you in insert mode.</p>

<p>When you leave insert mode it runs the autocmd, which first removes the autocmd (so it doesn't get run when you leave insert mode any other way), and finally sets nopaste if you were not in paste mode originally. </p>

<p>Also, if you are using vim in a terminal, you may want to take a look at <a href=""https://github.com/ConradIrwin/vim-bracketed-paste"">vim-bracketed-paste</a>, which uses the <a href=""http://cirw.in/blog/bracketed-paste"">bracketed paste mode</a> feature provided by several terminal emulators to detect if you are pasting and set the mode automatically. </p>

<p>Edit: fixed the script</p>
","348"
"Using :TOhtml with solarized colorscheme","356","","<p>I am using <a href=""https://github.com/altercation/vim-colors-solarized"" rel=""nofollow"">altercation's vim-solarized plugin</a> to set my default colorscheme and have set my xterm to use solarized colors as well.</p>

<p>When I try to run <code>:TOhtml</code> on a buffer, say on $MYVIMRC, the resulting html file has different colors than it is supposed to have. </p>

<p>How can I get the ""right"" colors/colorscheme for the html file?</p>
","<p>You can't get the ""right"" colors in a terminal emulator because the colors used for highlighting are defined as ""red"" or ""bright cyan"" which are then user-defined at the terminal emulator level and could mean <em>anything</em>, especially in the case of Solarized where ""bright cyan"" is actually a freaking grey.</p>

<p>You can get the ""right"" colors in GVim, though, because syntax highlighting is done with fixed values.</p>
","4478"
"How to format a mapping to an if statement?","355","","<p>I'm had some trouble defining a mapping in my .vimrc. I want <code>&lt;leader&gt;sv</code> to source my .vimrc, but first I want to write, if I'm currently editing it.</p>

<h3>Goal</h3>

<p>The intention of the code is this:</p>

<pre><code>if expand('%:p') ==? expand($MYVIMRC)
    write
endif
source $MYVIMRC&lt;cr&gt;
</code></pre>

<h3>Attempt 1</h3>

<p>I tried writing my commands inline with pipes:</p>

<pre><code>nnoremap &lt;leader&gt;sv :if expand('%:p') ==? expand($MYVIMRC) | write | endif | source $MYVIMRC&lt;cr&gt;
</code></pre>

<p>But I get this error when I load it:</p>

<pre><code>Error detected while processing /Users/jack/.vimrc:
E580: :endif without :if:  endif
</code></pre>

<h3>Attempt 2</h3>

<p>I also tried:</p>

<pre><code>let s:source_vimrc='if expand('%:p') ==? expand($MYVIMRC) | write | endif | source $MYVIMRC'
nnoremap &lt;leader&gt;sv :exec(s:source_vimrc)&lt;cr&gt;
</code></pre>

<p>which got me:</p>

<pre><code>E15: Invalid expression: 'if expand('%:p') ==? expand($MYVIMRC) | write | endif | source $MYVIMRC'
</code></pre>

<h3>Attempt 3 (working)</h3>

<p>The only way I can get it to work is using <code>&lt;cr&gt;</code> to simulate typing the whole thing out across multiple lines:</p>

<pre><code>nnoremap &lt;leader&gt;sv :if expand('%:p') ==? expand($MYVIMRC) &lt;cr&gt; :write &lt;cr&gt; :endif &lt;cr&gt; :source $MYVIMRC&lt;cr&gt;
</code></pre>

<h3>Attempt 4 (sort of?)</h3>

<pre><code>nnoremap &lt;leader&gt;sv :if expand('%:p') ==? expand($MYVIMRC) &lt;bar&gt; write &lt;bar&gt; endif &lt;bar&gt; source $MYVIMRC&lt;cr&gt;
</code></pre>

<p>That does it, but leaves me with <code>Press Enter or type command to continue</code> instead of returning to normal mode.</p>

<h3>Questions</h3>

<p><del>Do mappings not support pipes for multiple commands? Or do <code>if</code>s not? Why didn't the first one work like I expected?</del><br>
A: Because the pipes are interpreted as new commands in the file. Use <code>&lt;bar&gt;</code> to get them written to the command line.</p>

<p>Why doesn't #4 return me to normal mode? When I type in the command (with <code>|</code>s), it does.</p>

<p>Note: I'm open to suggestions for better ways to accomplish this, too.</p>
","<p>This is where <code>&lt;expr&gt;</code> mappings are useful. From <code>:h &lt;expr&gt;</code></p>

<pre><code>                        *:map-&lt;expr&gt;* *:map-expression*
If the first argument to one of these commands is ""&lt;expr&gt;"" and it is used to
define a new mapping or abbreviation, the argument is an expression.  The
expression is evaluated to obtain the {rhs} that is used.  Example: &gt;
    :inoremap &lt;expr&gt; . InsertDot()
The result of the InsertDot() function will be inserted.  It could check the
text before the cursor and start omni completion when some condition is met.
</code></pre>

<p>You can just use <code>expand('%:p') ==? expand($MYVIMRC)</code> in a ternary expression to find out if you want to write or not, and the concatenate that with <code>source ($MYVIMRC)</code>. Try this:</p>

<pre><code>nnoremap &lt;expr&gt; &lt;leader&gt;sv (expand('%:p') ==? expand($MYVIMRC) ? "":w \|"" : "":"").""source $MYVIMRC&lt;cr&gt;""
</code></pre>

<p>If you run this in your <code>.vimrc</code>, it will evaluate to</p>

<pre><code>:w | source $MYVIMRC
</code></pre>

<p>Otherwise, it will evaluate to</p>

<pre><code>:source $MYVIMRC
</code></pre>

<p>This is assuming you want to source your vimrc either way (which I assume you do from the mappings you have shown). If not, you could just do</p>

<pre><code>nnoremap &lt;expr&gt; &lt;leader&gt;sv expand('%:p') ==? expand($MYVIMRC) ? "":w \| source $MYVIMRC&lt;cr&gt;"" : """"
</code></pre>
","9575"
"CtrlP should never index particular directories","354","","<p>My projects are in:</p>

<pre><code>/home/user/projectA
/home/user/projectB
</code></pre>

<p>However, at times I hit CtrlP and I haven't opened a file in a particular project, so my working directory is <code>/home/user</code>. CtrlP starts indexing this whole directory, which is huge and takes a whole lot of time every time I accidentally hit CtrlP. How can I avoid this? I have seen that I can exclude files and directories using Vim's wildignore and CtrlP's own g:ctrlp_custom_ignore, but that doesn't work as I can't ignore a parent directory and still search in a child directory. Any ideas?</p>

<p>Alternatively, I would also be happy with Vim automatically making <code>/home/user/projectA</code> the default working directory, just to avoid ever having <code>/home/user</code> as the working directory.</p>
","<p>2 ways of doing that:</p>

<ul>
<li>On your terminal, move to your project directory then execute vim.</li>
<li>Manually specify the working directory into vim using <code>:cd</code> command (You can check the current working directory with <code>:pwd</code>).</li>
</ul>

<h2>Extra</h2>

<h3>CtrlP</h3>

<p>If you're using <a href=""https://stackoverflow.com/questions/18285751/use-ag-in-ctrlp-vim""><code>ag</code> with ctrlp</a>, you can create a <code>.agignore</code> file into your working directory, and specify there what ctrlp should ignore and not index.</p>

<h3>A little but useful vim command</h3>

<p>In my vimrc I have the following command:</p>

<pre><code>command! Dir :cd %:p:h
</code></pre>

<p>So with <code>Dir</code> I can set the current vim working directory to the current file's path, its useful sometimes.</p>

<hr>

<p><strong>EDIT:</strong></p>

<p>You can use vim autocommands (<code>h autocmd</code>) to automate the process.</p>

<p>Example if you want to make <code>/path/project</code> be your cwd in each vim start, add then to your vimrc:</p>

<pre><code>autocmd VimEnter * :cd /path/project
</code></pre>

<p>The event <code>VimEnter</code> is quite understandable (<code>h autocmd-events</code>).</p>
","5102"