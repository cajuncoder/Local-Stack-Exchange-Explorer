title,viewcount,title,body,body,acceptedanswerid
"I lost the source code for programs I released as GPL. What to do?","28966","","<p>I wrote a software utility I released freely as GPL on a separate machine some ten years ago.  But the machine I wrote it on is lost, and I can't find the source code on any of my backups.  I am still searching for it.</p>

<p>Two people have contacted me asking for the corresponding source (and one of them specifically mentioned they are exercising their rights granted by the GPL).</p>

<p>How do I properly reply to these people?  And more seriously, am I in legal trouble?</p>

<p>The program was standalone, written from scratch by me.</p>
","<p>If you <em>wrote the program</em> yourself (as opposed to having modified somebody else's program or incorporated parts of somebody else's program(s)) and simply licensed it to others under the GPL, then you are <em>in no way obligated to do anything by the GPL</em>. It's unfortunate that you're missing the source and that others who want it are unable to obtain it, but it's not a legal matter. The GPL governs what others who redistribute or prepare derived works of your program must do in order not to infringe your rights under copyright law; it does not impose requirements on you as the author.</p>
","5913"
"Can GPL licenced software be used in corporate environments?","16021","","<p>If software is licenced under a <a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"">GPL</a> license, can it be used without restriction in a corporate/commercial environment? The software that I am refering to is QGIS which provides this description:</p>

<blockquote>
  <p><a href=""https://www.qgis.org/en/site/about/#"">QGIS</a> is a user friendly Open Source Geographic Information System (GIS) licensed under the GNU General Public License. QGIS is an official project of the Open Source Geospatial Foundation (OSGeo)</p>
</blockquote>

<p>I am of the understanding that it can be used (that the software is still considered free and opensource), while others in my office think differently when it is used in a commercial/corporate environment. They believe that once the software is used in a commercial environment, it is no longer considered free and falls under a difference licence (they didn't actually specify a difference licence, but was rather what would they believe would occur). We are not selling the software, but rather use it for analysis.</p>

<p>Would anyone be able to shed some light on the subject to help clear things up?</p>
","<p>Software licensed with any GNU license can be used and even modified everywhere, including in a corporate environment, without any restrictions.</p>

<p>However be aware that if you (or the company) ever make changes to the software and want to distribute it, it must be distributed with full source code, on the same license terms as the original software.</p>

<p>Also if you make changes to the software and it is licensed using Affero license (eg. AGPL 3.0), and your company is providing web access to this software, then you'll also be required to publish full source code (including your changes).</p>
","1400"
"What are the essential differences between BSD and MIT licences?","11423","","<p>There are many articles out there which cover the topic in length and breadth but so far I haven't found a nice concise answer to the question. </p>

<p>What are the most important differences between the BSD and MIT license and in what way do their intended use specifically differ?</p>
","<p>When talking about BSD license, you have to be aware that there is not one, but actually three different BSD licenses. The most basic is the <strong>two-clause BSD</strong> license:</p>

<blockquote>
  <p>Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:</p>
  
  <ol>
  <li>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</li>
  <li>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the
  documentation    and/or other materials provided with the
  distribution.</li>
  </ol>
</blockquote>

<p>The <strong>three-clause BSD</strong> license adds this clause:</p>

<blockquote>
  <p>Neither the name of the [organization] nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.</p>
</blockquote>

<p>And the <strong>four-clause BSD</strong> license also this clause:</p>

<blockquote>
  <p>All advertising materials mentioning features or use of this software
     must display the following acknowledgement:
     This product includes software developed by the [organization].</p>
</blockquote>

<p>The <strong>MIT license</strong> does not contain any clauses regarding promotion and advertising material, so it is most similar to the 2-clause BSD license:</p>

<blockquote>
  <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
  
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>So what both the 2-clause BSD license and the MIT license have in common are:</p>

<ul>
<li>Permits use</li>
<li>Permits redistribution</li>
<li>Permits redistribution with modification</li>
<li>Provision to retain the copyright notice and warranty disclaimer</li>
</ul>

<p>In addition the MIT license also explicitly allows:</p>

<ul>
<li>merging</li>
<li>publishing</li>
<li>sublicensing</li>
<li>selling</li>
</ul>

<p>However, all these freedoms are implied by the BSD license, because all these activities can be considered ""use"" and/or ""redistribution"" of the software.</p>

<p>The practical differences between the 2-clause BSD license and the MIT license are marginal. Which one to pick is mostly up to personal taste. Especially considering that both licenses are considered compatible, so you can take code under one license and use it in a project under the other, as long as you keep the license text around.</p>
","582"
"Can I use GPL libraries in a closed source project if only the output is distributed?","9776","","<p>If I create a closed source application which uses some GPL licensed libraries but don't actually distribute the software, only its output, can I keep the software closed sourced?</p>

<p>Specifically, I am talking about a biological data analysis pipeline. Internally, our software will be using some GPL libraries to generate its output. However, the software itself will not be distributed. Users will either receive a virtual machine with the pipeline set up which they can run locally, or submit their input data to us and access their results from a web interface. </p>

<p>In other words, the product distributed is not really the software itself but its output. If the software is calling dynamically linked, GPL licensed libraries, will I need to make the entire project GPL?</p>

<p>I have read the GPL FAQ and I think that <a href=""http://www.gnu.org/licenses/gpl-faq.html#UnreleasedMods"">this one</a> may apply:</p>

<blockquote>
  <p><em>A company is running a modified version of a GPL'ed program on a web site. Does the GPL say they must release their modified sources? (#UnreleasedMods)</em></p>
  
  <p>The GPL permits anyone to make a modified version and use it without ever distributing it to others. What this company is doing is a special case of that. Therefore, the company does not have to release the modified sources.</p>
  
  <p>It is essential for people to have the freedom to make modifications and use them privately, without ever publishing those modifications. However, putting the program on a server machine for the public to talk to is hardly “private” use, so it would be legitimate to require release of the source code in that special case. Developers who wish to address this might want to use the GNU Affero GPL for programs designed for network server use.</p>
</blockquote>

<p>If I understand the above correctly, that means that using it internally to produce the data served by the web portal would be OK. If so, how about when I distribute the VM with the software set up? Would that constitute ""distribution"" of the software? </p>
","<p>This is a great question and speaks to a lot of confusion about the GPL. The answer is mostly ""yes"" here, but since the GPL is frequently seen as very scary, it is important to understand <em>why</em> this is allowed.</p>

<h1>The GPL is about ownership</h1>

<p>The abstract purpose of GPL software is for people to have <strong>full ownership of their computers</strong>. What I mean is that typically, legally speaking, you (the ""end user"" of the computer) own the hardware of your computer: you can throw it out of a window or install whatever software you want on it. But you usually don't own the many pieces of <em>software</em> running on your computer, which follow so-called <em>intellectual property</em> laws. Because of this, the authors of that software can say ""Hey: you can't peek inside of this code that's running on your computer. You can't mess around with that."" And I mean anyone can <em>say</em> that but in this case they can <em>back it up with a lawsuit</em> if you don't listen.</p>

<p>You will probably never own all of the software that you run, but on a program-by-program basis that is what GPL software is trying to provide. The GPL starts from the following ideological position: ""You have this computer with these programs that you have bought, and you should be able to inspect and modify those programs, so that your computer does exactly what you want it to do. You legitimately, fully own it: it's not <em>on loan</em> from some mega-corporation. You can do whatever you want with this chunk of code: you can debug it, share it with a friend, increment all the bytes by 1 to see what that does, play it as a static-sounding symphony, or print it onto underwear."" (There is a legal corner which you can't own, which is the ability to strip the copyright and software from their lawful owners: that is pretty much endemic to the system and kind of a non-starter.)</p>

<p>Software licenses will either <em>get in the way</em> of this full ownership (as proprietary ones often do) or <em>facilitate</em> full ownership (as open-source ones often do). And when they facilitate, they might try to also facilitate <em>other peoples' full ownership of copies</em> (as copyleft ones like GPL do) or just <em>your full ownership</em> (as non-copyleft ones like BSD, MIT, LGPL do). Non-copyleft licenses are particularly simple and are usually much easier to read. They generally say something like: ""Here is this software. We hold the copyright. It is a condition of this license that you promise not to sue us for anything. We promise not to sue you for anything either."" </p>

<p>Copyleft licenses have to be a little more complicated, they have to say something like ""We reserve the right to sue you if you hand a copy of this software to someone else and pretend that you have the right to sue them over it. Don't do that."" In this sense copyleft licenses use lawsuits defensively to try to reduce the global number of intellectual property lawsuits: they resist attempts to ""re-proprietarize"" their code. And this is why you are concerned; you are worried that you might fall afoul of this if you share the output of your software.</p>

<h1>The code is the real concern</h1>

<p>Here's a common misconception: the GPL emphatically does <strong>not</strong> say ""anyone who modifies the source code must release their modifications for free to the public."" In fact until very recently with the advent of GitHub, publishing software publicly was a really difficult task; and the fact that it's a little easier now doesn't stop that from being, in a general sense, a <em>barrier to your ownership</em> of that software. The GPL, which hates those sorts of barriers, does not and would not ever require such a barbarous thing.</p>

<p>What <em>does</em> it say? It says, ""if you hand this program with your modifications to someone else, you have to give <em>them</em> (and only them!) free access to the modified source code under this license, so that they can fully own their computers just the same as you could."" There are two similarities to what most people are expecting; there are also two differences. The similarities are: (1) most people are expecting the source code to be free; (2) most people are expecting that it does not matter whether you send a compiled or source-code form. The differences are: (1) this sharing is not triggered by <em>modification</em> but by <em>transmission</em> and (2) this sharing is not intrinsically public (though you can't control what the recipient does with it and the recipient can share it publicly). But notice that the publishing burden is now offset because you are <em>already transmitting something</em> to the recipient and this just requires you to <em>also</em> offer to transmit the source code alongside that. Also notice that while the <em>source</em> code must be free the <em>transmission</em> can cost whatever you want: the financial cost of releasing the source to this other person is merely expected to be covered by the amount they paid you for you to hand them the software in the first place. </p>

<p>Therefore: If this program runs on your server, nobody else's, and other people only interact with the program by sending packets to your server, usually <em>no source code release is needed.</em> That's your computer, nobody else's. Since the GPL code doesn't execute on anyone else's machine, they cannot demand to see the source for the running program. There <em>are</em> exceptions but they consist of programs which transmit GPLed parts of their own source code to the client so that the client can run them; these need to satisfy the GPL of course.</p>

<h1>The GPL also allows a lot of strange things</h1>

<p>Suppose you gave someone else a computer program that you modified as GPL, but you are very worried about them sharing the source code. This is usually an unreasonable concern; Bryan Cantrill (former software engineer at Sun and Oracle working on Solaris, now CTO of Joyent) has pointed out on some occasions that (a) your competitor companies <em>would usually rather die than use your software</em> and that (b) open-source software has the very nice property that it becomes effectively immortal while proprietary software can and will die whenever the proprietors declare ""it's no longer in our financial interests to keep developing and supporting this software; bye!"" without open-sourcing that software (which can itself be a mammoth task if parts were contracted out to others).</p>

<p>But if it <em>is</em> still a concern there are some interesting options. For example some medical devices run a combination of proprietary and GPL software, but make it clear that the hospital who is buying that device <em>is renting it out from the company</em>, perhaps for a one-time fee: the company still owns the device and therefore they do not have to share the source code. Or, in the comments,
 <a href=""https://opensource.stackexchange.com/users/3913/perkins"">@perkins</a> suggests that you might hand over the source code but that you also might say ""hey, if you DO mess with any of this code, I will refuse to support it or send you any new updates I write."" In this respect someone might desire their working relationship with you more than they desire to use their legal freedoms. Finally, there is an isomorphism between data structures and the control structures that consume them, so very often you may see a ""platform"" that is GPL but there are totally-optional ""plugins"" or ""modules"" which are proprietary.</p>

<p>Again, this is usually <em>not</em> what you want to do and you are usually underestimating how proud your competitors are. But those options do exist.</p>
","2343"
"How does GitHub's ""forking right"" cope with an ""All rights reserved"" project?","7569","","<p><a href=""https://help.github.com/articles/open-source-licensing/#what-happens-if-i-dont-choose-a-license"" rel=""noreferrer"">The GitHub FAQ states</a> (emphasis mine):</p>

<blockquote>
  <p>You're under no obligation to choose a license. It's your right not to
  include one with your code or project, but please be aware of the
  implications. Generally speaking, the absence of a license means that
  <strong>the default copyright laws apply</strong>. This means that you retain all
  rights to your source code and that nobody else may reproduce,
  distribute, or create derivative works from your work. This might not
  be what you intend.</p>
  
  <p>Even if this is what you intend, if you publish your source code in a
  public repository on GitHub, you have accepted the Terms of Service
  which do allow other GitHub users some rights. Specifically, <strong>you allow
  others to view and fork your repository</strong>.</p>
  
  <p>If you want to share your work with others, we strongly encourage you
  to include an open source license.</p>
</blockquote>

<p>So, if a project is ""all rights reserved"", but then users have the ""right to fork"" it, what's the license of the new fork?</p>
","<p>First of all, these two statements are made in sequence, not parallel (credit to <a href=""https://opensource.stackexchange.com/users/485/msalters"">MSalters</a> for <a href=""https://opensource.stackexchange.com/questions/1154/how-does-githubs-forking-right-cope-with-an-all-rights-reserved-project/1157#comment1978_1157"">crystallizing this point</a>):</p>

<blockquote>
  <p><strong>Generally speaking</strong>, the absence of a license means that the default copyright laws apply.</p>
  
  <p>...<strong>if you publish your source code in a public repository on GitHub</strong>... you allow others to view and fork your repository.</p>
</blockquote>

<ul>
<li>The first statement is a <em>general</em> statement about copyright law. </li>
<li>The second statement is about a license grant required by the GitHub Terms of Service.</li>
</ul>

<p>They are both true, and if you host your code on GitHub, the second, specific statement takes precedence over the first general rule wherever the second rule applies. The second statement is a notice that hosting on GitHub requires you to make certain license grants to GitHub users which differ from the default rules of copyright.</p>

<p>Below is an inspection of what the ""right to fork"" could possibly mean, which will clarify the question: ""What's the license of the new fork?""</p>

<hr>

<p>(<em>This is not legal advice. Furthermore, this is barely <strong>regular</strong> advice, and is based on a speculative -- but coherent -- reading of some ambiguity in the GitHub TOS.</em>)</p>

<p>Here's what the <a href=""https://help.github.com/articles/github-terms-of-service/"" rel=""noreferrer"">GitHub Terms of Service</a> has to say about forking:</p>

<blockquote>
  <p>By setting your repositories to be viewed publicly, you agree to allow others to view and fork your repositories.</p>
</blockquote>

<p><strong>The term ""fork"" is not defined anywhere in the GitHub Terms of Service</strong>, but it seems perfectly sensible to assume that ""fork"" here is meant in the sense that it is used elsewhere on github.com: the Fork button.</p>

<p><img src=""https://i.stack.imgur.com/lr4ml.png"" alt=""a &quot;Fork&quot; button on a GitHub repository page""></p>

<p>GitHub <em>probably</em> intends ""the right to fork"" to mean ""the right to use the Fork feature of the github.com website."" In this case, ""creating a fork"" would <em>not</em> mean generally creating a copy or derivative work (as it does in general FLOSS parlance), but rather it means <em>triggering the software of github.com to create and host a verbatim copy of a repository</em> and categorize that copy under the user's list of forks.</p>

<p>If the original copyright owner doesn't license any other permissions, clicking that button is all that the TOS-required permission allows the user to do. This doesn't grant any rights to create a derivative work, or to redistribute the code outside of github.com, since the ""Fork"" feature is intrinsic to the github.com website.</p>

<p>Speculation: this right-to-fork language in the GitHub TOS was probably included to prevent legal issues around the use of the Fork feature. The intent was likely something to the effect of, ""You must license the minimum amount of rights to allow github.com's Fork software feature to operate.""</p>

<p>Based on this reading of ""fork,"" if another user were to use a github.com-hosted forked-repository to prepare and distribute a derivative work, that would infringe on the owner's copyright, since such an action is outside the scope of the Fork software feature. Similarly, if the user were to create a verbatim copy outside the context of github.com's Fork functionality (e.g. copying the code to another website), that would also not be permitted. The TOS does not allow the right to create copies generally; it <em>only</em> requires the author to grant copying permission inasmuch as copying is a necessary component of the Fork feature.</p>

<p>(All that said, this is speculative based on a specific reading of ""fork."" I'd like to say, on a personal note, it <em>is</em> kind of ridiculous that the GitHub Terms of Service use ""fork"" without a shred of definition to be seen.)</p>
","1157"
"How to contribute to Open Source as a non-programmer?","7054","","<p>I really like a specific open source project and would like to contribute to it. Unfortunately <a href=""https://stackoverflow.com/users/1620671/philipp"">I don't know anything about programming</a>. What are meaningful ways in which a non-programmer can contribute in a meaningful way to an open source project?</p>
","<p>There are lots of things to do around open source projects which do not require any programming knowledge at all. Among them are things like:</p>

<ul>
<li><strong>User Documentation</strong>: Programmers love writing code but hate writing documentation. And if we like to write documentation it's mostly the technical documentation for other developers. As a result, many open source projects have a user documentation which is hard to understand for non-technical users, full of gaps and in many places out of date. As an experienced user you can help to keep the documentation useful.</li>
<li><strong>User Support</strong>: Programmers are already very busy programming, so they are glad about people who keep the newbies off their back by answering their questions. This goes hand-in-hand with user documentation, because by listening to the user's problems you learn where the documentation needs to be improved.</li>
<li><strong>Artwork</strong>: Do you have artistic talent? Then you could work on the art assets of the project like icons or logos. Not just the software itself but also its website and promotional material can certainly benefit from your skills.</li>
<li><strong>Internationalization</strong>: Are you fluent in a different (non-programming) language than the primary language the developers communicate in? Then you can help with translating the software and its documentation into that language.</li>
<li><strong>Making <em>good</em> bug reports</strong>: We can only fix issues we are aware of. Unfortunately many bug reports we receive from users are of very poor quality. To fix a bug we must know exactly what steps must be taken to reliably cause the bug to happen. When you take the time to research a bug, isolate the exact conditions which make it appear and provide us with exact instructions, you can save us a lot of time. </li>
</ul>
","2255"
"Is illegally obtained GPLv2 software still subject to the terms and conditions of the GPL?","6888","","<p>Let's say some company is developing a software component licensed under GPLv2. The company never intends to release the software to the public because they are only installing it on their internal servers, which are not exposed to people outside of the company. Hence, the software is never ""distributed"" in the conventional GPLv2 sense (notice I am not referring to the AGPL here).</p>

<p>What would happen if an intruder hacked into the company, found the software, and exposed it to the public? Would the public be allowed to accept the terms of the GPLv2 and use, modify, and distribute the software in compliance the terms and conditions outlined by the GPLv2?</p>
","<p>The Free Software Foundation thinks not.  From <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#StolenCopy"" rel=""nofollow noreferrer"">the GPL FAQ</a>:</p>

<blockquote>
  <p><strong>If someone steals a CD containing a version of a GPL-covered program, does the GPL give the thief the right to redistribute that version?</strong></p>
  
  <p>If the version has been released elsewhere, then the thief probably does have the right to make copies and redistribute them under the GPL, but if the thief is imprisoned for stealing the CD, they may have to wait until their release before doing so.</p>
  
  <p>If the version in question is unpublished and considered by a company to be its trade secret, then publishing it may be a violation of trade secret law, depending on other circumstances. The GPL does not change that. If the company tried to release its version and still treat it as a trade secret, that would violate the GPL, but if the company hasn't released this version, no such violation has occurred.</p>
</blockquote>

<p>So, in other words, the FSF believes that you can redistribute stolen software <em>if it was already published,</em> but (probably) not if it was an unpublished trade secret.</p>

<p>In the comments, Federico Poloni quite correctly points out that the FSF could be mistaken.  They wrote the license and employ quite a few lawyers who are well versed in copyright law generally and the GPL in particular, so they are probably in at least as good a position to answer this question as anyone else.  But only a court can determine the answer to this question with absolute certainty (and then only with respect to a particular jurisdiction).  To my knowledge no such case has yet arisen.</p>
","6240"
"Is Linux Mint's version of Firefox really Free software? Is it compliant with the MPL?","6753","","<p>Trying to keep this as short as possible... In a VM, to test a problem of someone else, I installed a fresh Linux Mint 17.3 and opened Firefox. The search bar (right of the address bar) didn't include Google as an option, as I'm used to. Proceeding to the option to add search providers, I finally found it, along with a ""reason"" it wasn't there by default.</p>

<p><a href=""https://i.stack.imgur.com/UALDA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UALDA.png"" alt=""enter image description here""></a></p>

<p>A little put off by that, but not too worried about it, (they need money too, right?) I found the link for Google and enabled it. Now it was available, and all was good. Except that it wasn't.</p>

<p>Normally, as I type in the search box I get suggestions that lend themselves to what's been typed so far. Often this shortens my typing significantly. Now, it wasn't doing that. I switched back to Yahoo, and it work as normal. Back to Google, no such luck. Not unfamiliar with <code>about:config</code> I poked around, then dug around, and did some comparisons with settings between Yahoo and Google. No dice, can't find what triggers the difference in behavior.</p>

<p>""Ok,"" says I to self, I'm just go to the repository and drop the Mint custom version, and install the Mozilla original version. Into software manager and drill down to Firefox. No options to upgrade, downgrade, switch versions, or anything else, just ""Remove"" which, after doing that, only gives the option to ""Install."" Shows what version will be installed, but no options to change it.</p>

<p>I'm not a Mint user, so I don't know if there's other options for controlling software or not. I'm sure that a source install is likely to be available somehow. But.. Is that the point.</p>

<p>As I understand ""Free"" software, it's about choice, and not having someone, disto author in this case, dictate what I can use. The option to add Google seemed to fulfill that promise, until I found it only half-worked. Making it difficult, maybe prohibitively so, to replace the restrictive version with an unrestricted version was the icing on the cake.</p>

<h1>Edit</h1>

<p><strike>So, Linux Mint, Linux kernel and all, is, or is not, Free software? BTW: The source is available, so it's probably ""Open source"" at least.</strike></p>

<p>The proper question relates only to the version of Firefox, firefox_51.0.1+linuxmint1+rosa, supplied in the repos of Mint, not to the distro itself, or to any other package in the disto, including the kernel. As such, the question should have been, ""Does the version of Firefox supplied with Linux Mint 17.3 comply with the MPL and is it still free within the FSF concept?""</p>

<p><strong>Notes:</strong></p>

<p>In re: the ""crippling"" of the software: I don't know how long I've been using Mozilla products, or Firefox in general, but as their product have evolved, and as I've moved from one distro to another, between OSs, and between platforms, I have become accustomed to features behaving consistently across them all.</p>

<p>I'll not argue, here or in comments, as to whether or not that version is ""crippled."" I do know that it <strong>is</strong> modified, and that it does not work the same as every other release of Firefox that I have available to me for testing. The modified source code is available, to anyone who wants it, and according to the accepted answer, modified or not it does comply with the FSF's four freedoms. That was the question, and that is the answer. </p>

<p>I have been replying to comments that go beyond the scope of the question, and I probably shouldn't have been. By my rep, even across SE as a whole, you can see that I'm learning the Stack Exchange way. Comments about the real question will be replied to, while my crippled phrase, my improper scope to include the distro, and related debates won't be fueled by me. Further insights, or explanations that are germane to the OS topic are welcomed and encouraged. That's how others like me can learn.</p>
","<p>Software is <em>free</em> (as <a href=""https://www.gnu.org/philosophy/free-sw.html.en"" rel=""noreferrer"" title=""What is free software?"">defined by the FSF</a>) if it gives you the four freedoms:</p>

<blockquote>
  <ul>
  <li>The freedom to run the program as you wish, for any purpose (freedom 0).</li>
  <li>The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.</li>
  <li>The freedom to redistribute copies so you can help your neighbor (freedom 2).</li>
  <li>The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.</li>
  </ul>
</blockquote>

<p>It could have bad usability, it could have bugs, it could spy on you, it could technically restrict browsing to certain sites or installation of certain software, it could intentionally delete your music – as long as it gives you the four freedoms, it qualifies as <em>free software</em>.</p>

<p>Thanks to these freedoms, you are allowed and enabled to change the things you don’t like, and to share the changed software with others. Note that this doesn’t mean that you need to be able to change it e.g. within the GUI, or that is has to be easy – it just has to be allowed (legally) and possible (source code provided).</p>

<hr>

<p>So the issue you mention doesn’t affect whether or not Linux Mint is free software.</p>

<p>Is it free software? Well, this depends on what is meant with ""it"", as a GNU/Linux distribution consists of many different parts, and could come with separate but pre-installed software.<br>
If we talk about the ISO that can be downloaded (so not taking any packages into account that can be installed from their repository): According to <a href=""https://www.linuxmint.com/faq.php"" rel=""noreferrer"">Linux Mint’s FAQ <em>Does Linux Mint include proprietary drivers?</em></a>, it doesn’t contain any proprietary software (but note that this applies to the current release; it seems that this was not the case for older releases). So yes, Linux Mint is free software.</p>
","5169"
"How can a ""crayon"" license be a problem?","6212","","<p>Bruce Perens (co-founder of OSI) has coined the term ""<a href=""https://lists.opensource.org/pipermail/license-discuss/2011-December/017416.html"" rel=""noreferrer"">crayon license</a>"":</p>

<blockquote>
  <p>I've been calling these ""crayon licenses"", taking a line from an old Monty Python sketch about a dog license with the word ""dog"" crossed out and ""cat"" written in, in crayon.</p>
</blockquote>

<p>The licenses referenced are typical well-intended free software licenses that have been written by programmers in simple, easy-to-understand, non-legalese language.  Some typical examples are the <a href=""http://www.wtfpl.net"" rel=""noreferrer"">WTFPL</a> and the somewhat more elaborate <a href=""http://opensource.org/licenses/artistic-license-1.0"" rel=""noreferrer"">Artistic License 1.0</a>.</p>

<p>Perens seems to imply that such licenses may pose a problem for developers using them, or for the open source community.</p>

<p>How can these licenses be a problem?</p>

<p>Or is Perens wrong about them being a problem?</p>
","<p>There are several issues:</p>

<ul>
<li><strong>License proliferation</strong> - The more licenses we have floating around, the more work everyone has to do to understand them.  Case law for one license will not necessarily apply to a differently-worded license, even if they're both intended to achieve the same effect.  And if everyone starts writing their own licenses, this becomes significantly worse.  To get an idea of how bad the situation is already, take a gander at the Free Software Foundation's <a href=""https://www.gnu.org/licenses/license-list.en.html"" rel=""noreferrer"">annotated list of licenses</a>.  Note the large number of licenses, and how little the FSF has to say about some of them.  We do not want to make this list any longer - there are more than enough licenses to go around already.</li>
<li><strong>Legal uncertainty</strong> - If a license is vaguely worded, it may not behave as we would like in a court of law.  When you write a vague computer program, the compiler will (normally) refuse to compile it; the grammar of the programming language disallows ambiguity at the syntactic level.  The program may not mean what you think it means, but it does mean <em>something</em>.*  This is not the case when you write legal code.  If it's vague, the court will have to guess, and they may guess wrong.</li>
<li><strong><em>Contra proferentem</em></strong> - Ambiguity in a contract is normally interpreted <a href=""https://en.wikipedia.org/wiki/Contra_proferentem"" rel=""noreferrer"">in favor of the <em>non</em>-drafting party</a> (with the rationale that it's the drafting party's fault for creating the ambiguity in the first place).  It's not immediately obvious to me that this necessarily applies to an open source license, but if it does, it would greatly exacerbate the previous point.</li>
<li><strong>You might accidentally make a non-free license</strong> - One crayon license actually in use is basically MIT/X11 + ""The Software shall be used for Good, not Evil.""  <a href=""https://softwareengineering.stackexchange.com/questions/47028/how-could-we-rewrite-the-no-evil-license-to-make-it-free"">This is considered a non-free license</a> (don't take our word for it, <a href=""http://www.gnu.org/licenses/license-list.en.html#JSON"" rel=""noreferrer"">the FSF agrees</a>), and resulted in <a href=""https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692614"" rel=""noreferrer"">at least one bug report</a> asking for <em>downstream</em> software to be removed from Debian.  This caused actual person-hours to be diverted from software development to deal with silly licensing issues that never should have arisen in the first place.</li>
</ul>

<p>* I am ignoring the issue of undefined behavior in C and C++ because they aren't really relevant to this analogy, but if you like, you can think of vagueness in a contract as like undefined behavior, but perhaps less evil.</p>
","1451"
"Is Microsoft VS code really open source?","5666","","<p>I have been using MS VS Code since a while now and I am I really loving it.
Although the other day I was having a discussion regarding editors with my mentor where he pointed to me this. </p>

<p>It's mentioned in the product license.</p>

<blockquote>
  <p>SCOPE OF LICENSE. The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights. Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement. In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways.</p>
</blockquote>

<p>You can read the complete license here. <a href=""https://code.visualstudio.com/License"">https://code.visualstudio.com/License</a></p>

<p>It seems that the product is released under a different license and <a href=""https://github.com/microsoft/vscode"">the source code</a> is published under MIT license. I wonder why is that? </p>

<p>I quickly looked up a couple of popular open source editors to find that they are released under one MIT license (Product and sc).</p>

<p>Atom: </p>

<blockquote>
  <p>Atom is MIT licensed and the source is freely available from the atom/atom repository.</p>
</blockquote>

<p>Brackets:</p>

<blockquote>
  <p>Brackets is released under the MIT License</p>
</blockquote>

<p>It could be possible that I'm not understanding something here, but I was surprised to know VS code had different license for product and scource.</p>

<p>My specific questions are:</p>

<ul>
<li><p>Is there a well-known business reason why Microsoft would offer the binary and source under such vastly different licenses? </p></li>
<li><p>Is it appropriate (within the norms of the open source community) for Microsoft to brand their proprietary-licensed binary as ""Open Source"" since it <em>is</em> based on a fully-buildable open source code base?</p></li>
</ul>
","<p>This is explicitly addressed in the <a href=""https://code.visualstudio.com/Docs/supporting/faq#_licensing"">Visual Studio Code FAQ</a>:</p>

<blockquote>
  <p><strong>Why does Visual Studio Code have a different license than the vscode GitHub repository?</strong>
  To learn why Visual Studio Code, the product, has a different license than vscode, the open source <a href=""https://github.com/microsoft/vscode"">GitHub repository</a>, see <a href=""https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005"">issue #60</a> for a detailed explanation.</p>
</blockquote>

<p>In that issue, <a href=""https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005"">a vscode developer explains</a>:</p>

<blockquote>
  <p>When we set out to open source our code base, we looked for common practices to emulate for our scenario. We wanted to deliver a Microsoft branded product, built on top of an open source code base that the community could explore and contribute to.</p>
  
  <p>We observed a number of branded products being released under a custom product license, while making the underlying source code available to the community under an open source license. For example, Chrome is built on Chromium, the Oracle JDK is built from OpenJDK [...] Those branded products come with their own custom license terms, but are built on top of a code base that’s been open sourced.</p>
  
  <p>We then follow a similar model for Visual Studio Code. We build on top of the vscode code base we just open sourced and we release it under a standard, pre-release Microsoft license.</p>
  
  <p>[...]</p>
  
  <p>Here's how it works. When you build from the vscode repository, you can configure the resulting tool by customizing the product.json file. This file controls things like the Gallery endpoints, “Send-a-Smile” endpoints, telemetry endpoints, logos, names, and more.</p>
  
  <p>When we build Visual Studio Code, we do exactly this. We clone the vscode repository, we lay down a customized product.json that has Microsoft specific functionality (telemetry, gallery, logo, etc.), and then produce a build that we release under our license.</p>
  
  <p>When you clone and build from the vscode repo, none of these endpoints are configured in the default product.json. Therefore, you generate a ""clean"" build, without the Microsoft customizations, which is by default licensed under the MIT license [...]</p>
</blockquote>

<p>The built version released under Microsoft's EULA, then, is a specific configuration of the open source code base.</p>

<p>When Microsoft says,</p>

<blockquote>
  <p>""Visual Studio Code is open source.""</p>
</blockquote>

<p>what they appear to mean is,</p>

<blockquote>
  <p>""Our offering of Visual Studio Code is built using an publicly-available code base that is licensed under an open source license. With the exception of branding and configuration values, this open source base is identical to the built software product we offer.""</p>
</blockquote>

<p>The only changes they make when building the binary (according to their claims above, anyway) is to utilize existing configuration options to add Microsoft branding and have network-based components within the editor use Microsoft network endpoints.</p>
","4292"
"What does 'upstream' mean?","5621","","<p>In some documents or blogs about development in open source projects, you can read stuff like 'upstream developer' or 'upstream fix'. What does that mean?</p>
","<p>Consider the obvious analogy (from which the term flows - pun intended) ... water in a river flows 'downstream' and thus 'upstream' is the source from which the water comes.</p>

<p>This analogy is deeply embedded in software development, so it's no mere coincidence that we use terms like 'head', 'source', 'upstream', 'downstream' and even 'flow' extensively in the field. </p>

<p>In the context of a forked software project, the 'upstream' is the source from which a particular project was forked. This might not be the absolute origin.</p>

<p>If project A is forked to produce project B which is then forked to produce project C, then B is 'upstream' of C and A is upstream of B (and C).</p>

<p>Thus, an upstream developer is one who works on an upstream project. An upstream fix is one which exists in the upstream (parent) project.</p>

<p>When working with Git, especially in the context of Github, it is not uncommon for a developer to set two remotes</p>

<ul>
<li><code>origin</code> points to their own fork of a project</li>
<li><code>upstream</code> is conventionally used to point to the project from which they forked.</li>
</ul>

<p>This allows the owner of the fork to pull fixes and enhancements directly from the original project, thus keeping theirs in sync with it.</p>

<p>On Github, I have <a href=""https://github.com/kdopen/json-c"">a fork</a> of the <a href=""https://github.com/json-c/json-c"">official json-c</a> repository. My local repo is setup thus:</p>

<pre><code>$ git remote -v
origin  ssh://git@github.com/kdopen/json-c (fetch)
origin  ssh://git@github.com/kdopen/json-c (push)
upstream    git@github.com:json-c/json-c.git (fetch)
upstream    ssh://git@github.com/json-c/json-c.git (push)
</code></pre>

<p>I prepare changes in a local branch, regularly update my own fork with</p>

<pre><code>$ git pull upstream master
$ git push origin master
</code></pre>

<p>and then rebase my own branches on the results.</p>

<p>If I have changes in my fork which I would like to see in the upstream version, then I create a ""pull request"" asking for them to accept my contribution. This process is referred to as ""pushing a change upstream"" which, for many projects, reflects the fact that its more work going upstream than down.</p>
","995"
"Can I use my client's GPL software?","5442","","<p>I have a client who sent me his source code for me to review. It was a non-paying job. His source code was clearly a <strong>heavy</strong> modification from a popular GPL-licensed software which I part-authored. I can see the original code (including GPL license headers) everywhere in the project. We didn't have any contract or agreement, simply email exchanges.</p>

<p>His application is commercial and he charges few dollars per download. However, he never stated his project is GPL, so nobody had asked him for the code.</p>

<p><strong>Q</strong>: I have a copy of his application (I'm also his customer). Can I enforce GPL and distribute the application and source code?</p>

<p><strong>NOTE:</strong> I'm 100% sure the seller isn't going to acknowledge his GPL commitment.  It's a commercial software and he's selling it.</p>

<p><strong>EDIT:</strong> I partly owned some of the original code (that was how I recognized the code) but I won't sue anything. It's just a tiny iOS app, I don't have time and money.</p>
","<p>I'll be refering to Version 2.0 from here: <a href=""http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt"" rel=""nofollow"">http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt</a>
But it should apply to 3.0 as well.</p>

<p>Following facts things are important here, and my answer is based on those:</p>

<ol>
<li>Code was sent to the Author on purpose (he didn't gain access to the code illegaly).</li>
<li>The code contains GPL headers. </li>
</ol>

<p>Regardless if you bought it or not, the important part is that the code was <em>received</em>. Paragraph 1 of GPL clearly states that:</p>

<blockquote>
  <p>You may copy and distribute verbatim copies of the Program's
  source code as you receive it, in any medium, provided that you
  conspicuously and appropriately publish on each copy an appropriate
  copyright notice and disclaimer of warranty;</p>
</blockquote>

<p>Now on top of that:</p>

<ul>
<li>The fact that they broke the GPL does not void your rights (See Paragraph 4).</li>
<li>They couldn't even restrict you from redistributing it even if they thought of it! (see paragraph 6).</li>
<li>You don't have to buy the GPL code to be bound by the licence, you're bound by GPL every time you download Linux for free. The important part is <em>receiving</em> the code, by any legal means.</li>
</ul>

<p>So the moment you've received the code (you don't even have to buy it!) you've been granted all the rights given to you by a licence. Congrats.</p>

<p>Now for the rights:</p>

<ul>
<li>Make copies of the application and resell them (Paragraph 1).</li>
<li>You can resell your application. </li>
<li>Publish the application for free.</li>
</ul>

<p>So to summarize: <strong>yes</strong>. You can do anything you want with it. You can publish it for free, you can sell it compile (as long as you keep GPL terms from paragraph 3), it's irrelevant how you've received GPL code, or if you've paid for it.</p>

<p>PS. One last gotcha, and as usual the devil is in the details.
As some of the other answers stated the fact that he's breaking GPL does not automatically license his code as GPL. 
So again it all comes down to: Does the file and/or project have GPL licence/headers. If the project you've received include GPL licence and in README for example it's stated that project (as a whole) is under GPL, then you're good. If it does not it's more tricky. It can be assumed that if the file was modified and in the header there's a GPL licence then the modifications were bound by GPL, however new files without the header, are not, and you cannot redistribute them unless given permission.</p>
","4671"
"Why do some people refer to Linux as GNU/Linux?","5103","","<p>In some cases I have noticed that some people say GNU/Linux instead of just Linux. Why is that so? Do both terms mean the same or is there a subtle difference?</p>
","<p>The <strong>GNU project</strong> was created to produce a free software alternative to Unix. They were able to produce most of the programs an operating system would provide, but their kernel, the GNU Hurd, was not stable enough to rely upon.</p>

<p><strong>Linux</strong> is a kernel, the most base level of an operating system, and was created and published under the GNU GPL, a free license. It came to be adopted as the kernel of the GNU OS while the Hurd continued to be developed, but it remains an external project and is not officially part of GNU.</p>

<p>It is entirely reasonable to call the combination GNU/Linux as they are two distinct projects paired together. Strictly speaking, Linux by itself is not very useful without all the other software in GNU. But GNU is awkward to pronounce and is a nerdy acronym (but not nearly so nerdy as the double-recursive acronym of <a href=""https://en.wikipedia.org/wiki/GNU_Hurd#Name_and_logo"">Hurd/Hird</a>). Linux is easier to pronounce and is a more conventionally marketable name (being a short word with no previous meaning.)</p>

<p>For better or worse, Linux is now a <a href=""https://en.wikipedia.org/wiki/Metonymy"">metonym</a> for the whole GNU/Linux OS and greater ecosystem. While it's not ideal that so many people only know the name ""Linux"" and not the GNU project which provides most of what they use, the reality is that language is incredibly hard to shift once it has settled, and I personally don't anticipate the situation ever changing. Let's educate people about the GNU OS, but let's not make a fuss if our grandparents (or grandchildren, depending on who you are) don't get the distinction.</p>
","1035"
"Is it socially acceptable to star your own repositories on GitHub?","5070","","<p>While I'm searching for a new project to start contributing to, I often check the daily email I get from GitHub that lists the most popular repositories of the day and also the repositories starred by the people I follow. </p>

<p>So, should I star my own repositories once I create them so it would appear in the daily digest for the people following me or would that be considered as a spammy way of getting the initial traction that could sometimes make a difference between a successful project and an unsuccessful one?</p>
","<p>Personally, I've used a self-star as a tiebreaker to call out better projects. If two of my projects both have <em>N</em> stars, and I think one is clearly better than the other, I'll star it so that it ranks over the other one in my profile page. This is especially important if I have many zero-star repositories, because some of them may not appear on my profile page at all (since GitHub limits the list to 5 repos). I might have a zero-star repository that I'd love people to see, but it could be buried in obscurity under a bunch of other zero-star repos.</p>

<p>I personally think it's reasonable to use a self-star to call out what <em>you</em> believe is your best work, especially since the primary place a project's star count is relevant is in ranking your own projects on your profile page.</p>

<p>Does that justification make it currently <em>socially acceptable</em>? I certainly won't judge you; I can't really say whether anybody else will. Anecdotally, though, <a href=""https://github.com/stars/torvalds"" rel=""nofollow noreferrer"">self-stars appear to be good enough for Linus Torvalds</a>, anyway. (At the time of this writing, he has starred exactly two repos, and they're both his.) Note, however, this may simply be an artifact of when GitHub first introduced stars and automatically converted all ""Watch"" relationships to stars. See <a href=""https://opensource.stackexchange.com/a/1922/50"">SztupY's answer</a> for more information.</p>
","1921"
"Are open source developers at risk of being scammed?","4885","","<p>Suppose your client asks you to build open source software for them. You begin doing the work and publishing updates on GitHub, but when you finish they tell you they don't like it and won't pay for your service. Due to your contract this is allowed.</p>

<p>Meanwhile the customer just took the code off of GitHub and started using it for free.</p>

<p><strong>My question:</strong></p>

<p>Are open source developers prone to this kind of scam?</p>

<p>Are there any laws in place to protect them?</p>

<p>Despite the contract is there anything that the developer could do? Could they change the license?</p>
","<p>I am not aware of this ""scam"" and am not aware of the issue being raised with the Open Source Initiative or other organizations promoting Free and Open Source Software (Free Software Foundation, Software Conservancy, EFF, etc.), nor other related areas such as the open content movement, and the Creative Commons. Of course this does not mean that dubious practices have not been attempted. I would also think, that any company/organization that operated like this would quickly gain a bad reputation.</p>

<p>Specific to laws:
You are protected as the author of any work, including software, by copyright laws. In the U.S. you, as the author of original work, have the right to license your work in any way you like. While I would first recommend creating a contract that protects you regarding getting paid (regular pay based on hours worked, sign offs--and payment based on gateways/accomplishments, etc.) You could initially hold your code for review/approval (including the code hosted in a public repository like that of GitHub) as ""All Rights Reserved"" until you are paid, and then upon payment, assign an OSI Approved License. You could also write this into your contract if you really felt it was an issue.</p>

<p>So you do not need to change the license, simply assign ""MySoftware, copyright Patrick Masson 2015, ALL RIGHTS RESERVED."" The company is thus not able to use it until you change the licence to an OSI Approved option--which you will do once they pay you (and of course you too have provided for all of your responsibilities under the contract).</p>
","937"
"Security of Github.com","4659","","<p>Recently some non-technical managers where I work found out that Github has a repository with code from ""Hidden Tear"" which is a ransomware application. The immediate reaction was to ban GitHub, which is something that we use extensively to get open source code. The only way to access GitHub again is by proving that the site is safe. This would be easy to do if I were convincing software developers, however I am speaking with people who have never written a line of code. I have been told that if I want to use code from Github or view pages on the site I need to do the following:</p>

<ol>
<li>Show the site is safe and will not infect our computers</li>
<li>Create an open source policy for use when determining the safety of code found on GitHub.</li>
</ol>

<p>My first step was to go through a list of companies and government organizations that use GitHub. I believe that this will start to calm fears that the site is going to infect all computers with ransomware. I will expand on this by describing what GitHub is, what it does and why it is valuable.</p>

<p>The problem is that I don't have much experience writing policy documents. I'm hoping to find someone with some knowledge about policy that could share some of their experiences in writing open source usage policy. From what I understand our policy should be a step by step guide to determine whether or not we can use a specific library/plugin.</p>

<p>Any help would be greatly appreciated.</p>
","<p>I'm a solo programmer, not any firm. But suppose if I were to form a small firm tomorrow and decided to write a security guideline regarding what to allow/disallow from <code>github</code>, it will be implemented something like this:</p>

<ol>
<li><p>Only allow <code>github.com</code> domain and not <code>github.io</code>. Reason is that the latter is a web-hosting playground where any random developer can place any random javascript to be executed like some others have said. The former, on the other hand, is from the official company and relatively safe.</p></li>
<li><p>Create a policy to blacklist/whitelist downloads with certain extensions. <code>EXE</code> and <code>DLL</code> are the worst if you are on windows platform as these are arbitrary binaries that can just do anything on your machine including causing havoc. If you are as paranoid as me, you will take the whitelist approach and just ban everything except the ones that you need (for example, <code>.php, .py, .js, .html, .css, etc.</code> if you are running a FOSS project).</p></li>
<li><p>Create a policy to install <em>only</em> from the official sources. On Windows machines, not giving admin rights to your every user should be a norm. Only personnel from IT depts should do that, so the user can't cause any damage to their systems even in the rare instance that they did end up downloading something bad.</p></li>
<li><p>Create a policy to maintain a list of developers who are granted commit access to the git repositories. Don't give any commit access to the main repos unless it is absolutely necessary. If possible, include a code-review process in workflow whereby, the dev sends a pull-request and reviewer later integrates the code after a thorough check. This process will ensure that no malware gets through past your build process, either wittingly or unwittingly.</p></li>
<li><p>Create a policy to revoke commit access as soon as a dev leaves the firm. This will ensure that no ""blame-game"" takes place that usually happens when a dev leaves a company.</p></li>
</ol>
","2462"
"How can I get users to RTFM?","4405","","<p>I created an <a href=""http://www.userfrosting.com"">open source user management system for PHP</a> which is (admittedly) directed towards novice programmers.  The idea is to help familiarize ""Cowboys from Code Canyon"" with the tools and design techniques used by the <em>professional</em> PHP community, while providing a useful piece of software.</p>

<p>The problem is that my target audience also happens to be the same audience that has trouble reading/refuses to read documentation.  I am starting to get burnt out from answering the same types of <a href=""http://whathaveyoutried.com/"">unresearched, quick-fix questions</a>.  Example questions include:</p>

<blockquote>
  <p>how can I render PHP file using Userfrosting?</p>
  
  <p>how to do a new class public object visible to users and guest ?</p>
  
  <p>could anybody point me to where i could read or find tutorials regarding Twig</p>
</blockquote>

<p>These are all questions that could either be answered with a Google search, or they demonstrate a complete lack of understanding w.r.t. the basic software design concepts <a href=""http://www.userfrosting.com/navigating/"">that I cover in the documentation</a>.</p>

<p>I know I need to make the documentation a little bit more ""in-your-face"", perhaps with a few bold points in a popup dialog before they can download the software from the site.  I could also put this information as a step in the installer.  </p>

<p>But I really am skeptical that this will help, at least with the type of people whose first impulse when confronted with a problem is to ask someone else to solve it for them, rather than read the documentation and craft a specific, well-researched question. </p>

<p>Is there something I could be doing better, short of providing 24/7 customer support?  Should I just put a big disclaimer in the README saying ""I will not answer these types of questions""?</p>

<p>This may also be a good UX question, but it is ""UX for an open source project"".</p>
","<p><em>Just to play devil's advocate</em>:</p>

<p>One thing you may want to consider is that your current documentation might be suboptimal - no one may be reading your documentation because it isn't useful (to them).</p>

<ul>
<li>How easy is it to find your documentation in the first place? </li>
<li>How easy is it to find a given topic within your documentation?</li>
<li>Is there a clear path for a novice user to learn about your program?</li>
<li>What's the learning curve like? Is there a good progression from complete newbie to experienced user, or do you go straight from trivial examples to a reference manual dump?</li>
<li>Do you have multiple ways of finding information based on different mental models/outlook? (That is, things like tutorials, FAQs, demos, reference manuals - e.g. not everyone wants to puzzle out the answer to their question from a Backus–Naur grammer, even if it is technically the most accurate way of representing the information.)</li>
<li>Why <em>aren't</em> people reading your documentation? And no, ""because they're ungrateful, lazy schmucks"" is not a sufficient answer, at least not if you want to get them to change their behavior.</li>
</ul>

<p><strong>Specifics:</strong></p>

<p>Looking at you website, it looks like you could highlight ""Documentation"" more. On the main page, you have 'Download' 'Demo' and 'GitHub' as main buttons, but documentation gets a tiny text-only link. Documentation is <em>at least</em> as important to your users as a GitHub link - why not promote it?</p>

<p>In the upper right you do have a ""Getting Started"" link, but phrasing could be better. E.g. what will people who are thinking ""I don't need to get started - I'm already using it; I just have a question about details"" click? You have the ""Help"" button, but that's a bit confusing - is it ""I would like to help this Open Source project""? ""Help"" in other sites also tends to be more ""about this site/contact us"" - to be honest, my eyes completely skipped over that link as useless boilerplate the first few times I saw it.</p>

<p>Even when you click on the ""Getting Started"" link, phrasing the links could be better. For example ""navigating the code"". I don't want to ""navigate"" Userfrosting, I want to ""use"" it. I guessing a fair number of users are skipping that page because they think it's an in-depth nitty-gritty code architecture page, rather than (apparently) your main documentation page. </p>

<p>The tutorials link is good ... but you only have the two. If you are getting repeated questions on the same topic, it's probably worth it to make some tutorials about that topic. This is <em>especially</em> true if you're targeting the novice user. You have to expect that they'll come in with little to none of the knowledge that you take for granted. There has to be an easy (for them) way of getting that knowledge, even if it's not directly related to your software.</p>

<p>Cross linking is also good. The ""Components"" link on ""Getting Started"" would be the spot to go to get an overview about the various parts of your program and how to use them, except that it has no links, making it hard to get more information about those parts. (E.g. if I wanted to know how to ""Control privileges for users and groups"", there's no indication of where I would go to find out.)</p>

<p>In the ""Get Help"" section on your main page, when I click on ""Using Userfrosting"", I get an interstitial pop up, and if I blindly click through (which, let's be honest, most people will do) I get dumped back to the front page. That is to say, the one link that - to me - would be the most important documentation link doesn't actually do anything. (Note that this is the same reason that popups on download or steps in the installer won't work - if the popups/steps are hoops to jump through rather than things which provide immediate benefits to the user, people will skip them.)</p>

<p>Finally, you have to think about searchability. Not just ""how would I, as an experienced user, search for this information?"" but ""how would someone who has little to no clue about my software find this information, keeping in mind they might not know what the appropriate keywords are?"" First off, your website has no search box available. If I want to search your documentation, I can't do it from your site, instead I have to go to an external search engine and be knowledgeable enough to know about the site restriction syntax, etc. </p>

<p>Even if I do a plain Google search, I'm not much better. For example, I typed ""render PHP Userfrosting"". Even without the site restrictions on search, I do get related pages, but nothing that a quick glance tells me anything related to rendering PHP (specifically). There might be synthesizable information in there somewhere, but I have ~2,000 Google results for this search, and others from the other search terms I try. Realistically, I'm giving each search result maybe 10 seconds before I give up and go onto the next one. Is there a <em>specific</em> paragraph in the documentation which <em>specifically</em> and <em>directly</em> answers this question? If so, why might I not be finding it?</p>

<p>I want to emphasize that last point. Roughly speaking, if you can't answer ""unresearched, quick-fix questions"" by a literal cut-and-paste of a single paragraph from the documentation, then either your documentation isn't comprehensive enough or the questions are more complex than you're giving them credit for.</p>

<p><strong>Conclusion:</strong></p>

<p>While it's true you will get a fraction of people who will never read your documentation no matter how easy it is to use, the threshold for ""giving up"" is a range. Each person has a varying level of hassle which they're willing to tolerate. It's not just those who immediately ask others for help and those who extensively scour the documentation to ask comprehensively researched questions. Depending on how hard you make it to use your documentation, you'll get more or fewer people who will make the attempt. Your goal is to lower the hassle level for using the documentation as far as you can.</p>
","1738"
"Why does Linux still use the GPLv2?","4135","","<p>As I know, Linux intentionally avoids the switch from GPLv2 to GPLv3. It has the unfortunate side-effect, that it doesn't take part in the defense of the opensource world from the most recent danger, the patent manipulation by different ""patent broker"" companies or large software producers.</p>

<p>What was the reason behind that? Was it Linus' decision?</p>
","<p>""Tivoization"".</p>

<p>Because money matters. And while officially Linux is not owned by Google, de facto Google ownes it and dictates what license it going to use.</p>

<p>Linux is used to run Android. Milliards of phones are sold with Android/Linux and Linux part is affected by GPL.</p>

<p>GPLv3 would be great for that customers and very costly for Google because instead of buying new phone with increased version of Linux kernel, or upgradable ""official"" phone which costs 10x more, people would be able to demand that their software does not comply with license, and hence is illegal.</p>

<p>It is also illegal to deny consumer rights to control, meaning locked programs inside phones etc. That is what GPLv3 stands for in first place. Denying of basic consumer rights is ""legal weaponry"" used by Google to kick out small players out of market share, and all of that while using free software in which people invested their time and passion during 1990s.</p>
","2667"
"Can I take BSD licensed code and distribute it under GPL?","4132","","<p>Or in more general terms: Can I take code which is licensed under a permissive open source license (like the BSD license) and distribute it under a copyleft free software license (like the GPL)?</p>

<p>Microsoft and Apple seem to be allowed to take BSD (or similar) licensed code and distribute it under a proprietary license.</p>

<blockquote>
  <p>In addition, the permissive nature of the BSD license has allowed many other operating systems, both free and proprietary, to incorporate BSD code. For example, Microsoft Windows has used BSD-derived code in its implementation of TCP/IP and bundles recompiled versions of BSD's command-line networking tools since Windows 2000. Also Darwin, the system on which Apple's Mac OS X is built, is a derivative of 4.4BSD-Lite2 and FreeBSD. Various commercial Unix operating systems, such as Solaris, also contain varying amounts of BSD code.</p>
</blockquote>

<p><sup><a href=""http://en.wikipedia.org/w/index.php?title=Berkeley_Software_Distribution&amp;oldid=664036786"">Wikipedia</a></sup></p>

<p>But then there is this story from 2007 where some BSD people got mighty mad at linux kernel developers who took BSD licensed code and ""relicensed"" it under GPL.</p>

<blockquote>
  <p>KernelTrap has an interesting article in which Theo de Raadt discusses the legal implications of the recent relicensing of OpenBSD's BSD licensed Atheros driver under the GPL. De Raadt says, ""it has been like pulling teeth since (most) Linux wireless guys and the SFLC do not wish to admit fault. I think that the Linux wireless guys should really think hard about this problem, how they look, and the legal risks they place upon the future of their source code bodies."" He stressed that the theory that BSD code can simply be relicensed to the GPL without making significant changes to the code is false, adding, ""'in their zeal to get the code under their own license, some of these Linux wireless developers have broken copyright law repeatedly. But to even get to the point where they broke copyright law, they had to bypass a whole series of ethical considerations too.""</p>
</blockquote>

<p><sup><a href=""http://undeadly.org/cgi?action=article&amp;sid=20070913014315"">OpenBSD Journal</a></sup></p>

<p>I have to admit that I do not fully understand the legal implication of some of the terms. For example: incorporate, derive/derivative, bundle, recompile, relicense.</p>

<p>Note that I used the term ""distribute"" in my question. A term which is not used in both the wikipedia article and the OpenBSD Journal.</p>

<p>Note also that I am not asking whether I can <em>relicense</em> the code. I am asking whether I can <em>redistribute</em> the code under a different license.</p>

<p>What I mean with ""distribute"" is roughly as follows:</p>

<ol>
<li>Download BSD licensed code.</li>
<li>Put GPL license file in root of project and GPL header in every relevant file and add note in README that the code is also licensed under GPL. Note that the BSD license is not removed.</li>
<li>Upload the code to some website for everyone to download.</li>
<li>???</li>
<li>PROFIT!!1</li>
</ol>

<p>As far as I understand a downloader now has the option to take the code under the terms of the BSD license or under the terms of the GPL license.</p>

<p>If that is not allowed then please explain what Microsoft and Apple are doing.</p>
","<p>If the BSD license in question is the two- or three-clause variant (<em>i.e.</em> without the <a href=""https://www.gnu.org/philosophy/bsd.html"" rel=""nofollow"">advertising clause</a>), I think you're technically allowed to do it, but you couldn't really enforce it: anyone who obtained a copy of the code you're distributing could re-use the BSD-licensed code under the provisions of the BSD license only, and the GPL wouldn't apply. (The GPL would apply to anything you hold the copyright for, and to the agregate; <em>i.e.</em> resulting binaries would be GPL. But for that to be meaningful you'd have to add code of your own...)</p>

<p>What Microsoft and Apple are doing is complying with the BSD license.</p>

<blockquote>
  <p>Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.</p>
</blockquote>

<p>If they don't redistribute source code then that doesn't apply. (Nothing forces them to redistribute source code; that's why the BSD license is called a permissive license.)</p>

<blockquote>
  <p>Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.</p>
</blockquote>

<p>You'll find that Microsoft and Apple products which incorporate BSD code do satisfy this, either in the documentation, or typically in the ""About"" box.</p>

<blockquote>
  <p>The name of the author may not be used to
      endorse or promote products derived from this software without
      specific prior written permission.</p>
</blockquote>

<p>Somehow I doubt Microsoft or Apple would be interested in doing this anyway.</p>

<p>The final clause is the lack of warranty, which everyone disclaims anyway, so there's no change there either.</p>

<p>The four-clause BSD license is <a href=""https://www.gnu.org/philosophy/bsd.html"" rel=""nofollow"">GPL-incompatible</a> so in that case you wouldn't be able to distribute under the GPL.</p>
","305"
"Why doesn't this GPL loophole work?","4066","","<p>Suppose Alice makes some proprietary software.  The source is available, but under a proprietary license which prohibits derivative works and sublicensing.  Bob writes some GPLv3 code.  Carol prepares a derivative work which incorporates both Alice and Bob's software and purports to release it under the GPLv3, in violation of Alice's copyright.  Carol provides source code and otherwise complies with standard GPL formalities.  Alice decides not to sue Carol, but threatens to sue anyone who makes derivative works of Carol's software.</p>

<p>Has Carol violated the GPL, and if so, how?</p>

<p>If Carol has not violated the GPL, why don't companies do things like this all the time to subvert the GPL?</p>
","<p>ArtOfCode's answer correctly describes Carol's situation relative to <em>Alice's</em> code: violation of Alice's original license (which is not the GPL) and therefore infringement of Alice's copyright.  The terms of the GPL are not relevant except in that they are incompatible with Alice's license.</p>

<p>However, <em>Bob's</em> code is originally licensed under the GPL, and the GPL contains a clause anticipating exactly this sort of situation.  In version 3, it's section 12.  v2 had slightly different but (I think) legally equivalent wording.</p>

<blockquote>
  <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. <strong>If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.</strong> For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>
</blockquote>

<p>(Emphasis mine.)  In this case, the ""other pertinent obligations"" are Alice's original license, which is incompatible with the GPL.  Therefore, Carol's violation of Alice's license <em>causes</em> a violation of the GPL as applied to <em>Bob's</em> code.</p>

<p>The obvious legal consequence of this is that Bob also has a copyright infringement case against Carol.  I don't know how Alice's having declined to sue Carol would affect the decision.</p>

<p>This ""poison pill"" clause in the GPL is why Linux distribution maintainers tend to be cautious about combining GPL with works whose license <em>might</em> not be compatible.  For instance, this is why they hesitate to link GPLv2-licensed programs against OpenSSL.  (If I remember correctly, GPLv3's ""additional terms"" section renders that particular problem moot.)</p>
","1452"
"How can large open source projects be monetized?","3943","","<p>Many open source projects I see involve having  dedicated servers, as well as the expensive infrastructure that powers it. </p>

<p>How are these projects monetized to cover the costs introduced during development and deployment?</p>
","<p>Whether or not you can make money with an open source project, depends on many things. Based on experience, I see three factors that are important:</p>

<ol>
<li>Which license did you choose? Take a look at the schema in <a href=""https://opensource.stackexchange.com/a/3/27"">this answer</a> and you'll see that on one end, you have <em>permissive licenses</em> and on the other hand you have licenses with a <em>strong copyleft</em>.</li>
<li>Which type of product are you offering? There's a huge difference between offering a tool for consumers (something they can just download, run and use) and offering a library in a B2B context, for instance: a piece of software that parses XML, but that doesn't work unless you write some code around it.</li>
<li>What is your business? Are you in the business of <em>selling software</em> (e.g. you sell a game that can be downloaded and that can be played off line) or are you in the business of <em>selling a service</em> (e.g. a game that can't be downloaded and that is played on line).</li>
</ol>

<p><strong>When to use a license with strong copyleft?</strong></p>

<p>Although it was different in the past, I see that small ""developer-driven"" companies, wanting to create a <em>software</em> business in a B2B context, often benefit from a license such as the AGPL.</p>

<p><em>Warning:</em> the original authors of the AGPL consider what I am going to write next as <em>nefarious use</em> of the AGPL, but this is the way companies such as <a href=""http://blog.mongodb.org/post/103832439/the-agpl"" rel=""noreferrer"">MongoDB</a>, <a href=""http://developer.sugarcrm.com/tag/agpl/"" rel=""noreferrer"">SugarCRM</a>, and others make money.</p>

<p>I have my open source project of my own, and in the past 15 years I have tried making money in the following ways:</p>

<ul>
<li><strong>Donations</strong>: In the early years, users of my software would buy my kids Lego. I would receive books for my birth day. Somebody even sent me cookies. While this was certainly appreciated. That doesn't make a business. Also: I live in Belgium: when somebody sent me a DVD from the US, (1) I had to pay taxes on it (customs could be excessive), (2) I couldn't play it because the DVD could not be played in my region (unless I fiddled with my DVD player).</li>
<li><strong>Making money with ads</strong>: I was an early adopter of Google AdSense. In 2004, I made $8,900 with ads, in 2005 $14,500, but the revenue dropped to $6,200 in 2006, $2,350 in 2007 and $1,900,... I had more content, more clicks, but less revenue. I noticed two things: (1) most of the people advertising on my site, were competitors, (2) if you want to make money with ads, you need to specialize in making money with ads. As a result, I removed all ads. Ads as a business model are dead. See for instance what <a href=""http://www.codehaus.org/"" rel=""noreferrer"">Codehaus</a> wrote when they shut down their business: the hosting cost was exceeding the cost of the revenue from ads. You can also see that <a href=""http://arstechnica.com/information-technology/2015/05/sourceforge-grabs-gimp-for-windows-account-wraps-installer-in-bundle-pushing-adware/"" rel=""noreferrer"">SourceForge has taken the wrong path</a></li>
<li><strong>Writing documentation:</strong> I wrote two books for Manning Publications about my project. Manning sold about 11,600 copies of the first edition and almost 9,200 of the second edition. Illegal copies of the book were already available before FedEx had the chance to deliver me my first paper copies. As an author, I received 10% on the profits. I made approximately $33K with the first book and approximately $30K with the second book. I used this money as seed funding for my company. Writing documentation is hard work and when you compare the time you spend on writing such a book versus the money you make selling the book, you soon understand that this is not a sustainable source of money.</li>
<li><strong>Selling support and maintenance:</strong> this works, but it's hard. It's not something you can do on your own, because it's not scalable: the more customers you have, the more employees you need to answer support tickets. Also: you face competition of professional players who offer support for a stack of open source products. By supporting more than one product, such a company can afford hiring more employees. In my case: I couldn't compete with <a href=""http://www.openlogic.com/"" rel=""noreferrer"">OpenLogic</a> when I first started doing business with my product. I had to find a different business model.</li>
<li><strong>Offering professional services:</strong> you offer the software for free, but you sell professional services to install the software and to integrate your product into a tailor-made project. This is even harder than offering support, because you have to compete against all the large software integrators who have more money, more employees, more everything than you. Your business will even be less scalable than support and worse: all the time you spend on projects for customers is time you don't spend on further developing your product. The <a href=""http://www.openhealthnews.com/articles/2014/heartbleed-apache-license-business-model-failure"" rel=""noreferrer"">Heartbleed disaster</a> is an example of how that can go wrong.</li>
</ul>

<p>If you are a single developer looking to start a business, making money with open source <em>software</em>, your best chance at being successful, is by offering the software under a dual license.</p>

<p>Which license? Well, you have to avoid <a href=""https://softwareengineering.stackexchange.com/questions/253925/how-to-avoid-being-forked-into-oblivion-by-a-more-powerful-contributor"">Being forked into oblivion by a more powerful contributor</a>, so only a license with a strong copyleft makes sense. You'll understand what this means when you read the <a href=""http://zguide.zeromq.org/page:all#header-136"" rel=""noreferrer"">Eat me</a> section of the <a href=""http://zguide.zeromq.org/page:all#header-136"" rel=""noreferrer"">ZeroMQ guide</a>. I quote:</p>

<blockquote>
  <p>In the software industry, there are friends, foes, and food. BSD makes most people see us as lunch. Closed source makes most people see us as enemies. GPL, however, makes most people our allies.</p>
</blockquote>

<p>How does one make money with a copyleft license? That's explained in <a href=""https://youtu.be/QHF3xcWnSD4"" rel=""noreferrer"">this video</a>. You offer the software as free, open source software free of charge for every one who obeys the rules of the license. Companies who don't want to follow those rules, can still use the software, provided that they buy the software under another, commercial license. This model is called dual licensing. The weaker the copyleft of the license, the harder it will be to sell your product.</p>

<p><strong>When to use open source with a permissive license?</strong></p>

<p>If you are not a developer and you want to start a business offering a service. Or if you work a large corporation (say Google, Amazon,...), then you probably won't like what I wrote in the previous section.</p>

<p>You want to use software and do whatever you want with it. You don't like GPL-style licenses, because those limit what you can do with the software. You may even have to <em>pay</em> for the software you're using! The horror!</p>

<p>In this case, it is in your best interest to brainwash developers into thinking that open source software should be free as in free beer, that the GPL is bad and that open source software should not be offered commercially. You'll sponsor the most radical zealots that are popular among developers looking for a role model. As a result, these developers will start producing software under a permissive license that you can use any way you want to.</p>

<p>Your task will be to make choices: to separate the wheat from the chaff. It is not your business to sell software:</p>

<ul>
<li>You are offering software as a service (e.g. Google)</li>
<li>You have a totally different business that relies on software (e.g. Amazon)</li>
<li>You sell closed source, proprietary products and you make a lot of money in professional services (e.g. IBM or Wipro)</li>
<li>Your main business is ads; your users are your product (e.g. Facebook)</li>
</ul>

<p>Once you are successful enough in one of the above, you can afford giving away your software for free (as in free beer). As you have gained a monopoly, it doesn't matter if competitors can also use your software. If they are peers, they may improve the code and redistribute it, in which case you benefit too. If they are contenders just starting a new business, you either crush them (because your brand is king and your marketing budget is bigger) or buy them (and possibly kill them afterwards).</p>

<p>This is a great way to make money with open source software, but I see some disadvantages. The moment a large corporation decides that the value created by a project doesn't justify the investment, the <em>""charity""</em> will stop. Oracle <a href=""http://www.tomitribe.com/blog/2013/11/feed-the-fish/"" rel=""noreferrer"">dropped GlassFish</a>, IBM <a href=""http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=AN&amp;subtype=CA&amp;htmlfid=897/ENUS913-081&amp;appname=USN"" rel=""noreferrer"">backed away from Geronimo</a>, Pivotal <a href=""http://java.dzone.com/articles/total-bummer-pivotal-drops"" rel=""noreferrer"">left Groovy</a>,... Only when disaster strikes (like was the case with Heartbleed), these companies suddenly start raising money to ""save the developers.""</p>

<p>That's not a sustainable model for open source, is it?</p>

<p>I don't know if there are any numbers about this, but it wouldn't surprise me if you'd see that most of the software distributed under a permissive license is written by <em>employees</em> (people working for a large corporation), whereas most of the software distributed under a copyleft license is written by <em>entrepreneurs</em> (people owning or working for a small to medium-sized company).</p>

<p><strong>Has it always been this way?</strong></p>

<p>No, free and open source software has undergone an enormous change. Large companies used to distribute FUD about software that was offered <em>for free</em>. Often these are the same companies who are now claiming that open source software should be free as in free beer. If you want to know how it was in the early days, I recommend watching <a href=""https://www.youtube.com/watch?v=fxjElWL8igo"" rel=""noreferrer"">OS Revolution</a>.</p>

<p><strong>How am I making money today?</strong></p>

<p>If you want to read more about my history in open source, I recommend reading the <a href=""http://itextpdf.com/press/one-million-by-one-million-interview"" rel=""noreferrer"">1M/1M blog by Sramana Mitra</a>. I founded my first open source company in 2008, 8 years after the first open source release of my product. In 2014, the group was profitable with a revenue of 5 million euro and an EBITDA of 43%. The company ranked 28th place in Deloitte's Technology Fast 500 in the EMEA region and it won first place as the fastest growing technology company in Belgium in the period 2009-2014.</p>
","210"
"What's the difference between Copyright and Licensing?","3854","","<h2>Preamble</h2>

<p>There are two other questions, specifically related to <a href=""https://opensource.stackexchange.com/questions/202/should-i-include-license-text-in-a-single-file-or-all-source-files"">Licensing</a> and <a href=""https://opensource.stackexchange.com/questions/292/should-i-include-a-copyright-line-in-every-file"">Copyright</a>. </p>

<p>In reviewing the answers and comments, I get the feeling that people generally consider the two to be the roughly same thing. If this is true, why do we worry about both?</p>

<p>It seems to me that they are very different things:</p>

<h2>For copyright</h2>

<ul>
<li>It exists, without me doing anything to assert it, from the moment of creation.</li>
<li>Unless explicitly assigned, or surrendered, it persists regardless of licence chosen for the software.</li>
<li>It grants the <strong>creator</strong> very specific legal rights and remedies (although, these may vary by jurisdiction).</li>
<li>Most forms of copyright have a defined duration (usually life + 'n' years).</li>
<li>In an open source project, every contributor retains copyright in their own contributions.</li>
</ul>

<h2>For the Licence</h2>

<ul>
<li>It is a legal document</li>
<li>I have to explicitly choose, or create, the license. It does not apply automatically.</li>
<li>It grants <strong>users</strong> of the software specific, and limited, rights.</li>
<li>Unless stated in the Licence itself, or until it is revoked, it remains enforceable in perpetuity.</li>
</ul>

<h2>Question</h2>

<p>Are they aspects of the same thing, or do they actually serve two different populations (producers and consumers)?</p>
","<p>Copyright is the legal term used to declare and prove who owns the intellectual property (the code, text, etc.).</p>

<p>Licensing is the legal term used to describe the terms under which people are allowed to use the copyrighted material.</p>

<p>You can think of it in terms of physical property, if you want, the copyright is like the ""deed"" to a house. It says you own the house. If you want, you can rent the house out to someone, and that rental agreement is the 'license'.</p>

<p>Copyright is different to a ""deed"" in that it is possible to license the material in different ways, to different people, all at the same time.</p>

<p>Like a ""deed"", though, you can sell ownership of the code to someone else, and that would be called a copyright transfer.</p>

<p>Only the copyright owner (or their agent) can enter in to a license agreement.</p>
","301"
"Is requiring a license a violation of the GPL? Can I get around it?","3759","","<p>At work, we use a version of GCC provided by a vendor of a proprietary OS. The vendor has modified gcc so that it will only run if it successfully acquires one of a limited number of licenses we've purchased from our license server. This seems very much not in the spirit of free software, and it's very annoying, but is it permitted under the GPL?</p>

<p>Assuming it is, shouldn't I also be able to request the modified source code from the vendor, and then make a new gcc executable without the obnoxious license check? Or could that be a terrible idea for legal reasons I'm ignorant of?</p>
","<p>You should be able to request the complete corresponding modified source code to the complete application from your vendor under the GPL without additional costs in excess of the media.  If he refuses, you can contact the FSF as the copyright holder to GCC and tell them your problems with that vendor: they are the only ones who can sue for compliance if the vendor cannot be convinced.</p>

<p>I suspect that the vendor would rather prefer to stop distributing GCC with a license manager compiled in rather than distributing the source code of their license manager library.</p>

<p>The version of GCC they distribute is most likely already one distributed under GPLv3.  In that case you can alternatively ask for universal keys making this copy run.  At least that's my reading of the GPLv3 but the respective sections give me a headache.</p>
","1891"
"Why is CC BY-SA discouraged for code?","3503","","<p>Everybody knows that you shouldn't use a CC BY-SA license on your code. <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F"" rel=""noreferrer"">Even the Creative Commons folk recommend against it. </a> What I don't know or understand is <em>why</em>. I can't seem to find any information explaining this.</p>

<p>I contribute as both an asker and answerer on <a href=""https://codereview.stackexchange.com/"">Code Review Stack Exchange</a>. Since SE asks us to license our contributions under CC BY-SA, I'd like to know the implications this has on code I post there. Most of my code is released under GPL3 or MIT otherwise. I know by posting it on SE I'm dual licensing, but what exactly am I agreeing to? </p>

<ol>
<li>Why is CC BY-SA discouraged for code?</li>
<li>What implications does dual licensing have for these (sometimes quite large) sections of code have from my projects?</li>
</ol>

<hr>

<p>Update: <a href=""https://meta.stackexchange.com/questions/271080/the-mit-license-clarity-on-using-code-on-stack-overflow-and-stack-exchange?cb=1"">Stack Exchange updated their terms of service in regards to code licensing in late 2015/early 2016.</a></p>
","<p><a href=""https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software"">CC's own FAQ</a> addresses the reasons, which I find satisfactory, so I'm just going to reproduce it here and expand on the key points:</p>

<blockquote>
  <p>Unlike software-specific licenses, CC licenses <strong>do not contain specific terms about the distribution of source code</strong>, which is often important to ensuring the free reuse and modifiability of software. Many software licenses also address <strong>patent rights</strong>, which are important to software but may not be applicable to other copyrightable works. Additionally, our licenses are currently <strong>not compatible with the major software licenses</strong>, so it would be difficult to integrate CC-licensed work with other free software. Existing software licenses were designed specifically for use with software and offer a similar set of rights to the Creative Commons licenses.</p>
  
  <p>Our licenses are currently not compatible with the GPL, though the CC0 Public Domain Dedication is GPL-compatible and acceptable for software. For details, see the relevant CC0 FAQ entry. We are looking into compatibility of BY-SA with GPL in the future; see the license compatibility page for more information.)</p>
</blockquote>

<p><em>(Bold is mine)</em></p>

<p>That is, CC-BY-SA</p>

<ul>
<li>Doesn't mention source code</li>
<li>Doesn't mention patents</li>
<li>Isn't compatible with major software licenses</li>
</ul>

<p>Why are these good reasons for not using CC-BY-SA?</p>

<p><strong>It doesn't protect access to source code.</strong>  The ""-SA"" part simply means, ""I'll share this piece of work, and you can use it as long as you then share yours under the same terms"". But there is no mention of alternate forms; this only covers the final, publicly-available form. So someone is perfectly within their rights to take CC-BY-SA code, produce a derivative software, and <em>only share the binary under CC-BY-SA</em>. By contrast, GPL explicitly mentions source code, and requiring the distributing source code, when you convey alternate forms such as binary form.</p>

<p><strong>It doesn't protect against patent disputes.</strong> This may or may not be important, as evidenced by many software licenses also not mentioning patents, but for some use cases it is very important.</p>

<p><strong>It isn't compatible with major software licenses.</strong> The FAQ specifically mentions GPL incompatibility, that is, it's impossible to combine and distribute CC-BY-SA and GPL licensed code in the same piece of software. Since the body of GPL-licensed and GPL-compatible-licensed software is much bigger than that for CC-BY-SA, releasing using CC-BY-SA greatly limits the usefulness of the code.</p>

<p>When choosing a license, you should define what you're trying to achieve with the license. CC-BY-SA provides much weaker protection than copyleft software licenses, since it doesn't guarantee access to source code, but because it is so incompatible with other licenses, it is more restrictive in practice. It's very likely that there are much more appropriate licenses than CC-BY-SA, for whatever you're trying to achieve. For example, if access to source is not an issue, try a permissive license. If you want to ensure that your code remains freely available, try a copyleft license.</p>
","1718"
"How to explain to users that we do this in our spare time?","3415","","<p>Success can be painful for a FLOSS project. We now have nearly a thousand active users and many more people are becoming active contributors to our backlog/issue tracker. Note that while we're getting much more activity around <em>discussing</em> bugs &amp; feature requests, the number of active contributors actually submitting pull requests has remained very small. It's really still just the core team of 3 or 4 who are actually maintaining the project. </p>

<p>Now, the core team all have day jobs and, many of us, families. We have other responsibilities. I personally haven't been able to make a commit in several months now. I've been keeping up with monitoring the forum, but that's about it. This leaves just one developer actively working on the project at the moment. </p>

<p>It's great that our users are getting involved. I love it, but some are honestly becoming a bit pushy about some things that they honestly don't fully understand. I've tried explaining that:</p>

<ol>
<li>What they're asking for would take a considerable amount of work in some cases, nearly impossible in others. </li>
<li>We do this in our very limited free time.</li>
</ol>

<p>Now, our project is free as in beer and I've repeatedly encouraged people to submit pull requests, reminding them that the fastest way to get their feature implemented is to write it themselves. This doesn't seem to be doing any good though. </p>

<p>How can I explain to these users that it's a small dev team, working in their free time, providing zero cost software and that features <em>will</em> take a long time to get to market?</p>
","<ol>
<li>Put it on the front page.</li>
<li>Put it in a pinned message at the top of the forum.</li>
<li>Stop worrying about it. </li>
<li>Find a way to create a marketplace where people can put up money if they care to, and someone else cares to take it.</li>
</ol>

<p><strong>You don't owe the universe anything.</strong> You and your colleagues built what you built to scratch your own itches and made a gift of code. If other people want to use it, you're delighted. But if they expect the level of support of a for-money product, they need to be reeducated. Just reeducate them. Any time someone complains about the lack of a fix or a response, and you have a moment to spare, just post a link to the boilerplate, and go back to your life. Otherwise, leave them to do the work of finding all the explanations you've already left around.</p>

<p>If they all wander away, so what? You scratched your itch, your code solves your problem. The rest of them are just along for the ride.</p>

<p>You cannot educate the internet. Whatever you do, you will get email messages from people who are hostile, confused, or over-entitled. Don't let them worry you.</p>
","1954"
"What can I do when a fork of my project is out-competing mine?","3359","","<p>Suppose I'm working on a FLOSS project and someone forked it and the forked project seems to be moving faster than mine and gains more popularity than my original project (possibly because the people behind the fork have a bigger team). </p>

<p>I'm excited people are showing interest in my project, but feel discouraged because, as the original creator of the project, I play no part in the development of the most popular fork of the project now, since no decisions regarding changes made to the fork are run by me. The maintainers of the fork show little to no interest in cooperating/communicating with me.</p>

<p>Should I just abandon my fork and join theirs, if I want to stay relevant to the development of this project, or is there another option?</p>
","<p>Forking is not only a possibility of open source development, it's an express intention. If their fork is more popular than yours, this may be because they do something technically better than you, in which case you can merge back their patches if they operate under a compatible license.</p>

<p>If they are doing something socially better than you are, take notes and learn.</p>

<p>If it's just a differing direction they're taking, the fork created more choice, and yours proved the less popular one.</p>

<p>Personally, I never experienced a fork that didn't try to solve the problem internally first, but just unilaterally forked without much communication. Usually, a fork is made either with the intention to merge back, or as a last resort when views turn out irreconcilable.</p>
","1275"
"MIT license and ""All rights reserved.""?","3332","","<p>I recently saw something like this:</p>

<pre><code>Copyright (c) Some Corporation

All rights reserved.

MIT License

...
</code></pre>

<p>And then the MIT license follows. Now, from what I know the <code>MIT</code> license is one of the most permissive licenses. Is it correct to add <em>All rights reserved.</em> in this context?</p>
","<p>It's correct but unnecessary. It's there for clarity.</p>

<p>When you do some work, the default copyright position is <em>all rights reserved</em>. Nobody can do anything with your work without your express permission, or a license to do so.</p>

<p>The MIT license is your license to other people, to make it clear what they can do. However, any rights not explicitly granted by the license are still reserved by you.</p>

<p>Since the default position <em>is</em> all rights reserved, it's not strictly necessary to add that to a copyright notice - but it does make it clearer, and can help avoid scenarios where someone uses your work illegally.</p>

<p>By having the all rights reserved notice, and then a license, you're affirming it's your work and your rights, but you allow people to do these specific things with it.</p>
","2123"
"Do you violate the GPL if you provide source code that cannot be compiled?","3237","","<p>In <a href=""https://softwareengineering.stackexchange.com/questions/314125/is-open-source-really-open-if-compilation-process-is-unclear"">a recent question on programmers.SE</a><sup>&dagger;</sup>, it was asked whether a project is open source if it provides some source code but doesn't make it clear how to actually compile it. Consensus is that it's not required for compilation to be <em>easy</em>, but that raises the question where to draw the line between <em>non-obvious</em> and <em>impossible</em>.</p>

<p>Assume a company sells a program written in, say, C, including some code taken from third-party, GPL-licensed sources. They provide both a binary of the program, as well as all their own C source code used in that project, but no e.g. Makefile or build scripts. Or, only scripts which assume the presence of some particular (possibly non-free, in-house) compiler. It turns out the project can not just be compiled with a simple setup of the usual implicit rules (like <code>.c</code>+<code>.h</code> &rarr; <code>.o</code> and <code>*.o</code>&rarr;<code>a.out</code>).</p>

<p>Is the company violating GPL?</p>

<hr>

<p><sup>&dagger;</sup><sub>I'm not asking about the specific program discussed in the linked question (which, apparently, is actually not that hard to compile unless you happen to use Windows), nor any other particular project.</sub></p>
","<p>IANAL, but I believe the answer is <strong>yes, you violate GPL.</strong> If you distribute binaries, then GPL requires that you also distribute all the files necessary to rebuild that same binary, and to make modifications. GPLv3 has the specific term ""corresponding source"", which you must convey in addition to, and in a similar manner to the source code. <a href=""http://www.gnu.org/licenses/gpl.html"" rel=""nofollow noreferrer"">Under section 1</a>:</p>

<blockquote>
  <p>...</p>
  
  <p>The “Corresponding Source” for a work in object code form means <strong>all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities</strong>. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p>
  
  <p>...</p>
</blockquote>

<p>(emphasis mine)</p>

<p>Under this generalised definition, the following will be included:</p>

<ul>
<li>Makefiles (needed to generate object code from source code)</li>
<li>Installation scripts (needed to install object code)</li>
<li>Program data files (needed to run the object code)</li>
</ul>

<p><a href=""http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"" rel=""nofollow noreferrer"">GPLv2</a> also has a similar clause, in section 3: </p>

<blockquote>
  <p>... For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, <strong>plus the scripts used to control compilation and installation of the executable</strong>. ...</p>
</blockquote>

<p>So if someone distributes binaries and source code but does not provide compilation instructions (e.g. Makefiles), they may be violating the GPL.</p>

<p>One of the goals of the GPL is to protect users' freedom to modify software. These clause are meant to serve that goal.</p>

<p>I'm surprised that among the voluminous GPL FAQ questions, none address this point. But gpl-violations.org (not GNU affiliated afaik) <a href=""http://gpl-violations.org/faq/sourcecode-faq/"" rel=""nofollow noreferrer"">has one</a>:</p>

<blockquote>
  <p>The GNU GPL demands that as soon as you distribute GPL licensed software in executable format you make available the ""<strong>complete corresponding source code</strong>"". The GNU GPL also contains a definition of this term:</p>
  
  <p>The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, <strong>plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable</strong>.</p>
  
  <p>This is a quite precise definition. <strong>For a typical C program, this translates into all the source code (.c files) plus header files (.h files) plus the scripts used to control compilation and installation</strong>.</p>
</blockquote>

<p>(emphasis mine)</p>

<p>The SFLC also publishes an article, <a href=""https://www.softwarefreedom.org/resources/2008/compliance-guide.html"" rel=""nofollow noreferrer""><em>A Practical Guide to GPL Compliance</em></a>, which contains a section relevant to the question:</p>

<blockquote>
  <p><strong>4.2.2 Building the Sources</strong></p>
  
  <p>Note that you must include “scripts used to control compilation and installation of the executable” and/or anything “needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities”. These phrases are written to cover different types of build environments and systems. Therefore, the details of what you need to provide with regard to scripts and installation instructions vary depending on the software details. <strong>You must provide all information necessary such that someone generally skilled with computer systems could produce a binary similar to the one provided</strong>.</p>
  
  <p>...</p>
  
  <p>[...] Sometimes, however, scripts were never written (e.g., the information on how to build the binaries is locked up in the mind of your “build guru”). In that case, we recommend that you <strong>write out build instructions in a natural language as a detailed, step-by-step <code>readme</code></strong>.</p>
  
  <p>No matter what you offer, <strong>you need to give those who receive source a clear path from your sources to binaries similar to the ones you ship</strong>. If you ship a firmware (kernel plus filesystem), and the filesystem contains binaries of GPL’d programs, then you should provide whatever is necessary to enable a reasonably skilled user to build any given GPL’d source program (and modified versions thereof), and replace the given binary in your filesystem. If the kernel is Linux, then the users must have the instructions to do the same with the kernel. The best way to achieve this is to make available to your users whatever scripts or process your engineers would use to do the same.</p>
</blockquote>

<p>(emphasis mine)</p>

<p><strong>Note:</strong> All of the above only applies if you are <strong>distributing a binary</strong>. If you <em>only</em> distribute source code, there is no requirement to distribute all your changes, or for these changes to be even compilable. See section 6 of the GPL v3, or term 3 of the GPL v2.</p>

<p><em>Thanks to <a href=""https://opensource.stackexchange.com/users/4657/sleske"">sleske</a> for the corrections to GPLv2 applicability.</em></p>
","2690"
"Are pirated GPL-derived ""premium themes"" legal?","3077","","<p>A fellow Drupal developer is suggesting that we use themes from a collection of ""Premium"" paid Drupal themes downloaded from a torrent site on a shared project. It appears that most or all of these themes are derived from GPL-licensed Drupal themes such as <a href=""https://www.drupal.org/project/zen"" rel=""nofollow"">Zen</a> and <a href=""https://www.drupal.org/project/framework"" rel=""nofollow"">Framework</a>.</p>

<p><strong>Since these 'pirated' themes are derived from GPL software, are they legal for use?</strong></p>
","<p>If you want to be 100% clean (and you usually do in a commercial project), you cannot use pirated content on your site. Your defense is based on the assumptions that the authors of Premium themes (a) violated the GPL licence of the original content and (b) will be willing to redistribute their work under GPL licence if they're forced to. Both assumptions may not be true:</p>

<p>(a) - it is perfectly legal for the authors of the original themes to licence their work under GPL free of charge <strong>and</strong> also licence the very same work to a third party for a fee. Granted, a GPL violation is much more probable, but it's a guess, not a fact.</p>

<p>(b) - even once the GPL violation will be proved for those Premium themes, there's no guarantee the premium content will be automatically licensed under GPL terms. For example, authors of the premium themes can settle to pay copyright damages to original authors, refrain from further distribution, then sue you for unauthorized use of their work.</p>

<p>Whether GPL applies (and to what) also depends on the nature of modifications. Suppose the authors of Premium themes tweaked the JavaScript of the drop-down menu and added custom icons. If they now distribute this theme, they have to release their JavaScript tweaks under GPL, but nothing forces them to put their icons under GPL, and without an explicit license from their side you have no rights to reuse those icons.</p>
","1883"
"How is selling FLOSS packages for monetary compensation a viable strategy?","2919","","<p>This question is about selling FLOSS and its source-code. According to <a href=""http://www.gnu.org/philosophy/selling.en.html"">Selling Free Software</a> and <a href=""http://opensource.org/faq#commercial"">commercial purpose</a>, Free Software can be distributed with or without charge.</p>

<p>My friend asked me two questions which I didn’t answer <em>exactly</em>, so I would like to ask one here, in order to know <em>absolutely</em> and explain.</p>

<p>Consider a company that produces Free Software (e.g., VLC under GPL), and sells that software at some price on its website and/or in compact disc form. Suppose someone (say Alice) bought it. According to the FLOSS license, Alice is free to redistribute with or without charge. If Alice publishes a copy gratis on her website in public, then anyone can directly get a copy from Alice, thus taking customers away from the original paid authors. Thus, I don’t understand the selling strategy of FLOSS. Help me to understand.</p>

<hr>

<p>I know that some FLOSS packages are distributed with some paid services/maintenance and some with dual licensing (with proprietary software). But here I am talking about FLOSS-only open-source (no dual / with proprietary) licensing and not any services/maintenance charge.</p>

<p>In brief: <strong>How is selling FLOSS packages for monetary compensation a viable strategy?</strong></p>
","<p>Some years ago, before ubiquitous access to the Internet, you could sometimes make money on free software by selling  it on a professionally produced CD-ROM.  People would pay for having a verified version of the software delivered to them directly from by the primary source, (the company that authored the software), instead of shopping around for a cheaper alternative supplier whose version would be of unknown vintage and provenance.</p>

<p>That business model is dead now.  Instant downloads from the Internet of a complete distribution is what is expected. Putting this distribution behind a paywall does not work, because Google makes it too easy to locate alternate suppliers that give users access to exactly the same tarball for free (i.e. <em>without</em> the paywall).</p>

<p>However. there are many <em>different</em> successful business models for Free Software and Open Source software in 2015, but selling the packages themselves is not one of them.</p>

<p>Wikipedia has a <a href=""https://en.wikipedia.org/wiki/Business_models_for_open-source_software"">long article</a> devoted to the subject.</p>

<p>I am not going to reproduce that long Wikipedia article here, but rather focus on the one of these business models I have personal experience with: Selling <strong>professional services</strong> - with a bit more detail than the <a href=""https://en.wikipedia.org/wiki/Business_models_for_open-source_software#Selling_professional_services"">Wikipedia</a> provides.</p>

<p>The problem for many small software companies is to actually get anyone to <em>look</em> at their amazing software.  If the brand is not well not known, or the software not generally acknowledged as ""amazing"", my experience is that it is hard to sell software the traditional way (i.e. making cold calls, spending money on advertising in magazines, having stands on trade shows, etc.) Just making prospective customers software <em>notice</em> your software may in some projects be just as expensive as writing it.</p>

<p>Also, if your company is small, your customer cannot be sure your company will survive.  If they pay good money for closed source software, and the company behind it implodes, there will be no more support and no more releases.  This renders most software useless after some time.</p>

<p>Making free software publicly available can be considered an <em>alternative way of marketing</em> that makes your software reach more prospective customers that traditional selling techniques.</p>

<p>Free software also comes with following advantages for the user compared to non-free software:</p>

<ul>
<li>It is available from download on the Internet and they can try it out for free.</li>
<li>If your company implodes, the users are <em>not</em> left high and dry. Since they have the source code, they can get always get somebody else to support and maintain it.</li>
</ul>

<p>However, so far I've only pointed out the advantages of free software for the <em>user</em>.  You, the author, haven't seen any money yet.</p>

<p>What may happen if you do this, if your software truly is good and generally useful, is that you'll see thousands of downloads.  Most of those will indeed use the software for free, and never earn you a penny.</p>

<p>However, you have <em>users</em> (hopefully thousands), and <em>some</em> of these users will want <strong>professional services</strong>.  That this:</p>

<ul>
<li>they will be willing to pay you an annual support fee, in return for you supporting them (hot-line for user questions, first priority bug-fixes, etc.)</li>
<li>they will be willing to pay you for specific customizations that address specific use cases</li>
<li>they will be willing to pay consulting and custom development, where you adapt and integrate your free software to their specific IT infrastructure</li>
</ul>

<p>The business model for professional services is not unique to free software.  This is the usually a profitable business model for proprietary software.</p>

<p>However, if you're a small software company, you may never see your software used by <em>anyone</em> if you go the proprietary route. There are too many barriers between you and any users.  With free software, you may get thousands of users, and if only a fraction of those sign up for professional services, you will have a healthy business.</p>

<p>In addition to selling professional services, there also exists a business model that involves some free software/open source components that is called <strong>freemium</strong>.</p>

<p>In this business model, there is an application that can be downloaded for zero cost that is also free software (i.e. ""free"" as in ""freedom"" as well as in ""free beer"").  However, this application only provides some limited service.  The service can be enhanced, either by buying non-free premium <em>plugins</em> that integrates with, and enhances, the free application, or the free application communicates with some SAAS (Software As A Servivce) <em>web-service</em> that only provides a very basic  service for free. To ""unlock"" more functions in the web-service, the customer has to pay for premium services.</p>

<p>I have no personal experience with this business model, but the anti-spam tool <a href=""https://www.drupal.org/project/mollom"">Mollom for Drupal</a> (available under GPLv2+) is an example of a project that is successfully using the <strong>freemium</strong> business model.</p>
","1256"
"What is copyleft?","2591","","<p>Straight up: I've never heard of the term 'copyleft' before. The fact that I get that little red squiggle under it tells me it's not really a word. Concisely, my question is, what does it mean to you? </p>

<hr>

<p>I saw it tagged on a few questions so I read the <a href=""//opensource.stackexchange.com/questions/tagged/copyleft"">tag description:</a></p>

<blockquote>
  <p>For questions about the copyleft concept (also known as Share-Alike), a concept that promotes or enforces the use of the same or compatible license for derived works.</p>
</blockquote>

<p>And I read the <a href=""https://en.wikipedia.org/wiki/Copyleft"">Wikipedia</a> page on it. My understanding is that copyleft has attributes of Share-Alike but the author must disclose any other terms alongside it. </p>

<p>To me, it seems like a bit of a useless term. </p>

<p>Why describe it as copyleft if you need to add a licence to it anyway? Would you not be better off describing it as copyright with already-agreed-upon licenses? Otherwise it's only another word for Share-Alike. </p>
","<p><em>Copyleft</em> is actually a term coined by Richard Stallman (also called RMS) who is the pioneer of the <a href=""http://fsf.org/"" rel=""nofollow"">Free Software Movement</a> which ultimately resulted in today's world where people take using <a href=""https://en.wikipedia.org/wiki/Open-source_software"" rel=""nofollow"">FOSS software</a> so much for granted.</p>

<p>Stallman originally used this term to distinguish his way of free software licensing (GNU GPL/LGPL) from the other <em>Copyright</em> licenses which are typically designed by proprietary companies to keep the holding rights of a software to themselves by not disclosing the source.</p>

<p>You see, <em>freedom to users</em> is the major objective of FSF movement and it doesn't have anything to do with <em>zero cost</em> or <em>free as in beer</em>, it refers to <em>free as in freedom</em>, which is more expressed by the term <em>libre</em> than <em>free</em>.</p>

<p>The <a href=""http://www.opensource.com"" rel=""nofollow"">other camp</a> in the FOSS world, by contrast, prefers to use the term <em>permissive</em> instead of <em>copyleft</em>. This camp favors software licenses like MIT, Apache, BSD, etc. which generally grant all usage rights along with the code. This second camp also prefers the term open source to free software. The reason is that <em>software innovation</em> resulting from source code being openly developed is a far more important objective for this camp than some liberal ideology.</p>

<p>Regardless, both these camps continue to contribute their efforts in the FOSS world today and to an extent, respect each other's views.</p>

<p><strong>EDIT</strong></p>

<p>To elaborate a bit on the legal implications, whilst both permissive and copyleft licenses grant their users freedom along with the code, there is a difference between these two kinds of freedom. Permissive licenses grant freedom to do just about anything with the source code to that <em>one particular user</em>. Copyleft licenses by contrast, tries to secure freedom to it's entire <em>userbase</em> by restricting that particular user's ability to make said source code proprietary or closed. It achieves this by mandating that any further modification to the copyleft licensed source should be distributed on a similar copyleft license terms. This mandate usually gives the incorrect impression to the initial observer that copyleft licenses are restrictive or ""viral"" in nature, but a detailed analysis reveals that its not true. Copyleft just tries to secure maximum freedom for the entire community or the user base, not just one user.</p>

<p>As I described in one of the comments below, the difference between permissive and copyleft is similar to the one between dictatorship and democracy. Rulers in both kinds of rule usually have the freedom to do anything, but democracy has some restrictions on the ruler since it tries to secure freedom to the entire masses, not just that one dictator.</p>

<p><strong>EDIT-2</strong></p>

<p>From the above analogy, I don't want to imply any negativity about the word <em>dictator</em> here, nor do I want to send a message that I'm in favor of copyleft licenses and against the permissive ones. In fact, <em>dictatorship</em> itself is a neutral word in Political Science, but only due to actions of a few bad rulers, its usage has acquired a negative connotation. Dictators can be good too (like <a href=""https://en.wikipedia.org/wiki/Benevolent_dictator_for_life"" rel=""nofollow"">BDFL Linus Torvalds</a>). Similarly, permissive licensed software, in the right hands could bring out the best for everyone.</p>

<p>However, I do think GPL is a good thing because it prevents the <em>appleization</em> of software, but Apple positively surprised us today by taking a strong stance in <a href=""http://www.apple.com/customer-letter/"" rel=""nofollow"">favor of its users</a>. Tomorrow, it might even go ahead and open-source the OSX stack (though I don't think it that likely in the near future).</p>
","2458"
"If I'm using a GPL 3 library in my project, can I license my project under MIT license?","2569","","<p>If I'm using a library that is licensed under GPL v3 in my project, can I license my project under the MIT license? I tried to read the GPL v3 text but I cannot understand it without your assistance.</p>
","<p><strong>No</strong>; incorporating or linking against GPL requires that your project-as-a-whole be distributed under GPL. But you can include <strong>MIT licensed parts</strong> (or another GPL-compatible license) in the project. Also, it depends.</p>

<p>The pertinent clause is 5 (c):</p>

<blockquote>
  <p>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</p>
</blockquote>

<p>So if GPL-licensed code ever gets included in your project, for example via linking against a GPL'd library, you must also provide your whole project under the GPL.</p>

<p>There's some disagreement on whether GPL comes into play when a library is dynamically linked; GNU are of the opinion that it does, and provides the alternative license LGPL, or recommends adding exceptions to GPL.</p>

<p>However, you can still license parts of your project under MIT, you just need to make sure the MIT and GPL sections are clearly separated. SFLC have published <a href=""https://www.softwarefreedom.org/resources/2007/gpl-non-gpl-collaboration.html"">this document</a> on how permissive and GPL code can be mixed in a project. This means that the MIT portions can be shared under that license, but if the whole project is distributed, it must be under GPL.</p>
","1641"
"What's the difference between permissive and copyleft licenses?","2541","","<p>I've heard both terms thrown around, but I'm a bit unclear as to how the licenses differ. </p>

<p>How is copyleft different to a permissive license? Is copyleft just the standard for open source licenses?</p>
","<p>The <a href=""http://copyfree.org/policy/copyleft"">Free Software Foundation</a> invented the term Copyleft. Here's what they have to say about it:</p>

<blockquote>
  <p>Copyleft is a general method for making a program or other work free, and requiring all modified and extended versions of the program to be free as well. </p>
  
  <p>The simplest way to make a program free software is to put it in the public domain, uncopyrighted. This allows people to share the program and their improvements, if they are so minded. But it also allows uncooperative people to convert the program into proprietary software. They can make changes, many or few, and distribute the result as a proprietary product. People who receive the program in that modified form do not have the freedom that the original author gave them; the middleman has stripped it away.</p>
</blockquote>

<p>So copyleft implies a stronger set of restrictions in the license than the terms ""Free software"" or ""Open Source"" imply. Copyleft licenses <em>are</em> both free and open source licenses, but not all licenses that are free software or open source licenses are Copyleft.</p>

<p>Copyleft denotes a type of FOSS license that prevents, through license terms, the ""proprietization"" of FOSS code. If a license is not Copyleft, but it is FOSS, the user may (depending on the exact terms of the license), be able to release binary-only copies of the software, with limited distribution (e.g. license fees and criminal penalties for those who distribute the binaries without authorization from the developers), and without providing the modified source code.</p>

<p>According to the FSF, the Four Freedoms are:</p>

<blockquote>
  <p>The freedom to run the program as you wish, for any purpose (freedom 0).</p>
  
  <p>The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.</p>
  
  <p>The freedom to redistribute copies so you can help your neighbor (freedom 2).</p>
  
  <p>The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.</p>
</blockquote>

<p>A copyleft license ensures that anyone who receives the binary version of the software is entitled to the source version (including any source modifications that went into any binaries they received), <strong>and</strong> that person, in turn, is also <strong>required</strong> to pass down the four freedoms to anyone else that <em>they</em> pass said binaries/code on to.</p>

<p>A non-copyleft FOSS license could allow one person to receive the four freedoms as part of obtaining a copy of the code, but then that person can <em>choose</em> whether they want to give the four freedoms (or any individual one of the freedoms) to someone else that they give the software to.</p>

<p>It is important to note that, based on the way the copyleft was defined, a license that <strong>requires</strong> a recipient of the source or binaries to respect <em>some</em> freedoms, but not all of them, <strong>is not a copyleft license</strong>. It is only copyleft if each recipient of the software must grant <strong>all four</strong> freedoms to <em>everyone</em> they give a copy to.</p>

<p>For example, consider these simplistic licenses:</p>

<p>(1) <strong>You</strong> are given the four freedoms with respect to this software. It's up to you if you want to give others any of the freedoms or not when you distribute it further.</p>

<p>(2) <strong>You</strong> are given the four freedoms with respect to this software. In addition, if you distribute this software to anyone else, you <strong>must</strong> grant them Freedom 0 and Freedom 1. It's up to you if you want to give them Freedom 2, and you <strong>may not</strong> give them Freedom 3.</p>

<p>(3) <strong>You</strong> are given the four freedoms with respect to this software. In addition, if you distribute this software to anyone else, you <strong>must</strong> grant them <strong>all four Freedoms</strong>; otherwise, you violate this license.</p>

<p>The first license is a standard permissive license (similar to the BSD license), and is <em>not</em> copyleft because it does not <em>require</em> all four freedoms to be passed on.</p>

<p>The second license is a weird license (I've never seen one quite like this in practice) that <em>prohibits</em> the passing-on of one freedom; <em>allows</em> (optionally) another; and <em>requires</em> two. But the requiring of the first two isn't enough to make it copyleft. It may be free software for the person receiving a copy initially, but it cannot be free software after that, because freedom 3 is prohibited from that point onwards in the distribution chain.</p>

<p>The third license is a standard, copyleft-compliant license.</p>

<p>It's important to keep in mind that non-copyleft licenses can transform from being free/open source software to non-free, non-open source software licenses, because the enforcement of the preservation of the freedoms is <em>not</em> in place. Consider this distribution chain, where each letter is a person, and ""A"" is the person who originally wrote the first copy of the software and determined its license.</p>

<p>A -> B -> C -> D -> E</p>

<p>If this is a non-copyleft FOSS license, the only person guaranteed to have all four freedoms is <strong>A</strong> (well, technically, if he distributed it as FOSS, then <strong>B</strong> should have gotten all four freedoms, too).</p>

<p>If this is licensed under copyleft, then if every person, all the way down to <strong>E</strong>, does <em>not</em> have all four freedoms in respect to the software, then someone violated the license terms set forth by <strong>A</strong>, and is liable for copyright infringement!</p>

<p>Thus, when we talk about non-copyleft FOSS licenses, we have to ask the question, <em>free for <strong>whom</em></strong>? -- but in the case of copyleft licensed software, the answer is, <em>free for <strong>everyone</em></strong>.</p>
","42"
"Can I sell my MIT-licensed software if it is modified by others?","2478","","<p>Suppose I create some software from scratch. I sell the software, but I also keep it open source under the MIT License. Someone forks my repository and makes some great improvements to my software. Can I then clone their repository, and sell the improved software without sharing any profits?</p>
","<p>Depending on how they chose to provide their fork, yes.</p>

<p>The MIT license, which you chose to license your work under, doesn't prevent anyone downstream from changing the license, nor from changing the license of a derivative - unlike a copyleft license such as the GPL. They can essentially license their fork how they like.</p>

<p>If they relicense it under CC BY-NC, you're not allowed to sell it because of the NonCommercial clause in BY-NC. However, that's not a free license.</p>

<p>If they've relicensed it under a free license (of which there's a list on the FSF website), then <em>by definition</em> this allows you to redistribute their work and sell it on.</p>

<p>Keep in mind, however, that if they're providing the same package for free, you're not going to get many customers simply because it's cheaper elsewhere.</p>
","1232"
"Differences between Firefox and IceCat?","2234","","<p>From <a href=""https://www.gnu.org/software/gnuzilla/"" rel=""nofollow"">GNUzilla</a>:</p>

<blockquote>
  <p>GNUzilla is the GNU version of the Mozilla suite, and GNU IceCat is the GNU version of the Firefox browser. Its main advantage is an ethical one: it is entirely free software. While the Firefox source code from the Mozilla project is free software, <strong>they distribute and recommend non-free software as plug-ins and addons. Also their trademark license restricts distribution in several ways incompatible with freedom 0</strong>.</p>
</blockquote>

<p><sup>emphasized by me</sup></p>

<p>I want to understand the trademark license restriction. And how Firefox is not completely free. I would also like to ask: What are the differences between Firefox and IceCat?</p>
","<p>The main problem (that also led to the development of Debian's Iceweasel) is the <a href=""https://en.wikipedia.org/wiki/Mozilla_Corporation_software_rebranded_by_the_Debian_project"" rel=""nofollow"">trademark issue</a>, that binds the use of the name Firefox and the logo to certain requirements, that were unacceptable to Debian and GNU. For instance in the case of Debian, Mozilla demanded to upgrade the version of Firefox instead of backport bugfixes as Debian does it. These issues are avoided by renaming it and use a different logo. As the creation of <a href=""https://en.wikipedia.org/wiki/GNU_IceCat"" rel=""nofollow"">Icecat</a> shows, that is pretty easy and functionality is unaffected.</p>

<p>Moreover, Icecat (and some Linux distributions) remove a number of files from the distribution, they esteem as nonfree. Here is a <a href=""http://cvs.savannah.gnu.org/viewvc/gnuzilla/remove.nonfree?revision=1.9&amp;root=gnuzilla&amp;view=markup"" rel=""nofollow"">list of files removed from Firefox for Icecat</a>.</p>

<p>And finally another issue the GNU-project has, is also bolded in your quotation. Firefox allows proprietary plugins and extensions. Moreover, these are distributed through Mozilla's infrastructure and are recommended in the process.</p>
","842"
"How do I see the source code of Notepad++?","2233","","<p>I have downloaded and installed Notepad++ and it is working fine. I hear it is open source. How do I see the source code?</p>
","<p>The <a href=""https://notepad-plus-plus.org/download/v6.7.9.2.html"" rel=""nofollow"">downloads page</a> lists a source code download (the last download on the list). The link points to a <a href=""https://github.com/notepad-plus-plus/notepad-plus-plus/releases/tag/v6.7.9.2"" rel=""nofollow"">GitHub release</a> of the current version.</p>

<p>It's mostly written in C++, so you will need some method of compiling it if you want to run and modify it. Personally, I use MS Visual Studio 2013 because of its multi-language capabilities.</p>

<p>To be notified of when a new version of the source code comes out, you can watch the GitHub repository and a notification will be delivered to your GH account whenever it is updated.</p>
","785"
"What is the point of including the MIT copyright text if you use someone's code licensed under MIT?","2182","","<p>I'm confused as to what this license really means.</p>

<p>Say I have a large piece of software I plan on selling and keeping closed source. It makes use of several small resources that are under the MIT license.</p>

<p>Do I just have to copy paste each MIT license with their names in it into the source code? That seems pointless since it will remain closed source.</p>

<p>If the software is distributed by a service like Google Play which only takes a .apk file there's no way to distribute the license with the software, if that's what you're supposed to do.</p>

<p>So in this case would using those small resources licensed under MIT not be allowed? Or what?</p>

<p>Also, in the license text, what does ""substantial portions of the Software"" mean? Which software? The software that is licensed under MIT? Or any other new software using this MIT licensed software?</p>

<p>I'm quite confused as you can tell, so it would be nice if someone could clarify some of this for me.</p>

<p>EDIT: Additionally, how would someone be able to tell what parts of the code were licensed under MIT? If they are able to tell that somehow, how would they be able to tell which person made that specific portion?</p>
","<p>There seems to be a misconception with how to comply with the <a href=""https://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">MIT license</a>. Here's the relevant sentence, and only condition in the license apart from the warranty disclaimer:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>You can include the license text in your source file. If you do, <strong>and</strong> if you distribute your software as source code only, as some OSS do, the license text is automatically visible and right there with the MIT-licensed code. But if you distribute binaries, the license text (typically) gets compiled away, therefore you are no longer fulfilling the single condition in the license. What you need to do is include the license with your binary distributions, maybe as a text file, or embedded in the program's about dialog. For most distribution channels, there's some way of including the source code license(s). For an Android example, look at Settings > About > Legal Information > Open source licenses and enjoy.</p>

<p>As for what ""substantial portion of the software"" means, it refers to the MIT-licensed code. See this question for what ""substantial portion"" means: <a href=""https://opensource.stackexchange.com/q/2187/175"">How much is &quot;substantial portion&quot; in MIT licence?</a></p>

<blockquote>
  <p>Additionally, how would someone be able to tell what parts of the code were licensed under MIT? If they are able to tell that somehow, how would they be able to tell which person made that specific portion?</p>
</blockquote>

<p>If you don't follow the MIT license, you are violating copyright. It's true that it's hard to prove copyright violation if you don't have access to source code, but a court can compel you to divulge your source code so that a judgement can be made. If you've genuinely and blatantly violated copyright, it will be very easy to prove.</p>
","4061"
"What is the relation and/or difference between freeware and free software?","2002","","<p>Freeware and free software sound very similar. What is the relation between them?</p>
","<p><a href=""https://en.wikipedia.org/wiki/Freeware"">Freeware</a> is software that is released and can be downloaded and used without cost. No other rights are implied by the freeware label (although the author might offer more). So freeware doesn't imply:</p>

<ul>
<li>access to the source code</li>
<li>commercial use</li>
<li>right to redistribute</li>
<li>right to change</li>
</ul>

<p>All things <a href=""https://en.wikipedia.org/wiki/Free_software#Definition_and_the_Four_Freedoms"">free software</a> does allow. Free software is defined by the four freedom it grants:</p>

<ul>
<li>Freedom 0: The freedom to run the program for any purpose.</li>
<li>Freedom 1: The freedom to study how the program works, and change it to make it do what you wish.</li>
<li>Freedom 2: The freedom to redistribute copies so you can help your neighbor.</li>
<li>Freedom 3: The freedom to improve the program, and release your improvements (and modified versions in general) to the public, so that the whole community benefits.</li>
</ul>
","1376"
"Is Docker still free and open source?","1961","","<p>Docker recently <a href=""https://blog.docker.com/2017/04/introducing-the-moby-project/"" rel=""noreferrer"">introduced</a> the Moby project, which Docker is now based on, and <a href=""https://github.com/moby/moby/blob/master/LICENSE"" rel=""noreferrer"">which is free software (Apache 2.0)</a>. But the instructions to install <a href=""https://store.docker.com/editions/community/docker-ce-server-ubuntu"" rel=""noreferrer"">Docker CE</a> don't mention Moby at all, and they don't mention free or open source software. The <a href=""https://www.docker.com/docker-software-end-user-subscription-agreement"" rel=""noreferrer"">terms and conditions</a> linked to from that page look proprietary, and only make generic references to open source software.</p>

<p>So, if I followed <a href=""https://store.docker.com/editions/community/docker-ce-server-ubuntu"" rel=""noreferrer"">the instructions</a> to install Docker CE, would I be installing fully free software?</p>
","<p>Docker Community Editions are products from Docker built on- and assembled from open source components. Some Docker Community Editions are based solely on open source projects (like Docker for Debian, Ubuntu, Fedora and other open Linux distributions). Some Docker Community Editions incorporate components that are not open source.</p>

<p>We try to let the openness of the underlying infrastructure guide the openness of the corresponding Docker Edition. Docker Editions for open, community-oriented Linux distros are also fully open, while Docker for Mac and Windows (for example) may incorporate some non open source components.</p>

<p>The Moby-related changes are still in progress, so stay tuned for more.</p>
","5458"
"Open-source license to prevent commercial use?","1941","","<p>I could really use some help picking the right license for my project. The project is already released on github under the GPLv3 license but I have been made aware that this prevents uses that I want to allow.</p>

<p>My requirements are like this:</p>

<ul>
<li>The project is a native windows library that will, due to it's nature, always be linked dynamically.</li>
<li>I want to allow the use of this lib in source or binary form for any not-for-profit use (open-source, closed-source, educational, company-internal is all fine to me) putting as little restrictions on the application license as possible.</li>
<li>I want to ensure that if someone makes changes to the lib or forks it they have to release those changes under a ""similar"" open-source license as mine</li>
<li>If someone contributes to my project (say via pull requests in contrast to a fork) I'd like to maintain control over the license of the project.</li>
<li>In case there is demand for commercial for-profit use (that is: a company want to sells software that has my library as an integral component), I want to be able to dual-license for that with different conditions, but I'd rather cross that bridge if/when I get there - which is probably never anyway. And I wouldn't then want to have to consult anyone who has ever contributed a 2-line diff.</li>
</ul>

<p>Can I use Qt (which seems to work similarly) as a model? (LGPL for non-commercial use, contributor agreement to maintain ownership of the whole project, separate commercial license)</p>
","<p>What you are looking for is, I think, the common practice of selling exceptions. </p>

<p>When an organization or a company is the sole copyright owner of a software, or have a permission to do so from all copyright owners, they may offer  simultaneously the software under a free copyleft license (such as GNU GPL) and under a more permissive proprietary license. In your case the proprietary license would allow use in not-for-profit proprietary derivatives. And you could also sell the right to create and distribute for-profit proprietary derivatives. </p>

<p>What this means is that the software will only be used to create and distribute derivatives which are either free or not-for-profit, or for-profit proprietary derivatives by companies which have bought the commercial license. As some will remark, this won't prevent people selling free software derivatives since free software licenses never prevent selling.</p>

<p>The practice of selling exceptions is very common. Examples include Qt (just after TrollTech switched to GNU GPL), OCaml and many others. </p>

<p>To follow this path, you must ensure that you have rights over the complete code: either it was developed by you or your employees, or it was developed by someone who signed a CLA (Contributor License Agreement) which allows you to relicense their contributions under a proprietary license. </p>

<p>Also note that this won't satisfy your third requirement: forks which do not contribute back will be allowed to make their derivative GPL-only.</p>

<p>For a discussion on selling exceptions by RMS see <a href=""http://www.gnu.org/philosophy/selling-exceptions.en.html"" rel=""nofollow noreferrer"">http://www.gnu.org/philosophy/selling-exceptions.en.html</a></p>
","4877"
"Do open source movies exist?","1894","","<p>I've encountered open/free (as in freedom) music, books, hardware, knowledge and naturally software. But do open source movies also exist? Is that even possible?</p>
","<h2>Yes, there is such a thing as <a href=""https://en.wikipedia.org/wiki/Open-source_film"" rel=""nofollow"">open-source films</a>.</h2>

<p>from wikipedia:</p>

<blockquote>
  <p>A definition of an open-source film is based on the <a href=""http://www.opensource.org/docs/osd"" rel=""nofollow"">OSI's open-source software definition</a> and the <a href=""http://freedomdefined.org/Definition"" rel=""nofollow"">Definition of Free Cultural Works</a>. This definition can be applied to films where:</p>
  
  <ul>
  <li>The license of the movie is approved for <a href=""http://freedomdefined.org/Definition"" rel=""nofollow"">Free Cultural Works</a>. Specifically this is true for the <a href=""http://creativecommons.org/"" rel=""nofollow"">Creative Commons</a> licenses <a href=""https://creativecommons.org/licenses/by/4.0/"" rel=""nofollow"">BY</a> and <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow"">BY-SA</a>.</li>
  <li>The materials used in the movie (sources) are also available under a license which is approved for free cultural works.</li>
  <li>The movie and its sources are made publicly available via an online download or by other means that are either free or with a cost that covers reasonable reproduction expenses only.</li>
  <li>The sources should be viewable and editable with free/open-source software. If this is not the case, they must be convertible into such a format by using free/open-source software. The same applies to the movie itself.</li>
  <li>It should be possible to re-create or re-assemble the movie using the source materials.</li>
  </ul>
</blockquote>

<p>There don't seem to be many <a href=""https://en.wikipedia.org/wiki/List_of_open-source_films"" rel=""nofollow"">films listed as truly open source</a> (sort by <code>Open Source Movie</code>) but there are a few.</p>

<p>A notable example is the <a href=""http://www.rottentomatoes.com/m/sita_sings_the_blues/"" rel=""nofollow"">critically acclaimed</a> movie <a href=""http://www.sitasingstheblues.com/"" rel=""nofollow"">Sita Sings the Blues</a>. which is currently licensed under <a href=""https://creativecommons.org/about/cc0"" rel=""nofollow"">CC0 (Public domain)</a>. Of which you can actually <a href=""https://archive.org/details/Sita_Sings_the_Blues_Files"" rel=""nofollow"">download all .fla files</a> and use them as you like, with the restriction of some none open source songs used in the movie.</p>
","1000"
"Is re-encoding an audio or video file permitted under CC-BY-ND?","1863","","<p>I have a .mp3 file licensed under CC-BY-ND 4.0 and I want to reencode it (without changing the content within) in the Ogg Vorbis format for sharing, but I do not want to violate the CC license.</p>
","<p><a href=""https://creativecommons.org/licenses/by-nd/4.0/legalcode"" rel=""nofollow noreferrer"">CC BY-ND 4.0</a> says in <a href=""https://creativecommons.org/licenses/by-nd/4.0/legalcode#s2a4"" rel=""nofollow noreferrer"">section 2(a)(4)</a>:</p>

<blockquote>
  <p><strong>Media and formats; technical modifications allowed.</strong> The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.</p>
</blockquote>

<p>The intent here is quite clear: the ND limitation against producing adaptations does not extend to modifications made purely to prepare the work unaltered in a new technical format. A transformation from MP3 to Ogg seems to match the intent of this section perfectly.</p>
","6176"
"If the copyright-owner claims his works to be open source, do they have to release the source somewhere?","1797","","<p>The copyright-owner can choose any license they wish to. But if they decide to choose an open source license (lets say Apache 2), how much do they have to conform to the license? Especially, do they have to release the source code somehow (or make it accessible for whoever got the binaries that claim to be Apache-licensed). Or is it just a false claim, that it is open source, if the source isn't available?</p>
","<p>Software isn't inherently licensed in any particular way.  Rather, it is <em>released</em> under a licence; which licence or licences it is released under are at the discretion of the copyright holder.  That there can be many different licences under which a piece of software is released should make it clear that the licence isn't an inherent property of the software.</p>

<p>A copyright holder claiming that their software <em>is</em> open source is making a statement with no real content; it can't be right <em>or</em> wrong, for it is meaningless.</p>

<p>If a copyright holder claims to have <em>released</em> a piece of software under an open source licence, but they have not in fact released it in this way (or at all), then they are wrong - because of the lack of a release, rather than because of a mis-statement about an inherent property of the software.</p>
","912"
"Can I use the middleman loophole to reduce AGPL to LGPL?","1767","","<p>This question and answer were created as a clarification to <a href=""https://opensource.stackexchange.com/questions/5003/agplv3-source-redistribution-when-does-it-apply-to-my-code-for-a-server-side-ja"">AGPLv3 source redistribution: when does it apply to my code for a server-side Java app using an AGPL-licensed library?</a></p>

<p>Suppose that:</p>

<ul>
<li>I want to create a closed source server-side application.</li>
<li>I want to use an AGPL library X in this application.</li>
<li>The AGPL library X contains a bug that no one is fixing, but that makes my closed source application useless as long as it isn't fixed.</li>
<li>Suppose that I  don't want to share my own code, but I want the bug to be fixed.</li>
</ul>

<p>Can I pay a middleman to publish an AGPL library Y, based on library X, that contains the bugfix, so that I can keep my application closed source by using the unmodified code of library Y released by the middleman?</p>
","<p>The AGPL does cover non-modified use of the original code.</p>

<blockquote>
  <p>To ""modify"" a work means to copy from or <strong>adapt all or part of the work in a fashion requiring copyright permission</strong>, other than the making of an exact copy. The resulting work is called a ""modified version"" of the earlier work or a work ""based on"" the earlier work.</p>
  
  <p>A ""covered work"" means either the unmodified Program or a work based on the Program.</p>
</blockquote>

<p>Text taken from the license itself. Bolding mine.</p>

<p>Notice here you are still <em>adapting</em> even if you use the entire unmodified library in your project. Because you are making a ""derivative work"" as would be mentioned in the GPL, and because you are adapting the code by writing code to interface with it, you still must abide by the AGPL.</p>

<p>My take on this license is that since the AGPL simply adds some conditions to the GPL, anything linked to a piece of AGPL software must also be AGPL.</p>

<p>Here are some questions with widely differing opinions on other SE sites:
<a href=""https://softwareengineering.stackexchange.com/questions/107883/agpl-what-you-can-do-and-what-you-cant"">1</a>, <a href=""https://softwareengineering.stackexchange.com/questions/232131/use-of-unmodified-agplv3-lib-am-i-agpl-too"">2</a>, and <a href=""https://opensource.stackexchange.com/questions/4691/java-and-agpl-3-how-far-does-license-extend-into-web-app"">3</a>.</p>

<p>Here are some software authors' opinions on the matter: <a href=""http://www.scylladb.com/opensource/"" rel=""nofollow noreferrer"">Scylla</a> does believe in the loophole, <a href=""http://www.makehuman.org/license_explanation.php"" rel=""nofollow noreferrer"">MakeHuman</a> does not. Quoted below:</p>

<blockquote>
  <p>We promise that we will not seek to enforce the copyleft provisions in the AGPL v3.0 against you if your application (a) does not link to the Scylla database directly but exclusively uses Scylla drivers, and (b) you have not modified, added to, or adapted the source code of the Scylla database in a way that would result in the creation of a “modified version” of or a “work based on” the Scylla database as such terms are used in the AGPL v3.0.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p><strong>I want to link to MakeHuman as a library in my non-gpl -licensed application.</strong></p>
  
  <p>You can't. AGPL stipulates that any derivate or aggregate has to be licensed AGPL too.</p>
  
  <p>As a side-note this is the functional difference of LGPL and GPL/AGPL. LGPL does allow linking without forcing the end result to adopt the LGPL license. But MakeHuman is licensed AGPL, not LGPL.</p>
</blockquote>

<p>The gray area around this is such that I would recommend a lawyer for any questions involving commercial use.</p>
","5014"
"Can I link a Apache 2.0 library into software under GPLv2?","1716","","<p>The <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache 2.0 License</a> has a built-in linking exception:</p>

<blockquote>
  <p>For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p>
</blockquote>

<p>So linking a library under Apache 2.0 into a main program licensed under GPLv3 does <em>not</em> create a derivative work according to the the Apache 2.0 License.  In other words, the library is considered a ""mere aggregate"" in relation to the main program.</p>

<p>As I understand the Apache 2.0 license, in the case of linking, it leads to a situation where each component in the collection (i.e. the library and the main program) retains its <em>original</em> license. If there are any patented software in the main program (under GPLv2), the patent termination and indemnification provisions of the Apache 2.0 license does not apply to it.</p>

<p>However, according to the <a href=""http://www.gnu.org/licenses/license-list.html#apache2"">FSF</a>, you can not do this. Quote:</p>

<blockquote>
  <p>Please note that this license [Apache 2.0] is not compatible with GPL version 2, because it has some requirements that are not in that GPL version. These include certain patent termination and indemnification provisions.</p>
</blockquote>

<p>I have not been able to discover exactly <em>why</em> the FSF declares the licenses incompatible, and what this incompatibility implies. It may, however, have something to do with FSF's position on linking:</p>

<p>In <a href=""http://gplv3.fsf.org/rms-why.html"">Why Upgrade to GPL Version 3</a> Richard M. Stallman, president of the FSF, writes:</p>

<blockquote>
  <p>Fortunately, license incompatibility only matters when you want to <em>link</em>, merge or combine code from two different programs into a single program. There is no problem in having GPLv3-covered and GPLv2-covered programs side by side in an operating system. For instance, the TeX license and the Apache license are incompatible with GPLv2, but that doesn't stop us from running TeX and Apache in the same system with Linux, Bash and GCC. <em>This is because they are all separate programs</em>.  (My emphasis.)</p>
</blockquote>

<p>I don't think that anybody will dispute that merging or combining code (i.e. copy/pasting some code into another project) will produce a derivative, but including ""linking"" in the actions that shall produce a derivative is not universally recognized, but seems to be the position of the FSF (assuming its founder and president speaks on behalf of the organiation).</p>

<p>In <a href=""http://www.gnu.org/licenses/lgpl-java.en.html"">this essay</a>, which is published of FSF's official website, and therefore can be assumed to use the phrase ""FSF's position"" with the approval from the FSF, David Turner writes:</p>

<blockquote>
  <p>It has always been the FSF's position that dynamically linking applications to libraries creates a single work derived from both the library code and the application code. The GPL requires that all derivative works be licensed as a whole under the terms of the GPL, an effect which can be described as “hereditary.”</p>
</blockquote>

<p>However, the Apache Software Foundation <a href=""http://www.apache.org/licenses/GPL-compatibility.html"">disagrees</a> about them being incompatible.  They write:</p>

<blockquote>
  <p>Despite our best efforts, the FSF has never considered the Apache License to be compatible with GPL version 2, citing the patent termination and indemnification provisions as restrictions not present in the older GPL license. The Apache Software Foundation believes that you should always try to obey the constraints expressed by the copyright holder when redistributing their work.</p>
</blockquote>

<p>So the Apache Software Foundation says that you <em>should</em> not do this, because the FSF disapprove of it.</p>

<p>But: <em>Could</em> I do it?</p>

<p>In other words, are the licenses really incompatible - as the FSF say. Or do the linking exception in Apache 2.0 give me an explicit permission to link a Apache 2.0 library into software under GPLv2?</p>
","<p>(<em>Here's my best guess. This is obviously a very hairy problem to work through, and I've tried my best to reduce the problem down to basic principles. However, I may gotten some of those basic principles incorrect. It should go without saying that this is not legal advice.</em>)</p>

<p>The <a href=""http://www.gnu.org/licenses/license-list.en.html#apache2"" rel=""noreferrer"">Apache License 2.0 (APL) is incompatible with the GPLv2</a> simply because of the licenses' differing rules about patents (and the GPLv2's requirement that it must apply to the work as a whole). I'm not sure which particular clause is problematic, but the APL has a clause about termination of patent licenses that looks unlike anything in the GPLv2. If the GPLv2 indeed has no similar requirement to this, the APL and GPLv2 are incompatible:</p>

<blockquote>
  <p>If You institute patent litigation against any entity... alleging that the Work
       or a Contribution incorporated within the Work constitutes direct
       or contributory patent infringement, then any patent licenses
       granted to You under this License for that Work shall terminate...</p>
</blockquote>

<p>Such an additional restriction is sufficient to render the licenses incompatible, since the GPLv2 could not apply to the work as a whole while the APL imposes an additional requirement.</p>

<p>So, this question asks whether we can <em>sidestep</em> this incompatibility by having the linked works <em>not considered</em> as a combined derivative work. For the purposes of this answer, we will assume that FSF's opinion that linking creates a derivative work is legally correct. (If it is not correct, and linking does not create a combined work, then you're home free and can ignore the rest of this answer! In that case, you need not worry about how the licenses interact, because they're <em>not interacting</em> -- they're completely separate works!)</p>

<p>The crux of this question is whether the APLs linking exception is sufficient to allow applying the GPLv2 to the entire software. I think the answer is <strong>no</strong>: even if the APL library doesn't cause the APL to apply to the GPLv2 program, the GPLv2 program <em>does</em> cause the GPLv2 license to apply to the library. However, the licenses are incompatible (per the patent problem, above).</p>

<p>It doesn't matter whether the APL considers the works combined; it matters whether <em>copyright law</em> considers the works combined, and whether the GPLv2's section 2(b) applies to the library as part of a work that ""in whole or in part contains or is derived from the [GPL-licensed] Program.""</p>

<ul>
<li>If copyright law does consider them part of one work, then the library must (but cannot) be included under the work's overall GPL license.</li>
<li>If copyright law considers them separate works instead, then there is no license interaction, and therefore no incompatibility.</li>
</ul>
","1364"
"Why is GPLv2 incompatible with GPLv3?","1608","","<p>As I understood in <a href=""https://opensource.stackexchange.com/questions/1774/why-does-linux-still-use-the-gplv2/1776#1776"">this</a> wonderful answer, GPLv3 and GPLv2 code can't be used simultanously in the same product.</p>

<p>Why?</p>
","<p>Both the GPLv2 and the GPLv3 have clauses that</p>

<ol>
<li><p>Require the combined product to adhere to the license terms of the license of the GPL licensed component. </p></li>
<li><p>Require that no additional restrictions may be placed on the combined work: </p></li>
</ol>

<p>from clause 6 of the GPLv2:</p>

<ol start=""6"">
<li>Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  (Part 1) You may not impose any further restrictions on the recipients' exercise of the rights granted herein. (Part 2)</li>
</ol>

<p>The GPLv3 has additional restrictions over the GPLv2, specifically, a patent grant and anti-tivoisation provisions, so 1 and 2 can't hold simultaneously.</p>

<p>To prevent this issue, the Free Software Foundation advises people who want to license their work under the GPL to use the following phrasing:</p>

<blockquote>
  <p>You can redistribute it and/or modify [the work] under the terms of the GNU General Public License as published by the Free Software Foundation, either version [x] of the License, or (at your option) any later version.</p>
</blockquote>

<p>That way, you release your work under multiple licenses; the one you name explicitly, and any possible future version of the GPL. This makes the resuser free to use the software under any future version of the GPL, and this license incompatibility becomes a non-issue.</p>

<p>I currently have no statistics on how common this practice is. It is at any rate not the route Linux has chosen.</p>
","1778"
"Report a security issue to a project hosted at GitHub","1595","","<p>If I find a security issue in a Github project should I raise it in the project's issue tracker (where it's open to public scrutiny) or try to find private means to contact the repo's maintainer so that action can be taken before the issue is exposed to public scrutiny?</p>
","<p>There is, as far as I know, currently no way to mark an issue as a security issue. That makes reporting a security issue including full details on GitHub effectively a <a href=""https://en.wikipedia.org/wiki/Full_disclosure_(computer_security)"">full disclosure</a> strategy.</p>

<p>Different people support different ways of disclosure of security issues, and full disclosure is a valid choice.</p>

<p>However, if you don't want to go the full disclosure route, reporting an issue on GitHub which includes full details of the vulnerability is not possible.</p>

<p>You could choose to</p>

<ul>
<li>Follow instructions for security vulnerabilities, if there are any</li>
<li>File an issue with your findings and a request to get in to contact</li>
<li>Find other means to contact the maintainer</li>
</ul>

<p>The choice is yours. </p>
","1959"
"What are the differences between GPL V2 and V3 licenses?","1574","","<p>One of the most widely used and most popular free and open source software licences is the  General Public License. I want to know in simple terms: what are the differences between GPL Version 2 and Version 3?</p>

<p>Further I found latest Linux-Kernel <a href=""https://www.kernel.org/pub/linux/kernel/COPYING"">licensed</a> under GPL V2 not GPL V3 till. What are reasons?</p>
","<p>This question <a href=""https://stackoverflow.com/questions/41460/what-are-the-differences-between-gpl-v2-and-gpl-v3-licenses"">was already asked</a> on Stackoverflow in 2008 (but closed as off-topic there). This is a copy of the answer by <a href=""https://stackoverflow.com/users/4089/will-m"">Will M</a>:</p>

<blockquote>
  <p>Here is a short list of some the major differences:</p>
  
  <ul>
  <li><p>internationalization: they used new terminology, rather than using language tied to US legal concepts</p></li>
  <li><p>patents: they specifically address patents (including the Microsoft/Novell issue noted in another answer)</p></li>
  <li><p>“Tivo-ization”: they address the restrictions (like Tivo’s) in consumer products that take away, though hardware, the ability to
  modify the software</p></li>
  <li><p>DRM: they address digital rights management (which they call digital restrictions management)</p></li>
  <li><p>compatibility: they addressed compatibility with some other open source licenses</p></li>
  <li><p>termination: they addressed specifically what happens if the license is violated and the cure of violations</p></li>
  </ul>
  
  <p>I agree with the comment about consulting a lawyer (one who knows
  about software license issues, though). In doing these things (and
  more), they more than doubled the length of the GPL. GPL 3 is many
  things, and one of them is that it is a very complex, technical legal
  document.</p>
</blockquote>

<p>Regarding why the Linux kernel does not adopt version 3, here is <a href=""https://www.youtube.com/watch?v=PaKIZ7gJlRU"" rel=""noreferrer"">a video of Linus Torvalds where he explains his opinion</a>. Some excerpts from his speech:</p>

<blockquote>
  <p>Here we give your version 3 and then we try to sneak in these new rules and try to force everybody to upgrade. That was the part I disliked. And the FSF did some really sneaky stuff. Downright immoral in my opinion.</p>
  
  <p>[...]</p>
  
  <p>I am thinking tivoization isn't necessarily something that you should strive for. But in my world view it's your decision if you make hardware that blocks down the software. That's your decision as a hardware maker. That has no impact on my a decision as a software maker to give you the software.</p>
</blockquote>
","580"
"Why doesn't FFmpeg distribute a binary with libfdk_aac enabled?","1566","","<p>From the <a href=""https://trac.ffmpeg.org/wiki/Encode/AAC"" rel=""nofollow"">FFmpeg's Encode/AAC page</a>:</p>

<blockquote>
  <p>The licenses of libaacplus, libfaac, and <code>libfdk_aac</code> are not compatible
  with the GPL, so the GPL does not permit distribution of binaries
  containing code licensed under these licenses when GPL-licensed code
  is also included. Therefore these encoders have been designated as
  ""non-free"", and you cannot download a pre-built ffmpeg that supports
  them. This can be resolved by compiling ffmpeg yourself.</p>
</blockquote>

<p>I can see that the downloaded binary (for windows at least) is compiled with <code>--enable-gpl</code> and includes libx264, which is an example of piece licensed by the GPL (though it seems that x264's license is GPLv2 and ffmpeg is GPLv3 - not sure about the implications). This leads me to think that no software can be distributed in the binary form if it uses both x264 AND the all-powerful Fraunhofer FDK AAC Encoder, for example.</p>

<p>However, that does not seem to be the case. <a href=""https://handbrake.fr/"" rel=""nofollow"">Handbrake</a> binary contains both (in a static build), and <a href=""http://sourceforge.net/projects/ffmpeg-hi/"" rel=""nofollow"">FFmpeg HI</a> does as well.</p>

<p>What am I missing?</p>

<p><br />
<strong>An update</strong> (2016-03-06):</p>

<blockquote>
  <p>Unfortunately due to circumstances beyond our control we can no longer
  include binary distributions of HandBrake which include the FDK-AAC
  encoder. Please also be aware that if you are distributing any
  previous 0.10.x you must cease doing so now due to licensing issues.
  <a href=""https://handbrake.fr/news.php?article=36"" rel=""nofollow"">Handbrake: News, from Feb 11, 2016</a></p>
</blockquote>
","<p>This is a messy situation created by <strong>software patents</strong>.</p>

<p><strong>GPLv3 has anti-patent clauses</strong>; it explicitly forbids the licensor from using software patents to sue or limit the freedoms of licensees. This is an important difference between GPLv3 and GPLv2, the latter which does not mention patents.</p>

<blockquote>
  <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p>
  
  <p><sub><a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">http://www.gnu.org/licenses/gpl-3.0.en.html</a></sub></p>
</blockquote>

<p>However, <strong>libfdk_aac is under a license that does not grant a patent license</strong>. Users are required to obtain a patent license separately, if they haven't done so already.</p>

<blockquote>
  <ol start=""3"">
  <li>NO PATENT LICENSE</li>
  </ol>
  
  <p>NO EXPRESS OR IMPLIED LICENSES TO ANY PATENT CLAIMS, including without limitation the patents of Fraunhofer,
  ARE GRANTED BY THIS SOFTWARE LICENSE. Fraunhofer provides no warranty of patent non-infringement with
  respect to this software.</p>
  
  <p>You may use this FDK AAC Codec software or modifications thereto only for purposes that are authorized
  by appropriate patent licenses.</p>
  
  <p><sub><a href=""https://android.googlesource.com/platform/external/aac/+/master/NOTICE"" rel=""nofollow"">https://android.googlesource.com/platform/external/aac/+/master/NOTICE</a></sub></p>
</blockquote>

<p>This is why the two licenses are incompatible. Media formats are often patent-encumbered, which is a problem that affects projects like FFmpeg, a big collection of incompatible codecs. This is why FFmpeg themselves generally refrain from distributing binaries at all, and give you options to compile a legal subset of their software for your own use (e.g. <code>--enable-gpl</code>).</p>

<p><strong>How can Handbrake/FFmpeg HI distribute binaries?</strong></p>

<p>Good question. While some projects like FFmpeg HI probably operate in a legal grey area, there are situations where software patents are not an issue, <strike>which probably describes what Handbrake is doing</strike><sup>1</sup>:</p>

<ul>
<li>The applicability of <a href=""https://en.wikipedia.org/wiki/Software_patent"" rel=""nofollow"">software patents globally</a> is very uneven. Unlike copyright which is <a href=""https://en.wikipedia.org/wiki/Berne_Convention"" rel=""nofollow"">virtually consistent across the whole world</a>, software patents either aren't recognised or are very limited in many places, such as the EU. Handbrake is hosted in France, so if you are also located somewhere that doesn't recognise software patents and download Handbrake, neither you nor Handbrake are affected by them.</li>
<li>You probably already have a patent license for those codecs, because they are subsidised by your OS and/or hardware vendor, like Microsoft, Apple or Google (Android). Part of the money you paid for your devices went to patent holders. This also explains why many free software projects have historically suffered from poor codec choice; because these projects (e.g. FFmpeg, Linux, Firefox) are freely distributed, they cannot guarantee that their users have the required patent licenses, whereas someone distributing, say, OS X software can assume their users have licenses for the HE-AAC format via Apple's CoreAudio.</li>
</ul>

<p><sup>1</sup>: Actually, Handbrake were unaware of the licensing incompatibility, and have removed libfdk_aac. Thanks for the update.</p>
","2397"
"What happens if very common code is released under GPL?","1539","","<p>I know GPL can be used as an open-source license for source code etc. But what if the source code released has very few lines and has a lot of probability that it might also have been written already or someone might write an almost identical code without being aware of the original code?</p>

<p>A code like Hello World for example</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main(){
    cout &lt;&lt; ""Hello World, with a smile :-)"" &lt;&lt; endl;
}
</code></pre>

<p>And furthermore, what if he releases the code under some other license, say the BSD license?</p>
","<p>German law has something named 'Schöpfungshöhe', which Wikipedia refers to as '<a href=""https://en.wikipedia.org/wiki/Threshold_of_originality"">Threshold of originality</a>'. If no sufficient level of originality or effort is reached for the works, it cannot be copyrighted. That means, everyone can probably implement a copy-command, even if it will look pretty similar as the underlying mechanic is simple enough. Still, you shouldn't copy such lines directly but implement it yourself. But coming up with the same solution for similar problems is somewhat expected. When to draw the line? That's up for the courts in cases of disagreement.</p>

<p>Note: As I wrote I know this concept for German law, and Wikipedia indicates Anglo-American law also has this concept. But I don't know to which other jurisdictions this concept applies.</p>
","214"
"Should I include license text in a single file or all source files?","1533","","<p>Many licenses, such as Apache 2.0, have both a long and a short form. Typically, the long form is included in the repository as a single LICENSE file, and the short form is used in the actual source code.</p>

<p>But, if you include the LICENSE file, is it actually necessary to include another copy (short or long) in every source file?</p>

<p>What about files which do not actually have a way to add comments (such as conformant JSON files)?</p>
","<p>For the Apache 2.0 License, there is both the legal code, and what you need to ""apply"" the license to the work in question.</p>

<p>Having a license file provides the legal code. That's great, but it doesn't tell me the specifics... does that license really apply here? When did the license take effect? </p>

<p>The Apache page goes on to instruct you how to place it in your work, that you need to place the information to ""apply"" the license, and continues providing details and even a template.</p>

<blockquote>
  <p>The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same ""printed page"" as the copyright notice for easier identification within third-party archives.</p>
</blockquote>

<p>For pages which don't have commenting support, I think it should be fine to even have the information in a basic <code>.txt</code> file, as long as people know what it is. If it helps, give it a filename such as <code>json-license.txt</code> It may help to have additional information in that file (e.g. Why the license... Probably not that but you get what I mean)</p>

<p>Ecelis also points out two links that provide some more information about where to place the licenses:</p>

<ul>
<li><a href=""https://www.gnu.org/licenses/gpl-howto.html"">How to use GNU Licenses for your own Software</a></li>
<li><a href=""http://opensource.org/faq#apply-license"">How do I apply [some open source license] to software I'm releasing?</a></li>
</ul>
","203"
"How is Oracle suing Google for copyright infringement when Java is Open Source?","1521","","<blockquote>
  <p>There is a case between Google and Oracle over the use of Java and it's standard library on the Google Android operating system. From [this article]:</p>
  
  <blockquote>
    <p>To recap: Oracle accused Google of copying some of its Java computer code when it wrote Android. Android itself wasn't the issue. Android is different than Java. But Google wanted developers who work with Java, a popular language for web apps, to jump to Android. So it incorporated Java's application programming interfaces (APIs) into Android. This allowed them to quickly convert their apps to Android and it meant that the millions of programmers trained on Java would be familiar with Android, too. </p>
    
    <p>Oracle sued claiming that the APIs were copyrighted. But the judge ruled that APIs are not subject to copyright laws</p>
    
    <p>On Friday, an appellate court just overturned that loss, and said APIs are subject to copyright.</p>
  </blockquote>
  
  <p><a href=""https://opensource.stackexchange.com/q/762/1060"">Source</a></p>
</blockquote>

<p>My question is, Java is Open Source, and was at the time Google forked ( used loosely to mean copied some pieces of code), AFAIK. I'm not interested in whether APIs are copyright-able, let's assume they are (since that's where the case left off). How is what Google did not permissible under the Open Source license that it's distributed under (AFAIK GPLv2 (or 3?) with Classpath exception)?</p>
","<p>First Google never ""forked Java"" for Android. Google implemented its own Java for Android, but when doing so copied the API of <em>Oracle JDK</em>.
(and also copied a method named <code>rangeCheck</code> of 9 lines of utterly trivial code).</p>

<p>You must to be careful when you say ""Java"". Oracle has <a href=""http://www.oracle.com/us/technologies/open-source/overview/index.html"">licensed <em>OpenJDK</em> under GPLv2 with the classpath extension</a>. This is an open source project consisting of legacy code from the Sun Java project (taken over by Oracle). Oracle has never objected to the API or code from <em>OpenJDK</em> to be used in open source projects.</p>

<p>There is also a closed source <em>Oracle JDK</em>. This includes Oracle’s implementation of Java Plugin and Java WebStart, Oracle JDK Flight Recorder, as well as third party  components like a graphics rasterizer.</p>

<p>Software like Android Studio expects <em>Oracle JDK</em> API to be used, not the <em>OpenJDK</em> API.</p>

<p>Oracle's infringement suit against Google is about the API to the <em>Oracle JDK</em>, not the <em>OpenJDK</em>.</p>
","1422"
"Calling GPL'd programs from a shell script","1482","","<p>I have a program written in a shell language that consists of several shell script files. Some of these files execute external commands that have been licensed under GPL.</p>

<p>Do I have to release my shell scripts under GPL? Some sources I have read say no, because the external programs are <em>external</em> (separate) programs. However, I use the programs similarly to libraries in other programming languages. I know that there are eg. Java libraries that do the exact same thing.</p>

<p>I use many external programs, and most of them do file processing, eg. parse data and transfer it to a form that can be easily processed using shell scripts. Some of these external programs are also shell scripts, other are native programs.</p>
","<p>The GPL is generally interpreted in a manner that licensing your scripts under the GPL <strong>would not be required</strong>.</p>

<p>The GPLv3 states that you have to license your code under the GPL if it were a “work based on the Program”, which is defined “to copy from or adapt all or part of the work in a fashion requiring copyright permission”. When a copyright violation would occur depends on your local jurisdiction. It is the <a href=""https://www.gnu.org/licenses/gpl-faq.html#MereAggregation"" rel=""noreferrer"">opinion of the Free Software Foundation</a>, i.e. the authors of the GPL, that:</p>

<blockquote>
  <p>We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged).</p>
  
  <p>If the modules are included in the same executable file [or] are designed to run linked together in a shared address space, that almost surely means combining them into one program.</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>So normal shell scripting is entirely OK.</p>

<p>My (amateur) opinion is that this interpretation by the FSF is extremely conservative, and tends to over-estimate how coupled two programs would be. If you follow the quoted interpretation, you are likely to be on the safe side.</p>

<p>As an aside, you are never required to release your software under the GPL.
You are always allowed to make private modifications that you do not distribute.
However, if you wish to release a software that is based on GPL software, then you can only release it under the GPL, no other license.</p>
","6273"
"I am using a MIT licensed module in a closed source consumer device. What are my obligations?","1463","","<p>I am working on a piece of embedded software for a consumer device. For a small part of the software, we are using a third-party library that is licensed under the MIT license.</p>

<p>As the MIT license states</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>the question arose if we have an obligation to mention the MIT license and/or our use of the third-party library in the documentation that comes with the device.</p>

<p>We are not distributing the source code to anybody, but we are obviously distributing the binaries as part of the consumer device. And as the device is not capable of showing texts to the user, it is not possible to physically keep the license text with the binaries and show it on the device itself.</p>
","<p>For cases where it's not practical to display anything when the software runs, I think it's widely understood/practiced that putting an acknowledgement in the user manual is best in keeping with the spirit of the license.</p>

<p>Wherever you mention YOUR copyright of the software or device, also mention something like ""Package XYZ (c) John Smith, MIT license see <code>http://my.url</code> for details"" and then at that URL you can provide pointers to the OSS software and its license.</p>
","6102"
"How to apply MIT license in the GitHub repo for fully free project?","1461","","<p>I have a public repository for an open source project on GitHub.  It's main <strong>goal</strong> is to</p>

<ol>
<li>make this code available to anybody (including myself) who may what to use it, for free, for all the time, with no future possibility of suing them (or me) for anything</li>
<li>make the process of contribution to this code as easy as possible, while maintaining the first requirement</li>
</ol>

<p><s><strong>In two words</strong> - I'd like to give away all the copyright for it (not sure if public domain is the correct word here, I'm not a layer, but that's what comes to my mind) and force any other contributors to do the same with less efforts.</s> </p>

<p><em>UPDATE</em>: as others correctly mentioned, these ""two words"" were incorrect, they didn't correspond to my goal, because giving away copyright does not give the protection from being sued. So lets just stick to the goal - make software <em>free</em>, and <em>easy to contribute to</em> with <em>disclaimer</em> in mind.</p>

<p>So I've chosen the MIT license as the most suitable and added a <code>LICENCSE</code> file with it inside to the root folder of the project. Also I've added a link to it to the <code>README</code> file (according to <a href=""https://opensource.stackexchange.com/questions/2420/how-can-i-open-source-a-repository-on-github-by-using-apache-license-in-only-one/2421#2421"">this answer</a>).  But the following <strong>questions</strong> arise when I try to set up everything correctly:</p>

<ol>
<li><p><strong>Copyright info part in the main <code>LICENCSE</code> file</strong>. There is no company or any other name for the group of people that are contributing to this project. And I hope more and more will join, so it looks like a pain to maintain the list of contributors. Is there a way to just drop this line or to call them, say <code>MyProjectName developers</code> not to update it later on?</p></li>
<li><p><strong>Contributor License Agreement</strong>. Ideal case will be when the fact that file belongs to the project source immediately mean that it is under MIT license and copyright is no more important. Is it possible or valid from jurisdiction point of view? I'm using <a href=""https://www.clahub.com/"" rel=""nofollow noreferrer"">CLA Hub</a> to verify that every contributor has signed corresponding CLA. Is that enough?</p></li>
<li><p><strong>License header per source file in this project</strong>. Is it really necessary to include some kind of link to the <code>LICENSE</code> file to each source file? According to answer to <a href=""https://opensource.stackexchange.com/questions/202/should-i-include-license-text-in-a-single-file-or-all-source-files"">this question</a> - yes. But is there any exception for exact MIT license? Can I just say something like <code>This license apply to each file of this project</code> at the end of the <code>LICENSE</code> file?</p></li>
<li><p><strong>Copyright info in the header per source file in this project</strong>. This is similar to the first question - is it ok not to add it or add some general name for copyright owners like <code>MyProjectName developers</code>. Otherwise maintaining this up to date is even more pain - I have to track every file in every commit and pull request. I've read <a href=""https://opensource.stackexchange.com/questions/292/should-i-include-a-copyright-line-in-every-file"">this question</a>, but it mostly says that it is necessary to <em>apply</em> copyright later (either in form of re-license or in any other). But I want to make it not relevant (see item 2.)</p></li>
<li><p>Are there any other things I may be missing?</p></li>
<li><p>Is there any easier way to achieve this goal? <a href=""https://opensource.stackexchange.com/questions/2546/common-practice-on-github-and-license-copyright"">This question</a> was asked for some best practice and in this part it is very similar to mine, but it was not properly answered.</p></li>
</ol>
","<p>That's not true that a public domain dedication won't protect you, for instance the <a href=""http://choosealicense.com/licenses/unlicense/"" rel=""nofollow noreferrer"">Unlicense</a> is a public domain dedication but still includes a limitation of warranty. In <a href=""http://choosealicense.com/licenses/"" rel=""nofollow noreferrer"">GitHub's choosealicense.com list of suggested licenses</a>, this is the only license that is more permissive than MIT. The only difference with MIT is that no attribution is required (people can effectively use your code without saying where it comes from).</p>

<p>EDIT: the Unlicense is not officially open source because it is not <a href=""https://opensource.org/licenses"" rel=""nofollow noreferrer"">listed by the OSI</a>, although it respects the definition of open source IMHO. It is free software because it is <a href=""https://www.gnu.org/licenses/license-list.html#Unlicense"" rel=""nofollow noreferrer"">approved by the FSF</a> but they recommend to use CC-0 instead. I think that the choice of GitHub to recommend the Unlicense over CC-0 is because the latter was not written specifically for software.</p>

<p>You can have a look at <a href=""https://opensource.stackexchange.com/a/1381/5858"">this answer</a> which defends the point of view of the OSI. I do not agree with it. Using ""public domain"" would be a bit dangerous because it is not defined in every jurisdiction but the Unlicense is technically a license (very similar to MIT but with no conditions) which contains a public domain dedication (third paragraph). The second paragraph explains already pretty clearly the rights of the licensee before saying anything about public domain. The problem of moral rights is not specific to public domain dedications. It can also interfere with the right to modify the software which is granted by every FLOSS license.</p>

<p>Now, let's answer your specific questions:</p>

<h2>1. Copyright part of the license</h2>

<p>If you choose to use the Unlicense, there is no copyright part of the license so you don't need to worry. If you rather choose to use MIT, you could use <code>&lt;Your name and contributors&gt;</code>. It is quite common to see. You could also maintain a separate list of contributors (also quite common). But in any case the absence of such notice or its imprecision does not void the copyright of each contributor so it is not very important.</p>

<h2>2. Contributor license agreement</h2>

<p>A contributor license agreement is a really good idea to prevent future lawsuit as much as possible because you can typically ask for a patent grant in it, for all the users of your software. It is something that is not included already in very permissive licenses such as MIT or the Unlicense.</p>

<p>I quite like Github's CLA <a href=""https://cla.github.com/agreement"" rel=""nofollow noreferrer"">https://cla.github.com/agreement</a> and they give reasons to justify it as well <a href=""https://cla.github.com/"" rel=""nofollow noreferrer"">https://cla.github.com/</a>.</p>

<p>Of course, you need to be aware that asking people to sign a CLA will make contributing a tiny bit more difficult but given your concerns, I would still encourage you to use one.</p>

<p>EDIT: I am not a legal expert but I believe that digitally signed documents are valid contracts in most jurisdictions, in particular the United States. I can't guarantee anything about CLA Hub however, because they do not give much guarantee themselves.</p>

<h2>3. License header</h2>

<p>No a license header is not necessary, at least for MIT and the Unlicense. Some other licenses encourage you to add such a header but that is not the case of these two.</p>

<p><a href=""http://choosealicense.com/licenses/"" rel=""nofollow noreferrer"">The list of licenses I was mentioning earlier</a> includes instructions on how to apply each license. For MIT and the Unlicense, it is just to copy the text of the license in a LICENSE file at the root of your repository.</p>

<h2>4. Copyright header</h2>

<p>A list of each copyright owner in each file is not necessary as well, and even projects which do maintain such headers generally forget to update them at every change. Fortunately a version tracker such as git is much more efficient to know precisely who added what to the software and even if it does not mean that they are the author (as they could have included a dependency), it means (if you use the same CLA as Github) that they are responsible of knowing the source and the licensing implications of the code.</p>

<h2>5&amp;6. Missing stuff and best practices</h2>

<p>If you want to make contributing to your project as easy as possible, I would encourage you to include a CONTRIBUTING file which explains the process for that (how you handle issues, pull requests, the fact that contributors will need to sign a CLA, presenting the code, the dependencies). Also include details instructions on how to compile the code. None of this is legal recommendation, just technical recommendation to make contributing as easy as possible.</p>

<p>If you project grows, another good thing to have is a CODE OF CONDUCT to make everyone welcome. Have a look at examples of such codes here: <a href=""https://github.com/search?q=code+of+conduct"" rel=""nofollow noreferrer"">https://github.com/search?q=code+of+conduct</a></p>

<p>Finally, even if contributors are supposed to do that, always check that new dependencies are properly licensed and not incompatible with your own license (typically, not GPL). If you need to include the dependency in your repository, try to put it in a specific subfolder with its own original license notice and list the dependencies somewhere in your README. If possible, do not even include the dependencies in your repository if they can be installed with some standard package manager.</p>
","4548"
"What can I assume if a publicly published project has no license?","1450","","<p>There is some code on GitHub that I would like to use. <a href=""https://github.com/organicinternet/magento-configurable-simple"">The repository</a> has no public declaration of license that I can find. But this particular project has over 200 forks and is a pretty active history of public issues and pull requests. There is <a href=""https://github.com/organicinternet/magento-configurable-simple/issues/222"">one issue</a> opened by someone else requesting a license be added, but with no useful responses.</p>

<p>The repository has no public declaration of license that I can find. Given the nature of e-commerce (in context), it seems likely that many are using this product in a commercial capacity. But in general, are there any safe assumptions that I can make about my right to use/modify/sell or contribute to this software?</p>
","<p>If a repository has no license, then <strong><em>all rights are reserved</em></strong> and it is <strong><em>not</em></strong> Open Source or Free. You <strong><em>cannot</em></strong> modify or redistribute this code without <strong><em>explicit</em></strong> permission from the copyright holder.  </p>

<p>I'm unsure of the legal implications of actually pulling the source local and building/using the software privately though. Perhaps someone else can chime in on that. </p>

<p>From <a href=""https://help.github.com/articles/open-source-licensing/#what-happens-if-i-dont-choose-a-license"">GitHub's licensing help page</a>:</p>

<blockquote>
  <p>You're under no obligation to choose a license. It's your right not to
  include one with your code or project, but please be aware of the
  implications. Generally speaking, the absence of a license means that
  the default copyright laws apply. This means that you retain all
  rights to your source code and that nobody else may reproduce,
  distribute, or create derivative works from your work. This might not
  be what you intend.</p>
  
  <p>Even if this is what you intend, if you publish your source code in a
  public repository on GitHub, you have accepted the Terms of Service
  which do allow other GitHub users some rights. Specifically, you allow
  others to view and fork your repository.</p>
  
  <p>If you want to share your work with others, we strongly encourage you
  to include an open source license.</p>
</blockquote>

<p><strong>In short, the only thing you can safely assume is that you have no rights to do anything at all with this code. In the particular case of GitHub, you can fork the repository and view the code, but nothing more.</strong></p>

<hr>

<p>Being it's entirely possible that the owner doesn't realize any of this, <a href=""https://github.com/organicinternet/magento-configurable-simple/issues/222#issuecomment-135201411"">I left a comment on the repo alerting them to the situation</a> and pointing back to this Q &amp; A. </p>
","1721"
"Can you open source firmware for closed hardware?","1393","","<p>Can you publish open source firmware for closed/commercial hardware (such as routers, motherboards or basically any device) without asking the manufacturer?</p>

<p>A few examples which seem to indicate that you can: <a href=""http://www.dd-wrt.com/"" rel=""nofollow"">DD-WRT</a> (a Linux based alternative OpenSource firmware), <a href=""https://openwrt.org/"" rel=""nofollow"">OpenWrt</a>, <a href=""http://www.openfirmware.info/"" rel=""nofollow"">OpenBIOS</a>, etc.</p>
","<p>To answer your question with a question: ""Can you build the firmware without needing to violate the copyright or trade secret protection of the target hardware?' The answer to this question is the answer to your question.</p>

<p>So, if the target hardware is 'just an ARM chip with a conventional boot process', sure, you can write new code for it.</p>

<p>One tricky part is that the most important part of your target is probably not the processor, but rather the peripherals. If you have to reverse-engineer to figure out how to communicate with the radio or ethernet or disk drive or whatever, you may be in dubious territory with respect to the shrink-wrap license you 'accepted' when you unwrapped the box.</p>
","1652"
"What is the difference between FOSS and FLOSS?","1392","","<p>FOSS stands for ""Free and Open Source Software"", whereas FLOSS stands for ""Free/Libre/Open Source Software"". The use of <em>libre</em> denotes the idea that the software is ""free as in free speech, not free beer,"" as Richard Stallman put it.</p>

<p>What is the practical difference between FOSS and FLOSS? Does the inclusion of <em>libre</em> denote fewer restrictions in FLOSS, or is the difference subtler?</p>

<p>I found <a href=""http://www.gnu.org/philosophy/floss-and-foss.html"">a longer explanation by Stallman</a>, but it seems to indicate that FLOSS merely emphasizes the way the software is ""free"".</p>
","<p>French Skills to the test!</p>

<p>Libre -> Free as in Freedom. I'm Free as a bird!</p>

<p>Gratuit -> Free as in Free Food. The Food is Free!</p>

<p>People started using the term FLOSS to help make the vision that the software is <em>libre</em>, and not free. FLOSS meant Free/Libre Open Source Software, whereas FOSS would mean Free and Open Source Software. This is less clear, as FOSS may not be interpreted with freedom. If you want to accept both, you should use FLOSS.</p>

<p>For More Info: <a href=""https://fsfe.org/freesoftware/basics/comparison.en.html"">Free Software, Open Source, FOSS, FLOSS - same same but different</a></p>

<p>Source: <a href=""http://www.gnu.org/philosophy/floss-and-foss.en.html"">FLOSS and FOSS</a></p>
","264"
"Should I use the WTFPL for my FLOSS project?","1347","","<p>I am looking for a free, permissive license for a small project, providing as <em>few restrictions</em> as possible on the use of my code.  Somebody recommended the <a href=""http://www.wtfpl.net/about/"">WTFPL</a>.</p>

<p>My requirements:</p>

<ul>
<li>I don't care who uses my code or for what purpose;</li>
<li>I don't care if somebody sells my work or uses it in a closed source project;</li>
<li>I am not concerned about the language in the license or whether it may offend someone;</li>
<li>I don't want to modify the license.</li>
</ul>

<p>Is the WTFPL a good license for my project, given the requirements above?</p>

<p>If not, why not?</p>

<p>Is there a better alternative?</p>
","<p>By using WTFPL:</p>

<ul>
<li>you will not get any attribution when somebody use your work</li>
<li>offending language/title of the license itself <strong>may potentially</strong> cause your project to be filtered out in some circumstances</li>
<li>you don't drop any potential liability (that might possibly get you into trouble in some countries)</li>
</ul>

<p>As for better alternative, look at the MIT License.</p>
","1360"
"Use of AGPL software after developer deleted repository","1297","","<p>We use Java libraries for a server application and one of the developers parted ways with us. </p>

<p>Since it was his project he can do whatever he wants with the github repository and he chose to delete it. Now we have no source code of the original work anymore and he states we have to delete the libraries, because as a consumer of the server application he demands a copy of the source code.</p>

<p>Who is the ""customer"" in this relationship? We, because we're using the libraries or the people consuming the service?</p>

<p><strong>Edit: Is it possible to decompile the libraries - recompile them and offer the decompiled source code as the modified source code of the recompiled libraries?</strong></p>
","<p>I'm not a lawyer, but let's talk about what the AGPL requires, and how it forms derivative works.</p>

<p>If your server uses the AGPL libraries in a way that creates a new work, then your entire work that uses the libraries is covered under the AGPL. Since, in that case, your server is a modified version of AGPL software, you must offer the source code for the entire collective work when you make the software accessible via a network.</p>

<p>Unfortunately for you, you don't have the source to offer. After you complete the initial physical transfer of the software, you can't compel the author to surrender the source code to you purely based on your position as a licensee of the software under the AGPL. The AGPLv3 is irrevocable, which means the licencor can't take away your <em>right</em> to use/modify/distribute the code, but the licencor isn't under a continuous long-term obligation to supply the source to you again if you lose it or declined to receive it in the first place.<sup>1</sup></p>

<p>When you received the binaries, the licencor satisfied their responsibility to offer you the source by advertising the source code's availability in the Github repository. Now, the author has now chosen to stop offering the program, and you can't get it anymore. They no longer offer the binaries and therefore no longer have an obligation to offer you the source.</p>

<p>Since you don't have a copy of the source from when it was available, you can't fulfill the requirements necessary to offer the combined AGPL work as a network service. That does not mean you must <em>delete</em> the AGPL binaries, but it does mean that you can no longer publicly run a network service using a program that includes AGPL components for which you cannot offer the source. You are free to continue doing things that do not require you to offer the source, such as modification, running locally for private use, etc.</p>

<p>This is likely your case. Any further consideration gets a bit murky; see below the bar.</p>

<p>Finally, offering decompiled source is probably not sufficient to satisfy the GPL's definition of ""source code"" as ""preferred form of the work for making modifications to it."" It's certainly better than the binary, but it's certainly worse than the actual code that the original author wrote.</p>

<p><sup>1</sup> <sub>As a special exception, this is not true in the rare case that the licencor gave you a formal written offer of source code under distribution option 6(b) or 6(c). In that case, the person who issued the offer of source code must honor it for at least three years from the date of issue. Since your case deals with a Github repository, it's vastly more likely that distribution was done under option 6(d), or else was not subject to the GPL at all because it was done by the original author, who is not bound by the license.</sub></p>

<hr>

<p>If your server's use of the AGPL libraries does not create a combined work, then your server and the plugin are separate works. In that case, you might possibly be in the clear but it's a subjective decision at what level of interaction two pieces of software combine into a single work. See <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#NFUseGPLPlugins"" rel=""nofollow"">the relevant GPL FAQ entry</a>, but replace ""non-free"" with ""GPL"" and replace ""GPL"" with ""AGPL"":</p>

<blockquote>
  <p><strong>Can I release a non-free program that's designed to load a GPL-covered plug-in?</strong></p>
  
  <p>It depends on how the program invokes its plug-ins. For instance, if the program uses only simple fork and exec to invoke and communicate with plug-ins, then the plug-ins are separate programs, so the license of the plug-in makes no requirements about the main program.</p>
  
  <p>If the program dynamically links plug-ins, and they make function calls to each other and share data structures, we believe they form a single program, which must be treated as an extension of both the main program and the plug-ins. In order to use the GPL-covered plug-ins, the main program must be released under the GPL or a GPL-compatible free software license, and that the terms of the GPL must be followed when the main program is distributed for use with these plug-ins.</p>
  
  <p>...</p>
</blockquote>

<p>Since the AGPL would not apply to your entire server if it doesn't form a combined work with the AGPL library, your server does not need to share its source code. For example, this is exactly what happens with MongoDB, which is AGPL-licensed but positively asserts that a program which interacts with a MongoDB database does not form a combined work with the database, so the AGPL does not apply to any program that uses it.</p>
","2538"
"What can/should I do when I see a violation to GPL restrictions?","1297","","<p>Some years ago, I was working on a software company that used some copyrighted JAR dependencies that they had bought from a medium-size obscure private company for a very expensive price.</p>

<p>After some time using their JARs, I figured out that most of the content was a GPL'd software that they repackaged, obfuscated, encrypted and started to sell as if they made it.</p>

<p>This is clearly a violation of the GPL terms (don't remember if it was GPL v2 or v3, but it is still a violation regardless of that). However, no one seems to care and I never heard about some lawyer suing somebody who is not a giant global player like Microsoft or Google due to GPL violation.</p>

<p>Further, how would I prove that there was a GPL violation, since the software was obfuscated, encrypted and can't be legally acquired easily? Further, who should/could sue them and how? Since I can't answer those positively, I might sadly conclude that GPL restrictions can't be enforced in practice and thus are just empty words.</p>

<p>I know that this question deeply depends on the country and regional laws, but I expect that answers might give some light about what may happen in practice in most place of the world about this.</p>
","<p><strong>If you do not own the copyright on the software whose license is being infringed:</strong></p>

<p>It is not up to you to prove there was a GPL violation. It is not up to you to enforce the license of software for which you do not own the copyright. None of your rights are being infringed, so you have no standing to take legal action against the copyright infringement. As a practical matter, how can you be sure that the owner of the GPL-licensed software did not allow this other vendor to use it under a separate agreement? It is possible that the other software vendor could have purchased a separate license from the owner.</p>

<p>The best thing you can do is to bring the issue to the attention of the copyright holder, who has the exclusive right to take legal action. If they want to take legal action, they can; if they don't want to, that's their decision to make.</p>

<p>In this case, since the seller took unfair advantage by <em>lying about the authorship of the software</em> during the sale, your company may be able to take legal action for fraud. (But I'm not a lawyer and couldn't say for sure.) Note that this is different from legal action for the GPL violation itself: you would take legal action for the seller's <em>deceit</em> that caused you harm, rather than the seller's <em>infringement</em> of the original author's copyright (which has harmed only the author, not you). This is no different from how it would work for any other software, open or proprietary.</p>

<p><strong>If you <em>do</em> own the copyright on the software whose license is being infringed:</strong></p>

<p>Your copyright is being infringed, and you are entitled to take legal action. For assistance, you can contact the Free Software Foundation with details about the infringement. They state on their page about <a href=""http://www.gnu.org/licenses/gpl-violation.en.html"" rel=""nofollow"">Violations of the GNU Licenses</a>:</p>

<blockquote>
  <p>The FSF acts on all GPL violations reported on FSF copyrighted code, and <strong>we offer assistance to any other copyright holder who wishes to do the same</strong>.</p>
</blockquote>

<p>Since the FSF has a social interest in teaching people to respect free software licenses (especially the GPL, which they authored), they offer some degree of assistance in taking legal action against offenders. There may, of course, still be significant cost to you, depending on how much aid the FSF can afford to give, but the FSF is far and away your best starting point.</p>
","86"
"How can I place software in the public domain","1295","","<p>I know <code>CC0</code> and the <code>WTFPL</code> for example exist to grant all rights associated with the public domain, without placing it in the public domain, because this is difficult, or in some cases impossible. I know it is impossible in Norway and Germany.</p>

<p>Why is this difficult, and how can I release some project effectively into the public domain, for jurisdictions that have such a concept?</p>

<p>If it varies greatly per jurisdiction, how can I do it for the US?</p>
","<p><strong>TL;DR</strong></p>

<p>The safest way to signal your intent to give up all rights on your work currently is CC0 in most jurisdictions. The safest way to use works in the public domain is to still do it like moral rights apply, even if the copyright in your country doesn't know the concept.</p>

<hr>

<p>First of all, most jurisdictions have some concept that is more or less similar to public domain (in germany for instance 'Gemeinfreiheit'). But only some countries allow to explicitly assign a work to public domain. So in many jurisdictions a work only becomes public domain, if the time for exclusive rights expire (70 years after authors death in many countries).</p>

<p>To go more into detail here, the <a href=""https://en.wikipedia.org/wiki/Public_domain#Application_to_copyrightable_works"">Wikipedia-article</a> covers 4 ways a work can become public domain.</p>

<p><strong>Works not covered by copyright law</strong></p>

<p>This is for works, that for some reasons are not covered by copyright laws. This is working in most jurisdictions, although there might be different rules what is covered and what not.</p>

<p><strong>Expiration of copyright</strong></p>

<p>That's what I wrote above, pretty much all jurisdiction have a limit on how long a copyright can be claimed. After that the work can be counted as public domain.</p>

<p><strong>Government works</strong></p>

<p>This is varying very much between jurisdictions. Which of governmental works (or works of other public bodies) is counted as public domain is very dependent on local laws.</p>

<p><strong>Dedicating works to the public domain</strong></p>

<p>This is the case the question implicitly asks. The author explicitly applies his works to public domain. Wikipedia writes here:</p>

<blockquote>
  <p>Few if any legal systems have a process for reliably donating works to
  the public domain. They may even prohibit any attempt by copyright
  owners to surrender rights automatically conferred by law,
  particularly moral rights.</p>
</blockquote>

<p>As can be seen, this is the difficult part. Countries like Germany know the concept of <a href=""https://en.wikipedia.org/wiki/Moral_rights_(copyright_law)"">moral rights</a>, that you cannot give up. These cover the rights of the author for attribution or that a work isn't used to denigrate the author.</p>

<p><strong>Moral rights</strong></p>

<p>It has to be noted, that many countries maintain the moral rights even after the commercial rights are expired. So in these countries you still may not use a work of a long dead author for example without proper attribution. In these cases you can say that it is impossible for a work to really properly become part of the public domain. The <a href=""https://en.wikipedia.org/wiki/Berne_Convention"">Berne Convention</a> includes moral rights, although the final ratification still differs strongly even between signatories.</p>

<p>Even for the US, that hasn't the concept of moral rights, it still might be against other laws to violate the moral rights, for instance laws against defamation.</p>

<p><strong>How can I dedicate a work to public domain</strong></p>

<p>You can simply declare, that you put your work under public domain. This may even work in countries that haven't the concept: I remember a law-suit, there the court accepted the public domain dedication as the authors intent to give up his rights.</p>

<p>Also there are some licenses (you name CC0 and WTFPL) that work in that way and give rights similar to what Public Domain would mean. CC0 seems a pretty safe way to make this work in most jurisdictions. Even if your country allows to dedicate a work to public domain, it may be safer to use CC0, as a user in another country might still not be allowed to use your work as PD.</p>

<p>Still, be it a declaration of public domain or CC0, you will keep your moral rights in countries where it applies. So it may be safe to use such works still with proper attribution and not use it in an abusive way.</p>
","1372"
"Are CDDL and GPL really incompatible?","1263","","<p><a href=""http://en.wikipedia.org/wiki/Common_Development_and_Distribution_License#GPL_compatibility_controversy"" rel=""nofollow"">Wikipedia</a> seems to suggest that CDDL and GPL are incompatible, yet no one knows for sure why or how.</p>

<p>Why and how are the CDDL and GPL are incompatible?</p>
","<p>Be careful with the claims about the CDDL on the FSF website, they are wrong. Some years ago, Eben Moglen confirmed me in a private mail that the claims about the CDDL on the FSF website are based on a false assumption on how BSD / GPL compatibility may be avowed. So the BSD text and the CDDL text on the same website both do not apply. I asked Moglen to try to encourage Richard Stallman to change this, but it seems that the attempt from Moglen to do this resulted in a discord.</p>

<p>The CDDL is a license that does not try to enforce restrictions that would not stand in court but disallows to relicense code. The fact that on the other side, the CDDL explicitly limits it's scope to the files that contain CDDLd code, allows us make our first conclusion:</p>

<ul>
<li>Code under the CDDL and code under the GPL cannot be mixed in a single file.</li>
</ul>

<p>The GPL is a license that limits it's scope to the so called ""work"" limit and forbids to relicense code. This allows us to make the next conclusion:</p>

<ul>
<li>Code under the CDDL and code under the GPL cannot be mixed in a single work.</li>
</ul>

<p>Now we have to understand what the CDDL allows, what the GPL allows and which claims from the GPL are void because they are in conflict with the law...</p>

<p>In the EU, we have some consumer protection laws that cause rules for ""terms of business"" that forbid some rules in contracts that cannot be set up by both parties but are dictated by one of the party. In case of the GPL, this allows users of GPLd code to interpret some of the ambiguous claims in the GPL to be interpreted by the licensee in the was that gives most convenience to the licensee.</p>

<p>In the US, consumer protection laws are based on the construct that such unilateral contracts are not called contracts but ""Licenses"" and such a license may not enforce anything that is not explicitly listed in the US Copyright law. </p>

<p>As a result, both jurisdictions make the claims in GPL section 0 (where the GPL tries to defined what a derivative work is) void claims.</p>

<p>In special: the claim from the GPL that tries to define that a so called ""collective work"" is rather a ""derivative work"" is void. This is fine, as it permits to create collective works with GPLd code being used.</p>

<p>Please first read the OSS licensing book from Lawrence Rosen: <a href=""http://rosenlaw.com/open-source-licensing-software-freedom-and-intellectual-property-law/"" rel=""noreferrer"">http://rosenlaw.com/open-source-licensing-software-freedom-and-intellectual-property-law/</a>  the excellent article that is specific about the US Copyright law violation by the GPL from Lothar Determann (Professor of law in Berlin and San Francisco): <a href=""http://www.cs.berkeley.edu/~tlavian/publications/article/Berkeley_Law_Journal_softwarecombinations060403.pdf"" rel=""noreferrer"">http://www.cs.berkeley.edu/~tlavian/publications/article/Berkeley_Law_Journal_softwarecombinations060403.pdf</a> that gives plenty of citations and the article from my colleague Thomas Gordon: <a href=""http://www.osscc.net/pdf/QualipsoA1D113.pdf"" rel=""noreferrer"">http://www.osscc.net/pdf/QualipsoA1D113.pdf</a></p>

<p>These all explain that you may use the GPL in collective works because GPL section 0 is void.</p>

<p>Now that we know that GPL section 0 is void and we know that CDDL and GPL cannot appear simultaneously in a single work, are there other possible methods to combine CDDL and GPL?</p>

<p>Yes, this works because the <code>work</code> <strong>GNU tar</strong> cannot be used alone. It needs at least <code>libc</code> that is a different independent work. The GPL permits a <code>work</code> under GPL to be combined with other <code>works</code> that are under a different license if the other work is either typically part of the target platform distribution or if this other work is freely redistributable. Note that this is a statement that has been confirmed by many lawyers and the FSF that explicitly claims ""You are allowed to use <strong>GNU tar</strong> together with a CDDLd libc"".</p>

<p>We now can make the next conclusion:</p>

<ul>
<li><p>CDDL and GPL can appear together in a <code>collective work</code> if the related single <code>works</code> that are part of the collective work are independent from each other.</p></li>
<li><p>A typical method to combine CDDL and GPL is to let a GPLd program use CDDLd libraries.</p></li>
</ul>

<p>While all lawyers agree to permit a GPLd program to use a CDDLd library, there is a statement from Lawrence Rosen who claims that he believes that even a GPLd library may be used by a non-GPLd program (check his book, it is free).</p>
","2106"
"What's the difference between different membership levels in the Linux Foundation?","1254","","<p>I recently read that <a href=""https://www.linuxfoundation.org/announcements/microsoft-fortifies-commitment-to-open-source-becomes-linux-foundation-platinum"" rel=""noreferrer"">Microsoft has become a Platinum member of the Linux Foundation</a>.</p>

<p>The Linux Foundation website <a href=""https://www.linuxfoundation.org/members/corporate"" rel=""noreferrer"">lists various companies</a> as ""Platinum Members"", ""Gold Members"", ""Silver Members"" and ""Affiliates"".</p>

<p>What exactly is the difference between these different membership levels?</p>
","<p>(disclosure: I am a supporter and my company is a silver member of the Linux Foundation).</p>

<p><strong>TL;DR</strong>: Higher levels of membership pay bigger fees and have more say in the running of the Foundation with Board of Directors seats.</p>

<p>Yearly fee for Platinum is $500K+, Gold is $100K, Silver is $5K to $20K. Individual supporters pay $99 and Student  get in for free.</p>

<p>Now the question you did not ask and that I shall dare to answer is:</p>

<blockquote>
  <p>Could Microsoft use its LF membership to impede Linux progress?</p>
</blockquote>

<p>The short answer is no. The LF bylaws have several checks and balances built-in. And the kernel contributors are contributing independently of the LF anyway.</p>

<p><strong>in details</strong></p>

<p>Per the <a href=""https://www.linuxfoundation.org/about/bylaws"" rel=""noreferrer"">LF bylaws</a> Section 3.2 - Membership Qualifications and Section 3.3 - Affiliates here are the classes:</p>

<blockquote>
  <p>The following shall be the requirements for membership in each membership class:</p>
  
  <p>(a) Platinum Members. The Platinum Members shall be individuals and entities that engage in or support the production, manufacture, use, sale, or standardization of Linux or other open source-based technologies. [...]
  (b) Gold Members. Gold Members shall be individuals and entities that engage in or support the production, manufacture, use, sale, or standardization of Linux or other open source-based technologies.  [...]</p>
  
  <p>(c) Silver Members. Silver Members shall be individuals and entities that engage in or support the production, manufacture, use, sale, or standardization of Linux or other open source-based technologies.  [...]</p>
  
  <p>a) Affiliates. The Board of Directors may establish one or more classes of individuals or entities associated with this corporation.  Such individuals or entities shall be referred to as “Advisors,” “Affiliates,” “Associates,” “Contributors,” or any other title as the Board of Directors deems appropriate (collectively, the “Affiliates”).</p>
</blockquote>

<p><em>The membership <a href=""https://www.linuxfoundation.org/about/bylaws#schedulea"" rel=""noreferrer"">fee</a> schedule is</em>:</p>

<pre><code>Platinum
    US$ 500,000
Gold
    US$ 100,000
Silver
    US$ 20,000 (employee size greater than 5,000)
    US$ 15,000 (employee size between 500 and 4,999)
    US$ 10,000 (employee size between 100 and 499)
    US$ 5,000 (employee size &lt;100)
</code></pre>

<p>And for <a href=""https://www.linuxfoundation.org/members/individual-supporters"" rel=""noreferrer"">individual supporters</a>: </p>

<pre><code>Individual $99
Student Free
</code></pre>

<p>The membership class influence who is on the <a href=""https://www.linuxfoundation.org/about/bylaws"" rel=""noreferrer"">board</a> per Article V:</p>

<ul>
<li>each platinum member has a seat on the board</li>
<li>all gold members have three seats jointly</li>
<li>all silver members have one seat jointly</li>
</ul>

<p>Therefore a platinum has more influence on the directions of the LF and has as much influence as all the silver members taken together.</p>
","4745"
"How can I convert users to contributors?","1235","","<p>I run a project with a decently-sized userbase - a couple of hundred people, perhaps. It's regularly used by all users, and I've made it clear who developed it, where it can be found, and that it's free software.</p>

<p>However, I'm currently the only developer and contributor. With the exception of some small amounts of documentation, nobody has made any pull requests to the project.</p>

<p>I've got other things to do as well, and I can't spend all my time working on this one project. I need other people to pitch in.</p>

<p><strong>Given a sizeable, active userbase, how can I encourage users to contribute to my project?</strong></p>
","<ol>
<li>Make it clear that you want contributions. </li>
<li>Make it <em>easy</em>.</li>
</ol>

<p>I would start by putting a friendly note in your project's ReadMe file. </p>

<blockquote>
  <p>This project is looking for contributors. If you have a feature you'd like to see implemented or a bug you'd liked fixed, the best and fastest way to make that happen is to implement it and submit it back upstream for consideration. All contributions will be given thorough consideration. </p>
</blockquote>

<p>Or something like that. </p>

<p>Next, reach out to your users on your mailing list, forum, and social media letting them know that the project needs more developers. Seriously, I can't tell you how far a Twitter account and a few well placed hashtags can go into generating interest. Also, blog about your development on the project if possible. Anything you can do to get your project in front of even more users is a good thing, particularly if those users are also developers. </p>

<p>However, even if you get some interest that way, it won't matter unless you make it <em>easy</em> as pie to help out. </p>

<ul>
<li>Write clean and understandable code. If people can't understand your code, they can't change or add to it. </li>
<li>Document the build process thoroughly. </li>
<li>Make sure that the project builds ""out of the box"" when cloned onto a clean machine. If people struggle with getting it to build, they'll quickly move on and just write off trying to help out. </li>
<li>Add a <code>Contributing</code> file to the repo detailing the project standards and workflow. This goes a long way to reducing the frustrating back and forth that can happen during a pull request. </li>
<li>If you're able, add [up-for-grabs] and [easy-fix] labels to issues that someone new could easily tackle. This gives people a place to start. </li>
<li>Be available for real time chat to help new contributors get started. There are often a lot of questions when new contributors get started. Real time chat is the best way to help them get on their feet. </li>
<li>Reduce your standards. Don't <em>really</em> reduce your standards, but go ahead and accept that patch that isn't quite up to par. You can always go ahead and take a few minutes to clean it up after the fact. </li>
<li>Write unit tests. It can be hard to tell if you broke anything while making a change to someone else's code. Provide the tests to make it easy to make sure everything is still working correctly post change. </li>
</ul>
","1504"
"What should be written in MIT license (year, full name)?","1229","","<p>I am creating an open source project and I want to use an MIT license for that. I have found this page: <a href=""http://choosealicense.com/licenses/mit/"">http://choosealicense.com/licenses/mit/</a></p>

<p>What should I write under ""full name""? Should the group of people, that I am working with be registered as a company? If I am the head developer, and other people are freelancers that I have hired, can I (or should I) just write my own name instead of the company's name?</p>

<p>Under the ""year"" should I write basically the current year, the years when this project is available as open source or the year this product was released?</p>
","<p>All these details are part of the copyright statement, i.e.</p>

<blockquote>
<pre><code>Copyright (c) [year] [fullname]
</code></pre>
</blockquote>

<p>As such, they should be filled in with the details of the copyright that applies to the licensed work.</p>

<p><code>[year]</code> is the <strong>year copyright was applied</strong>. If you apply the copyright (which happens automatically when you write the work) in 2015, put in 2015. Some people like to put in a range of years (i.e. 2015-2020) - this isn't necessary.</p>

<p><code>[fullname]</code> is the <strong>full name of the entity that owns the copyright</strong>. If the owning entity is a private individual, put their name in:</p>

<pre><code>Copyright (c) 2015, jackson
</code></pre>

<p>If it's a company (and although you may write the code, if you write it for a company, your employment contract probably contains a copyright assignment clause), put in the name of the company:</p>

<pre><code>Copyright (c) 2015, Stack Exchange, Inc.
</code></pre>

<p>Additionally, if you're using <a href=""http://choosealicense.com"">choosealicense</a>, each license page has a section called <strong>How to apply this license</strong>. You can find it on the top of the right-hand column of the page.</p>
","1523"
"Placement of copyright and license variables within Python source?","1223","","<p>As mentioned in a <a href=""https://opensource.stackexchange.com/questions/4149/include-appendix-of-apache-2-0-in-license-file"">previous question about the Apache 2.0 code header</a>, I mentioned having the code header which is recommended by the Appendix of the <a href=""http://choosealicense.com/licenses/apache-2.0/"" rel=""nofollow noreferrer"">Apache 2.0 license</a>.
However there are two fields that information can be placed in regarding copyrights/licenses for a standardized Python boilerplate header for a module.  The two fields are <code>__copyright__</code> and <code>__license__</code> as specified by <a href=""https://stackoverflow.com/questions/1523427/what-is-the-common-header-format-of-python-files"">this relevant answer on StackOverflow</a>.</p>

<p>I'm wondering about what information should go where, should I include only my name and copyright year in the <code>__copyright__</code> field and then have the <code>__license__</code> field be the full text of the Apache 2.0 license? Should the <code>__license__</code> field duplicate the copyright line with my name and the year?</p>

<p><strong>OR</strong></p>

<p>Alternatively could have the full text of the license in the <code>__copyright__</code> field and then simply list the license name in the <code>__license__</code> field as <code>Apache 2.0</code> as the <code>__license__</code> field is more commonly used.</p>

<p>I'm mostly worried about preserving the Apache 2.0 header's use without having to split it up but I'm also worried about duplicate information in a header. (Containing copyright year and my name in both <code>__license__</code> and <code>__copyright__</code> fields.)</p>

<p>Currently I was thinking the following:</p>

<pre><code>__copyright__ = """"""

    Copyright 2016 &lt;MY FULL NAME&gt;

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

""""""
__license__ = ""Apache 2.0""
</code></pre>
","<p>Some licenses, like Apache 2.0 as you noted, recommends including a copy of the license, or some shortened version, in each file. It's best if you can follow these recommendations, but as long as it's clear what file falls under what license, you don't need to follow any convention. The reason why some licenses recommend this is often because they operate on a per-file basis, as opposed to per-project licenses like GPL. Note that a lot of these conventions were established before widespread use of version control software, so people had to manually track authorship. See this question for more details: <a href=""https://opensource.stackexchange.com/q/202/175"">Should I include license text in a single file or all source files?</a></p>

<p>But this is tangential to the <code>__copyright__</code> and <code>__license__</code> variables. They are part of certain Python coding styles, which are supported by certain Python tools like <a href=""https://en.wikipedia.org/wiki/Epydoc"" rel=""nofollow noreferrer"">epydoc</a>. What you put in these variables depends on your project's coding style, and whether you use tools like epydoc. If none of these apply, it's up to your personal preference.</p>
","4155"
"is CC BY license GPL compatible? CC BY vs CC0","1214","","<p>CC0 license is GPL compatible. A component with such license can be included in GPL-licensed product.</p>

<p>Is this true also for CC BY license?
What is the difference between CC0 and CC BY licenses? Particularly, I am interested in such aspects of these licenses, which are related to media and their use in GPL software.</p>
","<p>CC-BY is listed among compatible licenses near the bottom of the GPL license <a href=""http://www.gnu.org/licenses/license-list.en.html#GPLCompatibleLicenses"" rel=""noreferrer"">compatibility page:</a></p>

<blockquote>
  <p>This is a non-copyleft free license that is good for art and
  entertainment works, and educational works. It is compatible with all
  versions of the GNU GPL; however, it is not recommended for use on
  software.</p>
</blockquote>

<p>In general, the difference between CC0 and CC-BY is that the latter requires attribution and is not recommended for use with software while CC0 requires practically nothing and is OK for use with software.</p>

<p>With regard to why CC-BY is unsuitable for software, the <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_apply_a_Creative_Commons_license_to_software.3F"" rel=""noreferrer"">Creative Commons FAQ</a> says</p>

<blockquote>
  <p>Unlike software-specific licenses, CC licenses do not contain specific
  terms about the distribution of source code, which is often important
  to ensuring the free reuse and modifiability of software. Many
  software licenses also address patent rights, which are important to
  software but may not be applicable to other copyrightable works.
  Additionally, our licenses are currently not compatible with the major
  software licenses, so it would be difficult to integrate CC-licensed
  work with other free software. Existing software licenses were
  designed specifically for use with software and offer a similar set of
  rights to the Creative Commons licenses.</p>
</blockquote>

<p>But, with regard to CC0, the same FAQ says</p>

<blockquote>
  <p>... the CC0 Public Domain Dedication is GPL-compatible and acceptable for software.</p>
</blockquote>
","1621"
"How to license software that implements a well-documented algorithm, but which does not borrow source from the official library?","1186","","<p>I have implemented an RSYNC library based on the 
<a href=""https://rsync.samba.org/tech_report/"" rel=""noreferrer"">technical report</a> by Andrew Tridgell and Paul Mackerras.  The library implementation does not borrow code from the official RSYNC library and does not conform to the official API.  I would like to release my library as free software on GitHub.</p>

<p>The RSYNC library itself is released under the GNU GPL, but as I am not using or modifying the library's source, I am not sure how to license my own library.  What are my licensing options, if any?  How do I attribute the technical report?</p>
","<p>Since you have never looked at the source code, and ONLY looked at:</p>

<ul>
<li>The API</li>
<li>The <a href=""https://rsync.samba.org/tech_report/node3.html"" rel=""nofollow"">no-code very high-level description</a> of the synchronization algorithm</li>
</ul>

<p>then you are free to release your implementation under any license you want.</p>

<p>Just like SAMBA checked the API and algorithms of CIFS and released their software under the license they wanted.</p>

<p>Or at least, that was the common point of view until the Google vs Oracle lawsuit, where the ""structure, sequence and organisation"" of an API got considered a copyrighted work and therefore copying the RSYNC API would be copyright infringement. Google tried to appeal the appeal but the supreme court refused a few months ago. I'm not sure if there will be further developments, but this decision is a huge loss for interoperability and innovation so we can only hope that the judiciary will realize their mistake. (Thanks Abhi for the info)</p>

<p>You don't <em>have</em> to attribute the technical report (except if you pasted significant parts of it inside your code or documentation), but an URL is nice and safe to paste before each relevant algorithm implementation.</p>

<p>In case you had seen the source code, the matter would not be so clear-cut, see some real-world examples with various outcomes at <a href=""https://en.wikipedia.org/wiki/Clean_room_design#Case_law"" rel=""nofollow"">https://en.wikipedia.org/wiki/Clean_room_design#Case_law</a>.</p>
","1807"
"Is the Mozilla Public License compatible with Apple's App Store?","1177","","<p>I'm planning on open-sourcing an application soon, and I've settled on either GPLv3 or the Mozilla Public License 2.0, as this application has a massive community surrounding it, and I still want other people to have to disclose source code for modified versions.</p>

<p>The application is a standalone executable, but I can see other people porting this to other platforms (such as the App Store) in the near future, as there's pretty big demand for this.</p>

<p>However, <a href=""https://apple.stackexchange.com/questions/6109/is-it-possible-to-have-gpl-software-in-the-mac-app-store"">the GPL conflicts with the App Store's Terms of Service</a>, so I'm in a bit of a pickle. I can't find <em>anything</em> (even a case where anything has happened) on whether the MPL is disallowed on the App Store.</p>

<p>In addition, does it matter whether or not I'm the author of this application? It seems that Apple flat-out refuse to take GPL'd apps.</p>
","<p>TL;DR: The legal incompatibilities between the GPL and the App store TOS don't apply to the MPL, but there is no saying whether Apple will allow your MPL licensed app.</p>

<p>First off, what Apple allows and doesn't allow in their app store is entirely up to Apple. As far as I know, they reserve the right to refuse any app for any reason whatsoever. Therefore, it is impossible for us to guarantee that an app will not be rejected from the app store for it's license, whatever the license is.</p>

<p>As far as the GPL goes, you can't legally distribute GPL licensed apps through the app store, because the terms of service of the app store, and the GPL are incompatible. There are restrictions in the TOS of the app store on what you may and may not do with an app you receive from the app store. The GPL disallows any such restrictions in paragraph 3 of section 10:</p>

<blockquote>
  <p>You may not impose any further restrictions on the exercise of the
  rights granted or affirmed under this License. [...]</p>
</blockquote>

<p>Therefore, it's impossible to simultaneously comply with the app store TOS and with the GPL.</p>

<p>The MPL doesn't have such a clause, implying that additional restrictions <em>may</em> be placed on an MPL licensed work. Assuming that the app store rejects GPL licenses based on the above rationale, that rationale wouldn't go for MPL licensed apps, and there would be no problem in distributing an MPL licensed work to the app store.</p>

<p>I, along with everybody else, have not read the TOS of the app store in its entirety. There may be other restrictions or reasons why legally distributing MPL licensed software through the app store impossible, but it seems unlikely.</p>

<p>Therefore, I consider it likely that Apple will allow an MPL licensed app in their app store. There is really only one way to find out if they do: try it out.</p>
","1763"
"Does GPLv3 require attribution?","1160","","<p>I believe that <a href=""http://choosealicense.com/licenses/gpl-3.0/"" rel=""nofollow noreferrer"">GNU GPLv3</a> does <em>not</em> require attribution, but can be supplemented to do so, as stated in the additional terms (7. b) of the terms and conditions.</p>

<p>However, it <em>also</em> states, under the additional terms that additional terms can be removed from any part of a copy.</p>

<p>Meaning, the requirement of attribution can be added, but also <em>removed</em> by any derivative works, meaning that attribution cannot be enforced by GNU GPL.</p>

<p>Am I correct in my understanding of GPLv3? I'm especially curious because there are posts<sup>1</sup> as well as upvoted comments<sup>2</sup> on the network, and statements on blog posts<sup>3</sup> that seem to confirm my beliefs, as well as posts<sup>4</sup> and upvoted comments<sup>5</sup> that seem to imply differently.</p>

<hr>

<p><sup>1</sup> - <a href=""https://softwareengineering.stackexchange.com/q/170188/181912"">Is requiring attribution GPL-compatible?</a></p>

<p><sup>2</sup> - <a href=""https://softwareengineering.stackexchange.com/questions/170188/is-requiring-attribution-gpl-compatible#comment326353_170188"">Is requiring attribution GPL-compatible?</a></p>

<p><sup>3</sup> - <a href=""https://tommcfarlin.com/give-proper-gpl-attribution/"" rel=""nofollow noreferrer"">How Do You Give Proper GPL Attribution?</a></p>

<p><sup>4</sup> - <a href=""https://opensource.stackexchange.com/q/3994/6377"">Why do almost all open source licenses require attribution?</a></p>

<p><sup>5</sup> - <a href=""https://stackoverflow.com/questions/713045/best-open-source-license-for-those-wanting-attribution#comment1236215_713045"">Best open source license for those wanting attribution? [closed]</a></p>
","<p><strong>TL;DR</strong></p>

<blockquote>
  <p>I believe that GNU GPLv3 does not require attribution, [...] Am I correct in my understanding of GPLv3? </p>
</blockquote>

<p><strong>No</strong>, the GPL-3.0 always requires attribution composed at the minimum of a copyright statement, a notice and the GPL license text.
Attribution examples are provided at <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">the bottom of the license text</a>.</p>

<h1>But <strong>what is attribution?</strong></h1>

<p>I consider that <strong>attribution is the essence of free and open source licensing</strong>.</p>

<p>Let's assume my code contains third-party code. </p>

<p>At heart attribution is about <strong>communicating to my users the licensing
terms</strong> of this third-party code I redistribute. Therefore all bona fide
FLOSS licenses require some type of attribution, if anything to communicate
the licensing terms to the recipients of the code. Attribution is also about
<em>giving due credit to the authors</em> of the third-party code that I leverage (which may or may not be required by a license): this is the <em>right thing</em> to do and the thing I would appreciate users of my code to do when my code is reused.</p>

<p><em>Attribution</em> can take several forms and some licenses are very prescriptive about attribution requirements stating which forms it should take, where and when it should be provided or displayed, whether it is required or optional, or applies to source code and/or binary code redistribution, should be present in the documentation, in the UI, etc.</p>

<p>In its minimal form it requires <strong>at least</strong> to communicate the original license terms as a notice and in many cases the whole text of the license. To be correct and complete, I should also:</p>

<ul>
<li>specify <strong>who this attribution is for</strong>: the simplest form would
be a copyright statement. </li>
<li>specify <strong>which code this attribution applies to</strong>. </li>
</ul>

<p>Without a proper copyright statement, an attribution would be moot and meaningless as the recipient would not know who I attributed.</p>

<p>Without a proper statement of which code the attribution is for, an attribution would have not much substance as the attributed code would be undetermined.</p>

<h1>With these basics set, what are the attribution requirements of the GPL-3.0 license?</h1>

<p>The GPL-3.0 license is rather clear and explicit on that topic. I added to the text excerpts some emphasis and cross links to make things clearer.</p>

<h2>The <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""noreferrer"">definitions section</a> explains  what are the ""Appropriate Legal Notices"".</h2>

<p>Later, this definition is reused in <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""noreferrer"">section 5</a> and <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section7"" rel=""noreferrer"">7</a>.</p>

<blockquote>
  <p>[...] An interactive user interface displays ""Appropriate Legal Notices"" to the extent that it includes a convenient and prominently visible feature that (1) displays an <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer""><strong>appropriate copyright notice</strong></a>, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>
</blockquote>

<h2><a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""noreferrer"">Section 4</a> explains what attribution means when I redistribute unmodified copies of the source code:</h2>

<blockquote>
  <p>[...] provided that you conspicuously and appropriately publish on each copy an <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer""><strong>appropriate copyright notice</strong></a>; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p>
</blockquote>

<p>So when I redistribute an unmodified copy of a GPL-3.0-licensed program I would need to ""attribute"" with:</p>

<ul>
<li>a conspicuous copyright statement and notice, with <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">examples</a> </li>
<li>keep existing notices</li>
<li>a copy of the GPL license text</li>
</ul>

<p>I consider this to be the absolute minimal attribution of the GPL. Any other type of redistribution has additional requirements.</p>

<p>Let's look at these:</p>

<h2>Under <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""noreferrer"">section 5</a>, when I redistribute modified source code, I have these additional attribution requirements:</h2>

<p>It starts with this, clearly establishing that these are extras requirements on top of section 4:</p>

<blockquote>
  <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code <strong>under the terms of <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""noreferrer"">section 4</a></strong>, provided that you also meet all of these conditions:</p>
</blockquote>

<p>And then goes on to explain what these new requirements are:</p>

<blockquote>
  <p>a) The work must carry prominent notices stating that you modified it, 
  and giving a relevant date.</p>
  
  <p>b) The work must carry prominent notices stating that it is released under
  this License and any conditions added under section 7. This requirement
  modifies the requirement in section 4 to “keep intact all notices”.</p>
  
  <p>[...]</p>
  
  <p>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</p>
</blockquote>

<p>So when I redistribute a modified source copy of a GPL-3.0-licensed program I would need to additionally ""attribute"" with:</p>

<ul>
<li>a tracking of the changes I made, with prominent modification dated notices</li>
<li>if needed, I shall update (or create) notices to state that this code is under the GPL. If program(s) is missing a copyright of the original author, I should add a copyright statement. If program(s) is missing a GPL notice, I should add a GPL notice: for this I can use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">examples</a>.</li>
<li>if there is some user interface, I need to update the code to display a notice following <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""noreferrer"">section 0</a> and I can use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">examples</a>.</li>
</ul>

<h2>Under <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section6"" rel=""noreferrer"">section 6</a>, when I redistribute binaries (aka. non-source), I have these additional attribution requirements:</h2>

<p>It starts with this, clearly establishing that these are extras requirements on top of section 4 and 5:</p>

<blockquote>
  <p>You may convey a covered work in object code form under the terms of <strong><a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""noreferrer"">sections 4</a> <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""noreferrer"">and 5</a></strong>, [...]</p>
</blockquote>

<p>Now:</p>

<ol>
<li><p>If I provide the source code with the binaries then I have no new requirements.</p></li>
<li><p>If I do not provide the source code with the binaries I have a few extra requirements:</p></li>
</ol>

<blockquote>
  <p>b) [...] accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that
  product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source [...], or (2) access to copy the
  Corresponding Source from a network server at no charge.</p>
  
  <p>c) Convey individual copies of the object code with a copy of the written
  offer to provide the Corresponding Source. [...]</p>
  
  <p>d) Convey the object code by offering access from a designated place [...]</p>
  
  <p>etc. </p>
</blockquote>

<p>So in this case, my new attribution requirement boils down to provide or explain how to get the source code: the license covers several possible approaches and constraints. My preferred way and the simplest is to provide the source with the binaries.</p>

<p>There are other requirements under Section 6 for ""user"" products and re-installation doc. These are not strictly part of attribution so I will not discuss these here.</p>

<p>The other sections of the license (including <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section7"" rel=""noreferrer"">Section7</a>) <strong>are not relevant per se</strong> for attribution as they are for special cases and ""Additional permissions"" cannot weaken the attribution requirements that came before in the license text.</p>

<p>Finally, at the end  and past the ""terms and conditions"", the license provides <strong>guidelines and an example on <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">How to Apply These Terms to Your New Programs</a></strong>: this clarifies what a source code and displayed notice should look like if something was not clear to me before.</p>

<p>Therefore, the GPL 3.0 always requires ""attribution"".</p>

<p>But I may not be convinced yet:</p>

<blockquote>
  <p>What happens if you want to use (modify) a GPL work that misses a copyright notice? (am I correct to think this is a possible scenario?) </p>
  
  <p>It's still not clear to me what an ""appropriate copyright notice"" as mentioned in section 0 is. I mean, if the source I receive has 2016 (c) Philippe Ombredanne, does that mean if I modify the source, I need to keep that verbatim? What part of the license exactly is it that disallows me from just replacing it with 2016 (c) Amani Kilumanga</p>
</blockquote>

<p>As I stated above, in addition to the attribution requirements for unmodified source code, if I modified source code I have these <strong>additional</strong> requirements per <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""noreferrer"">section 5</a>:</p>

<ul>
<li><p>per 5-a) I need to notify of my changes with a date</p></li>
<li><p>per 5-b) I shall update (or create) notices to state that this code is under the GPL. If program(s) is missing a copyright of the original author, I should add a copyright statement. If program(s) is missing a GPL notice, I should add a GPL notice. For this I can use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">examples</a>.
For my changes I can also add my own copyright statement. I shall not/never remove anyone else copyright or notice. </p></li>
<li><p>per 5-d) if there is some user interface, I need to update the code to display a notice following <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""noreferrer"">section 0</a> and I can use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">examples</a> for this.</p></li>
</ul>

<p>So if I modify source that had <code>Copyright (c) 2016 Amani Kilumanga</code> I shall not remove that copyright statement. I can add my copyright statement <code>Copyright (c) 2016 Philippe Ombredanne</code> and I must state that I modified the source when and how.  </p>

<p>For instance I could add this change notice: <code>2016-10-01: Update the interactive streamline nosql to supply strategic users</code>.</p>

<p>If the source code was missing a proper GPL notice, I shall add it and I would use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""noreferrer"">example</a> as a template.</p>

<p>So in all cases, the modified source code would start with something more or less like this:</p>

<pre><code>Copyright (c) 2016 Amani Kilumanga
Modifications Copyright (c) 2016 Philippe Ombredanne
2016-10-01: Update the interactive streamline nosql to supply strategic users

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
</code></pre>

<p>And a command line program notice could end up looking like this:</p>

<pre><code>Copyright (c) 2016 Amani Kilumanga
Modifications Copyright (c) 2016 Philippe Ombredanne
This program comes with ABSOLUTELY NO WARRANTY; for details type 'banana foo'.
This is free software, and you are welcome to redistribute it
under certain conditions; type 'banana bar' for details.
</code></pre>
","4582"
"FLOSS projects : How and where can I start contributing?","1160","","<p>I'm new to the open source community. I've always wanted to contribute to successful existing open source projects. I thought that contribution to good open source projects was meant only for experienced great programmers. Since there is an open source community on Stack Exchange now, I thought I would ask here. </p>

<ol>
<li><p>How can someone new to the open source community (like me) start?</p></li>
<li><p>How does the contribution flow work in open source projects? (Like first maybe you monitor activities in that open source community, then read through the bugs list or contribute to documentation, etc. I don't know, I'm just speculating.)</p></li>
</ol>
","<h1>Where can I start contributing?</h1>

<p>There are two obvious stages to this: pick a language, pick a project.</p>

<h3>Pick a language</h3>

<p>You should pick a language with which you are familiar and proficient. I'd advise <em>not</em> trying to contribute to projects in languages you're not that great in - yes, it is a good opportunity to improve your skills in that language, but it's <em>also</em> a good way to annoy the developers because you're doing things in a way that the language could do much better. A good example of this is Python:</p>

<pre><code>some_list = [""a"", ""b"", ""c""]
if hasattr(some_list, ""a""):
</code></pre>

<p>This seems to be correct to many new in the language: the documentation suggests that <code>hasattr</code> returns true if the given list has the given attribute. However, it won't work as expected, and could actually be done in a much more 'Pythonic' fashion:</p>

<pre><code>some_list = [""a"", ""b"", ""c""]
if ""a"" in some_list:
</code></pre>

<p>Moral of the story: pick a language you're good at, so you don't have to worry about your coding style or practices being the cause of your pull requests getting rejected.</p>

<h3>Pick a project</h3>

<p>Now you pick a project, written in your chosen language, that you want to contribute to. If you've had some exposure to the language, you may already have come across useful utilities or tools that you use that are open-source: these are good choices because you'll be <em>motivated</em> to contribute well.</p>

<p>You should always pick a project which interests you. If you're not interested in crunching data, don't pick a graphing library. If machine learning gets you going, try to find something in that area. Maybe you can even contribute to a project you're already using.</p>

<p>A good resource for finding projects if you're stuck is <a href=""http://www.codetriage.com/"" rel=""nofollow noreferrer"">Code Triage</a>, which lists repositories on GitHub by the number of open issues they have. Pick your language, pick an interesting project, pick an issue and try to solve it.</p>

<h1>What's the contribution flow?</h1>

<p>This really depends what you're good at, though there are some givens. You should <em>always</em> start by familiarising yourself with the project: read the documentation, read the codebase. If the hosting supports it, you should clone the repository and build the software on your local machine, and have a play around with the code to figure out what each part does.</p>

<p>Once you're familiar, you can choose what you want to do. If you're a technical writer, writing documentation is probably a good choice for you. If you hate writing long documents, but you're good at programming, pick an issue and try to fix it.</p>

<p>Whatever you do, make your changes in a fork of the project's repository somewhere you control. Test them (see <a href=""https://opensource.stackexchange.com/questions/826/whose-responsibility-is-it-to-test-contributions"">Whose responsibility is it to test contributions?</a> for information about who does what testing) and make sure everything works. Make sure your code style conforms to that of the project: developers aren't going to be happy with ten thousand different styles in their project because they've got lots of <a href=""https://opensource.stackexchange.com/q/352/168"">pull requests</a>. Make sure you've read any contributing information the project has. If you've conformed to everything, you can submit a pull request to the project's developers, who will review your changes.</p>

<h1>Expect rejection.</h1>

<p>You're not perfect and neither is your code; the project developers may well find some issues with it or some style point they don't like. It's your work, so it's your responsibility to fix these: monitor the feedback on your pull request, and use it to change anything they ask you to. When that's done, you can resubmit your pull request and have it merged. Wash, rinse, repeat.</p>
","1153"
"How did the first Linux distribution(s) develop?","1078","","<p>In <a href=""https://opensource.stackexchange.com/q/883/55"">this question</a> I asked why distribution are more common in the Open Source and Linux environment. It seems that a) open source makes the job easier for the distributor as it isn't needed to ask for permission and b) that Linux has an open development model instead of a centralized one.</p>

<p>So my question is: How did people have the idea Linux would work better with a distribution and start the first distribution(s)? Which distributions were the first and when did these projects start?</p>
","<p>With regards to</p>

<blockquote>
  <p>Which distributions were the first and when did these projects start?</p>
</blockquote>

<p>This is discussed at the beginning of Glyn Moody's book ""Rebel Code"", in Chapter 6, ""Boot Then Root"".</p>

<p>He mentions the distribution from MCC (the Manchester Computing Center) as being a very early example, though perhaps not the first. However, the book does not mention an earlier example.</p>

<blockquote>
  <p>The First MCC Interim version, using the 0.12 kernel, appeared in February 1992.</p>
</blockquote>

<p>He then says</p>

<blockquote>
  <p>As the MCC Readme notes, ""Very shortly after the first MMC Interim version of Linux appeared, other people released similar versions: Dave Safford's TAMU [Texas A&amp;M University] releases, and Martin Junius's MJ Versions were eventually followed by Peter MacDonald's massive, comprehensive SLS releases and H. J. Lu's small base systems.""</p>
</blockquote>

<p>The SLS (Softlanding Linux System) was an important early distribution.
Debian is generally considered an immediate successor of SLS, and Debian's founder, Ian Murdoch said at the time that SLS was ""possibly the most bug-ridden and badly maintained Linux distribution available; unfortunately it also [sic] quite possibly the most popular"".</p>

<p>Both Slackware and Debian began in 1993. So the distributions mentioned above, none of which exist any more, could be considered the first wave before the distributions we know and love made their first appearance.</p>

<p>I am not sure if</p>

<blockquote>
  <p>How did people have the idea Linux would work better with a distribution and start the first distribution(s)?</p>
</blockquote>

<p>has a clear answer. It is clear that not everybody can build their own distribution from scratch, any more than everybody can build their own automobile.</p>
","997"
"Combining code written under different licenses (Eiffel Forum License, MIT and Apache), what are my options?","1066","","<p>So I'm new to all this licensing jazz, and I've just started work on a project I'd like to one day publish as open source.</p>

<p>I've found a couple of projects so far that have code to accomplish stuff similar to what I'd like to do, and as such I'd like to use it because it is probably more mature/tested than what I'd end up writing at first.</p>

<p>Now here is my problem, some of the code is written under the MIT license and some is written under the EFL (Eiffel Forum License) and some under the Apache license.</p>

<p>I've looked through all 3 licenses, and they seem to be functionally quite similar, differing in small ways such as copyright attribution and something about patents.</p>

<p>Can I, legally, combine code written under these, or any 3 (similar) licenses? How? I'm not sure if this is correct, but as I understand it, if all 3 licenses are GPL compatible I could then license my project as GPL. However, in this case, I think copyleft is unnecessary and not something I'd be very interested in.</p>

<p>Does public domain code combined with licensed code work the same way?</p>

<p>If so, what license can/should I then put my own project code and modifications under?</p>

<p>And third, say I did one day want to go commercial and keep my software closed-source; I completely understand that if I previously released an OS version it would always remain so and people would be able to fork it and so on, but would this triple-mixing have any effect? (I assume it depends on the terms of each license here, I'm only asking if there is something I haven't considered)</p>
","<p>The best option is to create a <code>NOTICE</code> (or perhaps <code>NOTICE.txt</code> or <code>NOTICE.md</code>) file in the root of your project code containing an introduction/summary, a list of copyright holders/project names and then all three license texts one after the other. And at the top of each source code file make sure you preserve the original copyright/license notice (optionally adding your name and the current year to it).</p>

<p>For binary distributions of the code, you must also have some way to access the license, for example in your ""about"" screen. The apache license refers to binary distributions as ""object"" code.</p>

<p>You are not required to distribute the source code at all with any of these licenses. If you only distribute binaries, not the source code, then only your binary needs to comply with the license terms.</p>

<p>If you're not happy about the license requirements, you can always email the project maintainer with your reasoning. They might give you permission to skip some of the requirements or even use a different license entirely – I've had good luck with this approach in the past.</p>

<hr>

<p>As for what you're <em>required</em> to do (note these restrictions apply to source code <em>and</em> binary distributions of your app!):</p>

<p>MIT and EFL just require that copyright notices and the license text be ""included"" in you work. You can decide for yourself how to do this, as long as you make a good faith effort that people who want to know what copyright/license applies they can find out.</p>

<p>Apache has clear instructions:</p>

<ol start=""4"">
<li><p>Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p>

<ol>
<li>You must give any other recipients of the Work or Derivative Works a copy of this License; and</li>
<li>You must cause any modified files to carry prominent notices stating that You changed the files; and</li>
<li>You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</li>
<li>If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.<br><br>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</li>
</ol></li>
</ol>
","1722"
"Am I in danger if a project component is relicensed?","1058","","<p>I am currently managing a project, which includes a library that is licensed under the MIT license. My current project is licensed under the Apache 2.0 license.</p>

<p>The maintainers of the library that I am using then relicense their project to a much stronger license, the GPL. I'm not informed of this in anyway: I took the source and included it within my project.</p>

<p>Since I am now using a library that is arguably improperly licensed, and that fails to meet the conditions of the newer GPL, I need to know a few things:</p>

<ul>
<li><p>Would I be in violation of the GPL? Since the included project had been relicensed, would the MIT license still apply?</p></li>
<li><p>Am I under any obligation to then relicense my project under the GPL, despite my copy of the project includes the MIT license? Would I have to update the license file in my copy of the project?</p></li>
</ul>
","<p>The important thing to know is that they (almost certainly (*)) cannot retroactively change the license of the version that you are using. They can change the license to new versions they release. So, if you want to keep using what you took when it was marked MIT, you are fine. You can even make a fork and invite other like-minded people to enhance and maintain that fork under the MIT license.</p>

<p>Here is the (*). If they are saying that they made a mistake in the first place, and licensed content under the MIT license that they did not have the right to license, then you and everyone else will need to make other arrangements. Since you incorporated it in your Apache work in good faith, you have a lot of room to maneuver in the timing of making those other arrangements.</p>

<p>So, are you in 'danger'? No, you are not in acute danger if you have not copied new source since they applied the new license. Might you need to take action to avoid legal exposure? You <em>might</em>, but only in the (*) case above.</p>
","1611"
"Is it possible to stop the removal/modification of my project's logo?","1025","","<p>I am working on open source tool for which I want users to not remove or change product logo. Is this possible?</p>

<p>I had originally asked my question <a href=""//stackoverflow.com/questions/35861123"" rel=""nofollow"">here at Stack Overflow</a> but it was recommended that I  ask here as well.</p>
","<p><strong>If you are the copyright holder, you are allowed to license however you wish</strong>. An example of a license you can use is the <a href=""https://en.wikipedia.org/wiki/Common_Public_Attribution_License"">Common Public Attribution License</a>, which contains this clause (paraphrased):</p>

<blockquote>
  <p>[…] the Original Developer may include […] a requirement that each time an Executable and Source Code or a Larger Work is launched or initially run […] a prominent display of the Original Developer's Attribution Information […] must occur on the graphic user interface employed by the end user to access such Covered Code […]</p>
</blockquote>

<p>So with that license, you can require that anyone using your code must display your logo if they make a program with a GUI.</p>

<p>The more interesting question is <strong>whether such licenses are open source / free software</strong>.</p>

<p>Virtually all open source licenses have an attribution requirement of some sort, most are very lenient and easy to satisfy, but there have been examples of requirements so egregious that they've challenged the idea of whether the requirement is still open source. Attribution clauses that require prominent displays of product logos have been derisively called <a href=""https://lwn.net/Articles/243841/""><strong>""badgeware""</strong></a>.</p>

<p>It arguably began with <a href=""https://en.wikipedia.org/wiki/SugarCRM"">SugarCRM</a>, who initially released their products with a license based on MPL but with a so-called ""badgeware clause"". The software displayed a ""Powered by SugarCRM"" logo on all its pages, and the license stipulated that this logo cannot be replaced or removed. This caused a significant amount of community backlash, with many arguing such a requirement wasn't free/open, but it's not clear how - there weren't any clauses in say the Free Software Definition or Open Source Definition that explicitly ruled out badgeware clauses. It could be argued both ways: either it's simply a type of attribution requirement, or badgeware is a burden excessive enough to breach freedoms to derive or to use without discrimination.</p>

<p>Subsequently, OSI essentially threw the question back at the community and approved a ""badgeware"" license, the CPAL:</p>

<blockquote>
  <p>""The APL was not a widely used license, I suspect because of its complexity. Let's give attribution requirements another chance in a simpler license. If such a licensed software does not achieve the Open Source effect, it will put the issue to rest.""</p>
</blockquote>

<p>That is, ""we'll call it open source but if nobody uses it then that's that.""</p>

<p>SugarCRM on their part also dodged the debate by releasing their software under GPL later.</p>

<p>That's where we've been left today. Whether ""badgeware"" is open source / free software is an open question. CPAL itself is OSI- and FSF-approved, but interestingly not approved by Debian. What can be said though is that <strong>such licenses are highly unpopular.</strong> Just as the <a href=""https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29"">original BSD license</a> fell out of use due to its ""advertising clause"", you may find that people will steer clear of your project if it uses a ""badgeware"" license, even if it is technically open source.</p>
","2625"
"Using GPL code in an application that is offered to a single client as source code","1022","","<p>My situation:</p>

<p>I have a continuous contract with a single client for ""IT services"".
I am developing a web application that is completely custom to their needs.
As part of the agreement the application will be installed on the client premises and used internally in their company.</p>

<p>Some key points:</p>

<ul>
<li>The client will receive the full source code</li>
<li>There is no place to ""download/buy"" this application for the public</li>
<li>It is impossible for somebody else to buy this application</li>
<li>The application is one of many delivered to the client as part of the contract. </li>
</ul>

<p>I have found a Javascript library that is dual licenced under GPL/commercial.
I would like to use this library in my web app (but not modify it in any way)</p>

<p>Can I use the GPL version of the library in the application? Or do I need to 
buy a licence?</p>
","<p>When you acquire a GPL license for this product, build upon it, make a product, and transfer it to your client, there can be two scenarios, and in neither case it is a problem.</p>

<p>In the first case, you write the software as <a href=""https://en.wikipedia.org/wiki/Work_for_hire"">work for hire</a> and transfer the copyright to your client. In that case, there was never any distribution as meant in the GPL. Effectively <em>they</em> created the software.</p>

<p>In the second case, you write the software and retain the ownership. In that case, when you distribute it to your client, you must do so under the terms of the GPL. </p>

<p>The only difference between the two scenarios is who hold the copyright. In the second case <em>you</em> are free to re-redistribute the software to others (under the terms of the GPL). In the first you are not.</p>

<p>In neither case does the GPL pose any problem. In both cases, the license requires from your client that <em>if</em> they choose to distribute the software (which they don't plan on doing), they have to do so under the GPL.</p>

<p>However, some organisations don't want to use any GPL code (they usually make an exception for Linux) because they believe there are problems with using GPL code. This is usually FUD, but something to be aware of nonetheless.</p>
","2010"
"Licence to prevent sharing a modified copy of a software?","1018","","<p>Is there any <strong>open source licence that would allow one individual to copy, modify, share the source code of the project while preventing to share a modified copy of the project?</strong> </p>

<p>I'm asking that thinking about security softwares that are closed-source because of the need of 'making money' in the business model. </p>

<p>This trick could allow one company to have an open source software including some kind of token verification or anything else that requires a payment for the use of the software. While this can sound fuzzy because one individual could easily take the source code and modify it so as to use the software free of charge, the majority of people who don't have the skills to do so would pay for it. </p>

<p>While I understand this can go against the <em>free</em> in the sense of <em>liberty</em> and <em>free of charge</em> I do really think it could be useful. </p>
","<p>No.</p>

<p>Any open source license allows anyone to share modified source code.</p>

<p>From the <a href=""http://opensource.org/osd-annotated"">annotated open source definition</a> clause 3:</p>

<blockquote>
  <p><strong>3. Derived Works</strong></p>
  
  <p>The license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.</p>
  
  <p>Rationale: The mere ability to read source isn't enough to support independent peer review and rapid evolutionary selection. For rapid evolution to happen, people need to be able to experiment with and redistribute modifications.</p>
</blockquote>
","2058"
"How can I determine if two open source licenses are compatible with each other?","1014","","<p>Given two open source projects, each with different licenses, are there metrics or resources I can use to determine if it is legitimate to copy code from one of the projects to the other?</p>
","<p>I always look at the schema drawn by David Wheeler: <a href=""http://www.dwheeler.com/essays/floss-license-slide.html"">Essay: FLOSS licenses</a></p>

<p><img src=""https://i.stack.imgur.com/k1G9Z.jpg"" alt=""enter image description here""></p>

<p>The arrows show which license you can use in the context of another license.</p>

<p>For instance: you can use software distributed as ASL 2.0 inside an LGPLv3 project and (a fortiori) inside a GPLv3 or AGPLv3 project. You can't use LGPLv3 software inside an ASL 2.0 project.</p>

<p>Just follow the arrows as a rule of thumb and double-check when in doubt.</p>
","3"
"Can I do a mass attribution if I got all the data from one location but different users?","1011","","<p>I am looking into doing a project and instead of creating my own icons, I would like to use some from <a href=""http://www.flaticon.com/"">Flaticon</a>. Most are made by different users and each one can be downloaded for free, but it requires that you credit the author.</p>

<p>Can I credit them by saying something like ""Icons provided by various Flaticon users"" or will I need to credit each person individually?</p>
","<p>Flaticon <a href=""http://support.flaticon.com/hc/en-us/articles/202798381-How-to-attribute-the-icons-to-their-authors"">requires you to attribute each author</a>:</p>

<blockquote>
  <p>In order to use an icon you must attribute it to it's <em>[sic]</em> author, so we will be able to continue creating new graphic resources every day.</p>
  
  <blockquote>
    <p>Icon made by [author link] from www.flaticon.com<br>
    E.g.: Icon made by Freepik from www.flaticon.com </p>
  </blockquote>
</blockquote>

<p><strong>From a legal perspective:</strong> The icons are under copyright by their respective creators; you cannot legally use them without permission. You can't have permission unless you follow the rules the authors have laid down for reuse of their work.</p>

<p><strong>From an ethical perspective:</strong> Attribution is not a punishment, or merely a way for you to admit that you didn't create 100% of the visuals in your project. It is a mechanism to <em>give credit</em> to the authors who created the work you're using. The authors generously let you use their work for free; they only ask that their names and site links be included.</p>

<p>Flaticon is a repository of work from various artists, and saying <em>where</em> you found an artist's work isn't the same as attribution. By saying ""Icons provided by various Flaticon users,"" you are not attributing the authors, but giving a hint about where a user might be able to hunt down authorship information. This is about as useful as (or perhaps even less useful than) simply putting a notice in your project like, ""<em>I found some of these icons on the Internet; if you put them into Google Reverse Image Search you might be able to find out who made them,</em>"" and calling that sufficient attribution.</p>

<p>Fortunately, even if your attribution list is very long, Flaticon allows you place your attributions very unobtrusively. Their suggestions include:</p>

<blockquote>
  <p><strong>For websites:</strong><br>
  Insert the attribution on the page of the icon (for example in the page footer) or on the imprint page.</p>
  
  <p><strong>For printing:</strong><br>
  Paste this attribution on the final work so the authorship is known (for instance, in the acknowledgements chapter of a book)</p>
  
  <p><strong>For app's:</strong><br>
  Place the attribution on the credits/description page of the application.</p>
</blockquote>

<p>In all cases, you are allowed to place all of your attributions in an appendix, rather than directly alongside the image.</p>

<p>If attributions are for some reason too onerous for you, and you would rather pay money than deal with attributions, you can <a href=""http://support.flaticon.com/hc/en-us/articles/202798201-How-can-I-use-Flaticon-s-resources-without-attribution-"">pay for a Flaticon subscription plan</a> which allows you to use most Flaticon resources without attribution. (Resources licensed only under Creative Commons appear not to be covered by the for-pay plan, which appears to grant rights to works under the Flaticon Basic License.)</p>
","2019"
"How to add a licensed piece of code to my own repository? (Brainfuck)","1007","","<p>For example, I'm building <a href=""https://github.com/Wysaard/fucked-up"">this Brainfuck interpreter</a>. I want to add some people's programs as test cases. For example <a href=""https://github.com/Rsgm/fizzbuzz"">this program</a>.</p>

<p>The program I want to add to my repository is MIT licensed in this case, but if possible I'd like to get an answer not specific to this license. My question is basically: /what is the conventional and correct way to make note of his license such that I can just take the file and put it in my repo? I know his license allows for it but I'm not sure what I should do. (I could copy his file, but what would be 'correct' way to note to which files it applies?)</p>

<p>An extra difficulty here is that it concerns brainfuck code, in which there are no normal comments. So I can't just take the license and put it at the top of the copied file either, which is what I would do otherwise.</p>
","<p>One solution is to include the license files and mention them in comments:</p>

<pre><code>This code is licensed under the MIT License
&lt;code here&gt;
</code></pre>

<p>Another brainfuck-specific solution is to include the license terms inside of a loop at the beginning of the program (which will not execute, because the value at the start of the tape is 0, so the loop will be skipped):</p>

<pre><code>[This code is licensed under the MIT License. blah blah blah license terms, blah blah blah more license terms.]
&lt;code here&gt;
</code></pre>

<p>Alternatively, you can use an ""umbrella"" license file, which states the license(s) that each file is/are licensed under (assuming you have a directory in your repo containing all of the relevant licenses):</p>

<pre><code>foo.bf and bar.bf are licensed under the [MIT License](Licenses/MIT).
baz.bf is licensed under the [Apache License](Licenses/Apache).
</code></pre>

<p>Finally, because you are using Git, you can use a <a href=""https://git-scm.com/docs/git-submodule"">submodule</a> in your repository pointing towards the other repository, with its own licensing terms.</p>

<p>All of this is assuming that the licenses are compatible, of course.</p>
","4326"
"How can I know how much of a change to make in each of my pull requests?","1001","","<p>When contributing to an open source project that uses <a href=""https://opensource.stackexchange.com/q/352/168"">pull requests</a> exclusively for contributions, I'm left wondering when a good time is for me to send a pull request.</p>

<p>I'm especially in doubt when it come to implementing rather major features, should I implement the entire feature on my fork and only push <a href=""https://opensource.stackexchange.com/q/993/168"">upstream</a> when it works? My worry here is that it might be a lot of effort for them to check if my work is correct when they have to review a huge amount of code.</p>

<p>On the other end of the spectrum, I'm afraid that sending a ton of tiny pull requests might get on people's nerves as well.</p>

<p><strong>What should I keep in mind when trying to figure out how quickly I should send a pull request?</strong></p>

<p><sub>This will obviously vary from project to project, I'd like to know what is the general preference and what the variations tend to depend on. <strong>This might also help me set standards if I start my own project.</strong></sub></p>
","<p>Pull requests should be easy to review and integrate. Big pull requests can be easy if done properly, and small pull requests can be extremely tricky.</p>

<p>If your change is going to be big, or if it has a huge impact (e.g. breaks backwards compatibility), you should discuss what you are going to do with the maintainers first.
It may turn out that some of them are already working on an alternative solution, or if the upcoming changes are about to make your original idea inapplicable and it will need modifications, for instance.
If the design and implementation details of your feature/fix are agreed upon, it's usually easy to review and merge. Also, it allows other people to collaborate with you on it since they also know what is going on.</p>

<p>On the other hand, suppose I send you a one-line fix that uses obscure syntax and I don't supply any explanation of what precisely it does. It's probably easier to dismiss than to find out if it's worth merging.</p>

<p>I think one pull request should correspond exactly to one logical change though, no matter how big. Several unrelated changes such as fixes for totally different bugs or several features unrelated to one another is a bad idea, even if the pull request is small in terms of size.</p>
","1104"
"Remove BSD LICENSE file while importing code into GPL project","996","","<p>Can LICENSE file be removed from 3rd party BSD project that is merged with GPLed code? There are license headers in each file, but files will be modified, so BSD license in them will no longer be valid.</p>
","<p>The short answer is no. You cannot remove a BSD license notice, otherwise you are no longer licensed per the BSD (many variants) that all share the essential requirement to retain the copyright and license/notice texts in source and/or binaries.</p>

<p>If you look at a <a href=""https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29"" rel=""nofollow noreferrer"">BSD variant text from wikipedia</a>:</p>

<pre><code>1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
</code></pre>

<p>When you combine BSD-licensed code with GPL-licensed code, you could possibly assert a GPL license for your modifications, but you cannot remove the LICENSE. And when you use BSD-licensed code in conjunction with GPL-licensed code, the source code redistribution requirements of the GPL would apply. But you could also still use the BSD-licensed code alone without the copyleft requirements.</p>

<p>I personally prefer to keep things clean and keep the BSD parts under BSD and the GPL parts under GPL.</p>

<p>You also asked:</p>

<blockquote>
  <p>The license notice still stays in every file, so the copyright with conditions is retained, but the main license for the project is now GPL, so the LICENSE file was removed.
  [...] I will need a separate answer how to properly merge those LICENSE files. </p>
</blockquote>

<p>There are many ways you could consider to provide a efficient notification to my users. Some of these include:</p>

<ul>
<li>You could create a top level LICENSE or COPYING file that would explain at a high level the various licenses in use, and keep separate files for each licenses, either in a top level dir or a doc or licenses dir, and point to these in my top level file. </li>
<li>You could merge it all in one big file (which could become somewhat hard to read and grok)</li>
<li>You could use a more structured approach like in Debian copyright files, or my own <a href=""https://github.com/nexB/attributecode"" rel=""nofollow noreferrer"">https://github.com/nexB/attributecode</a> tool using a structured yaml or yaml-like description of the various licenses used.</li>
</ul>

<p><strong>Update</strong></p>

<blockquote>
  <p>Following onto the question of ""merging"" (came here via this question ): In general, if the Copyright and license text is in every individual source file, can these be deleted and then merged into a single, separate LICENSE.txt file? Here's an example. It seems even disingenuous/misleading to leave a ""Copyright Google"" header from demo code on my customized (and perhaps poorly coded!) project, started from their tutorial.</p>
</blockquote>

<p>Well if this customized code is derived from copyrighted code, whether you feel it is ""disingenuous/misleading to leave a Copyright Google header""  does not matter. This is this the right thing to do, period.</p>
","4425"
"License for code snippets?","989","","<p>I share small snippets of code with friends, and would like to post them online for others to use.</p>

<p>I'm not sure of the best license?</p>

<p>I was thinking MIT, but it includes this clause:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</p>
</blockquote>

<p>These code snippets are not very big, not enough to justify adding an entire license screen. And there is no ""read me"" or ""license"" text file distributed along with a mobile app.</p>

<p>I'm not going to change the user interface of my app, just so I can turn three lines of ugly code into one line of clean code.</p>

<p>Is there an open source license that does not require the license to be bundled with binary copies of the app?</p>

<p>Or perhaps I should use MIT and delete that one clause?</p>
","<p>It looks like you want a permissive license. Perhaps, you could use the <a href=""http://unlicense.org"">unlicense</a>?</p>

<p>From their site:</p>

<blockquote>
  <p>The Unlicense is a template for disclaiming copyright monopoly interest in software you've written; in other words, it is a template for dedicating your software to the public domain. It combines a copyright waiver patterned after the very successful public domain SQLite project with the no-warranty statement from the widely-used MIT/X11 license.</p>
</blockquote>

<p>As such, you would be able to license your code, placing little to no restrictions on it.</p>
","889"
"What do I do if my contributors are split into two camps?","985","","<blockquote>
  <p>Note: this is  a hypothetical situation, not one I have actually encountered. (And one I hope I won't encounter)</p>
</blockquote>

<p>I started a small open source project and have gathered a few loyal committers. We don't have much in the way of a hierarchical structure and make our decisions by way of consensus. This has not led to any significant problems.</p>

<p>Recently, the core contributors have split based on differing opinions about a rather central part of the project. (Which relates mainly to how users interact with the product on a very fundamental level.) A compromise seems unlikely and I fear the project will take a serious blow if it loses almost half of its contributors.</p>

<p>How can I limit the damage this disagreement will deal to the project and how can I prevent something like this from happening in the future?</p>

<p><sub>For the sake of completeness, here are two <a href=""https://opensource.stackexchange.com/q/577/168"">related</a> <a href=""https://opensource.stackexchange.com/q/395/168"">questions</a> (separate links)</sub></p>
","<p>Been there, done that.</p>

<h2>Why does it happen?</h2>

<p>In my experience, a split due to creative differences usually happens because different people have a different idea of what the project goal actually is, but nobody is aware of that. As soon as a contributor realizes that someone else's vision is different from theirs, arguments and power struggle will start, which can quickly become personal and tear a project apart when not moderated properly.</p>

<h2>How to prevent it?</h2>

<p>The best way to prevent this situation early on is to communicate your creative vision of the project early, clearly and often. Every project should have some kind of official document which outlines the goals. Make sure every contributor knows and understands it, so everyone is on the same page and nobody gets any misconceptions about where you are heading. Make clear that anyone who wants the project to go somewhere else, should fork from the start and not get involved in the mainline in the first place.</p>

<p>Should there be any disagreements about aspects of the project direction which were <em>not</em> set in stone beforehand, it is important to make a binding decision <strong>before</strong> things turn ugly. Having a clear hierarchy or well-defined decision making process is fundamental here. Without a binding process to make a decision - whether autocratic or democratic - people have no other choice but to ""reach consensus"" by either talking down the opposition through countless hours of filibusting in your communication channels (time they could rather spend working) or driving them out of the project through bullying and intrigue (a lose-lose situation for everyone involved).</p>

<p>Unfortunately, when the conflict is already under way, it is likely too late to establish a proper decision-making process. Such a process only works when everyone supports it. But when you try to establish it now, everyone will perceive it in the context of the current conflict and their support for it will depend on whether this process would decide the current matter in their favor or not. Opening up this new battlefield now will likely deepen the trench instead of bridging it.</p>

<h2>The split still happened. How to deal with it?</h2>

<p>When the project is under a copyleft license (or when under a permissive license the other group is committed to keeping), you can still merge any of their commits into your codebase or vice versa, so the manpower is not completely lost to your project. But a split is still a considerable blow to the project because organisation structures and infrastructure need to be duplicated, coordination between the forks is impaired and their commits need to be carefully reviewed for relevance and merge conflicts.</p>
","915"
"Borrowing ideas rather than code from open source projects","980","","<p>I work in a field where people (competitors?) reverse engineer things, and for this reason, there are many implementations around, all of which are open source. Sometimes in order to save time, I look up if someone figured something out already, and I read their code. Then I see ""aha, this format stores image data as JPEG xored with <code>0xFF</code>"" (this is just an example).</p>

<p><strong>Once gained, this knowledge cannot be lost.</strong> So I proceed to code this in my program in my own way, in my own language. Then I credit the authors in my LICENSE file, even if the repository didn't use any license (= the code was copyrighted).</p>

<p>I think it's fair use, but is it legally okay?</p>

<p>Note I'm not talking about legal aspects of reverse engineering, since that's another subject altogether.</p>
","<p>If you have not copied the code directly, this sort of thing is usually OK, and exempt from copyright laws. Specifically, mathematical formulae, ideas, inventions, recipes and facts cannot be protected by copyright. So just the knowledge that a format is handled in a particular way is not a copyright issue. Clever shortcuts and time-saving algorithms are not protected either. You don't even need to give credit, but if you learnt a lot from a particular source, it seems polite to. Don't use the <em>license</em> file to give credit though, as it is not a licensing issue - make a separate <em>credits</em> or <em>acknowledgements</em> file instead.</p>

<p>The same might apply if you learn an idea from a published scientific paper, or someone's coding blog or tutorial. Sometimes the code in these resources has no clear license, so you should not use it directly, but re-using the concepts is fine.</p>

<p>However, there are ways that such things can be protected, and you could be liable for if you publish working code that includes patented material or trademarks for example. Some software development fields seem to have more problems with patents than others. Compression algorithms and compressed storage formats come to mind as one problem area. Patent-protected algorithms or formats are often not well signposted in source code, and the case law for software patents is hard to get to grips with. Patents can apply to whole algorithms, to formats or to specific optimisations of either. Having said this, the same problems can occur even if you re-invent an idea yourself from scratch, or reverse-engineer a format without the help of someone else's code as a reference.</p>
","1729"
"Does open source qualify as being part of the public domain?","970","","<p>According to Google, Open Source is...</p>

<blockquote>
  <p>denoting software for which the original source code is made freely available and may be redistributed and modified.</p>
</blockquote>

<p>It seems to be that the product seems to be available without restrictions to the public, as you can redistribute and modify it at will. It sounds like open source is like throwing something into the public domain?</p>

<p>So is there a difference between works classified as open source, and works in the public domain? What's the difference between the two?</p>
","<p>In a copyright context, <a href=""https://en.wikipedia.org/wiki/Public_domain""><strong><em>public domain</em></strong></a> is a term which means the set of creative works not under copyright, because the work's copyright has either expired, never existed (such as U.S. government works), or been forfeited<sup>1</sup>. Generally, no special restrictions apply to the reuse of public domain works, and they can be freely modified and redistributed without limitation.</p>

<p><strong><em>Open source software</em></strong>, as defined by the Open Source Initiative's <a href=""http://opensource.org/osd-annotated"">Open Source Definition</a>, means software whose source code is available and can be freely modified and distributed. Open source software is typically still under copyright (i.e., typically <em>not</em> in the public domain), but the author grants rights to users via a copyright license.</p>

<p>Open source software and public domain software are by no means the same thing, but there is some overlap. Open source software <em>can</em> be in the public domain, and public domain software <em>can</em> satisfy the open source definition.</p>

<p><img src=""https://i.stack.imgur.com/UwnNO.png"" alt=""Venn diagram showing intersection of Open Source and Public Domain""></p>

<p>The primary differences in definitions are:</p>

<ul>
<li><p><strong>Public domain software might not include source code.</strong> Since public domain software automatically allows redistribution and modification, it satisfies <em>almost</em> all of the open source criteria automatically, but not quite. It is notably missing the requirement that the program's source code be publicly available. It is therefore possible to have a piece of software in public domain that fails to satisfy the open source definition because its corresponding source code is unavailable.</p></li>
<li><p><strong>Open source software can grant a more limited set of rights than public domain.</strong> Like public domain works, open source software grants the right to modify and redistribute the work. However, an open source license may impose other restrictions that do not exist on public domain works. For example, the GNU GPL requires <a href=""https://en.wikipedia.org/wiki/Copyleft""><em>copyleft</em></a>: any derived work that uses GPL-licensed material may only be distributed under the terms of the GPL. Such a restriction does not violate the open source definition, but it is certainly far stricter than the public domain.</p></li>
<li><p><strong>Open source software can be released under different licenses by the author.</strong> The author of a copyrighted open source program can <a href=""https://en.wikipedia.org/wiki/Multi-licensing"">issue multiple licenses</a> on the work. A common case of this is when an author licenses a program under a copyleft license, but will also issue individual proprietary licenses for a fee. Users can either get the software free of charge under copyleft rules, or pay money to get the software under another license. (See OSS Watch's article ""<a href=""http://oss-watch.ac.uk/resources/duallicence2"">Dual-Licensing as a Business Model</a>"".) Such a scheme is impossible with public domain software, because it relies on the author licensing the work's copyright in different ways. Since public domain software has no copyright, there is nothing to license.</p></li>
<li><p><strong>Open source licenses <em>may</em> grant patent rights.</strong> Public domain software does not have any <em>copyright</em> on it, but its reuse may still be restricted by <a href=""https://en.wikipedia.org/wiki/Patent""><em>patents</em></a>, if it contains an implementation of a patented mechanism. If you redistributed such patent-encumbered public domain software, you would not be liable for copyright infringement but may be liable for patent infringement. Some open source licenses, however, expressly grant you patent rights. For example, an author who releases software under the <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache Public License</a> or <a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"">GNU GPL (version 3)</a> expressly grants recipients the right to use any of the authors' patents that apply to the software, so there is no risk of violating the author's patents.<sup>2</sup> <em>Not all open source licenses do this</em>, but it is an option for open source software under a license, whereas it is not an option for license-free non-copyrighted public domain software.</p></li>
</ul>

<hr>

<p><sub><sup>1</sup> Note that it is unclear if premature dedication to the public domain is truly possible in most jurisdictions.</sub></p>

<p><sub><sup>2</sup> If the author illegally used <em>someone else's</em> patented mechanism without permission in the software, a downstream redistributor could be legally liable for that infringement.</sub></p>
","66"
"Proprietary software using GPL modules","946","","<p>This question is bases on:
<a href=""https://opensource.stackexchange.com/questions/1446/why-doesnt-this-gpl-loophole-work?newreg=b29b58436f7543248dbd2e163275f032"">Why doesn&#39;t this GPL loophole work?</a></p>

<p>If a program uses a GPL derived component, does said program also have to be GPL?</p>

<p>For example:
If a game uses a music player that was derived from GPL licenced music player. Does the game also have to comply with GPL? </p>

<p>In the linked question the end package is derived from both sources but in second version the GPL part is only used for its functionality.</p>
","<p>According to the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow"">GPL FAQ</a>, it depends on how tightly the programs are coupled.</p>

<ul>
<li><strong>Tight coupling:</strong> This is what happens in the case of your game, as you almost certainly included the GPL music player within your binary or as a dynamically linked library. In those cases your software must be GPL, too.</li>
<li><strong>Loose coupling:</strong> If you have a generic program that happens to execute the music player as a separate program, there's no tight coupling going on. The GPL doesn't affect your code. You can choose any license you want, including a proprietary license. <strong>However,</strong> in that case you might want to add support for different music players, just to be sure. And you should refrain from shipping your application with the music player as a combined package, as that may give a wrong impression. On the other hand, a mere <strong>aggregation</strong> of multiple packages (as in software distributions) is fine.</li>
</ul>

<p>Note that <strong>nobody forces you to distribute your application</strong>. If you don't distribute your application at all, not even in binary form, the license question disappears: There is nobody you could license your application to. The GPL and all other FLOSS licenses grant you the right of private modifications. The virality of copyleft licenses only kicks in as soon as you distribute your code.</p>

<p>Also note that tight/loose coupling is mostly a <strong>social term</strong> and not so much a technical term. Usually, linking to a GPL library counts as tight coupling, while executing a separate GPL programm counts as loose coupling. However, this is not an absolute. The line blurs as soon as you start playing nasty games, and people will recognize that.</p>

<p>For example, you could write a command-line wrapper around a GPL library, make only that wrapper GPL, and communicate with that wrapper using an application-specific RPC protocol. Even though your application starts the GPL code as a separate program, you would have a hard time explaining to FSF or a judge in a court that this is loose coupling. It would still count as tight coupling.</p>
","1461"
"Own LGPL code in proprietorial project","929","","<p>I've written a library that I use in closed-source project. After a short discuss with my boss we have decided that this library can be useful for many others and we made this library open source under LGPL v3.</p>

<p>Can I still use my own code of this library in our closed-source project? Can I change it without making changes public under LGPL?</p>

<p>The idea is that I've made the general code of the library public (and it is working as-is), but some specific and confidential features like encryption algorithm I want to remain in our closed repo.</p>

<p>So I am a little it confused: on one hand this code is under LGPL now and every modifications must be public under LGPL. On the other hand - I am the author of this code and I want to use my own code without making it all public.</p>

<p>It is not bad projecting of module. Let's say I want to delete 'encode();' and 'decode();' lines from public repo and keep them in out private one.</p>

<p>And I want to synchronize them. Can I use code commited by others?</p>

<p>Or it is worth changing licence to BSD just not to have this headache?</p>
","<p>As the owner of the copyright, you can do what you want with your code.</p>

<p>It is <strong>others</strong> who are bound by the licence(s) under which you distribute the code, because they accept those licences when they receive the code (strictly, when they do something for which they have no permission if they don't accept the licence).  You yourself can do what you like with your code; issue it under many licences, or none; sell it or give it away, or do both.  It's up to you (or, if your employer owns the copyright (as is usual), up to them).</p>

<p>If, however, you want to incorporate code contributed by others into your codebase, what you can do with the resulting product will depend on what license the <strong>other</strong> contributors decide to use.  If you have distributed the code under only one licence, then usage of their work will likely be on those terms, and you must honour them in turn when it comes to the codebase that incorporates their changes.  If you have distributed under many, then you will need to clarify with contributors, either through an explicit licence, or through a copyright assignment.</p>
","2673"
"Derivatives and Forks... Is there a difference?","921","","<p>The terms <em>fork</em> and <em>derivative</em> have really been bugging me as I always seem to imply that their different, but then in many ways the same. You hear the term fork many times on platforms such as Github, but then in many legal documents, you may hear the word derivative. </p>

<p>As such, I've got a few questions:</p>

<ul>
<li>What's the difference? Is there a difference at all?</li>
<li>Why do we still have the terms? Can't we just use a single term? In what contexts do we use the respective terms?</li>
<li>Bonus: When and where did the terms start to appear?</li>
</ul>
","<blockquote>
  <p>What's the difference? Is there a difference at all?</p>
</blockquote>

<p>The obvious difference is that ""derivative (work)"" is a legal term, and ""fork"" is a software term.</p>

<p>For example, the musical and motion picture ""West Side Story"" (by Jerome Robbins, Robert Wise, Arthur Laurents and Ernest Lehman) is a derivative work of the stage play ""Romeo and Juliet"" (by William Shakespeare), which is a derivative work of the poem ""The Tragical History of Romeus and Juliet"" (by Arthur Brooke).  I doubt you'll hear anyone (except perhaps die-hard hackers) say that Shakespeare ""forked"" Brooke's poem.</p>

<p>What is the relationship between the software term and the legal term?</p>

<p>A ""fork"" of a software project may simply be an alternate branch in a Source Control System (SCS) where code is held under joint copyright by a community of cooperating programmers.  In that case, a fork is not a derivative.</p>

<p>A derivative may also result from some sort of <em>transformation</em> of the original that is different enough to result in a <em>new</em> copyrightable work. For instance, when the author of a novel writes the screenplay for a motion picture adaptation of his novel, then the screenplay is a derivative work of the novel, even if both are created by the same person.</p>

<p>However, if somebody takes software away from one community, and sets up a <em>separate</em> community and proceed to develop this separate version of the software (a ""schism in the community""), then creating a ""fork"" also means creating a  ""derivative work"" in the <em>legal</em> sense - and this situation is probably  the context of this question, as it applies specifically to free and open source software, so I'll discuss it in a bit more detail:</p>

<p>We typically use the legal term ""derivative work"" instead of the software term ""fork"" when the legality of creating a fork of a software project is disputed: Since creating a derivative work is a <em>reserved right</em>, creating a derivative work (including, but limited to, a ""fork"") requires permission from the copyright holder.  If there is no permission, this is illegal.</p>

<p>So there exists ""forks"" (inside a SCS) that are not derivative works.  There <em>also</em> exists derivative software (i.e. software that a court of law says is a derivative work), <em>without</em> being a fork.</p>

<p>One example of the latter is the 9th circuit ruling on <a href=""http://cyber.law.harvard.edu/people/tfisher/IP/1998%20Micro%20Star%20Abridged.pdf"">Micro Star v. FormGen Inc.</a>, where the court decided that sharing a specific <em>file format</em> was sufficient to make a CD-ROM with fan generated ""levels"" for a video game a derivative work of said game.</p>

<blockquote>
  <p>Why do we still have the terms? Can't we just use a single term? </p>
</blockquote>

<p>The legal term ""derivative work"" (and its close sibling ""adaptation"") tends to be used when one needs to decide on whether a specific derivative is <em>legal</em>.  In particular, when the disputed derivative is <em>not</em> a fork (as in the case ""Micro Star v. FormGen Inc."", it is really helpful to use legal word ""derivative"" to explain the situation, as the word ""fork"" may not even <em>apply</em> to the specific situation at hand.</p>

<p>As I've argued above, a ""fork"" is not <em>always</em> a ""derivative"" and vice versa, so having a single term for both does not make much sense.</p>

<blockquote>
  <p>Bonus: When and where did the terms start to appear?</p>
</blockquote>

<p>Use of ""fork"" <em>without</em> creating a derivative (in the context if having separate branches in a Source Control System where software is held in joint copyright is AFAIK as old as source control).</p>

<p>In the context of ""forking"" to create a derivative, <a href=""https://en.wikipedia.org/wiki/Fork_%28software_development%29"">Wikipedia</a> says:</p>

<blockquote>
  <p>""Fork"" is not known to have been used in the sense of a community schism during the origins of Lucid Emacs (now XEmacs) (1991) or the BSDs (1993–1994); Russ Nelson used the term ""shattering"" for this sort of fork in 1993, attributing it to John Gilmore. However, ""fork"" was in use in the present sense by 1995 to describe the XEmacs split, and was an understood usage in the GNU Project by 1996.</p>
</blockquote>

<p>So ""fork"" seems to have <em>first</em> been applied to a community split (where somebody <em>else</em> took the software and created a derivative around 1994-1995.</p>

<p>The term ""derivative work"" is a very old legal term, but I've not been able to pin down exactly <em>when</em> it first appeared in legal literature.  There is no trace of it in Statute of Anne (1710), which deals only with verbatim copies. However, in the USA, it surfaces in the exclusive-rights provision of the Copyright Act of 1909.</p>

<p>In the context of free software, I believe the first mention of the term ""derivative"" is in the <a href=""http://www.gnu.org/licenses/old-licenses/gpl-1.0.en.html"">GPLv1</a>.  The chief author of the GPL was Eben Moglen (professor law and legal history at Columbia University and chief author of the GPL) and it seems prudent of him to choose a well-established legal term to describe a transformed copy of a program to make sure the GPL stood up in court.</p>
","1314"
"If I include some GPL code in my project, can I release it as BSD?","918","","<p>I have scientific software that I would like to release under the BSD 3-clause licence, but it includes some old code that was released under GPL.</p>

<p>Can I still package it all and release as BSD?</p>
","<p>Not with the license as it is. You will need to contact all the licensors of the GPL code, and request that they release it to you in a license that is compatible with the BSD license.</p>

<p>Alternatively, you can release your code as GPL too.</p>
","39"
"How much is ""substantial portion"" in MIT licence?","915","","<p><a href=""https://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">MIT license</a> says:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</p>
</blockquote>

<p>How much is that <strong>substantial portion</strong>?</p>

<p>For example: is using half of some helper function defined in that software <strong>substantial</strong> or not?</p>
","<p><strong>Substantial portion</strong> is a legal term. Its exact definition will depend on jurisdiction, be subject to interpretation and possibly including subjective analyses. When in doubt, ask a lawyer. To err on the safe side, assume that it applies to <strong>any portion, no matter the size</strong>.</p>

<p>To give you a random example, here's what Wikipedia has to say for <a href=""https://en.wikipedia.org/wiki/Substantial_part_(Canadian_copyright_law)"">Canadian copyright law</a> (neither I, nor Wikipedia, are lawyers and cannot give legal advice, obviously):</p>

<blockquote>
  <p><strong>What is a Substantial Part?</strong></p>
  
  <p>The Copyright Act does not require that an entire work be copied in order to find that a copyright holder’s rights have been infringed. Copying a substantial part of the work will be sufficiently actionable. In determining whether a substantial part of a work has been copied, the court must exclude from consideration any part of the work not properly the subject matter of copyright under s.3 of the Act.[6] The analysis is largely fact-driven, and the courts will consider both qualitative and quantitative matters. Some of the matters that have been considered include:</p>
  
  <p>a) how central was the element taken to the first work?</p>
  
  <p>b) do the selected parts constitute an essential characteristic of the work?</p>
  
  <p>c) would people who see the copy recognize the source?</p>
  
  <p>d) was the part taken used in a manner that would create a substitute to the first work and thereby jeopardize its economic exploitation? [economic damages can be considered]</p>
</blockquote>
","2188"
"Are all docker images free (i.e. GPL)?","912","","<p>Looking at the GPLv2 FAQ. <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLInProprietarySystem"" rel=""noreferrer"">I'd like to incorporate GPL-covered software in my proprietary system. Can I do this?</a>.</p>

<p>Since, any typical Linux distribution base image contains a variety of GPL-licensed libraries and utilities. And, it is packaged inside a docker image with other code/software in inseparable format. Does this mean that all docker images are free to redistribute (i.e. under the GPLv2 licensing rules)?</p>

<p>And, there is no way one can enforce proprietary licensing on them (i.e. the docker images?) I.e. there is no way to distribute proprietary software in Docker images!?!?</p>
","<p>Linux (the Kernel) uses the GPL 2.0 with an <a href=""https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/COPYING?id=refs/tags/v4.9-rc2"">extra statement</a>:</p>

<blockquote>
  <p>NOTE! This copyright does <em>not</em> cover user programs that use kernel
   services by normal system calls - this is merely considered normal use
   of the kernel, and does <em>not</em> fall under the heading of ""derived work"".
   Also note that the GPL below is copyrighted by the Free Software
   Foundation, but the instance of code that it refers to (the Linux
   kernel) is copyrighted by me and others who actually wrote it.</p>
  
  <p>Also note that the only valid version of the GPL as far as the kernel
   is concerned is <em>this</em> particular version of the license (ie v2, not
   v2.2 or v3.x or whatever), unless explicitly otherwise stated.</p>
</blockquote>

<p>Beyond this the userland (including the important commonly-used C libraries) with which a userspace program interacts primarily and directly is either LGPL-licensed (or BSD/MIT licensed with some alternative C libraries).</p>

<p>A full Linux image (be it a VM or container image) or a full Linux distro may contain a complex combination of code under the GPL, LGPL and many other licenses.</p>

<p>I can for instance add my proprietary programs to run in userspace to that image and redistribute it. I need to comply with the obligations of each and every licenses. A recipient may have certain rights with regards to the open source and free software code in that image but may not have right to my proprietary code.</p>

<p>So <code>Does this mean that all docker images are free to redistribute (i.e. under the GPLv2 licensing rules)?</code></p>

<p>No. Some parts may be redistributable and some may not.</p>

<p><code>And, there is no way one can enforce commercial licensing on them (i.e. the docker images?) I.e. there is no way to distribute commercial software in Docker images!?!?</code></p>

<p>Yes there is a way. Including proprietary and GPL-licensed programs on the same filesystem or archive is typically <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"">considered</a> ""side by side"" redistribution or ""mere aggregation"":</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
</blockquote>
","4689"
"Is it possible to close an open source project?","912","","<p>If yes, what are the consequences of Open Source projects being discontinued, if it's done by a large organization?</p>

<p>As per <a href=""https://opensource.stackexchange.com/questions/33/how-to-relicense-a-project"">this post</a>,
the older version of project can still be used under the same old open source license. </p>

<p>Is there a way to make it so that the project can't be used under the old license?</p>
","<p>Much would depend on the initial license chosen when creating the OS project. </p>

<p>If the OSP was originally published under a copyleft license such as GPL, then the answer is clearly no. They can not continue development under a more restrictive license without violating the terms of the original license.</p>

<p>A permissive license, such as Apache, allows the original publisher to effectively fork the project internally and abandon the open source version, making no more commits.</p>

<p>However, if the project was ever used (or even downloaded) by someone, even deleting the 'authorative' source repository will not stop it reappearing under a different guise.</p>
","272"
"Does Open Source Software need an EULA to protect the developer?","868","","<p>From <a href=""https://en.wikipedia.org/wiki/End-user_license_agreement#Comparison_with_free_software_licenses"" rel=""nofollow noreferrer"">Wikipedia</a>, it states that EULA is different from OSSL</p>

<blockquote>
  <p>Unlike EULAs, free software licenses do not work as contractual extensions to existing legislation. No agreement between parties is ever held, because a copyright license is simply a declaration of permissions on something that otherwise would be disallowed by default under copyright law.</p>
</blockquote>

<p>I am a bit confused about the Open Source Software License (OSSL) and EULA. In my understanding, Open Source Software License seems to be covering a wide area of aspects, including both users and developers, as mentioned in the <a href=""https://opensource.org/licenses/MITULA%20for%20Open%20Source%20Software"" rel=""nofollow noreferrer"">MIT license</a>:</p>

<blockquote>
  <p>...without limitation the rights to <strong>use</strong>, copy, <strong>modify</strong>, merge, publish, distribute, sublicense, and/or sell copies of the Software, ...</p>
</blockquote>

<p>while EULA seems to be applying only to the end-user who is going to use the software. So the idea of EULA is more or less already included in Open Source License. Am I right?</p>

<p>For a project that is licensed under MIT license (or possibly other Open Source Software Licenses), Do I still need to provide an End-user License Agreement when distributing the software to protect myself? Is there any contradiction between them? Or asking the user to understand and agree to the MIT license before installation would be sufficient to avoid any liability issues?</p>
","<h1>Free software and open source licenses</h1>

<p>Free software and open source licenses seek to grant additional rights, beyond those granted by copyright law. Strictly speaking, such licenses cover the acts of distributing and modifying software, not directly the act of using it. Copyright law controls who can distribute and modify software; if you obtain software from a legal distributor, you may use it even if you don't accept the license under which it is distributed. This is made explicit in the <a href=""http://www.gnu.org/licenses/gpl-3.0.txt"" rel=""noreferrer"">GPL</a>, section 9:</p>

<blockquote>
  <ol start=""9"">
  <li><p><strong>Acceptance Not Required for Having Copies.</strong></p>
  
  <p>You are not required to accept this License in order to receive or
  run a copy of the Program.  Ancillary propagation of a covered work
  occurring solely as a consequence of using peer-to-peer transmission
  to receive a copy likewise does not require acceptance.  However,
  nothing other than this License grants you permission to propagate or
  modify any covered work.  These actions infringe copyright if you do
  not accept this License.  Therefore, by modifying or propagating a
  covered work, you indicate your acceptance of this License to do so.</p></li>
  </ol>
</blockquote>

<p>Note the trigger: you accept the license by modifying or propagating the software, not by using it.</p>

<p>Some licenses, such as the MIT license you quote, explicitly grant the right to use software, but this isn't necessary — you already have that right, assuming you obtained the software legally. The <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""noreferrer"">free software definition</a> itself didn't mention it initially, but it was later added as freedom 0; having it explicitly mentioned in the definition helps clarify that licenses may not limit the uses of software.</p>

<p>Free software licenses also protect the developers by limiting the provided warranty; <em>e.g.</em> in the MIT license:</p>

<blockquote>
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>

<h1>End-user license agreements</h1>

<p>End-user license agreements generally seek to remove rights granted by copyright law, and to re-define the ownership of software. They are triggered at the latest by running the software, but more typically they are triggered during installation or even by the act of opening the physical container containing the installation media (this was common for software on floppy disks; the disks were shipped in envelopes, and tearing the envelopes open was taken as signifying acceptance of the EULA). There is some debate as to the validity of click-through licenses (or tear-open licenses), but that's beyond the scope of this answer.</p>

<p>One common feature of EULAs is to state that software is licensed, not owned, so the user doesn't own a copy of the software but only a license to use it. (This removes the rights granted by copyright law to legitimate owners of an artifact.) They also generally forbid modification and distribution.</p>

<p>Hopefully this clarifies the differences. You don't need a EULA to protect yourself as a developer; if you're particularly worried about some types of protection, you can look at the different open source licenses in existence and see the kinds of protection they grant, in particular with regards to patents. In fact, if you do try to enforce a EULA, you'll find that most (if not all) authorities in the matter would consider your software to be non-free (not open source), regardless of the license under which it is distributed: your EULA is only enforceable if you deny the right to remove it, which means restricting the types of modifications that can be made to your software...</p>
","2867"
"GPL V3 with OpenSSL Exception","862","","<p>I've decided to license some code I have yet to release under the GPL v3. However, OpenSSL is used quite a bit in the software and I know that the two licenses are explicitly cited as being incompatible.</p>

<p>I wanted to stay with my decision to go GPL but without having to refactor years of work to use something like GNU TLS instead. Doing some searching, I've found that people have combined openSSL into GPL works while adding an ""openSSL exception"". Deluge is one such example. Excerpt from the <a href=""https://github.com/deluge-torrent/deluge/blob/develop/LICENSE"" rel=""nofollow"">Deluge License</a>:</p>

<blockquote>
  <p>Deluge is licensed under the GNU General Public License version 3 with
  the addition of the following special exception:</p>
  
  <p>In addition, as a special exception, the copyright holders give
  permission to link the code of portions of this program with the
  OpenSSL library. You must obey the GNU General Public License in all
  respects for all of the code used other than OpenSSL. If you modify
  file(s) with this exception, you may extend this exception to your
  version of the file(s), but you are not obligated to do so. If you do
  not wish to do so, delete this exception statement from your version.
  If you delete this exception statement from all source files in the
  program, then also delete it here.</p>
</blockquote>

<p>What are are the ramifications of this exception? Does it actually ""work""? If the two licenses are deemed <a href=""http://www.gnu.org/licenses/license-list.en.html#OpenSSL"" rel=""nofollow"">incompatible</a>, can such an exception really make them compatible? </p>

<p><strong>Edit:</strong><br>
More references to this practice:</p>

<p><a href=""http://curl.haxx.se/legal/licmix.html"" rel=""nofollow"">http://curl.haxx.se/legal/licmix.html</a></p>

<blockquote>
  <p>(May be used for SSL/TLS support) Uses an Original BSD-style license
          with an announcement clause that makes it ""incompatible"" with GPL. You
          are not allowed to ship binaries that link with OpenSSL that includes
          GPL code (unless that specific GPL code includes an exception for
          OpenSSL - a habit that is growing more and more common). If OpenSSL's
          licensing is a problem for you, consider using another TLS library.</p>
</blockquote>

<p>From the <a href=""https://fedoraproject.org/wiki/Licensing:FAQ?rd=Licensing/FAQ#What.27s_the_deal_with_the_OpenSSL_license.3F"" rel=""nofollow"">Fedora Project FAQ</a>:</p>

<blockquote>
  <p>These two clauses are restrictions that aren't present in the GPL and
  therefore are incompatible with the portion of the GPL that says ""You
  may not impose any further restrictions on the recipients' exercise of
  the rights granted herein.""</p>
  
  <p>However, we consider that the OpenSSL library is a system library, as
  defined by the GPL, on Fedora and therefore we are allowed to ship GPL
  software that links to the OpenSSL library. Treatment of OpenSSL as a
  system library does not extend to other operating systems or even some
  other Linux distributions, however, so upstreams that do this should
  definitely be encouraged to add an exception to their GPL licensed
  code that allows linking to OpenSSL. The Free Software Foundation has
  a FAQ entry on how to write such an exception.</p>
</blockquote>
","<p>Yes, this is possible, and Deluge's approach appears to be roughly in line with the FSF's recommendations.</p>

<p>The GPL FAQ has this to say on <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"" rel=""nofollow"">exceptions for GPL-incompatible libraries</a>:</p>

<blockquote>
  <p><strong>What legal issues come up if I use GPL-incompatible libraries with GPL software?</strong></p>
  
  <p>If you want your program to link against a library not covered by the system library exception, you need to provide permission to do that...</p>
  
  <p>Only the copyright holders for the program can legally release their software under these terms. If you wrote the whole program yourself, then assuming your employer or school does not claim the copyright, you are the copyright holder—so you can authorize the exception. But if you want to use parts of other GPL-covered programs by other authors in your code, you cannot authorize the exception for them. You have to get the approval of the copyright holders of those programs.</p>
</blockquote>

<p>To think of it another way, you license your software under a license whose terms are <em>almost</em> identical to the GPL. The license is exactly like the GPL in all respects except that its copyleft provisions do not apply for the specific purpose of linking to some particular library. In essence, you sidestep the GPL compatibility problem by <em>not licensing your own work under the (vallina) GPL!</em> You license your work under the ""almost-GPL"" which has additional permissions. The GPLv3 has a mechanism in section 7 exactly for this purpose, and the FSF does not appear to object to authors adding exceptions to the GPLv2, either.</p>

<p>Broadly, adding exceptions works because you are the copyright holder, and therefore you may license your work however you please. Narrowly, this works because the FSF (and GPLv3 license text) permits you to add <em>additional permissions</em> to the GPL's license terms when you release your work. Within the FAQ item linked above, the FSF has published <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"" rel=""nofollow"">a guide explaining exactly how to implement exceptions in your GPL license text</a>. For example, the following addendum is the FSF's suggested wording to add a linking exception to the GPLv3:</p>

<blockquote>
  <p>Additional permission under GNU GPL version 3 section 7</p>
  
  <p>If you modify this Program, or any covered work, by linking or combining it with [name of library] (or a modified version of that library), containing parts covered by the terms of [name of library's license], the licensors of this Program grant you additional permission to convey the resulting work. {Corresponding Source for a non-source form of such a combination shall include the source code for the parts of [name of library] used as well as that of the covered work.}</p>
</blockquote>

<p>(The bracket text should be removed for libraries whose source code cannot be distributed alongside your GPL-licensed work, e.g., because it is not publicly available.)</p>

<p>Note, however, that you can only add exceptions to work for which you have copyright control. If you want to include a third-party GPL-licensed library in your project, you cannot make that library  adopt the exceptions present in your project. (Only the author of the third-party GPL-licensed library can do that.) This is an issue any time you (1) include someone else's third-party code in your project (2) in a way that creates a combined work with that third-party code, and (3) the license of that third-party code does not permit you to link to the library you want to make an exception for (e.g. OpenSSL). So, for example, this not a problem if the third-party code is under a permissive license like MIT, because the MIT license does not object to having its material combined with non-free or GPL-incompatible libraries. It <em>is</em> an issue for third-party GPL-licensed code, because that license <em>does</em> object to being combined with GPL-incompatible code.</p>

<p>Note also that any downstream recipient may remove exceptions for their own derivative of your work (but in this case, that seems unlikely to happen, since it would massively diminish the usefulness of their derivative).</p>
","2252"
"How do I attract new programmers?","859","","<p>I am working on a project, currently by myself. It's a side project, I'm not expecting to make money on it. It's posted on GitHub, and I'm going to be building a project page for it.</p>

<p>Once it's built, how do I get other programmers to want to contribute? I am checking in code constantly, but no other contributors makes it hard to continue on my own. The whole purpose of me releasing it as Open Source was to get other contributors who know more about programming than I do.</p>
","<p>There are a lot of things that you can do to get other programmers contributing to your open source project.</p>

<h2>Make the project useful for others</h2>

<p>I think most programmers would like to contribute to and improve a project that involves something that is useful to them. It doesn't have to be something for only programmers, but if the project is something that would only be useful to a few people, then other programmers who it isn't useful to probably won't want to contribute to it.</p>

<h2>Write good, well-structured code</h2>

<p>Messy code might deter programmers away from contributing. They can probably understand most of it pretty quickly, but actually adding to and improving it is a lot harder. Of course, this is something you should always do, but I think it is especially important if you are trying to work with others.</p>

<h2>Ask others to contribute</h2>

<p>It can never hurt to ask specific people you might know to contribute. There has been a number of times when I've asked someone here on Stack Exchange (usually Stack Overflow) if they want to work with me on a project. Many times, a project will catch fire as more and more programmers start contributing. You can start that with just asking one or two people to help.</p>

<h2>Advertise your project</h2>

<p>There are many ways that you can advertise your project to try to get others interested in it. This can be done many different ways. If you have a blog, blog about it. Post it on Google+ or Twitter or some other type of social media platform. Talk about it on websites like SE or sites similar to it.</p>

<h2>Build a community</h2>

<p>Eventually, you're gonna want to have your open source project become a community. As mentioned in other answers and in the comments, <a href=""https://communitybuilding.stackexchange.com/"">Community Building SE</a> is a great place for questions on how to build a community. As the first programmers start to contribute to your project, you'll probably need to be the leader of your community (improve the project, fix bugs, etc.), but as more and more contributors come along, the community will start to build itself. You can also use the project page you mentioned as a forum for the community. I would also suggest possibly doing a chat room. Who knows, maybe if the community is big enough, it will build those stuff itself.</p>
","78"
"How does GPL affect binary-only modifications?","852","","<p>GPL is a copyleft license where, if I make modifications to the source code and distribute the resulting binary, I need to provide the modified source code also under the GPL.</p>

<p>What happens if I make modifications to the binary alone, leaving the source code unchanged? For example, if I compile a binary from GPL'd source code, modify it using a hex editor, then distribute the modified binary, how does the GPL affect me?</p>

<ul>
<li>Do I need to provide the source code under GPL, even though it is unchanged? If yes, do I need to provide it myself, or is linking to where I obtained it sufficient?</li>
<li>What about the binary modifications? Do I need to provide the unmodified binary? A description of the modifications I made, and in what format?</li>
</ul>
","<p><a href=""https://gnu.org/licenses/gpl.html"">The GPL, version 3</a>, has the following to say about distributing modified copies of a covered program in a form other than source code:</p>

<p>Section 6:</p>

<blockquote>
  <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:
  [list of acceptable ways to convey source code]</p>
</blockquote>

<p>From section 1, the definition of <code>Corresponding Source</code></p>

<blockquote>
  <p>The “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.</p>
  
  <p>The “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.</p>
</blockquote>

<p>Since you're distributing a program in non-source form, you need to provide a way for people receiving it to get the source code, including whatever is needed to make your binary modifications (a binary patch, a set of hex values to change, or whatever the preferred form is).</p>
","899"
"Can I ""Override"" a licensing policy?","846","","<p>On many sites, especially Stack Overflow, I can't help but notice such amazing code snippets. However, they come with a ""catch"" designed by the author.</p>

<p>With user contributions being licensed with the <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""noreferrer"">Creative Commons ShareAlike 3.0 License</a>, many users try and ""override"" this by stating how they license the work on their profile page. For example:</p>

<blockquote>
  <p>All contributions that I make to this site shall be licensed under the Apache 2.0 License</p>
</blockquote>

<p>This surprises me, because it seems to violate the policy of licensing, if not the Terms of Use that are present as well.</p>

<p><img src=""https://i.stack.imgur.com/bDTed.png"" alt=""Stack Exchange User Contribution Policy""></p>

<ul>
<li>Is this acceptable? Are users allowed to essentially ""override"" and decide their own licenses, against what has been standardized by the organization?</li>
</ul>
","<p>It depends. For Stack Exchange: yes.</p>

<p>When you write something, you own the copyright, and have the right to do whatever you want with it (from a copyright perspective at least).</p>

<p>When you post something to some site, you usually give a license to use that material on that site, through the terms and services, or you transfer the copyright to them.</p>

<p>If the terms are to transfer the copyright to them, you no longer own the copyright, and you can't grant additional licenses.</p>

<p>If you grant them a license, it's either an exclusive license, or a non-exclusive license. If it is an exclusive license, you can't grant anyone else a license anymore.</p>

<p>If it is a non-exclusive license, you may still dual license your content, and make it available under some other license as well.</p>

<p>In the case of Stack Exchange, the terms read</p>

<blockquote>
  <p>You agree that all Subscriber Content that You contribute to the
  Network is perpetually and irrevocably licensed to Stack Exchange
  under the Creative Commons Attribution Share Alike license.</p>
</blockquote>

<p>This means it is a non-exclusive license, and you can release your content to others under a different license as well. This seems to be the most common scenario for other sites as well, but you should always double check.</p>

<p>Note that this doesn't <em>override</em> the license. You are dual licensing your content. Per the terms and services, you have no choice but to license your work under CC-BY-SA. But you have no restriction to <em>also</em> license it under a different license of your choosing.</p>

<p>These licenses don't have to be compatible. Anyone can choose under which license they use your work, the standard StackExchange one (CC-BY-SA), or another you offer personally.</p>
","538"
"Why are you obliged to comply with the license of an anonymous project?","846","","<p>Is there any point in complying with the licence which comes with a project published anonymously (like the initial Bitcoin source code)?</p>

<p>If so, in case of breaking the rules of your license, who has the right to enforce the aspects of a license if nobody takes the ownership of the project? So basically, can you do whatever you want?</p>
","<p>In order to sue you for copyright infringement, the authors need to reveal their identity. But just because they prefer to stay anonymous now doesn't necessarily mean that they will stay anonymous in the future. </p>

<p>They might get deanonymized against their will. Then they have nothing to lose anymore by going after you. When you annoy them enough, they might even decide that shutting you down is more important than staying anonymous and go public. They might face the challenge to prove that they are indeed the creators after initially publishing anonymously, but there are several ways to prove authorship, like <a href=""https://en.wikipedia.org/wiki/Poor_man&#39;s_copyright"">an unopened letter addressed to themselves with the sourcecode stamped before publication</a> or having the private key with which they signed their anonymous mails and releases.</p>
","1673"
"""GitHub Stars"" is a very useful metric. But for *what*?","845","","<p>Users on the GitHub website are able to ""star"" other people's repositories, thereby saving them in their list of Starred Repos. Some people use ""stars"" to indicate that they like a project, other people use them as bookmarks so they can follow what's going on with the repo later.</p>

<p>GitHub Stars are an easy metric to keep track of, and I've used them to measure how popular an open source project is. I admit to sometimes even using Stars to determine how battle-tested a repo is, under the assumption that a repo that has received more Stars must have received more use.</p>

<p>However, there are three limitations I noticed with GitHub stars (which makes my current approach to handling them pretty <em>dubious</em>):</p>

<ul>
<li>It is easy to create fake accounts on GitHub that can star repos. This can allow you to boost your metrics pretty easily, although you do not want to be obvious when doing them, lest the accounts get detected and deleted. (You can google for ""buy GitHub stars"" for those that are lazy technically). While you can use fake accounts to star your own repos, you may also want to star other people's repos to avoid leaving a paper trail. And since you don't want to be running all these fake accounts manually, you want to create bots and...you get the picture.</li>
<li>GitHub Stars may be ""juiced"" by media attention, which is temporary and not actually based on sustained popularity. This is from personal experience -- after publicizing a fork of an my open source repo on Hacker News, I received some stars, but no corresponding increase in use of my fork. It's possible that a few people were interested in my repo, starred it, and then either never found an actual use case for my fork or promptly forgot about it later on.</li>
<li>You can star a Repo for any reason. GitHub doesn't care. It merely notes that someone pressed the Star button and that's all. You can guess why it's starred (someone likes it or wants to look at it later), but other reasons are equally plausible (they are bored at work and like starring random repos, they want to star a repo of a friend of theirs).</li>
</ul>

<p>I'm sure that metric means something. I'm not sure <em>what</em> though. What do GitHub Stars measure, and how should I use them to better understand the vitality/success/popularity of an open source project?</p>

<p>Any answer to this question should be either evidence-based or research-based.</p>
","<p>Stars are exactly what you said they are. Some indication that someone (or maybe a bot) clicked on a button and taken in abstraction of anything else there is not much more that you can infer from that.</p>

<p>You could assume that everyone is using stars for the same purpose but as you pointed they could be used to show your appreciation of a project as well as for bookmarking it and therefore they are either some form of feedback to a repo as well as some form of bookkeeping for the star maker.</p>

<p>Star counts are still routinely used by researchers as a <a href=""https://arxiv.org/pdf/1603.00431.pdf"" rel=""nofollow noreferrer"">proxy</a> for <a href=""http://issel.ee.auth.gr/wp-content/uploads/2017/01/User-Perceived-Source-Code-Quality-Estimation-based-on-Static-Analysis-Metrics.pdf#page=2&amp;zoom=180,-90,531"" rel=""nofollow noreferrer"">project popularity</a> though while it may correlate OK for the most popular projects this likely does not hold for the vast number of other projects in the long tail. </p>

<p>So some may interpret it as a proxy for popularity but in in the end this likely a weak proxy. Combining the number of forks, watchers, issues, commits, etc. might be better in the end but still only a proxy and will never be an unbiased metric.</p>

<p>If you are in search of metric to determine if a project is popular, a better approach might be to determine who is reusing what. Which is another complex problem of its own especially since reuse may be private and hidden. And you could lace in other metrics but as always with a pinch of salt.</p>

<p>To illustrate this, take this ranking of users for <a href=""http://git-awards.com/users/search?login=pombredanne"" rel=""nofollow noreferrer"">my self</a>. This correlate OK with my skills and interests in general but it does not know a little fact about me: I use forking as if these were bookmarks. So any metrics based on forks would be in my favor whether I care or not because of my personal and unique way to treat a fork. And in doing so, I also introduce a bias in any fork metrics for the projects I fork.</p>
","5114"
"How do I license an open source application that uses closed source libraries?","829","","<p>I'm not sure if this is the right place for this question since the software I'm developing isn't completely open source, but here goes.</p>

<p>Long story short (and for context), I'm a member of a not-for-profit organisation. I develop and maintain several pieces of software used only inside the organisation.</p>

<p>Most of these applications are built using Microsoft .NET and I'm not entirely sure how I license this software, or I'm even allowed to.</p>

<p>As an example. One of these applications is a collection of Powershell scripts that makes use of SQL Server Management Objects (Microsoft.SqlServer.Smo.dll)</p>

<p>How do I license my software so that my own code is open sourced (so the organisation can make changes, derivations, etc. as they need to) without requiring the source for the Microsoft DLLs be disclosed?</p>
","<p>It is no big problem at all. Many open source software depends on proprietary software. Think of all the open source running on Windows.</p>

<p>The big point here is, that you only license your software (you cannot license the other stuff).</p>

<p>So you may leave out the .Net-framework from your distribution and the one using your software must install it independently. In that case it is clear your license only covers all that is in the distribution, so not the excluded framework. Or you include the framework, but make clear your license doesn't cover that part. Be it a mention (maybe in the file LICENSE you mention only the sources in src/ are licensed under license X, the stuff in lib/ isn't part of that).</p>

<p>A special case here is, if you choose the GPL as your license. If you're the sole contributor to the software (or all other contributors agreed) you can link against the .net-framework without implications, but if you're not, the link might prevent you from using a proprietary framework. Other licenses are fine.</p>

<p>Also the proprietary libraries/framework might have its licensing terms that prevent you from using it for open source. As far as I know this isn't the case for .net, especially as some open source for .net exists.</p>
","1771"
"Can I omit the preamble of the GPL?","828","","<p>The <a href=""https://www.gnu.org/licenses/gpl.html"">GNU GPL</a> is very long. If I have to include a copy of it with my program, can I drop the preamble to save space?</p>
","<p>I've just discovered (again), that my question is in fact a <a href=""https://www.gnu.org/licenses/gpl-faq.html#GPLOmitPreamble"">Frequently Asked Questions about the GNU Licenses</a>.</p>

<blockquote>
  <p>The preamble and instructions are integral parts of the GNU GPL and may not be omitted. In fact, the GPL is copyrighted, and its license permits only verbatim copying of the entire GPL. (You can use the legal terms to make another license but it won't be the GNU GPL.)</p>
  
  <p>The preamble and instructions add up to some 1000 words, less than 1/5 of the GPL's total size. They will not make a substantial fractional change in the size of a software package unless the package itself is quite small. In that case, you may as well use a simple all-permissive license rather than the GNU GPL.</p>
</blockquote>
","957"
"How should you put attribution into your project?","824","","<p>When you're copying open source from another project (not simply linking), how should you provide attribution in your source repo? I've copied some things into my code base that are probably not actually copyrightable (e.g., word lists), but I'd like to provide the appropriate attribution for the MIT/BSD licensed projects they were copied from. For example <code>LICENSE</code> or <code>LICENSE.txt</code> are common for <strong>your</strong> project's license, but what about attribution? Also, what's the minimal amount of text required?</p>
","<p>[obvious disclaimer - I am not a lawyer]</p>

<p>A common practice I've seen is to add an additional file, e.g. NOTICE.txt with references to other projects being used.</p>

<p>For example, take a look at <a href=""https://commons.apache.org/proper/commons-lang/"">Apache Commons Lang</a> (yes, I know it doesn't use the MIT license, it's just a really simple example for this practice, which holds for various licenses). It has a <a href=""https://github.com/apache/commons-lang/blob/master/NOTICE.txt""><code>NOTICE.txt</code></a> file which states that it uses code from the Spring Foundation, the licensing terms it was used by, and a reference to the exact location in the code. If you look at <a href=""https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/StringUtils.java#L1744"">that location in the code</a>, you'll find the complete details.</p>
","2313"
"AGPLv3 source redistribution: when does it apply to my code for a server-side Java app using an AGPL-licensed library?","822","","<p>I have written a Java program designed to run server-side with a plain HTML web interface: </p>

<ul>
<li>My app is based based on Apache Tomcat and I wrote a bunch of servlets.</li>
<li>I am reusing and I have integrated in this app one single third-party library that is licensed under the AGPLv3.</li>
<li>This library performs some file transformation and report creation of sorts using data that I feed it with when I call its methods.</li>
<li>This library is not part of code producing any of my web UI, though its output can be made available to users for download in my web app.</li>
<li>I use this library as-is and <strong>unmodified</strong> fetched straight from Maven Central: I am merely calling its methods in my own code. </li>
<li>This library <strong>does not have a corresponding source code download mechanism builtin</strong>  (e.g. there is no mechanism as defined in the AGPLv3 Section 13 or in the AGPLv3 ""How To"").</li>
</ul>

<p>In each of the following cases, would I have to <strong>redistribute the source code of my own application and of this library</strong> per the AGPLv3?</p>

<ol>
<li><p>When I run this application on a private company network and its is only available internally to my company employees?</p></li>
<li><p>When I run this application on a public web site on the open internet?</p></li>
<li><p>When I redistribute this application as a packaged software product to possible customers?</p></li>
<li><p>What if in my case 2. the author of the library insist that the copyleft is triggered even if I am using the library unmodified and that I must redistribute the whole source code, including my own? [note: this is an addition following answers and comments] </p></li>
</ol>
","<p>There are several Q&amp;A about the AGPLv3 on this site and some answers are sending vague or mixed signals. 
Here is an (hopefully) clear and definitive answer with references.</p>

<p>First the AGPLv3 is essentially the same license as the GPLv3 with the addition of <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">Section 13</a> as you can see in this <a href=""https://gist.github.com/pombredanne/2a8d85da552dfab9b8173f771b6a4f98/revisions"" rel=""nofollow noreferrer"">side-by-side diff</a> of the two license texts:</p>

<blockquote>
  <ol start=""13"">
  <li>Remote Network Interaction; Use with the GNU General Public License.</li>
  </ol>
  
  <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. [...]</p>
</blockquote>

<p>The intent of this new section is spelled out clearly in the <a href=""https://www.gnu.org/licenses/agpl-3.0#preamble"" rel=""nofollow noreferrer"">preamble</a> (bold emphasis is mine):</p>

<blockquote>
  <p>The GNU General Public License permits making a <strong>modified version</strong> and letting the public access it on a server without ever releasing its source code to the public.</p>
  
  <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the <strong>modified source code</strong> becomes available to the community. It requires the operator of a network server to provide the source code of the <strong>modified version</strong> running there to the users of that server. Therefore, public use of a <strong>modified version</strong>, on a publicly accessible server, gives the public access to the source code of the <strong>modified version</strong>.</p>
</blockquote>

<hr>

<p>Now let's look at which parts of the AGPLv3 are triggered in your four cases:</p>

<h2>Modification</h2>

<p>You are using an unmodified <code>exact copy</code> of this library. Therefore this definition of <a href=""https://www.gnu.org/licenses/agpl-3.0#section0"" rel=""nofollow noreferrer"">Section 0</a> is relevant. You are <strong>not</strong> using a <code>modified version</code> if you are using an <code>exact copy</code> (bold emphasis is mine):</p>

<blockquote>
  <p>To ""modify"" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, <strong>other than the making of an exact copy</strong>. The resulting work is called a ""modified version"" of the earlier work or a work ""based on"" the earlier work.</p>
</blockquote>

<p>Therefore per <a href=""https://www.gnu.org/licenses/agpl-3.0#section1"" rel=""nofollow noreferrer"">Section 1</a> in all three cases (bold emphasis is mine):</p>

<blockquote>
  <p>This License explicitly affirms your unlimited permission to run the <strong>unmodified</strong> Program.</p>
</blockquote>

<p>And therefore since you did not modify it, the <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">section 13</a> is not triggered.</p>

<h2>Propagation</h2>

<ul>
<li>In case 1, you certainly do not ""propagate"" the work: you are instead <code>executing it on a computer</code>.</li>
<li>In case 2 you may be ""propagating"" the work as your are somehow indirectly <code>making it available to the public</code> by running your public web server. Yet this is not 100% clear as you are not distributing a copy. I take a prudent point of view that you may be ""propagating"".</li>
<li>In case 3 you are clearly ""propagating"" the work as you [re]<code>distribute</code> the code. </li>
</ul>

<p>(as defined in <a href=""https://www.gnu.org/licenses/agpl-3.0#section0"" rel=""nofollow noreferrer"">section 0</a>) </p>

<blockquote>
  <p>To ""propagate"" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p>
</blockquote>

<h2>Conveying</h2>

<p>You are clearly only conveying in case 3. In case 2, you are propagating but not conveying as there is <code>no transfer of a copy</code>.</p>

<p>(as defined in <a href=""https://www.gnu.org/licenses/agpl-3.0#section0"" rel=""nofollow noreferrer"">section 0</a>) (bold emphasis is mine)</p>

<blockquote>
  <p>To ""convey"" a work means any kind of propagation that enables other parties to make or receive copies. <strong>Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</strong></p>
</blockquote>

<p>Your further mention that as such this library does not have a built-in mechanism to offer a download of its corresponding source code as explained in the <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">Section 13</a>. Since this library does not have a built-in mechanism to self-download its corresponding source code, your propagation does not <code>enables other parties to make or receive copies</code>. Which further reinforces the fact that your are not ""conveying"" in case 2.</p>

<p>You also mention that this library takes your data and create some report format. I will assume that therefore the output is not subject to the license of the library itself and this part of <a href=""https://www.gnu.org/licenses/agpl-3.0#section1"" rel=""nofollow noreferrer"">Section 1</a> does <strong>not apply</strong> in your case:</p>

<blockquote>
  <p>The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.</p>
</blockquote>

<p>Finally, in all cases your application is combined and depends on the AGPL-licensed library and I would consider that its copyleft extends to your own source code. </p>

<hr>

<p>But when is the copyleft effectively triggered in these cases? (and of course the copyleft requirement to eventually redistribute the source code of your own application?)</p>

<p>Since you are using the library unmodified, the key is whether you are either propagating or conveying or both</p>

<blockquote>
  <p><strong>1. when I run this application on a private company network and its is only available internally to my company?</strong></p>
</blockquote>

<p>In this case, you are using the library internally unmodified, without neither conveying nor propagating:
And per <a href=""https://www.gnu.org/licenses/agpl-3.0#section1"" rel=""nofollow noreferrer"">Section 1</a></p>

<blockquote>
  <p>This License explicitly affirms your unlimited permission to run the unmodified Program. [...]
  You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.</p>
</blockquote>

<p>This is all I have to say about your case 1: <strong>you do not have to make any source code redistribution</strong> of your own code using this library and of this library in this case.</p>

<blockquote>
  <p><strong>2. when I run this application on a public web site on the open internet?</strong></p>
</blockquote>

<p>You are using the library unmodified, and there is no built-in Section 13 corresponding source code download mechanism. In this case you are propagating but not conveying. Therefore <strong>none</strong> of the <a href=""https://www.gnu.org/licenses/agpl-3.0#section4"" rel=""nofollow noreferrer"">Section 4</a>, <a href=""https://www.gnu.org/licenses/agpl-3.0#section5"" rel=""nofollow noreferrer"">Section 5</a> and <a href=""https://www.gnu.org/licenses/agpl-3.0#section7"" rel=""nofollow noreferrer"">Section 7</a> apply here. In this context, the AGPLv3 is not different from the GPLv3. This is like running an unmodified GPLv3 program that you call from your own code on a publicly accessible web server backend. The <strong>copyleft is NOT triggered</strong> in the sense you do not have to make any source code redistribution of your own code or of this library.</p>

<blockquote>
  <p><strong>3. when I redistribute this application as a packaged software product to possible customers?</strong></p>
</blockquote>

<p>You are using the library unmodified and there is still no built-in <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">Section 13</a> corresponding download mechanism (but that mechanism would not matter much in this case). </p>

<p>Here you are propagating AND conveying. Therefore the <a href=""https://www.gnu.org/licenses/agpl-3.0#section1"" rel=""nofollow noreferrer"">Section 4</a> applies. In this context, the AGPLv3 is still not much different from the GPLv3. You are redistributing an application that is based on the unmodified AGPLv3-licensed library. </p>

<p>And the <strong>copyleft is triggered</strong>: you have to make a redistribution of the corresponding source code of both your own code and this library. In this case, this could also cover Tomcat, though Tomcat may also be treated as a ""System Libraries"" per <a href=""https://www.gnu.org/licenses/agpl-3.0#section1"" rel=""nofollow noreferrer"">Section 1</a>. </p>

<blockquote>
  <p><strong>4. What if in my case 2. the author of the library insist that the copyleft is triggered even if I am using the library unmodified and that I must redistribute the whole source code, including my own?</strong></p>
</blockquote>

<p>In this special case you <strong>should never ignore this interpretation</strong> (even though it looks clearly incorrect based on the facts I presented here) and you have two options:</p>

<ol>
<li><p>You could consider that short of proper <code>Additional Terms</code> compliant with the <a href=""https://www.gnu.org/licenses/agpl-3.0#section7"" rel=""nofollow noreferrer"">Section 7</a> of the AGPL, the author is trying to make a modification to the AGPL which is not OK under this license as the first statement says <code>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</code>. You could discuss this with the author and if you want to take the high road involve the FSF in a private discussion at first to resolve the matter.</p></li>
<li><p>Or you could take this author assertions and comments at face value and treat this as if it were part of the license. This is usually my approach. E.g in this case and if you do not want to redistribute your source code when using the library unmodified in your case 2. you could just pass using this library entirely if anything because of its possibly incorrect and unclear licensing. Or use it and adopt its author's interpretation of the AGPLv3 -- even if not based on license text facts.</p></li>
</ol>

<hr>

<p>Finally let me provide some additional quotes supporting this answer:</p>

<ul>
<li><p>From Jeffrey Kaufman in his article <a href=""https://opensource.com/article/17/1/providing-corresponding-source-agplv3-license"" rel=""nofollow noreferrer"">Do I need to provide access to source code under the AGPLv3 license?</a>:</p>

<blockquote>
  <p>What is often misunderstood is that the source code requirement in AGPLv3 Section 13 is triggered only where the AGPLv3 software has been modified by ""you"" (for example, the entity providing the network service). My interpretation is that, so long as ""you"" do not modify the AGPLv3 code, the license should not be read as requiring access to the Corresponding Source in the manner prescribed by Section 13. As I see it, many unmodified and standard deployments of software modules under AGPL simply do not trigger Section 13, although making the source code available even if not required under the license is a good idea.</p>
</blockquote></li>
<li><p>From @apsillers who relates his exchange with the Free Software Foundation in his answer to a very similar question: <a href=""https://opensource.stackexchange.com/a/791/947"">Do I have to offer the source of an AGPL (v3.0) licensed Web app even if I didn’t modify it?</a></p>

<blockquote>
  <p>I wrote to the FSF's licensing team about this question:</p>
  
  <blockquote>
    <p>[...] Does this [section 13] mean that if I run a *completely unmodified* AGPL-licensed program as a network service, I am *not* required to offer the source code to network users?</p>
  </blockquote>
  
  <p>And I received this response (bracketed phrase added by me):</p>
  
  <blockquote>
    <p>[...] If you haven't modified the software then you are not required to add that functionality [i.e., to download the source]. Of course, if the functionality to download the source is already in the unmodified software, it will already be there for everyone to enjoy.</p>
  </blockquote>
</blockquote></li>
<li><p>This exchange with the FSF is consistent with the Free Software Foundation article on <a href=""https://www.gnu.org/licenses/why-affero-gpl.html"" rel=""nofollow noreferrer"">Why the Affero GPL?</a>:</p>

<blockquote>
  <p>[...]Suppose you develop and release a free program under the ordinary GNU GPL. If developer D modifies the program and releases it, the GPL requires him to distribute his version under the GPL too. Thus, if you get a copy of his version, you are free to incorporate some or all of his changes into your own version.</p>
  
  <p>But suppose the program is mainly useful on servers. When D modifies the program, he might very likely run it on his own server and never release copies. Then you would never get a copy of the source code of his version, so you would never have the chance to include his changes in your version. [...]</p>
</blockquote>

<p>and (with my additions in brackets):</p>

<blockquote>
  <p>If D runs his version <strong>[e.g. the version that he modified]</strong>  on a server that everyone can use, you too can use it. Assuming he has followed the license requirement to let the server's users download the source code of his version, you can do so, and then you can incorporate his changes into your version. (If he hasn't followed it, you have your lawyer complain to him.)</p>
</blockquote></li>
<li><p>Heather Meeker makes this consistent comment in her the book <a href=""https://i2.wp.com/ecx.images-amazon.com/images/I/51%2BbdUrr5TL._SX331_BO1,204,203,200_.jpg"" rel=""nofollow noreferrer"">""Open Source for Business""</a> on page 134 after quoting the AGPL <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">section 13</a>:</p>

<blockquote>
  <p>Note that these requirements only exist if you modify the software. Mere users need not make the source code available. [...]</p>
</blockquote></li>
<li><p>And she further makes related comments in her article <a href=""http://blog.blackducksoftware.com/agpl-out-of-the-shadows"" rel=""nofollow noreferrer"">AGPL: Out of the Shadows</a>:</p>

<blockquote>
  <p>[...]Not surprisingly, AGPL3 has been slower to propagate than GPL3; if GPL3 has gained acceptance slowly, AGPL3 has been tagging along behind like a younger sibling. But the license is not as scary as it seems. The network interaction provision only triggers source code offer requirements when you modify the Program. In fact, most open source software is used without modification from community versions.[...] </p>
</blockquote></li>
<li><p>And yet another comment in her article <a href=""http://www.ifosslr.org/ifosslr/article/view/66/125"" rel=""nofollow noreferrer"">The Gift that Keeps on Giving – Distribution and Copyleft in Open Source Software Licenses</a> that highlights what ""convyeing"" means:</p>

<blockquote>
  <p>A Clear Case in the Clouds 
  [...]
  Ultimately, this variation was removed from GPLv3 and memorialized in an alternative form of the license known as the “Affero GPL.” The basic form of GPLv3 makes clear that ASP or SAAS use does not trigger copyleft requirements. In GPLv3, copyleft is triggering by “conveying” rather than distribution, and “To ‘convey’ a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.”
  Under US law, distribution requires actual transfer of a copy, in whatever form. Therefore, under US law, SAAS use – which involves the access of software without transfer of a local copy to the user – does not trigger copyleft requirements.</p>
</blockquote></li>
<li><p>Dr. Miriam Ballhausen in the article <a href=""http://www.ifosslr.org/ifosslr/article/view/103/191#a__AGPL-3_0"" rel=""nofollow noreferrer"">OpenSaaS: Using Free and Open Source Software as Software-as-a-Service</a> makes this comment, with a point view of Germany (emphasis is mine):</p>

<blockquote>
  <p>According to Section 13 AGPL-3.0 the SaaS provider - as the person who offers his users to remotely interact with a program via a computer network - <strong>is obliged to license any modifications to software licensed under AGPL-3.0 also under AGPL-3.0</strong>. In particular, he must give all users (but not all third parties) the opportunity to obtain the corresponding source code of the software version made available via SaaS.</p>
</blockquote></li>
</ul>
","5004"
"Software is under GNU/GPLv3, which licence to chose for pictures taken from it?","822","","<p>So, I recently released a FOSS software with a GNU/GPLv3 licence and just realized that the software can be used to produce pictures.</p>

<p>I want the pictures to be free (as in freedom) in any case and derivative work.
Is a CC-BY-SA appropriate for this use ?</p>

<p>Would that legally oblige derivative of the software to release their pictures in CC-BY-SA ?</p>

<p>How does the attribution part work ? Do users have to cite which software was used to create pictures ?</p>

<p>EDIT : to be clearer, what I wan't is to make the output of the program free (as in freedom) for anyone. What if someone produces a picture and does not allow others to freely share it ?</p>
","<p>Generally speaking, the output of a program running on input I provide is not a derivative work of the program.  It might contain pieces belonging to others (e.g. clipart, canned boilerplate code) that are subject to their own licensing, but the overall work and the pieces derived from my input belong to me.</p>

<p>Why, then, do you suppose that providing a useful tool gives you any moral authority to restrict what other people do with their own property?  As @leftaroundabout remarked, that's the opposite of freedom, and I myself find it borderline offensive.  It's also specifically contrary to the FSF's view on free software.  As you observe, the GPL does not impose a limitation such as you seek, and that's <strong>intentional</strong>.</p>

<p>If you nevertheless want to pursue what you describe, then the first thing to do is immediately stop distributing your software under the GPL.  Any copies distributed under that license are free of the constraint you want, including any that have already been distributed.  The GPL does not permit you to make <em>post hoc</em> license changes to copies you've already distributed.</p>

<p>You'll then need to devise your own license that places the restriction you want on licensees, and henceforth distribute the software only under that license.  It will be an open question whether the terms pertaining to licensing of the program output would stand up in court if you ever try to enforce them, or what remedy a court would be willing to grant if you prevail in such an effort.  Nevertheless, the mere presence of those terms might be enough to mostly achieve your aim.</p>

<p>Personally, if I were considering using software licensed as you describe, the license terms would be a deal killer.  I'd sooner accept restrictions on redistributing the program, and maybe even closed source, than I'd accept restrictions on what I can do with the output.</p>
","4796"
"Should I include a copyright line in every file?","818","","<p>This is similar to my <a href=""https://opensource.stackexchange.com/questions/202/should-i-include-license-text-in-a-single-file-or-all-source-files"">other question</a>, but specifically about Copyright rather than Licensing.</p>

<p>Typically, each source file contains a line of the form</p>

<pre><code>Copyright 2010-2015, Me
</code></pre>

<ul>
<li>Is this strictly necessary, or would a single COPYRIGHT file at the root of the repository cover all files within the project?</li>
<li>Do I need a separate COPYRIGHT file as well, to cover the entire project as a collection, rather than individual files?</li>
<li>If I have a copyright line in each source file, should they all reflect the same year range? Or should each file's line reflect the year-range from creation to the year it was last modified?</li>
</ul>
","<p>I think it's important to include both copyright and licensing information in all files: it ensures that everyone's rights are perfectly clear, regardless of what happens to the code in the future. Your project may be small and self-contained initially, but it often happens that interesting code ends up copied into multiple projects, or that projects get adopted by various people down the line. In both cases it's much easier to keep track of licenses and copyright information if it's specified in every file.</p>

<p>If you consider large projects nowadays, many of them include code from a huge variety of other projects, some large, some small, and in some cases single files copied from various sources (including sometimes old Usenet posts!). Firefox is a good example of this; it includes files from many different projects, <a href=""https://github.com/jhford/tooltool"">some quite small</a> (included in Firefox <a href=""http://hg.mozilla.org/mozilla-central/file/7b0df70e27ea/build/unix/build-clang/tooltool.py"">here</a>), and it can be quite hard to keep track of all the copyright holders and license information. Having it in every single file makes license auditors' jobs much easier.</p>

<p>There have been cases in the past of projects which couldn't be included in Linux distributions because of a couple of files whose licenses or copyright information wasn't clear... (I don't remember specifics off the top of my head, I could find them if necessary.)</p>

<p>Luis Villa wrote an <a href=""http://lu.is/blog/2012/03/17/on-the-importance-of-per-file-license-information/"">interesting blog post</a> on the topic.</p>

<p>As far as the difference between copyright and licensing goes, they are different, but licensing depends on copyright: a license is only valid inasmuch as it was originally given by the copyright holder. This reinforces the importance of including copyright information: it allows future users of your code to know who wrote it, and who to contact with any copyright-related queries (including licensing questions).</p>

<p>Concerning copyright years, I'll defer to the <a href=""http://www.gnu.org/licenses/gpl-howto.html"">GPL howto</a> (I don't know the reasoning behind this rule but it's probably applicable beyond just the GPL): according to the FSF, copyright statements are supposed to list the years in which the project was released, not the years in which modifications occurred. So any file which is part of a release should have its copyright statement updated on release; there are a number of tools which can automate this (<code>copyright-update-directory</code> in Emacs to name one). You can end up with different year ranges in your source files, but based on the first release they were part of.</p>
","300"
"How does one combine differently licensed code in one open source program?","809","","<p>I'm the author of <a href=""https://github.com/Captain-Chaos/WorldPainter"">WorldPainter</a>. It's licensed according to the GPL v3, but I am about to include some code (<a href=""https://github.com/webbukkit/DynmapCore"">dynmap</a>) that is licensed according to the Apache License version 2.0.</p>

<p>According to both <a href=""http://www.apache.org/licenses/GPL-compatibility.html"">Apache</a> and the <a href=""http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"">FSF</a>, the APLv2 is compatible with the GPLv3 so I can include it. My question it, how does that work in practice? Specifically:</p>

<ol>
<li>I include dynmap binaries which I build myself. The code is not modified, but the binaries do omit a lot of code which I don't need, to make them smaller. Does this mean I need to provide access to the dynmap source code, or is it sufficient to refer to dynmap on GitHub?</li>
<li>My code does include a handful of files copied from dynmap but heavily modified by me, mostly as glue to be able to invoke the dynmap code in ways it was never intended to. Are those files now GPLv3?</li>
<li>Does the author of dynmap (Mike Primm) also retain copyright in the modified files? Should I list us both as copyright holders in those files? Should I list Mike as a copyright holder for the whole of WorldPainter? The files comprise a very small part of the code.</li>
<li>Does any of the above imply that I should include a copy of the APLv2? Should I include a file explaining the situation with an overview of which license applies to which files? My estimation is that all the source code of WorldPainter proper, including the files copied from dynmap (since they are modified), is still GPLv3 and that it is therefore not necessary to include the APLv2. Is that correct?</li>
</ol>

<p>I will of course give full credit, in the credits of the program and in the copied files. This is just about the technical situation regarding the licensing of the files and the resulting program as a whole.</p>
","<p>The <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache License 2.0</a> states that:</p>

<blockquote>
  <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, <strong>or for any such Derivative Works as a whole</strong>, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>
</blockquote>

<p><sup>emphasis mine</sup></p>

<p>This essentially means that the Apache license imposes no share-alike restrictions: you don't have to redistribute the work under Apache 2.0. In turn, this means that you could just license the entire project under the GPL.</p>

<p>Now, to answer the direct questions:</p>

<ol>
<li><p><strong>Does this mean I need to provide access to the dynmap source code, or is it sufficient to refer to dynmap on GitHub?</strong></p>

<p>You don't have to do either, actually. According to the APL:</p>

<blockquote>
  <p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and <strong>in Source or Object form</strong>, provided that You meet the following conditions: ...</p>
</blockquote>

<p>Object form includes binaries. If the binaries are included in your project, you're distributing in Object form, which is still OK by the license.</p></li>
<li><p><strong>Are those files now GPLv3?</strong></p>

<p>Up to you. Those files are derivative works of the original dynmap code: re-read the first quote from the APL and it shows you can redistribute under any license. Thus, those files are GPLv3 if you choose, or not if you don't.</p></li>
<li><p><strong>Does the author of dynmap (Mike Primm) also retain copyright in the modified files?</strong></p>

<p>Long quote from the APL now:</p>

<blockquote>
  <p>d. If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p>
</blockquote>

<p>If the dynmap project contains copyright notices, you must include them in the relevant files. This would include, for example, the files in (2) - those are derivatives of his code, and if they have copyright notices on (or the project copyright notice covers them) then you must include the notice. Primm will retain any copyrights on any code he wrote, he's just allowing you to use it, so you need to demonstrate that. However, he does <em>not</em> become a copyright holder for the whole of WorldPainter, because he didn't write it.</p></li>
<li><p><strong>... Is that correct?</strong></p>

<p>Yes. Technically. You don't <em>have</em> to include the APL anywhere in your project if you don't want to, but it could be taken as courtesy: you're using someone else's work, so you should reference how they've made it available to you. If WorldPainter is any sort of size, including the license won't make much difference to the final package file. If it was me, I'd just include it.</p></li>
</ol>
","963"
"Forking repos to ""back up"" in case they are removed?","800","","<p>I am wondering if forking a repo of software I use in case the owner ever decides to remove it is a silly thing to do or whether it actually makes sense.</p>

<p>It seems like the repo could just disappear if the author decides to delete it and if I don't have it cloned locally, I would lose access unless I had previously made a fork.</p>
","<p>Oddly enough, I just did this with two repos I wanted to ensure continued access to. So no, it's not a silly idea.</p>

<p>However, remember that you have now committed yourself to monitoring the upstream (original) repository, and regularly pulling any new commits to keep your fork up to date.</p>

<p>You may also wish to put an explanation in the Description field pointing people to the original, just as I did some time ago with my clone of <code>json-c</code> - otherwise people may think you are the authoritative copy (yes, I know it says ""forked from ..."" under your repo name, but people really don't read the fine print).</p>
","2352"
"Copyfree Open Innovation License compatibility","791","","<p>I'm interested in the <a href=""http://copyfree.org/content/standard/licenses/coil/license.txt"" rel=""nofollow noreferrer"">Copyfree Open Innovation License</a> as a simpler alternative to Apache 2.0 (it is a permissive license with an explicit patent grant).  But because it's not so popular, not much information is available about it.</p>

<p>In particular, where does it fit into this graph?</p>

<p><a href=""https://i.stack.imgur.com/4bemj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4bemj.png"" alt=""License compatibility graph, groups licenses into the categories &#39;Permissive&#39;, &#39;Weakly Protective&#39;, &#39;Strongly Protective&#39; and &#39;Network Protective&#39;""></a> Image credit: <a href=""http://www.dwheeler.com/essays/floss-license-slide.html"" rel=""nofollow noreferrer"">David A. Wheeler</a></p>

<p>Is it GPL-compatible?  With which versions?  And where does it fit in with the permissive licenses?</p>
","<p>The Copyfree Open Innovation License License (CFOIL) is significantly shorter than the Apache 2.0 license. CFOIL grants:</p>

<ul>
<li>the right reproduce, modify, distribute, publish, sell, sublicense, use and/or otherwise deal in the licensed material without restriction; and</li>
<li>a perpetual, worldwide, non-exclusive, royalty-free, irrevocable patent license to reproduce, modify, distribute, publish, sell, use, and/or otherwise deal in the licensed material without restriction; for any and all patents held by the licensor and any contributor that may be infringed by the work;</li>
</ul>

<p>provided that:</p>

<ul>
<li>the user retains applicable copyright or other legal privilege notices, these conditions, and the following license terms and disclaimer. </li>
</ul>

<p>Unlike Apache 2.0, CFOIL lacks the additional supporting elements for <em>license</em> enforcement that are present in Apache License 2.0. Specifically, it lacks language throughout the license that indicates that the license grants has the terms and conditions of the license is a <em>precondition</em> for the license grant.</p>

<p>Apache 2.0, by constrast, is quite <em>explicit</em> about this:</p>

<blockquote>
  <p>Subject to the terms and conditions of this License, each Contributor hereby grants ...</p>
</blockquote>

<p><em>Unlike</em> Apache 2.0, CFOIL fails to make explicit that the <em>specific intent</em> of the drafters is to provide the license grant to <em>only to</em> those individuals or entities that abide by the terms and conditions contained in the license. Such an additional provision in the Apache 2.0 License strengthen the conclusion that the conditions in the license is, legally speaking a ""precondition"" rather than a ""covenant"".  It also lacks the Apache 2.0 patent termination clause:</p>

<blockquote>
  <p>If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p>
</blockquote>

<p>which makes its embedded patent-license weaker than the one in Apache 2.0.</p>

<p>In fact, its patent terms seems incompatible with <em>any copyleft license</em>. </p>

<p>In practice, these flaws in this license will limit your options (compared to Apache 2.0) if you want to seek legal remedy for license violations.  If all you want to have a really permissive license with a (sort of) patent license embedded, and do you will not even <em>think</em> about pursuing license violations, and do not fear patent suits filed from contributors will pose a problem, and you don't care about license compatibility, then it may be OK.</p>

<p>But if your alternatives are this license and Apache 2.0, you should be aware of the differences.  Apache 2.0 is IMHO superior.</p>

<p>As far as license compatibility goes, I don't think it is compatible with any version of the GPL or <em>any other copyleft license</em>.  It <em>looks</em> like a permissive license but its messed up patent license clause rules out GPL comptability and compatibility with Apache 2.0</p>

<p>So I can understand why this one is not much used, as it:</p>

<ul>
<li>creates legal uncertanity (<a href=""https://en.wikipedia.org/wiki/Contra_proferentem"">contra proferentem</a>)</li>
<li>creates license proliferation for no good reason;</li>
</ul>

<p>So to conclude: I don't think it fits <em>anywhere</em> on the license map reproduced in the question.</p>
","1455"
"What's the difference between bazaar-style and cathedral-style open source projects?","790","","<p>I am trying to choose the perfect license for my project....</p>

<p>After doing research I ran into a question which I could not find an answer to:</p>

<p><strong>My question:</strong></p>

<p>What's the difference between bazaar-style and cathedral-style open source projects? Could someone please explain the difference?</p>
","<p>The idea of the Cathedral and the Bazaar is a metaphor from the book named surprisingly <a href=""http://www.catb.org/~esr/writings/cathedral-bazaar/"">'The Cathedral and the Bazaar'</a> from open-source avangelist Eric S. Raymond.</p>

<p>The metaphor describes two different development-models for projects (not necessarily open source).</p>

<p>The cathedral is a centralized effort. A defined group of developers (or even only a single one) is developing the software. Nobody else is involved and ideas or patches from the outside will be ignored. Usually proprietary software is developed that way, but this is not exclusively.</p>

<p>The Bazaar makes the development open. Many people are tinkering with the source code without central control. Many are contributing.</p>

<p>In reality many OSS-projects are in between the two models.</p>
","518"
"Ramifications of the proposed new SE licensing model","784","","<p>Like many other people I read <a href=""https://meta.stackexchange.com/q/271080/301021"">this meta post</a>. Since I don't really understand what is at stake I became confused and worried.</p>

<p>Does this mean that I can legally force any organization to let me see the source code of any application touched by a questioner when I give an answer to their question? Does this mean that I open up any organization I'm associated with to this liability when I ask a question? Finally will SO be required to release identifying information so people can check if rights were violated? It seems to me that this move will induce code attribution trolls like patent law released the patent trolls. I seem to recall Oracle antagonizing Google in court over a simple algorithm in Android code...</p>

<p>Or I could just put in the terms and conditions something to the effect of: </p>

<blockquote>
  <p>The lines of code that were derived from or generated by the kind folks who contributed to the Stack Exchange network are licensed under the MIT license. Everything else is licensed under XYZ license. </p>
</blockquote>

<p>Then I would be in full compliance?</p>

<p>What are some of the big ramifications that I'm not knowledgeable enough to foresee?</p>
","<p>I posted <a href=""https://meta.stackexchange.com/a/271083/262823"">an answer</a> to the announcement post that pretty much sums up why <em>part</em> of this - the exception - is a bad idea:</p>

<blockquote>
  <ol>
  <li><strong>You're essentially creating a crayon license.</strong><br>
  If you modify the terms of an existing license, you create what is known as a <a href=""http://comments.gmane.org/gmane.comp.licenses.open-source.general/11857"" rel=""nofollow noreferrer"">crayon license</a>. Those are a problem - see <a href=""https://opensource.stackexchange.com/questions/1445/how-can-a-crayon-license-be-a-problem"">""How can a “crayon” license be a problem?""</a> for the reasons why.</li>
  <li><strong>It's far too easy to claim an illegal use is legal.</strong><br>
  See <a href=""https://opensource.stackexchange.com/a/2122/98"">this answer of mine</a>. Essentially, someone can get my code from somewhere I use it - perhaps in a commercial open-source product of mine - and not attribute it to me. When I chase them down on that, they can simply claim ""oh, I got it from Stack Overflow"", and get away scot-free.</li>
  <li><strong>It's <em>massively</em> unclear how to reverse that requirement.</strong><br>
  Say I don't want to have this extra exception applied to any of my code. How do I note that? If I put a note in my user profile that all my code snippets <em>must</em> be attributed properly as per the terms of the full MIT, is that enough? Do I have to add a note to <em>every</em> answer? I'd rather not have to do that, but I also don't want to be chasing people down endlessly for misusing my code.</li>
  </ol>
</blockquote>

<p>So what does this change mean? Let's answer some of your questions:</p>

<blockquote>
  <p>Does this mean that I can legally force any organization to let me see the source code of any application touched by a questioner when I give an answer to their question?</p>
</blockquote>

<p><strong>No.</strong> The code that came from the answer (or whatever post you got it from) is under the MIT license with an SE-specific exception. That means that the code can be used in a commercial, closed-source application (as the standard MIT allows), without the original license being included (which is provided for by the exception). Some <em>reasonable</em> attribution must be included at the request of the code author, but that doesn't have to be the full license document.</p>

<blockquote>
  <p>Finally will SO be required to release identifying information so people can check if rights were violated?</p>
</blockquote>

<p><strong>Nope.</strong> There's nothing in either the license, the exception, the SE TOS, or any other pertinent laws that requires them to do this.</p>

<blockquote>
  <p>Or I could just put in the terms and conditions something to the effect of:</p>
  
  <blockquote>
    <p>...</p>
  </blockquote>
  
  <p>Then I would be in full compliance?</p>
</blockquote>

<p>Conditional <strong>yes</strong>. If none of the individual code authors asked you to attribute them, that's perfectly sufficient. However, if one of them does ask you to attribute them, you should then include their name, a link to their profile, and a link to the original source of the content. No MIT license document required, still.</p>
","2208"
"Why are only so few Linux distributions listed by the GNU project?","771","","<p>The GNU project has a <a href=""https://www.gnu.org/distros/free-distros.html"">list of free GNU/Linux distributions</a>. But it lists only a few Linux distros, although hundreds do exist. Even more, very common distributions like Debian, Linux Mint or Gentoo aren’t listed.</p>

<p>Why is the list so restricted?</p>
","<p>They only list GNU/Linux distributions that follow the <a href=""https://www.gnu.org/distros/free-system-distribution-guidelines.en.html"">GNU FSDG</a> (Free System Distribution Guidelines).</p>

<p>That the software (as well as the documentation, fonts etc.) is licensed under an appropriate FSF-approved license is one condition, but it’s not the only one. That’s why even a GNU/Linux distribution that only ships with free/libre software/information might not get listed.</p>

<p>Another guideline, as example: The distribution is not allowed to ""encourage"" users to obtain ""any nonfree information for practical use"" (which includes software).</p>

<p>In practice this could mean that the distribution project’s server may not host a repository that contains proprietary software (or free/libre software that downloads proprietary software from somewhere else). (This is the reason <a href=""https://www.gnu.org/distros/common-distros.en.html#Debian"">why Debian is not listed</a>.)</p>
","872"
"How to licence a project which includes MIT, BSD, Modified BSD, and New BSD libraries","766","","<p>I've been working on a project for a while, and I'm almost ready to release it, but I've been more concerned with getting it to build than legal considerations, and now I'm not at all sure where I stand with licensing.</p>

<p>My Mercurial repository (which I plan to push to BitBucket.org) contains, aside from my own original code:</p>

<ul>
<li>A static (.a) binary of libcurl (MIT or Modified BSD)</li>
<li>A static (.a) binary of libuuid from util-linux (Modified BSD)</li>
<li>Source code (.c and .h) copied as-is from <a href=""http://zserge.com/jsmn.html"">JSMN</a> (MIT)</li>
<li>Source code (.c and .h) copied and slightly modified by me from <a href=""https://github.com/benhoyt/inih"">INIH</a> (New BSD)</li>
</ul>

<p>It also dynamically links against various libraries such as libxml2 (MIT) and the curl dependencies.</p>

<p>I'm not that bothered about what licence I use for my own code, though I'd prefer it to be as permissive as possible.</p>

<p>My question then is how can I release this project while complying with the various licence terms of the code I'm using? Note that as well as publishing the source code, I'll also be distributing compiled binaries.</p>

<hr>

<p>EDIT: Since his was the only project which didn't have a BSD-type licence, I emailed Serge Zaitsev, developer of JSMN, to ask if he had any objections to including his code in a BSD licensed project, he wrote back:</p>

<blockquote>
  <p>I'm not a guru of open-source licenses, but I always pick the most permissive license for my projects (MIT).</p>
  
  <p>I think 2-clause BSD and MIT are compatible licenses and are pretty much permissive.
  I personally don't see any problems with using MIT libraries in a BSD-licensed project, or GPL-licensed project, or even a closed-source one, because MIT license permits it all.</p>
</blockquote>
","<p>BSD and MIT licenses are very similar, essentially they are ""do anything you want"" licenses with a single requirement to include the license text and attribution to the original author somewhere that can be found easily.</p>

<p>Since you've got three licenses (MIT, Modified BSD, NewBSD) you will need to include all three of those licenses as well as acknowledgment that you are using code from each project.</p>

<p>One way to do this is to include a ""LICENSE.txt"" file in all distributions that contains a list of all projects and every license.</p>

<p>Another way is to have a ""credits"" section somewhere in a GUI app, for example chrome's ""about"" screen this text:</p>

<blockquote>
  <p>Copyright 2015 Google Inc. All rights reserved.</p>
  
  <p>Google Chrome is made possible by the Chromium open source project and other open source software.</p>
</blockquote>

<p>With a link to chrome://credits/ where you can see a list of hundreds of open source projects, a link to their website, and a link to view the license text for that project.</p>
","1832"
"Copyright and Contributing to an Open Source Project","758","","<p>I'm a little confused by copyright notices on open source projects.</p>

<p>Let's say that a particular project is covered by a very permissive license, such as MIT or BSD.  A copyright notice appears from the company that originated the source code.</p>

<p>But let's say that the project leader leaves the company, but continues to contribute to the project.  Should s/he add a new copyright notice, to indicate that portions are copyright from the original company and portions from the author no longer employed by that company?</p>

<p>It seems to me that anyone who touches a file essentially invalidates the copyright claims of anyone prior, because the file becomes a ""new creative expression"" based on those modifications.  How is the copyright supposed to be managed in a legally (and morally) robust manner as more and more people contribute?</p>
","<p>This is where the problem (or advantage) of multiple copyright owners comes in with open projects. There are two scenarios, based on whether a Copyright Transfer Agreement (CTA) is required to contribute to the project.</p>

<p>If a CTA is required to make contributions, then the issue is moot as the organization running the project becomes the copyright holder.</p>

<p>Otherwise, a common practice is to have multiple copyright lines within each affected file.</p>

<p>Thus you might see the following:</p>

<pre><code>// Copyright 1998..2015 Myorganization
// Copyright 2013 Fred Coder
// Copyright 2011 A N Other
</code></pre>

<p>Indicating that the file has been modified throughout its life by the official 'organization', but has also been touched by two different developers.</p>

<p>The copyright in this case exists in the entire file, as a combination of all contributions, rather than in specific lines of code.</p>

<p>Another approach is to have a single file (often named something like  <code>CONTRIBUTORS.txt</code>) in the project root which identifies everyone who has some copyright claims to the source code.</p>
","888"
"What happens if stolen software is published as Open Source?","756","","<p>This is not a real world issue, at least for me. It is more about a thought experiment from a talk that I once had with a friend:</p>

<p>Let's say that Acme develops closed source software for their own business and there are some sort of industrial secret on that code.</p>

<p>At Acme, one of their staff members, Han Solo, is about to be fired. Knowing that, he grabs some of the Acme's code and saves it in a pen-drive or something like that.</p>

<p>After leaving the company, he decides to publish Acme's code at some Open Source hosting (like GitHub or SourceForge), adding some Open Source license with the intent of damaging Acme's business. Acme does not notices this soon enough, and many people then have downloaded the code, modified it, forked it and improved it as any successfully Open Source software.</p>

<p>Some day, Han's plan starts to work, and Acme starts to lose money and customers who do not want to pay for their software anymore, since there is an Open Source alternative that does exactly the same as Acme's code does and it is easily found in the internet for free.</p>

<p>Acme would likely sue Han Solo, and Han Solo would be found guilty. But now we come to the question: <strong>What would happen with the now Open Source leaked code?</strong> The Open Source project is the fruit of a crime, and it is in fact stolen software that was Open Sourced. Should/could Acme try to hunt down wherever it is hosted and close it again (which is very unlikely to work)? What Acme could/would/should do to the community that uses the project?</p>
","<p>I have done a thorough IP review on my own project in 2007. You can find some info about this project in this slide deck: <a href=""http://www.slideshare.net/blowagie/startup-legal-and-ip"">Startup Legal and IP</a>. I encountered many situations that are similar to what you describe, although none of them were ""criminal."" These are some examples.</p>

<p><strong>Example 1:</strong> code that was proprietary to SUN, later open source by SUN under a friendly license.</p>

<p>In my project, I was using code originally developed at SUN. Some classes of th source code contained comments sections saying <em>This code is confidential and proprietary information of Sun Microsystems, Inc.</em> etc. The code as a whole was released, also by SUN, under a friendly sample license. In short: the code was released with the best of intents, but it accidentally contained conflicting information referring to the original, more strict license.</p>

<p><em>Verdict of the IP lawyers:</em> it's better to be safe than sorry. I had to remove the code.</p>

<p><strong>Example 2:</strong> The RC4 algorithm used to be a trade secret. Then it was anonymously published.</p>

<p>I used the code that implemented the algorithm that was anonymously published. It was considered as part of the public domain, so I was allowed to continue to use it. However, I used a parameter named <code>RC4_ENCRYPTION</code>, and although it was OK to use the code, I was not allowed to use the name RC4 in a parameter name because the name RC4 was trademarked.</p>

<p><em>Verdict of the IP lawyers:</em> as I was using the <em>Alleged RC4</em> algorithm, I had to change the name of the parameter to <code>ARC4_ENCRYPTION</code>.</p>

<p><strong>Example 3:</strong> <code>IntHashtable</code> by ACME versus <code>IntHashtable</code> from Apache.</p>

<p>I was using the <code>IntHashtable</code> class from <a href=""http://acme.com/"">ACME.com</a>. This class mentioned: <em>This class is 90% based on JavaSoft's java.util.Hashtable</em>. Because JavaSoft's class wasn't available under a friendly license, I was not allowed to use that class. However, I found an <code>IntHashtable</code> class in Apache-commons that was 99% similar to ACME's <code>IntHashtable</code>.</p>

<p><em>Verdict of the IP lawyers:</em> as the <code>IntHashtable</code> class from Apache was available under the ASL, I was allowed to use it. I replaced the ACME class by the Apache class. It was 99% similar, but the former wasn't acceptable from a legal point of view, whereas the second got the approval from the lawyers.</p>

<p><strong>Example 4:</strong> I used a Quick-and-Dirty XML Parser example from a JavaWorld article.</p>

<p>I didn't read the fineprint that said:</p>

<blockquote>
  <p>All contents of JavaWorld, including text, programs, applets, source code, and images are copyrighted and owned by IDG or the copyright holder specified, all rights reserved. No material may be reproduced electronically or in print without written permission.</p>
</blockquote>

<p>In this situation, JavaWorld was like your ACME company, and I was like your Han, although I had no criminal intentions: I was just ignorant. I took copyrighted code from a magazine example, and I released it as open source software. I should have asked permission before I did this.</p>

<p><em>Verdict of the IP lawyers:</em> ask and get permission. This was a no-brainer. Permission was granted immediately, both by JavaWorld and the author of the article and the code sample.</p>

<p><strong>Summarized:</strong></p>

<p>In your example, Han is doing something that is not allowed: he is publishing copyrighted work as if it were open source software. He can be sued and he will have to pay for all the damages that arise from distributing the code as open source software.</p>

<p>If somebody else, for instance Luke, downloads that software and starts using it, he is doing so in good faith. Usually, Luke won't be sued (or if he's sued, he'll win because he can prove that he didn't know he was doing anything wrong), but <strong>this doesn't mean that Luke can continue using that software. Acme can demand that he either stops using the software, or that he gets a license.</strong> I'm pretty sure that Luke can also sue Han for the damages, for instance if Luke suddenly has to start paying Acme for his use of the software.</p>

<p>In my case, I removed some code from my code base entirely (see example 1), I made small adjustments (see example 2), I refactored my code (see example 3) or I asked and received permission (see example 4). There is no general rule. It depends from case to case.</p>

<p><strong>Morale:</strong> Don't use open source software of which the origin is shady. Try to establish a business relationship with the open source vendor distributing the code. That way, you are protected against situations like this.</p>
","437"
"What is derivative work? What is ""build upon""?","746","","<p>I have been reading up on Open Source licensing, but there is this one term that I think needs clarification: <strong>when is work derivative?</strong></p>

<p>If I have an image viewer that accepts a ZIP file and I decompress it with an open source library under Creative Commons licensing, then I see two possible interpretations of the terms:</p>

<ul>
<li>Adaptations that I make to the ZIP file library should be shared with the world.</li>
<li>I need to share my entire application with the world.</li>
</ul>

<p>Before answering with ""copyleft owns all"" or marking this as a duplicate, I would like to stress that the point of the question is that the remainder of the application is not attempting to solve a ZIP problem. The domain changes. 
It is assumed that if I have to solve some ZIP bugs in the original library, then those bug fixes should be shared.</p>

<p>For instance, here on Stack Overflow, every submitted code is licensed under Creative Commons license. However, if I have a problem and then get a response containing code, but find that I have to tweak it a bit in order to properly <strong>solve the stated problem</strong>, I think it would be practical that the ""ShareAlike"" caveat be solved by me sharing the end result in the same thread.
Not my entire application, but the best possible answer to the problem.</p>

<p>I think clarification of these terms is the key question regarding open source licensing, and I can't see it addressed anywhere. If I use a matrix transformation math library and I expand upon it and then use it in a biology categorization algorithm, I would say that my extension to the matrix library is ""building upon""/""derivative"" work (and subject to licensing terms), whereas the biology code isn't. </p>

<p>Have I missed somewhere where this specific question has been addressed?</p>
","<p>The concept of a derivative work isn't a software concept, nor a Creative Commons one - it's fundamental to the idea of copyright, preceding the invention of programmable computers by many years.  The <a href=""https://en.wikipedia.org/wiki/Copyright_Act_1911"" rel=""nofollow noreferrer"">Imperial Copyright Act of 1911</a>, for example, reserved (<em>inter alia</em>) to composers the sole right of adapting their compositions for use upon mechanical instruments, which to me is a clear example of control of derivative works.  The question of what constitutes a derivative work is also not one with a single, settled answer, as it varies from jurisdiction to jurisdiction, and it varies over time as case law helps to nail down the edges.  Also, IANAL/IANYL.</p>

<p>That said, it's reasonably clear and well-accepted that if you start from someone else's codebase to build your code, or you include a substantial chunk of someone else's code in your code, your work <em>in its entirety</em> becomes a derivative of theirs.  You will need permission to do this, and if you get that permission by means of a copyleft licence, you may need to fulfil certain conditions.</p>

<p>If you write code that forms part of an executable program by statically linking into someone else's library, the question of whether your work is a derivative of theirs is less clear-cut.  If the linking is dynamic, it is even less clear; we have summaries of the arguments <a href=""https://opensource.stackexchange.com/questions/1187/what-are-the-arguments-for-considering-dynamic-links-to-constitute-derivative-wo"">for</a> and <a href=""https://opensource.stackexchange.com/questions/1188/what-are-the-arguments-for-considering-dynamic-links-to-not-constitute-derivat"">against</a>.  But if your work is a derivative of theirs, then it is so in its entirety.</p>

<p>You ask whether you create derivative works</p>

<blockquote>
  <p>if I use a matrix transformation math library and I expand upon it and then use it in a biology categorization algorithm</p>
</blockquote>

<p>I agree that your improved library is very likely a derivative of the original library code, but since you don't say <strong>how</strong> you would use it in the biology algorithm (by which I assume you mean an <em>implementation</em> of an algorithm, since algorithms themselves probably aren't copyrightable) it's impossible to speculate about derivative status.</p>
","6428"
"Can I charge expenses for a work under CC BY-NC-SA?","743","","<p>I have a 3d printer that I use to print some models. There is a model I like that is licensed in Creative Commons under <a href=""http://creativecommons.org/licenses/by-nc-sa/3.0/"">the Attribution - Non-Commercial - Share Alike</a> license.</p>

<p>I am not sure what ""Commercial purposes"" are.</p>

<p>My questions are:</p>

<ul>
<li>Can I sell it? (I guess the answer is no)</li>
<li>If someone wants me to print a  model for them, can I charge the expenses I have (material, post charges)?</li>
<li>Can I contact the owner to agree a deal to sell it? Will he be able to grant me permission to sell or he has lost the control?</li>
</ul>
","<p>The CC NC clause is really hard to get a grasp on, and Creative Commons do not provide much guidance about it.</p>

<p>There certainly exists a lot of examples where it is not possible to give a straightforward about exactly <em>what</em> is commercial use.  For an example of such a situation, see my answer to this question: <a href=""https://opensource.stackexchange.com/questions/1244/using-cc-nc-material-inside-a-freemium-app"">Using CC-NC material inside a freemium app</a>.</p>

<p>That being said, I don't see why there is a need to cop out of <em>every</em> question about the NC clause by simply saying that it isn't clear.</p>

<p>Sometimes it <em>possible</em> to give a straightforward answer. Then we should.</p>

<p>AFAIK, there is almost no case law about the NC clause.  This means that it isn't often contested. In most cases, people are able to figure out if it applies or not, and do the right thing.</p>

<p>This question is one where I think it is reasonable to provide a straight answer.</p>

<p>The legal code defines ""Non-Commercial"" as:</p>

<blockquote>
  <p>not primarily intended for or directed towards commercial advantage or monetary compensation</p>
</blockquote>

<p>That means that you cannot sell it for an amount of money that will make you a profit.</p>

<p>As for <em>someone</em> asking you to print a model, you can obviously get compensated for your direct outlay in materials, but if you make a profit by providing this service, you're breaking the license.</p>

<p>Until October 2008, the CC FAQ provided a much more <em>detailed</em> guidance on how to understand the ""NC"" clause than the present, deliberately vague FAQ, does.</p>

<p>The old FAQ discussed a scenario where a commercial print copy shop were charging the <em>commercial rate</em> for the service of making copies of some materials licensed under CC BY-NC, and concluded that this was not allowed. However, if a commercial print shop agreed to just charging its own costs for the same operation, then it would be OK.</p>

<p>While this specific example has since been removed from the CC FAQ, I think it still applies.</p>

<p>As for the owner <em>allowing</em> you to sell it: Yes. CC is not an exclusive license.  As with all CC licenses, can always ask copyright owners for an alternative licensing arrangement.</p>
","1507"
"When is my project a derivative work in an interpreted language?","741","","<p>With compiled languages, I understand when a work is considered derivative of another and thus, a license such as the GNU GPL covers the whole work.</p>

<p>However, with interpreted languages such as PHP or Python, I am not so sure.  If I find a library online that is covered under the GNU GPL v2 or later and I use this library in my PHP/Python/Ruby/... project, does the GNU GPL cover the whole work?</p>

<p>What about if I subclass classes from that library?  Are those subclasses covered by the GNU GPL?  Is the code that then uses those subclasses also covered by the GPL?</p>
","<p>A derivative work is a work <em>based on</em> or <em>derived from</em> one or more already existing works.</p>

<p>In the arts, common derivative works include translations, musical arrangements, motion picture versions of literary material or plays, art reproductions, abridgments, and condensations of preexisting works.</p>

<p>In programming, as well as in the arts, a derivative work is a “new edition” of a preexisting work in which the editorial revisions, improvements, elaborations, or other modifications that is present in <em>the whole work</em> (i.e. the end result of combining all the different parts together to create a public facing work).</p>

<p>Given the above definition, it should not make any difference if the programming is compiled or interpreted.    If you find a library online that is covered under the GNU GPL and you use that library in your PHP/Python/Ruby/... project in such a way that a (non trivial) part of the  <em>functionality</em> your project depends on said library, then the project is a derived work of that library, and the whole work must be licensed under the GNU GPL.</p>

<p>The idea that the <em>software architecture</em> (dynamic vs. static linking, late binding (""plugin"") vs. compiled, subclassing, etc.) are analytically unhelpful and misleading in answering the derivative work question.</p>

<p>The following quote from Eben Moglen and Mishi Choudhary: <a href=""http://www.softwarefreedom.org/resources/2014/SFLC-Guide_to_GPL_Compliance_2d_ed.html"" rel=""nofollow"">Software Freedom Law Center Guide to GPL Compliance 2nd Edition</a> addresses this concern:</p>

<blockquote>
  <p>The GPL licenses, then, are explicit about limiting the scope of copyleft to the scope of copyright. They do not, however, as is sometimes suggested, do so in a way that distinguishes “dynamic” from “static” linking of program code in “early-binding” programming languages. It is occasionally suggested that a subroutine “dynamically” linked to GPL’d code is, by virtue of the linking alone, inherently outside the scope of copyleft on the main work. This is a misunderstanding. When two software components are joined together to make one work (whether a main and some library subroutines, two objects with their respective methods, or a program and a “plugin”) the combination infringes the copyright on the components if the combination required copyright permission from the component copyright holders, and such permission was either not available or was available on terms that were not observed.</p>
</blockquote>

<p>So to answer the derivative work question, we need to examine whether combining two works together would infringe copyright (<em>unless</em> permission to create the combined work was granted by the GPL).</p>

<p>The answer to this question cannot be found by examining the software architecture of the composite work.  Instead, we need to look at the actual components, and to what degree one components <em>depends</em> on the other to create a functional, whole work.</p>

<p>The question asks specifically about class hierarchies: If a subclass builds on a very generic class (e.g. Java's top level ""Object class) and that subclass adds substantial functionality to the work that is not present in the generic class, it is <em>unlikely</em> that the subclass will infringe the copyright of the generic class, because such a generic class is not copyrightable.</p>

<p>In other cases, a class may be considered copyrightable, but the courts may decide that linking should be considered fair use.</p>

<p>And yet in other cases, if one were to subclass a very rich and functional class, for instance a class that provides checkout and payment in e-commerce context, it is very likely that such use would require permission from the copyright holder, and as a result, a subclass of this as part of an e-commerce application or website would in this particular situation, be considered a derivative work.</p>
","1580"
"GPL v3 ""convey"" vs. GPL v2 ""distribute""","740","","<p>I've noticed that the <a href=""https://www.gnu.org/licenses/gpl.html"">GNU GPL version 3</a> uses the word ""convey"" where <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"">version 2</a> used ""distriubte"":</p>

<p>GNU GPLv3:</p>

<blockquote>
  <p>To “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p>
</blockquote>

<p>GNU GPLv2:</p>

<blockquote>
  <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p>
</blockquote>

<p>Is “convey” in GPLv3 the same thing as what GPLv2 means by “distribute”?</p>
","<p>The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#ConveyVsDistribute"" rel=""nofollow"">GPL FAQ</a> states:</p>

<blockquote>
  <p><strong>Is “convey” in GPLv3 the same thing as what GPLv2 means by
  “distribute”?</strong></p>
  
  <p>Yes, more or less. During the course of enforcing GPLv2, we learned
  that some jurisdictions used the word “distribute” in their own
  copyright laws, but gave it different meanings. We invented a new term
  to make our intent clear and avoid any problems that could be caused
  by these differences.</p>
</blockquote>

<p>So yes, they mean basically the same.</p>
","959"
"Does using Eclipse wizards to generate code make my software a derivative?","738","","<p>I am using Eclipse to code my program. After doing research on the Eclipse website I found that there was no clear answer to my question. </p>

<p>My issue is that I need to be able to license my software and have NO restrictions as to how I license it. But throughout the development of my software I have used wizards to generate some of my code numerous times.</p>

<p><strong>My question:</strong></p>

<p>By using these wizards, does this mean that my software is now a derivative of Eclipse? </p>

<p>I have done a bunch of research, all I could find was an indefinite answer. </p>
","<p>Eclipse has it's own license, the Eclipse Public License. It's very difficult to find, but you can find this in Section 29 <a href=""https://eclipse.org/legal/eplfaq.php#EXAMPLE"">here</a>:</p>

<blockquote>
  <p><strong>Many Eclipse tools and wizards use code templates which are included in the application that is generated. Is the code generated by these tools considered a derivative work that must be licensed under the EPL?</strong></p>
  
  <p>Unfortunately, there is no clear answer to this question. To the extent that the code generated by a wizard is purely functional in nature and therefore not the proper subject matter for copyright protection, it could be argued that it is not subject to copyright protection, and therefore is not a derivative work. An example of that type of code would include calls to APIs or other technical instructions which are dictated by functional or technical requirements. Moreover, to the extent the generated code is a very small part of the final overall work, there is an argument that such use would be di minimus, and the final product or application should not be considered to be a derivative work. Finally, to the extent developers who use the generated code make many changes and additions to the code, there is also an argument that the resultant application is not a derivative work. Of course, these are just arguments and not ""bright line"" tests, and therefore each position could be subject to differing viewpoints. Eclipse cannot take a position on this issue, as it will ultimately be a question of the facts and circumstances associated with a particular use.</p>
</blockquote>

<p>Reading this, you can easily determine that any generated code is only functional in nature, and will consist a tiny fraction of your final project. Therefore, using the code generated by the Eclipse Wizards will not make your software a derivative of that. Don't worry, you can calm down! You're safe now! :)</p>
","1332"
"How can I find usage statistics for an open source project?","719","","<p>Put simply, is there any way to find out how widely used a given open source project is? </p>

<p>Say, for example, I am looking for a serialization library. I can imagine various metrics to help choose among the many available, but a major one would be, ""How widely used is this?""</p>

<p>Wide adoption tends to suggest either a very mature project, or one with a very active community.</p>

<p>For Python, <a href=""https://pypi.python.org/pypi"">PyPI</a> at least provides download statistics. On GitHub you can see the number of forks as a guideline.</p>

<p>For a developer embarking on a new project, and wanting to leverage an OSP, this type of information is very valuable in making their choice.</p>

<p>The open source movement is not just about publishers, but consumers as well.</p>
","<p>There's no way of actually tracking down usage statistics without compromising the privacy of its users. Hence why it is impossible to properly see which Linux distribution is the most popular one (using this as an example).</p>

<p>You could use some analytics like the number of downloads, the number of stars on GitHub, or the number of contributors to the project, but those analytics can in no way properly determine how broadly is the open source project actually used.</p>

<p>But it might be possible to do so for the corporate environment in some cases. Open source projects could theoretically keep a list of organizations using their product. Also, if the project is mentioned multiple times in the media, there's a higher chance that there are many users using it.</p>
","90"
"How do I deal with (enthusiastic) contributors who damage more than they help?","719","","<p>From time to time, an open source project will attract contributors who have a lot of enthusiasm, but lack skill, knowledge (or patience to know the project). These contributors can cause clutter, put off other contributors or sometimes directly harm the project.</p>

<p>Presuming that this contributor is actually harming the project in some way (which might not always be the case), what is the best way to deal with them. Preferably in a way that doesn't hurt anyone's feelings, appears professional and benefits everyone involved (if at all possible).</p>

<p>I'd like any answer to this question to discuss projects with different ways of contributing. (Direct commits, pull requests, ...)</p>
","<p>Linus Torvalds has talked about his experience on this subject; the book <a href=""http://producingoss.com/"">Producing Open Source Software</a> also has <a href=""http://producingoss.com/en/difficult-people.html"">a section that deals with difficult people</a>, which is mostly related. If you want to read more, look these up.</p>

<ul>
<li><p><strong>Maintain control.</strong> How is it possible that contributors can do damage in the first place? Did you give them commit privileges without them demonstrating trustworthiness and aptitude beforehand?</p>

<p>Open source doesn't mean you give away all the keys to the world; that's an invitation to disaster. You are still responsible for nurturing a community and directing the project in right directions. The most successful open source projects are very authoritarian at the topmost levels, as this makes decision making faster and easier, especially for the difficult decisions for the greater good that hurt a minority in the process.</p>

<p>There is a term called <a href=""http://producingoss.com/en/social-infrastructure.html#benevolent-dictator""><em>Benevolent Dictator</em></a> which is an example of this fact. This is where an individual wields final decision-making power over the entire project, much like a dictator. The reason why this often works is that open source projects are perpetually under threat of being superseded by a superior fork, so the dictator often acts in a manner that is beneficial to the project as a whole, hence the ""benevolent"" part.</p>

<p>Just because your project may be large and has lots of contributors, doesn't mean you give them all commit privileges. Take a look at the <a href=""https://github.com/torvalds/linux/commits"">linux commits</a>; although hundreds of people contribute code, they are being merge-committed by a handful of people only.</p>

<p>So don't give out privileges willy-nilly, keep the means to limit disruptive behaviour like spamming and being rude in forums.</p>

<p>In the <a href=""http://producingoss.com/en/difficult-people.html#difficult-people-case-study"">case study of the producingoss book</a>, a loquacious mailing list poster backed down after being threatened with being filtered. Method matters a lot but the important point is that you need to be able to control and limit problematic people's actions.</p></li>
<li><p><strong>Set expectations, communicate early and often.</strong> When a project starts, many things are ambiguous or only known by the founders. When you start getting outside contributions, you will inevitably run into issues like coding style, naming conventions, testing procedures and so on. If there are differences, you should have conversations about these early, and set up policies and guidelines if necessary. This is not so much about having something to bash over the heads of people, but more about <em>setting expectations</em> for contributors.</p>

<p>Be open to communications, and be proactive. If someone wishes to contribute, talk to them to make sure they understand what the expectations are, and how to improve the chances of their contribution being accepted. One of the worst things that can happen is that this is not made clear, and a contributor works in the dark for months, to contribute a giant changeset that is broken and unsalvageable. This is a big waste of time and leads to hurt feelings all around. Linus talks about having a similar experience in <a href=""https://www.youtube.com/watch?feature=player_detailpage&amp;v=MShbP3OpASA#t=2141"">this video here</a>; it shapes why he is so blunt and rude.</p>

<blockquote>
  <p>""...I've literally had developers who were working on things that I didn't really like, but I didn't shut down early enough. They worked on it for a long time; they felt that it was ready, they submitted it to me, and I said ""no this was horrible"" because at that point I had to make a decision. And at least in one of those cases I had some other friends basically email me later and saying ""the guy is suicidal"".""</p>
</blockquote>

<p>Hopefully you will encounter much less drama than this, but you should still keep an eye out for what contributors are doing. If they go dark check up on them, make sure they are not going down the wrong path.</p></li>
</ul>
","417"
"Using Neo4j Community edition in commercial applications","718","","<p>I am not sure about what is allowed license-wise in the use of Neo4j Community Edition.</p>

<p>Can i use it in closed-source commercial applications ?</p>

<p>What i'm allowed to do with the community edition in production ?</p>
","<p>Neo4j Community Edition <a href=""http://neo4j.com/licensing/"" rel=""nofollow"">is licensed</a> under <a href=""http://www.gnu.org/licenses/quick-guide-gplv3.html"" rel=""nofollow"">GPLv3</a>. </p>

<p>Talking about ""commercial"" vs. ""non-commercial"" when it comes to GPL software is very misleading, because the GPLv3 does not make a difference between doing things for money and doing things for free. However, its copyleft conditions might not work well with <em>your</em> particular business model. You are not revealing what that business model is, though, so we can only speculate if the license would work with it or not.</p>

<p>The GPLv3 only covers <em>distribution</em>. That means when the product only runs internally on your company servers, the GPL does not interfere with your business at all. It only gets relevant when your application is distributed to end-users. </p>

<p>This is also explained in the article I linked above:</p>

<blockquote>
  <p>If you’re building a database application that will run inside your organization (or for your personal use), then you are free to use Community Edition, whether or not your software is closed source. A very close analogy is MySQL®, which is also licensed under the GPL. </p>
</blockquote>
","2781"
"Publishing software as open source while keeping an API key secret","716","","<p>I have a project that I want to release as open source. However, the project interacts with some external web-based API that requires a key (issued by API owners specifically for the project), that should be kept in secret as said in the external API docs. </p>

<p>If I publish the project as is, I will show my key and, thus, it might get invalidated. </p>

<p>Is it legal to publish the project under open source license excluding the key?</p>
","<p>If it is your project and doesn't include any external code, you can do what you want with it.</p>

<p>You can release it with a license that only allows near-sighted monkeys to use it while hanging from a tree. You can even publish the source under dozens of different licenses, each contradicting all others.</p>

<p>The license is only important if you gave the code to someone (e.g. by putting it on the web with some license and someone downloaded it). The one who GOT the software then has to conform to the license.</p>

<p>So for you this is only important, if you use code in your project you didn't create yourself. You then have to conform to all the licenses of the code you use.</p>

<p>Some licenses you might use have additional restrictions on the text of the license itself. Sometimes you cannot copy parts of the license text only or add additional clauses. I am not aware of any license that puts restrictions on the IP you license with it.</p>

<p>But no matter what license you release your code with, you still retain all rights. Even if you release your code with a AGPLv3 license, you can still make modifications, keep them closed, sell them, etc. <strong>as long as you don't use contributions from other people in your code</strong>. Otherwise the common practice of releasing code under some open source license while also selling commercial licenses wouldn't work.</p>
","1310"
"Can hardware have a license?","713","","<p>I was reading a previously asked question, <a href=""https://opensource.stackexchange.com/questions/261/can-i-distribute-related-software-and-hardware-under-the-same-license"">Can I distribute related software and hardware under the same license?</a>, and then it occurred to me that hardware might have patents. </p>

<p>Does this mean that you can't release hardware under, let's say, a Creative Commons license?</p>
","<p><strong>Yes.</strong></p>

<p>Examples include:</p>

<ul>
<li>Chumby HDK<sup>1</sup></li>
<li><a href=""http://www.tapr.org/ohl.html"">The TAPR Open Hardware License</a><sup>1</sup></li>
<li>The MIT License<sup>2</sup></li>
<li>Various BSD licenses<sup>2</sup></li>
<li>Creative Commons Attribution 3.0 and Creative Commons Attribution ShareAlike 3.0<sup>2</sup></li>
<li>GPL<sup>2</sup></li>
</ul>

<p>Note that the last four can also be used for software. None of the examples given are exclusively for hardware, with the exception of the TAPR Open Hardware License.</p>

<p>So you can, in fact, release hardware under a Creative Commons license!</p>

<hr>

<p><sup>1 This was given as an example <a href=""http://www.ladyada.net/library/openhardware/license.html"">here</a>, though not necessarily endorsed.</sup>
<br>
<sup>2 These were described and compared <a href=""http://www.inmojo.com/licenses/"">here</a>.</sup></p>
","316"
"Should I feel guilty for one off contributions?","694","","<p>If I contribute some code to an open source project, ought I to continue to work on that project? If I don't have the time to continue as a regular contributor, should I avoid starting?</p>

<p>As an analogy, charities seeking funding often state that one off donations are not useful and they prefer a fixed ongoing regular payment that they can plan around. Does the same apply to contribution of time to an open source project?</p>
","<p>One-off contributions are the most common type of contribution in open source projects. It would be very disturbing to know that, by running an open source project, I'm spreading guilt throughout the world! Fortunately that's far from the truth.</p>

<p>From experience, one-off contributions are almost always useful, even if about half the time the contributions aren't incorporated as-is. This is because:</p>

<ul>
<li>Contributions come from super-users, users who care enough about the project to reach out with free work. Contributors, through their contributions or follow-up conversations, provide a valuable window into what super-users want out of the project. Open source, and free (gratis) software in general, suffer from this problem where creators are out of touch with users. Unlike paid software, there is no easy trail for creators to find out who their users are and what they're like. Market research is <em>hard</em>. <strong>Every contribution is a data point</strong>.</li>
<li>One-off contributions are usually simple and small, and something I missed despite this. Why? Because it's an <strong>edge case I didn't consider</strong>. Because it's <strong>for a platform I didn't port to</strong>. Because it's a <strong>hole in my testing procedures</strong>. Because it <strong>scratches an itch I didn't have</strong>. Because it's an <strong>issue I wasn't skilled enough to resolve</strong>. Whatever it is, addressing it improves the polish of the project. Polish isn't a single feature, it is smoothing out thousands of rough edges, which is better addressed by multitudes of users providing feedback and sometimes contributions.</li>
</ul>

<p>In my experience, one-off contributions provided much more value than the changeset alone, and they were useful even if I rejected the contribution. Here are some examples:</p>

<ul>
<li>Very minor formatting improvements to the readme. This taught me some Markdown tricks and got me thinking about how to better structure the readme to address its readers, to become a better writer.</li>
<li>A collection of bug reports around a common module. This alerted me to some poor code design, which motivated me to perform rewrites, greatly reducing the defect rate of future releases.</li>
<li>A number of change requests to the build script. Even though I rejected all these because it turns out they didn't follow the instructions 100%, I eventually simplified the build process.</li>
</ul>

<p>Without a doubt, one-off contributions helped me steer the project, improving their popularity and usefulness, as well as greatly improving my breadth of skills. If anything, the guilt is all on my end as I had to say no on occasions.</p>

<p>Also, the charity analogy is flawed; I think you've been duped by unscrupulous charities that want to guilt people into donating more. One-off donations are less useful but not entirely without value.</p>
","761"
"Hardware with GPL firmware","688","","<p>I would like to know if selling a hardware product which runs a firmware is considered as conveying that firmware.</p>

<p>For example, if I want to use a GPLv3 library statically linked with my own code, I am required to inform the costumers that buy my products that they are running GPLv3 software? And licensing also my code as GPLv3? In such case, how I must inform them?</p>

<p>Note: the product firmware can be updated using the programming tools of the microcontroller, which loads the software into the microcontroller's flash memory.</p>

<p>And about a different but similar case: if I decide to employ uCLinux (a linux version for embedded products), can I ship the product with close source programs, which will run over the uCLinux OS, and offering the source code of uCLinux only?</p>
","<blockquote>
  <p>I would like to know if selling a hardware product which runs a firmware is considered as conveying that firmware.</p>
</blockquote>

<p><strong>Yes.</strong> The binaries are inside the device and are therefore redistributed with the device aka. conveyed.</p>

<blockquote>
  <p>For example, if I want to use a GPLv3 library statically linked with my own code, I am required to inform the customers that buy my products that they are running GPLv3 software? </p>
</blockquote>

<p><strong>Yes,</strong> notification is the essence of most open source licenses including the GPL.</p>

<blockquote>
  <p>And licensing also my code as GPLv3? </p>
</blockquote>

<p><strong>Yes,</strong> when linking code (statically or dynamically) with GPL-licensed, the copyleft of the GPL would typically apply to my code and should be made available under the GPL or a GPL-compatible license and treated as GPL-licensed. You can also find more details on dependencies in this <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc/4315#4315"">answer</a>:</p>

<p><code>For Copyleft licenses, how (proprietary- or non-Copyleft- licensed) programs and Copyleft-licensed programs are used together, how they depend and interact with each other is the essence of what triggers the Copyleft clauses of the GPL and LGPL.</code></p>

<p>In the case of the GPL, I consider any linking as an ""intimate"" relationship where the copyleft would apply and extend to the caller.</p>

<blockquote>
  <p>In such case, how I must inform them?</p>
</blockquote>

<p>This can take several forms such as notifying in the UI (if my device has such a thing) or the documentation. It should contain at least a notice and the text of the GPL. See also this answer (of mine) on: <a href=""https://opensource.stackexchange.com/questions/4577/does-gplv3-require-attribution/4582#4582"">Does GPLv3 require attribution?</a></p>

<blockquote>
  <p>And about a different but similar case: if I decide to employ uCLinux (a linux version for embedded products), can I ship the product with close source programs, which will run over the uCLinux OS, and offering the source code of uCLinux only?</p>
</blockquote>

<p><strong>Yes</strong>, if my closed source code runs in userspace, this is considered a normal usage of the OS and I can use any license I please.</p>

<p>Linux (the Kernel) uses the GPL 2.0 with an <a href=""https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/COPYING?id=refs/tags/v4.9-rc2"" rel=""nofollow noreferrer"">extra statement</a> per this <a href=""https://opensource.stackexchange.com/a/4689/947"">answer</a>:</p>

<p><code>NOTE! This copyright does *not* cover user programs that use kernel
 services by normal system calls - this is merely considered normal use
 of the kernel, and does *not* fall under the heading of ""derived work"".
 Also note that the GPL below is copyrighted by the Free Software
 Foundation, but the instance of code that it refers to (the Linux
 kernel) is copyrighted by me and others who actually wrote it.
</code></p>

<p><strong>No</strong>, if my closed source code runs in kernelspace, then the consensus is that this code should be licensed under a GPL or GPL-compatible license and treated as GPL-licensed.</p>

<p>And of course my device would typically combine both userspace and kernelspace code so a bit of both may apply.</p>
","4721"
"Can I distribute unmodified GPLv2 binaries without the source code?","684","","<p>If I distribute someone else's unmodified GPLv2 software as a part of my product, what obligations do I have regarding source code distribution? </p>

<p>Do I have to host the source independently and provide it on request, or can I simply include the copyright notice from the software in question (which explains how to obtain the source code from the original author) and be done with it?</p>
","<p>This is covered in section 3 of the GPL, version 2:</p>

<blockquote>
  <ol start=""3"">
  <li><p>You may copy and distribute the Program (or a work based on it,
  under Section 2) in object code or executable form under the terms of
  Sections 1 and 2 above provided that you also do one of the following:</p>
  
  <p>a) Accompany it with the complete corresponding machine-readable
  source code, which must be distributed under the terms of Sections
  1 and 2 above on a medium customarily used for software interchange; or,</p>
  
  <p>b) Accompany it with a written offer, valid for at least three
  years, to give any third party, for a charge no more than your
  cost of physically performing source distribution, a complete
  machine-readable copy of the corresponding source code, to be
  distributed under the terms of Sections 1 and 2 above on a medium
  customarily used for software interchange; or,</p>
  
  <p>c) Accompany it with the information you received as to the offer
  to distribute corresponding source code.  (This alternative is
  allowed only for noncommercial distribution and only if you
  received the program in object code or executable form with such
  an offer, in accord with Subsection b above.)</p></li>
  </ol>
</blockquote>

<p>If you qualify for section 3c, then you can just forward the offer to distribute source code that you yourself received along with the binary you're using. Otherwise you need to take care of distributing the source code yourself (or keeping it available to satisfy users taking up your written offer).</p>

<p>Note that by forwarding users to the original author's copy of the source code, you're tying your ability to distribute your software to the continued availability of that copy. It seems safer to me to just distribute the source code along with the binary and be done with it!</p>
","5107"
"Rules/Guidelines about forking a project vs. creating a new one?","684","","<p>After reading these lines:</p>

<blockquote>
  <ul>
  <li>make a new github project (not a fork).  </li>
  <li>merge in the original repository.</li>
  </ul>
</blockquote>

<p><a href=""https://opensource.stackexchange.com/a/1755"">In this Answer</a>, I was wondering if there are any rules or guidelines when to fork a project and when to create a new one. If this turns out to be just a matter of personal taste: what are the advantages and disadvantages of both approaches that one should keep in mind.</p>

<p>Since we are talking about open source projects, I think we can assume that either both or none of the approaches are permissible by the original license.</p>
","<p>You should (github) fork when:</p>

<ol>
<li>You intend on submitting pull requests back upstream. </li>
<li>The maintainer doesn't like your new feature set, so you decide to add them anyway, and maintain the fork in parallel, routinely merging in changes from upstream as an alternative to the main branch. (Note that you may be required to change the name due to trademark restrictions. I'm not real clear on this.)</li>
</ol>

<p>You should create a new project when:</p>

<ol>
<li>When a project is abandoned. </li>
<li>You want to use the project as a starting point for some other project with a completely different goal. </li>
<li>When your version of the project will not be regularly merging in changes from the original, upstream, branch. </li>
</ol>

<p>But that's honestly just my opinion on the matter. </p>

<p>The other important thing to note here is that both of these are technically ""forking"" the project. One just remains closer to the original project and utilizes the GitHub feature of the same name. </p>
","1937"
"What are the implications of the Google vs. Oracle case on the state of public APIs?","682","","<p>There is a case between Google and Oracle over the use of Java and it's standard library on the Google Android operating system. From <a href=""http://www.businessinsider.com/google-oracle-lawsuit-is-damaging-2014-5"" rel=""nofollow"">this article</a>:</p>

<blockquote>
  <p>To recap: Oracle accused Google of copying some of its Java computer code when it wrote Android. Android itself wasn't the issue. Android is different than Java. But Google wanted developers who work with Java, a popular language for web apps, to jump to Android. So it incorporated Java's application programming interfaces (APIs) into Android. This allowed them to quickly convert their apps to Android and it meant that the millions of programmers trained on Java would be familiar with Android, too.</p>
  
  <p>Oracle sued claiming that the APIs were copyrighted. But the judge ruled that APIs are not subject to copyright laws</p>
  
  <p>On Friday, an appellate court just overturned that loss, and said APIs are subject to copyright.</p>
</blockquote>

<p>If many popular APIs become subject to copyright laws and owned by the organizations that created them, how might this affect the projects that develop software applications that use these APIs, and how might it affect the Open Source industry at large?</p>
","<p>Just to make it clear, the Appeals court's May 9th, 2014 decision in Oracle vs Google apply made it clear that the <a href=""https://en.wikipedia.org/wiki/Structure,_sequence_and_organization"" rel=""nofollow noreferrer""><em>structure, sequence and organization</em></a> (SSO) of the 37 API interfaces Google had copied (in order to make existing software that was based on the copyrighted <em>Oracle JDK</em> work with Android) was subject to copyright.  This is not <em>new</em> case law, but follows from <a href=""https://en.wikipedia.org/wiki/Whelan_v._Jaslow"" rel=""nofollow noreferrer"">Whelan v. Jaslow</a> (1986).</p>

<p>Google <em>could</em> have adopted the API of the open source <em>OpenJDK</em> for Android, but choose not to do so, probably because most of the software that exists for mobile units assumes that <em>Oracle JDK</em> is available.</p>

<p>It should also be noted that this case has <em>not</em> been finally decided (what has been finally decided is that an API is <em>still</em> protected by copyright).</p>

<p>If we look at the <a href=""https://scholar.google.com/scholar_case?case=15197092051369647665&amp;hl=en&amp;as_sdt=6&amp;as_vis=1&amp;oi=scholarr"" rel=""nofollow noreferrer"">actual decision that Oracle America, Inc. v. Google Inc., 750 F. 3d 1339 - Court of Appeals, Federal Circuit 2014</a>, we see that the jury could not agree on Google's fair use defence:</p>

<blockquote>
  <p>Because the jury deadlocked on fair use, we remand for further consideration of Google's fair use defense in light of this decision.</p>
</blockquote>

<p>The ""fair use"" decision was passed on for the Supreme Court to decide, and the Supreme Court decided to return this decision to the Federal Circuit Court in San Francisco, where Google will get a new chance to argue that its use of the API will be allowed as fair use.</p>

<p>If I were a betting man, I would put my money on <em>Oracle</em> in this upcoming trial. While I think ""fair use"" will apply in <em>most</em> uses of a protected API by free software, Google choose to incoroporate the copyrighted API of the <em>Oracle JDK</em> in a <em>commercial product</em>.  Commercial use is seldom considered fair use. Google's decision to use <em>Oracle JDK</em> also made Android interoperabile with the proprietary <em>Oracle JDK</em> instead of the open source <em>OpenJDK</em>. While use to create interoperability is <em>often</em> considered fair use, Google choose to create interoperability with a proprietary product in a situation when a free alternative existed.</p>

<p>So much for background about this ongoing litigation.</p>

<p>Going back to the actual question, which seems to be about whether  the Appeals court's May 9th, 2014 decision about API's being protected by copyright is going to cause adverse effects for innovation and interoperability for free software.</p>

<p>Personally, I think these fears are unwarranted. As already <a href=""https://opensource.stackexchange.com/a/988/606"">pointed out by bmargulies</a>:</p>

<blockquote>
  <p>Many common APIs are explicitly licensed permissively. </p>
</blockquote>

<p>The Oracle API, however, was <em>not</em> licensed permissively, and Google <em>choose</em> to not comply with the licensing terms.  That is rare situation and will probably not impact much of free software development.</p>

<p>The obvious impact of Oracle v. Google is that developers (including open source developers) need to consider the licensing of APIs, and either accept the <em>legal hazard</em> that follows from using a proprietary APIs without permission, or to make sure they have permission (either through the API license, or by asking the owner for an explicit permission to use the API).</p>
","1454"
"Can I license Python project under 3-clause BSD while it has GPL-based dependencies","680","","<p>I'm working on an open source Python project and we have plans to use GPLv2-licensed library <strong><a href=""https://github.com/LiuLang/python3-xlib"" rel=""nofollow noreferrer"">python3-xlib</a></strong>, but we will not distribute it with our library. So user can install it by <code>pip install our-lib</code> and the pip tool will install <strong>python3-xlib</strong> automatically. Or user can manually install <strong>python3-xlib</strong>.</p>

<p>I've read that 3-clause BSD license is an antidote for ""GPL-infected"" code. So is it possible to use BSD-licensed library in a proprietary solution? While it still uses GPL-licensed library as an external dependency (through Python import mechanism).</p>

<p>There is an example: <strong><a href=""https://github.com/asweigart/pyautogui"" rel=""nofollow noreferrer"">pyautogui</a></strong> looks licensed under 3-clause BSD, but it uses <strong><a href=""https://github.com/LiuLang/python3-xlib"" rel=""nofollow noreferrer"">python3-xlib</a></strong> as an external dependency on Linux. So <strong>can I use pyautogui in a proprietary solution? Can I use it internally in a corporation for testing a proprietary software?</strong></p>

<p>There are 2 similar questions:</p>

<ul>
<li><a href=""https://opensource.stackexchange.com/questions/35/if-i-include-some-gpl-code-in-my-project-can-i-release-it-as-bsd"">If I include some GPL code in my project, can I release it as BSD?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/1640/if-im-using-a-gpl-3-library-in-my-project-can-i-license-my-project-under-mit-l"">If I&#39;m using a GPL 3 library in my project, can I license my project under MIT license?</a></li>
</ul>

<p>Both answers are no. But all OPs are asking about including GPL-licensed code into their libraries distributions. Our library distribution will not include GPL-licensed code at all. It can just use it at runtime.</p>

<p>P.S. Of course, possible alternative is to avoid python3-xlib usage. But it requires a lot of time to re-implement the subset of that library.</p>
","<p>tl;dr: Some, including the Free Software Foundation (FSF, publishers of the GPL) says no, you can't do this. Others say yes, you can. </p>

<p>The FSF considers a work a single program if the parts communicate through function calls. If the software you publish is created to work with this GPL module. If that's the case, then you must publish the entire work under the GPL if you publish it.</p>

<p>Some have argued that if the parts are dynamically linked, you are not creating a derivative work, and you wouldn't have to comply with the GPL.</p>

<p>Yet others claim that it is a derivative work if it was created to work with the GPL module. In that case, you are also violating the license if publish it, but not under the GPL.</p>

<p>It is clearly the intention of the GPL not to allow this. If this is the actual effect remains an open legal question: this hasn't been fully tested in court. I would suggest to honor the intention of the copyright holders, just as you wouldn't like to have legal loopholes circumvent the intention of your propriety licensing. If I had to put money on the result of a lawsuit, my money is on that this wouldn't be allowed, but it could go either way.</p>
","2148"
"What legal meaning do GPL symbols hold in the linux kernel?","679","","<p>In the linux kernel, several symbols are exported with <code>EXPORT_GPL_ONLY</code>, and as a result are only available if your kernel module contains <code>MODULE_LICENSE(""GPL"")</code>.  Do either of those have any legal meaning?  Can I create a proprietary kernel module that uses gpl-only symbols?</p>
","<p>According to what Linus says his lawyers say, this is a means of ""codifying the intention in the code itself"", so it does have legal significance.</p>

<p>For more information, you should read the <a href=""https://lwn.net/Articles/154602/"" rel=""nofollow"">LWN.net article</a> itself, as well as <a href=""https://lwn.net/Articles/154603/"" rel=""nofollow"">Linus's response</a>.</p>

<p>Kernel modules depend on Linux's internal symbols to work, and it's uncertain whether they count as a derivative work of Linux, and therefore must be offered under a GPL-compatible license. The various <code>EXPORT_SYMBOL</code> macros are a way of signalling what a majority of kernel developers consider the boundary. So what does this  mean in practice?</p>

<ul>
<li>You can certainly circumvent this macro, for example by modifying Linux code and renaming all <code>EXPORT_SYMBOL_GPL</code> into <code>EXPORT_SYMBOL</code> and use the symbols in your GPL-incompatible kernel module, but then it would be easy to argue that you wilfully infringed on copyright, and will be liable for <a href=""https://en.wikipedia.org/wiki/Treble_damages"" rel=""nofollow"">treble damages</a>.</li>
<li>Conversely, if you only used the non-GPL symbols and were somehow taken to court, it will be easier to argue that you were given implicit permission.</li>
</ul>
","4189"
"Do I need a highcharts licence if I'm developing software for a non-profit","674","","<p>Highcharts is supposed to be an open source chart project that is free for personal use and for non-profit organisations. For non-profit organisations and individuals it is licensed under the <a href=""http://Creative%20Commons%20(CC)%20Attribution-NonCommercial%20licence"" rel=""nofollow noreferrer"">Creative Commons (CC) Attribution-NonCommercial licence</a></p>

<p>Now I'm in a situation that I am a software developer, developing software for an eligible organisation (non-profit, non-government since highcharts does not consider government organisations to be covered). Now as I understand it, this organisation does not need a licence for Highcharts and if I was an employee of this organisation I could just use highcharts to develop a Highcharts enabled website for them. </p>

<p>My questions are:</p>

<ol>
<li><p>Is my previous assumption that if an in-house team develops the organisation's website then a licence is not required correct?</p></li>
<li><p>If I am not an employee of of that organisation but I am just contracted <strong>as an individual</strong> to create and deliver a Highcharts enabled website for them, do I need to purchase a licence for Highcharts?</p></li>
<li><p>If I belong to a for-profit company which is contracted to develop a to create and deliver a Highcharts enabled website to a non-profit organisation, is a licence required in that case and if yes, what kind of licence (assuming that Highcharts is not generally going to be used by that company in any other projects or services)? </p></li>
</ol>
","<p>Firstly, IANAL/IANYL.</p>

<p>That said, <a href=""https://creativecommons.org/faq/#does-my-use-violate-the-noncommercial-clause-of-the-licenses"" rel=""noreferrer"">Creative Commons says</a> that the NC licence prohibits uses that  are ""<em>primarily intended for or directed toward commercial advantage or monetary compensation</em>"".  They go on to note that</p>

<blockquote>
  <p>CC's definition does not turn on the type of user: if you are a nonprofit or charitable organization, your use of an NC-licensed work could still run afoul of the NC restriction, and if you are a for-profit entity, your use of an NC-licensed work does not necessarily mean you have violated the term.</p>
</blockquote>

<p>So the answer to question one seems to me to be that it depends what the non-profit, through its development team, is using the software <em>for</em>.  If it's serving the non-profit's charitable purpose, then I suspect that is a lawful use under CC BY-NC.  If it's fundraising, this is arguably not lawful (<em>primarily intended for ... monetary compensation</em>).  My church rents its rooms out as a commercial proposition, and that activity would almost certainly not be lawful.</p>

<p>Questions two and three seem easier: your primary purpose in question two, and your company's in question three, are to make money, so the use under CC BY-NC is not lawful and in both cases a commercial license will need to be purchased.</p>

<p>In the end, CC advises that ""<em>you should either contact the rights holder for clarification, or search for works that permit commercial uses</em>"".</p>

<p>This is an excellent illustration of why non-commercial-only licences are not considered free.</p>
","5518"
"Can a mouse be ""free software""?","673","","<p>There are systems consisting of wholly free software, and in some cases the hardware is also driven by free software.</p>

<p>What about mice? Do mice have software on them which would make them ""nonfree""? I've plugged <a href=""http://support.logitech.com/product/mini-optical-mouse-plus"">this mouse</a> into Ubuntu, Debian and Trisquel Linux distributions and was never prompted to install any nonfree software, which leads me to assume that mice are generic and just send keycodes to the computer.</p>

<p>Computer Mice seem like trivial devices. But I do own <a href=""http://support.logitech.com/product/gaming-mouse-g500"">a more sophisticated mouse</a> which can be loaded up with macros, so it doesn't seem like mice are necessarily so trivial, and the software driving those macros is probably nonfree. Would using either of these mice exempt me from running a ""wholly free system""? (Or would the supposed triviality of such software--perhaps it is unable to make network requests, for instance--make it a non-issue?)</p>
","<p>Trivially, a mouse can't be free software, because a mouse is not software.</p>

<p>So what other questions could this be?</p>

<ul>
<li>Can a mouse's drivers be free and or open source software?</li>
<li>Can a mouse's design be free/open?</li>
<li>Can a mouse's firmware be free/open?</li>
</ul>

<p>To all questions, the answer is, obviously, yes, it can be. If there exist ""advanced"" mice with non-free firmware (the coding on the chips in the mouse), I don't know, but from a gut feeling* I assume it won't be all that many. The same goes for the design. I doubt many high-end manufacturers would go for an open design, as one of their main selling point often is their design.</p>

<p>As for the drivers, there usually exist free drivers all consumer peripherals.</p>

<p>*warning: answer contains a gut feeling. There are hardware manufacturers that embraced open technology, but it's not much, and ""gaming"" mice, the kind that usually have macros, are not generally closesly affiliated with the open source or free software movements. </p>
","1537"
"Are you obliged to enforce your license?","668","","<p>I've got a number of software projects, licensed under varying licenses. For simplicity, let's take one of them, licensed under the GPL.</p>

<p>Obviously, the GPL requires various things, and there may be occasions where people don't do all those things. If <em>I</em> notice those, I see two choices:</p>

<ul>
<li>Contact the relevant person with notification and request to comply;</li>
<li>Turn a blind eye.</li>
</ul>

<p>Fine, that's up to me. However, if <em>someone else</em> contacts <em>me</em> to say that they've found someone who's not complying with the GPL, does anything change? Does their involvement and thus the fact that I am proven to know about the license violation change how I can react? <strong>Am I, in this scenario, obliged to enforce my license by contacting the offending party?</strong></p>
","<h2>GPL</h2>

<p>The GPL license doesn't have any specific requirements to make you enforce the license and the copyright holder is the only person who can take any action.</p>

<blockquote>
  <p>The copyright holder is the one who is legally authorized to take
  action to enforce the license.</p>
  
  <p>(<a href=""http://www.gnu.org/licenses/gpl-violation.en.html"">Violations of the GNU Licenses</a> - GNU.ORG)</p>
</blockquote>

<h2>Copyright Law</h2>

<p>So only something in base copyright law could cause you to lose your rights from non-enforcement. Short answer: No, you won't lose your copyright if you do not defend it. That is something that applies to a trademark.</p>

<blockquote>
  <p>In the United States, if a trademark owner stops using a mark without
  intending to resume using it in the future, the mark will be deemed
  abandoned. Under U.S. trademark law, non-use of a trademark for three
  consecutive years creates a rebuttable presumption of abandonment of
  the mark (whether or not it is registered). Temporary or seasonal
  non-use of a trademark, particularly when such cyclical use is typical
  in an industry or market, generally does not constitute grounds for
  abandonment under U.S. law. Rather, periods of non-use must be
  accompanied by the “intent not to resume use.”</p>
  
  <p>In many other countries, grounds for abandonment depend solely on
  whether the mark at issue has been in use, without regard to the
  trademark owner’s intent. The period of non-use required to show
  abandonment of a mark typically ranges from three years (e.g., in
  Australia, Japan, South Korea, Canada, China, Russia and many Latin
  American countries) to five years (e.g., in various European
  countries, such as Ireland and Norway).</p>
  
  <p>(<a href=""http://www.inta.org/TrademarkBasics/FactSheets/Pages/LossofTrademarkRightsFactSheet.aspx"">Fact Sheet: Protecting a Trademark</a> - International Trademark Association). </p>
</blockquote>

<h2>Laches defense</h2>

<p>Another reason you may be unable to defend your IP rights after a long period of not enforcing it is what is called a <a href=""https://en.wikipedia.org/wiki/Laches_(equity)"">laches defense</a>. This is when there has been an unreasonable amount of time in pursing a claim. Laches is an affirmative defense and must be brought forth and proven by the defendant. The US Supreme court has stated that laches does not bar copyright infringement claims (<a href=""https://en.wikipedia.org/wiki/Petrella_v._Metro-Goldwyn-Mayer,_Inc."">Petrella vs MGM</a>).</p>

<blockquote>
  <p>The majority rejected those arguments, however, saying copyright law
  was clear in allowing lawsuits up to three years after an infringing
  act, setting up a rolling period for owners like Petrella to sue
  although they can only collect on profits earned during that
  three-year window.</p>
  
  <p>There is “nothing untoward” about waiting to see if an infringer’s
  investment paid off, Ginsburg wrote. In fact, the law  “allows a
  copyright owner to defer suit until she can estimate whether
  litigation is worth the candle.”</p>
  
  <p>The Supreme Court’s decision “brings certainty to this issue, which
  was unique in the Ninth Circuit,” said William Kane</p>
  
  <p>(<a href=""http://www.forbes.com/sites/danielfisher/2014/05/19/unusual-split-as-supreme-court-upholds-raging-bull-suit-vs-mgm/"">Unusual Split As Supreme Court Upholds `Raging Bull' Suit Vs. MGM</a> - Forbes)</p>
</blockquote>

<p>So there isn't anything different with someone telling you that someone has infringed on your copyright. You aren't required to enforce it. You can probably even wait and decide later that you want to enforce it but you can only do that within three years of the last infringing act and you can only expect damages based upon the last three years.</p>

<p>More useful info about copyright myths (including this): <a href=""http://www.templetons.com/brad/copymyths.html"">http://www.templetons.com/brad/copymyths.html</a></p>

<p>I Am Not A Lawyer... if you want real legal advice you should contact one.</p>
","1229"
"Custom docker images from official images license","663","","<p>This is a question regarding commercial use of customized offical docker images (like RabbitMQ, ELK etc.).  Are there any restrictions or limitations, for example if I code run scripts for RabbitMQ or ELK and repackage it into a custom docker image.  Does that mean I have to publish the image on DockerHub to be compliant? </p>

<p>As far as I can tell, the images are mostly under the Apache licence. One is LGPL, and two of them are under the MIT licence.</p>

<p>Not very clear and could not find anything in my searches.  Any input based on your experience would be great. </p>
","<blockquote>
  <p>As far as I can tell, the images are mostly under the Apache licence. One is LGPL, and two of them are under the MIT licence</p>
</blockquote>

<p>I would not make a confusion between the license of the Dockerfile and the license of the resulting images/image layers.</p>

<p>While the Dockerfile can use any license, the resulting image license will be likely more complex and based on the actual code that a whole exported image archive contains: you need to consider the whole stack of layers in that image, irrespective of the license of the Dockerfile and you cannot look only at the license of the top layers of your images.</p>

<p>For instance, if your image is based on Debian image and that you redistribute that image, you effectively redistribute a whole Linux environment in (mostly) binary form. The licenses in play are many and each have different requirements and will likely include L/GPL 2 and 3, several variants of BSD and MIT, Apache and more.</p>

<p>In effect, when you redistribute a Docker image archive, you become a Linux distributor.</p>

<p>For most licenses, you would need to provide some credits: while this is typically well handled by Debian distros, you are still obligated to ensure this is comprehensive and correct.</p>

<p>For any copyleft-license that require source code redistribution, you will need to ensure that you offer and can redistribute the ""corresponding source code"" including and not limited to the Linux kernel, the userland, etc.</p>

<p>If any layer contains only code using permissive licenses (say if a layer contains an ELK stack that you verified to be all Apache-licensed) you only need to comply with the requirements of the licenses of that layer for that specific layer, but you still need to comply with the license terms for the whole image.</p>

<p>And if you publish that image on the Docker hub or if you redistribute this image privately to your customers, your obligations stay the same (though their visibility is higher when published on the Docker hub). </p>

<blockquote>
  <p>However, to conform to the licensing agreements, is it as simple as packaging a license document with the image or is there another method?</p>
</blockquote>

<p>At a high level there are two things you need to do to comply with open source licenses:</p>

<ol>
<li><p>attribution and credits composed typically of the notices, copyrights and license texts</p></li>
<li><p>redistribution of source code for code that use a copyleft license (such as L/GPL)</p></li>
</ol>

<p>Including 1. in the image makes a lot of sense and is the simplest way. You need to be careful though as some ""official"" images are stripped from the original notices and license texts to make the image smaller (as for instance the CentOS images... (tst, tst) that used to be until recently missing even a basic GPL license text (See <a href=""https://github.com/CentOS/sig-cloud-instance-images/issues/34"" rel=""nofollow noreferrer"">this ticket for details</a> and the code that <a href=""https://github.com/CentOS/sig-cloud-instance-build/blob/69b7a7279398ab8f35e4816b2e0f63eaf94dcb54/docker/centos-6.ks#L81"" rel=""nofollow noreferrer"">deleted licenses here</a>). You could also include in the image and other docs how to get the corresponding sources (for 2.).</p>

<p>For 2. including the sources in the image is likely to be problematic size-wise. You could instead carefully inventory all the open source packages and code that are included in <strong>every</strong> layers of your images and then carefully collect the corresponding source code for all of these and make these available as a separate tarball, ideally at the same time a user would download my custom images. And eventually you could automate this process such that it happens on each re-build on your images. To make things simpler you could include the source code of <strong>every</strong> open source third-party code used in your images, even if some do not require source code redistribution.</p>
","4476"
"How can the Linux kernel's main.c file say that one of its copyrights is ""all rights reserved"" when it's GPL?","658","","<p>Just noticed this in the linux's kernel code <a href=""https://github.com/torvalds/linux/blob/master/arch/x86/boot/main.c"" rel=""nofollow"">main.c</a>:</p>

<pre><code> *   Copyright (C) 1991, 1992 Linus Torvalds
 *   Copyright 2007 rPath, Inc. - All Rights Reserved
 *   Copyright 2009 Intel Corporation; author H. Peter Anvin
</code></pre>

<p>How do they apply to the kernel? It seems really strange to me, also because the next line is:</p>

<pre><code> *   This file is part of the Linux kernel, and is made available under
 *   the terms of the GNU General Public License version 2.
</code></pre>
","<p><strong>Copyright and open source are not mutually exclusive</strong>. In fact, most open-source licenses <em>depend</em> on copyright in order to function properly. The GPL comes most readily to mind: you couldn't enforce the requirement to share-alike if copyright didn't let the author decide who may or may not copy the work. But even something as simple as an MIT-style attribution requirement couldn't be enforced without copyright. The Creative Commons licenses also depend on copyright.</p>

<p><strong>Non-copyrighted software does exist (in some jurisdictions)</strong>. Such software is often said to be in the <em>public domain</em>, and although it is usually classified alongside open-source, it works quite differently: instead of using a license to explicitly allow the sharing of software, it doesn't use a license at all. That's why Creative Commons calls CC0 a <em>dedication</em> instead of a <em>license</em> (though it includes a license for jurisdictions that do not recognize the public domain). SQLite is a famous example of public-domain software, though it does not use CC0.</p>

<p>The ""All rights reserved"" by rPath <em>is</em> a bit strange to see in an open-source product, but it is probably just standard boilerplate. The GPL renders it pretty much moot anyway; the rights <em>are</em> reserved, but then the GPL explicitly re-grants the rights that make the software open-source.</p>
","2052"
"Modifying an LGPL library and using it in a commercial product","653","","<p>I found a library which helps me implement something for a company:
<a href=""https://www.openmuc.org/sml/"" rel=""nofollow noreferrer"">https://www.openmuc.org/sml/</a></p>

<p>Its license is LGPL. Unfortunately, I'd like to use this library for an Android project and there I have to use a different SerialPort-API. This means I had to change some lines of code.</p>

<p>Now I use ""my"" modified version of the code. What do I have to do to include it in a commercial (and proprietary) product? Is it just fine if I release the library on GitHub with LGPL? Or are there other side effects for the company which uses this library?</p>
","<p>jSML license is the LGPL 2.1 or a later version based on the source code notices:</p>

<blockquote>
  <p>jSML is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 2.1 of the License, or
   (at your option) any later version.</p>
</blockquote>

<p>The underlying question that was not asked directly is this:</p>

<blockquote>
  <p>What is the impact and obligations attached to including a modified LGPL-licensed library in a proprietary product?</p>
</blockquote>

<p>Beside the standard LGPL obligations of providing credits, license text, redistributing the source code, ""re-buildability"" when static linking is used, there are extra requirements related to modifications in particular <a href=""https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"" rel=""nofollow noreferrer"">Section 2.</a>  provides details for this case:</p>

<blockquote>
  <ol start=""2"">
  <li>You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions [...]</li>
  </ol>
</blockquote>

<p>This is not entirely clear to me. Why is it not clear? because is it the new modified library that becomes a ""work based on the Library"" or is it the whole software system that uses the modified library that becomes a ""work based on the Library""? In this later case, then eventually the LGPL copyleft could be interpreted to apply to the whole software using the library. </p>

<p>In particular Section 2.c would apply and might be problematic for a proprietary or commercial usage:</p>

<blockquote>
  <p>c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.</p>
</blockquote>

<p>The rest of section 2. goes on to further elaborate on the topic of ""based on the library"" and what it means:</p>

<blockquote>
  <p>[...] But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. [...] </p>
</blockquote>

<p>The net effect is that the copyleft of the LGPL 2.1 may be quite far reaching when the library is modified.</p>

<p>Therefore, I would seek legal advice to confirm this.</p>

<p>That said, another avenue could in this case to contribute your changes upstream such that they are incorporated in the jSML library. If this happens I could then use the library unmodified with relaxed requirements.</p>

<p>Now the entity that authored jSML seems to also provide <a href=""https://www.openmuc.org/services/"" rel=""nofollow noreferrer"">commercial licensing</a> and it may not be in their best business interest to incorporate such changes (but this is just speculation on my part).</p>
","4806"
"Are there any existing licenses for a limited proprietary period, going open source in the future?","650","","<p>I'm interested in a license that says something like ""After the 1st of January 2020, you may distribute this work under the terms of the GPL v3"" (or some other open source license). I'm interested in developing software products and keeping a limited period of monopoly for commercial exploitation, but granting people open source freedoms far sooner than copyright law would put my works in the public domain.</p>

<p>I saw an existing question (<a href=""https://opensource.stackexchange.com/questions/420/can-i-force-my-work-to-be-open-sourced-in-the-future"">Can I force my work to be open sourced in the future?</a>), but that question is largely about the <em>logistics</em> of doing so (e.g. ""I want to add value to users by guaranteeing that the work eventually becomes free and maintainable by volunteers, even if I get hit by a bus or I go bankrupt"").</p>

<p>In this question I'm interested specifically in licenses that would grant any licensee the traditional open source freedoms at a specific point in the future. I'm wondering if there are any licenses already in use, considering the oft-repeated advice to try to avoid modifying existing licenses.</p>

<p>A closely related question: would such a license be GPL compatible (after the open source date; obviously not before)? Or would the additional historical restrictions prevent it being combined with other GPL works?</p>

<p>(I'm aware that using this sort of license implies that I am actually giving the source code to someone earlier than the open source period; if I just refrain from publishing the source until I want it to be open source, then there's no need for a special license)</p>
","<p>No, I'm not aware of any existing licenses.</p>

<hr>

<p>However you don't need one. Just make a LICENSE file like this:</p>

<blockquote>
  <p>Copyright (c) 2015 Ben</p>
  
  <p>All rights reserved until 2025 after which this work is made available under version 3 of GPL license.</p>
  
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>

<p>I grabed the last section from MIT. Including your name and the current year is optional but I'd include it.</p>

<p>Beware that you have to do this in your own license file - the FSF explicitely does not give permission to distribute modifed copies so integrating dates into GPL would infringe on their intelectual property (isn't it ironic that the FSF licenses are proprietary?)</p>

<p>I'm not sure of the best way to include the GPL license text in your project without implying that the project is under GPL. Perhaps just don't include it at all, let someone else find/copy it in (or do it yourself) once 2025 arrives.</p>
","1697"
"What is the difference between GPL + Classpath exception vs LGPL","644","","<p>Java and a few java libraries provide a ""classpath"" exception. To me, this seems similar to the LGPL's linking exceptions. What is the difference between the GPL with a classpath exception and the LGPL?</p>
","<p>The LGPL and GPL + the Classpath exception share the property that if you link code under these terms into your  program, the resulting derivative work does not have to be made available as free software. Instead you can copy and distribute the resulting binary executable under terms of your choice.  This means that the source code does not have to be provided to downstream recipients.</p>

<p>However, the <a href=""http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"">LGPL 2.1</a> says (sec. 6):</p>

<blockquote>
  <p>As an exception to the Sections above, you may also combine or link a ""work that uses the Library"" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.</p>
</blockquote>

<p>While <a href=""http://www.gnu.org/licenses/lgpl-3.0.en.html"">LGPL 3</a> says (sec. 4):</p>

<blockquote>
  <p>You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: [...]</p>
</blockquote>

<p>I.e.: the LGPL permit <em>modifications</em> of the combined work and <em>reverse engineering</em> for debugging such modifications.</p>

<p>That is not much freedom, but apparently some people did not like the explicit permission to do modify the work and to make use of reverse engineering, so  GPL + the <a href=""http://www.gnu.org/software/classpath/license.html"">Classpath exception</a> does not contain such a permission.</p>
","1413"
"What are software dependencies, and what are the implications of FLOSS dependencies for other projects?","628","","<p>How could I best explain software dependencies to a non-software, non-tech person? </p>

<p>What are software dependencies, such as package dependencies or linking dependencies? And why does it matter to know about these dependencies in the context of free, libre and open source code?</p>
","<h1>Software dependencies: A not-too-technical introduction</h1>

<h2>Summary</h2>

<ul>
<li>Programs depend on other programs, often with many deep levels of indirection. </li>
<li>Million of packaged FLOSS programs are available through public repositories for easy dependencies download and installation.</li>
<li>How dependent programs relate to and interact with each other can be more or less intimate.</li>
<li>Each program's license FLOSS requirements and obligations vary based on the relationship and interaction between dependent.</li>
</ul>

<p>You need to know:</p>

<ul>
<li>The whole chain of program or package dependencies</li>
<li>The purpose and use of each program or package in that chain (test, tool, runtime)</li>
<li>Which dependent are shipped and redistributed with your product, application or library vs. which may be installed by your user</li>
<li>The license of each dependency in this chain</li>
</ul>

<h2>How software is built</h2>

<p>Larger software systems and products are commonly assembled from software components.  Each component is some collection of programs. And components frequently re-use other components.  </p>

<p>Each component is usually delivered as a package. A package is typically an archive that contains the programs. A package also commonly contains information about the component name &amp; version, what it is about, who wrote it, sometimes its license, etc. And also what other components may be required by this component: this is called a dependent component or a ""dependency"". In formal terms, I would define a package as the set of exact software programs and files that are distributed or used for a given component.</p>

<h2>Dependencies</h2>

<p>A program may require one or more other programs to run (the ""dependency-ies""). The dependencies can be recursive potentially creating very deep relationships. Sometimes the dependency is only for testing or ""building/compiling"" the program - i.e. a development or ""dev"" dependency. Sometimes it is needed to run the program or sometimes it can be optional to provide extra  features. </p>

<p>Some dependencies for a program may be rather generic and sometimes implied. At a top level many programs can have a dependency on the operating system, an application server, a database server, etc.  These type of dependencies are often not stated explicitly. For example a Java program requires a Java Virtual Machine (JVM) to run and the fact a program is written in Java implies this and is not explicitly stated by most Java packages as many/most Java programs will not depend on a specific version of that JVM.</p>

<p>Dependency management is the approach practiced by software programmers to specify, provision/download, install, update and generally manage the set of dependent code that their product or application relies on.</p>

<p>Managing dependencies is evolving to be rather sophisticated and several tools and public package repositories are helping programmers dealing with eventually large volume of dependencies. A large number of these dependencies are for free, libre and open source-licensed (FLOSS) components and their packages.</p>

<h2>Package dependencies</h2>

<p>Each operating system / language / framework tends to have its own (eco) system for FLOSS components:</p>

<ul>
<li>Documenting dependencies in one or more configuration or ""meta"" files,</li>
<li>Downloading (aka. provisioning) the dependent components from a public FLOSS or private repository of pre-built or pre-packaged programs. </li>
</ul>

<p>This provisioning may occur at build-time or run-time; for instance when JavaScript code is fetched from a remote repository or CDN when you load a web page.</p>

<p>These systems are common in Linux distros, Java/Maven, JavaScript, Ruby, Python. And there are millions of these FLOSS packages readily available for download and installation. </p>

<p>Some of these repositories and tools include:</p>

<ul>
<li>JavaScript - NPMs for NodeJS,</li>
<li>Ruby - GEMs from RubyGems,</li>
<li>Python - Wheels from Pypi,</li>
<li>Java - JARs from Maven,</li>
<li>Linux packages such as RPM and Debian,</li>
<li>and many more.</li>
</ul>

<p>Dependencies are often weakly defined and variable: A dependency statement may include a range of possible versions for a dependent package and if a dependecy is ""required"" or ""optional"". Package systems compute (aka. ""resolve"") a list of concrete dependencies when you provision packages using these definitions.</p>

<p>The dependency relationship between two programs may be more or less ""intimate"":</p>

<ul>
<li>At arm's length, when the programs are entirely separated and may only communicate by writing or reading files, or by network interaction</li>
<li>At a handshake level - where the programs call each other's subroutines (aka ""functions"") directly and exchange data directly</li>
<li>Or extremely intimate when merged or combined into a single larger (executable) program</li>
</ul>

<h2>Program dependencies: programs can be compiled and combined</h2>

<p>Often programs are compiled: the text of the programs source code is transformed in a binary code that the machine can understand and execute. For instance programming languages such as C, C++, Java, Go require this ""compilation"". </p>

<p>But not always: some programming languages are executed directly from the source code when you run them and do not require pre-compilation (or are compiled on the fly when you run them). For instance JavaScript, Python, Ruby or Perl code does not require ahead-of-time compilation, though it is sometimes ""compressed"" or minified or pre-compiled.</p>

<p>With the compilation process, several programs can be ""combined"" into larger (binary) programs. Combining programs together this way is often called ""static linking"" when things are ""merged"" into a larger binary program.</p>

<h2>Free, libre and open source licensing and dependencies</h2>

<p>Many software licenses have different requirements for source code and binaries (BSD, MIT), have specific terms about the implication of how programs are combined and depend on each other (L/GPL).  Limited Copyleft and Copyleft licenses impose some constraints on how other (proprietary or not) programs can be combined or interact with copyleft code. For instance, the LGPL explicitly discuss static vs. dynamic linking. These are concepts originally defined in compiled languages such as C and C++. </p>

<p>They do not always translate well to other ""dynamic"" languages and this require some adjustments to apply these terms in these other language contexts. </p>

<p>Permissive licenses typically impose few constraints on how you can combine programs. </p>

<p>For Copyleft licenses, how (proprietary- or non-Copyleft- licensed) programs and Copyleft-licensed programs are used together, how they depend and interact with each other is the <strong>essence of what triggers the Copyleft clauses</strong> of the GPL and LGPL. </p>

<p>Remember that the relationship between programs and their dependencies can be more or less intimate: Arm's length, Handshake, Merged. Copyleft licenses may impact proprietary or non-copyleft code based on the nature of the dependencies and interaction between programs:</p>

<ul>
<li>Any Handshake or Merged relationship with a GPL-licensed program implies that GPL becomes the primary license for that combined program</li>
<li>Any Merged relationship with LGPL-licensed programs implies that LGPL becomes the primary license for that combined program</li>
</ul>

<p>Arm's length is similar to ""independent process"" or ""command line"", Handshake is similar to ""dynamic linking"", Merged is similar to ""static linking"".</p>

<p>Relationships may flow through the Dependency chains and the related licensing requirement may also follow through. 
What if a  proprietary program depends on a program that depends on a program that depends on a program that is GPL-licensed? It depends!</p>

<ul>
<li>What is the type of relationships at each step?</li>
<li>What is the license of the intermediate programs?</li>
</ul>

<p>Eventually the GPL license may flow up or down to the proprietary program for an ""Handshake"" or ""Merged"" style of relation, unless some licenses have exception to stop this flow (e.g. such as the Linux in user space exception to the GPL license) or the nature of the interactions changes through this chain. (such as when a dependent program is used at ""Arm's length"").</p>

<h2>An approach to handle dependencies and license compliance</h2>

<p>To properly handle dependencies -- whether you write proprietary or FLOSS-licensed code -- my recommended approach would be to:</p>

<ul>
<li>Evaluate the likely dependencies for a new component or package during selection / evaluation</li>
<li>Confirm actual dependencies when you build for your product, application or library</li>
<li>Ensure that you consider the whole chain of dependencies, both direct and indirect and at full depth</li>
<li>Consider the purpose of each program or package in that chain (test, tool, compilation, runtime, etc.)</li>
<li>Determine which dependent are used only at development time, which redistributed with your product, application or library vs. which may be installed by your user</li>
<li>Determine the license of each dependency in this chain</li>
<li>Evaluate what licensing requirements flow up or down this chain and determine what actions are required to comply with licensing</li>
</ul>

<p>Using these elements you can define a policy for which relationship may be acceptable or not in your context and what are the obligations derived from using dependent packages or programs.</p>
","4315"
"Is a government organisation commerical or non-commerical?","614","","<p>Assume that someone is working on a government project either as a government employee or a contractor working on a site which will be delivered and then subsequently maintained by a government agency. </p>

<p>The question: Can the project make use of software which is free use for non-commercial purposes, such as e.g. under the Creative Commons licence <a href=""https://creativecommons.org/licenses/by-nc/3.0/"" rel=""nofollow"">CC BY-NC 3.0</a>? </p>

<p>I've noticed that in the <a href=""https://shop.highsoft.com/faq#Non-Commercial-0"" rel=""nofollow"">Highcharts FAQ</a> section regarding this issue, they are rather explicit about government organisations being non-commercial, even though they do link to the software licence page. My question is not about Highcharts which has been very explicit about the matter, but rather  about other software which is under that licence and is not explicit about whether government organisations are considered non-commercial or commercial (an example of such software would be <a href=""http://fancyapps.com/fancybox/#license"" rel=""nofollow"">fancybox</a>). </p>
","<p><strong>It depends.</strong> The type of user itself doesn't matter, at least according to Creative Commons. It is how you use it that matters. <a href=""https://creativecommons.org/faq/#does-my-use-violate-the-noncommercial-clause-of-the-licenses"">From their FAQ</a>:</p>

<blockquote>
  <p><strong>Does my use violate the NonCommercial clause of the licenses?</strong></p>
  
  <p>CC's NonCommercial (NC) licenses prohibit uses that are ""<strong>primarily intended for or directed toward commercial advantage or monetary compensation</strong>."" This is intended to capture the intention of the NC-using community without placing detailed restrictions that are either too broad or too narrow. Please note that CC's definition does not turn on the type of user: if you are a nonprofit or charitable organization, your use of an NC-licensed work could still run afoul of the NC restriction, and if you are a for-profit entity, your use of an NC-licensed work does not necessarily mean you have violated the term. Whether a use is commercial will depend on the specifics of the situation and the intentions of the user.</p>
</blockquote>

<p>Their definition of ""NonCommercial"" can still be pretty fuzzy. This is a big weakness in Creative Commons Non Commercial licenses (and perhaps non-commercial licenses in general). CC have not clearly defined what ""non-commercial"" means, leaving it up to individual courts to decide.</p>

<p>How ambiguous can it be? Try this out: would you consider the following non-commercial?</p>

<ul>
<li>Used by a public/government, not-for-profit entity</li>
<li>On a website for free</li>
<li>Without advertising or sponsorship</li>
</ul>

<p>But a <a href=""http://www.heise.de/newsticker/meldung/Verstoss-gegen-CC-Lizenz-Deutschlandradio-muss-zahlen-2151308.html"">German court interpreted this as ""commercial use""</a>. Apparently they drew on German law's definition of ""non-commercial"", which is something more like ""private use"".</p>

<p>Therefore if you must use CC's non commercial licenses, it's a good idea to explicitly define what <em>you</em> mean by ""non-commercial"", with the aid of a copyright lawyer. This looks like what Highcharts is doing in their FAQ. If you want to use something that's under a non-commercial license, you have to be very careful, and preferably seek permission from the author directly.</p>
","4156"
"Free Download Manager Development [FDM]","610","","<p>Is the development of Free Download Manager halted? The last code committed was in 2014 :/</p>

<p><a href=""http://sourceforge.net/p/freedownload/code/HEAD/tree/"" rel=""nofollow noreferrer"">Here is a link to the repository.</a></p>

<p><a href=""https://i.stack.imgur.com/PQJyv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PQJyv.png"" alt=""Sourceforge screenshot.""></a></p>
","<p>(Editorial: I voted-to-close this question in line with the community's decision that this type of question was off-topic. That does not mean, however, that it may not be time to reconsider that position.)</p>

<p>A little searching found the following announcement from December 24th, 2015</p>

<p><a href=""http://www.freedownloadmanager.org/board/viewtopic.php?f=1&amp;t=17363"" rel=""nofollow"">http://www.freedownloadmanager.org/board/viewtopic.php?f=1&amp;t=17363</a></p>

<p>This forum post states that:</p>

<blockquote>
  <p>We're proud to announce that the new Free Download Manager 5.1 is now available to public. After months of hard work and extensive testing, our team would like to offer you a more streamlined UI with a friendlier approach to configuration. Thanks to the revamped software engine, you will enjoy  efficient and stable multi-thread downloading as well as overall better performance and responsiveness. FDM5 features cross-platform support for both Windows and Mac OS. You're very welcome to try out the configuration capabilities FDM5 comes with and offer new ideas and options on our forum!</p>
</blockquote>

<p>So it would appear that FDM is still alive and being actively worked on.</p>

<p>Interestingly, however, the only link to source code I can find on that site brings me back to the sourceforge page you cited. I also see mention of ""FDM lite"" which suggests they may be planning to switch to a paid-software model for new releases.</p>

<p>However, according to the license file at <a href=""http://svn.code.sf.net/p/freedownload/code/trunc/license.txt"" rel=""nofollow"">http://svn.code.sf.net/p/freedownload/code/trunc/license.txt</a> it was (originally at least) GPLv3.</p>

<p>I was able to checkout some source code with </p>

<pre><code>svn checkout svn://svn.code.sf.net/p/freedownload/code
</code></pre>

<p>But the log shows</p>

<pre><code>$ svn log -l 3
------------------------------------------------------------------------
r52 | alervd | 2014-05-16 02:29:56 -0700 (Fri, 16 May 2014) | 1 line

+ GeckoSDK v30.
------------------------------------------------------------------------
r51 | alervd | 2014-05-16 02:06:25 -0700 (Fri, 16 May 2014) | 1 line

missing files from previous commit.
------------------------------------------------------------------------
r50 | alervd | 2014-05-15 12:56:06 -0700 (Thu, 15 May 2014) | 6 lines

FDM ver. 3.9.4 build 1473
New features:
[+] Brand new Google Chrome extension.
[+] Bittorrent: UPnP, NAT-PMP, Local Peer Discovery.
[+] Firefox 30 support.
[–] General bug fixes.
------------------------------------------------------------------------
</code></pre>

<p>Given that they jumped from V3.9.4 to V5.0, and the Beta announcement talks of a 'revamped software engine' - they may have completely rewritten it to avoid the GPLv3 requirement to open source the new code.</p>
","2479"
"Streaming coding sessions on Twitch, is it possible to license the code as open-source?","601","","<p><strong>TL;DR;</strong> </p>

<p>If I wish to stream some coding/programming sessions on Twitch, is it still possible to license the produced code in some open-source flavor, while still being compatible with Twitch terms-of-service ?</p>

<p><strong>My usecase</strong> </p>

<p>If I were to stream my computer screen while coding, for instance to show some techniques, tutorials, or simply discovering of programming languages / frameworks, I would want to distribute the produced code available freely, for instance on some public git server. </p>

<p>It seems to me that the terms implicitly prohibit this (unless there is any written arrangement) : </p>

<p>Extracts of <a href=""https://www.twitch.tv/p/legal/terms-of-service/"" rel=""nofollow noreferrer"">Twitch Terms of Service</a> (enphasis mine):</p>

<blockquote>
  <ol start=""8"">
  <li>User Content Twitch allows users to distribute streaming live and pre-recorded audio-visual works, to use services, such as chat,
  bulletin boards, forum postings, wiki contributions, voice interactive
  services, and to participate in other activities in which you may
  create, post, transmit, perform, or store content, messages, text,
  sound, images, applications, <strong>code</strong> or other data or materials on the
  Twitch Services (“User Content”).</li>
  </ol>
  
  <p>a. License to Twitch </p>
  
  <p>(i) Unless otherwise agreed to in a written agreement between you and Twitch that was signed by an authorized representative of Twitch, <strong>if you submit, transmit, display, perform, post or store User Content using the Twitch Services, you grant Twitch and its sublicensees an unrestricted, worldwide, perpetual, irrevocable, fully sub-licenseable, nonexclusive, and royalty-free right to (a) use, reproduce, modify, adapt, publish, translate, create derivative works from, distribute, perform and display such User Content</strong> (including without limitation for promoting and redistributing part or all of the Twitch Services (and derivative works thereof)) in any form, format, media or media channels now known or later developed or discovered; and (b) use the name, identity, likeness and voice (or other biographical information) that you submit in connection with such User Content.</p>
</blockquote>

<p>Is there any open-source license that is compatible with that ? Has anyone here some experience about a similar situation who could share some insights ? </p>
","<p>You as the copyright holder of the code that you write can issue multiple non-exclusive licenses independently from each other.</p>

<p>There are three different ways to allow someone else to use your copyrighted works:</p>

<ul>
<li>You can transfer your copyright in certain jurisdictions, in which case you have no further rights.</li>
<li>You can issue exclusive licenses, in which case you may not exercise the rights you licensed away. So you cannot issue further licenses. However, an exclusive license can be limited in scope or duration.</li>
<li>You can issue non-exclusive licenses, in which case you can continue to exercise your rights, including issuing more non-exclusive licenses.</li>
</ul>

<p>The license from you to Twitch is <strong>nonexclusive</strong>, so it does not limit you in any way. All open-source licenses are also non-exclusive, so there is no conflict. However, some contributor license agreements require copyright transfers or exclusive licenses. But if you didn't sign any of those, this doesn't apply.</p>

<p>The above applies to works where you hold the copyright, i.e. for code that you wrote. But when dealing with open source code, you might also have included works from other people where you do not hold the copyright but only a (non-exclusive) license. Whether you can display such code depends on the terms of the license you received. Since the license grant to Twitch is very broad, only a few <em>permissive open source licenses</em> would grant you the necessary rights.</p>

<p>But that is a very narrow reading of the situation. In nearly all jurisdictions, copyright laws have exceptions for quoting other works or including small snippets without copyright infringement. In the U.S., this might fall under <em>fair use</em>. In practice, you will not have a problem if you focus your streams on your code and on your commentary, and not on reproducing other people's code.</p>
","6386"
"Android - External library license in project","599","","<p>I'm building my first Android app and I imported two external GitHub libraries into my project. Both of these libraries use Apache License v2.0 and the LICENSE file says:</p>

<blockquote>
  <p>If the Work includes a ""NOTICE"" text file as part of its
            distribution, then any Derivative Works that You distribute must
            include a readable copy of the attribution notices contained
            within such NOTICE file</p>
</blockquote>

<p>My question is: Do I have to include the LICENSE file into my app project? And if yes, where exactly should it stay too meet the requirements?</p>

<p>EDIT: Link if needed <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache License</a></p>

<p>Thank you for your help!</p>
","<p>From section 4 sub-section a,</p>

<blockquote>
  <p>You must give any other recipients of the Work or Derivative Works a copy of this License</p>
</blockquote>

<p>There's no requirement of where it should be.</p>

<p>Google's Play Music uses some Apache 2.0 licenses. They display them in Settings > Open source licenses.</p>

<p>I've seen some apps have put a link called Legal Information on the about dialog which goes to another screen that has TOS stuff and links to all the third party (Apache 2.0) libraries that they use with copyright notices next to them (Ex. <a href=""https://commons.apache.org/proper/commons-lang/"">Apache Commons Lang</a> © 2001-2011 The Apache Software Foundation).</p>

<p>For the NOTICE, section 4 sub-section d gives some clues.</p>

<blockquote>
  <p>If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file...[1] within a NOTICE text file distributed as part of the Derivative Works; [2] within the Source form or documentation, if provided along with the Derivative Works; or, [3] within a display generated by the Derivative Works, if and wherever such third-party notices normally appear.</p>
</blockquote>

<p>So if the library has a NOTICE you need to include it in one of those three places.</p>
","2146"
"License header for dual-licensed (AGPL or ""non-free"") source code","590","","<p>For one of my products I plan to move from a commercial-only to a dual licensed license model: GNU Affero General Public License (AGPL) or a ""non-free"" license. </p>

<p>I can imagine two options for the license headers in the source files:</p>

<ul>
<li><p><strong>two sets</strong> of source code files with different headers: the AGPL header for the open source version and a different header for the non-free version</p></li>
<li><p>only <strong>one set</strong> of source code files, with <strong>both</strong> license blocks in the header</p></li>
</ul>

<p><strong>Advantage of option #1</strong>: the actual license type is clearly and immediately visible in the source file. With the second option, end users (developers) and their managers or clients could be confused, because they are not able to see what license type they are actually using in their project.</p>

<p><strong>Advantage of option #2</strong>: having only one version of the source with a dual-license header block might have advantages (for example if a patch is released, it can be applied to both versions as the code is 100% identical). If I choose this method, the actual licensing type could also be made clear to the end user by including a <code>license.txt</code> file in the non-free release which contains license type and license holder data.</p>

<p>Should I go for the first or the second option? Or is there even a de-facto standard way for source code headers in case of dual licensing models?</p>

<hr>

<p>Update: this is an example license header which I found in a source code file of the dual-licensed iText library. It contains the AGPL notice, followed the information about the commercial license. </p>

<pre><code>/*
 * This file is part of the iText (R) project.
 * Copyright (c) 1998-2014 iText Group NV
 * Authors: Bruno Lowagie, et al.
 *
 * This program is free software (...)
 * You should have received a copy of the GNU Affero General Public License
 * along with this program (...)
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the iText software without
 * disclosing the source code of your own applications (...)
 *
 */
</code></pre>
","<p>As I mentioned in the comments, I think it is a good idea to mention the possibility for a closed licence in the open code. </p>

<p>Whichever option you choose, in any case I wouldn't mention the type/name/exact text of the commercial licence explicitly in the open code. This will give you the option to use multiple closed licences (maybe for different clients). This, of course, assumes you own the copyright to the full code, otherwise you would need to confer with each copyright holder whenever you want to change the licences. </p>

<p>Something else to keep in mind is what you want to do with code contributed to the open source version. Should contributors sign a copyright transfer agreement, or do they retain the copyright on their code? This affects whether or not (and how) you can include those contributions into your closed code. I have been following <a href=""http://www.bacula.org"" rel=""nofollow"">the Bacula project</a> (a set of backup tools) for several years and they have <a href=""http://blog.bacula.org/general/making-contributions/"" rel=""nofollow"">a page about this</a> that maybe helpful. </p>
","2333"
"Can someone re-license an adaptation of my CC BY-NC materials under commercial terms?","587","","<p>In the comments below <a href=""https://opensource.stackexchange.com/a/1232/606"" title=""ArtOfCode’s answer to the question &#39;Can I sell my MIT-licensed software if it is modified by others?&#39;"">this answer</a>, it is stated that while there is no ShareAlike clause (that would be CC BY-NC-SA), you would not be allowed to re-license Adapted Materials under commercial terms.</p>

<p>Is this interpretation of this license correct?</p>
","<p>This interpretation is correct.</p>

<p>The share-alike clause in other licenses is only relevant to contributions made by others than the original licensor. In fact, the <a href=""https://creativecommons.org/licenses/by-nc/4.0/legalcode"">CC-BY-NC 4.0 license</a> does not grant you the right to sub-license the original work at all, as shown in section 2(a)(1) (emphasis mine):</p>

<blockquote>
  <p>Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, <strong>non-sublicensable</strong>, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material</p>
</blockquote>

<p>Instead, every downstream recipient gets an offer to use the work under the terms of the original license by section 2(a)(5)(A):</p>

<blockquote>
  <p>Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.</p>
</blockquote>

<p>While the license does not impose any restrictions on the <em>Adapter's License</em> this is explicitly defined in section 1(b) (emphasis mine):</p>

<blockquote>
  <p>Adapter's License means the license You apply to <strong>Your Copyright and Similar Rights</strong> in <strong>Your contributions</strong> to Adapted Material in accordance with the terms and conditions of this Public License.</p>
</blockquote>

<p>and so this right only extends to own work. This does not grant any additional right to use the original work without the restrictions of the original CC-BY-NC license.</p>

<p>So, re-licensing the original work is <em>not</em> granted by this license.</p>
","1252"
"Should I require that new issues be written in English?","584","","<p>English is considered by most to be a <a href=""https://en.wikipedia.org/wiki/English_as_a_lingua_franca"" rel=""noreferrer"">lingua franca</a> for the developer community.  From time to time issues written in another language are opened on GitHub projects that I manage, which I personally cannot read.  I must then waste a lot of time trying to decipher Google's machine translation of a potentially complex and technical question.</p>

<p>Obviously I want to be as inclusive as possible, but deciphering the (often vague) issues from someone who is new to software development or the open-source community is difficult enough already, without the language barrier.  </p>

<p>Most of the time (but not always), a non-English-speaking developer will run their text through Google Translate before posting.  However this does little more beyond saving me a click, as I still have to attempt to decipher the machine translation.  In fact this is not always successful, and I usually have to say something like ""sorry, I do not understand what you are trying to say"" and close the issue.</p>

<p>Should I have a policy on this? The way I see it, I have a few options:</p>

<ul>
<li>No policy (current paradigm)</li>
<li>Require all issues to be in English, using machine translation when necessary</li>
<li>Require all issues to be written in <em>intelligible</em> English</li>
<li>Prefer English, but encourage a subset of widely-used non-English languages to encourage more efficient communication with other speakers of those languages.  <strong>Forbid machine-translated content.</strong></li>
</ul>

<p>The way I see it, the last option is actually <strong>preferable</strong> to the current paradigm of machine-translating everything into English (and then presumably back into peoples' native languages).  </p>

<p>For <a href=""https://en.wikipedia.org/wiki/List_of_languages_by_number_of_native_speakers"" rel=""noreferrer"">widely spoken languages</a>, there is a good chance that another speaker of that language could find their issue and help them (note that Stack Overflow itself now has dedicated Spanish, Portuguese, Russian, and Japanese language communities).  I could even add language labels where appropriate.</p>
","<p>Open-source maintenance is often volunteer work. As a volunteer, you do not owe your time to anyone and can always say “no”. So it is absolutely legitimate to close any issue that is not comprehensible, ideally with a polite message in simple English that has a good chance of surviving machine translation. I would consider such a response to be more polite than leaving the issue open but ignored.</p>

<p>Note that the conversation on a GH issue is not locked when the issue is closed. Should (other) community members be able to successfully clarify the problem it can always be re-opened.</p>

<p>I understand the desire to be welcoming to everyone. To some degree that is certainly possible, but this approach doesn't scale. It is reasonable to expect that people who bring their problems to a community do their share of the work and present the problem in a manner that can be answered effectively. There needs to be a balance of two forces: limited capacity by experts who are interested and able to answer these problems, and a reputation of helpfulness in the wider community. If you set the bar too high and close issues due to formal problems, the project may get a reputation for toxicity. But trying to answer everything may lead to burn out, and loss of interest in the project. Excessive helpfulness may also attract help vampires.</p>

<p>I think that asking for comprehensible English language is a reasonable requirement. While language barriers are really unfortunate, you cannot single-handedly solve them. Do not create a policy that would make anyone feel obliged to decipher non-English issues.</p>

<p>This problem will only solve itself if your project becomes so popular that national/language-specific communities appear with their own help resources. E.g. my initial exposure to web development was through German-language resources. Consider also the history of the Ruby programming language, where it took some time for a non-Japanese community to form. But before something like that happens, you'll have to be content with the many English speakers on this world.</p>
","6135"
"What happens if I use a GPL licensed jQuery plugin without a licence on my website?","584","","<p>I like the <a href=""http://isotope.metafizzy.co/"" rel=""noreferrer"">jQuery Isotope plugin</a> and I want to use it on my website. I was wondering if it was OK to use it without a licence.</p>

<p>It's licensed under either GPLv3 as an open-source license, or there's a commercial license available if you want to keep your code proprietary.</p>

<p>I am not gonna sell the plugin or claim its mine.. I just want to view a couple of images and categories to my clients.</p>

<p>Is this OK? Will they sue me?</p>
","<p>If you use a copyrighted work in a way that is normally an exclusive right of the copyright holder (redistributing the work, creating a derivative work, etc.), and your use has not been licensed by the copyright holder, then you are committing copyright infringement. The decision of whether or not to sue you for copyright infringement is entirely up to the individual copyright holder.</p>

<p>That said, if you've downloaded the open-source version of the code, you have <em>already been granted a license</em> to use the work under the terms of the GPLv3. If you don't want to pay for a commercial license, then <strong>you must follow the terms of the GPLv3</strong>. If your use correctly obeys the GPLv3, then your use is licensed and you cannot be successfully sued for such use. (Note that they could still file suit against you -- anyone may do so at any time, for more or less any reason -- but their suit will almost certainly not prevail, because it would be completely baseless.)</p>

<p>If you use violates the GPL, then you would be operating outside the scope of the license grant and you would be liable for infringement. For example, if you do not also make your work available under the GPL (or a GPL-compatible license) when you distribute it, and appropriately make your human-readable source code available, then distribution of your code combined with Isotope would violate the GPL.</p>

<p>If you are selling the code you write to your clients, and they do not wish to abide by the terms of the GPL, I would suggest you (or your client(s)) purchase a license to relieve them of the requirement to make their source code available.</p>
","2671"
"What do I do if I broke the terms of an open source license?","583","","<p>While <a href=""https://opensource.stackexchange.com/questions/657/what-am-i-supposed-to-do-if-someone-is-breaking-the-terms-of-my-licensed-softwar"">this</a> question says what to do if <em>someone</em> is breaking the terms of a license, I am asking what do I do if <em>I</em> breaking the terms of an open source license?</p>

<p>I was using a piece of software and misread one of the terms of the agreement. I reread the license recently and noticed I am breaking one of the terms.</p>

<p><strong>My question:</strong></p>

<p>To fix this issue, could I just delete all the files I have used in relation to this program? Or should I contact the owner?</p>
","<p>It depends on whether you have, in fact, distributed something to other people in violation of the license. If you have not, you almost certainly have not violated the license, just prepared to.</p>

<p>If you have, I can tell you what we would generally do at the Apache Foundation if we found that we had, by some accident, incorporated some inappropriately licensed content.</p>

<p>As soon as practical:</p>

<ol>
<li>make a commit to the source repository to remove the inappropriate content.</li>
<li>make a release of the product that no longer contains the inappropriate content.</li>
<li>notify that the release(s) containing inappropriate content had the problem they had.</li>
<li>make it harder to download those releases.</li>
</ol>

<p>What I don't think that we'd do is to edit history in source control to remove all traces; for a license which imposes restrictions on distribution (the usual situation with FLOSS), there's no sufficient reason to do that.</p>
","1118"
"What if somebody removed my name from MIT license","581","","<p>Case: I developed a software and uploaded it to Github with MIT license.</p>

<p>To apply the license, I created a LICENSE file with MIT license preamble (as mentioned in <a href=""https://choosealicense.com/"">choosealicense.com</a>)</p>

<p>Somebody cloned(not by forking) my repository, modified the LICENSE file to remove my name and added his instead.
He then re-uploaded the project to Github under his name.</p>

<p>So, my questions are:</p>

<ul>
<li>Is this legal to do such modification ?</li>
<li>What should I do as a owner of the repository ?</li>
</ul>
","<blockquote>
  <p>Is this legal to do such modification?</p>
</blockquote>

<p>Answer no.</p>

<p>New question: Can you do anything against this?</p>

<p>On court: Yes, if you have <a href=""https://www.copyright.gov/help/faq/faq-general.html#automatic"" rel=""noreferrer"">registered it</a> or at least send a postal copy to yourself.
Actually it could be that the person intends to register copyright on his/her own and even sue you for copyright infringement... <em>could</em>.</p>

<p>On GitHub directly:
Yes: File a DMCA takedown notice (see below).</p>

<blockquote>
  <p>What should I do as a owner of the repository?</p>
</blockquote>

<p>Beforehand: make sure to have a good position to claim your copyright later (as written before).</p>

<p>After this issue happened: Contact the changing person politely and ask for his/her intentions. If I'm not wrong GitHub repos have automatically an Issue tracker which you should use, providing links to your repo.
It <em>could</em> be that the person doesn't <em>know</em> you have an online repo (e.g. was given the source somewhere) and it <em>could</em> be that the person want to do changes that you want to include. Therefore it would be good to think about how you want to accept contributions and make this clear within your README.md or similar.</p>

<p>In any case I'd suggest to kindly ask to recreate the repository with a fork (showing the ancestry and making it more easy to share changes).</p>

<p><strong>After</strong> you did this or if there is no response within some days (I won't wait longer than 2 weeks) you can file a <a href=""https://help.github.com/articles/guide-to-submitting-a-dmca-takedown-notice/"" rel=""noreferrer"">File a DMCA takedown notice at GitHub</a>.</p>
","5122"
"Will copyleft help me control what others are able to do with my code?","578","","<p>Given that I've written a program that I want to release as Open Source / Free Software (as defined by the OSI and the FSF), will choosing a <a href=""https://opensource.stackexchange.com/questions/21/whats-the-difference-between-copyleft-and-permissive-open-source"">copyleft license</a> help me control what others are able to do with my code?</p>

<p>I understand that copyleft requires anyone that <a href=""https://opensource.stackexchange.com/questions/1312/derivatives-and-forks-is-there-a-difference"">forks</a> my program to <em>license</em> their fork under the same license (or at least under a license with the same terms as my license). But will a copyleft license (as opposed to a permissive one) give me control over <em>more</em> then the license they have to use for their fork?</p>
","<p>Any OSI or FSF approved open source license does not allow to put restrictions on who can use the software and for what purpose. </p>

<p>The FSF <a href=""https://www.gnu.org/philosophy/free-sw.html"">calls these the essential freedoms 0 and 1</a>:</p>

<blockquote>
  <ul>
  <li>The freedom to run the program as you wish, for any purpose (freedom
  0). </li>
  <li>The freedom to study how the program works, and change it so it
  does your computing as you wish (freedom 1).</li>
  </ul>
</blockquote>

<p><a href=""http://opensource.org/osd"">The OSI definition of open source</a> forbids discrimination against groups and field of endeavor. This is incompatible with any restrictions on how the code may be changed:</p>

<blockquote>
  <ol start=""5"">
  <li>No Discrimination Against Persons or Groups</li>
  </ol>
  
  <p>The license must not discriminate against any person or group of
  persons.</p>
  
  <ol start=""6"">
  <li>No Discrimination Against Fields of Endeavor</li>
  </ol>
  
  <p>The license must not restrict anyone from making use of the program in
  a specific field of endeavor. For example, it may not restrict the
  program from being used in a business, or from being used for genetic
  research.</p>
</blockquote>

<p>As long as all downstream users comply with your license terms, there is nothing you can do... as long as you still want to call your project rightfully open source.</p>

<p>You can of course release it under a license which is identical to a common copyleft license but includes additional clauses which restrict what people can do with it, but then you can no longer call it <em>open source</em> or <em>free software</em>.</p>
","1327"
"What are the advantages of making an open source project free?","571","","<p>I was trying to get a program when I found out that you had to pay for it. After some time I noticed that it was also open sourced. This confused me! After a bit more digging I found that I could download a non compiled version (for free) and compile it myself. </p>

<p>I did this and the program worked fine!</p>

<p><strong>My question is:</strong></p>

<p>What are the advantages to having an open sourced free product?</p>
","<p>You can pay for open source software. With Open Source, the source code must be made available, and provide options for forking and the like. Compiled versions can be paid for.</p>

<p>Like many other programs, open source software is generally similar to proprietary software. For developers, they can get their hands on code, and fork and experiment. For consumers, many might not see much of a difference, except that they may see it as open information.</p>
","458"
"What tools on Github can help me do quality assurance for my projects?","564","","<p>I run a moderately successful open source project on GitHub (it is a privacy enhancing tool for public websites, based upon some PETs I developed for my thesis).</p>

<p>I am getting quite a few feature requests, and some of them are accompanied with pull-requests from people unknown to me.  I think it is great that users want to contribute to the project, but I worry about the consequences of incorporating user-contributed code without proper vetting.  I am just a one-man show, and do this is my spare time.</p>

<p>What are my options to bring my project forwards with the help of its users?</p>

<p>Are there <em>specific</em> tools on GitHub that will help me doing this?</p>
","<p>How about some tools that <em>integrate</em> with GitHub? Do you unit test your code? (Hint: You <em>should</em> be.) Set yourself up with a build server to automatically run the tests when a pull request is received. The tool you use will likely be dependent on the language you're writing in, but AppVeyor and TravisCI are both popular solutions that integrate <em>extremely well</em> into GitHub. Both of them will seamlessly display a pass/fail indication right on the GitHub PR. This makes it easy to tell if the PR broke anything. </p>

<p>Since we're talking about tests, look into Code Coverage tools that integrate with GitHub too. While CI servers can help you tell if anything existing was broken, these tools help you determine if the submitter bothered to include tests for new features. Coveralls is one such popular tool. </p>
","1496"
"Do I have to offer the source of an AGPL (v3.0) licensed Web app even if I didn’t modify it?","549","","<p>The point of using the <a href=""https://www.gnu.org/licenses/agpl-3.0""><em>GNU Affero General Public License (Version 3)</em></a> is that it allows ""users who interact with the licensed software over a network to receive the source for that program"" (<a href=""https://www.gnu.org/licenses/license-list.en.html#AGPLv3.0"">FSF</a>).</p>

<p><a href=""https://www.gnu.org/licenses/agpl-3.0#section13"">Section 13</a> of the <em>AGPLv3.0</em> contains:</p>

<blockquote>
  <p>[…] if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version […]</p>
</blockquote>

<p>It says ""<strong>if you modify</strong>"". Does this really mean that the source <em>only</em> has to be made available if it was modified (assuming that I don’t offer/distribute the application itself, i.e., its binary, at all)? Or am I missing something, maybe somewhere else in the license?</p>

<p>In other words: </p>

<ol>
<li>I install a Web application licensed under the AGPLv3.0 on my server.</li>
<li>I don’t modify this application at all. </li>
<li>I allow people to use it over the Web.</li>
</ol>

<p>Do I have to offer the source code of this application?</p>
","<p>I wrote to the FSF's licensing team about this question:</p>

<blockquote>
  <p>[...] Does this [section 13] mean that if I run a *completely unmodified* AGPL-licensed program as a network service, I am *not* required to offer the source code to network users?</p>
</blockquote>

<p>And I received this response (bracketed phrase added by me):</p>

<blockquote>
  <p>[...] If you haven't modified the software then you are not required to add that functionality [i.e., to download the source]. Of course, if the functionality to download the source is already in the unmodified software, it will already be there for everyone to enjoy.</p>
</blockquote>

<p>So, if you use an unmodified AGPL application that doesn't have download-source functionality, <strong>you are not required to add one</strong> or otherwise offer the source to users. If you do modify the software, of course, you are required to add a mechanism to allow users to download your modified source.</p>

<p>As a practical matter, an author who cares about source-sharing enough to license code under the AGPL would probably include a mechanism or link to download the source in the original program. This is kind of an edge case, because it only applies when both (1) you want to use the AGPL software unmodified, and (2) the AGPL software doesn't already include a download-source mechanism. If either of those conditions is false, the software must (or already does) include a way to download the source.</p>
","791"
"What is a class path exception?","539","","<p>This is a question that stems out from here: <a href=""https://opensource.stackexchange.com/questions/412/do-i-have-to-release-my-code-as-gpl-when-a-java-library-is-gpl#comment544_412"">Do I have to release my code as GPL when a Java Library is GPL</a></p>

<p>It seems that the Java System libraries are licensed with a class path exception. After [attempting] to read what the class path exception is, it remains very unclear.</p>

<p>What is a class path exception?</p>
","<p>Some of the OpenJDK code is covered by the classpath exception, documented as follows (the second paragraph constitutes the exception):</p>

<blockquote>
  <p>Linking this library statically or dynamically with other modules is making
      a combined work based on this library.  Thus, the terms and conditions of
      the GNU General Public License cover the whole combination.</p>
  
  <p>As a special exception, the copyright holders of this library give you
      permission to link this library with independent modules to produce an
      executable, regardless of the license terms of these independent modules,
      and to copy and distribute the resulting executable under terms of your
      choice, provided that you also meet, for each linked independent module,
      the terms and conditions of the license of that module.  An independent
      module is a module which is not derived from or based on this library.  If
      you modify this library, you may extend this exception to your version of
      the library, but you are not obligated to do so.  If you do not wish to do
      so, delete this exception statement from your version.</p>
</blockquote>

<p>The exception means that you can link the relevant code with other code and use the license you wish, as long as you respect the license of code (modules, libraries etc.) which <em>isn't</em> covered by the classpath exception. As I understand it this effectively means that the license covering the code placed under the classpath exception has no effect on its use (and redistribution once linked), only on its modification.</p>

<p>The classpath exception is just a way of allowing users of this implementation of the Java platform (compiler, VM and libraries) to use it for projects without affecting the resulting licenses. This is typical of compilers and platforms, since most compiler and platform authors don't want their use to restrict the licenses which can apply to projects using them.</p>

<p>The OpenJDK itself is covered by the OpenJDK assembly exception:</p>

<blockquote>
  <p>Linking this OpenJDK Code statically or dynamically with other code
      is making a combined work based on this library.  Thus, the terms
      and conditions of GPL2 cover the whole combination.</p>
  
  <p>As a special exception, Sun gives you permission to link this
      OpenJDK Code with certain code licensed by Sun as indicated at
      <a href=""http://openjdk.java.net/legal/exception-modules-2007-05-08.html"" rel=""nofollow"">http://openjdk.java.net/legal/exception-modules-2007-05-08.html</a>
      (""Designated Exception Modules"") to produce an executable,
      regardless of the license terms of the Designated Exception Modules,
      and to copy and distribute the resulting executable under GPL2,
      provided that the Designated Exception Modules continue to be
      governed by the licenses under which they were offered by Sun.</p>
</blockquote>

<p>This just means that you can use the OpenJDK under the terms of the GPL version 2, including code in the OpenJDK which isn't covered by the GPL.</p>
","521"
"Are licenses affected if the author adds conflicting clauses alongside?","533","","<p>I see this one quite a lot: an author releases something under a standard free/open license (i.e. <em>not</em> a <a href=""https://opensource.stackexchange.com/q/1445/175"">crayon license</a>), but on the same release page adds a clause that conflicts with the license. I.e.</p>

<blockquote>
  <p><strong>Free Frobnicator</strong> is a handy utility that frobs widgets, by Jane Doe</p>
  
  <p>Released under &lt;license&gt;</p>
  
  <p>By the way, &lt;additional clause that conflicts with license&gt;</p>
</blockquote>

<p>These additional clauses could be from misunderstanding the license, or carelessness. I've seen these:</p>

<ul>
<li><p>""Let me know if you use this in your project!""</p>

<p>As far as I'm aware, no free/open license requires contacting the author if you use it.</p></li>
<li><p>""Contact me if you want to use this commercially.""</p>

<p>Implying that the license doesn't already allow commercial use, which free/open licenses do.</p></li>
<li><p>""You are free to use however you want, except in pornography.""</p>

<p>Free/open licenses can't discriminate on usage.</p></li>
</ul>

<p><strong>Do these extra conflicting clauses make the license invalid, or is the license unaffected?</strong> Does it depend on the license used? Or is this legally ambiguous?</p>
","<p>You are asking three questions, I think:</p>

<ol>
<li>are they enforceable?</li>
<li>do they tamper with the enforceability of the main license?</li>
<li>do they pollute the open/free status of the overall license?</li>
</ol>

<p>The answer to the third question is 'yes'. If someone adds a clause that is incompatible with, for example, OSI, then it's not an OSI-licence. This has no legal implication at all. It's just a fact.</p>

<p>The first two questions are for lawyers, but, in general, crayons are contagious. If you scribble on a license with a crayon, the results can very possibly be crayon-ish, since by ignorance the extra provisions can conflict with or change the interpretation of the base license.</p>
","1465"
"How can I include two open-source libraries in my commercial applications?","529","","<p>I want to include two open-source libraries in my application: <a href=""http://www.ghostscript.com/doc/current/Commprod.htm"" rel=""nofollow"">Ghostscript</a> and 
<a href=""http://itextpdf.com/pricing"" rel=""nofollow"">iTextSharp</a>. </p>

<p>In 3 commercial applications that I will develop myself:</p>

<ol>
<li>Commercial software will use both above two opensource software.</li>
<li>Commercial software will use only iTextSharp.</li>
<li>Commercial software will use iTextSharp along with another commercial software library for which I have the rights to distribute with my application. I bought the distribution license of that commercial library for US $1 just for the sake of having a legal distribution license. The owner is willing to help me use his software library in my application and distribute.</li>
</ol>

<p>I am willing to open-source the parts of application that I wrote. I can forward the same license agreement in the distribution and can agree to specify the developer names etc in the software sold and willing do to anything needed to do except any payment for the opensource software libraries. Obviously I can't opensource that commercial library that I will use in the third software because I don't have its source code and I just have its distribution rights when I sell the third software which uses that commercial library.</p>

<p>I want to make money from the application that I wrote but can not purchase the commercial license of Ghostscript and iTextSharp because:</p>

<ol>
<li>Their commercial license are very expensive.</li>
<li>I am willing to open source the applications that I will write.</li>
<li>I am not sure if I will make any money from the applications that I will develop, so I don't have the means to pay for a commercial license and can not pay as of now.</li>
</ol>

<p>So, please guide me if I can make all of the three software. If not, then can I make any one or two of the three?</p>
","<p>You can distribute what you develop under several licences, probably by stating that the user gets to choose.</p>

<p>I'd advise against it, <em>unless</em> it is cleanly separate pieces that warrant different licenses. Please don't make life hard for downstream (it hurts yourself, in the end, if your software can't be used due to murky licensing issues, or some downstream picking one option and another the other, with the result that the branches can't be merged due to license mismatch), pick one of the standard licenses, and make sure you stay GPL compatible for software.</p>
","2061"
"Does the Python Software Foundation License permit relicensing to the GPL?","528","","<p>Does the Python Software Foundation License permit relicensing to the GNU GPLv3 (or v2)?</p>
","<p>You cannot re-license the individual PSFL-licensed work, because you are not the copyright holder and the copyright holder has not permitted you to do so. Python will remain under the PSFL; the only way to change this is for the copyright holder to issue it under a different license.</p>

<p>Instead, however, if you are merely interested in combining a PSFL-licensed work with GPL-licensed code, then you are interested in the question of whether the PSFL is <em>GPL compatible</em>.</p>

<p>The Free Software Foundation says of <a href=""https://www.gnu.org/licenses/license-list.en.html#Python"">Python licensing for various versions</a>:</p>

<blockquote>
  <p><strong>License of Python 2.0.1, 2.1.1, and newer versions</strong></p>
  
  <p>This is a free software license and is <strong>compatible with the GNU GPL</strong>. Please note, however, that intermediate versions of Python (1.6b1, through 2.0 and 2.1) are under a different license (see below).</p>
  
  <p><strong>License of Python 1.6a2 and earlier versions (#Python1.6a2)</strong></p>
  
  <p>This is a free software license and is <strong>compatible with the GNU GPL</strong>. Please note, however, that newer versions of Python are under other licenses (see above and below).</p>
  
  <p><strong>License of Python 1.6b1 through 2.0 and 2.1</strong></p>
  
  <p>This is a free software license but is <strong>incompatible with the GNU GPL</strong>. The primary incompatibility is that this Python license is governed by the laws of the State of Virginia, in the USA, and the GPL does not permit this.</p>
</blockquote>

<p>As long as you're not using a version of Python between 1.6b1 and 2.0 or version 2.1, your copy of Python is compatible with the GPL.</p>

<p>GPL compatibility does not allow you to simply relicense the Python interpreter in isolation, but it does mean that you can combine the interpreter with other works that are licensed under the GPL and license the entire combined work under the GPL, as required by the GPL.</p>

<p>In other words, you can comply with both licenses' requirements simultaneously. In the particular case of the GPL, this is possible because the set of restrictions imposed by the Python license is a subset of those imposed by the GPL.</p>
","2571"
"Can I use a Apache v2 licensed driver for a commercial project without revealing sources of the project?","517","","<p>I am building a project that will be commercialised. One of the library I use is licensed under Apache v2.</p>

<p>To my understanding, if I modify the library, I need to give the source of the library with the changes highlighted.</p>

<p>But what about the project itself? Do I have any obligation that arise from it, ignoring the obvious ""This project use library X under Apache v2""?</p>
","<blockquote>
  <p>To my understanding, if I modify the library, I need to give the source of the library with the changes highlighted.</p>
</blockquote>

<p>No, you have no such obligation. The Apache 2.0 license does not contain any copyleft requirements that would require you to share your modified source code.</p>

<p>From the <a href=""http://www.apache.org/foundation/license-faq.html#Must-Contribute"" rel=""nofollow noreferrer"">Apache License FAQ</a>:</p>

<blockquote>
  <p><strong>I HAVE MADE CHANGES TO AN APACHE PACKAGE AND I WANT TO DISTRIBUTE THEM. DO I NEED TO CONTRIBUTE THEM TO THE APACHE SOFTWARE FOUNDATION?</strong></p>
  
  <p>No. You can keep your changes a secret if you like. Maybe your modifications are embarrassing, maybe you'll get rich selling those improvements. Whatever. But please seriously consider giving your changes back! We all benefit when you do.</p>
</blockquote>

<p>The only obligations you have when redistributing the binaries of an Apache-licensed project are detailed in Section 4, subsection a, b, and d:</p>

<blockquote>
  <p>a. You must give any other recipients of the Work or Derivative Works a copy of this License; and</p>
  
  <p>b. You must cause any modified files to carry prominent notices stating that You changed the files; and</p>
  
  <p>[...]</p>
  
  <p>d. If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: [...] within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. [...]</p>
</blockquote>

<p>Sections (a) and (d) are clear enough: preserve the license text and any NOTICE file to downstream recipients. You may include the NOTICE text within the application itself or in a separate file. I am not sure whether or how to indicate changes in a binary-only distribution, as apparently required by section (b), but I suppose you could include that information in an ""About"" screen in your application. (e.g., ""This executable includes software licensed under the Apache License 2.0, modified by John Smith."")</p>
","4714"
"What are the philosophical differences between open source and free/libre software (if they exist at all)?","506","","<p>In <a href=""https://opensource.stackexchange.com/q/529/55"">the answers to this question</a> it was shown, that a few licenses exist, that are only open source but not free software or the other way round. Still, most licenses are both or neither, so the overlap is very big.</p>

<p>But the communities around open source are distinctive and both strong, and some members of one community even disagree with the other. That seems strange for communities that are so similar in definition and goals. It points to a subtle philosophical difference the two.</p>

<p>So my question is: do such differences exist? And if yes: What are the differences in philosophy?</p>
","<p>I recommend visiting: </p>

<ul>
<li><p><a href=""https://en.wikipedia.org/wiki/Free_software_movement"" rel=""nofollow noreferrer"">Free software movement</a> and <a href=""https://en.wikipedia.org/wiki/Open-source_movement"" rel=""nofollow noreferrer"">Open-source movement</a> for historical point of view</p></li>
<li><p><a href=""http://www.gnu.org/philosophy/free-software-for-freedom.en.html"" rel=""nofollow noreferrer"">free software for freedom</a>, full article <a href=""http://www.gnu.org/philosophy/open-source-misses-the-point.html"" rel=""nofollow noreferrer"">open-source-misses-the-point</a> and <a href=""http://www.gnu.org/philosophy/when-free-software-isnt-practically-superior.html"" rel=""nofollow noreferrer"">When Free Software Isn't (Practically) Superior</a> for a <strong>Philosophic</strong> point of view</p></li>
</ul>

<hr>

<p><a href=""http://www.gnu.org/philosophy/philosophy.html"" rel=""nofollow noreferrer"">Philosophy of the GNU project</a> is closely relevant with Free software movement and hence free software philosophy.</p>

<h3>Notable points (from GNU):-</h3>

<p><sup>In addition to / Including @<a href=""https://opensource.stackexchange.com/users/83/michael-schumacher"">Michael Schumacher</a>'s <a href=""https://opensource.stackexchange.com/a/866/296"">answer</a>.</sup></p>

<blockquote>
  <p><strong>Open source is a development methodology; free software is a social movement</strong>. For the free software movement, <strong>free software is an ethical imperative, essential respect for the users' freedom</strong>. By contrast, the philosophy of open source considers issues in terms of <strong>how to make software “better”</strong>—in a practical sense only. It says that nonfree software is an inferior solution to the practical problem at hand.......<br><br>
  For the free software movement, however, nonfree software is a social problem, and the solution is to stop using it and move to free software.</p>
</blockquote>

<p>Practical difference:</p>

<p>Open source doesn't take <a href=""https://en.wikipedia.org/wiki/Tivoization"" rel=""nofollow noreferrer"">Tivoization</a> as issue while for Free Software, it is ethical/social problem: (Quoted form <a href=""http://www.gnu.org/philosophy/open-source-misses-the-point.html"" rel=""nofollow noreferrer"">Why Open Source misses the point of Free Software</a>)</p>

<blockquote>
  <p>...Even if the executable is made from free source code, the users cannot run modified versions of it, so the executable is <strong>nonfree</strong>.</p>
  
  <p><strong>The criteria for open source do not recognize this issue</strong>; they are concerned solely with the licensing of the source code. Thus, these unmodifiable executables, when made from source code such as Linux that is open source <strong>and</strong> free, are open source but <strong>not</strong> free.</p>
</blockquote>

<p><strong>Different Values:</strong></p>

<blockquote>
  <p>The idea of open source is that allowing users to change and redistribute the software will make it more powerful and reliable. <strong>But this is not guaranteed</strong>. Developers of proprietary software are not necessarily incompetent. Sometimes they produce a program that is powerful and reliable, even though it does not respect the users' freedom. <strong>Free software activists and open source enthusiasts will react very differently to that</strong>.</p>
  
  <p>A pure open source enthusiast, one that is not at all influenced by the ideals of free software, will say, “I am surprised you were able to make the program work so well without using our development model, but you did. How can I get a copy?” This attitude will reward schemes that take away our freedom, leading to its loss.</p>
  
  <p>The free software activist will say, “Your program is very attractive, but I value my freedom more. So I reject your program. I will get my work done some other way, and support a project to develop a free replacement.” If we value our freedom, we can act to maintain and defend it.</p>
</blockquote>

<p>Notable para from fear of freedom:</p>

<ul>
<li><blockquote>
  <p>The rhetoric of open source has convinced many businesses and individuals to use, and even develop, free software, which has extended our community—but only at the superficial, practical level. <strong>The philosophy of open source, with its purely practical values, impedes understanding of the deeper ideas of free software; it brings many people into our community, but does not teach them to defend it</strong>. That is good, as far as it goes, but it is not enough to make freedom secure. Attracting users to free software takes them just part of the way to becoming defenders of their own freedom.</p>
</blockquote></li>
<li><blockquote>
  <p>Most GNU/Linux users were introduced to the system through “open source” discussion, which doesn't say that freedom is a goal. </p>
</blockquote></li>
</ul>

<p>From <a href=""https://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society"" rel=""nofollow noreferrer"">Richard Stallman's TEDx video</a>:</p>

<blockquote>
  <p><a href=""https://i.stack.imgur.com/NbDFz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NbDFz.png"" alt=""Comparison of philosophical views""></a></p>
</blockquote>

<hr>

<h3>Notable points (from OSI):-</h3>

<p>The <a href=""http://opensource.org/about"" rel=""nofollow noreferrer"">mission</a> of opensource says:</p>

<blockquote>
  <p>Open source is a development method for software that harnesses the power of distributed peer review and transparency of process. <strong>The promise of open source is better quality, higher reliability, more flexibility, lower cost, and an end to predatory vendor lock-in</strong>.</p>
</blockquote>

<p>Quoted from <a href=""http://opensource.org/history"" rel=""nofollow noreferrer"">opensource history</a>:</p>

<blockquote>
  <p>The conferees also believed that it would be useful to have a single label that identified <strong>this approach and distinguished it from the philosophically- and politically-focused label ""free software.""</strong> </p>
</blockquote>

<p>Quoted from <a href=""http://opensource.org/faq#free-software"" rel=""nofollow noreferrer"">OSI FAQ</a>:-</p>

<blockquote>
  <p>The term ""open source"" was coined in 1998 by a group of people — the founders of the Open Source Initiative (OSI) — who also supported the development and distribution of free software, <strong>but who disagreed with the FSF about how to promote it, and who felt that software freedom was primarily a practical matter rather than an ideological one</strong> (see for example the entry ""How is 'open source' related to `free software'?"" from the OSI's <a href=""http://web.archive.org/web/19981206185148/http://www.opensource.org/history.html"" rel=""nofollow noreferrer"">original 1998 FAQ page</a>).</p>
  
  <p>Following the coining of the term ""open source"", some of those who adopted it did so because they too had <strong>philosophical differences</strong> with the FSF about the reasons why to promote such software, while others who adopted the term did so <strong>because of differences of opinion with the FSF about tactically how to support such software, even while sharing an ideological motivation</strong>. These two groups can and do overlap, of course, and some people use both terms, choosing according to context and audience.</p>
</blockquote>

<hr>

<p>Also categories of free and non-free software from <a href=""https://opensource.stackexchange.com/a/530/296"">this answer</a> which graphically explains difference/overlap i.e how opensource is free (mostly) and non-free (rarely).</p>
","907"
"Does programmatically looping a song in a game qualify as a derivative work?","505","","<p>If I want to put a song licensed under a Creative Commons license that does not allow derivatives (such as <a href=""https://creativecommons.org/licenses/by-nc-nd/3.0/"" rel=""nofollow"">CC BY-NC-ND 3.0</a>), am I allowed to programmatically loop (or apply effects) to the song when it is being played in my game?</p>

<p>This is a tricky question because things like ROM hacking are technically legal because they do not distribute derivatives; they distribute a tool that lets you modify your copy of a ROM. The only difference here is that I have rights to distribute the song in my game, along with the game itself, which would act as a tool to ""modify"" the song.</p>

<p>I am most likely not going to release my game's source, if that has any relevance.</p>
","<p><sup>This is not legal advice. You shouldn't be trusting legal interpretations from an unqualified, Canadian secondary school student. I advise you to seek professional advice from a qualified person.</sup></p>

<p>The question you've asked here, is whether programmatically looping a song results in a derivative. The question at stake is a general one: when does manipulating a work result in a derivative?</p>

<p>First things first, we need to figure out what a definition of a ""derivative work"" is. The license of the work you are using says the following:</p>

<blockquote>
  <p><strong>""Adaptation""</strong> means a work based upon the Work, or upon the Work and other pre-existing works, such as a translation, adaptation, derivative work, arrangement of music or other alterations of a literary or artistic work, or phonogram or performance and includes cinematographic adaptations or any other form in which the Work may be recast, transformed, or adapted including in any form recognizably derived from the original, except that a work that constitutes a Collection will not be considered an Adaptation for the purpose of this License. For the avoidance of doubt, where the Work is a musical work, performance or phonogram, the synchronization of the Work in timed-relation with a moving image (""synching"") will be considered an Adaptation for the purpose of this License.</p>
</blockquote>

<p>Ooh. Fun stuff.</p>

<p>Looking at this, there's a bit of a conflict here. </p>

<p>The license, in it's last sentence in its definition of ""Adaptation"" states that the concept of playing music with an image qualifies as an adaptation of the work. But when is a musical work ""in sync"" with a visual display? Unfortunately, I'm not aware of any case law that touches upon this, but, in my opinion, it could be reasonably interpreted that the musical work must be synced to play at specific points in relation to the animated display. While a musical work may be played at the start of the animation of a display, it is no longer in sync if either work does not change based on the status of the other work. In other words, if the position of playback for the musical work doesn't depend on the animated display, or vice versa, than it's not an adaptation. But of course, that conclusion is not definite.</p>

<p>The conflicting part here is that an adaptation includes the definition of a ""derivative work."" The license doesn't really define the term, and naturally, we'd look on to statutes and legislation to find a definition. However, does programmatically looping a musical work qualify as a derivative work?</p>

<p>The Supreme Court of Canada thinks not. In <a href=""http://scc-csc.lexum.com/scc-csc/scc-csc/en/item/1973/index.do"" rel=""nofollow"">Théberge v. Galerie d'Art du Petit Champlain inc.</a>, they wrote (and I quote):</p>

<blockquote>
  <p>[73] I should note that while there is no explicit and independent concept of “derivative work” in our Act, the words “produce or reproduce the work ... in any material form whatever” in s. 3(1)  confers on artists and authors the exclusive right to control the preparation of derivative works...</p>
</blockquote>

<p>That, along with most of the judgment, brings us to the conclusion that for a derivative work to be made, there must be a reproduction. For this to take place, the work must be reproduced in a material form. However, no new material work is produced when looping a musical work, meaning that programmatically looping a song does not qualify as a derivative.</p>

<p>Does this apply to the United States? </p>

<p>It is repeated many times in the Canadian judgment that the American definitions are much more expansive and broad. Again, I'm not largely familiar with American case law, but I would imagine that the results be similar, the work was never transformed in any way, but rather just played repeatedly.</p>

<h3>Conclusion...</h3>

<p>Since no new work is being transformed, it is my opinion that there is no derivative work.</p>
","4188"
"Apache 2.0 license - NOTICE, CHANGELOG","495","","<p>I have a question about the <code>NOTICE</code> and <code>CHANGELOG</code> files in Apache 2.0 license.</p>

<p>Here is the situation: I based my work on an Apache 2.0 licensed project. I did some minor changes (compared to the original work). It seems that I have two problems:</p>

<ol>
<li>According to the Apache 2.0 license, I have to include <code>NOTICE</code> file if it was in the original work. The problem is, that the notice file in the original work was probably never updated and is possibly incorrect as it does not include notices about library dependencies. Do I have to fix this myself or is it enough to just add the dependencies that were introduced by my changes?</li>
<li>The license also requires that I state changes. The original work did not have any <code>CHANGELOG</code> file and changes were tracked in git (which I guess is not sufficient for the needs of the license). How and in what detail do I state the changes in this situation?</li>
<li>(Bonus question) Because my work will most likely never be merged back to original project git repository I would like to be stated as one of the authors if possible. I suppose, that I add the mandatory license header to the files that I added to the project, but what about the changes in the files that I only modified? Should I add myself to the <code>NOTICE</code> file? I am not sure how would this look like so any example would be appreciated.</li>
</ol>

<p>Also, I will not distribute it in binary form. Only the source code.</p>

<p>I understand, that this has already been discussed, but I am not sure what to do in a situation like this.</p>

<p>EDIT: As suggested, this is the project: <a href=""https://github.com/brianfrankcooper/YCSB"" rel=""nofollow"">https://github.com/brianfrankcooper/YCSB</a></p>

<p>EDIT: Please see comments under Thomas' answer if you need more clarification :)</p>
","<p>Let's break this down.</p>

<blockquote>
  <p>According to the Apache 2.0 license, I have to include NOTICE file if it was in the original work. The problem is, that the notice file in the original work was probably never updated and is possibly incorrect as it does not include notices about library dependencies. Do I have to fix this myself or is it enough to just add the dependencies that were introduced by my changes?</p>
</blockquote>

<p>You do not need to continue to carry a NOTICE file. Section 4d allows you to include the attribution notices in a NOTICE file, within the source or documentation if it is provided alongside the derivative work, or within a display generated by the derivative work. Specifically, the last sentence of 4d allows you to add your own attribution text alongside (by modifying the NOTICE file) or as an addendum to the NOTICE text (putting both in the same file, within another document, or in a display generated by the derivative work).</p>

<p>Since you're stating that the original NOTICE file is wrong, I would consider doing an addendum by either adding a second NOTICE file that is fully correct, by using one file and calling out which was the NOTICE from the original project and which content is related to your derivative work, or in a display and calling out which was the original NOTICE text and which was your NOTICE text. Regardless - make sure that your NOTICE text is fully correct and don't modify the original project's NOTICE text at all.</p>

<blockquote>
  <p>The license also requires that I state changes. The original work did not have any CHANGELOG file and changes were tracked in git (which I guess is not sufficient for the needs of the license). How and in what detail do I state the changes in this situation?</p>
</blockquote>

<p>A CHANGELOG is not required by Apache. The only mention of requirements related to changes is in 4b, which states that if you modify a file, that file must carry a prominent notice that the file has been changed. Typically, in a project that is using the Apache License (at least those released by the Apache Software Foundation), the top of each file will contain <a href=""http://www.apache.org/licenses/LICENSE-2.0#apply"" rel=""nofollow"">the boilerplate header</a>. The method used to state that a file was changed is to add a new copyright line under the original one. If you are applying a new license to the changes, you would indicate this in the boilerplate header section as well.</p>

<p>Assuming that the initial commit to your git repository was the original work and every revision was your contribution to a derivative work, I think that this is sufficient. You are meeting the requirement of 4b by stating that a file has changed. There is no requirement to further identify changes beyond a file level, but your version control repository would allow for that, if necessary.</p>

<blockquote>
  <p>Because my work will most likely never be merged back to original project git repository I would like to be stated as one of the authors if possible. I suppose, that I add the mandatory license header to the files that I added to the project, but what about the changes in the files that I only modified? Should I add myself to the NOTICE file? I am not sure how would this look like so any example would be appreciated.</p>
</blockquote>

<p>When you modify the boilerplate header, you would add your name. If you are keeping the Apache License for your work, you don't need to do anything else. If you are going to apply a different license, then you do need to identify the license for your contributions to mark off what is Apache License and what is under the other license.</p>

<p>The NOTICE file is only used for attribution to other people. For example, if you are including other projects in yours, the NOTICE file or NOTICE text somewhere else, clearly identifies these other projects and the license that they are under. Modifying the NOTICE file to point back to the original project that yours is a derivative work of would also be appropriate.</p>
","2788"
"Can I select who can contribute to my Open Source Project?","494","","<p>Take this into consideration:</p>

<p>I post one of my software projects that I had written for school, and give it an open source license, and place it online for people to evaluate and contribute their thoughts. I do this in hopes that other more experienced developers will be able to optimize or add new features to my already existing program.</p>

<p>But how would I prevent malicious people from tampering with that code? If my project is the victim of multiple, continuous attacks and vandalism, it wouldn't be efficient on my part to ""rollback"" to earlier revisions. Not only would this be an annoyance, but it could make the project look less attractive to prospective contributors.</p>

<p>Can I restrict or ""approve"" contributors to help me improve the project? I'm nervous that doing so would violate the Open Source concept. As seen on the Open Source <a href=""http://opensource.org/faq#restrict"">page</a>:</p>

<blockquote>
  <p><strong>Can I stop ""evil people"" from using my program?</strong></p>
  
  <p>No. The Open Source Definition specifies that Open Source licenses may not discriminate against persons or groups. Giving everyone freedom means giving evil people freedom, too. Fortunately, there are other laws that constrain the behavior of evil people.</p>
</blockquote>

<p>Does this apply only to the audiences of my program, or would it apply to people who try to contribute to it as well?</p>
","<p>You, as the maintainer, can decide what you merge into your project. That doesn't prevent others from forking and maintaining their own version of the code though.</p>

<p>If you post the code to some place like GitHub or other code sharing service, you are given a set of permissions that determines who can merge changes to your master branch. It is not something that is open to the world. Others can submit pull requests (in the case of GitHub), but you are free to reject them as you see fit.</p>
","185"
"Does the open/free content movement lower the barriers of entry for non-qualified people?","493","","<p>The question <a href=""https://opensource.stackexchange.com/questions/627/do-you-need-a-degree-to-become-an-open-source-developer"">Do you need a degree ...</a> was closed as off-topic as it clearly applied to any area of development, not specifically open/free content development.</p>

<p>This question is a re-framing, but very specifically from the open/free side. However, some background is required to properly do so.</p>

<p>At the time I completed high school, degrees in software engineering (as opposed to computer science) were few and far between. After taking a brief - privately run - course, I was easily able to get hired as a programmer. No interviewer even questioned my lack of degree - they were more interested in what I could <strong>do</strong>.</p>

<p>That has all changed today. Here in California, a degree of any kind is considered necessary to even begin searching for a job - and not just in software. I know many people with degrees in business or marketing filling posts we would once have considered 'menial'. It is a standing joke here that the University of California will soon be offering a Bachelors of Retail Science to help people get work as checkout operators at supermarkets - and that the supermarkets will then demand applicants have this degree.</p>

<p>However, focusing on creative domains such as software engineering and the arts, the open/free content movement appears to have no such barrier to entry.</p>

<p>Are there indications that this movement is opening the way for ""unqualified"" people to find positions in their respective industry?</p>

<p>Possible sub-questions:</p>

<ul>
<li>Are there statistics about the average age of contributors to major open projects?</li>
<li>Similarly for their qualifications?</li>
<li>Are there well known examples of non-degreed people moving from the open world into professional positions on the strength of their published work?</li>
</ul>

<p>In short, can an early dedication to open/free content creation help you bypass the cost of a University education? Does this increase the equality of opportunity for the less well off?</p>

<p>EDIT:</p>

<p>Lest people think my comment about the California job market is just an urban myth, vague feelig, or localized phenomenon, see this quote</p>

<blockquote>
  <p>The Bureau of Labor Statistics projects that total employment is expected to increase by 20.5 million jobs from 2010 to 2020, with 88 percent of detailed occupations projected to experience employment growth. In the midst of all this, jobs requiring a master’s degree are expected to grow the fastest, while those requiring a high school diploma will experience the slowest growth over the 2010- 20 time frame.</p>
</blockquote>

<p>From the article <a href=""http://www.reviewjournal.com/news/education/2018-60-percent-job-openings-will-require-college-education"" rel=""nofollow noreferrer"">By 2018, 60 percent of job openings will require college education</a>. The article itself is not a primary source but it cites (or at least quotes) BLS statistics and reports to support the headline.</p>

<p>Further <em>The Economist</em> devoted a large part of its <a href=""http://www.economist.com/printedition/2015-01-24"" rel=""nofollow noreferrer"">January 24, 2015 Edition</a> to issues surrounding college education, its social and financial costs, and the growing gap in equality of opportunity.</p>
","<p>Historically, many people have become professionals in coding without benefit of a degree, your perception of the California job market notwithstanding. A CEO whom I know well, amongst many others of my middle-aged peers, is an example.</p>

<p>When I hire people, I put a lot of emphasis on 'portfolio', and I know that I'm not alone. Open source is certainly <em>convenient</em> for this, but it didn't exist when many of my peers were launching their careers sans degree. So I don't see how it's possible to quantify the incremental effect of open source. It's entirely possible to create a portfolio on github.com entirely of one's own work, with no collaboration with open source projects.</p>

<p>In any case, there's a catch-22 that applies to your thesis. You have to <em>know how to do useful work</em> to contribute to an open source project. It's hard to do that without either studying the subject or getting yourself hired by someone who will teach you. But, if you do manage to teach yourself to the point of obtaining real skill, chances are that you can get a job whether or not you have ever submitted a patch to an open source project.</p>

<p>In my time contributing to open source projects, I've never seen any evidence that anyone met your profile of bootstrapping themselves this way. Of course, no one has to reveal this. Or reveal their age, which would make it rather difficult to answer some of your other questions.</p>

<p>Every few months, someone shows up at the Apache Software Foundation wanting to do a study or survey to learn something about who is involved in open source projects. If I had $10 for each such thing I've participated, I could buy a new camera. I can't tell you whether any of this has led to publication-quality research, but <a href=""http://arxiv.org/"">arxiv</a> might yield something.</p>

<p>Examples:</p>

<p><a href=""http://www.researchgate.net/publication/264799596_Understanding_the_motivations_participation_and_performance_of_open_source_software_developers_A_longitudinal_study_of_the_Apache_projects"">Understanding the motivations, participation, and performance of open source software developers: A longitudinal study of the Apache projects</a></p>

<p>or </p>

<p><a href=""http://search.arxiv.org:8081/paper.jsp?r=1006.1244&amp;qid=1436549350892mix_nCnN_-2127026584&amp;qs=open+source+participation+apache"">Exploring the Impact of Socio-Technical Core-Periphery Structures in Open Source Software Development</a></p>
","1044"
"Does being open sourced mean others can use my logo?","492","","<p>Suppose </p>

<ul>
<li>I have created an open source application</li>
<li>I have also created a snazzy logo to go with the application (for example, the Eclipse logo)</li>
<li>I released my application's source code under a permissive license</li>
<li>I have not trademarked my logo</li>
</ul>

<p>The web pages on which my Logo appears may be covered by copyright, or a more restrictive license than the source code itself. But the source code distribution also contains an image file for the logo (so I can display it when the program is running).</p>

<p>Does this mean that my logo is covered by the permissive license, and hence available for others to take and use for other purposes?</p>
","<p>Logos are a special case that reside in the creative domain covered by copyright, and the domain of trademarks related to identity. The logo itself, the style, colour, etc are usually a result of a creative process. This is usually what you can copyright. The logo denominating your product, company, etc, is what you can trademark.</p>

<p>So to prevent someone from using your logo to do anything besides use it as an identification tool, you would need a copyright for it. To prevent them to use it as an identifier you would need to register a trademark.</p>

<p>While it may seem that having a copyright would suffice, in my experience a copyright would not cover the case where they would use the logo to promote a product based on your original product (which held the logo). Some copyright licenses permit this but I would suggest you carefully pick one that does allow exactly what you want to allow.</p>

<p>Note that I assumed you can actually copyright your logo which may not be possible as the creative process might not be unique enough. If for some reason a copyright is not applicable to your logo, you should at least register the trademark to prevent reuse.</p>

<p>To sum up and answer your final point; even with a copyright, should it apply to your logo, others can use it for other purposes, likely even purposes that are completely unrelated to your activity.</p>
","527"
"How could using code released under CC0 infringe on the author's patents?","484","","<p>Creative Commons defines a <a href=""https://creativecommons.org/about/cc0"">CC0 license type</a> (here's the <a href=""https://creativecommons.org/publicdomain/zero/1.0/legalcode"">full legal code</a>) that claims to allow creators to release their works into the public domain by waiving ""all their copyright and related rights in their works to the fullest extent allowed by law.""</p>

<p><a href=""https://wiki.creativecommons.org/wiki/CC0_FAQ#May_I_apply_CC0_to_computer_software.3F_If_so.2C_is_there_a_recommended_implementation.3F"">They claim in their FAQ</a> (and <a href=""http://www.gnu.org/licenses/license-list.html#CC0"">the FSF confirms</a>) that CC0 is compatible with the GPL, which is approved by the Open Source Initiative (OSI) for use with software. However, OSI has not approved CC0 and <a href=""http://opensource.org/faq#cc-zero"">does not recommend its use as an OSS license</a> (emphasis mine):</p>

<blockquote>
  <p>The most serious of the concerns raised had to do with the effects of
  clause 4(a), which reads: ""No ... patent rights held by Affirmer are
  waived, abandoned, surrendered, licensed or otherwise affected by this
  document."". While many open source licenses simply do not mention
  patents, it is exceedingly rare for open source licenses to explicitly
  disclaim any conveyance of patent rights, and the Committee felt that
  approving such a license would set a dangerous precedent, and
  <strong>possibly even weaken patent infringement defenses available to users of software released under CC0</strong>.</p>
</blockquote>

<p>I'm not sure I understand the basis for concern here (or why CC0 includes this clause to begin with, but that's another issue). I understand that you can't make <em>someone else's patents</em> available by putting code that utilizes those patents into the public domain, but the clause specifically refers to the ""Affirmer's"" patent rights (the person who decided to release the code in the first place). </p>

<p><strong>What evidence is there to support the idea that using code released under CC0 would ever result in infringement of the author's own patents?</strong> I'm looking for a specific example to illustrate when and how this could ever be a problem.</p>
","<p><em>Sparr's</em> original answer was good, but he should have <em>left in</em> the bit about being sued.</p>

<p>The point is that the language used in CC0 constitutes a <em>legal hazard</em> for anyone that receives a program under CC0 and uses it in good faith.</p>

<p>This is the infamous patent clause of CC0:</p>

<blockquote>
  <p>No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.</p>
</blockquote>

<p>The typical scenario that will create a legal hazard for you is this:</p>

<ul>
<li>You work on a software project (it may be open source or ARR).</li>
<li>You see some other software (typically a library) that will fit very well into your project, and you notice that it is offered under the terms of CC0.</li>
<li>You incorporate said library into your project.</li>
<li>Unknown to you, the library offered under the terms of CC0 contains patented code. The patent is owned by the Affirmer (the person that did the PD dedication, usually the initial author of the library).</li>
<li>After some time, for instance <em>after</em> your project has evolved into something successful and profitable - the Affirmer  surfaces with his submarine-patent and demands that you pay royalities to use the library.</li>
</ul>

<p>At this point, this patented library may be deeply integrated in your project and stopping using it may no longer be practical.</p>

<p>To make sure he gets paid, the Affirmer can threaten to sue you <em>unless</em> you pay up.  <em>Because</em> the CC0 dedication has the quoted sentence, you're going to have a real hard time defending yourself against the Affirmer's demands in court. In all probability, your cheapest option (at least if the Affirmer is not <em>too</em> greedy) is to pay the patent royalties.</p>

<p>If you compare the CC0 with <em>real</em> free software licenses, such as GPLv3, you'll find this:</p>

<blockquote>
  <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p>
</blockquote>

<p>Do you spot the difference?</p>

<p>If somebody would try to pull the submarine-patent trick with software licensed under GPLv3, it is very unlikely that they shall prevail if they sue you, as the license is <em>designed</em> to make such a lawsuit fail.</p>

<p>The point is that, if you choose to use a badly designed legal tool, which is what CC0 is, it is much <em>easier</em> to intimidate you by into paying royalties, than if you stick to software that provide legal <em>immunity</em> against this type of lawsuits.</p>
","1393"
"What are the implications of glibc (GNU C Library)","480","","<p>What are the implications of <a href=""https://www.gnu.org/software/libc/index.html"" rel=""nofollow"">glibc</a>? The library is installed on most GNU/Linux systems (and maybe others, don't know). The thing is it is supposedly licensed with LGPL, but I am not sure which version (their website, unlike other free software projects, is ambigous about it). Anyways I have am slightly worried about the implications of it. Firstly: the LGPL supposedly allows commercial projects. It places however some restrictions on the programs that use it. Since every program written in C uses standard library functions (or not every but most), then it would mean that somehow linking the program with the library makes the program bound by LGPL license. What if glibc had LGPL v3 license, at least for some files. In this case, would my program be susceptible IN ANY WAY to the restrictions against ""tivoization""? I hope my understaning of this issue is wrong and LGPL does not apply to any part of my program whatsoever, even if I use standard C lib functions in my software. I would be glad for clarification of this issue, even if it seems stupid for some of you.</p>
","<p>Under the normal circumstances that your question present (i.e. dynamic linking to a library assumed to exist on the user's system and thus not distributed with the program) the following part of the license text will save the day for any program using glibc: </p>

<blockquote>
  <p>A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a “work that uses the Library”. Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.</p>
</blockquote>
","4497"
"When should I consider creating a private fork of a suitably licensed project for commercial use?","479","","<p>Suppose I am developing a commercial product, but one heavily based on open source software. Further suppose one of the open source projects I use has a permissive license (such as Apache 2).</p>

<p>At some point, I realize I need to make significant changes to that open source component. I have two choices:</p>

<ul>
<li>Work with the upstream team to get my changes accepted into the open source version of the component.</li>
<li>Create an internal fork of the component and make my changes there.</li>
</ul>

<p>The first option is obviously ideal, but there are considerations which may lead me to the second option. Some that I see are:</p>

<ul>
<li>The changes may not be acceptable/desirable to the people managing the upstream.</li>
<li>The timeframe for getting changes into the upstream project and available for use may not fit within my own schedule.</li>
<li>I may wish to implement some proprietary features within the project.</li>
</ul>

<p>At what point does it become desirable/practical to take the second path, and what are seen as the major drawbacks to doing so?</p>
","<p>The main problem with a private fork is that you now have to do the maintenance work of merging any changes made on the upstream version. This work will become more and more the further your forks diverge because you will encounter more and more conflicts (including some non-obvious ones). There are, however, still situations where you might still want to do a fork:</p>

<ol>
<li>The upstream project is practically dead and you don't expect many future updates from them anyway.</li>
<li>The software already fulfills all your requirements (except those they won't implement) and so you believe you won't need any further updates from them anyway (even when security related).</li>
<li>You need to make changes to the software which are so significant that future updates won't apply to you anyway (but then why aren't you developing from scratch?).</li>
</ol>

<p>By the way: When you use the software only internally, you don't even need a permissive license. Most copyleft licenses (like the GPL) only require you to give away your sourcecode when you give away the binary. When you keep it to yourself, nobody can force you to license anything.</p>
","58"
"Is there a reason to prefer the SimPL over the GPL? Does it carry the same legal weight?","476","","<p>I just came across the <a href=""http://opensource.org/licenses/Simple-2.0"">SimPL License</a> which is described as:</p>

<blockquote>
  <p>This Simple Public License 2.0 (SimPL-2.0 for short) is a plain language implementation of GPL 2.0.  The words are different, but the goal is the same - to guarantee for all users the freedom to share and change software.  If anyone wonders about the meaning of the SimPL, they should interpret it as consistent with GPL 2.0.</p>
</blockquote>

<p>It's certainly easier to read than the GPL, but is that a good thing?  Legally, can I be confident something licensed under the SimPL is protected as well as something licensed under the GPL?  Are there any disadvantages to using the SimPL?</p>
","<p>It is unacknowledged by the FSF, but was approved by the OSI in 2007.</p>

<p>There are two main problems with ""custom licenses"":</p>

<ol>
<li><p><em>ghettoization</em> - where the custom license creates its own ghetto with code that nobody else can use because of license incompatibilities</p></li>
<li><p><em>legal hazards</em> - where the terms of the license is not precise enough to be usable in litigation</p></li>
</ol>

<p>The SimPL 2.0 has explicit provisons to allow downstream re-licensing to GPLv2 and GPLv3, so in that respect it works like GPLv2+ - there is no risk of ghettoization.</p>

<p>I just had a quick read-through, but it looks like it should stand up in court as well.  They've converted some of the twisty little passages of GPL, such as the patent-clause, into much shorter and more easy to understand language.</p>

<p>I could not spot any <em>obvious</em> omissions (but this is the Internet, and I spent about 5 minutes on it, so don't treat this as professional advice).  The bottom line is: until it is tested in court, we don't really know how well it will stand up.</p>

<p>I tried to search for case law involving this, but could not find any.  It sees to fly under the radar on all the sites that do statistics on license use, so I do not think it has seen much use yet.</p>
","1349"
"Redhat acquires Ansible - why?","468","","<p>Recently, Redhat acquired Ansible, the developer of the famous configuration management software <a href=""https://en.m.wikipedia.org/wiki/Ansible_(software)"" rel=""nofollow noreferrer"">Ansible</a>, apparently for a price of about $100M.</p>

<p>Ansible, the software, AFAIK is licensed fully under the GPL. Ansible, the company, does however also develop an extension to the software called <em>Tower</em> that, as I understand it, is basically just a web GUI to the core software.</p>

<p>Considering that Redhat could use Ansible for free anyway, and would, I guess, be very well capable of creating their own sort of GUI if that's what they needed, and that even if they bought the company they still have to adhere to the GPL for the core, why on earth would they spend such a huge amount of money on this acquisition?</p>

<p>I'd really appreciate if someone could share some wisdom as this is not the first time that such a transaction has left me puzzled.</p>
","<p>First of all, by acquiring Ansible they not only get the copyright for the software, but most importantly the workforce - the developers who developed the tool. That is much more important than the software in question. So they can in future control the direction the software takes and also use these developers in other projects if needed or useful.</p>

<p>Also as Zizouz already pointed out, they also becomes the owner of the intellectual property rights to the software. That seems useless in case of Open Source software - but that is wrong. Indeed everyone can use the software and even makes forks, but only the owner of the intellectual property can also use this source code in closed source projects if they wish.</p>
","2076"
"Is it possible to include a shorter form of a license if the license would be longer than the content licensed?","462","","<p>For example, Gists on GitHub don't have a field to track the license that they are available under. You can simply choose to create a public Gist or a secret (private) Gist.</p>

<p>Many of the open source licenses have text that seems to indicate that you must include the full license in a distribution:</p>

<p>The MIT License:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>The BSD 3-Clause License:</p>

<blockquote>
  <ol>
  <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
  </ol>
</blockquote>

<p>The Apache 2.0 License:</p>

<blockquote>
  <p>You must give any other recipients of the Work or Derivative Works a copy of this License</p>
</blockquote>

<p>The GPL, on the other hand, appears to not require you to carry the full license text, but simply tell recipients how to access the license text:</p>

<blockquote>
  <p>An interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>
</blockquote>

<hr>

<p>For licenses like the MIT, BSD, and Apache 2.0, is there an appropriate method of indicating the license without including or distributing the full license alongside the work?</p>

<p>If so, what would this look like? Would it be similar to the recommendations for the GPL? If not, what would need to happen to allow for a short form of the license?</p>
","<p>You can certainly <em>try</em>. Instead of including the entire license, you could have this:</p>

<blockquote>
<pre><code>Copyright (c) 2016 Thomas Owens. All rights reserved.

This work is licensed under the terms of the MIT license.  
For a copy, see &lt;https://opensource.org/licenses/MIT&gt;.
</code></pre>
</blockquote>

<p>In <em>theory</em> (IANAL), this should stand up in court, since you're still making it pretty obvious how the work is licensed. If someone can't access the license because of an Internet connection issue, there's still a fallback to All Rights Reserved, which isn't pretty but it protects your work.</p>

<p>Bear in mind, however, that future redistributors are still legally obliged to include the full license. It's only you who doesn't have to. And yes, you could add a condition to remove this restriction, but it's a bad idea for the same reasons that crayon licenses are (it's essentially <em>creating</em> a crayon license, actually) - the major one of those being it's not legally vetted.</p>

<p>To be honest, if you're using something like the MIT or BSD licenses, they're not exactly <em>long</em> - I'd just include the whole text in your source file. This strategy is only really worth considering if you've got a long license document like the GPL - but something like that is more often used for longer, more complex works, in which including the file wouldn't be so much of an overhead anyway.</p>
","2366"
"Are you legally allowed to use abandoned projects?","457","","<p><strong>Background:</strong></p>

<p>While looking for open source projects I stumbled across a very interesting one. After further digging I found that it was also abandoned. PERFECT!! I can take over I thought, this led me to ask the question:</p>

<p><strong>My question:</strong></p>

<p>If a project is abandoned and I take over, does the owner of the project / license become mine?</p>

<p>If no, why not? How could I do this?</p>
","<p>There are a number of issues to consider.</p>

<p>First, to answer the main question: you are legally allowed to use any abandoned open source project, the fact that it's abandoned doesn't change your rights.</p>

<p>Second, the fact that it's abandoned doesn't change its owners rights; in particular, copyright remains with the creators. But for an open source project that isn't particularly important, unless you wish to change the license. (Note too that in some jurisdictions copyright is non-transferable, or not fully transferable.)</p>

<p>Third, there's the issue of continued maintenance. Of course you can fork an open source project; in the vast majority of cases you can continue using the same name etc. What will be more difficult is recovering the original web sites if any, source code repositories etc. If the original maintainer(s) is/are still reachable, you can try asking them; if they haven't disappeared off the face of the earth there's a fair chance they'll be happy to pass the maintenance on to you! If they're not, and the hosting company (Sourceforge, Github etc.) don't have a process in place, things will be a bit more complicated: you'll need to contact various sites and organisations where the software you're taking over is mentioned, and tell them about the change. Generally speaking once you've proven you're a worthy maintainer, the transition will happen, and your new web site or code repository will end up being considered the authoritative source for the project. This becomes much easier once your new versions of the project are adopted by downstream distributions...</p>

<p>I did this a while ago for <a href=""https://sourceforge.net/projects/linuxconsole/"" rel=""noreferrer"">the Linux console project</a>; it was dormant upstream, and I was maintaining the package in Debian, adding more and more patches as time went by. At that time Sourceforge had a process in place for requesting a maintenance change; they contacted the original maintainer who OK'd the transition, and I became administrator of the Sourceforge project. No copyrights were changed: the original copyrights remain in place on the pre-existing code; but given that I had (and have) no plans to change the license, that's not an issue.</p>
","558"
"What is considered proper attribution for a deleted Stack Exchange post?","451","","<p>When a creator posts content to any Stack Exchange site, they grant Stack Exchange a Creative Commons Attribute Share-Alike license to use (and display and share) the content. This is irrevocable - even if you choose to delete your post, or a moderator deletes your post, Stack Exchange still has a license to use it.</p>

<p>Stack Exchange has chosen to allow users with 10k reputation, site moderators, and some staff to view deleted posts. That means that this class of user can, potentially, receive a CC BY-SA license to all content ever posted on a given site and use it, under the CC BY-SA license.</p>

<p>Creative Commons provides the following rules for providing attribution:</p>

<blockquote>
  <p>If supplied, you must provide the name of the creator and attribution parties, a copyright notice, a license notice, a disclaimer notice, and a link to the material. CC licenses prior to Version 4.0 also require you to provide the title of the material if supplied, and may have other slight differences.</p>
</blockquote>

<p>One of the requirements is ""a link to the material"". Since the content has been deleted, it is no longer accessible to people who do not fit the criteria who can view it. However, the post still does have a URL (should it ever become undeleted, for example).</p>

<p>Would linking to a deleted post (while providing the other required information) be considered proper attribution under the Creative Commons rules? If not, what would proper attribution to a deleted Stack Exchange post look like?</p>

<p>Note that this does not consider the ethics of using a deleted post. I have received the post and have the right to use it. For a cultural/ethical discussion, <a href=""https://meta.stackexchange.com/questions/276787/should-i-be-using-deleted-content-from-posts-on-the-stack-exchange-network"">see this post on Meta Stack Exchange</a>.</p>
","<p>In 4(c) of <a href=""http://creativecommons.org/licenses/by-sa/3.0/legalcode"">CC BY-SA 3.0</a> it is defined how attribution has to be provided. For the work’s URL, it says:</p>

<blockquote>
  <p>[…] (iii) to the extent reasonably practicable, the URI, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; […]</p>
</blockquote>

<p>So </p>

<ul>
<li>if a work’s page no longer exists, or</li>
<li>if the page is about something different now, or </li>
<li>if the page does not (or never did) contain the information that the work is licensed under CC BY-SA 3.0, </li>
</ul>

<p>you don’t <em>have</em> to provide the URL in your attribution. </p>

<p>But you <em>may</em> still do so, and I think it can be beneficial: it allows others to find the work in Web archives; maybe the page comes back online again; it can be relevant to know under which domain the work was originally hosted; etc. If you decide to provide the URL, it might be a good idea to add a note that it no longer works (and, perhaps, to use the <a href=""https://www.w3.org/TR/2014/REC-html5-20141028/links.html#link-type-nofollow""><code>nofollow</code> link type</a>, in case of HTML).</p>

<p>However, I think that this does not apply to ""deleted"" posts from Stack Exchange sites. These pages still contain the relevant information (they are still about the work, and they still contain the licensing information), it’s just that they are (currently) not accessible to unregistered and many registered visitors. </p>

<p>These posts are still ""available to the public"" (from CC BY-SA 3.0’s definition of <em>Distribute</em>), similar to a book that’s for sale, a performance that requires an admission ticket, a Web video that can only be streamed from a specific country, or a newspaper article behind a paywall. In the case of Stack Exchange, an account with 10k reputation or moderator privileges is required. If at some point only Stack Exchange employees would be able to access ""deleted"" posts, then I’d consider these to no longer be available to the public.</p>
","2643"
"Why shouldn't Creative Commons licenses be used for software?","451","","<p>Suppose I was finishing up an open source software. I needed to license it under an open source license.</p>

<p><strong>My question:</strong></p>

<p>Why would I not want to license my software under a Creative Commons license?</p>

<p>Why are other licenses such as  MIT licenses better for this?</p>
","<p>Short answer: because the CC licenses have not been designed for software and source code.</p>

<p>This is <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F"">answered by Creative Commons themselves</a> in their FAQ:</p>

<blockquote>
  <p>Unlike software-specific licenses, CC licenses do not contain specific
  terms about the distribution of source code, which is often important
  to ensuring the free reuse and modifiability of software. Many
  software licenses also address patent rights, which are important to
  software but may not be applicable to other copyrightable works.
  Additionally, our licenses are currently not compatible with the major
  software licenses, so it would be difficult to integrate CC-licensed
  work with other free software. Existing software licenses were
  designed specifically for use with software and offer a similar set of
  rights to the Creative Commons licenses.</p>
</blockquote>
","782"
"Does it make sense to license my content under a more restrictive license if it's licensed CC-BY-SA?","447","","<p>Let's say that I make a post on a Stack Exchange site. That content is owned by me, but I gave the company a perpetual and irrevocable license under Creative <a href=""http://creativecommons.org/licenses/by-sa/3.0/"">Commons Attribution Share Alike 3.0</a>. As long as that content is available under CC-BY-SA, anyone can reuse it under those terms.</p>

<p>Let's say I post the exact same content on a website, but license it under ""all rights reserved"" or <a href=""http://creativecommons.org/licenses/by-nc-nd/4.0/"">CC-BY-NC-ND</a>. Anyone doing a Google Search will likely find the material on the Stack Exchange site where it was posted, which would include the CC-BY-SA licensing information. If that license is appropriate for their uses, then they can use it.</p>

<p>CC-BY-SA is pretty forgiving. The only thing that it requires is attribution to me, identification of changes, and release under the same license. That last one is, perhaps, the biggest sticking point for someone to reuse my content, since it discourages commercial use.</p>

<p>The only case mentioned so far is if all of the CC-BY-SA sources stopped releasing the content under that license (for example, there were no mirrors of my content and Stack Exchange shut down and did not make the content available anymore). Then, if it's only available under the more restrictive license, that's what people have to work with.</p>

<p>With the exception of all sources of the CC-BY-SA content stopping distribution under that license, is there any advantage to a stricter license, such as ""all rights reserved"" or CC BY-NC-ND?</p>
","<p>The simple answer is <strong>no, it doesn't make much sense.</strong></p>

<p>You've posted this work on Stack Exchange, where it's licensed under CC BY-SA. I go and copy your work, use it in something I'm doing, and release it perfectly legally under BY-SA. My use case is legal, yes?</p>

<p>Bob sees what I've done, and sees the attribution to you. He decides he likes your work, and he wants to use it too. So he follows my link to your original, only to discover a 404 Not Found. However, he's clever enough to follow my <em>other</em> link to your website, where it's distributed under CC BY-NC-ND.</p>

<p>At this point, there are two possible ways it could go.</p>

<ol>
<li><p>Bob wants to make something based on your work and sell it. The BY-NC-ND license disallows this. Bob says to himself ""oh well, I'll just go ahead and use it under BY-SA"".</p>

<p>You may not <em>want</em> Bob to do this, but there's no way of stopping him. Unless he was incredibly stupid about it, you can't prove that he didn't get hold of your content back when it was on Stack Exchange, and has just spent a long time making his derivative. Essentially, you can't prove you didn't license it to him under BY-SA. This is a slightly iffy use case, and not <em>entirely</em> legally sound (though it's pretty good), but he would likely get away with it. However, if he wants to stay entirely legally correct, there's an even easier way.</p></li>
<li><p>Bob got to your work through my work. My work was created and released when the content was on Stack Exchange. You licensed that to me under BY-SA for sure, so there's no doubt my use is legal. When the license on your work changed because Stack stopped distributing it, that didn't make my work illegal because I've already got the license.</p>

<p>Bob can simply use my work. I have the right to distribute that under BY-SA, and to grant him the right to do so via the license. Hence, he can make his derivative a derivative of your work <em>in</em> my work, if that makes sense. He attributes back to me, which attributes back to you. The license conditions are satisfied, and the lawyers can't complain.</p></li>
</ol>

<p>You can dual-license under a more restrictive license if you want to - some people won't know that it was originally licensed under BY-SA, and will use it under BY-NC-ND - but just bear in mind that <em>once licensed, always licensed</em>.</p>
","2122"
"NPM - can I use module with MIT license, even if it requires submodule with CC-BY license?","446","","<p>as the title implies, I've installed some npm packages - all of which I've knowingly installed and requested are published under MIT, ISC, Apache 2, or other permissive license.</p>

<p>However, some of these packages, which I require in the <code>package.json</code>, require other packages with less permissive licenses, such as <strong>CC-BY-3.0</strong> or <strong>CC-BY-4.0</strong>.</p>

<p>I would like to use the packages I required in a project for commercial use. What are my obligations regarding the licenses? Are there any, as I've not required the non-permissive licensed modules directly?</p>

<p>Any help will be appreciated.</p>
","<blockquote>
  <p>I would like to use the packages I required in a project for commercial use. What are my obligations regarding the licenses? Are there any, as I've not required the non-permissive licensed modules directly?</p>
</blockquote>

<p>When you redistribute NPM packages (or any package) you need to consider the chain of dependencies at full depth <a href=""https://en.wikipedia.org/wiki/Turtles_all_the_way_down"" rel=""nofollow noreferrer"">all the way down</a>.
I provided a comprehensive <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc"">overview of dependencies here</a> </p>

<p>You therefore have to consider and <strong>comply with any and all the licenses of the packages</strong> whether these are direct or indirect dependencies.</p>

<p>If you are not comfortable with the licenses of some packages in that tree you could either:</p>

<ol>
<li>contact the authors to ask for an other license</li>
<li>fork or patch the packages to remove the deps you do not like and replace (or rewrite) with something else.</li>
</ol>

<p>FWIW, the CC-BY licenses are rather permissive with only a few  more requirements than an MIT. They are also pretty poor licensing choices for software. Ask your lawyers if they are comfy with this or not in your context.</p>

<blockquote>
  <p>So, I understand that I have to comply also with the CC-BY license. Would it be enough to mention the author somewhere on an 'about' page?</p>
</blockquote>

<p>It is unlikely to be enough, for the CC-BY 4.0, the short non-legal code states:</p>

<pre><code>Attribution — You must give appropriate credit, provide a link to the
license, and indicate if changes were made. You may do so in any
reasonable manner, but not in any way that suggests the licensor
endorses you or your use
</code></pre>

<p>And then in slightly more details:</p>

<pre><code>If supplied, you must provide the name of the creator and attribution
parties, a copyright notice, a license notice, a disclaimer notice, and
a link to the material. CC licenses prior to Version 4.0 also require
you to provide the title of the material if supplied, and may have other
slight differences.
</code></pre>

<blockquote>
  <p>we are going to use a lot of different node modules [...] would it be sufficient to dedicate one page to these attributions? On that page, each of the modules would be properly attributed - with the name of the creator and attribution parties, a copyright notice, a license notice, a disclaimer notice, and a link to the material. </p>
</blockquote>

<p>It may depend on the license as some license may require a more prominent attribute, though in practice that should suffice and this is a common way to these things. You would also want to ensure that the source code of copyleft-licensed modules (such as LGPL, MPL, etc) is provided or available. If you do not minimize your code and use them as-is, then this comes for free with node_modules.</p>

<p>As a side note, there are a few node/npm utilities to help with this and also AttributeCode (which is in Python and that I co-maintain)</p>
","4338"
"When is making a subtitle file for a commercial movie legal?","444","","<p>For example, on OpenSubtitles, a website which offers 3.5mln subtitles we can read <a href=""http://www.opensubtitles.org/en/disclaimer"" rel=""nofollow"">Disclaimer</a>:</p>

<blockquote>
  <p>These files are NOT illegal warez downloads, we only offer files that we believe we are free to redistribute.</p>
</blockquote>

<p>Therefore when does creating/making open subtitles for commercial movies/TV and publishing it become illegal?</p>

<p>Does it depend on the production company (if they agree or their license), format of the file (like <a href=""http://www.opensubtitles.org/en/faq#formats"" rel=""nofollow"">IDX+SUB</a>) or something else?</p>
","<p>TL;DR: Subtitle files are almost never free to redistribute, as they almost always are a non-authorized derivative work of the original movie.</p>

<p>Creating a text form of the audio of an audiovisual work creates a derivative work, and so does creating a translation.</p>

<p>You need a license to allow you to do so. For non-open movies you don't have that license.* Some movies are published under a license that does permit derivative works. For example, <a href=""https://en.wikipedia.org/wiki/The_Internet%27s_Own_Boy:_The_Story_of_Aaron_Swartz"" rel=""nofollow"" title=""The Internet&#39;s Own Boy: The Story of Aaron Swartz"">The Internet's own boy</a> was published under CC BY-NC-SA 3.0 and does allow you to make and distribute derivative works like subtitles.**</p>

<p>If you make a translation, you have a separate copyright to the translation itself, but it forms a derivative work of the original movie. You will have to meet the license requirements of the movie, which will almost never allow for this.</p>

<p>When Open Subtitles claims</p>

<blockquote>
  <p>These files are NOT illegal warez downloads, we only offer files that <strong>we believe</strong> we are free to redistribute.</p>
</blockquote>

<p>(emphasis mine)</p>

<p>They may be correct that they believe they are free to redistribute, but they are almost certainly wrong in that that is true.</p>

<p>*In most cases. In theory, you could have an agreement with the movie studio that allows you to publish subtitles under some agreement. For the scope of this question, I'm going to assume that's not the case.</p>

<p>** The NC (NonCommercial) clause makes it fall shy of the open definition. Whether the non-commercial clause allows for the use of the work on a website supported with advertisements is a whole discussion on its own, but making and distributing derivative works on its own is allowed. </p>
","1664"
"Can I redistribute libstdc++ with proprietary software?","442","","<p>So, libstdc++ has the <a href=""http://www.gnu.org/licenses/gcc-exception-3.1.en.html"" rel=""nofollow"">runtime exception</a> that permits even <a href=""https://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.license.any_program"" rel=""nofollow"">proprietary software to <em>use</em> libstdc++</a>. </p>

<p>But, hypothetically, can I actually <em>distribute</em> a non-modified binary of libstdc++ along with a binary of my proprietary program? (Given that I make the source code for libstdc++ available to anyone that asks, and that I distribute a copy of its license).</p>

<p><strong>A specific example:</strong> Let's say I use MinGW to compile a Windows binary. This requires libstdc++ (and other libraries, such as libgcc) to function. To make it easy for end-users to install this program, I'd like to just distribute the app along with libstdc++, libgcc etc. I'm asking of this is possible (as for it being <em>ethical</em> is another issue; I support free software, that's why I say it's hypothetical). Also, I'm thinking about <em>dynamic</em> linking instead of static.</p>
","<p>From the <a href=""https://gcc.gnu.org/onlinedocs/libstdc++/manual/license.html"">documentation</a>:</p>

<blockquote>
  <ol>
  <li>Grant of Additional Permission.</li>
  </ol>
  
  <p>You have permission to propagate a work of Target Code formed by
  combining the Runtime Library with Independent Modules, even if such
  propagation would otherwise violate the terms of GPLv3, provided that
  all Target Code was generated by Eligible Compilation Processes. You
  may then convey such a combination under terms of your choice,
  consistent with the licensing of the Independent Modules.</p>
</blockquote>

<p>So, you can distribute the combination of your code and the library.</p>
","1841"
"Differences between Firefox and Iceweasel","442","","<p><a href=""https://en.wikipedia.org/wiki/Mozilla_Corporation_software_rebranded_by_the_Debian_project#IceWeasel"" rel=""nofollow"">Iceweasel</a> is a fork of Firefox which was made by the Debian project because the license conditions of the Firefox name and logo violate the Debian Free Software Guidelines.</p>

<p>Did Debian do any other changes to Firefox which were not just cosmetic?</p>
","<p>In Debian, <a href=""https://lwn.net/Articles/676799/"" rel=""nofollow"">Iceweasel is Firefox</a> once again, since <a href=""http://anonscm.debian.org/cgit/pkg-mozilla/iceweasel.git/commit/debian?id=15cc4433d63e2aa8e89339c248634c52d4e95789"" rel=""nofollow"">March 10, 2016</a>. There's an <a href=""https://addons.mozilla.org/en-US/firefox/addon/iceweasel-branding/"" rel=""nofollow"">Iceweasel branding</a> add-on which can be used to restore the Iceweasel branding.</p>

<p>There are some non-cosmetic differences between Mozilla's version and Debian's; you can see all the patches <a href=""http://anonscm.debian.org/cgit/pkg-mozilla/iceweasel.git/tree/debian/patches"" rel=""nofollow"">here</a>. You'll find changes which disable ""phone-home"" features (Firefox health report), change the way plugins and extensions are handled to work better in the context of a distribution with packaged plugins and extensions... There are also a series of bug fixes backported from work-in-progress upstream versions.</p>

<p>These are the kinds of changes you could find in any package in Debian (the old branding changes weren't, of course, although quite a few Debian packages include minor branding changes — <em>e.g.</em> adding a ""Debian"" mention in version numbers in <code>gcc</code> and Wine). The Chromium package for example also disables various ""phone-home"" features; many packages include backported bug fixes, and changes to integrate the software into the distribution.</p>
","544"
"GPL licenced code for a module of a closed source program","440","","<p>I want to create a dynamically loadable module (.dll or .so) for a closed source program, but I would like to make the source code of this module available, and I'd like it to be (A)GPL licensed, so others could use my module, but I also want to make sure their code would also be open sourced. </p>

<p>My questions are:</p>

<ul>
<li>Since the whole project would be one executable at the end would the closed source program count as ""derivative work"", thereby it would need to be GPL as well?</li>
<li>If yes, can I add some kind of additional permission to the GPL licence of my code to explicitly allow this linkage to occur, so it could actually be distributed with the app?</li>
<li>If yes, where and how should I put these additional permissions in the licence file?</li>
<li>Would this modified licence still be GPL (compatible)? What kind of open source code could I use within my module?</li>
<li>If the resulting licence would not be GPL compatible are there any other licences that are better sutied for this situation, but are still similar in essence to GPL (e.g. reusing the code is only possible in case it's source is also released)?</li>
</ul>
","<p><strong>Since the whole project would be one executable at the end would the closed source program count as ""derivative work"", thereby it would need to be GPL as well?</strong></p>

<p>The basic understanding of the GPL and it's intention saying: yes, the program must be GPL too, as through the linking you create a derivative work. That is the position of the FSF. <a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License#Linking_and_derived_works"" rel=""nofollow"">But it is not shared by everyone.</a> Some interpretations say, only static linking make it a derived work, not dynamic linking (which it would be, you saying it is a DLL). There are even angles, that differ even more. <a href=""http://www.linuxjournal.com/article/6366"" rel=""nofollow"">Lawrence Rosen</a> (from the OSI) says:</p>

<blockquote>
  <p>The primary indication of whether a new program is a derivative work
  is whether the source code of the original program was used [in a
  copy-paste sense], modified, translated or otherwise changed in any
  way to create the new program. If not, then I would argue that it is
  not a derivative work</p>
</blockquote>

<p>So, there are different interpretations. As far as I know this dispute wasn't put to test in the courts yet. The GPL was enforced multiple times in courts, but as far as I know it was always about violations in using the GPL-program, not because of linking.</p>

<p><strong>If yes, can I add some kind of additional permission to the GPL licence of my code to explicitly allow this linkage to occur, so it could actually be distributed with the app?</strong></p>

<p>Yes. Many projects use a <a href=""https://en.wikipedia.org/wiki/GPL_linking_exception"" rel=""nofollow"">linking exception</a> to the GPL.</p>

<p><strong>If yes, where and how should I put these additional permissions in the licence file?</strong></p>

<p>I found no clear guidance of this, but in my understanding it must be clear that an exception is applied and which part is the original GPL. So I would have the copyright statement saying it is GPL with your exception and put both in the license file, but with clear distinction (new header or so).</p>

<p><strong>Would this modified licence still be GPL (compatible)? What kind of open source code could I use within my module?</strong></p>

<p>As far as I understand, the code of your module can be used in other GPL-projects, but different GPL-code cannot be used in your module without the author consenting to your exception. Other than that, more permissive licenses still should work, as long as they are conforming with the terms of the GPL and your exception.</p>

<p><strong>If the resulting licence would not be GPL compatible are there any other licences that are better sutied for this situation, but are still similar in essence to GPL (e.g. reusing the code is only possible in case it's source is also released)?</strong></p>

<p>The <a href=""https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License"" rel=""nofollow"">LGPL</a> doesn't count linking as creating a derived work, but still applies copyleft to the code of your module. That would imply your module can be linked to different programs without making them Open Source, but modifying your module still demands making that changes LGPL.</p>
","525"
"Dealing with different development environments","437","","<p>In corporate software development, all developers are, typically, using the same IDE running on the same version of the same operating system. In OSS, the team is distributed and providing their own development environment. This can lead to some difficult situations where one contributor checking in code breaks the build for another. I've personally struggled with this exact situation. Every pull from the main branch breaks my build configuration. I fix it, do some work, push back, and then my partner does the same, fixing his build configuration before he can get any actual work done. </p>

<p>What techniques/tools can be used to compensate for different development environments? Are there specific things that should (or shouldn't) be checked into the repository to help alleviate this?</p>
","<blockquote>
  <p>In corporate software development, all developers are, typically, using the same IDE running on the same version of the same operating system</p>
</blockquote>

<p>This is a misconception. Example:</p>

<p>I run Eclipse Luna with openjdk-1.7 on Ubuntu 15.04, my colleague runs Eclipse Kepler with oracle jdk 1.7 (previously 1.6) on Windows.</p>

<p>Still we got our builds working.</p>

<p>The goal is to capture the bare minimum configuration for things to work ""out of the box"", and discard everything else. There's simple tools for that in many many languages, the usual suspects are:</p>

<ul>
<li><strong>Dependency Management:</strong><br>
This is the tool of choice to manage what you need for development, building and execution. It grabs all the things you need from a repository somewhere on the internet and makes them available to your IDE and the build-manager.
e.g. Ivy, NuGet, npm, Gradle, pip, ...</li>
<li><strong>Build Management:</strong>
e.g Maven, Gradle, Ant (sorry I don't do much aside from java)</li>
</ul>

<p>They provide often rather simple configuration files based on a declarative syntax (XML, YML, JSON) that set up your dependencies.</p>

<p>It's important to note that this does <strong>not</strong> include IDE settings!<br>
IDE Settings are one of the things I'd never check in to source control. Nobody should have to care where the project is checked out. Nobody should have to deal with suddenly different syntax-highlighting and IDE extensions. The only viable IDE setting to version is Formatting preferences! Everything else should (and in 99.9% of cases can) be left to each developer themselves </p>

<p>Another important factor is making code not rely on platform features:</p>

<ul>
<li>Avoid hardcoded paths like the plague</li>
<li>Prefer configuration over code</li>
<li>Use Environment Variables where necessary</li>
</ul>

<h2>In short:</h2>

<h3>Things to leave out of VC:</h3>

<ul>
<li>IDE settings (.project, .sln, .idea, ...)</li>
</ul>

<h3>Things to get into VC:</h3>

<ul>
<li>Dependency Configuration</li>
<li>Build Configuration (based on env variables / relative paths)</li>
<li>Formatting preferences (<em>optional</em>)</li>
</ul>
","1500"
"Java and AGPL 3: how far does license extend into web app?","436","","<p>I want to use a java library released by someone else having an AGPL3 license. I'm not modifying their library, but I do link to it using</p>

<pre><code>import com.theirlibrary.methodABC;
</code></pre>

<p>in one of my java classes (e.g. <code>MyClass1.java</code>). Thus, I assume the compiled java class is AGPL obligated, and if I use it, I must make it public. </p>

<p>My question is, how far does the AGPL3 obligations extend into my web application?</p>

<p>My application file structure is:</p>

<pre><code>myapplication
    WEB-INF
        web.xml
        FLEX
            remoting-config.xml
            services-config.xml
            messaging-config.xml
            proxy-config.xml
        CLASSES
            COM
                MYCOMPANY
                     MyClass1.java  (uses AGPL3 library)
                     MyClass1.class (uses AGPL3 library)
                     MyClass2.java
                     MyClass2.class
                     SERVLET
                         MyServlet1.java
                         MyServlet1.class
                         MyServlet2.java
                         MyServlet2.class
</code></pre>

<p>The <code>web.xml</code> file includes java servlets:</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;MyServletA&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.mycompany.servlet.MyServlet1&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;MyServletB&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.mycompany.servlet.MyServlet2&lt;/servlet-class&gt;
&lt;/servlet&gt;
...
</code></pre>

<p>The <code>remoting-config.xml</code> file looks like:</p>

<pre><code>&lt;service id=""remoting-service"" class=""xxx""&gt;
...
&lt;destination id=""myDestination1""&gt;
    ...
    &lt;properties&gt;
        &lt;source&gt;com.mycompany.MyClass1&lt;/source&gt;
        &lt;scope&gt;application&lt;/scope&gt; 
    &lt;/properties&gt;
&lt;/destination&gt;
&lt;destination id=""myDestination2""&gt;
    ...
    &lt;properties&gt;
        &lt;source&gt;com.mycompany.MyClass2&lt;/source&gt;
        &lt;scope&gt;application&lt;/scope&gt; 
    &lt;/properties&gt;
&lt;/destination&gt;
...
</code></pre>

<p>Note that only <code>MyClass1.java</code> depends on the AGPL3 library. Also, each class and servlet is completely independent of each other (they don't call each other or depend on each other's existence to function). A separate code base running in the client browser calls these classes and servlets.</p>

<p>Is it sufficient to only make <code>MyClass1.java</code> public? </p>

<p>Or, do I need to make <code>MyClass2.java</code> public as well? </p>

<p>What about the servlets? </p>

<p>What about my code sitting in the client's browser, which calls the classes and servlets depending on the user's choices?</p>

<p>How far into the application do I need to make public with AGPL3 license?</p>
","<p>First there is no such thing as ""infection"". A bona-fide piece of FLOSS software is NOT a virus. There are only license obligations and requirements. Therefore a proper question should have been instead:</p>

<blockquote>
  <p>My question is, how far does the AGPL3 obligations extend into my web application?</p>
</blockquote>

<p>The general theory is that when my program calls a function of a library using an A/L/GPL license, I am creating a work ""based on the program"" e.g. a derivative work and therefore the copyleft obligations (including eventual source code redistribution) extend to my program.</p>

<p>The LGPL licenses provide an exception to this when the library is used unmodified and the call is done through some dynamic linking.
Some exceptions to the GPL (such as the <a href=""https://spdx.org/licenses/Classpath-exception-2.0.html"" rel=""nofollow noreferrer"">Classpath exception</a>) have the same effect and address specific linking (be it dynamic or static).</p>

<p>Short of such an exception, the copyleft would extend to the code that calls functions of copyleft-licensed code. Read also <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc/4315#4315"">this answer</a> more details on how copyleft terms and dependencies relate. </p>

<p>Now copyleft is <strong>triggered by redistribution</strong>. Running a public web backend app on some private server does not typically constitutes redistribution.</p>

<p>But the AGPL has a specific and somewhat unique <a href=""https://www.gnu.org/licenses/agpl-3.0.html#section13"" rel=""nofollow noreferrer"">section 13</a> that extends what is considered redistribution to certain public networks deployment such as a public web application:</p>

<blockquote>
  <p><em>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.[...]</em></p>
</blockquote>

<p>As long as I do not modify the library, this paragraph has no impact on my web application as long as I do not redistribute the code for this web application and I am just merely running it: here the effective impact of the AGPL is not different from the impact of using GPL-licensed code on the server-side private backend of a public web application and I do not have specific source code redistribution obligations.</p>

<p><strong>Additional answer elements, based on comments to this answer:</strong></p>

<blockquote>
  <p>(1) MyClass1.java is a ""derivative"" work and copyleft obligations extend to my program; (2) these obligations get triggered when MyClass1.java is redistributed; (3) hosting MyClass1.java on a public web backend app on a private server is not considered redistribution in AGPL3 unless I modify the source code in the original AGPL3 library; (4) merely using the original AGPL3 code using java import does not quality as modifying the AGPL3 java library; (5) I have no code redistribution obligations for AGPL3. Is that correct?</p>
</blockquote>

<p>Yes, that's my take.</p>

<blockquote>
  <p>I'm looking at different companies explanation of AGPL3 with their software, and I can't find confirmation regarding ""unmodified"" derived software being allowed to serve from public web app in private server. [...] makehuman.org/license_explanation.php [...] </p>
  
  <p>Perhaps more clearly stated, this <a href=""https://stackoverflow.com/questions/27867400/is-itext-java-library-free-of-charge-or-have-any-fees-to-be-paid"">Q&amp;A</a> says:</p>
  
  <p>You can not use iText in a web application without making the full source code of your web application available through that web application. This is why people often refer to the AGPL as a viral license: all the software that touches an AGPL library such as iText needs to be free too.</p>
</blockquote>

<p>There are many ways to interpret licenses. I simply refer to the text of the license. The AGPL is rather simple and clear on this topic and the key trigger of its extra copyleft terms is modification. I can appreciate a different interpretation, but modifying is rather explicit and consistent in the way it is defined in the <a href=""https://www.gnu.org/licenses/agpl-3.0.html#section0"" rel=""nofollow noreferrer"">AGPL</a> and in other FSF licenses such as the <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""nofollow noreferrer"">GPL 3.0</a> (where the terms are identical):</p>

<blockquote>
  <p>To ""modify"" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.</p>
</blockquote>

<p>Calling an existing library in Java redistributed as its own Jar is <em>using</em> and it can be neither <em>copying</em> nor <em>modifying</em> in anyway I can reasonably fathom.</p>

<p>When I see an interpretation of an FSF license markedly different from the what the text says, there are two possibilities to me:</p>

<ol>
<li><p>I consider this interpretation --<em>how flawed it may be</em>-- to be part of the license and respect and comply with this interpretation.</p></li>
<li><p>I can ignore a flawed interpretation if I am confident of what its flaws are and may eventually seek legal advice to confirm this.</p></li>
</ol>

<p>As a side note, several (but not all) companies using a dual licensing scheme with AGPL and commercial licensing often suggest that any network usage even if unmodified is redistribution and triggers the AGPL copyleft. I can appreciate the quid-pro-quo to entice the purchase of a commercial license but I think this is wishful thinking not grounded in any sane interpretation of the license text. I also personally think this is contrary not only with the letter but also with the spirit of the extra network-related terms of the AGPL that thrive to ensure that modifications are eventually shared but that unmodified usage without redistribution is not restricted otherwise.</p>

<p>Not all companies using a dual licensing scheme agree with a flawed approach that unmodified network usage is a redistribution. Take for <a href=""https://www.mongodb.com/community/licensing"" rel=""nofollow noreferrer"">instance MongoDB</a> reading of the AGPL:</p>

<blockquote>
  <p>Our goal in selecting the AGPL v3.0 as our open source license is to require that enhancements to MongoDB be released to the community. </p>
</blockquote>

<p>which is consistent with the license text.</p>
","4692"
"Can I fork and sell a modified Apache 2.0 licensed project?","433","","<p>There is a nice <strong>Apache 2.0-licensed</strong> project that already implements the foundation of a way more elaborate product that I intend to sell as proprietary.</p>

<p>Something like the <strong>70%</strong> of the code will be modified or rewritten, so it's not really like I'm including it as a module or library.</p>

<p>Unfortunately I <strong>cannot release the sources</strong> of the final product as OSS, but it is possible to add credits and acknowledgements.</p>

<p>Would this be legal?</p>
","<p>First, a caveat. If this is critical, you should consult a lawyer and explain exactly what you're doing - this answer isn't legal advice.</p>

<p>What you're describing is allowed under the Apache license. You will still need to comply with the conditions such as providing attribution and including a copy of the license. The best source of information is the license itself; however, the Apache Foundation does provide a nice summary in its FAQs here: <a href=""https://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN"" rel=""nofollow noreferrer"">https://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN</a> </p>
","5372"
"GPL Violation - What is our legal exposure to third parties (not our contributors)?","429","","<p>I am a contributor to a very old project presently in violation of the GPL. Our project is a plugin for a closed-source program, but the GPL does not permit this kind of linking. The project should have been licensed under the LGPL instead, but the original authors were not aware of this.</p>

<p>Relicensing is already covered in another question, so we will ignore that here.</p>

<p>There are only about 30 contributors to the project, but it's almost ten years old at this point. Many have moved on to other projects.</p>

<p>The contributors clearly intended for their work to be used with the closed-source program in question. They did not know the GPL forbade it. It is exceedingly unlikely that one of them will take legal action against the project.</p>

<p>If the project continues despite the GPL violation, what is our legal exposure to third parties? Can the FSF or any other group sue us?</p>
","<p>If the project does not create and distribute a combined work of the plugin and the closed source host, then I see no realistic liability. This is because you aren't violating the GPL. A violation occurs when someone combines the GPL library with the closed source component and then distributes the result. You haven't done that, so <em>you</em> haven't violated anything. Someone who uses your plugin in the privacy of their home or business, but doesn't redistribute it, doesn't violate the GPL, either.</p>

<p>Only the copyright holders of your project have a course of action if someone does combine the works and distribute them. So if all of you agree that it was your intent to permit this use, then none of you will bother users. If none of you bother users, including anyone who creates and distributes a combination, there is no one to sue anyone else.</p>

<p>A very faint liability might come into play if, in fact, some copyright holder did sue some third party for violating the license, and the third-party tried to come up with a counter-suite that you all somehow led him or her astray. I don't believe it; at worse, the fact that you all published this component looks to me like estoppel against any attempt by any of you to enforce the license.</p>

<p>Remember, the GPL is a license that you, the copyright holder, grant. You own the rights. You are the only people who can bother anyone else for violating the terms of the license. If you choose (like Linux) to take a different view of plugins and linkage, you can do that.</p>
","1545"
"Why don't BSD developers use the SSLeay addendum if they hate GPL?","428","","<p>It's not uncommon to see BSD developers upset that someone takes their project, does a few modifications, and then releases the resulting work under GPL, such that the resulting improvements can no longer be incorporated back upstream BSD, creating a one-way street.</p>

<p><a href=""http://undeadly.org/cgi?action=article&amp;sid=20070913014315"" rel=""nofollow"">From undeadly.org</a>:</p>

<blockquote>
  <p>KernelTrap has an interesting article in which Theo de Raadt discusses the legal implications of the recent relicensing of OpenBSD's BSD licensed Atheros driver under the GPL. De Raadt says, ""it has been like pulling teeth since (most) Linux wireless guys and the SFLC do not wish to admit fault. I think that the Linux wireless guys should really think hard about this problem, how they look, and the legal risks they place upon the future of their source code bodies."" He stressed that the theory that BSD code can simply be relicensed to the GPL without making significant changes to the code is false, adding, ""'in their zeal to get the code under their own license, some of these Linux wireless developers have broken copyright law repeatedly. But to even get to the point where they broke copyright law, they had to bypass a whole series of ethical considerations too."" </p>
</blockquote>

<p>I've recently noticed that the licence under which SSLeay was released, on which OpenSSL is based, on which LibreSSL is based, has the following addendum after what looks like a standard original 4-clause BSD licence with the advertising clause (which, I must add, is already incompatible with the GPL due to the presence of the aforementioned advertising clause).</p>

<p><a href=""http://bxr.su/o/lib/libssl/src/crypto/objects/obj_dat.c#52"" rel=""nofollow"">From bxr.su</a>:</p>

<pre><code> *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
</code></pre>

<p>To avoid the problem at its root:</p>

<ul>
<li><p>Why don't the BSD developers add back the advertising clause, to make sure that their licence is incompatible with the GPL Public Licence without saying so explicitly?</p></li>
<li><p>Or, alternatively or additionally, why don't they add an addendum as above to their own BSD/ISC/MIT/etc BSD-compatible licence?</p></li>
</ul>
","<p>The 4 clause BSD license is not OpenSource compliant as it contains two contradicting claims:</p>

<ul>
<li><p>All advertising materials mentioning features or use of this software 
must display the following acknowledgement: 
This product includes software developed by the University of 
California, Berkeley and its contributors. </p></li>
<li><p>Neither the name of the University nor the names of its contributors 
may be used to endorse or promote products derived from this software 
without specific prior written permission.</p></li>
</ul>

<p>So it requires advertizing and forbids it at the same time.</p>

<p>But there is no need to add a clause like the one from SSL either as the BSD license does not permit to relicense the code. </p>

<p>The reason why you cannot relicense BSD code is that this is something that would need an explicit written permission from the Copyright owner that is obviously not part of the BSD license.</p>

<p>Legally, there are two options with vanilla BSD licensed code:</p>

<ul>
<li><p>keep the actual source private.</p></li>
<li><p>publish the actual source under the original terms and conditions.</p></li>
</ul>

<p>BTW: as a result from the letter from Theo de Raadt, the linux kernel sources have been modified to contain additional GPL headers only for those files where the original author did enter the code into the Linux kernel project and thus has the right to do so.</p>
","2005"
"Using open source sample code provided by Microsoft for commercial software","427","","<p>I am developing a software for commercial release which is developed ahead on a sample code provided by MSDN </p>

<p>This is mentioned in the beginning</p>

<p><code>// THIS CODE AND INFORMATION IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE. 
// 
// Copyright (c) Microsoft Corporation. All rights reserved</code></p>

<p>The license by Microsoft states this:</p>

<blockquote>
  <p>MICROSOFT LIMITED PUBLIC LICENSE version 1.1
  This license governs use of code marked as “sample” or “example” available on this web site without a license agreement, as provided under the section above titled “NOTICE SPECIFIC TO SOFTWARE AVAILABLE ON THIS WEB SITE.” If you use such code (the “software”), you accept this license. If you do not accept the license, do not use the software.</p>
  
  <ol>
  <li><p>Definitions
  The terms “reproduce,” “reproduction,” “derivative works,” and “distribution” have the same meaning here as under U.S. copyright law.<br>
  A “contribution” is the original software, or any additions or changes to the software.<br>
  A “contributor” is any person that distributes its contribution under this license.<br>
  “Licensed patents” are a contributor’s patent claims that read directly on its contribution.</p></li>
  <li><p>Grant of Rights<br>
  (A) Copyright Grant - Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.<br>
  (B) Patent Grant - Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.</p></li>
  <li><p>Conditions and Limitations<br>
  (A) No Trademark License- This license does not grant you rights to use any contributors’ name, logo, or trademarks.<br>
  (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.<br>
  (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.<br>
  (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.<br>
  (E) The software is licensed “as-is.” You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.<br>
  (F) Platform Limitation - The licenses granted in sections 2(A) and 2(B) extend only to the software or derivative works that you create that run directly on a Microsoft Windows operating system product, Microsoft run-time technology (such as the .NET Framework or Silverlight), or Microsoft application platform (such as Microsoft Office or Microsoft Dynamics).</p></li>
  </ol>
</blockquote>

<p>So am I allowed to use this code and publish my software or there is a possibility of legal actions against me for using Microsoft property?</p>
","<p>What you're basically asking is ""can I use Ms-LPL"" in commercial software, and the answer is <em>yes</em>, but with the big caveat that you can only do this if your project runs on Windows.</p>

<p>Thanks to this <a href=""https://stackoverflow.com/a/15710049/2038264"">exact question on SO</a>:</p>

<ul>
<li>Ms-LPL is based on <a href=""https://tldrlegal.com/license/microsoft-public-license-%28ms-pl%29"" rel=""nofollow noreferrer"">Ms-PL</a> which is basically a permissive, free/open license similar to MIT/X11 and BSD.</li>
<li><p>But there is a Windows-platform limitation:</p>

<blockquote>
  <p>3 (F) Platform Limitation- The licenses granted in sections 2(A) &amp; 2(B) extend only to the software or derivative works that you create that run on a Microsoft Windows operating system product.</p>
</blockquote></li>
</ul>
","2319"
"When is Nodemailer not free?","416","","<p>I was looking into using Nodemailer in an application of mine and was wondering when isn't it free and requires a license.</p>

<p><a href=""http://nodemailer.com/about/license/"" rel=""nofollow noreferrer"">http://nodemailer.com/about/license/</a></p>

<p>I have tried reading over the doc but all the legal stuff goes over my head. <a href=""http://nodemailer.com/about/pricing/"" rel=""nofollow noreferrer"">On the pricing page they have this</a>:</p>

<blockquote>
  <p>Nodemailer is available under a more restrictive license without a fee, so you are free to test Nodemailer before actually buying anything.</p>
</blockquote>

<p>But don't really list the restrictions that I can find so not sure what they are.</p>
","<p>Reading their <a href=""http://ec.europa.eu/idabc/eupl.html"" rel=""nofollow noreferrer"">license</a> (EUPL 1.1), it's a copyleft license:</p>

<blockquote>
  <p>According  to  its  article  5,  the  EUPL  is  also   copyleft    in 
  order    to    avoid    any    exclusive     appropriation of the
  software.</p>
</blockquote>

<p>FSF <a href=""https://www.gnu.org/licenses/license-list.en.html#EUPL"" rel=""nofollow noreferrer"">confirms</a> that it's a copyleft license incompatible with, but convertible to, GPL.</p>

<p>So, it's a dual-licensed product, and if you don't wish to distribute your software under EUPL or GPL, you need to pay.</p>
","5148"
"Acknowledging employer in an open source project","415","","<p>My employer has given me to permission to open source a component of a project that I have been working on, allowing me to retain ownership and control, with the condition that they be acknowledged in some way.  This open source tool would be hosted on GitHub, as part of a larger collection of tools in an existing collaborative organization's repository, so not a part of our company's GitHub organization repositories.  It would seem that the best way to acknowledge my employer in a permanent and visible way would be to include some note in the software's license, but I was not sure if this were appropriate, or even legal.</p>

<p>Is there a common way of acknowledging people or organizations in FLOSS licenses?  If not, what other options are there for acknowledgements?</p>
","<p>Let me tell you one thing. Definitely, and please, <em>please</em> don't modify the license that you apply to your software. For example: </p>

<p>The <a href=""http://www.gnu.org/licenses/gpl-3.0.html"" rel=""nofollow"">GPLv3</a>, is copyrighted itself (emphasis is mine):</p>

<blockquote>
  <p>Copyright © 2007 Free Software Foundation, Inc. <a href=""http://fsf.org/"" rel=""nofollow"">http://fsf.org/</a></p>
  
  <p>Everyone is permitted to copy and distribute verbatim copies of this license document, <strong><em>but changing it is not allowed.</em></strong> </p>
</blockquote>

<p>You'll run into many problems by changing the legal code of a license.</p>

<hr>

<p>In terms of making a note of your company (or even yourself) in the project, there are a few ways you can do this:</p>

<ul>
<li><p><em>Edit the project's source code:</em><br>
All you need to do is really put a few ""commented"" lines like so, likely at the top of the file:</p>

<pre><code>// Haha! This source code file has been viciously made to make a reference to my
// company! This is lovely for [insert-company-name-here]
</code></pre>

<p>Alright, maybe not <em>exactly like that</em>... but you get the point.</p></li>
<li><p>Add a section in a ""<code>readme</code>"" file.<br>
It is common for many projects to include a <code>readme</code> file, with details such as installation instructions, notes, known issues... It makes sense to put some details here. The <code>readme</code> file normally receives tons of traffic: people view it from within your repository, and even if they have the source code on their computer.</p></li>
</ul>

<hr>

<p>Overactor has also raised a good point: Using a FLOSS license would mean that others would be able to modify the files of the project that you make available themselves, when it is in their personal hands.</p>

<blockquote>
  <p>One problem I see here is that redistributors are not obligated to keep this notice in there.</p>
</blockquote>

<p>For a solution... <s>You could specify something to make sure that the license does not apply to these notices or separate files. As far as I can remember, this is allowed (I may be wrong), but I will find a source to back that up.</s> Yar, I can't remember...</p>

<p>Forget all that -> It's non-sense.</p>

<p>Thanks to Bart Van Ingen Schenau, the Apache 2.0 license has a clause requiring a NOTICE file to be kept within the project. The relevant clause is 4d):</p>

<blockquote>
  <p>If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. </p>
</blockquote>

<p>Therefore, you can acknowledge your employer in the NOTICE file, and it will pass on to its derivatives.</p>
","1141"
"how did Elastix move from GPL to proprietary?","411","","<p>I'm just scratching the surface for VoIP with Elastix.  I notice that Elastix 2.x is ""open source"" but 5.x is proprietary?</p>

<p>Looking into licensing from the manual on Elastix brings:</p>

<p><a href=""http://www.3cx.com/phone-system/edition-comparison/"" rel=""nofollow noreferrer"">http://www.3cx.com/phone-system/edition-comparison/</a></p>

<p>I don't want to get entangled with some sort of lock-in.  Rather, the flavor of lock-in I prefer has GPL attached to it.  Elastix is, or has, moved away from GPL?  The version I'm on uses CentOS.</p>

<p><em>Right now I'm running Elastix 2.x remotely, just wondering whether it's the best choice or will be a licensing dead-end.</em></p>

<p><a href=""https://en.wikipedia.org/wiki/Elastix"" rel=""nofollow noreferrer"">Wikipedia reports the licensing</a> as:</p>

<blockquote>
  <p>License   GNU General Public License(2.5) Proprietary (5.0)</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>Elastix 2.5 is free software, released under the GNU General Public
  License. Elastix 5.0 is Proprietary released under the terms of the
  3CX license</p>
</blockquote>

<p>furthermore:</p>

<blockquote>
  <p>In 2016 the Elastix project was acquired by 3CX. With this acquisition
  the Elastix Distro versioned at 5.0 was switched to a branded Debian
  install with the 3CX platform</p>
</blockquote>
","<p>So, let's break down the possibilities here.</p>

<p>Elastix owns some of its own code. It gives you permission to use it under the GPL, but it isn't bound by the GPL itself, because it owns the code. It can do whatever the hell it wants with that code. It can license it to you under the GPL, and sell it to me under a proprietary license, and then stop offering it under the GPL, or whatever. The versions they already offered under the GPL are irrevocably licensed, but they don't need to keep giving that code out.</p>

<p>Then, you have contributors' code. I'm not sure if Elastix took any external contributions -- if they didn't, then this section doesn't matter -- but assuming they did, they really had two options. One, get permission to use those contributions, or two, don't use them. This holds true no matter what their outbound license is.</p>

<p>A lot of GPL projects will take contributions under the GPL. Since the contributions are under the GPL, those projects are stuck using the GPL as long as that code is there. If they want to use a different license, they have to get rid of the code.</p>

<p>Some GPL projects will have Contributor License Agreements. Those agreements can kind of say anything. They can say ""all contributors grant us a license but we are required to always offer the project under the GPL."" Or, ""all contributors grant us a license but we are required to always offer the project under some open source license. Our board of directors will pick the license."" Or, they might say, ""all contributors grant us a license and we can do whatever the fuck we want with their code."" They might even say ""all contributors pass their copyright over to us."" I'd be willing to guess that Elastix went with option three here -- that's relatively common among CLAs.</p>
","5080"
"Is it legal to charge for distributing the source of a software which uses GPLv2 components?","409","","<p>A device I own uses BusyBox. BusyBox is licensed under GPLv2, hence, the software in my device must have a GPLv2 license.</p>

<p>Now, the company says they make the source code available, but for a charge, plus the shipping cost.</p>

<p>Is this legal? Can they charge to distribute the source codes for a software which I bought the binaries?</p>
","<p>Yes.  The terms are described in the GPLv2 license (emphasis mine):</p>

<blockquote>
  <ol start=""3"">
  <li><p>You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of
  Sections 1 and 2 above provided that you also do one of the following:</p>
  
  <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1
  and 2 above on a medium customarily used for software interchange; or,</p>
  
  <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, <strong>for a charge no more than your cost of
  physically performing source distribution</strong>, a complete machine-readable
  copy of the corresponding source code,</p></li>
  </ol>
</blockquote>
","4523"
"How can I detect if someone is breaking my license terms?","408","","<p>If <a href=""https://opensource.stackexchange.com/questions/657/what-am-i-supposed-to-do-if-someone-is-breaking-the-terms-of-my-licensed-softwar"">this question</a> is about what we are supposed to do if someone is breaking the terms of a software license, I would like to know how I can know if some is doing so. </p>

<p>Suppose that I'm writing a software with a GPL license. It is a copyleft license. It is not allowed to use the code in a non-free licence. But, in practice, if someone uses this code in a non-open source software, how can I detect that?</p>
","<p>There may be a number of ways, but there is no guarantee.</p>

<p>If you have enough certainty, you could start a legal case and ask for sources to be disclosed. This in fact happened in the SCO case.</p>

<p>If you can reverse-engineer the code, and show that it has non-trivial code that is exactly like yours, that would help. Whether it would convince a judge and a jury is another matter. Note that reverse engineering someone else's code may be illegal.</p>

<p>You could also have inside information from the people who were involved in using your code in a non-open environment - whistleblowers or snitches, depending on where you stand on the issue.</p>

<p>And you could look for behaviours that are characteristic for your code, although this is unlikely to be successful. As a wild example, you could put an Easter egg in your code and see if it shows up with the code from the license-breaker as well. This is tricky, however, as the nature of open source is that easter eggs are easier to find and remove.</p>
","1518"
"Do I have to disclose the source code of a Linux Driver I have not developed?","407","","<p>A 3rd-party Hardware manufacturing company is willing to sell me a Linux Driver for one of their products. The third-party company claims that the Linux Driver is derivative work of the driver they previously developed for OSX, so they say GPL does not apply here.</p>

<p>If I want to sell systems which include this linux driver, do I have to disclose the source code of this third-party driver if any of my customers asks for it?</p>
","<blockquote>
  <p>The third-party company claims that the Linux Driver is derivative
  work of the driver they previously developed for OSX, so they say GPL
  does not apply here.</p>
</blockquote>

<p>If they link to the Linux-kernel, they link against GPL-software, so they are obliged to respect the terms of the GPL. It doesn't matter if the software was previously developed for OSX. In the worst case the licenses conflict and the Linux version is therefore illegal to distribute. Generally, all licenses of products combined here are to respect. If they aren't compatible, you cannot distribute this derivate.</p>

<p>But, if the driver doesn't directly link to the kernel, that may not apply. I remember in the past some graphics drivers (I think NVidia, but aren't sure) had two parts. One GPL-part included in the kernel and offering an interface for the second part, that was proprietary. I don't know how legally stable this construct is, but it may work.</p>

<p>As I don't know in which way the driver you talk about works, I cannot say which applies here.</p>

<p>But even if case 1 applies, you cannot release the source code of others without their consent. If case 1 applies, you simply cannot distribute this solution.</p>

<p>As a side-note: the GPL always allows you to use such software internally without releasing the source, but as you talk about customers it isn't limited to internal use.</p>
","1478"
"How can I start an open source project and keep people from taking it and selling it? I want to keep it free, open and never be sold","403","","<p><strong>Background:</strong></p>

<p>Suppose I want to licence a project I have been working on for quite some time. The goals for this license are:</p>

<ul>
<li>Open Source</li>
<li>Free to use</li>
<li>Never to be sold</li>
</ul>

<p><strong>Question:</strong></p>

<p>What license would best suit my needs in this situation?</p>
","<p>It's impossible, if you keep it Open Source, you can always sell it.</p>

<p>The <a href=""http://www.gnu.org/philosophy/selling.en.html"">Free Software Foundation</a> says:</p>

<blockquote>
  <p>Actually, we encourage people who redistribute free software to charge
  as much as they wish or can. If a license does not permit users to
  make copies and sell them, it is a nonfree license.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>Since free software is not a matter of price, a low price doesn't make
  the software free, or even closer to free. So if you are
  redistributing copies of free software, you might as well charge a
  substantial fee and make some money. Redistributing free software is a
  good and legitimate activity; if you do it, you might as well make a
  profit from it.</p>
</blockquote>

<p>The <a href=""http://opensource.org/faq#commercial"">Open Source Initiative</a> says:</p>

<blockquote>
  <p><strong>Can Open Source software be used for commercial purposes?</strong></p>
  
  <p>Absolutely. All Open Source software can be used for commercial
  purpose; the Open Source Definition guarantees this. You can even sell
  Open Source software.</p>
</blockquote>

<p>However, there is a catch. As open source guarantees that everyone can freely redistributes it, everyone else can also redistribute the original software at no price. Or people get it directly from you. So probably selling it at an unreasonable price is not a working business model. You can make that sure by offering the software in as much channels as possible. Selling for a reasonable price though - is exactly what many commercial Linux distributions do.</p>
","517"
"What is the copyright status of Colossal Cave Adventure?","403","","<p>What is the copyright status of the source code of “<a href=""https://en.wikipedia.org/wiki/Colossal_Cave_Adventure"">Adventure</a>” (also known as Colossal Cave Adventure)?</p>

<p>There is a good record today of <a href=""http://www.digitalhumanities.org/dhq/vol/001/2/000009/000009.html"">the history of Adventure</a>. Specifically: The 1975–1976 Crowther and Woods <a href=""http://jerz.setonhill.edu/intfic/colossal-cave-adventure-source-code/"">“350-point version” for PDP-10 Fortran</a> is available.</p>

<p>What is the copyright status of this work? Not just who holds the copyright, but: <strong>What license do recipients effectively have in the work</strong>? If I derive a work directly from that one, and release the result under e.g. “GNU GPL version 3 or later”, am I violating copyright?</p>
","<p>The Open Adventure project, distributed as <a href=""https://gitlab.com/esr/open-adventure/blob/master/COPYING"" rel=""nofollow noreferrer"">free software under the 2-clause BSD license</a>, reportedly has <a href=""https://gitlab.com/esr/open-adventure/blob/master/history.txt"" rel=""nofollow noreferrer"">permission from Don Woods</a>, though there's nothing from Don Woods himself to allow outsiders to verify that permission is granted. No other documentation about permission from other copyright holders in the work is described.</p>

<p>So there is no clear grant of license from all the copyright holders of Colossal Cave Adventure. I can only assume that Open Adventure, if tested on its copyright status, would have to produce clear documentation of license from all copyright holders – documentation that is not presented anywhere I'm aware of – or to rely on an argument that the work entered the public domain.</p>

<hr>

<p>From what I can gather at the research on Colossal Cave Adventure's history of publication (published in Digital Humanities Quarterly as “<a href=""http://www.digitalhumanities.org/dhq/vol/1/2/9/000009.html"" rel=""nofollow noreferrer"">Somewhere Nearby is Colossal Cave: Examining Will Crowther's Original ""Adventure"" in Code and in Kentucky</a>”):</p>

<ul>
<li><p>The <a href=""http://jerz.setonhill.edu/intfic/colossal-cave-adventure-source-code/"" rel=""nofollow noreferrer"">source work</a> (Fortran and data files) available today was originally published 1974 through 1977, without copyright notice.</p></li>
<li><p>According to the <a href=""https://copyright.cornell.edu/"" rel=""nofollow noreferrer"">Cornell University Copyright Information Center</a>'s resource, “<a href=""https://copyright.cornell.edu/resources/publicdomain.cfm"" rel=""nofollow noreferrer"">Copyright Term and the Public Domain in the United States</a>” (January 2015 edition), works published in the USA without copyright notice prior to 1978 are now in the public domain.</p></li>
<li><p>The US Copyright Office publishes <a href=""http://www.copyright.gov/title17/"" rel=""nofollow noreferrer"">Title 17: Copyright Law of the United States</a>. According to its <a href=""http://www.copyright.gov/title17/92chap3.html#304"" rel=""nofollow noreferrer"">§304 “Duration of copyright: Subsisting copyrights”</a>:</p>

<blockquote>
  <p>§304 (a) (1)(A) Any copyright, in the first term of which is subsisting on January 1, 1978, shall endure for 28 years from the date it was originally secured.</p>
</blockquote>

<p>followed by clauses allowing term extensions, none of which appear to have been used to extend any copyright in Colossal Cave Adventure.</p></li>
</ul>

<p>So based on those resources, I think the answer is: <strong>the original publication by Crowther and Woods is now in the public domain</strong> in the USA, and has been since 2006. Hooray!</p>

<p>Thanks to <a href=""https://opensource.stackexchange.com/a/1913/2307"">Martijn's answer</a> laying out many possibilities and directing me to the Cornell University resources.</p>
","1917"
"If I license software under the MIT license, will I be able to collect patent royalties?","399","","<p>The  <a href=""http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"" rel=""nofollow"">GPLv2</a> and <a href=""http://www.gnu.org/licenses/gpl.html"" rel=""nofollow"">GPLv3</a> has anti-patent clauses.</p>

<p>The GPLv2 patent clause is ""liberty or death"":</p>

<blockquote>
  <p>For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p>
</blockquote>

<p>The GPLv3 patent clause requires all contributors to grant a royalty free patent license to all downstream recipients:</p>

<blockquote>
  <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p>
</blockquote>

<p><em>Most</em> other free software licenses, including the <a href=""http://directory.fsf.org/wiki/License:Expat"" rel=""nofollow"">MIT</a> (Expat) license does not mention patents at all.</p>

<p>If I license my software, containing patented ideas or methods where <em>I</em> own the patent right, under the MIT (Expat) license, will I be able to collect patent royalties from downstream recipients that use this MIT-licensed software?</p>

<p>Does this depend on jurisdiction?</p>

<p>Will disclosure or non-disclosure of my patents (in <code>README</code> or similar) affect my chances of collecting royalties?</p>

<p>An answer that cite relevant case law will be preferred, but if no case law on this exists, a well-argued answer will be accepted.</p>
","<p>If a license does not mention patents, it does not grant a license to patents.</p>

<ol>
<li>You hold a patent</li>
<li>You implement some software which uses the methods covered by the patent.</li>
<li>You publish that software and attach an MIT license, or some other license that never says the word 'patent.'</li>
</ol>

<p>You have not granted any patent rights. On the other hand, you also have not advertised the existence of the patent. Note the usual fine print on physical objects that lists the patents involved. According to <a href=""http://www.webblaw.com/resources/faq/patents.htm"" rel=""nofollow"">http://www.webblaw.com/resources/faq/patents.htm</a>, you can't claim damages from someone who infringes your patent unless you disclose in this fashion. It might also be considered <em>polite</em> to warn people that the use of your software puts them in a position where they need a patent license from you if they realize economic gain.</p>
","1418"
"jarjar package renaming and Apache 2.0 license violation","399","","<p>If we use the famous <code>package org.apache.commons.lang3</code> library and modify it as below jarjar configuration;</p>

<pre><code>'rule org.apache.commons.lang3.** com.sample.internal.org.apache.commons.lang3.@1'
</code></pre>

<ol>
<li>Does this violate the <code>AS-IS</code> term in the license?</li>
<li>Should we include additional modification note for it?</li>
</ol>

<p>For reference, the included lang3 apache license is <a href=""https://commons.apache.org/proper/commons-lang/javadocs/api-3.6/src-html/org/apache/commons/lang3/StringUtils.html"" rel=""nofollow noreferrer"">here</a></p>
","<p>Note: I am not a lawyer.</p>

<p>You are misinterpreting the ""as-is"" clause. ""As is"" does not mean you cannot modify the code (such a clause would, in fact, go against both the spirit and the letter of the Apache License). ""As is"" is a clause that states that the code you're using is what it is, and you need to execute your own due diligence when you use it. E.g., you cannot sue the Apache Foundation if a bug in Commons Lang crashes your application. <a href=""https://en.wikipedia.org/wiki/As_is"" rel=""nofollow noreferrer"">Wikipedia's article</a>, while not a legal source, explains this concept quite nicely:</p>

<blockquote>
  <p>As is is a legal term used to disclaim some implied warranties for an item being sold. Certain types of implied warranties must be specifically disclaimed, such as the implied warranty of title. ""As is"" denotes that the seller is selling, and the buyer is buying an item in whatever condition it presently exists, and that the buyer is accepting the item ""with all faults"", whether or not immediately apparent. This is the classic ""buyer beware"" situation, where the careful buyer should take the time to examine the item before accepting it, or obtain expert advice.</p>
</blockquote>

<p>By renaming the package, you are creating a ""Derivative Work"" of Apache Commons Lang. Section 4, <a href=""https://www.apache.org/licenses/LICENSE-2.0#redistribution"" rel=""nofollow noreferrer"">Redistribution</a> of the APL-2 clearly states what you need to do in such a case:</p>

<blockquote>
  <p><strong>4. Redistribution.</strong> You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p>
  
  <p>A. You must give any other recipients of the Work or Derivative Works a copy of this License; and<br/>
  B. You must cause any modified files to carry prominent notices stating that You changed the files; and<br/>
  C. You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and<br/>
  D. If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.<br/> 
  <br/>
  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>
</blockquote>
","6371"
"Can I just remove the GPL license if I give something to a friend?","398","","<p>I am having trouble understanding Section 9 of the <a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">GPL v3 license</a>:</p>

<blockquote>
  <h2>9. Acceptance Not Required for Having Copies.</h2>
  
  <p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. </p>
</blockquote>

<p>As far as I can understand, I'm allowed to give copies of my GPL licensed work if I directly provide it to a peer, or a friend as mine. It seems that the license doesn't apply if they <em>modify</em> it, but it doesn't look like if it applies if they link or something. Can someone tell me what this clause in the license means?</p>
","<p>My understanding is that GPL only applies <em>to people who distribute copies of the code to other people</em>.</p>

<p>So anybody who <em>receives</em> the GPL'd code is not bound by the terms of the license unless they also give copies of the code to other people. And then at that point they are bound by the terms of the license (but only as it applies to the code that they distributed).</p>

<blockquote>
  <p>It seems that the license doesn't apply if they modify it, but it doesn't look like if it applies if they link or something.</p>
</blockquote>

<p>That's right, modifying the code is not infringing on normal copyright and also doesn't trigger GPL.</p>

<p>Just don't distribute your modified code to anybody without complying with GPL.</p>

<p>That paragraph is just stating (and clarifying) how copyright law works. I don't think it actually does anything. Under copyright law, you cannot distribute somebody's work unless they give you permission. For GPL licensed code, the only way you can get permission is if you comply with the license.</p>

<p>If you're not distributing the code, then you don't need permission to do whatever it is you're doing and you don't need to comply with the license.</p>

<hr>

<p><strong><em>Edit:</em></strong></p>

<p>In several other places, the GPL clearly states that you <em>must</em> include the license in any copies you make, for example section 5.b):</p>

<blockquote>
  <p>The work must carry prominent notices stating that it is
      released under this License</p>
</blockquote>

<p>This means that if you give a copy of the code to your friend, you must not remove the license.</p>

<p><strong><em>However</em></strong> that restriction only applies to you. Your friend can remove the license as long as they do not give that modified copy to anybody else (then they would have to put the license back in place).</p>

<p>Section 9 is stating that your friend is allowed to remove the license as long as they don't make ""copies"" (where a ""copy"" is as defined under copyright law (distributing a work to somebody else), not as defined by doing ""cp -a"" or right clicking to make a copy).</p>
","1639"
"Are licenses irrevocable by default?","393","","<p>I've noticed that some FOSS licenses explicitly mention that they are irrevocable (as long as their conditions are met) and others are silent on this point. Does this matter? Are the licenses that don't mention it revocable at-will? Is the irrevocable term redundant? Or is it affected by other things?</p>

<p>Here's a few licenses that don't mention whether they are irrevocable:</p>

<ul>
<li><a href=""http://www.wtfpl.net/about/"">WTFPL</a></li>
<li><a href=""https://opensource.org/licenses/MIT"">MIT</a></li>
<li><a href=""https://opensource.org/licenses/BSD-2-Clause"">BSD</a></li>
</ul>

<p>Here are some that explicitly mention irrevocability:</p>

<ul>
<li><a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"">GPL</a> (""...and are irrevocable provided the stated conditions are met."")</li>
<li><a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache</a> (""...a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to..."")</li>
<li><a href=""http://creativecommons.org/licenses/by/4.0/"">CC-BY</a> (""The licensor cannot revoke these freedoms as long as you follow the license terms."")</li>
</ul>
","<p>A non-exclusive copyright license (such as most FOSS licenses) can be revoked at any time only if there was no consideration involved. The United States Federal Circuit Court of Appeal took this on in <a href=""https://scholar.google.com/scholar_case?case=17776182574171214893&amp;hl=en&amp;as_sdt=6&amp;as_vis=1&amp;oi=scholarr"" rel=""noreferrer"">Jacobsen v. Katzer in 2008</a> and ruled that there <em>is</em> consideration exchanged in the use of FOSS by a licensee. This indicates that an FOSS license that's silent on revocation is likely revocable only for violation of it's conditions.</p>
","4013"
"How to use MIT license in a project?","389","","<p>Let's say i used a MIT program as a base for a new project, and modified about 50% of the program files. </p>

<ul>
<li>How should i specify that the program is a derivative work? </li>
<li>Do i need to keep track of every file i modified and explicitly say the changes made?</li>
<li>If i use a portion of two MIT licensed programs in the same file, alongside with a modification, how should i specify that?</li>
</ul>
","<p>The MIT license is so simple, you should be able to find the answer to your questions by just reading it. It has only one requirement:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>This means that you have no obligation to specify that a program is a derivative work, nor to track the modifications that you made.</p>

<p>For merging several MIT licensed software, you just have to copy the various notices (that is copyright statement + text of the license). If the license texts are exactly the same (the authors did not alter the original MIT license), then it is acceptable to just put the text of the license once, after the various copyright statements. E.g.</p>

<pre><code>Copyright (c) 2017 Your Name
Copyright (c) 2015-2016 Previous Developer's Name
Copyright (c) 2014-2016 Other Project Developer's Name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre>
","5488"
"Can I sell closed source software which uses some CC BY-NC-SA code?","388","","<p>Can I sell software which uses <a href=""https://github.com/prime31/CharacterController2D"" rel=""nofollow"">someone else's code</a> which is licensed under <a href=""http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode"" rel=""nofollow"">Attribution-NonCommercial-ShareAlike 3.0 Unported</a>?</p>

<p>The software is closed source, and aside from the borrowed code, is entirely my own.</p>
","<p>Unless I've completely misunderstood the question, that would be violating <strong>two</strong> of the Creative Commons license's restrictions:</p>

<ul>
<li>That it can only be used in non-commercial contexts</li>
<li>That any derivative works be licensed under the same license</li>
</ul>

<p>I really don't know how you thought you could use CharacterController2D in a commercial closed-source app! That's the exact opposite of what the license is for!</p>
","2193"
"Linking from LGPL 2.1 software to Apache 2.0 library","385","","<p>The FSF claims that GPL v2 is incompatible with Apache 2.0 and that linking to a library generally creates a derivative work of this library. </p>

<p>However, the linking exception of the LGPL allows linking from an Apache 2.0 software to a LGPL 2.1 library. </p>

<p>Without entering in the debate whether FSF's interpretations are correct, would the converse, linking from a LGPL 2.1 software to an Apache 2.0 library, be allowed?</p>
","<p>License compatibility is a one-way street. If A-licensed software can link to B-licensed software, this does not imply that linking in the reverse direction is allowed.</p>

<p>The LGPL-2.1 has one-way compatibility with the GPL-2+:</p>

<blockquote>
  <ol start=""3"">
  <li>You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices. </li>
  </ol>
</blockquote>

<p>You can therefore only license code under the LGPL-2.1 if you can also license it under GPL-2+.</p>

<p>The incompatibility of Apache-2 and GPL-2 is well documented. If your software is a combined/derivate work with/of Apache-2 software, you cannot license that software under the GPL-2 and therefore cannot license it under the LGPL-2.1 either. I wish the LGPL would have made this relationship clearer, and the LGPL-3 does clarify this.</p>

<p>Note that the LGPL-2.1 is permissive only with regards to software that uses this library, which is defined as:</p>

<blockquote>
  <ol start=""5"">
  <li>A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a ""work that uses the Library"".  Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.</li>
  </ol>
</blockquote>

<p>I.e. this permissiveness only applies to downstream works, not to upstream works like an Apache-2 library that your software uses: the upstream dependency is neither derivative of your library, nor was it designed to work with your library.</p>

<p>The GPL FAQ item <a href=""https://www.gnu.org/licenses/gpl-faq.html#GPLIncompatibleLibs"" rel=""nofollow noreferrer"">What legal issues come up if I use GPL-incompatible libraries with GPL software?</a> mentioned by Philippe Ombredanne discusses that you can provide an exception to the GPL-2 for linking with incompatibly-licensed upstream libraries, provided that you are the copyright holder. It is reasonable to believe that this can also be done for LGPL-2.1 licensed software, and that these exceptions would not affect the GPL-2 compatibility in section 3: the exceptions would survive the license change.</p>

<p>If the copyright owners of an LGPL-2 licensed software explicitly add an incompatible dependency, this could be interpreted as an implied license exception. However, you should avoid relying on implied licenses since they might not be accepted in all jurisdictions.</p>

<p>I disagree with the interpretation that absent an explicit exception, you could add an incompatible dependency without being the sole copyright owner.
You do not have the right to issue an explicit or implied exception since you are bound by the terms of the LGPL-2, so you cannot add an incompatibly-licensed dependency.
If there are examples existing libraries that have done this, these do not provide a precedent that would allow you to ignore the terms of the LGPL-2.</p>
","5756"
"How do I license code when rewriting code in another language?","382","","<p>I took the <a href=""https://git.xiph.org/?p=mirrors/theora.git;a=blob;f=examples/png2theora.c;h=c740ad8043848738909c09b07135d7cedb9e5fff;hb=refs/heads/master"">C code</a> from the <code>png2theora</code> example tool of Xiph.Org Theora which has a copyright header:</p>

<pre><code>/********************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggTheora SOFTWARE CODEC SOURCE CODE.   *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE Theora SOURCE CODE IS COPYRIGHT (C) 2002-2009,2009           *
 * by the Xiph.Org Foundation and contributors http://www.xiph.org/ *
 *                                                                  *
 ********************************************************************

  function: example encoder application; makes an Ogg Theora
            file from a sequence of png images
  last mod: $Id$
             based on code from Vegard Nossum

 ********************************************************************/
</code></pre>

<p>The <a href=""https://git.xiph.org/?p=mirrors/theora.git;a=blob;f=COPYING;h=c8ccce4ffb5d7a7574bac87429ec1d2a7b90686d;hb=refs/heads/master"">COPYING file</a> points is a 3-clause BSD license.</p>

<p>I have taken the code apart into several pieces which I have rewritten in Vala code classes (so in a different programming language).</p>

<p>I also wrote several vapi files to bind to the C APIs (for libtheora, libogg and libpng).</p>

<p>I did several heavy changes to the code:</p>

<ul>
<li>Replaced return code based error handling by exception handling</li>
<li>Rewrote command line parsing from getopt to GLib OptionGroup</li>
<li>Reorganized the code into several classes</li>
<li>Replaced stdio file functions by gio classes</li>
<li>Added some additional error handling</li>
</ul>

<p>So I have almost completely rewritten the original code, but it should still work essentially like the original tool from the user perspective.</p>

<p>Now I would like to release this code (preferably under an AGPLv3 license).</p>

<p>How do I correctly attribute the original authors copyright / license in this case?</p>
","<p>Under some interpretations, re-writing code to a different language constitutes a derivative work. Under others it doesn't.</p>

<p>If you hold your work not to be a derivative work (in the copyright sense of the word), you're done; you don't have anything to do with the original work anymore, and you can license whichever way you like without attributing the original authors.</p>

<p>I you do hold your work to be a derivative work, which is the safer, and IMO correct route, you have to comply with the 3-clause BSD license. The first two are the most relevant:</p>

<blockquote>
  <ul>
  <li><p>Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.</p></li>
  <li><p>Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.</p></li>
  </ul>
</blockquote>

<p>The most practical way to comply in my opinion is to include the BSD notice in the project, and have a central notice that remarks it was based on the original work, link to the original work and original authors file, and then do your standard stuff for the new license. </p>
","2054"
"Distribution of open source software between different legal entities","374","","<p>At the company I work for we are developing an app for use within the company. The company consists of numerous branches across the world, all other legal entities. For testing we would like to send a tablet with pre-installed software from the Dutch branch office to the Chinese branch office.</p>

<p>Does the software has to be completely compliant with the open source software that is used in the application before sending it over? The reason for this question is that if it has to be compliant for this testing purpose, we would have to let a specialized company perform an OSS scan which is time consuming and costly.</p>
","<p>You've found yourself a bit of a gray area. As Martijn notes, the FSF have addressed <em>nearly</em> this issue in their FAQ. The following is certainly true for single-entity companies:</p>

<ul>
<li>You can make copies for internal use</li>
<li>You can send those copies to anyone, anywhere in the world, as long as they're part of the company</li>
<li>You can't give copies to any other entity</li>
</ul>

<p>However, in your situation (with your company being a multi-entity organisation) it gets a little more confusing. It's debatable whether the same applies in your case, though I would hope that freedom-oriented organisations would come down on the side of freedom and letting you do it. Your best course of action is to consult someone who knows: ask the FSF or the OSI, or if you've got a legal team ask them.</p>
","1999"
"Is putting a page with javascript in it considered a redistribution","371","","<p>Imagine, I published a page on the web. It contains some javascript code, which uses open source library. Is it in general considered redistribution? </p>

<p>On one hand, it's a redistribution. You put code on the web, and it's distributed to the user's browser.</p>

<p>On the other hand it's not. You don't distribute code out of your server, and usually the client part is meaningless without the server part, so downloading can be considered a part of process of using this software.</p>

<p>Do you think if this is redistribution or not?</p>
","<p>Every lawyer I consulted with always gave me the same answer: JavaScript in web page is code redistributed to whoever loads this page in their browser.</p>

<p><strong>So yes, this is unambiguously redistribution.</strong></p>

<p>And to answer the underlying question that you did you ask: yes, you have to comply with any specific FLOSS licensing requirements for this piece of JavaScript code, mainly attribution and code redistribution if the license requires it. </p>

<p>And to continue answering more unasked underlying questions, if the JS code is minified and the license requires corresponding source code redistribution, you would also need to make the un-minified version of that code available for redistribution. Think of minified JS much in the same way as a compiled binary.  </p>

<p>For reference, you can check this <a href=""http://www.nexb.com/healthcaregov_case_study.html"">post</a> about a BSD-licensed JavaScript used without proper attribution in a web page and a detailed technical analysis of the case. </p>

<p>As an aside, this create some interesting and funny challenges when it comes to licensing requirements... Say you use a GPL-licensed bit of JavaScript code that is 100 lines and about 1KB of code. 
You would technically need to include the text of the GPL to be in full compliance which may be ~ 40KB... or 40 times bigger than the code itself. </p>

<p>Now practically, the GPL text would need to be available but it does not have to be available inside the JavaScript or the pages embedding that JS: it can be provided separately much the same way that a GNU Bash executable does not contain the GPL text but only a reference to it and the text is provided separately.</p>
","4042"
"What happens if I share code online without any licence declaration?","370","","<p>What will the licence of the code be? If this is jurisdiction / country based what is relevant in this case? The place of origin of the poster, the host where the code lives, or the one who tries to view and reuse the unlicensed code?</p>
","<p>In that case copyright applies. In most countries, certainly in Europe, this is an automatic process: you publish something, and even without you adding the copyright symbol, you get the copyright.</p>

<p>Software is no different than literature. As a developer, you are considered being the author of your work. When you publish, you are the copyright owner. Copyright law allows an author to prohibit others from reproducing, adapting, or distributing copies of the author's work. In spite of the fact that people can read your source code, your code isn't ""free, open source software""!</p>

<p>In short: if you don't add any license information, your code is protected, but make sure you add your name and document when you wrote/published it.</p>

<p><strong>Extra comment:</strong></p>

<p>I am not a lawyer, but I have faced a situation where a code contribution was done publicly and anonymously. I did a huge effort to track down the author (and documented my search), but I couldn't find the contributor. The lawyer told me that, in that case, it was safe to assume that the code was in the public domain, as there was nobody to claim ownership (even after me asking the author to make himself public in a comment section). It's always safe to consult a lawyer in cases like this. And document! document! document!</p>

<p><strong>Update based on a comment:</strong></p>

<blockquote>
  <p>So it doesn't matter on what site it's published?</p>
</blockquote>

<p>Yes, it does. When you register on a site, when you publish something on a site, you agree with the terms of agreement of that site.</p>

<p>Some of these terms may not be legal in the country where you reside, in which case the terms are void. For instance: a site can claim that it owns the IP of every picture you upload. In some European countries, companies such as Facebook risk litigation if they do so, because that term is considered illegal.</p>

<p>However, you should take into account that the terms and agreements <em>can be</em> valid, because the internet doesn't have any borders and you can't assume that people in other countries know what the law says in the country you live in.</p>

<p>There was another question that explains what happens if you post code on StackOverflow: <a href=""https://opensource.stackexchange.com/a/229/27"">Can I copy-paste a snippet from StackOverflow into my GNU-GPL project?</a></p>

<p>When you post code or an answer on StackOverflow, every one is free to use it, provided that the rules are obeyed. For instance: I wrote a book <a href=""http://pages.itextpdf.com/ebook-stackoverflow-questions.html"" rel=""nofollow noreferrer"">The Best iText Questions on StackOverflow</a> which bundles questions and answers that were posted on StackOverflow. I can do so, because I allow people to redistribute the content and I give credit to the people who wrote the questions and answers (actually, I am the author of most of the answers).</p>

<p>This is taken from the <a href=""http://stackexchange.com/legal"">Terms of Service</a>:</p>

<blockquote>
  <p>In the event that You post or otherwise use Subscriber Content outside of the Network or Services, with the exception of content entirely created by You, You agree that You will follow the attribution rules of the Creative Commons Attribution Share Alike license as follows:</p>
  
  <ol>
  <li>You will ensure that any such use of Subscriber Content visually displays or otherwise indicates the source of the Subscriber Content as coming from the Stack Exchange Network. This requirement is satisfied with a discreet text blurb, or some other unobtrusive but clear visual indication.</li>
  <li>You will ensure that any such Internet use of Subscriber Content includes a hyperlink directly to the original question on the source site on the Network (e.g., <a href=""https://stackoverflow.com/questions/12345"">https://stackoverflow.com/questions/12345</a>)</li>
  <li>You will ensure that any such use of Subscriber Content visually display or otherwise clearly indicate the author names for every question and answer so used.</li>
  <li>You will ensure that any such Internet use of Subscriber Content Hyperlink each author name directly back to his or her user profile page on the source site on the Network (e.g., <a href=""https://stackoverflow.com/users/12345/username"">https://stackoverflow.com/users/12345/username</a>), directly to the Stack Exchange domain, in standard HTML (i.e. not through a Tinyurl or other such indirect hyperlink, form of obfuscation or redirection), without any “nofollow” command or any other such means of avoiding detection by search engines, and visible even with JavaScript disabled.</li>
  </ol>
</blockquote>

<p>If you look at my book, you'll see that there's a link to the full question on StackOverflow under every question, as well as a link to the profile of the person who posted the question. I didn't provide such a link for the answers in case I am the author of the answer, because I have the choice to do with my own content what I want. However, I can't prevent that a third party takes my answer and copies it (that wouldn't be fair, but it has happened before and there's very little one can do about it).</p>
","235"
"FFmpeg LGPL licence and embedded codecs","369","","<p>I want to use FFmpeg in commercial software using its LGPL licence without enabling the GPL add-on. However, the libavformat library allows decoding for a lot of codecs straight out of the box. These are third party codecs so probably won't be the same LGPL licence. Are these embedded codecs ok to use in my application to keep it LGPL compliant?</p>
","<blockquote>
  <p>These are third party codecs so probably won't be the same LGPL licence. Are these embedded codecs ok to use in my application to keep it LGPL compliant?</p>
</blockquote>

<p>When I configure FFmpeg to use third-party codecs that are GPL-licensed, then FFmpeg ""declares"" itself as GPL-licensed as a result of activating these configuration options, either GPL 2 or GPL 3 depending on the third-party codecs. The same applies for built-in extensions that would be subject to the GPL. And if there is no GPL-licensed extensions, FFmpeg declares it self as LGPL-licensed. </p>

<p>This configuration process is not guaranteed to be foolproof and I should check for any third-party codecs I depend on (for instance by inspecting the generated config or by checking the required shared objects in the build Elfs using readelf) and checking their actual license terms.</p>

<p>The simple rule I apply is that the copyleft of the GPL flows up to my code when I build or use code that depends on GPL-licensed code (at least when linking is at play). More details on dependencies and licensing are  <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc/4315#4315"">explained here</a>.</p>

<p>As an aside, irrespective of the resulting (and verified) license of a certain configuration of FFmpeg, I need to consider eventual patent licenses for using certain codecs for some purposes, in particular if I project to use this in a commercial software product. This needs to be reviewed codec-by-codec and I would handle this with the assistance of a lawyer. This involves possibly contacting several patent holders such as Mpeg-LA and can be a long and painful process. FFmpeg does not hold these patents and therefore cannot licenses these to me.</p>

<p>Finally and for reference, FFmpeg publishes a <a href=""http://www.ffmpeg.org/legal.html"" rel=""nofollow noreferrer"">decent FAQ</a> including a ""License Compliance Checklist"": its first two items are the most important wrt building an LGPL-configured FFmpeg:</p>

<pre><code> 1. Compile FFmpeg without ""--enable-gpl"" and without 
    ""--enable-nonfree"".
 2. Use dynamic linking (on windows, this means linking to dlls) 
    for linking with FFmpeg libraries. 
</code></pre>
","4469"
"Is it possible to use a library under the EUPL license for a commercial closed-source project?","366","","<p>I want to use <a href=""http://oficinavirtual.mityc.es/componentes/first-steps.html"">this library</a> in my project. Author says it is under the LGPL license, but <a href=""http://oficinavirtual.mityc.es/componentes/mityclibxades/license.html"">one of its dependencies</a> is under the <a href=""https://en.wikipedia.org/wiki/European_Union_Public_Licence"">EUPL license</a>.</p>

<p>EUPL license isn't clear about if a closed-source application that uses the libraries inherits the EUPL license. What I understood so far is the following:</p>

<ul>
<li>LGPL licence is compatible with EUPL license, so a library under LGPL license that uses another library under EUPL can be used for a closed-source commercial product.</li>
<li>It is not mandatory to put a derived product under the EUPL license if it uses a library under the EUPL license (despite it mentions that Copyleft stuff).</li>
</ul>

<p>References I read:</p>

<ul>
<li><p><a href=""http://www.ifosslr.org/ifosslr/article/view/91/165"">http://www.ifosslr.org/ifosslr/article/view/91/165</a></p></li>
<li><p><a href=""https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses"">https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses</a></p></li>
</ul>

<p>In short: Can I use a library under the EUPL license for my closed-source commercial product?</p>
","<p>The answer to your question turns on that hardy perennial favorite dilemma: aggregation versus derivation. The 'intermediate-ness' of the intermediate library doesn't matter. The reason it doesn't matter is that the question is asked about the work, as a whole. I do not believe that anyone thinks that the precise order and arrangement of the call graph is important; what matters is what people think about dynamic linking. From the standpoint of, well, <code>ldd</code>, the EUPL library is linked into your work. Either that triggers obligations or it doesn't.</p>

<p>Thus, what matter is what (a) the copyright holder, and (b) a court, thinks of this. The FSF, authors of the GPL, see all dynamic linking as resulting in a derived work and thus source distribution obligations. What do the authors of the EUPL think?</p>

<p>If you believe Wikipedia, the dynamic linking situation of the EUPL is completely up in the air, subject to the legal breezes of each individual jurisdiction. So we have even less 'principle' to apply to predicting the legal view of dynamic linkage with an EUPL license than we do with the GPL.</p>

<p>Really, your best best is to <em>ask the copyright holder</em> of the library for her or his view of dynamic linkage. If the copyright holder gives you permission, you're good. If not, whatever anyone else thinks of the EUPL and dynamic linkage, you might be on the wrong end of a legal action.</p>
","1529"
"Is it possible to make closed source code while using the following libraries?","365","","<p>I am not good at Licensing issues. So my question -</p>

<p>If my program is using these libraries (only linking like -ludev, -lblkid, -lcrypto, -lssl, -fopenmp) -</p>

<ul>
<li><p>libudev (LGPL version 2.1 of the License, or any later version).</p></li>
<li><p>libblkid (LGPL version 2 or any later version).</p></li>
<li><p>libcrypto and libssl (part of OpenSSL, and OpenSSL stays under a dual license- OpenSSL license and Original SSLeay License - <a href=""https://github.com/openssl/openssl/blob/master/LICENSE"" rel=""nofollow"">https://github.com/openssl/openssl/blob/master/LICENSE</a>)</p></li>
<li><p>fopenmp (part of GCC, but GCC is a compiler with GPL 3+)</p></li>
</ul>

<p>Can I make my code closed source? Or Do I have to make it open source?</p>

<p>If any of these has a problem to make my program closed source then please suggest me alternative libraries for that.</p>
","<blockquote>
  <p>Can I make my code closed source? Or Do I have to make it open source?</p>
</blockquote>

<p>In general if you use unmodified LGPL-licensed libraries and dynamically link with them, you can use any license you want for your own code. If you redistribute these LGPL-licensed libraries then the LGPL applies to these libraries of course.</p>

<p>There are no issue with linking with OpenSSL. </p>

<p>For OpenMP, if this is code that is part of the GCC runtime, then this is likely not GPL-licensed, but rather would likely be using the GPL with the GCC exception which is essentially equivalent to the LGPL. </p>

<p>If instead this is plain GPL and you are calling it from your code, I personally would consider the GPL to extend to your code.</p>

<blockquote>
  <p>I only included omp.h in my program [...] omp.h states that ""This file is part of the GNU OpenMP Library (libgomp)"", which is GPL 3. Then in next line it mentions- ""Under Section 7 of GPL version 3, you are granted additional permissions described in the GCC Runtime Library Exception, version 3.1, as published by the Free Software Foundation."" The 3rd post in this link openmp.org/forum/viewtopic.php?f=3&amp;t=474 also confirms it. So can I use it as LGPL then?</p>
</blockquote>

<p>You can use it under the the terms of the <code>GPL 3.0 with GCC Runtime Library Exception, version 3.1</code>, not as LGPL. </p>

<p>But IMHO the GPL with this exception is a better license than the LGPL. For instance, it is clearly allows for any kind of linking: the LGPL makes a distinction between static or dynamic.</p>

<p>I would go for it!</p>

<p>/IANAL /TINLA</p>
","2854"
"How do I properly specify the year(s) of copyright?","354","","<p>Most source files start with a copyright header like this (from GNU ld):</p>

<pre><code>/* Main program of GNU linker.
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
   2002, 2003, 2004, 2005, 2006, 2007
   Free Software Foundation, Inc.
   Written by Steve Chamberlain steve@cygnus.com

   This file is part of GLD, the Gnu Linker.
</code></pre>

<p>(rest of the copyright header skipped for brevity).</p>

<p>In these headers, years of copyright are denoted. I would like to know...</p>

<ul>
<li>Which years are listed there? Are only years in which changes to the software occured listed?</li>
<li>If I edit a source file, can I remove redundant copyright years? E.g. if the  FSF claims copyright 1991–2007, can I remove all years but 2007? I expect only the most recent year for each party to be relevant for copyright. What about if I'm the sole author?</li>
<li>Can I abbreviate a contiguous series of copyright years <code>2000, 2001, 2002, 2003, 2004</code> as <code>2000--2004</code>?</li>
<li>Is it required to list years of copyright in a copyright header?</li>
</ul>

<p>If it matters, I live in German jurisdiction.</p>
","<p>The text of the format “Copyright <em>years</em> <em>authors</em>” or similar is a <em>copyright notice</em> which was required by US copyright law until 1989 for copyright protection to apply to a work. Under the Berne Convention, copyright is automatic, and no notice is required. However, this notice still contains the answers to two important questions:</p>

<ul>
<li>When was the software published?</li>
<li>Who are the authors?</li>
</ul>

<p>The author information is necessary to determine when copyright protection expires. In Germany, this would be seventy years after the death of the last surviving author (see <a href=""http://www.gesetze-im-internet.de/urhg/__65.html"">§65 UrhG</a>). Without knowing the identities of the authors, we cannot determine when they died in order to calculate the copyright term. While there are provisions for dealing with anonymous authors (seventy years after publication), this is much more complicated since the identity of the author could be discovered after that time, which would extend the copyright term again. Example: a software is published anonymously in 1990. The copyright term would expire in 2061, and you would then be free to use it in any manner. However, in 2065 the author is identified and they died in 2053. Now, the copyright term extends to 2124 and until then you are no longer free to use the work unless it was licensed to you by the copyright holder.</p>

<p>As I understand it, the years noted only had to be the year of the <em>first</em> publishing of the work in its <em>current</em> form, so it is not necessary to maintain a list of years. After all, a copyright notice isn't a changelog. However, it is still useful to list all years in which a modified version was first published. Contracting consecutive years is commonly understood, e.g. “1999, 2000, 2001” can be written “1999–2001”. However, there should not be any missing years in that range, “1999, 2000, 2001, 2003” can be written as “2003” or “1999–2001, 2003”, but not “1999–2003”. Also, the years record the publishing of a change, not the creation of a change, and not the mere act of publishing. Misunderstanding of these details leads to some quite dishonest copyright notices on some websites that just list the current year, even when the page was not changed. An argument in favour of listing all years rather than just the last year is that different portions of the work were published in different years, which should be reflected in the notice.</p>

<p>In the US, the year of publication determines the copyright duration when the copyright is held by a juridical person such as corporations, so the years are relevant. This applies to GNU software since the respective copyright is assigned to the FSF, but no such practice seems to be possible in Germany. </p>

<p>For GNU software, the appearance of copyright notices is discussed in the chapter <a href=""https://www.gnu.org/prep/maintain/html_node/Copyright-Notices.html""><em>Copyright Notices</em></a> of <em>Information for Maintainers of GNU Software</em>. This permits contracting copyright years as described above if this practice is explained in a README. </p>
","2368"
"Obtaining MIT licence for own plugin","353","","<p>I'm a new web programmer, I wrote a simple plugin in JavaScript and I want to put it on GitHub for people to download and use it freely. I saw many people include MIT licence in a file.</p>

<p>How can I obtain the MIT licence? Do I have to go to <a href=""http://opensource.org"" rel=""nofollow noreferrer"">http://opensource.org</a> to apply/register or do I just need to paste the declaration on top of my source code?</p>
","<p>You just include the licence in your software, no registration needed. Your software is always copyright protected, you state the terms of use through a licence.</p>
","4903"
"How do I get the kernel source for my Android tablet?","352","","<p>As I understand it, the Android kernel is GPL. Doesn't that mean that if I buy an Android tablet the manufacturer has to make the kernel source available?</p>

<p>There is no source on their website and their customer support doesn't understand:</p>

<blockquote>
  <p>Your tablet doesn't have this GPL feature.</p>
</blockquote>

<p>What can I add to my emails to make them understand any legal requirements that they might have?</p>
","<blockquote>
  <p>Doesn't that mean that if I buy an android tablet the manufacturer has to make the kernel source available?</p>
</blockquote>

<p>Exactly right. The relevant text is section 3 of GPLv2:</p>

<blockquote>
  <p>You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p>
  
  <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, 
  b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, 
  c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p>
</blockquote>

<p>I would advise that you say something like:</p>

<blockquote>
  <p>Dear [company],</p>
  
  <p>In your devices, you are distributing executable copies of the Linux kernel, which is licensed under the GNU General Public License version 2.0 (GPLv2). Under section 3 of this license, anyone who distributes executable form of the software must provide the users with the complete source code to the software on request.</p>
  
  <p>[Reproduce section 3 of the GPL here]</p>
  
  <p>I thus request that you fulfill the license's terms by providing the source code of my tablet's kernel to me. Please be advised that failure to comply with the terms of this license results in permanent termination of your rights to modify and distribute the Linux kernel under section 4 of the GPL.</p>
  
  <p>[perhaps reproduce section 4 here]</p>
</blockquote>

<p>Failing that, I would recommend you read <a href=""https://opensource.stackexchange.com/a/2485/5392"">this excellent answer</a>, which is intended for developers and the MPL but could apply to anyone dealing with a FLOSS license violation.</p>
","4594"
"Can I restrict who can utilize my software?","351","","<p>Can a project be licensed as ""open source"", yet place a restriction on who can utilize the software?</p>

<p>For example, if my software falls under software export controls, can I continue to license it as ""open""?</p>
","<p>From the <a href=""http://opensource.org/osd"">Open Source Definition</a>:</p>

<blockquote>
  <p>The license must not discriminate against any person or group of persons.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>The license must not restrict anyone from making use of the program in
  a specific field of endeavor. For example, it may not restrict the
  program from being used in a business, or from being used for genetic
  research.</p>
</blockquote>

<p>So a license restricting who can use your software isn't open source.</p>

<p>About the question regarding export restrictions: yes you can license it as OSS, even if it falls under export restrictions. Your license allow the usage, but laws might restrict it. That doesn't mean your license isn't open source.</p>
","62"
"Finding low hanging fruit on open source code","350","","<p>I am interested in contributing to some open source projects in order to learn git and Python better. A lot of the projects I have looked at are fully mature, and the updates are pretty complex, requiring an understanding of large parts of the project.</p>

<p>How do I find some low hanging fruit or moderately challenging problems to start on?</p>
","<p>What are you interested in? Working on e.g. the Linux kernel if your interest lies in user interfaces won't cut it. Preferably something you use day to day, so you have a feel of the problems, and are in some way connected to the user community.</p>

<p>Check the webpages for the packages of interest, take a peek at their developer lists and bugtracking systems. See if they advertise ""tasks for newbies"" or similar. Pick some simple tasks and work on them. Be careful to use the programming style used in the project, be it by looking at the code or check for official standards. Follow whatever style is in use for commit comments and other documentation.</p>

<p>You <em>might</em> get lucky and find a mentor, but don't count on it. Mentoring is a lot of work, which might not pay off. Besides, computer geeks are a reclusive breed. You'll have to make yourself known by <em>judicious</em> participation in the mailing lists or wiki.</p>

<p>Most of your proposed patches will just be silently ignored, you might get yelled at for others. A thick skin, and keeping cool when the flamewars start, is a must.</p>

<p>Perhaps you could check the ""participate"" pages for your preferred Linux distribution (or BSD. or whatever system you like), like <a href=""https://fedoraproject.org/wiki/Join"">Fedora's</a>.</p>
","2275"
"Can I distribute a BSD code with GPL v3 binaries?","349","","<p>I found a GPL v3 licensed library, that I can compile for various architectures and use in the code for a BSD licensed project. This means that I probably have to distribute the binaries with it.</p>

<p>Does this violate the GPL terms of use?</p>
","<p>You can not distribute anything linking against GPL code as anything other than GPL. At least, that is the FSF's position, there is no firm legal determination one way or the other. In case of doubt, use GPL if you don't want to volunteer for the fun of being at the center of the lawsuit deciding this. Maybe there are non-GPL alternatives?</p>
","2608"
"How to deal with a very productive contributor who wants to steer the project in a different direction?","349","","<p>I am part of a non-commercial bazaar-style open source project which is developed and maintained entirely by unpaid volunteers.</p>

<p>A few months ago a new programmer joined our team who is both skilled and prolific. They provide a large number of commits and, contrary to the question <a href=""https://opensource.stackexchange.com/questions/395/how-do-i-deal-with-enthusiastic-contributors-who-damage-more-than-they-help"">""How do I deal with (enthusiastic) contributors who damage more than they help?""</a>, their code quality is more than adequate. By any sensible metric, their productivity in the past few months was higher than that of all other contributors <em>combined</em>. They have also taken over some non-programming related maintenance and project infrastructure responsibilities nobody had the time and motivation to do.</p>

<p>Unfortunately, it has lately crystallized that their vision for the project differs quite a lot from that of the other project members. They want to move the focus of the project into a completely different direction than the rest of us. </p>

<p>Lately they even started to remove features from the codebase, which they consider ""poorly developed"", ""unnecessary bloat"" or ""must be removed before I can remake them much better"". To be fair most of these feature were indeed in an unusable state, obsolete or not used by anybody, but their intentions are clear.</p>

<p>How can we as the original founders of the project keep our vision intact without losing this very valuable contributor?</p>
","<h3>Discuss, discuss, discuss</h3>

<p>This is absolutely essential. You can't solve <em>personal</em> problems <em>digitally</em> - so when I say discuss, I mean call a meeting. You need to sort out some things with him:</p>

<ul>
<li><strong>Project focus</strong><br>
If everyone has a different idea of where the project's going, it's obviously not going to work. This is the root of the problem. Discuss with him <em>what</em> he thinks the project should do, and <em>why</em> he thinks this. There may well be reasons behind it that you haven't thought of, that might actually change your view. Then, <strong>as a team</strong>, come up with a project aim that you're all happy with. It should be a good compromise so that he doesn't feel like his ideas are being left out, but he does need to realise that he's one of many and needs to be co-operative.</li>
<li><strong>Working policies</strong><br>
You need to work out who can do what. Your work should be organised so that there are no conflicts and no missed areas - two people should not be working on the same thing and neglecting something else. </li>
<li><strong>Features</strong><br>
Again, important. Features are a big part of the project, so it shouldn't be set up so that any developer can add or remove features on a whim without telling anyone. Get it re-organised so that adding or removing features has to be approved by a person or team. You can't have this guy going around removing essential features because of a difference of opinion and derailing the project.</li>
</ul>
","583"
"What type(s) of licenses ensures that forks of my project will stay open source?","348","","<p>My knowledge of licensing is somewhat fuzzy, it's something I wish I would have looked into more when I got into making open source projects...</p>

<p>That being stated, are there licenses that will ensure forks of my project will stay open source?</p>

<p>If someone takes my project(s), and adapts it or makes it better in some way, what licenses can I choose from that are already well designed that require they keep it open source, even with their edits.</p>
","<p>Gaurav's answer above is incorrect.  Viral licenses are called that for a reason: they are licenses that, like a virus, <em>spread beyond the source of your project</em>.  It means that if my program has 99 features that I created myself, and 1 that requires a GPL library, the GPL ""infects"" my entire codebase and forces me to publish the entire thing under the GPL or a compatible license.</p>

<p>This is not what the question is asking for, and to put it bluntly, this is not suitable for the majority of open-source project development.  The GPL is not <em>a license</em> so much as it is <em>a political statement,</em> declaring to the world that you believe non-""free"" (as per the FSF definition) software to be inherently evil and something that must be fought against and eradicated.</p>

<p>If that's what you want, go ahead and use the GPL.  But if you're looking for an open-source license that will ensure that <em>modifications to your code</em> must remain open and be published under the same license, (without limiting what the people who use your code in a wider project can do with it,) the license you're looking for is the <a href=""https://www.mozilla.org/MPL/2.0/"" rel=""nofollow"">Mozilla Public License</a>, which requires exactly that.</p>
","1279"
"Interference of Software Patents with Free & Open Source Software","347","","<p>While visiting wikipedia page on <a href=""https://en.wikipedia.org/wiki/Free_and_open-source_software"" rel=""nofollow noreferrer"">Free and open-source software</a>, I noticed the challenges from the template at bottom:</p>

<p><img src=""https://i.stack.imgur.com/RcMfv.png"" alt=""screen-shot""></p>

<p>In which <a href=""https://en.wikipedia.org/wiki/Digital_rights_management"" rel=""nofollow noreferrer"">Digital rights management</a> and  <a href=""https://en.wikipedia.org/wiki/Software_patents_and_free_software"" rel=""nofollow noreferrer"">Software patents</a> seems considerable to me.</p>

<p>So, I want to know interference/interaction of <strong>Software patents</strong> with <strong>Free &amp; Open Source Software</strong></p>

<p>In other words how do we interact with it?</p>

<p><sup>Note: This question is split off from <a href=""https://opensource.stackexchange.com/q/1082/296"">this</a>  to be specific on Software patents.</sup></p>
","<h2>Why is it a problem?</h2>

<p>Patents are dangerous because they can put an additional restriction on the use and distribution of software which is not mentioned in the license.</p>

<p>A company can freely contribute to an open source project and license their work under an open source license, but in the meantime file a patent on some aspect of their contribution. Later they can then use that patent to collect license fees from distributors and users of the allegedly free software. All of this is completely legal because licenses usually only deal with copyright law, and patent law is a completely different beast, even though the outcome is usually the same. </p>

<p>This can also be done by companies which were not involved in the development at all but own a similar patent filed before the project was published. The patent doesn't even need to be enforceable. The threat alone that it <em>might</em> apply can be enough to stunt the adoption of free software, because patent lawsuits are expensive. Companies fear that they might lack the resources to fight a patent lawsuit, even when they could win with enough money.</p>

<p>Patents can also be used to prevent someone from creating a free alternative for a proprietary product. A <a href=""https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC#Patent_licensing"">good example for this is the H.264 video encoding algorithm</a>, also known as MPEG-4. The algorithm was developed as proprietary software, but how to implement it is no secret. An algorithm can not be copyrighted, only a specific implementation can. So as far as copyright is concerned, anyone could create a free implementation for everyone to use. But unfortunately there are various companies which hold several software patents which apply (or might apply) to this algorithm. This allows them to collect royalties from anyone implementing the algorithm, free or not.</p>

<p>Advocates of free software thus recommend to use different algorithms like OGG Vorbis which was specifically designed to circumvent any known patents on video encoding. But video encoding is such a minefield of patents that some people believe that there might still be some less known patents out there which could also be applied to Vorbis and fear that wide adoption of Vorbis could prompt the holders of these patents to surface and start to demand money.</p>

<p>Patent law is an area which is not internationally homogenized. Different countries have different laws regarding what can be patented and which laws apply. Software patents in particular is a shaky area which is handled differently in different jurisdictions. This can lead to the situation that a certain piece of free software is only free in some parts of the world and not in others, violating the right to free distribution without discrimination of certain groups.</p>

<h2>How can we deal with it?</h2>

<ol>
<li><strong>Demand patent licensing</strong> in licenses. The GPLv3 for example has a section on patents which says that any contributors must license any patents which apply to their work for free. However, this does not help against 3rd party patent claims.</li>
<li><strong>Work around the patents</strong>. When you have an open source project, do your research about which patents might apply to the area and try to not violate them. Release early, because after you released a product, any applications for new patents which apply to the product are invalid due to prior art.</li>
<li><strong>Bust the patents</strong>. When prior art can be proven for a patent, it can be declared invalid. A good medium for crowdsourcing potential prior art is the stackexchange site <a href=""https://patents.stackexchange.com/"">Ask Patents</a> which has a specific <a href=""https://patents.stackexchange.com/questions/tagged/prior-art-request"">tag for prior art requests</a>. The Electronic Frontier Foundation also has a <a href=""https://www.eff.org/patent-busting"">patent busting project</a>.</li>
<li><strong>Build a defensive pool of patents</strong>. Just play the same game the patent trolls play. Register patents yourself, and then pledge that you will only enforce them against those who also try to press their own patent claims. This is the strategy many large companies use to protect themselves from frivolous patent claims. Unfortunately this only works against people who actually implement their patents in products and are not just in the business of filing lawsuits. Also, the strategy of fighting fire with fire might not sit well with the more ideological parts of the free software community.</li>
<li><strong>Political lobbying against software patents</strong>. Software patents have already be declared unenforceable in large parts of the world. But there are still countries which have not yet understood how bad they are for innovation and the international competitiveness of the countries IT economy. Support organizations which try to convince politicians to change the local patent laws for the better. When you live in such a country, try to convince your local politicians yourself and consider their opinions about software patents when casting your vote in the next election.</li>
</ol>
","1090"
"Is it legal to Bundle OpenJDK + HotSpot with a closed source application?","347","","<p>As per my understanding, OpenJDK itself is licensed under GNU General Public License, version 2, with the Classpath Exception which should be no issue for bundling with closed source application. However, HotSpot is licensed under GPLv2 without any linking exception (see the <a href=""http://openjdk.java.net/groups/hotspot/"" rel=""nofollow noreferrer"">footer of the page</a> and this <a href=""https://en.wikipedia.org/wiki/HotSpot"" rel=""nofollow noreferrer"">wikipedia</a> page). </p>

<p>Would I be at risk of any legal repercussion from Oracle if I bundle OpenJDK (with Hotspot by default) with my closed source commercial application? </p>
","<p>To the best of my knowledge Hotspot and most of the JVM code (mostly C/C++ native code) in the OpenJDK is released under <a href=""http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/ASSEMBLY_EXCEPTION"" rel=""nofollow noreferrer"">the GPL 2.0 with Assembly Exception</a> and not a ""bare"" GPL. This is in addition to the <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/9b8c96f96a0f/LICENSE#l326"" rel=""nofollow noreferrer"">Classpath exception</a> to the GPL that applies mostly to the runtime library code.</p>

<p>The links I provided here are for OpenJDK 7, but there has not been changes in newer versions as far as I know (though I did not check this ;) )</p>

<p>The net effect of these combined exceptions is that I would usually consider OpenJDK a perfectly valid Java runtime to redistribute in conjunction with any application be it open source or proprietary as long as it used as-is and unmodified and of course that you comply with the GPL for the OpenJDK itself including credits, attribution and source code redistribution. (But these requirements would not apply to the app itself merely using this OpenJDK to run a a Java application).</p>

<p>I would go as far as saying this is in fact the only sane Java runtime provided by Oracle that you can use in conjunction with any open source or proprietary application short of buying a commercial license from them as I explained <a href=""https://opensource.stackexchange.com/questions/4824/is-it-legal-to-bundle-oracles-jre-with-an-open-source-program/4826#4826"">here</a> at least for now and the foreseeable future:</p>

<blockquote>
  <p>The Java (JRE and JDK) binaries provided by Oracle come so many strings attached that they are practically unfit for any usage or redistribution with proprietary or open source-licensed software including GPL-licensed software.</p>
  
  <p>The only sane alternative is to consider the OpenJDK which is using a combo of licenses and is primarily under the GPL 2.0 with Classpath exception which is typically considered suitable for any open source or proprietary usage. See below for some pointers to OpenJDK pre-built binaries or build it yourself...</p>
</blockquote>

<p><strong>Update 2016-12: Actually the latest news is that Oracle is now <a href=""https://opensource.stackexchange.com/questions/4824/is-it-legal-to-bundle-oracles-jre-with-an-open-source-program/4826#4826"">enforcing commercial licensing</a> and <a href=""http://www.businessinsider.com/oracle-starts-to-audit-java-customers-2016-12"" rel=""nofollow noreferrer"">commercial audits</a> if you do not use an OpenJDK.</strong></p>
","4855"
"Monetizing and licensing with AGPL libraries","345","","<p>I am just curious about, what license should i use for app(android), i have written in my free time. I am using some libraries, which have this licenses on it:</p>

<ul>
<li>Apache 2.0 license</li>
<li>MIT license</li>
<li>GNU Affero General Public License</li>
</ul>

<p>1 Question: if i use this libraries, should my app be open source? I have no problem with making it open, but just not sure if i should do it. And if yes, what is the best of doing it? Just say it is open source, and that everyone can contact me for the source code? Or do i have to upload it somewhere (sourceforge, github)?</p>

<p>2 Question: if i use this libraries, am i able to sell my app? If not, am i able to make in app purchases to donate to me? As much i know the biggest problem would be the AGPL license. I use the library to create PDF files (iText). How should it be handled? Or can i make some features paid, but not that one, which are from the AGPL licensed library?</p>

<p>3 Question: what is the best license to use with my app in that case?</p>
","<p>The usual line is that you are making a derivative work of all three libraries.  When you distribute that, each individual component library must be redistributed under its original licence.  The resulting derivative work - the whole product - must be distributed under a licence that honours them all.</p>

<p>Since one of the components is AGPL3, the resulting product must be distributed under <a href=""http://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL"" rel=""nofollow"">a licence which is at least as permissive as the GPL</a> - such a licence is referred to as being <em>GPL-compatible</em>. The FSF <a href=""http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow"">maintains a list of such licences</a>, and Apache 2.0, the MIT X11 licence, and the MIT Expat licence (you do not say to which you refer) are compatible.</p>

<p>So as I understand it - and remember I am not a lawyer, and even if I were, I'm not <em>your</em> lawyer - you must release each component under its original licence, and the combined work under any one of the three (or, if you want to complicate matters, any other AGPL3-compatible licence).</p>

<p>You also ask </p>

<blockquote>
  <p>am i able to sell my app?</p>
</blockquote>

<p>Yes, of course; free software may be sold, and often is.  But you may <strong>not</strong> deprive your users of the four freedoms; in brief, you must provide them with the source code, and the rights to use it.</p>

<blockquote>
  <p>am i able to make in app purchases to donate to me?</p>
</blockquote>

<p>Yes, you may; but you may not prevent other people from removing or altering that code.</p>

<blockquote>
  <p>As much i know the biggest problem would be the AGPL license. I use
  the library to create PDF files (iText). How should it be handled?</p>
</blockquote>

<p>I don't entirely understand this part of the question.</p>

<blockquote>
  <p>Or can i make some features paid, but not that one, which are from the
  AGPL licensed library?</p>
</blockquote>

<p>You may certainly charge for features, but when you distribute them to paying users, you must include full source, and the rights to use it, so that users may redistribute them if they wish.</p>

<p>Finally, I should add that not everyone agrees that linking your code to another's library makes a derivative work.  You should get advice on this question, because if it doesn't, everything I wrote except the second sentence is false.  However, most people that I know do not take this position; that is, they accept that linking creates a derivative work, and thus that such a derivative will be bound by all the licences on its components.</p>
","2685"
"Can I use a proprietary library in my GPL'd program?","344","","<p>The case of proprietary programs linking to GPL'd libraries has been discussed thoroughly. However the inverse case - a GPL'd program is linking to a proprietary library - is rarely mentioned.</p>

<p>Therefore my question is: <strong>Can I use a proprietary library in my own GPL'd program (which I intend to distribute) without violating the GPL?</strong></p>

<p><em>Note:</em> I'm assuming the library is an integral part of the GPL'd program and the library's (non-free) license allows me to link it into the program. </p>
","<p>The Free Software Foundation's <a href=""http://www.gnu.org/licenses/gpl-faq.html#GPLInProprietarySystem"" rel=""nofollow noreferrer"">FAQ</a> says this:</p>

<blockquote>
  <p>I'd like to modify GPL-covered programs and link them with the portability libraries from Money Guzzler Inc. I cannot distribute the source code for these libraries, so any user who wanted to change these versions would have to obtain those libraries separately. Why doesn't the GPL permit this? (#MoneyGuzzlerInc)</p>
  
  <p>There are two reasons for this. First, a general one. If we permitted company A to make a proprietary file, and company B to distribute GPL-covered software linked with that file, the effect would be to make a hole in the GPL big enough to drive a truck through. This would be carte blanche for withholding the source code for all sorts of modifications and extensions to GPL-covered software.</p>
  
  <p>Giving all users access to the source code is one of our main goals, so this consequence is definitely something we want to avoid.</p>
  
  <p>More concretely, the versions of the programs linked with the Money Guzzler libraries would not really be free software as we understand the term—they would not come with full source code that enables users to change and recompile the program.</p>
</blockquote>

<p>So although you can ""use"" your combination of GPL program and proprietary license, you cannot ""convey"" or ""distribute"" the GPL program without the proprietary library, unless that proprietary library is a ""system library"".</p>

<p>The GPL itself defines a ""system library"" in words that are somewhat incomprehensible to a non-lawyer:</p>

<blockquote>
  <p>The “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p>
</blockquote>

<p>I think it means libraries that the user will be able to obtain independently without a ""vendor lockin"".</p>

<p>See <a href=""https://opensource.stackexchange.com/questions/2203/why-is-the-definition-of-system-libraries-in-gplv3-phrased-the-way-it-is"">this question and its answers</a> about System Libraries.</p>

<p>I am not a lawyer, so this is not legal advice, but just a lay person's opinion.</p>
","2220"
"What do I need to share if I include CC-BY-SA artwork in my software?","343","","<p><a href=""https://creativecommons.org/licenses/by-sa/4.0/"">CC-BY-SA</a> is a Creative Commons license with a copyleft clause - if you derive something from it, you must also provide the derivative under the same license if you distribute it. The relevant clause is here:</p>

<blockquote>
  <p><strong>ShareAlike</strong> — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</p>
</blockquote>

<p>In the <a href=""https://creativecommons.org/licenses/by-sa/4.0/legalcode"">actual license</a>, it refers to derivation as <em>adapted material</em>:</p>

<blockquote>
  <p>Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.</p>
</blockquote>

<p>So does inclusion in a software package turn the software into <em>adapted material</em>?</p>

<ul>
<li>If I include a CC-BY-SA licensed image in the software, do I need to share just the image or does the entire software come under CC-BY-SA?</li>
<li>What if I make modifications to this image, what do I need to share?</li>
</ul>
","<p>In the large majority of cases, the software of a program and the artwork used by a program are not related to each other where copyright is concerned.<br>
An exception might be an image that was created by a program from a fixed formula and the source code of that program.</p>

<p>For a work to be considered a derived work, there must be a way to go from the original work to the target work. There is no such conversion path between the source code of a program and the artwork of a program. For that reason, the two are considered to be independent works as far as copyright is concerned.</p>

<p>If two works are independent works for copyright, then their copyright licenses also don't affect each other. This means that you can perfectly combine artwork under a free (CC-SA) license with software under a closed-source license.</p>

<hr>

<p>If you made changes to the artwork under the CC-SA license, then you must share your modified artwork under the same (or a compatible) license.</p>
","277"
"Can I create my own license by modifying an existing one?","342","","<p>I'm taking the following Stack Overflow question and its answers into consideration: <a href=""https://stackoverflow.com/questions/7883179/can-you-create-your-own-software-license"">Can you create your one software license?</a></p>

<p>My question here however is not creating a completely new license from scratch (as I am not a lawyer and wouldn't know where to start), but rather slightly modifying an existing one and saving it under a new name.</p>

<p>Is this possible? Are licenses licensed themselves? </p>

<p>Does a new 'custom' license need to be approved by official organizations?</p>
","<p>Licenses themselves are often licensed under separate terms which don't have much to do with their own. The <a href=""http://www.gnu.org/licenses/gpl-3.0.html"" rel=""nofollow"">GPLv3</a>, for example is licensed under the following terms:</p>

<blockquote>
  <p>Copyright © 2007 Free Software Foundation, Inc. <a href=""http://fsf.org/"" rel=""nofollow"">http://fsf.org/</a></p>
  
  <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>
</blockquote>

<p>Which is definitely <em>not</em> a free-as-in-freedom license.  You need to check for each license separately which conditions apply to the license text itself. In the worst case the license text is not licensed at all, which implies <em>All Rights Reserved</em> which means you are not allowed to use it for your own project, because that would be an illegal reproduction of the copyrighted license text.</p>

<p>But even when the license of the license allows modification: <strong>Unless you are a lawyer specialized in copyright law you should not modify an existing license</strong>. A license is a legal document, and writing legal documents should be left to the professionals. Otherwise you risk writing something which doesn't actually say what you want it to say.</p>

<p>Another reason to not invent your own license is to <strong>prevent license proliferation</strong>. There are already lots and lots of open source licenses with very similar terms, but yet they are often incompatible just because they say so. Inventing a new license even though an existing one would do makes it harder for all of us to keep track of all the licenses available and is a hinderance to developers who would like to combine code licensed under different licenses in one project. So unless you are <em>sure</em> your new license fills an important niche not yet covered, please try to use one which already exists.</p>

<p>Regarding ""approval for new licenses"": A license is a legal agreement between you and your users. Nobody needs to approve it except for you and your users for it to be legally valid (except when it contradicts local laws - that's another reason why you should let a lawyer write them). However, when you want others to use your license for their FOSS project, you might seek approval from a quasi-official organization like the Free Software Foundation or Open Source Initiative. Their recommendation might not have any <em>legal</em> weight, but it confirms that your terms are in agreement with their definitions of Free Software / Open Source Software.</p>
","252"
"What's Android license? (If it's not free)","342","","<p>I was wondering since the Linux kernel in Android is under a free license while the other software is under Apache license. In which license we can say Android is?</p>

<p>Also, according to the GNU project website, Google should have made a copyright infringement by combining free software with code under Apache license, why  hasn't this raised any illegal issues between Google and GNU the same way it did between Google and Oracle?</p>

<p>Shall we say that Android is an open-source OS in that case?</p>
","<blockquote>
  <p>I was wondering since the Linux kernel in Android is under a free license while the other software is under Apache license. In which license we can say Android is?</p>
</blockquote>

<p>Android is using multiple licenses and the overall collection is primarily under the Apache license but not only. Some parts are GPL, some BSD and some Apache (and many other FOSS licenses). The Linux Kernel itself is using the GPL for kernel space and practically any license you please when running a program in user space on top of the kernel.</p>

<blockquote>
  <p>Also, according to the GNU project website, Google should have made a copyright infringement by combining free software with code under Apache license. why this hasn't raise any illegal issues between Google and GNU the same way it did between Google and Oracle?</p>
</blockquote>

<p>The fact that you redistribute a GPL-licensed kernel and a mostly Apache-licensed user space is fine and there is not a conflict there. This is the normal usage of the kernel. Several other user space tools are independent and therefore there is no intertwined code nor licensing in most cases.</p>

<blockquote>
  <p>The confusion raises from the fact that the Linux kernel in Android is under GPL v2.0 which is not compatible with Apache</p>
</blockquote>

<p>This may be correct in the general case (yet always depends on how GPL and Apache-licensed interact and whether or not they end up being ""separate programs""), but again -- this is something that has been explained and debated at great lengths by Linus and the community-- This is perfectly OK to run code on Linux in user space under <strong>any</strong> license, including proprietary ones. The kernel space copyleft does not bleed in user space in 99.999% of the cases. There are a few rare cases where it would bleed (e.g. if you would access kernel through a ""non-standard"" interface) but this is not a case here.</p>
","5075"
"Are there examples of proprietary software that functionally depends on free software?","341","","<p>This question is a follow-up on a number of questions that all mention some sort of software architecture X for creating software composites, and then goes on to ask: ""Will using X to create a composite result in a derivative work?"".  For example:</p>

<ul>
<li><a href=""https://opensource.stackexchange.com/questions/1187/what-are-the-arguments-for-considering-dynamic-links-to-constitute-derivative-wo"">What are the arguments for considering dynamic links to constitute derivative works?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/1188/what-are-the-arguments-for-considering-dynamic-links-to-not-constitute-derivat"">What are the arguments for considering dynamic links to *not* constitute derivative works?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/1181/does-a-host-applications-license-apply-to-plug-ins-written-for-it"">Does a host application&#39;s license apply to plug-ins written for it?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/1207/does-sharing-a-file-format-make-two-programs-either-a-combined-or-derived-work"">Does sharing a file format make two programs either a combined or derived work?</a></li>
</ul>

<p>The assumption behind under each and every one of them is that software architecture X may be suitable to for telling the difference between <em>derivative</em> and <em>aggregate</em> composites (otherwise they would not be answerable).</p>

<p>I am starting to suspect that this assumption is wrong, and would like to try a new tack on this.</p>

<p>What do we know about composites that involve both proprietary software and free software?  (And yes, this is just rhetorical - I know that this far too broad for this site.)</p>

<p>To turn this into a more focused question, I would like to see <em>examples</em> of proprietary software that somehow makes <em>functional use</em> (i.e. proprietary software that in some way depends on free software in order to perform a useful function).</p>

<p>We all know that proprietary software runs on a kernel that is under GPL (e.g. Linux), and also that this is not considered a license violation. So this is an example of the sort of composite I am asking about.  I am of course not interested in being reminded about this well-known fact, but rather <em>why</em> this is not considered a problem.</p>

<p>To narrow it down further, I will say that I am looking for answers that clearly identify the components of the composite program, their interdependency, and how they communicate or are linked.  The best answer to this question will be the answer that is most illuminating in pointing out a <em>pattern</em> of use or linking that can be used by non-lawyers to tell the difference between a derivative and an aggregate.  I have a priority interest in <em>concrete examples</em> based upon <em>existing</em> and <em>usable</em> software.  The answer may also contain references to legal theory about this topic, but please note I am not looking for ""mere theory"". Any legal theory need to be connected to real examples, and its relevance to the example (if not obvious), need to be pointed out in the answer.</p>

<p><strong>Edit</strong>: This question did not impose any <em>restrictions</em> on what <em>type</em> of license was used for the free software.  It brought to light (some of?) linking and other exceptions that exists and how they are used in real projects.  (I learned a lot more about the <em>permissive</em> side of open source than I knew beforehand from the best answer).  However, I also would welcome examples that shows when and how copylefted free software can be combined with free software, but I believe this requires a <em>new</em> question: <strong><a href=""https://opensource.stackexchange.com/questions/1431/are-there-examples-of-proprietary-software-that-functionally-depends-on-copyleft"">Are there examples of proprietary software that functionally depends on copylefted software?</a></strong></p>
","<p>I'll use Steam as an example. <a href=""http://store.steampowered.com/"">Steam</a> is <a href=""http://www.valvesoftware.com/"">Valve Software</a>'s platform for hosting games (and movies etc.); it is itself <a href=""http://store.steampowered.com/subscriber_agreement/"">proprietary</a>. Initially it was Windows-only, but in the last few years it has been made available on Mac OS X and on Linux. (In fact Valve now have their own Debian-based Linux distribution, <a href=""http://store.steampowered.com/steamos/"">Steam OS</a>.)</p>

<p>On Linux platforms it uses a number of open source libraries to function. The Steam client itself uses the following libraries:</p>

<pre><code>% ldd $(find ~/.steam -name steam -type f) 
    linux-gate.so.1 (0xf7786000)
    libX11.so.6 =&gt; /usr/lib/i386-linux-gnu/libX11.so.6 (0xf736d000)
    librt.so.1 =&gt; /lib/i386-linux-gnu/i686/cmov/librt.so.1 (0xf7364000)
    libm.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libm.so.6 (0xf731d000)
    libdl.so.2 =&gt; /lib/i386-linux-gnu/i686/cmov/libdl.so.2 (0xf7318000)
    libstdc++.so.6 =&gt; /usr/lib/i386-linux-gnu/libstdc++.so.6 (0xf7217000)
    libpthread.so.0 =&gt; /lib/i386-linux-gnu/i686/cmov/libpthread.so.0 (0xf71fb000)
    libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xf7051000)
    libxcb.so.1 =&gt; /usr/lib/i386-linux-gnu/libxcb.so.1 (0xf702a000)
    /lib/ld-linux.so.2 (0xf7787000)
    libgcc_s.so.1 =&gt; /lib/i386-linux-gnu/libgcc_s.so.1 (0xf700d000)
    libXau.so.6 =&gt; /usr/lib/i386-linux-gnu/libXau.so.6 (0xf7009000)
    libXdmcp.so.6 =&gt; /usr/lib/i386-linux-gnu/libXdmcp.so.6 (0xf7002000)
</code></pre>

<p>The libraries are basically glibc and X11 client libraries. There's no license infringement here, all the libraries can be used in this way; but it's safe to say that it wouldn't be easy for Valve to replace the libraries with proprietary versions and still have Steam on Linux.</p>

<p>All this of course is running on a Linux kernel, which is another piece of free software essential to allow Steam to function on a Linux computer.</p>

<p>In addition to all this, many (most) games provided through Steam are themselves proprietary, and on Linux they depend on libraries as well. In addition to the above libraries, Steam itself includes a ""Steam runtime"" which includes many other open source libraries: NSS, Pango, GTK+, GStreamer, ALSA etc. Any program running on Steam is free to use these; their licenses allow linking proprietary software.</p>

<p>As to why this is allowed, the libraries' licenses in this case are all either permissive (X11, Expat), LGPL, or GPL with a linking exception (<code>libgcc</code>); this allows linking proprietary software to the libraries involved.</p>

<p>The kernel itself includes a caveat in <a href=""http://lxr.free-electrons.com/source/COPYING"">its copy of the GPL</a>, explaining that running programs which use the kernel via syscalls does not constitute derivative software:</p>

<blockquote>
  <p>NOTE! This copyright does <em>not</em> cover user programs that use kernel
   services by normal system calls - this is merely considered normal use
   of the kernel, and does <em>not</em> fall under the heading of ""derived work"".
   Also note that the GPL below is copyrighted by the Free Software
   Foundation, but the instance of code that it refers to (the Linux
   kernel) is copyrighted by me and others who actually wrote it.</p>
</blockquote>
","1224"
"Is this GPLv3 licensed code ""publishable"" in GitHub?","336","","<p>I'm developing a desktop app and i'm using <a href=""http://lbesson.bitbucket.org/md/index.html"" rel=""nofollow noreferrer""><strong>StrapDown.js</strong></a>. My question start with the StrapDown project page. It says: </p>

<p><code>This project is released under the GPLv3 license, for more details, take a look at the LICENSE file in the source.</code></p>

<p>My doubt comes with the fact that he has ""hidden"" the project repo (in BitBucket): <code>As of now, StrapDown.js does not have it own git repository. And I don't want to, because it is cleaner to let it live on http://lbesson.bitbucket.org/md.</code></p>

<p>So my question is: can I publish a desktop app in GitHub (with the original licenses)? Even the StrapDown source code? I've been reading a bit and that license seems to allow users to publish modified versions of the code/software/licensed thing, but my doubt comes because the mantainer (who forked <a href=""https://github.com/arturadib/strapdown"" rel=""nofollow noreferrer"">the original GitHub project</a> and modified it to make (a new?) StrapDown) has not publish the code.</p>
","<p>An application licensed under the GPL v3 is licensed under the GPL v3. It doesn't just apply to the hosting platform where that project is hosted, the license applies to the project no matter where it exists. On the linked page in your question, there is a download link with a zip file on the project.</p>

<p>The GPL v3 is a strong copyleft license. Anything that uses the GPL v3, even if you link to it, means that the code also must be licensed under the GPL v3. Interestingly, the maintainers of the GPL project seem to violate the license themselves, by not providing a link to the source code.</p>

<p>Basically, with the GPL v3, you can go ahead and take the source code. If you make changes of it, or if you call a function/method inside that API (e.g. <code>StrapDown.my_method()</code>), then whatever code you make has to be modified under the GPL v3 license. And yes, you can publish your code on Github, don't worry.</p>
","1631"
"PostgreSQL Licence for professional use ( postgres 9.4 / Visual studio 2015 )","336","","<p>I created an application for the company where I am doing my internship with Visual studio 2015, it should be connected to a Postgres server my questions are: </p>

<ul>
<li>Can the company use the Postgresql 9.4 and my application wihout any legal risk?</li>
</ul>

<p>I already read the license and it says that it's for a commercial use too. Is this correct?</p>
","<p>Yes, you can safely use Postgresql without any legal risk because it is <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow"">Free Software</a>.  Freedom 0 is the freedom to use to program <strong>for any purpose</strong>.</p>

<p>This is also made explicit in the <a href=""http://opensource.org/licenses/postgresql"" rel=""nofollow"">license</a>:</p>

<blockquote>
  <p>Permission to <strong>use</strong>, copy, modify, and distribute this software and its
  documentation <strong>for any purpose</strong>, without fee, and <strong>without a written
  agreement</strong> is hereby granted, provided that the above copyright notice
  and this paragraph and the following two paragraphs appear in all
  copies.</p>
</blockquote>
","1827"
"Is it legal to bundle Oracles JRE with an open source program?","334","","<p>Is it legal to bundle Oracles JRE together with the binaries of a (non commercial) open source program (GPLv3)?</p>
","<p>Short answer: <strong>No</strong>. The Java (JRE and JDK) binaries provided by Oracle come so many strings attached that they are practically unfit for any usage or redistribution with proprietary or open source-licensed software including GPL-licensed software.</p>

<p>The only sane alternative is to consider the <a href=""http://openjdk.java.net/"" rel=""nofollow noreferrer"">OpenJDK</a> which is using a combo of licenses and is primarily under the <a href=""http://hg.openjdk.java.net/jdk8u/jdk8u/file/d15b51f1149b/LICENSE"" rel=""nofollow noreferrer"">GPL 2.0</a> with <a href=""http://hg.openjdk.java.net/jdk8u/jdk8u/file/d15b51f1149b/LICENSE#l326"" rel=""nofollow noreferrer"">Classpath exception</a> which is typically considered suitable for any open source or proprietary usage. See below for some pointers to OpenJDK pre-built binaries or build it yourself...</p>

<p>More details:</p>

<p>The Oracle JREs and JDKs (i.e. NOT the OpenJDK) are released under a proprietary license called the <a href=""http://www.oracle.com/technetwork/java/javase/terms/license/index.html"" rel=""nofollow noreferrer"">Oracle Binary Code License Agreement</a>.</p>

<p>This license has evolved quite a bit over the years from its start at Sun to the point that it is barely usable for internal development and probably not much more. Oracle wants you to buy a commercial license instead for most usages. </p>

<p>In particular as one of the many issues in this license, the <a href=""http://www.oracle.com/technetwork/java/javase/terms/license/index.html"" rel=""nofollow noreferrer"">field of use restrictions</a> have evolved to be so vague and far reaching as to make you wonder if any usage is allowed (emphasis is mine):</p>

<blockquote>
  <p>""General Purpose Desktop Computers and Servers"" means computers, including desktop and laptop computers, or servers, used for general computing functions under end user control (such as but not specifically limited to email, general purpose Internet browsing, and office suite productivity tools). The use of Software in systems and solutions that provide dedicated functionality (other than as mentioned above) or designed for use in embedded or function-specific software applications, for example but not limited to: Software embedded in or bundled with industrial control systems, wireless mobile telephones, wireless handheld devices, kiosks, TV/STB, Blu-ray Disc devices, telematics and network control switching equipment, printers and storage management systems, and other related systems are excluded from this definition and <strong>not licensed under this Agreement</strong>.</p>
</blockquote>

<p>These kind of restrictions would not fly much with any open source redistribution and with the GPL in particular.</p>

<p>This makes essentially any ""LICENSE TO DISTRIBUTE"" grants in section C and D moot in most cases. You may have a very narrow use case that may fit in these restrictions but all the lawyers I have consulted with on this license are quite uncomfortable with its terms for most practical cases.</p>

<p>The only sane alternative is to consider the <a href=""http://openjdk.java.net/"" rel=""nofollow noreferrer"">OpenJDK</a> whether for use in conjunction with FOSS or proprietary software. This is weirdly enough essentially the same codebase.</p>

<p>The OpenJDK project itself does not redistribute binaries and building an OpenJDK can be a rather engaged process. Linux distros have packages for this. For other OSes, there are some pre-built available for instance from <a href=""http://www.azul.com/downloads/zulu/"" rel=""nofollow noreferrer"">Azul</a>.</p>

<p><strong>Update 2016-12: Actually the latest news is that Oracle is now <a href=""https://opensource.stackexchange.com/questions/4824/is-it-legal-to-bundle-oracles-jre-with-an-open-source-program/4826#4826"">enforcing commercial licensing</a> and <a href=""http://www.businessinsider.com/oracle-starts-to-audit-java-customers-2016-12"" rel=""nofollow noreferrer"">commercial audits</a> if you do not use an OpenJDK.</strong></p>
","4826"
"Provide closed-source application with LGPL-Libraries","331","","<p>We plan to ship an application together with the required dynamic-libraries (SO/DLL), we link dynamically against one of these libraries, which uses the others libraries.<br>
The <a href=""https://www.gnu.org/licenses/gpl-faq.html#LGPLStaticVsDynamic"" rel=""nofollow"">LGPL</a> requires us to provide the libraries-sources. I assume I can provide the sources in a second package from our server, servers of the original projects or using the possibilty to offer the code for three years (see <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">Section 6, GPL</a>). At the moment I tend to use that <strong>three year clause</strong> from Section 6, Paragraph B of the GPL. Because literally nobody will replace the libraries and if they want, the will likely use newer versions of the library which we don't use. Furthermore we don't have to maintain the the downloads on ourselves, just keep a backup of the library-sources.</p>

<p>Questions:</p>

<ul>
<li>Is that correct?</li>
<li>Do you now an good example of an closed-source application, which comes together with LGPL-Libraries?</li>
</ul>

<p>I thought about looking at <a href=""https://get.adobe.com/de/flashplayer/download/?installer=FP_11.2_for_other_Linux_64-bit_(.tar.gz)_-_NPAPI&amp;sType=2718&amp;standalone=1"" rel=""nofollow"">libflashplayer</a>, but that is a bad example. Adobe just includes a copyright notice and the LGPL. Which is probably okay, because they don't deliver the LGPL-Libraries on their own and assume the are available. I can't, because we target also Windows and have to provide our stuff in a complete package.
Thankfully we can built our work on the libraries and the LGPL, but it is weird written.</p>

<hr>

<p>I originally asked this question on stackoverflow, but wasn't able to move it here, so I opened here this question again.</p>

<p>// update:<br>
We're linking against libmicrohttpd* which is using the LGPLv2.1 or at option any later version. Furthermore we running the executable on a regular IBM compatible personal-computer and not shipping it on a device or appliance. As far as I know we are not building up on any patented-stuff.</p>

<p>*I can really recommend this project, the people are helpful and friendly. I should spend some euros for them.</p>
","<p>Yes, a written offer to provide the library source code on a medium suitable for software exchange (for LGPL 2.1 this would be something like a DVD) at a cost covering your expenses is one of the options you have. You do not need to host the source code on a web server.</p>

<p>You should be able to find plenty of examples of this kind of commercial use with any Android device manufacturer (Samsung, Sony, Motorola, HTC, etc) as Android devices are normally shipped with several LGPL licensed libraries installed.</p>
","4601"
"What are the upsides for a company to contribute to an open-source software they use?","331","","<p>Many software developing companies use open source tools or open source libraries. Sometimes they even tweak this software for their needs. So, one might argue that this tweaks should be given back to the OSS-project. That means, contributions of that company will become public.</p>

<p>But what are the advantages for a company doing so? Are there any at all? Are there disadvantages?</p>
","<p><strong>Advantages</strong></p>

<ul>
<li><strong>Reduced maintenance.</strong> If a company uses custom patches, every time upstream changes, the company has to re-apply those patches when they update their custom version. This gets worse when upstream undergoes major refactors or changes in interfaces.</li>
<li><strong>Publicity.</strong> By having its name included in the project's contributor list, other users become aware of the company. This could mean potential hires who are interested in the project, but through the project apply for employment. There's also a lot of goodwill associated with open source software; Microsoft for example earned lots of kudos when it began contributing significant code to prominent open source software like Linux.</li>
<li><strong>Employee perks.</strong> Most software developers at companies are work-for-hire; every line of code they write is owned by the company. This means that when they go elsewhere, they cannot easily show the work they've done. But open source contributions are open for all, so they can point to specific projects and commits, improving their hireability and their market value. Also, some employees simply like contributing to open source projects for its own sake.</li>
<li><strong>Competition against a market leader.</strong> A major reason why lots of companies work on open source software is they can pool resources on an open project that is in competition with a dominant, closed rival. Open source allows them to share the workload. For example, OpenStack is a collaboration by hundreds of companies to compete against market leaders like Amazon.</li>
</ul>

<p><strong>Disadvantages</strong></p>

<ul>
<li><strong>Competitive advantage.</strong> If a certain type of software is a company's competitive advantage, it is exceedingly unlikely that they'll share it, because obviously, their competitors can then take advantage of it. For this reason, most if not all corporate open source contributions are in software that is not part of their core business. Google for example does a lot of open source work with Android and WebKit, but that's because free and better mobile platforms and browsers helps point people to their bread-and-butter: viewing ads. There is almost no way that Google will open their search engine or ad serving software, without a major change in business models.</li>
<li><strong>Risk of losing intellectual property.</strong> Even if a piece of software isn't a company's competitive advantage, critical pieces of code could accidentally sneak into the open. A careless developer could accidentally contribute an advanced algorithm, for example. Because of this, most companies run their open contributions through their legal department first. Most don't bother with this because it's more trouble than it's worth.</li>
<li><strong>Risk of legal trouble.</strong> Not all code a company uses is fully owned by the company; there could be third party licensed code or code under NDAs and so forth. Accidentally opening these opens the company to legal problems. Again, most companies run through legal, and again most don't bother with the trouble.</li>
</ul>
","190"
"How can I determine if some code I want to release as opensource is already licensed or proprietary?","330","","<p>Is there a way to analyze my code I want to release as opensource to see if it is / or has parts that are already licensed or proprietary?  </p>
","<p>Yes, there are (paid) services such as <strong><a href=""https://www.blackducksoftware.com/audits/open-source-audits"" rel=""nofollow"">Black Duck </a></strong> or <strong><a href=""http://www.openlogic.com/products-services/services/application-audit"" rel=""nofollow"">Open Logic</a></strong> that will audit your code, and report all of the licensed pieces of software found.</p>

<p>They will even find snippets in your code which are copy/pasted or too closely resemble snippets found on the internet which are shared with an unfavorable license.</p>
","276"
"Someone is violating the copyleft license, they are refusing to give me the source code even though they are required to!","328","","<p>This person has a piece of open source code which is released under a copyleft license. They are required to give me this code, but numerous times they have refused. I am stuck because I need this code....</p>

<p><strong>My question:</strong></p>

<p>Is there anything I can do to make them give me the code?</p>

<ul>
<li>If yes, how?</li>
<li>If no, what else can I do?</li>
</ul>
","<p>Enforcing can be difficult, and you would likely have to go through the courts, in order to enforce. Be sure to make sure that they have to do it under the terms of the license as well. Make sure that you notify the project's author, as they may be able to help you in this case as well. </p>
","466"
"Changing QT library licence for application from LGPL to commercial","327","","<p>I consider myself an amateur and the following is based on my limited understanding. I also live in Germany, but copyright questions would probably cross borders anyway.</p>

<h2>Situation</h2>

<p>Let's assume I developed and released my (yet to be created) application for commercial purposes and used the LGPL version of QT and linked to it dynamically. Complying to the LGPL licence should be possible without releasing the code of my application core.
Futhermore I decide that the LGPL version of QT is too restrictive (e.g. no static linking) and subscribe to use the commercial version QT. Any releases of my application would then be without QT source code and statically linked.</p>

<h2>Problem</h2>

<p>The only problem I see here is that statement in the <a href=""https://www.qt.io/faq/#_Toc453700698"">faq entry 2.13</a>:</p>

<blockquote>
  <p><em>If I have started development of a project using the open source version (LGPL), can I later purchase a commercial version of Qt and move my code under that license?</em></p>
  
  <p>This is not permitted without written consent from The Qt Company. If you have already started the development with an open-source version of Qt, please contact The Qt Company to resolve the issue. If you are unsure of which license or version to use when you start development, we recommend you contact The Qt Company to advise you on the best choice based on your development needs.</p>
</blockquote>

<h2>Question</h2>

<p>Can the <em>QT Company</em> really deny using the commercial version of QT in combination with my propriatary application core code? I read (part of) the licence text, but I cannot answer this question specifically. What really baffles me is that even when using the LGPL version of QT (as a library) I retain the exclusive rights to the application core and never have to release the source under any licence (when properly done, of course).
To rephrase: In what way can the commercial licence force me to obtain my own source code <em>not using the LGPL version of QT</em>?</p>
","<blockquote>
  <p>Can the QT Company really deny using the commercial version of QT in combination with my propriatary application core code?</p>
</blockquote>

<p>This is a commercial company and this is about a commercial contract. They can do whatever they want in their contracts.</p>

<blockquote>
  <p>In what way can the commercial licence force me to obtain my own source code not using the LGPL version of QT?</p>
</blockquote>

<p>Again, in a commercial contract -- and if you agree to it-- they can do whatever they want which may or may not be entirely legit under some jurisdictions, but a contract becomes the law between its parties.</p>

<p>My take here is that QT wants to ensure that they always have full control of how its software is combined with copyleft-licensed code as their business is based on the full ownership of the code and dual licensing which that can only achieve if they control the code fully</p>
","4340"
"Where is csharp-sqlite now maintained?","325","","<p>csharp-sqlite is the only pure-C# implementation of an SQLite client.</p>

<p>The project used to live at <a href=""https://code.google.com/p/csharp-sqlite"" rel=""nofollow"">https://code.google.com/p/csharp-sqlite</a><br>
The last update was 4 years ago.</p>

<p>The homepage says:</p>

<blockquote>
  <p>For preparing to google code will be disconnected at August. csharp-sqlite will be moved (exported) to GitHub. Later information will be posted here soon.</p>
</blockquote>

<p><a href=""https://github.com/search?utf8=%E2%9C%93&amp;q=csharp-sqlite"" rel=""nofollow"">Many people have exported it to Github</a> but none seems to be maintaining it.</p>

<p>It has been months since this notice got posted, it seems like the maintainer has ""<a href=""https://groups.google.com/forum/#!topic/csharp-sqlite/hMhtJJcyYs0"" rel=""nofollow"">moved on to other interests</a>"".</p>

<p>Is csharp-sqlite maintained somewhere? Are there active forks (maybe renamed) that I haven't found?  </p>
","<p>Simple answer: <strong>No.</strong></p>

<p>This product has been discontinued by the developer. It is up to the developer to do what he/she said they would do. It is quite possible they lost interest in the project and have moved on to other projects.</p>

<p>No activity could just mean they have not got around to it. </p>

<p>Advice: stay patient, if you really need to know you could contact the developer.</p>
","775"
"Can I license a project which I have already released without a license?","319","","<p>If I have put my code in one of the online repositories and have made it public but haven't licensed it... (to which the policy is that you retain the copyright). </p>

<p>Is it enough to just commit a licence text file along with the license header in every source file, in order to ""license"" the project? Or do I have to create a new project which has those from the very beginning, in which case what should I do with the old one?</p>
","<p>As long as you are the only contributor to a codebase, you can switch the license as you like. So yes, you can change the license, as long as you didn't use code of others. Check the answers to <a href=""https://opensource.stackexchange.com/q/33/55"">this question</a> about relicensing, if you want to know under which circumstances you can change the license. Basically the same applies here, as you practically you change from an implicit copyright (license without giving any permissions) to an explicit license.</p>
","222"
"How does the Apache 2 license's patent grant interact with third-party patents?","319","","<p>From <a href=""https://opensource.stackexchange.com/questions/1881/against-what-does-the-apache-2-0-patent-clause-protect"">what I've read about the Apache 2 license's patent grant clause</a>, it's intended to protect users of Apache-licensed software from software patents.  How does that work if the contributor doesn't own the relevant patents, and thus can't grant the patent license required by the patent grant clause?</p>

<p>Suppose that person A obtains a license to use person B's software patent, and writes some code that uses it.  Can person A then distribute that code under the Apache 2.0 license?</p>

<p>Suppose that person C then uses that code.  Who's responsible for obtaining the patent license from person B?</p>
","<p>The license says:</p>

<blockquote>
  <p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, <strong>where such license applies only to those patent claims licensable by such Contributor</strong> that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted.</p>
</blockquote>

<p>Bold is mine. The way I interpret that is, the Apache license only means person A grants patent licenses that:</p>

<ul>
<li>A can legally grant</li>
<li>That are necessary to use A's contribution, either alone or as part of the whole work</li>
</ul>

<p>So it will still be necessary for C to obtain a license from B. But the license assures C that she won't be sued by A by using the software.</p>
","4195"
"So the GPL doesn't restrict the creator of the software in any way?","318","","<p>In another thread I started (<a href=""https://opensource.stackexchange.com/questions/2070/redhat-acquires-ansible-why"">Redhat buys Ansible</a>), I am trying to figure out the economic value of a company transaction with respect to GPL'ed software. A few of the answers suggest that the owners themselves are not bound by the license. While they couldn't revoke the license for existing code, they could put the exact same code under a commercial license and, for example, just selectively publish new code under the GPL, if at all. </p>

<p>This is different from the understanding I previously had. I always figured that GPL'ed code belongs to the masses, the community, and that everyone is bound by the same rules. So I want to make sure that I understand this right: </p>

<ol>
<li>Putting software under the GPL does not mean abandoning ownership?</li>
<li>What constitutes ownership? Is it the copyright? </li>
<li>The owner is not bound by the GPL, e.g. he could change or improve the code without having to share the changes back to the community?</li>
<li>What about community contributions? Whom do they belong to? If not clearly defined, what options do exist? </li>
</ol>

<p>I might not even have got all the important aspects but these would be enough to thoroughly change my perception. </p>
","<blockquote>
  <ol>
  <li>Putting software under the GPL does not mean abandoning ownership?</li>
  </ol>
</blockquote>

<p>Absolutely not. In nations signatory to the Berne Convention, <em>copyright</em> is the default, which means by default only the author (or current copyright holder, if the original author transfers the copyright) may reproduce the work, prepare derivative works, etc.</p>

<p>The author of a work may use a <em>license</em> to permit other people to use the work in specific ways, subject to author-defined license-specific rules. Allowing other people to use the work via a license in no way lessens the author's copyright -- on the contrary, the author's copyright is what makes the license possible and necessary.</p>

<p>It is important to note that any recipient of a GPL-licensed work can distribute and modify it. Thus, even if the author stops distributing a GPL-licensed work, the author cannot rescind the rights previously granted to existing recipients. (This claim is somewhat debated for GPLv2, and may vary by jurisdiction, but is made explicit in GPLv3.) In that sense, releasing a work under the GPL means abandoning the ability to restrict its distribution and modification under the terms of the GPL, but this is tremendously different from abandoning ownership.</p>

<blockquote>
  <ol start=""2"">
  <li>What constitutes ownership? Is it the copyright?</li>
  </ol>
</blockquote>

<p>Yes, copyright is a kind of ""ownership,"" in the metaphorical mapping of intellectual property rights onto physical property rights. That is, the copyright holder of a work has certain exclusive rights to a work. Those rights can be granted to other people in limited ways (or unlimited ways, if you're feeling generous), but ultimately the grant of those rights comes from the legal reality that those rights fundamentally belong to the copyright holder and are licensed as the copyright holder pleases.</p>

<blockquote>
  <ol start=""3"">
  <li>The owner is not bound by the GPL, e.g. he could change or improve the code without having to share the changes back to the community?</li>
  </ol>
</blockquote>

<p>Absolutely. The copyright holder is never beholden to the rules of the holder's own license grant! The copyright holder's rights stem from copyright law, not from a license grant. The copyright holder can legally prepare a derivative of her own work based on her rights under copyright.</p>

<p>Other people can prepare derivative works of someone else's copyrighted work only insofar as that right has licensed to them. In the case of the GPL, that means that others' derivative works <em>must</em> be GPL-licensed. The copyright holder need not follow this rule, since they they do not derive their rights from the GPL license grant. Rather, they <em>are</em> the original source of the rights being licensed.</p>

<blockquote>
  <ol start=""4"">
  <li>What about community contributions? Whom do they belong to? If not clearly defined, what options do exist?</li>
  </ol>
</blockquote>

<p>Contributions are creative works created by their respective authors, and the author of a contribution holds the copyright to that contribution. If a project includes copyrighted work from multiple contributors, then licensing the project requires consent from all copyright holders. In professional open-source project, this is usually handled at contribution-time by making the contributor agree to either</p>

<ul>
<li>a contributor licensing agreement (CLA) that grants the project owner the unlimited (or sometimes limited) right to re-license the contribution in the future to another license</li>
<li>a copyright transfer agreement (CTA) that ensures the project only has one copyright holder, by causing the contributor to transfer the copyright of her contribution to the project owner</li>
</ul>

<p>If the project includes work held by another copyright holder who refuses to re-license and has not previously agreed to a re-licensing agreement, the project may choose to remove or rewrite the portions written by other people.</p>

<p>If someone takes your GPL-licensed project and distributes a fork with their own changes without interacting with you (which they can do as long as their changes are under a GPL-compatible license), then you are free to incorporate their changes in your own project. However, if you do so, then you are no longer the sole author of the work, and you must abide by the other author's license as long as you use the material they wrote.</p>
","2078"
"Why was open source as a term created, although free software was already established?","317","","<p>Technically <a href=""http://opensource.org/osd"">open source</a> and <a href=""https://www.gnu.org/philosophy/free-sw.html"">free software</a> more or less mean the same thing. They have different definitions, but they result basically in the same thing. So why was  the Open Source Initiative founded and why did they coin the term open source? What are the differences they intended to make? How do the philosophies behind the two camps differ?</p>
","<p>One of the most helpful analogies I've ever heard compares software development to government:</p>

<blockquote>
  <p>Lots of people like democratic governance. Some people like democracy because it produces the <em>best results</em> that maximize happiness of its citizens. Other people like democracy because they believe people have a <em>moral right</em> to have their voices be part of their own government (regardless of the results). The first group is like open source; the second group is like free software.</p>
</blockquote>

<p>Richard Stallman coined the term ""Free Software"" to mean freely-shareable and freely-modifiable software that complies with his <a href=""http://www.gnu.org/philosophy/free-sw.en.html"">four freedoms</a>. The Free Software Foundation has always been an ethically-driven organization. In the documentary <a href=""https://www.youtube.com/watch?v=GsHh2wfy_-4#t=595""><em>Revolution OS</em>, Richard Stallman, founder of the FSF, says of the GNU project</a>, (emphasis mine):</p>

<blockquote>
  <p>And to me, [a non-disclosure agreement] was essentially a promise to be a <strong>bad person</strong>... to cut myself off from... a cooperating community. [...] [By developing GNU,] not only could I give myself a way to keep using computers without <strong>betraying other people</strong>, but I'd give to everybody else, too. Everybody else would have a way out of that <strong>moral dilemma</strong>...</p>
</blockquote>

<p>The term ""Open Source Software"" was invented later, in a meeting between Eric S. Raymond, some employees of VA Linux Systems, and a few others. There's <a href=""https://www.youtube.com/watch?v=GsHh2wfy_-4#t=2766"">an interview with Eric S. Raymond in <em>Revolution OS</em></a> in which he recalls the original effort to develop and popularize the term:</p>

<blockquote>
  <p>[Y]ou walk into an executive's office and say ""Free Software""... Okay, if you're lucky, the response is something like, ""Hmm, Free Software, must be cheap, shoddy, worthless."" And if you're not lucky, it has associations with the Free Software Foundation's wholesale attack on intellectual property rights, which -- regardless of what you think about the ethics of that -- it's lousy marking. It's not something businesses want to hear.</p>
</blockquote>

<p>There's a following clip from Larry Augustin, CEO of VA Linux Systems:</p>

<blockquote>
  <p>We'd been calling this ""Free Software"" but people took the term ""Free"" and associated with ""free of charge"". They thought they couldn't make money or couldn't sell. We wanted to get across the idea that the software was open and that the source code was available. Very important pieces.</p>
</blockquote>

<p>It is clear from these interviews, ""open source"" was intended to capture the idea of freely-modifiable and shareable software in a business-centered way, rather than as an ethical concern. In addition, the confusion over ""free in cost"" was a point of concern for business adoption as well.</p>

<p>For Stallman (and by extension, the whole FSF, which he founded), the freedom to modify and share software has always been a moral issue. The Open Source movement began as an attempt to capitalize on the practical benefits of freely-shareable and modifiable software without the ethical concerns that have always been at the core of the Free Software movement.</p>

<p>In practical terms, ""open source software"" means ""software complying with the <a href=""http://opensource.org/osd-annotated"">OSI's Open Source Definition</a>,"" while ""free software"" means ""software complying with the <a href=""http://www.gnu.org/philosophy/free-sw.en.html"">FSF's four freedoms</a>."" The two definitions are not perfectly equivalent, but they are <em>very</em> close.</p>
","376"
"How can I license my content in a blogpost?","316","","<p>Let's say I have a blog post, and I want to release it under a Creative Commons license. I later publish this post to my blog.</p>

<ul>
<li>How do I apply a license to my blogpost?</li>
<li>Do I need to state how it is licensed at the bottom of the post?</li>
</ul>
","<p>Generally you just state that you put the content under a license.</p>

<p>That includes:</p>

<ul>
<li>defining the scope: which content is affected</li>
<li>defining the license: which license is used</li>
</ul>

<p>You also should do this if necessary:</p>

<ul>
<li>if the license demands attribution: naming the contributor(s)</li>
<li>if the work is derived from other works: referencing the original works in the proper way</li>
</ul>

<p>It may be helpful to put links as appropriate, for instance to the license. Some licenses have formulated a way to put something under this license, in this case you should follow the lead.</p>

<p>For Creative Commons you have an <a href=""https://creativecommons.org/choose/"" rel=""nofollow"">interactive license chooser</a>, which allows you to enter all relevant data and creates an proper HTML or text-fragment to include.</p>

<p>If you put something under an open source license, then you have two goals with declaring your license:</p>

<ol>
<li>You want to enable other people to use the rights you give them over your work through the open source license.</li>
<li>You want to secure the rights you keep (for instance the demand that derivates have to released as open source if it is a copyleft license), so you can assert them if needed.</li>
</ol>

<p>For both points it is massively helpful, if your intention is as clear as possible for everyone looking at it. Confusion is not helpful to reach these goals.</p>

<p>Some examples:</p>

<p>Look at the bottom of the Stackexchange-sites, they state the following:</p>

<blockquote>
  <p>site design / logo © 2015 stack exchange inc; user contributions
  licensed under cc by-sa 3.0 with attribution required</p>
</blockquote>

<p>So we know, all user-contributions are cc-by-sa and logo and design are non-free property of stack exchange inc. The cc-by-sa is linked to the license. The attribution required part is actually somewhat bad, as it is unclear and demands in the linked post stuff that isn't covered by cc-by-sa.</p>

<p>Another example may be Wikipedia. They set at the bottom of each site this text (focused on the part relevant for the license):</p>

<blockquote>
  <p>Text is available under the Creative Commons Attribution-ShareAlike
  License; additional terms may apply.</p>
</blockquote>

<p>Again, the license is linked.</p>
","366"
"In open source projects, how do you minimize sabotage risks?","316","","<p>Suppose you are working on a large open source project with 20+ people. Suppose one of these people get mad and decide they want to sabotage the entire project.</p>

<p><strong>My question:</strong></p>

<p>What measures (if any) could be taken to prevent loss of code and information, in the event of an internal sabotage?</p>
","<p>This is part of the purpose of version control systems, like git.</p>

<p>When someone makes a new feature, or changes any code at all in fact, they have to <em>commit</em> it to the project. It's a bit like editing here on Stack Exchange: when you edit your post, an item is created in the post's history showing the changes.</p>

<p>If someone sabotages your post (or in this case, project), then you can simply rollback the changes, setting your project back to the state it was in before the change.</p>

<p>The other method is of course backups. If for some reason this disgruntled individual deletes the entire project, backups are your recourse. Taking regular backups means you have a record, kept separately from the project, of the stages of development. You can then simply restore a damaged or deleted project from these backups.</p>
","653"
"What is the difference between free as in beer and free as in speech?","316","","<p>In open source the term ""free"" is often used, sometimes with a qualifier, ""free as in beer"" or ""free as in speech"". What is meant with these qualifications?</p>
","<p>Free as in beer, is like getting something without payment. Getting food from the community fair (There's one in Toronto that gives free hamburgers to the community every year), something from friends, these are things that you receive without making a payment. You don't pay money.</p>

<p>Free as in speech relates to the Free Software Movement. To recognize this, we normally refer to it adding the French word <strong><em>libre</em></strong>, in order to help imply the freedom meaning. This is the reason as to why we have the acronym FLOSS (Free/Libre and Open Source Software). <strong><em>Libre</em></strong> means that you are unrestricted, like a bird in the skies, to do certain things. With <em>libre</em> software, you can fork the software, and take it. You're allowed to do so, you're <em>libre</em>.</p>

<p>This is a confusion that can be quite confusing. As both words denote the same thing. With people around, they generally take the meaning of ""free as in food"", rather than freedom. People specify what they mean with the expressions to help clarify and assure themselves that their message can come across reliably.</p>
","621"
"Can I modify source code licensed under MIT license without publishing my changes?","315","","<p>Imagine I write a piece of software, which uses some <a href=""http://opensource.org/licenses/MIT"">MIT</a>-licensed library. Let's assume that I modified that library.</p>

<p>My software (of which that library is part) produces some content, which I sell at a profit. I do not sell or publish my software.</p>

<p>Am I allowed to do this?</p>

<p>When I sell my content, do I need to include a notice ""This content was created using library X"" ?</p>
","<p>Open source licenses deal with redistribution and don't impose restrictions on merely using open source software.</p>

<p>Regarding a requirement to post a notice that you used the library, this is paraphrased from the <a href=""http://www.gnu.org/licenses/gpl-faq.html#GPLOutput"">GNU GPL FAQ</a>:</p>

<blockquote>
<pre><code>Copyright law does not give the license grantor
any say in the use of the output people make from their data using
their program. If the user uses their program to enter or convert his
own data, the copyright on the output belongs to him, not to the license
grantor.
</code></pre>
</blockquote>

<p>While this talks about the GPL, it's relevant to any copyrighted software.  You aren't required to include a notice, if the license doesn't say so.  The MIT license imposes no such restriction, so you don't have to include a notice that you used the library.</p>
","1744"
"What happens if the main contributors of an open source project die?","313","","<ul>
<li>What happens if the main contributors of an open source project die?</li>
<li>Are there any guarantee that someone else takes that work?</li>
<li>Do project
hosting services handle this situation?</li>
<li>Are there any systems that the related knowledge of main contributors inherited to new
contributor candidates?</li>
<li>And has this ever happened, are there any
examples you know?</li>
</ul>
","<p>I'm playing with the wording in your question a little bit, but don't change it up because it will likely make this <em>entire</em> answer invalid.</p>

<p>Anyways, let's break down the question by well... question:</p>

<blockquote>
  <p>What happens if the main contributors of an open source project die?</p>
</blockquote>

<p>Well, the project will die down. Likely, a lot. The key part here is that the core part of the team, the project maintainers, will still be around. In that case, there is still the leadership that a project needs in order for it to continue on. If a frequent contributors becomes inactive, or passes away, contributions will <em>not</em> stop, the frequency in which they come in will diminish like the snap of a finger.</p>

<blockquote>
  <p>Are there any guarantee that someone else takes that work?</p>
</blockquote>

<p>I view many open source projects as having an aim (to write good software), as well as a great collaborative tool. Generally, many open source projects have multiple maintainers, as well as multiple collaborators. There will still be people around that will still be willing to contribute. They may not take the full job, but they may step up a gear or two.</p>

<p>What's best however, is the fact that anyone can take an existing open source project, clone it, and then make it their own. This is one of the many goals of open source: to create freedom. Take the Python module <a href=""http://www.python-requests.org/en/latest/"">requests</a> for example:</p>

<blockquote>
  <p>Her Majesty’s Government, Amazon, Google, Twilio, Runscope, Mozilla, Heroku, PayPal, NPR, Obama for America, Transifex, Native Instruments, The Washington Post, Twitter, SoundCloud, Kippt, Readability, Sony, and Federal US Institutions that prefer to be unnamed use Requests internally. It has been downloaded over 40,000,000 times from PyPI.</p>
</blockquote>

<p>That's a lot of people. But what is neat about this is that I can take this project, clone it, and it will be mine. Anyone  can do this.</p>

<p>There's no guarantee that someone else will take the work, but it's quite likely. It's happened many times before, and you will likely find people in this community that have done this before (taken dead projects, and turned them into vibrant, active ones).</p>

<blockquote>
  <p>Are there any systems that the related knowledge of main contributors inherited to new contributor candidates? </p>
</blockquote>

<p>Good projects will likely have many issues, and feature-requests that have been submitted over the course of its life. This is a good system to track how a project has moved on over the course of many years, and is normally more than enough knowledge to continue a project. There's also documentation, and many projects will likely have a set of goals, and objectives.</p>

<blockquote>
  <p>And has this ever happened, are there any examples you know?</p>
</blockquote>

<p>I'm sure there are plenty of examples. You may be able to find a few!</p>

<hr>

<p>The beauty of Open Source projects is that they are a <em>collaborative</em> effort: anyone can contribute, anyone can make it their own. As a sort of freelance/intermediate programmer myself, I like open source, because it's also a learning experience, where I gain experience in managing projects, working with others, and most importantly, learning to code. Have fun :D</p>
","1805"
"Confusion about derived works from an MIT License","312","","<p>I am confused by copyright licenses. Specifically whether or not I am permitted to use derived code from W3Schools in my production code base.</p>

<p>To give a bit of context I have a contract to build a website. The particulars of the website don't really matter, except for the fact that I was searching for code that I could hack to develop a vertical drop down navigation pane. I came across a <a href=""http://www.w3schools.com/w3css/demo_sidenav.htm"" rel=""nofollow noreferrer"">wonderful example on W3Schools</a> that did what I wanted.</p>

<p>However, before I copied the code I started to do some research to make sure I wasn't violating copyright laws. According to the W3Schools copyright statement,</p>

<blockquote>
  <p>All pages and graphics on this website are the property of the company Refsnes Data. Pages, code or other content from W3Schools may not be redistributed or reproduced in any way, shape, or form without the written permission of Refsnes Data. Failure to do so is a violation of copyright laws.</p>
</blockquote>

<p>More specifically, later on, they state that copying for profitable or commercial use is not a favorable use.</p>

<p>So that seems pretty clear, that I can't use this code without written permission from Refsnes Data.</p>

<p>However here is where I am confused - as I reviewed the source code for the HTML in question I noticed their CSS File and browsed it.</p>

<p>On the third line down they attribute around 25 lines or so to another developer project <a href=""https://github.com/necolas/normalize.css"" rel=""nofollow noreferrer"">""Normalize.css by Nicolas Gallagher and Jonathan Neal""</a>   </p>

<p>Reading the MIT license for the project tells me that in order for W3Schools to make use of this code in the CSS file they must release their code with the same license and include the license statement (which they didn't do).</p>

<p>My questions are:</p>

<ol>
<li>Is W3Schools in violation of the MIT License as they do not include
a reference to the license in their code? </li>
<li>Am I allowed to use the  W3Schools CSS file as it is a derivative of the Normalize.css and
therefore automatically licensed the same way? </li>
<li>Am I allowed to use
the W3Schools HTML file as it is an implementation of a derivative?</li>
<li>Am I overthinking this?</li>
</ol>
","<p>The MIT license is a permissive license, which allows you to do anything you like with the licensed code, including using it in a proprietary code-base. Derivative code isn't automatically MIT-licensed.</p>

<p>The only requirement is</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>W3Schools are complying with this by including the normalize.css copyright notice. Their own work isn't reusable as you discovered yourself; all that you're allowed to do is reuse normalize.css as provided originally (and <strong>not</strong> W3Schools' derivative).</p>

<p>So the answers to your questions are</p>

<ol>
<li>No.</li>
<li>No.</li>
<li>No.</li>
<li>Yes.</li>
</ol>
","2791"
"How do I document licenses of code snippets on a web page with a CC BY 4.0 license?","310","","<p>I have a non-trivial amount of text, image, audio, and video content that I'm licensing as <a href=""https://creativecommons.org/licenses/by/4.0/"" rel=""nofollow noreferrer"">Creative Commons Attribution 4.0 International (CC BY 4.0)</a>. I chose this license because it allows people to redistribute, use or remix the content that I produce for any purpose, as long as I am properly attributed. I hope to apply this license to a site as a whole, since it applies to the vast majority of the content.</p>

<p>However, mixed in with this content is software source code. Are there any special concerns that I need to be aware of, with respect to license marking?</p>

<p>I know that:</p>

<ul>
<li>The instructions for the Apache license say to include a <code>LICENSE</code> file in the project and a statement in the header of each source file. There's no way to include a <code>LICENSE</code> file in something like a Gist or a web page, but the content header is achievable. However...</li>
<li>Including the license content or the Apache required header can be obnoxious for every code block on a CC-BY page. It's far less of a problem on a Gist page, though. There may be a way to mark a page that appropriately indicates the license of source code on the page in a good way, but I haven't found guidance.</li>
<li>Creative Commons doesn't provide guidance for marking a mixed-content page on <a href=""https://wiki.creativecommons.org/wiki/Marking_your_work_with_a_CC_license"" rel=""nofollow noreferrer"">their page for marking guidance</a>.</li>
</ul>

<p>Ultimately, I think this boils down to two closely related questions:</p>

<ol>
<li>How should I appropriately mark source code posted to something like a GitHub Gist, where it is only a single file, especially when the license recommends a <code>LICENSE</code> file?</li>
<li>How should I appropriately mark source code when posting it on CC-BY page?</li>
</ol>

<hr>

<p>My questions are somewhat related to two other questions here on Open Source:</p>

<ul>
<li><a href=""https://opensource.stackexchange.com/questions/504/can-i-override-a-licensing-policy"">Can I &quot;Override&quot; a licensing policy?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/904/how-to-license-stack-overflow-contributions-as-permissive-as-possible"">How to license Stack Overflow contributions as permissive as possible?</a></li>
</ul>

<p>There are a few differences, though. What I'm asking is closest to the how-to question, but unlike Stack Overflow, I don't have a profile page to use to add a disclaimer that I'm overriding a license and applying a dual-license. I'm also interested in not dual-licensing content, but applying a specific license (CC-BY 4.0) to one type of content (non-software content) and another license (Apache, BSD, MIT, etc.) to another type of content (source code).</p>
","<h2>1. Single-file formats</h2>

<p>There are, as you correctly note, formats in which it's not possible to include a license file - GitHub gists are the most obvious. In those cases, <em>it's not essential</em> - license files are actually <em>never</em> essential, just recommended for clarity of the license. In those cases, your best bet is to use a header in the source file, specifying copyright and license. <a href=""https://gist.github.com/ArtOfCode-/2609146ac6e92d05ccd2"" rel=""nofollow noreferrer"">Here's an example of just this.</a></p>

<h2>2. CC BY webpages</h2>

<p>This boils down to a pretty simple question: are you the web admin? In other words, can you change that page as you like?</p>

<p>If you <em>can</em> (i.e. it's your website or something), then there are a number of things you could do. You can:</p>

<ul>
<li>add a note in the footer, like SE does: <code>content licensed under CC BY; code snippets under the MIT license</code> (with links to the licenses)</li>
<li>add a similar note, just before or just after the code, specifying the license</li>
<li>add a paragraph in any TOS you have, specifying copyright/license status for content and code.</li>
</ul>

<p>Be careful of saying ""content"" - it's ambiguous. My example above isn't worded too well; saying <code>content licensed under CC BY; code snippets under the MIT license</code> could be read as my code snippets are licensed under CC BY <em>and</em> the MIT license. You could instead say <code>non-code content licensed...; code licensed ...</code> to make it clearer.</p>

<p>If you <em>don't</em> control the webpage where it's displayed, then your only option is to add a header in the code itself. Assuming that the entire code file will be displayed on the page, the copyright header will also be displayed - and hopefully, the webpage's design will make the scope that the license applies to obvious.</p>

<p>Alternatively, if like on SE you have control over another part of the site (i.e. a personal profile), you can add a note covering <em>all</em> your code contributions there. See <a href=""https://opensource.stackexchange.com/questions/904/how-to-license-stack-overflow-contributions-as-permissive-as-possible"">How to license Stack Overflow contributions as permissive as possible?</a> and <a href=""https://opensource.stackexchange.com/questions/504/can-i-override-a-licensing-policy"">Can I &quot;Override&quot; a licensing policy?</a> for more information on this.</p>
","2133"
"Relicensing from GPL v2 to LGPL v2 - What if I can't contact all contributors?","310","","<p>I am a contributor to a very old project presently in violation of the GPL. Our project is a plugin for a closed-source program, but the GPL does not permit this kind of linking. The project should have been licensed under the LGPL instead, but the original authors were not aware of this.</p>

<p>There are only about 30 contributors to the project, but it's almost ten years old at this point; Many of these people have moved on and I'm not sure I can find them all.</p>

<p>How should I proceed with relicensing the project if I can't contact everyone?</p>
","<h2>You need <em>all</em> the copyright owners' permission to change license.</h2>

<p>There's no natural GPL-implied path here because LGPL is more permissive. It allows redistribution of unmodified binaries without the offer of source, explicitly disallowed by GPL. This makes it moderately incompatible in this direction (but you could include LGPL in a GPL work).</p>

<p>So in order to distribute it under a different license, you need permission from either:</p>

<ul>
<li>The copyright owners (all of them).</li>
<li>An agent who operates the copyright on behalf of the owners (all of them).</li>
<li>Somebody with explicit permission to redistribute and sublicense under the terms you require.</li>
<li>Some fancy combination of the above.</li>
</ul>

<p>If you can't get suitable explicit permissions, you have to <strong>replace their work</strong>. This could be quite simple (if they all did whole blocks that could be replaced from fresh without needing to look at them, ie a clean-room implementation), but equally, it can mean awfully painful bisects that make the process more legally dubious. It might be a good prompt to extract the best parts and rewrite.</p>

<p>That said, this is civil law and you only have to answer to these people or their agents. A best-effort to contact them, followed by a best-effort to remove their code will be seen by most as a honourable attempt to do the right thing.</p>

<hr>

<p>Just as a sidebar, the <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLPluginsInNF"" rel=""nofollow noreferrer"">FSF isn't quite as adamant you need to move to LGPL</a>:</p>

<blockquote>
  <p>If the program uses fork and exec to invoke plug-ins [...] there are no special requirements.</p>
  
  <p>If the program dynamically links plug-ins, [...] that combination [...] would violate the GPL. <strong>However, you can resolve that legal problem by adding an exception to your plug-in's license, giving permission to link it with the non-free main program</strong>.</p>
</blockquote>

<p>You still have a licensing issue that requires everybody's input, but it might be a smaller step to leave the existing license in place and add an additional excepted license for the application you want to link into it, extra-GPL.</p>
","1543"
"Can a software license meet one of the FSF's and OSI's definitions without meeting the other?","306","","<p>I know that <a href=""https://www.gnu.org/philosophy/free-sw.html"">Free Software</a> (this means the concept of free as in freedom, not software that does not cost anything) and <a href=""http://opensource.org/osd"">Open Source</a> have two distinct definitions. In practice though, they turn out to be mostly the same. But I was asking myself, if the minor differences can lead to a software license that is conforming to one definition but not the other? Does such an example exist? And what are the points in either definition, that make them different?</p>
","<p>Yes.</p>

<p>See the examples from <a href=""https://opensource.stackexchange.com/a/383/138"">my answer to the question ""Is Open Source Software a subset of free software?""</a>: </p>

<blockquote>
  <h3>Example 1: <em>Free Software</em>, but not <em>Open Source Software</em></h3>
  
  <p>Netscape’s early versions of <a href=""https://en.wikipedia.org/wiki/Mozilla_Application_Suite"" rel=""nofollow noreferrer"">Mozilla</a> were released under the <a href=""https://www.mozilla.org/MPL/NPL/1.0/"" rel=""nofollow noreferrer""><em>Netscape Public License version 1.0</em></a> (see <a href=""https://en.wikipedia.org/wiki/Netscape_Public_License"" rel=""nofollow noreferrer"">its Wikipedia article</a>).</p>
  
  <p>This license is <a href=""https://www.gnu.org/licenses/license-list#NPL"" rel=""nofollow noreferrer"">approved by the FSF</a>, but it is <a href=""http://opensource.org/licenses/alphabetical"" rel=""nofollow noreferrer"">not</a> approved by the OSI.</p>
  
  <p>↳ So these early versions of Mozilla are Free Software, but not Open Source Software.</p>
  
  <h3>Example 2: <em>Open Source Software</em>, but not <em>Free Software</em></h3>
  
  <p><a href=""https://en.wikipedia.org/wiki/Active_Agenda"" rel=""nofollow noreferrer"">Active Agenda</a> is licensed under the <a href=""https://en.wikipedia.org/wiki/Reciprocal_Public_License"" rel=""nofollow noreferrer""><em>Reciprocal Public License</em></a>.</p>
  
  <p>This license is <a href=""http://opensource.org/licenses/RPL-1.5"" rel=""nofollow noreferrer"">approved by the OSI</a> (currently in version 1.5), but it is <a href=""https://www.gnu.org/licenses/license-list"" rel=""nofollow noreferrer"">not</a> approved by the FSF (it’s <a href=""https://www.gnu.org/licenses/license-list#RPL"" rel=""nofollow noreferrer"">listed as unfree</a>, linking to version 1.3).</p>
  
  <p>↳ So Active Agenda is Open Source Software, but not Free Software.</p>
</blockquote>

<p>There are various reasons why OSI could approve a license that FSF doesn’t, and vice versa.</p>

<p>The <a href=""https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses#Approvals"" rel=""nofollow noreferrer"">""Approvals"" table in the Wikipedia article 'Comparison of free and open-source software licenses'</a> lists cases where only one of FSF and OSI approved a license, and sometimes links to a source that explains why the other organization didn’t approve it.</p>

<p>For example, the <a href=""http://www.wtfpl.net/"" rel=""nofollow noreferrer""><em>Do What the Fuck You Want to Public License</em> (WTFPL)</a> is <a href=""https://www.gnu.org/licenses/license-list#WTFPL"" rel=""nofollow noreferrer"">approved by the FSF</a>, but not by the OSI. In <a href=""http://opensource.org/minutes20090304"" rel=""nofollow noreferrer"">OSI’s Board Meeting Minutes</a>, where this license was discussed, it says:</p>

<blockquote>
  <p>Mr. Nelson's report includes the following licenses to be discussed and approved/disapproved by the Board.</p>
  
  <ol>
  <li><p>[…]</p></li>
  <li><p>Title: WTFPL Submission: <a href=""http://crynwr.com/cgi-bin/ezmlm-cgi?17:mss:634:200902:aglgcgbhmfcheffmdgon"" rel=""nofollow noreferrer"">http://crynwr.com/cgi-bin/ezmlm-cgi?17:mss:634:200902:aglgcgbhmfcheffmdgon</a> License: <a href=""http://sam.zoy.org/wtfpl/"" rel=""nofollow noreferrer"">http://sam.zoy.org/wtfpl/</a> Comments: It's no different from dedication to the public domain. Author has submitted license approval request -- author is free to make public domain dedication. Although he agrees with the recommendation, Mr. Michlmayr notes that public domain doesn't exist in Europe. Recommend: Reject</p></li>
  </ol>
</blockquote>

<p>They decided to ""reject the WFTPL as redundant to the Fair License"".</p>
","535"
"How do open-source concepts apply to hardware?","305","","<p>Most of us know open-source and open-source concepts from software. Code is easily distributable. We have various licences that help us legalize and regulate how people use our code, and we have various services that help us reach out and show-off.</p>

<p>How (and how well) do these concepts apply to hardware? How do I open-source a hardware product?</p>
","<p>The Open Source Hardware Association has a list of <a href=""http://www.oshwa.org/definition/"" rel=""nofollow"">guidelines</a> that should be met to call a project <a href=""https://en.wikipedia.org/wiki/Open-source_hardware"" rel=""nofollow"">Open Source Hardware</a>.</p>

<p>Electronics is different from source code in that circuits themselves cannot be copyrighted (can anyone suggest references on this point?) while all material around them, such as design files, can be.  Things are further complicated because once you dip below the software side, it's unclear where the threshold should stop.  If I run free and open source software on a chip that is closed, does that count as open?  If I release the VHDL under a permissive license but the toolchain to program the chip is closed, can it really be considered open?</p>

<p>All these subtleties aside, the idea behind 'open sourcing hardware' is to provide all the necessary information available that would enable someone with similar means to reproduce your project.  This includes:</p>

<ul>
<li>Releasing the electronic design files, such as schematics and PCBs, under a free (as in libre) license (for example, CC-BY-SA, CC-BY or CC0).</li>
<li>Making the source code available (if any) under a free (as in libre) license (for example, some GPL compatible license).</li>
<li>Releasing the design files for other hardware under a free (as in libre) license (for example, CAD files for the enclosure under a CC-BY-SA, CC-BY or CC0 license).</li>
</ul>

<p>Note that any CC-NC (non-commercial) or CC-ND (no-derivatives) license does not qualify as 'open source hardware' in this context as it restricts the freedom to redistribute, sell and alter.</p>
","1081"
"Does a reseller of a GPL Licenced Software have to provide source?","304","","<p>I released a project under GPLv2 license on GitHub. But this project is not distributed as binary by itself. It is only available in a packaged offer along other components. As original licence owner I understand that I can also distribute my work using non Free Licenses.</p>

<p>The result is that the GPLed project is publicly available as Source Code on github but nowhere as an executable binary (even if I provide the scripts enabling to create a binary package with the source).</p>

<p>Some third party firm picked that project, made it a binary and embedded it with work of it's own. That firm added significant work of it's own and published it under GPLv3... but it is not distributing the source code of my project along their's. </p>

<p>They are practically hiding my work as if it didn't existed even if it is distributed as binary in their product. For all I know I can't even be sure my project wasn't modified and I can't see how their customer would know my project even exists inside their product.</p>

<p>Is this a violation of the GPL as I believe ? If it is, what is the best way to fix it ? I believe that either them publishing the source of the version of code they compiled or even redirecting customers to my project for that component could be OK. But as of their current behavior I'm feeling cheated.</p>

<p>Really I'm not even clear that publication of a source code without distribution of binaries is a transmission. </p>

<p>Does anyone already encountered a similar case ? It looks not that uncommon.</p>
","<p>Under the GPL, they are obliged to release the source of the binary or binaries they distribute.</p>

<p>As I understand from the comments, they are distributing a binary built from your source, but they are not making the source of the binary available. That is a GPL violation.</p>

<p>How to enforce they abide to the license terms is a separate question, one that has been dealt with in, for example, <a href=""https://opensource.stackexchange.com/questions/463/someone-is-violating-the-copyleft-license-they-are-refusing-to-give-me-the-sour"">Someone is violating the copyleft license, they are refusing to give me the source code even though they are required to!</a></p>

<p>The most practical advice is to contact the FSF, who have <a href=""http://www.gnu.org/licenses/gpl-violation.en.html"" rel=""nofollow noreferrer"">a guide for dealing with GPL violations</a>. </p>
","1948"
"How to mark a copied Apache v2 piece of code?","303","","<p>As stated in the tile, I want to know how should one mark code(functions or pieces of code smaller than 50% of the source file) copied from non copyleft sources (e.g Apache) ?</p>
","<p>I do it this way:</p>

<ol>
<li>I add a proper Apache notice and copyright at the top of the file</li>
<li>I document in comments where I took the code from and what I took</li>
<li>I document in comments any changes I did</li>
<li>I add a copy of the Apache license to go with the code</li>
<li>if originally present, I copy and carry with the code any NOTICE-like file that was with the original code</li>
</ol>
","5161"
"Is the code generated from a GPLv3 EBNF grammar a derivative work?","300","","<p>So, I'm really unclear on this situation and what it means. </p>

<p>I have an <a href=""https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"">EBNF</a>-based grammar file that we use for our project. 
This EBNF grammar describes rules for parsing/lexing a document (e.g. some source code for a Domain-Specific language). EBNF can be thought of as a generalisation of regular expressions.</p>

<p>Lexer/parser generators, such as ANTLR, YACC, and Bison, take this grammar file as input, and output source code which can perform the parsing of the language described by the grammar. We are using ANTLR, it is outputting a suite of C# classes.</p>

<p><strong>The particular grammar file we use as input is licensed under GPLv3 and we've made modifications to it.</strong> </p>

<p>Now, the resulting files <strong>do not require</strong> the grammar file after the classes are generated. Technically, there's no need to distribute the grammar file along with the project. We could keep that private and distribute everything without it and everything works just fine. </p>

<p>Up until now, we've been releasing our software under GPLv3 under the assumption that our project is a derivative of this grammar file, <em>but is it</em>? I'm wondering if we're really required to release our entire project under GPLv3. We'd much prefer to release under the MIT license. <em>Can we do that?</em> The grammar file isn't a library, but a tool that is used in conjunction with ANTLR to generate code. </p>

<p>Can we create a separate distribution/repository for the modified grammar file, then re-license our core project? (We'd still like to share our modifications to the grammar, we just don't want to continue licensing ours with a viral license).</p>
","<p>TL;DR: yes, the software you distribute which builds on grammar files under copyright for which you have a GPLv3 license must also be licensed under the GPLv3.</p>

<p>Your software is made up of several parts.</p>

<ul>
<li>The ANTLR runtime (BSD)</li>
<li>The original grammar files (GPLv3)</li>
<li>The rest of your software</li>
</ul>

<p>Your software contains in part a machine translation of the grammar files. The US copyright office has said </p>

<blockquote>
  <p>in order to be entitled to copyright registration, a work must be the
  product of human authorship. Works produced by mechanical processes or
  random selection without any contribution by a human author are not
  registrable.</p>
</blockquote>

<p>meaning that the generated parser is not a separate derivative work as far as copyright is concerned, it is the same work.</p>

<p>ANTLR also injects large parts of its own codebase in the generated parser, and links against the ANTLR runtime. This is not much of a problem as both are under the (permissive) 3 clause BSD license, which is easy to comply with in combined or derivative works.</p>

<p>What I'm not sure of, and what I believe could only be tested in court, is whether grammar files themselves would be eligible for copyright protection at all. What is copyrighted is the <em>expression</em> of the idea the grammar describes, but one could argue there is no originality in the expression of the grammar. This would probably also depend on the grammar file itself. It might make a lot of difference if it's just BNFR rules or if there are significant code snippets or other things that are definitely eligible for copyright in the grammar files.</p>

<p>What you could certainly do is make a clean room re-implementation of the grammar files, and you're not bound by the license of the grammar files.</p>
","1933"
"Is it possible to release a project under the GPL if it contains MIT-licensed libraries?","295","","<p>Specifically the Symfony PHP framework, which is MIT licensed. I've read that the two are compatible, but I want to make sure that a system I develop can be released complete under the GPL.</p>
","<p>Yes. It is possible to release a project that uses MIT licensed libraries under a GPL license. The MIT license is a <em>permissive</em> license which has <s>no</s> very few restrictions on code that links to its binaries. </p>

<p>Incidentally, you could also include actual MIT licensed <em>source code</em> in a GPL project because the MITL allows for sublicensing. It's very developer friendly that way. </p>

<p>However, this is a one way compatability. You cannot do this the other way around and include GPL code in an MIT project because the GPL requires code that links to it also be licensed GPL. Once you let any GPL code or libraries into your project, you must license the whole project under the GPL. </p>
","1981"
"Can I create a derivative of an old book?","294","","<p>Copyright for old works expire at some point. In most countries that happens 70 years after authors death. Can I take a book with expired copyright (say Dickens Oliver Twist), change it substantially (modern language, some different characters and so on) and release the result under an open license (let's say CC-BY-SA)? What are the restrictions in doing so? And if it is allowed, who do I attribute as author?</p>
","<blockquote>
  <p>Copyright for old works expire at some point. In most countries that  happens 70 years after authors death. Can I take a book with expired copyright (say Dickens Oliver Twist), [...] and release the result under an open license (let's say CC-BY-SA)?</p>
</blockquote>

<p>According to the Berne convention, works <em>may</em> pass into the public domain after life of author + 70 years (i.e. Berne signatories have to provide this <em>minimum</em> protection for literary and artistic works).  However, the Berne convention does not impose a <em>maximum</em> term of protection, and it also deals with two different sets of rights: Economic rights and  moral right.</p>

<p>Both economic rights and moral rights may be <em>inherited</em>, and it is the heir who will exercise these rights after the death of the author. Any rights that is inherited in this way may pass down to future generations as long as the rights persist. </p>

<p>When the <em>economic rights</em> have expired, you're allowed to make <em>verbatim reprints</em> without asking for permission, and you can distribute those as you like (for money or for free).  I can't see any reason why you should not be able to attach a license, but since the original is without license, anybody can ignore the license just by saying they copied the original (and not your reprint).</p>

<blockquote>
  <p>change it substantially (modern language, some different characters and so on)</p>
</blockquote>

<p>This is what is legally called ""an adaptation"", and permission to create adaptations may be blocked by what is called <em>moral rights</em> (droits d'auteur).</p>

<p>In most jurisdiction, and in particular those outside of northern Europe, moral rights is treated as equal to economic rights: I.e. they expire after the life of author + 70 years.</p>

<p>Certainly, in the USA, rather heavy handed adaptations of some classical works has been made, for instance Shakespeare's ""Romeo and Juliet"" (West Side Story), and ""The Taming of the Shrew"" (10 Things I Hate About You).</p>

<p>However, in <a href=""http://guide.lodzfilmcommission.pl/index.php?page=Chapter&amp;id=30"" rel=""nofollow noreferrer"">some jurisdiction</a>, such as Denmark, Sweden, Norway, Poland, Estonia, Latvia and Lithuania moral right <em>never</em> expire</p>

<blockquote>
  <p>What are the restrictions in doing so?</p>
</blockquote>

<p>First, if you're allowed make an adaptation, you hold the copyright of the adaptation. So you can impose any terms you like (including a CC BY-SA) on the adaptation.</p>

<p>However, if moral rights are intact, you may not be allowed to make an adaptation.  You're only allowed to adapt if the adaptation respects the ""integrity of the work and the author"".</p>

<p>For instance, a be-bop adaptation by Arne Domnérus of the Norwegian national anthem (""Ja, vi elsker"" - composed by Rikard Nordraak, 1842-1866) was in 1977 (111 years after the death of Nordraak) by a Noregian court declared to violate Nordraak's moral rights and had to be pulled from the Norwegian market.</p>

<p><img src=""https://i.stack.imgur.com/ks0IU.jpg"" alt=""Cover image of &quot;Ja, vi elsker&quot;""></p>

<p>It should be said that this is an extremely rare example.</p>

<blockquote>
  <p>And if it is allowed, who do I attribute as author?</p>
</blockquote>

<p>Yes, if it is an <em>adaptation</em>, then moral rights require you to <em>credit</em> the original author (e.g. ""adapted from 'Oliver Twist' by Charles Dickens""). However, if it is an adaptation, <em>you</em>, not Dickens is the author of the adaptation, so you list yourself as the author).  Moral rights also means that you're not allowed to state that Mr. Dickens is in any way <em>responsible</em> for the adaptation.</p>

<p>However, the line between what is considered an adaptation, and what is a <em>new</em> work that has some plot lines in common with some earlier work is blurred.  ""West Side Story"" is obviously an adaptation of ""Romeo and Juliet"" (and Shakespeare adapted it from the 1562 poem ""The Tragical History of Romeus and Juliet"" by Arthur Brooke). However, ""Wuthering Heights"" and countless other tragic love stories where societal norms prevents a happy ending, is not.</p>
","1084"
"Using GPL library with MIT licensed code","294","","<p>Let's say I created a project containing hundreds of source files under the MIT License (most of which I wrote myself for this project). Now I want to add a GPL library to the project, that will be called from one of the source files (""File A""). A few other files call functions in ""File A"". The program is otherwise pretty indepedent of the library, meaning its core functions don't rely on it at all.</p>

<p>Since the library will be neatly packed into the executable, I'm pretty sure I have to make the whole project available under the terms of the GPL, which is fine because the MIT License is compatible with the GPL. So far so good.</p>

<p>What I don't quite understand is how it affects individual source files vs. the project as a whole. The <a href=""https://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL"" rel=""nofollow noreferrer"">GPL FAQ</a> says about including a GPL library:</p>

<blockquote>
  <p>The software modules that link with the library may be under various GPL compatible licenses, but the work as a whole must be licensed under the GPL.</p>
</blockquote>

<ul>
<li>If I make the project available under GPL terms, then of course all parts of it are available under GPL terms (which they can be if they are under compatible licenses). But does that mean that all individual files ""become"" GPL (as in, add a GPL license header)? Is there a difference between individual code being licensed under GPL and the whole project being made available under GPL?</li>
<li>Do I have to put the file that directly communicates with the GPL library under GPL? And then put all files that are somehow connected to that one under GPL as well? Or can I keep them as MIT (as they've always been) and just make the whole project available under GPL?</li>
</ul>

<p>To keep it simple, I would like to keep all my source code under MIT License and then put the whole project under GPL in a centralized notice. I'm just not sure if I'm approaching this correctly.</p>
","<p>Firstly, IANAL/IANYL, and the question of what makes a derivative work in law is still very much an open one.</p>

<p>That said, you are right that the FSF <a href=""https://www.gnu.org/licenses/gpl-faq.html#GPLModuleLicense"" rel=""nofollow noreferrer"">explicitly permits</a> the use of more relaxed (compatible) licences on your contributions to a GPLed codebase.  You are also correct that the GPL requires that the derivative codebase be covered by the GPL in its entirety (eg, <a href=""https://www.gnu.org/licenses/gpl.html#section5"" rel=""nofollow noreferrer"">s5c GNU GPL v3</a>).</p>

<p>I struggled with how this might work for a while, until I gave up and asked a barrister with a speciality in intellectual property law.  His analysis, which is specific to England and Wales but might well find favour in comparable jurisdictions, was based on land law.  In land law, you may purchase a number of adjacent lots, each with its own <a href=""https://en.wikipedia.org/wiki/Restrictive_covenant"" rel=""nofollow noreferrer"">restrictive covenant</a>, and group them into a single lot for sale, to which you apply a further restrictive covenant.  Any given piece of land therein is now covered by the restrictions of <strong>both</strong> the covenant that applied to it individually <strong>and</strong> the covenant that you have applied to the whole package, so the future uses of any given piece of land therein must abide by <strong>all</strong> the applicable restrictions thereon.  If a later purchaser were to split his purchase back into the original smaller lots, that would not magically remove the restrictions you had applied.</p>

<p>Similarly, when you convey the resulting codebase forth, later users of any part of it must abide by the conditions of both the GPL and MIT licences which covered it as they received it.  But you may still continue to make your contributions available <em>directly</em> to them, and that conveyance may continue to be under MIT only, even though you were required to convey your modifications as part of a work under a blanket GPL.  Anyone who liked your contributions and wished to use them under MIT-only could come to you for them.</p>

<p>Assuming that at any given time more than one licence may apply to a piece of code within a larger codebase, and that the restrictions of all relevant licences apply thereto, my feeling (and this is <em>not</em> qualified legal opinion) is that you should <em>add</em> a GPL declaration to each file so included, without disturbing the MIT declaration that was there.  The presence of the former will warn later users that they can't strip this code out of the codebase and use it under MIT-only, but let them know that it is likely available from its original authors under MIT-only.</p>
","6063"
"Is Open Source Software a subset of free software?","289","","<p>Is Open Source Software a subset of free software?</p>

<p>I was recently asked this and realized I was unsure the exact answer. I understand that free software is not a type of open source software, but I am unsure if the reverse is true or not.</p>
","<p>From <a href=""http://opensource.org/faq#free-software"">Open Source Initiatives FAQ</a>:</p>

<blockquote>
  <p>""Free software"" and ""open source software"" are two terms for the same thing: software released under licenses that guarantee a certain, specific set of freedoms.</p>
</blockquote>

<p>Open Source arose from people who supported the FSF, but later branched out over the decision of philosophy and marketing. There are differences, of course, such as the FSF has a 4-point definition for software freedom, while the OSI has 10. The FSF is sort of like a parent to the OSI.</p>

<p>Generally, we refer to software that is with Free Software and Open Source to be FOSS (Free and Open Source Software), or FLOSS (Free/Libre/Open Source Software)</p>

<p>Pandya raised <a href=""https://www.gnu.org/philosophy/open-source-misses-the-point.en.html"">this</a> in chat: Looks like something where the FSF doesn't agree with Open Source.</p>
","314"
"How can a software company cope with more and more customers asking for open source software","288","","<p>My company has invested a lot in R&amp;D over the past 3 years.
It led to the development of a system we can use as a base to build custom software for our customers.</p>

<p>More and more customers want their produced software to be open source.</p>

<p>While we use a lot of open source components ourselves, we are a bit reluctant to release the result of 3 years of investment.
Also, we currently have no other source of income and this system became our main product.</p>

<p>What do you think we should do?
How can my company switch to developing open source software without too much damage?</p>
","<p>Probably not a Politically Correct answer for this site but ...</p>

<p>JUST SAY NO</p>

<p>Of course that isn't going to be enough for your customers, you need to present a good business case for <em>them</em> to continue using you even if it's not open source.</p>

<p>Consider why the customers might be asking:</p>

<ul>
<li>They are afraid you will go out of business, and they will be left with a product which is no longer  supported.</li>
<li>They want to use someone cheaper to do future work on the product.</li>
<li>They want to be able to customize the product for future variants - beyond the one they are purchasing.</li>
</ul>

<p>You need to have good answers to all of these.</p>

<ul>
<li>For continued support, place the source code in Escrow with a clause to release (under suitable license) to registered clients should your company fail.</li>
<li>For them wanting to use someone cheaper: you are not in the business of enabling your competition. You need to find a way to make this palatable to the customer, but you have a right to protect your own future.</li>
<li>For them wanting to do their own customization in future ... sell them a (more expensive!) source license - again suitably licensed.</li>
</ul>

<p>Nor are you solely selling a service, as Mnementh suggests. Your 'product' is a combination of existing proprietary technology/IP with services to customize it. You need to protect that.</p>

<p>Now, you may lose some customers who are adamant on a FOSS solution. But others will see the advantages. If your product is better than the 'free' alternatives, clients will come, and clients will pay.</p>

<p>However, that's not to say you can't identify portions of your framework which are generic, and don't contain any particularly valuable IP, and open source those. Then you get the best of both worlds, as you can (hopefully) leverage the community to reduce your own maintenance costs while giving something back.</p>
","2324"
"Can I dynamically call a LGPL/GPL software in my closed-source application?","287","","<p><em>This question was originally posted by <a href=""https://stackoverflow.com/users/90691/marcgg"">marcgg</a> at <a href=""https://stackoverflow.com/q/1394623/1982136"">StackOverflow</a> (second link might be visible to 10k+ only), but was removed there due to being off-topic. It has been preserved here in light of <a href=""https://meta.stackoverflow.com/questions/327056/can-we-rescue-the-information-in-this-question-somehow/"">this Meta StackOverflow request</a>.</em> </p>

<hr>

<p>I want to use a tool (<a href=""http://ffmpeg.org/legal.html"" rel=""nofollow noreferrer"">ffmpeg</a>) that is under <a href=""http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"" rel=""nofollow noreferrer"">GNU Lesser General Public License (LGPL) version 2.1</a> and <a href=""http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"" rel=""nofollow noreferrer"">GNU General Public License (GPL) version 2</a> for some components.</p>

<p>To do so, I only call it in my software as such:</p>

<pre><code>System.Diagnostics.Process p = new System.Diagnostics.Process();
p.StartInfo = new System.Diagnostics.ProcessStartInfo(""lgplSoftware.exe"", myParams);
p.Start();
</code></pre>

<p>I do not change it, I only use a built version of the software for windows.</p>

<hr>

<p><a href=""http://en.wikipedia.org/wiki/GNU_General_Public_License"" rel=""nofollow noreferrer"">Wikipedia</a> says:</p>

<blockquote>
  <p>A key dispute related to the GPL is whether or not non-GPL software can be dynamically linked to GPL libraries. The GPL is clear in requiring that all derivative works of code under the GPL must themselves be under the GPL. While it is understood that static linking produces derivative works, it is not clear whether an executable that dynamically links to a GPL code should be considered a derivative work (see Weak Copyleft). The free/open-source software community is split on this issue. The FSF asserts that such an executable is indeed a derivative work if the executable and GPL code ""make function calls to each other and share data structures,"" with certain others agreeing (e.g. Jerry Epplin), while some (e.g. Linus Torvalds) agree that dynamic linking can create derived works but disagree over the circumstances.</p>
</blockquote>

<hr>

<p>I am really confused by all this legal things. I would have made my project LGPL as well and released the source, but this is not up to me.</p>

<p>So the question is: can I use it like I'm doing right now or will I be executed by an army of lawyers?</p>
","<p><em>This answer was originally posted by <a href=""https://stackoverflow.com/users/25507/josh-kelley"">Josh Kelley</a> at <a href=""https://stackoverflow.com/a/1394867/1982136"">StackOverflow</a> (second link might be visible to 10k+ only), but was removed there due to being off-topic. It has been preserved here in light of <a href=""https://meta.stackoverflow.com/questions/327056/can-we-rescue-the-information-in-this-question-somehow/"">this Meta StackOverflow request</a>.</em> </p>

<hr>

<p><a href=""http://en.wikipedia.org/wiki/Linker"" rel=""nofollow noreferrer"">Linking</a> has a specific meaning in computer programming. You're not linking GPL'ed or LGPL'ed code at all, you're only spawning a GPL'ed or LGPL'ed binary, and the GPL and LGPL permit this. Your users are free to use that binary themselves for its authors' intended purposes and are free to download and compile the source themselves, so all of their freedoms are preserved, and you're not in violation of the GPL or LGPL. (This is what the <a href=""http://www.gnu.org/licenses/gpl-faq.html#GPLInProprietarySystem"" rel=""nofollow noreferrer"">GPL FAQ</a> is talking about by ""communicat[ing] at arms length."") This doesn't even violate the spirit of the LGPL and GPL; they tolerate the existence of proprietary software and assume that at some point proprietary programs will spawn free programs and vice versa. (Otherwise, we couldn't run any GPL'ed software under Windows.)</p>

<p>The GPL does require that proprietary and GPL'ed programs ""are not combined in a way that would make them effectively a single program."" If your program is completely dependent upon GPL'ed executables, such that it wouldn't be usable without them even though it is a standalone binary, then that might place you on shakier ground. (And it's probably time to consult your lawyer to find out for sure.)</p>

<p>Also, although you didn't specifically ask about this, keep in mind that distributing GPL'ed or LGPL'ed software with your software means that you're required to include a copy of the license with your installer and to also distribute the source code. For example, if you package up your application in an installer and include copies of GPL'ed or LGPL'ed executables in the installer, then you're distributing LGPL'ed or GPL'ed code and must make copies of the source code available (either online, by mail-in offer, or by CD, depending on how you distribute your app). Including a link to the upstream project is not sufficient (at least for version 2 of the GPL). Read the GPL and LGPL for exact details.</p>
","4107"
"Standard for ""CONTRIBUTORS""-style file (format, name, etc?)","287","","<p>In trying to deal with a codebase that was originally proprietary and then open sourced, new contributors are coming along.  Each file has names on it (though usually the main author's).</p>

<p>At this point, the codebase is drifting considerably.  Maintaining a list of names in each file seems to clutter it, and introduces an unnecessary awkwardness of ""when a change is significant enough to be on the list"".  There's also an issue of accuracy, because the name is generally not the person to try and contact about issues.</p>

<p>I was thinking that it would be best to just strike the names entirely, rely on the git blame log, and switch to a CONTRIBUTORS file.  <em>(This is along with a general push to take stuff repeated in each file and move it out to coding guidelines documents, etc.)</em></p>

<p>This project is on GitHub and is:</p>

<ul>
<li>mostly C code</li>
<li>has a <code>README.md</code> as its entry point for describing the project (80-column limited)</li>
<li>has a <code>LICENSE</code> in text file format (Apache2)</li>
</ul>

<p>So what sort of model might one use for a contributors file?  An all-caps CONTRIBUTORS seems like a long name.  Wondering what people call it and what would go in it.</p>

<hr>

<p>It hit me right after asking that CREDITS.md would be a good short name <em>(somewhat obvious, and I've even used it in the past I believe)</em>.  But I wasn't acknowledging individual contributors to the code when I did this before, I was acknowledging the sources drawn from (libraries, tools, etc.) to build it.</p>

<p>So it still strikes me that these might be different files.  But maybe they could both go in one?  Then CONTRIBUTORS would be a section heading in the CREDITS.md file.</p>
","<p>Since you are using <code>.md</code> file, I take it that people won't be looking at the raw stuff with all the stars and what not. People will look mostly at the way that the file is ""marked down"". This means that you can use headers, and emphasis just like you note.</p>

<p>There isn't really a ""standard"" of doing this: Most projects create their own policies and standards to deal with varying situations in all aspects of project management, including contributions.</p>

<p>If you do create a <code>Credits.md</code> file, it would make perfect sense to include your contributors, as well as your sources. The markdown format will allow easier readability, and hence organizations between sources and contributors.</p>

<p>Separate files don't tend to be an issue either: If you feel that one file becomes too large and thus virtually overshadows other critical sections of files, then it becomes easier also to split them up.</p>

<p>If you have an avid list of contributors, and you are recording each contribution they make to various files, then it would make perfect sense to keep them in separate files, just like I mentioned above.</p>
","1560"
"Can I use the logo of the R statistical package on my webpage?","286","","<p>I am a statistical programmer. As a SAS certified programmer, I can put the SAS logo on my website. I would like to also display the R logo, because many clients want programming in R. Does anyone know where I can find licensing terms and conditions to use the R logo?</p>

<p>The R website is here: <a href=""http://cran.stat.ucla.edu/"">http://cran.stat.ucla.edu/</a></p>

<p>I have checked FAQs, StackOverflow etc. The R mailing lists are dedicated to programming questions and bug reports, not licensing questions.</p>
","<p>From looking at the source code, most of R itself (vs the various packages) is licensed under one or other GPL variant. Certainly the logo file does not seem to have a specific license associated with it.</p>

<p>This question has actually been addressed in one of the <a href=""https://stat.ethz.ch/pipermail/r-help/2008-January/150728.html"" rel=""nofollow"">R mail lists</a></p>

<blockquote>
  <p>Jan Wijffels wrote:</p>
  
  <blockquote>
    <p>Hi,</p>
    
    <p>I was wondering if there are any guidelines for the use of the R logo on websites which are for commercial use? Similar to
    <a href=""http://www.python.org/community/logos/"" rel=""nofollow"">http://www.python.org/community/logos/</a> for Python and to
    <a href=""http://www.postgresql.org/community/propaganda"" rel=""nofollow"">http://www.postgresql.org/community/propaganda</a> for PostgreSQL perhaps?</p>
    
    <p>It has been discussed internally, but as far as I remember no official document ever transpired. The general sentiment (still
    according to my memory) was that usage is OK as long as it doesn't
    imply endorsement by R Core or the R Foundation, or any other
    commingling with commercial products.</p>
  </blockquote>
  
  <p>R and the ""chocolate pretzel"" logo are not registered as trademarks,
  but even if they were, then ""nominative usage"" (as described in the
  PSF Trademark Use Policy) should not be problematic.  In cases of
  doubt, ask!</p>
  
  <p>--     O__  ---- Peter Dalgaard             Øster Farimagsgade 5, Entr.B   c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph.
  K  (<em>) (</em>) -- University of Copenhagen   Denmark          Ph:  (+45)
  35327918 ~~~~~~~~~~ - (p.dalgaard at biostat.ku.dk)<br>
  FAX: (+45) 35327907</p>
</blockquote>

<p>The implication is that you are OK as long as you  are not implying any certification or endorsement by the project. However, a quick emal to one of the maintainers can probably clear it up for you.</p>

<p>UPDATE:</p>

<p>Some googling found this README at <a href=""https://developer.r-project.org/Logo/"" rel=""nofollow"">this site</a>:</p>

<blockquote>
  <p>This directory contains the R Logo in several resolutions. </p>
  
  <p>Rlogo-x.png has been used since approx 2000 for most purposes.  Number
  5 is currently used for web pages. The PNG versions have a transparent
  background, the JPEG has a white background. These versions can be
  distributed under the GPL.</p>
  
  <p>Rlogo.svg has been created by Tobias Wolf  in
  October 2010, Rlogo.pdf is just a PDF created off the SVG using
  inkscape. Both can be distributed under the Creative Commons
  Attribution ShareAlike license, see <a href=""http://creativecommons.org/"" rel=""nofollow"">http://creativecommons.org/</a>.</p>
</blockquote>

<p>Now the question you need to think  about is whether you copy the logo file to your server (and what effect that has on the entire web site) or link to it</p>
","2081"
"Do non-discrimination clauses only count for my licensees, or also for me as a copyright holder?","285","","<p>The open source definition has a non-discrimination clause. From the <a href=""http://opensource.org/osd-annotated"" rel=""nofollow"" title=""The Open Source Definition &#40;Annotated&#41;"">annotated Open Source Definition</a>:</p>

<blockquote>
  <h3>5. No Discrimination Against Persons or Groups</h3>
  
  <p>The license must not discriminate against any person or group of persons.</p>
  
  <p><strong><em>Rationale:</strong> In order to get the maximum benefit from the process, the maximum diversity of persons and groups should be equally eligible to contribute to open sources. Therefore we forbid any open-source license from locking anybody out of the process.</em></p>
  
  <p><em>Some countries, including the United States, have export restrictions for certain types of software. An OSD-conformant license may warn licensees of applicable restrictions and remind them that they are obliged to obey the law; however, it may not incorporate such restrictions itself.</em></p>
</blockquote>

<p>This clearly means that for a license to be considered open source, the license must not discriminate against any person or group. The license may not, for example, only allow non-profits to use the work (because non-profits are good), or disallow clowns to use the work (because clowns are creepy).</p>

<p>I heard people say that this also means I may not selectively license a work that I hold the copyright of under a free license. Is that true?</p>

<p>For example, can I grant <a href=""https://en.wikipedia.org/wiki/501(c)_organization"" rel=""nofollow"" title=""Wikipedia: 501(c) organization"">501(c)</a> organizations an GPL-3 license to my software, but nobody else?</p>

<p>It is clear that according to the terms, they are allowed to re-distribute the software to anyone else, so the effectiveness of this might be low, but my question only pertains to whether or not I have the right to deny an open source license to some people/groups.</p>
","<p><a href=""https://opensource.stackexchange.com/a/912/458"">As I've said before</a>, software doesn't possess any licence <em>inherently</em> - it is <em>distributed</em> (or, <a href=""https://opensource.stackexchange.com/questions/958/gpl-v3-convey-vs-gpl-v2-distribute"">as the GPLv3 would have it</a>, <em>conveyed</em>) under a licence.</p>

<p>You, as the copyright holder, may distribute your software under any kind of licence you want, to anyone you choose.  You may choose to distribute it only to 501(c) organisations, and only under GPLv3, if you want to.  As you correctly note, any such recipient will have the right to redistribute it to anyone they like - the GPLv3 gives them that right.  But the licence under which you distribute it to those parties doesn't force <em>you</em> to distribute it to anyone else, or indeed to anyone at all, because you aren't bound by the licence.</p>
","1380"
"GPL-Licensed LaTeX template - implications for resulting work?","284","","<p>I'm currently writing my master thesis, and the <a href=""http://miede.de/#classicthesis""><code>classicthesis</code> template</a> we're supposed to use is licensed GPLv2+.</p>

<p>As I understand the GPL, this makes my written thesis a derivative work, and would imply that the thesis (both the LaTeX source and the resulting PDF) is also licensed GPLv2/3. As the finished thesis will probably be uploaded to some public repository, it will also be ""distributed"" in the sense of the GPL.</p>

<p>Am I understanding this specific case correctly, i.e. do I have to put a notice into my thesis that it is GPLv2/3-licensed and include the LaTeX sources in the distribution / make them available as per the GPL? Or does this not count as a derivative work (and why)?</p>
","<p>TL;DR: GPL is viral. Any derived work has to be licensed as GPL. GPL forces to make the source available. Thus, the tex source of the generated PDFs have to be made available, too.</p>

<p>This following argumentation is based on the circumstance, that <code>classicthesis.sty</code> is offered and <a href=""https://bitbucket.org/amiede/classicthesis/src/241fc1002e6466b4f7a51c1ae128be8b0e5de039/Examples/classicthesis-article.tex?at=master&amp;fileviewer=file-view-default"" rel=""nofollow noreferrer"">included via</a> <code>\usepackage[nochapters]{../classicthesis}</code>. If it is distributed as <a href=""https://bitbucket.org/amiede/classicthesis/src/241fc1002e6466b4f7a51c1ae128be8b0e5de039/ClassicThesis.tex?fileviewer=file-view-default"" rel=""nofollow noreferrer"">.tex file</a> only, the discussion is similar. See ""What if the template is distributed as tex file?"" below.</p>

<p>Let's go step by step.  </p>

<h2>Is classicthesis.sty a library?</h2>

<p>The <code>classicthesis.sty</code> can be considered as library: It is used in the <code>tex</code> file and cannot be easily replaced by something else. Thus, we do not have the loose coupling as in the case with binary drives and the Linux kernel. See for instance <a href=""https://en.wikipedia.org/wiki/Binary_blob"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Binary_blob</a> for a discussion on that.</p>

<h2>Does that mean, the whole tex source where classicthesis.sty is used is covered by the GPL?</h2>

<p>Then let's look at the FAQ of the GPL. <a href=""https://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL"" rel=""nofollow noreferrer"">If a library is released under the GPL (not the LGPL), does that mean that any software which uses it has to be under the GPL or a GPL-compatible license?</a>. The answer clearly states that if the library is in GPL, the whole source (including the text written by the author) is GPL.</p>

<p><strong>Thus, the whole tex source is also covered by the GPL.</strong></p>

<h2>Do I need to ship the tex source with my PDF?</h2>

<p>Now, let's look at the compiled pdf. The compiled <code>pdf</code> is the result of the compilation of the <code>tex</code>. Thus, it is comparable to the binary resulting from a compilation using a ""typical"" C compiler. The FAQ is <a href=""https://www.gnu.org/licenses/gpl-faq.html#ModifiedJustBinary"" rel=""nofollow noreferrer"">Can I release a modified version of a GPL-covered program in binary form only?</a>. The answer states that the source code the PDF is resulting from also has to be made available.</p>

<p><strong>Thus, if you provide anybody the PDF, you also have to provide the tex source.</strong></p>

<p>On the one hand, this might be a good thing to achieve open access to the edge: All publicly available PDFs are also having their tex source attached. This means that everyone can learn about tex practices etc. On the other hand, if, for instance, one wants to publish a book, one also has to provide the tex source of the book.</p>

<h2>Is the PDF really a product of the tex source?</h2>

<p>It is questioned whether the PDF is a compiled output or not. I assume that the tool <code>pdflatex</code> gets <code>tex</code> and <code>sty</code> files as input and produces <code>pdf</code> as output. This is backed by the <a href=""https://en.wikibooks.org/wiki/LaTeX/Basics#Compilation"" rel=""nofollow noreferrer"">LaTeX compilation section at wikibooks</a>. In general, a <a href=""https://en.wikipedia.org/wiki/Compiler"" rel=""nofollow noreferrer"">compiler</a> transforms something from a source to another language. That language is often a binary, but it doesn't need to be. Consider <a href=""https://en.wikipedia.org/wiki/XSLT"" rel=""nofollow noreferrer"">XSLT</a>, which may transform to XML and other documents.</p>

<p>Note that <code>pdflatex</code> is not an <a href=""https://en.wikipedia.org/wiki/Interpreter_(computing)"" rel=""nofollow noreferrer"">interpreter</a>, because pdflatex does not run during viewing the PDF.</p>

<p>GPLv2 states: <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"" rel=""nofollow noreferrer"">The source code for a work means the preferred form of the work for making modifications to it.</a>. Thus, even if one regards the PDF as some sort of view, it is NOT the preferred form for modifying it. As a consequence, the <code>tex</code> source has to be distributed.</p>

<h2>Who can enforce this?</h2>

<p>In practice, only the authors of classicthesis can enforce this. Thus, if one author contributed to the classic thesis style demands the source for your thesis PDF, you have to provide him the source. IMHO, no one will do that, but if, one has to be prepared for such a case. - This also means that not a third party can say: Hey, person X has licensed his work under GPL and you violate it. Correct it! This can only be done by X. - For a long discussion on this, I would recommend the German book ""Open Source Software Rechtliche Rahmenbedingungen der Freien Software"" <a href=""http://www.beck-shop.de/Jaeger-Metzger-Open-Source-Software/productview.aspx?product=14503508"" rel=""nofollow noreferrer"">http://www.beck-shop.de/Jaeger-Metzger-Open-Source-Software/productview.aspx?product=14503508</a></p>

<h2>Does it help to have example/demo files published using another license?</h2>

<p>Note that it does not help to license the example/demo files under a different license. The GPL ""infects"" these files too and thus the GPL is <em>additionally</em> in place - with all consequences.</p>

<h2>Really? Even if the GPL applies to one file used and not to the main file?</h2>

<p>Yes. Even if the <code>sty</code> file is not the <code>tex</code> file you are compiling. As tried to express above: GPL is viral. Thus, the license of the <code>sty</code> file also applies to the <code>tex</code> file even if you did not explicitly declare the <code>tex</code> file as GPL. You gave the agreement to the (additional) GPL license when you are using the <code>sty</code> file. Otherwise, you would not be allowed to use the <code>sty</code> file at all. By using the file, you agree to GPL and all consequences (see also <a href=""http://www.beck-shop.de/Jaeger-Metzger-Open-Source-Software/productview.aspx?product=14503508"" rel=""nofollow noreferrer"">the open source software book</a>).</p>

<h2>Really? GPL really applies to all derived works?</h2>

<p>Yes, even if the <a href=""https://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL"" rel=""nofollow noreferrer"">above cited FAQ</a> doesn't convince you, read on about <a href=""https://en.wikipedia.org/wiki/Copyleft"" rel=""nofollow noreferrer"">strong copyleft</a> and <a href=""https://opensource.stackexchange.com/a/1179/5671"">the difference to weak copyleft</a>.</p>

<p><strong><a href=""https://en.wikipedia.org/wiki/Viral_license"" rel=""nofollow noreferrer"">GPL is really viral</a></strong>.</p>

<h2>What if the template is distributed as tex file?</h2>

<p>In case the template consists for one or more <code>tex</code> files, the GPL applies to each <code>tex</code> file. If one modifies the <code>tex</code> file, the modification is also GPL licensed. If one adds an additional <code>document.tex</code> file, which references the template, that <code>tex</code> is also subject of GPL. Reason: <code>document.tex</code> is a derived work and cannot stand without the original template.</p>

<h2>Really? Does that apply to any template?</h2>

<p>Depends on the license of the template. If there is NO license given, NO modifications may be made! See <a href=""http://choosealicense.com/no-license/"" rel=""nofollow noreferrer"">http://choosealicense.com/no-license/</a>.</p>

<p>But, if there is a license, you have to follow it. For instance, if the template is licensed under LPPL, only the changes to the template itself have to be published. The LPPL is not a viral license.</p>

<p>It also depends on the interpretation of the term ""derived work"". I assume that any creator of a template assumes a document based on the template not being a derived work. However, another template based on the original template is really a derived work. With a strict interpretation, however, any change of the template is a derived work. Even when adding content only. For instance, this is the implication of the viral property of the GPL. All derived works have to be licensed under GPL.</p>

<h2>Further thoughts</h2>

<h3>May tex code be licensed under GPL after all?</h3>

<p>Yes. See FAQ <a href=""https://www.gnu.org/licenses/gpl-faq.html#GPLOtherThanSoftware"" rel=""nofollow noreferrer"">Can I use the GPL for something other than software?</a>. <code>tex</code> can be interpreted as source code and PDF as the resulting object code. ""Object code"" is defined as <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">any non-source form of a work</a>.</p>

<h3>What does the Free Software Foundation say?</h3>

<p>""<a href=""https://www.gnu.org/licenses/gpl-faq.html#WMS"" rel=""nofollow noreferrer"">We recommend that you license your templates under simple permissive terms.</a>"".</p>

<h3>Are there similar issues with fonts?</h3>

<p>Yes. It is considered as complex issue. See <a href=""https://www.gnu.org/licenses/gpl-faq.html#FontException"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.html#FontException</a> for more information.</p>

<h3>Quick overview on the GPL</h3>

<p>For a quick illustration of the GPL see <a href=""https://tldrlegal.com/license/gnu-general-public-license-v2"" rel=""nofollow noreferrer"">https://tldrlegal.com/license/gnu-general-public-license-v2</a></p>

<h3>Other license options</h3>

<p>So, I agree with others that say that the <a href=""https://tldrlegal.com/license/latex-project-public-license-v1.3c-(lppl-1.3c)"" rel=""nofollow noreferrer"">LPPL</a> is more suitable for style files. See also <a href=""https://tex.stackexchange.com/a/82719/9075"">https://tex.stackexchange.com/a/82719/9075</a>.</p>
","4206"
"Can derivatives of CC BY-SA works be licensed under CC BY-NC-SA?","281","","<p>Does the CC BY-SA license prevent additional restrictions being placed on derivatives? </p>

<p>I'm wondering, if I release a work under BY-SA, can someone else create a derivative and license it under BY-NC-SA?</p>
","<p>No, it’s not allowed.</p>

<p>It says on the <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""noreferrer"" title=""CC BY-SA 4.0"">license summary page</a>:</p>

<blockquote>
  <p><strong>No additional restrictions</strong> — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p>
</blockquote>

<p>And in the <a href=""https://creativecommons.org/licenses/by-sa/4.0/legalcode"" rel=""noreferrer"">license</a>:</p>

<ul>
<li><p>For Licensed Material (i.e., the unmodified work):</p>

<blockquote>
  <p><strong>No downstream restrictions.</strong> You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.</p>
</blockquote></li>
<li><p>For Adapted Material (i.e., a modified work):</p>

<blockquote>
  <p>You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.</p>
</blockquote></li>
</ul>

<hr>

<p>Creative Commons lists <a href=""https://creativecommons.org/share-your-work/licensing-considerations/compatible-licenses/"" rel=""noreferrer"">compatible licenses</a> for CC BY-SA and CC BY-NC-SA. If it were allowed, it would be listed there.</p>
","6434"
"Making a commercial plugin for a GPLv3 software without releasing the plugin's code","281","","<p>I have been developing an open-source software under the GNU GPLv3 license for 3 years (as part of my PhD thesis) and I am releasing the source code to the public. Now I am planning to write a plug-in for that software and distribute the plugin commercially without disclosing the plugin's source code. I was wondering if this is allowed?</p>

<p>Note: I know that GPLv3 is a copyleft license and any modifications to the code must also be made available under the GPL. But here, I am not touching the source code and I am making a plugin that connects to the GPLv3 code.</p>
","<p>From the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLAndPlugins"">GNU GPL FAQ</a>:</p>

<blockquote>
  <p><strong>If I write a plug-in to use with a GPL-covered program, what requirements does that impose on the licenses I can use for distributing my plug-in?</strong></p>
  
  <p>It depends on how the program invokes its plug-ins. If the program uses fork and exec to invoke plug-ins, then the plug-ins are separate programs, so the license for the main program makes no requirements for them.</p>
  
  <p>If the program dynamically links plug-ins, and they make function calls to each other and share data structures, we believe they form a single program, which must be treated as an extension of both the main program and the plug-ins. This means you must license the plug-in under the GPL or a GPL-compatible free software license and distribute it with source code in a GPL-compliant way.</p>
  
  <p>If the program dynamically links plug-ins, but the communication between them is limited to invoking the ‘main’ function of the plug-in with some options and waiting for it to return, that is a borderline case.</p>
</blockquote>

<p>So it really depends on what ""plugin"" means in your case.</p>

<p>Now, you say that you are the author of the original software. As this was part of your PhD work, you may need to clarify who is the copyright owner for the software you wrote (often, the university is the copyright owner). If you are considered to be the copyright owner, then the GPL license doesn't restrict you in any way (supposing you are not depending on any GPL'd library).</p>

<p>Your question also seems to indicate that you are not completely done with your PhD. If you are still in university, you might have the power to change the license of your software (you need to check this with your supervisor / university staff). You could then just add a specific exemption from the GPL for linking with plugins.</p>
","4434"
"Is there any recourse when an ""Open Source"" project has a closed-source core?","280","","<p>I have come across a Java project licensed under Apache 2.0, but there's a fair bit of behavior locked away in an <code>internal</code> package that isn't checked into the project's repository (though the compiled files are in the release binaries).</p>

<p>Without these files the project cannot even compile, and even if the compilation issues were refactored out central functionality would be missing.</p>

<ol>
<li>Is this even really Open Source software?</li>
<li>By bundling in a closed-source core is it violating its own license?</li>
<li>If so, is there any recourse? I'm not trying to sue anyone, I just don't think it's fair to act like your project is open source, and release critically incomplete source code.</li>
</ol>
","<blockquote>
  <ol>
  <li>Is this even really Open Source software?</li>
  </ol>
</blockquote>

<p>The parts that have source code available and are licensed under an open source license are open source software, according to the OSI. The parts that do not have source code available or are not licensed under an open source license are not open source software. Since the software includes some components that fail to satisfy the definition of open source software, it is correct to say that the entire project, considered in totality, is not completely open source software. Of course, the components that do satisfy the definition <em>are</em> open-source, though they have the weakness (from a software-freedom perspective) of being subject to a problem similar to <a href=""http://www.gnu.org/philosophy/java-trap.en.html"">the Java Trap</a> (i.e., free code designed to run in a non-free environment).</p>

<blockquote>
  <ol start=""2"">
  <li>By bundling in a closed-source core is it violating its own license?</li>
  </ol>
</blockquote>

<p>Absolutely not. There are several points the would independently be sufficient to show that there is no license violation:</p>

<ul>
<li><p>If the same copyright holder owns both the core <code>internal</code> closed-source package and the supporting open-source components, there cannot be any violation. The copyright holder doesn't need a license to do anything with their own code; they may <em>offer</em> a license to others to perform some subset of copyright-protected actions. It's impossible for a copyright holder to violate their own license, because licenses are only offered to other people.</p></li>
<li><p>If the closed-source and open-source components are owned by the different people, then the only possible violation here is against the owner of the closed-source component, if it was not licensed in a way that allows reuse or redistribution alongside Apache-licensed code. If it was licensed in a way that allows reuse (e.g., if the binaries were licensed under the Apache 2.0 license), then there is no violation. If the closed-source component were licensed under the GPL, then there <em>would</em> indeed be a violation because the downstream author didn't include the source code of the upstream author's code.</p></li>
<li><p>You probably think they might be a violation because you expect the open source license to require the totality of the project's source code to be available. However, this is only true for copyleft licenses like the GPL (not permissive licenses like Apache).</p></li>
</ul>

<blockquote>
  <p>If so, is there any recourse? I'm not trying to sue anyone, I just don't think it's fair to act like your project is open source, and release critically incomplete source code.</p>
</blockquote>

<p>The author of software may license it however they please. If they want to make the binaries freely available but only release source code for half of the files, or none of them, that's perfectly legal.</p>

<p>Your complaint appears to be the author's advertising the project as open source while it includes some non-open components. The only possible recourse I can think of would be some kind of consumer protection law against false advertising, if the author makes claims that the project is open source in a way that is demonstrably false. However, since ""open source"" is a tremendously nebulous term (e.g., the OSI failed to secure a trademark on the term), I think it is unlikely such a suit would prevail, even if you could identify a relevant statute to pursue legal action.</p>
","2439"
"The GPL and PHP code","278","","<p>According to the <a href=""http://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.html#MereAggregation"" rel=""nofollow"">GPL FAQ</a> </p>

<blockquote>
  <p>Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged).</p>
  
  <p>If the modules are included in the same executable file, they are definitely combined in one program. If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program.</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>Overall this definition seems to focus a lot on compiled code, but does not really consider interpreted code.</p>

<p>What I read from the above is, if it's a single executable/library, it's one program. If it's many executables/libraries communicating (but not directly linked together) it's not. Now my question is regarding PHP. PHP itself is an interpreted language which means code written in PHP is not compiled and executed, but rather is interpreted. In addition, all PHP code is typically ran under a webserver meaning all PHP code is ran under a shared resource pool. </p>

<p>My question is where is the line between a PHP website which incorporates GPL libraries and therefore needs to be released under the GPL and a PHP website which merely calls upon another PHP service to do the same. As a more concrete example, assume PHP library:</p>

<p>Now as a practical example consider <a href=""https://github.com/mrclay/minify"" rel=""nofollow"">Steve Clay's minify</a> and assume that the authors had made the decision of relesing it under the GPL (they did not but for the sake of argument assume they did). 
This library in particular is not generally directly included in any other PHP script, bit is added in a PHP project's list of ""dependencies"". The functionality of this library is accessed via e.g. <code>http://example.com/min/?f=script.js</code> and this URL is added as an ""external script source"" in a website. My question is, in this case would using this library require the project which includes it to be licenced under the GPL?</p>
","<p>From what I understand, Minify takes in other JavaScript on your website and modifies it to be smaller. This seems like data generation, and GPL-covered programs cannot force the data they generate to be under the GPL unless they copy part of themselves into the output.</p>

<p>It would also appear that Minify does not share any data structures or even communicate very much with one's other code. Yes, it shares a memory pool in the PHP runtime, but every one of the GPL programs we run shares a memory pool (that of our entire system) with the non-GPL programs. This seems like a case of an interpreter running two different programs on the same computer. The syntax to call them is unusual, and you are calling one program on the source code of another, but I think it's just that case in disguise.</p>

<p>In both cases, I do not think using a GPLd Minify would force your entire website to be under the GPL. However, as the FAQ notes, if you were linking to Minify, using its functionality in running code on your site, etcetera, that would require at least the parts of your site that depend on it to be under the GPL, and possibly the whole site.</p>
","4231"
"Sell software that uses libraries licensed under Apache Licence 2.0","276","","<p>I didn't find any definite answers on the web so I'm asking for a definite answer to the question:</p>

<p>Am I allowed to sell software that was written completely by myself except for the ZXing library (licensed under Apache License 2.0) and the Material Icon Collection by Google (also licensed under Apache License 2.0) as long as I include attribution to the authors of both packages?</p>

<p>If not, what do I have to do to be allowed to sell my software?</p>
","<p>Yes, you are allowed to sell your software that is based on other software licensed under Apache License 2.0.</p>

<p>Apache has a good abstract for the license here: <a href=""http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN"" rel=""nofollow"">http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN</a></p>
","4387"
"Move from MIT license to a new one","275","","<p>I want to move from MIT license to a new one, with this goals to reach:</p>

<ul>
<li>Leave the project free to use for individuals and small open source companies</li>
<li>Let commercial companies pay some money for using my software</li>
</ul>

<p>And I have some questions about this plan:</p>

<ol>
<li>What license type should I choose?</li>
<li>What kind of monetization strategy for commercial use should I choose? One time for company with unlimited use? Each time company uses software in its projects?</li>
<li>Will the license have power only for new versions of the software? Or for the old versions too?</li>
</ol>
","<p>When you are looking for a license which forces some people to pay you but not others, you aren't looking for an open source license. The <a href=""http://opensource.org/osd-annotated"" rel=""nofollow"">open source definition</a> says:</p>

<blockquote>
  <p><strong>No Discrimination Against Persons or Groups</strong></p>
  
  <p>The license must not discriminate against any person or group of persons.</p>
  
  <p><strong>No Discrimination Against Fields of Endeavor</strong></p>
  
  <p>The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.</p>
</blockquote>

<p>That means we can not help you to find a license which does this, because that would be off-topic on this website.</p>

<p>But there might be a way to reach the goal you want while still keeping the project open source: <strong>dual licensing</strong>.</p>

<p>This is a business model used by many open source companies. Offer the software under two different licenses:</p>

<ol>
<li>Gratis under a copyleft license like the GPL</li>
<li>For money under a proprietary license</li>
</ol>

<p>In theory, both license models are available to anyone. But the commercial deal should include some additional perks which are important for large companies but secondary for private people and small businesses, like:</p>

<ul>
<li>A support contract</li>
<li>A warranty</li>
<li>Additional components which are not GPL and help to integrate the software in a business IT infrastructure.</li>
<li>Permission to use the software in closed-source applications</li>
</ul>

<p>The exact details of the deal (like pricing structure and whether to charge by use, by user, by cpu or whatever) are a business decision we can not really help you with unless we know your product and your market. Look at your potential customers and ask yourself what kind of deal would be acceptable when you were in their shoes. Also look at competing products and try to offer a slightly better deal than them.</p>

<p>Regarding your question about older versions: The older versions are out there under the MIT license. The MIT license has no revocation clause. That means the old versions stay out there under MIT and can still be changed and redistributed. There is not much you can do about it. But you will have a great competitive advantage against them: MIT licensed code can be integrated into GPL projects, but not the other way around. That means when anyone adds any new features or bugfixes to the old MIT version, you can take them and integrate them into the GPL version. But the GPL does not allow the opposite, so they can not integrate your updates into their version (unless they also switch to the GPL).</p>
","1884"
"Can I make a specific line of code not open source?","274","","<p>Suppose I am working on a piece of software. I want to release it under an open source license. But after thought I decide that line 36 I would like to keep closed source.</p>

<p>After doing research, I am still confused.</p>

<p><strong>My question:</strong></p>

<p>Am I able to do this? </p>

<ul>
<li><p>If yes, are there any restrictions to this?</p></li>
<li><p>If no, why not? are there any other ways of doing this.</p></li>
</ul>
","<p>At the basic, you can license different parts of your work differently. This happens often, if you include libraries with different compatible open source licenses in your project. The library is licensed differently to your project.</p>

<p>But doing as you describe has a lot of downsides.</p>

<p><strong>1. It's complicated</strong></p>

<p>You somehow have to indicate, which part is licensed how. This can be complicated enough if you license some files differently, if you do it for lines it will look horrible.</p>

<p><strong>2. It might be incompatible to some open source licenses</strong></p>

<p>Such a behaviour might be incompatible with certain open source licenses. Especially copyleft-licenses would be problematic. As long as the whole work is completely copyrighted by you it might work, but if you include for instance GPL-code, then you violate the license.</p>

<p><strong>3. It might confuse potential users</strong></p>

<p>Open Source is generally good for users. Such complicated license mess could confuse potential users, so they are unsure if these lines with other licenses somehow affect them. You may loose users.</p>

<p><strong>4. It might discourage potential contributors</strong></p>

<p>The inconclusive license situation might be a no-go for many programmers and so they decide not to contribute to your project.</p>

<p><strong>5. It misuses the trust of others</strong></p>

<p>Open Source is usually met with a lot of trust that is hard earned. Creating such difficult license situation as you describe violates this trust. This might have negative long term effects on your reputation and the reputation of your project ... and it is basically wrong. (Thanks to Andrew Russell for the suggestion, see comments.)</p>

<hr>

<p><strong>TL;DR</strong>: It is possible but unwise.</p>
","929"
"Can I use Oracle's JDBC driver in an MIT licenced project?","269","","<p>I have decided to make a project of mine free and open source under the MIT licence. This project uses Oracle's JDBC driver. My question is am I able to include ojdbc in my Github project and if so, how do I handle licencing?</p>

<p><a href=""http://www.oracle.com/technetwork/licenses/distribution-license-152002.html"" rel=""nofollow"">Here is</a> the official licence document, but even after reading it I am still not sure whether I can include it in my project.</p>
","<p>The JDBC drivers from Oracle are using a proprietary license and I would avoid redistributing any of their binaries on principle.</p>

<p>Beside its proprietary nature one of the most onerous terms is this IMHO:</p>

<blockquote>
  <p>Prior to distributing the programs you shall require your end users to execute an agreement binding them to terms consistent with those contained in this section and the sections of this agreement entitled  ....</p>
</blockquote>

<p>This is practically impossible to enforce for FLOSS... Say you put your project on Github in a public repo: how would you be able to enforce the execution of a <em>binding agreement</em>? </p>
","2906"
"What is the meaning of two licenses in a maven pom?","269","","<p>Maven allows several licenses in its license block e.g.</p>

<pre><code>&lt;licenses&gt;
   &lt;license&gt;
     &lt;name&gt;GPL-3.0&lt;/name&gt;
   &lt;/license&gt;
   &lt;license&gt;
     &lt;name&gt; Beerware&lt;/name&gt;
   &lt;/license&gt;
&lt;/licenses&gt;
</code></pre>

<p>Does mean :</p>

<ul>
<li>the user can choose ? (or)</li>
<li>has to follow both licenses ? (and)</li>
<li>it is not defined by maven ?</li>
</ul>

<p>Update:
   The answers so far confirm my suspicion that</p>

<pre><code>* maven does not define a semantic
* most people setting 2 licenses also do not know really what it implies
* most people using such a dependency will pick and choose (i.e. 'or')
* the defensive approach would be to assume 'and' as user of such dependency
</code></pre>

<p>In effect it means that a licenses block with more than one license is so unclear that the user of such artifact better look elsewhere for license information (e.g. the source, web pages)</p>

<p>Update 2:
After looking at many artifacts that either use 2 license blocks in a pom or directly declare ""lisense1 and license2"" I must conclude that always a logical 'or' is meant. When 'and' is used then in the same way people say ""I bought apples and oranges"" </p>

<p>I have yet to find project were the logical ""and"" was meant and made sense.</p>
","<p>Maven allows several licenses in its <code>&lt;licenses&gt;</code> block and its meaning is not defined. </p>

<p>The only prudent approach is to consider that <strong>all</strong> licenses apply, at least if you consider ONLY the POM data to get license information.</p>

<p>Now the recourse to fix this would include:</p>

<ol>
<li><p>for you: you can scan the code for actual license terms, ideally both the sources and binaries. This way you may be will find out more about the licensing and determine which licenses apply and how. You can use the scancode tools for this. See <a href=""https://github.com/nexB/scancode-toolkit"" rel=""nofollow"">https://github.com/nexB/scancode-toolkit</a></p></li>
<li><p>for the upstream author: Using SPDX license expressions in the POM would allow to express clearly what the licensing is. This would mean using only a single <code>&lt;license&gt;</code> in the POM. These are example of such expressions:
<code>
MIT or GPL-2.0+
LGPL-2.1 AND BSD-3-Clause
</code></p></li>
</ol>

<p>See <code>Appendix IV: SPDX License Expressions</code> in <a href=""http://spdx.org/sites/spdx/files/SPDX-2.0.pdf#page=80&amp;zoom=auto,-46,28"" rel=""nofollow"">http://spdx.org/sites/spdx/files/SPDX-2.0.pdf#page=80&amp;zoom=auto,-46,28</a> for details.</p>

<p>SPDX license ids and expressions are supported in NPM and RubyGems for instance and a few other package managers.</p>

<p>(Disclaimer: I am a co-founder of SPDX and a co-author of ScanCode)</p>
","2892"
"Very permissive license","267","","<p>I'm about to launch my current project as Open Source. People should feel free to do with the code whatever they want and luckily there are quite a few licensing options to choose from.</p>

<p>So I'm looking for something very permissive. I've heard of the <a href=""https://en.wikipedia.org/wiki/WTFPL"" rel=""nofollow"">WTFPL</a> and that sounds about right. There are other variants around as well though.</p>

<p>Should I care? I mean, people should do with the code whatever they want. What would be the difference between not putting any copyright on it and putting such a very permissive copyright on it?</p>
","<p>If you are looking for something very permissive then you do have to use a license. Quoting <a href=""https://help.github.com/articles/open-source-licensing/"">GitHub's help page about licensing</a>:</p>

<blockquote>
  <p>Generally speaking, the absence of a license means that the default copyright laws apply. This means that you retain all rights to your source code and that nobody else may reproduce, distribute, or create derivative works from your work.</p>
</blockquote>

<p>You might like the <a href=""http://opensource.org/licenses/MIT"">MIT license</a>, which is a permissive, popular and OSI-approved license.</p>
","26"
"Commercial software using open source library: legal notice","265","","<p>Is there any legal constraint saying that a commercial software must quote the open source libraries and public domain libraries regardless of the open source license type?</p>

<p>For example, let's say I develop a web application based on java servlet and I include (and use without modifications) a library licensed under Apache License 2.0.</p>

<p>Then I will sell my .war file that includes it.</p>

<p>Do I have to include a text file saying I am using it? What would/could happen if I don't?</p>
","<p>It depends upon the license, and you can find out by reading the license.  Many, such as Apache-2.0 require the license to accompany binary distributions, but some certified as Open Source don't.  Some (for example zlib, libpng) ask politely for credit.  libjpeg requires attribution, but in order to get certified as Open Source they promised not to enforce it.</p>
","1898"
"Selling a book based on CC BY-SA","265","","<p>My company would like to make a book mostly adapted from CC-BY-SA licenced text. I understand this is legal if we distribute the adapted text under the same licence. But what if we add to the book our own copyrighted images? Can you licence the text under CC-BY-SA and keep our copyright on the images?</p>

<p>How would the situation change in the case of CC-BY licenced text?</p>
","<p>Distributing images alongside text creates a combined work, but not a derivative work, and your images are not bound by the CC BY-SA requirements.</p>

<p>Allowing the distributing of books of CC BY-SA licensed text is very much the intention of the license, and expressly legal. You are correct that the license mandates your text is available under CC BY-SA as well.</p>

<p>If the original text were under CC BY (not SA) there would be no requirement that your adapted text was available under the same license.</p>
","1972"
"License violation for OpenJDK and -Xbootclasspath/p:path?","262","","<p>I was looking to override a class in rt.jar with my own version (to guarantee that existing legacy code remains unbroken).</p>

<p>With Oracle's JDK, <a href=""https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html"" rel=""noreferrer"">it says the following for the -Xbootclasspath/p:path option</a>:</p>

<blockquote>
  <p>Do not deploy applications that use this option to override a class in rt.jar, because this violates the JRE binary code license.</p>
</blockquote>

<p>If I switch to use OpenJDK, will I be faced with this same limitation?  That is, would I be violating a license?</p>
","<blockquote>
  <p>If I switch to use OpenJDK, will I be faced with this same limitation? That is, would I be violating a license?</p>
</blockquote>

<p>There is no such limitation in the OpenJDK licensing which is a combo of CDDL and GPL with classpath exception. Run with it without fear.</p>

<p>As a side note, there is no good reason to use the Oracle BCL-licensed JDK. In fact reading its ever changing license terms, you can barely use it for development and that is about it. 
The OpenJDK is always a better alternative IMHO.</p>

<blockquote>
  <p>if the class I'm modifying is covered by the ""Classpath Exception"" to the GPL, then does your answer change at all?</p>
</blockquote>

<p>No. To the contrary: the BCL does not give any permission to modify code.
The GPL with Classpath does allow that alright. You still have to obey the GPL for the code you modify of course and -- unless you enter the grey area of derivative work -- your code using this modified code would not be subject to the GPL's requirements. </p>

<p>/IANAL /TINLA</p>
","2849"
"Can I legally use code I found on a forum?","261","","<p>I want to write an R package and release on <a href=""https://cran.r-project.org/"" rel=""nofollow noreferrer"">CRAN</a>. But I have concerns about <strong>legal issues:</strong> licensing and authorship/ownership.</p>

<p>Code of some functions in the package will be derived from or based on posts in websites like these:</p>

<p>A. <a href=""https://stackoverflow.com/questions/33288075/from-matlab-to-r-capture-named-fields-with-regular-expressions-to-a-dataframe"">this answer</a> and <a href=""https://gist.github.com/danielmarcelino/8209cfdf2cd993eeb1b3"" rel=""nofollow noreferrer"">this code</a> for function 1;<br>
B. <a href=""https://github.com/ropensci/plotly/issues/273#issuecomment-217982315"" rel=""nofollow noreferrer"">this comment</a> for several other functions.</p>

<p>Can I legally use these codes as I can't find any license they are under? I.e. Are there any legal restrictions at all to include code <strong>from forum websites</strong> in a package? Who is the owner of copyright licenses in this case, if any?</p>

<p>Are there any legal differences in cases where:<br>
 (<strong>a</strong>) the initial piece of code was written by me and then other forum users corrected/updated it?<br>
 (<strong>b</strong>) I just asked a question and got an answer (a piece of code)?</p>

<hr>

<p>A related question about how to attribute authors when their real names are unclear is <a href=""https://opensource.stackexchange.com/questions/3970/r-package-includes-code-based-on-answers-on-forum-websites-authorship"">here</a>.</p>
","<p>You're essentially asking here:<br>
<strong>Can I legally use code I found on a forum?</strong></p>

<p>The short answer is 'it depends'. And by the way, <a href=""https://en.wikipedia.org/wiki/IANAL"" rel=""nofollow noreferrer"">IANAL/TINLA</a>.</p>

<p>It depends on:</p>

<ul>
<li>whether the code is eligible for copyright,</li>
<li>what license the content of the particular forum is under, and</li>
<li>what additional license (if any) the individual contributor has put it under.</li>
</ul>

<p>The code you've linked to comes from StackOverflow, a GitHub Gist, and a post in a GitHub issue.</p>

<hr>

<p>The first thing you need to consider is <strong>whether the code is copyrightable at all</strong>. Quoting from a comment made by <a href=""https://opensource.stackexchange.com/users/4689/leezer3"">leezer3</a> on <a href=""https://opensource.stackexchange.com/a/4005/4763"">another post</a>: ""In order to be copyrightable (under UK/European law at least) the work must not be a simple mathematical algorithm, and must have unique properties."" In other words, there needs to be something <em>creative</em> about it.</p>

<p>If it's simple enough, you can use it - no problem (I'd usually still include a comment linking to the post it came from though). If it's more complex, can you take the <em>idea</em> of the solution and <em>completely</em> rewrite it ""in your own words""? If so, you now own the copyright on it (when doing this I still tend to comment with the original post as a sort of 'hat tip', but that's not required).</p>

<hr>

<p>If it's not simple and you can't/don't want to rewrite it, then you need to consider <strong>how it's licensed on the website or forum you found it on</strong>. In the case of all StackExchange sites, scroll to the bottom where you'll see a link to <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""nofollow noreferrer"">CC BY-SA 3.0</a>. You are free to use and change <em>any content</em> (code or text) that you find on SE sites, as long as you give credit and as long as you continue to share in the same manner any changes you make.</p>

<p>As far as giving credit, <a href=""http://blog.stackoverflow.com/2009/06/attribution-required/"">this blog post</a> (also linked from the footer of every page) explains how StackExchange would like you to give that attribution. This post is written for websites who use SE content wholesale, so I tend to take a slightly different approach in code: I just ensure that I link in a comment to the original post so it's clear where it came from.</p>

<p>As far as sharing any adaptions in a like manner, this is where it can get a bit murky and where it's probably better to just rewrite what you find anyway. Depending on the license of your final product, you might be able to relicense your adaptions - see <a href=""https://opensource.stackexchange.com/a/4005/4763"">this answer</a> for a path to license CC BY-SA content under the GPL.</p>

<p>In the case of GitHub Gists and Issues, anything posted on GitHub is owned by the original contributor and is not covered by a blanket license. So, it is automatically theirs unless they've given you a specific license to use it.</p>

<p>While I would assume someone posting code in a Gist or Issue would be happy for you to use it, to be safe you really need to ask them for permission. They might license it to you under the <a href=""https://en.wikipedia.org/wiki/MIT_License"" rel=""nofollow noreferrer"">MIT</a> or they might just say you can do whatever you like with it. Either way, crediting them with a comment linking to the Gist/Issue is the appropriate thing to do.</p>

<hr>

<p>Finally, one additional consideration is <strong>whether the contributor has put their code under any additional license</strong>. On StackExchange, some users say in their profile that their code is also available under the Apache or MIT licenses, or released into the public domain. On GitHub, look for a comment or message to a similar effect on the user's profile.</p>

<p>If in doubt, you can try to contact that user directly and many will be happy to give you additional permissions.</p>

<hr>

<p>In answer to your additional questions:</p>

<blockquote>
  <p>Are there any legal differences where ... the initial piece of code was written by me and then other forum users corrected/updated it?</p>
</blockquote>

<p>Possibly. Going back to whether the code is eligible for copyright, if the updates were wholesale contributions that are copyrightable on their own, then technically the user who made those changes owns the copyright, and you would need to apply the guidelines I went through above if you want to use those contributions.</p>

<blockquote>
  <p>Are there any legal differences where ... I just asked a question and got an answer (a piece of code)?</p>
</blockquote>

<p>No. Whether or not you asked the question and got a piece of code in response makes no difference to any copyright and license that may or may not be on that code.</p>

<hr>

<p>One final consideration: if you use code you find on a public forum, you are still responsible for ensuring you are using it correctly. You'll want to be very sure that the person who posted code you use is really the copyright owner of the code, and that they didn't just copy it from somewhere else. Because of this, to be safe, you might want to just take most forum posts as 'suggestions' and use the ideas to write the code yourself.</p>
","4037"
"I want to release my software as open-source but prevent people from competing with my SaaS solution. Which license should I pick?","261","","<p>I'm finishing a web application and I want to release it as open-source.</p>

<p>Here are my terms:</p>

<ol>
<li>You cannot compete with my SaaS/Cloud solution.</li>
<li>You are able to use the software, even commercially, for free. As long as you don't sue me if it breaks.</li>
<li>You can use, modify and redistribute the software, as long as it is open-source, you give attribution and you don't change the license, specially the first
clause.</li>
</ol>

<p>I've being studying and it seems like AGPL. Except for the first clause.</p>

<p>How should I license it?</p>
","<p>There is no such Open Source License. Specifically, your non-compete clause is fundamentally incompatible with the basic definition of Open Source: any license that would enforce your clause #1 would <em>by definition</em> not be Open Source, any Open Source License would <em>by definition</em> not restrict #1.</p>

<p>So, an Open Source License that enforces your clause #1 cannot possibly be exist. It is a contradiction in terms.</p>

<p>Straight from the <a href=""https://opensource.org/osd""><em>Open Source Definition 1.9</em></a>:</p>

<blockquote>
  <h1>6. No Discrimination Against Fields of Endeavor</h1>
  
  <p>The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.</p>
</blockquote>

<p>Which is elaborated further in <a href=""https://opensource.org/faq#restrict"">the <em>FAQ</em></a>:</p>

<blockquote>
  <p><strong>Can I restrict how people use an Open Source licensed program?</strong></p>
  
  <p>No. The freedom to use the program for any purpose is part of the Open Source Definition. Open source licenses do not discriminate against fields of endeavor. […]</p>
</blockquote>

<p>Freedom 0 (the most important one) of the <a href=""https://gnu.org/philosophy/free-sw.html""><em>Free Software Definition</em></a> is very similar:</p>

<blockquote>
  <p>The freedom to run the program as you wish, for any purpose (freedom 0).</p>
</blockquote>

<p>Which is elaborated further:</p>

<blockquote>
  <p>The freedom to run the program means the freedom for any kind of person or organization to use it on any kind of computer system, for any kind of overall job and purpose, without being required to communicate about it with the developer or any other specific entity. In this freedom, it is the <em>user's</em> purpose that matters, not the <em>developer's</em> purpose; you as a user are free to run the program for your purposes, and if you distribute it to someone else, she is then free to run it for her purposes, but you are not entitled to impose your purposes on her.</p>
  
  <p>The freedom to run the program as you wish means that you are not forbidden or stopped from doing so. It has nothing to do with what functionality the program has, or whether it is useful for what you want to do.</p>
</blockquote>
","4675"
"Do you need a degree to become an open source developer?","260","","<p>I know that people don't need degrees to create closed source software. </p>

<p><strong>My question:</strong></p>

<p>Because open source programming is different to closed source, is any other education REQUIRED to program open sources things? </p>

<ul>
<li>If yes, what degree / education?</li>
<li>If no, why not?</li>
</ul>
","<p>Simple answer: nope. I know this because I've made open source software and I don't have a degree.</p>

<p>The degree isn't required because the knowledge of programming required to make software doesn't change between proprietary and open source software. You still need to able to write good working code, and that doesn't require a degree - you can teach yourself.</p>

<p>Of course, a degree is always <em>beneficial</em> because it'll teach you things you didn't know and often will give you an overview of the business side of things too, but it's by no means necessary.</p>
","629"
"Does the CC-BY-SA License require that source code of derivative works be shared?","258","","<p>For example, if I create a LaTeX file and license it with CC BY SA, can someone create a derivative work, but <strong>only publish the PDF</strong>, without giving out the derived LaTeX source code?</p>

<p>Does this fall under the Effective Technological Measures part of the license? </p>
","<p>Yes, they can publish a PDF without publishing the modified LaTeX sources. No, this is not DRM.</p>

<p>CC-BY-SA is not an open-source license. It is intended for creative works such as photographs or writings even where there might not be any kind of editable source format.</p>

<p>The license explicitly allows any licensee to change the format of the work:</p>

<blockquote>
  <p>2(a)(4): <strong>Media and formats; technical modifications allowed</strong>. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures.</p>
</blockquote>

<p>The <em>Effective Technological Measures</em> are defined as</p>

<blockquote>
  <p>1(e): <strong>Effective Technological Measures</strong> means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.</p>
</blockquote>

<p>In other words, 2(a)(4) allows you to circumvent any accidental DRM on a CC-BY-SA licensed work in order to (re-)use the work as you wish. This freedom to convert formats is important, as it e.g. allows a CC-BY-SA e-book to be converted into a different e-book format, or to be made accessible to blind users, even when the original e-book is “protected” by a DRM scheme. Merely converting a creative work to a format that is non-editable is not DRM – otherwise, printed CC-BY-SA books would be a license violation.</p>

<p>The CC-BY-SA license requires no one to publish their derived works (such as modified LaTeX files), only to license their derived works under CC-BY-SA when they share/publish them. However, they must:</p>

<ul>
<li>provide attribution 3(a)(1)(A)(i). If they used your LaTeX files, they must attribute you.</li>
<li>link to the original work 3(a)(1)(A)(v). When they used your LaTeX files, they must link to them.</li>
<li>indicate any modifications 3(a)(1)(B). They need not state what they modified, only whether they modified something.</li>
</ul>

<p>Examples that might clarify some aspects:</p>

<ul>
<li><p>I create a CC-BY-SA video that uses CC-bY-SA licensed music in its soundtrack. I am not required to publish the soundtrack in an un-mixed form just so that someone could mix it differently if they wanted to. However, I must link to the original music.</p></li>
<li><p>I publish a CC-BY-SA printed book that uses a CC-BY-SA illustration. I am not required to publish my manuscript or layout files so that someone could print the book with a different illustraction. However, I must link to the original image.</p></li>
<li><p>I publish a CC-BY-SA “photoshopped” version of a CC-BY-SA photograph. I am not required to publish the project file so that someone could arrange the image layers differently, or remove a special effect they don't like. However, I must link to all source images I used.</p></li>
</ul>

<p>If this is not acceptable to you, you should not use CC-BY-SA for your documents.</p>

<p>This answer is based on the terms of the <a href=""https://creativecommons.org/licenses/by-sa/4.0/legalcode"">Creative Commons Attribution-ShareAlike 4.0 International</a> license.</p>
","1850"
"What exactly is the issue in Microsoft-Novell agreement?","257","","<p>I'm trying to understand what constitutes the issue in <a href=""https://en.wikipedia.org/wiki/Novell#Agreement_with_Microsoft"">Microsoft-Novell agreement</a>, and why is it so important that <a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License#Version_3"">GPLv3</a> has a special clause to address such agreements in the future.</p>

<p>So far I understood that Microsoft is paying Novell in exchange for a joint patent agreement on Office products. Software patents are indeed evil, but I fail to see what's so special in this case. Novell also agreed to improve interoperability with MS Office by including OpenXML/ODF translator in OpenOffice, which seems perfectly normal - many OSS projects are sponsored by corporations, and sponsors naturally have a say in what features get implemented.</p>

<p>Finally, I don't understand how these issues (if I correctly understood what the issues are) are addressed by this GPLv3 clause quoted by Wikipedia:</p>

<blockquote>
  <p>You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license [...]</p>
</blockquote>

<p>What is this ""discriminatory patent license"" and who will receive it?</p>
","<p>In one of the links from your wikipedia link, Eben Moglen, the attorney for the Free Software Foundation that created and oversees the GPL, said,</p>

<blockquote>
  <p>If you make an agreement which requires you to pay a royalty to
  anybody for the right to distribute GPL software, you may not
  distribute it under the GPL.</p>
</blockquote>

<p>GPLv3 provides an exception so that Microsoft and Novell can distribute
the software that they licensed to each other in a discriminatory manner.
The exception only applies if the arrangement was made, or the patent license was granted, prior to 28 March 2007; this date chosen specifically to match the Microsoft/Novell agreement in question.</p>

<p>The answer to ""What is this ""discriminatory patent license"" is the sentence immediately prior to the restriction that you quoted:</p>

<blockquote>
  <p>A patent license is “discriminatory” if it does not include within the
  scope of its coverage, prohibits the exercise of, or is conditioned on
  the non-exercise of one or more of the rights that are specifically
  granted under this License.</p>
</blockquote>

<p>The particular patent license(s) is Novell's and Microsoft's agreement not to sue each other over patents in Windows/Linux/Office software that they agreed to collaborate on.</p>

<p>The answer to ""who will receive it?"" is contained in the quote:</p>

<blockquote>
  <p>... under which the third party grants, to any of the parties who would
  receive the covered work from you, a discriminatory patent license</p>
</blockquote>

<p>That would be Microsoft and Novell, who received each other's work.</p>

<p>I am not a lawyer, so please take this as a layman's interpretation of some of the publicly available literature on the subject.</p>
","1914"
"Where would I give credit to an MIT licensed project, in an iOS app?","257","","<p>I would like to include a pod that I found on cocoa pods and its an animation of a button. It is licensed under MIT licence:  <a href=""https://cocoapods.org/pods/DynamicButton"" rel=""nofollow noreferrer"">https://cocoapods.org/pods/DynamicButton</a></p>

<p>In the licence it states: </p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>Do I include this in my code or do I have to dedicate a specific view to it, in settings or something of the sort?</p>
","<p>To satisfy the legal requirement you only need to keep the license in your source code, such as in a LICENSE file or as a comment block in the source code itself.</p>

<p>To be nice, you can also display the license information somewhere that users can see it.</p>

<p>But if you display the license information to users too verbosely, you might be called ""an unmitigated jerk"", as I have been, in the case of my ""pngcrush"" application (which I have <a href=""https://sourceforge.net/p/pmt/news/?source=navbar"" rel=""nofollow noreferrer"">recently modified</a> to be less verbose by default).</p>
","5830"
"Are Creative Commons licenses enforceable in the event of a breach?","253","","<p><strong>Scenario:</strong></p>

<p>I am building a website with my business partner. This website is going to contain information that we do not want to be reused. To do this I am going to release it under a creative commons license. </p>

<p><strong>Question:</strong></p>

<p>In the event someone uses our content without our permission, would I be able to take action against this person?</p>

<ul>
<li>If yes, to what extent?</li>
<li>If no, why not?</li>
</ul>
","<p>Yes, there have been several cases where violations of a CC licence have been taken to court, and the rights holders have won. <a href=""https://en.wikipedia.org/wiki/Creative_Commons_license#Legal_aspects"">Wikipedia lists just a few</a>.</p>

<p>Note that the Creative Commons organisation would not be a legal party if this happened to you, and you would have to cover all of your own legal costs.</p>
","403"
"Can I make typographical changes to the MIT license?","252","","<p>If I make some typographical changes to the default MIT license, does it still count as the MIT license?</p>

<h2>Example</h2>

<blockquote>
  <p>Copyright <del>(c)</del><strong><code>©</code></strong> [year]<strong><code>,</code></strong> [organisation]</p>
  
  <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
  
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
  
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>

<p>I changed <code>(c)</code> to <code>©</code>, and added a comma after the year. I know it still counts as a license, but is it the MIT license or my own license?</p>
","<p>The copyright line isn't actually part of the license, it's a separate entity. So changing that doesn't change the license. In fact ""©"" is the correct form, so that change at least counts as an improvement in my book.</p>

<p>Beyond that though I'd stick to the canonical form of the license if there is one. The MIT license itself has many slight variants, so the FSF <a href=""https://en.wikipedia.org/wiki/MIT_License"">encourages people</a> to reference <a href=""https://www.debian.org/legal/licenses/mit"">the Expat license</a> instead. (The existence of variations of the MIT license as used by the MIT provides an answer to your question of course...)</p>
","1614"
"How can I encourage users to work on other user's feature requests?","249","","<p>As manager of several free software projects, I am familiar with feature requests that users of my project submit to its public issue queue.</p>

<p>Many of the suggestions are good, but having limited resources available, there is often no way I can assign a feature request to a member of our core development team.  Core team members are on a salary, and in order to  pay them, they have to do paid work (including working on feature-requests somebody will <em>pay for</em> having implemented). Our contract with paying clients makes sure that the result of this for-pay work always makes it way back into the free software distribution we make available for everyone, but there is little overlap between what paying clients request, and what is requested by members of the public. As a result there is always a huge backlog of feature requests coming from users that are <em>not</em> paying clients of our company and that are <em>not</em> willing to sponsor development. I.e. they want it  for free. I've nothing against users that prefer to get their pet feature added for free instead of paying us to add it, I've just not yet found a sensible way to oblige.</p>

<p>We already have in place a pretty good system for managing and reviewing user's pull-requests, as well as a <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"">CLA</a> that makes sure that user contributions can safely be merged into our project without creating future problems for our company or for  downstream recipents of our software. We're just not getting as many as we would like of these pull-requests.</p>

<p>I first thought that we could provide additional support and some hand-holding to get the person requesting the feature to implement it. But after trying this out, we discovered that these users are not developers - they are literally <em>just using</em> our software. So the person requesting the feature is simply not <em>capable</em> of implementing the feature and submit a pull-request for review. To keep this question simple, just assume that <em>all</em> these feature requests comes from non-developers unwilling or unable to sponsor development.</p>

<p>So, given that the core development team can't provide this service without pay - how can I encourage <em>users</em> to implement features requested by <em>other</em> users.</p>

<p>What are the <em>best practices</em> when dealing with feature requests from the community, given that I want to minimize the cost of doing this for the company, while at the same time encouraging capable users to contribute pull-requests that implements (some of) the requested features?</p>

<p>To avoid this being closed as ""too broad"" or ""opinion based"", I am looking for specific strategies, backed up with references to real free software projects that has successfully encouraged and mobilized users to contribute in this way.  The strategies can either be taken for relevant literature, or from personal experience.</p>
","<p>Atlassian (the publisher of tools like Confluence and JIRA) has published a <a href=""https://confluence.atlassian.com/display/DEV/Implementation+of+New+Features+Policy"" rel=""nofollow"">Feature Implementation Policy</a>, which may be of some use. While not <em>quite</em> what you're looking for in that Atlassian still implement the features themselves, it does detail how they deal with scheduling feature requests.</p>

<p>In general, to get people to do something they're not <em>obliged</em> to do, you need to provide an incentive. This is the most important consideration. When someone submits a feature to you, recognise that they've put a lot of work into it and reward them somehow. This could be:</p>

<ul>
<li>monetary: a small (£10 maybe) reward - the official staff need <em>salaries</em>, but <em>rewards</em> have no minimum value</li>
<li>cosmetic: if your app has networking features, give them publically displayed status</li>
<li>swag: something tangible, a mug, a t-shirt</li>
<li>privilege: let them do things they wouldn't otherwise be able to</li>
</ul>

<p>You also need to make it as easy as possible to contribute to your software. Even for developers, it can sometimes be hard to read through a codebase and understand it, which is a prerequisite for adding features. Provide <strong>good</strong> documentation and support: perhaps set up a specific email inbox and someone to monitor it, and use it to support those with <em>specific</em> problems trying to work with your codebase.</p>
","1434"
"Is any problem domain off-limits to open source development?","249","","<p>Partially inspired by this question: <a href=""https://opensource.stackexchange.com/questions/613/what-subject-areas-are-in-need-of-free-and-open-source-projects"">https://opensource.stackexchange.com/questions/613/what-subject-areas-are-in-need-of-free-and-open-source-projects</a></p>

<p>Open source development has greatly enriched and expanded many problem domains, not simply hardware. Open source 3D printer design, and the Arduino platform are excellent examples.</p>

<p>But are there any domains or industries which are inherently off-limits for the creation of open-source solutions?</p>

<p>And by solution, I don't mean <strong>using</strong> open source code, but providing an actual implementation.</p>
","<p>A few topics in security benefit from being closed-source.</p>

<p>This is not the general case. In cryptography and most of security, <a href=""https://en.wikipedia.org/wiki/Kerckhoffs&#39;s_principle"" rel=""nofollow noreferrer"">Kerckhoff's principle</a> applies. A system should be secure even if its design is fully public, because the adversary can usually learn the system's design anyway. In cryptography, secrecy is concentrated in a very small part: a key, a password, a nonce… The operations that are performed on these secret values are well-known.</p>

<p>Most of security benefits from being open-source. For example, all recommended cryptographic algorithms are public and have undergone years of scrutiny by experts. For software, note that the benefit of being open source only comes into play if someone actually does review the software. This is rarely done because <a href=""https://opensource.stackexchange.com/questions/390/assessing-potential-security-flaws-in-open-source-software/414#414"">it's expensive</a>. I invite you to read threads on <a href=""https://security.stackexchange.com/questions/tagged/opensource"">this topic</a> on <a href=""https://security.stackexchange.com/"">Security Stack Exchange</a>, such as <a href=""https://security.stackexchange.com/questions/4441/open-source-vs-closed-source-systems"">Open Source vs Closed Source Systems</a>, <a href=""https://security.stackexchange.com/questions/51648/security-related-code-in-open-source-projects"">Security related code in Open Source projects?</a>, <a href=""https://security.stackexchange.com/questions/11271/how-are-open-sourced-operating-systems-and-software-kept-secure"">How are open-sourced operating systems and software kept secure?</a>, etc.</p>

<p>Nonetheless, there are a few specialized domains where closed source is an advantage for security. These are domains where in order to obtain information about the system design, an adversary has to conduct active attacks that run the risk of detection. Generally, in such domains, the design of the system evolves, so while adversaries can eventually gain the knowledge that they seek, by the time they manage to do so, that knowledge becomes obsolete.</p>

<p>For example, Stack Exchange has measures to combat spam and vote fraud. These measures would not work as well if the detail of how they work was public. For example, it's known that there are filters to block spam, but the details of what makes the system decide that a new user is a spammer and isn't allowed to post are only known to a few Stack Exchange employees. Similarly, it's well-known that there is an automated process to cancel votes between sockpuppets of the same person, but the details of how this works is not public, it is not even known to moderators. In order to learn how to get through, spammers and fraudsters need to carry active probes where they try to post things and see what sticks and what gets shut down. All this probing leaves tracks, which help the defenders make the system more resistant and identity the attackers.</p>

<p>Another example is some of the security countermeasures on <a href=""https://en.wikipedia.org/wiki/Smart_card"" rel=""nofollow noreferrer"">smart cards</a>. Smart cards have to maintain secrecy in a hostile environment where the attacker has physical control over the card (e.g. a credit card thief). They are potentially vulnerable to many types of attacks, including <a href=""https://en.wikipedia.org/wiki/Side-channel_attack"" rel=""nofollow noreferrer"">side channel</a> leakage and <a href=""https://en.wikipedia.org/wiki/Fault_injection"" rel=""nofollow noreferrer"">fault injection</a>. Some of the protections on a smart card involve code that erases confidential data if it detects an attack (as well as physical protections such as dissolving part of the card if someone tries to drill a hole in it). These countermeasures work better if the attacker doesn't know exactly what triggers them, so that they'll need to brick many cards before they figure it out. Eventually they will figure it out, but if it takes them a few years and the cards using this technology have expired, the defenders have won.</p>

<p>Both examples are a permanent arms race. Closed source is an advantage only temporarily, for a few years at most. Once ways to break the system are known, the whole design might as well be published. But making the design of these particular subsystems open from the get go would facilitate attacks. Closed source is good to protect a few tricks with expected obsolescence. This doesn't necessarily mean that such systems can't be open-source, but an open-source system would have to be extremely good to compete.</p>
","656"
"Should the source code of the Linux drivers ported to the VMKernel be released?","249","","<p>As <a href=""http://www.v-front.de/2013/08/a-myth-busted-and-faq-esxi-is-not-based.html"" rel=""noreferrer"">this</a> blog entry says, although the command line interface of the ESXi server (the virtualization host platform of the VMWare vSphere) isn't derived from Linux, but it is an independently developed, proprietary product.</p>

<p>There is a common misconception, that ESXi is a Linux, because its command line interface is very similar. It is true, but in the deeps there is a kernel which is completely different from the Linux.</p>

<p>But, this kernel, the VMKernel, uses a lot of different Linux drivers ported into it. Of course, its developers doesn't bored to develop independent drivers, they have simply imported them from the already available Linux kernel sources.</p>

<p>Thus, the <em>driver</em> <em>modules</em> of the VMKernel are Linux-derived products, thus they must be released on GPLv2. And, as I know, on the GPLv2 is it possible to sell software, but the owner must also release its source code.</p>

<p>Having the source code of the VMKernel-ported drivers would make also possible to develop VMKernel drivers independently.</p>

<p>But, as I know, no part of the VMKernel was released in source form until now.</p>

<p>How is it possible? Or I know something badly?</p>
","<p>I do not think it is possible to answer this question with a ""yes"" or ""no"" at the present time.</p>

<p>On March 5th 2015, <a href=""http://www.theregister.co.uk/2015/03/05/vmware_sued_for_gpl_violation_by_linux_kernel_developer/"" rel=""nofollow"">VMware was sued for GPL violation</a> and the main basis for this lawsuit was the integration of Linux device drivers in the proprietary VMKernel. The <a href=""https://sfconservancy.org/"" rel=""nofollow"">Software Freedom Conservatory</a> is helping to fund the lawsuit.</p>

<p>At present, the <a href=""https://sfconservancy.org/linux-compliance/vmware-lawsuit-faq.html"" rel=""nofollow"">SFC's FAQ argues</a> that the GPL is violated by the VMKernel, and <a href=""https://www.vmware.com/company/news/vmware-update-to-mr-hellwigs-legal-proceedings"" rel=""nofollow"">VMware argues</a> that it is not. Neither statement contains enough information to make it clear who is right.</p>

<p>Until we have the final words from the courts about this, the only answer that can be given is that we do not know.</p>
","1425"
"Open Source Textbook Solutions","247","","<p>Is there a licensing model, or common ethic agreement, prohibiting the leaking of solutions to questions contained in a textbook?</p>

<p>I was searching for solutions to a question in a very popular and internationally used textbook, and found that a solution guide is available to teaching staff whom approach the publisher and can validate that they are in fact a teacher in the field, running a current course, and mandates of students this text. The publishers website is of a very firm opinion that students must not be able to get possession of this solution guide, and it must not be distributed. Surprisingly, I was indeed not able to find a PDF for personal use through my conventional channels.</p>

<p>This book is quite thick; containing approximately 1100 pages and organised into topic chapters. Each chapter is 30-60 pages, and typically 2 pages of this is exercises. If I was to write my own solution guide for every question, cover to cover, and make it open source (allowing others can contribute solutions, corrections, or content), and I was to ensure that no contribution was a direct quote from the solution guide, with the exception of 'true/false' type answers, is it possible that I am violating more than just the publishers wishes?</p>

<p>Is the consensus different in cases where I quote the question prior to answering, instead of referencing the question, and minimally answering?</p>
","<p>Problems in textbooks are often used in homework or exams. That is the most often cited reason. Besides, having the answers gives the lecturer a (not to be dismissed) advantage in front of the class.</p>

<p>The problems themselves are copyrighted material, whatever you write up as solutions is unambiguously based on them. If this is enough to make it a ""derivative work"" under the law is something only a lawyer specializing in the area could answer. I'd guess the publisher will fight it, as your solutions will undermine some of the value of the book to the ones deciding to buy it (professors specifying it as the class text and getting the solutions as a side benefit). In any case, courtesy would require to respect the wishes of the author. If the solutions aren't available publicly, don't go against that. If no solutions are available, your idea doesn't grate (so much).</p>

<p>For a student, reading the question and looking up the answer (as the overwhelming minority will tend to do) doesn't lead to learning. Some books instead sometimes only give hints, or even extend the answer much farther than the original question. This is an effective technique with truly motivated readers, which sadly isn't exactly the norm in lower-level courses. To do any of these well is <em>very hard</em>.</p>
","2573"
"Are beginners generally accepted into Open Source projects?","245","","<p>Whilst some open source projects would be too specialised and too complex, in general, are beginners welcomed into open source projects? When I say beginner I mean someone who has taken an introductory university course on programming and had a year or two of basic programming experience for scientific purposes (mainly solving problems for assignments). Basically someone who has a strong grasp of most programming concepts but may not have a huge amount of experience in code structuring, unit and integration testing, and larger projects.</p>
","<p>The world of open source is, almost by definition, one in which groups of complete strangers come together to combine their talents and produce a unified result. There may well be some projects where all contributors know each other and have great experience, but in the main you will be judged on the quality of your contributions.</p>

<p>So, I think it is fair to say that beginners who submit quality contributions, who follow the project's guidelines and procedures, and who are respectful to the community of contributors would be welcomed.</p>

<p>After all, a lack of of experience does not necessarily equate with a lack of good or at least fresh ideas. Indeed there a number of people here on this site who, though lacking years of experience, are still active in the FLOSS community.</p>

<p>But the key is to follow the project's norms. If, as you say, you don't have much knowledge of structuring, or unit testing, and the project is heavily into that approach, it behooves you to study the existing code base before making a submission.</p>

<p>Look at the existing unit/integration tests. Learn how they are written for this project. Which test frameworks do they use? How exhaustive are they?</p>

<p>Look at previous pull requests similar to the one you are considering (start small with a bug fix, for example). What did it include? Just the fix? A detailed commit message? Tests to ensure the bug does not reappear (without being noticed)?</p>

<p>Walk in the footsteps of those who've gone before you, and you should be welcomed with open arms.</p>

<p>An if you run into a project where you need 20 years of experience before they'll even acknowledge your existence ... skip it and move to another project.</p>
","1834"
"How do Open Source projects manage continuous delivery credentials?","245","","<p>If one has an open source project that is deployed somewhere in the cloud via a continuous delivery pipeline, how can the programmatic credentials needed for the CI/CD to deploy the application remains private?</p>

<p>Normally in a private project on a private repository, one could lazily place those credentials in the pipeline steps code in order for the machine to be able to deploy the application.</p>

<p>Don't get me wrong, there <em>are</em> solutions to hide credentials somewhere else than in the code. <a href=""https://github.com/fugue/credstash"" rel=""noreferrer"">credstash</a> is a good example as it store your creds on AWS and you access them with your AWS user private access key. This key can be store on your AWS account and used on your computer. All of this making them live outside of your repository. But the point is that in order to have those hidden credentials <strong>on your CI/CD build machine</strong>, you have to somehow give your build machine a way to get to them. Meaning giving it creds that will end up in the repo again.</p>

<p>How are we supposed to do that?</p>
","<blockquote>
  <p>If one has an open source project that is deployed somewhere in the cloud via a continuous delivery pipeline, how can the programmatic credentials needed for the CI/CD to deploy the application remains private?</p>
</blockquote>

<p>It really depends on which CI/CD you use. </p>

<p>For instance, I use Travis and Appveyor. Both support to encrypt ""secrets"" in their manifests. </p>

<p>For instance in this build <a href=""https://github.com/pombreda/thirdparty/blob/803b2f2134dc704d3fdcd37bb34b0c78397629b7/appveyor.yml#L36"" rel=""noreferrer"">loop</a> I build Python wheels on Appveyor and they get uploaded to bintray, which would be a minimal Ci/CD-like pipeline of sorts.  The same applies <a href=""https://github.com/pombreda/thirdparty/blob/803b2f2134dc704d3fdcd37bb34b0c78397629b7/.travis.yml#L53"" rel=""noreferrer"">here</a> with Travis (for Linux and Mac).</p>

<p>This other <a href=""https://github.com/pombreda/thirdparty-manylinux/blob/e004f3b925316496819f6c9ce4e8504dc5f68a54/.travis.yml#L28"" rel=""noreferrer"">loop</a> has the same approach but also uses Docker and things end in bintray too.</p>

<p>If I were to deploy for instance a web app to a live server, I would likely use exactly the same approach. e.g.:</p>

<ol>
<li>if my build is successful and is for a tag ...</li>
<li>... encrypt as secrets the deployment credentials as shown above ...</li>
<li>and have my CI handle the decryption and do the actual deployment proper.</li>
</ol>

<blockquote>
  <p>But the point is that in order to have those hidden credentials on your CI/CD build machine, you have to somehow give your build machine a way to get to them. Meaning giving it creds that will end up in the repo again.</p>
</blockquote>

<p>The thing here is that my regular credentials to the Ci (which are NOT in the repo) are what is used by the Ci tool to encrypt and decrypt at build time my encrypted secrets. </p>

<p>So yes, the Ci knows how to decrypt these credentials. But an attacker would need to have control of the Ci/CD and of their eventually also encrypted auth DB to compromise my ""secrets"".</p>

<p>If you use a home grown or internally deployed Ci/Cd such as a Jenkins of sorts, you could use the same approach. For instance, use a GPG key or some other mechanism and give the Ci/CD the way to decrypt at runtime.
In all cases, at some level you need to trust some of the machines in the pipeline... You could make it more complex by adding intermediaries each with their own credentials too for making it harder.</p>
","5190"
"Licensing Community Wiki Posts at Stack Exchange","245","","<p>A while back, I ask this question: <a href=""https://opensource.stackexchange.com/questions/504/can-i-override-a-licensing-policy"">Can I Override a licensing Policy?</a> I determined that instead of stating a license on a profile page, it dual-licenses the content posted by that user, instead of overriding the user contribution policy in effect by the company. This works because each post has an owner, and the content clearly has a license in place by site policy, and through notices in the user profile.</p>

<p>But what about Community Wiki posts here at Stack Exchange? These posts have multiple contributors, and they can be edited by anyone. Furthermore, there is practically no ownership of these posts <code>-&gt;</code> They are <s>owned by nothing</s> owned by the community user, which isn't even a person. Community Wiki posts are owned by the <a href=""https://opensource.stackexchange.com/users/-1/community"">community user</a>, not the members of the community who contribute to them.</p>

<blockquote>
  <p>Own community questions and answers so nobody gets unnecessary reputation from them</p>
</blockquote>

<p>Therefore, how are community wiki posts licensed? I would like to say that they would be licensed under the CC-BY-SA license -> Because that is the user contribution policy, however, would it be multi-licensed from all the users who contributed, generally fraction amounts? Or are they licensed a different way?</p>
","<p>You're conflating features of the Stack Exchange engine, which copyright law doesn't care about, with ownership and licensing.</p>

<p>All user content (i.e. the posts and comments, not the user interface bits) on Stack Exchange is <em>owned</em> by their authors (there is no transfer of copyright — that's not even a thing in some jurisdictions; it is in the US but SE doesn't require it). A majority of posts are owned by the single author who wrote them. Posts with multiple authors (the original poster and one or more editors) may have shared ownership if the contribution of others is significant.</p>

<p><strong>All user content comes under a <a href=""http://creativecommons.org/licenses/by-sa/3.0/"" rel=""nofollow noreferrer"">CC BY-SA</a> with attribution requirements</strong>. There is no dual licensing. The original author may use the same content elsewhere under a different license; in this case the path is from the original author directly to this elsewhere. That is not a dual licensing of the Stack Exchange post, that is a separate work by the same author which happens to have the same content.</p>

<p><strong>Whether a post is community wiki does not affect this</strong>. Community wiki changes some Stack Exchange rules (lower reputation threshold for making edits without supervision, and no reputation granted for votes), and is a signal from the original poster that others are permitted and even encouraged to make significant contributions. It affects the user interface a bit; for example the name at the bottom of the post is the user who contributed the most content by some measure of length, whereas it's always the original author for posts not marked CW. The “Community” user is not involved. All of which does not matter from a legal perspective.</p>

<p>On the topic of posts with multiple authors — which, again, is not a matter of them being community wiki or not: the only impact of CW is that it makes it more likely for a post to have multiple authors — let me point you to the Meta Stack Exchange thread <a href=""https://meta.stackexchange.com/questions/208904/does-the-migration-of-edited-posts-violate-attribution-requirements"">Does the migration of edited posts violate attribution requirements?</a> and in particular <a href=""https://meta.stackexchange.com/questions/208904/does-the-migration-of-edited-posts-violate-attribution-requirements/208952#208952"">my answer there</a>. The law (in all jurisdictions, I think) sets a threshold for when contributions to a work are considered significant enough for someone to be considered a co-author. The exact threshold is determined by jurisprudence and is not always consensual. For example, copyeditors on books are traditionally not given any recognition, whereas movies tend to credit many people whose contribution is purely material, not creative.</p>

<p>Regarding the US in particular, the relevant law is <a href=""http://www.law.cornell.edu/uscode/text/17"" rel=""nofollow noreferrer"">Title 17 of the U.S. Code</a>, and in particular <a href=""http://www.law.cornell.edu/uscode/text/17/chapter-1"" rel=""nofollow noreferrer"">chapter 1</a>. Neither it, nor the CC BY-SA license, define who is considered an author. The article <a href=""http://digitalcommons.wcl.american.edu/cgi/viewcontent.cgi?article=1447&amp;context=aulr"" rel=""nofollow noreferrer"">“Defining “author” for purposes of copyright by Russ VerSteeg</a> presents the main views regarding how a contributor to a work gains authorship status. Emphasis is mine.</p>

<ul>
<li>“As a general rule, the author is the party who actually creates the work, that is, the person who <strong>translates an idea into a fixed, tangible expression</strong> entitled to copyright protection.” (Justice Thurgood Marshall, in <em>Community for Creative Non-Violence v. Reid</em>, 490 U.S. 730, 737 (1989).)</li>
<li>“A collaborative contribution will not produce a joint work, and a contributor will not obtain a co-ownership interest, unless the contribution represents <strong>original expression that could stand on its own</strong> as the subject matter of copyright.” (Paul Goldstein, <em>Copyright: Principles, Law, and Practice</em> § 4.2.1.2, at 379 (1989).)</li>
</ul>

<p>This is the majority view. VerSteeg's article goes on to present minority views (upheld by some US courts) which have a broader definition of authorship, requiring a lesser contribution.</p>

<p>The application to Stack Exchange is to the attribution requirements. The license is the same regardless of who the authors of a post are, but all authors of a work must be attributed if the work is reused. The onus is on the person reusing a Stack Exchange post to ensure that they abide by the licensing requirements and in particular credit all contributors who have authorship status. For a non-community-wiki post, that's usually only the original author, but legally speaking it's still the responsibility of the person reusing the work that's engaged.</p>
","1342"
"Is OSI approval important for a license?","241","","<p>I've <a href=""https://opensource.stackexchange.com/a/26/65"">heard</a> an open source license described as ""popular and OSI-approved"". To that, <a href=""https://opensource.stackexchange.com/questions/19/very-permissive-license#comment23_26"">someone asks</a>:</p>

<blockquote>
  <p>Is OSI approval important?</p>
</blockquote>

<p>which is a great — and important — question in its own right. So, is OSI approval important, and if so, why? </p>
","<p>It's not that OSI (the <a href=""http://opensource.org/"" rel=""nofollow noreferrer"">Open Source Initiative</a>) is particularly magical or their blessing <em>required</em>, but that license proliferation is a problem, and the list of <a href=""http://opensource.org/licenses"" rel=""nofollow noreferrer"">OSI-approved licenses</a> helps solve this.</p>

<p>The OSI themselves released a <a href=""http://opensource.org/proliferation-report"" rel=""nofollow noreferrer"">proliferation report</a> about a decade ago, describing three main issues.</p>

<ol>
<li><p><strong>Too many options make it hard to choose a license.</strong> As we see <a href=""https://opensource.stackexchange.com/questions/19/"">here</a>, choosing a license <em>is</em> important, and an intimidating list may increase the barrier to choosing one at all.</p></li>
<li><p><strong>Licenses interfere with each other.</strong> Not all licenses are compatible. This makes it hard to mix and match code, and this scales badly as more licenses are added.</p></li>
<li><p><strong>It's hard to understand the overall combination of multiple licenses.</strong> In some ways, this is an extension of #2. Even if you do figure out how all of the licenses work together for <em>your</em> project, it's hard to communicate the total impact to your users. </p></li>
</ol>

<p>#2 and #3 are the big deals to me (partly coming from my perspective working in the Fedora Project, and partly coming as a long-time user of open source). Fedora tries to be very careful that our users can trust that the software we distribute is licensed correctly and can, in fact, be distributed. Every new license adds to the very real expense of analyzing the interactions. Take a look, for example, at Fedora's <a href=""https://fedoraproject.org/wiki/Packaging:LicensingGuidelines"" rel=""nofollow noreferrer"">packaging guidelines regarding licensing</a>, and then at the <a href=""https://fedoraproject.org/wiki/Licensing:Main"" rel=""nofollow noreferrer"">main licensing 
page for Fedora</a>. Maintaining this documentation is a considerable effort and expense — let alone actually <em>applying</em> it.</p>

<p>To this, I would add: <strong>writing a license is hard</strong>. While they may seem to be written in English, licenses are actually written in <em>legal code</em>, and various clauses which may seem clever to a  programmer may in fact present problems. Perhaps most famously, the clause ""The Software shall be used for Good, not Evil"" in the JSON license sends lawyers into a tizzy, and fair enough, because who gets to decide? — if my daughter were to be asked, she might include classroom testing software under ""evil"". Check out <a href=""https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Bad_Licenses"" rel=""nofollow noreferrer"">Fedora's list of ""bad"" licenses</a> for more examples.</p>

<p>The OSI list is quite large, and <em>something</em> from the list should cover all reasonable open source situations.</p>

<p>And finally, while ""open source"" does not enjoy trademark protection, if the open source community sticks to a reasonably strong definition, it helps prevent companies from calling software which does not respect user freedoms in a meaningful way by this label.</p>
","72"
"Flutter licence and involved dependencies","240","","<p>My company is very sensitive about using open source software. A small team started to group licences in three categories: green, yellow, red. </p>

<p><a href=""https://stackoverflow.com/questions/tagged/flutter"">Flutter</a> is a library to create native apps for ios and android. At github flutter list this <a href=""https://github.com/flutter/flutter/blob/master/LICENSE"" rel=""nofollow noreferrer"">license</a>. Since Flutter is written in dart the  <a href=""https://github.com/dart-lang/sdk/blob/master/LICENSE"" rel=""nofollow noreferrer"">license</a> and a <a href=""https://github.com/dart-lang/sdk/blob/master/PATENTS"" rel=""nofollow noreferrer"">patents</a> of the <a href=""https://github.com/dart-lang/sdk"" rel=""nofollow noreferrer"">dart-sdk</a> might also be relevant. </p>

<p>What is the right course of action to get an idea which license might be relevant if someone uses flutter?</p>

<h3>Update:</h3>

<p>I found a <a href=""http://haacked.com/archive/2006/01/26/WhoOwnstheCopyrightforAnOpenSourceProject.aspx/"" rel=""nofollow noreferrer"">Phil Haack blogged about Who Owns the Copyright for An Open Source Project</a> and this <a href=""https://www.wired.com/2012/02/cloudera-and-apache/"" rel=""nofollow noreferrer"">wired article Open Sourcers Drop Software Religion for Common Sense</a> points out that certain license can be the poison in the tree. An article from july 2016 pointed out that your <a href=""http://react-etc.net/entry/your-license-to-use-react-js-can-be-revoked-if-you-compete-with-facebook"" rel=""nofollow noreferrer"">reactjs license can be revoked</a>,<a href=""http://react-etc.net/entry/react-patents-facebook-license-faq-adoption-by-apple-and-microsoft"" rel=""nofollow noreferrer"">update</a>, the <a href=""https://news.ycombinator.com/item?id=12108158"" rel=""nofollow noreferrer"">discussion on hn</a>, a <a href=""https://code.facebook.com/pages/850928938376556"" rel=""nofollow noreferrer"">fb faq</a>. </p>

<p>The articles linked above and the comments here point out that the dependencies of a flutter app have to be considered as well. 
So although the flutter license may be permissive enough other rights (patents, copyright, license of dependencies) may still pose a legal risk. </p>

<p>Do you have any additional information about ""the licencse and right tree"" of the dependencies?</p>

<h3>Update 2</h3>

<p>After the reply from <a href=""https://opensource.stackexchange.com/users/5858/zimm-i48"">user zimm i48</a> i would like to elaborate my question.</p>

<p>My understanding is this <a href=""https://www.blackducksoftware.com/solutions/compliance"" rel=""nofollow noreferrer"">as soon as you are using an open source software you have to consider every dependency of the tree</a>. </p>

<p>So for instance</p>

<pre><code>  flutter   (?bsd 2 or 3?)
     flutter library 
        material-design-icons (Apache License Version 2.0)
     dart sdk (?BSD-2 clause?)
       dart io (no license file in github)
       dart collection (as above)
</code></pre>

<p>So far at least these licenses are involved </p>

<ul>
<li><a href=""https://opensource.org/licenses/BSD-2-Clause"" rel=""nofollow noreferrer"">BSD-2-Clause?</a> or BSD-3? for dart-sdk and flutter</li>
<li><a href=""https://github.com/google/material-design-icons/blob/master/LICENSE"" rel=""nofollow noreferrer"">Apache License Version 2 for material-design-icons</a></li>
</ul>

<p>What i am looking for is the whole license tree for every dependency of flutter.</p>
","<p>The file mentioned in that answer was generated by writing a script that actively seeks out every license in the source tree including all the dependencies. If you want to check out work (please do!) you can see the script here:
<a href=""https://github.com/flutter/buildroot/tree/master/tools/licenses"" rel=""nofollow noreferrer"">https://github.com/flutter/buildroot/tree/master/tools/licenses</a></p>

<p>The script goes really deep. It literally unzips every last jar file, for example, even those nested inside other archives. It includes the license for things like the standard C library that we use, which is often forgotten by people writing license crawlers.</p>

<h3>3rd party edit</h3>

<p>Ian gave an answer at stackoverflow as well. Here is his content from over there: </p>

<p>There's an API you can use to find the list of licenses you need to show in your application.</p>

<p>If you have a Drawer, just stick an AboutDrawerItem in it:
<a href=""https://docs.flutter.io/flutter/material/AboutDrawerItem-class.html"" rel=""nofollow noreferrer"">https://docs.flutter.io/flutter/material/AboutDrawerItem-class.html</a></p>

<p>If you don't but still use the material layer, call showAboutDialog or showLicensePage:
<a href=""https://docs.flutter.io/flutter/material/showAboutDialog.html"" rel=""nofollow noreferrer"">https://docs.flutter.io/flutter/material/showAboutDialog.html</a>
<a href=""https://docs.flutter.io/flutter/material/showLicensePage.html"" rel=""nofollow noreferrer"">https://docs.flutter.io/flutter/material/showLicensePage.html</a></p>

<p>If you want to roll your own, you can get the raw licenses from the LicenseRegistry:
<a href=""https://docs.flutter.io/flutter/foundation/LicenseRegistry-class.html"" rel=""nofollow noreferrer"">https://docs.flutter.io/flutter/foundation/LicenseRegistry-class.html</a></p>

<p>Your actual question seems to just be about what the actual list is. Flutter is split into two parts, the engine, which is shipped as a dynamically linked binary, and the Dart framework, which is shipped as a separate binary loaded by the first. The engine uses a lot of code with a wide variety of licenses, the complete list of which is here:
<a href=""https://raw.githubusercontent.com/flutter/engine/master/sky/packages/sky_engine/LICENSE"" rel=""nofollow noreferrer"">https://raw.githubusercontent.com/flutter/engine/master/sky/packages/sky_engine/LICENSE</a></p>

<p>The framework is entirely self-contained and so its license list is much shorter (just one license):
<a href=""https://github.com/flutter/flutter/blob/master/LICENSE"" rel=""nofollow noreferrer"">https://github.com/flutter/flutter/blob/master/LICENSE</a></p>

<p>In addition, any Dart packages you use may have their own licenses.</p>

<p>For what it's worth, most of the code used by Flutter's engine is the same code as has previously been used by Chrome, Dart, and Android. The list is quite long mostly because the code is so mature that it has copyrights from many years and we have been advised to include each such copyright with a separate copy of the applicable license.</p>
","4764"
"What license options do I have for licensing ported source code?","240","","<p>If, I port Ruby on Rails (licensed under MIT) from Ruby to Java what license options do I have? Would I have to use MIT or a compatible license?</p>
","<p>The conservative position is to assume that your port is a derived work of the original. If you consult a lawyer, you might be offered a more-or-less 'clean room' procedure to try to avoid this, but since you've already read the Rails code, it's probably too late for that unless you want to hire other people.</p>

<p>So you must choose a license that satisfies your obligations under the MIT license.</p>

<p>The good news is that the MIT license is extremely permissive. I believe that you have complete freedom to choose a license for your derived work.</p>

<p>The license includes:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>So, even if you choose a more restrictive license, you must give notice that the original was MIT-licensed.</p>
","1799"
"Can I use CodeProject code in a GPL project?","239","","<p>I have an open-source project that I originally wanted to license under MIT, but since I'm using a GPLv3 component that I can't quite get rid of (namely, the .g4 ANTLR grammar file that I'm using to generate a lexer/parser), I've been sort-of forced to distribute my project under GPLv3 as I understand anything that <em>touches</em> anything under GPLv3 needs to go under GPLv3 - I figured the ANTLR-generated code was a derivative of the grammar file, so the lexer/parser needs to be under GPLv3. Is that right?</p>

<p>So I'm distributing the project under GPLv3. And there's a [distinct] part of the project that's under MIT.</p>

<p>Now, I came across a piece of very useful code on someone's blog, a modified version of some code that was originally published under CPOL, so I figure the modified version is also under CPOL.</p>

<p>Can I even <em>use</em> that code? The CPOL explicitly forbids sublicensing, so I'm a bit lost as to what to do with this...</p>

<p><em>All I want is to give the original authors credit for their work - why does it have to be so complicated? /rant</em></p>
","<p>CPOL is not an open source license according to the <a href=""http://opensource.org/osd-annotated"">OSI definition</a>. It has a clause which does not allow it to be used for <em>any</em> purpose as mandated by the GPL or MIT license:</p>

<blockquote>
  <p>You agree not to use the Work for illegal, immoral or improper purposes, or on pages containing illegal, immoral or improper material.</p>
</blockquote>

<p>Neither the GPL or the MIT license force the user to agree to this. So by putting a CPOL work under either of these licenses, you remove this restriction against the will of the original author.</p>

<p>Although this clause is well meant, it is incompatible with any FSF or OSI approved license. That means it can not be incorporated into an open source project without making that project un-free.</p>

<p>All you can do is contact the original author and ask them if they license it to you under GPLv3.</p>
","1925"
"Open Source projects with encryption keys","237","","<p>I currently have a project which I'm planning in the not too distant future to open source on GitHub. </p>

<p>The question I have is regarding how open source projects are released if they have encryption keys. </p>

<p>Basically, the project consists of an Android app (not being open sourced) and a PHP API. </p>

<p>The PHP API can potentially send/receive confidential information such as authentication details. Obviously, the API should be run under HTTPS to offer some security, but on top of that, the Android app, will encrypt all the data, then once encrypted and it sends the request to the PHP API. The PHP API decrypts the request and then generates a response, which is then encrypted and the response is sent back to the Android app to decrypt and process. </p>

<p>The encryption between the Android app and the PHP API has a hard coded encryption key (I'm using 256 AES encryption). It doesn't seem right that this key is kept in the open source code as then if someone managed to find a way to do a man in the middle attack between the app and the API, they have the key, potentially exposing the user authentication details. </p>

<p>What's the recommended way for doing this? Should I just not offer encryption, and just rely on the user using HTTPS, and if they don't, it's their problem or is there an alternative method I could use?</p>
","<p>You should not include keys in your open source project. You should include a <em>file location</em> where your code <em>expects</em> a key, and the user (or an included utility) creates or copies their own unique key into the expected location. Imagine a thousand people download your project and stand up their own versions of your open-source server -- what's the point of having encryption if all of those servers are simply using the same key?</p>

<p>Including one specific encryption key is like drawing up a blueprint of a house that includes the specific tooth-sizes of the lock and key to the front door. It's completely the wrong approach: whenever a builder constructs a house from your blueprints, the builder should grab a totally new, unique lock and key and put that in the front door. It's not necessary that your blueprints specify an exact lock in your blueprints. It's merely important that the house <em>has</em> a lock; each separate construction project will supply its own lock.</p>

<p>Your own deployment of your open source server will have its own unique key, just like all other deployments that you don't control will have their own unique keys. The public, open-source project itself should have <em>no</em> key, because the entire point of a secret key is to keep it local to a particular deployment.</p>

<hr>

<p>That said, using encryption within HTTPS seems unnecessary. HTTPS is sufficient to keep the user's traffic private and unaltered -- that's the exact scope what HTTPS was designed to do. As for ""if they don't [use HTTPS] its their problem,"" simply <em>don't offer an unencrypted HTTP service</em> on your server.</p>

<p>Are you hoping to implement this as a kind of DRM to keep the traffic secret from the original user? If so, this will work about as well as any DRM, which is to say: it will work well enough for users who don't care about it, and not well enough to keep out tech-savvy users.</p>
","5649"
"Are licenses licensed or copyrighted?","234","","<p>Suppose I want to modify a license. Say I choose the MIT license:</p>

<blockquote>
  <p>..to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software,...</p>
</blockquote>

<p>and I would like to remove <code>publish</code> and add some restrictions.</p>

<p>Then change the name of the license.</p>

<p>Same question about disclaimers and terms of service, for instance, pick the Google terms of service and modify it to adapt to particular needs of a project.</p>
","<p>Yes, a license, or terms of service, are eligible for copyright.</p>

<p>The GPL itself, for example, is not available under a free license.</p>

<p>Your question is specifically about the MIT/expat license. This is a very simple license, and there are only so many ways you can express an idea in, especially in legalese.</p>

<p>When making a new license based on another one, and you want to avoid being a derivative work for copyright reasons, the best way to do that is with a <a href=""https://en.m.wikipedia.org/wiki/Clean_room_design"" rel=""nofollow noreferrer"">clean room design</a>.</p>

<p>The same goes for terms of service and the like.</p>

<p>That all said and done, there are several reasons why this may be a bad idea in the first place, detailed in <a href=""https://opensource.stackexchange.com/questions/1445/how-can-a-crayon-license-be-a-problem"">How can a &quot;crayon&quot; license be a problem?</a></p>
","2165"
"How Does The AGPL Apply To Javascript Libraries?","234","","<p>I have a web app that I sell.</p>

<p>It is a Java REST service with an AngularJS front end.</p>

<p>I want to use a Javascript library that is licensed under the AGPL but I don't understand the implications or if it is OK for me to use it. </p>

<p>Specifically, I don't understand the modifying/linking/usage parts and how it applies and what it applies to.</p>

<ul>
<li>I'm not modifying the library.</li>
<li>I am distributing the library inside my webapp rather than via a full url (external web access is not always available in this case)</li>
<li>My javascript code that calls the library is minified</li>
</ul>

<p>So the questions:</p>

<ul>
<li>Does the AGPL mean I have to distribute my source code that is using this library?</li>
<li>Do I have to include the source code of the Java part or just the Javascript part?</li>
<li>Since the user can see my Javascript in the browser does that count as distributing my source code?</li>
<li>Does it still count if it is minified since it doesn't match the source code in my repo?</li>
<li>Is there a matrix anywhere giving a short summary about what the common licences mean in different situations?</li>
</ul>
","<p>Most of your questions already have answers so I will just link to them:</p>

<ul>
<li><p><a href=""https://opensource.stackexchange.com/questions/4303/is-there-any-difference-between-the-gpl-and-agpl-for-code-executed-in-the-browse"">Is there any difference between the GPL and AGPL for code executed in the browser?</a> For code in the browser, there is no practical difference between GPL and AGPL 3.0. 
So yes, you have to distribute the JS source code when using this library.</p></li>
<li><p><a href=""https://opensource.stackexchange.com/questions/3960/if-a-part-of-the-client-side-code-is-licensed-under-gpl-does-the-server-side-co"">If a part of the client-side code is licensed under GPL, does the server-side code have to be under GPL as well?</a> You don't have to distribute the Java part (the server part) as the two are generally considered distinct works.</p></li>
<li><p><a href=""https://opensource.stackexchange.com/questions/4041/is-putting-a-page-with-javascript-in-it-considered-a-redistribution"">Is putting a page with javascript in it considered a redistribution</a> As you are mentioning, you are indeed distributing the library (but not as source code) thus you need to comply with the terms of the license (and distribute the non-minified version as well).</p></li>
<li><p>Yes, such a matrix exists: <a href=""http://choosealicense.com/appendix/"" rel=""nofollow noreferrer"">http://choosealicense.com/appendix/</a></p></li>
</ul>
","4443"
"What if a company uses my open source project for a closed-source system?","234","","<p>I have created an open-source project in github and R around financial calculations under GPL v3.</p>

<p>Today I saw in the traffic graph of github that someone cloned the repository and that there was a visit from this referring site: jira.""company name"".com</p>

<p>I researched a bit the ""company name"" and it seems that it is a financial technology company which sells non open-source systems.</p>

<p>So, it is apparent that they downloaded my software and even put a link to their jira system towards it.</p>

<p>I think that this is illegal, correct? How should I proceed so as to ask for a fee for the use of my software?</p>
","<p>No, cloning your GIT repository into their JIRA is not yet illegal.</p>

<p>Remember that the GPL only covers <em>redistribution</em>, not <em>use</em>. When they just want to look at it (maybe to check what the competition is doing) or use it internally, this is perfectly fine and within the coditions of the GPL. They can even change it for internal use without having to do anything.</p>

<p>But they start violating your copyright the moment they integrate your code into a non-GPL program <strong>and distribute</strong> this program to other parties. Unless you have good reason to believe that this is happening, you have no legal basis for doing anything against it. You might still want to keep an eye on them and wait if they announce a product which sounds suspiciously similar to yours.</p>
","2445"
"Does open source clothing exist?","233","","<p>Does open source clothing exists? With that I mean, do sewing patterns, tutorials or steering files for sewing and weaving machines, that are licensed as open source exist? Meaning these patterns, tutorials and steering files can be freely changed and redistributed? Is it even possible to open source clothing?</p>
","<p>Yes, open source sewing patterns exist, but there aren't many.  A search for ""creative commons sewing pattern"" yields several hits, and ""open source sewing pattern"" yields a few more.</p>

<p>I won't link them here because you can easily find them yourself.</p>

<p>EDIT: Here's an example:
<a href=""http://www.silverseams.com/opensource/"">www.silverseams.com/opensource</a>.  It's a blog so I can't guarantee that the link will be good forever.  Besides patterns it includes a rationale for using open source licensing for patterns.</p>
","1197"
"Is a newspaper a commercial activity in regard to CreativeCommons NC clause?","233","","<p>In a French newspaper from <a href=""http://www.lavoixdunord.fr/209143/article/2017-08-26/quelles-terres-restent-explorer-dans-notre-systeme-solaire"" rel=""nofollow noreferrer"">Sunday the 27th of August</a> <em>La voix du Nord</em>, a picture from <a href=""https://xkcd.com/1389/"" rel=""nofollow noreferrer"">xkcd</a> is reproduced in an article on page 39.</p>

<p>Not only the author is not quoted, which is an obvious violation of the BY clause. But I wonder if the NC clause is respected or violated in this case. </p>

<p>The news paper is not free of charge. Is it a commercial activity to publish something in an article? Are news papers exempt of the non-commercial clause of CreativeCommons?</p>
","<p>The article you reference obviously is lacking proper crediting at the minimum.
You should contact them so they can fix this alright. You should aslo alert them that they may need a proper authorization (which they may have already) from xkcd for a <a href=""https://xkcd.com/license.html"" rel=""nofollow noreferrer"">commercial usage</a></p>
","5915"
"How can I recover content from an open source project host that has shut down?","231","","<p>Codehaus shut down earlier this year. Many projects that were hosted there, including JIRA pages like <a href=""https://jira.codehaus.org/browse/MASPECTJ-131"">this one</a>, are now broken.</p>

<p>What can I do to access all the lost content of projects that were hosted in Codehaus, such as bug reports? Was it uploaded/dumped somewhere?</p>

<p>Further, since Google Code is also shutting down, a similar problem will probably show up soon. What can be done to prevent the loss of important information like bug reports and wiki pages?</p>
","<p>You can recover that specific link via the way back machine:<br>
<a href=""http://web.archive.org/web/20150507060802/http://jira.codehaus.org/browse/MASPECTJ-131"" rel=""noreferrer"">http://web.archive.org/web/20150507060802/http://jira.codehaus.org/browse/MASPECTJ-131</a>  </p>

<p>codehaus says from their termination page that you can redirect your projects:  </p>

<blockquote>
  <p>If you would like your projects links redirected then please see our redirector repository - create a sane squashed pull request and it will be added to the redirection system - you may add some 302s initially, but ultimately all redirects will be amended to 301s over time.</p>
</blockquote>

<p><a href=""https://www.codehaus.org/termination/"" rel=""noreferrer"">https://www.codehaus.org/termination/</a>  </p>

<p>In regards to google code shutting down, as well as codehaus, short term solution would be to switch to GitHub; however that poses the same problem(s)/risk(s) that you are running into now.  </p>

<p>I'm a believer in owning your data - I would suggest setting up your repos on servers and domains that you own.</p>
","16"
"What is Open Knowledge, and how is it different from Open Data?","230","","<p>According to the <a href=""http://opendefinition.org"">Open Definition</a>:</p>

<blockquote>
  <p>“Open means anyone can freely access, use, modify, and share for any purpose (subject, at most, to requirements that preserve provenance and openness).”</p>
</blockquote>

<p>Open Data is hence, any data that is open, according to this definition. So, then this leads me to the question: What is Open Knowledge, and how is it different from Open Data?</p>
","<p>According to the <a href=""http://okfn.org/opendata"" rel=""nofollow"">Open Knowledge Foundation</a>...</p>

<blockquote>
  <p><strong>Open Knowledge is what open data becomes when it’s useful, doable, and used.</strong></p>
</blockquote>

<p>So then what does this mean? The foundation goes on to list three key points about “openness”</p>

<blockquote>
  <p>Open data are the building blocks of open knowledge. <strong>Open knowledge is what open data becomes when it’s useful, usable and used.</strong></p>
  
  <ul>
  <li><strong>Availability and Access</strong>:  the data must be available as a whole and at no more than a reasonable reproduction cost, preferably by downloading over the internet. The data must also be available in a convenient and modifiable form.</li>
  <li><strong>Reuse and redistribution</strong>: the data must be provided under terms that permit reuse and redistribution including the intermixing with other datasets. The data must be machine-readable.</li>
  <li><strong>Universal Participation</strong>:  everyone must be able to use, reuse and redistribute — there should be no discrimination against fields of endeavour or against persons or groups. For example, ‘non-commercial’ restrictions that would prevent ‘commercial’ use, or restrictions of use for certain purposes (e.g. only in education), are not allowed.</li>
  </ul>
</blockquote>

<p>Generally, we refer to data as being of a certain situation, and knowledge when many agencies and groups of the public recognize and understand this data. The information is useful, available, and open to the public for their private or commercial use.</p>

<p>Take a <a href=""http://hdr.undp.org/en/2014-report"" rel=""nofollow"">United Nations Human Development Report as an example</a>:</p>

<ul>
<li><em>It’s easily available</em><br>
The report is literally a click away from being in your hands. There’s no access restrictions put into place by the UN Development Programme. The PDF document is easy to read, access and index.</li>
<li><em>You can share and redistribute these reports</em><br>
According to the <a href=""http://hdr.undp.org/en/content/copyright-and-terms-use"" rel=""nofollow"">Terms Of Use</a>, the content is licensed under the <a href=""http://creativecommons.org/licenses/by/3.0/igo/"" rel=""nofollow"">Creative Commons International Organizations License</a>. It says that you’re allowed to share the information, and adapt, or build upon it for any purpose.</li>
<li><em>It’s available for any use</em><br>
The license goes on to say that you can use the data, even commercially. I’ve used these reports many times, particularly in my school research projects in a multitude of subjects, such as English, Geography and the like. The UN Development Programme doesn’t restrict or discriminate under anyone, and everyone can freely use it.</li>
</ul>

<p>These development reports are a perfect example of Open Knowledge.</p>

<p>A few examples of things that aren’t Open Knowledge:</p>

<ul>
<li>The crumpled up note that you secretly passed with your girlfriend at school earlier today.</li>
<li>That super secret document you gave to your boss about your company’s newest, fanciest phone that will beat Apple's iPhone and Samsung's whatever phone they have.</li>
<li>The game article you sent to the newspaper the other day, only allowed for use for educational purposes.</li>
<li>The prescription numbers of your recently acquired glasses</li>
</ul>
","882"
"Can Apple require users to accept the Xcode/iOS license to use git?","228","","<p>After launching an upgrade of XCode on a MacOS Sierra, calling <code>git</code> in a
terminal suprisingly results in:</p>

<pre>
$ git


Agreeing to the Xcode/iOS license requires admin privileges,
please re-run as root via sudo.


</pre>

<p>and the command quits. This happens no matter what option git is given, including none or <code>--version</code>. The command used to work normally before this upgrade.</p>

<p>I don't see how it's legit to do that. According to <a href=""https://github.com/git/git/blob/master/README.md"" rel=""nofollow noreferrer"">git README</a>:</p>

<blockquote>
  <p>Git is an Open Source project covered by the GNU General Public License version 2
  (some parts of it are under different licenses, compatible with the GPLv2)</p>
</blockquote>

<p>This git binary is located in MacOS <code>/usr/bin</code>, so it's from
Apple as far as I can tell.  </p>

<p>EDIT: once the license is agreed upon, <code>git --version</code> confirms it:</p>

<pre><code>git version 2.10.1 (Apple Git-78)
</code></pre>

<p>It seems to me that forcing users to accept an incompatible license to be able
to use a GPL software contradicts the GPL, for instance section 2b or section 6:</p>

<blockquote>
  <blockquote>
    <ol start=""2"">
    <li>b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.</li>
    </ol>
  </blockquote>
  
  <ol start=""6"">
  <li>Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the
  original licensor to copy, distribute or modify the Program subject to
  these terms and conditions.  <strong>You may not impose any further
  restrictions on the recipients' exercise of the rights granted
  herein</strong>. You are not responsible for enforcing compliance by third
  parties to this License.</li>
  </ol>
</blockquote>

<p>I assume that Apple has technically tied <code>git</code> (and I believe other free-licensed command line tools) to its <code>Xcode</code> closed-source product (which I
don't really know or use directly, I develop with Qt which depends on it), in a way that you can't use them until you accept the license of what they see as the ""main product"", the container.</p>

<p><strong>Does that practice effectively violate the GPLv2?</strong></p>

<hr>

<p>Related questions on <a href=""https://apple.stackexchange.com/"">https://apple.stackexchange.com/</a></p>

<ul>
<li><a href=""https://apple.stackexchange.com/questions/206199/git-is-broken-agreeing-to-the-xcode-ios-license-requires-admin-privileges-ple"">git is broken: “Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo”</a></li>
<li><a href=""https://apple.stackexchange.com/questions/93002/how-to-properly-update-git-on-mac"">How to properly update git on mac?</a></li>
</ul>

<hr>

<p><strong>About <code>strings</code> applied to the binary</strong>: <code>strings /usr/bin/git</code> on MacOS curiously doesn't produce anything, but the <code>strings</code> commands from linux <code>binutils</code> extracts  94 lines from it, which are mostly related to Apple and licensing. </p>

<p>Those that consist of readable text are essentially:</p>

<pre>
com.apple.git
com.apple.git
Apple Inc.1&0$
Apple Certification Authority1
Apple Root CA0
Apple Certification Authority1301
*Apple Code Signing Certification Authority0
https://www.apple.com/appleca/0
Reliance on this certificate by any party assumes acceptance of the then applicable standard terms and conditions of use, certificate policy and certification practice statements.0
*Apple Code Signing Certification Authority0
Apple Inc.1
Apple Software1
Software Signing0
)http://www.apple.com/certificateauthority0
</pre>

<p>It seems that this binary (which is very small: 18KB) is only about checking the license stuff, and then it launches another binary which would be the real <code>git</code>. I could not <code>dtruss /usr/bin/git</code> (permission problems), but there's a 1.8MB <code>/Library/Developer/CommandLineTools/usr/bin/git</code> that seems to be the real thing.</p>
","<p>Apple is generally very good at being on the verge of legality regarding open source / free software. And they have enough lawyers so that I would be really surprised if one found a clear violation.</p>

<p>You might be aware that section 2b that you cite talks about derivative works but does not prevent ""mere aggregation"" in a collection of software. It could very well be that when you are calling the command <code>git</code>, you think that you are calling the program that you are used to but in fact are calling some command developed by Apple which asks you to agree with the license of the Xcode/iOS collection before effectively calling the real software. This would not be a modification of git and therefore would not be a violation.</p>

<p>EDIT: this seems to be confirmed by the information you added to your question:</p>

<blockquote>
  <p>It seems that this binary (which is very small: 18KB) is only about checking the license stuff, and then it launches another binary which would be the real git. I could not dtruss /usr/bin/git (permission problems), but there's a 1.8MB /Library/Developer/CommandLineTools/usr/bin/git that seems to be the real thing.</p>
</blockquote>

<p>You could try to add <code>/Library/Developer/CommandLineTools/usr/bin/</code> in the front of your <code>$PATH</code> to confirm that you can use the real command without agreeing to any license.</p>

<p>END OF EDIT</p>

<p>As for section 6, I am sure that Apple complies with this by providing all the required information somewhere (on your machine). It does not effectively imposes further restriction on the use of the software because they very likely provide the source somewhere and you can compile this source yourself and use it without agreeing to any license.</p>

<p>Finally, this is not really related to this question but I think you can also install git in various other ways on a Mac. For instance via homebrew I suppose (but I'm not a Mac person).</p>
","4969"
"How to accept contributions for AGPL / proprietary dual-licensed projects?","228","","<p>Supposed I have written a software that I offer using a dual-license model, using AGPLv3 as OSS license, and a proprietary one as commercial (closed) license.</p>

<p>Now, let's assume somebody wants to contribute something to the software. What do I have to watch out for if I want to be able to use the contribution for the AGPL as well as for the proprietarily licensed code?</p>

<p>In other words: What should I point out in my CLA? Do I need any other contract with the contributor? What are the typical pitfalls to watch out for?</p>
","<blockquote>
  <p>In other words: What should I point out in my CLA? Do I need any other contract with the contributor? What are the typical pitfalls to watch out for?</p>
</blockquote>

<p>In order to offer both licenses, you would need to be and stay the primary or sole copyright holder. You would effectively need a CLA where contributors grant you enough rights to relicense using both licenses or assign the copyrights to you. You would not be able to accept contributions under the AGPL license.</p>

<p>An example would be the <a href=""https://www.mongodb.com/legal/contributor-agreement"" rel=""nofollow"">MongoDB CLA</a>.</p>

<p>On a side note, this would create some really weird asymmetry and might be a strong deterrent to any community contribution. Something that I would likely not use.</p>
","4215"
"Using a GPL V3 library in a Android app published on Google Play, do I need to release the application's source code?","228","","<p>I'm in a situation where I'm considering using a GPL V3 library in a module of an Android application.</p>

<p>The application will be published to Google Play and will be available for free download.</p>

<p>My question is: does using/including the GPL V3 library in my application's source code, obligates me to disclose the whole source code of the application?</p>
","<p>It depends how you are using this GPL library. If you are calling functions from this library in your code, then in general the GPL would apply to the calling code and therefore your calling code would be subject to the GPL terms, including source code redistribution per this <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc/4315#4315"">answer</a>:</p>

<blockquote>
  <p>For Copyleft licenses, how (proprietary- or non-Copyleft- licensed) programs and Copyleft-licensed programs are used together, how they depend and interact with each other is the essence of what triggers the Copyleft clauses of the GPL and LGPL.</p>
</blockquote>

<p>If you are instead running this as an independent unmodified tool such as a command line that would be spawned in its own process (I am not sure this is possible on Android FWIW), then you may be using the program (as oppsoed to be based on the program) and only doing a side-by-side redistribution: the GPL would apply to the GPL-licensed library and may not extend to your code. </p>
","4841"
"Will a dual license lock me in to a provider?","228","","<p>I want to use open source software for my business, and it is dual licensed. If I choose the paid license which provides support for any changes we require, will this mean that we are unable to change to a different support provider in future?</p>

<p>In <a href=""http://www.pcadvisor.co.uk/news/software/analysis-the-big-problems-with-open-source-3224021/"">this article</a> I was concerned by the following suggestion:</p>

<blockquote>
  <p>Some vendors operate on a 'dual-licence' business model, in which customers can buy a license to get access to the vendor's support team or to extra features and extensions for the core software, such as management tools.</p>
  
  <p>According to Mark Driver, an analyst at Gartner, the overwhelming majority of commercial open-source efforts today are based on a dual-licence model.</p>
  
  <p>Customers should know, he says, that with this option, ""the open-source-ness of the product comes into question"".</p>
  
  <p>While open-source software licences cost less than commercial software licences, they include terms and conditions that restrict your use and lock you into a vendor.</p>
</blockquote>

<p>Was this a valid concern at the time the article was written (2010) and does it still apply to dual licensed software today?</p>
","<p>When you use the open source version, you can ask any 3rd party vendor you consider qualified for support. The original licensor can't prevent anyone from offering advise, and the right to fork gives 3rd parties the right to make any changes you want.</p>

<p>However, be aware that:</p>

<ul>
<li>Trademark laws might make it difficult for 3rd parties to advertise their support services, so you might have issues finding a provider even though they are on the market.</li>
<li>Nobody knows the software as well as those people who developed it, so you <em>might</em> get higher quality support from the original company (your mileage may vary).</li>
<li>Bugfixes and features you request from the original vendor might find their way into the mainline of the product, so there won't be any issues with them in future versions. But any modifications on your private fork made by a 3rd party contractor likely won't. That means your private fork will diverge and the maintenance overhead to apply the updates from upstream will increase.</li>
</ul>

<p>Another issue which might prevent you from switching to the free version in the first place is when the proprietary version comes with extra features not included in the free version, and you grow too dependent on these tools.</p>
","531"
"Can you open source a virus/exploit?","226","","<p>Is it fine to open source a virus, exploit or any other potential dangerous software (if used in the wrong way)?</p>

<p>If so, are there any limitations/circumstances when you can't? Does it depends on the country law?</p>
","<p>In some countries it is illegal to develop viruses and other malware. It usually does not matter if open- or closed source.</p>

<p>When you are in such a country, you can of course release your software under an open source license anonymously to avoid legal repercussions. But considering that you have no way to legally defend your license without giving up your anonymity and facing charges yourself, your license terms can not be enforced. Also, the people who would violate your license are likely also criminals according to far more jurisdictions (<em>developing</em> malware might not be illegal everywhere, but <em>using it to intentionally steal data, sabotage systems etc.</em> likely is), so they have lots of other reasons to not get identified.</p>

<p>That means any malware you publish is effectively public domain.</p>

<p>Otherwise, there is nothing which stops you. One of the most important aspects of the OSI open source definition and the FSF free software definition is that there must be no restrictions on what purposes the software can be used for. This includes illegal activity (both OSI and FSF have denied their approval for software which had terms like ""this software should not be used for evil"").</p>
","1671"
"What does the 'right to fork' mean?","226","","<p>Sometimes in regards to open source/free software I read about a 'right to <a href=""https://en.wikipedia.org/wiki/Fork_(software_development)"">fork'</a>. What does it mean? Why is it relevant? Does all open source support this right?</p>
","<p>The right to fork refers to <a href=""https://en.wikipedia.org/wiki/Fork_(software_development)"">forking</a> as in taking a software project and maintaining it separately from the original. Having the right to fork a work means having the right to modify your own copy. In the context of freely distributable works, the right to fork means having the right to redistribute modified copies.</p>

<p>The practical importance of the right to fork is that is you don't like the way the original author maintains the work (not fixing the bugs that bother you, not adding the features you wany, etc.) then you can do what you like with your own copy. Having the source (i.e. the prefered form of modification) is critical there, since it is the only practical way to fork a work. A right to fork without having the practical means to make use of it, i.e. having the source, would not be very useful.</p>

<p>The combination of being allowed to and able to modify the source and the right to redistribute allows anyone who's interested to take up maintenance. This is a guarantee that free software and other open source works won't die as long as someone somewhere, anywhere, is willing and able to take up maintenance. It's also a guarantee that if someone dislikes the way the project is maintained, they can make their own version if they're willing and able to invest the requisite effort or get someone to do it.</p>

<p>All libre/free/open-source licenses grant the right to fork. This is sometimes known as the “fork test” for software license. It is freedom 1 in the <a href=""http://www.gnu.org/philosophy/free-sw.en.html"">Free Software Definition</a>, guideline 1 in the <a href=""https://www.debian.org/social_contract#guidelines"">DFSG</a>, clause 1 in the <a href=""http://opensource.org/osd-annotated"">Open Source Definition</a>.</p>
","349"
"LGPL static linking","225","","<p>I know there are already many other questions asked about LGPL requirements, but none of those did match my case  </p>

<p>I want to distribute a free application which uses a LGPL-licensed library (Qt)  </p>

<p>Assuming I linked statically, do I have to supply the sources with the application? If yes, is a link to a repository (GitHub) enough?<br>
And where should I mention the application is LGPL-licensed? Is a simple ""About"" window with the default snippet enough? Or do I have absolutely to include a LICENSE file?</p>
","<blockquote>
  <p>Assuming I linked statically, do I have to supply the sources with the application? </p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>If yes, is a link to a repository (GitHub) enough?</p>
</blockquote>

<p>It may be if this is the LGPL 3 and the link is provided at the same time as the the application is downloaded and the links point to the exact version of the corresponding source code for your app and QT and that it is under your control. Otherwise it may not be enough.</p>

<blockquote>
  <p>And where should I mention the application is LGPL-licensed? Is a simple ""About"" window with the default snippet enough?  Or do I have absolutely to include a LICENSE file?</p>
</blockquote>

<p>Yes, you have to include the license file.</p>
","5388"
"How does the BSD 2-Clause License copyright notice work?","224","","<p>I'm currently developing software which I later want to distribute. The software itself is open source and makes use of the MIT license.</p>

<p>Now, here is the problem: I use one library which is licensed under the <a href=""https://opensource.org/licenses/BSD-2-Clause"" rel=""nofollow noreferrer"">BSD 2-Clause</a> and requires me to include the relevant copyright notice. Unfortunately I couldn't find out what this actually means.</p>

<p>Do I have to include the entire license in my GitHub repository? Do I have to credit the developer in my README? If so, do I have to credit only the main dev or the whole team? In the case of me distributing the software commercially, can the developer take back my rights to do so?</p>
","<p>It's always a good idea to include copyright information when using someone else's work. I'm not a lawyer, but here is my understanding:</p>

<blockquote>
  <p>Do I have to include the entire license in my GitHub repository?</p>
</blockquote>

<p>It depends. If you upload the source or binary of this third party library into your GitHub repository, then the answer is yes. If you are not uploading this third party library to GitHub, then you do not have to include their license in your repository. If you end up distributing the combined overall work (their library and your project), then the 2-clause BSD License says you must list the copyright information and the terms and conditions of the license. This information is usually found in a ""COPYING"" or ""LICENSE"" file.</p>

<blockquote>
  <p>Do I have to credit the developer in my README?</p>
</blockquote>

<p>You don't specifically have to credit the developer in a ""README"" file, but you must include their copyright information somewhere if you decided to send that third party library (in either source or binary form) to somebody else. In that case, I would suggest putting all copyright information in a file named ""COPYING"" or ""LICENSE"". Note that providing this copyright information is essentially giving them credit.</p>

<blockquote>
  <p>If so do I have to credit only the main dev or the whole team?</p>
</blockquote>

<p>If you distribute their work, you should credit everyone that has worked on the project, unless they have explicitly forfeited their copyright.</p>

<blockquote>
  <p>In the case of me distributing the software commercially, can the developer take back my rights to do so?</p>
</blockquote>

<p>I don't believe the developer can take back your rights to distribute the software that they licensed under the BSD 2-clause. However, they could choose to change their license (e.g. make it proprietary) on any future modifications/releases of their software. This doesn't mean that you must stop using the software you already have, but it could mean that you might not have the permissions/rights to any future updates.</p>
","5886"
"What are the attribution requirements of the AGPL license?","224","","<p>I'm currently looking at implementing a file sharing solution for a customer.  I'd like to base it on one of the many currently-available solutions, many of which are AGPL licensed.</p>

<p>However, I've found these AGPL applications tend to be dual-licensed as commecial software, and the AGPL edition has license terms seemingly designed to discourage use.</p>

<p>Let's look at Pydio as an example.  <a href=""https://pydio.com/forum/f/topic/kindly-help-me-to-edit-footer-text/"" rel=""noreferrer"">They insist</a> that the main interface has the text string ""Pydio Open Source File Sharing - Free / Non-Supported Edition"" on every page.</p>

<p>They do not allow any other method of crediting them, either via different phrasing (the term non-supported scares customers), or a different location (say, a license info window that pops up when you click ""Pydio Community Edition"").</p>

<p>Is requiring this specific text an AGPL compatible license term? <a href=""https://github.com/pydio/pydio-core/blob/develop/LICENSE"" rel=""noreferrer"">Their license is here</a>. </p>

<p>If so must all derivative works credit in the exact manner the author requests?  Even if they only make use of a portion of the code?</p>
","<p>This is a detailed analysis, but note that I am not a lawyer, cannot give you reliable advice, and am only looking at the terms of the AGPL, not at relevant law in your jurisdiction.</p>

<p>Companies that publish a “community edition” under the AGPL routinely interpret that license more restrictively than sensible. This is understandable since they are protecting their revenue model.</p>

<h2>What is Pydio asking you to do?</h2>

<p>Their LICENSE file only includes the AGPLv3 but no additional terms. The source code includes no obvious notices.</p>

<p>In the <a href=""https://pydio.com/en/docs/faq"">Pydio FAQ</a>, they ask that the copyright notice be kept:</p>

<blockquote>
  <h3>Can you explain me the AGPL V3 licensing ? Can you validate my use of your AGPL Software ?</h3>
  
  <p>Unfortunately, we can not give legal advice on AGPL licensing. We suggest you to seek legal advice.</p>
  
  <h3>Can I modify and/or integrate Pydio inside my open-source software?</h3>
  
  <p>As long as your software license is compatible with the AGPL, that the modifications are contributed back to the community, and that you leave the Pydio copyright link on the user interface, yes you can.</p>
  
  <h3>Can I use Pydio for free on my website, as a company?</h3>
  
  <p>As long as you do not modify Pydio deeply (modifications like theming or little tweaks are not taken into account), and as long as you leave a link to the source code (i.e. to this website, except if you want to host the source code on your own website) on the user-interface (this is the particularity of AGPL against GPL), yes you can.</p>
  
  <p>For example, if you change the logo of the splashscreen (using the gui.ajax plugin options) and let the « Pydio Community - Free non supported version © C. du Jeu 2008-2016 - <a href=""https://pydio.com"">https://pydio.com</a> » mention, this will be ok. If you want to remove this reference, you should contact us.</p>
</blockquote>

<p>In the forum thread you linked, <a href=""https://pydio.com/forum/f/topic/kindly-help-me-to-edit-footer-text/#post-59711"">an author advises an user</a>:</p>

<blockquote>
  <p>According to the AGPL license, please leave this mention untouched.</p>
</blockquote>

<p>Similar, <a href=""https://pydio.com/forum/f/topic/how-to-update-the-bottom-right-corners-details/#post-60958"">here</a>:</p>

<blockquote>
  <p>You are not supposed to remove the copyright mentions, nor the “by Pydio”. It’s part of the AGPL license.</p>
</blockquote>

<p>In another post, someone who seems to be involved with Pydio <a href=""https://pydio.com/forum/f/topic/community-edition-license-text-change/#post-107951"">tells</a>:</p>

<blockquote>
  <p>It is my understanding, that removing a copyright mention is infringing on copyright, especially since our Enterprise license exists to give you the right to do exactly that.</p>
</blockquote>

<h2>Analysis of their claims</h2>

<p>The AGPLv3 defines the concept of an Appropriate Legal Notice:</p>

<blockquote>
  <p>An interactive user interface displays ""Appropriate Legal Notices"" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>
</blockquote>

<p>It seems Pydio is relying on this mechanism to enforce the presence of their notice. It:</p>

<ul>
<li>mentions the copyright,</li>
<li>clumsily mentions the lack of warranty (“non supported version”), and</li>
<li>very indirectly points to the source code and license by providing a link to the project homepage.</li>
</ul>

<p>However:</p>

<ul>
<li><p>They are not directly informing users of their rights under the AGPL. The Pydio home page doesn't even mention the license. The only directly user-visible mention of the AGPL seems to be inserted by some JavaScript code related to some progress bar (<a href=""https://github.com/pydio/pydio-core/blob/6ab4db731abdcfdbf76f410f7ec87ee9c1658737/core/src/plugins/gui.ajax/res/js/ui/prototype/class.AjxpBootstrap.js""><code>/core/src/plugins/gui.ajax/res/js/ui/prototype/class.AjxpBootstrap.js</code></a>), and that isn't even a link. As such, I'd contest whether this constitutes an Appropriate Legal Notice that would be protected from user-edits.</p></li>
<li><p>They ask that the notice is not removed, even though the AGPL explicitly allows supplying the notice through a menu item. This restriction to keep the notice in the footer of each page definitively goes beyond the AGPL.</p>

<p>Technically, Pydio does not ask you to keep the notice <em>there</em>, they just ask you to keep the notice.</p></li>
</ul>

<p>While copyright notices are not required to assert copyright, it is probably correct that they should not be falsified or changed to wrongfully claim copyright.</p>

<h3>What does the AGPL actually require?</h3>

<p>If you modify Pydio or create a work based on Pydio (a “covered work”), this covered work will also have to be AGPL-licensed. This includes your complete website. Section 13 makes it clear that <strong>the AGPL likely requires you to make your website source available to all users:</strong></p>

<blockquote>
  <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.</p>
</blockquote>

<p>In general, this offer would be grouped with other legal information on a separate page or in a settings menu. However, for a website I'd recommend that this offer is mentioned on every page (ideally, you are always just two clicks away from the source code or the license). A short text that links to the separate page would be appropriate in every footer:</p>

<blockquote>
  <p>Copyright 2017 your-organization. All rights reserved. Source code available under the AGPL.</p>
</blockquote>

<p>In particular, note that the source code powering a website, the content of a website, and the look and feel of a website might be copyrighted/licensed/trademarked differently. For example Stack Exchange (which is in the reverse situation: proprietary engine, proprietary look and feel, but open user contributions) makes this very clear:</p>

<blockquote>
  <p>site design / logo © 2017 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required</p>
</blockquote>

<p>The Pydio copyright notice does not have such distinction and could erroneously invoke the impression that they would own copyright to the contents of your site. It is perfectly understandable and within your rights that you want to avoid this.</p>

<p>Since your website would be based on Pydio, the corresponding source for your website would include Pydio. This also applies to the case where you modify or fork Pydio. By notifying your users in accordance with the AGPL that your website is AGPL-licensed, you satisfy the requirement of notifying your users that Pydio is AGPL-licensed.</p>

<p>Since we must make the source code available, this involves “conveying modified source versions” and section 5 applies. There are some requirements:</p>

<blockquote>
  <p>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</p>
  
  <p>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to ""keep intact all notices"".</p>
  
  <p>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. […]</p>
  
  <p>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; […]</p>
</blockquote>

<p>Point a) could actually be understood as a <em>requirement</em> to update that copyright notice.</p>

<p>This also raises two questions:</p>

<ul>
<li>Are there any Appropriate Legal Notices that must be displayed?</li>
<li>Are there “applicable section 7 additional terms”?</li>
</ul>

<p>Since this is not entirely clear, I would rather be careful. For the sake of the argument, I'll consider the copyright string they insert into every page as an Appropriate Legal Notice and would therefore recommend to continue displaying it.</p>

<p>However, I see no reason to keep the manner in which they are displaying the notice. In fact, such a copyright notice on every page would be confusing. It would be better to list it together with other licenses in a dedicated page. This is similar to how most programs deal with open source licenses (e.g. in Firefox, the “About Firefox” dialogue links to about:license, which lists all libraries with their copyright notices and licenses. This seems to be compatible with putting the Appropriate Legal Notices into a menu item).</p>

<p>So, does Pydio come with additional terms? Additional terms to the AGPL may be additional permissions, which is not relevant here. Alternatively, the relevant copyright owner may add terms:</p>

<blockquote>
  <p>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</p>
  
  <p>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</p>
  
  <p>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</p>
  
  <p>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</p>
  
  <p>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</p>
  
  <p>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</p>
  
  <p>[…] If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p>
  
  <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>
</blockquote>

<p>Most of these points do not apply here, but b) allows terms to be added “requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it”.</p>

<p>However, <strong>the Pydio LICENSE and source code does not contain or mention any such extra terms. Any references to the requirement of maintaining that weird copyright string are either hidden in the project FAQ or in forum discussions. They would not be apparent when only looking at the Pydio source.</strong> The claim that the AGPL in itself requires you to allow the Pydio copyright notice to be injected into every page is most likely false.</p>

<p>It is also questionable whether that specific string would qualify as an appropriate legal notice or a reasonable legal notice or an author attribution in the sense of the AGPL. After all, some additional terms may conflict with the AGPL in which case they may be ignored – the list quoted above is an exhaustive list of allowed additional terms, as far as they aren't exceptions to other requirements in the AGPL.</p>

<p>It would therefore be <em>technically</em> OK to move that copyright notice to a less intrusive place, but it is clearly against the author's intention – it seems they accidentally misapplied the AGPL with regards to this notice and forgot to specify any additional terms under AGPL section 7. Instead, the only license specified is AGPL, without any additional terms.</p>

<p>If you follow the license as-is and exercise your right to remove the string, you will run into two risks:</p>

<ul>
<li>legal action against you by the copyright holder, which is expensive and annoying for you and your client even if you did not violate the license.</li>
<li>lack of support by the Pydio community.</li>
</ul>

<p>It may therefore be wise to respect this wish anyway, or to at least move their notice to a more convenient but still well-visible place in your page layout, since that would satisfy the <em>intention</em> of the Pydio notice.</p>

<h2>How would I add additional terms to an AGPL-licensed project?</h2>

<blockquote>
  <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the ""copyright"" line and a pointer to where the full notice is found.</p>

<pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
</code></pre>
</blockquote>

<p>This note, not the document containing the AGPL full text, is the relevant license of the program! To add extra terms, append them to this license note, e.g.:</p>

<pre><code>Additional terms under GNU AGPL version 3 section 7:

&lt;extra terms&gt;
</code></pre>

<p>It should go without saying that these extra terms should be written by a copyright lawyer.</p>

<p>Such extra terms are common in C or C++ libraries that make an exception for header code, since the code in headers is compiled into dependent programs. Adding extra terms is rarely seen, since complying with extra terms requires substantial additional effort by licensees.</p>
","4988"
"Can I use the MIT license if I use Font Awesome (SIL OFL)?","223","","<p>I have a project in which I included libraries of:</p>

<ul>
<li><strong>Bootstrap</strong> v3.3.7 (<a href=""http://getbootstrap.com"" rel=""nofollow noreferrer"">http://getbootstrap.com</a>) <em>Licensed MIT</em> </li>
<li><strong>jQuery</strong> v1.11.2 (<a href=""https://jquery.org/license/"" rel=""nofollow noreferrer"">jquery.org/license</a>) <em>Licensed MIT</em></li>
<li><strong>jQuery UI</strong> v1.11.2 (<a href=""http://jqueryui.com"" rel=""nofollow noreferrer"">http://jqueryui.com</a>) <em>Licensed MIT</em> </li>
<li><strong>jQuery Validation Plugin</strong> v1.11.1 (<a href=""https://github.com/jzaefferer/jquery-validation"" rel=""nofollow noreferrer"">https://github.com/jzaefferer/jquery-validation</a>) <em>Licensed MIT</em> </li>
<li><strong>Tingle</strong> v0.11.0 (<a href=""https://github.com/robinparisi/tingle"" rel=""nofollow noreferrer"">https://github.com/robinparisi/tingle</a>) <em>Licensed<br>
MIT</em> </li>
<li><strong>Font Awesome</strong> 4.7.0 (<a href=""http://fontawesome.io"" rel=""nofollow noreferrer"">http://fontawesome.io</a>) Font: <em>SIL OFL 1.1</em>,<br>
CSS: <em>MIT License</em></li>
</ul>

<p>I am considering making the source public in a Bitbucket repo. But the question is: can I use the MIT license for my project? (All of them are MIT but the fonts of Font Awesome.)</p>
","<p>Yes, the <a href=""http://scripts.sil.org/cms/scripts/page.php?item_id=OFL_web"" rel=""nofollow noreferrer"">SIL OFL license</a> grants you permission to redistribute those fonts. Remember, when you license your code (e.g. by placing a LICENSE.txt file in the root directory), you are only licensing <em>your</em> code of which you own the copyright. You do not own the copyright on any of the other libraries. Those libraries and fonts allow you to distribute them as you wish but are not giving you ownership of their copyright. To comply with their license, you must include each of their copyright notices in your repo (e.g. inside their respective folders or in the <code>LICENSE.txt</code> file, clearly stating which folder is covered by which copyright).</p>
","5743"
"What would be an EULA for an open source software?","221","","<p>As the answer written here: <a href=""https://opensource.stackexchange.com/questions/2865/does-open-source-software-need-an-eula-to-protect-the-developer"">Does Open Source Software need an EULA to protect the developer?</a>, the use of the software is not covered by the open source license.</p>

<p>So, what would be a simple eula for open source software?</p>

<p>And, is there a bank of eula samples on internet?</p>
","<p>The very answer you linked states:</p>

<blockquote>
  <p>You don't need a EULA to protect yourself as a developer</p>
</blockquote>

<p>Nevertheless, it's understandable that you're worried that a user could gain a copy and not accept the disclaimers of warranty and liability. I don't know if this would hold up in court if they did sue you under one of those things, but I can suggest a few licenses.</p>

<ul>
<li><p>The <a href=""https://msdn.microsoft.com/en-us/library/ff647676.aspx"" rel=""nofollow"">Microsoft Public License</a> begins with the preamble:</p>

<blockquote>
  <p>This license governs use of the accompanying software. If you use the software,
  you accept this license. If you do not accept the license, do not use the
  software.</p>
</blockquote></li>
<li><p>You could license your work under the <a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow"">Mozilla Public License</a>. It states after its disclaimer of warrany in Section 6:</p>

<blockquote>
  <p>This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is    authorized under this License except under this disclaimer.</p>
</blockquote></li>
<li><p>Or, the <a href=""http://cecill.info/licences/Licence_CeCILL_V2.1-en.txt"" rel=""nofollow"">CeCILL</a> states:</p>

<blockquote>
  <p>3.1 The Licensee shall be deemed as having accepted the terms and
  conditions of this Agreement upon the occurrence of the first of the
  following events:</p>
  
  <ul>
  <li>(i) loading the Software by any or all means, notably, by
  downloading from a remote server, or by loading from a physical
  medium;</li>
  <li>(ii) the first time the Licensee exercises any of the rights
  granted hereunder.</li>
  </ul>
</blockquote>

<p>""The rights granted hereunder"" includes the right to use the software (Article 5.1). So they can't even receive a copy without accepting the Agreement.</p></li>
</ul>

<p>Or, some non-licensing solutions:</p>

<ul>
<li>You could just provide an installer with an ""I accept"" button forcing the user to accept the FLOSS license. Admittedly, there's nothing to prevent them from hacking the installer if they really don't want to accept that, but how many people are going to do that?</li>
<li>You could license pre-built executables under a proprietary license and provide the source code free of charge. This is a mean and extreme measure, but it will protect you wholly.</li>
</ul>
","4272"
"How can I trust Wikipedia, if everyone can change it?","219","","<p>If everyone can change the Wikipedia, can it be trusted? Do any studies exists that show it is less trustworthy than classical encyclopedias?</p>
","<p>You are not supposed to trust it - <a href=""https://en.wikipedia.org/wiki/Wikipedia:Wikipedia_is_not_a_reliable_source"">Wikipedia itself tells you that it is not a reliable source.</a></p>

<p>Instead, you are supposed to trust the sources it cites in the articles. This  will mostly be secondary sources, e.g. newspaper or magazine articles, books or studies about a topic, provided that these meet <a href=""https://en.wikipedia.org/wiki/Wikipedia:Identifying_reliable_sources"">Wikipedia's requirements for reliable sources</a>.</p>

<p>The latter is also supposed to maintain overall quality of Wikipedia articles and prevent the inclusion of outright wrong information, though - anyone who adds or deletes or changes content of an article is supposed to back this up by sources, at least when their change is challenged.</p>

<p>This can't be guaranteed to work in all cases, though - and this is a difference to classical encyclopedias, where a number of people might be tasked with verifying the included information. </p>

<p>Wikipedia seems to do quite well, though, they have an article about the <a href=""https://en.wikipedia.org/wiki/Reliability_of_Wikipedia"">reliability of Wikipedia</a> - again, you are not supposed to trust this article, but the sources cited in it.</p>

<p>Please note that I have added several links to Wikipedia in this answer - but not all of these links go to articles, some refer to pages in the Wikipedia: namespace. The latter is where Wikipedia's own policies are defined. You are supposed to follow those, no trust needed, or you may be sanctioned by users with the required privileges.</p>
","649"
"Is MIT license invoked when code is used as reference to write other code?","219","","<p>In the situation that you know your code was used as reference to write other code (e.g., you had a conversation with said person who referenced your work as the structure to follow when they were writing their library, and you've recently found out that they are distributing their library), are they obligated to include the MIT license crediting you in their derivative work?</p>

<p>To clarify, I say ""used as reference"" in opposition to ""copied and modified."" So, I'm asking in the case that the code was <em>not</em> copied and modified.</p>

<p>For reference, the MIT license is as follows (emphasis added by me):</p>

<blockquote>
  <p>Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the ""Software""), to deal
  in the Software without restriction, including without limitation the rights
  to <b>use</b>, copy, <b>modify</b>, merge, publish, <b>distribute</b>, <b>sublicense</b>, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:</p>
  
  <p><i>The above copyright notice and this permission notice shall be included in all
  copies or <b>substantial portions</b> of the Software.</i></p>
  
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.</p>
</blockquote>
","<p>Not a lawyer so I could be completely wrong but to the best of my knowledge it depends on the <strong>process</strong> used, just as when creating an open source implementation of a proprietary, closed source, program.</p>

<p>When moving from proprietary to open source it is considered OK if you write your own code based on the <strong>public</strong> API and by reverse engineering - i.e. characterising and comparing behaviour but not OK if you get a copy of the existing source code or use a decompiler to get something directly based on it.</p>

<p>Arguing from that, with the directions reversed, if someone has the source code open all of the time while they are creating their own version they are creating a derived work but if they simply refer to the <strong>public</strong> API and characterising the behaviour they should be OK.</p>

<p>Some, serious, companies or teams that are involved in this sort of thing will use two teams, one that performs the reverse engineering and another, with no access to the original project, is passed a specification &amp; test suite that they have to pass. </p>

<p>I would say that it would be nice to give at least attribution for the inspiration and personally would try to ensure that that was done.</p>

<p>The real guys to ask are the Free Software Foundation, <a href=""https://www.fsf.org/"" rel=""nofollow noreferrer"">FSF</a>, note I am an ordinary member, <em>read supporter</em>, of the FSF.</p>

<p>The above is my <strong>personal opinion</strong> and does not reflect the opinion of my employer or any other organisation that I am affiliated with.</p>
","5286"
"Impact of accepting a new open source licence type when updating software","218","","<p>I understand that if someone chooses not to upgrade their software they are free to retain all license benefits of their existing software.</p>

<p>Please assume the following:</p>

<ul>
<li>XYZ software version 1.0 has an The MIT License </li>
<li>XYZ software version 1.1 has a LGPL-3.0 License</li>
<li>XYZpro software version 1.0 has a LGPL-3.0 License</li>
<li>XYZ software version 1.1 is identical to XYZpro software version 1.0</li>
</ul>

<p>XYZ software version 1.0 continues to work as always but requires a change to a LGPL-3.0 License in order to upgrade to version 1.1 and take advantage of new features. Does a user who upgrades from XYZ software version 1.0 to version 1.1 have identical licensing rights as someone who downloads XYZpro software version 1.0?</p>

<p>Basically I am asking if a license change upon upgrade would still retain any benefits (or restrictions) associated with the features contained in the previous version of the software before it was updated? </p>

<p>It seems clear that XYZpro software version 1.0 has a LGPL-3.0 License</p>

<p>Does XYZ software version 1.1 still retain any MIT License benefits for features not altered during the upgrade from XYZ software version 1.0?</p>
","<blockquote>
  <p>Does XYZ software version 1.1 still retain any MIT License benefits for features not altered during the upgrade from XYZ software version 1.0?</p>
</blockquote>

<p>No. </p>

<p>A license is attached to a specific set of code hence to a specific version and eventually a specific distribution.</p>

<p>You can continue to use the older MIT-licensed version under the MIT license. </p>

<p>If the newer version is LGPL-licensed as a whole, the LGPL apply to this whole version irrespective of the fact that some of the same code was under MIT in the previous version.</p>

<p>For instance, take MySQL: it is available from Oracle under the GPL or a commercial license. These are different builds of the same code. However, the same code can have different licenses and that fact does NOT make the rights from the license of one of the distributions flow to another distribution of the same code under another license.</p>
","4048"
"Is a license bound to a commit?","218","","<p>Lets say there is some software hosted in a public github git repository under some license A. The owner and copyright-holder now decides to relicense the source-code to another license B. If i would now - after the copyright-holder already commited and pushed this commit with the new license B to github - clone the repository and checkout an older commit where the software was still under license A and <em>only</em> use the source-code from this commit and older, which license would apply?</p>

<hr>

<p>Since i learned (Thanks @Mnementh♦) that i am allowed to use the Software under License A there is another small question:</p>

<p>Am i correct, that i can infact <strong>choose</strong> which license i want to use, since the holder relicensed the source-code under a new license but even though he can't revoke the old license, the new license still applies to the source-code as a whole, which also includes the complete older source-code from commit X?</p>
","<p>You can use older versions of the software before the license change still under license A, as open source license are irrevocable. The only reason you couldn't do that would be, if license A was illegal for the work in the first place (maybe some license compatibility issue).</p>

<p>The new version is only usable with license B (well, the same issue with possible illegal use may apply).</p>

<p>The difficult question is, if also can use the old version using license B. That depends. The copyright-holder can change license for his as he sees fit, also for the older version(s). But he must do it explicitly. Without this expression, you have to assume it is still only licensed under license A and B isn't applicable. Even if the copyright-holder expresses, that also the older version can now be used under the terms B too, you have a problem. In the committed code only license A is mentioned and only the text of license A is part of the code. You would have difficulties to prove you can also use this code with license B.</p>

<p>The safe way therefore is: Use the old code only with license A and the new code only with license B.</p>
","1476"
"Using ffmpeg in comercial application?","217","","<p>Is it OK, <strong>patent-wise</strong>, to use FFMPEG (for transcoding and video trimming) in a commercial application, be it free of charge or pay per install, on <strong>Android</strong> and <strong>iOS</strong> considering that both <strong>Google</strong> and <strong>Apple</strong> already pay royalties to <strong>MPEGLA</strong>?</p>
","<p>The fact that Apple or Google pay royalties to MPEG-LA does not mean that you are covered and that you do not have to obtain a license yourself.</p>

<p>Patent-wise, irrespective of which software is used (be it open source or commercial) you may have to acquire a patent license and pay royalties for certain usages  (for FFmpeg or any similar software). </p>

<p>Understanding which are these usages is a complicated matter...</p>

<p>Some things to consider:</p>

<ol>
<li><p>what are the codecs used, and is this for encoding or decoding? In several cases, decoding may be OK, while encoding may require a patent license from MPEG-LA and/or other patent pools.
In the case of FFmpeg, the configuration options determine which one can be used and can be verified by checking the ""strings"" of the built binaries objects/shared libraries. But as always with patents, using is what matters most afaik: building and not using a codec is different from using.</p></li>
<li><p>what is the type of usage? personal, free? or more commercial, enterprisey? Some codecs are OK to use for some personal non-commercial purpose, especially when only used for decoding.</p></li>
</ol>

<p>So this is complicated, in some ways fubar. This is in all cases a long winding road to contact and obtain a license from these patent pools. Just figuring out which codec is patented and who to contact is already a complex task.</p>

<p>(as you may guess, I have been involved somewhat with this kind of things, good luck!)</p>

<p>There is an alternative which consist in buying commercial codecs that would bundle proper patent license(s). One <a href=""http://www.fluendo.com/en/"" rel=""noreferrer"">company</a> provides such a pack as far as I know but for use with GStreamer and not FFmpeg. In any case reading about their offering is interesting because you can learn about which codec is from which patent holder, something that is everything but self-evident.</p>
","4866"
"What are the main steps to convert a currently closed source project into an open source one?","217","","<p>Given the case of a closed source project that has been developed for some time:</p>

<ul>
<li>What are the main things that should be done in order to ease its transition to a open source development?</li>
</ul>

<p>What I've thought of so far is good documentation (at least good comments in the code) and an attractive purpose of that project for a good amount of potential developers.</p>

<p>I've also thought of publishing it on a collaborative platform, such as GitHub and/or Bitbucket.</p>
","<p>Theoretically, all that needs to be done to make a previously closed source project open source is to put the sourcecode online with an OSI or FSF approved license of your choice attached. However, before you publish your sourcecode, a few things should be checked:</p>

<ol>
<li>Have you read and understood the license and checked it with your legal department? It is easy to publish something under a free license, but you can not un-publish it after you did. So think carefully about all the implications.</li>
<li>Do you have the rights to open source it? This means that any libraries you use must be under a compatible license. Also check if there are any 3rd party contributions in the codebase you might not have full copyright for.</li>
<li>Have you solved any patent issues? When you hold any software patents which apply to your project, release a statement that you will not use your patent to prohibit the development and distribution of the program or derivatives. When you licensed any patents from 3rd parties, make sure that the license terms do not impair the rights of the project either.</li>
<li>Is it usable without any closed source applications? Sometimes software depends on 3rd party components like databases or middleware. When this is the case for your application, make sure these components are also available under open source licenses or make sure that the software is either compatible with open source alternatives or is usable without them.</li>
<li>Can people easily build it? When you require custom tools or a very complicated toolchain to build the software from source, people will have problems to contribute to it in a meaningful way. Make sure that you provide everything that is needed to compile the project.</li>
<li>Did you remove any corporate secrets from the codebase, like passwords, cryptographic keys or slanderous comments? Keep in mind that when you publish the sourcecode with its version history, those will still be there.</li>
<li>Did you do a security audit? When the sourcecode is available, it becomes a lot easier for 3rd parties to find vulnerabilities. Sure, this also means that it is easier for 3rd parties to provide patches for them, improving the overall security in the long run. But it will take some time until the patches are made, applied and distributed. In the meantime all your customers will be vulnerable. So make sure the worst security blunders are fixed before you drop your pants to the whole world.</li>
</ol>

<p>This should be the minimum you should do before publishing your sourcecode.
However, when you want the project to attract a community of developers to contribute, you also need to provide some infrastructure.</p>

<ol>
<li>Make sure the developers can start working easily. Provide clear instructions how to checkout the code, compile, configure and deploy it.</li>
<li>Offer communication platforms for your community to discuss the development of your project, like a mailing list. A public bugtracker is also a very useful tool. Make sure people can find them easily.</li>
<li>Have a clear process explaining how people can provide patches to resolve bugs, what formal requirements must be fulfilled for you to accept them and how feature requests can be proposed. Publish the descriptions of said processes to keep it transparent for potential contributors.</li>
<li>Have personnel available to manage and moderate your communication channels and community contribution processes. You might be able to outsource this to trusted community members eventually (when you want to), but in the meantime you will need to handle this on your own.</li>
</ol>
","591"
"Should my webapp also be AGPL if I use ImageMagick linked with GhostScript?","216","","<p>Should my webapp be licensed as AGPL if it runs ImageMagick linked with GhostScript (which is AGPL)?</p>

<p>Here's a scenario:</p>

<ol>
<li>A user submits a PDF file.</li>
<li>My webapp receives it and stores it on a HDD.</li>
<li>The webapp runs ImageMagick <code>convert</code> to convert the first page to JPG.</li>
<li>I send the JPG file back to the user.</li>
</ol>
","<p>ImageMagick isn't necessarily ""linked"" with GhostScript.  It can use gs as a ""delegate"" (separate program) that converts to and from PostScript, PDF, and EPS.  See ""config/delegates.xml"" in the ImageMagick distribution.</p>

<p>Within ImageMagick's ""coders/ps.c"", the actual interface looks like this:</p>

<pre><code>ExecuteGhostscriptCommand(command,status);
</code></pre>

<p>It's the same deal with GraphicsMagick; see config/delegates.mgk in the GraphicsMagick distribution.  In GM, the interface is</p>

<pre><code>status=InvokePostscriptDelegate(image_info-&gt;verbose,command,exception);
</code></pre>

<p>ImageMagick itself claims to be under the Apache-2.0 license and GraphicsMagick itself claims to be under the MIT license.</p>

<p>Now IANAL and TINLA, but I believe that either of these allows you to license your webapp however you wish.</p>

<p>However, if your ImageMagick or GraphicsMagick was built with libgs, then it is definitely linked with Ghostscript, and doesn't use the ""delegate"" mechanism.  Further muddying the waters is the fact that there are both GPL and AGPL plus commercially licensed releases of GhostScript that you (or a downstream user) might use.</p>

<p>Here is the position of Artifax, the owner of Ghostscript:
<a href=""http://www.artifex.com/page/licensing-information.html"" rel=""nofollow noreferrer"">Artifax licensing information</a>, which includes this:</p>

<blockquote>
  <p>If your application (including its source code) is not licensed to the
  public under the AGPL, you are not authorized under the terms of the
  AGPL to ship AGPL Ghostscript or AGPL MuPDF with your application, or
  to allow your users to remotely interact with AGPL Ghostscript and
  AGPL MuPDF along with your application, if any one of the following is
  true:</p>
  
  <p>your application contains a copy of some or all of AGPL Ghostscript or AGPL MuPDF;</p>
  
  <p>your application is derived from, is based on, or constitutes a revision of some or all of AGPL Ghostscript or AGPL MuPDF;</p>
  
  <p>your application includes one or more functions that use some or all of AGPL Ghostscript or AGPL MuPDF.</p>
</blockquote>

<p>The first two cases are not true of ImageMagick or GraphicsMagick, but I'm not sure about the last one.  You'll need to ask your lawyer.</p>

<p>I can't find anything in the Affero license itself that supports Artifex' position.  In fact, it says</p>

<blockquote>
  <p>This License explicitly affirms your unlimited permission to run the
  unmodified Program</p>
</blockquote>

<p>but if you run the unmodified program via another program such as ImageMagick, Artifex threatens to terminate your license.</p>

<p>The Affero license does say</p>

<blockquote>
  <p>Notwithstanding any other provision of this License, if you modify the
  Program, your modified version must prominently offer all users
  interacting with it remotely through a computer network (if your
  version supports such interaction) an opportunity to receive the
  Corresponding Source of your version by providing access to the
  Corresponding Source from a network server at no charge, through some
  standard or customary means of facilitating copying of software. This
  Corresponding Source shall include the Corresponding Source for any
  work covered by version 3 of the GNU General Public License that is
  incorporated pursuant to the following paragraph.</p>
</blockquote>

<p>but I don't think that paragraph comes into play here, because we are talking about running an unmodified copy of the Affero-licensed GhostScript program.</p>

<p>The question came up on the ImageMagick <a href=""http://www.imagemagick.org/discourse-server/viewtopic.php?t=17842"" rel=""nofollow noreferrer"">discourse server</a> a few years ago and the response was ""its incumbent upon the user to decide if they are complying with the licenses of the software they use.""</p>
","4794"
"Telemetry in open source software?","214","","<p>Is it OK to embed some telemetry functions in an open source project or is it considered spying or privacy violating?</p>

<p>I would like to connect my open source app to <a href=""https://azure.microsoft.com/services/application-insights/"" rel=""nofollow"">Microsoft Application Insights</a> to understand how and when end users use my app, but I'm not sure it is a good practice.</p>
","<p>Software is considered ""open source""<sup>1</sup> as long as it satisfies at least one of the widely-accepted definitions, like <a href=""https://opensource.org/osd"" rel=""nofollow"">OSD</a>, <a href=""http://www.gnu.org/philosophy/free-sw.en.html"" rel=""nofollow"">FSD</a>, <a href=""http://www.debian.org/social_contract.html#guidelines"" rel=""nofollow"">DFSG</a> etc. It's possible for a piece of software to both spy on its users / violate their privacy and still be open source; the two properties are orthogonal.</p>

<p>However, you may find that among the open source communities, a disproportionate amount are concerned with privacy, and consider telemetrics as spyware and unethical. The FSF is a notable example of this; one of their raisons d'etre is that <a href=""http://www.gnu.org/proprietary/proprietary-surveillance.en.html"" rel=""nofollow"">proprietary software violates users' freedoms, such as privacy through spyware</a>. The argument goes, even if such spying exists in open source software, it can be easily removed by the user.</p>

<p>You asked whether ""it's OK"" to have telemetry in open source. It's clearly legal, as there's nothing stopping you from using an open source license on whatever software<sup>2</sup>. The answer will depend on who you ask:</p>

<ul>
<li>Whether the telemetry in question are ok (e.g. some people consider opt-in, anonymised telemetry ethical)</li>
<li>Whether any telemetry is ok (some consider all telemetry unethical)</li>
<li>Whether being open source is all that matters (i.e. caveat emptor; if you don't like it then change the source)</li>
</ul>

<p><sup>1</sup>: free software, libre, etc.</p>

<p><sup>2</sup>: as far as copyright law is concerned. There may be other laws governing the legality of software, such as patent law, or restrictions on encryption and national security.</p>
","2944"
"What methods could you use to prevent broken licensing links?","213","","<p>Suppose you have an open source piece of software. You decide you want to publish the software under an open source license. You spend time researching licenses online and finally you find the perfect one. </p>

<p><strong>My question:</strong></p>

<p>Are there any (better) alternatives to simply adding a link to the chosen license?</p>

<p>If yes, what are some examples?</p>

<p>If no, why not? How could I prevent a broken link?</p>
","<p>I'll convert <a href=""https://opensource.stackexchange.com/questions/938/what-methods-could-you-use-to-prevent-broken-licensing-links#comment1434_938"">my comment</a> to an answer and suggest this:</p>

<p>Add the entire text of the license to your software, formatted like a comment (or as a separate file). This is essentially foolproof. Longer licenses would take up more space, but this should not be a problem. Licenses such as the <a href=""http://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">MIT license</a>, which are quite short, should be easy to fit in. As <a href=""https://opensource.stackexchange.com/questions/938/what-methods-could-you-use-to-prevent-broken-licensing-links/939#comment1711_939"">Zizouz212 mentioned</a>, though, be sure to indicate that this is the text of the last updated version, in order to account for changes.</p>
","939"
"How to store our own fork of a project to ensure pulling fixes and contributing back is as easy as possible","212","","<p>I work at a small company in a small IT department. We use Visual Studio Online (the Team Foundation Server flavor of VSO) to store our source code. We're interested in deploying an open source (GPL v3) project for use here. The project is hosted on GitHub.</p>

<p>There are some bugs in the project however that we will need to fix in order to use it. We're happy to do so and I've been in contact with the project's maintainer, who seems receptive to pull requests.</p>

<p>My question is, what's the best way for us to create our own fork to maintain? I want to make sure it's easy to pull down new versions and submit Pull Requests back upstream. It's been suggested that we keep our fork in VSO, only as a Git repository, but I'm afraid that will make it harder to keep the flow of changes open. I was thinking that it would be better to create a GitHub org and keep our fork there. Is one of these approaches better than the other? If so, why?</p>
","<p>I would suggest the following:</p>

<p>Fork the project on github. Having a fork on github is needed for much of its infrastructure around pull requests. Having a fork on github makes everyones life easier.</p>

<p>Optionally: Fork again to vso git. This way you can keep your in house development in house, and have all the issue tracking, CI, and other vso infrastructure all your other projects have as well.</p>

<p>Come release, you push from your repo to github, and pull request from there.</p>
","1857"
"What are the licensing terms of the text of the GPL?","212","","<p>The <a href=""http://www.gnu.org/licenses/gpl-3.0.html"">text of the GPLv3</a> starts with the following disclaimer:</p>

<blockquote>
  <p>Everyone is permitted to copy and distribute verbatim copies of this
  license document, but changing it is not allowed.</p>
</blockquote>

<p>What does this mean? The text of the GPL itself isn't open source? Will the FSF sue me in court if I change the text of the GPL and release it as Mnementh's Public License? What is the intention of this paragraph?</p>
","<p>The sentence at the top of the GPL, ""<em>...changing it is not allowed,</em>"" does not give you permission to make a derived license from the text of the GPL.</p>

<p>However, the <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#ModifyGPL"">FSF's GPL FAQ item on modifying the GPL</a> <em>does</em> give you that permission (emphasis mine):</p>

<blockquote>
  <p><strong>Can I modify the GPL and make a modified license?</strong></p>
  
  <p>It is possible to make modified versions of the GPL, but it tends to have practical consequences.</p>
  
  <p>You can legally use the GPL terms (possibly modified) in another license provided that you <strong>call your license by another name</strong> and <strong>do not include the GPL preamble</strong>, and provided you modify the instructions-for-use at the end enough to make it clearly different in wording and <strong>not mention GNU</strong> (though the actual procedure you describe may be similar).</p>
  
  <p>If you want to use our preamble in a modified license, please write to &lt;licensing@gnu.org&gt; for permission. For this purpose we would want to check the actual license requirements to see if we approve of them.</p>
  
  <p>Although <strong>we will not raise legal objections to your making a modified license</strong> in this way, we hope you will think twice and not do it...</p>
</blockquote>

<p>It appears that the FSF (who is the author of the GPL) is explicitly allowing you to make and redistribute a derivative version of the GNU GPL, provided you:</p>

<ul>
<li>change the name of the license</li>
<li>not reuse any part of the GPL preamble (this requires separate specific permission)</li>
<li>remove mentions of GNU that appear in the how-to-use instructions</li>
</ul>

<p>That said, the FSF advises that you make use of the license's capability for exceptions instead of writing your own. That will allow you to make the license more permissive but also enjoy the legally-vetted and GPL-compatible verbatim text of the license:</p>

<blockquote>
  <p>Such a modified license is almost certainly incompatible with the GNU GPL, and that incompatibility blocks useful combinations of modules. The mere proliferation of different free software licenses is a burden in and of itself.</p>
  
  <p>Rather than modifying the GPL, please use the exception mechanism offered by GPL version 3.</p>
</blockquote>

<p>For more information about GPL exceptions, see the FAQ:</p>

<ul>
<li><a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"">What legal issues come up if I use GPL-incompatible libraries with GPL software?</a></li>
<li><a href=""http://www.gnu.org/licenses/gpl-faq.en.html#LinkingOverControlledInterface"">How can I allow linking of proprietary modules with my GPL-covered library under a controlled interface only?</a></li>
<li><a href=""http://www.gnu.org/licenses/gpl-faq.en.html#FontException"">How does the GPL apply to fonts?</a></li>
<li><a href=""http://www.gnu.org/licenses/gpl-faq.en.html#WMS"">I am writing a website maintenance system (called a “content management system” by some), or some other application which generates web pages from templates. What license should I use for those templates?</a></li>
</ul>
","254"
"Does Sourceforge have a default licence?","211","","<p>There's an abandoned project on Sourceforge that I want to change. I downloaded the source files but there was no license files and the source files did not contain license headers. </p>

<p>Does Sourceforge have a license for code unaccompanied by a licence?</p>
","<p>No, just because the software is hosted on SourceForge does not mean that it is open source. In the United States (and many other countries), works are protected by copyright and the author must grant specific licenses. A work that is uploaded to SourceForge without a specific license granted is protected by copyright.</p>

<p>However, unlike GitHub, SourceForge requires that source code uploaded is released under an OSI-Approved License. They ask users who encounter a project that is not clearly released under an OSI-Approved license to report that project (likely so it can be removed until it comes into compliance with the terms of service).</p>

<p>If you find a project on SourceForge that does not have an explicit license, you should not treat it as open source, but ""all rights reserved"". It's the safest thing to do. You can't assume a given open source license, since there are drastic differences between MIT, GPL, and LGPL as three examples.</p>

<hr>

<p>From the <a href=""https://slashdotmedia.com/terms-of-use/"">SourceForge Terms of Use</a>:</p>

<blockquote>
  <p>When you submit, post, upload or otherwise provide Code to
  SourceForge.net, you must designate promptly the software license
  pursuant to which licensees, including Slashdot Media, obtain rights
  with respect to such Code. Except as otherwise expressly permitted by
  these Terms, any Code submitted to SourceForge.net must be licensed to
  Slashdot Media and other licensees under a license that is: compliant
  with the Open Source Initiative (“OSI”)’s Open Source Definition
  (<a href=""http://www.opensource.org/docs/osd"">http://www.opensource.org/docs/osd</a>) or certified as an “OSI-Approved
  License” (<a href=""http://opensource.org/licenses"">http://opensource.org/licenses</a>). Please note that Slashdot
  Media is not affiliated with the OSI.</p>
</blockquote>

<p>From the <a href=""https://sourceforge.net/p/forge/documentation/userfaq/#free"">SourceForge FAQ</a>:</p>

<blockquote>
  <p>Is the software you provide free?</p>
  
  <p>The software hosted on our site is both free and Open Source. Each project is expected to provides their own Open Source License which contains any restrictions on the use of the software or code. If a project is not free, does not provide source code, or does not contain a valid Open Source License: please report it here.</p>
</blockquote>
","2942"
"Are there statistics showing the usage over time of open source implementations of programming languages compilers/interpreters?","210","","<p>Many programming languages have popular open-source implementations: C, C++, Java, Javascript, Python, C#, PHP. </p>

<p>Does statistical data exist that shows how much of the software (open source or not) is built with open source compilers or interpreters and how much with closed source? And does the data provide historical data, so that it can be seen if the usage of open-source development systems in programming has increased or decreased over time?</p>
","<p>The <a href=""https://www.blackducksoftware.com/resources/data"" rel=""nofollow"">data from blackduck</a> isn't broken down by open/closed compilers, but it does cover the specific languages and provide historical information.</p>

<p>Additionally, it is focused on language use solely within open source projects. Obtaining this information for closed/proprietary projects is obviously problematic.</p>

<p>With the possible exception of the Visual Studio/.NET specific languages such as VB.NET, and probably C# and Apple's objective C, I suspect that most of the compiled language use is from <code>gcc</code> (which is, of course, more than just a <code>c</code> or <code>c++</code> compiler).</p>

<p>This is especially likely as I doubt too many open source projects use proprietary compilers, as the cost is a barrier to contributions.</p>

<p>This is the closest I've been able to find in the ten days since you asked the question.</p>
","1008"
"Did open source or closed source come first?","210","","<p>Throughout the development of programming itself which came first: open sourced or closed source? Which was more popular? Or did one come after the other?</p>
","<p>Early on (long before personal computers) software was not seen as a product of its own, but a part of the computer. So the software was distributed without extra costs with the computer. Many of the purchasers of computers (often universities or scientific facilities) changed the distributed software and added their own programs. All this was practically open source, without the concept existing and no one ever really thought about it.</p>

<p>Later on some companies learned that they could sell software as a product of its own. Closed source software emerged. As a reaction to this new phenomenon of closed source, Richard Stallman started to think about other ways and eventually defined free software. Open Source was a term later coined, but mostly had the same features as free software, so that I see them mostly synonymous.</p>

<p>So, to answer which was first you have to decide if you count early software as open source. Following today's standards it wasn't, because it wasn't licensed. But in practice it was used the same way as open source is today.</p>
","642"
"Can I make a derived work of a GPL project and a non GPL project for personal use?","207","","<p>In the <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"" rel=""nofollow"">GNU General Public License, version 2</a>, some limits on how you can modify the Program are listed. Point 2.b states that (emphasis mine):</p>

<blockquote>
  <p>You must cause any work <strong>that you distribute or publish</strong>, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p>
</blockquote>

<p>As there seem to be no further limitations on how the changes have to be licensed and <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLRequireSourcePostedPublic"" rel=""nofollow"">you are not required to release your modifications</a>:</p>

<p><strong>Can I make changes to a GNU GPL v2 Program that I would not be allowed to distribute or publish provided I don't distribute and/or publish it?</strong></p>

<p>For instance, adding some code coming from an Apache v2 project.</p>
","<p>Yes. It is always stated, that if you change an GPLed program but use it only internal without releasing any distribution, you have not to put your changes under GPL. That is covered by the <a href=""http://www.gnu.org/licenses/gpl-faq.html#InternalDistribution"" rel=""nofollow noreferrer"">GPL-FAQ</a>, a question on <a href=""https://stackoverflow.com/q/1492687/21005"">Stackoverflow</a> and a question on <a href=""https://softwareengineering.stackexchange.com/q/100499/7654"">programmers.SE</a>.</p>
","662"
"Using the (L)GPL as an open-source hardware license?","207","","<p>I use the GPLv3 for my applications and the LGPLv3 for my libraries. In a similar fashion I'd like to use them for my open-source hardware projects (GPL for schematic and PCBs, LGPL for schematic symbols and PCB modules).</p>

<p>The <a href=""https://en.wikipedia.org/wiki/Open-source_hardware#Licenses"">Open-source hardware wikpedia page</a> mentions that:</p>

<blockquote>
  <p>Rather than creating a new license, some open-source hardware projects
  simply use existing, free and open-source software licenses. These
  licenses may not accord well with patent law.</p>
</blockquote>

<p>This makes me worried and I'm quite lost in the legal talk. I don't necessarily insist to the (L)GPL for open-source hardware if it's not suitable but I do insist to a share-alike license.</p>

<p>Is the (L)GPL suitable for open-source hardware? If not, please suggest viable share-alike alternative licenses and possibly highlight their pros/cons.</p>
","<p>I ended up choosing the GPL / LGPL for hardware, too. I asked this question on some other sites and the following answer was spot on:</p>

<blockquote>
  <p>I spent quite a bit of time looking into this, and there is not really
  a useful solution. For some general background try
  <a href=""https://www.publicknowledge.org/news-blog/blogs/open-source-hardware-and-law1"" rel=""nofollow"">https://www.publicknowledge.org/news-blog/blogs/open-source-hardware-and-law1</a></p>
  
  <p>In a nutshell, GPL (and all other software licenses) rely on software
  being something that can be subject to copyright. In general hardware
  can not be copyrighted, because copyright is only granted to creative
  or artistic works, but with some weird exceptions like software, IC
  masks, yacht designs (!). ""Useful articles or utility works"" are not
  generally subject to copyright, but some powerful industrial lobbies
  got some concessions, as otherwise a software ""work"" would not be
  protected under IP laws, although specific software algorithms can be
  patented.</p>
  
  <p>So anyhoo, software is an oddity in copyright laws, but ""copyleft""
  licenses can turn copyright law to its advantage. There is no such
  ability with hardware. The only way to protect a hardware design is to
  embody a patentable idea that the design relies on. ""Data files"" for
  engineering use are not software, and are not ""creative"" (in terms of
  the law), so it is unlikely they have any form of protection. That
  doesn't stop many companies attempting to claim copyright on data, the
  threat of legal action even if unfounded in law is often enough to
  scare people off.</p>
  
  <p>Legally, you can use copyright to protect your drawings, but you can't
  protect the actual circuit, nor the PCB layout, and therefore you
  can't insist on share-alike clauses to be followed. What we are left
  with is a ""social contract"", i.e. a statement that a design is shared
  for general use but please be nice and share your modifications.</p>
  
  <p>There are some OSHW specific licenses, such as CERN, OSHWA, OHANDA,
  these have the same drawback as GPL, copyright gives little protection
  to hardware designs. But they can be a nice way to stamp your project
  as being in the OSHW spirit.</p>
  
  <p>tldr; use GPL or LGPL, CC-BY-SA, MIT, etc as you like, as a statement
  of intent, but realise they have little legal teeth. Other OSHW
  oriented licenses are equally ineffective to protect or control the
  use of electronic or hardware designs.</p>
</blockquote>

<p>The above answer was posted to <a href=""https://forum.kicad.info/t/using-the-l-gpl-as-an-open-source-hardware-license/1925/2"" rel=""nofollow"">https://forum.kicad.info/t/using-the-l-gpl-as-an-open-source-hardware-license/1925/2</a></p>

<p>Some other useful articles on the subject:</p>

<ul>
<li><a href=""http://www.inmojo.com/licenses/"" rel=""nofollow"">OSHW License Guide</a></li>
<li><a href=""http://owiowi.net/liscense-guide-en/"" rel=""nofollow"">Open Source Hardware License Guide v0.1</a></li>
<li><a href=""http://p2pfoundation.net/Open_Hardware_Licenses"" rel=""nofollow"">Open Hardware Licenses</a></li>
</ul>
","2244"
"Do programmers use licenses properly?","206","","<p>First of all you need to know, that I've made a research on Internet and I've read dozens of topics. Moreover I asked another programmers about this issue. I still don't know what to do.</p>

<p>The problem has occurred when I decided to publish my software written in Python. I would like to publish it on GitHub. I know that one of the most popular license on this website is the MIT license. My program uses the <code>SciPy</code> library. I checked its license and it looks like the <a href=""https://www.scipy.org/scipylib/license.html"" rel=""nofollow noreferrer"">BSD (3-clause)</a>. Moreover I know that the MIT and BSD licenses are compatible which means more or less that one of them doesn't limit the second.</p>

<p>How the program uses the <code>SciPy</code>? My script only imports different modules from the library and calls functions that I need. That's all. Moreover, I don't want to distribute source code nor binary file of the <code>SciPy</code> library. Ok, but the license tells us:</p>

<blockquote>
  <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: (...)</p>
</blockquote>

<p>Thus, as I understand it means that I have to add this license to my project because:</p>

<blockquote>
  <p>(...) use in source (...) without modification (...) = import module or call functions</p>
</blockquote>

<p>Even the FAQ on <a href=""https://wiki.python.org/moin/PythonSoftwareFoundationLicenseFaq#What_about_using_third_party_Python_modules_that_aren.27t_part_of_the_Python_distribution.3F"" rel=""nofollow noreferrer"">Python Wiki</a> recommends to rely on licenses. Unfortunately this implies some doubts:</p>

<ol>
<li>License multiplication</li>
<li>Thousands of one-license software</li>
<li>Where are previous license?</li>
</ol>

<p>Ad.1 If we follow the above quotation, it means that license compatibility doesn't make sense, because we always have to add a license of the next generation, even if both are the same level.</p>

<p>Ad.2 I saw many projects on GitHub which were only licensed under the MIT license. In particularly there were Python programs and some of them used <code>numpy</code> and similar libraries. I didn't see additional licenses. Some of projects are very popular. It means that their authors should add licenses to own software?</p>

<p>Ad.3 According to this <a href=""https://stackoverflow.com/questions/1825857/how-much-of-numpy-and-scipy-is-in-c"">topic</a>:</p>

<blockquote>
  <p>NumPy is mostly written in C.</p>
</blockquote>

<p>I checked one of the most basic library of C <code>stdio.h</code> which contains:</p>

<blockquote>
  <p>Redistribution and use in source and binary forms are permitted provided that the above copyright notice and this paragraph are duplicated in all such forms and that any documentation, advertising materials, and other materials related to such distribution (...)</p>
</blockquote>

<p>But I can't find this text in the <code>SciPy</code> documentation. Ok, maybe <code>SciPy</code> developers didn't use <code>stdio.h</code> but I expect that not only this file contains a such license.</p>

<hr>

<p>Maybe I'm wrong, I hope so. I hesitated to start this thread, because perhaps I don't have a basic knowledge, but this <a href=""https://softwareengineering.stackexchange.com/questions/234511/what-is-the-best-practice-for-arranging-third-party-library-licenses-paperwork"">topic</a> confirms that my doubts can be reasonable.</p>
","<p>If your MIT-licensed code calls a BSD-licensed library but you do not redistribute this BSD-licensed library yourself, there is no specific need to attribute nor reference this library beside mentioning it as a dependency (typically for a Python package this would be in your <code>setup.py</code>).</p>

<p>So you do not have to include the <code>SciPy</code> license nor the <code>numpy</code> license in your project proper. </p>

<p>In contrast if you were to redistribute as part of your project any of <code>SciPy</code> or <code>numpy</code> then and only would you need to include their license for attribution.</p>

<p>See also this thread <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc"">for more details</a> on dependencies.</p>

<p>On the topic of includes in C/C++, the same applies with a twist: a source redistribution of <code>numpy</code> does not contain these includes. They are part of the standard C library and will be only ""included"" at build time. Technically redistributed binaries (assuming they are dynamically linked for now) do include effectively these includes. But the community approach is that in this case for standard libraries attribution for the license of an infrastructure-like ""System Libraries"" is not required and this is even spelled out explicitly in some licenses (such as L/GPL family).</p>

<p>If binaries were to be redistributed and statically linked with the C library then attribution would be required, for instance if a pre-built static <code>numpy</code> binary was redistributed.</p>
","4986"
"What am I supposed to do if someone is breaking the terms of my licensed software?","206","","<p>What should I do if someone is breaking the terms of my licensed software?</p>

<p>To create a small example for you, I'll take a section out of the <a href=""http://www.apache.org/licenses/LICENSE-2.0.txt"">Apache 2.0 license</a>:</p>

<blockquote>
<pre><code>You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
</code></pre>
</blockquote>

<p>Let's say that the person modifying the source ""accidentally"" re-licensed work that I had done. </p>
","<p>This is a difficult position to be in. </p>

<p>BUT... Here are some things you can do:</p>

<ol>
<li><p>Go on the persons website, look for contact information. Email or phone the person and ask them politely to take down / remove the stolen information.</p></li>
<li><p>If they don't, the next step is to gather evidence. Collect proof that your work has been stolen.</p></li>
<li><p>Hire a lawyer. Assuming the work that was stolen is VERY important to you this is your best line of defense. Although lawyers can be expensive copyright law is complicated and lawyers can help. Show them the evidence you have collected and they can help pursue the theif.</p></li>
</ol>
","743"
"APLv2: How to specify notices of all changes in a class?","205","","<p>I changed a class which is under the license <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow"">Apache License Version 2.0</a>. According to the license - for redistribution of the changed version I should specify changes in a class.  </p>

<p>Notification of changes should be stored in block with a copyright? <strong>How it should look like?</strong><br>
Thx.</p>
","<blockquote>
  <p>Notification of changes should be stored in block with a copyright? How it should look like?</p>
</blockquote>

<p>The <a href=""http://www.apache.org/licenses/LICENSE-2.0.txt"" rel=""nofollow"">apache license</a> is both clear and a tad vague and not very prescriptive for this:</p>

<pre><code>4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:
   [...]
  (b) You must cause any modified files to carry prominent notices
      stating that You changed the files; and
</code></pre>

<p>Here if I modify the sources.... a notification comment would not end up in compiled Java class files or course: I would need to handle both source and binaries somehow.</p>

<p>For this, I would do the following to meet both the spirit and the letter of the license (and this may be a tad more than strictly needed):</p>

<ol>
<li><p>In the source, I would add a note in the header comment stating that I modified the code, with a rough date and possibly a high level description of the modification. Doing that in a header comment at the top would be rather prominent to me. (Stating a date and the nature of the modification is not strictly needed, but I feel this is the right thing to do). It can look like anyway you want: the license does not say anything on the format (which is a good thing IMHO).</p></li>
<li><p>If the source did not had an Apache notice, I would add one as a comment header too. (even though this is may not be clear in the license, if the copyright/notice was missing I would add this for clarity and avoid any ambiguity) </p></li>
<li><p>If there was a NOTICE, I would mention there that the code was modified by me too, so this would be even more prominent. (even though this is may not be strictly needed by the license). If there were none, I would create one, so I could bundle it with the source and binaries. (even though this is may not be strictly needed by the license if there was no notice in the first place)</p></li>
<li><p>Finally I would ensure the license and notice file both end up in my sources and binaries redistributions (if I were to redistribute them).</p></li>
</ol>
","4420"
"How can I prevent abandoning a project due to a lack of time?","205","","<p>I have a <a href=""https://github.com/jasny/bootstrap"">somewhat popular open source project</a>. It's used by enough people to get a good number of bug reports and some pull requests per month, but not popular enough to have a development team or steady project managers or contributors.</p>

<p>Due to a lack of time, I haven't had the time to properly maintain the project. Even though I currently have some spare time that I can spend on the project, the time that's needed to get the project up to quality looks beyond my reach.</p>

<p>How do I salvage this project, instead of it coming abandoned?</p>

<hr>

<p><strong>Edit:</strong> <em>I'm looking for a specific solution, preferably someone who has experienced the same issue and managed to overcome it. Answers like 'Trying asking for help' without more detail are not useful.</em></p>
","<p>Start by writing down a list of current issues and make sure it's easily accessible. Other contributors will then have a clear objective: they can fix issues!</p>

<p>Continue by writing down a list of anything you would like to change long-term, in small steps. This allows new people to see what the initial thought behind the project was, and they might want to invest some time to complete these features.</p>

<p>Contacting contributors (and people who forked your project) is definitely a good idea. It's not difficult to do, takes little time, but there is a chance indeed that one of these contributors will be able to fully take over.</p>

<p>Depending on how much time you have, create proper documentation. Contributing is a lot easier when you don't have to spend a week trying to understand the code! Make it easy for people to take the first step, and they might take a few more.</p>

<p>In short, you simply need to communicate to the current and future users that the project is no longer maintained, and is looking for new people to maintain the project.</p>

<p>There's a good chance no-one is willing to do this, but I believe -in that case- it's probably not that big of a deal when development halts.</p>

<p>Remember that you do not owe anyone anything, but communication is a simple act of decency.</p>
","2292"
"Have open-source contributors ever been sued or threatened with a lawsuit for patent infringement?","204","","<p>Have open-source contributors ever been sued <em>or threatened with a lawsuit</em> for patent infringement in their contributions? What was the outcome?</p>

<p>The way I see it, there is the <a href=""https://en.wikipedia.org/wiki/Research_exemption"" rel=""nofollow"">""experimental use"" defense</a> against infringement, but frequently, open-source software developers benefit from their contributions directly or indirectly (publicity, donations, grants, etc.), so the experimental use defense would be difficult to apply.</p>
","<blockquote>
  <p>Have open-source contributors ever been sued for patent infringement in their contributions? What was the outcome?</p>
</blockquote>

<p>I do not know of any direct case where a contributor was sued for its contributions for patent infringement, but there are likely quite a few cases where users of supposedly infringing FOSS code were sued. The best example that comes to mind would be Microsoft vs.TomTom about the <a href=""https://en.wikipedia.org/wiki/Microsoft_v._TomTom"">Linux FAT support</a>. </p>

<p>There is <a href=""https://opensource.com/law/10/5/total-victory-patent-lawsuit-against-open-source-software"">also a case where RedHat</a> (and may be Novell/Suse) were sued of a workspace switching feature, likely related to either Gnome and/or KDE that both Suse and RedHat have heavily contributed to.</p>

<p>Also, some of the patent wars that involved Android adopters vs other mobile device manufacturers where at least in part related to FLOSS.</p>

<p>The thing is that patent situations are often settled... It is quite possible that MPEG-LA is demanding licensing fees from users of FFmpeg for instance, and you would never hear about this.</p>

<p>Now, my understanding is that patents are about ideas and their usage: I would tend to consider (but I am likely a misguided non-lawyer) that the mere fact to release FOSS software that may implement a patent may not be infringing. Instead, if I were to start using this FLOSS code, then I might be infringing.</p>
","4396"
"Best open source license to preserve author credit?","203","","<p>We have a few library plugins that we want to open source on GitHub, but we want to preserve the author credit for us when our libraries are used by others. </p>

<p>I see a lot of different open source licenses like Apache 2.0, MIT, GPL etc. What should be the best to use in my case? I am not that good with all this TL;DR stuff.</p>

<p>My primary goal is we preserve author credit for source and versioning both. In addition, if someone wants to use this in commercial products they pay us a little fee.</p>
","<p>Essentially all open source licenses cover your author credit requirement. None will allow restrictions for a certain use case.</p>

<p>You'll either have to dual-license your software by releasing it under both, say, the MIT license (which is widely used and very simple) and a commercial license as an alternative or look beyond open source. As you can't prevent commercial users from simply using the MIT version you'd have to add something of value to the commercial version, such as premium support.</p>
","5128"
"Can I put ads on a GPLv3 project and upload it to Google Play?","203","","<p>I forked a messaging app on github and added my modification on top of it and it started to build an audience in my country because of the unique ad-on feature I have added. The app acts as an SMS gateway to country xyz.</p>

<p>Everything I have added on top of the original code will be on github as an open-source project except my SMS API/server details. Because that is what I understand with GPLv3 you need to give also the source code for free if you want to distribute the derivative project.</p>

<p>Now - will I break the GPLv3 if I distribute/publish on Android market the modified code with ads on it?</p>
","<p>The GPL does not prevent you from including ads.</p>

<p>However: since you have to publish the GPL code of the app, you cannot prevent someone else from forking <em>your</em> code, removing the ads, and publishing as well. Which of the two versions are users likely to prefer: the ad-supported or the ad-free version, if both are free? Since many users find that ads degrade their user experience, you might find that some users switch apps. That in itself is not a problem since little revenue is still more than no revenue. However, you might also lose some reputation when moving to an ad-supported model. As a result, most open source software does not show ads.</p>

<p>This is slightly complicated by your statement that the “server details” are not published. I assume you mean some sort of access key that authorizes the client to use your server. This would be a technical measure preventing others from creating a usable fork of your app. Whether such a measure is consistent with the GPL is not immediately clear, and would probably be worth another question.</p>
","4605"
"Can I use GPL v3 for source code and CC BY-SA v3 for comments?","203","","<p>I have some source code for which I am the copyright holder. I want to release it under the GPL, but when it was closed source, I copied a bunch of a stuff from Wikipedia for a couple of classes and used it strictly for comments. This was just a matter of convenience, I have classes that allow you to manipulate HTTP headers and didn't feel like writing out explanations for each header when it was right there in front of me.</p>

<p>An example:</p>

<pre><code>/// &lt;summary&gt;
/// CGI header field specifying the status of the HTTP response. Normal HTTP
/// responses use a separate ""Status-Line"" instead, defined by RFC 7230.
/// Example: Status: 200 OK
/// &lt;/summary&gt;
const std::string&amp; Status(void);
</code></pre>

<p>All of the lines proceeded by a <code>///</code> are the comments. When the source code is compiled, these comments are not included in the final produced product, so I never considered it an issue as closed source software. However, I'd now be publishing all of this, comments intact.</p>

<p>The comments originate from <a href=""https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"">this wikipedia page</a>, where the footer includes a link to <a href=""https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License"">this license</a>, which is the Creative Commons Attribution-ShareAlike 3.0 Unported License.</p>

<p>I've tried to search manually for anything about dual-licensing or licensing the comments separately from the code itself, but my searches have yielded nothing. Is it possible to fulfill the creative commons license by licensing the comments, aka ""documentation"", separately from the source code implementation?</p>
","<p>Your work incorporating the Wikipedia material appears to be an ""Adaptation"" as defined in <a href=""https://creativecommons.org/licenses/by-sa/3.0/legalcode"" rel=""nofollow noreferrer"">CC-BY-SA 3.0 Unported</a> 1.a:</p>

<blockquote>
  <p>""Adaptation"" means a work based upon the Work, or upon the Work and
  other pre-existing works, such as a translation, adaptation,
  derivative work, arrangement of music or other alterations of a
  literary or artistic work, or phonogram or performance and includes
  cinematographic adaptations or any other form in which the Work may be
  recast, transformed, or adapted including in any form recognizably
  derived from the original, except that a work that constitutes a
  Collection will not be considered an Adaptation for the purpose of
  this License. For the avoidance of doubt, where the Work is a musical
  work, performance or phonogram, the synchronization of the Work in
  timed-relation with a moving image (""synching"") will be considered an
  Adaptation for the purpose of this License.</p>
</blockquote>

<p>Now see 4.b:</p>

<blockquote>
  <p>You may Distribute or Publicly Perform an Adaptation only under the
  terms of: (i) this License; (ii) a later version of this License with
  the same License Elements as this License; (iii) a Creative Commons
  jurisdiction license (either this or a later license version) that
  contains the same License Elements as this License (e.g.,
  Attribution-ShareAlike 3.0 US)); (iv) a Creative Commons Compatible
  License.</p>
</blockquote>

<p>4.b(ii) clearly gives you the right to relicense the work as CC-BY-SA 4.0 which in turn, I believe, allows you to relicense the work as GPLv3.</p>

<p>4.b(iv), at least on my interpretation, allows you to relicense the work directly as GPLv3.</p>

<p>Either way, you appear to have a valid route to license the resulting combined work as GPLv3.</p>

<p>See also <a href=""https://opensource.stackexchange.com/users/138/unor"">@unor</a>'s answer on <a href=""https://opensource.stackexchange.com/a/2213/3451"">FOS.SE</a>, which reaches a similar conclusion.</p>
","2236"
"Release code with MIT dependencies under GPL","203","","<p>I am creating a game and want to release the code under a copyleft license (GPL 2 or 3).
So far, so good, but there are multiple MIT-licensed library dependencies.</p>

<p>Can I still release my code under GPL? Is the restriction that the MIT code itself is not part of the repository (e.g. separate download)?</p>
","<p>Yes, you can release your code under the GPL.</p>

<p>The MIT license is compatible with the GPL: you can combine MIT-licensed code with GPL'ed code, as long as the result is licensed under the GPL. This is possible because the MIT license explicitly allows you to sublicense the code (i.e. republish with a completely different license), and only requires you to keep the copyright and license notice intact.</p>

<p>Permissive licences such as the MIT license or Apache v2 license are often used for code that is intended to be available as widely as possible, with as few restrictions as possible for direct users (i.e. other programmers). Such code can be incorporated in proprietary and copyleft projects. </p>
","5481"
"Using CC-NC material inside a freemium app","203","","<p>I want to include a bunch of images licensed under the CC BY-NC-SA inside my freemium web software.
The user can choose one or more of these images to make her own composition. This part of the software is completely free for use and free for distribute the generated work.</p>

<p>But to access other capabilities of the software the user has to pay. These capabilities aren't related with the images, they are like add sound or make a transition.</p>

<p>Since the commercial part of my app comes from other things, does this usage violates the no commercial part of the license?</p>
","<p>I do not think this is a question that has a straightforward yes or no answer.</p>

<p>The CC NC clause is really hard to get a grasp on, and Creative Commons do not provide much guidance about it. Their <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Does_my_use_violate_the_NonCommercial_clause_of_the_licenses.3F"">FAQ: Does my use violate the NonCommercial clause of the licenses</a> is deliberately vague, and can be summed up in this sentence:</p>

<blockquote>
  <p>Whether a use is commercial will depend on the specifics of the situation and the intentions of the user.</p>
</blockquote>

<p>The FAQ answer about the NC clause concludes:</p>

<blockquote>
  <p>CC cannot advise you on what is and is not commercial use. If you are unsure, you should either contact the rights holder for clarification, or search for works that permit commercial uses.</p>
</blockquote>

<p>The NC clause is controversial, and there has been repeated requests to discontinue it, such as this one from the <a href=""http://freeculture.org/blog/2012/08/27/stop-the-inclusion-of-proprietary-licenses-in-creative-commons-4-0/"">Free Culture Foundation</a>.</p>

<p>In 2008-9 Creative Commons commissioned a study from a professional market research company that resulted in a report with the promising title ""<a href=""https://wiki.creativecommons.org/wiki/Defining_Noncommercial"">Defining Noncommercial</a>"", but this report only summarizes how Internet users <em>perceive</em> the terms “commercial use” and “noncommercial use” in the context of content found online.  It does not provide a <em>legal definition</em> of these terms.</p>

<p>The study was met with some hostile responses. Here is the one from free culture proponent <a href=""http://opendotdotdot.blogspot.no/2009/09/nonplussed-by-non-commercial.html"">Glyn Moody</a>:</p>

<blockquote>
  <p>All that comes across to me from these figures is that ""non-commercial"" is so fluid a concept as to be useless.</p>
</blockquote>

<p>I do not agree with Moody.  The wily NC-clause fills a much requested niche in the sharing (but not free) culture ecosystem - for instance it helps supplying schools and NGOs with materials that otherwise in all probability would have been ARR.  But the NC has a very narrow use case.  It is for creators who want their creations to <em>stay</em> free (as in free beer), and not being exploited for money.</p>

<p>But since no relevant case law exists (AFAIK), and the concept is so difficult to pin down, it is not prudent to use materials with this clause in borderline cases (and I think said freemium app is a borderline case), <em>unless</em> you are really keen to <em>contribute</em> to case law by being sued over borderline use.</p>

<p>I do not think it is possible to give any defintive answer to your question without examining the specific app and the specific business model in detail - and even then the answer may turn out to be: ""Definitely maybe"".</p>

<p>But we can not provide this analysis for you on this web-site.  If you really need to use CC-BY-NC-SA images in your app, you must to hire a lawyer and have him/her access to your app and documents describing your business model and give you professional legal advice about your <em>specific</em> case.</p>

<p>But since you're asking here, it can be presumed that you're <em>unsure</em> about this, so the best answer <em>I</em> can provide is to repeat the answer from the CC FAQ:</p>

<blockquote>
  <p>If you are unsure, you should either contact the rights holder for clarification, or search for works that permit commercial uses.</p>
</blockquote>
","1246"
"For Software based on GPL library should I have to release software under GPL license or can I use MIT","202","","<p>I am currently building a generic rest framework and using Jersey and Grizzly as frameworks to build upon. Originally I planned to release (for commercial or public/private use) it under MIT license as I don't care who use it and how they use it. </p>

<p>Since I happen to use library and framework under GPL license like Jersey and Grizzly I am wondering should I have to stick with GPL as well? Any idea? </p>

<p>And also is including License text on each source file is sufficient to say the software is under specific licensing like MIT ? or do I need to get permission or license from OpenSource community. </p>

<p>I am sorry if it's too simple and should have understood but after searching all over the place I am still not sure about these things ! </p>

<p>Also note I am not modifying any of dependent library/framework and just using it as is !</p>
","<blockquote>
  <p>Since I happen to use library and framework under GPL license like Jersey and Grizzly I am wondering should I have to stick with GPL as well?</p>
</blockquote>

<p>Jersey and Grizzly are not under the GPL. They are under a choice of CDDL or GPL with Classpath exception. See <a href=""https://jersey.java.net/license.html"" rel=""nofollow"">https://jersey.java.net/license.html</a> 
You can release your own code using any license you please: MIT, commercial, etc. It is not impacted by the Jersey/Grizzly license</p>

<blockquote>
  <p>And also is including License text on each source file is sufficient to say the software is under specific licensing like MIT ? or do I need to get permission or license from OpenSource community.</p>
</blockquote>

<p>You own your code: you can license it as you please, no permission needed from anyone.</p>

<blockquote>
  <p>Also note I am not modifying any of dependent library/framework and just using it as is !</p>
</blockquote>

<p>just as a side if you redistribute these deps, you will to attach need some attribution docs/notices/licenses to your redistribution. And possibly explain how to obtain the source code of these deps if they use a copyleft license. FLOSS tools like AboutCode and ScanCode can help there (disclaimer: I maintain them)</p>

<blockquote>
  <p>In same context, say if i use the dependent source code as is vs I modify the code. Based on your answer and few blogs seems like as long as I put license terms/disclaimers in source code i am free to choose any but my confusion is what should i choose if i modify the dependent code and redistribute. Am I still free to choose ?</p>
</blockquote>

<p>If you were to modify the code of your dependencies (assuming they are under a choice of CDDL or GPL + classpath) there are a couple things to consider as you would likely also redistribute these deps:</p>

<ol>
<li><p>you will need to comply with the licenses of these deps, meaning for instance producing attribution credits, notices and licenses; document somehow the changes you made; make the source code of these deps available</p></li>
<li><p>if the nature of your changes are small (such as a small bug fix) this is likely all there is to it. I would strongly suggest to submit these patches to the upstream project</p></li>
<li><p>if the nature of your changes are bigger, there is likely a level when you are entering the grey territory of derivative works. 
I would consult a lawyer</p></li>
</ol>

<blockquote>
  <p>what should i choose if i modify the dependent code and redistribute. Am I still free to choose ?</p>
</blockquote>

<p>Just to be clear: in general you cannot (or should not) modify the original license of code you modify. So if you modify code and redistribute the modification would be under the original license terms. And in most case you can still pick your license of choice for new code within reason. See above.  </p>

<p>/IANAL /TINLA</p>
","2850"
"How to deal with copyright infringement on GitHub","202","","<p>I have a public repository on GitHub. Some of the code was copy-and-pasted into another repository without keeping Licence headers and without any other back-linking to the original repository.</p>

<p>How to deal with that? I can imagine it happens all the time (on GitHub). What is the ""usual"" way to react? How can one enforce correct ""copy-and-pasting"", that is, at least keeping license and author information in place?</p>

<p>The license of the project is <a href=""https://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">Apache 2</a>.</p>
","<p>One clarifying point: there <em>is</em> usually a legal obligation to keep original copyright notices with original license headers and texts. There is <em>not</em> usually a legal obligation to ""link back"" -- this doesn't generalize to projects that aren't distributed online, and would impose ambiguous obligations if the project moved network locations, etc.</p>

<p>The first recourse is <em>ask nicely</em>. Perhaps a polite message that communicates why the license header and copyright notice are important:</p>

<blockquote>
  <p>Hello {Downstream Author},</p>
  
  <p>I noticed that you're using code from my software project {Foo} in your project {Bar}. I'm really glad that you found it useful. I put it under the Apache License exactly because I wanted projects like yours to use it freely.</p>
  
  <p>I did notice, though, that you left out a few important pieces that the license requires. These are important but fortunately they're really easy to fix:</p>
  
  <ol>
  <li><p>Each file that uses code from {Foo} should preserve the original license header -- this is important so that other people down the line also know they have the right to modify and/or redistribute my software, just like you did. Your project should also include a copy of the Apache 2 license with the full license terms in your project, in case recipients have legal questions about their rights. (<a href=""http://www.apache.org/licenses/LICENSE-2.0.txt"" rel=""noreferrer"">http://www.apache.org/licenses/LICENSE-2.0.txt</a>) If your own code is licensed differently from Apache 2, you can state exactly which functions are licensed which way in each file.</p></li>
  <li><p>Each file that uses my code should include my copyright notice, so the people know who the original author was. If a file includes work from both you and from me, it should have copyright notices for each of us.</p></li>
  </ol>
  
  <p>You can see an example of what the header should look like at {<a href=""https://myrepo/myproject/somefile.c"" rel=""noreferrer"">https://myrepo/myproject/somefile.c</a>}</p>
  
  <p>If you want to take care of it, that would be great; otherwise, I can send you a pull request with the header fixes.</p>
</blockquote>

<p>If the downstream author doesn't respond to this, then do send a pull request. If the author doesn't respond (or responds negatively) to your pull request, you can send a more firmly-worded message stressing the particular potential harm of not having license headers and copyright notices (namely, confusion for recipients and stripping you of credit for your contribution).</p>

<p>If <em>that</em> doesn't work, then you have a hard decision to make: you would be legally in the clear to submit a DMCA takedown notice, since the downstream author is in violation of your license grant and is committing copyright infringement. This is <em>definitely</em> going to hurt some feelings, and may make you look like the bad guy to some people. (Though if the downstream author is rebuffing your polite request for authorship credit, there may be some bad feelings there already.) Weigh this possibility against your desire to bring the project into compliance and do whatever you think is best.</p>
","5818"
"Is it wrong to call a software Open Source if it is using a license based on GNU GPL?","202","","<p>As an example, the real time operating system <a href=""http://www.freertos.org/"" rel=""nofollow"">FreeRTOS</a> is licensed under the <a href=""http://www.freertos.org/license.txt"" rel=""nofollow"">FreeRTOS Open Source License</a> which is based on a modified GNU GPL, the modification taking the form of an exception. The GNU GPL is approved by the Open Source Initiative, but not the FreeRTOS Open Source License. If I use FreeRTOS in my software, and the rest of my software is released under an approved Open Source licence, would I be wrong to call my software Open Source?</p>

<p>The <a href=""https://opensource.org/faq#avoid-unapproved-licenses"" rel=""nofollow"">OSI FAQ</a> says:</p>

<blockquote>
  <p><strong>Can I call my program ""Open Source"" even if I don't use an approved license?</strong>
  Please don't do that. If you call it ""Open Source"" without using an approved license, you will confuse people. This is not merely a theoretical concern — we have seen this confusion happen in the past, and it's part of the reason we have a formal license approval process. See also our page on license proliferation for why this is a problem.</p>
</blockquote>

<p>The Open Source stamp is important to me and I like using FreeRTOS but I also want to call things what they are. I am not 100% sure about this one that is why I prefer to ask here. I asked the question in a generic way so it can also be useful to others.</p>
","<p>Unfortunately for you, the FreeRTOS license is fundamentally broken:</p>

<blockquote>
  <p>Any FreeRTOS <em>source code</em>, whether modified or in it's original release form, or whether in whole or in part, can only be distributed by you under the terms of the GNU General Public License plus this exception.  An independent module is a module which is not derived from or based on FreeRTOS.</p>
</blockquote>

<p>And the exception contains in particular:</p>

<blockquote>
  <p>Clause 2:</p>
  
  <p>FreeRTOS may not be used for any competitive or comparative purpose, including the publication of any form of run time or compile time metric, without the express permission of Real Time Engineers Ltd. (this is the norm within the industry and is intended to ensure information accuracy).</p>
</blockquote>

<p>This contradicts the terms of the GPL which contain in particular:</p>

<blockquote>
  <p>You may not impose any further restrictions on the recipients' exercise of the rights granted herein.</p>
</blockquote>

<p>Now this may sound confusing as the GNU FAQ page contains tons of references to ""exceptions"" that can be added to the GPL. And indeed there are tons of existing such exceptions. The most well known is nothing less than LGPL (which is just GPL + an exception). But what all those exceptions have in common is that they do not add any further restrictions. They just grant more rights! And in particular, any person is allowed to distribute the program further under GPL without the exception.</p>

<h1>What if the exception had been acceptable?</h1>

<p>If the exception to the GPL had been an exception in the usual sense, then by using GPL + exception, you would <em>a fortiori</em> be distributing your program under GPL, and thus, you would be distributing it under an approved open source license.</p>

<h1>What about calling your program <em>open source</em> anyway?</h1>

<p>If you choose to distribute the program you wrote under an open source license but it has a non-open source dependency, then you could just make sure that people understand that when you are saying ""my program is open source"", you are talking about the program itself and not the dependencies. It is still interesting to people: they can replace the dependency by something else if they want and make the whole program open source.</p>
","4680"
"Can Public Domain use GPL licensed library/program?","201","","<p>A similar question already asked here (<a href=""https://softwareengineering.stackexchange.com/questions/159023/can-cc0-code-use-a-gpl-library"">https://softwareengineering.stackexchange.com/questions/159023/can-cc0-code-use-a-gpl-library</a>)<br>
but my question is a little bit different, perhaps more accurately.  </p>

<p>Can I use/apply a public domain license to my program while my program uses the GCC library or uses GPL libraries (link or runtime use or...)?<br>
like this:</p>

<p>main.cpp:</p>

<pre><code>#include &lt;gpl_licensed_library&gt;
#include &lt;my_library&gt;
...
...
</code></pre>

<p>And now can i say:<br>
code is licensed under the <code>CC0</code>. and i use <code>gpl_licensed_library</code> library that released under the <code>GPL</code>.<br>
AND<br>
if answer is NO, then What <code>license compatibility</code> mean?</p>
","<p>You need to release the whole program under GPL. But nothing prevents you to release the additional source code that you wrote under CC0 as well (it is your code, you can give as many permissions on it as you wish).</p>

<p>However, if you distribute a binary for your software, it can only be distributed under the GPL to meet with the conditions of this license.</p>

<p>Similar to your situation would be a US government employee contributing to a GPL software. Their contribution is automatically in the public domain but the full software continues to be licensed under GPL. See this reference : <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLUSGovAdd"" rel=""nofollow"">https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLUSGovAdd</a></p>

<p>Note also, from the GNU FAQ:</p>

<blockquote>
  <p><a href=""https://www.gnu.org/licenses/gpl-faq.en.html#CombinePublicDomainWithGPL"" rel=""nofollow""><strong>If a program combines public-domain code with GPL-covered code, can I take the public-domain part and use it as public domain code?</strong></a></p>
  
  <p>You can do that, if you can figure out which part is the public domain part and separate it from the rest. If code was put in the public domain by its developer, it is in the public domain no matter where it has been.</p>
</blockquote>

<h3>What compatibility means</h3>

<p>Compatibility is understood one way: public domain code can be included in a GPL software, not the other way around.</p>
","4349"
"How to complete CLA on github","200","","<p>I have submitted a pull request on github and the organization asked me to sign the CLA before they can merge the pull request, who currently has the red label 'cla-required'.</p>

<p>How can I do this ? There is a lot of information about the contributor licence agreement on the web but no one is concerned how to complete CLA.</p>

<p>I found the link of the CLA on github but there is no explanations about how to agree them : <a href=""https://cla.github.com/agreement"" rel=""nofollow noreferrer"">https://cla.github.com/agreement</a></p>

<p>PS: the developer who asked me to complete CLA to can merge my pull request gave me the link of this tool : <a href=""https://pandoc.org"" rel=""nofollow noreferrer"">https://pandoc.org</a></p>

<p><strong>EDIT</strong>
<em>[I complete this question with the different answers]</em></p>

<ul>
<li><strong>Microsoft</strong> CLA : <a href=""https://cla2.dotnetfoundation.org/"" rel=""nofollow noreferrer"">https://cla2.dotnetfoundation.org/</a></li>
<li><strong>jQuery</strong> CLA : <a href=""https://cla.js.foundation/jquery/"" rel=""nofollow noreferrer"">https://cla.js.foundation/jquery/</a></li>
<li><strong>Google</strong> CLA : <a href=""https://cla.developers.google.com/"" rel=""nofollow noreferrer"">https://cla.developers.google.com/</a></li>
</ul>
","<p>You need to ask the maintainers of the project you want to contribute to what exactly they expect from you.</p>

<p>Different organizations have different standards regarding what they consider a legally binding agreement to a CLA. It can range from writing ""I am OK with that"" on an IRC channel to printing out the CLA, hand-signing it and sending it by snail mail.</p>
","4768"
"Is it ethical to rewrite the code of a software to remove its license?","199","","<p>Memtest86 was originally licensed under the GPL, but <a href=""https://opensource.stackexchange.com/a/2389/520"">its entire code was rewritten</a> so its owners decided to remove the GPL license on newer versions of the program. Free Download Manager is another program that was originally licensed under the GPL but then had <a href=""https://opensource.stackexchange.com/a/2479/520"">its code rewritten</a> so that it can become closed-source.</p>

<p>It's certainly <em>legal</em> to do this. After all, the people who wrote the code owns the copyright of the code and are not bound by previous licenses. And they can still reuse the same name (either because the name itself was not trademarked or they own the trademark in question).</p>

<p>But is this ethical? It would seem more reasonable for a company to create a closed-source ""derivative work"" with a different name (""Memtest86 II"" or ""FDM Improved"") to avoid people confusing the new closed-source version with the original open-source version.</p>
","<p>Unless I'm missing something, you're either describing reverse engineering, where someone has figured out how an existing product works and has created a competing product, or you're talking about someone releasing their own code under one license and then changing it down the road.</p>

<p>In either case, I fail to see where anything can be considered unethical. In the case of someone changing the license on their own work, that's entirely their call, they did all of the work that they're freely sharing with the world. How can anyone possibly point and wag their finger at what somebody does with their own hard work?</p>

<p>In the case of a competing product being made, isn't that a good thing that is in line with the very spirit of open source? You're not releasing open source software so that everyone in the world becomes so dependent on it that everyone must come to you to eat, you're releasing stuff freely into the wild so that it might benefit others, however that benefit works.</p>

<p>Granted, there are business models built around open source where, like in any capitalistic system, you'd have daydreams of the piles of cash that would result in everyone needing your software exclusively, but also like any reasonable business person in a capitalistic society, you accept the concept and challenge of competition. </p>

<p>Specifically to the point of open source and business, I don't see how the boundaries of what is and isn't unethical are any different than any other form of business. If Honda released a new car, but then someone realized that it was just a Honda logo cheaply plastered over top of what was actually a Hyundai car, everyone would think it's a sleazy move and it would backfire. </p>

<p>A famous recent example of this in software is the Console OS accusation of wholesale copying Android-X86 without attribution. It wouldn't have been so bad if they had of been honest, but if they had of been honest it would have simply appeared to be a cash grab anyway.</p>

<p>In your question you seem to suggest something about competing products copying the name also. While I can't comment on the legality of it, I'd say that it's unethical because it shadows the other product. If your product is so much better, it shouldn't need to shadow its competition. Shadowing is blatantly done for no other reason than to hide the original project and steal traffic/users from it. There may be exceptions where this is acceptable, such as shadowing an abandoned project (unofficially resurrecting and taking over maintenance).</p>
","2496"
"If a project is released under GPLv3+ and GPLv4 is less restrictive what happens?","197","","<p>I've seen in multiple places project owners choosing to stick with GPLv2 to prevent the FSF from releasing a license that the project owners don't agree with but I've never seen reasoning beyond the claim that the next GPLv4 could be disagreeable. Are there any real licensing dangers associated with this ability to seemingly change your project's license at will?</p>

<p>For example, if the FSF were to release ""GPLv4"" and it's just the exact text of the MIT license what would happen to projects that are licensed under GPLv3+? Could they be licensed under the terms of ""GPLv4""? Are there restrictions within the GPLv3 that prevent this from happening?</p>
","<blockquote>
  <p>For example, if the FSF were to release ""GPLv4"" and it's just the exact text of the MIT license what would happen to projects that are licensed under GPLv3+? Could they be licensed under the terms of ""GPLv4""? Are there restrictions within the GPLv3 that prevent this from happening?</p>
</blockquote>

<p>Yes, that is precisely the idea. See <a href=""https://www.gnu.org/licenses/gpl-faq.html#VersionThreeOrLater"" rel=""noreferrer"">The FAQ about GPL</a>:</p>

<blockquote>
  <p>From time to time, at intervals of years, we change the GPL—sometimes to clarify it, sometimes to permit certain kinds of use not previously permitted, and sometimes to tighten up a requirement.</p>
</blockquote>

<p>Those projects could then be used and distributed under the terms of either GPLv3 or GPLv4. The original author of the projects has at some point chosen this by going with the ""or any later version"" option and there is of course no possibility for the GPLv3 license to somehow prevent the author from doing this.</p>

<p>If you don't think that you will automatically agree with FSF on what is actually an improvement to the license that you chose today it seems a bit risky to go with the ""or any later version"" option. </p>
","5249"
"Is zlib license no-waranty no-liability clause enough for US and EU law?","196","","<p>Is zlib license no-waranty no-liability clause enough to not get sued in European Union and United States of America?</p>

<p>zlib license no-waranty no-liability clause:</p>

<blockquote>
  <p>This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.</p>
</blockquote>

<p>I'm a little concerned, because this is how it in looks popular MIT license:</p>

<blockquote>
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>

<p>or in FreeBSD license:</p>

<blockquote>
  <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
  
  <p>The views and conclusions contained in the software and documentation
  are those of the authors and should not be interpreted as representing
  official policies, either expressed or implied, of the FreeBSD
  Project.</p>
</blockquote>
","<p>I'm pretty sure that Bruce Perens was evaluating the zlib and libpng licenses for Open Source Certification when he coined the term ""crayon license"".</p>

<p>The zlib license and the libpng license were developed at almost the same time (March 24, 1995 and March 28, respectively). The libpng license had MIT-like disclaimers while the zlib had</p>

<blockquote>
  <ol>
  <li>The authors are not responsible for the consequences of use of this    software, no matter how awful, even if they arise from flaws in it.</li>
  </ol>
</blockquote>

<p>which was changed several days later to the separate disclaimer mentioned in the question.</p>

<p>I'm not aware of any lawsuits with regard to either license, so both seem to be adequate so far (note, IANAL and this is not legal advice).</p>

<p>The UCITA law, enacted in two US states in 2000, declares that implicit
waivers are insufficient, and if the following waiver, or words to that
effect, do not appear in the license then these things are implicitly
warranted by the grantor.  So I had to amend the libpng license accordingly, to add this clause:</p>

<blockquote>
  <p>There is no warranty against interference with your enjoyment of the
  library or against infringement.  There is no warranty that our
  efforts or the library will fulfill any of your particular purposes or
  needs.  This library is provided with all faults, and the entire risk
  of satisfactory quality, performance, accuracy, and effort is with the
  user.</p>
</blockquote>

<p>I don't know specifically what is the risk to the grantor, but, not being a lawyer, and residing in one of those states (Maryland and Virginia), I preferred to not assume those risks.</p>

<p>See SUBTITLE 4: WARRANTIES, paragraphs 21-401 through 21-409, on pages 40-48 in the <a href=""http://mlis.state.md.us/2000rs/bills/sb/sb0142e.PDF"" rel=""nofollow"">Maryland UCITA law</a></p>
","4333"
"Copying a file from an open source project","195","","<p>I want to copy a file from a project licensed under a New BSD license. My own project is licensed under an MIT license. The file is simple batch script for locating build tools and starting the build. The file itself does not contain copyright notices.</p>

<p>How can copy the file without breaking the license? Should I include the license from the original project as a comment in the file? Should I include a notice specifying the project the file was taken from? Or maybe it is better to rewrite the script from scratch so that my project only contains my own work?</p>
","<p>tl;dr: Be as clear as you can be, to avoid confusion for re-users.</p>

<p>When you take a file from one project, and inject it in to another, you are creating a combined work and/or a derivative work (depending on the amount of coupling between them).</p>

<p>This is not a problem. The general gist of things is answered well at <a href=""https://opensource.stackexchange.com/questions/1711/combining-code-written-under-different-licenses-eiffel-forum-license-mit-and-a"">Combining code written under different licenses (Eiffel Forum License, MIT and Apache), what are my options?</a>, especialy Abhi Beckerts answer.</p>

<p>What you are looking to do is to make it abundantly clear to people looking at your project what the copyright status is. In your case specifically I would include a notice file which describes the copyright situation of the entire thing. It would look something like</p>

<blockquote>
  <p>Copyright 2015 &lt; you ></p>
  
  <p>Copyright &lt; year of copyright BSD file > &lt; author BSD file ></p>
  
  <p>This project is licensed under the MIT license, with exception of &lt; that file > which is licensed under the 3 clause BSD license</p>
</blockquote>

<p>Then I'd include a copyright notice header for the BSD licensed file, with the copyright holder and that it's under the BSD license.</p>

<p>For each license, include a text file with the license text in your project (but name neither of them just plain License, as that could make people think that's the license of everything)</p>

<p>Now you have </p>

<ul>
<li>A notice file that describes the situation of the entire project (MIT + 1 file BSD)</li>
<li>The license text of each license</li>
<li>A copyright header in each file that describes the copyright situation for that specific file.</li>
</ul>

<p>Someone coming to your project now has very little chance to be confused about the copyright and licensing of each file and project as a whole.</p>
","2154"
"Merge, rebrand, relicense projects","195","","<p>There are two libraries under <code>MIT</code>, that do the same thing, each with some pros and cons. I'd like to merge them, effectively reworking the public API, but keeping the underlying logic (code). The resulting library should be part of my framework that is currently licensed under <code>apache 2.0</code>.</p>

<ul>
<li>Can I license the resulting library under apache 2.0 or do I have to keep it MIT?</li>
<li>Is there any problem with rebranding it as new product?</li>
<li>Where should I keep the reference to original code? AUTHORS file in repository? Does it have to be somehow imprinted in the compiled assembly?</li>
</ul>
","<blockquote>
  <p>Can I license the resulting library under apache 2.0 or do I have to keep it MIT?</p>
</blockquote>

<p>The <a href=""http://opensource.org/licenses/MIT"">MIT license</a> is a permissive license which allows relicensing under other license terms as long as the original MIT copyright message is retained.</p>

<blockquote>
  <p>Is there any problem with rebranding it as new product?</p>
</blockquote>

<p>No, the MIT license puts no further conditions besides the copyright message. Many (but not necessary all) open source products prefer to rebrand a fork as a new product to avoid confusion, as long as it doesn't actively try to hide its roots.</p>

<blockquote>
  <p>Where should I keep the reference to original code? AUTHORS file in repository? Does it have to be somehow imprinted in the compiled assembly?</p>
</blockquote>

<p>This is intentionally left vague in most software licenses to make sure it is applicable to a wide range of possible software products.</p>

<p>Common practice is to put any 3rd party copyright notices wherever you put your own. When you just have a COPYRIGHT or LICENSE text file for your own license terms, you would append any 3rd party licenses below it. If you have an elaborate credits dialog or about screen (unlikely in case of a library), you would also use it to credit the 3rd party software.</p>
","2229"
"Possibility of non-commercial ‘open-source’ and attribution based licence","195","","<p>I am currently planning to launch an alpha version of the software as a representative of an <a href=""http://prasadnr.wix.com/traquad"" rel=""nofollow noreferrer"">unregistered company</a>. We (currently I'm the only person on the team) do not have any patents and are not planning to apply for it until we are cash-flow positive. Open-source licenses like that of Open Source Foundation and Free Software Foundation typically allow only free softwares which even include commercialization in the clause. (Even Apache and GPL have similar issues) But, we would like to have a complete control over the aspect of commercialization. (While it is a great opportunity to be helping each other and helping fellow students like us make money, we would not like unhealthy businesses spurring up and ultimately ruining the entire market; If that is the case, then they can either build software from scratch or pay us for commercialization. This is the major intention behind non-commercialisation and attribution. The concerns raised in Lady-Ada's website are similar; But, the solutions are unsatisfactory).</p>

<p>We would like to have something like OpenCV’s non-free modules. While Creative Commons license looks like a perfect fit, the (very) website disclaims the use of it for softwares. Some more people may join in the business and we are planning to update our softwares over the next couple of months. Can you let me know if ‘versioning’ is possible and if multiple licenses are necessary and also if it is wiser to use Creative Commons or modify the existing licenses with exceptions (including Creative Commons)? (and why?) If such licence is not available, it is ok for me to use AGPL or RPL provided that they do not interfere with non-commercial terms (it is ok (although not intended) even if people do not publish source code as long as they use it only for non-commercial purposes; We do not like to annoy them with licence terms and would like to promote the non-commercial adoption as the world needs our software).</p>

<p>Additional note: If there are license terms which would allow us to make our software completely free after some time, then that is desirable. (If I make money and gain traction to get into a great university, I wouldn't mind making it free)</p>

<p>[This question is a follow-up of <a href=""https://stackoverflow.com/questions/37024944/possibility-of-non-commercial-open-source-and-attribution-based-licence#_=_"">this</a> question; Sorry, but the number of links has been restricted to two. However, the original question has links. Sorry for the inconvenience]</p>
","<p>If you want to restrict your software to not be used for commercial purposes, <a href=""http://www.gnu.org/philosophy/selling.en.html""><strong>it is not open source</strong></a>.</p>

<p>You <em>can</em> release it under multiple licenses - such as the GPL and a commercial license (where a user can choose one or the other, obviously having to pay for the latter) - but it seems from your question that you're not considering the GPL either. The GPL <em>does</em> allow commercial use, but requires software derivative of it to also be licensed in a similar way, so this keeps it free (<a href=""https://en.wikipedia.org/wiki/Free_and_open-source_software"">as in libre</a>), thus preventing it from becoming proprietary. However, it doesn't prevent people from making money from it.</p>

<p>Creative Commons, as you've discovered, is not recommended for software; it was drafted more with art forms in mind (such as photography and sound recordings). </p>

<p>It sounds like what you're really after is a proprietary license that will allow you to control how your software is used. I would recommend having a lawyer with appropriate expertise draft this for you, however you <em>could</em> attempt to <a href=""https://www.binpress.com/license/generator"">create a license online</a>.</p>

<p>Finally to answer your last question, yes you can choose to release your software under a free/open-source license at a later date. You can always license your software as you see fit, at any time. What you can't do is revoke a license from someone that has already received it; but there's nothing stopping you from re-releasing under a new license.</p>

<p><strong>EDIT:</strong></p>

<p>As for why there is no commercial license freely available online: companies go to considerable expense to draft their licenses. These licenses would generally be copyrighted by those companies: what's in it for them if they open up a license to be used by anyone? All they'd be doing is giving their competitors an advantage in not having to do their own legal research.</p>

<p>The only reason we have licenses that are free for us to use is that the open source community has created them in order to benefit the entire open source community. As far as I know, no-one sees any benefit in creating a license at their own expense to be freely used by another party to <em>restrict</em> the use of their software.</p>
","2820"
"Who owns the intellectual property?","195","","<p>In many open source projects, there are normally many contributors. Ownership of the code is generally clarified during the process of creating the contributor agreements.</p>

<p>However, who owns the intellectual property? While I'm sure that this <strong><em>may</em></strong> be rectified in these contributor agreements, is it ever made clear? Does the intellectual property fall on who made the plan for the program in the start?</p>
","<p>Intellectual property, while not the same thing as copyright, tends to follow similar patterns.</p>

<p>In a single-owner project, the copyright is entirely theirs, and so is the IP. In a project with multiple contributors and no contributor agreement, the copyright is distributed: each contributor owns the copyright on any contributions he makes. The same applies to the intellectuals. </p>

<p>Lastly, in a project with multiple contributors and a contributor agreement, it depends entirely on the agreement. There may be a copyright transfer and/or a IP transfer clause, or there may be neither. It requires reading the license agreement to know.</p>

<p>Of course, it is also possible to assign the property rights to an entity instead of a person: I'm not sure whether you can simply assign them to the project, but it is certainly possible to create a skeleton company for the project and assign the rights to it. This way, no single person can direct what happens with the property, and no group of people can allow some to be used but not other stuff. Either the company's CEO directs, or the company's board directs.</p>
","559"
"License for R scripts","193","","<p>As long as I understood a piece of code is data for the interpreter and thus <a href=""https://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL"" rel=""nofollow"">according to this Q&amp;A</a> an R script is not automatically licensed under GPL. Is that correct?</p>

<p>So if I make an R script for a project and use different packages that are under GPL, I can still license my R script under a separate terms and conditions statement which does not allow the customer to modify it or use it in another projects. Right?</p>

<p>Licensing is very confusing!</p>
","<p>You first paragraph is correct. The interpreter license does not imply how you should license your scripts.</p>

<p>But the second part is not. If you are relying on packages, this likely means that you are relying on other R scripts which are going to be interpreted as well. Your program, by relying on these scripts is a derivative of them. Thus, you need to license your whole program (the packages you rely on + the part you wrote) under GPL as well.</p>
","4668"
"How to denote certain files are under a different license?","192","","<h3>Example</h3>

<p>GPL v3 Project, MIT (ExPat) file/directory.</p>

<pre><code>myproject
├── LICENSE (GPL v3)
├── ...
├── gpl_licensed_file
├── mit_licensed_directory
│   └── mit_file1
└── mit_licensed_file
</code></pre>

<hr>

<p>So If I were looking at this project, I would have on way to know that <code>mit_licensed_directory</code> and <code>mit_licensed_file</code> were not under the primary License declared in <code>LICENSE</code>.</p>

<h3>How do I denote when a file or directory is not using the same license as the rest of the project?</h3>
","<p>There are no hard-and-fast rules on how to show this information. The bottom line is to <strong>make sure recipients can easily figure out which files are under which license.</strong> You also need to <strong>preserve copyright notices, where required.</strong> This is a common requirement of many licenses, but most licenses do not dictate <em>where</em> those notices are kept, only that, again, recipients can easily figure out which files correspond to those copyright notices.</p>

<p>So I'd like to refer to best practices instead. There's a good article provided by the SFLC which covers this, <a href=""https://softwarefreedom.org/resources/2012/ManagingCopyrightInformation.html"" rel=""nofollow noreferrer""><em>Managing copyright information within a free software project</em></a>:</p>

<blockquote>
  <p><strong>Best practices for maintaining license information</strong></p>
  
  <p>License information can also be maintained in individual files, in a central location, or in some combination of both. Most projects use a hybrid approach, placing the primary license in a top-level COPYING or LICENSE file, and also including some license information in each file’s header.</p>
</blockquote>

<p>So the two approaches are (and most projects use both):</p>

<ul>
<li>Information in individual files (i.e. <code>Copyright 20XX Jane Hacker under Foobar License</code> at the top of files)</li>
<li>In a central location, usually a top-level <code>COPYING</code> or <code>LICENSE</code> file</li>
</ul>

<p>These are all best practices, <em>not</em> requirements. For example, you do not have to have a top-level <code>COPYING</code>/<code>LICENSE</code> file, the same information could be in the readme. Note that <a href=""https://opensource.stackexchange.com/q/176/175"">some licenses require that you provide the full text of the license</a>, but again that doesn't have to be named <code>COPYING</code> or <code>LICENSE</code>.</p>

<p>The article does recommend the central location approach though, as it makes it easy to know the full licensing information at one place:</p>

<blockquote>
  <p>In many situations, a semi-centralized approach will work best. Consider a GPL-licensed project whose codebase contains a number of permissively-licensed libraries with custom modifications. While the license of the resulting program will be GPL, because of GPL’s copyleft provision, the source for the libraries can be maintained under their individual licenses. In this scenario, it makes sense to keep license information for the individual libraries at the top level of the directories they’re kept in, as well as in the license information for the entire project.</p>
</blockquote>

<p>That is:</p>

<ul>
<li>Maintain a top-level file describing the licensing of the <em>entire</em> project, i.e. which parts are under which licenses</li>
<li>Under each directory that contains a sub-project under a different license, maintain a file there describing the licensing of that sub-project</li>
</ul>

<p>So your example project might look like this:</p>

<pre><code>myproject
├── LICENSE
├── GPLv3.LICENSE
├── ...
├── gpl_licensed_file
├── mit_licensed_directory
│   ├── LICENSE (MIT)
│   └── mit_file1
└── mit_licensed_file
</code></pre>

<p>Where the top-level <code>LICENSE</code> file contains something like:</p>

<blockquote>
  <p>myproject is licensed under GPLv3, except for <code>mit_licensed_directory</code> and <code>mit_licensed_file</code></p>
</blockquote>
","2695"
"Is the CC BY-ND an Open license?","192","","<p><a href=""https://creativecommons.org/licenses/by-nd/4.0/"">CC BY-ND</a> (<a href=""https://creativecommons.org/licenses/by-nd/4.0/legalcode"">Creative Commons Attribution No Derivatives</a>) is a fairly restrictive license. It does not allow derivative works.</p>

<p>The Wikipedia article on <a href=""https://en.wikipedia.org/wiki/Creative_Commons_license#Six_regularly_used_licenses"">Creative Commons licenses</a> says that it is not a free/libre license:</p>

<pre><code>Description                    Acronym    Free/Libre
====================================================
Attribution + NoDerivatives    BY-ND      No
</code></pre>

<p>However, the Free Software Foundation does include it on their <a href=""http://www.gnu.org/licenses/license-list.html#ccbynd"">list of Free ""Licenses for Works stating a Viewpoint (e.g., Opinion or Testimony)""</a>. In fact, they use it themselves.</p>

<blockquote>
  <p>This is the license used throughout the GNU and FSF web sites. This license provides much the same permissions as our verbatim copying license, but it's much more detailed. We particularly recommend it for audio and/or video works of opinion.</p>
</blockquote>

<p>The full <a href=""http://opensource.org/licenses/alphabetical"">list of licenses on the OSI site</a> does not mention <em>any</em> Creative Commons license, though the site itself is licensed under CC BY.</p>
","<p>No, CC-BY-ND isn't Open Source. It violates rule 3 of the <a href=""http://opensource.org/osd"">Open Source Definition</a>:</p>

<blockquote>
  <ol start=""3"">
  <li>Derived Works</li>
  </ol>
  
  <p>The license must allow modifications and derived works, and must allow
  them to be distributed under the same terms as the license of the
  original software.</p>
</blockquote>

<p>It also violates the freedom 3 of the <a href=""https://www.gnu.org/philosophy/free-sw.html"">Free Software Definition</a>:</p>

<blockquote>
  <p>The freedom to distribute copies of your modified versions to others
  (freedom 3)</p>
</blockquote>

<p>The FSF doesn't list it as free license. The link you provide not only has free licenses, it has sections for free (compatible with GPL), free (incompatible with GPL) and nonfree licenses. For instance is the Sun Community Source license listed in the unfree section. CC-BY-ND is listed in their <a href=""http://www.gnu.org/licenses/license-list.en.html#CC-BY-ND"">nonfree documentation license section</a>.</p>

<p>They list it again though, in their section for Viewpoints. The FSF claims that these opinions should be copied unchanged. The sections starts the following:</p>

<blockquote>
  <p>Licenses for Works stating a Viewpoint (e.g., Opinion or Testimony)</p>
  
  <p>Works that express someone's opinion—memoirs, editorials, and so
  on—serve a fundamentally different purpose than works for practical
  use like software and documentation. Because of this, we expect them
  to provide recipients with a different set of permissions: just the
  permission to copy and distribute the work verbatim. Richard Stallman
  discusses this frequently in his speeches.</p>
</blockquote>

<p>That means the license is nonfree, but useful for a different purpose.</p>
","358"
"Open Source license for school use, but not commercial use","192","","<p>I am starting a web API for my school and I was wondering what licence would be most appropriate?</p>

<p>The goal is to have an open source application that can be freely shared with other school but prohibits it's use for commercial applications (basically to protect from companies who make software for schools).</p>

<p>The application just manages tutoring assignments for tutors, students and the school administration. </p>

<p>I did find this link: <a href=""https://stackoverflow.com/questions/12596732/free-for-academic-use-license"">&quot;Free for academic use&quot; license</a>, but since it was 3 years old I thought it might be a good idea to ask again.</p>
","<p>The open source definition does not allow discrimination against fields of endeavor, and you can't disallow commercial use if you want a license that meets the open source definition.</p>

<p>An option is to go copyleft, which ensures that anyone who distributes software based on that software must follow the same license. It's possible (though tricky) to do that commercially, but your software and any published derivative works by others remain open source, and free for others to use as well.</p>

<p>Well-known copyleft licenses are the GPL, AGPL, LGPL and MPL. Since you describe the project as web-based software, the AGPL might be suitable. This license requires people who let users interact with derivative software over the internet (for example through a web API) to publish their software under the AGPL as well.</p>
","2084"
"Can I preserve exceptions in GPL 3?","191","","<p>GPL 3 allows adding additional clauses, such as exceptions, as long as such exceptions grant additional privileges. But if I distribute software under GPL 3 with exceptions, are those exceptions required to be preserved, or are downstream distributors free to remove those exceptions, leaving the license as GPL 3 only?</p>

<p>Exceptions are often useful to improve compatibility with non-GPL-compatible software; <a href=""http://www.gnu.org/licenses/exceptions.en.html"" rel=""nofollow"">for example</a>, GPL-licensed software like autoconf and GCC include exceptions to prevent their output from falling under GPL, since their output includes GPL-licensed code which would normally mean anything produced by those programs also falls under GPL.</p>

<p>An analogous situation is if I dual-license with GPL and a permissive license such as BSD. Normally with GPL only, someone else can take my software, redistribute with their own changes, and I can incorporate their changes back into my project because of the copyleft. However, since I'm also licensing as BSD, the downstream developer could potentially share their changes under GPL only, which means if I do choose to incorporate their changes, I can no longer distribute the combination under BSD.</p>

<p>My question is, does the same situation apply if I add exceptions to GPL 3?</p>
","<p><strong>No you cannot preserve exceptions in GPL 3</strong>, so yes the same situation as your GPL + MIT analogy applies. Someone can redistribute their derivative under GPL 3 only, which means that you cannot incorporate their changes and continue to provide your exception.</p>

<p><a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"">GPL 3</a> allows additional terms under section 7; these additions are treated as part of the license:</p>

<blockquote>
  <p>“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p>
</blockquote>

<p>BUT the same section also says that such additional terms can be freely removed when you redistribute:</p>

<blockquote>
  <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p>
</blockquote>

<p>That is, GPL 3's copyleft only serves to preserve itself; it does not extend the same protection to additional terms you add.</p>

<p>The law firm <em>Morris, Manning &amp; Martin, LLP</em> shares this opinion in their article, <a href=""http://www.mmmtechlaw.com/wp-content/uploads/2014/03/PLI-Open-Source-2014-Extra-provisions-of-FSF-licenses.pdf""><em>Adding Terms to the GPL</em></a>:</p>

<blockquote>
  <p>Additional permissions are covered in Section 7 of GPLv3 and are defined as “terms that
  supplement the terms of this License by making exceptions from one or more of its conditions.” The
  GPLv3 allows the author of the work to add additional permissions to that part of the work contributed by
  that author. GPLv3 also allows a recipient of software that is licensed under GPLv3 with additional
  permissions to remove those additional permissions for subsequent distribution of the work.</p>
</blockquote>

<p>The upshot of all this is, if you find GPL 3 too restrictive and wish to preserve some additional permissions, GPL 3 doesn't extend that protection, and you may need to choose a different copyleft license. For example, <a href=""https://www.youtube.com/watch?v=PaKIZ7gJlRU"">Linus Torvalds mentions this</a> being the reason why he chose not to convert to GPL 3, because he disagreed with the <a href=""https://en.wikipedia.org/wiki/Tivoization"">anti-Tivoization</a> features in GPL 3, and also believed that GPL 3 exceptions could not be preserved.</p>
","1662"
"Can I force my work to be open sourced in the future?","190","","<p>Is there a mechanism or service that allows me to offer my work under non-free terms, but guarantee that some time in the future, the work automatically becomes open source?</p>

<p>For example, could I release something under license A, but also under a free, irrevocable license B that only takes effect after the year 20XX?</p>

<p>Or is there a well-known service, who will distribute my work under a free license of my choosing after an agreed date?</p>

<p>There are a few motivations for doing so:</p>

<ul>
<li>Perhaps I want to monetise my work in the short term, but would like the work to become free at a date sooner than copyright limits</li>
<li>I want to add value to users by guaranteeing that the work eventually becomes free and maintainable by volunteers, even if I get hit by a bus or I go bankrupt</li>
</ul>
","<p>As has been stated, you would need legal advice before making a final decision.</p>

<p>Bear in mind that in addition to the possibility of using a licence conditional on date, there is also the possibility of using a licence based on other conditions.</p>

<p><a href=""https://en.wikipedia.org/wiki/Qt_%28software%29#Licensing"">Early in its history</a>, Qt was available under a commercial licence, but with conditions to ensure that it would be made available under the BSD license should no free/open source version of Qt be released during 12 months</p>

<p>Many commercial companies use source code escrow to ensure that they will gain access to source code of closed source software if the company providing the software fails to maintain and update the software for any reason. Similarly <a href=""https://en.wikipedia.org/wiki/Source_code_escrow#Free_software"">source code escrow</a> can be used to ensure source code will be released under an open source licence under such circumstances.</p>
","429"
"""SQLite is illegal in Germany"" - really?","189","","<p><a href=""https://www.mirbsd.org/permalinks/wlog-10-tg_e20170316-tg.htm#e20170316-tg_wlog-10-tg"" rel=""noreferrer"">This blog post</a> claims in passing that</p>

<blockquote>
  <p>SQLite is illegal, at least in Germany, but potentially worldwide</p>
</blockquote>

<p>This is tacked onto another mostly-unrelated claim that GitHub's terms of service are incompatible with the GPL, which we <a href=""https://opensource.stackexchange.com/q/5193/532"">have previously discussed</a>.  This unrelated claim appears overblown to me, so I am ignoring it except to note that the author may not be a reliable source of information on open source and the law.</p>

<p>When I Googled ""SQLite is illegal in Germany"", I found <a href=""https://opensource.stackexchange.com/q/1371/532"">this question</a>, which does seem to assert that SQLite's public domain status may be in doubt in some countries including Germany.  Hwaci <a href=""https://www.sqlite.org/copyright.html"" rel=""noreferrer"">apparently sells licenses</a> (at <a href=""https://www.hwaci.com/cgi-bin/license-step1"" rel=""noreferrer"">$6,000 USD</a> a pop!) to users in such countries, but <a href=""https://www.sqlite.org/copyright-release.html"" rel=""noreferrer"">their CLA</a> does not appear to include any copyright assignment (it purports to dissolve copyright entirely).  As a result, it's not clear to me that they actually own the copyrights they are supposedly licensing.  But it might not matter, because these <a href=""https://www.hwaci.com/sw/sqlite/sample_license.html"" rel=""noreferrer"">licenses</a> include a warranty of title, so if Hwaci is licensing code they don't own, that's their problem.</p>

<p><strong>Can SQLite be fairly described as ""illegal in Germany?""</strong></p>
","<p>I think ""illegal"" is not quite the right word (but it <em>was</em> in a quick parenthetical, so I don't expect perfect precision). I think the intent here was that SQLite not legally safe to use in Germany, since the original copyright holders have not correctly given rights to downstream recipients according to German law.</p>

<p>If SQLite contributor Alice ""went rogue,"" for example, and starting suing Bob who distributes work that includes SQLite, how successful would she be? The concern is that a German court might say, ""Well, Alice only ever said that her work was 'dedicated to the public domain' but we don't recognize that as a legally meaningful phrase, so Bob was never actually granted any rights. We award judgement to Alice."" I don't live in or have knowledge of this jurisdiction, so I can't begin to speculate how plausible this is in reality.</p>

<p>As for the concern the Hwaci might not own the copyright it is licensing: on the one hand, the SQLite licensing pages says that Hwaci is ""the company that employs all the developers of SQLite"" so Hwaci probably does hold the copyright (as much as they haven't been dissolved) to most of SQLite. On the other hand, however, they appear to accept outside contributions, so they likely do not have copyright for those contributions, but instead rely on the dissolution of copyright for those submissions. For jurisdictions that don't recognize that, a contributor could still prevail in suing someone for copyright infringement.</p>
","5738"
"If software requires a modified (linux) kernel to function, is it considered a derivative work of the linux kernel?","188","","<p>I'm writing a userspace driver which requires some modifications to the Linux kernel to function.  The modifications expose new functionality by the <code>sysfs</code> interface.  I understand that the modifications to the Linux kernel have to be licensed under the GPLv2, but is the userspace software (which relies on the modified kernel to function) considered a derivative work of the kernel?</p>
","<p>Your kernel modifications pretty clearly create a derived work of the kernel, so they will almost certainly need to be distributed under GPLv2.  In addition, deciding to do so helps the analysis in the next paragraph enormously.</p>

<p>As for your userspace software, it is certain that proprietary software, public domain software, and other non-GPL'ed software makes use of the regular kernel all the time without being covered by the kernel's licence.  Since that is true for a GPL'ed, stock kernel, it will also be true for your modified, GPL'ed kernel, <em>because it is the same licence that covers both works</em>.  I believe that your userspace software can be distributed under any licence you choose.</p>
","4171"
"What restrictions can I place on a device whose software is licensed using GPL v3?","187","","<p>Let's say I'm selling a device with my software pre installed whose license is GPL v3. I want to prevent an unauthorized OS from being installed. According to GPL v3, I will have to share the private key with the user that can sign the image that will be accepted by the device. </p>

<p>My question is, when am I required to share the key? Can I share the key only when the user requests it? Can I stop sending updates and stop providing phone support if the user asks for the signing key? (Assuming it's already part of terms and conditions)</p>
","<p><a href=""https://gnu.org/licenses/gpl-3.0"" rel=""nofollow"">GPLv3</a> §6 calls the</p>

<blockquote>
  <p>methods, procedures, authorization keys, or other information required to install….</p>
</blockquote>

<p>the <em>Installation Information</em>. The next paragraph requires that when you (paraphrasing) sell a device with the software installed, you must accompany it with the Installation Information. </p>

<p>So, the answer to <em>when</em> is: it must accompany the device.</p>

<p>The next paragraph explicitly says you do not need to</p>

<blockquote>
  <p>provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.</p>
</blockquote>

<p>So you do not need to provide updates or support.</p>

<p>For example, you could probably have some ""unlock"" procedure the user must go through, that would indicate the device is no longer supported. But you must not ""break"" the device just because it's unlocked, GPLv3 prohibits that. Talk to a lawyer to review your specific plans.</p>
","170"
"Does compiling a JS bundle with webpack/browserify violate the LGPL license?","186","","<p>According to the LGPL license, you must release your source code if you statically link a library. Here's an excerpt from tldrlegal.com:</p>

<blockquote>
  <p>If the software is statically linked (i.e. compiled into) your work, you must release object code or source code such that the user can modify the library. If otherwise (dynamically linked), you must make the source for the library available.</p>
</blockquote>

<p>Does this mean that installing a package from npm and compiling it into a client-side JS bundle without releasing source code would violate LGPL? It seems like a license that wouldn't be as relevant to a language like JavaScript, but we've found a library that uses it.</p>
","<p>In case you are statically linking, you must release source code <em>or object code</em> such that the user can change the version of the library which is used.</p>

<p>In the case of Javascript, source code has to be understood as the source on which the programmer will make modifications, i.e. the non-minified source.</p>

<p>The compilation process is not going to produce a binary but a minified version of the code that should be considered ""object code"". Bundling the work using the library with the library and compiling the whole should produce about the same result as minifying each part independently and bundling the two in one single JS file.</p>

<p>Thus, you can respect the terms of the license by releasing ""object code"" (the minified version) of the work using the library without the library itself. You could just put a link somewhere in your application so that users can download it.</p>
","5141"
"Can I add ""third clause"" to BSD-like license?","185","","<p>I forked a project which is licensed under “BSD-like” license. This goes as
the following:</p>

<pre><code>Copyright © 20xx Author
CopyRight © 20xx Another author

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

This software is provided by the copyright holders ""as is"" and any express or
implied warranties, including, but not limited to, the implied warranties of
merchantability and fitness for a particular purpose are disclaimed. In no
event shall the copyright holders be liable for any direct, indirect,
incidental, special, exemplary, or consequential damages (including, but not
limited to, procurement of substitute goods or services; loss of use, data,
or profits; or business interruption) however caused and on any theory of
liability, whether in contract, strict liability, or tort (including
negligence or otherwise) arising in any way out of the use of this software,
even if advised of the possibility of such damage.
</code></pre>

<p>Now I want to avoid ambiguous “BSD-like” and state that it's under BSD3 for
clarity. As I understand I should just add the following clause:</p>

<pre><code>* Neither the name of the &lt;authors&gt; nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
</code></pre>

<p>Can I add this clause to license of my fork? I'm not a lawyer, but it seems
that the “new” license will contain the same info <em>plus</em> one more clause and
that should be OK.</p>
","<p>The 2-clause BSD licence is generally known as the <em>FreeBSD licence</em>, which is how it gets referred to by the FSF, for example.</p>

<p>It's different from the <a href=""http://bxr.su/o/share/misc/license.template"" rel=""nofollow"">OpenBSD licence</a>, which is just an ISC licence (most famously now known as the <em>OpenBSD licence</em>, due to various OpenBSD offshoots), whereas <a href=""http://bxr.su/n/distrib/notes/common/legal.common"" rel=""nofollow"">NetBSD has traditionally been distributed under a 4-clause licence</a>, even though that's supposedly no longer the case for code assigned directly to NetBSD Foundation.</p>

<p>So, if you want more recognition, especially since Netflix has been at it recently, you should just refer to your licence as the <em>FreeBSD licence</em>.</p>

<p>However, as is, a statement like ""<em>2-clause BSD licence</em>"" should generally be already sufficiently clear enough as-is.</p>

<p>In fact, the advertising clause that was subsequently withdrawn by Berkeley from the 4-clause licence, was actually clause #3, so, a 3-clause BSD licence for code not explicitly originating from Berkeley is, IMHO, not at all clearer than the other alternatives presented here.</p>
","2028"
"Why is the definition of ""System Libraries"" in GPLv3 phrased the way it is?","185","","<p>I'm curious about the definition of ""System Libraries"" </p>

<blockquote>
  <p>The “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but <em>which is not part of that Major Component</em></p>
</blockquote>

<p>Why is it necessary, in order to protect the users' and developers' freedoms to require that ""System Libraries"" are not ""part of"" the Major Components? Could someone elaborate on the meaning of ""part of"" here? </p>
","<p>I emailed Yoni Rabkin at the Free Software Foundation's licensing centre, this was his reply:</p>

<blockquote>
  <p>This is because the System Libraries exception doesn't refer to the
  major components, but with the low-level libraries which enable the use
  of those major components. For example, the System Libraries exception
  would apply to a library whose sole job is to permit an executable to
  use the windowing system (Major Component) of an operating system.</p>
  
  <p>You can get a deeper understanding of how that language in GPLv3 evolved
  by looking at the rational documents released for the drafts of GPLv3 at
  <a href=""http://gplv3.fsf.org/gpl3-dd3-guide"" rel=""nofollow"">http://gplv3.fsf.org/gpl3-dd3-guide</a>, specifically:</p>
  
  <ul>
  <li><a href=""http://gplv3.fsf.org/gpl-rationale-2006-01-16.html"" rel=""nofollow"">http://gplv3.fsf.org/gpl-rationale-2006-01-16.html</a></li>
  <li><a href=""http://gplv3.fsf.org/gpl3-dd1to2-markup-rationale.pdf"" rel=""nofollow"">http://gplv3.fsf.org/gpl3-dd1to2-markup-rationale.pdf</a></li>
  <li><a href=""http://gplv3.fsf.org/gpl3-dd3-rationale.pdf"" rel=""nofollow"">http://gplv3.fsf.org/gpl3-dd3-rationale.pdf</a></li>
  </ul>
</blockquote>
","2217"
"License as permissive as WTFPL but including no warranty disclaimer","184","","<p>I like publishing my software completely open source with no limitations (no contribution required, etc). I thought about using the <a href=""http://www.wtfpl.net/"" rel=""nofollow noreferrer"">WTFPL</a>, but it lacks an MIT-like disclaimer:</p>

<blockquote>
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.</p>
</blockquote>

<p><strike>I would really like to merge the WTFPL with the upper part of the MIT license so I have a license as permissive as the WTFPL but also with a disclaimer that I am not responsible for any use of it. I would modify the disclaimer so it doesn't contain the term ""copyright holder"" (as I don't want to hold any copyright). Would this be legally okay? In other words: Am I allowed to take parts of the MIT license, modify them and add them to the WTFPL license?</strike></p>

<p>What other licensing possibilities do I have to guarantee complete freedom (<strong>without required attribution or anything</strong>) while making sure I'm not responsible for anything someone else does with my code (e.g. security issues that damage a companies infrastructure, etc.)?</p>

<p><strong>Edit:</strong> Okay, obviously people don't like random new license texts. However, I would really like to know what alternatives exist that suite my needs.</p>
","<p>It usually a bad idea to create a new FOSS license as this will create a new island of oddity and will most likely not help your project being more successful, to the contrary.</p>

<p>The MIT license itself is often called the ISC license and it has many many variants. So many that the actual authorship fades to grey in the darkness of times. It is also the result of the evolution of older licenses from which it borrowed part of its text. As such it is likely a collective work with not clearly defined authorship and an impossible to determine licensing for its own text. If you want to adapt it you can do so safely and none of these undefined authors may be ever blame you for that. But I will blame you for the reasons I explained above.</p>

<blockquote>
  <p>What other licensing possibilities do I have to guarantee complete freedom (without required attribution or anything) while making sure I'm not responsible for anything someone else does with my code (e.g. security issues that damage a companies infrastructure, etc.)?</p>
</blockquote>

<p>Consider the <a href=""https://enterprise.dejacode.com/license_library/Demo/zlib/#license-text"" rel=""nofollow noreferrer"">zlib license</a> which does not even require attribution and only requires to keep the license text in the source code only. It has a minimalist disclaimer.</p>

<p>And with even fewer conditions, consider the <a href=""https://creativecommons.org/publicdomain/zero/1.0/legalcode"" rel=""nofollow noreferrer"">CC0</a>: it has a proper disclaimer unlike the WTPFL and is really a proper public domain dedication that is even acceptable in countries that do not have such concept like Germany. But it does not have an explicit or implicit patent grant (nor do the zlib or bsd licenses IMHO)</p>
","5103"
"What is the license of the code generated by Android Studio?","184","","<p>I want to know under which license fall the templates generated by <a href=""https://en.wikipedia.org/wiki/Android_Studio"" rel=""nofollow noreferrer"">Android Studio</a>.</p>

<p>The code examples that one can find on the Android development site (provided by Google) is Apache v2 - clearly specified.</p>

<p>But when creating for example a new activity based on a template, it is generated without license information.</p>

<p>I've read the Terms and Conditions but there are no details there.</p>
","<p>The <a href=""https://developer.android.com/license.html"" rel=""nofollow noreferrer"">Content License</a> states:</p>

<blockquote>
  <p>This documentation, including any code shown in it, is licensed under the Apache 2.0 license, the preferred license for all parts of the of the Android Open Source Project.</p>
</blockquote>

<p>In the Restrictions section, it states the following:</p>

<blockquote>
  <p>The use of sample source code provided in the SDK or shown in this documentation is subject to the conditions detailed in the Apache 2.0 license.</p>
</blockquote>

<p>You should be safe in assuming that the templates generated by Android Studio are released under the Apache 2.0 license.</p>

<p>To further confirm this, the <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow noreferrer"">Android NDK samples for Android Studio</a> are explicitly licensed under the Apache 2.0 license.</p>
","5791"
"Is making a living by working only on FLOSS projects a viable option?","183","","<p>I am currently an apprentice software developer at a small company where we develop a piece of proprietary software. I have no major gripes with this (especially not at this point yet), but would prefer to work on open source or free (as in speech) software only.</p>

<p>I'm not currently willing to quit my job and work in another field or put all my eggs in one basket and work full time on a project of my own (I am however willing to  join a small startup as long as I get paid a regular wage, though that does of course entail less security and possibly a smaller wage). So my question is: </p>

<p>As a junior software developer, will limiting myself to open source leave me with sufficient job security?</p>

<p>Note that I am theoretically willing to relocate, so if the opportunities only exist in a certain area, this is no problem for the scope of this question. I also don't necessarily want you to tell me if I can make it or not, but rather to lay out clearly (and preferably supported by references or relevant personal experience) how much more difficult it is to get a job if you limit yourself to open source.</p>
","<p>It's heavily dependent on where you are/who you work for.</p>

<p>Many companies exist solely to sell a product. These kinds of companies tend not to publish their code so that others don't steal their ideas (yes, it's <em>technically</em> illegal but people will do it). If you're working for one of these companies, your best shot at contributing to open source is getting the jobs writing their utility libraries: since they're not directly <em>part</em> of the software, only used by it, you might be able to persuade a manager that it'd be OK to release these as open-source.</p>

<p>The kind of company you want to work for is a big company that's well known and has at least one major open source project - Mozilla for example. I say this because these companies are going to give you the most job security - enough people use their product and pay for other things they do that you're unlikely to be let go because there aren't enough customers. Of course, the best way to gain job security is always to be good at what you do so you're essential to your company.</p>

<p>If you're not getting enough money, you can always try running your own open source projects on the side, and charging for support or access to extra documentation, etc. This may not bring in huge amounts, though, and you'll need to check with your employer about their side-project policies.</p>
","841"
"Location of Open Source Documents for CX20 Drone","183","","<p>I am not sure if this is one of the purposes of this site, if not, please remove/move to the correct site.</p>

<p>I recently bought a CX20 drone that was said to be open source.  I have not been able to find the CAD files or software anywhere.  Is there a standard location that this data is kept for open source projects?</p>

<p><a href=""http://www.banggood.com/Cheerson-CX20-Opensource-Version-AutoPathfinder-Quadcopter-RTF-p-932145.html?p=US21043131592013105M"" rel=""nofollow"">Here is a link to the product.</a></p>
","<p>There is no standard for publishing/archiving source code for an open source project. Many organizations use a public repository (e.g. GitHub), others provide access via a download from their site. It is also common to include the source with the install/binaries (e.g. .zip file) or on any distributed media with a product.</p>

<p>The Open Source Initiative, the stewards of the Open Source Definition, and an internationally recognized authority in open source standards and practices, requires access to un-obfuscated source code. So if the organization distributing the software is claiming that that software is open source, they must provide you the source.</p>

<p>A suggestion for your specific case would be to simply contact the company that sold it to you (as @curiousdannii mentioned).</p>
","1983"
"Using an MIT licensed library in my project","183","","<p>I am using a library that is under the MIT license. I never used a library that I needed to include the license before, so I have no idea where to add them. I read that I should add them in my file, but the thing is my project is a site constituting of php files, is there a certain file that I need to add the license to or all the files? Also what should I add? The project came with a LICENSE.txt file and contains text.
The project I am using is <a href=""http://jsmodal.com/"" rel=""nofollow noreferrer"">jsModal</a>.</p>
","<p>I am not a lawyer, but here are my recommendations.</p>

<p>The main requirement of the MIT license can be found on the  <a href=""http://jsmodal.com/license.php"" rel=""noreferrer"">jsModal license page</a></p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>If your project is a website, you should state that you are using jsModal that it is licensed under the MIT license. You need to make the entire text of the  <a href=""http://jsmodal.com/license.php"" rel=""noreferrer"">jsModal license page</a> (including the copyright information) available directly on your site. I do <b>NOT</b> think a simple hyperlink the the jsModal page is sufficient. The text must be a part of your web site.
If the web site is the only place you are using jsModal, you do not need to add any licensing information to any other files. A single page stating you are using jsModal with the entire text of the MIT license is sufficient.</p>

<p>Edit:
You should make sure that this license/copyright information is visible to the end user. Typical users won't look at your code comments, so code comments by themselves are not sufficient. You only need a single page for this license &amp; copyright information. You don't need to add it to every page of your website. </p>
","5423"
"Can I open source the code and charge for the access to it?","182","","<p>I have some code which I would like to open source it (as part of the private repository), however the access should be limited only to the memberships who paid the access fee. Is it going to work? Which license can I use?</p>

<p>Then can I protect from the unauthorised publishing of my code? Should all the people who have access to it sign the non-disclosure agreement, or accepting the specific licence should cover that as part of the purchase access procedure?</p>
","<p>There is a precedent; <a href=""https://en.wikipedia.org/wiki/Unreal_Engine"" rel=""nofollow noreferrer"">the unreal engine</a>.</p>

<p>Some time ago for a monthly fee and a percentage of your revenue you could use it and have access to the source and discuss it freely between other paying members. It wasn't open source (still isn't) but popular enough that they dropped the monthly fee.</p>

<p>In their <a href=""https://www.unrealengine.com/faq#source"" rel=""nofollow noreferrer"">FAQ it says</a>:</p>

<blockquote>
  <p><strong>What modifications can I make to the source code?</strong></p>
  
  <p>You can extend it, modify it, fork it, or integrate it with other
  software or libraries, with one exception: You can’t combine the
  Unreal Engine code with code covered by a “Copyleft” license agreement
  which would directly or indirectly require the Unreal Engine to be
  governed by terms other than the EULA.</p>
  
  <ul>
  <li>Unacceptable Copyleft licenses include: Software licensed under the GNU General Public License (GPL), Lesser GPL (LGPL) (unless you
  are merely dynamically linking a shared library), or Creative Commons
  Attribution-ShareAlike License.</li>
  <li>Acceptable Non-Copyleft licenses include: Software licensed under the BSD License, MIT License, Microsoft Public License, or Apache
  License.</li>
  </ul>
  
  <p><strong>Can I share the Unreal Engine source code or tools with others?</strong></p>
  
  <p>You can share the source code or tools, along with any modifications
  you’ve made, with anyone who is an Unreal Engine licensee who is
  authorized to access the same version of the engine as yours, e.g. the
  4.x.x version number of your installed build.</p>
</blockquote>

<p>I would call such a setup a <em>source available</em> license rather than a open source license.</p>

<p>You can find the <a href=""https://www.unrealengine.com/eula"" rel=""nofollow noreferrer"">EULA here</a> if you want to base your own license on it. (I suggest you consult a lawyer though)</p>
","847"
"can i use FFMPEG video recording in commercial use?","182","","<p>can I use FFmpeg.exe video recording feature for commercial use?
<a href=""https://ffmpeg.zeranoe.com/builds/"" rel=""nofollow noreferrer"">ffmpeg.exe</a></p>
","<p>As <a href=""https://ffmpeg.org/legal.html"" rel=""nofollow noreferrer"">the project itself says</a>, ""<em>FFmpeg License and Legal Considerations ... are a constant source of questions and confusion</em>"".  They go on to note that</p>

<blockquote>
  <p>FFmpeg is licensed under the GNU Lesser General Public License (LGPL) version 2.1 or later. However, FFmpeg incorporates several optional parts and optimizations that are covered by the GNU General Public License (GPL) version 2 or later. If those parts get used the GPL applies to all of FFmpeg.</p>
</blockquote>

<p>If you are simply bundling the executable alongside your program, and your program invokes ffmpeg through userspace, you likely aren't making a derivative work, so you need only honour the licence terms on ffmpeg with respect to ffmpeg.  If you are making a derivative work of ffmpeg, for example by linking your application to it, things are more complex.</p>

<p>If you trigger the GPL, your commercial application will have to give all users <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">the four freedoms</a>, which is likely to make it non-viable as a commercial application.  If you can keep your software to being a derivative of ffmpeg-under-LGPL, then you will only need to distribute the source of ffmpeg, and not free up your application.</p>

<p>The <a href=""https://ffmpeg.org/legal.html"" rel=""nofollow noreferrer"">project's page</a> lists the things the project thinks you must do in order to keep ffmpeg under LGPL, which list <em>starts</em> with (but is not limited to)</p>

<ul>
<li><p>Compile FFmpeg without ""--enable-gpl"" and without ""--enable-nonfree"".</p></li>
<li><p>Use dynamic linking (on windows, this means linking to dlls) for linking with FFmpeg libraries.</p></li>
<li><p>Distribute the source code of FFmpeg, no matter if you modified it or not. </p></li>
</ul>

<p>If you follow <em>all</em> their advice, it is likely that you can use ffmpeg in your derivative work without having to free the whole work.  Note also that on the subject of patents the project adds</p>

<blockquote>
  <p>There have been cases where companies have used FFmpeg in their products. These companies found out that once you start trying to make money from patented technologies, the owners of the patents will come after their licensing fees. Notably, MPEG LA is vigilant and diligent about collecting for MPEG-related technologies.</p>
</blockquote>

<p>As ever, IANAL/IANYL, so you should get proper legal advice before relying on it.</p>
","5503"
"What license must I use on a commercial version of an open source project?","181","","<p>Suppose I have published a project under the Apache 2.0 (or similarly permissive license). Internally I have another version of the same project, which provides significantly extended functionality and is intended to be sold commercially.</p>

<p>The commercial version obviously is heavily based on the open source code.</p>

<p>What license must I apply to the commercial version? Does it apply to all the code, or only the original open source files?</p>
","<p>First of all: if you or your company are the only contributors to the commercial project and you don't use contributions made by thirds to the OS-part, you can do whatever you like.</p>

<p>If you use contributions made to the OS-version of your software you are bound to the license it is under (or you have an Contributors license agreement, but let's assume you have not). That means in the case of Apache 2.0 not much: you have to credit the original contributors mostly. As long as you keep these conditions inflicted by the OSS-license, you can create a license for the commercial version as you like.</p>
","41"
"Is it possible to keep GPL-licensed software internal?","180","","<p>Reading <a href=""https://opensource.stackexchange.com/questions/2338/can-i-use-gpl-libraries-in-a-closed-source-project-if-only-the-output-is-distrib"">this question</a> caused me to wonder: Is it even possible to keep a GPL-licensed software internal to one company?</p>

<p>Am I correct in thinking that any employee who has access to it, would be free to distribute it, either during his employment or after leaving? And also, that GPL specifically forbids stopping such distribution by NDAs and similar means?</p>

<p>So in real world, if one wanted to keep such GPL software internal, access to it would have to be restricted to just a few individuals for have high motivation to stay loyal to the company?</p>
","<p>The employees are the company and as such, having access to the GPL code does not constitute distribution.</p>

<p>If the Software is distributed externally, even to another company of the same group (different entity even if same parents) the GPL counts.</p>
","2359"
"Can I apply one license to specific users and another to others?","179","","<p>Suppose I am a developer. I am developing a piece of software. I decide I want to make this code open source. BUT... I only want developers (or people that will be using the code in other projects) to be able to use it under CC-BY. But people using the code for general use (not in other projects) I would like to apply a MIT license.</p>

<p><strong>My question:</strong></p>

<p>Based on the CC requirements it says I cant restrict it from anyone. Here I am not restricting anyone from anything. I am just applying different rules. Am I allowed to do this?</p>
","<p>The Creative Commons family of licenses are not ""Open Source Licenses"" and Creative Commons ""recommends free and open source software licenses for software"" like those listed by the Free Software Foundation and the Open Source Initiative (<a href=""http://creativecommons.org/software"" rel=""nofollow"">http://creativecommons.org/software</a>).</p>

<p>Therefore, if you assigned your work a CC-BY license it would not be considered ""open source software"" and you should not label it as such.</p>

<p>Further the Open Source Definition, and thus OSI Approved Licenses, does not allow discrimination against persons or groups (Criteria No. 5) or  discrimination against fields of endeavours (Criteria No. 6). </p>

<p>I think you are looking to Dual-License your software. You can find out more about dual-licensing open source software <a href=""http://oss-watch.ac.uk/resources/duallicence2"" rel=""nofollow"">at oss.watch</a>. You can find out more about open source licenses' restrictions and permissions at <a href=""https://tldrlegal.com/"" rel=""nofollow"">TL;DR Legal</a>.</p>
","943"
"CDDL1 and GPL2 + classpath exception incompatible with GPL3?","179","","<p>I am about to decide on the license I can attribute to my free-libre open source software (FLOSS). I have used the Stanford Core NLP released as GPL3+. I have also used the JAXB API which, although integrated into Java nowadays (if I am not mistaken) is used by the Standford library as explicit link.</p>

<p>I have come to realise that the JAXB API s released under a dual license specifying a <a href=""https://glassfish.java.net/public/CDDL+GPL_1_1.html"" rel=""nofollow"">Common Development and Distribution License (CDDL) v1.1 / GPLv2 + classpath exception dual license</a>. Now I am a bit confused.</p>

<p>Releasing my software under a FLOSS license would not be possible as GPL2 and GPL3+ are incompatible. However, Stanford Core NLP lists, as a dependency, JAXB API.</p>

<p>How can a free open source software link to a library and be published under a FLOSS that would prohibit me from myself linking to said library?</p>
","<p>The trick is in the classpath exception. The classpath exception says</p>

<blockquote>
  <p>As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module.</p>
</blockquote>

<p>So although the library is under GPLv2, it doesn't require you to license any components or the project in its entirety under the GPLv2. The authors of the Stanford Core NLP released under GPLv3+. The project as a whole is GPLv3+, but contains parts (the JAXB API) under GPLv2.</p>

<p>If you create a work depending on the Stanford Core NLP, your project must, in its entirety, be GPLv3+, but you are allowed to have separate parts (i.e. JAXB API) under less restrictive licenses. The classpath exception makes this less restrictive, and allows for a combined work to be created under the GPLv3+</p>
","1760"
"Free like free to do what I know and like best - write software?","178","","<p><strong>Preamble</strong> 
Since this question is behind each second question concerning 'free software', please don't vote to close it. I don't want to discuss it with philosophers or economists or ask it on Yahoo. I want to discuss it with you, fellow programmers, puzzling your head about Open Source or Free Software and its implications.</p>

<p><strong>Scenario</strong>
Let's assume I like to build houses out of trash. The only cost is my time to build them. They look beautiful. And they feel great to live in. 
I just build them. </p>

<ul>
<li>I don't do support.</li>
<li>I don't guarantee for anything. </li>
<li>I don't wait for a ngo to pay me for what I do. </li>
<li>I don't build the living-room and let me pay for building toilet and kitchen as well.</li>
<li>Perhaps tomorrow I will stop building houses and start building boats or planes.</li>
</ul>

<p>Concerning ""buying food"" I don't care in which way free software cares to be free. I want to be free. <em>Not free like beer</em>, <em>not free like free speech</em>, <strong>but free like somebody who does what he likes most</strong> and makes a living with it. </p>

<p>Can free software give me this freedom? Or is it only proprietary software, a huge legacy or a Basic Income giving that freedom to me?</p>
","<p>Free software is a movement concerned with software that respects the user's freedom. A particular piece of software is either licensed in a way that respects the FSF's four freedoms, or it is not. Whether or not the author of that software makes a living doing what he pleases is a separate concern.</p>

<p>This question seems to ask, ""How do I make a living writing software that complies with the four freedoms, but not by charging for support, selling warranties, finding a co-aligned charity/business to pay me for what I already do, or having software with some subset of non-free features?""</p>

<p>At the most basic level, people will pay you if you do something that supplies value to them. The catch, of course, is that what another person finds valuable may not align perfectly with exactly what you want to do.</p>

<p>I'll paraphrase a bit from an answer given by Richard Stallman which I heard in person and can't give a direct quote for:</p>

<blockquote>
  <p>Developer effort is an abundant resource, but the ability to <em>direct</em> developer effort is a limited resource. Developers are writing free software all the time, right now. But if you're a business, it might be that all of the software that exists in the world right now doesn't solve exactly the problem you need solved. You could, of course, wait (or ask nicely) for that tireless legion of free software developers to produce exactly the software you need, but odds are, they won't. They'll keep working on whatever they'd like to work on.</p>
  
  <p>Now, if you offer <em>money</em> to those developers to redirect their energy into writing the software features that your business needs, then you might get somewhere.</p>
</blockquote>

<p>(Apologies if I've misrepresented Mr. Stallman's viewpoint in any way above.)</p>

<p>Of course, if a company offered you a chance to redirect your efforts from working on your own your perfect dream of ideal programing projects to prioritizing the specific features that they need, maybe you'd consider this a failure to meet the requirement of doing <em>exactly</em> what you want. To such a response, I can only say: this is a fundamental economic difficulty that must occur anytime people with money have different goals from people who want money.</p>

<p>You might also say -- even if the tasks the business needs closely align with your own wishes -- that this is a violation of your prohibition against (analogously) ""waiting for an NGO."" But again, I submit that since economic transactions must involve two willing parties, you must necessarily wait until you can find a buyer for your services. This is no different from getting a job (you must wait until someone accepts your application) or selling a good (you must wait until a buyer will give you money).</p>
","4627"
"How do Chromium and Chrome relate to each other?","178","","<p>Google Chrome and Chromium look very similar and seem related.</p>

<p>How exactly do Google Chrome and Chromium relate to each other, and why are they separate products?</p>
","<p>It would be more correct to state that Chrome is a fork of Chromium.</p>

<p><a href=""https://www.chromium.org/"">Chromium</a> is an open source web browser available under many different licenses. Many of them are permissive and allow to use it as part of a closed source application.</p>

<p><a href=""https://www.google.com/chrome/"">Google Chrome</a> is a closed source web browser based on Chromium. However, Google is the driving force between both Chromium and Chrome.</p>

<p>By open-sourcing the core of their web browser, Google allows it to be used as part of pure open-source operating systems. This leads to a wider propagation of their Blink rendering engine which has various strategic advantages for the company. It also opens them up to contributions from the community which saves them development work.</p>

<p>But by having their actual flagship browser a closed source application based on it, they can put additional features into it which would not be allowed in a pure open source application, like inclusion of proprietary plugins (like Adobe Flash) or add features which would be frowned upon in an open source application (like those which submit usage data to Google).</p>
","556"
"Is the capacity of open source developers an infinite resource?","178","","<p>Last year, I participated in a Birds of a Feather panel discussion at <a href=""http://www.devoxx.com/"">Devoxx</a>. During this panel discussion, David Blevins explained:</p>

<blockquote>
  <p>""We have this fairytale idea that open source is an infinite resource, but it's not,"" Blevins said. An approach that was suggested is for developers to approach their organization's CTO and say to them: ""Let's outsource all our software development to people we don't know"" and then, when the CTO looks surprised and annoyed at the suggestion, say: ""That's what we're doing already, shouldn't we get to know the organizations behind the software we're using?""</p>
  
  <p>Source: <a href=""http://www.theserverside.com/news/2240234582/Reflecting-on-open-source-software-Java-9-and-startup-strategies-at-Devoxx-2014"">Devoxx blog by Geertjan Wielenga</a></p>
</blockquote>

<p>The panel discussion was inspired by the Heartbleed disaster, where the person who introduced the bug accidentally <a href=""http://www.smh.com.au/it-pro/security-it/man-who-introduced-serious-heartbleed-security-flaw-denies-he-inserted-it-deliberately-20140410-zqta1.html"">had to defend himself against the allegation that he introduced the bug intenionally</a>. As it turned out, the piece of code that caused the problem was submitted on New Year's Eve. Another problem related to Heartbleed, was that the OpenSSL developers didn't make sufficient money to support their product:</p>

<blockquote>
  <p>""this team has a reported budget for all of their work of less than a million dollars, and through the course of this week —which you'd think would be a fairly important week for them— they have received $841 of donations. Which is sad. There's a section on the site here that says, if you give more than, I think, it's $20,000, we'll put your logo on our home page. There are no logos. No-one is giving these guys money.""</p>
  
  <p>Source: <a href=""http://www.zdnet.com/article/heartbleed-soul-search-regulation-proposed-for-critical-crypto-code/"">http://www.zdnet.com/article/heartbleed-soul-search-regulation-proposed-for-critical-crypto-code/</a></p>
</blockquote>

<p>Neither did they get sufficient support in general:</p>

<blockquote>
  <p>Unfortunately, despite very wide distribution and use by millions of users, OpenSSL does not have adequate support. In spite of its many users, there are very few who actively participate in the project.</p>
  
  <p>Source: <a href=""http://www.theregister.co.uk/2014/04/11/openssl_heartbleed_robin_seggelmann/"">Bloody nose for open-source bleeding hearts</a></p>
</blockquote>

<p>The OpenSSL had to take all kinds of jobs and the software suffered from their lack of time, leading to... Heartbleed.</p>

<p>The response from the community was strange: large corporations suddenly started giving money (a fraction of the money they made by using OpenSSL), but... what about all the other open source projects they were using? I'm pretty sure there are other projects and developers that experience the same problem the OpenSSL developers had and that deserve financial support, but nobody cares about them.</p>

<p>This brings me to the question: isn't there a risk that every one will end up being an open source user and nobody will continue producing open source of companies do not pay for their use of open source software?</p>
","<p>You're not really saying open source is a finite resource (something I wouldn't agree with) but that open source developers are a finite resource. And yes, obviously the community can only do that much. It's pretty obvious that paid developers can do much more than people doing stuff in their spare time. A paid developer can work 8 hours a day, five days a week on a project. An unpaid developer has a few hours a day (if even an hour at all) and cannot find time for the project every day of the week. Besides this being a lot less time, the time is partitioned with other tasks (filling the refrigerator, making meals, calling insurance or mechanics, getting the kid from school, ...) and the focus is a lot worse than in an work environment. So yes, we can't expect volunteers to outdo commercial development in every aspect.</p>

<p>I think there are two possible solutions here:</p>

<ol>
<li>As you suggest companies should pay more developers to work on open source or even better fund open source.</li>
<li>The communities take tasks they can handle and reduce the workload by concentrating on the important. That includes we shouldn't expect everything from open source software, but only clearly focused core features.</li>
</ol>

<p>Both points can be combined for better results.</p>

<p>By the way, the dilemma you describe is called the <a href=""https://en.wikipedia.org/wiki/Tragedy_of_the_commons"" rel=""nofollow"">tragedy of the commons</a>. The commons in this case are the developers willing to work in their spare time. Luckily the tragedy of the commons in classic sense does not completely apply, as the developers in question are humans that can decide which tasks to do, and which not.</p>
","709"
"What is the difference between an open and closed consumer device?","178","","<p>The Qt Open Source Licensing <a href=""https://info.qt.io/download-qt-for-application-development"" rel=""nofollow noreferrer"">Obligations</a> contain the following line:</p>

<blockquote>
  <p>Must make “open” consumer devices</p>
</blockquote>

<p>What does this mean? I know about the linking mechanism required by LGPL, and that part of the application can remain close sourced as long as the end user can modify and re-link the Qt libraries.</p>

<p>but what about the hardware? Does an open consumer device mean open hardware (with published schematics, etc.)? Or does it mean that we must allow (and provide support for) the software to run on a different hardware the user has built?</p>
","<p>This is probably a reference to GPLv3's anti-""tivoization"" terms. That is, the GPLv3 requires that recipients of embedded GPLv3 software must be able to deploy modified versions of the software in the device, if the device supports that capability:</p>

<blockquote>
  <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product... the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p>
</blockquote>

<p>For example, this disallows cases where a device will only run software updates that have been signed by an authoritative key held by the device manufacturer. Instead, if you have a device that comes with GPLv3 software (or, more generally, if you have GPLv3 software intended for use in a particular device), the GPLv3 requires the distributor to offer you the necessary keys and instructions to update that GPLv3 software inside the device.</p>

<p>To put it another way, if the device can receive software updates, the user must have the ability to install any modified version of the GPLv3 software, whether that modified version was published by you, or directly edited by the user, or created by any third party. It must not ever be the case that the user has in hand a modified version of the GPLv3 software for your device but is forbidden from installing it on the device. You cannot maintain the exclusive ability to install software on the device by means of secret keys or secret installation protocols. You are welcome to charge money for a copy of updated software for your device, though if the software update is under the GPL or LGPL, you must give the user a copy of the source code under that same license so they can share it with others.</p>

<p>Technically, there is no requirement the device must allow the user to <em>extract</em> already-loaded software <em>out of</em> the device, but this doesn't really matter. You are always required to give the user human-accessible, buildable source code when you give the user GPL-licensed binaries, whether by download, on media, or embedded in a device. The device doesn't need to give the user access to its source code, because you already gave the user source code alongside the device or downloaded software update.</p>

<p>Since the LGPLv3 is an set of additional permissions on top of the GPLv3 (which do not interfere directly with these requirements), this applies equally to the LGPLv3. However, as you might expect from the LGPL's weaker copyleft, you only need to supply the instruction to update the LGPL library, not the entire software on the device. Exactly how to provide an update mechanism that limited to updating to a single library seems like a strange technical problem, but it is legally allowed under the LGPLv3's more narrow scope of this requirement.</p>
","6070"
"What to do if a software component to be published under open source license is linked with other components that are not open source?","178","","<p>In my case we developed several software components that work together to build the final system. Now I want to release my developments under the GPLv3 license.</p>

<p>When checking the dependencies I discovered that there are some static links to other components that are required to provide a runnable implementation. Unfortunately these source code packages are not open source and therefore cannot be published.</p>

<p>Do any methods exist to solve such a situation in which components of a framework are to be published but are closely linked to others that cannot be made available in a public repository?</p>
","<p>There is no way to combine non-free code components with free software with a copyleft license. The reason is that any such combination will be a derivative work of both, and since the terms are mutually incompatible, that would be illegal.</p>

<p>This follows directly from text of the GPL (the quote below is from GPL version 2), but similar language is in GPL version 3:</p>

<blockquote>
  <p>This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The ""Program"", below, refers to any such program or work, and a ""work based on the Program"" means either the Program or any <em>derivative work under copyright law</em>. (my emphasis).</p>
</blockquote>

<p>Please note that copyright law does not deal with computer science technicalities such as various methods of linking, a derivative work is a work that <em>depends</em> on another work, and cannot exist without that other work being present. It is this <em>functional dependency</em> that makes the composite a derivative, and not the method used to combine the components.</p>

<p>This is also made clear by the FSF in the <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLStaticVsDynamic"" rel=""nofollow"">GPL FAQ</a>:</p>

<blockquote>
  <p><strong>Does the GPL have different requirements for statically vs dynamically linked modules with a covered work? (#GPLStaticVsDynamic)</strong> </p>
  
  <p>No. Linking a GPL covered work statically or dynamically with other modules is making a combined work based on the GPL covered work. Thus, the terms and conditions of the GNU General Public License cover the whole combination.</p>
</blockquote>

<p>(As always, Wikipedia can be relied upon <a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License#Linking_and_derived_works"" rel=""nofollow"">to confuse matters</a>. However, the FSF FAQ is written by lawyers, the Wikipedia is written by anybody that has an opinion about something.)</p>

<p>What you need to do is to develop free replacements for all the non-free components.  This has been done in several FLOSS projects in the past.</p>
","1040"
"MIT license ambiguity about copyright?","177","","<p><em>I asked this question in softwareengineering.stackexchange.com but it was pointed out to me that it is better suited to be posted here. I deleted the original thread in the other subforum.</em></p>

<p>So the specific question is: <strong>Is it allowed to incorporate MIT licensed work in closed-source projects thereby practically bypassing the necessity to deliver with the new work an extra file (or link to a site or something like that) stating a copyright hint of a portion of the code which is licensed under MIT?</strong></p>

<p>Actually the MIT license reads like it is not that ambiguous at all. It states </p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>I found these threads on this site, most notably:
<a href=""https://softwareengineering.stackexchange.com/a/264709/262045"">https://softwareengineering.stackexchange.com/a/264709/262045</a></p>

<blockquote>
  <p>even though you legally claimed ownership of the code (as explicitly permitted by the MIT license), you should include a notice to the effect of ""portions of this code were originally created by such and such"" and state the date of their claim to copyright. But you don't necessarily have to do so since you've re-licensed their project and assumed liability.</p>
</blockquote>

<p>but also:
<a href=""https://opensource.stackexchange.com/a/4716/7359"">https://opensource.stackexchange.com/a/4716/7359</a> (<strong>begs the question is attributing the same as including a copyright notice?</strong>)</p>

<p>They read as if I can just just ""legally claim ownership"" and don't <strong>have to</strong> state their claim to copyright (doesn't mean I want to strip them of it which I know is not possible by law, just not stating it, the reason being to not give the competition - which is quite strong in my market - a headstart how to just come up with and sell basically the same product. I customized and added to the MIT code heavily, but still the more competitors are out there the higher possibility that at some point someone will be able to reproduce what I made).</p>

<p>On the other hand there are enough sources that state the (for me perceived) different conclusion, like:</p>

<p><a href=""https://opensource.stackexchange.com/a/4061/7359"">https://opensource.stackexchange.com/a/4061/7359</a></p>

<blockquote>
  <p>But if you distribute binaries, the license text (typically) gets compiled away, therefore you are no longer fulfilling the single condition in the license. What you need to do is include the license with your binary distributions, maybe as a text file, or embedded in the program's about dialog.</p>
</blockquote>

<p>Further complicating the issue, what about if the author of the MIT licensed work answers an email from me saying: </p>

<blockquote>
  <p>""Yes, the code is free to use (and modify). There is a LICENSE file with MIT license [..describing where to find it..]. A short acknowledge note would be appreciated (but it's not required).""</p>
</blockquote>

<p>Again raising the question whether he means attribution or the absolute legal necessity to include the copyright notice.</p>

<p>Most confusing me is the answer by GlenH7 in the above stated thread in <a href=""https://softwareengineering.stackexchange.com/a/264709/262045"">https://softwareengineering.stackexchange.com/a/264709/262045</a> when comparing it to all the evidence to the contrary. He seems credible though and as I cannot comment on his answer not having 50 rep my question is, <strong>do I understand him wrong or IS there a indeed quite glaring ambiguity to the MIT license with respect to this matter?</strong> And finally, if there is no way to not include the copyright notice under normal circumstances, does the author mailing me these words change that fact in any meaningful and legal way?</p>
","<blockquote>
  <p>even though you legally claimed ownership of the code (as explicitly permitted by the MIT license), you should include a notice to the effect of ""portions of this code were originally created by such and such"" and state the date of their claim to copyright. But you don't necessarily have to do so since you've re-licensed their project and assumed liability.</p>
</blockquote>

<p>The attribution to the original creator is not about liability, it's about recognition. You <strong>do necessarily</strong> have to retain copyright notices regardless of liability since this is part of the license obligations. If you do not fulfill the license obligations you no longer have a license to distribute the software and could be infringing on someone's copyright.</p>

<blockquote>
  <p>But if you distribute binaries, the license text (typically) gets compiled away, therefore you are no longer fulfilling the single condition in the license. What you need to do is include the license with your binary distributions, maybe as a text file, or embedded in the program's about dialog.</p>
</blockquote>

<p>You also need to include any copyright notices, not just the license text. Regarding where this is best displayed, anything reasonable works. As part of the documentation or in an about box of an application are good options.</p>

<blockquote>
  <p>""Yes, the code is free to use (and modify). There is a LICENSE file with MIT license [..describing where to find it..]. A short acknowledge note would be appreciated (but it's not required).""</p>
</blockquote>

<p>I'm assuming he means that you need to include the LICENSE file (which in turn I assume includes the copyright notices and the MIT license text) but that anything beyond that is not required but nice. While this might suffice, you actually only have to include any copyright statements and the MIT license text. If there is anything beyond that in the LICENSE file, you are free to exclude it. You also do not have to keep this information in a file named LICENSE.</p>

<p>And the original question.</p>

<blockquote>
  <p>Is it allowed to incorporate MIT licensed work in closed-source projects thereby practically bypassing the necessity to deliver with the new work an extra file (or link to a site or something like that) stating a copyright hint of a portion of the code which is licensed under MIT?</p>
</blockquote>

<p>You are allowed to incorporate MIT licensed work in closed-source projects, but you still need to include the copyright notices and the MIT license text in a place where a user of your binary distribution can find it.</p>
","5100"
"How can I get my program into a Linux distribution (Debian)?","176","","<p>Assume I have programmed a cool application and released it as open source. But not many people are using it, as most install their programs through their distribution of choice. </p>

<p>Can I somehow add my program to a distribution, specifically Debian? What have I to do to be accepted?</p>

<p>You can assume Debian in all cases this is different between distributions in your answer. So you can explain this specific to Debian, but I would like it, if it is mentioned which part is general for all/most distributions.</p>
","<p>For Debian you can proceed as follows:</p>

<ol>
<li>Post an Intent to Package (ITP) bug report to the Debian Bug
Tracking    system (<a href=""https://www.debian.org/Bugs/"" rel=""nofollow noreferrer"">https://www.debian.org/Bugs/</a>). Or if an existing
RFP (Request  for Packaging) bug report for the software already
exists, you can     assign it to yourself.</li>
<li><a href=""https://wiki.debian.org/HowToPackageForDebian"" rel=""nofollow noreferrer"">Create the packaging for the software.</a> </li>
<li>Upload the software and the packaging to <a href=""http://mentors.debian.net/"" rel=""nofollow noreferrer"">http://mentors.debian.net/</a>.
Wait for a sponsor (a Debian Developer who is interested in
uploading your package to Debian) to show up and people (mentors) to
critique your packaging. Possibly also post to the <a href=""https://lists.debian.org/debian-mentors/"" rel=""nofollow noreferrer"">debian-mentors
mailing list</a> about your package.</li>
<li>Improve your packaging to the point that a sponsor is willing to
upload it to the Debian NEW queue. If such a person doesn't show up 
within a certain period of time, you are out of luck, but can try
again later. Note that your package will eventually be automatically
removed from <a href=""http://mentors.debian.net/"" rel=""nofollow noreferrer"">http://mentors.debian.net/</a>.</li>
<li>If a sponsor has uploaded it to the Debian NEW queue, wait and see
if the FTP masters, who are Debian's gatekeepers, accept or reject
your package. If they reject it they will normally give a reason,
and you can try to fix the package and resubmit it.</li>
</ol>

<p>If you happen to know a Debian developer who is willing to upload your package for you, you can skip steps 3 and 4. Note also that the #debian-mentors IRC channel on OFTC is a useful resource for packaging help.</p>
","999"
"Can I apply an open source license if I referenced copyright documentation during development?","175","","<p>I am working on python library that wraps a non-free C library. In order to develop this, I referenced the C library's copyrighted documentation. Because of that my function and variable names are the same as the non-free library's.</p>

<p>Am I still okay to apply an open source license to my library?</p>

<p>EDIT: My question is <em>not</em> whether I can use the C api, but whether using that api's documentation will violate the documentations copyright. I am not replacing or reverse engineering the copyrighted api, but an exposing that api's functions to a python library.</p>
","<p><strong>TL;DR</strong> Yes, you can use a <em>permissive</em> Open Source license for this wrapper program, but not a strong <em>copyleft</em> Open Source license.</p>

<hr>

<p>First, to clear up something that has been raised in comments: As it is written I do not believe your question is about <em>reverse engineering</em> a non-free C library.</p>

<p>You say: </p>

<blockquote>
  <p>I am working on python library that wraps a non-free C library. In order to develop this, I referenced the C library's copyrighted documentation. Because of that my function and variable names are the same as the non-free library's.</p>
</blockquote>

<p>I take this to mean that your python wrapper makes the functions and variables of the non-free C-library available for use in some python program that uses your wrapper to ""bridge"" the python program and the non-free C library.</p>

<p>You don't mention the terms the non-free C library is made available under, but I am going to assume that it is All Rights Reserved (ARR), or at least under terms that does not allow redistribution alone or as part of a derivative work.</p>

<p>If this is what this question is about, then I do not believe the Appeals court's May 9, 2014 decision in <a href=""http://www.potomaclaw.com/oracle-v-google-copyrightability-apis/"" rel=""nofollow"">Oracle vs Google</a> apply.  This case was predominantly about reverse engineering, and the court ruled that the <a href=""https://en.wikipedia.org/wiki/Structure,_sequence_and_organization"" rel=""nofollow"">structure, sequence and organization</a> of the 37 API files Google had copied (in order to make <em>existing software</em> that was based up Oracle's Java API simpler to port to Android.) was copyrightable. Because Google reused this in a competing product, Google was guilty of copyright infringement.</p>

<p>You have <em>not</em> copied an API, nor is your wrapper a derivative work of the API.</p>

<p>You've written a Python library wrapper that <em>uses</em> the documented API to a non-free C library in order to provide functional integration between python and said non-free library.  Since making it possible for programmers to use API functions and variables is the whole point of documenting an API, using the documented API as intended does not infringe the copyright of the API, even <em>if</em> the API itself is copyrightable.</p>

<p>So you're allowed to do create a distribute this program without infringing copyright.</p>

<p>Let's first assume you release your wrapper as ARR, with an explicit permission to combine the wrapper with the library. Will this create problems?  For instance, can you be sued if you do this?</p>

<p>This is not legal advice, but my <em>opinion</em> is that the answer is: ""no"".</p>

<p>You cannot distribute the non-free C library of course, so by itself, your wrapper will no do anything.  Python developers who want to use this have obtain a legal a copy of both an combine them themselves.</p>

<p>Having first determined that this is legal if you distribute your program as ARR, let's move on and see if you can also do it if your wrapper carry a <em>permissive</em> Open Source license, such as MIT (Expat)</p>

<p>Again, I see no problems.  Python developers who want to use this have obtain a legal a copy of both an combine them themselves.  However. the resulting derivative work <em>can not</em> be distributed, because the the terms of the non-free C-library does not allow it.</p>

<p>However, I do not believe you can distribute your wrapper under a strong copyleft license such as GPLv2 or GPLv3.</p>

<p>If you did this, nobody could legally link your wrapper with the non-free library, because the resulting derivative<sup>1</sup> work would had be made available under GPL, and this is of course <em>incompatible</em> with the C-library being ARR.</p>

<p>1) This is based upon the FSF's interpretation of linking. This interpretation is not universally accepted, but since there are plenty of other questions about this, I will no go into that discussion here.</p>
","1392"
"Can I publish my iOS app store app code to GitHub under MIT/GPL","175","","<p>I am about to start developing an iOS app which will be published on Apple App Store.</p>

<p>While developing this app, I am thinking to push all the code to <strong>GitHub public</strong> repository; pull requests from open-source contributors will or will not be taken.<br>
Even if it's going to be public then still I want to keep all the copyrights of that code to be with me.</p>

<p>Is it doable/allowed?<br>
If yes, which license should I use for code on GitHub?</p>

<p><strong>Note:</strong> I am aware that GPL's v3 is not compatible with App Store.</p>
","<p>The <a href=""https://en.wikipedia.org/wiki/MIT_License"" rel=""noreferrer"">MIT license</a> is a default choice for many projects, and it allows you to retain copyright. In fact, most open source licenses do. Only public domain licenses such as CC0 or Unlicense release your copyright.</p>

<p>GitHub has created a <a href=""https://choosealicense.com/"" rel=""noreferrer"">website to help people choose a license</a>. You might find it helpful.</p>
","5658"
"Can I adapt a CC-BY-SA licensed webpage to host rights-reserved copyrighted content?","174","","<p>I think the inverse of <a href=""https://opensource.stackexchange.com/questions/173/what-do-i-need-to-share-if-i-include-cc-by-sa-artwork-in-my-software"">What do I need to share if I include CC-BY-SA artwork in my software?</a>.</p>

<p>Some webpages, such as <a href=""http://codeforamerica.org"" rel=""nofollow noreferrer"">Code for America</a> are licensed under <code>CC-BY-SA</code>. If I want to adapt the code for this web page to host copyrighted content which cannot be redistributed, can I? Is it possible to retain the CC license for the template but have a separate copyright clause for the written content?</p>
","<p>Yes (provided I've understood the question correctly).</p>

<p>Here is the question: </p>

<blockquote>
  <p>If I want to adapt the code for this web page to host copyrighted content which cannot be redistributed, can I?</p>
</blockquote>

<p>If you look inside the GitHub archive, you'll find the entire site there. All of it (markup <em>and</em> its existing contents) is licensed under CC-BY-SA 2.0.</p>

<p>Since this is a copyleft license, you're allowed to adapt it. So whatever you <em>reuse</em> from that site (HTML, CSS, Javascript, images, decorations, etc.) must be made available under CC-BY-SA.  Whatever you're left with after doing this is your website <em>template</em>.  To simplify things, you may want to create a fork on GitHub and make it clear that the template in this fork is a derivative of the <em>Code for America</em> repo, and that it is made available under CC-BY-SA 2.0.</p>

<p>However, <em>after</em> going through this process you can download your fork from GitHub. You can then proceed by <em>adding</em> your own contents to it.  Since this original contents is not derived from anything in the <em>Code for America</em> repo, it is not a derivative work, and you're not obliged to license this <em>original content</em> under CC-BY-SA.</p>

<p>And to expand the answer a little, this not only applies to CC-BY-SA, but to <em>all</em> copyleft licenses I am aware of.</p>

<p>This again boils down to the legal definition of ""derivative work"".</p>

<p>The <em>contents</em> you place on a web-page does not make the composite (template + contents) a derivative of the template.  The reason is that the template and the contents does not require each other to function.  You could replace your contents with some other contents, and the template would still work.  You could use some other template to display your content, and it would still be the same contents.</p>

<p>Just for the record, I have discussed a similar situation with the FSF, where the use case was a template available under the GNU GPL, and a client wanted to be sure that his proprietary images was not ""infected"" by the GPL virus.  This was the reply from the FSF:</p>

<blockquote>
  <p>It is the position of the FSF that if a work licensed under the terms of the GNU GPL isn’t dependent on a particular image in any way, that is, the software would effectively function identically with any other image, then the image could be considered as being distributed in mere aggregation with the work. (Source: Private communication.)</p>
</blockquote>

<p>(While this is about the GNU GPL and not the CC-BY-SA, I think it is applicable, as the ""ShareAlike"" provisions of the CC is very similar to the ""Copyleft"" of the FSF licenses.)</p>

<p>In legal terms, this low level of functional integration between the two means that the composite is <em>not</em> a derivative, but a ""mere aggregate"".  Even <em>strong copyleft</em> licenses, such as the GNU GPL, does <em>not</em> make the copyleft license of a template or CMS apply to the <em>content</em> that is published with the help of the template or CMS.</p>

<p>This also applies in the physical world.  If you write a novel, your publisher will probably hire a graphical designer to create the cover art, decide on page format, fonts, etc.  Your novel, however, will not be a derivative of the graphical designer's artwork - and vice versa.</p>
","1211"
"Is CC BY attribution transitive?","174","","<p><a href=""http://creativecommons.org/licenses/by/4.0/"">CC BY (4.0)</a> is a flexible, permissive license that requires attributing the licensor.</p>

<p>What if: Alice creates an artwork and distributes under CC BY, which is adapted by Bob who also distributes under CC BY, which is in turn used by Carol.</p>

<p>Who does Carol need to attribute? Just Bob, or both Alice and Bob?</p>
","<p>From the CC <a href=""https://wiki.creativecommons.org/wiki/License_Versions#Detailed_attribution_comparison_chart"" rel=""nofollow"">wiki page on attribution</a> (emphasis mine): </p>

<blockquote>
  <p><strong>4.0</strong></p>
  
  <p>Creator <strong>if supplied</strong> and <strong>attribution parties</strong> if designated in reasonable manner</p>
</blockquote>

<p>This means that Carol will need to attribute to Bob if (and only if!) Bob so wishes. Bob can even demand not to be attributed if he wants to. Now what are these attribution parties?</p>

<p><a href=""https://wiki.creativecommons.org/wiki/License_Versions#Credit_to_others_explicit"" rel=""nofollow"">Further on the page</a> we read:</p>

<blockquote>
  <p>In the 1.0 and 2.0 licenses, CC licenses contemplated crediting the author only. Versions 2.5 and 3.0 allow licensors to identify another party or organization for attribution (called an “Attribution Party” in these licenses). This feature was introduced in part to alleviate burdensome or difficult attribution situations, such as when many people contribute to a collaborative effort and agree to be credited as a collective body. In licenses with this feature, licensors may designate another party for attribution purposes—such as a sponsor institute, publishing entity or journal—in addition to or instead of the author. <a href=""http://creativecommons.org/weblog/entry/5457"" rel=""nofollow"">You may review some of the concerns raised when CC proposed this change</a>.</p>
</blockquote>

<p>What this means concretely is that any contributor can choose freely who gets attributed for their work. So if Alice attributed her work to an organization she works for and doesn't ask Bob not to attribute this organization, the Bob will need to include this organization is his attributions as well. He can then choose who to attribute for his work. Carol will then have to attribute both Alice's and Bob's attribution, unless any of those two choose they do not want to be attributed by Carol.</p>

<p>Note that this has nothing to do with copyright, which under CC-BY is an entirely separate matter (which of course also works transitively).</p>
","1083"
"Why do free/libre software advocates tolerate proprietary firmwares in just about every computer components except Wi-Fi cards?","174","","<p>Free/Libre GNU/Linux distributions always talk about how to avoid non-free binary blobs when using Wi-Fi cards which pretty much means using only Atheros chipsets.</p>

<p>What about other devices like hard drives, wired Ethernet cards, DVD ROMs.. Don't they mind using them even if they contain proprietary firmwares?</p>

<p>The only difference I know between the devices above and Wi-Fi cards, is that usually, the Wi-Fi card device driver needs to push the firmware to the Wi-Fi chipset RAM at load time. For the other devices, the firmware is just burned into their ROM.</p>
","<p>The <a href=""http://www.fsf.org/campaigns/free-bios.html"">Free Software Foundation has said</a> that if you can't install software on it, it's not a computer:</p>

<blockquote>
  <p>The ethical issues of free software arise because users obtain programs and install them in computers; they don't really apply to hidden embedded computers, or the BIOS burned in a ROM, or the microcode inside a processor chip, or the firmware that is wired into a processor in an I/O device. In aspects that relate to their design, those things are software; but as regards copying and modification, they may as well be hardware. The BIOS in ROM was, indeed, not a problem.</p>
</blockquote>
","4663"
"How can a profitable business selling open source robotics parts be run if anyone can produce their own?","173","","<p>If open source robotics parts can be manufactured and sold by anyone, is it realistic to make a profit from selling them, or are they only sold at cost price with some other business model for making money?</p>

<p>There are a number of open source robotics projects, but I cannot see a way of telling how they are funded/make money.</p>
","<p>I'm not too sure if you're thinking of competition from other companies or from individuals producing their own parts, but it doesn't make too much difference really. Just because the designs are open source doesn't mean everyone will prefer to make the parts than buy them.</p>

<ul>
<li>Hobby 3D printers and CNC milling are of much lesser quality than professional/industrial machines</li>
<li>Even if you were happy with lesser quality, such machines require a lot of specific knowledge that most end users of the parts won't have and won't be willing to spend the time learning</li>
<li>And there is a large upfront cost in these machines. Whether it's open source or not, larger volumes scale better</li>
</ul>

<p>If your business has the equipment, trained personnel, good quality assurance processes and a head start, it's likely that you'll be able to maintain a profitable business for some time. As an example, I think Tesla were talking about licensing their batteries etc. for free (this involves patents rather than copyright, but it's still a decent parallel). So sure, anyone could make those components. But there will not be many people who could start a successful competitor to Tesla before those components are obsolete, and the size of the market is so large that those who do will be very unlikely to hurt Tesla at all.</p>

<p>Opening your hardware designs ensures that if your business goes bust that the innovations you have will not be lost, and it allows them to be brought now to markets you can't compete in. If the international shipping costs for your product are prohibitive but you have no desire to manage many international production factories, then opening your designs allows others to start producing the products for the international market so that more people can benefit from your amazing product.</p>
","1058"
"Why is Docker so popular?","171","","<p>Docker is a rather popular open source project. </p>

<p>Yet the problems it is solving (around code isolation and environment reproducibility) are not new and have been solved before with many other techniques such as virtual machines, chroot jails, virtual hosts and environments, static linking and bundling of packages, or distros such as Nix and Guix, etc.</p>

<p>So what would be the reasons that made Docker so popular? </p>

<p>What does it do differently from a technical or community perspective?</p>

<p>Note: I am not looking for opinions but rather for facts properly supported with references when possible.</p>
","<p>Speaking as someone who doesn't like docker (or containerisation in general) and thinks it gets wildly overused in places it doesn't belong, I also have to say it's very impressive.</p>

<p><code>chroot</code> jails give you filespace separation, but not network namespace, PID space, or any of the other separations that full virtualisation brings.  Full virtualisation gives you near-total separation from other instances running on the same hardware, but you have to set aside a kernel's-worth of memory (and to a lesser extent, CPU) for each VM spun up.  Containers in general give you a higher level of separation than anything before (save virtualisation) offered, but unlike full virtualisation they're so light that any old desktop can accommodate tens of them without pain.</p>

<p>Docker in particular adds to that copy-on-write file systems and thereby the ability to quickly and cheaply sandbox any number of different code changes, before deciding which to keep and bake into the FS image, and which to discard and roll back.  Though I am not a developer, I can dimly see how powerful a technique this must be for ultra-rapid prototyping.</p>

<p>You haven't asked about the problems, so I won't start into my production-sysadmin rant.  But even as someone who doesn't like some of the ways these tools are used, it seems very clear to me why they've spread so rapidly, and become so popular.  If I had to do what developers do, I think I'd find them a superb tool, too.</p>
","5037"
"Can the code source under a HEIF License be used for a commercial project?","170","","<p>For a <strong>commercial project</strong>, I need to add the support of the HEIF images (Nokia High-Efficiency Image File Format). I found a SDK provided by Nokia that seems to do the job. However I'm in trouble with the license agreement.</p>

<p><a href=""https://github.com/nokiatech/heif/blob/master/LICENSE.TXT"" rel=""nofollow noreferrer"">In the license</a>, it is said:</p>

<blockquote>
  <p>Nokia Technologies Ltd (“Nokia”) hereby grants to you a non-sublicensable, perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this license) license, under its copyrights and Licensed Patents only to, use, run, modify (in a way that still complies with the Specification), and copy the Software within the Licensed Field. For the avoidance of doubt the Licensed Patents shall not include Codec Patents. Codec Patent licenses are neither granted, implied nor otherwise conveyed hereunder.</p>
</blockquote>

<p>which seems to indicate that the source code may be used inside a commercial project. However, the term ""Licensed Field"" refers to this paragraph:</p>

<blockquote>
  <p>Licensed Field means the non-commercial purposes of evaluation, testing and academic research in each non-commercial case to use, run, modify (in a way that still complies with the Specification) and copy the Software to (a) generate, using one or more encoded pictures as inputs, a file complying with the Specification and including the one or more encoded pictures that were given as inputs; and/or (b) read a file complying with the Specification, resulting into one or more encoded pictures included in the file as outputs.</p>
</blockquote>

<p>which seems to indicate the exact opposite of the first paragraph above. </p>

<p>The copyright issues are not my strong point, so can somebody point me if the code relative to this agreement may be used in a commercial project or not?</p>
","<p><strong>IANAL/IANYL</strong></p>

<p>In the first license except you provided it says you can <em>only to,use, run, modify (in a way that still complies with the Specification), and copy the Software within the Licensed Field.</em> Then, you continue with:</p>

<blockquote>
  <p>which seems to indicate that the source code may be used inside a commercial project.</p>
</blockquote>

<p>I don't see a justification for that assertion. It says <strong>only</strong> .. <strong>in the Licensed Field.</strong> Without knowing what <em>Licensed Field</em> means you cannot assume anything. Knowing that, the license includes the second excerpt you provided, which says what <em>Licensed Field</em> means. Doing substitution results in the following <em>created</em> condition:</p>

<blockquote>
  <p>only to, use, run, modify (in a way that still complies with the Specification), and copy the Software within <em>non-commercial purposes of evaluation, testing and academic research</em>.</p>
</blockquote>

<p>That seems to pretty much rule out <em>any</em> commercial purpose completely. It even rules out most non-commercial purposes except ""evaluation, testing and academic research."" That seems to even rule out using it to display your family photos on your personal (non-commercial) website since it is not evaluation, testing, or academic research.</p>

<p>In short: Find a different SDK, or get a commercial license from Nokia to use their SDK.</p>
","5742"
"Can I forbid distributing my open source project for less money than I do?","169","","<p>This question is partially inspired by <a href=""https://opensource.stackexchange.com/q/1255/168"">How is selling FLOSS packages for monetary compensation a viable strategy?</a></p>

<p>After reading that question and some of its answers, I was left wondering if there are licenses which allow modification and redistribution of the project on the condition that one does not charge less money for the distribution than you paid yourself. This would circumvent the problems addressed in the above question.</p>

<p><strong>Are there any licenses that allow this and if so for what reasons would these licenses (not) be considered Open Source/Free?</strong></p>

<p><sub>I strongly suspect that these licenses would not be considered Free or Open, but one never knows.</sub></p>
","<p>Anybody can make pretty much any license they want so yes you could ask a lawyer to write a license like you're describing.</p>

<p>But this would not fit the definition of an open source license. The whole point of open source is to let other people take your work and build on it, and that includes having a different pricing structure to your own.</p>

<p>Sometimes they might take your entire project and take it in a totally different direction, other times they might just fix a couple bugs that you haven't fixed and make it available on GitHub, other times they might include your project as a child work in a larger project, or perhaps they might just grab 5 lines of code you wrote and include it in their own completely unrelated project.</p>

<p>Any restrictions on pricing makes all of those situations nearly impossible. The only ""viable"" option under your license would be to take your project and sell it under a different name, but that's extremely rare. Why would anybody do that when it's so much easier to just contribute to the project you're running instead?</p>
","1278"
"Does accessing the REST interface of a AGPL-licensed server make the client a derivative work?","169","","<p>Supposed I have a server that I have licensed under AGPLv3. Let's also assume that this server has a REST interface.</p>

<p>If I access this REST interface via a JavaScript script file from a client, does this make the script file and / or the client a derivative work?</p>
","<p><strong>The Short Answer:</strong></p>

<p>No</p>

<p><strong>The Long Answer:</strong></p>

<p>The derivative definition is based on copyright law and not a license, and I can't see how a remote web services interface could ever be construed as anything other than separate from the server involved.</p>

<p>You are interacting with a service, not including it in your code.</p>

<p>A service provider MAY be able to constrain you (and your code) with a CONTRACT, but this is a LICENCE, and it shouldn't be able to re-licence your code.</p>

<p>An API (may) have patentable components, but the implementation of a REST service means that any code could interact with it, so it doesn't depend on copyrightable things like Java interfaces etc (or a non-trivial YML).</p>

<p>From memory, AGPL is about forcing the re-licencing when a derivative of the source code is offered as a service, but I couldn't follow the wording of license when I tried.</p>

<p><a href=""https://www.gnu.org/licenses/agpl-3.0.en.html"" rel=""nofollow noreferrer"">AGPLv3 Licence</a></p>

<p>Please note: IANAL and my memory is shaky.</p>

<p><strong>Addendum</strong></p>

<p>I looked again at the AGPL Licence, and I don't see the constraining language myself, except in the preamble.</p>
","4086"
"How do I recruit a graphic designer to help on a project with no funding involved?","169","","<p>Recognized graphic designers usually charge a fee for their work, but what if this project isn't expecting any funds and is expected to run purely off the community?</p>

<p>How would I attract a graphic designer (or designers) to create logos, web site graphics and other artistic/graphical works? </p>
","<p>Visibly crediting their work on the site/product could be seen by some as ""payments through advertising"".</p>

<p>Some graphics design crowdsourcing sites <em>might</em> accept a ""volunteer/for free"" project category. Contributors would be interested to contribute to such projects to increase their visible portfolios, exposure, reputation and ultimately their chances of participating/winning in paid projects.</p>
","128"
"Can I serve open cola in proprietary glasses?","167","","<p>I've just acquired the Hypothetical Cafe (come and visit, we serve great hypothetical food and drinks), and some fancy posh glasses*. They're so posh that an international designer did a special design for them. However, because he hasn't been to Open Source Stack Exchange, he doesn't know the wonders of open source, and kept his design to himself.</p>

<p>However, I've now exhausted my hypothetical budget buying them, so I'm going to have to serve <a href=""https://en.wikipedia.org/wiki/Open-source_cola"">open cola</a> instead of Coca-Cola.</p>

<p>When I put my open cola into these fancy glasses, I am essentially producing a consumable product with mixed licenses. I am then charging H$0.98 for the production and cleaning of this product.</p>

<p>Technically, is this legal? I'm charging for the use of the glasses, which seems a bit legally iffy - or am I covered because people only <em>consume</em> the open part not the proprietary glasses?</p>

<hr>

<p>* Disclaimer: glasses are actually from Ikea.</p>
","<p>Perhaps this wasn't your intention in the hypothetical, but copyright doesn't really enter the picture here. That is, it's not the <em>glass</em> itself that is under copyright, it's the <em>glass design</em>.</p>

<p>Recall that copyright gives authors exclusive rights on the <em>reproduction</em> and <em>distribution</em> of creative works. Once those glasses have been sold to you (i.e. a transfer of ownership, as opposed to a license to use those glasses), the copyright holders can no longer dictate how you use that glass. For example, according to the <a href=""https://en.wikipedia.org/wiki/First-sale_doctrine"">first-sale doctrine</a>, you can then resell, rent or destroy those glasses with impunity.</p>

<p>So when you serve open cola in a glass of closed-source design, you are combining an open source work with something you own, so there are no problems.</p>
","706"
"AGPL v3 licensing: How does external party determine if modifications were made?","166","","<p>When using an AGPL v3 licensed software within a public-facing web application hosted on a private server, you are obligated (section 13) to share your code if you modify the original AGPL code. Many companies providing AGPL code also provide a commercial offering that is not AGPL licensed. </p>

<p>My question is, if I'm a software developer and I simply ""use"" the AGPL code without modification (again, in a public facing web application hosted on a private server), such as by linking a library (e.g. java <code>import</code>), to create a derived work, then provide a web service for the public to access the derived work, how would the original AGPL author upon seeing my service and output, know that I did NOT modify the original AGPL3 code?</p>

<p>Or conversely, from the other point of view, if release software with an AGPL3 license andlater observe someone is distributing a derived work without an AGPL license via a web app, how would I know whether or not this derived work DID modify my original code licensed as AGPL3 (to determine if they're infringing)?</p>

<p>Simply redistributing a derived work without AGPL license (again, in a public web app hosted on a private server) does not mean one is infringing on the original AGPL license, because the derived work needs to MODIFY the original AGPL code. So, in practice, how does one determine infringement? </p>

<p>Do lawyers actually contact companies out of the blue and demand to see their code in all its detail (can they do that?), then get programmers to pour through the code line by line to see if the original AGPL code was modified? Otherwise, it seems impossible to know. But, this doesn't seem practical, and can waste a lot of resources. </p>

<p>How does this play out in practice? Is my understanding of AGPL correct here?</p>
","<p>Section 13 of the AGPLv3 says</p>

<blockquote>
  <p>...if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version...</p>
</blockquote>

<p>So when do you modify the program? The license text says:</p>

<blockquote>
  <p>To ""modify"" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission</p>
</blockquote>

<p>So the central question is whether your combination of new code plus unaltered AGPL-licensed code creates a derivative or combined work under copyright law, such that you would need to permission from the copyright holder to prepare it:</p>

<ul>
<li>If so, you must make the source code of your entire work (which comprises your work and the AGPL-licecnsed work) available to network users.</li>
<li>If not, and your work is actually separate from the AGPL work under copyright law, then you do not satisfy the criteria in Section 13 and the AGPL does not impose its source-sharing requirement on you.</li>
</ul>

<p>Whether the linkage or interaction between the two works will create a derivative work is not an exact science. The FSF's opinion is captured in their <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow"">GPL FAQ</a>:</p>

<blockquote>
  <p><strong>What is the difference between an “aggregate” and other kinds of “modified versions”?</strong></p>
  
  <p>[...]</p>
  
  <p>Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication [...] and the semantics of the communication [...]</p>
  
  <p>[...] If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program.</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>For the second part of your question, how to practically determine if a particular web service uses AGPL-licensed code in a way that the license would require source availability: this, too, is an inexact science. To a limited degree, the same problem exists in non-networked software: how do you determine if closed-source software A secretly and illegally includes work from copyleft-licensed software B? In that case, we can do reverse engineering on the binary, but it can be extremely difficult, especially if the closed-source project deliberately obfuscated their use of the copyleft code.</p>

<p>Ultimately, this is very difficult practical problem, and it could be very hard (harder than it is <em>already</em> for non-network software) to prove infringement. In general, you might have a reasonable case if you can demonstrate an uncanny similarity (e.g., it has the <a href=""https://en.wikipedia.org/wiki/Trap_street"" rel=""nofollow"">same bugs as your software</a>) or if the service provider outright admits using your AGPL-licensed software. The degree to which a court could demand to examine the source code of such a potentially-infringing service surely varies by jurisdiction, and is possibly untested is some jurisdictions.</p>

<p>If you are seriously concerned about this, you may want to speak to an experienced intellectual property lawyer in your jurisdiction who might tell you your options and how a court would go about judging the merits of such a copyright infringement case.</p>
","4700"
"Studies about harassment in the world of open source development?","166","","<p>I was browsing around when I came across this: <a href=""https://news.ycombinator.com/item?id=8415603"">""Open Source is awful in many ways, and people should be aware of this""</a>.</p>

<p>This really struck me and surprised me. While I understand that harassment would be present in all fields and industries, I had never heard this. Some of the comments were interesting as well:</p>

<blockquote>
  <p>I got a bunch of attacks from members of the open source community, due to developing my XML parser. ( Grant McLean and others ) I also got attacked by Poul-Henning Kamp, and then threatened that he would ""shame"" me for pointing out bugs in his software that he refuses to acknowledge. Additionally, the founder of Perl Mongers, Brian D Foy, argued with me about the naming of my application framework, and then refused to approve the naming of my module even after other people on the newsgroup discussed it with me and we came to a good resolution. ( which led to the vanishing of ""registered"" modules on cpan imo )</p>
  
  <blockquote>
    <p>The open source community, at large, is not a happy helpful place, and I have gone through a lot of harassment just contributing my own free open source stuff to the world. Also, I can't say I have ever been thanked for contributing. Just kicked in the face.</p>
  </blockquote>
</blockquote>

<p>With a main focus of Open Source being the source code available to all, I would say that the attacks, if true, or outright unreasonable and inconsiderate. Also, this is outright disturbing to developers working on projects, as well as the pioneers of the industry.</p>

<p>Is harassment a big issue in the Open Source industry? Are there any statistics that show this?</p>
","<p>This question asks two questions: 'is it a problem?' and 'are there studies'? I offer a response to the former.</p>

<p>All internet communities are at risk of hostility. As a subset of internet communities, Open Source development projects have, at least, the same risks as anything else.</p>

<p>Some Open Source communities work hard to avoid these problems. A core value of the Apache Software Foundation, for example, is 'community over code'. And the ASF <a href=""http://www.apache.org/foundation/policies/conduct.html"" rel=""nofollow"">Code of Conduct</a>, which is mandatory for all open source projects, states quite clearly that the sort of bad behavior referenced here is unacceptable. The ASF is by no means the only locus of Open Source development to have such a code and such values.</p>

<p>As with all other aspects of 'open source', you cannot expect a general answer across all projects. Your Mileage Will Vary, and it's always wise to investigate the status and health of a community before investing energy into it.  </p>
","992"
"How does re-licensing without the approval of authors work (eg, wikimedia case)?","165","","<p>Wikipedia (and any other Wikimedia product) <a href=""https://en.wikipedia.org/wiki/Wikipedia:Licensing_update"" rel=""nofollow noreferrer"">change to a dual licence since 01/08/2009</a>. As I understand, that implies they redistribute GFDL licensed text in CC-BY-SA without asking every author (wich would be impossible, because many are anonymous).</p>

<p>Obviously, I'm not against the change, but <strong>I don't completely understand, legally, how it works</strong>.</p>

<p>It said something about ""GFDL clause allowing the re-licensing to occur has now expired"".</p>

<p>And in another projects and most common licenses? Who and how it is determined if re-licensing is allowed?</p>
","<p>You are correct that re-licensing virtually always requires the permission of the copyright holder. This was a rather exceptional case. All material on Wikipedia used to be under the license <em>GFDL v1.2, or any later version published by the Free Software Foundation</em>.</p>

<p>The next version released by the FSF, <a href=""http://www.gnu.org/licenses/fdl-1.3.html"" rel=""nofollow noreferrer"">GFDL v1.3</a>, contained a provision that allowed any licensed material included on a wiki (below, ""MMC"" material on an ""MMC site"") posted prior to November 1, 2008 to be re-licenced under CC-BY-SA 3.0 by the wiki operators:</p>

<blockquote>
  <p>An MMC is ""eligible for relicensing"" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008.</p>
  
  <p>The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. </p>
</blockquote>

<p><em>Why on earth did they do that?</em> Largely, this was done exactly so that sites like Wikipedia could relicense their content to CC-BY-SA, because they felt that the GFDL presented practical difficulties (e.g., requiring a copy of the full license text any time part of an article was reproduced). The FSF explains their decision in the <a href=""http://www.gnu.org/licenses/fdl-1.3-faq.html"" rel=""nofollow noreferrer"">GFDL 1.3 FAQ</a>:</p>

<blockquote>
  <p><strong>What is the rationale behind these changes?</strong></p>
  
  <p>Section 11 has been added to allow wikis like Wikipedia to use FDL-covered works under the terms of CC-BY-SA 3.0 if they choose to do so. They have told us that they would like to explore this option, and adding this provision gives them a clear path to do so.</p>
  
  <p>Normally, these sorts of licensing decisions can and should be handled by the copyright holder(s) of a particular work. However, because Wikipedia has many copyright holders, the project needed some alternative way to accomplish this, and we've worked with them to provide that.</p>
</blockquote>

<p>The clause allowing this has expired, because the license text explicitly only allowed it until August 1, 2009.</p>

<p>Occasionally, projects have <a href=""https://law.stackexchange.com/q/186/84"">unilaterally relicensed without permission form all copyright holders</a>, including Mozilla Firefox, but this appears to simply be <em>prima facie</em> illegal. In those cases, the projects (1) worked very hard to contact all contributors, and (2) did not encounter any active refusals to the change from contributors (or else removed any parts from contributors who did refuse). After a thorough effort to contact everyone, they proceeded with the change, possibly armed with some obscure legal principles or possibly with the belief that any legal fallout would small enough to be manageable.</p>
","2659"
"Is copyright automatic?","165","","<p>If I publish something on my website is a form of copyright automatically placed on that text? </p>

<p>For example I know if you specifically say ""This is published under [insert some cc license here]"" then the copyright / usage rights are changed based on the terms of the license.</p>

<p>However what I don't know is what kind of copyright / usage rights are automatically applied to text?</p>
","<p>Copyright is automatic in all countries that have ratified the <a href=""https://en.wikipedia.org/wiki/Berne_Convention"">Berne convention</a>. That's most of them. Copyright applies to any creative work. The interpretation of creative work is pretty broad. For example a mugshot isn't creative work but any photo that involves even the slightest attention to posing, light, choice of subject, etc. is a creative work. A shopping list is generally not creative work, but as soon as there are multiple ways to convey the same idea, a text expressing that idea is a creative work (the idea itself, however, is not subject to copyright). Copyright exists whether the author of the work is identified or not, and whether a copyright notice is present or not.</p>

<p><a href=""https://en.wikipedia.org/wiki/Copyright"">Copyright</a> is not a right to copy — in fact it's pretty much the opposite: it's a form of exclusive control that the author has over their work. <strong>Copyright forbids anyone other than the author from making copies of the work</strong>, except in ways that the author has chosen to permit, and except in some very narrow ways that vary somewhat between jurisdiction and are called <a href=""https://en.wikipedia.org/wiki/Fair_use"">fair use</a> in the United States.</p>

<p>A <a href=""https://en.wikipedia.org/wiki/License"">license</a> is basically a way in which the author of a work authorizes others to make copies of the work and deal with them in a certain way. A license is a type of legal contract (<a href=""http://www.law.washington.edu/lta/swp/law/contractvlicense.html"">more or less</a>). Typically a license may allow dealing with the work in ways that are not allowed by default, in particular making multiple copies. Conversely a license may forbid dealing with the work in ways that are allowed by default, such as modifying the work¹.</p>

<p>Certain ways of distributing a work effectively carry an implicit license. For example, when you buy a book, you get the right to use that book, to resell it, to write annotations in the margin, etc. When a work is displayed on a web page, this allows anyone to view it in a web browser and (in most jurisdictions, though jurisprudence may still not be fully settled) to download it for offline perusal and edit that offline copy (but not to redistribute the downloaded copy to someone else). Details may vary depending on the type of work and the jurisdiction.</p>

<p>This is why contributing to an open source work always requires an explicit license grant. In the absence of a license, a creative work or a derivative of it cannot legally be redistributed.</p>

<p>¹ <sub> In the absence of a license, modifying a work may or may not be allowed depending on the type of work, the type of modification and the jurisdiction. </sub>  </p>
","317"
"Theseus' Paradox applied to code copyright","165","","<p>Assuming a copyright license (I'll reference <a href=""https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)"">Apache 2.0</a>, but that's an example only) that allows derivations, at what point are those derivations so extensive that the Apache license no longer applies? If every line of code is replaced, classes refactored, packages renamed, moved, merged, and split, to the point that every character has, at one point or another, been replaced, and code structure and flow has been changed, does the Apache license still apply?</p>

<p>What about with copyleft licenses? If there were numerous small changes, then, obviously, each change would have to be licensed under the original copyleft license, so the degree of deviation is irrelevant. But, if there was one big update that changed everything, would it still count as a ""derivative"" and the copyleft license still apply?</p>

<p>I'm not concerned with what is <em>provable in court</em>; assume the history of the code can be proven without doubt.</p>

<p>For those who don't know the reference, <a href=""https://en.wikipedia.org/wiki/Ship_of_Theseus"">Theseus' Paradox</a> is a thought experiment that goes as follows: if the <em>Argo</em> (the ship of Jason and the Argonauts) has had every single wooden part replaced, is it still, fundamentally, the same ship?</p>
","<p>The license used, is actually completely irrelevant. The question lies purely in copyright.</p>

<p>What you need to figure out, is whether your changes will constitute a derivative work. Derivative work means that the new code is derived from the existing code. Generally, a good way of thinking of this is asking yourself the following question: Can my work effectively exist had the old code not existed (assuming you did not write your own code from scratch)?</p>

<p>Theseus' Paradox is interesting here: If you replace every wooden part of the ship, and you show the new ship to a third-party, they may say it is still the old ship. The ship may be new, but the old idea lies.</p>

<p>This is where a fundamental difference kicks in: <em>ideas cannot be copyrighted.</em></p>

<p>Since ideas can't be copyrighted, the rebuilt ship would be considered a completely different ship. Rewritten code would be considered a new library.</p>
","4347"
"Can I quote stuff from a copyrighted piece of text and publish it open sourced?","164","","<p>Suppose I am writing an article for a website. I go to a website for research, and I find a piece of text I want to include. At the bottom of the website it says ""Copyright website.com 2015"".</p>

<p><strong>My questions:</strong></p>

<ul>
<li>Am I allowed to copy this text if I present it in my article quoted, and with a source?</li>
<li>If yes, am I allowed to publish my article under an open sourced license? </li>
</ul>
","<p>The easy part: yes, you are allowed to publish your article under an open-source license.</p>

<p>The hard part: Whether or not you are allowed to copy the text depends greatly on where you are, and what you're doing with the text.  In general, this is covered under <a href=""https://en.wikipedia.org/wiki/Fair_use"">fair use</a>, <a href=""https://en.wikipedia.org/wiki/Fair_dealing"">fair dealing</a>, or other <a href=""https://en.wikipedia.org/wiki/Limitations_and_exceptions_to_copyright"">exemptions to copyright</a>.  It is a very, very broad topic, with the rules varying wildly from country to country.  About the only thing that's consistent is that publishing your article under an open-source license doesn't change the rules.</p>
","979"
"Can I release my plugin scripts as open source if they rely on a proprietary API?","164","","<p>I write scripts for a commercial GIS package (ArcGIS) using Python and the GIS package software API (Arcpy). I had been thinking about putting the scripts that I create on GitHub under an MIT licence but I am not sure if the API of the software makes my scripts open source or not. I guess my question is, how do you know if your work is open source if you use someone else API?</p>
","<p><s>You need to look at what the license of your API will be.</p>

<p>Looking at the <a href=""http://webhelp.esri.com/arcgisdesktop/9.3/index.cfm?TopicName=copyright%20information"" rel=""nofollow"">ArcGIS Copyright Information page</a>...</p>

<blockquote>
  <p>...No part of this work may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying and recording, or by any information storage or retrieval system, except as expressly permitted in writing by ESRI...</p>
</blockquote>

<p>Therefore, using the api and allowing open source freedoms, such as reproduction and distribution is asking for trouble.</s></p>

<p>I misunderstood. It seems like the library in question is actually ArcPy, and not ArcGIS.</p>

<hr>

<p>Therefore, to answer your question, you need to look at the nature of your ""referenced libraries"". You need to look at their copyright/licensing terms, analyze them, and determine how they will impact the goals of your project. For example, can I still fork, share it and the like. You <em>can</em> have specific terms and conditions, such as copyleft (also known as ShareAlike), or make it as permissive as possible (Such as <a href=""http://www.wtfpl.net"" rel=""nofollow"">this license</a>). In the end, you will know your work is Open Source, if it meets their <a href=""http://opensource.org/osd-annotated"" rel=""nofollow"">definition</a>:</p>

<blockquote>
  <ol>
  <li>Free Redistribution</li>
  <li>Source Code</li>
  <li>Derived Works</li>
  <li>Integrity of The Author's Source Code</li>
  <li>No Discrimination Against Persons or Groups</li>
  <li>No Discrimination Against Fields of Endeavour</li>
  <li>Distribution of License</li>
  <li>License Must Not Be Specific to a Product</li>
  <li>License Must Not Restrict Other Software</li>
  <li>License Must Be Technology-Neutral</li>
  </ol>
</blockquote>
","1172"
"How do I license, ""Use my code as per the gnu gpl, but don't put it on github""","164","","<p>I recently received a ""surprise"" email asking a question about one of my gpl'ed projects, and referring to code downloaded from <a href=""https://github.com/icaoberg/mimetex/"" rel=""nofollow noreferrer"">https://github.com/icaoberg/mimetex/</a> That was the first I ever heard about that github project! Moreover, that code's now out-of-date compared with the code that I've been maintaining (ever since I originally wrote every single line of it) at <a href=""http://www.forkosh.com/mimetex.html"" rel=""nofollow noreferrer"">http://www.forkosh.com/mimetex.html</a></p>

<p>Rereading the gpl, as best I can interpret it, I don't see it prohibiting that github project... But I'd like to prohibit it! That is, you can use my code for your own purposes, under the gpl license restrictions, but I don't want you simply re-releasing it as your github (or any other similar repository) fork or project. Especially not when your fork just lies there and gets stale. But really not at all: I'll be the maintainer of my code.</p>

<p>So How do I say that, license-wise? Right now, my code has a gpl comment block at the very top that looks like this...</p>

<pre><code>/****************************************************************************
 *
 * Copyright(c) 2002-2017, John Forkosh Associates, Inc. All rights reserved.
 *           http://www.forkosh.com   mailto: john@forkosh.com
 * --------------------------------------------------------------------------
 * This file is part of mimeTeX, which is free software. You may redistribute
 * and/or modify it under the terms of the GNU General Public License,
 * version 3 or later, as published by the Free Software Foundation.
 *      MimeTeX is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY, not even the implied warranty of MERCHANTABILITY.
 * See the GNU General Public License for specific details.
 *      By using mimeTeX, you warrant that you have read, understood and
 * agreed to these terms and conditions, and that you possess the legal
 * right and ability to enter into this agreement and to use mimeTeX
 * in accordance with it.
 *      Your mimetex.zip distribution file should contain the file COPYING,
 * an ascii text copy of the GNU General Public License, version 3.
 * If not, point your browser to  http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,  Boston, MA 02111-1307 USA.
 * --------------------------------------------------------------------------
 * etc */
</code></pre>

<p>How can I modify that to incorporate these desired ideas?</p>

<p>&nbsp;<strong>Edit</strong><br><strong>-------</strong><br> As per comment to Steve Barnes, below...</p>

<p>I guess I should have made my objections clearer. The fork didn't bother me, per se. Indeed, it would be flattering if other developers picked up my code and kept working on it. But this guy just copied it to github and never touched it, not then and not later. So it got stale. If you're going to fork a project, you should actually intend to do something, not just leave it for other people to unknowingly download years-old stale code, leaving the original developer to explain the problem. Why should I have to do more work because of his laziness, not even bothering to keep his own fork up-to-date?</p>
","<p>Once you have Open Sourced some code other people can, and probably will, place it on other hosting services and there have been many times when everybody has been grateful for this because the original maintainer has moved on, lost interest or otherwise stopped maintaining the code and their original hosting has stopped.</p>

<p>If you find an out of date copy of your code on GitHub simply raise a ticket to point people to the maintained copy or better yet fork their GitHub project to one of your own and double push your changes to your normal location and to your GitHub one. When people see a branch that is years later and 100s of pushes in advance of their one they will mostly use it. The additional benefit is that you might get some PRs from your GitHub repo that reduce your own maintenance effort.</p>

<h2>To reduce your efforts</h2>

<p>Personally I would also look at setting a mail auto-responder/rule that looks for the URL of the stale branch in the body of any message and automatically replies with something along the lines of ""If you are reporting a bug found in the code at httt.... please try the current, up to date code at .... before filing bug reports at .....""</p>
","6191"
"Dual license Apache2.0 GPLv3 for a library with optionnal GPLed code","163","","<p>I have an audio library that optionally uses a GPL sub-library for computing the FFT (FFTW3). At compile time, I can disable FFTW3 and use another FFT implementation (which is slower than FFTW3, but with a more permissive license).</p>

<p>If I release this audio library under GPL, everything would be very easy.
Nevertheless, I also want to let the users of this library to deactivate FFTW3 and then make commercial softwares, without the need to open any modifications.</p>

<p>I was thinking of a dual license Apache2.0|GPLv3 for this audio library.
Users who want to create a GPL-based software can then use this library with the GPLv3 and activate the GPL sub-library FFTW3.
Users who want to create closed source development can also deactivate the FFTW3 and enjoy the audio library with the Apache2.0.</p>

<p>The FFTW3 is also an example, I suppose there might be other interesting GPLed sub-library to add.</p>

<p>Does it make sense ? Is it over-complicate ? Do you see a simpler solution for this situation ?</p>
","<p>The <a href=""https://www.gnu.org/licenses/quick-guide-gplv3.html#new-compatible-licenses"" rel=""nofollow"">FSF</a> and the <a href=""http://www.apache.org/licenses/GPL-compatibility.html"" rel=""nofollow"">Apache Foundation</a> both consider the Apache 2.0 license as compatible with the GPL 3.0 but not with the GPL 2.0.
But the Apache foundation also considers that L/GPL-licensed code is <a href=""http://www.apache.org/legal/resolved.html#category-x"" rel=""nofollow"">not suitable for inclusion in Apache products</a> as released by the foundation. Yet most lawyers I conferred with consider acceptable to use unmodified LGPL-licensed libraries and Apache-licensed libraries in some product under many licenses, including proprietary licenses.</p>

<p>At this stage, my head wobbles and your eyes spin.</p>

<p>So I can release my code using the Apache license and when combined with a GPL-3.0-licensed library it could be treated as GPL-licensed overall and this would eschew the need for dual licensing. </p>

<p>However (<a href=""https://www.gnu.org/licenses/license-compatibility.html"" rel=""nofollow"">at least per the FSF</a>):</p>

<pre><code>One lax license, Apache 2.0, has patent clauses which are 
incompatible with GPL version 2
</code></pre>

<p>To also provide compatibility with version 2 of the GPL, and to maximize compatibility I could either:</p>

<ol>
<li>license under a <a href=""https://www.gnu.org/licenses/license-list.html#apache2"" rel=""nofollow"">choice of Apache 2.0 or GPL 2.0</a> (or later).</li>
<li>OR license under a license that would be <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow"">treated as compatible</a> with the Apache license (such as a BSD or MIT) and the <a href=""https://www.gnu.org/licenses/quick-guide-gplv3.html#new-compatible-licenses"" rel=""nofollow"">L/GPL</a> v2 and v3 both inside and outside of the FSF and the ASF.</li>
<li>OR license under an LGPL license that would be treated as incompatible with Apache at the ASF, but considered OK outside, including for inclusion in commercial products and would be treated as GPL-compatible by the FSF. And to maximize compatibility this would likely be an LGPL 2.1 or later.</li>
</ol>

<p>These would be my options. </p>

<p>To avoid my head to hurt too much, I would look at all this options as if these were code dependency issues between various versions of libraries: I would picture each of these licenses options as various combinations of versions of header files and function signatures some of which compile and work, some other that work sometimes but not always, some that result in a segfault and coredump badly unless I do <a href=""https://www.youtube.com/watch?v=WFLwxGB1qFI"" rel=""nofollow"">two triple back-flips on a bike</a>.</p>

<p>Finally, I might provide some build configuration options and documentation similar to <a href=""https://www.ffmpeg.org/legal.html"" rel=""nofollow"">FFmpeg</a> such that when my code is built with FFTW3 it is quite explicit to my users when GPL-code is mixed in or not. </p>
","4422"
"Is a screenshot with GPL3 resources, GPL3?","163","","<p>With, say, a commercial game (Kerbal Space Program in this instance) with user mods, that are themselves GPL3 licenced and have an effect on the visuals of a screenshot (e.g. art assets, images, custom displays), does a screenshot that includes these custom visuals have to automatically be licenced under the GPL?</p>

<p>My specific query is regarding the <a href=""https://github.com/Mihara/RasterPropMonitor"">RasterPropMonitor</a> plugin, which manages and renders real-time HUD screens. In this case, the whole project lists itself as GPL3, so I assume that automatically covers any attached images/textures, which would then undergo transformation/arrangement by the code - and then be visible on a screenshot.</p>

<p>I can reason how the project can be allowed to be GPL3, as it is ""Downstream"" from the (closed source) base game that it links with (I assume that Unity classes as a 'System Library'), but am troubled by whether everything that touches or relates to the base mod also ends up being GPL3 - e.g. someone who provides a custom screen, is using the GPL3 mod, so that work would also have to be GPL3?</p>
","<p>Screenshots <strong><em>might</em></strong> be a derivative work and <strong><em>might</em></strong> need to comply with GPL (or any other open source license).</p>

<p>The factors to determine this are extremely complicated and must be judged individually depending on the screenshot and how the screenshot is being used. They also vary greatly depending what country's laws are being applied.</p>

<p>If in doubt, this is a case where you need to contact a lawyer in your local jurisdiction.</p>

<p>In the United States most screenshots are ""fair use"" because because they are some kind of commentary or education or archival of the original work and also because when you distribute copies of a screenshot you are not causing any financial harm to the copyright holder.</p>

<p>In some situations, a screenshot can also be a ""de minimis"" copy, for example if a multi billion dollar movie has a scene where for 6 seconds an actor is using Linux... that would not be fair use but it would be such an insignificant use in the scheme of things that the movie cannot be considered a derivative of the GPL'd work. If, however, the movie was <em>about</em> linux then it would not be de minimis and GPL might apply (although if it was about linux then the copy could be fair use...).</p>

<p>If fair use or de minimis do not apply, then a screenshot <strong>is a derivative work</strong> and you must comply with the license. Typically the best option is simply to ask for permission to distribute screenshots, but for GPL that is difficult - depending how the project is run you might need permission from every contributor going back hundreds of years.</p>

<p>Fair use and de minimis copying are part of US copyright law however most other countries have something similar. The specific details vary greatly from country to country.</p>

<p>You are usually only required to comply with copyright law in your own country. Again, ask a lawyer.</p>
","1847"
"Shipping GPL'd binaries in commercial product","163","","<p>I've read lots of discussion on shipping commercial products that link against GPLv2/3 libraries, and products that include code from GPLv2/3 software. But I haven't been able to satisfactorily answer my question about shipping a commercial product that uses GPLv2/3 binaries.</p>

<p>Specifically, I'd like to bundle a modified version of TexLive with my commercial product. My software uses some of the TexLive binaries for interpreting and rendering LaTeX that the user writes. The way my software uses these GPL'd binaries is by executing them and reading their output.</p>

<p>I have no problem adding a notice to my software that it uses a modified version of TexLive, and pointing the users to where they can find the TexLive sources. The users will be free to build their own version of the appropriate TexLive binaries and configure my product to use them instead. (This is easy to ensure, since my product simply invokes the executables at the configured path).</p>

<p>Is this allowed by the GPL? Or does this require me releasing my entire product under the GPL?</p>
","<p>This will be partly down to interpretation, and IANAL.</p>

<p>However this is how I'd read it: that you can indeed distribute in the way you have described, because all you're doing is executing and reading the output. I wouldn't consider this dynamically linked - you're not calling functions back and forth, you're essentially integrating ""at arms length"".</p>

<p><a href=""http://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">The FAQ answer</a> that <a href=""https://opensource.stackexchange.com/users/50/apsillers"">apsillers</a> linked to in a comment deals with this:</p>

<blockquote>
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>From how you're described the way your program works, I'd interpret it to separate programs. But, crucially, others may differ, and as the answer notes, judges will decide.</p>

<p>There is one thing you implied though that certainly would be a problem: not distributing the source code for your modified version. I'm not entirely sure from the way your question was phrased what your plans are here, but for clarity's sake, it's not enough just to link people to the <em>original</em> source if you have bundled a modified version. You must provide the source of your modified version (or at least, include a written offer to provide it).</p>
","2939"
"In an open sourced project who is the owner?","162","","<p>I am working on an open sourced project with some developers.</p>

<p>It occurred to me that I was not sure (legally) who the owner actually is due to it being an open source project.</p>

<p>Is the ownership spit equally between us contributors? </p>

<p>If no, how is it calculated?</p>
","<p>In general, <strong>if you write the code, you own the copyright.</strong></p>

<p>You may have written module A, or the file B, or the function C, or the line D. Doesn't matter who else worked on those parts, the parts you write are your own, and the parts you didn't write aren't.</p>

<p>The only difference is that, since this is an open source project, your co-contributors have the same rights as users of the software - they have access to the source, and can freely use, derive, and redistribute the source code to the extent allowed by the license. What they can't do is claim parts they didn't write as their own.</p>

<p>One notable exception is if you explicitly assign the copyright away. This is done so that the project can relicense in the future without having to bother the original authors. A common method of doing so is via <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"">Contributor License Agreements</a>. Also, if you are writing code for compensation, check the terms because you're most likely working as a for-hire programmer, where your code is owned by whoever is paying you.</p>

<p>As for <strong>who owns the whole</strong>, that's a difficult question to answer. Usually this is agreed upon or fought out in court, where one method may be to estimate the number of man-hours each author spent on the project, and multiply by some expected compensation rate. This is no different than how to split assets when a business partnership splits.</p>
","419"
"Including resources with ambiguous license for GPL application","162","","<p>I'm creating a GPL v3 application. I've found some graphics on www.flaticon.com that I would like to use in the application. The application will be distributed as binary, but with the resources as-is in a subdirectory of the binary. As well as the binary distribution, the application (including resources) will also reside on a publicly accessible repository.</p>

<p>Now, flaticon (owned by Freepik) states that all graphics are free to use for web usage and software applications and such, <em>as long as you credit the author.</em> This is fine and no problem, which is why I went ahead with the project in the first place.</p>

<p>However, reading the license more closely, it states that:</p>

<blockquote>
  <p>What you CAN NOT DO:</p>
  
  <p>Sublicense, sell or rent any contents (or a modified version of them).</p>
  
  <p>Distribute Freepik Contents unless it has been expressly authorized by
  Freepik. </p>
  
  <p>Include Freepik Contents in an online or offline database or
  file.</p>
  
  <p>Offering Freepik Contents designs (or modified Freepik Contents
  versions) for download.</p>
</blockquote>

<p>The full license can be seen here (about half a page): <a href=""https://profile.freepik.com/license/free"" rel=""nofollow noreferrer"">https://profile.freepik.com/license/free</a></p>

<p>As I'm not well-versed in legalese, I would be grateful for help/clarification on the following points:</p>

<ul>
<li>Am I violating their license?</li>
<li>Is their license somehow incompatible with GPL, or does that only extend to program source?</li>
<li>How would it ever be possible to include resources such as theirs, without redistributing in some sense (even on the web)?</li>
</ul>

<p>Edit: I actually have contacted them with the same question, but it seems they're not responding.</p>
","<p>Generally, the question of whether artwork forms a combined work with software that displays has been addressed in <a href=""https://opensource.stackexchange.com/questions/173/what-do-i-need-to-share-if-i-include-cc-by-sa-artwork-in-my-software"">What do I need to share if I include CC-BY-SA artwork in my software?</a>. If your art does not make a derivative work with your code, it's okay if the licenses are not compatible (but it's not completely clear under what circumstances code and art make a derivative work). If indeed your project includes an aggregation of two separate parts (code and data) that are not a combined work, then the GPL could stop at the code only, and the data could be separately licensed. (When the GPL-licensed code consumes the data for display, it would likely be <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#IfInterpreterIsGPL"" rel=""nofollow noreferrer"">just data</a> and not necessarily part of the GPL work.) If you do this, include a LICENSE file that clearly indicates which parts are licensed which way.</p>

<p>Note, however, that the standard Freepik license does not allow distribution, which makes it unsuitable for any works that you plan to distribute. <a href=""https://profile.freepik.com/license/free"" rel=""nofollow noreferrer"">The page you've linked to</a> is not the full license. The last line says:</p>

<blockquote>
  <p>The complete content of licenses can be consulted on the Terms of Use, that will prevail over the content of this document.</p>
</blockquote>

<p>This appears to refer to section 7 of the <a href=""http://www.freepik.com/terms_of_use"" rel=""nofollow noreferrer"">Freepik Terms of Use</a>, ""APPLICATION END USER LICENSE AGREEMENT"". These terms not only appears to be clearly incompatible with the GPL, they also appear to expressly forbid redistributing any Freepik images under any circumstances.</p>

<p>The three particular permissions granted are (emphasis mine, here and following):</p>

<blockquote>
  <p>FreePik grants the User a non-transferable, limited, non-exclusive, worldwide license for the duration of the relevant rights; to <strong>download</strong>, <strong>use</strong> and <strong>modify</strong> FreePik Content, in a device the User owns or controls and only for the purposes and uses allowed in these Terms.</p>
</blockquote>

<p>The permission to ""use"" is tremendously ambiguous, so you might assume it includes the right to redistribute, but the license's list of restrictions says:</p>

<blockquote>
  <p>The User may use the FreePik Content provided that it: (i) does not involve collective use, [...] (iii) the FreePik Content is not used or included in a database or archive in such a way that could prevent or limit future visits or downloads from the Website (iv) <strong>does not resell, assign, transfer or sublicense the FreePik Content or any derived work from a FreePik Content</strong> [...]</p>
</blockquote>

<p>This prohibition against redistribution is reiterated in a later paragraph:</p>

<blockquote>
  <p>The User does not acquire any right as a result of the use of the FreePik Content. In particular, <strong>the User is not authorized to distribute, resell or rent any FreePik Content</strong> (or any modification of any FreePik Content).</p>
</blockquote>

<p>Apparently the only rights being licensed in the text of the actual license are the rights to modify Freepik images (but not distribute those modifications) and to display Freepik images (and derivatives) in a way that does not cause distribution, for example, inclusion in a physical art display or use in a presentation.</p>

<p>Presumably, since Freepik said elsewhere that you may use their images in contexts that do require distribution like on a Website or in software, they would be <a href=""http://legal-dictionary.thefreedictionary.com/estoppel"" rel=""nofollow noreferrer"">estopped from denying you that right</a> for such use, provided you followed all other conditions, but I would be very concerned that such use is expressly contrary to the text of the formal license grant in the Terms of Use.</p>
","2657"
"What kind of license for a small code","162","","<p>I am looking for a license for a small project.</p>

<p>As a mathematician with my collaborators we created some C code that allows one to simulate some equations. This code is pretty simple but allows for plenty of flexibility. It contains 5 files and more or less 10/15 functions. </p>

<p>We would like to upload it to an online repository (like Github, maybe you could proposed something else?) so that the community can use it.</p>

<p>We would like that anyone can use this code and modify it (the idea of the free), But we would like the chain of authors is respected! Each modifications and publications on a repository should cite the past authors.</p>

<p>Also this code use the Gnu Scientific Library, so it has to be compatible, right?</p>

<ol>
<li><p>Which kind of simple license is adapted?</p></li>
<li><p>Other related question, we make a documentation of this code with the help of Doxygen. Do each file must contain authors and license?</p></li>
<li><p>We would like to thanks our supporting institution. Does it possible to do that in compatibility with a license?</p></li>
</ol>
","<p>The Gnu Scientific Library is licensed under the GPLv3. This means that any work based on it should also be licensed under the GPLv3 if it's distributed, so that's pretty much your only choice.</p>

<p>This license does meet all your criteria (possibly apart from ""simple"").</p>

<p>The documentation can be covered by this license as well, or could be separately licensed. Documentation doesn't have to be under the GPL if the source material is under the GPL. Other options are the Gnu Free Documentation License (GFDL), or a creative commons license, for example CC BY-SA.</p>

<p>All these licenses require that attribution is left intact, though for the GFDL, only the 5 most important contributors have to be listed.</p>

<p>Using Doxygen places no restrictions. I believe it's a good idea to list copyright information (author(s) and license name and link) on each documentation page.</p>

<p>Obviously you're allowed to thank whoever you like. You are allowed to do this with any license. Someone might be able to take the software, and remove your ""special thanks"" from it though.</p>
","2044"
"Why does the FSF continue to use the word ""free"" if it's ambiguous?","162","","<p>The word ""free"" is often considered to be unclear, and ambiguous. As such, the word is often used in conjunction with the word ""libre"", as seen in <a href=""https://opensource.stackexchange.com/a/264/69"">this answer</a>.</p>

<p>In the spirit of clarity, the word ""libre"" is often used to clear the alternate meaning of the word ""free,"" so that the implication will be that of free as in speech, not free as in food. Free Software is often referred to as Free/Libre software, and the common acronym FLOSS, stands for Free/Libre and Open Sorce Software.</p>

<p>Therefore, if the word free is consistently added as a pair to the word ""free"", why doesn't the Free Software Foundation instead simply use the word libre? I can understand if there are considerable obstacles to make a complete, efficient transition to the clearer word libre, but I'm curious to see if the FSF has a stance on this.</p>

<p>Just to be clear, I am not asking why the FSF doesn't make the switch, but rather what their stance and efforts are, or have been.</p>

<p>Update: To counteract the fact that the FSF uses ""free"" because of it's implied meaning, The FSFLA (or Free Software Foundation Latin America) has named their linux kernel to be this: <em>linux-libre</em>. </p>

<p>More on the wikipedia article: <a href=""https://en.wikipedia.org/wiki/Linux-libre"" rel=""nofollow noreferrer"">Linux-libre</a></p>
","<p>""Libre"" is a French word (not English). So, people outside France (especially from various countries in the world) may not recognize it at all.</p>

<p>Quoted from <a href=""http://www.gnu.org/philosophy/open-source-misses-the-point.html"" rel=""nofollow noreferrer"">here</a>:</p>

<blockquote>
  <p>Unfortunately, all the alternatives in English have problems of their own. We've looked at many that people have suggested, but none is so clearly “right” that switching to it would be a good idea. (For instance, in some contexts the French and Spanish word “libre” works well, but people in India do not recognize it at all.) </p>
</blockquote>

<p>FSF recommends considering free as in <strong>freedom</strong> (think: ""free speech"") on its definition page. So, (FSF expect/believes that) anyone understands  exactly what ""free software"" is once they read this.</p>

<p>Quoted from <a href=""http://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">Definition page</a>:</p>

<blockquote>
  <p>We prefer the term “free software” because, once you have heard that it refers to freedom rather than price, it calls to mind freedom. </p>
</blockquote>

<p>FSF also provides translation for ""free software"" in other languages:</p>

<p>Quoted from <a href=""http://www.gnu.org/philosophy/categories.html"" rel=""nofollow noreferrer"">categories</a>:</p>

<blockquote>
  <p>Many languages have two separate words for “free” as in freedom and “free” as in zero price. For example, French has “libre” and “gratuit”. Not so English; there is a word “gratis” that refers unambiguously to price, but no common adjective that refers unambiguously to freedom. So if you are speaking another language, we suggest you translate “free” into your language to make it clearer. See our list of <a href=""http://www.gnu.org/philosophy/fs-translations.html"" rel=""nofollow noreferrer""><strong>translations of the term “free software”</strong></a> into various other languages.</p>
</blockquote>

<p>Finally quoting from header @ <a href=""http://www.fsf.org/about/what-is-free-software"" rel=""nofollow noreferrer"">FSF>about>What is free software?</a>:</p>

<blockquote>
  <p>Free software is software that gives you the user the freedom to share, study and modify it. <strong>We call this free software because the user is free.</strong></p>
</blockquote>

<hr>

<p><strong>Note</strong>: I am unable to find <strong><em>absolute/exact</em></strong> information/statement by FSF. So, as you want to know why FSF continues the word ""free"" and why not simply using word ""libre"" instead, <em>I suggest to contact/discuss/<strong>ask</strong> to FSF rather than just asking here.</em></p>

<p>Opinion: I think FSF uses ""Libre"" software for explanatory only. As goal is <strong>Freedom</strong>, recommends <strong>free</strong> software.</p>

<p><sup>Also free relevant to freedom and libre to liberty, <a href=""https://english.stackexchange.com/q/15367"">freedom vs Liberty</a> may help to understand/different/<strong>focus</strong>.</sup></p>
","1272"
"BSD 3-clause: how to update with modifications?","161","","<p>Let's say I start with code that is <code>(c) 2014 Struvious Featherstone</code> and licensed according to the <a href=""https://opensource.org/licenses/BSD-3-Clause"" rel=""nofollow"">BSD 3-clause license</a>.</p>

<p>Now I make some changes for my employer Zippety Duda, Inc. and I want to publish them, with my employer's permission. What does the resulting license have to look like? Is it still required to say <code>(c) 2014 Struvious Featherstone</code>? Or does Zippety Duda Inc. replace that? Or does the code now have to contain both?</p>

<p>And how can I determine this by looking at the BSD license terms?</p>
","<p>Removing somebody else's copyright notices is usually a big no-no.</p>

<p>The first condition of the BSD 3-clause license:</p>

<blockquote>
  <ol>
  <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
  </ol>
</blockquote>

<p>""(c) 2014 Struvious Featherstone"" is the ""above copyright notice"" in your case.</p>

<p>It's also a normal practice to add your own copyright notice by the existing one, but this is not a license obligation. It does however make it very clear that your modifications are also released under the terms of the BSD 3-clause license. If you add your own copyright notice, somebody who modifies the software that you have modified would then need to keep your notice as well as the original one.</p>
","4547"
"GNU GPL dual license with CC-BY-ND?","161","","<p>In a project that I am working on, I would like to use the GNU GPL software license, but I also don't want to have any possible problems distributing my software.</p>

<p>For instance, there were some reports that GNU GPL apps were removed from the Apple App Store because the GNU GPL is not consistent with their terms of distribution.</p>

<p>In order to preempt such a possibility, I am planning to dual-license my code under two licenses</p>

<ul>
<li>GNU GPL v2, or later at your discretion</li>
<li>CC-BY-ND 4.0</li>
</ul>

<p>The thought process is, if some platform decides ""for some obscure legal reason, GPL software is not allowed"", I can say ""fine, I will distribute this release of the code to you under CC-BY-ND"". </p>

<p>But this also doesn't weaken my commitment to free-software, because if someone wants to fork the project, they have to use either GNU GPL, or retain the dual licensing. If they retain only CC-BY-ND, then they can no longer make modifications.</p>

<p>Does this make sense? Will this work the way I think it does? Is there a simpler or better way? Note that if this ""works"", then I would prefer it to using MIT / BSD license.</p>

<p>Do any other projects pursue a similar strategy? I don't know of one, and I'm not a lawyer.</p>

<hr>

<h1>Clarification based on comment discussion below</h1>

<p>So, it's quite possible that I misunderstand what the issue was with Apple and GPL. But I thought the issue was that, Apple imposes terms like ""When you buy the app, you can only install it on one device"", and this is considered to run afoul of GPL which says ""No downstream restriction"". IIUC, GPL software can be sold -- they can decide to sell or not sell, and then they distribute or they don't. But when they decide to distribute, they can't put further restrictions on use of the software. IIUC, CC-BY-ND allows any downstream restrictions, its just no one can make modifications.</p>

<p>Basically what I <em>think</em> that I want is, an escape hatch that allows people to impose downstream restrictions when they distribute, provided they give up the right to make further modifications. Since I think that's basically still consistent with free software. It's possible that I shouldn't want that, I don't really know. But that's what makes sense to me at the moment. </p>
","<p><a href=""https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software"" rel=""nofollow"">Creative Commons does not recommend applying their licenses to software</a>. You seem like you might know this already, but it's worth linking again.</p>

<blockquote>
  <p>if some platform decides ""for some obscure legal reason, GPL software is not allowed""</p>
</blockquote>

<p>What makes you worry about the GPL specifically? What is there to say that the platform will say ""CC-BY-ND is not allowed"", or the same for any other license you might choose? Really, this doesn't make much sense. It's fine if you want to dual-license the work, but your reasoning behind it seems too obscure.</p>

<p>Are you yourself planning to sell the application on the app store? VLC's solution was to license the iOS version under the <a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow"">Mozilla Public License</a>. The MPL has a weaker copyleft than the GPL's but draws a clear boundary for it at the source code file.</p>

<h1>Edit based on OP's comment below</h1>

<p>Instead of dual licensing, you could add it as an additional permission under GPLv3 section 7. In your copyright notice file, say:</p>

<blockquote>
  <p>Copyright (C) 2016 Chris Beck</p>
  
  <p>This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.</p>
  
  <p>Additional permission under section 7:</p>
  
  <p>You may sublicense the work and impose further restrictions on recipients' rights granted herein provided that you not modify the work.</p>
</blockquote>
","4258"
"What is the purpose of ""or (at your option) any later version""? What if I don't want this?","161","","<p>Firstly, what is the exact purpose of the phrase ""or (at your option) any later version"" that usually accompanies GPL-licensed software? I get that it's supposed to be to allow future freedoms to be granted, but why is this particularly an issue with the GPL such that everyone includes this phrase?</p>

<p>Secondly, does this not also work in reverse? So if for example version 4 removes the restriction for modified source code to be supplied alongside the binaries (hypothetical example) then that would mean that people would no longer be obliged to provide the source code, even for older software (because they could choose to redistribute under version 4 instead of version 3). So this phrase not only allows the removal of ""bad"" restrictions from later users, but also retroactively applies the removal ""good""/""important"" restrictions so that later users are no longer bound by the same terms that the original developer intended. It surprises me that no one seems to be concerned about effectively licensing their software under a license that doesn't exist yet and that they have no control over.</p>

<p>Finally, what would be the implications if I were to remove/omit this phrase when distributing my software, and how exactly can I ensure that this part is completely removed/not applied to my software? Is omitting this part generally frowned upon and if so why?</p>
","<p>You are correct to note that “or (at your option) any later version” is a double-edged sword.  If you license code under such a clause, you are placing a lot of trust in the Free Software Foundation that future licenses will be compatible in spirit to the previous GPL versions.</p>

<p>However, licenses have bugs and incompatibilities. By giving the user a choice of licenses, incompatibilities can be removed in future versions. Additionally, a project under such a license already has explicit permission from all contributors to move to a newer GPL version which makes license upgrades much easier.</p>

<p>As an example of a bug in GPLv2, consider Tivoization: GPLv2 software can be embedded in a device without giving users the ability to run modified versions, which violates the intent of this license. With GPLv3, such a workaround is forbidden under certain circumstances.</p>

<p>The GPLv2 is also incompatible with the Apache 2 license because Apache 2 contains a patent retaliation clause. The GPLv3 contains a compatible clause, so that Apache 2 licensed software can be used in GPLv3 licensed software.</p>

<p>Unfortunately, these changes made the GPLv3 incompatible with the GPLv2. E.g. the Linux kernel remains under the GPLv2. But if software had been licensed under GPLv2 <em>or later</em>, then GPLv2 and GPLv3 software can be combined, with the combination being governed by the GPLv3.</p>

<p>The GPLv3 section 14 discusses future license versions. The “or any later version” clause must be explicitly stated if desired. That will permit all future GPL versions. However, the license may also state a <em>proxy</em> that can decide which future versions of the GPL can be used. The GPLv3 does not describe this proxy any further, except that they shall issue a public statement of acceptance of a GPL version. I would like to point out that specifying a natural person as license proxy is very risky since that person may pass away. Using a license proxy only seems viable for mature projects that can denote a role or committee as license proxy, with a clear succession plan.</p>

<p>Not using any “or any later version” clause is perfectly fine. It is your decision whether you want to gift a license to your code to the public, and it is your decision what license you will use. By not using such a clause you do limit how your software can be used due to license incompatibilities, and future license upgrades become more difficult (e.g. if you want to protect future versions of your software from being exploited under a Tivoization-like loophole). However, allowing only a single GPL version gives you more legal certainty and it is perfectly understandable that you might want this.</p>
","6263"
"BSD-3 Closed Source Attribution","160","","<p>I'm having some confusion with the BSD-3 license language.  I am going to close source a bsd-3 project and make modifications to it.  I will not be redistributing the code.  It will be used as a SaaS.  Users will pay to use the updated software and for support, but will never get the actual source code.</p>

<p>If attribution is required, where do I put it?  I know the codebase has the license already in it.</p>
","<p>The only attribution required by BSD is to maintain the copyright/license statement within your sources, but if you aren't distributing the code you don't even need to do that (although you should, in case years from now you or your heirs want to transfer the software to someone else).</p>

<p>As @Philipe Ombredanne pointed out, redistributions of BSD-3 licensed software in binary form must reproduce the copyright notice, license and disclaimer in the documentation and/or other materials provided with the distribution.  This would not apply if you aren't resdistributing the software.  If you distribute documentation, it would be good to include this information in it, but you would not be required to.  But before omitting the licensing information, check with your own lawyer.</p>
","4848"
"External libraries on GitHub","159","","<p>I have recently started using GitHub, as I was told that it is a good thing to do. However, I am wondering how to upload a certain project that uses external libraries. This project, made using Visual Studio 2017, uses some external libraries (SDL 2, GLEW and GLM) stored in a ""dependencies"" folder inside the solution. This folder contains the header files, .lib files and the .dll files.</p>

<p>Can I upload these to GitHub as part of my project, in order for it to run, without getting any legal issues from the creators of these libraries? Do I have to credit them somewhere, just let the user manually install them, or is there something that I'm missing?</p>
","<p>I wouldn't recommend uploading static binaries and header files to GitHub. A better approach might be to create a script that is executed before compilation that downloads these dependencies. Alternatively, you could use what is already installed on the machine, if that is applicable. </p>

<p>If you choose to upload the external libraries to GitHub, you must comply with all of the terms and conditions of their licenses. For example, you must show the full copyright notice for some of these libraries.</p>

<p><a href=""https://github.com/nigels-com/glew/blob/master/LICENSE.txt"" rel=""noreferrer"">https://github.com/nigels-com/glew/blob/master/LICENSE.txt</a>
<a href=""https://www.libsdl.org/license.php"" rel=""noreferrer"">https://www.libsdl.org/license.php</a>
<a href=""http://glm.g-truc.net/copying.txt"" rel=""noreferrer"">http://glm.g-truc.net/copying.txt</a></p>

<p>It looks like the licenses for your external dependencies are fairly permissive. However, I'll give you an example of might happen if you chose to upload a GPLv3 binary. If you uploaded a GPLv2 binary, you would be required to provide the source code for this binary as well as all instructions to configure, compile, and install the binary. If you don't comply with these requirements, you could lose your rights to continue using the binary or be sued.</p>

<blockquote>
  <p>Do I have to credit them somewhere, just let the user manually install them or is there something that I'm missing?</p>
</blockquote>

<p>Yes, the external libraries you are using require attribution if you choose to upload static binaries to GitHub. See the URLs to the licenses that I linked above. From the MIT license:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</p>
</blockquote>

<p>I don't believe you have to do any sort of attribution if you let the user manually install the dependencies. However, the same sort of attribution would be required if you are statically linking your these libraries into your program, and sending the resulting binary to somebody else.</p>
","5537"
"use fabric.io crashlytics in gpl android app","158","","<p><a href=""https://fabric.io/kits/android/crashlytics"" rel=""nofollow noreferrer"">fabric.io Crashlytics</a> is a service for watching number of daily users, log of crashs and ... . Can I use fabric.io Crashlytics in GPL Android app? If the answer is yes, should I publish the API key with source? Or can I hide it in published source code?</p>

<p><strong>UPDATE:</strong>
  I communicate with this library through a library they provided for us and watch the number of users and crash logs through my dashboard in <a href=""http://fabric.io"" rel=""nofollow noreferrer"">http://fabric.io</a>.
The library is not open source.</p>
","<p>The fact that you are accessing such service is irrelevant. What is relevant is that you need to use a proprietary library. Generally speaking it is not possible to combine proprietary code and GPL code into a single app. The main exception is when the people who wrote the GPL code provided explicit permission to combine with certain proprietary libraries. If you can get such permission from the copyright holders of the GPL code, then it should be OK.</p>

<p><a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"" rel=""nofollow noreferrer"">This question in the GPL FAQ</a> contains information on what kind of provision copyright holders can make to let people link their code with specific GPL-incompatible libraries.</p>
","5475"
"Is an 'un-modifiable' linux a violation of GPLv2?","157","","<p>I have a D-Link DIR-816 router that runs a 'trimmed-down' version of BusyBox v1.12.1 running a linux kernel version 2.6.36 (linsongdeng@gj222d.gj.com) (gcc version 3.4.2) #35 Wed Sep 23 17:23:58 CST 2015</p>

<p>I say 'un-modifyable' and 'trimmed-down' because amongst other that aren't present, there is no way (that I can see) in which I can install other programs or modify anything other than configurations. This is because it does not have a package manager (dpkg, rpm etc.) or any of the make utilities.</p>

<p>So is that in any way a violation of GPLv2 ? If not, is it one under GPLv3 ?</p>
","<p>One of the main differences between GPLv2 and GPLv3 is the so called ""anti Tivoization clause"", meant to prevent ""Tivoization"". From <a href=""https://www.gnu.org/licenses/quick-guide-gplv3.en.html"" rel=""nofollow"">https://www.gnu.org/licenses/quick-guide-gplv3.en.html</a>: </p>

<blockquote>
  <p>Tivoization: Some companies have created various different kinds of devices that run GPLed software, and then rigged the hardware so that they can change the software that's running, but you cannot. If a device can run arbitrary software, it's a general-purpose computer, and its owner should control what it does. When a device thwarts you from doing that, we call that tivoization.</p>
</blockquote>

<p>And the relevant part of the <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">GPLv3 license itself</a>, from section 6:</p>

<blockquote>
  <p>""Installation Information"" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p>
  
  <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p>
</blockquote>

<p>So to answer the question: No, the router software being un-modifiable is not a violation of GPLv2 (you should still have access to the source code, of course) while it could be a violation if Busybox and/or the Linux Kernel were GPLv3 licensed. In this hypothetical GPLv3 case the router manufacturer would violate the GPLv3 if they could modify the software of your router while you couldn't.</p>
","4494"
"Is it appropriate to use open source license with Matlab code?","157","","<p>Since Matlab itself is not open source (commercial software and Matlab language can only be used within the Matlab environment), is it OK to put my Matlab code on github under open source license, e.g., MIT or GPL? </p>
","<p>Yes it is fine to release your Matlab code under a FLOSS license, althought not GPL but you can use LGPL, Apache 2.0 or BSD licenses. Choose depending on your purposes for the code.</p>

<p>The Free Software Foundation advises to use LGPL for libraries which will be used along with nonfree software or Apache 2.0 if for some reason you don't require strong copyleft protection on your code or if it is a very small program. Read <a href=""https://www.gnu.org/licenses/license-recommendations.html"" rel=""nofollow noreferrer"">FSF's license recomendations</a></p>

<p>Mathworks for example requires BSD licensing for code to be released in their File Exchange. Read Mathworks' <a href=""http://www.mathworks.com/matlabcentral/termsofuse.html#filex"" rel=""nofollow noreferrer"">TOS</a></p>
","4888"
"Is the BY-NC-ND license the most strict CC license for my open source project?","156","","<p>Suppose I am working on an open source project. I am nearly finished, and about to publish it. I would like to release it to the public so that they can learn and make their own version but I DO NOT want them to republish or sell in ANY way.</p>

<p><strong>My question:</strong></p>

<p>Is the CC-BY-NC-ND license the most strict license that I can use to prevent users from republishing / selling / using for commercial use? </p>
","<p>It would seem so. Many software licenses (and <em>all</em> open/free licenses) grant the right to redistribute and change at minimum, so picking one of those doesn't suit. CC licenses aren't made for software, and this is actually an asset to you for this.</p>

<p>CC BY-NC-ND is non-free, non-open, and grants <em>almost</em> no rights at all. You're allowed to use the work as inspiration, to read the code, and to redistribute without modifications, but nothing else - <a href=""https://creativecommons.org/licenses/by-nc-nd/3.0/"" rel=""noreferrer"">read the summary</a>.</p>

<p>However, you <em>could</em> just say ""all rights reserved"". You imply that people can read it by publishing, but if all rights are reserved they can't do anything else.</p>
","750"
"Am I allowed to use GNU Unifont in a closed source application?","154","","<p>I was looking for a <code>.ttf</code> font, where almost all of the unicode characters are created. Then I've found the <a href=""http://unifoundry.com/unifont.html"" rel=""nofollow"">GNU Unifont</a></p>

<p>It is licensed under <a href=""http://unifoundry.com/LICENSE.txt"" rel=""nofollow"">GNU GENERAL PUBLIC LICENSE Version 2</a></p>

<p>The application I am working on cannot be open sourced (not my choise). It is not just closed-source, but commercial also. Am I allowed to use <code>GNU Unifont</code>?</p>
","<p>From the website: </p>

<blockquote>
  <p>The precompiled fonts are released under the terms of the GNU GPL
  version 2, or (at your option) a later version, with the exception
  that embedding the font in a document does not in itself bind that
  document to the terms of the GPL.</p>
</blockquote>

<p>So, it would be not legal to use GNU Unicode (including the fonts) on any closed-source application, per copyleft licensing terms.</p>

<p>But in your situation, I would strongly recommend that you make use of the open and permissive DejaVu ttf Fonts (<a href=""http://dejavu-fonts.org"" rel=""nofollow"">http://dejavu-fonts.org</a>) within a font rendering library under a permissive license, on your work.</p>
","3977"
"Are discriminatory free licenses still free?","154","","<p>With free licenses, one cannot restrict <a href=""https://opensource.stackexchange.com/questions/53/can-i-restrict-who-can-utilize-my-software"">who or how the software is used</a>.</p>

<p>Suppose that I construct a <a href=""http://nonwhiteheterosexualmalelicense.org/"" rel=""nofollow noreferrer"">license</a> that says:</p>

<blockquote>
  <p>If you are not Steve you are permitted to license under <strong>A</strong>; if you are Steve then you are permitted to license under <strong>B</strong>.</p>
</blockquote>

<p>Where <strong>A</strong> and <strong>B</strong> are both terms that, when considered in isolation, would be free/open.</p>

<p>This means that the software is freely available to everybody at any point, but the exact terms discriminate based on some arbitrary criterion (let's pretend the ""you are Steve"" part is legally unambiguous).</p>

<p>Is such a license still considered free? Or open source? Both? Neither?</p>

<p>To clarify, because this is indeed a bit confusing:</p>

<ul>
<li>This license is <em>not</em> dual licensing; not everyone can license under terms A, nor B; the licensor does not choose which terms to abide, it is dictated by the license itself</li>
<li>The license itself does not give the right to relicense; a not-Steve cannot fork and redistribute under terms that grant a universal license under A, even to the Steves, and vice versa. The discriminatory mechanism remains, that is, if Steve licenses from not-Steve, then he must follow terms B.</li>
</ul>
","<p>The answer is ""no"".</p>

<p>While the new license you've constructed has at is basis two well-known free licenses, it is still a <em>different</em> license and it obviously fails the the <a href=""http://opensource.org/osd"">Open Source Definition</a>:</p>

<blockquote>
  <p>The license must not discriminate against any person or group of persons.</p>
</blockquote>

<p>Apart from the definition, something should also be said of the problems this ""license"" will create for the community:</p>

<p>To recapitulate: ""not-Steve"" is only permitted to license under license ""A"", and ""Steve"" is only permitted to license under license ""B"", where ""A"" and ""B"" are terms from well-known free licenses, but where the terms in addition calls for continuation of the discrimination.</p>

<p>I.e. each derivative can only have <em>one</em> of the two licenses, so this is <em>not</em> dual licensing, where downstream recipients can choose between the licenses. Provided the terms of ""A"" are not compatible with the terms of ""B"", the initial discriminatory license has now forced the project to <em>fork</em>, which is considered harmful.</p>

<p>So such a license both conflicts with the OSI definition of Open Source, and is having the harmful side-effect of forcing developers to create non-compatible forks. For these reasons, such a license should be classified as non-free.</p>
","1166"
"Can a free software (as in free speech) be not free (as in free beer)?","154","","<p>I was a bit puzzled when I read the description of <a href=""https://notepad-plus-plus.org/"" rel=""noreferrer"">Notepad++</a>:</p>

<blockquote>
  <p>Notepad++ is a free (as in ""free speech"" and also as in ""free beer"") source code editor</p>
</blockquote>

<p>It seems to give room to the possibility that there is free (speech-type) software that might not be free (beer-type). Is this the case for instance of all those open-source software which offer a subscription service with more features or with customer support?</p>
","<p>What freedoms you provide to a recipient of a piece of software is orthogonal to what price you charge to transfer a copy of that software to someone.</p>

<p>The <a href=""https://www.gnu.org/philosophy/selling.en.html"" rel=""noreferrer"">FSF's position on selling free software</a> is:</p>

<blockquote>
  <p>Actually, we encourage people who redistribute free software to charge as much as they wish or can. If a license does not permit users to make copies and sell them, it is a nonfree license.</p>
</blockquote>

<p>But they go on to note that after initial distribution, the software could move freely without money changing hands:</p>

<blockquote>
  <p>With free software, users don't have to pay the distribution fee in order to use the software. They can copy the program from a friend who has a copy, or with the help of a friend who has network access. Or several users can join together, split the price of one CD-ROM, then each in turn can install the software.</p>
</blockquote>

<p>In light of this, it usually only makes sense to charge a distribution fee when either:</p>

<ul>
<li>You expect to make only one, initial sale (e.g., the ""ransom model""), possibly via crowdfunding, and then the software will move freely to new recipients. You price your initial sale accordingly high.</li>
<li>You are distributing the software to parties who do not <em>want</em> to distribute it further: e.g., a corporation who buys customized GPL software does not want their competitors to also get their hands on that software. The fact that the recipient has the freedom to distribute it is irrelevant, because they will not choose to utilize that freedom.</li>
</ul>

<p>Far more common is selling support or manuals. In this case, the software probably is likely free of charge; the distributor merely happens to raise money by offering non-software goods or services for a fee.</p>
","6017"
"How should I assert copyright when I'm forking an MIT project?","154","","<p>I have an open source software project licensed under MIT. </p>

<blockquote>
  <p><strong>The MIT License (MIT)</strong>  </p>
  
  <p>Copyright (c) 2016 Håvard Fossli</p>
  
  <p>Permission is hereby granted, free of charge, to any ....</p>
</blockquote>

<p>I found some code on another repo also licensed under MIT and I want to use bits and pieces of that. The MIT license has a copyright notice on top with the name of that author. </p>

<blockquote>
  <p><strong>The MIT License (MIT)</strong>  </p>
  
  <p>Copyright (c) 2016 John Snow  </p>
  
  <p>Permission is hereby granted, free of charge, to any ....</p>
</blockquote>

<p>Should my license be updated to look like this?</p>

<blockquote>
  <p><strong>The MIT License (MIT)</strong>  </p>
  
  <p>Copyright (c) 2016 Håvard Fossli<br>
  Copyright (c) 2016 John Snow  </p>
  
  <p>Permission is hereby granted, free of charge, to any ....</p>
</blockquote>
","<p>Yes, that's exactly how you should do it.</p>

<p>If, in the future, you happen to have written out any code by the original contributor, then you could (if you wish), remove their name - but you'd have to be sure none of their code remains of course :)</p>
","2801"
"Software license with external libraries","154","","<h2>Scenario</h2>

<p>I plan to share the source code of a larger software that depends on external libraries. The directory structure of the project is as follows</p>

<pre><code>src/
    ... my source code
ext/
    ... external source code
</code></pre>

<p>The external libraries only have few modifications and contain the original license headers. The external libraries have BSD, GPL, LGPL licenses.</p>

<p>The entire source code will be shared and additionally provided as pre-compiled binaries for download.</p>

<h2>Question</h2>

<p>Can I put my code in <code>src/</code> under a different license than the external packages in <code>ext/</code>? Specifically, I would like to restrict usage to research/academia and prohibit commercial use.</p>
","<p>It seems you are really asking: ""Can I restrict users' rights to my larger work (such as commercial use) if it is dependent on BSD, GPL and LGPL open-source libraries?""</p>

<p>The answer is: if your work is dependent on at least one library under GPL, then I can already tell you that you can't because your larger work is a derivative of the GPL software and, as a derivative, it'll have to be licensed under a compatible license which means you can't restrict the freedom of use.</p>

<p>Please refer to the following answer for a great explanation of what a derivative is and why it doesn't matter whether you put your own source code in src/ or in ext/: <a href=""https://opensource.stackexchange.com/questions/1579/when-is-my-project-a-derivative-work-in-an-interpreted-language"">When is my project a derivative work in an interpreted language?</a></p>

<p>However, if you can argue that your software <em>isn't dependent on the GPL code</em> and you don't distribute it along with your code, then you could create a custom license (open-source is clearly not suitable for your purpose), such as an EULA, for this purpose. This tool may help you get started: <a href=""http://www.binpress.com/license/generator"" rel=""nofollow noreferrer"">http://www.binpress.com/license/generator</a>.</p>
","2155"
"Can a team be the copyright holder (MIT)?","153","","<p>I'm developing in a team of OSS developers and currently my name is specified in all LICENSE files or copyright headers. But, as it's a teamwork instead of writing ""Copyright (c) 2017 MY Name"" I would like to write ""Copyright (c) 2017 The Team Name"".</p>

<p>Is this acceptable from a legal point of view?</p>
","<p>Yes, this is perfectly acceptable and this is a common practice when you want to establish a shared copyright. For instance this is commonly used (with a BSD license) for <a href=""https://github.com/chromium/dom-distiller/blob/d16a68c1b885f679ae1266a9eeee66e69c12e67c/javatests/org/chromium/distiller/OpenGraphProtocolParserAccessorTest.java#L1"" rel=""nofollow noreferrer"">Chromium</a> that uses a copyright notice of <code>Copyright (c) The Chromium AUTHORS</code>. Several other projects are using <a href=""https://github.com/search?l=C&amp;q=Copyright%20authors%20MIT&amp;type=Code"" rel=""nofollow noreferrer"">a similar approach</a>.</p>

<p>It has the definitive advantage of simplicity as each contributor does not feel compelled to add its own name to any file that is touched.</p>

<p>And the VCS history and/or an <code>AUTHORS</code> file can be used to track actual contributors if need be. </p>

<p>It also makes parsing copyright notices much simpler rather than handling some long, stacked, multilines and multiholders copyright statements (even for more advanced parsers like <a href=""https://github.com/nexB/scancode-toolkit/blob/185675bdec39156c6dad34098774d64b1146ed31/src/cluecode/copyrights.py"" rel=""nofollow noreferrer"">mine</a>).</p>

<p>All this means brief and clear copyright statements which is a good thing for your project team and your users.</p>
","4970"
"Distributing a .NET Core project under GPL","153","","<p>Although the source code of the most .NET Core components is licensed under a MIT License, the binary files of the .NET Core runtime and other supporting libraries on NuGet are released under <a href=""https://www.microsoft.com/net/dotnet_library_license.htm"" rel=""noreferrer"">a more restrictive license</a>.</p>

<blockquote>
  <p>iii. Distribution Restrictions. You may not</p>
  
  <ul>
  <li><p>alter any copyright, trademark or patent notice in the Distributable Code;</p></li>
  <li><p>use Microsoft’s trademarks in your programs’ names or in a way that suggests your programs come from or are endorsed by Microsoft;</p></li>
  <li><p>include Distributable Code in malicious, deceptive or unlawful programs; or</p></li>
  <li><p><strong>modify or distribute the source code of any Distributable Code so that any part of it becomes subject to an Excluded License. An Excluded License is one that requires, as a condition of use, modification or distribution, that</strong></p>
  
  <ul>
  <li><p><strong>the code be disclosed or distributed in source code form; or</strong></p></li>
  <li><p><strong>others have the right to modify it.</strong></p></li>
  </ul></li>
  </ul>
</blockquote>

<p>According to the above text from that license, it seems that GPL is an <code>Excluded License</code>.</p>

<p>So I can't distribute a .NET Core project under GPL, or I've misunderstood something?</p>
","<p>You have understood things correctly: the GPL and copyleft licenses are explicitly targeted here without naming them. So you cannot redistribute things in a way that would make Microsoft software subject to a copyleft. </p>

<p>Since these are system libraries, you would likely not redistribute them and should not.</p>

<p>But if you are saying that this license is for pre-built binaries and that the sources are MIT-licensed, then use the sources, do not reuse the binaries and be happy. The MIT is considered as compatible with the A/L/GPL licenses. And you could released binaries built from these sources combined with your copyleft-licensed code.</p>
","5159"
"Requirements for using an Apache-licensed library","153","","<p>I am totally confused by these tons of copyright licenses that protect the libraries. I noticed that a lot of libraries are using the Apache License 2.0 and obviously I took a look at the license but I could not even understand a single word. (1. I am not a lawyer + 2. English is not my first language)
Then I found an FAQ page with the question ""I am not a lawyer - What does that all mean?"" I went through this section, but I still do not completely understand the things that I have to do.
The section was about ""Apache softwares"", and my interpretation of that word is ""software made by the Apache Foundation"".
So, what do I have to do when it comes to libraries, that are using the license but are NOT made by Apache, for instance the GSON library for Java?</p>

<p><strong>So, the questions are:</strong></p>

<ol>
<li>The license says that I have to include a copy of the license in the project when I used an Apache-licensed library. If the library already contains the license, do I still have to copy and include it into my project file? If yes, where do I have to paste it?</li>
<li>The license says that I have to write down which libraries are licensed by the license. Is there an official form for doing that or is it enough to just write a short notice?</li>
<li>Do Apache-licensed libraries also count as ""Apache softwares""?*</li>
</ol>
","<blockquote>
  <p>The license says that I have to include a copy of the license in the project when I used an Apache-licensed library. If the library already contains the license, do I still have to copy and include it into my project file? If yes, where do I have to paste it?</p>
</blockquote>

<p>If a third-party library already contains a copy of the license you do not have to copy yet another of the license text, though it is fine if you do. </p>

<blockquote>
  <p>The license says that I have to write down which libraries are licensed by the license. Is there an official form for doing that or is it enough to just write a short notice?</p>
</blockquote>

<p>Just a simple list in a text file bundled with your software would be enough. If you have a GUI, having some mention in an About page of sorts is not required but a nice thing to do.</p>

<p>If the library has a NOTICE file, then this NOTICE should also be included (especially if it was not included in the library).</p>

<blockquote>
  <p>Do Apache-licensed libraries also count as ""Apache softwares""?</p>
</blockquote>

<p>Not all the libraries using the Apache license are from the Apache Software Foundation (ASF). So in the <a href=""http://apache.org/foundation/license-faq.html#WhatDoesItMEAN"" rel=""nofollow noreferrer"">Apache FAQ</a> the ASF references their own software.</p>

<p>When a library is not from Apache (say for instance Google GSON) the same terms apply but the author is Google not Apache and you can likely substitute the ""Apache software"" references by the ""Google GSON software"".</p>
","4853"
"Mixing Apache 2.0 and AGPLv3 in open-source project","152","","<p>I have developed and released an open-source Java library under Apache 2.0 license. In the next version, I plan to include BerkeleyDB as one of the supported storage engines. Note that the actual BerkeleyDB source and binaries will not be included in my release. I use a Maven structure, so BerkeleyDB will be declaired as one of the dependencies.</p>

<p>Unfortunately BerkeleyDB is licensed under AGPLv3 and as far as I know it is not compatible with Apache 2. My question is does this affect the license of my software? I want to continue allowing the users to use my lib in commercial applications. Does adding BerkeleyDB support effectively forces them to open-source their projects IF they use my library?</p>
","<p>The FSF insists that linking against a GPL library makes the result a derivative, and thus must be under GPL. That is not what the relevant law says (it is silent on ""linking""). On the other hand, to use the library you need the declarations of the stuff in it, which is in a header file included in the source. Thus it <em>does</em> depend on a piece of the library... and again, if that is enough to make it a derivative isn't clear cut.</p>
","2383"
"What happens to an open source project when the copyright expires?","152","","<p>With conventional copyright, N years after the author's death the copyright expires (where N varies from country to country). Since free and open source licences are supported legally by copyright law, what happens N years after the original author's death? Does the project move from being free or open source to being public domain?</p>

<p>Does the result depend on who else contributed (since their copyright contributions will also be part of the overall project)? Do continuing contributions prevent the project from becoming public domain, or will those parts of the project contributed by people who have since died over N years ago become public domain, leaving the free or open source licence only applying to the more recent contributions?</p>
","<p>The copyright on the combined work expires when the most recent part of the individual copyrights expires (in the US generally life + 70 years of the last author) and the project would enter the public domain.</p>

<p>Older parts of the project enter the public domain before the newer parts, and with that, the combined work do. It's possible for a combined work to have its older parts in the public domain, while its newer parts are still under copyright. In that case, you could use the older version as a public domain version.</p>

<p>For most software projects this is somewhat of a non-starter. life + 70 years is effectively forever. I don't have my crystal ball with me at the moment, but I don't suspect much software written now will still have applications in the year 2085.</p>
","546"
"What license to use and how to handle copyright disclaimer?","152","","<p>I'm currently building a website for a small, local soccer club. I'm building it, based on a template of <a href=""https://html5up.net/"" rel=""nofollow"">html5up.net/</a>. As far as I know, their only requirement for doing so is that I give them credit. I do that, at the bottom of every page. </p>

<p>However, I was wondering which license I should add to this website, to be safe? I was thinking about <strong>GPL</strong>? If I remember correctly, it allows others to use my code, so long as their products are open source and use the same license. Do I need to mention this license somewhere specific on the site, or is a README file on GitHub sufficient? If possible, I'd rather not clutter the site with it. </p>

<p>Also, what do I do with the copyrights disclaimer? On default, the template of Html5up says:</p>

<pre><code>© Untitled. All rights reserved
</code></pre>

<p>Do I replace Untitled by my own name? Or the one of the soccer club? I would like my own name to be credited, to be perfectly honest. </p>
","<p>I am not sure what you mean by ""to be safe"", but assuming that you mean safe as in using the templates without violating the license under which they are available to you, you can pick any license you want for your own work as long as you credit HTML5 UP as stated here: <a href=""https://html5up.net/license"" rel=""nofollow"">https://html5up.net/license</a>. I believe you doing this on the bottom of every page is quite enough.</p>

<p>The copyright line in the templates is for you to add your own copyright statement. Unless you have some agreement with the soccer club forcing you to use their name for any work you do for them or something like that you can use your own name.</p>

<p>If you want to use GPL for your website source, here's how to do it: <a href=""https://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow"">https://www.gnu.org/licenses/gpl-howto.html</a></p>
","4487"
"Why is the Non-Profit Open Software License (NPOSL) OSI-approved?","151","","<p>Recently I came across the <a href=""https://opensource.org/licenses/NPOSL-3.0"" rel=""nofollow noreferrer""><strong>Non-Profit Open Software License</strong></a>; <a href=""https://tldrlegal.com/license/non-profit-open-software-license-3.0-(nposl-3.0)"" rel=""nofollow noreferrer"">tl;dr Legal</a> says this about it:</p>

<blockquote>
  <p>A variant of the Open Software License 3.0, this license requires that the organization using it is a non-profit and that no revenue is generated from sale of the software, support or services.</p>
</blockquote>

<p>This seems to refer to clause 17 (a) in the license text, which says:</p>

<blockquote>
  <p>Licensor represents and declares that it is a not-for-profit organization that derives no revenue whatsoever from the distribution of the Original Work or Derivative Works thereof, or from support or services relating thereto.</p>
</blockquote>

<p>What does this mean? Does it mean only not-for-profit organisations can use NPOSL code?</p>

<p>But doesn't this go against the <a href=""https://opensource.org/osd"" rel=""nofollow noreferrer"">Open Source Definition</a>, which says ""No Discrimination Against Fields of Endeavor""? Why is this license OSI-approved - it is listed on their <a href=""https://opensource.org/licenses/alphabetical"" rel=""nofollow noreferrer"">list of approved licenses</a>?</p>
","<p>NPOSL is an Open Source license; you've made a common reading error with the license text. It's the <strong>licensor</strong>, not the <strong>licensee</strong>, that needs to be a non-profit. In other words, a non-profit could publish code under the NPOSL, but everyone else can use the code.</p>

<p>The NPOSL is a variant of the OSL; the OSL's author <a href=""http://rosenlaw.com/OSL3.0-explained.htm"" rel=""noreferrer"">explains the license on their website</a>:</p>

<blockquote>
  <p>There is also a new Non-Profit OSL 3.0, identical to OSL 3.0 except that: <em>Under Non-Profit OSL 3.0, Licensor disclaims certain warranties and limits liability from certain types of damages</em>. Those differences are summarized in § 17 of the Non-Profit OSL 3.0, a section that does not appear in OSL 3.0 or AFL 3.0. Because of § 17(a), only non-profit distributors may use the Non-Profit OSL 3.0 license.</p>
  
  <p>...</p>
  
  <p><strong>Reduced Risk For Non-Profit Organizations</strong></p>
  
  <p>Some licensors are non-profit organizations that derive no revenue whatsoever from the distribution of the Original Work or Derivative Works, or even from support or services associated with those works. As a simple economic matter, these organizations have no revenue stream and they cannot afford to offer any warranties, even a simple Warranty of Provenance. For those licensors, there is now a Non-Profit OSL 3.0 that doesn't include that warranty and that disclaims liability even for direct damages. The differences between OSL 3.0 and Non-Profit OSL 3.0 are detailed in § 17 of the Non-Profit OSL 3.0 license. Section 17 includes Licensor's representation that it is actually a non-profit organization. Note also that once an Original Work is distributed by a Licensor who cannot make that non-profit representation, the license reverts to OSL 3.0.</p>
</blockquote>

<p>tl;dr if you redistribute NPOSL code and you are not a non-profit, the license reverts to OSL (clause 17 (d)). The license is designed to protect non-profits, who by law cannot provide some warranties that the normal OSL requires.</p>
","5777"
"Can I use StackOverflow code by creating a LGPL library of code snippets first and then linking to that library?","150","","<p>All code posted on Stack Overflow is currently licensed under CC-BY-SA. If the code crosses the ""threshold of originality"", you have to distribute your whole project under a copyleft license. This may be disliked by  people who don't like copyleft, and certainly impractical for proprietary  software created by large corporations.</p>

<p>But...suppose I do the following:</p>

<ol>
<li>Create a new open-source library (<strong>CodeSnip</strong>), licensed under the LGPL.</li>
<li>Copy and paste all code snippets that I want to use from Stack Overflow into <strong>CodeSnip</strong>.</li>
<li>Have my proprietary/permissive open-source project <em>link</em> to <strong>CodeSnip</strong>, thereby using all the code in CodeSnip through an API.</li>
<li>Legally distribute CodeSnip to the general public under the LGPL, while keeping your project under your current license.</li>
</ol>

<p>Would this policy be in compliance with CC-BY-SA and still allow people to use StackOverflow code without legal complications?</p>
","<p>No, you can not.</p>

<p>The SA in CC-BY-SA stands for ""share-alike"". It means that you can only release it under the same license conditions. That means your library would also have to be licensed under CC-BY-SA. Licensing it under LGPL would be a violation of the CC-BY-SA license.</p>

<p>However, if stackoverflow <a href=""https://meta.stackexchange.com/questions/272956/a-new-code-license-the-mit-this-time-with-attribution-required?cb=1"">executes their plan to change to the MIT license</a>, you will be able to do this. MIT is a permissive open source license which allows relicensing under other conditions. It allows you to use any code snippets in your proprietary project as long as you keep an attribution. This attribution requirement can not be removed by relicensing, so creating a LGPL library would not remove the attribution clause.</p>
","2358"
"Include Appendix of Apache 2.0 in LICENSE file?","150","","<p>I want to use the <a href=""http://choosealicense.com/licenses/apache-2.0/"" rel=""nofollow"">Apache 2.0 License</a> on one of my projects. Apache 2.0 recommends putting a boilerplate header in each code file right before module level documentation in it's Appendix section (bottom)</p>

<p>This is all well and good, but I can't find an answer on whether I should include the Appendix within the LICENSE file in the root of the project or take off the Appendix. Should I leave the license exactly as it appears on choosealicense.com?</p>

<p>For clarification, I'm talking about this section:</p>

<blockquote>
  <p>APPENDIX: How to apply the Apache License to your work.</p>
  
  <p>To apply the Apache License to your work, attach the following
    boilerplate notice, with the fields enclosed by brackets ""{}""
    replaced with your own identifying information. (Don't include
    the brackets!)  The text should be enclosed in the appropriate
    comment syntax for the file format. We also recommend that a
    file or class name and description of purpose be included on the
    same ""printed page"" as the copyright notice for easier
    identification within third-party archives.</p>
  
  <p>Copyright {yyyy} {name of copyright owner}</p>
  
  <p>Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at</p>
  
  <p><a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow"">http://www.apache.org/licenses/LICENSE-2.0</a></p>
  
  <p>Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.</p>
</blockquote>
","<p>You may freely omit the Appendix.</p>

<p>From the <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow"">Apache License 2.0</a>:</p>

<blockquote>
  <ol start=""4"">
  <li><p>Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof [...] provided that You meet the following conditions:</p>
  
  <p>a) <strong>You must give any other recipients of the Work or Derivative Works a copy of this License</strong>; and...</p></li>
  </ol>
</blockquote>

<p>And from section 1:</p>

<blockquote>
  <p>""License"" shall mean the terms and conditions for use, reproduction, and distribution as <strong>defined by Sections 1 through 9 of this document</strong>.</p>
</blockquote>

<p>Since the Appendix is outside the stated scope of ""Sections 1 through 9"", the requirement in 4(a) that ""You must give any other recipients... a copy of this License"" does not include the Appendix.</p>
","4151"
"What license should I release my code under? It contains FFmpeg binaries, code from NAudio and code from FFmpeg.Autogen","150","","<p>I want to release my WPF Media Element based on FFmpeg on GitHub. I want to be as permissive as possible. I believe that this control could be of great help to a ton of people. Here are the links to the licenses. Hopefully someone can help me out. </p>

<ul>
<li><a href=""http://ffmpeg.zeranoe.com/builds/"" rel=""noreferrer"">FFmpeg build by Zeranoe</a>

<ul>
<li><em>Says all builds on this page are licensed as GPL 3.0</em></li>
</ul></li>
<li><a href=""https://github.com/naudio/NAudio"" rel=""noreferrer"">NAudio</a>

<ul>
<li><em>Microsoft Public License (Ms-PL)</em></li>
</ul></li>
<li><a href=""https://github.com/Ruslan-B/FFmpeg.AutoGen"" rel=""noreferrer"">FFmpeg.Autogen</a>

<ul>
<li><em>(LGPL) version 3</em></li>
</ul></li>
</ul>

<p>If I can't release it under MIT please help me find out what license I should release this code under.</p>
","<p>Unfortunately, <a href=""http://www.gnu.org/licenses/license-list.en.html#ms-pl"" rel=""nofollow"">the GPL 3.0 and Ms-PL are incompatible</a>, and a work that depends on both is legally undistributable.</p>

<p>Fortunately, <a href=""https://www.ffmpeg.org/legal.html"" rel=""nofollow"">FFmpeg is licensed under the LGPL</a>. You will just have to find a different build, or build it yourself. The FFmpeg website has good <a href=""https://trac.ffmpeg.org/wiki/CompilationGuide"" rel=""nofollow"">guides on building</a>, and external resources to help you build <a href=""https://github.com/rdp/ffmpeg-windows-build-helpers"" rel=""nofollow"">exist as well</a>.</p>

<p>If you make use of an LGPL build, you can distribute the product under the MIT license (and all it's parts under their respective licenses). </p>
","2167"
"Are derivative works a subset of combined works?","149","","<p>This question stems from discussion of <a href=""https://softwareengineering.stackexchange.com/q/294459/80581"">a question on programmers.stackexchange.com</a>.</p>

<p>In the LGPL 3.0 section 4 ""Combined Works"" it states:</p>

<blockquote>
  <p>You may convey a Combined Work under terms of your choice that,
  taken together, effectively do not restrict modification of the
  portions of the Library contained in the Combined Work and reverse
  engineering for debugging such modifications, if you also do each of
  the following:</p>
</blockquote>

<p>Generally, it seems the LGPL license is concerned with open source libraries and software that uses these libraries where a combined work would be a piece of software that includes a library.</p>

<p>If one were to open source a standalone single file program and someone modified that and redistributed it, it would technically be a derivative work. Would the statements regarding combined works map to derivative works?</p>

<p>Or more simply: Are derivative works a subset of combined works?</p>
","<p>There are two separate kinds of derived works you can create from an LGPL-licensed work:</p>

<ul>
<li>a <em>combined work</em> that includes/uses the LGPL library (per section 4, ""Combined Works"")</li>
<li>a <em>modification</em> of the LGPL library itself (per section 2, ""Conveying Modified Versions"")</li>
</ul>

<p>To qualify as a ""Combined Work"", your changes cannot be ""based on"" the library, but rather must be a separable component that uses the library as an interface. Consider the definitions from the license (emphasis mine):</p>

<blockquote>
  <p>An “Application” is any work that makes use of an interface provided by the Library, but which <strong>is not otherwise based on the Library</strong>. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p>
  
  <p>A “Combined Work” is a work produced by <strong>combining or linking an Application with the Library</strong>.</p>
</blockquote>

<p>So, a combined work consists of</p>

<ol>
<li>the LGPL-licensed library, and</li>
<li>another work (""Application"") that is not ""based on"" the library</li>
</ol>

<p>Visually, we could represent the whole Combined Work as:</p>

<pre><code> [Application] === (uses) ===&gt; [Library]
|                                       |
|-------------Combined Work-------------|
</code></pre>

<p>It seems to me (note: not a lawyer) that if a derived work is only a modification of the library itself, it would qualify as being ""based on"" the library. Therefore, such a work could not be part of a union that satisfies the license's definition of a Combined Work, because its non-Library component is based on the text Library, rather then using an interface provided by the Library. Instead, it would be a modification of the library, and governed by section 2, rather than section 4.</p>

<p>On the other hand, if you modified the library's <em>file</em> to add completely separate code that merely uses the library's interface, that wouldn't seem to be ""based on"" the library, because the two components (library and your addition) are completely separate (but merely happen to be contained inside the same file). For example:</p>

<pre><code>class OriginalLibrary() {
    void someInterface(int foobar) {
        return new Sys().doStuff(foobar, 18);
    }
}

int main(char** argv, int argc) {
    OriginalLibrary mylib = new OriginalLibrary();
    printf(""I use the library, but I'm not pat of it"");
    printf(mylib.someInterface(argv[0]));
}
</code></pre>

<p>In this case, the <code>int main</code> method is clearly not ""based on"" the <code>OriginalLibrary</code> class, even if you put them in the same file.</p>

<p>Finally, your work could be <em>both</em> a modification and a combined work. You could first modify the library itself, and then include that modified library inside of a larger combined work.</p>
","1701"
"GPL interpretation - What is our legal exposure if we include another project's code?","148","","<p>I am a contributor to a very old project presently licensed under the GPL. Our project is a plugin for a closed-source program, but the GPL does not permit this kind of linking. The GPL FAQ states:</p>

<blockquote>
  <p>""If the program dynamically links plug-ins, and they make function calls to each other and share data structures, we believe they form a single program, which must be treated as an extension of both the main program and the plug-ins. This means that combination of the GPL-covered plug-in with the non-free main program would violate the GPL. However, you can resolve that legal problem by adding an exception to your plug-in's license, giving permission to link it with the non-free main program.""</p>
</blockquote>

<p>This was interpreted to mean that WE were in violation of the GPL on our own code because the GPL does not permit dynamic linking between Free and non-Free code.</p>

<p>bmargulies pointed out we that aren't violating the GPL, since a violation occurs when someone combines the GPL library with the closed source component and then distributes the result. Therefore it's OK for us to consider linking to the closed-source host as OK and not pursue it, and no third party can feasibly take legal action against us for this.</p>

<p>This is great, but what if our project included in its source code GPLed source code from someone else's project? Can that project's owners decide that our interpretation of linking doesn't fly with them and take action against us?</p>
","<p>So, now we must note that the copyright holders of the included code are in a position to complain if someone distributes in violation of the GPL. However, by the same logic as my previous answer, I do not see how you and your fellows have distributed in violation. The hypothetical violators would be others who distributed the combination of your plugin (and thus these others' work) with the closed source program.</p>

<p>The authors of the included code would certainly have a legal course of action against someone who did that. On the other hand, since the host program is closed-source, who has rights to create a combined work that includes it and your plugin? I would guess that the owner of the closed-source program does not grant that right to anyone. So, if the owner doesn't bundle you in a release, who is left to violate? </p>

<p>It would certainly be <em>polite</em> for you to post a notice explaining this situation and warning potential distributors that there is no way to distribute the combination of your plugin and the host program without legal liability. However, again, it takes a long stretch of the imagination to see how any of this leads to liability for you and your fellow creators. </p>

<p>Of course, I'm not a lawyer, and I'm especially not your lawyer. But I have been helping to run a software company that produces and consumes FLOSS software for quite a while, and it's part of my job to know the basic working parameters of this stuff.</p>
","1547"
"Looking for a legally-strong open source license","148","","<p>Most licenses available do not seem to carry any legal weight. Are there any Open Source licenses that do? The old <em>copyright</em> laws used to impose a monetary fine for infringement, but then how do the newer licenses deal with infringement? What resources do I have available if the terms of the ""newer"" licenses are broken?</p>
","<p>You claim most licenses don't carry any legal weight. But I'm not so sure about this being true. Naturally it is hard to say, how good licenses can be enforced in court, until it happens...</p>

<p>And it happened already and courts enforced open source licenses.</p>

<p>Some examples.</p>

<p><strong>GPL-Violations</strong></p>

<p>The popularity and flexibility of Linux lead to the wide usage of the kernel in multiple devices, namely routers. Some of the constructors of these routers used the software in violation of the GPL. Harald Welte - developer of the netfilter/iptables - was starting to take legal action against it. His law-suits lead to acknowledgment of the GPL in court. To better defend his claims he founded an organisation named <a href=""https://en.wikipedia.org/wiki/Gpl-violations.org"">gpl-violations</a>. Some notable wins included cases against Fortinet, D-Link and Skype because of the violation of the GPL. In these cases Welte and gpl-violations won.</p>

<p>gpl-violations also sided with Cybits AG in a law suit against router-producer AVM. Cybits modified the AVM firmware for some goals, and AVM was taking court-action against that. As AVM also used a Linux kernel, FSF and gpl-violations were siding Cybits AG in this case. Also in this case the GPL was acknowledged from the court: <a href=""https://fsfe.org/activities/ftf/avm-gpl-violation.html"">https://fsfe.org/activities/ftf/avm-gpl-violation.html</a></p>

<p><strong>Software Freedom Law Center</strong></p>

<p>Similar to the german based GPL-violations the <a href=""https://en.wikipedia.org/wiki/Software_Freedom_Law_Center"">Software Freedom Law Center</a> enforces the GPL in the US. Notable cases here involve the BusyBox-developers against multiple developers of electronic devices that violated the terms of the license and the FSF against Cisco.</p>

<p><strong>Conclusion</strong></p>

<p>Open Source licenses are enforcable in court. This as always depends on the details of the case and the jurisdiction you're in, but generally the terms of open source licenses can be accepted by courts. It is possible though, that some terms are unclear or not really working in law, because of the missing knowledge of the authors about law. It is for this reason you should prefer common popular licenses (more tested in court) and licenses that are written with the consultations of lawyers.</p>

<p>The GPL seems the license you can be most sure it is enforcable, as that already happened multiple times with differing details in the case and in differing jurisdictions.</p>

<p>It is generally recommendable you look for legal help if you want to enforce the license to your work. gpl-violations as of now seems no longer in action, but in the US you can search the help of the Software Freedom Law Center, also organizations like FSF (and the european version FSFE) might be helpful in case you want to defend your rights given to you from open source software.</p>
","857"
"Open Source License But Maintain Prominent Attribution","148","","<p>I'd like to release a program under an open source minimal restriction license but there are 2.73 bajillion options (give or take an order of magnitude).</p>

<p>Basically our only requirements are:</p>

<ul>
<li>Don't hold our company liable for end user use or 3rd party modifications</li>
<li>Keep our company's logo and contribution attribution / website in the about / credits dialog</li>
</ul>

<p>The goal is to allow our user-base to use and customize but deter competitors from redistributing it as their own original work by making them keep our logo if they want to copy.</p>

<p>Reason I say logo and/or reference in the help->about is that no one cares about licenses or readme files to look for attribution; they care if the app meets their needs.</p>
","<p>The BSD license(s) and the MIT X11 license are some of the simplest and most permissive Open Source / Free Software licenses. With the exception of the original (and officially obsolete) 4-clause BSD license, they are also GPL-compatible (if that is something you care about).</p>

<p>Both the MIT X11 license and the 3-clause BSD licenses require attribution. The BSD licenses list attribution for source distribution and binary distribution separately (the latter explicitly prescribing that the attribution must be in the documentation and/or other materials included with the distribution, which arguably includes packaging etc.), the MIT X11 license simply says to include both the copyright notice and the license in ""all copies or substantial portions of the Software"" without explicitly prescribing <em>how</em>.</p>

<p>Neither of the licenses explicitly mention anything about an ""About &rarr; Credits"" dialog, which is not terribly surprising, considering that one was written before graphical user interfaces even existed (in the Unix world) and the other was written for one of the first ever graphical user interfaces. However, AFAIK, the MIT X11 license itself is not copyrighted, so you might be able to create a derived version which does what you want.</p>

<p>However, providing attribution in such a dialog is pretty much the standard way for GUI applications to abide by the terms of the MIT X11 and BSD licenses, even though it is not actually prescribed by the license.</p>
","1708"
"Refreshing Shared Copyright Dates in Apache 2.0 Licensed Code","148","","<p>I'm working with a formerly closed-source project whose official first release under that product name was in 1997.  Development on it slowed and was abandoned, then released as Apache 2.0 in 2012.  The copyright dates in the file headers of that open source publication said:</p>

<pre><code>Copyright 2012 PROJECT Corp.

PROJECT is a trademark of PROJECT Corp.

Licensed under the Apache License Version 2.0 (the ""License""):
you may not use this file except in compliance with the license...
blah blah blah
</code></pre>

<p>PROJECT Corp has not really been involved in the development since the open source release, but others have.  Requests to PROJECT Corp for involvement and/or support have been largely unheeded.  I was considering changing this to:</p>

<pre><code>Copyright 1997-2012 PROJECT Corp.
Copyright 2012-2015 Project Open Source Contributors (see CREDITS.md)

PROJECT is a trademark of PROJECT Corp.

Licensed under the Apache License Version 2.0 (the ""License""):
you may not use this file except in compliance with the license...
blah blah blah
</code></pre>

<p>My question is about not refreshing their copyright date to read <code>Copyright 1997-2015</code>.  I feel it's more accurate to convey the date ranges of involvement with the source by not updating it.  But additionally, I wonder if I would even be authorized to do it on their behalf.</p>

<p>I'm not trying to make PROJECT Corp mad--they may not even want to be associated with the derived code anyway!  But the codebase does have active developers who want to keep the file headers current.</p>
","<p>Paragraph 4.3 of the <a href=""http://opensource.org/licenses/Apache-2.0"" rel=""nofollow"">Apache 2.0 license</a> requires you to retain the copyright notice.  In my opinion (I am not a lawyer) that would not allow you to change the copyright date from 2012 to 1997-2012, even if the latter is actually more accurate.</p>

<p>The last part of paragraph 4 allows you to add your own copyright line.</p>

<p>If you feel the need to credit the original copyright owner with work prior to 2012, I suppose you can do it in some other manner, such as in a ""credits"", ""acknowledgments"", or ""project history"" document.</p>

<p>The Free Software Foundation has <a href=""http://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow"">some advice</a> on the matter of displaying copyright years. While they were talking about GPL licenses, their advice seems to be generally applicable:</p>

<blockquote>
  <p>The copyright notice should include the year in which you finished
  preparing the release (so if you finished it in 1998 but didn't post
  it until 1999, use 1998). You should add the proper year for each
  release; for example, “Copyright 1998, 1999 Terry Jones” if some
  versions were finished in 1998 and some were finished in 1999. If
  several people helped write the code, use all their names.</p>
  
  <p>For software with several releases over multiple years, it's okay to
  use a range (“2008-2010”) instead of listing individual years (“2008,
  2009, 2010”) if and only if every year in the range, inclusive, really
  is a “copyrightable” year that would be listed individually; and you
  make an explicit statement in your documentation about this usage.</p>
</blockquote>

<p>I'm not sure whether that is grounded in copyright law or in FSF opinion.</p>
","2172"
"Can I open source a closed source project by transcoding/transcompiling its source-code, so it's completely different?","146","","<p>How far I can go in order to open source the project which is based on closed/commercial project where the whole source code (assuming the access is there) has been converted into different state or programming language (either manually or automatically by <a href=""https://en.wikipedia.org/wiki/Source-to-source_compiler"" rel=""nofollow"">transcompiling</a>)? So for example no single line (or resource) matches the original one, then who would notice that it was transcoded?</p>

<p>Under what (if any) circumstances can such a project be released with an open source license?</p>

<p>Few simple examples: <a href=""https://github.com/OpenRA/OpenRA"" rel=""nofollow"">OpenRA</a>, <a href=""https://github.com/opentomb/OpenTomb"" rel=""nofollow"">OpenTomb</a>, <a href=""https://github.com/opentibia/server"" rel=""nofollow"">OpenTibia</a>, however I'm not sure how relevant they are, as they're complete remakes.</p>
","<p>You can't do that.</p>

<p>When you adapt the work, you are creating a derivative work you have no license to distribute for. You can't re-license and distribute this work under any license as you don't own the full copyright.</p>

<p>People noticing you break the licensing terms of a product doesn't have any influence on whether you are allowed to break the licensing terms. You are not allowed to do this regardless of anyone noticing.</p>

<p>With regard to the examples, these are remakes; they take the underlying idea of the games, and re-implement it from scratch. This usually doesn't create a derivative work, though care must be taken other intellectual property laws (specifically trademark law) aren't violated.</p>
","1648"
"Do Fedora's export restrictions violate the GPL?","146","","<p>On the <a href=""https://getfedora.org/en/workstation/download/"" rel=""nofollow noreferrer"">download page of Fedora</a>, one finds this text:</p>

<blockquote>
  <p>By downloading Fedora software, you acknowledge that you understand all of the following: Fedora software and technical information may be subject to the U.S. Export Administration Regulations (the “EAR”) and other U.S. and foreign laws and may not be exported, re-exported or transferred (a) to any country listed in Country Group E:1 in Supplement No. 1 to part 740 of the EAR (currently, Cuba, Iran, North Korea, Sudan &amp; Syria); (b) to any prohibited destination or to any end user who has been prohibited from participating in U.S. export transactions by any federal agency of the U.S. government; or (c) for use in connection with the design, development or production of nuclear, chemical or biological weapons, or rocket systems, space launch vehicles, or sounding rockets, or unmanned air vehicle systems. You may not download Fedora software or technical information if you are located in one of these countries or otherwise subject to these restrictions. You may not provide Fedora software or technical information to individuals or entities located in one of these countries or otherwise subject to these restrictions. You are also responsible for compliance with foreign law requirements applicable to the import, export and use of Fedora software and technical information.</p>
</blockquote>

<p>This would appear to be a ""further restriction"" within both versions of the GPL. Does this mean Fedora is not being legally distributed? What impact does that have on the users?</p>
","<p>This very issue came up <a href=""https://www.redhat.com/archives/rhl-list/2007-August/msg01883.html"" rel=""nofollow"">in 2007 on the Fedora mailing list</a>:</p>

<blockquote>
  <p>Correct me if I wrong - this statement seriously violates GPL - I read
  it and find no mentions about Cuba and Iraq.</p>
</blockquote>

<p>The <a href=""https://www.redhat.com/archives/rhl-list/2007-August/msg02326.html"" rel=""nofollow"">final message in the thread</a> links to a <a href=""http://fedoraproject.org/wiki/FreeSoftwareAnalysis/FSF"" rel=""nofollow"">Fedora wiki page with a response from the FSF</a>:</p>

<blockquote>
  <p>> > Fedora as a distribution is affected by export control regulations as<br>
  > > any software subjected to US laws from the legal perspective.<br>
  > ><br>
  > > <a href=""http://fedoraproject.org/wiki/Distribution/Download/ExportRegulations"" rel=""nofollow"">http://fedoraproject.org/wiki/Distribution/Download/ExportRegulations</a><br>
  > ><br>
  > > Clause 8 in GPL mentions that such regulations are compatible with the<br>
  > > license but can you confirm FSF's viewpoints on this?</p>
  
  <p>Section 8 of GPLv2 doesn't make the sort of sweeping policy statement
  you're suggesting here.  You'll note that we took this clause out of GPLv3
  -- but you're not suddenly going to get into export restriction trouble
  because of it.</p>
  
  <p>The question to ask is: what requirement of the GPL does the law prevent
  you from fulfilling?  When it comes to export restrictions, the answer is
  none.  If you comply with local export restrictions, you will not run afoul
  of any requirements in the GPL.  Therefore, there's no conflict.</p>
  
  <p>Export restrictions limit who you can give the software to.  The GPL has no
  problem with you being picky about who you give the software to: if you
  want, you can decide that you'll only distribute to paying customers, or
  people with blue hair.  So the fact that you also decide not to distribute
  to Iranians and Syrians is no problem as far as the license is concerned.</p>
</blockquote>

<p>To summarize, it seems the FSF understands such an export-restriction notice as this as merely an informative statement about laws that may exist in your jurisdiction. Furthermore, the export restriction laws are not strictly in conflict with the GPL: you can follow both export law and the GPL simultaneously.  Certainly, export laws narrow some of the rights you would otherwise have under the GPL, but the GPL can't ever give you meaningful permission to take actions that are outright illegal in your jurisdiction.</p>

<p>This seems right to me (not that my legal opinion counts for anything) since the language used at the top of the notice is:</p>

<blockquote>
  <p>Fedora software... <strong>may</strong> be subject to the U.S. Export Administration Regulations...</p>
</blockquote>

<p>Such conditional language like ""may"" does not sound like language that actually imposes a restriction, but rather sounds like language that warns about a restriction that might exist elsewhere.</p>
","4728"
"What are the limitations of CC0 vs Public Domain","146","","<p>What are the shortcomings of CC0 in comparison with Public Domain?</p>

<ol>
<li>for author of work?    </li>
<li>for users?    </li>
<li>for those who modify/extend/change license of original work?    </li>
</ol>
","<p>I don't think CC0 has any shortcomings compared to Public Domain. After all, CC0 was created with the explicit goal of fixing shortcomings of the simple method of writing ""this is released to the Public Domain"".</p>

<p>As far as I know, the main problem with the concept of ""Public Domain"" is that it has different implications in different jurisdictions. In particular, some jurisdictions have certain ""inalienable"" rights that the creator of a work cannot legally disclaim. For example, in Germany the right to be identified as the author cannot be legally disclaimed.</p>

<p>Therefore there was some concern that a simple ""this is public domain"" notice might not be fully valid in all jurisdictions. The CC0 license was created to address this:</p>

<blockquote>
  <p>The Problem</p>
  
  <p>Dedicating works to the public domain is difficult if not impossible
  for those wanting to contribute their works for public use before
  applicable copyright or database protection terms expire. Few if any
  jurisdictions have a process for doing so easily and reliably. Laws
  vary from jurisdiction to jurisdiction as to what rights are
  automatically granted and how and when they expire or may be
  voluntarily relinquished. [...]</p>
</blockquote>

<p><a href=""https://creativecommons.org/about/cc0/"">About CC0 — “No Rights Reserved”</a></p>
","2713"
"Am I free to distribute a software for a file format that was reverse engineered?","145","","<p>The scenario is the following: a proprietary software can save files in its own file format. I want to build a free/open-source software capable of decoding those files for further processing.</p>

<p>Given that there is no documentation for the file format, I create a few files and reverse engineer them. After experimenting with them and after understanding the rules behind them, I write my software. Note that I only worked with the files, I didn't attempt to disassemble the proprietary software itself.</p>

<p>Now, supposing there are no patents covering the file format, can I release my software to the public? Are patents the only thing I should worry about? Can the software license restrict what I can do with the files it produces?</p>
","<p>Disclaimer: IANAL, and this strikes me as an area where the principle that 'anyone can sue anyone' might be sadly relevant.</p>

<p>This will depend on the nature of the intellectual property of the file format. So, let's imagine that there is proprietary software package that produces and consumes this format, and that the producers of that software considers the file format to be proprietary, and perhaps even 'trade secret'. Very likely, their license will <em>not</em> permit reverse engineering. Depending on whether this license is a click-through, a shrink-wrap, or a real, signed, SLA, and depending on the jurisdiction, this lack of permission may be enforceable, or it may not.</p>

<p>However, if the owner is trying to prevent reverse-engineering, and you have reverse-engineered, and you make a public spectacle of that fact, you are painting a 'please sue me' sign on your forehead. Will you be sued? Who knows? It depends on how seriously the particular vendor takes this question.</p>

<p>Now, I've tried to paint the most scary scenario here that I could, since you didn't provide details. Maybe the company in question doesn't care, or doesn't exist any longer. Maybe the format is an open secret. Maybe their license doesn't try to prevent this. But the situation I described is fairly typical.</p>
","1612"
"Is there a license that both provides patent protection and does not require attribution?","145","","<p>Looking at <a href=""https://choosealicense.com/appendix/"" rel=""noreferrer"">https://choosealicense.com/appendix/</a>, we can see that there are a number of licenses that provide patent troll protection, and there are also a few licenses that that do not require attribution (CC0, Unlicense, WTFPL).</p>

<p>However, there does not seem to be any licenses that I can find (on that list or elsewhere) that both protect against patent trolls <em>and</em> doesn't require attribution.  does anyone know if such a license exists?</p>

<p>If not, is there some reason why the two are necessarily incompatible with each other such that no license could possible exist that provides both?</p>

<p>If they are mutually exclusive, is there any reason I wouldn't be able to dual-license my software under Unlicense and Microsoft Public License (to effectively create a scenario where no one needs to provide attribution, but the code is also offers protection against patent trolls?</p>

<p>As a software engineer, I want a way to create projects that have the <em>lowest</em> barrier possible, for any type of user.  However, when using CC0/Unlicense/WTFPL I have found that some companies are unable to use my software because it doesn't provide patent protection.  I would like to use a license that offers that protection while also not requiring that users go through the burden of attribution (which can be a bit of a pain when you <em>actually</em> follow through with it).</p>
","<p>By patent troll protection, I take it you refer to what the linked site expresses as ""<em>This license provides an express grant of patent rights from the contributor to the recipient</em>"".  It is going to be very difficult to craft a licence that provides that protection but does not even require attribution, because of the problem of derivative works.</p>

<p>Suppose that A makes a piece of software, Z, which (s)he releases under such a licence to B, who removes A's attribution and makes a derivative piece of software Z2, which (s)he releases to C under that same licence.</p>

<p>Does C still benefit from A's patent covenant?  C will want that to be the case, as if Z needed that covenant to be usable, it is very likely that Z2 will also.  But Z2 contains no record of A's covenant, and if A's patents are later acquired by a troll who then files suit against C, good luck in persuading a court that this piece of software that makes no mention of A or his/her covenant can somehow nonetheless benefit from it.</p>

<p>If your clients desire patent protection, then in order for that protection to be meaningful, they are likely to need a licence that imposes <em>some</em> other obligations on them, even if only the obligation to keep the covenant intact.  Oh, and IANAL/IANYL.</p>
","5291"
"On what grounds can companies bring open source projects into closed source?","145","","<p>There are applications that are widely used out there (just think of PHP, MySQL, etc...). What would happen if the organisations behind them pull this software back into closed source?</p>

<p>On what grounds can these companies bring (parts of) Open Source projects into closed source?</p>

<p>For example, parts of MySQL now under management of Oracle, have become close source. How is this justified and isn't this against the OS licences?</p>
","<p>An open source license is a grant from the copyright holder to someone else, giving them additional rights.  If I give you the rights to version 2 of my work, I don't have to give you rights to use version 3 of my work, because it's mine.  If version 2 is GPL, version 3 can be BSD licensed, closed source, or only available to Martians, that's up to me.</p>

<p>Now, if I have code in my work that belongs to other people that they have given to me under the GPL, I can't unilaterally change the license, because that would involve someone else's stuff.  But other licenses, such as BSD, would allow that.</p>

<p>The concept of <a href=""https://en.wikipedia.org/wiki/Copyleft"">Copyleft</a> is relevant to your question - for non copyleft or <a href=""https://en.wikipedia.org/wiki/Permissive_free_software_licence"">permissive</a> open source licenses, the fact that a derived work can disappear behind a closed source license is considered to be a feature, not a bug.</p>

<blockquote>
  <p>Both sets of free software licences offer the same freedoms in terms of how the software can be used, studied, and privately modified. A major difference is that when the software is being redistributed (either modified or unmodified), permissive licences permit the redistributor to restrict access to the modified source code, while copyleft licenses do not allow this restriction.</p>
</blockquote>
","441"
"What happens if I stop using a GPL library?","145","","<p>If I understand it correctly, when I develop a program that depends on a GPL library, it becomes a derivative work of the library and the GPL license also aplies to it. But what happens if I develop a new version of the program which doesn't need the library anymore? Am I still obligated to use the GPL license?</p>

<p>From one point of view, the old version was GPL and this is clearly a derivative work of it, so it needs to be GPL too.</p>

<p>From a different point of view – this is nonsense! I'm not using the library so nothing is forcing me to use GPL anymore! Right?!</p>
","<p>This depends on who you accepted contributions from while the code is under the GPL license. </p>

<p>If you didn't accept contributions from others and you are the sole copyright holder, then you can change the license to any license you want once the dependency on the GPL licensed code is removed. </p>

<p>If you did accept contributions from others, then those contributions are likely to be under the GPL license themselves. You can't change the license without explicit consent from all  the other contributors. </p>
","5894"
"Can I redistribute BSD software under GPL with no changes?","144","","<p>If GPL and BSD code are combined in a piece of software, the entire work comes under GPL but its BSD portions can still be obtained under that license.</p>

<p>What if the size of the GPL portion is exactly 0? If I take an existing BSD software, and without including any GPL code, can I then redistribute the software under GPL? Or am I required to add a copyrightable portion of GPL code, thereby turning the entire work into GPL?</p>

<p>To be clear, I am <strong>not interested in concealing the BSD origin</strong>. Users will be fully aware that the software is also available under BSD, and its copyright text will be available.</p>

<p>If you're wondering, there are some weird places that accept GPL but not BSD, despite the fact that BSD is GPL-compatible, and I was wondering if and how this restriction can be overcome.</p>

<p>Related questions:</p>

<ul>
<li><a href=""https://opensource.stackexchange.com/q/304/175"">Can I take BSD licensed code and distribute it under GPL?</a></li>
<li><a href=""https://opensource.stackexchange.com/q/35/175"">If I include some GPL code in my project, can I release it as BSD?</a></li>
</ul>
","<p>BSD is a very permissive license. It allows many things, including redistributing it under different conditions, including as closed source. The only thing to respect, are the conditions of the BSD.</p>

<p>To dive into this, there are different variants of the BSD-license. The original 4-clause-BSD, a three-clause-BSD without the advertisement-clause and a two-clause-variant that only keeps the first two clauses. The original BSD reads as follows:</p>

<blockquote>
  <ol>
  <li><p>Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.</p></li>
  <li><p>Redistributions
  in binary form must reproduce the above copyright notice, this list of
  conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.</p></li>
  <li><p>All advertising
  materials mentioning features or use of this software must display the
  following acknowledgement: “This product includes software developed
  by the University of California, Berkeley and its contributors.”</p></li>
  <li><p>Neither the name of the University nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.</p></li>
  </ol>
</blockquote>

<p>So you need: to keep the original copyright-notice (including the authors of the original work), include the BSD-license with your distribution and the disclaimer about Warranty (that I omitted) for clause one and two (that only decide this for source and binary form). Clause 3 asks that all advertisement material includes this notice and clause four simply asks not to misuse the name of the university. This has to be followed. The variants simply omit clause 3, or clause 3 and 4.</p>

<p>The second thing: are these conditions compatible with the GPL. The result is: the <a href=""http://www.gnu.org/licenses/license-list.html#OriginalBSD"" rel=""nofollow"">original BSD isn't</a> because of the advertisement-clause. The two variants omitting said clause <a href=""http://www.gnu.org/licenses/license-list.html#ModifiedBSD"" rel=""nofollow"">are compatible</a> .</p>

<p>Tl;DR: You cannot with original BSD, but can with 3-clause- and 2-clause-BSD.</p>
","342"
"Can freeware be redistributed without changes?","143","","<p><a href=""https://en.wikipedia.org/wiki/Freeware"" rel=""nofollow"">Freeware</a> is software that is provided <em>gratis</em> i.e. without cost, but without source or the freedoms like modification and redistributing those modifications.</p>

<p>If freeware is being actively distributed by its authors, do users have the right to reproduce and redistribute without changes? For example, do software download websites have the right to host/mirror freeware downloads, or is this done with permission from the authors (whether implicit or explicit)? If the author wishes to cease distribution, are they within their rights to ask redistributors to also cease?</p>

<p>By contrast, free/open licenses grant the irrevocable right to redistribution. Even non-free licenses like CC-BY-ND still allow redistribution, provided that no modifications or derivations are made. Without such a license, is redistribution still allowed?</p>
","<p>The term ""Freeware"" is not well-defined. Some authors are OK with people redistributing their work unchanged, others are not. Check the license restrictions of the work in question.</p>

<p>Possible reasons why authors would not want people to redistribute their software:</p>

<ul>
<li>They offer the software for free download only to draw attention to their website and any other content it has (ads, for example).</li>
<li>They want to make sure that any copies which are offered are indeed unchanged and not infected with malware. Sure, doing that would be a breach of the ""unchanged"" restriction, but when you can find copies of the software everywhere it gets hard to make sure that every single website which offers it plays fair.</li>
<li>They want to have the power to stop distribution at any time for whatever reason. Even when the license conditions do allow them to revoke the permission for distribution, enforcing this quickly when the software is already widely distributed is a logistic problem because all distributors must be notified and must be cooperative.</li>
</ul>
","713"
"Short open source license that requires mentioning if changes were made","143","","<p>I would like to publish an open source program, but I am not sure which licence I should use. Here are my criteria:</p>

<ol>
<li><p>Copying and modifying the source code must be allowed.</p></li>
<li><p>The copyright notice and the license must be included in all copies of the program.</p></li>
<li><p>If changes are made and published, there must be a mention that changes were made, and a pointer to the original (for example: URL to the original source code, or copy of the original source code) must be provided.</p></li>
<li><p>The license text is short and understandable by a normal software developer.</p></li>
</ol>

<p>Are there licenses that meet all these criteria?</p>
","<p>As far as I know, no license meets these exact criteria. Contrary to the other answer, I recognize that #3 is not a purely technical requirement [1]: If you were to license permissively, and someone took the code and incorporated it into a closed source work, there would be no way to <code>diff</code>/whatever to see if changes changes were made to their copy of your code, unless the license explicitly had your stipulation in it.</p>

<p>I'm also starting with the supposition that you basically understand the difference between copyleft and permissive licenses [2]. Maybe you've even looked at several licenses, and found them wanting. I'm also assuming that when you say requirement #2, you mean it the conventional way: a LICENSE/COPYING file is distributed with copies of the program and source, but not necessarily compiled into the program, nor popped up when installing [3].</p>

<p>Finally: I am not a lawyer. Out of the licenses I know of, here's how they compare to your requirements:</p>

<h1>GPL/LGPL/AGPL (and the few other ""copyleft"" licenses)</h1>

<p>These meet requirements 1 and 2.</p>

<p>Requirement 3 is not met, but since the source must remain open to its recipients, an interested party could discern if changes were made through technical means.</p>

<p>Requirement 4 is not met. The ""header"" that explains that the software is available under that license and the comes with no warranty boilerplate is typically pretty readable, but the entire licenses are much bigger and I'd say you need to know some legalese or be otherwise familiar with the license to really understand all of the details. It's revealing that most [A/L]GPL violations come from people not understanding what compliance requires (no citation off the top of my head, but I believe you can find statements to this effect from the FSF themselves).</p>

<p>Obviously these licenses come with the caveat that a user cannot <em>redistribute</em> modifications/copies of the licenses code without keeping the same license. In the case of the [A]GPL, and possibly other copyleft licenses I'm not aware of, there's also a ""viral"" effect - the details of exactly what makes those licenses ""infect"" code that uses the licensed code are too extensive for this answer - if you go this route there's plenty of other places where this is documented in-depth: just be aware that there's enough misunderstanding out there about the details that you should really cross-reference anything you see said on this topic with multiple sources.</p>

<h1>MIT/BSD*/ISC/etc (that whole bunch of short ""permissive""/""copyfree"" licenses)</h1>

<p>Meets requirements 1, 2, and 4. Well, #4 is met in so far as any legalese can be readable by the average person: All licenses generally use words and phrases which have very specific meaning based in either written or case/common law, which the layperson is liable to misinterpret the exact nuances of.</p>

<p>But, as a general rule, all of those licenses are pretty clear: do whatever, but all copies (whether source or binary) must also include this copyright+license. The ISC is probably both the most readable, because it omits certain boilerplate that's pretty much part of universally recognized international law (Berne Convention and other treaties which included the same provisions) - I can't say off the top of my head if that omission makes it easier or harder to people to accidentally misread the license, however.</p>

<p>Some have a provision preventing others from using your name/organization/whatever in marketing materials associated with their derivatives. This might be partly in line with what you're trying to do with requirement 3. For example, the 3-clause BSD has ""Neither the name of the  nor the names of its contributors may be used to endorse..."". E.g. Let's say you released some implementation of a new networking protocol with that clause: Microsoft/Google/Apple/whoever could use it, but they couldn't advertise ""featuring user1387866's networking code!"". (They'd still have to include the copyright notice when distributing their stuff: the point of this clause is to prevent your name from being used in a way that implies you're affiliated with them, endorsed them, or worked with them.)</p>

<p>I suspect, however, that one of the things you might want is that if they screw up your code with their changes before redistributing it, there will be more of a barrier from people associating your name with their broken variant.</p>

<p>So, in the whole, requirement 3 is not met, although you can at least get part of the requirement in easily: since the copyright notice and license must be distributed with every copy, you can include your link-to-the-original inside the copyright notice. For example, instead of just the typical:</p>

<pre><code>Copyright (c) 2016 John Doe &lt;john.doe@example.com&gt;
</code></pre>

<p>..you might do:</p>

<pre><code>mysoftwarename
Copyright (c) 2016 John Doe &lt;john.doe@example.com&gt;
https://example.com/mysoftwarename/
</code></pre>

<p>Note that, as a not-lawyer, I don't know if some legal interpretation using bovine-feces-quality logic will lead someone to conclude that a given permissive license actually doesn't require that the URL get included. This still doesn't address your desire of having a boolean ""this copy was changed from the original"" noted.</p>

<h1>Other</h1>

<p>I've never seen a license meet requirement 3. But some licenses do impose some specific requirements for redistribution, however: For example the Apache Public License v. 2.0 specifically requires that <em>if</em> a NOTICES file is included in the copy you got, you must include the substantial portions thereof in an easily accessible form (except note that that's my layperson rewording: the legalese in the license uses different words and for all I know has some subtle implications).</p>

<p>As a general rule, I don't think even the MPL or APL is short-and-understandable enough to meet requirement 4. Perhaps your definition of short-and-readable is more generous than mine.</p>

<h1>Final thoughts</h1>

<p>Out of the licenses I have any exposure to, I've never seen a license that meets the exact requirements as stated. Off the top of my head, your best bet is likely to start with one of the very short permissive licenses, and add a clause requiring the inclusion of a URL, and requiring a specific statement, like ""This software uses mysoftware name[, with modiciations]"", at the beginning of the reproduced copyright notice.</p>

<p>My non-lawyer intuition is that a permissive license with such an addition would be just as broadly compatible with proprietary, permissive, and copyleft code, as your other typical permissive licenses.</p>

<p>Yyou might also find the <a href=""https://lists.debian.org/debian-legal/"" rel=""nofollow"">debial-legal mailing list</a> useful, and especially for if you go the roll-your-own route, I recommend inquiring there as well: I've personally found it useful in considering certain licensing issues, in particular, it's a good place to check if a given uncommon/unusual/rolled-your-own open source license is likely to have pitfalls or impose burdens on libre software users/maintainers/distributions that could impede wider adoption. I suppose there's likely some BSD mailing list out there which could similarly check if your license would impose burdens on proprietary use-cases.</p>

<h1>Footnotes</h1>

<p>[1] I don't have the reputation to comment, and there's no good way for me to suggest an edit to that answer without essentially scrapping or invalidating a lot of the answer.</p>

<p>[2] It's best to explicitly state that in the question - those answering can better understand what level of depth you're looking for in the answer, and you have to contend with less answers which make erroneous assumptions.</p>

<p>[3] Although you may have seen Windows installers pop up an EULA-like prompt presenting the license, and a lot of GPL software has typically included a copyright notice in their help text or other program outputs: The GPL family of licenses actually includes a provision for user interfaces showing ""appropriate legal notices"". But many licenses do not specify this explicitly, merely requiring that attribution/copyright information be included with the software in some form.</p>
","2464"
"Does the MIT license propagate?","142","","<p>MIT license states</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>If I make a modified version of an MIT-covered code and publish it, does it have to be under an MIT license because the notice is copied?</p>
","<p><em>Code that you write</em> does not need to be licensed under the MIT license. The original code that you received under the MIT license must remain under the MIT license. (<a href=""https://opensource.stackexchange.com/q/2644/50"">Or, maybe not</a> -- but this is certainly true for most licenses, which do not include ""sublicense"" as a permission. The ambiguous ""sublicense"" permission complicates this; see <a href=""https://opensource.stackexchange.com/q/2644/50"">Does the MIT license&#39;s right to &quot;sublicense&quot; allow me to change the license of someone else&#39;s work?</a>.)</p>

<p>So, you must preserve the MIT license and copyright notice as long as you have someone else's MIT-licensed work in your project. Fortunately, the MIT license is very permissive, so it does not stop you from licensing <em>your code</em> (or someone else's differently-licensed code) under other terms alongside the MIT-licensed code, as long as those other terms do not positively conflict with the requirement to display the notice. There are no popular software licenses that would cause such a conflict; such a license would need to have absurdly extreme terms like, ""When including this software in a derived work, you must not display notices for any other software included alongside this software."" The one category of license I can think of that <em>would</em> cause a conflict is any Creative Commons license with a ""No Derivatives"" provision, which disallows combining a work with <em>anything</em> else (but that license is explicitly not intended for use with software).</p>

<p>For the sake of clarity, you should clearly indicate in a README which components are MIT-licensed and which are not. The terms of the MIT license don't explicitly require this (unlike, e.g., the Apache license), but if you don't do this, then recipients of the code will not know which parts are covered under which license.</p>
","2641"
"GPL - is it distribution to use libraries in an appliance loaned to customers?","142","","<p>Let's say there is a hardware appliance which a company would like to rent out to customers for use e.g. during trade fairs. The appliance is fed image data, analyses it and displays the results on-screen. Some GPL-licensed libraries are being used, without any modifications to them, to do image transforms etc. (think <a href=""http://www.vips.ecs.soton.ac.uk/index.php?title=VIPS"" rel=""nofollow"">VIPS</a> or <a href=""https://github.com/sachinchoolur/lightgallery.js/"" rel=""nofollow"">lightgallery</a>, not the actual libraries we are using). The source code of the software running on the appliance cannot be accessed, copied or viewed by the customers. There are no pre-compiled binaries which might contain any of the libraries' code, as only interpreted languages are used.</p>

<p>Given that the appliance is not sold, the GPL-licensed libraries are not compiled as part of the product and are not modified, it is not possible for anyone who is not company-internal to access the software source-code nor any binaries, does this constitute <em>distribution</em> in terms of the GPL?</p>

<p>Would a list of used GPL-licensed libraries contained in the appliance need to be contained in the software or manual?</p>

<p>Are there any other considerations to take into account before offering such a product to be rented out by potential customers?</p>

<p>Edit: We are talking about LGPL and GPL-2.0.</p>
","<p>First, if I were you, I would not take the chance of getting the definition of distribution wrong and possibly violating the license, when it is actually quite easy to follow.</p>

<p>These two answers from the GNU FAQ should be of interest to you:</p>

<blockquote>
  <p><strong>I downloaded just the binary from the net. If I distribute copies, do I have to get the source and distribute that too? (<a href=""https://www.gnu.org/licenses/gpl-faq.html#UnchangedJustBinary"" rel=""nofollow"">#UnchangedJustBinary</a>)</strong></p>
  
  <p>Yes. The general rule is, if you distribute binaries, you must distribute the complete corresponding source code too. The exception for the case where you received a written offer for source code is quite limited.</p>
  
  <p><strong>I want to distribute binaries via physical media without accompanying sources. Can I provide source code by FTP? (<a href=""https://www.gnu.org/licenses/gpl-faq.html#DistributeWithSourceOnInternet"" rel=""nofollow"">#DistributeWithSourceOnInternet</a>)</strong></p>
  
  <p>Version 3 of the GPL allows this; see option 6(b) for the full details. Under version 2, you're certainly free to offer source via FTP, and most users will get it from there. However, if any of them would rather get the source on physical media by mail, you are required to provide that.</p>
</blockquote>

<p>So what this all means is this: you can distribute the appliance without accompanying source; you should have a notice which explains that the appliance contains this and that software from this and that author, under GPL/LGPL, with a copy of the license; additionally, this notice could contain a link to the original source (and to most users it will be sufficient) but the notice must also contain a written offer to get the source on physical media (possibly, for a fee covering the costs of burning the DVD and shipping it). It won't cost you anything to add this offer and it won't probably be used. If it were used it still wouldn't cost you anything because you could charge the user for that. Just to be on the safe side, download and save the source of the software you distribute in case they were subsequently withdrawn from the internet (which I must admit is completely unlikely).</p>
","4639"
"What research explains why so many programmers invest time in creating free libraries?","142","","<p>Maybe I start with an example: I use currently SystemJS for Angular2 Applications, it is a great tool, works properly and free.</p>

<p>As I see the contributors <a href=""https://github.com/systemjs/systemjs/graphs/contributors"" rel=""noreferrer"">here</a> and the work, what already has been done, I've thought: What kind of great job, but who pays for all this work? Sometimes I also try to help, but I've limited time and have to pay my everlasting bills.</p>

<p>How can such of libraries can come into existence? The idea (which is already great) alone is not enough. <a href=""https://en.wikipedia.org/wiki/Karma"" rel=""noreferrer"">Karma</a> would not also be the real reason, I think.</p>

<p>Why do these talented programmers invest amount of time of creating free libraries? What research has been done into why so many programmers invest their time in FLOSS projects?</p>
","<p>Of course there is no single answer to this question. The motivation can change over time and over individuals but I will try to list a few common reasons.</p>

<h1>For ideological reasons</h1>

<p>People who invented free software (RMS et al.) did it originally for very ideological reasons (""all software should be free"" - that is, respect four fundamental freedoms) and this was motivation enough to start the GNU project. For reference, see <a href=""http://www.nytimes.com/1989/01/11/business/business-technology-one-man-s-fight-for-free-software.html"" rel=""nofollow noreferrer"">this 1989 NYT's article</a> and the <a href=""http://www.gnu.org/gnu/manifesto.en.html"" rel=""nofollow noreferrer"">original GNU manifesto</a>.</p>

<h1>Because it's a free-time activity</h1>

<p>Lots of people like to program so much that they do it even during their free time. When absolutely no financial benefit is to be expected from a software (either because you don't think it is worth much or because you don't want to spend time selling it), it can be seen as natural to share it as free software (it will help others and could even contribute to your own reputation).</p>

<h1>Because it's a job</h1>

<p>Many companies profit directly or indirectly from free and open source software (RedHat but also Google, Facebook and Microsoft) and consequently pay people to contribute to it. The most famous person to be paid for writing free software full-time is probably Linus Torvalds but there are lots of examples of people whose job is to develop proprietary software part of the time and to contribute to open source part of the time.</p>

<p>Github's founder and former CEO Tom Preston-Warner has a <a href=""http://tom.preston-werner.com/2011/11/22/open-source-everything.html"" rel=""nofollow noreferrer"">very good entry on his blog</a> on why it pays for a company to have its employees contribute to open source software.</p>

<p>If you want to dive more into motivation issues, <a href=""http://scholar.google.fr/scholar?q=carrots+and+rainbows+motivation+and+social+practice+in+open+source+software"" rel=""nofollow noreferrer"">here is an academic article</a> talking about that.</p>
","4302"
"Can I be charged for support from the original developers when I fork a project?","141","","<p>During development of <a href=""https://opensource.stackexchange.com/users/388/parrotbot"">ParrotBot</a>, I've ran into many issues in terms of debugging, design and integration. In the chat room, I've received lots of support that has helped me greatly, so that I could continue the project, with ease.</p>

<p>However, I've started wondering whether I could possibly be charged for this ""support."" Having forked an open source project, could I be charged for this, being the developer of the forked version?</p>
","<p>Not after you've been given it.</p>

<p>When giving you support, the supporter (the dev in this case) has essentially said ""I'm happy with the payment I'm getting for this."" If the payment is nothing, fine. They're happy.</p>

<p>They can't suddenly change their mind after giving you the support and say ""hey pay me for that now"" - it'd be like someone giving you a present and saying 3 months later, ""hey you should pay me back"" - you wouldn't stand for it, and they have no legal standpoint for it. It's already been gifted.</p>

<p>What they <em>can</em> do is refuse you support until you pay. That's OK under open/free licenses, and it's them wanting a support contract: in return for their help, you give them money.</p>
","824"
"How can i grow my open source project?","141","","<p>I have recently started my first <a href=""https://github.com/xXXIMMATTHEWXXx/phpCMS"" rel=""nofollow"">open source project</a>. I want people to contribute their ideas and to help grow this project. I don't know how I should spread it. I have a guide on how to contribute, a todo list and I even offer to vouch for them in the future if they contribute. It has a guide on what needs to be done and even a step by step tutorial on how to download the source and start editing things. I have commented the code so it should be <em>really</em> easy to learn the code and get started. I just don't know where to start. Do I post about it in different places? I don't have friends who code so I can't tell them. So my questions are: Do I post about it somewhere? If so, where? How can I make people want to contribute? How do I make it get 10+ people contributing? What are some open source basics that I do not have in the repo?</p>
","<p>I am an open source contributor to more than one projects. Why do I contribute to a project? Because </p>

<ol>
<li>I have used that project in some way and I feel that I should be a contributor</li>
<li>I have used the project and I felt that even though it's awesome, something is missing</li>
<li>I'm a student with my study focussed on a particular field of computer science. The project does cutting edge work in that area, and contributing to it helps me have a contact with brilliant people in the field</li>
<li>To learn industry level coding practices which most universities do not teach directly</li>
</ol>

<p>Here's what I feel you can do:</p>

<ol>
<li>Is you project useful? If yes, try looking for a forum which had people who can use it</li>
<li>Write a blog post illustrating the applications of your project. Post it on medium/Hacker News (ShowHN)</li>
<li>Managing a project sounds easy, but it isn't. Try looking for an umbrella organisation with similar projects and see if they can help you manage it (funds/contributors/etc.)</li>
<li>Several universities (I can vouch for mine) have students who are interested in contributing to open source but don't know how to. There are coding clubs and societies that tie up with some open source organisations and do a two-way thing for both students and the organisation. </li>
<li>Google Summer of Code. Get in, it'll guarantee contributors.</li>
</ol>

<p>Try integrating tools like slack/gitter, CI, etc with your project. Makes it easier to manager with loads of developers.</p>
","2935"
"Is the MIT license itself copyrighted?","141","","<p>Is the MIT software license itself copyrighted? What about the BSD license? Could a person copy parts of the license or significantly alter the license for their own use? I've searched but wasn't able to find a source one way or another.</p>
","<p>Anything anybody writes is automatically copyrighted (there are exemptions, but I don't think they apply in this case). Therefore, yes, the MIT License is copyrighted, and you can't copy or modify it, regardless of whether you change the name or not.</p>

<p>Analysis: is the MIT License copyrighted? It needs to be a work (check) of authorship (check) that is original … originality can for example be measured by whether or not there are multiple different ways of phrasing the idea. If there is only one possible way of expressing the idea, then the expression is not copyrighted (ideas can't be copyrighted, only their expression), however, if there are multiple ways of expressing it, then the mere fact of choosing one of those ways constitutes a creative act of originality. And even though legalese is a pretty formalized and restrictive language, there are still multiple ways of expressing the ideas embodied by the MIT License, so the MIT License is original and thus copyrighted.</p>

<p>Analysis: can you copy and modify the MIT License? In order to use the MIT License <em>at all</em>, you <em>must</em> copy it into your code. So, clearly, there is an implicit license allowing you to do just that. However, at least in the jurisdictions I am familiar with, such implicit licenses are generally interpreted very narrowly by the courts. So, the license allowing you to copy the MIT License allow applies to copying it into your source code verbatim in order to apply it to your own code. It does <em>not</em> apply to copying it in order to base your own license off of it. And it certainly does not give the right to create a derived work.</p>

<p>There is one other thing that you didn't ask about, that I want to mention: the MIT License has been carefully crafted, analyzed, reviewed, re-reviewed, and re-re-reviewed by MIT's copyright lawyers to make sure that there are no unintended freedoms nor unintended restrictions, no hidden side-effects, loopholes, or surprises of any kind. I urge you to hire not one but several copyright lawyers to subject the changes you want to make to the same scrutiny, lest you fall victim to some unforeseen interactions, side-effects, or loopholes your changes or additions might accidentally create.</p>

<p>Note: I'm not a lawyer, and I don't play one on TV. Copyright Law is tricky business, you should really consult a lawyer first, a) about the legality of copying the license, and b) even more importantly about any modifications you make to the license, to ensure that you don't accidentally rip a huge hole into it that you don't intend to.</p>
","4544"
"Distributor T&Cs appear to conflict with GPL. Is this a violation?","140","","<p>I came across <a href=""https://www.gimpshop.com/"" rel=""nofollow"">GIMPShop.com</a> which distributes an installer for GIMP bundled with some kind of adware:</p>

<blockquote>
  <p>Gimpshop.com is distributing the original unmodified software,
  obtained directly from GIMP's repository website, and does not modify
  it in any way. These installers comply with the original software
  manufacturer's policies and terms &amp; conditions. DownloadAdmin™ is an
  install manager, which manages the installation of your chosen
  software. In addition to managing your download and installation,
  DownloadAdmin™will offer free popular software that you may be
  interested in. You are not required to install any additional software
  to complete your installation of your selected software. You can
  always completely remove the programs at any time in Windows'
  Add/Remove Programs.</p>
</blockquote>

<p>There is a ""GPL"" page on the site:<br>
<a href=""https://www.gimpshop.com/gpl"" rel=""nofollow"">GPL page</a></p>

<p>and as far as I know the installation will include this as required. I have not attempted to request the source code from them.</p>

<p>But it seems to me that it conflicts with the terms and conditions page:<br>
<a href=""https://www.gimpshop.com/terms-and-conditions"" rel=""nofollow"">GIMPShop T&amp;Cs page</a></p>

<p>for example:</p>

<blockquote>
  <ol start=""2"">
  <li>Use License</li>
  </ol>
  
  <p>a. You can only download one copy of the information or software on
  Gimpshop.com. The download should be for personal, non-commercial
  transitory viewing only. This is not a transfer of title, however it
  is the grant of the license. If you have this license you may not: i.
  Modify or copy the materials...</p>
</blockquote>

<p>Now, presumably they are referring to their installer here and not to GIMP itself, but it seems very vague to me.</p>

<p>Is this a violation that I should report?</p>
","<p>IANAL, and IANYL.  That said, they seem to be pretty close to legal.  I think it likely that your reading of their non-free license is correct; that is, it applies only to their installer (though I agree they don't go out of their way to make that clear).  Under the <em>mere aggregation</em> doctrine as I understand it, an installer wrapped around GPL software would not itself need to be GPL, so that's not a violation.</p>

<p>GIMP is distributed under GPL3 (or later versions), so as they distribute electronically they are required to make source available ""<em>in the same way through the same place</em>"" as they make their download available.  On <a href=""https://www.gimpshop.com/downloads"" rel=""nofollow"">GIMPSHOP's download page</a> there is a pretty clear link to the GIMP source on the GIMP project's FTP site.  Sadly, as <a href=""http://www.gimp.org/downloads/"" rel=""nofollow"">the GIMP project makes clear</a>, they</p>

<blockquote>
  <p>had a server move a while back that caused us to lose our existing
  mirrors (moved from physical to virtual server and to an environment
  that doesn't allow FTP access)</p>
</blockquote>

<p>so the link doesn't and won't work.  That <strong>is</strong> a GPL3 violation, but it's also fairly easy to remedy.</p>

<p>In short, I think what they're doing - wrapping GPLed software in a non-free adwared installer - is lame, but with the easily-remedied exception related to their broken link, I think they're in compliance with the GPL as regards GIMP.</p>

<p>Interestingly, they also be out of compliance on <a href=""https://www.gimpshop.com/gpl"" rel=""nofollow"">their GPL page</a>, which shows something they call ""<em>the GIMPSHOP General Public License</em>"" that looks <strong>remarkably</strong> like GPL2 with the original copyright notice filed off, and GIMPSHOP's inserted instead.  As apsillers points out below (many thanks!) <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#ModifyGPL"" rel=""nofollow"">the FSF permits modfications of the GPL</a>, but has certain requirements that GIMPSHOP have overlooked.  That could be remedied, but at the moment it's clearly in violation of the FSF's copyright in the GPL.</p>
","4405"
"How should I structure a new open source group","140","","<p>I have taken the lead to start a new open source group for the hardware description language VHDL. There are many existing (open source) projects out in the world and many are hosted on GitHub. On the other hand the IEEE working group marked some proposed language changes as ""move to open source"".</p>

<p>So we discussed that we start a new open source group. The idea is to upstream many duplicate code parts to a more ""global"" core library (which does not yet exist for that language).</p>

<p>So at first I managed to get the VHDL username from an existing GitHub user, so I could register VHDL as an organization. The I started a little wiki to collect existing open source projects for VHDL and to collect proposed functions / packages, which should be part of a <em>Core Library</em>.</p>

<p>I'm a maintainer for a open source VHDL repository by myself, but I don't want to contribute all our code to the new child! (It's just too much for the start)</p>

<p>I'm trying to contact other authors and projects. I invite them to participate in the new group.</p>

<p><strong>My road map looks like this:</strong></p>

<ol>
<li>Get each other to know / list existing projects</li>
<li>Gather proposals for what should be included in a VHDL “Core Library”</li>
<li>We will have (recorded?) presentations of existing projects 10-15 minutes + 10-15 minutes for questions
If possible a live-demo is recommended.</li>
<li>Talk about proposals and unifying interfaces if duplicates exist</li>
<li>Set up a testing infrastructure (VUnit or Cocotb might be good candidates)</li>
<li>Do the coding + propose pull requests</li>
<li>Run tests on the new code</li>
<li>Merge it, tag it, release it !!</li>
</ol>

<p>Have I missed important things? What should I do in another way?</p>
","<p>If you have not already, read through <a href=""http://producingoss.com/"">Producing Open Source Software</a> and/or <a href=""http://www.theopensourceway.org/book/"">The Open Source Way</a> - they have lots of good information about all of the things that people tend to forget when running an open-source project (that is, everything other than the code).</p>

<p>One thing I don't see mentioned in your list at all is the subject of licensing.  This is likely to be the subject of much argumentation now, but if you try to consolidate licensing <em>after</em> you've brought in a bunch of projects, it'll be a huge pain in the ass.  And if you <em>don't</em> have it handled, most corporate users won't be able to use your project.  Decide on a license now, and anything that isn't compatible will have to be re-implemented to be included.</p>

<p>I also think it's very helpful to decide on goals up front for the project.  Are you trying to include everything possible, or a small subset to avoid bloat?  Are things included if they're useful, or only if they meet certain quality standards?  Do you accept libraries without an active maintainer on the core team?  Getting your core team on the same page as to your goals creates a much better product, and publicizing them allows users to easily ascertain whether your project is right for them or not.  For instance, compare <a href=""http://guides.rubyonrails.org/getting_started.html#what-is-rails-questionmark"">Rails' philosophy</a> with <a href=""https://docs.djangoproject.com/en/1.10/misc/design-philosophies/"">Django's</a>; ""convention over configuration"" and ""explicit is better than implicit"" are at odds with each other, and so each framework is better off by choosing one.</p>
","4393"
"Can I sell my own CMS based on another CMS (e.g. WordPress) and encrypt the source code?","139","","<p>Can I recode WordPress or another CMS and then sell it as my own? </p>

<p>Can I encrypt the source code?</p>
","<blockquote>
  <p>Can I recode wordpress or another CMS and then sell it as my own?  recode for specific purposes. I'm going to remove needless code, add my own and customize CMS for myself</p>
</blockquote>

<p>As long as the license allows it yes. The <a href=""https://wordpress.org/about/license/"" rel=""nofollow"">Wordpress license</a> is the GPL-2.0. The GPL allows modification, redistribution and commercialization all right.</p>

<p>But it also has some obligations that I need to follow if I make such modifications. At a high level I would need to do all of these leaving aside some details:</p>

<ol>
<li>document the changes I made and keep all the original notices, license texts, etc and ensure that my customers know about these terms </li>
<li>keep the code, these changes and my additions under the GPL</li>
<li>make the modified source code available to my customers in a form that is the preferred form for modification under the GPL which would mean plain source code.</li>
</ol>

<blockquote>
  <p>Can I encrypt source code?</p>
</blockquote>

<p>I surely can encrypt the source code of a modified GPL-licensed project! But I would still need to make this source code including my modifications available to my customers in a form that is the preferred form for further modification. Under and per the GPL, this would mean that I would have to also distribute the source code unencrypted making the encryption rather moot.</p>

<p>/HTH</p>
","4219"
"Can I use/distribute LGPL command line software in mine that isn't LGPL?","139","","<p>I've developed a little software that use <strong>FFmpeg</strong> in <strong>command line mode</strong>.</p>

<p>To further clarify: My software launch several times ffmpeg.exe that is stored inside the same folder as my .exe.
User never interact with it and never see it. It's only copied inside my software folder and is launched it in background by my program.</p>

<p>I'm a very newbie to software developing, and also with licencing. </p>

<p>FFmpeg is distributed under <strong>LGPL Licence</strong> (from what I read <a href=""https://ffmpeg.org/legal.html"" rel=""noreferrer"">here</a>). Now that my software is completed I want to release it to everyone for <strong>free</strong> (Maybe including some sort of optional donation) but I want to retain some sort of domain onto it.</p>

<p>Probably I will also release it in some kind of open-source licence but I didn't have decided which one it's the best, so temporarily this option is out of my mind. </p>

<p>The problem is that I don't understand clearly if I can <strong>distribute FFmpeg with my software</strong> (and for that I mean including it into my installer and use it in form of command-line use inside my software logic) without have to release my software under LGPL.</p>

<p>It's a legal question that I don't understand clearly: What does it mean <strong>""including""</strong> a LGPL software? Isn't inside my software, only inside an installer that copy it onto clients PC with my software, that will launch it in background. My software don't ""include"" (inside their code) any library of the software neither.</p>

<p>My software it's small but valuable (I think :D ), I don't want to release onto a licence (LGPL) that doesn't convince me 100%.</p>

<p>What can I do to distribute my software 'with' FFmpeg?
Distribute under LGPL it's the only option or I'm ""free"" because I use it in command-line mode?</p>

<p>Please help me to understand this legal question.</p>
","<p>It sounds like your work is a completely spearate work from FFmpeg. You work and FFmpeg are two different works that happen to interoperate. The <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#NFUseGPLPlugins"" rel=""nofollow"">FSF's GPL FAQ says</a>:</p>

<blockquote>
  <p><strong>Can I release a non-free program that's designed to load a GPL-covered plug-in?</strong></p>
  
  <p>It depends on how the program invokes its plug-ins. For instance, if the program uses only simple fork and exec to invoke and communicate with plug-ins, then the plug-ins are separate programs, so the license of the plug-in makes no requirements about the main program. [...]</p>
</blockquote>

<p>Since you're directly invoking the program, that sounds like your case. Simply include or make obviously available the source code for FFmpeg.</p>

<p>If I am wrong, and your code actually interacts more closely with FFmpeg, then your work (plus FFmpeg) could qualify as a ""combined work"" under the LGPL. Under the LGPL v2.1, a combined work consists of an LGPL-licensed library, and an application that uses it:</p>

<blockquote>
  <p>An “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p>
  
  <p>A “Combined Work” is a work produced by combining or linking an Application with the Library.</p>
</blockquote>

<p>If your work is indeed a combined work, then the LGPL requires that you offer the source code of the LGPL library (<em>not</em> your own code external to the library) and that you perform the combination in a way that allows users to easily replace the library with a modified version. In this case, it seems clear that you're already doing the latter: if the executable file is simply adjacent to your script and invoked directly, then it's trivial for a user to drop in a modified FFMpeg. As for offering the source, that's something you need to do anyway, whenever you distribute an LGPL-licensed work under most circumstances.</p>
","4011"
"Pull request ownership, who owns the code committed?","139","","<p>Say I create an Open Source project on Github licensed under e.g. LGPL like Qt. As I understand ownership of code, if I wrote a piece of code, I am free to change the license at a later point, as long as I keep a LGPL version of the old code. This could be because I want to further develop it into a solution I want to sell, again like the Qt dual license.</p>

<p>Enter a pull request. Someone commits 10 lines to the LGPL version. Can I no longer change the license, or do I essentially still own the code since it is my repo?</p>
","<p>Say you have a project under a permissive license (like MIT). Then I can go clone it, and build a copyleft licensed package on it (say GPL). If I ask you to pull, you are getting my modifications under copyleft (GPL, in this case), and have to respect that.</p>

<p>You should make absolutely clear under which conditions you accept code pulls (or any other contribution, for that matter). In thorny cases, you'll have to get the pullee to agree to give the code under your licence, or perhaps even sign paperwork (a <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"" rel=""nofollow"">CLA</a> or even sign the copyright over to you, as e.g. the FSF requires).</p>
","2378"
"At which point does your work stop being a derivative of a seed project?","138","","<p>Seed projects, in my understanding, are commonly meant to help quick-start an application development by taking away the boilerplate, redundant work, and maybe provide an initial architectural direction to go forward from. Thus, most of the original code is meant to be modified and changed, probably drastically over time.</p>

<p>I've ran across a few of these with the MIT license. I understand this basically means you can do whatever, but you don't own the original work and the author is not responsible for whatever happen. I have a concern about this line:</p>

<p>""The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.""</p>

<p>At which point is it ""OK"" to not have this, given that the file(s) are modified drastically?
Most of the projects only have this in the ""LICENSE"" file, are we free to change the LICENSE file? If so, how do we maintain credit for the original work?</p>
","<p>I'd certainly keep some kind of reasonably detailed revision history with the source, thereby permanently crediting the original work. As for license legality, copyright notices, etc, that can <strong>always</strong> become a can of worms. If you just do whatever it is you want, and nobody challenges you, then what you did is ""okay"". But if somebody sues you for infringement, files an injunction, or whatever, then the courts will decide whatever they decide, for whatever reasons cross their minds, based on whatever precedents, pro and con arguments, etc, are presented to them at the time, etc, etc. Nobody can tell you for sure, but a high-priced copyright attorney can probably study your situation in detail, and then draft a better guess than any advice (including mine) you're likely to get here for free.</p>

<p>So unless lots of money is on the table, just behave reasonably and reasonably ethically, erring on the side of the original authors when you're in doubt and when it doesn't really, really make that much difference. In fact, email the original authors, point them to your fork, explain exactly what you're planning to do, and ask if that's okay with them.</p>

<p>For example, when I gpl'ed <a href=""http://www.forkosh.com/gifsave89.html"" rel=""nofollow noreferrer"">http://www.forkosh.com/gifsave89.html</a>
that's exactly what I did. Lines 24-27 of the listing (click the listing link under ""Related Pages"" on the above page) say,</p>

<pre><code>  24:  * Purpose:   o gifsave89 generates gif images in memory.
  25:  *              It's based on the original gifsave
  26:  *              by Sverre H. Huseby,
  27:  *                http://shh.thathost.com/pub-unix/#gifsave
</code></pre>

<p>which he'd licensed without any restrictions at all, and which I separately copyrighted under my name with the US Copyright Office, and released under the more restrictive gpl. But I emailed Sverre first, and he said, ""Fine, go ahead."" Most gpl-type people will be fine with anything in the gpl ballpark.</p>
","4833"
"GPL-2 Derivative works","138","","<p>Suppose we have this scenario:</p>

<ol>
<li>there are 4 Free softwares (under GPL version 2); </li>
<li>a man puts them in a Stack and codes some glue-tools and a GUI to wrap them all together;</li>
<li>now the stack is a Platform, provided in a bundle; </li>
</ol>

<p>If the man writes a program, which uses other softwares under GPLv2, he must release his code, as well under GPLv2, so the glue-scripts and the GUI are ""Derivative Works"" and he's not allowed to Dual License neither the tools, nor the GUI. As far as I know, Dual licensing is possible only when he writes his code from scratch, but not when he's basing it on some GPLv2 programs.</p>

<p>Am I missing something, such as particular exceptions?</p>

<p>I'm wondering about it, because I found similar real cases and I'm not so sure they're following the rules. I'm just curious about it.</p>
","<p>The glue code and GUI code are original works by their author. When considered in isolation from any other code, they likely <em>not</em> derivative works under copyright law. They don't include any of the GPL-license code; they merely use its API or invoke it as a separate process.</p>

<p>The author is certainly free to dual-license the work. The fact that he is distributing the work as part of a larger GPL work merely means that he must license the work in a GPL-compatible way whenever he does so.</p>

<p>The recent rulings in <a href=""https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc."" rel=""nofollow""><em>Oracle v. Google</em></a> in the U.S. about the copyrightability of an API suggest that possibly the use of the GPL software's API could make it a derivative work, but considering that Google's complete re-implementation of the Java API still qualified as fair use, some tiny <em>use</em> (not even re-implementation) of some software's API is not likely to cause the creation of a derivative work of that software.</p>

<p>Since the glue code is an original work of authorship, the author may license it however he pleases. Obviously, when he chooses to distribute a GPL-licensed work in combination with his own work, he must abide by section 2(b) of the GPLv2 and release the whole combination under the GPL:</p>

<blockquote>
  <p>You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p>
</blockquote>

<p>But this requirement is immediately qualified by:</p>

<blockquote>
  <p>If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.</p>
</blockquote>

<p>So long as the glue code and GUI are ""not derived from the Program, and can be reasonably considered independent and separate works in themselves"" then the author may license them individually without regard to the GPL, whenever no actual GPL code is involved.</p>

<p>When GPL code <em>is</em> involved, the author must include source code for his component, if the combination forms a derivative work under copyright law. If the combination is not a derivative (i.e., the new work ""uses"" the GPL work ""at arm's length"" but does not become part of the GPL work), then the GPL requirements do not apply to the new work. The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow"">GPL FAQ has a good overview of the FSF's position on the issue</a>, which is quoted in part below (but I recommend you read the whole thing!):</p>

<blockquote>
  <p><strong>What is the difference between an ""aggregate"" and other kinds of ""modified versions""?</strong></p>
  
  <p>An ""aggregate"" consists of a number of separate programs, distributed together on the same CD-ROM or other media. The GPL permits you to create and distribute an aggregate, even when the licenses of the other software are non-free or GPL-incompatible. [...]</p>
  
  <p>Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. [...]</p>
  
  <p>If the modules are included in the same executable file, they are definitely combined in one program. [...]</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. [...]</p>
</blockquote>
","4364"
"How is Google able to relicense their photos on Google Streetview, which may contain copyrighted content?","138","","<p>While driving in the car recently I noticed a <a href=""http://www.google.com/maps/about/images/behind-the-scenes/about/device-carousel1.jpg"" rel=""nofollow noreferrer"">Google Streetview car</a> go by outside. Once I got home I went onto Google Streetview and looked around for a bit. </p>

<p>This is when I noticed the copyright notice:</p>

<p><img src=""https://i.stack.imgur.com/p4RXl.jpg"" alt=""google maps screenshot showing copyright notice""></p>

<p><strong>My question:</strong></p>

<p>How is Google able to take photos of already possibly copyrighted/licensed objects, and how is it that they are able to relicense it?</p>
","<p>Photography is a lovely thing. I can take a picture of my school, from one angle, and it will be my own work. Also, someone else can take a picture of my school, from the same angle, and it will be their work. Really, it depends on who clicked the button. Take this for example:</p>

<p><img src=""https://i.stack.imgur.com/1etMl.jpg"" alt=""My Shot""><br>
<sup> This is my shot, <s>and I totally reserve all rights</s> Darn user contributions</sup></p>

<p><img src=""https://i.stack.imgur.com/XbT9y.jpg"" alt=""Other shot""><br>
<sup><a href=""https://commons.wikimedia.org/wiki/File:N812NW_Delta_Air_Lines_Airbus_A330-323X_-_cn_784_taxiing_@_Schiphol_on_13_July_2013_pic-001.JPG"" rel=""nofollow noreferrer"">Source</a></sup></p>

<p>I'll tell you right now, they are the same model (Airbus A330), same location (Amsterdam Schipol), same a lot of things. But the works are distinct, in that I took the shot on top, and someone else took a shot on the bottom.</p>

<p>When people apply licenses to their photographic work, it is normally only to their work, <em>not</em> the object that they took a picture of. Hence, if you were to open source the road, and I take a picture of the road, then the picture will be my work, and under full copyright.</p>

<p>Therefore, Google doesn't really need to do much. Many things that Google blurs out is for privacy reasons, if I walk beside a street view car, they'll have to blur out my face. So, if there is any issue, they simply blur it out.</p>

<p>The pictures that Google takes is their own work. Therefore, they are able to license/place a full copyright... etc. And because the photos belong to Google, they are able to do whatever they want, regardless of whether a similar shot has been taken.</p>

<hr>

<p>Bottom Line:</p>

<p>Google is able to relicense these works because the photos <em>belong</em> to <em>them</em>. Since it is their own work, they are able to do whatever they would like with it.</p>
","1135"
"Can I give the software gratis and charge for the source? (and still be FOSS ?)","137","","<p>A friend and I developed a software which we would like to be <strong>free as in freedom</strong>.</p>

<p>We would like our software to be available to anyone for no money, but we would like to sell the source code to those interested in.</p>

<p>My goal then is :</p>

<ol>
<li>Anyone has access to binary <strong>gratis</strong></li>
<li>Anyone who wants the source from our version <strong>pays a fee</strong></li>
</ol>

<p>Would it still be a FOSS ? If not, what could be an alternative ?</p>

<p>EDIT : to be clearer</p>

<p>My goal is not to be the sole vendor of the software. I'm aware that once the sources are bought by someone, then this person can distribute it, modify it and sell it without restrictions. My hope is that while my sources are still being updated, it would be better for someone to get the ""official"" version.</p>

<p>Actually, <strong>my main concern is</strong> there are still functionalities to be implemented, I'm eager to have some user feedback, but I don't want to accept merge requests from outside our team and I'm a bit afraid of someone forking and doing a better/faster job at implementing new functionalities.</p>
","<p>It sounds like you want to:</p>

<ol>
<li>make compiled (non-source) software available <em>gratis</em>, without the source code</li>
<li>charge money for access to the source code, and (I think)</li>
<li><strike>be the sole vendor of the source code</strike></li>
</ol>

<p>Unfortunately these terms do not meet the <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow"">free software definition</a>:</p>

<p>1+2 limits freedom 1 (""the freedom to study how the program works, and change it so it does your computing as you wish""). Simply put, you cannot give someone compiled software without giving them the source (and still call it free).</p>

<p>2 is not inherently a problem. You can charge for free software.</p>

<p><strike>3 limits freedoms 2 and 3 (redistribution of original or modified source code).</strike></p>

<hr>

<p>Business models for free software include:</p>

<ul>
<li><p>Provide the source libre and gratis, charge for access to compiled binaries. Users with the ability to compile themselves can choose to do so, rather than pay you. They are also potential competitors, contributors or employees.</p></li>
<li><p>Provide source and compiled binaries libre and gratis. Charge for support and private modifications. Private modifications are still libre, your clients are again potential competitors, contributors, partners or employees.</p></li>
</ul>

<p>In general, free software business models must replace monopoly of the source code with some other value-add, typically convenience, support, service or hardware resources.</p>
","4143"
"Does a license needs to be approved by the OSI to be an open source license?","136","","<p>The Open Source Initiative has created the <a href=""http://opensource.org/osd"">Open Source Definition</a> to define what open source is. Also it has set up a formal process to approve licenses to be open source. Now, does a license need this formal approval to be an open source license or is conforming with the definition enough?</p>
","<p>""Open Source"" is not a formally defined term, so there are various definitions.</p>

<p>Some might interpret it literally and apply it to any software whose source code is published (without necessarily any granted rights, e.g., to distribute it), some might apply it to any software that comes with certain not necessarily well-defined freedoms, some might apply it to any software that is licensed under a license that complies with <a href=""http://opensource.org/osd"">The Open Source Definition</a>, and some might apply it to any software that is licensed under a license approved by the <a href=""http://opensource.org/"">Open Source Initiative</a>.</p>

<p>According to an <a href=""https://en.wikipedia.org/wiki/Open-source_software#Definitions"">unsourced claim in the Wikipedia article <em>Open-source software</em></a>, OSI’s definition is ""recognized as the standard or de facto definition"". According to OSI itself, <a href=""http://opensource.org/faq#free-software"">their founders coined the term</a>.</p>

<p>And <a href=""http://opensource.org/faq#unlisted-licenses"">according to OSI’s FAQ</a>, a license is only an ""Open Source license"" if it’s approved by the OSI:</p>

<blockquote>
  <p><strong>Is &lt;SOME LICENSE&gt; an Open Source license, even if it is not listed on your web site?</strong></p>
  
  <p>In general, no. We run all licenses through an <a href=""http://opensource.org/approval"">approval process</a> to provide an accepted standard on which licenses are Open Source, and we list <a href=""http://opensource.org/licenses"">the approved ones</a>. Be dubious of claimed Open Source-ness for licenses that haven't gone through the process. See also the <a href=""http://opensource.org/proliferation"">license proliferation</a> page for why this matters so much.</p>
</blockquote>

<p><a href=""http://opensource.org/faq#approved-licenses-only"">Another FAQ</a> states essentially the same:</p>

<blockquote>
  <p><strong>Is &lt;SOME PROGRAM&gt; Open Source?</strong></p>
  
  <p>Only if it uses one of the approved licenses, and releases appropriate software.</p>
</blockquote>

<p>Following this definition makes sense because it objectively makes clear which licenses are Open Source licenses.<br>
Deciding if a license complies to the OSD is <em>not</em> always easy, and opinions might differ. If we’d only base the decision on the OSD and ignore if the OSI approves a license or not, we would most likely end up with licenses where some agree and some disagree that it’s an Open Source license. </p>
","897"
"How much access to the ""original"" code of a GPL-sourced project do I need to provide, personally?","136","","<p>There's a well-known GPL3 game on Google Play called Pixel Dungeon by watabou (which includes a game engine by watabou called ""noosa"" which is also GPL3), and it accepts donations in the app. The game has been forked by many programmers, in particular by Nyrds to ""Remixed Pixel Dungeon"", where they added unlockable perks for donating, as well as advertisements and IAP.</p>

<p>I've been working on my own version forked from RPD, and I plan to make it more significantly different from its forerunners than any of the variants I've found online. I started from RPD rather than PD because RPD added a number of features I wanted to cannibalize. I've removed the ads and IAP, but I'm leaving the donation option in and possibly some donation perks.</p>

<p>I'm making a lot of changes to the system, and for my own sanity I've been refactoring the entire structure of the code base: it no longer uses same the directory structure watabou or Nyrds set up, so at a glance it isn't obvious anymore from the structure of the code alone 'who did what' exactly. I understand enough about GPL3 that I know I need to provide users with a link to my own code (which I'll keep on github), and that's not a problem.</p>

<p>My question is this: how much trouble do I need to go to in order to properly credit watabou and Nyrds for what they've already done? Is it sufficient for me to mention them both, knowing that the forks on Github allow them to be located by anyone who visits my personal code source, since the trail of forks leads back to both of them? Or do I need to provide and maintain a set of links to the authors' and their work, which might require upkeep on my part?</p>

<p>My hope is that absorbing others' code into my own directory structure (rather than keeping it in com.watabou.*, etc.) isn't going to cause me a legal headache. I just prefer being able to organize the code as I see fit, and toss the bits that I never plan to use, since I can always access it again through Github if need be.</p>
","<p>I'm not aware of any requirement to credit previous authors, aside from keeping their copyright notices intact.</p>

<p>I suggest you copy <em>their</em> notice of rights, and the warranty disclaimer to your LICENSE file:</p>

<blockquote>
  <p>This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.</p>
  
  <p>This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.</p>
</blockquote>

<p>The thing to be careful about is whether or not they include:</p>

<blockquote>
  <p>...or (at your option) any later version.</p>
</blockquote>

<p>For the sake of courtesy you could add the following to your LICENSE file:</p>

<ul>
<li>the program's name and version number when you forked</li>
<li>their copyright notice from the code (this also gives a date)</li>
<li>some appropriate link</li>
</ul>

<p><strong>The original code</strong></p>

<p>You could note the latest commit ID (e.g. <code>ca458a2</code>).<br>
Then you could offer the ability to browse or directly download the original code:  </p>

<ul>
<li><a href=""https://github.com/watabou/pixel-dungeon/tree/ca458a2"" rel=""nofollow"">https://github.com/watabou/pixel-dungeon/tree/ca458a2</a> (browse)</li>
<li><a href=""https://github.com/watabou/pixel-dungeon/archive/ca458a2.zip"" rel=""nofollow"">https://github.com/watabou/pixel-dungeon/archive/ca458a2.zip</a> (direct download)</li>
</ul>
","4611"
"Can I hide a few lines of code because of security reasons?","135","","<p>I am working on a little project, and I consider making it open source (GPLv3). But there is one little problem: </p>

<p>There are a few lines of code I don't want to show off to the public because of a security reason. The reason is because the contents of the function could 'give away' secret keys.</p>

<p>May I do something like this?</p>

<pre><code>void aFunction
  {
    //Hidden because of security reason
  }
</code></pre>

<p>Without this function, the program complies but doesn't fully work.</p>
","<p>You are not generally required<sup>[1]</sup> to release any secret keys necessary to make an application run. Instead, users can obtain their own key.</p>

<p>However, redacting your source code is not a suitable approach, for the primary reason that this is inconvenient and risky for you. When you publish a new version of the code you have to make sure to always redact it. If you are publishing via a version control system such as Git, you have to make sure that no published version in the whole history of the project contains these secrets.</p>

<p>Instead of redacting that code, make it configurable. Store the secrets in a configuration file or in environment variables (both have different risks). It is easier to prevent a config file from being checked into version control than to prevent only the contents of a single function.</p>

<p>If you need to redact behaviour rather than data such as keys, then this becomes more complicated, both legally and technically: you could extract the sensitive behaviour into plugins of your application. However, that may be problematic if you accept outside contributions to your software and if you would like to distribute these plugins, since in-process plugins to a GPL system must also be licensed under the GPL.</p>

<p><sup>[1]: If you are embedding GPLv3 software in a “User Product” and you are able to update the software of such a device, then you must also give recipients of the software the means to update the device with their modifications. This may involve providing keys, e.g. for signed bootloaders.</sup></p>
","6221"
"Why is open source software often shared via distributions?","135","","<p>Linux comes most often to your computer as a distribution. This distribution contains a lot more than only Linux: Browser, Editor, Games, Terminal, Spreadsheet and so on. But nearly all software in distributions is open source. Why is open source software often spread via distributions? There is no Windows-distribution, with all the important software like Office and so on, so why is it so common for open source?</p>
","<p>There are two factors at play that make Linux teem with distributions, both loosely related to being open source: it's freely redistributable, and it has a bazaar development model.</p>

<p>Making a software distribution requires having the permission to distribute the software. When the software is freely redistributable, the distributor doesn't need to seek permission, so they can stick to technical issues and not worry about legal issues.</p>

<p>Being open source is not necessary, but it can help for some common objectives of distributions. For example, distributions bear the responsibility for sharing timely security fixes; having the source available allows the distributor to make a security fix if a flaw is discovered, even if the original author is unresponsive. Having the source available also broadens the offer by allowing, for example, binary distributions for platforms that the original author cannot or is unwilling to support directly.</p>

<p>Note that there are distributions of non-redistributable software, even for-pay software. They tend to be called <a href=""https://en.wikipedia.org/wiki/App_store"" rel=""nofollow"">app stores</a>. App stores got started only when most people were downloading their software from the Internet; <a href=""https://en.wikipedia.org/wiki/App_Store_(iOS)"" rel=""nofollow"">Apple's store for iPhone software</a> made them mainstream. Windows got onto the act later because it started out when software was bought on floppies, but there is a <a href=""https://en.wikipedia.org/wiki/Windows_Store"" rel=""nofollow"">Windows store</a> nowadays (since Windows 8).</p>

<p>Now on to the second point: what makes the Linux ecosystem different from BSD, when they're all free software? It's <a href=""https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar"" rel=""nofollow"">the bazaar vs the cathedral</a>. <a href=""https://en.wikipedia.org/wiki/Berkeley_Software_Distribution#Significant_BSD_descendants"" rel=""nofollow"">BSD systems</a> follow a cathedral-type model, where a team develops a core system. There are three main BSD systems (<a href=""https://en.wikipedia.org/wiki/FreeBSD"" rel=""nofollow"">Free</a>, <a href=""https://en.wikipedia.org/wiki/OpenBSD"" rel=""nofollow"">Open</a> and <a href=""https://en.wikipedia.org/wiki/NetBSD"" rel=""nofollow"">Net</a>) and a lot of minor ones. Each system comes with a <a href=""https://en.wikipedia.org/wiki/Ports_collection"" rel=""nofollow"">port collection</a>: a distribution of third-party software, with a package manager. BSD systems make a clear distinction between the core software (not always written in-house, but maintained in-house) and the third-party software built through ports and managed by the package manager.</p>

<p>Linux distributions, on the other hand, put together a large assemblage of software that's maintained separately. Even a minimal Linux installation needs to assemble a lot of different products: at least a kernel, a bootloader, an init system, a shell, some system utilities, some file and text processing utilities, various hardware management and network configuration utilities, — and that's just to have the bare minimum with a system that does nothing useful. A desktop or server Linux system needs a lot more — web server, email, scheduled tasks, graphical user interface, … all come from one or more different providers. Linux distributions typically don't maintain any utilities themselves other than the system installer, a few configuration tools and the package manager and a few configuration tools (and sometimes even none of these.). Most Linux distributions don't make a sharp distinction between the core system and additional packages, if at all, and even if they do the core system consists of far more software than the distribution maintains by itself.</p>
","972"
"How to anonymously submit GPL licensed source code to a science fair?","134","","<p>I've created a personal project and licensed it as GPL3 (I'm a fan of the open source movement). The source code is posted publicly on Github. I'm planning on submitting it to the Siemens Competition, a science/engineering fair.</p>

<p>All was fine and dandy until I discovered the following in the Siemens rules manual:</p>

<blockquote>
  <p><strong>How do I cite my source code?</strong> You need to place the code in a
  repository , for example GitHub , and link to your GitHub account in
  your references (please also list the log - on information) . Keep in
  mind a ny sites you post to must be anonymous . There is usually a
  name associated with the account, so you would need to name the
  account “ Competition Entrant ” to avoid being disqualified for
  personally identifiable information.</p>
</blockquote>

<p>So, it looks like I'll have to make a copy of the repository somewhere, using an anonymous account, and share that with my paper.</p>

<p>If I do that, am I in compliance GPL? Isn't one of the clauses of GPL that source code must cite the original author? How does it work if <em>I</em> am the original author, but am posting it anonymously or under a pseudonym somewhere? </p>

<p>I doubt there's any risk of litigation, and I don't think there's anything immoral about this arrangement; but I'd like to stay in the clear for GPL as a matter of principle.</p>
","<p>As the author of the software, you can never be in-violation of the GPL.</p>

<p>From the FAQ on gnu.org:</p>

<blockquote>
  <p><strong>Is the developer of a GPL-covered program bound by the GPL? Could the developer's actions ever be a violation of the GPL?</strong> (#DeveloperViolate)</p>
  
  <p>Strictly speaking, the GPL is a license from the developer for others to use, distribute and change the program. The developer itself is not bound by it, so no matter what the developer does, this is not a “violation” of the GPL.</p>
  
  <p>However, if the developer does something that would violate the GPL if done by someone else, the developer will surely lose moral standing in the community.</p>
  
  <p>(<a href=""https://www.gnu.org/licenses/gpl-faq.html#DeveloperViolate"" rel=""noreferrer"">https://www.gnu.org/licenses/gpl-faq.html#DeveloperViolate</a>)</p>
</blockquote>

<p>This is assuming the software is indeed entirely written by you and you own the copyright on it.
Vs say if it was GPL and not in some way a derived work of say a GPL licensed software.</p>

<p>In general you own the copyright, you can more or less do what you want.
The GPL has no terms that really refer to your actions.</p>

<p>If for some reason you wanted to tangle though the idea of treating “Competition Entrant” as a separate person from you.
Then the sensible thing to do would be to  grant another license exclusively to “Competition Entrant” that does not have the GPL clauses about crediting the original author.</p>

<hr>

<p>As an aside:</p>

<p>That policy is rather silly.
Asking you to create a fake account on Github is pretty dubious, and an unnecessary amount of work.
If the entry date is soon then comply (maybe using a service other than Github), and afterwoods complain about it.
If it is a while away, then complain now.</p>

<p>Assuming there is a general need to submit things online (like the write-up), then they should be allowing you to submit a zip file full of code.
This is what CS and Engineering research conferences do.</p>
","5952"
"Can I show a GNU GPL licensed software in a TV movie?","133","","<p>Am I allowed to show the interface of a GNU GPL licensed piece of software being used in a TV movie? I'm not in the US, so ""fair use"" and similar applications do not apply unfortunately.</p>
","<p>I think your problem is largely equivalent to the licensing of screenshots, and that problem has a definitive answer: A screenshot of the user interface of some software is a derivative work of that software, and is therefore restricted by the license of that software.</p>

<p>The GPL does not seem to consider screenshots, but it mentions program output:</p>

<blockquote>
  <p>The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p>
  
  <p>– <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">GPL v3</a></p>
</blockquote>

<p>I strongly assume that a graphical user interface “constitutes a covered work”. However, data displayed with the help of this program is not covered. For example, let's consider a spreadsheet calculator. The user interface with menu bars and widgets would probably be covered by the copyright. However, a screenshot that is cropped to only display data in the spreadsheet would be OK: you provided that data, so you have the copyright.</p>

<p>The Free Software Foundation (which wrote the GPL) interprets this very differently. According to their FAQ, screenshots and videos are free – but that's not actually part of the license.</p>

<blockquote>
  <p><a href=""https://www.gnu.org/licenses/gpl-faq.html#WhatCaseIsOutputGPL"" rel=""nofollow noreferrer"">In what cases is the output of a GPL program covered by the GPL too?</a></p>
  
  <p>The output of a program is not, in general, covered by the copyright on the code of the program. So the license of the code of the program does not apply to the output, whether you pipe it into a file, make a screenshot, screencast, or video.</p>
  
  <p>The exception would be when the program displays a full screen of text and/or art that comes from the program. Then the copyright on that text and/or art covers the output. Programs that output audio, such as video games, would also fit into this exception. […]</p>
  
  <p>Keep in mind that some programs, particularly video games, can have artwork/audio that is licensed separately from the underlying GPLed game. In such cases, the license on the artwork/audio would dictate the terms under which video/streaming may occur.</p>
</blockquote>

<p>Note that e.g. Wikipedia meticulously tracks the license of all screenshots. For screenshots of non-free programs Wikipedia uses fair-use exceptions in U.S. law, for free programs it keeps the license of the program for the screenshots. The Wikipedia therefore seems to not share the FSF's interpretation of the GPL in this matter. See <a href=""https://en.wikipedia.org/wiki/Wikipedia:Software_screenshots"" rel=""nofollow noreferrer"">Wikipedia:Software_screenshots</a> and <a href=""https://commons.wikimedia.org/wiki/Commons:Screenshots"" rel=""nofollow noreferrer"">Commons:Screenshots</a>. </p>

<p>While German copyright law does not have a concept of fair use, it does allow for copyrighted content to appear under certain conditions. The most important exception is citation law (see §51 UrhG). That would be a viable route if your TV movie can be classified as journalism or art, but probably not if it's a commercial entertainment production.</p>
","5111"
"What do open source software maintainers do?","133","","<p>I have heavily used open source software for several years, but now that I'm finally ready to dive in as a developer, I found myself not even knowing this very basic thing: what do maintainers do?</p>

<p>As their name suggests, maintainers probably maintain software by fixing problems, bugs, etc. They are also often project or sub-project leaders, and do the official release builds, etc. However it seems some maintainers also add new features besides just ""maintaining"" old ones.</p>

<p>What are the general things that open source software maintainers do? Is it just another word for project leaders?</p>
","<p>It may be easier to think about this in a negative sense, i.e. what are the responsibilities of someone who contributes to a project but isn't a maintainer?</p>

<p>If I submit a patch to someone else's project and that patch gets merged in, I am an author of the project.  However, I may never look at the project ever again.</p>

<p>Maintainers, then, are the people who do <em>anything</em> and <em>everything</em> beyond that.  What they specifically do depends on the project, their interests, and their schedule, but generally speaking they are <em>responsible for</em> anything that needs to be done (even if they don't do the actual work and just ensure that someone else does it).</p>
","4612"
"What does ""express grant of patent rights from contributors to users"" mean?","133","","<p>I'm trying to choose which open source license I should use in my app, and in the description for one of the licenses, it says the license provides an ""express grant of patent rights from contributors to users"".</p>

<p>Would someone be able to explain to me what this means?</p>

<p>The license that this is from is the Apache License 2.0.</p>
","<p>There are two, completely independent, forms of intellectual property rights that can be used to protect software against unwanted copying/modification:</p>

<ol>
<li>Copyright</li>
<li>Patents</li>
</ol>

<p>Copyright protects the ""expression of an idea"" and applies to the source code that gets written. Copyright protection is granted automatically at the moment that the code is written. Copyright protection means that only the author is allowed to make copies of or changes in the code, unless the author explicitly gives this right also to others by means of a copyright license.</p>

<p>Patents protect inventions and need to be explicitly requested. When a patent has been granted to you, you have the exclusive right to make use of that invention or to give a patent license to others.<br>
Patents can be broader that copyrights, because if someone else makes the same invention that you have a patent on, then you can force them to stop using the invention or to buy a patent license from you. With copyright, however, it is possible that multiple people independently write very similar code and each has their own copyright protection.</p>

<p>The Apache License 2.0 is primarily a copyright license that gives people the right to use the code written by the person granting the license.<br>
However, contrary to other copyright licenses, the Apache license also takes patents into consideration and includes a license to use the relevant patents  that the person holds who released the code under the Apache license. That is what the phrase means that you quoted.</p>
","6305"
"What license do I apply to my software if parts of its code is derived from MIT licensed open source software?","133","","<p>This is the first time I'm handling licenses and could use some guidance in this matter.</p>

<p>I have developed a piece of Java software where parts of the code is derived from different classes licensed with the MIT license but different copyright holders. The plan is to upload it to GitHub as open source software.</p>

<p>What license should I apply to my software? Am I bound to use the MIT License when parts of the code is derived from MIT licensed software? </p>

<p>Below is one of the MIT licenses from where I have derived code.</p>

<blockquote>
  <p>The MIT License</p>
  
  <p>Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi,
  Eric Lefevre-Ardant, Erik Ramfelt, Michael B. Donohue, Alan Harder,
  Manufacture Francaise des Pneumatiques Michelin, Romain Seguy</p>
  
  <p>Permission is hereby granted, free of charge, to any person obtaining
  a copy...</p>
</blockquote>

<p>If I use the MIT license, should I add the names from the copyright in the above license into my new license? I feel I should acknowledge the use of their code in some way, so is having my name + their names in the copyright enough or should I do it in some other way?</p>
","<p>The MIT license doesn't ""bind"" you to use the MIT license for your application, but it's a simple way to comply with the license if you haven't got pressing reasons to use another license.  Yes, all you need to do is to add your own copyright line:</p>

<pre><code> The MIT License

 Copyright (c) 2016 Preyfix
 Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi...
 Permission is hereby granted...
</code></pre>

<p>If you have only incorporated some small amount of code from another MIT project, you could write</p>

<pre><code> The MIT License

 Copyright (c) 2016 Your Name
 Portions Copyright (c) 2014 Snippet Author
 Permission is hereby granted...
</code></pre>

<p>I don't see any mention of the phrase ""Portions Copyright..."" in US copyright law, but Google turns up nearly a million instances of the phrase, so it's commonly used.  I've also seen a few (about 300) instances of ""Significant Portions Copyright...""</p>
","4508"
"How to indicate that I also have an issue on github?","132","","<p>On github issue page, there doesn't seem to be a place to show that I also share this problem (e.g. upvote, +1) to let the developers prioritize this issue.</p>

<p>Is there a way to do this? If know, how do developers know which issues affect most people?</p>
","<p><strong>Update 2016-03-11</strong>: What do you know, <a href=""https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments"" rel=""nofollow"">GitHub have just added a feature to add reactions to issues (and PRs and comments)</a>. Among the reactions available is a +1. This will probably be the way to go.</p>

<p><a href=""https://cloud.githubusercontent.com/assets/25792/13683303/d55b8b7e-e6ba-11e5-9b31-59a8db92e456.gif"" rel=""nofollow""><img src=""https://cloud.githubusercontent.com/assets/25792/13683303/d55b8b7e-e6ba-11e5-9b31-59a8db92e456.gif"" alt=""+1""></a></p>

<p><strong>Old answer</strong></p>

<p>As of writing, this is not possible. There's a <a href=""https://github.com/isaacs/github/issues/9"" rel=""nofollow"">feature request</a> dating back to 2013 for this.</p>

<p>There's even an <a href=""https://github.com/dear-github/dear-github"" rel=""nofollow"">open letter</a> listing this issue.</p>

<p>Instead, the standard procedure is to reply ""+1"" to the issue, which puts you on the list of issue participants. The downside is that this introduces a lot of spam - to the issue itself and to anyone subscribed to the issue.</p>
","2372"
"Jurisdictions without compatible copyright law","132","","<p>Free software licences such as GPL depend on copyright law in order to be legally enforcable.</p>

<p>Are there jurisdictions in which the law does not enforce such licenses, allowing the license to be ignored? If so are there any steps that can be taken to preserve the freedom of software in such jurisdictions?</p>
","<p>In general, international recognition of copyright is governed by the <a href=""https://en.wikipedia.org/wiki/Berne_Convention"">Berne Convention</a>: if you publish your work in a country that has signed the Berne Convention, it's protected in all other signatory countries.  There are other treaties (<a href=""https://en.wikipedia.org/wiki/Universal_Copyright_Convention"">Universal Copyright Convention</a>, <a href=""https://en.wikipedia.org/wiki/TRIPS_Agreement"">TRIPS</a>, <a href=""https://en.wikipedia.org/wiki/WIPO_Copyright_Treaty"">WIPO Copyright Treaty</a>), but in general, a signatory to one of these is also a signatory to Berne.</p>

<p>Specific cases I'm aware of where you can't enforce the GPL:</p>

<ul>
<li><a href=""https://en.wikipedia.org/wiki/Intellectual_property_in_Iran#International_conventions"">Iran does not recognize anybody else's copyrights</a>.</li>
<li><a href=""https://commons.wikimedia.org/wiki/Commons:Copyright_rules_by_territory#Somalia"">Somalia does not have a working copyright regime</a>.</li>
</ul>

<p>There may be others; see <a href=""https://en.wikipedia.org/wiki/List_of_parties_to_international_copyright_agreements"">Wikipedia's list of parties to international copyright agreements</a> for countries that haven't signed any of the large-scale agreements.</p>

<p>In the case of Iran, you may be able to get your software protected by having an Iranian contributor copyright it locally, but doing so may expose you to other legal issues you'd rather avoid.</p>
","389"
"Can I sell my project using GNU GPL v3?","130","","<p>At first, I always developed commercial projects only, so I bad know GNU licenses. Now, I want to make my library available for other developers. And maybe to find co-developers. So, I chosen GNU GPL v3... <strong>BUT</strong><br>
I didn't get how does this license apply to me?  </p>

<ol>
<li>Can I use own GNU GPL v3 library in my commercial projects? </li>
<li>Can I use own GNU GPL v3 library in my commercial projects if some
developer modified its sources too?</li>
</ol>
","<ol>
<li>Can I use own GNU GPL v3 library in my commercial projects?</li>
</ol>

<p>Yes, as long as you own the rights to your own code, you could license it to other under the GPL for free or commercially for a fee. For instance this is the business model of MySQL.</p>

<ol start=""2"">
<li>Can I use own GNU GPL v3 library in my commercial projects if some developer modified its sources too?</li>
</ol>

<p>Yes, as you as you own the rights to this code which may require a <a href=""https://opensource.stackexchange.com/questions/tagged/contributor-agreements"">contributor license agreement</a> such that external contributions rights are licensed to you in a way that would allow you to relicense under a commercial license.</p>
","4878"
"Non commercial project which might be using a patent","130","","<p>If a non commercial or open source project uses a technique which some can argue is covered by a particular patent, what would be implications be. Do you have to pay royalties. If project does not generate any money what would be the effect? Also what is the best way to get use of the license while being open source? What is the implication of using a patent and being open source? The patent relates to a closed source project.</p>
","<p>When an invention is patented, the patent owner has exclusive rights to use that invention for the duration of the patent term, within the jurisdiction where the patent was issued. In general, there isn't any special exception for non-commercial usage. However, patent law is a national affair, and there might be such rules in some countries.</p>

<p>Open-source projects cannot use patented techniques unless the patent owner issues them a royalty-free license. If there were a per-copy royalty fee, you would no longer be free to distribute copies of the open-source project, or to distribute your modifications. If software has such restrictions, it can't be considered open source software. Additionally, open source software must be free for any kind of usage. If a software may only be used for non-commercial purposes, that doesn't meet the open source definition.</p>

<p>Many modern open source licenses (GPLv2, GPLv3, Apache License 2.0) include an automatic patent grant, though they differ in some important details, e.g. what happens when the patented technique is only patented in some countries but not in others. What is an automatic patent grant? If I own a patent and create a software that uses this patent and license the software under one of those licenses, I automatically grant all users of this software the necessary patent licenses.</p>

<p>Unfortunately, some licenses like the MIT license do not have such a patent grant. If I own a patent and create a software that uses this patent and license that software under the MIT license, I could later sue the users of this software for a patent violation. MIT-licensed software therefore has a higher risk for users than other licenses.</p>

<p>Of course, the other licenses do not guarantee that the software is patent-free. If I create a software and publish it as open-source, and it later turns out that it relies on patents from someone else (even if I didn't know about the patent and invented the patented technique independently), then the software can no longer be used and I am probably liable for patent infringement.</p>

<p>If it is clear from the onset that a software relies on patents and the patent owner will not grant a free license, then the only way is to wait the 20 years until the patent expires.</p>
","5487"
"Do I lose any rights with Canonical's Harmony CLA?","129","","<p>According to this <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement#Canonical"">wikipedia page</a>:</p>

<blockquote>
  <p>As of August 2011, Canonical is requesting contributions be licenced under a Harmony Contribution Licence Agreement, rather than the copyright being assigned to Canonical.</p>
</blockquote>

<p>This would appear to put contributors in a better position, being able to maintain the copyright of their contributions. Are there still any drawbacks? Does the contributor lose any rights with the <a href=""http://www.harmonyagreements.org/docs/ha-cla-i.html"">Harmony agreement</a> that they would have kept when contributing to a project without a Contributor License Agreement?</p>
","<p>This is indeed a better position to be in.</p>

<p>Copyright assignment means you lose all your rights. You no longer own the work in the eyes of the law and have no legal force over it; Canonical instead owns it and can do as they wish with it.</p>

<p>The <a href=""http://www.harmonyagreements.org/docs/ha-cla-i.html"">Harmony CLA</a> states (§ 2.1.a):</p>

<blockquote>
  <p>You retain ownership of the Copyright and Patent Claims in your Contributions and have the same rights to use or license the Contributions which You would have had without entering into the Agreement.</p>
</blockquote>

<p>For legalese, that's pretty clear: you're still the owner, you can still do as you like with it.</p>

<p>It also (in §4 and §5) protects you: whereas copyright transfer would leave you open to legal claims against you if your work goes wrong, sections 4 and 5 are the 'Disclaimer' (i.e. you provide your work with no warranties) and 'Consequential Damage Waiver' (where Canonical agree not to sue you if you got something wrong).</p>
","721"
"Forking GitHub repository (MIT): what references to the original author should remain intact?","129","","<p>I'll pick <a href=""https://github.com/coryhouse/react-slingshot"" rel=""noreferrer"">one of the most popular React boilerplates</a> as an example here.</p>

<p>Assume I've forked it (the commits history till the fork date remains intact). According to the text of MIT license, the only thing that I have to keep is the license itself. So, does it mean I can change whatever I want in this repository and remove/replace whatever references to the author (e.g. <a href=""https://github.com/coryhouse/react-slingshot/blob/master/package.json#L31"" rel=""noreferrer"">package.json author</a>? Except one thing - <a href=""https://github.com/coryhouse/react-slingshot/blob/master/LICENSE#L3"" rel=""noreferrer"">reference to original author in the LICENSE file</a>.</p>

<p>And, also, I should replace <a href=""https://github.com/coryhouse/react-slingshot/blob/master/LICENSE#L3"" rel=""noreferrer"">this line</a> on top of the LICENSE file with this text:</p>

<blockquote>
  <p>Copyright for portions of project [Original project name] are held by [original author, year] as part of project [New project name]. All other copyright for project Foo are held by [new name, year].</p>
</blockquote>

<p>Are these assumptions correct? Where can I find authoritative explanation of such details of the MIT license?</p>
","<p>Your assumptions are mostly correct but you can make things a tad simpler...</p>

<ol>
<li><p>You are de-facto creating a new package, so you should update your <code>package.json</code> such that it is clear it is something different and a new package. Your users will be thankful for this.</p></li>
<li><p>The MIT license requirements are quite minimal: just keep a copy of the copyright and license with the code at all times. For this you simply can carry the original LICENSE file ... And/or add such notice or a simplified <a href=""https://spdx.org/sites/cpstandard/files/pages/files/using_spdx_license_list_short_identifiers.pdf"" rel=""noreferrer""><code>SPDX-License-identifier</code></a> and copyright to every file: that's likely overkill but this is something I personally like as it is an affirmative statement of origin that is inside the files as opposed to external. Note that using SPDX license ids is already part of the NPM <code>package.json</code> <a href=""https://docs.npmjs.com/files/package.json#license"" rel=""noreferrer"">spec</a>.</p></li>
<li><p>Avoid fancy copyright statements if possible. The common approach is just to slap your own copyright statement on top of the previous one e.g. something like this:</p></li>
</ol>

<blockquote>
  <p>Copyright (c) 2017 stkvtflw</p>
  
  <p>Copyright (c) 2015 Cory House</p>
</blockquote>

<p>One of the reason why you want to avoid things like your suggested new notice: </p>

<blockquote>
  <p>Copyright for portions of project [Original project name] are held by [original author, year] as part of project [New project name]. All other copyright for project Foo are held by [new name, year].</p>
</blockquote>

<p>... is that one day I or someone will scan your code for license and copyrights with <a href=""https://github.com/nexB/scancode-toolkit"" rel=""noreferrer"">my tool</a> ... and this new copyright form of yours would unlikely be detected correctly and would require me to update <a href=""https://github.com/nexB/scancode-toolkit/blob/e66db9636d6b4679ba2f84146925082873ff6f48/src/cluecode/copyrights.py#L641"" rel=""noreferrer"">my code</a> to add yet another copyright statement style variation in my copyright parser grammar. </p>

<p>Any other copyright detection tool will likely have the same issue ;)</p>

<p>So be gentle and make it easy for others to mechanically discover your licensing and copyright information by keeping things simple and as ""standard"" as possible. IMHO if it is detected by <a href=""https://github.com/nexB/scancode-toolkit"" rel=""noreferrer"">scancode</a>  then this is quite likely standard and common enough ;)</p>
","6126"
"Which OpenSource License for a proprietary software?","129","","<p>I am creating a software that I want to release under a proprietary license with some flexibility for the customer and I need your help to find a license that fits my requirements since I am not sure all the common and popular licenses would fit like LGPL, CC, MIT, etc.</p>

<p>To explain the context, the software would be sold with a perpetual license for the current version (+ one year of support and fix updates). After that year the customer can continue to use the software freely, but if he wants to get the new features he would then need to buy a new license for another year. This is somewhat close to the JetBrains Intellij IDEA license.</p>

<p><strong>What the license must ALLOW :</strong></p>

<ul>
<li>The use of the software or a modified version of it (modifications made by the customer for the customer himself)</li>
<li>The modification of the software (eg: to allow customer to add its own features)</li>
</ul>

<p><strong>What the license must DISALLOW :</strong></p>

<ul>
<li>The distribution of the software (modified or not)</li>
<li>The selling of the software (modified or not)</li>
<li>The selling of a service build on top of the software (modified or not)</li>
</ul>

<p>This license would reassure the customer about using and improving the software with or without me, as if it was it's own software but only for him.</p>
","<p>All open source licenses allow the things you want to allow. I can't think of one that disallows the things you want to disallow. Allowing re-distribution (or selling) of the modified or un-modified software or something built on top of it is key to the whole idea of open source. While you can probably license your software to your customer under virtually any terms you like, it won't be open source.</p>

<p>The Open Source Initiative has formulated a number of criteria for open source licenses: <a href=""https://opensource.org/osd-annotated"" rel=""noreferrer"">https://opensource.org/osd-annotated</a></p>

<p>Most commonly used open source licenses are OSI approved which means that they conform with the definition. See <a href=""https://opensource.org/licenses"" rel=""noreferrer"">https://opensource.org/licenses</a></p>
","5330"
"Adding feature to an Apache v2 package","128","","<p>I'm working on one npm package based on another one but with another approach, this package is licenced under Apache v2 and I want to use MIT. After some use of my package I've noticed I need to use the feature that the licenced code provides, but this package is not mantained since midyear of 2014 and a PR to this package is not an option. </p>

<p>Can I modify and include this package logic into my own package and publish it without any issue? Should I add some reference to the other package? If I should refer the other project what things should I do/include on my own package?</p>
","<p>You should comply with the terms of the Apache License. If you copy AL-licensed source code verbatim, you should keep that license on that source code. if you make a derived work, you can change the license, but you have to comply with the terms of the license. All that you need to know can be found <a href=""http://www.apache.org/foundation/license-faq.html"" rel=""noreferrer"">here</a>; I quote:</p>

<blockquote>
  <p>I'VE MADE IMPROVEMENTS TO THE APACHE CODE; MAY I DISTRIBUTE THE
  MODIFIED RESULT? </p>
  
  <p>Absolutely -- subject to the terms of the Apache
  license, of course. You can give your modified code away for free, or
  sell it, or keep it to yourself, or whatever you like. Just remember
  that the original code is still covered by the Apache license and you
  must comply with its terms. Even if you change every single line of
  the Apache code you're using, the result is still based on the
  Foundation's licensed code. You may distribute the result under a
  different license, but you need to acknowledge the use of the
  Foundation's software. To do otherwise would be stealing.</p>
  
  <p>If you think your changes would be found useful by others, though, we
  do encourage you to submit them to the appropriate Apache project for
  possible inclusion.</p>
</blockquote>
","1715"
"Are dates mandatory in GPL licences?","128","","<p>According to Wikipedia's <a href=""https://en.wikipedia.org/wiki/Copyright_formalities"" rel=""nofollow noreferrer"">Copyright Formalities</a> and <a href=""https://en.wikipedia.org/wiki/Copyright_notice"" rel=""nofollow noreferrer"">Copyright notice</a>, dating or even putting the author copyright notice in unnecessary.</p>

<p>And then explanations such as this <a href=""https://stackoverflow.com/a/20911485/4734474"">Stack Overflow Post</a> make me wonder about how redundant dating is.</p>

<p>Except maybe to show when the work was start or published, what is the point of the date? </p>

<p>Also how strict is GPL on including dates and date ranges? The FSF website says to use ranges but they just seem like a formality.</p>
","<p>No.</p>

<p>If you look at there licenses, you will notice that the following text appears near the end of page.</p>

<p>""END OF TERMS AND CONDITIONS""</p>

<p>That is the end of the license.  Nowhere <em>above</em> that text is there a requirement to add the year to the copyright notice. However, as pointed out in <em>Stephen Kitt's</em> answer, if you <em>modify</em> somebody else's  program GPLv3 section 5 <em>requires</em> you to include a prominent notices stating that you modified it, with a date.</p>

<p>This requirement to record the date for changes you make to somebody else's program is to make sure that downstream recipients is made aware of modifications of the chronology and history of changes made to the original source code.</p>

<p>By law, your copyright is valid <em>without</em> a copyright notice (at least in Berne signatories, including the USA) - but if you leave it out (the notice, not the year), you may need to <em>assert</em> your copyright by other means if your copyright is challenged.</p>

<p>Going back to the web pages with the A(GPL) licenses, notice that below the ""END OF TERMS AND CONDITIONS"", there is a new headline:</p>

<p><strong>How to Apply These Terms to Your New Programs</strong></p>

<p>This is a helpful <em>guideline</em> - not a license requirement.  Your license, and your copyright, is valid even if you choose to not follow this guideline.</p>

<p>However, it is a <em>good idea</em> to have a copyright notice with the year of publication.  While not legally required, having such a notice in place may save you from proving that you've asserted your copyright by other means in the case of a dispute, and damages awarded may be reduced if there is no copyright notice in your work.</p>
","1265"
"Copyleft license that allows usage in plugins of closed-source host applications","128","","<p>I wrote a library that I want to release under the GPL to prevent it from being incorporated in closed source software.</p>

<p>I do not want people to use this library in their closed source commercial project.</p>

<p>At the same time I do not want to prevent people from using this library in any plugins they might create for closed-source software, for as long as the plugin itself is released as open source.  Essentially I want plugins to be treated as separate units, for as long as they are not distributed together with the host application.</p>

<p>Is this achievable by using the GPL and adding an exception?  More importantly, are there existing projects licensed like this?  Is it at all feasible to define the plugin-host separation in a defendable way?</p>

<hr>

<p>Example situation: The library is for scientific use.  I don't want companies who are in the same business to integrate it into their product that they sell to research labs.  But at the same time I do not want to make it more difficult for other researchers to use this library in conjunction with proprietary scientific software such as MATLAB or Mathematica.</p>
","<p>Yes, you can achieve your goal with the GNU GPL, except for prohibiting commercial use.  Section 7 of the <a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">GNU GPL</a> states that you may add ""additional terms"" as long as they do not restrict the rights granted by the GNU GPL.</p>

<p>In your case, you want to grant an additional exception from the conditions in the GNU GPL or at least clarify your point of view.  So instead of just saying</p>

<blockquote>
  <p>This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or (at
  your option) any later version.</p>
</blockquote>

<p>you would add something like this right after this statement:</p>

<blockquote>
  <p>As a further permission, you may use this program in a plugin for a
  program covered by an incompatible license as long as the plugin
  itself is released as free software covered by one of the free
  software licenses listed here
  <a href=""http://www.gnu.org/licenses/license-list.html"" rel=""nofollow"">http://www.gnu.org/licenses/license-list.html</a>.</p>
</blockquote>

<p>It is best to differentiate the software you want to allow combinations with by license instead of referring to it directly as free.  That way, you have a specific list of licenses that you want to allow which makes it easier for anyone receiving your software and also is clearer in a legal sense because you do not need a possibly lengthy definition of free vs. non-free.  As an alternative, you could say something along the lines of</p>

<blockquote>
  <p>as long as the plugin itself is released as free software as defined
  by the Free Software Foundation.</p>
</blockquote>

<p>But I think this may be tricky legally.</p>

<p>If you use the exception the way I described it, someone could use your code in a program covered by the <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow"">Apache License 2.0</a>.  This combined work could not be made non-free because only your exception to the conditions of the GNU GPL allow your code to be used in a combined work covered by a more permissive license.  If you do not want to allow use in any free program, you need to restrict the list of allowed licenses.  For example, you could say</p>

<blockquote>
  <p>As a further permission, you may use this program in a plugin for a
  program covered by an incompatible license as long as the plugin
  itself is covered by a compatible license.</p>
</blockquote>

<p>If you want to disallow distribution of the plugin together with a non-free host application, you need to add another statement:</p>

<blockquote>
  <p>This additional permission does not apply to distributing this program
  together with a program covered by an incompatible license.</p>
</blockquote>

<p>However, this last statement may be not enforceable depending on how the distribution works.  If the plugin and the host program are in the same package, but the user has to load it into the host application, your exception may still apply.</p>

<p>Any of the additional permissions may be removed by anyone distributing your software, though (also section 7 of the GNU GPL).  In that case, the program could only be used under the pure GNU GPL.</p>

<p><strong>There is no way to restrict commercial use with any Free Software license.</strong>  Commercial use is part of the <a href=""http://www.gnu.org/philosophy/free-sw.en.html"" rel=""nofollow"">four freedoms</a>, so as soon as you prohibit commercial use, your software becomes non-free.  Furthermore, the GNU GPL does not allow such further restrictions; those further restrictions are considered void.</p>

<p>The FSF also has a FAQ entry about when exactly <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#GPLAndPlugins"" rel=""nofollow"">using a plugin constitutes a combined work</a>.</p>

<p>By the way, these statements also apply to the <a href=""http://www.gnu.org/licenses/agpl-3.0.en.html"" rel=""nofollow"">GNU AGPL</a> which may be a good pick if you think your software may be run as a service over a network.</p>
","1501"
"How to publish my open source library to Maven?","128","","<p>I wrote a GNU-GPLv3 <a href=""https://en.wikipedia.org/wiki/JAR_(file_format)"" rel=""nofollow noreferrer"">Java library</a>.<br>
I want to make it available to people who use a <a href=""https://en.wikipedia.org/wiki/Apache_Maven"" rel=""nofollow noreferrer"">Maven</a> build script (pom.xml)</p>

<ul>
<li>How to do?</li>
<li>What are the pre-requisites?</li>
</ul>
","<p>The standard way is to use sonatypes procedure: <a href=""http://central.sonatype.org/pages/ossrh-guide.html"" rel=""nofollow noreferrer"">http://central.sonatype.org/pages/ossrh-guide.html</a></p>

<p>It is basically 2 steps:</p>

<ol>
<li>setup an account with them (free, but you need to tell them about a page you own or belong to)</li>
<li>setup some basic things in your pom or its parent.</li>
</ol>

<p>For my projects I create a parent-pom in <a href=""https://github.com/openCage/pfabulist-parent"" rel=""nofollow noreferrer"">https://github.com/openCage/pfabulist-parent</a>. branch v1.</p>

<p>Use it just copy stuff in your pom.</p>

<p>Then a maven deploy will send your artifact to sonatype.
They test some points and then send it to maven-central.</p>

<p>P.S.</p>

<p>By the way, to check whether your GPL3 license fits to the dependencies you are using there are several options.</p>

<ul>
<li>Philippe Ombredanne tool: <a href=""https://github.com/nexB"" rel=""nofollow noreferrer"">https://github.com/nexB</a></li>
<li>mine as java dependency: <a href=""https://github.com/openCage/loracle-maven-plugin"" rel=""nofollow noreferrer"">https://github.com/openCage/loracle-maven-plugin</a></li>
</ul>
","4712"
"Monogame mobile licensing with xamarin studio","128","","<p>I'm a bit confused on the licensing for <a href=""https://www.xamarin.com/studio"" rel=""nofollow noreferrer"">Xamarin Studio</a> and <a href=""http://www.monogame.net/"" rel=""nofollow noreferrer"">Monogame</a> and <a href=""https://www.xamarin.com/"" rel=""nofollow noreferrer"">Xamarin</a>.</p>

<p>If I develop a game in Xamarin Studio using Monogame and want to release it for iOS and Android which uses Xamarin can I do so for free? Do I need to attribute anyone?</p>

<ul>
<li>Monogame is licensed under the <a href=""https://github.com/mono/MonoGame/blob/develop/LICENSE.txt"" rel=""nofollow noreferrer"">Microsoft Public License</a></li>
<li>Xamarin's license can be found <a href=""https://www.xamarin.com/license"" rel=""nofollow noreferrer"">here</a></li>
</ul>
","<p>From Xamarin's side of things:</p>

<blockquote>
  <p>If you are an individual working on your own applications to sell or for any other purpose, you may use the software to develop and test those applications.</p>
</blockquote>

<p>you're good.</p>

<p>From MonoGame's side of things, the Microsoft Public License is a rather permissive license. You are, as permitted by all FOSS licenses, free to use and redistribute the software (section 2). Section 3 places some conditions on these rights, of which the following are relevant to you:</p>

<blockquote>
  <p>(A) No Trademark License- This license does not grant you rights to use any
  contributors' name, logo, or trademarks.</p>
</blockquote>

<p>So don't go saying that you <em>are</em> MonoGame or using their logo.</p>

<blockquote>
  <p>(C) If you distribute any portion of the software, you must retain all
  copyright, patent, trademark, and attribution notices that are present in the
  software.</p>
</blockquote>

<p>Since you will be distributing part of MonoGame with your game, you would be best advised to include a copy of the <code>LICENSE.txt</code> file from their repository, which includes their copyright notice. Also, don't go into any of their source files and remove copyright notices from them. Maybe the library prints out a copyright notice every time it's initialized; don't remove that.</p>

<blockquote>
  <p>(D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.</p>
</blockquote>

<p>Notice that:</p>

<ul>
<li>You are not required to publish the source of an executable you create based on MsPL code, so if you don't want to make your game open-source, you're free to do that</li>
<li>The license does not impose itself on things that merely <em>link</em> to the software.</li>
</ul>

<p>If you were copying source code from the project into your game, that would be a different story, but as it stands you need only distribute MonoGame under the MsPL.</p>

<p>In summary:</p>

<ul>
<li>Don't use MonoGame's name or logos</li>
<li>Include a copy of their <code>LICENSE.txt</code> file</li>
<li>You can license code that you own and your program as a whole under almost any terms you choose, but MonoGame must remain under the MsPL if you distribute it.</li>
</ul>

<p>The combined copyright notice would be something like: </p>

<blockquote>
  <p>Game files (c) StackNinja and licensed under [whatever license you choose]</p>
  
  <p>MonoGame (c) the MonoGame team and licensed under the Microsoft Public License"".</p>
</blockquote>

<p>However, you should <em>not</em> distribute your game under the GNU General Public License; as <a href=""https://www.gnu.org/licenses/license-list.html#ms-pl"" rel=""nofollow"">the two are incompatible</a>. You are free to do so as the copyright holder, but if you did, recipients would face a conflict of restrictions. The GPL demands they redistribute the entire source of the program under its terms, but the MsPL demands that the source of the MonoGame libraries be distributed under the MsPL. The only way they could comply would be not to redistribute your game at all, thus losing an important freedom.</p>
","4174"
"What are the most common open source license options and how do they differ?","128","","<p>I often hear about GPL variants, MIT, BSD and many other license options. A general Internet search reveals sites like ""Top 20 licenses"" or pages some licenses going out of fashion and others coming in.</p>

<p>With so many licenses to choose from, a major stumbling block for beginners in open sourcing is deciding what license to go for.</p>

<p>So, what are the stats on the most frequently adopted open source license options, and what are there primary differences?</p>
","<p>Determining the relative popularity of various licenses is actually quite difficult.  Below are two graphs.</p>

<p>The first is taken from <a href=""https://www.blackducksoftware.com/resources/data/top-20-open-source-licenses"" rel=""nofollow noreferrer"">BlackDuck: Top 20 Open Source Licenses</a>:</p>

<p><img src=""https://i.stack.imgur.com/Sv8Ge.png"" alt=""BlackDuck: top 20 graph""></p>

<p>and list the following top 5 (making up 76 % av the total):</p>

<ol>
<li>GPLv2 (24 %)</li>
<li>MIT/Expat (20 %)</li>
<li>Apache 2.0 (16 %)</li>
<li>GPLv3 (10 %)</li>
<li>modified BSD (6 %)</li>
</ol>

<p>The second one is taken from presentation at the 2013 Linux Foundation Collaboration Summit <a href=""http://lanyrd.com/2013/linux-foundation-collaboration-summit/scmwxf/"" rel=""nofollow noreferrer"">Licensing of Software on Github: A Quantitative Analysis</a>:</p>

<p><img src=""https://i.stack.imgur.com/t0mjd.png"" alt=""Linux Foundation Collaboration Summit graph""></p>

<p>and list the following top 5 (making up 82 % av the total):</p>

<ol>
<li>MIT/Expat (36 %)</li>
<li>modified BSD (13 %)</li>
<li>GPLv2 (13 %)</li>
<li>GPLv3 (12 %)</li>
<li>Apache 2.0 (8 %)</li>
</ol>

<p>There is a lot of interesting data in the Linux Foundation Collaboration Summit  presentation (e.g. the distribution between permissive, copyleft, weak copyleft and dual licensing, and the shift over time towards more permissive licenses).  I recommend clicking through all the slides.</p>

<p>While the source and methodology of these studies differ (and only the presentation made at the Linux Foundation Collaboration Summit explains the methodology used), both list the <em>same</em> licenses as the top five, but their relative position differ.</p>

<p>While these stats are not definitive (and I hope other answers can show us more studies of this type), I think it is quite likely that these licenses are among the most used ones.</p>

<p>As for how ""they differ in their most important terms and conditions?"", that would make a very long answer. However, the FSF has a very good page about <a href=""http://www.gnu.org/licenses/license-list.en.html"" rel=""nofollow noreferrer"">various licenses and comments about them</a>, here are direct links to each of the top 5, with a note stating whether the license is <a href=""https://opensource.stackexchange.com/a/1179/606"">copyleft or permissive</a> - as this by far is the <em>main difference</em> between the FLOSS licenses.</p>

<ol>
<li><a href=""http://www.gnu.org/licenses/license-list.en.html#Expat"" rel=""nofollow noreferrer"">MIT/Expat</a> - permissive</li>
<li><a href=""http://www.gnu.org/licenses/license-list.en.html#ModifiedBSD"" rel=""nofollow noreferrer"">modified BSD</a> - permissive</li>
<li><a href=""http://www.gnu.org/licenses/license-list.en.html#GPLv2"" rel=""nofollow noreferrer"">GPLv2</a> - copyleft</li>
<li><a href=""http://www.gnu.org/licenses/license-list.en.html#GNUGPL"" rel=""nofollow noreferrer"">GPLv3</a> - copyleft</li>
<li><a href=""http://www.gnu.org/licenses/license-list.en.html#apache2"" rel=""nofollow noreferrer"">Apache 2.0</a> - copyleft, but allows downstream relicensing to GPLv3</li>
</ol>
","1262"
"Am I forced to release my project under GPL, even though no GPL source is included?","127","","<p>Recently I ran into a GPL license related problem and I heard many people claiming many different things. I made this post to get this cleared up for myself.</p>

<p><strong>Situation</strong> There is a program which is licensed under GPL V3. This program has an API, which is also licensed under GPL V3. This program can load external jar files (plugins) which depend on the public GPL V3 API. So, the program actually ""starts"" my program (my plugin).</p>

<p>The <a href=""https://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL"">GPL FAQ</a> says to following.</p>

<blockquote>
  <p><strong>If a library is released under the GPL (not the LGPL), does that mean</strong>
  <strong>that any software which uses it has to be under the GPL or a</strong>
  <strong>GPL-compatible license? (#IfLibraryIsGPL)</strong></p>
  
  <p>Yes, because the software as it is actually run includes the library.</p>
</blockquote>

<p><strong>My question</strong>
So, if I include a GPL library into my project, I have to license my project under GPL as well. However, I am not including any code from the GPL V3 API. I am calling code from the API, but I have not copied any code of the API into my own project. Neither is any code shaded into the jar. Do I have to license my project under GPL as well? Or may I choose my own license?</p>
","<p>This is a difficult, and often-asked, question. IANAL.</p>

<p>Essentially it comes down to how closely linked your code is to this API. If it is clear that they are two completely separate programs, then you're ok. If your program makes calls back and forth and shares ""data structures"", then they could be considered the same program.</p>

<p>I wrote <a href=""https://opensource.stackexchange.com/questions/2937/shipping-gpld-binaries-in-commercial-product/2939#2939"">this answer</a> and <a href=""https://opensource.stackexchange.com/questions/2799/bundling-gpl-script-with-closed-source-script/2800#2800"">this answer</a> recently which both touch on this topic. I'm sure there are plenty others around here too.</p>

<p>One thing to consider is what GNU say on this topic themselves, particularly <a href=""http://www.gnu.org/licenses/gpl-faq.html#GPLAndPlugins"" rel=""nofollow noreferrer"">this FAQ answer</a>. In the end it's going to be down to interpretation - that of judges if it ever goes to court.</p>

<p>But what I would recommend in your instance is just getting in touch with the authors of Bukkit. Tell them what you want to do and how you're doing it. If their interpretation is that the programs are not connected, great - you've pretty much got a green light. But if they interpret it differently, then - legalities aside, ethics at the very least - would say that you would need to also GPL your code.</p>
","3955"
"An open file format initially created to tie users to a closed program. Would using it over other open formats help the open source community more?","127","","<p>Take the docx vs odt format for example. They are both open source and assumably have no clear advantage over each other, but docx was created to compete with odt, which had been existed many years before, to help Microsoft take control the market. Though technically the docx is open source, Microsoft confuses the users by not supporting completely odt format in MS Office, as well as making other open suits unable to read docx properly with their patent thicket.</p>

<p>But that's the problem of the MS Office, not the docx format itself. From another viewpoint, the docx format is already widely used, backed by the wealthy creator and <a href=""https://ask.libreoffice.org/en/question/3943/why-does-writer-offer-two-options-for-saving-in-docx-format/"" rel=""nofollow noreferrer"">will be fully support by LibreOffice in the future</a>, it seems obvious to me that it would gain more benefit for everyone of we focus our energy into docx. I feel like people who refuse to use docx are just hating Microsoft or not being aware of the situation (usually not knowing that docx is open source).</p>

<p><strong>Q:</strong> Is using docx will actually helping the community in long term, even with the cost of advertising MS Office for free as well? What happens if LibreOffice cannot support the format completely?</p>
","<p>(1) I would also like to know what ""helping the community"" means. With Galtungs definition of peace: ""mutual and equal benefit"" - Is ""helping"" == Will it benefit everyone in the community equally?</p>

<p>(2) Here is an input of mine: <a href=""http://hintjens.com/blog:68"" rel=""nofollow noreferrer"">http://hintjens.com/blog:68</a> Specifically, I would like to know which license the docx specification is under.</p>

<p>Source: <a href=""https://msdn.microsoft.com/en-us/library/dd773189(v=office.12).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/dd773189(v=office.12).aspx</a><br>
It seems that I cannot remix this specification (Please prove this wrong as it is an essential part of the following argumentation.).<br>
With this, I apply what I understood from the blog post:
Once docx pushes out odt, Microsoft can create a new standard which is a derivative of docx, keep others from implementing that and use that to take over more market share.</p>

<p>To answer 1) I can not deduce that a non-peaceful future is impossible so this leaves me at no clear answer: Microsoft can opt for mutual and equal benefit but they can also take something because they just can.</p>

<p>However, I hope that I gave you some inspiration.</p>
","6158"
"Could you apply a CC-BY license to a piece of land?","127","","<p>Suppose you are a land owner. You own a large piece of land containing lots of amazing fossils and other important pieces of history. To share this with the world you decide you want to allow ANYONE to come and discover the history on your property.</p>

<p><strong>My question:</strong></p>

<h3>EDIT</h3>

<p>Could you apply an open source license such as CC-BY to all of the artifacts they find in the property.</p>
","<p>You can't fork land, you can't derive it or even copy it.</p>

<p>The answer is no, you can only normally license something that is your own creation, and land belongs to that of mother nature.</p>
","746"
"Do anything with this free beer except generate revenue, for that you'll need to purchase an additional beer license?","127","","<h2>Background</h2>

<p>I'm working on a talk, complete with an accompanying resource pack and website.</p>

<p>I've never released anything I believe to be of some actual significant monetary value to anyone else before so I'm a little bit stumped.</p>

<p>Here's how I want to license all / any of the content.</p>

<blockquote>
  <p>Treat this content as if it's an unlimited, never-ending supply of free beer delivered as often as you like in a bottle with a label on. Provided all the ""free beer"" remains free you can do what you like with, drink it, give it to a friend, remix it, relabel it, share it with your friends. The only requirement is that you say where the ""free beer"" came from.</p>
  
  <p>If you however you wish to distribute the beer for money, as is or with modifications or as part of a larger pack of other similarly licensed free beers, via any distribution network that generates you revenue, you are required to purchase an additional license from the original provider of the beer.</p>
</blockquote>

<h2>Question</h2>

<p>Which creative commons license can I use?</p>
","<p>Let's take a look:</p>

<p>The nature of what you would like to license sounds like a creative one: It looks like you've got a talk, resource packages (which look like it is writing) and you've got a website. Already, we can narrow down to Creative Commons licenses.</p>

<blockquote>
  <p>Provided all the ""free beer"" remains exactly in its current form you can do what you like with, drink it, give it to a friend, share it with your friends.</p>
</blockquote>

<p>Alright, if you would like people to be able to share their work, but not make anything out of it, then you need to remove the ""derivatives"" clause. In order to make sure that other people don't take the ""derivatives"" from your friends, and start selling them, you're going to need a ShareAlike clause, to make sure that any changes will have to follow the same rules as what you originally gave to others. </p>

<p>Therefore, your license of choice should be the <a href=""https://creativecommons.org/licenses/by-nc-sa/4.0/"" rel=""nofollow"">Creative Commons Attribution-NonCommercial-ShareAlike</a>. This one should do what you would like it to.</p>

<hr>

<p>As for your second license, the site is not really in a position to help you. We don't deal with proprietary licensing, and proprietary licensing doesn't fall within the scope of the site. You'd probably be better to just slap it ""All Rights Reserved"" and then let people contact you: thus negotiating things.</p>
","1569"
"How to handle a pattern of GitHub volunteers wanting to work on an issue then disappearing","127","","<p>Since I registered my project on <a href=""http://up-for-grabs.net"" rel=""nofollow noreferrer"">Up For Grabs</a>, I get a lot of novice volunteers, which is great as I like both the ideas of 1) improving the app 2) introducing novices to open source collaboration.</p>

<p>But I have a management+social+technical problem, illustrated by this example today:</p>

<p><a href=""https://i.stack.imgur.com/MgNpR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/MgNpR.png"" alt=""Enter image description here""></a></p>

<p>As you can see, one after the other, 3 volunteers have taken the issue under their responsibility then become silent, with a month's interval between each.</p>

<ul>
<li>They are volunteer novices, so the problem is not them. I fully expect that they might give up, and hold no grudge against them.</li>
<li>On the technical side, GitHub is not helping, as I can not assign an issue to someone who is not a member of the project. And I don't think making them a GitHub project member is a good idea at this step (or is it?). I created the ""assigned"" label to work around this problem, but it is not optimal as it does not say to whom the issue is assigned. I want to continue to use GitHub for issue tracking, though, as it has become a de facto standard.</li>
<li>I hesitate between spending more time spoonfeeding newcomers, or spending less time so that I dedicate my time to other aspects of the project.</li>
<li>Before we had a policy of ""First pull request wins"", that lead to frustration as we had some real cases of novices posting nearly the same pull request at the same time for something non-trivial that they that obviously had dedicated a lot of time to. Not a pleasant situation, and a very traumatic first experience for some of them, which is something I really want to avoid.</li>
</ul>

<p>How can I improve my handling of the situation? Be it via behavior, project guidelines, technical solutions, or anything else.</p>
","<blockquote>
  <p>On the technical side, Github is not helping, as I can not assign an issue to someone who is not a member of the project. And I don't think making them a Github project member is a good idea at this step (or is it?). I created the ""assigned"" label to work around this problem, but it is not optimal as it does not say to whom the issue is assigned. I want to continue to use Github for issue tracking, though, as it has become a de facto standard.</p>
</blockquote>

<p>While agreeing completely with Philippe's answer, I will try to answer to the technical sub-question here: indeed GitHub does not make it easy to assign issues to new contributors but there are workarounds.</p>

<p>If your project is part of an organization (and only in this case), you may create a team in your organization (call it ""External"" or ""New contributors"" for instance) and give it ""Read access"" to your repository (see <a href=""https://www.theozimmermann.net/images/teams-github.png"" rel=""noreferrer"">this screenshot</a> of the repository settings). When your repository is already public, giving read access basically amounts to giving no privileges, but it will allow you assigning issues to people in the team (they have first to accept the invitation though).</p>

<p>If you use this to assign issues to newcomers, you should have a clear rule in your contributing guidelines that not communicating for a week (or any other predefined period) amounts to losing the issue.</p>

<hr>

<p>The rest of this answer is drifting away from the original question but it might still be of interest to you: you can use ""Write access"" as the next level of privileges for people who have already contributed usefully a few times. If, at the same time, you protect your branches <em>and</em> activate the ""Review requested"" feature <em>and</em> restrict merging to a subset of contributors (possibly only administrators), then ""Write access"" will mean privilege to label / milestone / close / reopen / assign issues (and edit / delete comments), to mark a pull request as approved, but not to commit anything directly to a branch nor to merge pull requests. Then the next level of privilege can be permission to merge approved pull requests (leaving pushing on branches directly or merging unapproved pull requests to repo admins only).</p>
","6184"
"OSI approved License similar to CC BY-SA 4.0","127","","<p>What's the most recommended OSI approved license (<a href=""https://opensource.org/licenses/alphabetical"" rel=""nofollow noreferrer"">here's</a> the list) closest to our current license is <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow noreferrer"">Creative Commonns Attribution-ShareAlike 4.0 International</a>? </p>

<p>Also, why aren't the Creative Commons Licenses OSI approved? OSI itself is licensed by  Creative Commons Attribution 4.0 International License.</p>
","<p>The Creative Commons licenses aren't approved simply because they weren't designed to operate on code.<sup>1</sup> Software has different components, especially source code and compiled code, which the Creative Commons licenses weren't exactly designed for (CC licenses are primarily designed for media).</p>

<p>You're probably wondering why the content of the OSI site is under CC. Simply put, it's the most appropriate license to place - a licensed designed for text. Yeah, Apache and others <em>may</em> work, but the best is CC, and it's used there. Just because the OSI maintains a list of <em>software</em> licenses doesn't mean that they must use one on their site.</p>

<p>The closest license to CC BY-SA is probably the GPL or LGPL.</p>

<p><sup>1. An application was made for CC0 to be declared open source compliant, however, CC eventually withdrew their application due to the immense debate with certain issues of the license</sup></p>
","5022"
"Are CDDL and MPL compatible with each other?","126","","<p>Sun's CDDL is based on Mozilla's MPL, and is <a href=""https://opensource.stackexchange.com/questions/2094/are-cddl-and-gpl-really-incompatible"">expectedly incompatible with GPL</a>.</p>

<p>What about the MPL itself?  Is the CDDL compatible with the MPL?</p>
","<p>For new projects, you should avoid the MPL as it has issues with the European law system. For this reason, the CDDL can be seen as the sucsessor of the MPL.</p>

<p>Given that both licenses disallow to change the license but limit their scopt to files, you are still allowed to combine files under different licenses to make them together compile a single work.</p>
","2107"
"Can a novel be open source, although it does not have a source?","126","","<p>If I want something I have written release as open source, for instance a novel, is that possible? A novel does not have a source, the work itself is all that is needed to recreate the work. In cases of software I need the source code to create a changed version of the software, but in case of a novel all I need is the novel itself? So does the written text works as it's own source? Or are written text impossible to open source?</p>
","<p>Novels, unlike software, don't have the large transformation between source code and binary that is usually the case with software. You can study and ""tinker"" with novels, but you cannot do the same (without great difficulty) with software without source code. Source code is important for software since it is a prerequisite for modification and sharing derivations. Therefore terms like ""source code"" are mostly irrelevant for novels, or things like visual art and documentation.</p>

<p>It is for this reason that, although you can apply software licenses to them, there are much better options. This is a big reason why the Creative Commons licenses were created; they, unlike software licenses, contain no mention of ""source code"" and are designed for creative works in general. GFDL may also be a suitable free license for such works.</p>

<p>When referring to such licenses, it may be less appropriate to refer to them as ""free software"" or ""open source"". Instead, people usually refer to these as ""<a href=""https://en.wikipedia.org/wiki/Free_culture_movement"" rel=""noreferrer"">free culture</a>"". Even though there is no source code, the goals and ethoses have large overlaps, and focus on user freedoms such as <strong>the freedom to use for any purpose</strong>, <strong>the freedom to redistribute</strong>, and <strong>the freedom to share your modifications</strong>. If you compare this to <a href=""http://www.gnu.org/philosophy/free-sw.en.html"" rel=""noreferrer"">FSF's definition of free software</a>, this is almost the same with the exception of freedom 1 which is inapplicable. Those licenses that do not grant these freedoms are ""not free culture licenses"", or just ""non-free"" for short. For example, <a href=""https://creativecommons.org/freeworks"" rel=""noreferrer"">CC-BY-NC is ""not approved for free cultural works""</a> because it restricts commercial use.</p>
","428"
"Is it possible to link GPLv2 libraries for Android project","126","","<p>Apache License, Version 2.0 is not compatible with GPL version 2, according to <a href=""http://www.gnu.org/licenses/license-list.en.html#apache2."" rel=""nofollow"">GNU</a> and <a href=""http://www.apache.org/licenses/GPL-compatibility.html"" rel=""nofollow"">Apache</a> websites. </p>

<p>I worry is it possible to make Android projects under GPLv2 license, 
because, Android SDK, support libraries and most of android libraries are under Apache v2.0.</p>

<p>I have found a lot of popular GPLv2 Android projects that uses at least support library, do they violate GPL v2 license?</p>

<p>Is there any way, how to link GPL v2 library to Android Project?</p>
","<p>Firstly, IANAL/IANYL.</p>

<p>Secondly, the licence of the Android SDK isn't material, as generally speaking software created with the use of other software is not seen as a derivative work of that other software, and so the licence obligations don't transfer.</p>

<p>Thirdly, when you make a derivative of a work covered by GPLv2, s2 requires that</p>

<blockquote>
  <p>when you distribute [...] a work based on the Program, the
  distribution of the whole must be on the terms of this License</p>
</blockquote>

<p>So if you use a GPLv2 library (and you are happy that linking creates a derivative work, which is not a settled issue), you must release your binary under GPLv2.  The importance of compatible licences is that <a href=""http://www.gnu.org/licenses/gpl-faq.html#WhatDoesCompatMean"" rel=""nofollow"">you can combine code released under the other license with code released under the GNU GPL in one larger program</a>.  Since, as you say, Apache v2 is not compatible with GPLv2, you could not incorporate Apache-v2-licensed code into your GPLv2 binary.</p>

<p>But you can release it to run on a system which uses Apache v2 system libraries, because of the <a href=""http://www.gnu.org/licenses/gpl-faq.html#SystemLibraryException"" rel=""nofollow"">system library exception</a>, which says that</p>

<blockquote>
  <p>If the GPL-incompatible libraries you want to use meet the criteria
  for a system library, then you don't have to do anything special to
  use them; the requirement to distribute source code for the whole
  program does not include those libraries, even if you distribute a
  linked executable containing them.</p>
</blockquote>

<p>This is likely how other GPLv2-covered binaries are released for Android, which as you say is quite common.</p>
","2756"
"Source code distribution without commercial use","126","","<p>I was wondering if there was a software license that has the same requirements as the Creative Commons BY-NC-SA 4.0 since they do not recommend its use for software.
I looked on choosealicense.com but it seems no license fit these requirements :<a href=""https://i.stack.imgur.com/lGJCS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lGJCS.png"" alt=""https://tldrlegal.com/license/creative-commons-attribution-noncommercial-sharealike-4.0-international-(cc-by-nc-sa-4.0)""></a></p>

<p>I know some people do not consider this as open-source, but I personally consider that open-source work should not be use to generate profit.</p>

<p>EDIT : I was almost sure I'd have these reactions (by lookings at other same-genre-topics), but please, I'd like us to talk about <strong><em>licenses</em></strong>, not discuss forever about your personal opinions of what is open-source and what it should be used for. This, for me, is open-source, if you don't consider this as open-source just call it ""open-source-for-non-commercial-use"" and that's it.</p>
","<p>You can try SNCL.</p>

<pre>CAN: Distribute, modify
CANNOT: Commercial use, hold liable, use trademark
MUST: Include copyright, include notice, include license and give credit. </pre>

<p>Source: <a href=""https://tldrlegal.com/license/simple-non-code-license-(sncl)"" rel=""nofollow"">Simple non code license (SNCL)</a></p>
","2276"
"Is it appropriate for me to have multiple project maintainers in this project?","125","","<p>I'm currently the sole maintainer of an API that a friend and I have written. It is currently written in Java, and is designed to make a lot of the low level interfaces high-level, to help ease the learning process of beginners learning Java. It's sole application is in my school, where other students who have never programmed before use it, to use in basic projects. For example:</p>

<pre><code>import arctic.lights.dev.FileIO;

public class getLettersInFile 
{
    String[] fileLines = FileIO.getAllLinesInFile(""path/to/file.txt"");
}
</code></pre>

<p>It's well documented, but we're looking to seriously expand it, and make it available to other beginner developers and schools.</p>

<p>Currently, since it's not very active, and is only used within our school, updating and maintaining the project is easy, and not very troublesome. However, since we are expanding it, and making it available to other schools.</p>

<p>With the school year coming up, my friend and I are becoming increasingly nervous about expanding, and the lack of available time to successfully maintain the project. Currently, the project is not publicly available, but we're looking to hosting it and getting a license for it. If we do make it available, our main concern is creating a backlog of requests and issues among places. With courses that start in September, we're predicting that the biggest spike in activity is going to be at that time, especially if bugs are found. Pull requests likely won't be very popular - the end users of the API don't really know much about programming...</p>

<p>My friend and I have a couple questions:</p>

<ul>
<li>Should we be looking for an extra maintainer to alleviate a predicted backlog? As students, is it appropriate to be looking for an extra maintainer?</li>
<li>If we do end up looking for an extra maintainer, what should we be looking for in a potential maintainer? This maintainer won't likely come from our school (my friend and I are the most competent developers known), so we want to make sure that we find someone that won't try to ""take over"" the project, as it's also a learning experience for us.</li>
</ul>
","<p>First of all, you're worrying about an assumed problem. You two may run out of time, get a backlog of issues ... or not. So it might not even happen that you run into problems.</p>

<p>You also may simply do no maintaining at all. Nobody is forcing you or your friend. Or you could do as much as you can manage. Some people might complain if their issue isn't resolved, but in no way you can be forced to act upon it. Some open source is released without giving users a feedback-channel at all (that was more common in the past, now with internet feedback is more easy to achieve and more accepted). A possible user for such unmaintained software can use the software as it is, (s)he can leave it be if the issues are too big for you or (s)he could change the software according to own needs (the last option is possible because the software is open-source, a great thing).</p>

<p>For your software in question you two could decide to always adapt the software for the needs of your own school, but ignore external requests. Again some external user has the above mentioned options.</p>

<p>Or you two could do as much maintaining, as you can and want. Nobody can force you for more. In this case it may be helpful to communicate that you can only afford so much time for maintaining. Make a note on the website and pick issues you want to work on and issues you not want to work on and communicate that.</p>

<p>In my experience many projects don't get much attention, especially at first. It may depend on the channels though, in which it is advertised. Simply putting it on github doesn't create much attention, so you get not much users (and not too much maintenance work). In your case teachers in computer science might tell teachers of other schools about the project and create attention this way. Maybe you want to control growth of the project and involve at first only a few other schools, so that the maintenance effort is manageable. After that involve even more schools and so on.</p>
","1768"
"Is there any difference between the GPL and AGPL for code executed in the browser?","125","","<p>My research into the topic suggests that the differences between the GPL and AGPL licenses only matter for code that runs on the server.  When executing JavaScript in the browser, ""distribution"" occurs, in both cases, when the page is loaded, and as such there is no difference between the AGPL and GPL. Is this an accurate understanding?</p>

<p>Specifically: When writing code to execute in the browser, if I use an AGPL-licensed library, do I have additional requirements or limitations over a GPL-licensed library?</p>
","<p>No, the licenses would apply identically, as in both cases the program is being conveyed to the end user. The AGPL's additional clause only applies when the user <em>interacts with</em> but does not <em>receive</em> the program.</p>

<p>I would note that both the GPL and AGPL define ""source code"" as ""the preferred form of the work for making modifications to it"". This means that if you distribute compressed/minified Javascript code that it does not count as the source code, and you must make available the original unminified source code.</p>
","4305"
"Does the Apache 2 License cover non-code?","124","","<p>I am open-sourcing an OpenGL project out of a desire to share the code. However, I would like to deter anyone from compiling my project as is and publishing it with the same icon, images, and models. My application is for-profit, but I doubt I would lose significant sales to people going through the trouble of compiling it for their own use. But someone could republish my application as is as a free version that competes with my paid version, and that potentially could significantly affect sales.</p>

<p>I put the Apache 2 license in the project, and the read-me states that it covers code files only.</p>

<p>But there are two things I'm unclear on. </p>

<ol>
<li><p>Does placing the text of the license in a file in the root of my project somehow imply that it applies to all files in the project that are publicly visible?</p></li>
<li><p>Can the Apache 2 License apply to image files? It mentions</p></li>
</ol>

<blockquote>
  <p>""Source"" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p>
</blockquote>

<p>So there is no explicit mention of images. I know I could swap out all the image files for something else, but then it would not be as nice of an example for others to learn from, and I really don't want to take the time to generate alternate artwork. </p>

<p>I know I can't entirely stop cloners, but I'd at least like to be able to ask storefronts like Google Play to take down apps that are identical to mine.</p>
","<p>Unless you make clear that it doesn't, just having the Apache2 license in your project <em>implies</em> that it goes for everything in your project, including assets, documentation, etc., but doesn't make it explicit, and it's unclear what a court of law would say about it if challenged. Implying things and legal documents don't tend to be a good combination.</p>

<p>That can lead to confusion, and cases where people will ask you for clarification at best* and people who won't use your work because they are not sure what the license refers to exactly, or people who will use your work where it wasn't your intention for them to use it under that license at worst.</p>

<p>The Apache2 license <em>can</em> refer to all sorts of things that aren't code. For example, in the case of the Spray.io project, everything including documentation is Apache2. There is no inherent problem with that. Please do realize that the preferred form for making modifications to many images is the file format you use to create the image, like the photoshop, inkscape, gimp or whathaveyou file, so if you want to have them under the Apache2 license, this is what you should have.</p>

<p>But this is by no means a requirement. You are free to have your assets and other non-code things under one license, and your code under another without any problems. Whatever you choose, I advice you to be very clear as to what is licensed as what. Generally, it's a good idea to state the copyright status of everything in some readme file. There you can say, for example, that everything is copyright you, licensed under the apache2 license (with a link to the apache2 license in your project). Or that everything is copyright you, all images and documentation under some license x (for example CC BY-SA if you like that, or something different entirely), and everything else under the Apache2.</p>

<p>With these things, it's always best to be as clear as possible to your re-users, so that they don't have to bug you with questions later. It never hurts to be explicit.</p>

<p>Be aware that Copyright is not the only intellectual property that can help you protect your product. You can also have a trademark (registered or unregistered) on your projects name and symbols representing your project. This is, for example, the route Firefox has taken (and the reason it's called IceWeasel in some Linux distributions). Trademarks are completely separate from copyright.</p>

<p>*This rarely ever happens. People will usually either assume one way or the other, or walk away confused.</p>
","2068"
"Can a GPLv3 app be uploaded to the Windows Store?","123","","<p>Let's consider a GNU-GPLv3 desktop application.</p>

<p>It is not dual-licensable at all, for instance because a lot of code has been contributed as GNU-GPLv3 by people who can not be found anymore, so changing the license is not an option.</p>

<p><strong>QUESTION</strong>: Can this app be uploaded to the Windows Store?</p>

<p><em>(<a href=""https://anki.tenderapp.com/discussions/ankidesktop/19409-publish-anki-on-windows-store"" rel=""nofollow"">real-world case</a>)</em></p>
","<p><strong>Yes.</strong></p>

<p>From <a href=""http://www.jbkempf.com/blog/post/2012/Windows-Store-and-the-GPL"" rel=""nofollow"">this article</a> linked by Philipp, Microsoft's store allows app developers to specify any terms they desire for their application, and makes specific allowances for OSI-approved licenses.</p>

<p>The GPL's disclaimer of warranty/liability protects auxiliary distributors. </p>

<blockquote>
  <p>THE COPYRIGHT HOLDERS <strong>AND/OR OTHER PARTIES</strong> PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND</p>
</blockquote>

<p>However, some other free software licenses do not, so they may not comply with the requirement that you disclaim Microsoft from warranty in addition to yourself.</p>
","4462"
"Can I use data licensed under Creative Commons for closed source propriety software?","123","","<p>I am interested in using data distributed under the Creative Commons Attribution-ShareAlike 4.0 (CC-By-SA) license. A subset of it can be extracted, which will fall under a Creative Commons Attribution 4.0 license (CC-By) instead. </p>

<p>I will be using this data for commercial, closed-source software.  Only data will be used, and there is no software that will be depended on by my software. </p>

<p>Given that I will not be modifying or distributing the data (consumers of the software will not be able to view the data), but will only use it to automatically perform data analysis and modify another dataset that I own, what conditions would be applicable to my usage of it? </p>

<p>Edit: to clarify, the use of the data would result in my software being different than if it didn't use the data</p>
","<p>Indeed, as was said in the comments, your software will ""contain the data in a hidden way"" or be better because the data was used to train it. Thus, your software will be a derivative of the data and if this data is licensed under CC-BY-SA the share-alike clause applies, whereas if you use the subset which is licensed under CC-BY, you only have an attribution requirement when making a derivative work. </p>
","5342"
"Linux Kernel v0.01 source code licensing","123","","<p>The source for the Linux kernel v0.01 can easily be found online, however it does not seem to contain a license or any redistribution rules. Is it, therefore, safe to assume that this code is in the public domain? Or have I missed something, and in fact it is licensed under some kind of license?</p>
","<p>As <a href=""https://opensource.stackexchange.com/users/2768/mark-plotnick"">Mark Plotnick</a> notes, version 0.01 of Linux was released under its own, fairly liberal <a href=""https://opensource.stackexchange.com/q/1445/175"">crayon license</a>. The only problem with it is that it prohibits any distribution fee, which would make it GPL-incompatible. Here's the <a href=""http://www.kernel.org/pub/linux/kernel/Historic/old-versions/RELNOTES-0.01"" rel=""nofollow noreferrer"">full text</a>:</p>

<pre><code>This kernel is (C) 1991 Linus Torvalds, but all or part of it may be
redistributed provided you do the following:

- Full source must be available (and free), if not with the
  distribution then at least on asking for it.

- Copyright notices must be intact. (In fact, if you distribute
  only parts of it you may have to add copyrights, as there aren't
  (C)'s in all files.) Small partial excerpts may be copied
  without bothering with copyrights.

- You may not distibute this for a fee, not even ""handling""
  costs.
</code></pre>

<p>Later, in version 0.12, he chose to use GPLv2 instead. You can read a good <a href=""https://en.wikipedia.org/wiki/History_of_Linux#Linux_under_the_GNU_GPL"" rel=""nofollow noreferrer"">overview of this licensing history</a> on Wikipedia.</p>

<p>And just to clarify:</p>

<blockquote>
  <p>Is it, therefore, safe to assume that this code is in the public domain?</p>
</blockquote>

<p><strong>No.</strong> In the absence of any license, <a href=""https://opensource.stackexchange.com/q/1720/175"">the default is <em>all rights reserved.</em></a></p>
","2683"
"Who owns the copyright to the code which was paid for to write?","123","","<p>For example, the repository owner owns the app and publishes the partial source code and creates few tasks supported by some <a href=""https://www.bountysource.com/"" rel=""nofollow"">bounty</a> to write some new components (such as new functions, classes, etc.).</p>

<p><strong>What are the main factors deciding whether the owner of repository owns the code which was merged into the main repository</strong> (which was sent by its code author), so he can do with the new code whatever he wants (e.g. changing the licence or applying his own copyright)? Does it matter if the code is new or modified, or whether it was paid for to write, so the ownership is transferred with it? Or does it depend on the service being used, agreement or the licence of the code which was merged with?</p>

<p><strong>In other words, how does the copyright applies in this case?</strong></p>

<p>My current understanding is that it's owned by the original code owner/company, because the developer who completed the task could be treated as a subcontractor.</p>
","<p>This question touches a lot of different copyright issues; here's the basic overview (under US law) followed by how I think it applies: </p>

<p><strong>(1) The author owns the copyright.</strong> If it's a work made for hire, then the employer owns it. A work made for hire is (1) a work an employee prepares OR (2) certain special types of works as long as the parties agree, in a signed writing, that the work is a work for hire. Here's a good summary of the work for hire doctrine: <a href=""http://copyright.gov/circs/circ09.pdf"">http://copyright.gov/circs/circ09.pdf</a></p>

<p><strong>(2) The copyright code requires that all transfers be in writing and signed by the owner.</strong> Under US law, there has to be a signed written agreement in order to transfer copyright. So if the work for hire doctrine doesn't apply, the person who wrote the code owns the copyright. This is true even if you paid that person to write the code. No writing, no transfer. </p>

<p><strong>(3) There's some case law stating that a click-through agreement is enough to transfer ownership.</strong> At least one federal court of appeals (4th Circuit) has indicated that this requirement of a writing might be satisfied with a click through agreement. The case is <em>Metropolitan Regional Info Sys. v. American Home Realty Network</em>, 722 F.3d 591 (4th Cir. 2013). That might make it a little easier to comply with. </p>

<p><strong>(4) Derivative works.</strong> When a person creates a new work based on someone else's work, that's called a derivative work. The author of the original material is the only person who can authorize another to create a derivative work. But the copyright in the derivative work is separate - the author of a derivative work (not the author of the original) owns the copyright in the derivative work. Good information on that here: <a href=""http://www.finnegan.com/resources/articles/articlesdetail.aspx?news=9cbb473b-f87b-47eb-8d4b-0202ad56343a"">http://www.finnegan.com/resources/articles/articlesdetail.aspx?news=9cbb473b-f87b-47eb-8d4b-0202ad56343a</a></p>

<p>So getting to the scenario you laid out: The contributor is probably creating a derivative work by taking the original code and adding new material. Assuming there's no written agreement to the contrary, the contributor owns the copyright in the derivative work. Doesn't matter if money has changed hands, doesn't matter that the original author owns (and continues to own) the rights in the original work - the contributor owns the rights in the derivative work they created unless there's a written agreement to the contrary. </p>

<p>If you want to change that result, the <em>Metropolitan Regional</em> case gives you something; if you have a click-through agreement stating that the contributor is transferring ownership, that might be enough to put the copyright back in the hands of the original author.  </p>
","2731"
"Can a license on a open source product expire?","122","","<p><strong>Background:</strong></p>

<p>While I know that copyrights on open source products expire. I have never come across anything regarding licenses, this lead me to ask this question:</p>

<p><strong>My Question:</strong></p>

<p>Can licenses expire?</p>

<p>If yes, under what conditions? Is there a time limit?
If no, why do copyrights expire but not licenses?</p>
","<p>Licenses exist to specify rights that the copyright-holder gives to license-holders; they only have meaning within the context of copyright legislation. So when copyright expires, the limitations linked to copyright expire as well, and the need for a license disappears. You could view this as meaning that a license expires when all the copyrights on the work it licenses expire themselves.</p>

<p>Once a work is in the public domain you don't need a license; you can do anything you like with it.</p>

<p>It is possible to specify termination clauses in licenses, but that's not quite the same as expiration. You could write a license with an end date (but that wouldn't qualify as a free / open source license, unless upon termination it reverted to another free / open source license). The <a href=""http://www.gnu.org/licenses/gpl.html"">GPL v3</a> includes a termination clause (section 8), but it only terminates the license for people who violate the license terms (so it's not expiration).</p>
","542"
"Can Mozilla Public License be used as a contributor license agreement?","122","","<p><a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow"">MPL</a> reads (emphasis mine):</p>

<blockquote>
  <p><strong>1.7. “Larger Work”</strong></p>
  
  <p>means a work that <em>combines Covered Software with other material, in a separate file or files</em>, that is not Covered Software.</p>
  
  <p><strong>3.3. Distribution of a Larger Work</strong></p>
  
  <p><em>You may create and distribute a Larger Work under terms of Your choice</em>, provided that You also comply with the requirements of this License for the Covered Software. &lt;...></p>
</blockquote>

<p>Does this mean that if</p>

<ol>
<li>my project contains more then 1 file,</li>
<li>I accept contributions only to 1 file at a time,</li>
<li>I require licensing contributions under MPL</li>
</ol>

<p>then I can freely relicense my project with all contributions as my project would always be a larger work?</p>

<p>Even more, if I just add an icon to whatever project, it would cover both points 1 &amp; 3 as it would be more then 1 file &amp; hardly anyone would contribute to an icon.</p>
","<p>It's easy to misunderstand the intent of Section 3.3. <a href=""https://opensource.stackexchange.com/questions/4056/what-is-required-of-a-party-who-receives-a-larger-work-under-the-mozilla-public"">I did, too.</a></p>

<p>The answer is <em>not exactly</em>. <strong>The work as a whole, and its executables</strong>, may be under the terms of your choice. The MPL-covered source files whose object code is being distributed must always remain freely available under the MPL, meaning their recipients would be free to fork the project back into an MPL-licensed version. Bear in mind Section 3.1: ""You may not attempt to alter or restrict the recipients’ rights in the Source Code Form."" Each Contributor is not only a Contributor, but a licensee (""You"") to the Contributions of other Contributors, so this section will apply to you as the theoretical project lead.</p>
","4312"
"Can software be restricted to open source operating systems?","122","","<p>As can be seen from answers to <a href=""https://opensource.stackexchange.com/questions/738/can-i-open-source-a-software-for-a-particular-operating-system"">this question</a>, a piece of open source software cannot be licensed in such a way that it is only usable on one specified operating system.</p>

<p>However, can it be licensed in such a way that it can only be used on open source operating systems? Or on operating systems with a licence compatible with the licence of the software in question?</p>
","<p><strong>You cannot do this with an open source license</strong>. The reason is the same as in the linked question: you cannot discriminate usage, including platform.</p>

<p>Obviously, you can construct a license that specifically requires running on open source operating systems, but this license won't be open source.</p>

<p>Without using the license, it is possible to construct your software in a manner that makes it impractical to run on closed source operating systems, but without a non-free license, there is nothing stopping a determined programmer from adapting it to run on closed source operating systems.</p>

<p>Historically, there was a lot of software that was de facto tied to open source operating systems, because the only desktop operating systems that almost fully implemented Unix/POSIX standards happened to be open source. This is largely not the case today, as standards compliance and embracement of open source by proprietary software has improved across the board, making it easier to write portable software. Chances are good that if your software is useful, someone will port it to closed operating systems anyway.</p>
","763"
"Can this NVIDIA licence be used for GPL open source product?","122","","<p>For my GPL open source software I use LGPL-based libraries. I recently found a very useful NVIDIA SDK which I would like to use for my software. NVIDIA is using its own license, and I have difficulty understanding if it is OK to use the license with my GPL project. </p>

<p>Could someone tell me if I can use the license for my GPL project? </p>

<p>The following is the copy of the license file which I found at the corresponding SDK folder:</p>

<blockquote>
  <p>Copyright 2011 NVIDIA Corporation</p>
  
  <p>BY DOWNLOADING THE SOFTWARE AND OTHER AVAILABLE MATERIALS, YOU
  (""DEVELOPER"") AGREE TO BE BOUND BY THE FOLLOWING TERMS AND CONDITIONS</p>
  
  <p>The materials available for download to Developers may include software
  in both sample source (""Source Code"") and object code (""Object Code"")
  versions, documentation (""Documentation""), and other materials
  (collectively, these materials referred to herein as ""Materials"").
  Except as expressly indicated herein, all terms and conditions of this
  Agreement apply to all of the Materials.</p>
  
  <p>Except as expressly set forth herein, NVIDIA owns all of the Materials
  and makes them available to Developer only under the terms and conditions
  set forth in this Agreement.</p>
  
  <p>License:  Subject to the terms of this Agreement, NVIDIA hereby grants to
  Developer a royalty-free, non-exclusive license to possess and to use the
  Materials.  The following terms apply to the specified type of Material:</p>
  
  <p>Source Code:  Developer shall have the right to modify and create
  derivative works with the Source Code.  Developer shall own any derivative
  works (""Derivatives"") it creates to the Source Code, provided that
  Developer uses the Materials in accordance with the terms of this
  Agreement.  Developer may distribute the Derivatives, provided that
  all NVIDIA copyright notices and trademarks are used properly and the
  Derivatives include the following statement: ""This software contains
  source code provided by NVIDIA Corporation.""</p>
  
  <p>Object Code:  Developer agrees not to disassemble, decompile or
  reverse engineer the Object Code versions of any of the Materials.
  Developer acknowledges that certain of the Materials provided in Object
  Code version may contain third party components that may be subject to
  restrictions, and expressly agrees not to attempt to modify or distribute
  such Materials without first receiving consent from NVIDIA.</p>
  
  <p>Government End Users: If you are acquiring the Software on behalf
  of any unit or agency of the United States Government, the following
  provisions apply. The Government agrees the Software and documentation
  were developed at private expense and are provided with RESTRICTED
  RIGHTS. Use, duplication, or disclosure by the Government is subject to
  restrictions as set  forth  in  DFARS 227.7202-1(a) and 227.7202-3(a)
  (1995), DFARS 252.227-7013(c)(1)(ii) (Oct 1988), FAR 12.212(a)(1995),
  FAR 52.227-19, (June 1987) or FAR 52.227-14(ALT III) (June 1987),as
  amended from time to time. In the event that this License, or any part
  thereof, is deemed inconsistent with the minimum rights identified in
  the Restricted Rights provisions, the minimum rights shall prevail.</p>
  
  <p>No Other License. No rights or licenses are granted by NVIDIA under this
  License, expressly or by implication, with respect to any proprietary
  information or patent, copyright, trade secret or other intellectual
  property right owned or controlled by NVIDIA, except as expressly provided
  in this License.</p>
  
  <p>Term:  This License is effective until terminated.  NVIDIA may terminate
  this Agreement (and with it, all of Developer's right to the Materials)
  immediately upon written notice (which may include email) to Developer,
  with or without cause.</p>
  
  <p>Support:  NVIDIA has no obligation to support or to continue providing
  or updating any of the Materials.</p>
  
  <p>No Warranty:  THE SOFTWARE AND ANY OTHER MATERIALS PROVIDED BY NVIDIA
  TO DEVELOPER HEREUNDER ARE PROVIDED ""AS IS.""  NVIDIA DISCLAIMS ALL
  WARRANTIES, EXPRESS, IMPLIED OR STATUTORY, INCLUDING, WITHOUT LIMITATION,
  THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
  PURPOSE AND NONINFRINGEMENT.</p>
  
  <p>LIMITATION OF LIABILITY:  NVIDIA SHALL NOT BE LIABLE TO DEVELOPER,
  DEVELOPER’S CUSTOMERS, OR ANY OTHER PERSON OR ENTITY CLAIMING THROUGH
  OR UNDER DEVELOPER FOR ANY LOSS OF PROFITS, INCOME, SAVINGS, OR ANY
  OTHER CONSEQUENTIAL, INCIDENTAL, SPECIAL, PUNITIVE, DIRECT OR INDIRECT
  DAMAGES (WHETHER IN AN ACTION IN CONTRACT, TORT OR BASED ON A WARRANTY),
  EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF THE ESSENTIAL
  PURPOSE OF ANY LIMITED REMEDY.  IN NO EVENT SHALL NVIDIA’S AGGREGATE
  LIABILITY TO DEVELOPER OR ANY OTHER PERSON OR ENTITY CLAIMING THROUGH
  OR UNDER DEVELOPER EXCEED THE AMOUNT OF MONEY ACTUALLY PAID BY DEVELOPER
  TO NVIDIA FOR THE SOFTWARE OR ANY OTHER MATERIALS.</p>
</blockquote>
","<p>No.</p>

<p>The GPL is 'viral' and under the FSF's current interpretation, simply statically linking code to GPL stuff means that it must have a GPL compliant licence. (That's a debatable position in itself, but the FSF are the best placed to comment on the implications)</p>

<p>The Nvidia licence is going to be nowhere near GPL compliant, as it's restricting you from decompiling the object code they provide. </p>

<p>IIRC you may also have issues with the trademarks clause, but would have to check that.</p>

<p>The licence stinks anyway- They can terminate without cause simply by sending you an email.</p>
","2773"
"Doom port on android. Does copy left apply?","122","","<p>I want to understand how the GPL license extends based on this practical example.</p>

<p>There is an android port for doom called D-Touch <a href=""http://beloko.com/?page=game_doom"" rel=""nofollow"">This link</a>
Doom itself is licensed under GPLv2. </p>

<p>Will the license extend to the port?</p>

<p>In more general terms if the GPLed software is left untouched and the additional code is only a 'wrapper' that calls the code. Will GPL extend to the 'wrapper'?</p>
","<p>If D-Touch is effectively a port as either a translation in another programming language or a modification of the original such that it can run on Android, then the original Doom license would apply whether it is GPL or anything else (in the sense that this is the original code or clearly a derivative work).</p>

<p>If D-Touch is a complete rewrite just using ideas of Doom, it may still be considered a derivative work. This is for a court to decide, but think about this: say you write a novel from scratch that is a sequel to Harry Potter. Or you write a comic book on the X-men. In both cases, say this is stuff that you wrote entirely yourself. Nevertheless it could still be considered as a derivative work (and therefore eventually infringing on HP or XM copyrights). And the respective author would quite likely be on your number. And then drawing a parallel with D-Touch, copyright may be infringed  even if the code is not actually ""copied"" (whatever the original license was, this is not GPL-specific).  This definitely would need the review of a lawyer as the parallel between a book and source code may not apply at all.... I am NOT a lawyer.</p>

<p>That said, I can read this note at the bottom of beloko.com:</p>

<blockquote>
  <p>All ported games from Beloko Games are based on the GPL License and fully complient with its regulations.</p>
</blockquote>

<p>So they claim to be ""complient"" meaning that source code is likely available. I cannot discuss whether it is indeed ""compliant"" but I can see source released here <a href=""https://github.com/emileb/OpenGames"" rel=""nofollow"">https://github.com/emileb/OpenGames</a> and <a href=""https://github.com/emileb/"" rel=""nofollow"">https://github.com/emileb/</a> 
And if this is not satisfying to you, you could contact the author to request the corresponding sources.</p>

<blockquote>
  <p>In more general terms if the GPLed software is left untouched and the additional code is only a 'wrapper' that calls the code. Will GPL extend to the 'wrapper'?</p>
</blockquote>

<p>It depends what is the wrapper and how it interacts with the GPL-licensed code. There are several QA on this topic already. The way things interact could create a ""combined"" or ""derivative"" work or be just plain side-by-side distribution.</p>

<p>In the specific case of Doom (likely in C/C++) and Android (likely called from Java code by a native layer of sorts such as NaCL or JNI or JNA) my take is that the GPL would extend to such a Java wrapper if this is really how these things work.</p>

<p>/IANAL /TINLA</p>
","2903"
"Generated content protected as well?","122","","<p>I created an icon for an Android app with the tool <a href=""https://romannurik.github.io/AndroidAssetStudio/"" rel=""nofollow noreferrer"">Android Asset Studio</a>.
The <a href=""https://github.com/romannurik/AndroidAssetStudio"" rel=""nofollow noreferrer"">code of this tool</a> is licensed under Apache 2.0. But I cannot find any copyright info on generated icons. </p>

<p>Are they automatically also licensed by Apache 2.0 (not what I would assume) or am I free to use them however I like (e.g. under the GPL-license)?</p>

<p>To be precise: I <strong>did not include any of their code</strong> into my project, I only <strong>used the tool</strong> to generate an icon, which should be part of my project.</p>
","<p>The GPL FAQ has an <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput"" rel=""nofollow noreferrer"">item describing this case</a> (which has applicability to copyright law in general, not just the GPL):</p>

<blockquote>
  <p><strong>Is there some way that I can GPL the output people get from use of my program? For example, if my program is used to develop hardware designs, can I require that these designs must be free?</strong></p>
  
  <p>In general this is legally impossible; copyright law does not give you any say in the use of the output people make from their data using your program. If the user uses your program to enter or convert her own data, the copyright on the output belongs to her, not you. More generally, when a program translates its input into some other form, the copyright status of the output inherits that of the input it was generated from.</p>
  
  <p>So the only way you have a say in the use of the output is if substantial parts of the output are copied (more or less) from text in your program. [...]</p>
</blockquote>

<p>Since the icon is not composed of pre-existing material whose copyright is held by someone else, the copyright of the brand-new icon belongs to you, and you may license it however you choose.</p>

<p>Note also that even if some part of the icon was copyrighted by someone else and given to you under the Apache 2 license, the Apache 2 license is compatible with the GPLv3. In that case, you could license your part (and the compilation as a whole) under the GPLv3.</p>
","6089"
"GNU GPL Licensing","122","","<p>We are planning to use an Open Source GNU GPL License software for distribution also with the hardware we sell. We will make several changes to GP, software to make it work with our device and are ok to make derived source code open source. However below situation do exist for us in order to complete the whole package. I will be grateful is someone can answer below question for us and suggest alternatives.</p>

<ol>
<li><p>We do have other Open source component that we would need to integrate with original GPL software in order to achieve our goal. Is it permissible under GPL</p></li>
<li><p>We do have few proprietary DLLs provided by our vendors that we need to integrate but we do not have source code for them. Will this still satisfy GNU GPL requirement?</p></li>
<li><p>We have a licensing module which derives the licensing logic for this application. This is a DLL but the source code is owned by us. Do this source code have to be made public?</p></li>
<li><p>We have plans to submit derived software along with our medical devices for FDA approvals? Is GPL ok with it?</p></li>
<li><p>We license our software as permanent as well trial version. Trial version expires after certain period. Can this cause any problem with GPL?</p></li>
<li><p>The license is also controlled by a hardware dongle which is again provided by outside vendor. Is this ok with GNU GPL?</p></li>
<li><p>Do we have to package source code with every media (CD, USB) we distribute? Will adding a statement for availability of source code on demand or from a public location acceptable for GNU GPL?</p></li>
<li>We plan to add a few module such as apps for android and iOS. This will not be linked to derived software but will only use data and images collected by derived software from end users. Do we have to make source code of those apps also under GNU GPL?</li>
</ol>
","<p>This is a lot of questions, and should perhaps be split into several different questions. But I'll answer what I can.</p>

<blockquote>
  <p>We do have other Open source component that we would need to integrate with original GPL software in order to achieve our goal. Is it permissible under GPL</p>
</blockquote>

<p>If the other licenses are <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow noreferrer"">GPL-compatible</a>, yes. You will have to offer them under the terms of the GPL as well; the compatibility list contains licenses that the FSF believes can be met while also meeting the terms of the GPL.</p>

<blockquote>
  <p>We do have few proprietary DLLs provided by our vendors that we need to integrate but we do not have source code for them. Will this still satisfy GNU GPL requirement?</p>
</blockquote>

<p>Not for the GPL, no; any derivative software, including the entire package that has your vendors' libraries, must be offered under the terms of the GPL.</p>

<p>If you are not stuck with the choice of license (that is, you're just deciding this yourself, and aren't forced into it via modification of a GPLed project), then you may wish to use the LGPL, which has an exception for things that are linked in.</p>

<blockquote>
  <p>We have a licensing module which derives the licensing logic for this application. This is a DLL but the source code is owned by us. Do this source code have to be made public?</p>
</blockquote>

<p>Under the GPL, yes. Under the LGPL, no.</p>

<blockquote>
  <p>We have plans to submit derived software along with our medical devices for FDA approvals? Is GPL ok with it?</p>
</blockquote>

<p>Sure, there's no restriction in the license about whether you can submit it to a government agency. If you are providing a modified version, the FDA has the right to ask for the source code.</p>

<blockquote>
  <p>We license our software as permanent as well trial version. Trial version expires after certain period. Can this cause any problem with GPL?</p>
</blockquote>

<p>The first of the four <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">""essential freedoms"" of free software</a> is the right to run the software however and whenever you wish.</p>

<p>The GPLv2 had a loophole that lead to <a href=""https://en.m.wikipedia.org/wiki/Tivoization"" rel=""nofollow noreferrer"">tivoization</a>, where the user could technically run modified versions of the software, but the hardware would refuse it. <a href=""https://www.gnu.org/licenses/gpl.html"" rel=""nofollow noreferrer"">The GPLv3</a> is designed to prevent this. </p>

<p>I'm not sure if section 2 prevents a license of the type you talk about; you should consult your legal counsel.</p>

<p>Anyways, users are allowed to modify the source code, so they could dig in and remove the code that requires a valid license.</p>

<blockquote>
  <p>The license is also controlled by a hardware dongle which is again provided by outside vendor. Is this ok with GNU GPL?</p>
</blockquote>

<p>Unsure, see previous point.</p>

<blockquote>
  <p>Do we have to package source code with every media (CD, USB) we distribute? Will adding a statement for availability of source code on demand or from a public location acceptable for GNU GPL?</p>
</blockquote>

<p>Section 6 covers the full range of options. In summary, providing it in a public location or in response to specific requests is fine.</p>

<blockquote>
  <p>We plan to add a few module such as apps for android and iOS. This will not be linked to derived software but will only use data and images collected by derived software from end users. Do we have to make source code of those apps also under GNU GPL?</p>
</blockquote>

<p>Files generated by the program are not considered part of it for licensing purposes (this would otherwise be a major issue in using gcc). Other programs that communicate with it via a network API also do not trigger the viral licensing clause.</p>
","4832"
"Required works to put existing GPLv3 source code on GitHub, with respect to modification dates","122","","<p>I was looking at the <a href=""http://www.gnu.org/licenses/gpl-3.0.txt"">GPLv3 License</a>.</p>

<p>It states that when I modify the Program and distribute it, I need to meet the condition of:</p>

<pre><code>a) The work must carry prominent notices stating that you modified
it, and giving a relevant date.
</code></pre>

<p>Now let's say I found a GPLv3 source code on the web and want to put it on the GitHub and start making modifications on it.</p>

<p>Question:</p>

<ul>
<li>What would be the required works to be done against this source code? Do I need to write down the cloned date? What about the subsequent changes I make to the repository? Do they also have to be written down somewhere on source code each time I make modification?</li>
</ul>
","<p><strong>Copyright notices</strong></p>

<p>The reply I received from <code>licensing@fsf.org</code> (the compliance lab) suggested a copyright notice in the modified file is sufficient.</p>

<p>An example of a copyright notice:</p>

<blockquote>
  <p>Copyright (C) 2011, 2012, 2014 Ernest Thornhill (themachine@sub.nyc)</p>
</blockquote>

<p>Something to note about the dates:</p>

<blockquote>
  <p>For software with several releases over multiple years, it's okay to use a range (“2008-2010”) instead of listing individual years (“2008, 2009, 2010”) if and only if every year in the range, inclusive, really is a “copyrightable” year that would be listed individually; and you make an explicit statement in your documentation about this usage.</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow"">https://www.gnu.org/licenses/gpl-howto.html</a></p>

<p><strong>Comments</strong></p>

<p>Something to consider is that  <a href=""https://www.gnu.org/licenses/gpl-faq.html#RequiredToClaimCopyright"" rel=""nofollow"">you are not required to claim a copyright on your changes.</a><br>
In this case it seems like you need some other prominent notice.  </p>

<p>The <a href=""https://www.softwarefreedom.org/resources/2014/SFLC-Guide_to_GPL_Compliance_2d_ed.html#gplv2"" rel=""nofollow"">Software Freedom Law Center</a> states for <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt"" rel=""nofollow"">GPLv2</a>:</p>

<blockquote>
  <p>Section 2(a) requires that all modified versions be so marked, with basic indication of the modifications made, the date of modification, and some identification of the modifier. Compliance is achieved by any markings in source code that contain this information in a reasonable form. Not all the information available from a source code version control system need be provided, nor is the requirement a substitute of the project-level ChangeLog or similar file. Appropriate compliance assists a programmer using or reviewing any particular source file to know from what version of a project or program that source file comes, and to trace the history of recent substantive modification.</p>
</blockquote>

<p>For GPLv3 that article states:</p>

<blockquote>
  <p>...with the additional requirement to provide notice of modification, date and some identification of modifier as under GPLv2 §2(a), above.</p>
</blockquote>

<p>Therefore, it seems like they consider it the same for GPLv2 and GPLv3<br>
(confirmed via <code>licensing@fsf.org</code>).</p>

<p>Based on that description, I imagine something like a simplified ChangeLog entry:</p>

<blockquote>
  <p>// 12-22-1999 Ernest Thornhill (set_date): switched to 4-digit years</p>
</blockquote>

<p>... directly below the warranty disclaimer.  </p>

<p>The authors, date and note <a href=""http://www.stack.nl/~dimitri/doxygen/manual/commands.html"" rel=""nofollow"">doxygen commands</a> for a function you just edited<br>
might also be considered prominent.</p>

<p><strong>ChangeLog</strong></p>

<p>While it might not be a requirement, a GNU coding standard is to keep a <a href=""https://www.gnu.org/prep/standards/html_node/Change-Logs.html"" rel=""nofollow"">ChangeLog</a>.<br>
This is for describing all the changes made to the source files.<br>
The <a href=""https://www.gnu.org/prep/standards/html_node/NEWS-File.html#NEWS-File"" rel=""nofollow"">NEWS</a> file contains a list of user-visible changes worth mentioning.</p>

<p>I've noticed that emacs contributors write the extended commit description<br>
like it's the body of a ChangeLog entry.<br>
Then they use a <a href=""https://github.com/emacs-mirror/emacs/blob/master/build-aux/gitlog-to-emacslog"" rel=""nofollow"">script</a> to convert the git log to a ChangeLog.</p>
","4579"
"Which license should I use when my project uses plugins under various licenses?","122","","<p>I am confused about choosing a license for my project. I have read some resources like <a href=""http://opensource.org/licenses"" rel=""nofollow"">Open Source Initiative</a> and <a href=""http://choosealicense.com/"" rel=""nofollow"">Choosealicense.com</a>, though.</p>

<p>My project is a mobile application for Android. Now, it's already on public repository. Details of technology (software or plug-in) I used on this project are:</p>

<ul>
<li>Mobile application and Front-end framework are under MIT License</li>
<li>Plugins under various licenses, MIT License, Apache 2.0 License, and GPL v3 License.</li>
</ul>

<p>I have been thinking that GPL v3 license will fit my project because, as far as I know, we can't put my project under another license if we used GPL v3 licensed plugins.</p>

<p>I doubt it very much. I just used the technologies above to support my project, I don't modify it. </p>

<p>What kind of license should I use?</p>
","<p>Check the <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow"">GPL Compatible Licenses List</a>.</p>

<p>As far as I know, if your project does not depend on GPL code to work, then you can use whatever license you choose. Note that plugins are not (or should not) be considered as dependencies of your project to work, as plugins add or modify functionality.</p>

<p>So if your core dependencies are already MIT, then go MIT and add a COPY file stating which plugins and what licenses each use only to inform others what code is covered under which license.</p>

<p><strong>UPDATE</strong>
After re-reading the question, it seems like said plugins are not plugins for the resulting project, but are needed by the project to work instead. In which case yes, you are bound to make your project GPL.</p>

<p>Here <a href=""https://www.gnu.org/licenses/gpl.html"" rel=""nofollow"">https://www.gnu.org/licenses/gpl.html</a> yoy will find various texts which might help you understand better how GPL works.</p>
","1866"
"Can my closed-source software load GPL v3 data?","121","","<p>The <a href=""http://gcide.gnu.org.ua/"">GCIDE</a> is a GPL v3'd English dictionary.</p>

<p>If I was to release it bundled with a closed-source application, would loading that data count as ""linked source code"", and therefore be a violation of the GPL? Lots of the GPL discussions I've found assume that the GPL library is code, not data, and I'm not sure if it makes a difference.</p>

<p>What about if I modified the GCIDE, release the changes, and then continue to use it in a closed-source program? Is <em>that</em> a violation?  </p>
","<p>You are asking for a legal opinion, for that you need to pay a lawyer, and I am not one.  However, as a long-term friend of RMS and many of the FSF folks, what you are proposing is exactly what they intend the GPL to prevent.  So, doing that is certainly a violation of the <em>intent</em> of the license.  If you do find a lawyer who is willing to argue that it <strong>is</strong> legal, I'm sure the FSF lawyer would like to hear the argument, so he can produce GPLv4 to deal with it. :-)</p>
","4101"
"GPL vs. obligatory warranty","121","","<p>There are many countries on the world, where distributing products means to accept an obligatory warranty well.</p>

<p>More clearly: if you buy a mainboard, and it is bad, the seller <em>must</em> re-take it (with payback) on certain (broadly formulated) circumstances. For example, they can't sell cheaper mainboard without warranty, it is forbidden by law.</p>

<p>But GPL (as I know, both of 2 and 3) closes out any warranty.</p>

<p>Does it mean, that GPL software can't be distributed in these countries?</p>
","<p>The GPL permits warranties:</p>

<blockquote>
  <ol start=""11"">
  <li>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
  OTHER PARTIES</li>
  </ol>
</blockquote>

<p>So: </p>

<ol>
<li>if the law requires a warranty, there's a warranty.</li>
<li>if someone states otherwise for whatever reason, there's a warranty.</li>
</ol>

<p>Also note:</p>

<blockquote>
  <p>You may charge a fee for the physical act of transferring a copy, and
  you may at your option offer warranty protection in exchange for a
  fee.</p>
</blockquote>

<p>And even:</p>

<blockquote>
  <p>c) If the modified program normally reads commands interactively when
  run, you must cause it, when started running for such interactive use
  in the most ordinary way, to print or display an announcement
  including an appropriate copyright notice and a notice that there is
  no warranty (or else, saying that you provide a warranty) and that
  users may redistribute the program under these conditions, and telling
  the user how to view a copy of this License. (Exception: if the
  Program itself is interactive but does not normally print such an
  announcement, your work based on the Program is not required to print
  an announcement.)</p>
</blockquote>
","1775"
"If a part of the client-side code is licensed under GPL, does the server-side code have to be under GPL as well?","121","","<p>Say a part of the JavaScript which is provided to the client's browser is under GPL. Does this mean that server-side code also has to be made public under GPL as well?</p>

<p>The GPL states:</p>

<blockquote>
  <p>""You must cause any work that you distribute or publish, that in whole
  or in part contains or is derived from the Program or any part
  thereof, to be licensed as a whole at no charge to all third parties
  under the terms of this License.""</p>
</blockquote>

<p>It seems to me that since the whole web app will not be complete without the client-side code, it can be considered to ""contain"" the client-side code, and thus the server-side code is also a part of the whole ""work"" defined here.</p>
","<p>Lawyers have told me than in most cases the GPL of a JavaScript library running in the browser does not impact the code running on the server side.... within reason: for instance if you use something like meteor where the code runs either on the server or the client, this may not apply. Or for instance if you modified the JS library to interface with your custom back-end, this may not apply.</p>
","3964"
"Can I change the license of a GPL derived work to be more restrictive regarding version upgrades?","120","","<p>Specifically, the GPLv2. The creator of a work can allow people to upgrade to a higher GPL version:</p>

<p>(emphasis mine)</p>

<blockquote>
  <p>This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, <strong>or (at your option)
  any later version.</strong></p>
</blockquote>

<p>If I modify a work with a license statement such as this, am I allowed to say that people who then further modify my distribution <strong>cannot</strong> upgrade it to a higher GPL version? Or do I have to allow them just as the original does?</p>
","<p>Yes, you can.</p>

<p>The authors of the software allow you to receive the software under the GPLv2, GPLv3, or any future higher version of the GPL at your choice.</p>

<p>If you choose to receive it under the GPLv2, you are only bound to the GPLv2, and are under no requirement to release it under any later version. </p>

<p>Paragraph 6 in the GPLv2 (the one that tells you you can't impose additional restrictions) only tells you you cannot impose additional restrictions on top of the license you receive, but the document that tells you you may receive it under the GPLv2 or later isn't part of the license itself.</p>
","2182"
"How to stop/mitigate damage from abuses of the Collective Code Construction Contract (C4)","120","","<p>What defenses does an Open Source project utilizing the Collective Code Construction Contract (C4) have against unknown developers who may have intentions to merge malicious (but not immediately recognizable as such) code?</p>

<p><a href=""http://rfc.zeromq.org/spec:16/"">http://rfc.zeromq.org/spec:16/</a></p>

<p>A general answer will suffice but to learn more about my specific reasons for asking this please read these dev logs:
<a href=""https://getmonero.org/2016/06/05/overview-and-logs-for-the-dev-meeting-held-on-2016-06-05.html"">https://getmonero.org/2016/06/05/overview-and-logs-for-the-dev-meeting-held-on-2016-06-05.html</a></p>
","<p>Based on what I read the safety is that the process happens in the dev branch not master. Essentially no harm is done as long as someone spots the problem within a reasonable time period:</p>

<p>for i = 1 to 180 days               # 6 months of 30 days each, this is a magic for loop that knows when a day passes
{
1. new PR gets eyeball review
2. PR is merged to dev branch
3. if merge == crap, new PR made to address crap, goto 1. elseif, goto 4
4. if i == 180, merge to master. elseif, goto 1
}</p>

<p><a href=""https://forum.getmonero.org/4/academic-and-technical/2556/c4-discussion"">https://forum.getmonero.org/4/academic-and-technical/2556/c4-discussion</a></p>

<p>The system allows ample time for review but is not perfect. Backdoors are always possible and commits from new contributors should always be looked at carefully even as they are assumed to be trustworthy IMHO.</p>

<p>The goal is to be seen as welcoming to new contributors.</p>
","4014"
"Three clause BSD License","119","","<p>If we are loading a closed source - dll dynamically in the source code which comes under three clause BSD license then is it mandatory to change license of my closed source dll to three clause BSD License? Also is it compulsory to publish this closed source dll code?</p>
","<p>No, you do not need to change the license of your dll and you do not need to publish any source code. In contrast to a strong copyleft, non-permissive license like the GPL the BSD licenses are instead non-copyleft and permissive.</p>

<p>Copyleft basically means that any modifications you make to a piece of copyleft-licensed software have to be released under the same conditions as the original software. If you make a modification to a program licensed under the GPL the modification also needs to be GPL. See <a href=""https://www.gnu.org/licenses/copyleft.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/copyleft.html</a>. This is not the case with the BSD license family.</p>

<p>Permissive is just what it sounds like. You're less restricted in what you are allowed to do with software under a what is considered a permissive open software license than what is allowed by a non-permissive license. You still have some obligations, such as attributing the authors, but a permissive license is generally easier to comply with than a non-permissive license. </p>
","4727"
"What are the best ways to get involved with open source projects?","119","","<p>I would like to know if someone could explain to me how to go about working on an open source project. I know that you can use git and other types of programs to commit code, but is there some sort of process in which to officially begin to add to a project.</p>

<p>Also, how do open source projects guard against crappy code commits or bugs</p>
","<p>Answer to your first question, getting involved with an open source software is as easy as looking at the <code>About</code> section of your favorite software.     </p>

<p>There are loads and loads of open source software around and as a FOSS newbie, it's easy to get confused as to which one to pick and start working with. I'd suggest a software that you really care about and use everyday. Once you've done that, either look in the about section of that particular software or just Google, <em>How do I contribute to xyz</em>, with <em>xyz</em> being the name of the software.    </p>

<p>Next, you need to find a channel through which the community maintaining the software communicates through. In general, these channels are <code>IRC</code>, <code>mailing lists</code> or sometimes even <code>Gitter</code>. I've also seen a couple of communities that use <code>chat.stackexchange</code> to communicate. </p>

<p>Once you're done finding the channel, go and <code>Hello World!</code>. Just go to their comm channel and say that you've been using software xyz for a while and you think you can contribute, and that you'd like some help getting started. With the exception of a few people, most will help you personally, solving your doubts and giving you the right links whenever you need. </p>

<p>The links given by the community people will have one or more of the following:</p>

<ul>
<li>A getting started manual</li>
<li>A link to their github/git/other version control page</li>
<li>A link to their list of tools</li>
<li>A link to their bugs page/review page/issues page</li>
</ul>

<p>Read the manual completely if possible, it'll solve most of your doubts.     Download their codebase, read the README, try fiddling with the codebase, learn how to compile it. If you screw up, delete and re-download.<br>
Download their tools, install them, see how they work.<br>
Look for basic bugs/ask for basic bugs on comm channel.    </p>

<p>Once you've solved your first few bugs, you'll start knowing the codebase better and you can go for bigger bugs/wishlist-items. That's it, now you're a contributor.</p>

<hr>

<p>Now your second question. Most organisations have rigid build tests/review systems which prevent against crappy code being pushed. And even if some bad code gets into deployment, affecting the software, the users come back and report to the organisation, and you can be sure that the bad code is removed within a short period, which is why open source is awesome!</p>

<p><strong>Note:</strong> This is not a generalization. These are the experiences of me and my colleagues when we started off with Open Source.</p>
","573"
"Are ambiguous JavaScript concatenations by the copyright owner legally significant","118","","<p>Here is an interesting case: A company provides a free (MPL-licensed) library (called <a href=""http://jointjs.com/"" rel=""nofollow"">JointJS</a>), and furthermore a number of proprietary extensions (called <a href=""http://jointjs.com/rappid/tour"" rel=""nofollow"">rappid</a>).</p>

<p>On their web server they ship a file that combines code from both parts of the library at <a href=""http://jointjs.com/js/joint.all.min.js"" rel=""nofollow"">http://jointjs.com/js/joint.all.min.js</a> (<a href=""https://gist.github.com/nomeata/8becad811bc018ab3bee"" rel=""nofollow"">gist for historical reference</a>), as it is quite common for JavaScript libraries. But note that this file contains only a copyright or license statement for the free JointJS part (and a few other free licenses for third-party tools). So the structure of the file is:</p>

<pre><code>/*! JointJS v0.9.3 - JavaScript diagramming library  2015-06-26 


This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
[Similar license header for first third-party library]
[first third party library]
[Similar license header for second third-party library]
[second third party library]
[JointJS code (likely intended to be released under the MPL]
[rappid code (when separately distributed, not released under the MPL]
</code></pre>

<p>So assuming I were pointed to that file only (as you are now), there is no way of knowing that parts of that code are <em>not</em> intended to be licensed under the MPL license as stated. And given that fact that the actual copyright owner did that, does this imply that all parts of that file can now be used under the terms of the JointJS part itself?</p>
","<p>The license explicitly claims to apply to the <em>source code</em>. A concatenation of files is not source code by the usual definition: it is not the original file that would normally be modified, but a mechanically-constructed derivative that just happens to be somewhat human-readable. Thus the text you cite does not in fact apply to the file at all.</p>

<p>You <em>could</em> make an argument that the inclusion of the license text is misleading, and that you believed that this file was the source code. After all, how were you to know that the file was mechanically generated? (Or even granting that it was at some point, the result might then have been misguided manually.) The onus is generally on the party that writes the contract to make it clear, so that ambiguities benefit the other party. That would only fly if you'd never read this thread, of course.</p>
","1927"
"Can a non-GPL python program use GPL Python module?","118","","<p>Suppose I have a Python library which is distributed under the GPL license. I would like to use that library in my program, that I may eventually want to distribute under non-GPL terms.</p>

<p>The library itself is not pure-Python: parts of it core functionality is written in C/C++. The Python interpreter calls those C parts an ""Extension"", compiles as dynamically-linked library (.so or .dll), and loads during the runtime when I'm importing the library.</p>

<p>My concern arises from reading the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#InterpreterIncompat"" rel=""nofollow noreferrer"">GPL FAQ</a>, where they state the following:</p>

<blockquote>
  <p><strong>If a programming language interpreter has a license that is incompatible with the GPL, can I run GPL-covered programs on it?</strong></p>
  
  <p>When the interpreter just interprets a language, the answer is yes. The interpreted program, to the interpreter, is just data; the GPL doesn't restrict what tools you process the program with.</p>
  
  <p>However, when the interpreter is extended to provide “bindings” to other facilities (often, but not necessarily, libraries), the interpreted program is effectively linked to the facilities it uses through these bindings. The JNI or Java Native Interface is an example of such a facility; libraries that are accessed in this way are linked dynamically with the Java programs that call them.</p>
  
  <p>So if these facilities are released under a GPL-incompatible license, the situation is like linking in any other way with a GPL-incompatible library.</p>
</blockquote>

<p>I find these remarks not exactly, but quite similar to the situation that I am in. So my question is: am I safe to use this GPL library or not?</p>
","<p>I am not a lawyer, and this is not legal advice.</p>

<blockquote>
  <p>I'm importing the library.</p>
</blockquote>

<p>Importing the library essentially  means you are linking to the GPL library. Hence, your program must also be GPL.</p>

<p>Obviously, this site generally prefers if you release all of your software under and open source license, but we realize this is not always feasible. Depending on your use case, there may be a way to use the library without licensing your entire project under the GPL. For example, you could create a wrapper for this library and then have your main program execute the wrapper via a python <code>os.system()</code> or <code>subprocess.Popen()</code> call. In this case, you would be required to release the wrapper under the GPL, but the main program could be released under a license of your choice (assuming no other licensing restrictions by the software stack you are using). Remember not to <code>import</code> your wrapper or the third party library in your main executable if you go this route.</p>

<p><a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation</a></p>
","6036"
"How do I ensure my documentary adheres to Open Source principles as closely as possible?","118","","<p>The question <a href=""https://opensource.stackexchange.com/q/998/168"">Do open source movies exist?</a> and specifically <a href=""https://opensource.stackexchange.com/questions/998/do-open-source-movies-exist#comment1560_998"">this comment</a> made me curious about Open Source movies. It seems like most Open Source movies are animated, which makes sense since you can make all content yourself and assure it's licensed appropriately and making additional content is feasible for other people.</p>

<p>Suppose however, that I want to make a documentary, using original interviews, original footage and stock footage (from whatever source), as well as music that may or may not be original. Aside from picking the right license (probably <a href=""http://creativecommons.org/licenses/"" rel=""nofollow noreferrer"">some CC license</a>), how would I go about making sure that this movie can not only technically be remixed and redistributed, but that it is also practically viable, without anyone having to fear breaking some sort of copyright law?</p>
","<p>I think the basic principle is universal and applies to movies as well as to software: make sure everyone can have everything you used to produce the release.</p>

<p>In the editing process, soundtrack will be combined with the video, some interviews may stay unused, some footage may be cut short etc. To produce an alternative version it would be convenient to have the music in separate audio files and it would be necessary to have the original unedited footage.
It's also a good idea to provide the original project files for video editors you are using.</p>
","1054"
"How to deal with licences after forking a project?","118","","<p>I forked a project with an MIT license on GitHub:</p>

<pre><code>The MIT License (MIT)

Copyright (c) 2012 Some Name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre>

<p>Now I'd like to do some changes and publish the project as a bower package (different name than it is published at the moment). Do I have to/am I allowed to change the Copyright in the licence?</p>

<p>One the one hand it's not the original author who is responsible for the published code, on the other hand it's the original author who did most of the work and deserves the credits.</p>
","<p>No, you are not allowed to <strong>change</strong> the copyright notice. Indeed, the license text states pretty clearly:</p>

<pre><code>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
</code></pre>

<p>But you are allowed to <strong>add</strong> a copyright notice.</p>

<p>If you want to keep the MIT license, which is what I would advise you to do, you only need to add a single line to the license file, before or after <code>Copyright (c) 2012 Some Name</code> with your own copyright notice. The final <code>LICENSE</code> file will look like this:</p>

<pre><code>The MIT License (MIT)

Copyright (c) 2012 Some Name
Copyright (c) 2016 Your Name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre>

<p>See also the answers to <a href=""https://opensource.stackexchange.com/questions/4424/remove-bsd-license-file-while-importing-code-into-gpl-project"">this question</a> which is pretty similar.</p>
","4440"
"License of a Linux distribution","118","","<p>I'm helping a medicine student to build a Linux distribution which should include some imaging processing tools. The aim is give to the other students a bootable USB stick to be used for their researches. Nothing new.</p>

<p>Each processing tool comes with a specific license, and we will contact the authors if an authorization is required.</p>

<p>My question is: with which kind of license should we release the distribution? Should the license be the more restrictive between the ones of the included packages or the distribution maintains its original license and each package refers to its own license?</p>
","<p>Every program is ""independent"" (or it communicate with other programs with standard methods). So it is considered a mere aggregation, and the license of one piece is independent of the license of the other piece.</p>

<p>Debian solved the problem creating the *Debian Free Software Guidelines <a href=""https://en.wikipedia.org/wiki/Debian_Free_Software_Guidelines"" rel=""nofollow"">https://en.wikipedia.org/wiki/Debian_Free_Software_Guidelines</a> , which guarantee a minimum freedom. Every license must be compatible with it, to be included in the main part of Debian, and so people who copy Debian should care only about it.</p>

<p>Note: linking, dynamic libraries, compiling (compiler generated code) are things to take into account.</p>
","2919"
"What is the benefit to using open source alternatives?","118","","<p>When downloading software I often see open source alternatives. Many of these look quite similar but never quite the same. I continue to buy the paid version. Recently, I started to wonder if the open source versions may be better.</p>

<p><strong>My question:</strong></p>

<ul>
<li>What benefits are there to using open source products?</li>
<li>Are there any downsides to using open source products?</li>
</ul>
","<h3>Benefits</h3>

<p>Benefits of open source are numerous. The most often quoted are:</p>

<ul>
<li>Giving something to the community</li>
<li>More eyes on code (easier to spot bugs)</li>
<li>Free development (people submit patches for your bugs)</li>
</ul>

<p>There are also some less recognised:</p>

<ul>
<li>It's fun. This is never quoted because we're serious developers and we don't have fun.</li>
<li>it's a learning experience. Also rare because we obviously know everything.</li>
</ul>

<h3>Disadvantages</h3>

<p>Yes, they do exist. Look at OpenSSL: Heartbleed, Poodle, Freak... If your open source software is popular, then the attackers can see the bugs in your code too and exploit them. And a lot of people use it, so a lot of people to defraud.</p>

<p>It also takes up time: unless you have a dedicated team of maintainers and helpers, you need to manually review patches and pull requests, and check that your license is being followed. That can take up a lot of time.</p>
","478"
"Can I dual license my code under the AGPL and the CPAL? If so, how?","117","","<p>I'm beginning work on a web application at the moment which ideally I'd like to dual license under the terms of the AGPL and the CPAL.</p>

<p>This would mean that anyone using the code in their own web application would have a choice of either distributing the source code to users (under the AGPL), or giving attribution to me for writing the code (under the CPAL), if I understand dual licensing correctly.  </p>

<p>Is this possible with these two licenses?</p>

<p>I know that AGPL is based on the GPL and CPAL is based on MPL, and GPL and MPL are not compatible, but does that apply in a dual license situation?  And if so, how would I do it? Just include both licenses and note that it's dual licensed under both?</p>
","<p>License compatibility matters when you want to use someone elses code that was published under one license in your code base under a different license. For code that is written entirely by you, you own the copyright and can issue licenses however you wish. This includes dual-licensing.</p>

<p>Dual licensing is quite common: some web apps use a AGPL/commercial dual license, and the Perl interpreter is dual licensed under the GPL and Artistic License. If the two licenses were somehow compatible, there would be no need for dual licensing: you could just choose the compatible license and get the other implicitly (e.g. dual-licensing under MIT and GPL doesn't make any sense since you'd just use MIT).</p>

<p>To apply a dual license, I'd write a LICENSE file that offers receivers of this software a choice:</p>



<pre><code>&lt;project&gt; - &lt;description&gt;

Copyright &lt;year&gt; &lt;authors&gt;

This is free software. You may use, modify, and distribute it
under the terms of either the &lt;license-1&gt; or the &lt;license-2&gt;.

&lt;how to find the full license text&gt;

&lt;disclaim liability&gt;
</code></pre>

<p>If you accept changes to your code from other authors, you have to make sure that they are providing these changes under <em>both</em> of these licenses, and didn't choose one of the licenses for their contributions. For that reason, dual-licensed projects commonly include a <em>contributor license agreement</em>.</p>

<p>You may not be able to issue your intended licenses if you do not own the full copyright of the software. In particular, this could be the case if you adapt code from other projects, or if you rely on a framework of which your code is effectively a derived work. In such cases, you are bound by the licenses of the original projects or of the framework, respectively.</p>
","5270"
"How is Markdown licensed?","117","","<p>This question probably has a simple answer, but I haven't found it anywhere. I know various Markdown implementations are licensed, but is the Markdown language itself licensed?</p>

<p>The reason I'm asking is to figure out whether the Markdown syntax (<code>``</code> for code, <code>* *</code> or <code>_ _</code> for italics, etc.) is itself subject to a license.</p>
","<p>The syntax of a language is not usually licensed, just the specific implementation of the interpreters and compilers. Programming languages are used to build software like natural languages are used to (let's say) write poems. Specific software implementations could be licensed, like specific poems could be, but the language itself couldn't be.</p>

<p>The particular case of Markdown the language is not licensed. And its reference implementation, <a href=""https://daringfireball.net/projects/markdown/"" rel=""nofollow noreferrer"">Markdown</a>, a Perl script that implements the parser and HTML generator, is licensed with a 3-Clause BSD <a href=""https://daringfireball.net/projects/markdown/license"" rel=""nofollow noreferrer"">license</a>.</p>

<p>There was a related question on Software Engineering if you want to read more details:
<a href=""https://softwareengineering.stackexchange.com/questions/178776/what-constitutes-a-programming-language-and-how-does-one-copyright-a-programming"">What constitutes a programming language and how does one copyright a programming language?</a></p>
","6181"
"winpthreads license in a GPL project","116","","<p>I have a project that i have licensed under the GPL, and I would like to start working on parallelizing parts of it using OpenMP. To do this on windows using GCC, I apparently have to include the winpthreads license in my project, per the discussion <a href=""https://sourceforge.net/p/mingw-w64/mailman/mingw-w64-public/thread/5238F91B.7010602@tdragon.net/"" rel=""nofollow noreferrer"">here</a>, for example.</p>

<p>The license itself has an advertising clause similar to the 4-clause BSD license:</p>

<pre><code>...
 *  * Neither the name of Lockless Inc. nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
...
</code></pre>

<p>I believe this is not compatible with the GPL. Is there any way to include this in my GPL project while still using the GPL, or am I out of luck if I want to use GCC/OpenMP?</p>
","<p>The problematic clause in 4-clause BSD when it comes to GPL compatibility is the following:</p>

<blockquote>
  <ol start=""3"">
  <li>All advertising materials mentioning features or use of this software must display the following acknowledgement: 
  This product includes software developed by the organization . </li>
  </ol>
</blockquote>

<p>Not the one you provided. So as long as the license is similar to the 3-clause BSD license in all other aspects as well it is compatible with the GPL.</p>

<p>See <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses</a> for more about GPL compatible and incompatible licenses.</p>
","5102"
"Are there good reasons to open source ""trivial"" projects?","115","","<p>Sometimes, I'll start writing some code with no actual expectations about where it will end up or how useful it will be.</p>

<p>Is there any point in releasing the code for a small project, mainly done for myself, which will likely never be finished? Or is it better to keep that code private?</p>

<p>I'm looking for answers that take into account both the benefit for the general public as well as the potential future of the project.</p>
","<p>Open sourcing a project is never evil. You can open source small scripts to full scale applications if you want, and be assured that among the millions of programmers out there, even if it is useful to a few of them, you've succeeded. You have essentially helped someone reduce his/her work by using your code.</p>

<p>Regarding the future of your project, well, I'm sure if you do something useful, and it is something that can potentially help out several others like you, people would want to contribute.</p>
","240"
"copyleft licenses allowing dynamic linking with open-source program only","115","","<p>I am writing a library, currently under GPLv3 because I do not want my lib to be linked with a non open-source software.</p>

<p>A friend of mine is writing a program under the MIT X11 License and needs my library. GPLv3 does not allow that: if my friend links my GPLv3 lib with his MIT program, this gives a combination that should be released under terms that are compatible with the GPL, so it cannot stay under the MIT X11 License.</p>

<p>Changing the license of my library for a LGPLv3 would do the trick, but it would also allow dynamic links with closed-source programs, and I do not want that.</p>

<p>What are my options?</p>
","<p>If I understand correctly, your friend still wants to release his program under the MIT X11 license, and you still want to prevent your library from being linked into proprietary, closed-source programs.</p>

<p>I'm not aware of any licenses that are both compatible with the MIT X11 license, yet prevent the linking into closed-source programs. A derivative of your friends MIT licensed program would be allowed to be later converted to a closed-source program, and I believe this is where the problem lies.</p>

<p>You may try creating a special interface and granting an exception for using this interface with non-GPL compatible software as outlined here: <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#LinkingOverControlledInterface"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#LinkingOverControlledInterface</a></p>

<p>I'm not an expert on the exception mechanism of GPLv3, but maybe it's possible that you may use the Additional Terms section (section #7) of the GPLv3 to allow your friend to use your library. <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-3.0.en.html</a></p>
","5550"
"Are there any other applications of Open Source other than on software/code?","114","","<p>Are there any other applications of Open Source other than on software/code?</p>

<p>I guess you could apply the same idea to any other intellectual property (creations of the mind/intellect). But are there any real life examples outside the software industry and community?</p>
","<p><a href=""http://en.wikipedia.org/wiki/Open_source#Applications"" rel=""nofollow"">Wikipedia</a> notes that there are loads of uses, from <a href=""http://en.wikipedia.org/wiki/Hyperloop"" rel=""nofollow"">transportation</a> to <a href=""http://en.wikipedia.org/wiki/Open-source_robotics"" rel=""nofollow"">robots</a> to <a href=""http://en.wikipedia.org/wiki/Free_Beer"" rel=""nofollow"">beer</a>. Some fall under the umbrella of <a href=""http://en.wikipedia.org/wiki/Open-source_hardware"" rel=""nofollow"">open source hardware</a>.</p>

<p>My favorite of these is the <a href=""http://en.wikipedia.org/wiki/Hyperloop#Open-source_design_evolution"" rel=""nofollow"">Hyperloop</a>, first pushed forward by Elon Musk, the co-founder of PayPal and founder of SpaceX and Tesla Motors (some of the latter's ideas are open-source). Numerous groups have done studies and simulations on the design, allowing more progress to be made than any one group could make. <a href=""http://www.theregister.co.uk/2013/07/16/elon_musk_to_release_open_source_hyperloop_plans_in_august/"" rel=""nofollow"">Said Musk</a>,</p>

<blockquote>
  <p>""I really hate patents unless critical to company survival. Will publish Hyperloop as open source,"" he <a href=""http://twitter.com/elonmusk/statuses/356776740409974785"" rel=""nofollow"">wrote</a> on Twitter.</p>
</blockquote>
","260"
"As owner of GPL library, can I break the licensing terms?","114","","<p>As far as I understand, choosing GPL licence for library does not permits use of it in proprietary programs as opposed to <a href=""https://www.gnu.org/licenses/why-not-lgpl.html"" rel=""nofollow noreferrer"">LGPL</a>.</p>

<p>So releasing my library (or code classes), I'm forcing people to use them only in free programs, is that right? Is it including myself?</p>

<p>In other words, as owner of the libraries, can I break these requirements/terms of the licence and use it in proprietary programs against the GPL terms and sell the proprietary program which is using my own GPL libraries?</p>

<hr>

<p>Related:</p>

<ul>
<li><p><a href=""https://opensource.stackexchange.com/q/2900/407"">Licence for open-source code which is part of proprietary code?</a></p>

<p>Which is not exactly duplicate, since this question is very specific about GPL and whether you can break you own terms.</p></li>
<li><p><a href=""https://opensource.stackexchange.com/q/1459/407"">Proprietary software using GPL modules</a></p></li>
</ul>
","<p>Yes indeed, as the sole author (copyright owner) of a library, you are not bound by the terms you choose to license it to the general public.</p>

<p>Thus you can use it in your own proprietary programs.</p>

<p>This is also why you can dual-license, re-license the work or sell commercial licenses.</p>

<p>Now, you must be very careful that you really are the sole copyright owner. As soon as you accept contributions, these contributions are licensed to you under the GPL license and you must respect the license to use the version of the library that contains such modifications.</p>

<p>If you want to be able to continue using the library with external contributions without following the terms of the license you need to require your contributors to sign a Contributor License Agreement (CLA) which will contain specific wording describing what you can do with their contributions. In this case, you will be bound by this agreement instead of the license. But be careful how the CLA is written: it could scare off some contributors; and if it is not written with the help of a lawyer, it might not do what you want...</p>
","4482"
"Is there an institution that accepts and promotes open hardware licenses?","114","","<p>In the software world the <a href=""http://www.fsf.org/"" rel=""nofollow"">FSF</a> and the <a href=""http://opensource.org/"" rel=""nofollow"">OSI</a> both accept licenses as free/open. They also promote licenses for usage. In the hardware world some open source licenses have been created, like the <a href=""https://en.wikipedia.org/wiki/TAPR_Open_Hardware_License"" rel=""nofollow"">TAPR Open Hardware License</a> and the <a href=""https://en.wikipedia.org/wiki/CERN_Open_Hardware_License"" rel=""nofollow"">CERN Open Hardware License</a>. But I can't find any institution accepting these licenses as open, keeping a list of them and promoting them. Does such an institution exist?</p>
","<p>I think the <a href=""http://www.oshwa.org"" rel=""nofollow"">Open Source Hardware Association (OSHWA)</a> is probably one of the top organizations out there. They are active in the open hardware movement, increasing awareness and spreading information about projects.</p>

<p>Quoting <a href=""http://p2pfoundation.net/Open_Source_Hardware_Association"" rel=""nofollow"">president Gabriel Levine</a>,</p>

<blockquote>
  <p>OSHWA will continue to work together and with some advice from attorneys who are open to discussing some of the legal options and licenses available, compile some clarifying documents that can help companies and individual see what some legal options are available for producing and distributing open source hardware.</p>
</blockquote>

<p>That said, I'm having trouble accessing their website right now, so I cannot get to said list. At the moment, this is technically a link-only answer (sort of). If someone could add the list on, that would be great. If not, and I continue to have computer difficulties, I will delete this answer.</p>

<hr>

<p>EDIT (change as necessary): I followed your link to the OSHWA and found a <a href=""http://www.oshwa.org/definition/"" rel=""nofollow"">definition</a> of Open Hardware and in <a href=""http://www.oshwa.org/sharing-best-practices/"" rel=""nofollow"">Best Practices</a> is a section about Licensing, naming a few licenses, including normal OSS-licenses like GPL and BSD, Creative Commons-licenses and hardware-specific licenses like TAPR and CERN OHL.</p>
","1121"
"Relicensing WTFPL code under GPL","114","","<p>From brief and rather humorous text of WTFPL license it seems like I can just take the code, slap GPLv3+ sticker on top of it and live happily ever after. Is this really so? Am I missing something? What if somebody else takes the same code and use it in proprietary product?</p>
","<p>Yes you could do that. GPLv3+ is much more restrictive than a WTFPL license so if someone else had an interest in the WTFPL license code you copied they would be much more likely to use it instead of the GPLv3+ re-licensed code you create.</p>

<p>WTFPL is meant to be freely used by anyone (almost public domain). Your best defense is to make important substantial changes to your re-licensed GPLv3+ code so that a copycat using the original WTFPL code will be not be able to use all of your improvements</p>
","4050"
"Using FreeBSD licensed code in a GPL3+ project","114","","<p>I have a code project which I have released under the GPL3+, which you can see <a href=""https://github.com/shadowk29/CUSUM"" rel=""noreferrer"">here</a>. I would like to implement a section of code that would use the lmfit nonlinear fitting library, provided <a href=""http://apps.jcns.fz-juelich.de/doku/sc/lmfit"" rel=""noreferrer"">here</a>. The lmfit library is licensed under the 2-clause BSD license, which appears to be compatible with the GPL3+. My question is how to bundle them together. I would like to include the lmfit source code inside my git repo. What is the proper way to handle the licensing? Do I simple leave the BSD license in the lmfit files that I use and leave the GPL clause in my own source code? Does the presence of the BSD license in the repo affect files that I have licensed under the GPL?</p>

<p>EDIT: on further reading, it seems that I can release FreeBSD software under the GPL. SO my question is about how to actually do this properly. Do I include both licenses in the source code? Obviously I have to keep the copyright and BSD licenses intact in those sections of the code, but do I also add the GPL so that the source for lmfit in my git repo would now have two licenses inside it? Do I add my own copyright like I have in my other source code (I am guessing no).</p>
","<p>As you found, you can indeed include BSD licensed code in a GPL project.</p>

<p>The usual way to do this is to:</p>

<ol>
<li>License your entire project under the GPL, with the LICENSE.txt reflecting this.</li>
<li>Include the BSD licensed code within the repository, with the BSD license and original copyright notice intact within it.</li>
</ol>

<p>This clearly indicates that, together, the entire project is GPL, but on its own this file can be taken out and used under its existing license.</p>

<p>You can of course only do this one-way: a GPL project couldn't be combined into a BSD project as you would be effectively re-licensing the GPL code under more permissive terms than it allows.</p>
","4073"
"What is the use of attaching a license like WTFPL?","113","","<p>I've been checking out the different licenses and I came around <strong>WTFPL</strong>. I understand the basic intention of the license. But how much appropriate is this license to use for any work?</p>

<p>It says, </p>

<blockquote>
  <p>You just DO WHAT THE FUCK YOU WANT TO. </p>
</blockquote>

<p>Does it also mean that the potential user can sue me for something happened because of the software I've written? </p>

<p>I get this doubt because one more liberal license I came across was <a href=""https://creativecommons.org/publicdomain/zero/1.0/legalcode"" rel=""noreferrer"">CC0</a>. And it clearly mentions this scenario, So does <a href=""https://opensource.org/licenses/MIT"" rel=""noreferrer"">MIT license</a>. But I cannot see any of these in WTFPL.</p>
","<p>From <a href=""http://www.wtfpl.net/faq/"" rel=""noreferrer"">the WTFPL FAQ</a>:</p>

<blockquote>
  <h3>Why is there no “no warranty” clause?</h3>
  
  <p>The WTFPL is an all-purpose license and does not cover only computer programs; it can be used for artwork, documentation and so on. As such, it only covers copying, distribution and modification. If you want to add a no warranty clause for a program, you may use the following wording in your source code:</p>

<pre><code>/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://www.wtfpl.net/ for more details. */
</code></pre>
</blockquote>
","4869"
"What issue does the Mozilla Public License have with the European Legal System?","113","","<p>I was quite surprised to see the following in <a href=""https://opensource.stackexchange.com/a/2107/69"">an answer</a>: (emphasis mine)</p>

<blockquote>
  <p>For new projects, <strong>you should avoid the MPL as it has issues with the European law system</strong>. For this reason, the CDDL can be seen as the successor of the MPL.</p>
  
  <p>Given that both licenses disallow to change the license but limit their scopt to files, you are still allowed to combine files under different licenses to make them together compile a single work.</p>
</blockquote>

<p>Given that I was planning on using the Mozilla Public License as a licensing option for a new project that I was writing, this is a bit of a blow for me. I was planning on using it, especially since it's emerging in the 'open source market.'</p>

<p>What part of the Mozilla Public License is an issue with the European legal system? As the Mozilla Public License and the Common Development and Distribution License are fundamentally the same, how does the CDDL rectify the legal issue with the European legal system?</p>
","<p>I have no idea, but I found <a href=""https://opensource.com/law/11/8/mozilla-public-license-almost-20-part-1"">this post</a> about MPL-2.0 revision:</p>

<blockquote>
  <p><strong>Internationalization</strong></p>
  
  <p>Mozilla has always tried to be a global project, but we were aware that the MPL had some clauses that made non-American users less comfortable with the license. One of these was the section on U.S. Government End Users. This was intended to protect the interests of all contributors to MPL-licensed projects, not just Americans, but to a non-lawyer (and even to many European lawyers) the meaning of the section was opaque. Our legal research, and the experience of the past 10 years, suggested it could be removed without impacting the U.S. government's procurement process, and so we did so. Similarly, we've discussed every draft with FSF Europe's European Legal Network, to help ensure that the new language works across jurisdictions, and brought the jurisdiction language into closer alignment with the practices of other open source licenses.</p>
</blockquote>

<p>AFAIK, CDDL <a href=""https://en.wikipedia.org/wiki/Common_Development_and_Distribution_License"">is based</a> on older MPL-1.1 revision.</p>
","2184"
"API license question","112","","<p>I have one question with regards to MaxMind API license.</p>

<p>There is the MaxMind's <code>GeoIp2</code> Java API:</p>

<ul>
<li><a href=""https://github.com/maxmind/GeoIP2-java"" rel=""nofollow"">https://github.com/maxmind/GeoIP2-java</a></li>
</ul>

<p>which is licensed under the Apache License, Version 2.0.</p>

<p>So if you want to use this library in a commercial application you are required to:</p>

<ul>
<li>include a copy of the license in any redistribution you may make that includes Apache software;</li>
<li>provide clear attribution to The Apache Software Foundation for any distributions that include Apache software.</li>
</ul>

<p>Now on this <a href=""https://www.maxmind.com/en/geolite2-developer-package"" rel=""nofollow"">page</a> it says:</p>

<blockquote>
  <p>We include a license for redistribution of our API code with your
  commercial software.</p>
</blockquote>

<p>What does that mean with regards to the above <code>GeoIp2</code> Java library? </p>
","<p>As you've said, the GeoIP2 Java API is licensed under the Apache 2.0 license. MaxMind has clearly granted you a license to distribute and modify the software under those terms. The terms of the Apache license are quite permissive and primarily only require attribution.</p>

<p>The statement by MaxMind that their ""GeoLite2 Developer's Package"" includes a license to include their Java API in a product does not in any diminish the fact that they have <em>already</em> given you a license to do exactly that, via the Apache license.</p>

<p>Why would they include this? For one, it lets them add another marketing item to make the developer's package sound more attractive. For another, <a href=""https://www.maxmind.com/en/geolite-commercial-redistribution-license"" rel=""nofollow"">the license grant included with the paid package</a> does not carry attribution requirements or the requirement to include a copy of the Apache license. Also, <a href=""https://github.com/maxmind/GeoIP2-java/commit/ff4ddb35c72a06893ebfebd2b89760c016e8554d#diff-9879d6db96fd29134fc802214163b95a"" rel=""nofollow"">prior to Jun 5, 2013, the API was licensed under the GNU GPL</a>, which is not a permissive license. (I don't know if they even offered a paid alternative in 2013, though.)</p>

<p>It is interesting to note, though, that the paid package's license grant includes the requirement to assign copyright for your modifications to MaxMind:</p>

<blockquote>
  <p>You have the right to modify the Named MaxMind Products and redistribute the software with the changes; however, any such changes must be relayed back to MaxMind, and copyright in them assigned to MaxMind.</p>
</blockquote>

<p>Presumably, you could keep copyright in your changes by electing to modify the API under the terms of the Apache license instead, but you would then need to include attribution and the license text in your application. The other components (database, etc.) appear to only be available under the paid option, however, so you have no choice in terms for those works.</p>
","4139"
"Using GPL library in unit test suite of open source library?","112","","<p>Suppose that:</p>

<ol>
<li>I have an open source project with a permissive license (MIT or Apache);</li>
<li>This project builds two targets:

<ul>
<li>A library object code file that other, dependent programs would link to;</li>
<li>An executable unit test suite that other programs would <strong>not</strong> link to;</li>
</ul></li>
<li>The unit test suite links to a GPL-licensed library;</li>
<li>The library object code that other object code programs would link to does not.</li>
<li>The unit test's source code is embedded in the same source files as the main library code, albeit it's clearly delimited as separate modules from the main library.</li>
</ol>

<p>Could my project be considered a derived work of the GPL library even if I only use the latter in the test suite?  Some details that might be relevant:</p>

<ul>
<li>My library is a collection of random number generators, and it obeys a standard external interface specified by my programming language;</li>
<li>The GPL library in question is one that is written for testing random number generators generically (can be used to test any random number generator).</li>
<li>I could trivially write a separate, <em>third</em> program that links both my MIT library and the 3rd party GPL one and runs the latter's tests with the output from the former.  What linking to the GPL library from my library's unit test suite would do is just <em>automate</em> this and make the process more convenient.</li>
</ul>
","<p>When you say that the test code is embedded in the same source, but in different modules, I'm assuming that you mean either they have their own files in the main library or their own classes in the same files of the main library. Either way, they get compiled and released along with the rest of the main library. This means <em>the entire library</em> falls under the GPL. </p>

<p>The easy (and much more sane <em>code wise</em>) solution is to split your tests into a separate library that references both the GPL library and your main lib. This way, you don't have to distribute the tests along with your main lib when you publish the binaries. This will allow you to leave the main lib under whichever license your choose to release it under  and your tests get released under the GPL. </p>
","4113"
"Can software be both MIT licensed and in the public domain?","111","","<p><a href=""https://github.com/docopt/docopt.rs/commit/11b5ff3d3939b7d4ba0e09e457f802a37bb5c5dc"" rel=""nofollow noreferrer"">docopt.rs</a> is dual-licensed under the MIT and Unlicense. How can the software be both copyrighted and in the public domain? Is this an example of invalid licensing?</p>
","<p>Firstly, no it's not invalid at all. It's always valid to dual or multi license a product under many licenses, even completely contradictory licenses. When you dual license something the recipients get to choose which license they will accept the work under. They only choose one, so it doesn't matter if another license would give them contradictory rights.</p>

<p>The authors of docopt.rs have probably done this because in some jurisdictions <a href=""https://en.wikipedia.org/wiki/Public_domain#Dedicating_works_to_the_public_domain"" rel=""nofollow noreferrer"">it is difficult or perhaps even impossible to put a work in the public domain</a>. By dual licensing with the very permissive MIT license they solve that problem by providing a license which is valid everywhere. If you are somewhere where public domain dedications are questionable, or if your company's lawyers are uncomfortable with you using something published under the Unlicense, then you can use the safe option of the MIT instead.</p>
","5602"
"How do I turn a public domain project into a MIT project","111","","<p>A while ago I released some code into the public domain, using CC0.
I am now thinking, that I would like to extend that work, but have it under the MIT license -- the extensions at least.</p>

<p>I don't mind that the existing work remains in the public domain.</p>

<p>Is this possible?
I would assume it is since public domain is the most permissive state possible.</p>
","<p>Short answer: You can do what you want.</p>

<p>If you are the original author of a work, you have the right to do anything with it[1].  Whether you gave it away under some license before doesn't matter.  You can release it under a different license, if you want to, whether you modify it or not.  If you released it under some ""cannot sell"" license you could still sell it.  The license you gave other people with their copy doesn't affect <em>you</em>, only the people who got it from you with that license.</p>

<p>Additionally, if something was released into the public domain, that means that anyone is allowed to do anything (including all of the things above), not just the original author.</p>

<p>[1] Unless it was written as a ""work for hire"" and the contract had specific legal restrictions to the contrary.</p>
","4240"
"Implication of LGPL and MIT licenses for commercial use (of JSXGraph library)","111","","<p>I'm interested in using the <a href=""http://jsxgraph.uni-bayreuth.de/wp/index.html"" rel=""nofollow noreferrer"">JSXGraph</a> JavaScript library in a website project.  The library is covered by the LGPL and MIT licenses.  I'm new to licensing and am trying to answer the following question:</p>

<p>Suppose I build a subscription-based website that allows users to buy monthly access to the site.  Users would be served proprietary content and be able to interact with dynamic widgets built on JSXGraph.  What responsibilities do I have to customers or the license holders themselves?</p>

<p>Does the answer change if instead of a website, I build a mobile app that serves the content and dynamic widgets?</p>
","<p>While the project website is not that clear, the README on GitHub is much clearer:</p>

<blockquote>
  <p>JSXGraph is free software dual licensed under the GNU LGPL or MIT License.</p>
</blockquote>

<p>Dual licensed means that you can choose which license applies to you. For commercial use, you will be better off choosing to follow the MIT requirements only: it is less complicated to comply with MIT than with LGPL.</p>

<p>The only condition of the MIT license is:</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</p>
</blockquote>

<p>That means that your app (whether web app or mobile app) should contain an About page (or a Licenses page, or something like that) where you reproduce <a href=""https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT"" rel=""nofollow"">this notice</a>, preferably with a link to the project page as well (but that is not part of the requirement).</p>
","4607"
"Is having a repository on GitHub considered distribution?","111","","<h2>TL;DR</h2>

<p>Is having a repository on GitHub considered <em>distribution</em> in the sense of a license?</p>

<h2>Description</h2>

<p>I have some repositories on GitHub. Now I modified a file for a project. The file was licensed under Apache 2.</p>

<p>The project is for an online course from Udacity to learn Android development.</p>

<p>My understanding is the following. If I distribute the file then I have to comply with the license in the sense that I have to:</p>

<ol>
<li>include the copyright</li>
<li>include the license</li>
<li>state the changes</li>
<li>include a notice</li>
</ol>

<h2>Question</h2>

<p>Now my thinking is since I keep my repository public on GitHub, is it considered distribution, and thus I have to state the changes and include notices, etc. ?</p>
","<p>Yes, this is considered redistribution. If not what would?</p>
","5223"
"Licensing of configuration files that are technically code","111","","<p>I have created a piece of software that I have chosen to license under the GPL. Its configuration is technically also code. Are any run-time configuration files also licensed under GPL? Do I have to disclose them if someone asks for them?</p>

<p>The configuration is in a separate repository from the main code, but is imported (""linked"", I suppose) in the code. There is confidential information in the config files.</p>
","<p>First of all, if you have created the software yourself you are not bound by the GPL in any way even if you have chosen to distribute it under the GPL. You own the software, you don't need a license to use it, and you can do anything you want with it. You do not need to disclose anything. The rest of my answer is only relevant for users bound by the GPL.</p>

<p>Regarding the configuration files, if they are required to build the software, they are decidedly a part of the ""corresponding source"" mentioned in Section 1 of the GPLv3:</p>

<blockquote>
  <p>The “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities</p>
</blockquote>

<p>Or ""complete source"" in Section 3 in the GPLv2:</p>

<blockquote>
  <p>For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.</p>
</blockquote>

<p>As long as your software can be built and used without the configuration data itself, the configuration data doesn't belong to the complete/corresponding source. The configuration template files probably do though, but that's no issue I assume.</p>
","5053"
"What is required of a party who receives a Larger Work under the Mozilla Public License?","111","","<p>Section 3.3 of the Mozilla Public License:</p>

<blockquote>
  <h2>3.3. Distribution of a Larger Work</h2>
  
  <p>You may create and distribute a Larger Work under terms of Your choice,
  provided that You also comply with the requirements of this License for
  the Covered Software. If the Larger Work is a combination of Covered
  Software with a work governed by one or more Secondary Licenses, and the
  Covered Software is not Incompatible With Secondary Licenses, this
  License permits You to additionally distribute such Covered Software
  under the terms of such Secondary License(s), so that the recipient of
  the Larger Work may, at their option, further distribute the Covered
  Software under the terms of either this License or such Secondary
  License(s).</p>
</blockquote>

<p>The <a href=""https://www.gnu.org/licenses/license-list.html#MPL-2.0"" rel=""nofollow"">Free Software Foundation</a> makes this comment:</p>

<blockquote>
  <p>It's important to understand that the condition to distribute files under the MPL's terms only applies to the party that first creates and distributes the Larger Work. If it applied to their recipients as well, it would be a further restriction and incompatible with the GPL and AGPL.</p>
</blockquote>

<p>Does this mean that the recipients of a Larger Work which is <em>not</em> under Secondary Licenses can freely violate the MPL's terms for the MPL-covered files, such as removing copyright notices or combining proprietary code with MPL code in the same file, and distribute the program as if the MPL had never been applied?</p>
","<blockquote>
  <p>Does this mean that the recipients of a Larger Work can freely violate the MPL's terms for the MPL-covered files, such as removing copyright notices or combining proprietary code with MPL code in the same file, and distribute the program as if the MPL had never been applied?</p>
</blockquote>

<p>You may be misreading the (rather convoluted) wording of the MPL-2.0, but none can blame you there ...</p>

<p>It simply means this: <strong>you have a choice of either the MPL-2.0 or the secondary licenses</strong>, if their terms are not incompatible. These secondary licenses are typically the GPL and LGPL.</p>

<p>There are three things you cannot escape: death, taxes ... and licenses!</p>

<p>These are essentially the same terms as in the Mozilla tri-license notice choice used before the MPL-2.0 in Firefox for instance where you could pick either one of the MPL-1.1, GPL or LGPL. But in the MPL-2.0 this is expressed in a generic way and baked into the license text as opposed to be in an external notice.</p>

<p>Now in a larger work, you can pick any license for your work but you still have to comply with the MPL. And you can use a secondary license choice (LGPL/GPL) if this is not incompatible with your own license.</p>

<p>If ...</p>

<blockquote>
  <p>I'm assuming that the Larger Work is not under any Secondary Licenses.</p>
</blockquote>

<p>Then the MPL 2.0 and only the MPL 2.0 applies IMHO</p>

<p>For the sake of clarity if I were in your case I would state explicitly that only the MPL-2.0 applies there, but the MPL may already contains this in its own martian language.</p>

<blockquote>
  <p>If recipients of a Larger Work not under Secondary Licenses are not required to comply with the MPL, as noted by the FSF, can the recipient simply remove the MPL from the covered files?</p>
</blockquote>

<p>No, unequivocally. This only applies to secondary licenses.</p>

<p>So let me restate one more time: the MPL 2.0 is essentially a choice of license. You can keep things under the MPL, a choice of MPL or secondary licenses or a secondary license. Period. Nothing else.
You cannot escape the licensing terms of at least one or all of these.</p>

<p>The link you provide to the FSF commentary on the MPL 2.0 are <strong>in the context</strong> of the secondary (copyleft A/L/GPL) licenses and not for any other licenses. Do not misread this as related to other licenses.</p>
","4062"
"Awareness of the difference free/libre/open-source software and zero-cost software","110","","<p>Often when talking to friends or family they are unaware that open source is a completely different thing than free-ware.</p>

<p>Are there studies about the awareness of open-source being a separate thing from free-ware/spyware/malware/adware, at least in certain milieus?</p>
","<p>Common misunderstanding for Free software is thinking as free of charge/cost. If any one just search in google : <a href=""https://www.google.co.in/search?q=download+free+software"" rel=""nofollow noreferrer"">download free software</a> or <a href=""https://www.google.co.in/search?q=free+software+for"" rel=""nofollow noreferrer"">free software for...</a> then s/he is actually responded with <a href=""https://en.wikipedia.org/wiki/Freeware"" rel=""nofollow noreferrer"">freeware</a>. But If anyone just tries to search <a href=""https://www.google.co.in/search?q=what+is+free+software"" rel=""nofollow noreferrer"">What is free software</a> then s/he is going on right way!</p>

<hr>

<p>Following topics may helps you to aware the people:-</p>

<ul>
<li><p>Aware people with <a href=""https://en.wikipedia.org/wiki/Software_license"" rel=""nofollow noreferrer""><strong>Software License</strong></a> to clarify what different terms stands for.</p>

<p><img src=""https://i.stack.imgur.com/mZhhY.png"" alt=""screen-shot""></p>

<p>So, It is clear that spyware/malware/adware are <strong>deceptive and/or illicit</strong> while free software, open source software are software distributed under free/open-source license and follows definitions</p>

<p>Freeware is <a href=""https://en.wikipedia.org/wiki/Software#License"" rel=""nofollow noreferrer"">one type</a> of proprietary software (distinguishing with commercial software)</p></li>
<li><p>The English adjective free is commonly used in one of two meanings: ""for zero price"" (gratis) and ""with little or no restriction"" (libre). see <a href=""https://en.wikipedia.org/wiki/Gratis_versus_libre"" rel=""nofollow noreferrer""><strong>Gratis Vs. Libre</strong></a> and <a href=""https://en.wikipedia.org/wiki/Gratis_versus_libre#.22Free_beer.22_vs_.22free_speech.22_distinction"" rel=""nofollow noreferrer"">""Free beer"" vs ""free speech""</a> distinction</p>

<blockquote>
  <p>""Free software is a matter of liberty, not price. To understand the concept, you should think of free as in free speech, not as in free beer."" — Richard Stallman</p>
</blockquote></li>
<li><p><a href=""http://www.gnu.org/philosophy/fs-translations.html"" rel=""nofollow noreferrer"">Translation of the term ""free software""</a></p>

<p>This is a list of recommended unambiguous translations for the term “free software” (<strong>free as in freedom</strong>) into various languages. Also provided translations of “<strong>gratis software</strong>” in a separate column to show how to make the contrast in various languages.</p></li>
</ul>
","623"
"Can I use a library under the Cecill-B licence in my commercial closed-source app?","110","","<p>I'm working on a commercial closed-source app and I need to use a library under the Cecill-B licence.
I read the licence terms <a href=""http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt"" rel=""nofollow"">here</a>
and it desn't say it is mandatory to distribute the source code of the software that uses the library, or to use it only for open-source apps. So I conclude I can use the library for my app, and distribute it in any mean I want (as long as part 5.3.3 of the licence is pretty generic about the use of external modules).</p>
","<p>I'm no lawyer, and don't even pretend to play one on the 'net. Take the following with a heavy dose of salt.</p>

<p>I don't see how ""firstly, compliance with the principles governing the distribution of Free Software: access to source code, broad rights granted to  users"" (principles of the license) hint at allowing you to close it up. You should distribute the version you use, in source. Check the exact conditions for distributing changed versions.</p>

<p>But it says about ""modules"" (essentially, defined as other code linked to the covered code):</p>

<pre><code>       5.3.3 DISTRIBUTION OF EXTERNAL MODULES

When the Licensee has developed an External Module, the terms and
conditions of this Agreement do not apply to said External Module, that
may be distributed under a separate license agreement.
</code></pre>

<p>I.e., your code is yours to do as you wish.</p>
","2542"
"Of the differences between the GPLv3 and the AGPLv3 texts: what to make of them?","110","","<p>When I review a <a href=""https://gist.github.com/pombredanne/2a8d85da552dfab9b8173f771b6a4f98/revisions"" rel=""nofollow noreferrer"">side-by-side diff</a> of the GPLv3 and  the AGPLv3 the only significant change seems to me to be this <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">addition in the section 13</a> of the AGPLv3:</p>

<blockquote>
  <p><em>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.</em> [...]</p>
</blockquote>

<p>And later -after the <code>END OF TERMS AND CONDITIONS</code> line- this recommendation on <a href=""https://www.gnu.org/licenses/agpl-3.0#howto"" rel=""nofollow noreferrer"">How to Apply These Terms to Your New Programs</a> is different in the AGPLv3 and points back to its <a href=""https://www.gnu.org/licenses/agpl-3.0#section13"" rel=""nofollow noreferrer"">Section 13</a>:</p>

<blockquote>
  <p>[...] <em>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a ""Source"" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</em> [...]</p>
</blockquote>

<ol>
<li><p>In this correct to state that the main difference in the terms and conditions is therefore limited to Section 13? or are there any other textual differences that should be considered?</p></li>
<li><p>If this is correct, would it be correct to consider that the interpretation of the AGPLv3 can be based on any interpretation of the GPLv3 that I could make plus whatever interpretation I can do for this addition to the AGPLv3 in section 13?</p></li>
<li><p>If 2. and 3. are correct and that I use <code>unmodified</code> code licensed under the AGPLv3, would it be correct to consider that the terms of the GPLv3 and the terms of the AGPLv3 are then essentially the same in this <code>unmodified</code> case? And that therefore any guideline or interpretation of the GPLv3 terms and conditions for this case would apply equally well here?</p></li>
</ol>
","<blockquote>
  <ol>
  <li>In this correct to state that the main difference in the terms and conditions is therefore limited to Section 13? or are there any other textual differences that should be considered?</li>
  </ol>
</blockquote>

<p>Yes, your analysis of the text is correct. The FSF says of the AGPL (emphasis mine):</p>

<blockquote>
  <p>The GNU Affero General Public License is a modified version of the ordinary GNU GPL version 3. <strong>It has one added requirement</strong>: if you run a modified program on a server and let other users communicate with it there, your server must also allow them to download the source code corresponding to the modified version running there.</p>
</blockquote>

<p>Given the fact that Section 13 is the only difference, and the FSF summarize the AGPL as having only one difference from the GPL, it is correct to understand the AGPL as otherwise identical to the GPL, outside of the addition of section 13.</p>

<hr>

<blockquote>
  <ol start=""2"">
  <li>If this is correct, would it be correct to consider that the interpretation of the AGPLv3 can be based on any interpretation of the GPLv3 that I could make plus whatever interpretation I can do for this addition to the AGPLv3 in section 13?</li>
  </ol>
</blockquote>

<p>Yes, that sounds basically correct. In fact, the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#AllCompatibility"" rel=""nofollow noreferrer"">FSF's GPL compatibility matrix</a> includes the note:</p>

<blockquote>
  <p>Each place that the matrix states GPLv3, the same statement about compatibility is true for AGPLv3 as well.</p>
</blockquote>

<p>So we can certainly know that compatibility within the xGPL family is identical for GPLv3 and AGPLv3. As for its compatibility with other licenses, the only case I can think they would differ is: if there were some hypothetical license that was</p>

<ul>
<li>almost GPLv3-compatible, except</li>
<li>it imposes a requirement identical the requirement in AGPLv3 section 13</li>
</ul>

<p>then such a license would be GPL-incompatible but I <em>think</em> it would be AGPL compatible, since such a requirement would be additional to the GPL's terms, but not additional to the AGPL's terms. As far as I know, no license like that actually exists.</p>

<hr>

<blockquote>
  <ol start=""3"">
  <li>If 2. and 3. are correct and that I use unmodified code licensed under the AGPLv3, would it be correct to consider that the terms of the GPLv3 and the terms of the AGPLv3 are then essentially the same in this unmodified case? And that therefore any guideline or interpretation of the GPLv3 terms and conditions for this case would apply equally well here?</li>
  </ol>
</blockquote>

<p>The first paragraph in Section 13 begins with a conditional: ""<em>if you modify the Program...</em>"" If you <em>don't</em> modify the program, then that paragraph is not relevant to your use of the software. I have <a href=""https://opensource.stackexchange.com/a/791/50"">written to the FSF licensing team and had this reading confirmed</a>.</p>

<p>The only case that would be different (as  far as this layman can tell) would be cases concerning downstream recipients who <em>do</em> modify the software. So, if you aren't a downstream recipient who modifies the software, then your obgligations under the AGPLv3 would be the same as under the GPLv3.</p>
","5054"
"Removing Ads from Open Source projects","110","","<p>My most recent encounter with WebYog's SqlYog revealed that the vendor has  made their Community edition <a href=""https://github.com/webyog/sqlyog-community"">open source, and available on GitHub</a>, however the product still has obtrusive ads in it.</p>

<p>It is clearly licensed under GPL, and although I haven't checked whether the ads are easily removable or contained in one of the included compiled libraries, I'm curious as to their motivations.</p>

<p>Although not something I would do; is there anything inherently wrong with publicly forking and possibly even promoting a project like this given that it is released under GPL, for the sole purpose of removing ads and bloat?</p>

<p>My question of course is not specific to SQLyog, and could extend to other projects, like Ubuntu's (<a href=""http://www.ubuntu.com/about/about-ubuntu/licensing"">possibly not GPL?</a>) Desktop variant for example, which includes links to Amazon; or FileZilla, which is distributed via SourceForge, and consequently carries all the bonuses of their much-loved downloader.</p>
","<p>Yes, you can do that. The GPL gives you the right to make modifications and distribute these. But considering that this is conflicting with the business interests of the original creators, you can expect that they will see what they can do to stop you. One thing they <em>might</em> try is sue for violation of the ""SQLyog"" trademark. To protect you from trademark claims, you need to give your software a different name. This makes it harder to promote it as ""SQLyog without ads"".</p>
","2438"
"Can an open source/free alternative put a company at risk? Has this ever happened?","109","","<p>There is a very nice quote by <a href=""https://en.wikipedia.org/wiki/Alberto_V%C3%A1zquez-Figueroa"" rel=""nofollow noreferrer"">Alberto Vázquez-Figueroa</a> (Spanish writer and inventor) which reads:</p>

<blockquote>
  <p><em>""El éxito o el fracaso de un invento no depende de a quien beneficia,
  sino de a quien perjudica.""</em></p>
</blockquote>

<p>Source: <a href=""https://es.wikiquote.org/wiki/Alberto_V%C3%A1zquez-Figueroa"" rel=""nofollow noreferrer"">Wikiquote</a></p>

<p>Which translated into English means:</p>

<blockquote>
  <p><em>""The success or failure of an invention does not depend on who
  benefits, but on whom it harms.""</em></p>
</blockquote>

<p>I strongly agree with it.</p>

<p>Suppose that somewhere in the world there is a company called Acme. This company invests resources to develop and maintain a tool A that offers a certain functionality X. This tool is proprietary, and brings revenue to the company.</p>

<p>Imagine that a developer or a group of developers decide to build a tool B that offers the same functionality X. They decide to release this tool as open source or free software, so that everybody could benefit from it and be more productive.</p>

<p>(Please don't misunderstand me. I'm not talking about <a href=""https://opensource.stackexchange.com/q/435/6602"">stealing intellectual property</a> or anything illegal/malicious, but the total opposite.)</p>

<p>In this new scenario, any individual would be able to use tool B for free instead of paying for tool A. Even worse, other companies that are in direct competition with Acme could use tool B in their workflow at zero cost, and even modify the source code to include new functionality and resell it as their own product.</p>

<p>What would be the outcome for Acme? Would building an open source alternative like tool B put Acme at risk?</p>

<p>Has this ever happened in the real world?</p>
","<p>A company would be ""put in risk"" if it's entire offering is compromised, and it can't adapt to a changing market. This has less to do with the existence of open source alternatives to a product and more with poor management.</p>

<p>One could make the argument, though, that revenue loss due to open source alternatives happens all the times. Every time someone installs Linux on their home computer, that's a sale that Microsoft (or Apple) didn't make. Every time someone uses Open Office or Libre Office, that's a sale Microsoft didn't make. Every time someone chooses PostreSQL or MariaDB as their RDBMS, that's a sale that Oracle (or Microsoft) didn't make.</p>
","5398"
"Can I rewrite the Linux kernel by hand and modify it to escape it from the GPL?","109","","<p>If I took the linux kernel, rewrite it and changed the order and file names and some other stuff, and destroy the original linux kernel, will the new kernel be subject to the terms of the GPL?</p>

<p>tl;dr: If I rewrite the linux kernel, change almost every line while keeping the same computation and delete the original kernel will the GPL apply to the new kernel?</p>

<hr>

<p>Not a duplicate of <a href=""https://opensource.stackexchange.com/questions/4345"">Theseus&#39; Paradox applied to code copyright</a> as that is modifying the source without rewriting it. As far as I am aware the GPL has anti-circumvention measures for this too</p>
","<p>You could write your own kernel and license it in any way you like since you would be the author, but it wouldn't be the Linux kernel.</p>

<p>However in your question you seem to say that you would be following the source code of Linux closely. If you do so and claim copyright on it, then you could be accused of plagiarism and sued for copyright infringement, exactly as when making a movie or a book that borrows too much from an existing work.</p>

<p><em>Not relevant any more: As for your initial opinionated comment, it should be removed from the question. But while it is still there, let me answer that the people who put work into building the wonderful system that Linux is gave it to the world on their own terms. If you don't like these terms, nobody forces you to use it but don't pretend it is not free, because it is.</em></p>
","4365"
"In an open source project does the owner hold any responsibility to keeping the project accessible?","109","","<p>Suppose I was the owner of an open source project. Many people work in this project.. And many people use it.</p>

<p><strong>My question:</strong></p>

<p>Do I have legal obligation to keep the project accessible to the contributors or the users?</p>
","<p>There is no intrinsic legal notion of “ownership” of a project in the sense I think you mean. A creative work is collectively owned by all the people who made a nontrivial¹ contribution. The fact that one person may have control over the hosting, may be the ultimate arbiter of who gets commit rights, may be considered the charismatic leader, etc. does not make them “the owner” in a legal sense.</p>

<p>Participating in a creative work does not in itself carry legal² obligations³. You have legal obligations only if you entered a contract carrying these obligations.</p>

<p>Participation in an open source project that isn't public domain intrinsically requires entering a contract, namely, the project's <strong>license</strong>. Most open source licenses are light on pure obligations, they only specify what the contractors are allowed to do. Open source licenses mostly list permissions and restrictions to these permissions, but the restrictions only forbid things that would be forbidden by copyright law in the absence of a license.</p>

<p>It would be atypical for an open source license to carry an obligation to make the project available, except for one thing: some licenses require that if you distribute a derived product, you also distribute the source. For example, the GNU GPL has such provisions, §3 in <a href=""https://www.gnu.org/licenses/gpl-2.0.en.html"" rel=""nofollow"">GPL v2</a> and §6 in <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow"">GPL v3</a>. The GNU GPL obligations on source distribution can be summarized by grouping them in two ways:</p>

<ul>
<li>You may distribute the source code alongside the derived product, under broadly similar terms. With this method, if you shut down the method to distribute the derived product, you are free of any further obligation regarding the source code.</li>
<li>If you make a distribution that lacks source code, you must fulfill requests to distribute the source code at cost (or cheaper) for the next three years.</li>
</ul>

<p>The source code distribution offer is an obligation on the distributor, who need not be a copyright holder and thus might not own the project at all. The easiest way not to incur any obligation is to always offer the source code alongside the derived product (offer it for download on the same server, put in in the same CD pack, etc.).</p>

<p>There may be a completely different sense in which you're a project owner, and that's if you get <strong>funding</strong>. When someone gives you money, ostensibly to work on a project, they generally require you to sign a contract promising some delivery. A funding contract is likely to obligate you to deliver your work (and possibly to coordinate, incorporate and deliver other people's work) at least to the funder. It may also obligate you to distribute the work to the public at large (e.g. if it's a grant to cover distribution costs). There's no standard form for such contracts, so read yours carefully, and get help from a lawyer if you're in doubt.</p>

<p>¹ <sub> I'm not going to go into what constitutes nontrivial here as it's irrelevant for this question. </sub><br>
² <sub> I'm assuming “typical” jurisdictions, e.g. US or EU. </sub><br>
³ <sub> Excluding some very specialized domains which might be subject to restrictions, e.g. knowledge pertaining to nuclear weapons. </sub>  </p>
","814"
"Is it a license breach to post GPLv3 content to Facebook?","109","","<p>We are discussing if it would be a license breach to post / distribute GPLv3 licensed material at Facebook (of course with telling the origins of the material and the owner)?</p>

<p>Some say if you are the owner of the repository you can spread it via Facebook, and if you only do have a fork you cannot do this.</p>

<p>You have to agree to ""IP-Licensing"" for all content you post on Facebook. This gives Facebook ""non-exclusive, transferable, sub-licensable, royalty-free, worldwide license to use any IP content that you post"" and so would override GPLv3.</p>

<p>It is allowed to share and modify GPLv3 licensed content if you</p>

<ul>
<li>add a license</li>
<li>add the origin of the document</li>
<li>add the owner of the copyright</li>
</ul>

<p>Facebook will not do this if they are allowed to use parts of posted IP content. It can be they use GPL content and ignoring added information as listed.</p>
","<p>If you were to post a GPL work on some service such as Facebook, the difficulty arises that we may only convey this work under the terms of the GPL. In particular, GPLv3 section 4 says:</p>

<blockquote>
  <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you [state the license, keep intact all licenses, notices, and disclaimers, and include a copy of the license].</p>
</blockquote>

<p>So if we view the service only as a distribution medium, this would be fine. For example, the GitHub terms of services are crafted so that they have just enough rights to perform their service, but e.g. don't have any right to prepare derivative works. As such GitHub will comply with the GPL, and it is possible to post GPL works on GitHub.</p>

<p>The Facebook terms of service are very different, and you issue a broad license grant when you post any content. This license has three important properties:</p>

<ul>
<li>The license is sub-licensable, i.e. they can issue licenses to the work to other people.</li>
<li>The license is a “license to use any IP content”, without explaining what “use” means.</li>
<li>The license is not restricted in purpose, such as “in order to display your content to other users”.</li>
</ul>

<p>Sublicensing is a problem because a GPL-covered work may only be conveyed under the terms of the GPL. If they were to sublicense the work, it would probably be under a more restrictive license, thus stripping the recipient from their GPL-granted rights.</p>

<p>The vague permission to “use” the content clashes with the GPL because the GPL allows some uses only under certain conditions. Notably, derivative works may only be created if they are also licensed under the GPL. This would not have been a problem if they had restricted themselves to specific uses, such as creating (unmodified) copies of the work and displaying the work, which are allowed almost without restrictions under the GPL.</p>

<p>If they had limited this license grant to a specific purpose, it would have been possible to argue that they would only be a distribution medium, not a license recipient under the GPL – similar to how you do not grant a GPL license to your internet service provider for GPL works that you transmit via their connections. Confusingly they do concede a limitation that this license grant is bound by your privacy settings, but it is unclear from their terms of service how this works with that very broad license grant.</p>

<p>As an example of how this license grant would subvert the GPL if you were to publicly post GPL-covered works on Facebook, consider that they would receive the very broad permission to “use” these works. That goes beyond the rights you would have received via the GPL, so you can only post these works if you are the (sole) copyright holder. Without any limitation on uses, a possible use would be to incorporate any artwork or code into their apps. It is unlikely they would do that (e.g. because they also promise to delete the posted contents under some conditions). But unlikely is not good enough: this appears to make it <em>possible</em> to strip the GPL from works you posted to FB.</p>

<p>As a quick note, you suggested that “<em>Some say if you are the owner of the repository you can spread it via Facebook, and if you only do have a fork you cannot do this.</em>” It doesn't matter who “owns” the <em>repository</em>, but who holds the copyright of the <em>contents</em>. In particular, a repository may hold contributions by multiple people, which all hold the copyright to their contributions. The repository owner would then still be bound by the GPL for the contributions, and would be unable to grant rights that go beyond the permissions they received through the GPL.</p>
","6330"
"Why aren't Creative Commons licenses appropriate for data?","109","","<p><a href=""http://pantonprinciples.org/"">The Panton Principles state</a></p>

<blockquote>
  <p>Many widely recognized licenses are not intended for, and are not appropriate for, data or collections of data. A variety of waivers and licenses that are designed for and appropriate for the treatment of data are described here. Creative Commons licenses (apart from CCZero), GFDL, GPL, BSD, etc are NOT appropriate for data and their use is STRONGLY discouraged.</p>
</blockquote>

<p>Why is this? What is wrong with using Creative Commons licenses for data?</p>
","<p>Well, this gets complicated and legal. (Caveat: I am not a lawyer.) <a href=""http://creativecommons.org/licenses/"">According to Creative Commons</a>, their licenses:</p>

<blockquote>
  <p>give everyone from individual creators to large companies and institutions a simple, standardized way to grant copyright permissions to their creative work.</p>
</blockquote>

<p>In short, CC licenses apply to creative works and are meant to relax or waive the copyright protections automatically guaranteed to authors (e.g., by common law tradition in Commonwealth countries).</p>

<p>The applicability of CC licenses to data depends on whether data can be copyrighted. If data cannot be copyrighted, then there is no point to putting a CC license on them because those licenses waive rights that the data creators do not have.</p>

<p>So what kinds of works are protected by copyright? Though laws vary across jurisdictions (and thus make this question difficult to answer), two important principles are the <a href=""https://en.wikipedia.org/wiki/Idea%E2%80%93expression_divide"">""Idea-Expression divide""</a> and <a href=""https://en.wikipedia.org/wiki/Threshold_of_originality"">""the threshold of originality""</a>. In the former, only expressions of ideas can be copyrighted, while ideas themselves cannot be. In the latter, among expressions, only those that are original are protected (thus reproductions of works do not earn copyright protection <em>de novo</em>).</p>

<p>Thus data only have copyright protection if they are an expression of an idea rather than idea itself and if they are not simply ""facts"" (i.e., they are something sufficiently original). </p>

<ul>
<li>In the United States, this almost universally means that <a href=""http://www.lib.umich.edu/copyright/facts-and-data"">data cannot be copyrighted</a>. A classic legal case here is <a href=""https://en.wikipedia.org/wiki/Feist_Publications,_Inc.,_v._Rural_Telephone_Service_Co.""><em>Feist Publications, Inc., v. Rural Telephone Service Co.</em></a>, which ruled that telephone number listings in a phonebook are not protected by copyright. Importantly, nothing produced by the federal government has copyright protection (all federal government works are in the public domain, but this does not necessarily apply to other levels of government).</li>
<li>In Europe, however, <a href=""https://en.wikipedia.org/wiki/Copyright_law_of_the_European_Union#Database_rights"">databases do have copyright-like protection</a>. Not all databases are protected; protection comes from ""qualitatively and/or quantitatively a substantial investment in either the obtaining, verification or presentation of the contents"". Such rights extend for 15 years.</li>
</ul>

<p>Thus, one has to determine whether the ""data"" being discussed merit copyright on their own. It may be that ""data"" refer to works that are themselves copyrighted (e.g., original written works, such as newspaper articles). Those ""data"" are protected but not because they are data, rather because they are creative works. Someone who has compiled those works into a database in the United States has no copyright protection for the works (unless they have obtained those rights for each ""data point"" from the original author(s)). In Europe, however, the compilation of those data into a database may entitle the compiler to a limited database right.</p>

<p>In conclusion, CC licenses make sense if one has copyright protections to give away. If not, then CC licenses make no sense because the data are probably free to use anyway. If the data do merit protection (due to either satisfying European-style threshold of investment, or American-style threshold of originality, or some other national standard), then I believe the argument made in the linked webpage is purely made on the opinion that CC0/(or Public Domain, where that principle exists) are preferable to more restricted waivers of rights.</p>
","1676"
"Ethical Open Source Protection","108","","<p>I saw this post concerning <a href=""https://opensource.stackexchange.com/questions/4075/encouraging-a-piece-of-software-to-be-used-ethically"">the ethical use of software</a> and it brought another question to mind.</p>

<p>If I were to release software with an open source license, and someone were to use it in a manner that is illegal, what affect might that have on me? </p>

<p>Specifically, am I able to be held responsible for illegal use of my open source software?</p>
","<p>That's what the big shouty all-caps warranty disclaimer, <a href=""https://opensource.stackexchange.com/q/13/175"">that many people seem to dislike</a>, is doing. Here's an example from the MIT license:</p>

<blockquote>
  <p><code>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</code></p>
</blockquote>

<p>It's actually two sentences; the first is the warranty disclaimer - I don't guarantee this software does what you think it does - and the second part is the <strong>limitation of liability</strong> - I'm not responsible for whatever happens when you use the software. Usually it's the first sentence that is controversial; it usually comes up whenever a <a href=""https://en.wikipedia.org/wiki/Heartbleed"" rel=""nofollow noreferrer"">software flaw</a> causes significant damage and some people start calling for programmers to be held responsible. The situation that the second sentence addresses does come up too, though. If you pay attention to news and politics, you can probably find examples of where a product is used unethically, but people want to hold the manufacturers of that product responsible. Think about examples where the product is perceived to facilitate unethical use - hacking/cracking, copyright infringement, trading of illegal goods etc.</p>

<p>Therefore you should use standard open source licenses, which are vetted by real lawyers and may have also been tested in court. Such licenses usually have limitations of liability in them, to provide some protection for you.</p>

<p><strong>Examples</strong></p>

<p>I've already listed the MIT example, but it also exists in <a href=""https://opensource.org/licenses/BSD-2-Clause"" rel=""nofollow noreferrer"">BSD</a> (similar wording, also all caps), <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">GPLv3</a> (clause 16, also all caps), <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">Apache</a> (clause 8, surprisingly not in all caps), <a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow noreferrer"">MPL</a> (clause 7, not in all caps but amusingly highlighted in yellow).</p>
","4115"
"Global donor to OSI approved licenses","108","","<p>I have some small projects under different open source licenses (I like BSD and GPLv2). </p>

<p>I would like to license some new projects under an OSI approved license but make sure any other OSI-approved license can use too. Assume all the code is owned by me (or I can get the consent of all the copyright owners).</p>

<p>Does it suffice for example to say this:</p>

<pre><code>FooBar is licensed under the simplified BSD license (2-clause). 
See the LICENSE.txt file for the full description.

You can use this under any OSI approved license.
</code></pre>

<p>I do not want to do any public domain dedication:  Public domain dedication does not have clear implications in some countries and does not prevent it from being used in project licensed under non-OSI-approved licenses.</p>

<h2>In simple terms, the question is this:</h2>

<p>Is there any license that I can choose which makes sure the code will remain OSI approved but does not care exactly how people use it? Something that a GPL project can simply link against, same as any project with BSD or MIT, or any other OSI-approved license? I know some of these licenses cannot be mixed with the rest, so is there any that all are happy with?</p>
","<p>The chart below displays the compatibility of some of the most popular licenses from <a href=""http://www.dwheeler.com/"" rel=""nofollow noreferrer"">David A. Wheeler</a> found via <a href=""http://stackoverflow.com"">Stack Overflow</a>: <a href=""https://stackoverflow.com/questions/1978511/is-there-a-chart-of-which-oss-license-is-compatible-with-which"">Is there a chart of which OSS License is compatible with which?</a>:
<a href=""https://i.stack.imgur.com/KbiRR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KbiRR.png"" alt=""A diagram of popular license compatibility.""></a></p>

<p>From this, as far as I can tell you have three options (MIT, X11, 0BSD, public domain, or BSD-new) which are compatible with most downstream licenses. From my understanding BSD ""simplified"" (2-clause) is compatible with BSD-new, BSD (3-clause) and therefore, would also be an option compatible with some of the most popular downstream licenses.</p>
","1794"
"How to keep open source projects up to date","107","","<p>I am working on an open source collaborative project with numerous other people.</p>

<p>Often many people are working on it at once. This creates problems with multiple versions of the same file.</p>

<p>Is there any program (like google drive) that allows lots of people to edit code, and keep everything in one version?</p>
","<p>What you're describing is called a <a href=""https://en.wikipedia.org/wiki/Revision_control"">Version Control System</a> or revision control system. It essentially stores one canonical copy in a central place, which can be downloaded, edited, and committed back there. If someone else changes it in the time you do, you must review those changes and incorporate them into your code before recommitting.</p>

<p>Some major version control systems are:</p>

<ul>
<li>Git, of which the main proponent is <a href=""http://github.com"">GitHub</a></li>
<li>SVN</li>
<li>Mercurial</li>
</ul>

<p>among many others. You should try more than one out and work out which one is best for your project.</p>
","372"
"Is it legal for a corporation to ""lock in"" & restrict usage and redistribution of Open Source software that it has released to it's own services?","107","","<p>In <a href=""https://github.com/awslabs/amazon-redshift-utils/blob/master/LICENSE.txt"" rel=""nofollow"">source code for a project released by Amazon.com Inc., <code>awslabs/amazon-redshift-utils</code></a>, an ""Open Source""-like license is found with questionable stipulations, particularly section 3.3:</p>

<blockquote>
  <p>3.3 Use Limitation. The Work and any derivative works thereof only may be used or intended for use with the web services, computing platforms or applications provided by Amazon.com, Inc. or its affiliates, including Amazon Web Services, Inc.</p>
</blockquote>

<p>The included <code>LICENSE.txt</code> file appears to be very similar to other Open Source licenses, however it also seems that Amazon is trying to limit usage of any and all derivative works to be used only with their own paid software products and services.</p>

<p>Is this legal or enforceable that a company can release ""free"" software which is ""locked-in"" to that company and only to be used when it serves to increase the profit of said company?</p>

<p>The full text of the license <a href=""https://raw.githubusercontent.com/awslabs/amazon-redshift-utils/master/LICENSE.txt"" rel=""nofollow"">may be found here</a> and <a href=""http://aws.amazon.com/asl/"" rel=""nofollow"">also here</a>.</p>
","<p>If Amazon writes the code, they can release it under any licence(s) they choose, including fully-free and fully-proprietary licences, or not release it at all.</p>

<p>The cognitive disconnect here is that you've looked at the licence, seen that it has a lot of the ""<em>dress and feel</em>"" of free licences, decided that the software must therefore be free, and are then surprised that there are limitations on the use of the software.</p>

<p>The error is in concluding that this is free software.  The licence does not give all of <a href=""https://fsfe.org/freesoftware/basics/4freedoms.en.html"" rel=""nofollow"">the four freedoms</a>; specifically, it does not give freedom one, the right to use the software for any purpose.</p>

<p>It isn't free software, no matter what you think it looks like.</p>
","2584"
"What do the labels JD, JL and ES mean?","107","","<p>I always see these tags in the issues and pull requests on Github but do not know the meaning and find it hard to search for.</p>

<p>For example, in this <a href=""https://github.com/BVLC/caffe/labels"" rel=""nofollow"">famous Caffe project.</a></p>
","<p>These are custom labels. In the example you give, they seem to be the initials of developers. </p>

<p>Looking at the project's <a href=""http://caffe.berkeleyvision.org/"" rel=""nofollow"">page</a>, the lead developer is called Evan Shelhamer (ES). JD seems to be a contributor named Jeff Donahue. JL would be contributor Jon Long. All these people are mentioned on the project's page, under ""The BVLC members who have contributed to Caffe are ...""<br>
In other words, not just contributors, but people from the Berkeley Vision and Learning Centre (BVLC) itself - people with leader(-like) positions on the project.</p>
","1311"
"What must be the license of a software including other apps with different licenses?","107","","<p>I have developed a software and I will publish it for free. But this software includes the following programs:</p>

<ol>
<li>The app is developed using Electron (License: MIT)</li>
<li>Electron uses Chromium (It is combined with different licenses)
NOTE: Once the application is packaged, automatically Electron and Chromium license files are included in the root folder.</li>
<li>node.js (<a href=""https://raw.githubusercontent.com/nodejs/node/master/LICENSE"" rel=""nofollow noreferrer"">License</a>)</li>
<li>nginx (<a href=""https://nginx.org/LICENSE"" rel=""nofollow noreferrer"">License</a>) - Also there other license files (zlib, openssl etc) in the downloaded package</li>
<li>PHP (License: PHP License) - Also it includes other license files of other apps it includes.</li>
<li>Fet Scheduler (License: GNU AGPL v3)</li>
<li>Laravel (License: MIT)</li>
</ol>

<p>My files are ""Laravel"" Controllers, Models and Views. Once the app is started, first nginx and PHP start and then my PHP website is displayed in a chromium browser.</p>

<p>All of these apps included in one setup file.</p>

<p>What can be the correct license for this app? A single license file or multiple license files in their folders (PHP, nginx etc.)?</p>
","<p>First all the licenses apply. So you can create a massive top level aggregated license or just use the ones provided by each package.</p>

<p>Second, the questions is what would be the resulting overall licensing? </p>

<p>Are the various package licenses are eventually compatible and how the packages interact together?</p>

<p>This is a complex question with no simple answer that may need some deep technical and legal review.</p>

<p>In particular in general the strongest copyleft licenses may apply depending on how packages and code is combined, which could be the AGPL for Fet Scheduler.</p>

<p>As a side note, there are many more subtleties to the licenses of Electron and Chromium than just the MIT license.</p>

<p>And a follow up question is:</p>

<blockquote>
  <p>""Can I create my own license for the Controllers, Models and Views I created in Laravel""? </p>
</blockquote>

<p>Yes </p>

<p>My general understanding of fet is that this a standalone application. It would impact the overall licensing if you link to it</p>
","5883"
"How does Linux use Open Source to its advantage?","106","","<p>While most operating systems have a closed source nature, from the beginning Linux / Ubuntu has remain open sourced. This has allowed it to become quite popular. </p>

<p><strong>My question:</strong></p>

<p>How has it used open source to its advantage? And what has keeping it open sourced allowed it to do, that it otherwise wouldn't?</p>
","<p>As Linus Torvalds developed a simple Unix-kernel for his home PC he decided to make it open source under the GPL-license, because he used GNU-software in making it and wanted to say thanks this way. GNU was building a free Unix-like OS by replacing step by step every program in System V Unix. They were already pretty far, but they still missed a kernel. Linux was that kernel.</p>

<p>This decision had some consequences. As many people already followed the effort of the GNU-project to build an OS, Linux was very interesting. Linux making the kernel GPL resulted in many of them starting to be interested into Linux and many of them started to contribute to the project. Also Linux completed the GNU-system. So finally GNU could release a completely free system - with Linux as the kernel. This lead to a lot of buzz among the free-software-aficionados and started to make Linux popular.</p>
","464"
"How to license open source service for commercial projects but restrict it to backend usage","106","","<p>How would you license an open source service (server with frontend) which is a tool let's say to monitor software applications. I'd like to find a license which allows companies to adopt it and use it for their commericial products. They can modify look and feel, add or remove functionality. They can distribute it along with their software to customers.</p>

<p>The only thing I'd like to restrict is that they can get paid for the service itself, say by adding a multi-tenancy feature and then make a cloud version where customers pay money to use the service. That is something I'd like to reserve for myself :)</p>

<p>Right now, I have the <a href=""https://tldrlegal.com/license/creative-commons-attribution-noncommercial-(cc-nc)"">CC-BY-NC</a> lincense in mind. do you think that works?</p>
","<p>You are essentially trying to ensure you get some kind of a commercial monopoly on your software when sold as a service.</p>

<p>The best license for this use case is the AGPL IMHO. It is not exactly what you are looking for, but no free and open source license would prohibit commercial licensing and offering services. </p>

<p>The AGPL does not restrict commercial usage and does not restrict creating and selling software as a service, but it provides a strong incentive for commercial free riders to share back in this context: ""performing"" the software over a public network essentially triggers the AGPL copyleft clause.</p>

<p>A good example of its usage would be MongoDB. In their case, they go one step further by providing drivers under the Apache license, and the back-end DB under AGPL, therefore making it easy to integrate in commercial and floss software with limited obligations. 
In their context, unmodified usage typically does not trigger the AGPL copyleft. Modified usage would. Offering MongoDB as a service commercially using the unmodified version would be fine without much restrictions. Modifying it would require the service provider to redistribute its changes. 
If I were in your context with your parameters, AGPL would be my license of choice. (I am not you and I may not use AGPL, but this is not relevant here ;) ) </p>

<p>As a side note, I consider that the CC-NC family of licenses are a poor choice for software in general. You would be better off using a plain commercial license with ""visible"" sources. The CC licenses were designed for content and not for software. </p>
","4176"
"Licenses PyQt and QT","106","","<p>I would like to use PyQT5 and QT5 to create an -internal- application for a friend and his company. I would like to use PyQT GPL license and QT LGPL license.</p>

<p>To respect these licenses, I need to:</p>

<ul>
<li>give him the source code when the application is done;</li>
<li>create a msgBox who define what QT is, with links to their licenses;</li>
<li>provide a copy of the GPL license;</li>
</ul>

<p>Is it correct? Do I forget something?</p>
","<blockquote>
  <p>provide a copy of the GPL license</p>
</blockquote>

<p>You not only need to provide a copy of the GNU GPL, but you also need to release the internal application under the GNU GPL.</p>

<p>There is a small chance of <a href=""https://www.gnu.org/licenses/gpl-faq.html#AllCompatibility"" rel=""nofollow noreferrer"">compatibility issues between different versions of the GPL and LGPL</a> that you should consider as well.</p>
","5731"
"MIT-licensed project that only consists of a README file","106","","<p>I have an open source project on GitHub that is currently under the MIT license. The ""project"" is actually a README file containing information on a variety of new language and library features, complete with examples, on C++. Think of it as a cheatsheet or a small book on C++.  With this in mind, I have a few questions:</p>

<ul>
<li>If I have a LICENSE file, but now I decide I want to include the license text in the README itself also, does this mean people who create derivative works cannot change the license text in the README? Or does this only apply to the LICENSE file? </li>
<li>Is MIT even appropriate for projects of this type?</li>
</ul>

<p>I'm new to software licensing and I'm trying to do it right, so please go easy.</p>
","<p>I am not a lawyer, but I would recommend against having the full text of the MIT License in both the README and LICENSE files. Just like with real code, duplication can be a maintenance hazard. If you feel that you must talk about the license in the README, I would just state the copyright and that the project is licensed under the MIT License and leave it at that. </p>

<blockquote>
  <p>does this mean people who create derivative works cannot change the license text in the README? Or does this only apply to the LICENSE file?</p>
</blockquote>

<p>The MIT/X11 License makes no restrictions on where the license text must appear for a given project. I think one would be free to change the text of the license within the README as long as an unmodified version of the text is intact somewhere within the project (e.g. the LICENSE file). Would this be confusing to have two different wordings of the license? Absolutely! However, I don't think you are prevented from doing so.</p>

<blockquote>
  <p>Is MIT even appropriate for projects of this type?</p>
</blockquote>

<p>Sure, it's appropriate, but what are you trying to accomplish with your license? If your goal is to protect your copyright on README, then it seems like a reasonable choice. However, others may add their copyright to the README if they make modifications/additions.</p>
","5703"
"Taking a clone of an LGPL licensed source code and modifying and maintaining in a private repo","106","","<p>We started to use an open source library in one of our projects, and now we need to do some custom modifications to this library. The source of this library is distributed under LGPL and I need some help in identifying whether we would violate LGPL terms/conditions if we follow an approach detailed below. </p>

<p>Facts:</p>

<ul>
<li>The source is open and available in Github. License is LGPL. </li>
<li>The built artifact is also available in the Maven central. </li>
<li>However, in the version available in the Maven central, there are some
issues/improvements that we have identified for our need.</li>
</ul>

<p>What we plan to do:</p>

<ol>
<li>Take a clone of this project.</li>
<li>Modify the source code to meet our requirements.</li>
<li>Commit the modifications (to keep backup) to our Git (not a public Git).</li>
<li>Integrate the building of this library into our Jenkins (via our Git).</li>
<li>New artifact to be made available in our Nexus (private Nexus).</li>
<li>We would also like to change the group id of this artifact when moving to our Git and Nexus.</li>
<li>New artifact will be used as a dependency in internal projects via our Nexus.</li>
</ol>

<p>Are we violating any LGPL terms/conditions in following the above approach?</p>
","<p>If your ""internal projects"" are not being released outside of your organization, then you should be fine. Your modifications do fall under the LGPL, but if you aren't releasing your modified library in binary form to the general public, there's no one in the general public that has the right to request to see your library's source code.</p>
","2380"
"Can you apply a license to a license?","105","","<p>I was wondering, are there rules regarding putting a license onto a license, for example if I had a license and I applied it with a license, in many cases this would cause a loop hole. Is there any way to fix this?</p>
","<p>A license is copyrightable since it is a substantial piece of text, so yes of course a copyright license can be applied to it.</p>

<p>As an example, this is how the <a href=""http://www.gnu.org/licenses/gpl-3.0.html"" rel=""nofollow noreferrer"">GPL 3 license text</a> is licensed (taken from <a href=""https://softwareengineering.stackexchange.com/q/241583/81527"">this question</a> on Programmers.SE):</p>

<blockquote>
  <p>Copyright © 2007 Free Software Foundation, Inc. <a href=""http://fsf.org/"" rel=""nofollow noreferrer"">http://fsf.org/</a></p>
  
  <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>
</blockquote>

<p>You might notice that this license is <em>less free</em> than the terms of the GPL itself, but this is understandable as they want to protect the brand of GPL, and prevent people from changing this license and keep calling it GPL.</p>

<p>I'm not sure why you think being able to change the license is a loophole; the license is a legal text that if you modify unilaterally, you void the license agreement between yourself and whoever you received it from. Sure you can use the modified license elsewhere, but it doesn't mean you can unilaterally change the terms of the original license.</p>
","319"
"Did it ever happen that an open source project's leader (BDFL) died? If so, what happened to the project?","105","","<p>This question is mostly for understanding the lifecycle and governance of open source projects. 
I wonder, if any large and well-known open source project has ever lost its leader / ""benevolent dictator for life"" (BDFL) due to any act of nature (e.g., death, serious illness). If so, how did the project and its community handle the loss?</p>
","<p>My colleague at the Ballistic Research Laboratory, <a href=""https://en.wikipedia.org/wiki/Mike_Muuss"" rel=""nofollow noreferrer"">Mike Muuss</a>, leader of the <a href=""https://brlcad.org/"" rel=""nofollow noreferrer"">BRLCAD</a> project (also well-known as the author of the ""<a href=""https://en.wikipedia.org/wiki/Ping_(networking_utility)"" rel=""nofollow noreferrer"">ping</a>"" network testing utility), was killed in an automobile accident.  The BRLCAD project successfully continued as others picked up the reins.</p>

<p>""ping"" continues in use as a standard tool on most platforms, but I'm not aware of a centralized ""ping"" project for maintaining it.</p>
","5606"
"How does the FOSS exception for MySQL connectors apply to code written in PHP or Python?","105","","<p>I have looked all over and can't find clear answers to the following:</p>

<ol>
<li>If I write code in PHP or Python that uses GPL MySQL connectors for PHP or Python - which license applies to my code? That of PHP or Python, or GPL?</li>
<li>Can I run my PHP or Python code on a server and offer commercial services without the GPL?</li>
<li>Can I bundle my PHP code in an application and distribute it commercially without the GPL?</li>
</ol>
","<blockquote>
  <ol>
  <li>If I write code in PHP or Python that uses GPL MySQL connectors for PHP or Python - which license applies to my code? That of PHP or Python, or GPL?</li>
  </ol>
</blockquote>

<p>If my code is released (in source) using one of the of FOSS licenses listed in the MySQL Exception then that license applies. Otherwise the GPL would apply.</p>

<blockquote>
  <ol start=""2"">
  <li>Can I run my PHP or Python code on a server and offer commercial services without the GPL?</li>
  </ol>
</blockquote>

<p>Yes, as long as I run my code is a service: for instance Facebook and Google are known to use MySQL on the backend of some of their commercial services.  </p>

<blockquote>
  <ol start=""3"">
  <li>Can I bundle my PHP code in an application and distribute it commercially without the GPL?</li>
  </ol>
</blockquote>

<p>I can, but then my PHP (or Python) code would be subject to the GPL when it depends at runtime on MySQL. This is the quid-pro-quo to entice you to buy a commercial license. As a side note, if I ever buy a commercial license of MySQL for redistribution, the terms (last I saw them) did prohibit to mix the commercial MySQL with the open source GPL-licensed MySQL, and these are different binaries anyway.</p>

<blockquote>
  <p>Let's say there is a wrapper for MySQL connector in Python that has been released under Python license (as is allowed by the FOSS exception) - and my code uses this wrapper. Am I not bound by the Python license instead of GPL?</p>
</blockquote>

<p>At rest, my source code does not interact nor embed with anything and is not subject to the GPL. </p>

<p>But at runtime, this Python connector is unlikely to have implemented the raw wire protocol for MySQL and likely links with the MySQL GPL-licensed headers and libraries (at least all the Python drivers I know of do): therefore at runtime, I consider that the GPL terms would extend to the Python driver and from there to my application.  See this article for a gentle introduction on <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc"">dependencies</a>. </p>

<p>That said what can I do in this case?</p>

<ol>
<li><p>Do not use MySQL and use PostgreSQL, SQLite, etc. This is what I do. Personally I also find PostgreSQL to be a superior technical choice in most cases.</p></li>
<li><p>Consider alternative MySQL ""implementations"" such as MariaDB. MariaDB has furthered the old MySQL LGPL-licensed drivers to bring them up to date with the latest protocol. There used to be also a BSD or MIT-licensed driver called libdrizzle, but I am less clear about its status. </p></li>
</ol>

<p>Using the MariaDB driver would replace my proprietary->GPL interaction by a proprietary->LGPL dynamic linking interaction which I and my lawyers may consider OK, though this is a grey area because of the lawsuit-happy Oracle commercial interests being bypassed in this context.</p>
","4529"
"Legality and enforceability of commercial software uploaded to Github","105","","<p>Semi-hypothetically speaking, let's say a company creates a piece of software and then purposefully uploads the source code for that software to GitHub. You can download it, run it, etc directly from the repo.</p>

<p>Now, let's assume that the license for this software is commercial. It states that you cannot use the software unless you pay for a subscription license.</p>

<p>As the developer of the software, can I reasonably expect that people using my software will pay me for it? Or more specifically, could I reasonably assume that if someone were to download and use my software without paying, I could legally force them to pay up?</p>

<p>If the answer to the above question is ""yes"", how would this be different than--say--a musician uploading an album to a public server and then saying ""you can download this music for free, but you can't listen to it unless you PayPal me $10""?</p>

<p>I'm interested in both sides of this equation:</p>

<p>1) As a consumer or a small business, can I legally make use of software licensed in such a manner?</p>

<p>2) As a software publisher, can I go after people that download and use my software from GitHub if licensed in this manner?</p>
","<p>tl;dr version: As a consumer or small business, you can legally make use of the software <em>if</em> you follow the terms of the commercial license.  The software publisher could go after people who download the code for copyright infringement and possibly breach of contract if they exercised a right protected by copyright without complying with the terms of the commercial license.</p>

<p>There is an argument that the company in your hypothetical has agreed to grant a license to copy and prepare derivative works based on the GitHub <a href=""https://help.github.com/articles/github-terms-of-service/#f-copyright-and-content-ownership"" rel=""nofollow"">Terms of Service</a>, particularly section F.1.  There are a couple of issues with this related to the language ""agree to allow"" and the fact that these are not all the rights someone may want or need, depending on what they want to do with the code.</p>

<p>But your hypothetical also says the company attaches a commercial license to the code with restrictive terms.  These terms likely would override whatever rights are granted by the GitHub Terms of Service because they would be more specific. As a consumer or small business, you would be risking copyright infringement if you did not abide by the terms of the commercial license and made use of the code.  If a court decided you had accepted the license by your actions, then you may be liable for breach of contract as well.</p>

<p>So, yes, as a software publisher, you could go after people who download your code from GitHub and violate the terms of the license.</p>
","2761"
"Sun Community Source License","105","","<p>Reference: <a href=""http://www.oracle.com/technetwork/java/scsl-1-1-149938.txt"" rel=""nofollow"">http://www.oracle.com/technetwork/java/scsl-1-1-149938.txt</a></p>

<p>I have a few questions about what I am allowed to do to stuff under this license.</p>

<p><strong>Forking</strong></p>

<p>I think what I'm generally allowed to do is to download the source code from Oracle (that part makes sure I'm a licensee) and modify it locally. And I'm not allowed to publicly post it to everyone. But what about a private repo at, say, bitbucket? If that's possible, then by the below, I don't seem to be able to even add contributors to it, unless I make sure they are licensees.</p>

<p><strong>Source code availability</strong></p>

<blockquote>
  <p>You may also post Error Corrections and Shared Modifications on a
  web-server of Your choice; provided, that You must take reasonable
  precautions to ensure that only Licensees have access to such Error
  Corrections and Shared Modifications.  Such precautions shall include,
  without limitation, a password protection scheme limited to Licensees
  and a click-on, download certification of Licensee status required of
  those attempting to download from the server.</p>
</blockquote>

<p>Let's say I setup a web page that has the required notice from Attachment A-2, and doesn't give the link until the user agrees. It also mentions a password protection scheme limited to Licensees. How am I supposed to set that up? Doesn't it mean I have to make sure the user logs in to Oracle's site, and then give him the links? I can't imagine a way to know if he has actually logged in to Oracle.</p>

<p><strong>Executable redistribution</strong></p>

<blockquote>
  <p>You may distribute Executable version(s) of Covered Code to Licensees
  and other third parties only for the purpose of evaluation and comment
  in connection with Research Use by You and under a license of Your
  choice, but which limits use of such Executable version(s) of Covered
  Code only to that purpose.</p>
</blockquote>

<p>That part I simply fail to understand. What is the actual requirement for sharing the executional with the third parties? And who are they anyway? Anyone who's not a licensee? What about distributing to third parties just for non-profitable personal use? How do we make sure they only evaluate and comment, but not actually personally <em>use</em> it? And what about the license of my choice? Do I apply that license to the executable? It all just mixes together in my eyes.</p>

<p><strong>Patch redistribution</strong></p>

<p>The way GnuPoc does it. However, am I allowed to redistribute patches that contain the code surrounding the parts being edited? Maybe it's disallowed to even have the original lines I'm be patching publicly visible? What about binary patches for an executable?</p>
","<p>That licence is far away from the four essential freedoms of the GPL and only allows to share with licensee and students of your research (as defined in the licence itself).</p>

<p>To answer to your questions:</p>

<p><strong>Source code availability</strong></p>

<p>To allow download the user must click on a button after this statement (as per the attachment A-2):</p>

<pre><code>By clicking the 'Agree' button below, You certify that You are a Licensee in good standing
under the Sun Community Source License, midp 2.0 and cldc(1.0.4-1.1) (""License"") and that 
Your access, use and distribution of code and information You may obtain at this site 
is subject to the License.
</code></pre>

<blockquote>
  <p>It also mentions a password protection scheme limited to Licensees.
  How am I supposed to set that up?</p>
</blockquote>

<p>You have plenty options, such as storing the archive with sources in a password protected page or set a password when you compress it and show that password once the user certified (with that statement) he/she is a Licensee in good standing.</p>

<blockquote>
  <p>Doesn't it mean I have to make sure the user logs in to Oracle's site,
  and then give him the links?</p>
</blockquote>

<p>No, the user certify it by herself clicking on the Agree button.</p>

<p><strong>Executable redistribution</strong></p>

<blockquote>
  <p>What is the actual requirement for sharing the executional with the
  third parties?</p>
</blockquote>

<p>Well, in effect it's a bit cucumbersome. It means that you can investigate and study the source code in order to establish facts and reach new conclusions. eg: you could recompile it with your own compiler and share it with third parties, only and exclusively to show that it's faster. They will not be allowed to use it on a regular base or in a commercial environment.</p>

<blockquote>
  <p>And who are they anyway? Anyone who's not a licensee?</p>
</blockquote>

<p>The licence says <strong>anyone</strong>, but for Research Use only.</p>

<blockquote>
  <p>What about distributing to third parties just for non-profitable
  personal use?</p>
</blockquote>

<p><strong>You can't.</strong></p>

<blockquote>
  <p>How do we make sure they only evaluate and comment, but not actually
  personally use it?</p>
</blockquote>

<p><strong>You can't.</strong> You must provide them the licence which specify what they can do or can't do. If they use it for any other use they're infringing the licence. Not your fault, nothing you can really do to avoid. They'll be personally responsible of their infringement.</p>

<blockquote>
  <p>And what about the license of my choice? Do I apply that license to
  the executable?</p>
</blockquote>

<p>You must choose a licence that will specify that they can't run it for anything else than Research or Comment. In your case it would be easier to use the same SCSL.</p>

<p><strong>Patch redistribution</strong></p>

<blockquote>
  <p>am I allowed to redistribute patches that contain the code surrounding
  the parts being edited?</p>
</blockquote>

<p>Only to licensee and students of your Research. </p>

<blockquote>
  <p>Maybe it's disallowed to even have the original lines I'm be patching
  publicly visible?</p>
</blockquote>

<p><strong>You can't</strong> share their code with third parties that aren't licensee or students of your research.</p>

<blockquote>
  <p>What about binary patches for an executable?</p>
</blockquote>

<p><strong>You can't</strong> share their code with third parties that aren't licensee or students of your research.</p>
","4940"
"Benefits of a CLA when using Apache 2.0 License","104","","<p>I understand that there are benefits to CLA for some licenses (as well as drawbacks and tradeoffs), however the Apache 2.0 License already has section 5 stating the following:</p>

<blockquote>
  <ol start=""5"">
  <li>Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</li>
  </ol>
</blockquote>

<p>Assuming pull requests are accepted through public channels, what benefit does a CLA actually provide beyond what is provided for in this license clause? More to the point, what sort of legal issues or court cases could arise?</p>

<p>Many CLAs require a lot of personal information that is a burden on the contributor and the licensor (contributor may want to stay anonymous and licensor may not want to deal with PII storage requirements).</p>

<p>It seems like the project could be made up of unidentifiable users contributing code directly to the project and that the license would cover this. Why would the provenance of code ever need to be called into question or a CLA explicitly signed?</p>

<p>Why would the contributor or their estate ever be allowed to back down from clause five and if they did why would having previous record of their real identity be necessary? The contributor would need to appear in court as a real entity to bring their case. If they can't prove in court that they are the anonymous contributor, then they do not have a case to begin with and if they can prove that link then it should be reasonable for the licensor to prove that any contributor was or should have been aware of the contribution guidelines which already act as a passive CLA.</p>

<p>Furthermore, can an Apache 2.0 licensed project without CLAs change it's license in the future? It seems like clause five combined with the sub-licensing allowances in the license would make this legally allowable.</p>

<p>I understand that from a lawyer's perspective, the more legal body armor the better, but I can't think of an actual example in which the CLA as well as contributor PII collection would somehow end up being necessary in court (once again given Apache 2.0 clause five as well as public channels for pull request review). Do courts ever ask someone to provide a record of all copyright holding contributors?</p>
","<p>First of all, you don't need a CLA. The general assumption when someone contributes to an open source project is that they accept to license their contribution under the license of the project. The clause you mentioned in Apache 2.0 just makes this explicit as explained here <a href=""https://opensource.stackexchange.com/questions/5512/does-inbound-outbound-apply-to-apache-2-0-without-a-cla?rq=1"">Does inbound=outbound apply to Apache 2.0 without a CLA?</a></p>

<blockquote>
  <p>Furthermore, can an Apache 2.0 licensed project without CLAs change it's license in the future? It seems like clause five combined with the sub-licensing allowances in the license would make this legally allowable.</p>
</blockquote>

<p>Indeed, an Apache 2.0 licensed project without CLA can change its license to a compatible license in the future since this is allowed by the license.</p>

<p>However, such a project cannot be relicensed to e.g. GPL v2 which is not compatible. Depending on the terms, a CLA could allow this.</p>

<p>Finally, CTAs (Copyright Transfer Agreements) can be also useful to enforce copyright. At least this is <a href=""https://www.gnu.org/licenses/why-assign.html"" rel=""nofollow noreferrer"">what the FSF argues</a>.</p>

<p>EDIT: @LarryGritz's answer made me think about something else that a CLA can be used for: getting a declaration from the contributor that they are the copyright owner of the code their produce or, if they reused existing open source code, that they checked the conditions for including / re-licensing it were met.</p>
","5588"
"Distributing an operating system DVD bundling proprietary and GNU-GPL software?","104","","<p>Wikipedia seems to imply that <a href=""https://en.wikipedia.org/wiki/Turbolinux"">Turbolinux</a> bundles proprietary codecs.</p>

<p>More generally, under what conditions is it OK to mix proprietary and GNU-GPLv3 software into an operating system, and distribute it on a DVD?</p>
","<p>It is OK, as long as no derivate software (or other product) derives from both. Distributing them together is another matter, and to be precise in the <a href=""http://opensource.org/osd"" rel=""nofollow"">Open Source Definition</a> it is clearly stated, that open source licenses cannot restrict bundling:</p>

<blockquote>
  <p><strong>1. Free Redistribution</strong></p>
  
  <p>The license shall not restrict any party from selling or giving away the software as a component of an aggregate
  software distribution containing programs from several different
  sources. The license shall not require a royalty or other fee for such
  sale.</p>
</blockquote>

<p>Some frown upon such distributions although it is conforming to the licenses involved. It doesn't only is true for TurboLinux, nearly every Linux-distribution has unfree parts. The FSF <a href=""https://www.gnu.org/distros/free-distros.html"" rel=""nofollow"">lists completely free Linux distributions</a>.</p>
","355"
"How to deal with unofficial/proprietary licences - are open source projects of this type really open?","104","","<p>Recently I was confronted with several projects that claim to be open source. I was happy to find their source code on a public repository but when looking at the license I was wondering why they do not take up official open source licenses but introduce their own proprietary licenses.</p>

<p>In my opinion, this  severely hinders the uptake of these works - as non-experts on licensing cannot evaluate if the proprietary license statements are OK. Hence the conditions of usage of the source code are left ambiguous.</p>
","<p>Beware of projects which claim to be open source but don't have a standard license <a href=""https://www.gnu.org/licenses/license-list.html"" rel=""nofollow noreferrer"">approved by the FSF</a> or <a href=""http://opensource.org/licenses/alphabetical"" rel=""nofollow noreferrer"">approved by the OSI</a>.</p>

<ol>
<li>Some people misunderstand what <em>""Open Source""</em> actually means. It is a very common misconception that simply allowing people to look at the source makes it open source. It doesn't - that's called <em>""Source Available""</em>. To be really open source, a project must be licensed under a license which fulfills <a href=""http://opensource.org/osd"" rel=""nofollow noreferrer"">the open source definition</a>. A very popular license clause some people try but which prevents a project from being open is a non-commercial clause. It violates the right of ""No Discrimination Against Fields of Endeavor, Persons or Groups"". It's far better to just use an existing license like the GPL which theoretically allows commercial use but practically has various conditions which make most common business models these people are usually afraid of completely infeasible.</li>
<li><a href=""https://opensource.stackexchange.com/questions/230/can-i-create-my-own-license-by-modifying-an-existing-one/252#252"">Writing licenses is hard</a>. Licenses are legal documents. When you are not a trained lawyer and try to write one, it will likely not say what you want it to say or include clauses which are simply invalid or meaningless. So even when the author understood the definition of open source and wants his project to follow this philosophy, their homebrewed license might still be proprietary without them realizing.</li>
</ol>

<p>So how to deal with such licenses?</p>

<p>When the license is short, you could try to evaluate for yourself if it fulfills the <a href=""http://opensource.org/osd"" rel=""nofollow noreferrer"">open source definition</a> or <a href=""http://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">the definition of free software</a>. But when the license is longer or hard to understand, chances are that as a legal layman you will be out of your league. The best advise would be to ask a lawyer, but unless you have commercial interest in the software, you likely don't want to afford one.</p>

<p>You could also try to convince the author to switch to an approved open source license. There are so many licenses available that they will likely find one which says what they want (as long as what they want is actually open source). When they still do not want to abandon their own license, you might be able to convince them to at least dual-license the software under both their homebrewed license and a proper open-source license so that people can choose which one to use.</p>

<p>When they also refuse to do that, you might still decide to use it and even contribute to it, but you must be aware that the software might be <em>gratis</em> but not <em>free</em> and that when you contribute, you might be performing gratis work for a proprietary product. What you should do under no circumstances is merge the code into another project. That way you plant a legal landmine in the other project which might not just blow up on you but also on any downstream users.</p>
","773"
"How to license Stack Overflow contributions as permissive as possible?","104","","<blockquote>
  <p><strong>Important: <a href=""https://meta.stackexchange.com/q/271080/162730"">this related Meta Stack Exchange post</a>.</strong></p>
</blockquote>

<hr>

<p>Code you post on Stack Overflow is licensed ""<a href=""http://creativecommons.org/licenses/by-sa/3.0/"" rel=""nofollow noreferrer"">cc-by-sa 3.0 with attribution required</a>"". Now this <em>may</em> pose problems for people wanting to use my contributions depending on what license they have for their own software. I want to prevent such obstacles for others as much as possible, and found <a href=""https://meta.stackexchange.com/a/165090/162730"">this advice on uber-meta</a> which comes down to placing a dual-license notice at the bottom of answers. </p>

<p>Comments on <a href=""https://meta.stackoverflow.com/q/271293/419956"">this SO meta question</a> also suggest leaving a notice along these lines...</p>

<blockquote>
  <p>Unless noted otherwise, all my questions and answers on Stack Overflow are also released under X.</p>
</blockquote>

<p><sup>(where X is wtfpl, public domain, or some other very permissive license)</sup></p>

<p>...in your user profile is enough.</p>

<p>Now, to the question: what's the best way to make sure as many people as possible can use my SO contributions, with as little as possible restrictions?</p>

<p>Is leaving such a comment in your profile enough? And on a side note: wouldn't this pose problems if your answer uses / builds on snippets from other answers or even other open source libraries?</p>
","<p><strong>What's the best license?</strong><br>
To make sure as many people can use your contributions as possible, you should license them as public domain. Anyone can then use your work with no restrictions. However, this is not possible in some jurisdictions: look up where you live and if it's not possible, use CC0 instead.</p>

<p><strong>Is that enough?</strong><br>
Yes. You're the copyright owner, you can do as you like with your work. In your profile is not immediately obvious, but it <em>does</em> confer the license (or public domain) because you've explicitly said so. If you want it to me more obvious, try adding a <code>&lt;sub&gt;</code> or <code>&lt;sup&gt;</code> note after your code snippets that says they're CC0 or public domain.</p>

<p><strong>Can it cause problems?</strong><br>
Yes. If you're building on others' code, you still have to abide by their licenses and restrictions. If you've got a note in your profile that everything you post is under CC0, this requires that you add a <code>&lt;sub&gt;</code> or <code>&lt;sup&gt;</code> note that says this code is <em>not</em> under CC0 because X.</p>
","905"
"How to retain complete copyright on a GitHub open source project","104","","<p>I'm about to start a project and make it 'open source' cause I really like it, and would fit perfectly my project spirit. The project is divided in 2 parts:</p>

<ul>
<li>The main application, whose anyone could contribute with code</li>
<li>The database, built by users entry</li>
</ul>

<p>Also, I want to release code on GitHub, so anyone can see how it's made and eventually contribute on any of the many parts it's composed, and all data in my database freely visible on my website.</p>

<p><strong>The problem</strong>: <a href=""https://retropie.org.uk/forum/topic/8477/legal-help-needed"" rel=""nofollow noreferrer"">My favorite open source project has been attacked in a very simple but effective way</a>, and I fear that I could fall it the same kind of trap.</p>

<p><a href=""https://www.reddit.com/r/SubredditDrama/comments/6fv3k3/a_tale_of_dmcas_and_borderless_gaming_in/"" rel=""nofollow noreferrer"">Another pretty popular application I know had make a very different but problematic issues with licensing.</a></p>

<p>Worse of all I fear that anyone (a single person or a company) could take my code and make a proprietary version of my software, or fork it and make another separate version that develop separately, making it not contributing on my project.</p>

<p>At the same time I want to retain maximum copyrights on project's destinations and data/code, in a way that I could make deal with partners/make a separate donators version or something like that. Summing:</p>

<p>I want to make code/data:</p>

<ul>
<li>totally open for view</li>
<li>totally open for editing/contributing</li>
<li>free to use/free to download, in any fields</li>
</ul>

<p>but</p>

<ul>
<li>retaining copyrights on ALL code/data (= hold copyrights on my and user's contributions)</li>
<li>give me the power to monetize in some kind of way, if I want</li>
<li>avoid developing of separate project using my project's code/data.</li>
</ul>

<p>Maybe I know it sound a kinda dictatorial, but I fear that someday I could lost power to decide the future of the app or make me battle against a derivative of my own code.</p>

<p><strong>Ideas</strong>:</p>

<p>I could license the projects in this way:</p>

<ul>
<li><p>Data (on my site) - Creative Commons BY-NC-ND-SA (So anyone could use it for various personal project, and make it free to view/use without having to worry about stealing of using in a commercial way, letting me monetize it in any way I like)</p></li>
<li><p>Code (on GitHub) - ? (What license respect all the premises I've done?)</p></li>
</ul>

<p>I really want to make something free for all, retaining in the same way the power to lead the project in the best direction for all!</p>
","<p>The three freedoms you say you want to give (totally open for view, totally open for editing/contributing, free to use/free to download) are not contentious, so I'll focus on the restrictions you want to add: how to implement them, and whether or not they stop your software being considered free.</p>

<ul>
<li><p>Retaining copyrights on ALL code/data (= hold copyrights on my and user's contributions)</p>

<p>This is achieved by requiring any contributors to your codebase to complete a <em>copyright assignment</em>.  The practice isn't unheard of; the FSF requires that contributors to GNU software <a href=""https://www.gnu.org/software/hurd/contributing/copyright_assignment.html"" rel=""noreferrer"">assign the copyrights to the Foundation</a>.  Some people have issues with copyright assignments, so you may well find that the pool of contributors to your project is reduced; but requiring one doesn't make your software non-free.</p></li>
<li><p>Give me the power to monetize in some kind of way, if I want</p>

<p>This is achieved by <a href=""https://en.wikipedia.org/wiki/Multi-licensing"" rel=""noreferrer"">dual-licensing</a> your code, which you can do as copyright holder (see above).  You allow others to use your software without the obligations that traditionally attach to strongly-copylefted software in return for money.  It is possible to dual-license weakly-copylefted software, but since a weak copyleft doesn't prevent commercial use without obligations there's no real incentive for anyone to buy your commercial license.</p></li>
<li><p>Avoid developing of separate project using my project's code/data</p>

<p>This is the problem one.  The <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""noreferrer"">four freedoms</a> of free software include the freedom <em>to study how the program works, and change it as you wish</em>, and the freedom <em>to distribute copies of your modified versions to others</em>.  Note that if you try to constrain those freedoms, you can't claim you are giving them; they must be unfettered for your claims to be taken seriously.  So saying ""<em>everyone can contribute to my project, but only through my organisation and after assigning copyright to me</em>"" will not satisfy the definition of freedom one, and although you can certainly do it, people will not regard your software as free if you require this.</p></li>
</ul>

<p>So there is no free software license that will achieve your goals.  Although their licences are not felt to be good for software, the Creative Commons <a href=""https://creativecommons.org/licenses/by-nd/4.0/"" rel=""noreferrer"">BY-ND</a> license comes pretty close to doing what you want, and you might find it sufficient for your needs.</p>
","5715"
"Shouldn't LGPL v3.0 provide exception to section 5 (instead of section 3) of GPL v3.0?","104","","<p>Taken from section 1 LGPL v3.0 (<a href=""https://www.gnu.org/licenses/lgpl-3.0.en.html"" rel=""noreferrer"">https://www.gnu.org/licenses/lgpl-3.0.en.html</a>):</p>

<blockquote>
  <p>You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.</p>
</blockquote>

<p>Section 3 of GPL v3.0 (<a href=""https://www.gnu.org/licenses/gpl-3.0.html"" rel=""noreferrer"">https://www.gnu.org/licenses/gpl-3.0.html</a>) states:</p>

<blockquote>
  <ol start=""3"">
  <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li>
  </ol>
  
  <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p>
  
  <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>
</blockquote>

<p>Shouldn't section 1 of LGPL v3.0 provide exception to section 5 of GPL v3.0 instead? Section 5 of GPL speaks about conveying modified source versions, which is what is covered by sections 3 and 4 of LGPL v3.0</p>
","<p>I think @apsillers' general conclusion is correct - that one does not have to license the entire work under GPL v3.0 - but I have a bit different understanding as to why. After reading through the licenses again, to my understanding, there is no language in the licenses that would allow one to ""choose a permission"" to apply. Following the text of the licenses:</p>

<p>Both licenses begin by some definitions. From GPL v3.0:</p>

<blockquote>
  <p>A “covered work” means either the unmodified Program or a work based on the Program.</p>
</blockquote>

<p>From LGPL v3.0:</p>

<blockquote>
  <p>“The Library” refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.</p>
  
  <p>An “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p>
  
  <p>A “Combined Work” is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the “Linked Version”.</p>
</blockquote>

<p>Surely, work that meets the definition of a <code>Combined Work</code> (LGPL) also meets the definition of a <code>covered work</code> (GPL). In other words, all works meeting the definition of a <code>covered work</code> (GPL) form a (strict) superset of all works meeting the definition of a <code>Combined Work</code> (LGPL). Section 5 of GPL v3.0 gives one a permission to convey a <code>covered work</code> (and thus any <code>Combined Work</code>), but with some restrictions - one of them being the requirement to license the entire work under GPL v3.0.</p>

<p>However, if the <code>Program</code> one's work is based on is licensed under LGPL v3.0 and the entire work also meets the more restrictive definition of a <code>Combined Work</code> (LGPL), one can convey such work (taken from section 4 of LGPL v3.0)</p>

<blockquote>
  <p>under terms of your choice</p>
</blockquote>

<p>This is what overrides the restriction of point c), section 5 of GPL v3.0 (requirement to license the entire work under GPL v3.0).</p>

<p>So to answer my original question and correct my initial understanding of the language:</p>

<ul>
<li>No, LGPL v3.0 should not provide an exception to section 5 of GPL v3.0</li>
<li>No, one does not have to license the entire <code>Combined Work</code> (LGPL) under GPL v3.0 due to section 5 of GPL v3.0 upon conveying</li>
</ul>
","5199"
"Concise GPL requirements summary list","103","","<p>I find <a href=""http://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">the current version of the GPL</a> to be relatively short and easy to read. However, some people seem to see a <a href=""http://uncyclopedia.wikia.com/wiki/Wall_of_Text"" rel=""nofollow noreferrer"">wall of text</a> and cannot get through it. Thus <a href=""https://opensource.stackexchange.com/questions/1889/is-requiring-a-license-a-violation-of-the-gpl-can-i-get-around-it"">we have</a> many <a href=""https://opensource.stackexchange.com/questions/176/do-i-really-need-to-include-a-licence-file-for-common-licences-like-gpl-or-mit"">questions asked</a> here <a href=""https://opensource.stackexchange.com/questions/35/if-i-include-some-gpl-code-in-my-project-can-i-release-it-as-bsd"">that are</a> specifically <a href=""https://opensource.stackexchange.com/questions/1399/can-gpl-licenced-software-be-used-in-corporate-environments"">addressed</a> in the text. <strong>People don't seem to have the attention span for 14 screenfulls of text.</strong></p>

<p>The <a href=""http://www.apache.org/foundation/license-faq.html"" rel=""nofollow noreferrer"">Apache license</a> has a terrific summary on the webpage for the license:</p>

<blockquote>
  <p>It allows you to:</p>
  
  <ul>
  <li><p>freely download and use Apache software, in whole or in part, for personal, company internal, or commercial purposes;</p></li>
  <li><p>use Apache software in packages or distributions that you create.</p></li>
  </ul>
  
  <p>It forbids you to:</p>
  
  <ul>
  <li><p>redistribute any piece of Apache-originated software without proper attribution;</p></li>
  <li><p>use any marks owned by The Apache Software Foundation in any way that might state or imply that the Foundation endorses your distribution;</p></li>
  <li><p>use any marks owned by The Apache Software Foundation in any way that might state or imply that you created the Apache software in question.</p></li>
  </ul>
  
  <p>It requires you to:</p>
  
  <ul>
  <li><p>include a copy of the license in any redistribution you may make that includes Apache software;</p></li>
  <li><p>provide clear attribution to The Apache Software Foundation for any distributions that include Apache software.</p></li>
  </ul>
  
  <p>It does not require you to:</p>
  
  <ul>
  <li><p>include the source of the Apache software itself, or of any modifications you may have made to it, in any redistribution you may assemble that includes it;</p></li>
  <li><p>submit changes that you make to the software back to the Apache Software Foundation (though such feedback is encouraged).</p></li>
  </ul>
</blockquote>

<p>Is there a similar list of bullet points compiled for the GPL or other FOSS licenses, such as MIT?</p>
","<p>The GPL is a much more intricate license than the Apache license, and the MIT/Expat license is much simpler.</p>

<p>The MIT License reads</p>

<blockquote>
  <p>Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the ""Software""), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:</p>
  
  <p>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</p>
</blockquote>

<p>It's too short to usefully make a point by point list.</p>

<p>The GPL is more intricate than the Apache license, which may not be as suitable for a bulleted list approach. The FSF releases <a href=""http://www.gnu.org/licenses/gpl-faq.en.html"" rel=""nofollow"">a FAQ</a>, which is something. Some others have attempted to do this though, for example tldrlegal tries to do so for many licenses. It's overview of the GPLv3 is here: <a href=""https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)"" rel=""nofollow"">https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)</a></p>

<p>Such a list is no replacement for the actual license text, but may give you a quick idea.</p>
","1996"
"Do I have full rights over derived works of my CC BY works?","103","","<p>Suppose I publish a product under a CC-BY license. Someone takes my product and remakes it into a slightly different product and publishes that under another license.</p>

<p>Even though a version of my product has been changed published and re licensed. Can I use their version for anything I want despite the license it was published under?</p>
","<p>No.</p>

<p>You decide what conditions you publish your product under. With CC-BY that is that you require only attribution.</p>

<p>They decide what conditions they publish their derived product under. You have to abide by the rules they set, just as they have to abide by yours.</p>

<p>The CC-BY-SA license has a Share Alike (SA) clause. This obliges people using your product to, if they publish derivatives, publish under a license that grants the same rights. This gives you the possibility to use <em>their</em> derivative work under the same terms they are using <em>your</em> original work</p>
","727"
"How could the open source business model work with games?","103","","<p>The question <a href=""https://opensource.stackexchange.com/questions/88/how-can-large-open-source-projects-be-monetized/"">""How can a large open source project be monetized?""</a> already addresses many ways to make money with open source development. However, in the context of game development, most of these points don't work.</p>

<p>Corporate sponsorship? Games are targeted at consumers. No company would see a strategical benefit in throwing money at a game.</p>

<p>In-game advertisement? Breaks immersion, and <a href=""https://opensource.stackexchange.com/questions/2144/preventing-people-from-forking-and-profiting-over-minor-changes"">the community can just patch them out</a>.</p>

<p>Support contracts? Gamers are used to asking for help on message boards rather than contact the developers directly. Nobody would pay just for that.</p>

<p>Customization services? Any game which is customizable attracts a modding community of people offering customization for free. Also, no player will be willing to cover the cost for a feature only they want all alone.</p>

<p>Is there a business model which generates enough revenue to fund the development of a game and benefits from keeping it open source?</p>
","<p>Lots of software is focused on solving a particular problem (e.g., performing calculations, handling point of sale transactions, visually rendering and editing pictures/graphs). In those cases, the software is a means to an end: the end user has a need, and they use the software to fill that need. In such cases, there is often an obvious path to monetization: pay to add new features to fill unmet needs, pay to get better guides on how to use the software to meet users' needs.</p>

<p>In a video game context, using the software <em>is</em> the end goal. There's no deeper objective external to the software, other than to be entertained. This cuts out a lot of monetization options. Furthermore, it's often <em>inherently fun</em> to create modifications to a game (versus making modification to, say, a point-of-sale program or a spreadsheet program), so you'll have a lot of hobby-based competition for implementing features. You could still possibly do it, if your for-pay modifications have a reputation for being head-and-shoulders above your hobbyist competitors, but it's still difficult to convince people to shell out for your mod when there's an extant gratis alternative.</p>

<p>The main options I can see are <strong>pre-release crowdfunding</strong> and <strong>non-free game content</strong>.</p>

<p>If you can create sufficient pre-release hype for your game, either by attractive marketing or by a proven history of previous good games, then you can get people to pay for your game before it comes out. You can gather funds from a crowdfunding website to pay for development of the game. In this case, you don't get any residual income after the game is released. People pay for the game to exist and be released into the wild; after that happens, you lose monopoly leverage over the game to monetize it.</p>

<p>Another approach is to release the source code of the game's engine under a free license, but keep the content under a non-free license. When you sell the game, you're really selling the content for the levels, since the open-source executable game is probably available elsewhere for free. It's a bit of a cheat to call this an ""open source business model"", since you entire game isn't really open source: you've merely divided it into free and non-free components and charge for the non-free part. Still, this gets you many of the benefits of open source: notably, others can fix bugs in your engine and you can pull back downstream improvements (provided downstream changes make their source code available). As an example, <a href=""http://indiegamebundle.wikia.com/wiki/List_of_Humble_Bundle_open_source_games"" rel=""noreferrer"">several games sold through the Humble Bundle</a> have employed this model.</p>

<p>As a less viable third option, if you're really big, you might be able to get away with leveraging your trademark and selling merchandise. As a far-fetched example, if Valve chose to release the next Half Life game under an open source license, they could still sell a lot of Half Life branded t-shirts, etc. As a less far-fetched example, if the developers for the <a href=""http://tremulous.net/"" rel=""noreferrer"">open-source first-person shooter Tremulous</a> chose to release a limited-edition run of branded stuffed animals modeled after the game's aliens, I might buy one.</p>
","2617"
"How do I stop republication under a different license?","103","","<p>Suppose I am finishing an open source software. I am about to publish it but I just have to choose the license. I want it to be a CC-BY license but I don't want anyone to republish it under ANY other license.</p>

<p><strong>My question:</strong></p>

<p>How do I stop future users from just publishing it under any other license? </p>

<p>I've also just found out about the ""ShareAlike"" attribute. Would this do what I want?</p>
","<p>If you want it to be a CC-BY (as asked in question) and don't want anyone to republish it under any other license, then you can use <a href=""https://en.wikipedia.org/wiki/Share-alike"" rel=""nofollow""><strong>Share-alike</strong></a> attribute.</p>

<p>From wikipedia:-</p>

<blockquote>
  <p>Share-alike is a <a href=""https://en.wikipedia.org/wiki/Copyright_license"" rel=""nofollow"">copyright licensing</a> term, originally used by the Creative Commons project, to describe works or licences that require copies or adaptations of the work to be released under the same or similar licence as the original</p>
</blockquote>

<p>Also visit: <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow"">CC BY-SA 4.0</a> which clearly following terms:-</p>

<blockquote>
  <p>ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the <a href=""https://creativecommons.org/licenses/by-sa/4.0/#"" rel=""nofollow"">same license</a> as the original. </p>
</blockquote>

<p>Also visit <a href=""https://wiki.creativecommons.org/wiki/Share_Alike"" rel=""nofollow""><strong>SA</strong>, aka Share Alike</a>:-</p>

<blockquote>
  <p>The Share Alike aspect requires all derivatives of a work to be licensed under the same (or a compatible) license as the original. Thus, if a person were to use parts of a BY-SA movie to create a new short film that new short film would also need to be licensed as BY-SA. <strong>The advantage of this license is that future users are not able to add new restrictions to a derivative of your work; their derivatives must be licensed the same way</strong>. </p>
</blockquote>

<p><sup>emphasis mine</sup></p>

<hr>

<p>Also visit these <a href=""http://www.gnu.org/copyleft/copyleft.en.html"" rel=""nofollow"">articles</a> on <a href=""http://en.wikipedia.org/wiki/Copyleft"" rel=""nofollow"">copyleft</a>.</p>
","753"
"Redistributing LGPL 2.1 code compiled by a proprietary compiler","103","","<p>Can I redistribute the binary form of someone's LGPL code compiled with a proprietary compiler which is not included in the operating system?</p>

<p>LGPL 2.1 says:</p>

<blockquote>
  <p>For an executable, the required form of the ""work that uses the Library"" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p>
  
  <p>It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.</p>
</blockquote>

<p>Do I have to redistribute the proprietary compiler, too? Of course, I don't have a permission to redistribute the proprietary compiler.</p>
","<p>I asked FSF the same question. This is the FSF's answer:</p>

<blockquote>
  <p>Please see: <a href=""http://www.gnu.org/licenses/gpl-faq.html#NonFreeTools"">http://www.gnu.org/licenses/gpl-faq.html#NonFreeTools</a></p>
  
  <p>I hope this is of help.</p>
</blockquote>

<p>I asked again:</p>

<blockquote>
  <p>For example, a proprietary UNIX includes a proprietary compiler.
  I can redistribute the executable of someone's LGPL program
  without redistributing the proprietary compiler because LGPL
  allows it as a 'special exception'. And, users can reproduce the
  executable with the proprietary compiler which is included in the
  OS.  I think the FAQ mentions about this case.</p>
  
  <p>LGPL ensures users can reproduce a functionally same executable.
  But, for example, if no compiler is included in the operating
  system, users can't reproduce the executable.  LGPL requests to
  redistribute any data and utility programs needed for reproducing
  the executable.  Do I have to redistribute the proprietary
  compiler in this case?</p>
</blockquote>

<p>FSF answered:</p>

<blockquote>
  <p>If the executable can be compiled with a different compiler, for
  instance one which is free software such as GCC, this shouldn't be an
  issue.</p>
</blockquote>
","4328"
"What license permits everything but gives credit?","103","","<p>So I have been looking for a while for a License which permits basically everything but gives me credit for the original work, I have had a look at the ISC, BSM, zLib and GPL license but am not sure if I understand them correctly. In short I want a license which:</p>

<ul>
<li>Gives me credit for the original work.</li>
<li>Does not hold me liable for any damages, indirectly or directly.</li>
<li>Is provided as-is and comes with no warranty. </li>
<li>Allows modification of the original source code/binary.</li>
<li>Allows the sale of modified and unmodified source code/binary.</li>
<li>Allows redistribution of any kind, even under different licenses.</li>
</ul>

<p>In short, you are free to do as you like with my code.<br>
I want my code to be open source too, so open-source licenses are fine.</p>
","<p>Of the many permissive licenses the ISC or MIT is one of the only that fits all you criteria. In particular <code>Allows redistribution of any kind, even under different licenses.</code> which translate in explicit legal terms as <a href=""https://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">""sublicense""</a>:</p>

<blockquote>
  <p>[...] to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, <strong>sublicense</strong>, and/or sell copies of the Software [...]</p>
</blockquote>

<p>Few other licenses have this spelled out explicitly. In particular the BSD (2 or 3 clauses) do not have an explicit <a href=""https://opensource.org/licenses/BSD-3-Clause"" rel=""nofollow noreferrer"">sublicensing</a> permission (though the opinion of many is that it is implied).</p>
","4917"
"Displaying MIT license modifications","102","","<h2>Background:</h2>

<p>I created an unofficial OSGeo addon, <a href=""https://github.com/pmcgover/24dev-demo"" rel=""nofollow noreferrer"" title=""24dev-demo"">24dev-demo</a> for a student's ""Software Digital Portfolio"" via github.com. A student may add or modify the software with their own code. Below is an example of a modified MIT license header they could use:</p>

<pre><code>Original work Copyright (c) 2015 John David Doe

Modified ""appName"", Added ""appName"" Copyright 2016 Mary Carol Doe
</code></pre>

<h2>Question:</h2>

<p>What is the proper/best way for a developer to ""publish"" their modifications/additions to the original MIT copyright license? </p>
","<p>Here is the license file of a ""template"" project: <a href=""https://github.com/gmalecha/coq-plugin-template/blob/master/LICENSE"" rel=""nofollow noreferrer"">https://github.com/gmalecha/coq-plugin-template/blob/master/LICENSE</a>.</p>

<p>And the README contains this instruction:</p>

<blockquote>
  <p>7) Update the LICENSE file by completing the line for your copyright claim or add your own license statement if you don't want to use MIT.</p>
</blockquote>

<p>MIT license doesn't require anything more (no need for instance to list the modifications that were made).</p>
","4711"
"Licence for open-source code which is part of proprietary code?","102","","<p>I've a proprietary program which is using OOP classes which I want to publish as FOSS (only the classes).</p>

<p>Which FOSS compatible license I can choose for the classes which will work with my proprietary program which I'm selling?</p>

<p>I was thinking about GNU GPL, but if I understand correctly, I've to distribute my entire proprietary program as GNU GPL (since it's <a href=""https://opensource.stackexchange.com/q/335/407"">build on top of it</a>, or maybe other way round), so it doesn't make sense.</p>

<p>Which license would you recommend for these open-source OOP classes, so they may be compatible with my proprietary code (which is including them)?</p>
","<blockquote>
  <p>Which FOSS compatible license I can choose for the classes which will work with my proprietary program which I'm selling?</p>
</blockquote>

<p>As the author of your code (or more accurately the copyright holder), you are free to release under any license you like including multiple licenses.</p>

<blockquote>
  <p>I was thinking about GNU GPL, but if I understand correctly, I've to distribute my entire proprietary program as GNU GPL (since it's build on top of it, or maybe other way round), so it doesn't make sense.</p>
</blockquote>

<p>The same code could be used by you under your proprietary license or by others under the GPL. This is commonly called a ""dual license"".</p>

<p>Now the important decision on your part is about receiving contributions on these FOSS-released classes.</p>

<p>If you accept contributions under the GPL, then read this thread <a href=""https://opensource.stackexchange.com/questions/1459/proprietary-software-using-gpl-modules"">Proprietary software using GPL modules</a></p>

<p>Alternatively you could use a CLA. See for instance <a href=""https://opensource.stackexchange.com/questions/23/what-are-the-advantages-of-adding-a-contributor-license-agreement-to-a-project"">What are the advantages of adding a Contributor License Agreement to a project?</a></p>

<blockquote>
  <p>Which license would you recommend for these open-source OOP classes, so they may be compatible with my proprietary code (which is including them)?</p>
</blockquote>

<p>If I were in your shoes, my personal goal would be to make it easy for others to contribute and reuse my code. I would likely use a permissive or weaker copyleft license and accept contributions under that license. For instance a GPL with exception, an LGPL, or a BSD, MIT or Apache. In doing so, I would accept contributions under the same terms and would possibly reuse the improved code in my proprietary application under these same terms.</p>
","2901"
"Licensing code on GitHub in a valid way","102","","<p>I'm currently developing something on GitHub. I would like to keep it open source; however I want to make sure in no way am I liable for any issues, and that my code cannot simply be copied and claimed as someone else's. For this it appears the MIT license is good; maybe a different one can be suggested?</p>

<p>My actual questions are:</p>

<ul>
<li>How would I go about licensing my work? Do I have to apply or register with some kind of group or organisation to be able to use a license given in the list of GitHub templates, or can I just slap a template on my work?</li>
<li>Another thing I noticed is that the MIT license template sticks a Copyright notice on the work. Do I have to apply for this copyright in any way, or is slapping it on once again enough for it to be valid?</li>
<li>Lastly, is the Full Name given under the Copyright notice valid if I use my internet name, DevelopedLogic, or do I have to apply my actual, real-life name?</li>
</ul>
","<blockquote>
  <p>I want to make sure in no way am I liable for any issues, and that my code cannot simply be copied and claimed as someone else's.</p>
</blockquote>

<p>You want a license that includes a disclaimer of liability (often in ALL CAPS) and requires maintaining attribution. Virtually any mainstream open source license will include both of these. The MIT license is perfectly suitable and doesn't contain any other baggage, either. You might also be interested in the Apache 2.0 license, which is quite similar but licenses patent rights as well as copyright rights. (This is helpful for recipients, since they know you won't sue them for patent infringement later.)</p>

<blockquote>
  <p>Do I have to apply or register with some kind of group or organisation to be able to use a license given in the list of GitHub templates, or can I just slap a template on my work?</p>
</blockquote>

<p>Any open source license you see is free to use; you will not encounter any legal trouble if you use any mainstream OSI-approved license. The texts of these licenses are, I guess, technically copyrighted, but their authors deliberately offer them to the public exactly so that you can include them in your projects. Please do that!</p>

<blockquote>
  <p>Another thing I notice is that the MIT license template sticks a Copyright notice on the work. Do I have to apply for this copyright in any way, or is slapping it on once again enough for it to be valid?</p>
</blockquote>

<p>In the 172 nations that are signatories of the <a href=""https://en.wikipedia.org/wiki/Berne_Convention"" rel=""nofollow noreferrer"">Berne Convention</a>, copyright automatically applies to a work at the moment it is fixed in a tangible form. Your work <em>does</em> have copyright rights attached because it is an original, tangibly expressed creative work. You are entitled to say so via a copyright notice.</p>

<p>Note that in some jurisdictions there are benefits to officially registering your copyright. In the United States if someone infringes your copyright on a work, you can only seek actual damages if the work was not registered with the U.S. Copyright Office at the time the infringement took place (i.e., you lost X dollars of potential sales and are demanding it back). If the work <em>was</em> registered during the infringement, you can seek statutory damages (i.e., punitive money that may be higher than the amount of actual money involved in the infringement).</p>

<blockquote>
  <p>Lastly, is the Full Name given under the Copyright notice valid if I use my internet name, DevelopedLogic, or do I have to apply my actual, real-life name?</p>
</blockquote>

<p>U.S. law <a href=""https://law.stackexchange.com/a/10911/84"">does not require real names on copyright registrations</a>, so I assume it wouldn't require them on copyright notices either. You may make things more difficult on yourself if you need to legally enforce your license, though, since you will need to take the extra step of associating your real identity with the pseudonym for the court proceedings. If, on balance, you think the small likelihood of that legal headache actually happening is less worrying than revealing your real name on the Internet, then go ahead and use your pseudonym.</p>
","5936"
"Handling copyright infringement in your own open source project","101","","<p>What do you do if you discover that some part of <em>your own</em> open source project infringes copyright?</p>

<p>Consider the following hypothetical situation. An open source project's maintainer finds code in his Github project which infringes copyright. i.e., There is code which he was responsible for which wasn't legally copied into the project. What should be the procedure to remedy it?</p>
","<p>If you find, or are notified, that you are infringing on the copyright of someone else, you have a few options.</p>

<ol>
<li><p>If the infringing code is under a copyright license that is compatible with the rest of your code and that has terms you can agree with, then you could re-add the copyright and license statements that were erroneously removed.</p></li>
<li><p>In all other cases, our only option is to remove the infringing code from your codebase. This will likely remove some features or break the application in other ways, but that is a consequence you will have to pay. However, you are allowed to add the features again, as long as you don't copy code without the proper permissions.</p></li>
</ol>
","5993"
"How to protect a web game with open-sourced code?","101","","<p>We (as in ""a bunch of friends"") are creating a text-based RPG online game. For sake of simplicity let's end it at that. We want to build it using open-source tools and technologies and we are fine with that. We were thinking about using MIT licence at the start. BUT.</p>

<p>Is there any way we can (kinda) assure that someone won't just grab the code, deploy on their server and stick a different name on it instead of contributing back to our project?</p>

<p>How to enforce (or promote) helping with the main project instead of splitting it (and the playerbase) into thousand little forks?</p>

<p>Any legal/licence advice? Or someone with practical insight/experience?</p>
","<p>If your concern is that others may modify your code and...</p>

<ul>
<li>don't license their modified client-side code under a free/open license, and</li>
<li>don't even publish their changes to the server-side code</li>
</ul>

<p>...then you want to publish your code under the <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html"" rel=""nofollow noreferrer"">Affero GPL (AGPL)</a>. A copyleft license like the GPL will take care of the first point, since the downstream author would be distributing a modified work, and the GPL requires modified works to remain licensed under the GPL. The second point is not covered by the GPL alone, though, since the GPL only covers distribution, and running private server-side code doesn't involve distribution to the users. The AGPL contains a requirement that if the software is modified and made available through a network, then the modified source code must be made available to the users of the software.</p>

<p>The AGPL will allow you to get access to the server-side content of forked versions. However, if your real concern is that such forks will <em>still</em> attract users away from your game, even if you have access to their forked source code, then you need to reflect a little more about the difference between your <em>software</em> and your <em>service</em>. For instance, the software that powers the popular discussion site reddit.com is <a href=""https://github.com/reddit/reddit"" rel=""nofollow noreferrer"">publicly available under an open source license</a>. Anyone is free to make their own Reddit-like site with minimal effort, but reddit.com has such a huge community that the clone site isn't likely to do well if it doesn't have any substantial advantages over the original.</p>

<p>The same goes for your game: multiplayer games are fun because of the other people you play with. If you do a good job building a strong community of players, then when a fork pops up, it will need some amazing improvements to make me abandon your existing player community in favor of this new game. (Plus, if your code is AGPL-licensed, you can pull in those changes as well, since the fork will be required to publish its source.)</p>
","4748"
"Dual license compatibility","100","","<p>Suppose I place work I publish under two licenses.</p>

<ol>
<li><p>If the two have conflicting attributes which property should be used.</p></li>
<li><p>Can you specify which properties you want two be applied from the two licenses?</p></li>
</ol>
","<p><strong>No, the two licenses don't have to be compatible</strong>.</p>

<p>If you are legally allowed to dual license something, usually because you are the copyright holder, you can pick any two licenses, even if they conflict. As a matter of fact, dual licensing is usually used to <em>get around license conflicts</em>, that is, by offering something under two conflicting licenses. One of the most notable examples is Mozilla Firefox, which is <a href=""https://en.wikipedia.org/wiki/Firefox#Licensing""><em>tri-licensed</em> under MPL, GPL and LGPL</a>. This was done because MPL, the original license it used, is incompatible with GPL.</p>

<p>When you dual license, it doesn't mean users must follow both licenses, especially if the licenses conflict, this would be impossible to do anyway. Instead, you may choose the license under which to receive the software. When you redistribute in turn, it is courteous (although not legally required) to pass on that dual licensing, as doing so does not limit the options of your users.</p>

<p>Also, you cannot ""pick and choose"" clauses within the two licenses, as you are creating a third license that the original author never agreed to.</p>

<p>This is a different situation to <em>sublicensing</em> or <em>relicensing</em>.</p>
","327"
"Is installing an old free version legal, if the new version is not free anymore?","100","","<p>Is it legal to install an old version of a software that was free but not anymore?</p>

<p>Version 1 was free, I use it for a year. Version 2 is not free anymore. Can I install (into a new environment) the version 1 or is it illegal?</p>

<p>Example:
Firefox is free, but tomorrow (not true) they change to software with commercial license. You still have the old version of the EXE for installing the version when it was free It looks legal as long as you do not update to the last version. 
Am I right?</p>
","<p>If you were given software under some Foo License, you may copy, distribute, and modify the software under the terms of the Foo License.</p>

<p>If the distributor of that software stops giving out new copies under the Foo License, that does not change the fact that you <em>did</em> receive a copy of it under the Foo License. As long as the licensor does not actively revoke your copy of the license, you cannot lose the rights granted to you. (Furthermore, many FOSS licenses are explicitly irrevocable. Furthermore still, there is legal precedent that simply making a work available under a FOSS license may often grant the licencor economic consideration, which would also make the license irrecoverable, or maybe at least not revocable without some kind payment to you, the licensee.)</p>

<p>You may need to take pains to prove that distribution did truly and legitimately happen under that original license, but you are legally in the right to continue operating under the specific license that was originally offered to you.</p>

<p>In your case, it's probably even simpler. If the author is still distributing Version 1 somewhere (e.g., in a ""Releases History"" page), then you don't even need to take pains to prove anything: if anyone complains about your continued redistribution of Version 1, you can very easily point to the place where Version 1 is <em>still publicly available</em> under the free Foo License.</p>
","4466"
"What should I do if maintainers are unresponsive/how can I become a maintainer?","100","","<p>I have just a couple years of experience in software development and in the past few months have been dipping my toes in the water of making open source contributions. It was very exciting when my first patch was accepted! Recently I've opened pull requests to a couple projects and have gotten no response from maintainers. In one case it's been 3-4 weeks and in the other about a week.</p>

<p>In both cases it isn't clear to me how actively the projects are being maintained. There have been commits in the last few months but in both cases I can see that I am not the only person to submit a pull request or open an issue and not get a response.</p>

<p>What should I do in a situation like this? I could fork the repositories and use my own versions of the software but then I don't feel like I'm contributing. Also, is there a path for me to express interest in helping out with maintaining the original repos? </p>
","<p>The primary way to contribute is by pull requests, just like you said. If your pull requests aren't accepted and you do not get any comments the project might as well be abandoned. </p>

<p>In this case I would open an issue/ticket and ask if you can participate as an maintainer. If you do not get a reply, create your own fork. Write a comment in your issue and say that you maintain an active fork so that other people can find it.</p>

<p>I don't see anything wrong with that. You tried your best to contribute to the main repos. The github issue is great approach, since it prevents multiple new forks, which in turn would make the application diverge and thus make it harder to find the new main repository or combine the development effort.</p>
","4191"
"Where to find people interested in contributing to an open source project?","100","","<p>A few contributors and I are working on a large-scale Ethereum app called the Decentralized News Network (<a href=""http://dnn.media"" rel=""nofollow noreferrer"">http://dnn.media</a>), or DNN. The application itself will be entirely open source and we are trying to figure out where to gain more interest from the open source community. </p>

<p>If anyone knows of where we can enlist support from the open source community, it would be appreciated greatly!</p>

<p><strong>Updated</strong>: I updated the phrasing of my question. I apologize if the original wording seemed to come across too much like an announcement.</p>
","<p>I think the question should be the other way around: How does people interested in Open Source development find you and your projects? My answer would be: be visible and provide easy ways to get engaged.</p>

<p>Being visible means to have a good homepage which explains the project as good as possible, write about it on blogs, news pages, social networks, go to conferences, etc. Release early &amp; release often. Also it is important to work in the open. Even if you are alone. Have a public repository right from the beginning, make pull requests so that people can see the code, the work and the workflow. This makes it more likely that people will join you.</p>

<p>Providing easy ways to engage means to have public mailing lists, maybe a forum, issue tracker and an IRC channel. I would also recommend to focus on open and free communication channels.</p>

<p>Then, if people find you, you need to start to build a community. Response to emails, forum entries, issues, etc. Tell people how they can help. Review pull requests in time and guide the people to other issues by asking them to review your or other pull requests. Trust people by giving them merge rights as soon as possible.</p>

<p>Hope this contain some useful tips.</p>
","5441"
"Can I use Free Software as basis for a web-service without distributing the source?","99","","<p>I want to provide a service, intended to make me money, based upon free software.</p>

<p>It consists of a free plugin (client) and a web-service.</p>

<p>The client is published as Open Source, and it is deployed as a plugin for some popular free CMS platforms (e.g. Drupal, Joomla, Wordpress) that <em>requires</em> its plugins to carry a FLOSS license.</p>

<p>All the plugin (client) really does is to provide a GUI to a web-service.  The web service is <em>not</em> available unless the user purchase an API key.  Without having this API key, the free plugin (client) is useless.</p>

<p>The plugin (client) is written by me, while the web-service is based upon publicly available Free Software written by somebody else, but <em>adapted</em> by me to become a web-service that communicates with my free plugin through an API also designed by me.  I do not want to share the adapted source code, and I believe I do not have to, since the web-server part is not shared with anyone (it just runs on my web-server).</p>

<p>Will this <em>always</em> be OK, or are there Free Software licenses (recognized as such by the FSF and OSI) that have restrictions in place that will <em>not</em> allow me to do this this?</p>
","<p>That depends on the license for the software used for the web-service. If we run trough all the licenses recognized by FSF and OSI, there are only two classes of licenses:</p>

<ol>
<li>The Gnu Affero General Public License.</li>
<li>All the <em>other</em> recognized licenses.</li>
</ol>

<p>The business model you describe is known as ""Software As A Service""  (SAAS).</p>

<p><em>Most</em> FLOSS licenses, including GPLv2 and GPLv3 allow you to use this business model.</p>

<p>I.e. you can take free software, add an API that requires the user to purchase a license key to access the API.  Because you never distribute your modified version of the software, you do not have to share its source code.</p>

<p>However, this business model <em>relies</em> on the web-service being closed source. If the web-service component was open source, anyone could download it and set up their own web-service and hand out API-keys to this alternate web-service for free.</p>

<p>The <a href=""http://www.gnu.org/licenses/agpl-3.0.en.html"">Gnu Affero GPL</a> (AGPL) does <em>not</em> allow you to modify free software for this <em>without</em> giving the public access to the source code of your modified version of the free software.</p>

<blockquote>
  <p>The GNU Affero General Public License is a modified version of the ordinary GNU GPL version 3. It has one added requirement: if you run a modified program on a server and let other users communicate with it there, your server must also allow them to download the source code corresponding to the modified version running there. (Source: <a href=""http://www.gnu.org/licenses/why-affero-gpl.en.html"">Why the Affero GPL</a>)</p>
</blockquote>
","1301"
"How to declare a license usage in android app","99","","<p>I'm building an app and willing to post it on play store.</p>

<ol>
<li><p>As common when build the app specially for the beginners like me, I used to ask questions at the web specially Stack Overflow about how to implement some methods, listeners,etc.. (not libraries) and got replies from different users. Now I don't now if my android app contains those techniques of implementing different methods and classes which I do not know whether it belongs to someone or not. From other side I also share some of my techniques to others when I got issues solved by myself.</p></li>
<li><p>I'm using openCSV library in my app, do I need to declare it in the license? and how?</p></li>
</ol>
","<p>If you were instructed by others on <strong>how</strong> to write the code in your app, the app code itself is still an original work by <strong>you</strong> and no license is necessary.  Even if they offered you 'snippets' the functions still originated by your hand.  If they have <strong>not</strong> notified you of their own license on code they shared, then any assistance given to you is covered under Stack Exchange's license, which is printed and linked at the bottom of this page.</p>

<p>It basically says what I just stated... 
<em>""All the content contributed to Stack Overflow or other Stack Exchange sites is cc-wiki (aka cc-by-sa) licensed, intended to be shared and remixed. We even provide all our data as a convenient data dump, seeded by us...""</em></p>

<p><strong>There is a license that is required to be included when using the openCSV library</strong>...it is listed in their repository: <a href=""http://opencsv.sourceforge.net/license.html"" rel=""nofollow noreferrer"">http://opencsv.sourceforge.net/license.html</a></p>

<p>You did not mention what language you are coding in, but pay attention to that as well... if your IDE is not including licensing for you, your language of choice could possibly have its own and/or others' licenses due to included libraries, frameworks, etc...</p>

<p>Congrats on your published app!  :-)</p>

<p>-shel.</p>
","4828"
"Is it possible to host a code bundle on GitHub pages without checking it into the repository?","99","","<p>Dear fellow open sorcerers,</p>

<p>I want to host a site on GitHub pages that shows examples of a JavaScript library I'm working on. The examples should of course use the latest version of the library.</p>

<p>For <code>index.html</code> to be able to use the library, I need to ship something like <code>mylib.dist.js</code>, just as I would on any site.</p>

<p>My question is, <strong>is there a way of doing this without checking <code>mylib.dist.js</code> into the repository</strong>? Is it best practise to have <code>gh-pages</code> be completely different from <code>master</code> and contain all kinds of compiled output?</p>

<p>A solution would be something like start scripts, configured in some file, kinda like <a href=""https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile"" rel=""nofollow noreferrer"">how Heroku's Procfile works</a>. However, I haven't found any docs on such a feature on GitHub.</p>

<p>For others that are as (perhaps irrationally) reluctant as me to source control dist bundles, do you have good alternatives?</p>
","<p>Yes, you can do this by <a href=""https://help.github.com/articles/creating-releases/"">creating a release</a> and <a href=""https://help.github.com/articles/about-releases/"">attaching a binary to the release</a>. Briefly, you do this by clicking the ""Releases"" link on the repository's main page and clicking the button to ""Draft a new release"". From there, look for the section to attach binaries to the release. (See the links in the first sentence for a detailed tutorial.)</p>

<p>Binaries are not part of your Git repository, but are stored separately by Github. Once you create the release, simply view it and copy the link to the binary you want to refer to.</p>
","4989"
"Selling computers with GPL licensed applications pre-installed","99","","<p>I would sell somes computers, each computer: </p>

<ul>
<li>Contains a MariaDB database (GPL v2).</li>
<li>Some web applications under apache/php (GPL v2 and/or GPL v3). These applications use MariaDB.</li>
</ul>

<p>I can't find an precise answer  about if I can sell theses computere despite the applications licences I use.<br>
My english is fair, I'm afraid miss important subtleties when I read the GPLv2/GPLv3 descriptions.</p>

<p>My questions: </p>

<ul>
<li>Can I sell computers to differents peoples with a GPL-v2 database and somes applications in GPL-v2 and GPL-v3?</li>
<li>Can I sell computers to differents peoples with a GPL-v2 database and only somes applications in GPL-v2?</li>
</ul>

<p>I read I must give the source code to my buyer. Are there other ""constraint""? </p>

<p>Can you help me and link official text sources if it's possible?</p>
","<p>Yes, you can sell computers to different people with software under GPL2 and/or GPL3. For example, as far as I know, there is no problem to sell a computer with Debian preinstalled.</p>

<p>As for the second question, I don't understand if when you say ""... only somes applications in GPL-v2 ... "" you intend that you have some GPL-v2 application and some proprietary application. I think the answer is yes anyway, provided that you have the right to sell the proprietary application(s).</p>

<p>The only constrain that I remember are that you must include a copy of the license and that you must provide, at least, a clear indication on where the source code is, a link to github for example, or a link to a downloadable zip file, since of course not everyone is interested to obtain the source code.</p>
","4108"
"What is a Creative Commons Free Cultural Work?","99","","<p>Upon choosing a license at the Creative Commons page, Creative Commons tells you if the license is a ""Free Culture License"", or whether it isn't.</p>

<p>What is a Free Cultural Work?</p>
","<p>The main idea is, <a href=""http://freedomdefined.org/Definition"" rel=""nofollow"">Free Culture</a> allows the covered work to be part of an ecosystem of reuse and improvement.</p>

<blockquote>
  <p>This document defines ""Free Cultural Works"" as works or expressions which can be freely studied, applied, copied and/or modified, by anyone, for any purpose.</p>
</blockquote>

<p>There are four freedoms <a href=""http://freedomdefined.org/Definition"" rel=""nofollow"">which define a Free Cultural License</a></p>

<blockquote>
  <ul>
  <li>the freedom to use the work and enjoy the benefits of using it</li>
  <li>the freedom to study the work and to apply knowledge acquired from it</li>
  <li>the freedom to make and redistribute copies, in whole or in part, of the information or expression</li>
  <li>the freedom to make changes and improvements, and to distribute derivative works</li>
  </ul>
</blockquote>

<p>And four attributes which additionally make a particular work a Free Cultural Work, beyond the license.</p>

<blockquote>
  <ul>
  <li>Availability of source data: Where a final work has been obtained through the compilation or processing of a source file or multiple source files, all underlying source data should be available alongside the work itself under the same conditions. This can be the score of a musical composition, the models used in a 3D scene, the data of a scientific publication, the source code of a computer application, or any other such information.</li>
  <li>Use of a free format: For digital files, the format in which the work is made available should not be protected by patents, unless a world-wide, unlimited and irrevocable royalty-free grant is given to make use of the patented technology. While non-free formats may sometimes be used for practical reasons, a free format copy must be available for the work to be considered free.</li>
  <li>No technical restrictions: The work must be available in a form where no technical measures are used to limit the freedoms enumerated above.</li>
  <li>No other restrictions or limitations: The work itself must not be covered by legal restrictions (patents, contracts, etc.) or limitations (such as privacy rights) which would impede the freedoms enumerated above. A work may make use of existing legal exemptions to copyright (in order to cite copyrighted works), though only the portions of it which are unambiguously free constitute a free work.</li>
  </ul>
</blockquote>
","439"
"How to combine multiple LICENSE notes into single file?","98","","<p>What is the exact format to combine multiple LICENSE notes from different projects into a single file?</p>

<p>The specific project is Python binding for OpenCV. The binding itself is MIT licensed, OpenCV is BSD and there is OpenCV dependency on FFMPEG, which is LGPL.</p>
","<p>There is no ""exact format"" as most licenses let you free in how to organize their notices.</p>

<p>One common pattern is to concatenate the different LICENSE in your own LICENSE file, starting with your own license information and an explanation that the following are the license notices of the various dependencies.</p>

<p>This is also something that you see a lot in About sections of applications.</p>

<p>Another solution, if you are keeping each dependency separate in their own folders, is to leave the LICENSE files there and just list the dependencies in your main LICENSE file with a note to look in the various folders for each license notice.</p>

<h3>Some examples</h3>

<ul>
<li><p>Microsoft's Visual Studio code keeps every third-party notice in a specific file: <a href=""https://github.com/Microsoft/vscode/blob/master/ThirdPartyNotices.txt"" rel=""nofollow"">https://github.com/Microsoft/vscode/blob/master/ThirdPartyNotices.txt</a>. They clearly mark the limit between each notice and add some additional legal wording on top. You really shouldn't need to do as much.</p></li>
<li><p>Github's linguist keeps all third-party licenses in a specific directory: <a href=""https://github.com/github/linguist/tree/master/vendor/licenses/grammar"" rel=""nofollow"">https://github.com/github/linguist/tree/master/vendor/licenses/grammar</a>. To each, they only add some metadata at the beginning. They do not otherwise change the content of the notice (see this funny example <a href=""https://github.com/github/linguist/blob/master/vendor/licenses/grammar/atom-language-clean.txt"" rel=""nofollow"">https://github.com/github/linguist/blob/master/vendor/licenses/grammar/atom-language-clean.txt</a> where <code>&lt;Your name here&gt;</code> still appears). Additionally, the README contains the following notice:</p></li>
</ul>

<blockquote>
  <p>The language grammars included in this gem are covered by their repositories' respective licenses. grammars.yml specifies the repository for each grammar.</p>
  
  <p>All other files are covered by the MIT license, see LICENSE.</p>
</blockquote>

<ul>
<li>If you have Firefox, you can go to <code>about:license</code>. It starts with the following:</li>
</ul>

<blockquote>
  <p>Binaries of this product have been made available to you by the Mozilla Project under the Mozilla Public License 2.0 (MPL). Know your rights.</p>
  
  <p>All of the source code to this product is available under licenses which are both free and open source. A URL identifying the specific source code used to create this copy can be found on the build configuration page, and you can read instructions on how to download and build the code for yourself.</p>
  
  <p>More specifically, most of the source code is available under the Mozilla Public License 2.0 (MPL). The MPL has a FAQ to help you understand it. The remainder of the software which is not under the MPL is available under one of a variety of other free and open source licenses. Those that require reproduction of the license text in the distribution are given below. (Note: your copy of this product may not contain code covered by one or more of the licenses listed here, depending on the exact product and version you choose.) </p>
</blockquote>

<p>Then they give the list of notices and to which files they apply.</p>
","4514"
"AGPLv3 §13 and non-interactive software","97","","<p>See <a href=""http://www.gnu.org/licenses/agpl-3.0.en.html#section13"" rel=""nofollow"">AGPLv3 §13 (Remote Network Interaction)</a>.</p>

<blockquote>
  <p>Notwithstanding any other provision of this License, if you modify the
  Program, <strong>your modified version must prominently offer all users
  interacting with it remotely</strong> through a computer network (if your
  version supports such interaction) an opportunity to receive the
  Corresponding Source of your version ...</p>
</blockquote>

<p>Assume I'd want to write a VNC server. It is clear that the user does not directly interact with the software but rather with the applications displaying on the framebuffer which is serverved by the software.  </p>

<p>However, it is still technically possible for the software to inject some text/information (e.g. for some seconds on the first connect) into the framebuffer being encoded that ""<em>prominently offers all users interacting ... the corresponding source</em>"".  </p>

<p>As far as I understand this requirement for the source code offer only applies if the program was modified - right?  </p>

<p>So would I have to ship this functionality (injecting a prominent message in the framebuffer) in the source so that someone who modifies the code has an easy way to activate this framebuffer overlay in order to comply with the license?</p>

<p>If not, how could someone modifying the source comply with the license?</p>

<p>Since this overlay might be quite annoying It should not be required for users who e.g. install a debian package.
But Linux distributions normally do make modifications to source codes, hence thez would have to enable this nag screen - right ?</p>

<p>If so, do modifications like security patches or other distribution specific patches (like path changes etc.) count as modifications ?
If that is the case, how would one make an exception that distribution specific patches must not trigger the ""prominent offer"" requirement ?</p>
","<p>You'll find a similar issue in the <a href=""http://www.gnu.org/licenses/gpl-faq.html#AGPLProxy"" rel=""nofollow"">GPL FAQ</a>:</p>

<blockquote>
  <p><strong>For software that runs a proxy server licensed under the AGPL, how can I provide an offer of source to users interacting with that
  code?</strong>   </p>
  
  <p>For software on a proxy server, you can provide an offer of
  source through a normal method of delivering messages to users of that
  kind of proxy. For example, a Web proxy could use a landing page. When
  users initially start using the proxy, you can direct them to a page
  with the offer of source along with any other information you choose
  to provide ...</p>
</blockquote>

<p>Although a proxy server is quite different from a VNC server it is a perfect example to understand the license authors' intention: Use any available means to display the offer of source.</p>

<p>So as you've correctly pointed out it <strong>is possible</strong> for a VNC server to display (actually draw) a message and therefore someone who modifies the code is obliged to use this functionality for the offer of source.</p>

<p>My advice is that you implement this feature in your official version and add an option (via config file) to disable this feature. Something like this:</p>

<pre><code># This program is distributed under the terms of the AGPLv3.
# If you have modified the program, your modified version must prominently offer
# all users interacting with it an opportunity to receive the corresponding
# source of your version.
# See http://www.gnu.org/licenses/agpl-3.0.en.html#section13 for details
# 
# YOU MUST NOT DISABLE THE FOLLOWING OPTION UNLESS YOU HAVE NOT MODIFIED THE
# SOURCE CODE
#
SHOW_SOURCE_OFFER=TRUE
SOURCE_CODE_LINK=http://link.to.your/sourcecode.tar.gz 
</code></pre>
","2441"
"Does an employee have the right to use a CTA?","97","","<p>Most people who work in software development have signed an Intellectual Property Rights Assignment notice whenever they start a new job. The purpose of these assignments is to ensure the employer obtains ownership of anything the employee creates which would either attract copyright, or be suitable for patenting.</p>

<p>Although they are <strong>meant</strong> to cover work done on the employer's behalf, they are nearly always written fairly broadly, effectively covering <strong>anything</strong> the employee creates during their period of employment (even when 'off duty').</p>

<p>The implication of this is that a contributor to your project, who submits their contributions under a CTA (Copyright Transfer Agreement) might not actually <strong>own</strong> the copyrights they are assigning to your project.</p>

<p>Is anyone aware of this having been tested in court, or of cases where this has caused problems?</p>

<p>Is it possible to craft a CTA to work around this issue?</p>
","<p>The reason these agreements exist is to avoid the issue outlined in the first few paragraphs of <a href=""http://www.tms.org/pubs/journals/JOM/matters/matters-9608.html"" rel=""nofollow"">this article</a>: that developers may well still own the rights to software they develop after employment, and could in theory sell on to rival companies.</p>

<p><strong>In theory,</strong> the looseness of many of these agreements (be they CTA's or IPRAA's) means that the employer owns all software their employees create while working for them, whether in their free time or not.</p>

<p>However, <strong>in practice</strong>, many companies will not enforce this on software created in the developer's free time, because they want to keep the developer. Think: if your company won't let you sell this software you've got an idea for, but this other company will, would you not move to said other company and develop it while you're in their employment?</p>

<p>Now, IANAL, but I've heard tell this is possible: if your employer is OK with you working part-time somewhere else as well as for them (though many aren't), then you can create a skeleton company. You then develop your software as part of a project for that company, so your first employer doesn't own the rights. Your skeleton company sells the product.</p>

<p>The only way to craft a CTA so this is possible would be for the employer to make it less loose, and only include software developed in working hours for them.</p>
","876"
"Is ANTLR Free Software?","97","","<p>I'm thinking about an example of a popular piece of software to illustrate the difference between Free Software and Open Source Software.</p>

<p>ANTLRv4 is an Open Source project and provides an online documentation sufficient to get started with the project, but mastering it requires to read the ANTLR 4 Definitive Reference. The Free Software Definition on gnu.org states that <a href=""http://www.gnu.org/philosophy/free-sw.html#beyond-software"" rel=""nofollow"">software manuals should be free</a>.</p>

<p>Am I wrong if I claim that ANTLR cannot be considered as Free Software?</p>
","<p>IMHO the existence of a book which provides detailed guidance and instruction on the use of a tool, but which costs money, does not negate the FLOSS nature of the product itself.</p>

<p>Though admittedly a weak analogy, <code>gcc</code> meets all the criteria for Free Software. But to really master C++ or C you will inevitably need to read some books on the subject, and many of those are not available for free.</p>

<p>I can see nothing, other than economics and the lack of comparable knowledge, to prevent someone else writing an excellent book on ANTLR which both competes with the Definitive Reference and is made available for free. This would not make the ANTLR software any  more 'free'.</p>

<p>This approach, of providing the software for free and selling a definitive user guide, is just another approach to monetizing Open Source development. You are not forced to purchase the book in order to use the software. </p>

<p>You <em>could</em> invest $27 of your time in studying the subject matter and ANTLR source code to build the same level of expertise you can gain by purchasing the book ... but I doubt you'd get very far in a cost/benefits sense.</p>

<p>That said, the author does not appear to have provided any substantive FREE documentation beyond links to the book. However the e-book is non-DRM and simply googling the book's title and 'PDF' rapidly finds many places where it is available to download. <strong>I don't know the legality of those sites, and I suspect none are authorized</strong>.</p>
","1846"
"Is it possible to move from MIT to BSD?","97","","<p>I commited some work on GitHub under the MIT license.<br>
Is it possible to move from MIT license to BSD-3 or 4 clauses for some of the projects? And as an extent, to any other license?</p>

<p>If possible, is there a particular thing to do other than changing LICENSE and upgrading files headers?</p>

<p>Same question could apply with GPL. Can I (somewhat say) 'downgrade' some work to BSD for example?</p>

<p><em>To be more concise, I use the terms upgrade/downgrade in terms of copyleft.</em></p>
","<p>The question is more complex than some other analyses would have it.</p>

<p>When you receive a work created by some other person(s), A, and you make changes, B, leading to C (which is a derivative work of both A and B), there are a number of licences to consider.</p>

<p>The licence under which you received A continues to apply to A, when distributed simply as A; you have no power to vary that.</p>

<p>You may licence B under whatever terms you please, provided that they don't cause C to be under a licence which conflicts with the licence terms on A as regard derivative works.</p>

<p>C, being a work in its own right, is also covered by a licence.  The choice of this licence may be constrained by the licences on A or B, or it may not be.  Unless so constrained to be, it is possible that C's licence will not be the same as either that on A or B.</p>

<p>So, if A is covered by the <a href=""https://www.gnu.org/licenses/license-list.html#X11License"" rel=""nofollow noreferrer"">X11 license</a> (the FSF note that the term ""<em>the MIT license</em>"" is ambiguous, as there have been many), you may release B under the X11 license, and C will then very likely be under the X11 licence, unless you arrange otherwise.  You may release B under the GPL, in which case C will also need to be under the GPL (<em>per</em> GPL2 s2b or GPL3 s5c, as appropriate).  You may release B under either 3- or 4-clause BSD, in which case you will need to clarify what licence C is released under.</p>

<p>If A is covered by the GPL, you may release B under the same version of the GPL, or under a less-restrictive licence compatible with the GPL in question (which includes 3-clause BSD, but <em>not</em> 4-clause BSD).  C will need to be under the GPL (see previous para).</p>

<p>Note that this analysis is currently thought to be persuasive in England and Wales (ie, I have taken legal advice that the line of analysis is likely to find favour with a court).  I have no idea whatsoever if it would find favour in other jurisdictions, but you don't say where you're based.  IANAL/IANYL, of course.</p>
","5243"
"Is it sufficient for using GPL-licensed code to add a note that the source can be requested via email?","97","","<p>My company is about to launch a commercial product, said product consists of an embedded Linux computer running custom software and talking to custom hardware. </p>

<p>My understanding is that the GPL license that Linux and other aspects of our system are licensed under requires us to make the license text and any GPL licensed source code available to our customers should they request it. </p>

<p>This is incredibly unlikely to happen (given the industry we work in) and we haven't made any changes to the Linux kernel or any other OSS we use in the product. <strong>Is adding the following text to the box manual enough to meet our obligations under the GPL?</strong></p>

<blockquote>
  <p>[PRODUCT] utilises some software components released under the GNU
  GPL, GNU LGPL and other open source licenses, for details on licenses
  or to be send a copy of source code please contact support@[company]
  with your request.</p>
</blockquote>

<p>Obviously if someone was to contact us then we'd send them the necessary information/source code as required by the license.</p>
","<p>In many cases it will be easiest to just put them on a web server and give the URL so that people can ""self service"". E.g., <a href=""https://products.sel.sony.com/opensource/"" rel=""nofollow noreferrer"">https://products.sel.sony.com/opensource/</a></p>

<p>You'll have to print the source code offer / display the GPL license somewhere. E.g. on an Android phone check settings, about this phone, legal, open-source licenses.</p>

<p>It is also good to organize a compliance process in your company. Make a repository with a clear name (e.g. GPL compliance) and for every product, make a ""public"" folder with the relevant sources and a clear indication that the contents are OK to give out and not confidential. Then support can easily answer such a request.</p>
","5987"
"Should I use a permissive license if I might charge for my product later?","97","","<p><strong>Background</strong></p>

<p>Suppose I am working on a piece of open sourced software. Suppose I am unsure whether or not I want to sell it in future versions. </p>

<p><strong>My question:</strong></p>

<p>Would using a permissive license make it easier for me to sell my product in later versions?</p>

<ul>
<li>If yes, why so?</li>
<li>If no, what can I do to make it easier?</li>
</ul>
","<p>""I am not a lawyer"" but this is generally a good idea. Apache is actually <strong>very</strong> good for this.</p>

<p>From experience (including legal discussions) such as license allows you to  push out an open source version, and then develop a much more capable <strong>closed</strong> version based on the same code.</p>

<p>Using an appropriate  CLA also ensures that all community contributions can be used in the same way.</p>

<p>Of course, as the original author you can do what you want with your code at all times.</p>
","507"
"What is defined as trivial code when licensing a project","97","","<p>I am creating a project I am thinking about open sourcing but I am concerned about the licensing issue of what exactly is trivial code. I am concerned because if I did not know how to do something I would just look online or in books for examples. If I was looking to learn how to implement some logical concept like a merge sort I would translate some pseudo-code into C or on the other hand if I was looking for the syntax form I would look at code snippets that does a certain operation i was interested in such as:</p>

<pre><code>int copyfile(char *sourcepath,char *destpath)
{
    int dest_fd;
    int source_fd;
    int errorcode = 0;
    if((source_fd = open(sourcepath,O_RDONLY)) &lt; 0)
        return 1;
    if((dest_fd = open(destpath,O_WRONLY|O_CREAT|O_TRUNC,0755)) &lt;0)
        return 1;

    char *buf[4096];
    ssize_t readval;
    while((readval = read(source_fd,buf,sizeof(buf)) &gt; 0))
    {
        if(write(dest_fd,buf,readval) &gt; 0)
           errorcode = 1;
    }
    close(source_fd);
    close(dest_fd);
    return errorcode;
}
</code></pre>

<p>Would something like this cause me an issue in licensing my project? </p>

<p>Addendum:
I have a follow up question in the same vein and I thought that I should add it to this one over creating a whole new question. If this an incorrect conclusion let me know in the comments. </p>

<p>Basically the project im working on in my spare time to learn the in's and out's of a POSIX compliant system and the POSIX C library is basically reading the Single Unix Specification documents and trying to clean room re-implement them with the eventual goal of having a small fully compliant POSIX system capable of boot strapping itself without the dependency of the GNU tools and under a single license.</p>

<p>In this endeavor I've started to read classic UNIX and C works like the K &amp; R book in which they explain fundamental concepts of the C language creating examples that are stripped down versions of Unix utilities and C stdlib function and more importantly some of the algorithms behind these functions as well as some what in my mind seem to be fundamental concepts of computer science.</p>

<p>Breaking this into two subquestions one dealing with what I would describe as fundamental concepts and the other dealing with well known algorithms.</p>

<p>1.a
What is the delineation point between basic logical concepts and copyrighted code.
Giving a few examples: (also these are off the top of my head from what I remember not directly copied just in case).</p>

<p>1.a.1
The standard library function strlen which returns the length of a string minus the null can be described like</p>

<pre><code>int strlen(char *string)
{
    int i;
    for(i = 1;string[i] != NULL;i++)
        ;
    return i;
}
</code></pre>

<p>(Also I know strlen is of type size_t in the stdlib) </p>

<p>1.a.2</p>

<pre><code>void swap(char *old,char *new)
{
    char *tmp = old;
    old = new;
    new = tmp;
    return;
}
</code></pre>

<p>Example 1.a.1 when boiled down to a simplistic child like definition is count each position until x is found.</p>

<p>Example 1.a.2 basically swap x with y and y with x.</p>

<p>Extracting the idea to the world of the physical my examples are respectively, count up a set number of items until you run out then stop leaving the last number said / though as how many items you have, and take one item and swap places with a second item. Which describe two skills / concepts a young child can understand. </p>

<p>Thus dove tailing back into my first subquestion. At what level does something go from programming something that is so fundamentally logically simplistic to something licensable. Would using a commonly used loop variable name like i or logical names like temp / tmp for temporary storage  or string / str / s for string cause an issue or are these things so simplistic that it is classified as what someone in the comments below mentioned de minimis or the merger doctrine ? </p>

<p>1.b</p>

<p>This second subquestion falls under the category of seeing example implementations of basic algorithms I.e the type of things taught first or second year students in a principles of algorithmic design 101 class such as quick sort or binary search of which there are a very finite number of ways in which to go about implementing.</p>
","<p>Some <a href=""https://www.gnu.org/licenses/lgpl-3.0.html#section3"" rel=""nofollow noreferrer"">license texts</a> provide some indication of what would be considered ""trivial"" amount of code.</p>

<blockquote>
  <p>numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length)</p>
</blockquote>

<p>Yet, Oracle and Google have argued in US court over <code>a nine-line rangeCheck function</code> being <a href=""https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc."" rel=""nofollow noreferrer"">copied</a>.</p>

<p>So in this context, I personally consider that anything should be properly attributed as licensed and documented (including of course complying with the license) in particular code snippets from StackOverflow, books and man pages.</p>

<p>StackOverflow content has a clear CC-CY-SA license. Books code examples are either licensed under an open source license or are not licensed for reuse unless you obtain permission of the publisher. Man pages usually have a license, typically -but not always- the same license as the license of corresponding software.</p>

<p>In case of doubt and a clear license, I do always contact the author to obtain a clear and explicit permission: If anything out of fairness to the author that made the gift to publish their code in the first place. </p>

<p>Now, some consider that 3 lines or less is game for <a href=""https://en.wikipedia.org/wiki/Fair_use"" rel=""nofollow noreferrer"">fair use</a>. It could be that this is fair use and if this were the case it would still require proper credits and attribution (such as with comments) to document the provenance of the snippet.</p>

<p>So <code>Would something like this cause me an issue in licensing my project?</code></p>

<p>There is no issue per se, but you should track what the license and author is for this snippet and properly credit this snippet (ideally adding some link too) and comply with whatever its license is.</p>

<p>If the license terms are missing, or unclear and the author cannot be reached for clarification, I would stay away from reusing this code.</p>
","5061"
"Why doesn't Apple release full kernel source code?","97","","<p>Apple releases their XNU kernel source code for macOS with each minor release of the Operating System covered under the APSL Version 2 at <a href=""https://opensource.apple.com/"" rel=""nofollow noreferrer"">their open source website</a>. The <a href=""https://opensource.apple.com/apsl"" rel=""nofollow noreferrer"">license terms can be found here</a>.</p>

<p>While it would appear that apple has released the full source code for their kernel, the power management subroutines from the production kernel are missing entirely from the source tree. There are references made in the production kernel to an <code>xcpm</code> directory in the source tree which would include code for a family of <code>xcpm_*</code> subroutines used for power management, however, no source directory or source code for these routines exist in the open source version of the kernel which apple releases.</p>

<p>Additionally, a family of subroutines dealing with HWP, or intel hardware controlled performance states, exist in the production kernel but are absent in the publicly released source tree.</p>

<p>According to the Open-Source license with which this code has been released, this does not appear to be legal. It is in direct violation of sections 2.2 (c) and section 2.3:</p>

<ul>
<li><p>As per section 2.2 part c, if modifications to covered code are deployed to users or made publicly available, source code <strong>must</strong> be made available to either the users of the program or to the general public. This is not done with the macOS kernel sources.</p></li>
<li><p>As per section 2.3, if covered code is deployed externally deployed in executable form only, as it is in macOS, a notice must be distributed with the executable which states that the source code of the program is available with instructions of how to obtain said code. No such notice can be found within macOS.</p></li>
</ul>

<p>So my question, then, is how is it that Apple can do this without any action being taken against them? Why is the license the code is distributed under not being enforced?</p>

<p>This should additionally apply to any of the publicly available Apple code available under this license which is used in iOS as well as macOS. For instance, the source code for the ARM port of the XNU kernel should additionally be available, no?</p>
","<p><sub>(I have no knowledge about the software in question; this answer is solely based on reading the APSL as a legal layperson. I’m also ignoring the aspect that the author of the software could have the full copyright, in which case the author wouldn’t have to follow the license to begin with.)</sub></p>

<p>The sections 2.2 and 2.3 are about <strong><em>Covered Code</em></strong>, which is defined under section 1.3:</p>

<blockquote>
  <p>""Covered Code"" means the Original Code, Modifications, the combination of Original Code and any Modifications, and/or any respective portions thereof.</p>
</blockquote>

<p>In section 1.5, <strong><em>Larger Work</em></strong> is defined:</p>

<blockquote>
  <p>""Larger Work"" means a work which combines Covered Code or portions thereof with code not governed by the terms of this License.</p>
</blockquote>

<p>And section 4 makes clear (bold emphasis mine):</p>

<blockquote>
  <p>Larger Works.  You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product.  In each such instance, You must <strong>make sure the requirements of this License are fulfilled for the Covered Code or any portion thereof</strong>.</p>
</blockquote>

<p>So it seems to be possible to have a program where only parts of it are licensed under the APSL, no matter how these parts technically interact with other parts.</p>

<p>The <a href=""https://www.gnu.org/philosophy/apsl.en.html"" rel=""noreferrer"" title=""FSF&#39;s Opinion of the Apple Public Source License (APSL) 2.0"">FSF seems to confirm</a> this:</p>

<blockquote>
  <p>It is not a true copyleft, because it allows linking with other files which may be entirely proprietary.</p>
</blockquote>
","5803"
"GPL and Python import statement","96","","<p>If a Python module X is licensed under GPL and a Python script or module Y imports X, does it make Y necessarily GPL also?</p>
","<p>Yes eventually the GPL flows to the calling/importing code at runtime. At rest the import statement has no impact per se. </p>
","5279"
"Do I still own code I donated to GPL project?","95","","<p>If I contribute code to a project that is under the GPL (or similar), can I still use my code (without any other parts that were contributed by other people) in a closed-source app? If yes, can I also allow others to use my code without publishing the source code?</p>
","<p>It depends. Did you sign a <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"">Contributors License Agreement</a>? These agreements usually clarify if the contributor keeps their copyright and just licenses the code to the project or if the contributor transfers copyright. In the first case, the contributor is usually still free to do whatever they like with the code because they still own it (except for revoking the license, of course). In the latter case, the project now owns the copyright and can usually deny the original author to use it. Projects often prefer the latter variant, not because they want to screw their contributors but because it allows them to change the license terms later without having to ask every single contributor to agree.</p>

<p>Without a CLA? It appears to me that the general consensus among the open source community seems to be that no license transfer took place and the original author still owns their copyright. Contributors license their work to the open source project under an open source license (""inbound = outbound""). But should the situation go to court it's kind of a word-against-word situation if a copyright transfer took place or not. I am not a lawyer, so I can't tell how a court would rule under what circumstances in your jurisdiction. It might be important though if you did your work for free (as implied by ""donated"") or received compensation. In the latter case it <em>might</em> get interpreted as work-for-hire which often includes automatic copyright transfer.</p>
","4699"
"Do open source projects have better or worse female participation than proprietary projects?","95","","<p>Sometimes the claim is heard open source projects are especially unfriendly to women. Sometimes the claim is heard, that open-source projects are especially inclusive. It probably is impossible to answer which is more true, but we could get a hint by looking at real participation from females.</p>

<p>Are there studies comparing similar projects in open source and in proprietary projects that analyze the numbers and perhaps roles of male and female contributors?</p>
","<p><strong>Significantly less female participation.</strong> It is estimated that female participation on open source projects is at about 2%, compared to 10-30% overall in computing or proprietary projects.</p>

<p>For overall female participation, NSF keeps <a href=""http://www.nsf.gov/statistics/women/"">employment statistics for women</a>, which has hovered around <strong>20-30%</strong> for the ""computer and math scientists"" category.</p>

<p>There are a number of reference to the low participation of women in open source projects; one commonly referenced is <a href=""http://www.flosspols.org/deliverables/FLOSSPOLS-D16-Gender_Integrated_Report_of_Findings.pdf""><em>Free/Libre and Open Source Software: Policy Support</em> (2006)</a>, which lists a number of <strong>1.5%</strong> - it's a while ago, but I'd be surprised if the number is much different today. To compare, <a href=""http://www.flossproject.org/report/FLOSS_Final4.pdf"">an earlier study (2002)</a> listed <strong>1.1%</strong>.</p>

<p>There are <a href=""https://docs.google.com/spreadsheet/ccc?key=0AlZH8QBl60oodEJTdFA5TlZOcDJCMU02RkZoSHF5SHc#gid=0"">other numbers</a> which suggest that tech companies' employees are about <strong>12%</strong> of women.</p>

<p>Now per-project numbers vary a lot and I'm not sure how useful individual comparisons will be, but here are some numbers:</p>

<ul>
<li>The same source that lists 12% for a group of tech companies shows <strong>Mozilla</strong> at about <strong>8%</strong>. By comparison, Google reports <a href=""http://www.pbs.org/newshour/updates/google-discloses-workforce-diversity-data-good/"">17% of women in their ""tech"" category</a>.</li>
<li><a href=""http://princessleia.com/journal/?p=3651"">This blog post</a> mentions <strong>5%</strong> of <strong>Ubuntu Members</strong> as women. From the <a href=""https://wiki.ubuntu.com/Membership"">horse's mouth</a>, ""Official Ubuntu Membership means recognition of significant and sustained contribution to Ubuntu or the Ubuntu community."" There are over 500 of these. By comparison, Microsoft reports <a href=""https://www.microsoft.com/en-us/diversity/inside-microsoft/default.aspx#fbid=pAbVpUFMjVP"">28% female employment</a>.</li>
</ul>

<p>If you know of better comparisons please edit them in, but again I want to emphasise that individual comparisons are no replacement for the overall statistics, which show significantly less female participation in open source projects.</p>
","616"
"How can I get benefits priority out of my open source code?","95","","<p>I have a project that I want to publish as an open source project, but as the creator I would like to get a head-start in taking advantage of my work for monetary gain.</p>

<p>Can I prevent people republishing my work, or using it for monetary gain, before a certain date? If so, what license could I use to do so?</p>
","<p><sup>Yet another question where the answer is some variant of ""you are the author so you can pick whatever license you want"" :)</sup></p>

<p>You can simply publish your project under a license that prohibits republication, or for monetary gain, or any activity that you don't want. You are the author so you can attach any conditions you want, even <a href=""https://wiki.debian.org/qa.debian.org/jsonevil"" rel=""nofollow noreferrer"">ludicrous ones</a>, because the license is a grant of permissions under conditions you choose: ""you can do X with this as long as you satisfy Y. If not, tough luck: the code is owned by me so you're not allowed"". Just make sure you write the license with a lawyer.</p>

<p>Then, after a specified date, you release the project under a proper open source / free software license.</p>

<p>Be aware that your original license is not free/open; truly free/open licenses cannot limit redistribution nor can they discriminate against endeavour such as whether the use is for monetary gain.</p>

<p>There's a similar use case where the transformation to open source is automatic, to guard against hit-by-bus scenarios, asked <a href=""https://opensource.stackexchange.com/q/420/175"">here</a> and <a href=""https://opensource.stackexchange.com/q/1695/175"">here</a>; these may be useful.</p>

<p>You should also ask: what's there to gain by releasing under a ""source available"" license? By providing the source but very few other permissions, people can study the code, and not much else. On the other hand, it also makes it vastly easier for unethical actors to copy your code and use it without your permission. Do the benefits really outweigh the costs? If not, it may just be better to keep your code closed source initially.</p>

<p><strong>A historic example: the Doom Source License</strong></p>

<p>The source code for the engine of the popular game Doom was initially released under a non-commercial (and hence not free/open) license called the Doom Source License (DSL). You can find details and the full text here: <a href=""http://doom.wikia.com/wiki/Doom_Source_License"" rel=""nofollow noreferrer"">http://doom.wikia.com/wiki/Doom_Source_License</a></p>

<p>The license, apart from restricting commercial use, granted a lot of other permissions, including distributing modified versions, so it enabled a lot of source ports by hobbyists. These greatly contributed to the longevity of Doom and arguably improved the commercial value of the Doom franchise.</p>

<p>Later, the Doom engine was released under GPL also, a free license.</p>

<p>However, some popular source ports are still under DSL and continues to be a trap: I've personally witnessed a few hobbyists who built games under these source ports, planning to sell their work but later discovering that many months worth of work was wasted because of the DSL. The fact that Doom is also available under GPL contributed to this confusion. DSL is GPL-incompatible so converting from one to another is impossible.</p>

<p>This example shows a few possible dangers of releasing your project under a restrictive license first, then a less restrictive one later: if the more restrictive version persists, it can cause confusion to your project later on.</p>
","1864"
"Permanently archive a specific version of open source code for a scientific publication","95","","<p>For scientific publications, ideally a permanently archived version of code should be available, for a couple of reasons:</p>

<ol>
<li>The owner of a repository, such as a GitHub repo, could delete it.</li>
<li>You will know exactly which version of code to use. (I know tags could do this too).</li>
</ol>

<p>How can I make a permanently archived version of an open source code available?</p>
","<p>This is good practice. I know of two ways of doing it that also have the benefit of giving your archived code a <a href=""https://www.doi.org/"" rel=""nofollow noreferrer"">digital object identifier</a> (doi).</p>

<ul>
<li><a href=""http://www.figshare.com"" rel=""nofollow noreferrer"">Figshare</a> - Mozilla Science Lab has made <a href=""https://mozillascience.github.io/code-research-object/"" rel=""nofollow noreferrer"">an import tool for this</a>. </li>
<li><a href=""http://www.zenodo.org"" rel=""nofollow noreferrer"">Zenodo</a> - follow these <a href=""https://guides.github.com/activities/citable-code/"" rel=""nofollow noreferrer"">github guide instructions</a>.</li>
</ul>
","5906"
"Where do I put documentation? How much is necessary?","95","","<p>I'm creating a program in python that simulates an ideal quantum computer. It is on github, and while it is not anywhere near complete yet, I don't know how much documentation I need to include, and where to put it.</p>

<p>For example, do I need to include information about how the code itself works? About how to use the program? How in-depth does it need to be? I also have no idea where to put this on github - I guess in the readme file, but I didn't know if there was a better place to put it.</p>
","<p>Think of it this way: </p>

<blockquote>
  <p>how much documentation would I like to be available when I visit an open source project?</p>
</blockquote>

<p>Answer: a lot</p>

<blockquote>
  <p>how much documentation is enough?</p>
</blockquote>

<p>Answer: there is never enough documentation!</p>

<p>Now there are several things to consider:</p>

<p><strong>Making a great first impression matters</strong></p>

<p>For this you want to have a clear one liner that describes your project and a good README. These will be the first documentation that a user will see. On Github this means using markdown or ReST to create a concise and comprehensive README with several questions that I would expect to find answers about your project:</p>

<ul>
<li>explain why this project exists?</li>
<li>what does your code?</li>
<li>how to use it in a minimal way? and how does it works at a high level?</li>
<li>is the code stable and tested? if you have a CI running your tests, put CI badges in that README. Tests serve also as documentation for your code.</li>
<li>how to download and install it including URLs to its home page, repos?</li>
<li>how can I get support? (e.g. tickets, mailing lists, IRC, etc)</li>
<li>what is the license for this code?</li>
<li>URLs to more detailed documentation (when this is ready... you may not it have right at the start)</li>
<li>What are alternative projects that do the same thing?</li>
<li>How can I contribute to your project? Do you accept pull requests? Patches by email? What do you expect from a patch in terms of coding standards, etc</li>
</ul>

<p>That's a lot but I would expect this. Here are some examples:</p>

<ul>
<li>a minimal not comprehensive one: <a href=""https://github.com/bastikr/boolean.py"" rel=""noreferrer"">https://github.com/bastikr/boolean.py</a> </li>
<li>a more comprehensive one: <a href=""https://github.com/WojciechMula/pyahocorasick/"" rel=""noreferrer"">https://github.com/WojciechMula/pyahocorasick/</a></li>
<li>yet another comprehensive one: <a href=""https://github.com/nexB/scancode-toolkit"" rel=""noreferrer"">https://github.com/nexB/scancode-toolkit</a></li>
</ul>

<p>(Note: I am involved with these projects and I do not claim their README is perfect, far from it).</p>

<p><strong>Built-in UI &amp; CLI documentation</strong></p>

<p>Next you want making your code as easy to use as possible. If you have a UI or a command line interface, make sure that this contains as much built-in usage help and documentation as needed. If this is a library, make sure that your functions are documented using your language conventions (e.g. this would be docstrings for Python).</p>

<p><strong>Tests are documentation</strong></p>

<p>Next you want tests: test code serves as a great documentation especially for libraries and beside that they are kinda useful...
Running the tests on Travis, Appveyor, Circle and similar is important of course.</p>

<p><strong>Formal manuals and documentation</strong></p>

<p>Next is actual formal documentation. The convention is to store this in a <code>docs</code> or <code>doc</code> top level directory. On Python, most folks use ReST for writing docs. You would want to cover a few things:</p>

<ul>
<li>a usage guide</li>
<li>an installation guide</li>
<li>if needed a troubleshooting guide</li>
<li>some FAQ</li>
<li>an API documentation: if your project is also a library you should generate an API documentation based on the documentation present in the code. For Python, this would mean using something like Sphinx to generate the doc.</li>
</ul>

<p>You should publish that documentation on a web site. <a href=""https://readthedocs.org/"" rel=""noreferrer"">https://readthedocs.org/</a> is a great resource for this. </p>

<p>Here are a few decent examples: </p>

<ul>
<li><a href=""http://pyahocorasick.readthedocs.io/"" rel=""noreferrer"">http://pyahocorasick.readthedocs.io/</a></li>
<li><a href=""http://click.pocoo.org/"" rel=""noreferrer"">http://click.pocoo.org/</a></li>
<li><a href=""https://booleanpy.readthedocs.io/"" rel=""noreferrer"">https://booleanpy.readthedocs.io/</a></li>
</ul>

<p>I hope this helps for a start!</p>
","4817"
"Is a derivative work necessarily written in same language as the one it derives from?","94","","<p>For example, a C repository built upon the <strong><em>ideas</em></strong> from a (say) JavaScript project - is it a derivative work based on the latter?</p>

<p>To clear things up little bit, i'd give a more detailed example;
Imagine an open source compiler written in JavaScript implements in its code base a high quality code optimization algorithm its authors have discover'd; my question is, can other works, no matter open source or not, incorporate the algorithms in their own code (which might not have been written in the same language as the code whose ideas it is using) and still not be consider'd ""derivatives"" (partially at least) of the oiginal work?</p>
","<p>Algorthms and ideas are not elligible for copyright.</p>

<p>As long as it hasn't been patented you can create your own implementation without worrying about copyright (just make sure you copy the algorithm not the code).</p>

<p>If you're not sure, contact a lawyer.</p>
","1873"
"Licensing for a pre-alpha software which is intended to be eventually released open source","94","","<p>I want to release a pre-alpha software for preview. I do not want to put the code in an open repository like GitHub yet because it is just a prototype and I intend to re-design parts. The package I am releasing contains the HTML/JS source which is bundled in a single file and is <strong>not</strong> uglified/minified. </p>

<p>However, I definitely intend to launch it as open source (I am thinking a combination of MPL for core and MIT for modules). Ideally I would like to put the code out in a phased manner with a separate repo for each component as they mature a bit (not a single repo that is a big dump containing everything).</p>

<p>What would be the best possible (if nothing else, at least the simplest) licence to use at this stage? Also, What other considerations should I take into account?</p>

<p>As per request to include more information:</p>

<p>What is my project like? What am I trying to license?
I am developing a client side HTML/JS program hosted in NWJS.</p>

<p>What third-party resources are included in my project?
All third party resources are open-source, afaik MIT, BSD and Apache 2.0 components used. The only exception are a few proprietary files that come with NWJS.</p>

<p>Who's your audience? What do you want them to be able to do with it?
I have a few groups in mind, like Academics, but the software can be used by anyone. The only restriction I want to place is that change to the software itself are reciprocated back. I do not mind if people were to use my code in larger works, in fact, I would encourage that and would not insist on the larger project being open-source itself (as long as my code is open-source).</p>

<p>What's the status of your project?
Experimental.</p>
","<p>I would endorse @curiousdanni's comment: ""Just use whatever license you want to use when it is finished.""</p>

<p>If you are afraid people are going to use your project before it is fully complete, don't be. People will not even <em>hear</em> about your project until you start promoting it. Placing your code onto GitHub will not bring it automatically more attention, and so you can redesign the parts to your heart's content without fear of people being dependent on bad code. When you feel like it's ready, then make it ready.</p>

<p>And if someone does accidentally stumble upon your code, and decide to use it, well, so what? They'll just use the old version of the code then instead of your redesigned version. The code still works, right? Let them take advantage of it. If they like it, they could even help you with the redesign process.</p>

<p>The main reason I would recommend making it open source now though is that you don't know <em>if</em> the redesign process will actually occur. Real life can sometimes intervene to make the redesign process difficult. So releasing the code now means that people can start using it now (and using it doesn't <em>just</em> mean actually using your application, but also reading your code and learning from it).</p>

<p>My main suggestion is to make sure you have a good README that tells people about the program, how to use it, and how much of the code is planned to be redesigned.</p>
","2751"
"Non-public data in GPL project","94","","<p>Is it possible to release software under GPL license but not publish one small part of it which contains data that really shouldn't be available publicly (I mean private API keys, etc.) If not, which FOSS license should I use to do so? </p>
","<p>If you are the only author, you can even do stuff that isn't allowed by GPL for others. But for an API-key I would even see this as configurable data used by the program and that is not delivered with the software (similarily OSS e-mail-programs usually don't contain the email-login of the developer). Instead you should deliver a manual how everyone can create his own api-key and enter it to your software. But yes, from the standpoint of the license it is not needed to release the key alongside the software.</p>
","2309"
"Can I have one license cover part of a software and another covering the other half?","93","","<p><strong>Scenario:</strong>
Lets say I have a software I have been developing. I am about to release it but I first have to apply some licenses. </p>

<p><strong>Question:</strong>
Suppose I want to release part of the software (the code) under one license and the other part, such as pictures, under another licence, can I do this?</p>

<ul>
<li><p>If yes, how?</p></li>
<li><p>If no, what other things can I do to get this result?</p></li>
</ul>
","<p><strong>Yes you can.</strong></p>

<p>One example: the <a href=""https://github.com/id-Software/DOOM-3"">source code for the video game Doom 3</a> is released as GPL, but this release does not include the game data, which is still covered by the game's original release EULA.</p>

<p>The answer is obvious when you realise there's a misconception that seems to be quite common: <strong>if you are the copyright holder, you can license in whatever way you want. The license doesn't affect yourself.</strong> Software licenses can't magically take away rights that <strong>you already have.</strong></p>
","399"
"Can I use the OSI logo to help me advertise my project?","93","","<p>Suppose I want to release a software program to the App Store, under an open source license. As I want to increase the number of downloads, I want to advertise that the software is an Open Source Project.</p>

<p>I would like to use the logo of the Open Source Initiative, to help me do this. Assuming that I would use the logo correctly, without misleading anything in my previews, would I be allowed to do this?</p>
","<p>Yes, if</p>

<ul>
<li><p>the software uses a <a href=""http://opensource.org/licenses"" rel=""nofollow"">license that is approved by the OSI</a>,</p></li>
<li><p>you follow the rules ""regarding the logo’s appearance"" from OSI’s <a href=""http://opensource.org/logo-usage-guidelines"" rel=""nofollow"">Logo Usage Guidelines</a>, and</p></li>
<li><p>you follow OSI’s <a href=""http://opensource.org/trademark-guidelines"" rel=""nofollow"">Trademark Guidelines</a>.</p></li>
</ul>

<p>Source: the <a href=""http://opensource.org/logo-usage-guidelines#The_OSI_Logo:_Usage_Guidelines"" rel=""nofollow"">first section</a> of their <em>Logo Usage Guidelines</em> says (bold emphasis mine):</p>

<blockquote>
  <p>The OSI logo is a trademark of Open Source Initiative. In order to protect and grow the OSI brand, we have a distinguishable logo that <strong>can be used to mark software licensed under an OSI Approved License</strong>. […]</p>
</blockquote>

<hr>

<p>It depends on the exact nature of the app store which guideline from the <em>Trademark Guidelines</em> section ""<a href=""http://opensource.org/trademark-guidelines#Distributing_software_under_a_license_approved_by_OSI"" rel=""nofollow"">Distributing software under a license approved by OSI</a>"" applies in your case.</p>

<p>It’s probably ""<a href=""http://opensource.org/trademark-guidelines#Software_distributed_under_OSI_Approved_Licenses_and_software_not_licensed_OSI_Approved_Licenses_separately_on_same_website"" rel=""nofollow"">Software distributed under OSI Approved Licenses and software not licensed OSI Approved Licenses separately on same website</a>"".<br>
If you intend to use the logo, you should of course always read the mentioned documents. In the ""tl;dr"" variant this section says:</p>

<ul>
<li><p>Use one of <a href=""http://opensource.org/logo-usage-guidelines#Logo_Usage"" rel=""nofollow"">their logos</a> without editing it (unless it’s explicitly noted to be allowed). (It might also be required to state something like: ""The OSI logo trademark is the trademark of Open Source Initiative."".)</p></li>
<li><p>Make sure that users won’t get the false impression that the other software available from this app store would also be licensed under an OSI-approved license.</p></li>
<li><p>Right after publishing it, send the URL with your use of the logo (e.g., your app’s page) <a href=""http://opensource.org/contact"" rel=""nofollow"">to the OSI</a> (using the category ""Trademark enquiries"").</p></li>
</ul>
","448"
"GPLv3 redistribution: when does it apply?","93","","<p>I have written a Java program designed to run server-side with a plain HTML web interface: </p>

<ul>
<li>I am reusing and I have integrated in this app a bunch of third-party libraries that are licensed under the GPLv3. Some are pure Java, some are a combo of C/C++ and Java. I am calling their methods from my Java code.</li>
<li>These libraries do not contribute directly to the UI of my app, but rather perform utility functions on the back-end, though some output can be made available to users for download in my web app.</li>
<li>I use all these libraries as-is and <strong>unmodified</strong>: I use only the pre-compiled binary Jars as provided by the projects. </li>
</ul>

<p>In each of the following cases, when would I have to <strong>redistribute the source code of my own application and of this library</strong> per the GPLv3? </p>

<p>e.g. when is the copyleft triggered for my unmodified usage?</p>

<ol>
<li><p>When I run this web application on a private company network and its is only available internally to my company employees?</p></li>
<li><p>When I run this application as a public web site on the open internet?</p></li>
<li><p>When I redistribute this application (including the GPLv3 libraries) as a packaged software product to a third party?</p></li>
</ol>

<p>For clarity: none of these libraries have a GPL exception: they are using the full GPLv3</p>
","<blockquote>
  <p>When I run this web application on a private company network and its is only available internally to my company employees?</p>
</blockquote>

<p>No, see below.</p>

<blockquote>
  <p>When I run this application as a public web site on the open internet?</p>
</blockquote>

<p>No. Neither of these cases is an example of ""conveying"" (or ""distribution"" as it used to be called in GPLv2): <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#NoDistributionRequirements"">https://www.gnu.org/licenses/gpl-faq.en.html#NoDistributionRequirements</a>.</p>

<blockquote>
  <p>When I redistribute this application (including the GPLv3 libraries) as a packaged software product to a third party?</p>
</blockquote>

<p>Maybe. The FSF view on this issue is that your application will be a derivative work of the libraries you are linking with, and therefore the whole program must be released under GPLv3. If you can successfully argue that the bundle is a mere aggregate, however, you may be able to get away without open sourcing your application, and only providing sources for the GPLv3 libraries. Expect to get a lot of flame if you go this route, however.</p>

<p>Also, check for linking exceptions in the libraries. Many GPL libraries have linking exceptions that explicitly allow proprietary programs to link with them. In this case, you are free and clear as long as you distribute the sources of, and any modifications you make to, the <em>libraries</em> themselves.</p>
","5028"
"Use of a BSD License software in a thesis","93","","<p>I'm writing a master thesis and want to use software on BSD License to carry out my calculations. As I understand, I can use it freely since it's not even a commercial use. Just need somebody to confirm it. Also, should I disclose information about the license in my thesis?</p>
","<p>Yes, BSD-licensed code is free for anyone to use for any purpose.  You don't need to disclose the license in your thesis.</p>

<p>As @MadHatter pointed out, if you were to include the source of the program in your thesis, say as an appendix, you would need to include the license in that.</p>

<p>You should of course give credit as you would for any resource that you use, but that's an academic issue not a licensing issue.</p>
","5498"
"Apache v2 - How to properly fulfill the license in a product","92","","<p>Apache v2 specifies on point 4a:</p>

<blockquote>
  <p>You must give any other recipients of the Work or Derivative Works a copy of this License</p>
</blockquote>

<p>If one uses an Apache v2 library in a commercial product must one deliver the Apache license text together with the product? (if the product can't display the text)</p>

<p>Would it be enough to display the link to the Apache license in the product documentation? </p>

<p>Or should it display the whole text on the product webpage?</p>
","<blockquote>
  <p>If one uses an Apache v2 library in a commercial product must one deliver the Apache license text together with the product ? (if the product can't display the text)</p>
</blockquote>

<p>Yes. This can be as part of your commercial license agreement, documentation or in the product or else.</p>

<blockquote>
  <p>Would it be enough to display the link to the Apache license in the product documentation?</p>
</blockquote>

<p>That would not be enough. Put the whole text instead.</p>

<blockquote>
  <p>Or to display the whole text on the product webpage ? </p>
</blockquote>

<p>That would work.</p>

<p>Note also that there is can also be a notice. And you should also produce the notice. </p>

<p>And for an attribution to be complete you should also mention who and what you are attributing: e.g. typically at least the project name and copyright.</p>
","5352"
"Can I assign a 2nd copyright to my employer","92","","<p>We are using some of my pre-existing, personally copyrighted open source software libraries at my employer. Recently they have asked me to ""fix"" the copyright so that it is theirs.</p>

<p>I have no objection to them owning a version of the code, i.e. that they own the copyright to, however, I want to retain the ownership and copyright of the original code as it existed before I came here.</p>

<p>Is there a reasonably painless way to achieve this?</p>
","<p>Firstly, IANAL/IANYL.  That said, you have in the past written some software which you have taken into and used at your current job.  Your employer has paid you to make certain changes to it for them, and they now wish to own the copyright to the resulting program.  You wish to retain it, and are curious how to address the problem.</p>

<p>There is the copyright in the original program, and there is the copyright in any changes made since you brought the code into your place of work.  The current program is therefore something with two copyright interests in it.  Any given copyright can be owned by only one entity, so abandon any idea that you can both own either of them.</p>

<p>You own the copyright in the program you wrote before you started work for your current employer, assuming (if you were at that time in work for someone else) that you did it in your spare time and that your then-contract of employment didn't have one of those nasty <em>we-own-everything-you-do-while-in-our-employ</em> clauses.  Depending on the law in your jurisdiction, it is likely that the copyright in the changes made by you in the course of your current job are owned by your employer, as a work-for-hire.  So the program as-is is fairly heavily entangled.</p>

<p>You could leave your current job and redo the work you did to bring the program to its current state, but that would be a <em>long</em> way from a cleanroom reimplementation of the program, and your employer could at a later time bring an action asserting that your new changes violated their copyright on your old changes.  Essentially, neither of you owns anything useful on its own: you own an old work that you can't bring up-to-date without putting yourself in jeopardy, and they own a shiny new set of changes that only make sense when applied to something they don't own.  No wonder they want to sort this out.</p>

<p>The best outcome I can see for you is that everyone keeps what they have now, but you agree to <strong>license</strong> the original program to them under the terms of the GNU GPL, in exchange for them giving you a copy of the current program under those same terms.  They are then free to use the program as they wish within the enterprise without needing to own the copyright; this is well-understood.  Any copies they transmit outside the enterprise, including the one they give to you, must be licensed under the GPL.  You'll have an unencumbered copy that you can copy / develop / reuse as you would wish, as long as it stays under GPL.  You won't be able to relicense the work, but <em>you don't have the right to do that now</em> (see above) so no loss there.</p>

<p>Next-best outcome is that you agree to transfer copyright in the old work to them, in exchange for a copy of the current work under the terms of GNU GPL.  That leaves you the same as in the previous example, but they now have the right to relicense the work (though not the copy you have, which is irrevocably under GPL).</p>

<p>I can't see many cheery outcomes apart from those two.</p>
","6232"
"Choosing a License for a Tutorial Site","92","","<p>I apologize in advance for what is probably a dumb question, but I'm trying to do this the right way from the beginning.</p>

<p>I'm putting together a coding tutorial site, and my main question boils down to this: <strong>how do I allow ""good guys"" to use my code for whatever they want, but prevent ""bad guys"" from copying my entire site, slapping a new name on it, and making millions of dollars from it?</strong></p>

<p>I don't want to put non-commercial or share-alike restrictions on it, because that will overly restrict good guys. Want to copy some code that ends up in a closed-source, paid app? Cool.</p>

<p>I'd like to prevent somebody from, for example, scraping my website, rehosting everything, and adding a tiny footnote somewhere sorta-kinda attributing my site.</p>

<p><strong>I know in reality this is not a concern</strong>, but I'm curious about any standard approaches to what seems like a common problem.</p>

<p>I've read <a href=""https://opensource.stackexchange.com/questions/2144/preventing-people-from-forking-and-profiting-over-minor-changes"">this question</a>, but the answer seems to admonish the OP for not ""really"" wanting open source. I <strong>do</strong> want open source, specifically so students and teachers can freely use my code for whatever they want, including paid or closed-source projects. Similarly, the answers to <a href=""https://opensource.stackexchange.com/questions/4221/how-can-i-forbid-shady-resale-practices"">this question</a> say to use a copyleft license, but I don't want to do that for the reasons outlined above.</p>

<p>Other things I'm considering:</p>

<ul>
<li>I'd like to allow other people to submit tutorials. I'd like to guarantee that I can use those tutorials without becoming a bad guy myself. For example, I could see maybe collecting the tutorials into an ebook or something.</li>
<li>There are multiple components to the site: the code (and its resources like image files), and the text (and screenshots of the running code), plus <a href=""https://opensource.stackexchange.com/questions/500/does-being-open-sourced-mean-others-can-use-my-logo/3995#3995"">logos</a> and whatnot. Maybe I should use a different license for different resources? That seems confusing though.</li>
<li>I'm using GitHub pages, which introduces its own copyright requirements.</li>
<li>It would be neat to make my site compatible with Stack Overflow's new <a href=""https://stackoverflow.com/documentation"">Documentation</a> feature. My tutorial site is set up with similar ideas: a tutorial on a topic followed by a bunch of examples of that topic. It would be cool if I could kill two birds with one stone and upload my tutorials and examples to the Documentation site. If I choose a license that requires attribution, how does that work? Maybe this deserves its own question (maybe on meta?).</li>
</ul>

<p>Right now I'm leaning towards either using <a href=""http://choosealicense.com/licenses/cc-by-4.0/"" rel=""nofollow noreferrer"">Creative Commons Attribution 4.0</a> or the <a href=""http://choosealicense.com/licenses/mit/"" rel=""nofollow noreferrer"">MIT license</a>. I've also considered writing my own license, but I know that ends up being more trouble than it's worth.</p>

<p>So my question is: how do people usually handle the above concerns? </p>
","<p>Things like this happen all the time. Stack Overflow, Google Devs...</p>

<p><strong>First off, we need to look at ways to license.</strong></p>

<ul>
<li><a href=""http://stackoverflow.com"">Stack Overflow</a> works by licensing all content, text <em>and</em> code, under the Creative Commons Attribution Share Alike license.</li>
<li><a href=""https://developers.google.com/maps/documentation/ios-sdk/marker"" rel=""nofollow"">Google Developers</a> works by licensing all code under the Apache 2.0 license, and all other content under the Creative Commons Attribution license.</li>
</ul>

<p>We kind of see two models here. Single licensing everything (the Stack Overflow model), and selectively licensing everything (the Google model).</p>

<p><strong>Second, we need to figure out who the audience is.</strong></p>

<p>Let's make a table:</p>

<pre><code>People Type |      Code     |      Text     |
            | Read  | Copy  | Read  | Copy  |

Good Guys   |  Y    |   Y   |   Y   |       |

Bad Guys    |  Y    |   Y   |   Y   |   Y   |
</code></pre>

<p>Your good guys are the people looking to learn. They will read the text, but likely won't copy it. As for the code, they may look at it, copy it, or modify it. The code is the main interest to the good guys.</p>

<p>Your bad guys are copying everything for the sole purpose of making money. That's a given.</p>

<p><strong>Third, we need to figure out what to restrict.</strong></p>

<p>Right now, we want to stop the bad guys from doing the bad things they do. But we want to let the good guys pass freely.</p>

<p>You need to restrict any activity whose direct intention is to profit off of your work. This would include activities such as scraping, re-hosting... etc. Fun stuff. To restrict that, would mean violating the <a href=""https://opensource.org/osd-annotated"" rel=""nofollow"">Open Source Definition</a>, as well as hampering the good guys.</p>

<p><strong>Using the information above,</strong></p>

<p>Your best bet is to incorporate the Google model. This is what I recommend going forward:</p>

<ul>
<li>License all code under the <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow"">Apache 2.0</a> (or similar) license.</li>
<li>License all other content (e.g. text, images, media) under the <a href=""https://creativecommons.org/licenses/by-nc/4.0/"" rel=""nofollow"">CC BY-NC</a> license.</li>
</ul>

<p>Why Apache and CC BY-NC?</p>

<p>Only the bad guys copy non-code content. The CC license stops copying of that content, while letting good guys use everything freely.</p>

<p>The good guys will be able to copy code, and use it in any application. Since they don't use textual content, they don't violate any license. Note however, that use of textual content is still governed by various legal doctrines, such as <a href=""http://fairuse.stanford.edu/overview/fair-use/what-is-fair-use/"" rel=""nofollow"">Fair Use</a> or <a href=""http://laws-lois.justice.gc.ca/eng/acts/C-42/page-9.html#h-26"" rel=""nofollow"">Fair Dealing</a>, permitting uses such as research, education, commenting, and private study.</p>

<p>The bad guys will be able to copy code, however, they can't copy any text for <em>commercial</em> purposes. It puts them in an infringing position.</p>

<hr>

<p>Now for your considerations (and how they would work with my proposed model):</p>

<ul>
<li><blockquote>
  <p>I'd like to allow other people to submit tutorials. I'd like to guarantee that I can use those tutorials without becoming a bad guy myself. For example, I could see maybe collecting the tutorials into an ebook or something.</p>
</blockquote>

<p>This <em>would</em> work, but there are some additional implications that you need to consider.</p>

<p>First, you need users to license contributions to you. Not a big deal, can be solved with a ToS (Terms of Service) agreement.</p>

<p>Second, is that you can't go after the bad guys. I'm shaky on this: I'm not familiar with legislation on these matters (most important would be the <a href=""https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act"" rel=""nofollow"">Digital Millennium Copyright Act</a>). Here's the baseline though. To take action on any infringement, you <em>must</em> be the copyright owner, or an agent of the copyright owner. The problem with user contributions is that you are no longer the copyright owner. Assigning copyright is horrible - people will resist, and you require a physically signed paper. Therefore, you'd need to figure out a way to make yourself an ""agent"" (probably through the ToS). But I'm not completely sure how this works. It would be helpful to figure out how Stack Exchange deals with this.</p></li>
<li><blockquote>
  <p>There are multiple components to the site: the code (and its resources like image files), and the text (and screenshots of the running code), plus logos and whatnot. Maybe I should use a different license for different resources? That seems confusing though.</p>
</blockquote>

<p>I proposed this above! It's not as confusing as it looks :)</p></li>
<li><blockquote>
  <p>I'm using GitHub pages, which introduces its own copyright requirements.</p>
</blockquote>

<p>If the implications of GitHub pages only extend to what is included in <a href=""https://opensource.stackexchange.com/questions/1154/how-does-githubs-forking-right-cope-with-an-all-rights-reserved-project"">this</a> post, then you're fine.</p></li>
<li><blockquote>
  <p>It would be neat to make my site compatible with Stack Overflow's new Documentation feature. My tutorial site is set up with similar ideas: a tutorial on a topic followed by a bunch of examples of that topic. It would be cool if I could kill two birds with one stone and upload my tutorials and examples to the Documentation site. If I choose a license that requires attribution, how does that work? Maybe this deserves its own question (maybe on meta?).</p>
</blockquote>

<p>Stack Overflow contributions are licensed under the CC BY-SA license. That's cool, but it isn't cool if you put forward contributions made by other users (which, assuming the model above, would be licensed under CC BY-NC, an incompatible license). Of course, if the only things you send to Documentation are your own work, then you can do it. You can do whatever you would like with your own work. </p>

<p>I'd note that even if you did send users contributions properly (i.e. user contributions were licensed with CC BY-SA), it would properly be unethical to do so, and you're somewhat becoming your own definition of a bad guy there.</p></li>
</ul>

<hr>

<h2>The Your Post Is Tooo Long!!!! I didn't read...</h2>

<ul>
<li>License code under Apache 2.0, or another similar permissive license</li>
<li>License media under CC BY-NC or CC BY-SA, depending on your needs, and your way of dealing with infringers of content.</li>
</ul>
","4402"
"If I create a derivative work of code that follows a protocol, am I still bound by its license?","92","","<p>I'm giving myself a headache just thinking about this, so would appreciate anyone else with an opinion.</p>

<p><em>First, off, a note:</em>
I'm absolutely aware that my current code is a 'derivative work' - That's not in question. The implications of this are giving me a headache though.</p>

<p>The situation is as follows:
I wanted to parse TGA images into a .Net bitmap.
I did some digging, and came up with the following code: 
<a href=""http://www.codeproject.com/Articles/31702/NET-Targa-Image-Reader"" rel=""nofollow"">http://www.codeproject.com/Articles/31702/NET-Targa-Image-Reader</a></p>

<p>This is covered under the CodeProject open-source license. 
I then took the original code, and re-wrote completely, thus creating what I'm reasonably certain at this point is a derivative work.</p>

<p>I then started thinking about the implications of the licensing.</p>

<p>TGA is a fixed file format, with a standard specification.<br>
In order to parse this, you need to read the footer first to determine the version plus various offsets, then the header &amp; extension tables, followed by the image data itself.</p>

<p>Using standard C# tools, I can't see any 'other' easy ways to do this than the standard BinReader.<br>
I can juggle around the order things are called in, but ultimately assuming that any given image conforms to the specifications laid down by Truevision ( <a href=""http://www.dca.fee.unicamp.br/~martino/disciplinas/ea978/tgaffs.pdf"" rel=""nofollow"">http://www.dca.fee.unicamp.br/~martino/disciplinas/ea978/tgaffs.pdf</a> ) , the number of bytes needed to be read can always be determined programatically, and will never be different.</p>

<p>Does this mean that <em>any</em> TGA parser I write is now 'contaminated' by CodeProject license, as I've gained knowledge from it, or have I just opened a can of worms?</p>
","<p>I assume that the CPOL is like the GPL in that it is ""viral""?</p>

<p>Copyright is based on <em>original creations</em>. To infringe a copyright, you have to copy the original work - simply <a href=""https://www.copyrightservice.co.uk/copyright/copyright_myths"" rel=""nofollow"">creating a new work from the same principles is not infringement</a>.</p>

<p>The TGA standard can be considered to be the principle on which you design your software, and thus you can design it without infringing the copyright of the first work you studied.</p>

<p>However, as you mention, it will be difficult for you to prove <em>beyond the balance of probability</em> that you didn't copy the work. This <a href=""http://www.dailymail.co.uk/news/article-2988797/Marvin-Gaye-s-family-wins-7million-Pharrell-Robin-Thicke-Blurred-Lines-lawsuit.html"" rel=""nofollow"">happened last year</a> - Robin Thicke and Pharrell Williams were ordered to pay $7 million to the family of Marvin Gaye because it appeared that they had copied the latter's work. Nobody can tell whether they did or not, but Thicke's having listened to the work while writing his new song led the jury to believe that there was sufficient evidence of copying for there to be infringement.</p>

<p>The same <em>could</em> apply to you - it's not possible to say for certain, as every case is different. In the end, there are arguments for your position and arguments against, and you're going to have to make a judgement about which route you want to take.</p>
","2708"
"Licensing a project which is still under development","92","","<p>As the title suggests I'm a bit confused when it comes to licencing in the middle of development.</p>

<p>Say the following situation (for the sake of argument I'm the only contributor):</p>

<ul>
<li><p>I make a project opensource without a license</p></li>
<li><p>I continue contributing to it and at some point I commit a license doc and license text in the header files. <strong>(Is it licensed at that moment? I assume older revisions do not fall in the scope of the license?)</strong></p></li>
<li><p>I continue developing for it and continue committing fixes, new features, etc. <strong>(Is every NEXT revision licensed with the same license?)</strong></p></li>
<li><p>At some later stage I decide to scrap the license and I get rid of it. <strong>(Is this and every NEXT revision, not licensed again?)</strong></p></li>
</ul>

<p>Is the scenario described above even realistic and if yes, can you please tell me if my assumptions are correct?</p>
","<p>Let's step through them:</p>

<ul>
<li><em>""I make a project opensource without a license.""</em> 

<ul>
<li>Then it's not Open Source. See, for example, <a href=""https://opensource.stackexchange.com/questions/1720/what-can-i-assume-if-a-publicly-published-project-has-no-license"">What can I assume if a publicly published project has no license?</a></li>
</ul></li>
<li><em>""I continue contributing to it and at some point I commit a license doc and license text in the header files.""</em>

<ul>
<li>From this point, the code is licensed under the license you put it under. Older revisions are technically still unlicensed, and still unusable under your new license.</li>
</ul></li>
<li><em>""I continue developing for it and continue committing fixes, new features, etc.""</em>

<ul>
<li>Still under the same license, nothing has changed since the previous version</li>
</ul></li>
<li><em>""At some later stage I decide to scrap the license and I get rid of it.""</em>

<ul>
<li>at this point it becomes important that you are the only contributor. Assuming that, that means that all <em>new</em> revisions are not available as open source. All old revisions to which the license was attached are still licensed under the old version. All open source and free licenses are <em>irrevocable</em>. You can choose to stop distributing something, but you can't stop others that you have already granted a license (read: others that downloaded the software while the open source license was attached) from distributing it under the license your originally released it under. </li>
</ul></li>
</ul>

<p>If there is code from other contributors that was released to you under an open source license, it depends on the license what you can do to it.</p>

<p>Under permissive licenses, <em>generally</em> (but check your license!) if you want to continue distributing it, you <em>may not</em> remove the license from the parts that you personally don't hold the copyright to.</p>

<p>Copyleft licenses like the GPL enforce that you <em>must</em> release all derivatives that you distribute under the GPL. You may not distribute works that derive from GPL source that you don't hold the copyright to under another license, or closed source.</p>

<p>Take a look at the comments on <a href=""https://opensource.stackexchange.com/questions/1711/combining-code-written-under-different-licenses-eiffel-forum-license-mit-and-a/1712#1712"">Combining code written under different licenses (Eiffel Forum License, MIT and Apache), what are my options?</a> for how to handle mixed licenses in your source in the permissive case.</p>

<p>You can also take a look at <a href=""https://opensource.stackexchange.com/questions/23/what-are-the-advantages-of-adding-a-contributor-license-agreement-to-a-project"">What are the advantages of adding a Contributor License Agreement to a project?</a> for the CLA route around this</p>
","1742"
"Opening the source of my project so others can learn","92","","<p>I've been working on a side project for fun that I originally wanted to release and commercialize.  I've realized recently that while I think my work is great and would be fun to share I am not ready to commit to working on it full-time.  I'm afraid that the work I've done is going to be for naught if I don't do anything with it.</p>

<p>I'm considering open sourcing the entire project so that others can learn from many aspects of it including code style, application structure, etc... but I'm worried that someone will take the ideas of my work and either patent it or use/fork it directly to commercialize it on their own.</p>

<p>I've been looking in to various licenses that would allow me to open-source this project so that the code can be analyzed by others for learning purposes, but it seems that all the licenses I've found allow for commercialization.  </p>

<p><strong>Is there any license that I can release the source under to allow learning and contributing but preventing others from commercializing what I've been working on?</strong></p>

<p>Bonus points for follow-up - would releasing it under a license like this prevent me from also commercializing it later?</p>
","<p>I am not a lawyer, but here are some comments:</p>

<p>No Open Source/Free Software license will allow you to disable commercial use of the code. (See <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#NoMilitary"">OSI's FAQ</a> and the <a href=""https://opensource.org/faq#commercial"">GPL FAQ</a>.) Open Source licenses protect users – with a non-commercial clause, in the case you would abandon the project or turn it against users, no one else could take the free version farther than a hobby.</p>

<p>There are licenses that block commercialization. The most popular are the Creative Commons NC varieties, but those are not suitable for code.
Other such licenses were used for code (e.g. <a href=""http://fedoraproject.org/wiki/Licensing/Microsoft_Shared_Source_License"">MS ""Shared Source""</a>, <a href=""https://fedoraproject.org/wiki/Licensing/Scilab_License_Old"">old SciLab license</a>). But don't expect help from the Open Source community when it comes to enforcing these. Your best bet might be to ask a lawyer to write a license that would suit you.</p>

<p>Anyway, consider that if anyone wanted to commercialize your code, it would be in their best interest to hire the person who originally wrote it :)</p>

<p>As for the follow-up: unless you explicitly transfer copyright to someone else, you can distribute your code under any license you like, even after you've released it under a different license. (But it must be <em>your</em> code, so if you include contributions from other people, you need to take into account what license these contributions were under.)</p>
","2762"
"What kinds of products can I release under a MIT License?","92","","<p>I've been searching a lot recently about open licenses, because of college work, but now I want to release some personal stuff and I want to know just what can be licensed with a MIT license.</p>

<p>Most licenses are about software, but a website lists the MIT license to release open source hardware, by modifying the ""obtaining a copy of this software and associated documentation files (the ""Software"")"" part to ""obtaining a copy of this hardware, software, and associated documentation files (the ""Product"")"". Does that mean I could release other products under the MIT license by making the appropriate changes, like pictures, music, etc?</p>
","<p><strong>TL;DR</strong> - You shouldn't use a software license for non-software, and you shouldn't change an existing license.</p>

<hr>

<blockquote>
  <p>I want to know just what can be licensed with a MIT license.</p>
</blockquote>

<p>The <a href=""https://en.wikipedia.org/wiki/MIT_License"" rel=""nofollow"">MIT license</a> is a software license, so in general, that's all it should be used to license. There's no inherent restrictions on your licensing something else with it... but as you've already found, there may be inconsistencies with exactly what parts of your non-software work it covers. These might become a problem in a court of law and could be open to wide interpretations.</p>

<blockquote>
  <p>Does that mean I could release other products under the MIT license by making the appropriate changes, like pictures, music, etc?</p>
</blockquote>

<p>Not really. Because:</p>

<ul>
<li>You can't call it the MIT license if you change it,</li>
<li>you might not be able to change it anyway,</li>
<li>even if you do, it adds to the license proliferation problem, and</li>
<li>your changes might not be legally sound.</li>
</ul>

<p>Firstly, if you change the license, <strong>it's no longer the MIT license</strong>. Calling it that would be confusing, because the MIT license is well-known and refers to the specific words of the license that have been written, copyrighted, and legally tested. As well as being confusing, MIT won't take kindly to you using their name in a license they have not written :)</p>

<p>Aside from that, you can <em>possibly</em> change the license although I personally think this might be a legal grey area. Unless stated otherwise, the actual <em>text of the license</em> would <strong>automatically be copyrighted to MIT</strong>, and unless they've given you permission to change it, you would most likely be breaking their copyright by doing so.</p>

<p>Having said that, it's unlikely that they'll have too much of a concern with this, as long as you use a different name for your license.</p>

<p>There's another problem though: <strong><a href=""https://en.wikipedia.org/wiki/License_proliferation"" rel=""nofollow"">license proliferation</a></strong>.</p>

<p>Basically, by writing your own license, you are burdening people who may choose to use your product because they have to read your license, understand it, consider it, and possibly even get legal advice on it. With a standard license, they would have already done this once to cover them for hundreds of products... so the easiest thing for them to do in this case might just be to skip over your product and use one with a license they know.</p>

<p>Finally, if you're ok with all this, there's another big whammy: <strong>how will you know your changes are legally sound</strong>? Open source licenses have gone through a long vetting process and have been considered by countless lawyers, software developers, and others with knowledge and interest in the process. By using an open source license, you're benefitting from this combined knowledge pool. Unless you're a lawyer - or have access to one - a license you write yourself is unlikely to be as legally sound as one of these licenses and as such, you could find out later that there are loopholes you, or those who use your product, hadn't considered.</p>

<p><strong>In summary:</strong> you shouldn't use a software license for non-software, and you shouldn't change an existing license.</p>
","3998"
"What does ""and contributors"" in the copyright byline imply?","91","","<p>I have read that a simple way to manage contributions was to add ""and contributors"" to the copyright byline:</p>

<blockquote>
  <p>Foo project <br>
  Copyright 2017 J. Hacker and contributors <br>
  Shared under the Libre License version 4 or later</p>
</blockquote>

<p>The suggestion was that this meant that any changes made by contributors were implicitly shared under the same license. I have forgotten where I originally read this, but here's a real-world example of someone doing this:</p>

<blockquote>
  <p>Clarify copyright: ""... and contributors"". Contributors don't have to assign me the copyright to their contributions; they only have to agree to release their contributions under the same license as the rest of the clang-ctags source code. <a href=""https://github.com/drothlis/clang-ctags/commit/dbba978ced602d63f425d7c30635db3c5357cc51"" rel=""nofollow noreferrer"">https://github.com/drothlis/clang-ctags/commit/dbba978ced602d63f425d7c30635db3c5357cc51</a></p>
</blockquote>

<p>Is this true and are there any other implications? (I'm not looking for legal advice, but I am looking for a reliable citation.)</p>
","<p><strong>TL;DR:</strong> A copyright notice is just the list of the copyright owners. It does not give magic licensing powers. The “… and contributors” is a truism: each contributor keeps their copyright unless they sign it away. This is the same as the absence of any copyright notice.</p>

<hr>

<p>A copyright notice is not required, but is strongly encouraged. If you have a copyright notice, it should list the correct copyright owners. If a project was started by a single author who later incorporated contributions by other authors, the primary author does not own sole copyright. For projects with lots of small contributions by many people, it would be unfeasible to list all actual authors in the copyright notice. Instead, it is common to list the <em>group</em> of authors as the copyright owner(s), or to explicitly list the primary authors and note that additional authors exist:</p>

<pre><code>Copyright &lt;year&gt; The &lt;project&gt; authors

Copyright &lt;year&gt; &lt;primary authors&gt; and contributors
</code></pre>

<p>The complete list of authors could perhaps be in an AUTHORS or CREDITS file, or implicitly in the version control history. But as far as I know, keeping a list of copyright owners is not required, it's just a very good idea to ensure traceability.</p>

<p>If the copyright notice would only list the primary authors, this would indicate they own the complete copyright for the project. In the example you cite, the copyright notice was amended to clarify that this is not the case: every contributor keeps their copyright. That is the default. If copyright were to be transferred, this would require an explicit contract (copyright assignment, usually as part of a contributor license agreement).</p>

<p>Note that some jurisdictions separate copyright from moral rights. Then, copyright only covers economic aspects: the copyright owner may issue licenses. Moral rights cannot be waived in some jurisdictions, and e.g. cover the right to attribution. I.e. even if I sign away my copyright to a contribution by accepting a CLA, I may have a right to be credited as a contributor. The copyright notice is not the place for such a credit.</p>

<p><strong>A specific formulation of the copyright notice does <em>not</em> affect how contributions are licensed.</strong> Instead, this would be covered in a contributor license agreement or in the license itself. Notably, the Apache License 2 contains a CLA, and copyleft licenses such as the GPL family limit how derivative works (and therefore contributions) may be licensed. Also, <a href=""https://help.github.com/articles/github-terms-of-service/#6-contributions-under-repository-license"" rel=""nofollow noreferrer"">the GitHub terms of service contain a default CLA</a>, but that only codifies the expectation that contributors issue an implicit license when they explicitly submit contributions to a project.</p>
","5511"
"Will the EPL license apply to my runnable jar (my independent code + auto genarated eclipse code)?","91","","<p>I have one class named Count.java and is independent, not using any eclipse libraries.
I am trying to create a <strong>runnable</strong> <strong>jar</strong> out of it.</p>

<p>While doing so I see that following eclipse package is created
<strong>(org\eclipse\jdt\internal\jarinjarloader)</strong> </p>

<p>so basically the output jar contains</p>

<pre><code>Generated x.jar file structure is

com
  |_din
     |_util
         |_Count.class //Not a derivative work of eclipse.

META-INF
  |_MANIFEST.MF

org        //autogenerated by eclipse 
  |_eclipse
     |_jdt
        |_internal
            |_jarinjarloader
                 |_JarRsrcLoader$ManifestInfo.class
                 |_JarRsrcLoader.class 
                 |_JIJConstants.class    
                 |_RsrcURLConnection.class
                 |_RsrcURLStreamHandler.class 
                 |_RsrcURLStreamHandlerFactory.class    
</code></pre>

<p>Clearly the generated eclipse package is covered under <strong>eclipse public license 1.0</strong>
and 
Clearly my code is not a derivative work of eclipse.</p>

<p>My question:</p>

<p>Can I release my overall license of the jar as my own proprietary jar?</p>

<p>Closest references found is</p>

<ol>
<li><a href=""https://eclipse.org/legal/eplfaq.php#PROPPROD"" rel=""nofollow noreferrer"">https://eclipse.org/legal/eplfaq.php#PROPPROD</a></li>
</ol>

<p>Other closest reference are</p>

<ol start=""2"">
<li><a href=""https://eclipse.org/legal/eplfaq.php#MODULEDIST"" rel=""nofollow noreferrer"">https://eclipse.org/legal/eplfaq.php#MODULEDIST</a></li>
</ol>

<p>Regarding derivative work</p>

<ol start=""3"">
<li><p><a href=""https://eclipse.org/legal/eplfaq.php#DERIV"" rel=""nofollow noreferrer"">https://eclipse.org/legal/eplfaq.php#DERIV</a></p></li>
<li><p><a href=""https://eclipse.org/legal/eplfaq.php#LINK"" rel=""nofollow noreferrer"">https://eclipse.org/legal/eplfaq.php#LINK</a></p></li>
<li><p><a href=""https://eclipse.org/legal/eplfaq.php#EXAMPLE"" rel=""nofollow noreferrer"">https://eclipse.org/legal/eplfaq.php#EXAMPLE</a> </p></li>
</ol>
","<p>If I understand the context correctly, I used the Eclipse IDE to create a Java project and used Eclipse's <a href=""http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-export-runnable-jar.htm"" rel=""nofollow noreferrer"">""Runnable JAR File Exporter""</a> to export my project as a self-runnable Jar. As a result of this process, the exported Jar contains both my own original code and additional Eclipse binary code injected by Eclipse to support the self running feature. The <a href=""http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/plain/org.eclipse.jdt.ui/jar%20in%20jar%20loader/org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandler.java"" rel=""nofollow noreferrer"">source</a> of an example of injected code is licensed under the EPL-1.0.</p>

<p>The question is then: what are my obligations in this context?</p>

<p>The EPL is generally considered as a ""limited copyleft"" license with fairly simple <a href=""https://enterprise.dejacode.com/license_library/Demo/epl-1.0/#license-requirements"" rel=""nofollow noreferrer"">requirements</a> as detailed in <a href=""http://www.eclipse.org/legal/epl-v10.html"" rel=""nofollow noreferrer"">Section 3</a> in particular Section 3.iv:</p>

<blockquote>
  <p>iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</p>
</blockquote>

<p>The gist of it is that a redistribution of unmodified compiled object code (e.g. the class files injected in the Jar) would just require you to provide some credits, disclaimers and a link to were to get the corresponding source code, in this case from the upstream Eclipse project(s).</p>

<p>To further understand the spirit of the EPL, here is a <a href=""http://dev.eclipse.org/mhonarc/lists/epl-discuss/msg00107.html"" rel=""nofollow noreferrer"">commentary</a> from the <a href=""http://www.eclipse.org/org/foundation/staff.php"" rel=""nofollow noreferrer"">Executive Director</a> of the Eclipse Foundation:</p>

<blockquote>
  <p>[...] the EPL 1.0 was always intended to be a weak copyleft license. It was drafted such that anything which is <em>not</em> a derivative work could be offered under whatever terms the copyright holder desired. [...]</p>
</blockquote>

<p>Here having some unmodified EPL-licensed classes included in a Jar is clearly something I would consider as a side-by-side redistribution and not a derivative work.</p>
","4807"
"Can a project be open source even if you don't have a license?","90","","<p>Suppose I am working on a project. I publish this project on a website. I release it without a copyright notice OR a licence. But in the project title /description I say it is open source.</p>

<p><strong>My question:</strong></p>

<p>Under these circumstances is the project open sourced? </p>

<ul>
<li>If yes, under what conditions?</li>
</ul>
","<h3>No.</h3>

<p>You can <em>claim</em> it's open source, but it wouldn't be true. If you don't declare under what agreement people can use the work, or what rights they have, they should legally assume they have no rights (i.e. it is entirely your copyright).</p>

<p>The fact that you haven't included a copyright notice doesn't matter: a CN is a nicety which is in fact there to remind people of the fact that it belongs to you and you can't use it in any way not allowed by the license. The Lack of a CN doesn't remove your copyright.</p>
","722"
"How can you guarantee someone that your open sourced code is what's being used in production?","90","","<p>Let's say you have an app that prides itself on open source technologies and the full codebase of your app being open source is what attracts users.</p>

<p>How can you guarantee your users that your open sourced code is what's actually being used in production?</p>
","<p>For security sensitive open-source projects, it is desirable to provide <a href=""https://reproducible-builds.org/"" rel=""noreferrer"">reproducible builds</a>. Given the same source code, a reproducible build will always create bit-identical output. That way users can take your source code and check whether the binaries you provided were tampered with, e.g. used a patched source code.</p>

<p>If your software is not executed by users but e.g. on your server as a SaaS offering, no good trust mechanism is possible. One way to handle this is to implement client-side/end-to-end encryption. That way, it is less important whether the server contains a backdoor since the server never sees plaintext data. However, this is not feasible for most applications.</p>
","5476"
"How to Audit licensing of old project?","90","","<p>I manage a project with a very long open source history - <a href=""http://www.zikula.org"" rel=""noreferrer"">Zikula</a> (and <a href=""https://github.com/zikula/core"" rel=""noreferrer"">https://github.com/zikula/core</a>).</p>

<p>Zikula grew out of PHPNuke and PostNuke. Most of the oldest code is long gone, but some legacy remains. Early documentation states ""Zikula is free software released under the GPL license!"". Most files within the project have a header which directs to a copy of the GPL or LGPL and there is a <a href=""https://github.com/zikula/core/blob/1.5/src/docs/NOTICE"" rel=""noreferrer"">NOTICE</a> which discusses the mixture of licenses within. Additionally, we depend heavily on Symfony which uses MIT and contributions since beginning on Github in March 2010 are tagged as MIT. We also have many vendors within the project of various licensing.</p>

<p>We have a <a href=""https://github.com/zikula/core/issues/2305"" rel=""noreferrer"">ticket</a> requesting some clarity on the licensing and I am unable to answer. First, because of the information above and second because of my lack of understanding.</p>

<p>I think I would prefer Zikula be licensed with a permissive license like MIT or LGPL (as I believe they are?). The GPL seems to be too restrictive for our case, but likely was the dominant option at the time (15 - 20 years ago?). From what I understand the GPL is ""infections"" and subjugates other licenses within the project.</p>

<p>How can I straighten out this spaghetti? I'm a coder, not a lawyer. How do I audit the current code base and know what was contributed under what licensing and how do I ensure compliance in the future? How to I mix these licenses together or change and relicense as MIT/LGPL or similar?</p>
","<p>This is going to be long, because changing the license from the GPL to a more permissive license is really complicated for a project that is big, old, and has many contributors.</p>

<h2>Which license</h2>

<p>An open-source license should not be chosen because it is popular, but because it is aligned with your goals:</p>

<ul>
<li><p>Strong copyleft licenses like the GPL (and for web apps: the AGPL) try to maximize freedom for end users of any application using this code. This limits how other developers can use the code.</p></li>
<li><p>Weaker copyleft licenses like the LGPL don't ensure end-user freedoms for the complete application, but only to those components subject to the license. This allows developers to incorporate such code into proprietary projects under certain conditions, but does not allow them to turn the code proprietary.</p></li>
<li><p>Permissive licenses like the MIT license and Apache License 2.0 try to maximize freedoms for developers at the expense of end users. Developers can create and distribute modified versions without having to publish their source code. For new projects, the Apache License 2.0 should probably be strongly preferred since it includes a contributor patent grant.</p></li>
</ul>

<h2>The license change proccess</h2>

<p>A license change is a social problem. You will need buy-in and agreement of your community. If the idea of a license change is received positively, you can:</p>

<ol>
<li><p>Stop accepting contributions unless the contributors explicitly agree to relicense their changes to the new license.</p></li>
<li><p>Contact all copyright holders of all past contributions, and ask them to license their contributions to your project under the new license. 
You should keep a permanent record of their consent to this license change. Ideally you get a signed letter. In practice, I guess using GitHub issues would be OK. You can ping contributors in an issue with <code>@example</code> mentions.</p>

<p>Note that the contributors don't always personally hold the copyright to their contributions, e.g. if the copyright belongs to their employer. You would then have to get permission from their employer at the time.</p></li>
<li><p>Wait for the responses to roll in. This may take multiple months. Remember that contributors may be on a vacation, may have shifted their focus away from open-source contributions, or may be dead. You can try to follow up if they don't respond in a reasonable time frame.</p></li>
<li><p>If everyone agreed, you can change all license headers and publish the project with the changed license.</p></li>
</ol>

<h2>A note on licensing new contributions differently in a GPL project</h2>

<p>I see your pull request template specifies the MIT license. This is a great step to give you maximum flexibility during this relicensing.</p>

<p>But since your current license is GPL, any contributions are derivative of existing GPL code in the project and therefore also have to be GPL-licensed. Your contributors do not have the right to issue them under the new license unless you can give them the code under the new license, which requires that all previous contributions have been relicensed.</p>

<p>These changes are therefore not MIT-licensed, but the contributors have given you the option of relicensing them later under the MIT license or a compatible license. If a contributor has given you this option for all their contributions, there is no need to contact them about the license change.</p>

<h2>Dealing with code where consent to license change could not be obtained</h2>

<p>If not everyone agreed to the license change, this becomes more complicated. </p>

<ul>
<li>Silence is not consent! If someone does not respond, you have to assume that they oppose the license change.</li>
<li>If a contributor died, note that their copyright term extends for 70 years after death in most jurisdictions. You can try to contact the current copyright owners, most likely the deceased contributor's estate.</li>
<li>If you have anonymous or pseudonymous contributions, relicensing is exceedingly difficult and I won't discuss that here.</li>
</ul>

<p>If a contributor only made very minor contributions that do not pass the “threshold of originality”, then these contributions are not subject to copyright and you do not need their permission to relicense the project including these licenses. Where this threshold is set depends on the case law in your jurisdiction. This threshold does not give you a right to use these contributions, but just a possible legal defence when accused of copyright violation in respect to these changes. I would be uncomfortable relying on this for anything more substantial than typo fixes.</p>

<p>You can track the license status independently for each file or component. The possible statuses are:</p>

<ul>
<li>The file or component still includes GPL code.</li>
<li>All past and present contributors agreed to license change, but the file or component directly or indirectly depends on GPL code.</li>
<li>All past and present contributors agreed to license change, and the file or component has no dependencies on GPL code.</li>
</ul>

<p>Only in the last case can you update the file to display the copyright/license header for the new license. This might allow you to immediately relicense some components, if your project has a suitable architecture (a win for decoupling and inversion of control!). But while even one piece of GPL code is still present in the project, the project as whole remains subject to the GPL.</p>

<p>For the remaining GPL files, you can try to rewrite them so that they no longer include GPL parts. This is quite tricky because the GPL is a copyleft license: although the other authors of the file agree to the license change, their contributions are derived from GPL code so they can only license their changes under the GPL, not under the new license. It is therefore not sufficient to just rewrite any lines touched by a contributor who didn't agree to the license change. You will have to rewrite the complete file or component from scratch, preferably as a clean-room implementation.</p>

<p>As an additional difficulty, GPL code may have been copy–pasted within the project. Again, the pasted code and any code derived from the pasted code may not be relicensed until the original author has agreed to the license change. Auditing for this might be very difficult, unless the problematic contributions are fairly recent and comparatively minor.</p>

<h2>Conclusion</h2>

<p>Depending on your goals, resources, and community, this might be over fairly quickly, or be a long process that extends across multiple months or even years. And it could be the case that significant authors do not agree with the license change, thus requiring unreasonable effort to eliminate their contributions. In that case, you may want to accept that the project has been locked in to the GPL, and clarify your documentation to reflect this license.</p>
","5482"
"How to require a ""pingback"" when my CC-licensed material is used?","90","","<p>I have a graduation project based on an <a href=""https://konato.igorsantos.com.br"" rel=""nofollow"">open source system</a>. As my university is more leaned towards the market instead of the academia, I wanted to know who else (if ever) is going to take my project from the campus library to read or create new work based on it. </p>

<p>Is it possible to attach some type of creative-commons-like license with a special clause or similar that would require the reader/user of that document to contact me back with some lines on what they're working on? </p>
","<p>None of the Creative Commons licenses require contacting the author as a requirement. You will have to look for another license, or create your own.</p>

<p><a href=""https://opensource.stackexchange.com/q/1445/175"">Creating your own license</a> is not recommended for many reasons, one of which is that, unless you are a copyright lawyer, you will most likely run into problems and create a license that doesn't do exactly what you want. For example, what happens when you get hit by a bus - does the requirement effectively turn the project into a proprietary one? Or does a ""good faith"" attempt at contacting you suffice? All things that need to be clarified in legal language.</p>

<p>One thing's certain if you create your own license: you cannot call it a Creative Commons license:</p>

<blockquote>
  <p><a href=""https://wiki.creativecommons.org/index.php/Frequently_Asked_Questions#Can_I_change_the_license_terms_or_conditions.3F"" rel=""nofollow noreferrer"">Can I change the license terms or conditions?</a></p>
  
  <p>Yes—but if you change the terms and conditions of any Creative Commons license, you must no longer call, label, or describe the license as a “Creative Commons” or “CC” license, nor can you use the Creative Commons logos, buttons, or other trademarks in connection with the modified license or your materials. ...</p>
</blockquote>

<p>You'll find that most licenses are like that; if you modify them by placing additional restrictions, you can no longer call it by the same name. This is to protect the integrity of those licenses.</p>

<p>Your other option is to look for an existing license that has that pingback requirement. The only such one I'm aware of is the <a href=""https://en.wikipedia.org/wiki/Reciprocal_Public_License"" rel=""nofollow noreferrer"">Reciprocal Public License</a>. Instead of requiring a pingback, it does require anyone to publish their extensions, regardless of whether their project is publicly deployed. Even such a requirement is unusual and controversial: RPL is OSI-approved but not an FSF-approved license.</p>

<p>Instead of using a custom license, I would recommend that you give your project a unique name and use a license that requires attribution. That way you can find notable users of your project by searching for them.</p>

<p>Finally, watch out for the license of the open source system that your project is based on. If it is copyleft, chances are it will be incompatible with whatever ""pingback"" license you choose.</p>
","2300"
"Dual license or relicense when the new license is more permissive?","89","","<p>An organization is considering changing the license of an OSS repo on Github. For the purposes of this question, assume that organization has the legal rights to change the license.</p>

<p>It is currently licensed under MPL 2.0, and we need the extra freedom of Apache 2.0.</p>

<p>One proposal is to dual license the code (assuming all contributors agree) as ""MPL 2 || Apache 2.0"". </p>

<p>I have suggested simply relicensing as Apache 2.0 and dropping MPL 2</p>

<p>I see no value in the proposed dual license, as I would expect most people to opt for the Apache license terms.</p>

<p>Can anyone see an advantage to dual licensing MPL/Apache vs simply relicensing?</p>
","<blockquote>
  <p>Can anyone see an advantage to dual licensing MPL/Apache vs simply relicensing?</p>
</blockquote>

<p>If anything, some actual users may feel strongly about the MPL.</p>

<p>Also the MPL 2.0 offers compatibility with v2 of the L/GPL family (thanks to the <a href=""https://www.mozilla.org/en-US/MPL/2.0"" rel=""noreferrer"">secondary licenses terms</a>) ... while the FSF considers the Apache 2.0 not compatible with these v2 licenses (but compatible with the v3 licenses) .</p>
","5927"
"Is GPLv3 violated by releasing proprietary code as a GnuPG-signed package?","89","","<p>I'm working on building a proprietary application that I would like to release as PGP-signed Debian packages.</p>

<p>I heard I might be forced to release the source to my proprietary application simply due to the fact that it would be signed by GnuPG, which is covered under GPLv3 containing the ""Tivoization"" clause.</p>

<p>Is this true?  It is my understanding that the license for GnuPG would enforce disclosing any modifications to GnuPG itself, not the <em>use of</em> GnuPG to apply a signature to an arbitrary ""object"".  Saying that the object I'm signing with GnuPG is now also open source makes no sense to me.</p>
","<p>In general, the GPL does not affect the output of a GPL-licensed program. From the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLOutput"" rel=""nofollow noreferrer"">GPL FAQ</a>:</p>

<blockquote>
  <p><strong>Is there some way that I can GPL the output people get from use of my program?For example, if my program is used to develop hardware designs, can I require that these designs must be free?</strong></p>
  
  <p>In general this is legally impossible; copyright law does not give you any say in the use of the output people make from their data using your program. If the user uses your program to enter or convert her own data, the copyright on the output belongs to her, not you. More generally, when a program translates its input into some other form, the copyright status of the output inherits that of the input it was generated from.</p>
</blockquote>

<p>That is sufficient to show that the output of GnuPG is not automatically licensed under the GPL, so distributing such output within another work does not impose GPL requirements.</p>

<p>In your case, there is a further reason that a signature would not impose GPL requirements: I sincerely doubt that copyright law could ever recognize a cryptographic signature as a creative or derivative work. Cryptographic signing (which, as one of its steps, includes hashing) is a massively lossy transformation that completely destroys the original content of the work and is not designed to be reversed. As such, even <em>if</em> the GPL applied to the output of a GPL signing program (and again, <em>it does not</em>, per the FAQ item above), the output would not be eligible for copyright, so any copyright license such as the GPL would have no effect.</p>

<p>Finally, tivoization only applies if</p>

<ol>
<li>you are distributing a GPLv3-licensed program, and</li>
<li>the program is intended to run on a specific hardware device, and</li>
<li>the hardware of that device refuses to run an incorrectly signed executable.</li>
</ol>

<p>As far as you've described your situation, absolutely none of those criteria apply to your case.</p>
","4685"
"Licensing under ""version X or later""","89","","<ol>
<li>Is it a GPL-only thing or can I use this formulation with any license, like ""MPL 2 or later""?</li>
<li>Does it mean that in case versions 1, 2 &amp; 3 of license are available, ""version 1 or later"" effectively licenses the project under all 3 of them?</li>
<li>Can I formulate it so only the latest version of license would apply at any given time? Does it change with the condition of including license text?</li>
</ol>
","<ol>
<li><p>Adding a statement of ""or later"" to your license notice effectively dual-licenses your project, so yes, in general, you can do this. But Technik Empire raised a good point that future versions of the license may not be compatible. For example, if your GPL v2 code depends on some other GPL v2-only code, then you couldn't upgrade yours to GPL v3.</p>

<p>Whether you would want to when you don't know the terms of future versions is another question. Licenses sometimes change in substantial ways. The GPL-3 has changes which many people care a lot about, and later Creative Commons licenses change how attribution must be made. If you're happy enough with a license to choose it, then I'd recommend just sticking with it. You can always reevaluate and explicitly dual-license your project if the license is revised in the future.</p></li>
<li><p>Yeah that's right, it is dual- (or multi-) licensed under all those licenses.</p></li>
<li><p>You can't change the license of something which has already been distributed. If someone received it under version 2 and wants to use it under that license and not version 3, they can. If you want to publish something only under the latest license, then don't publish under a ""or later"" clause, instead just update the license when a new version is released.</p></li>
</ol>
","4233"
"Using Apache License 2.0 library inside a company","89","","<p>I implemented a little console application in C# (tool) that can go through the web pages on the site and get information, links, files from them. I used Selenium for this purpose. Two nuget packages <a href=""https://www.nuget.org/packages/Selenium.WebDriver/2.53.0"" rel=""nofollow"">WebDriver</a> and <a href=""https://www.nuget.org/packages/Selenium.WebDriver.ChromeDriver/2.23.0"" rel=""nofollow"">ChromeDriver</a> (the last is unlicensed). But WebDriver has Apache 2.0 license. </p>

<p>I don't actually understand very well how we can use projects under this license. My tool will be just pushed to github (private repository, because it is for my company) and used only locally, on my computer, or someone else. This tool is just for our company, it is not for sale. </p>

<p>What should I do or, probably, add to the code, to abide the law?</p>
","<p>You shouldn't need to do anything (except maybe make clear within your company that this tool is not to be redistributed outside the company).
All open source licenses allow private modification and private use without any restriction.</p>

<p>As for the second package, you say that it is unlicensed but I can read:</p>

<blockquote>
  <p>""chromedriver.exe"" is licensed under the New BSD License.</p>
</blockquote>

<p>So I guess it is actually free software as well and the same considerations apply. Otherwise, putting it online like that looks like at least a permission for private use anyways.</p>
","4435"
"If a client sends me GPL'ed code, has it been distributed/conveyed to me?","88","","<p>A client has sent me GPL'ed code to work on for them.</p>

<p>This code has not been publicly released, so there is no way for me to obtain it -
other than directly from this client.</p>

<p>Is this considered distributing/conveying the work to me? i.e. do I automatically obtain a license to use the code myself?</p>
","<h1>GPLv3</h1>

<p>For the GPLv3, no, you do not have the right to distribute the work.</p>

<p>The GPLv3 allows the distribution of a GPL work without the normal full freedoms, in the narrow case that the distribution is done explicitly for the recipient to make modifications. The exact language is in section 2, which applies to contractors who modify the software and to remote execution environments (e.g., ""cloud"" providers like Amazon Web Services do not get GPL rights when you give them a copy of GPLv3 software to run):</p>

<blockquote>
  <p>You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p>
</blockquote>

<p>The rationale for this change was addressed in the <a href=""http://gplv3.fsf.org/gpl3-dd4-rationale.pdf"" rel=""nofollow noreferrer"">release notes for the GPLv3 final discussion draft</a>:</p>

<blockquote>
  <p><strong>4 Conveying to Outside Contractors</strong></p>
  
  <p>Large enterprise users of free software often contract with non-employee
  developers, often working offsite, to make modifications intended for the
  user’s private or internal use, and often arrange with other companies to
  operate their data centers. Whether GPLv2 permits these activities is not
  clear and may depend on variations in copyright law. The practices seem
  basically harmless, so we have decided to make it clear they are permitted.</p>
  
  <p>GPLv3 now gives an explicit permission for a client to provide a copy of
  its modified software to a contractor exclusively for that contractor to modify
  it further, or run it, on behalf of the client. However, the client can only
  exercise this control over its own copyrighted changes to the GPL-covered
  program. The parts of the program it obtained from other contributors must
  be provided to the contractor with the usual GPL freedoms.</p>
  
  <p>This permission is stated in section 2. It permits a user to convey covered
  works to contractors operating exclusively on the user’s behalf, under the
  user’s direction and control, and to require the contractors to keep the user’s
  copyrighted changes confidential, but only if the contractor is limited to
  acting on the user’s behalf, just as the user’s employees would have to act.</p>
  
  <p>The strict conditions in this provision are needed so that it cannot be
  twisted to fit other activities, such as making a program available to users or
  customers. By making the limits on this provision very narrow, we ensure
  that in all other cases the contractor gets the full freedoms of the GPL.</p>
</blockquote>

<h1>GPLv2</h1>

<p>As the above release note indicates, the situation is complex for GPLv2. The situation as it exists outside the GPLv3's special excpetion is addressed in the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#InternalDistribution"" rel=""nofollow noreferrer"">GPL FAQ</a> (take note of <em>both</em> paragraphs):</p>

<blockquote>
  <p><strong>Is making and using multiple copies within one organization or company ""distribution""?</strong></p>
  
  <p>No, in that case the organization is just making the copies for itself. As a consequence, a company or other organization can develop a modified version and install that version through its own facilities, without giving the staff permission to release that modified version to outsiders.</p>
  
  <p>However, when the organization transfers copies to other organizations or individuals, that is distribution. In particular, providing copies to contractors for use off-site is distribution.</p>
</blockquote>

<p>If this client is distributing someone else's GPL-licensed work (or a derivative) they are only permitted to do so under the GPL. Does your case qualify as distribution? This FAQ item certainly presents the unambiguous opinion that off-site distribution to a contractor (or any non-employee) constitutes distribution. This basically reduces to the question of ""Are you an employee or a contractor?"" If you're an employee, you are an agent of the company, so the code isn't moving outside the company's possession. If you're a contractor, then your receipt of the code is external to the perimeter of the company, and it is distribution.</p>

<p>In case you're not convinced, this case is very unambiguously covered in <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#DevelopChangesUnderNDA"" rel=""nofollow noreferrer"">another FAQ item</a> (note the final paragraph, which I have emphasized):</p>

<blockquote>
  <p><strong>Does the GPL allow me to develop a modified version under a nondisclosure agreement?</strong></p>
  
  <p>Yes. For instance, you can accept a contract to develop changes and agree not to release your changes until the client says ok. This is permitted because in this case no GPL-covered code is being distributed under an NDA.</p>
  
  <p>You can also release your changes to the client under the GPL, but agree not to release them to anyone else unless the client says ok. In this case, too, no GPL-covered code is being distributed under an NDA, or under any additional restrictions.</p>
  
  <p><strong>The GPL would give the client the right to redistribute your version.</strong> In this scenario, the client will probably choose not to exercise that right, but does have the right.</p>
</blockquote>

<p>So, your client <em>can</em> place a restriction in your contract about when you may (or may not) release your <em>own</em> changes, but they cannot legally tell you when you may or may not release <em>their</em> code that they distributed to you under the GPL.</p>

<p>Of course, even if there is no legal impediment to distributing your client's code without their say-so, that sounds like a very efficient way to demolish your trustworthiness as a contractor. They can't sue you, but they are free to hire someone else for future work.</p>
","5573"
"Ramifications for including open source code in academic research","88","","<p>Recently I submitted a manuscript on a new R-package I have developed. The journal's decision was ""Revise and Resubmit"". </p>

<p>The editor and 2 reviewers all had very helpful comments. However, I'm not sure exactly how to interpret a comment that all 3 of them had. My package uses the open source C++ Eigen library for matrix manipulations, for which I mention in both the package and the manuscript. They asked justification for <em>why</em> I used the Eigen library, and whether it was completely necessary. </p>

<p>The answer is that it is not; R comes with matrix tools. However, using these tools for my project at the C++ level is not immediately straightforward; there are ways it can be done but given the work I have done so far, it would be <em>a lot</em> of work for me to do this. </p>

<p>For the record, the Eigen library uses the MPL2 license. </p>

<p>So my question is: are there are major ramifications for including the Eigen library in my open source code? If the reviewers are asking why I used Eigen <em>because there are huge consequences for doing so</em>, then I could rewrite my work without it, although I <strong>really</strong> don't want to. On the other hand, if they are merely asking because why I did because it's not clear, the answer is simple: because it was easier for me to do so. </p>

<p>I have declared the license on my work as MPL2 as well. </p>
","<p>When you use a 3rd party library even though the standard library provides the same functionality, you are adding an unnecessary dependency to your package. Any additional dependencies are problematic because they create maintenance overhead.</p>

<p>You will either need to include the library as static files in your package, which means that future updates to the dependency must be applied manually. Or you will have to link it dynamically, which means that anyone building your package must also acquire the dependencies on their own.</p>

<p>By keeping 3rd party dependencies to a minimum and only depending on the standard library you keep your package self-contained and easier to use and maintain.</p>
","2251"
"AGPL v3 project with MIT licensed framework","87","","<p>I wish to create an AGPLv3 project which uses an underlying framework which is MIT-licensed.</p>

<p>The framework offers some source code which needs to/can be modified to make the framework bend to the users' needs. When I modify those files, can I convert them to AGPLv3 (while keeping required copyright notices of course) or should they stay under the MIT license?</p>

<p>Or am I just overthinking this and a simple notice such as ""This project uses the FooBar v1.2.3 framework which is MIT-licensed"" in a README would be enough?</p>

<p>EDIT: For clarifications, I'll describe the project structure.</p>

<p>The project and all libraries are written in the PHP language. I have the framework installed via a package manager (Composer), which creates a vendor directory where the framework's ""core"" is available.</p>

<p>The installation also creates some bootstrapping for me to use (config files, application bootstrap sequence, some baseline MVC pattern goodies). These will be the base of my project.</p>

<p>The things that are installed into the vendor directory are not shipped with the project source but are required for operation and are installable via the package manager. Files and other components are linked from the vendor area by using a simple file <code>include</code> feature of the language, and are not modified in any part of the project.</p>

<p>Can I convert the bootstrapping code to AGPLv3 while the contents that are living under the vendor directory stay as MIT?</p>

<p>Most PHP frameworks operate on this principle and 99% of projects are done this way. I just want to be sure that I'm legally on the right grounds when licensing the project itself and writing about copyrights.</p>
","<p>@ojrask It's not clear what the relationship is between the framework and the AGPLv3 project.</p>

<p>I am not a lawyer, but here's my understanding.</p>

<p>If the AGPLv3 project is linking (either dynamically or statically) against the MIT-licensed framework, then both the project and the framework will need to be licensed under AGPLv3. The source for both the framework and the project will need to be distributed. This is true regardless of whether or not you modify the MIT framework. </p>

<p>If there is no linking involved between the framework and the project, then you are allowed to license them independently (MIT framework and AGPLv3 project).</p>

<p>Here are some links showing the X11 (MIT) license is compatible with the AGPLv3:
<a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses</a>
<a href=""http://www.dwheeler.com/essays/floss-license-slide.html"" rel=""nofollow noreferrer"">http://www.dwheeler.com/essays/floss-license-slide.html</a></p>

<p>EDIT:
The requirements for the MIT license are a subset of the AGPLv3 requirements. Assuming that the bootstrapping code that you mention is also is MIT-licensed, then I believe as long as you keep all of the copyright notices, you should be okay to ""convert"" (as you call it) to AGPLv3</p>

<p>From <a href=""https://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">https://opensource.org/licenses/MIT</a>:</p>

<blockquote>
  <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, <strong>sublicense</strong>, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
</blockquote>
","5026"
"Am I legally obligated to provide access to my open source project?","87","","<p>Suppose I have a peice of software that I am developing with a group of friends. Suppose we license our work under a CC license and publish it on the internet.</p>

<p><strong>My question:</strong></p>

<p>If we license our software as open source are we legally obligated to provide access to the source code? If no, why not? Is this just optional?</p>
","<p>Creative Commons licenses <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_apply_a_Creative_Commons_license_to_software.3F"">aren't appropriate for software</a>, in particular because they contain no requirement on the availability of source code. So technically (and legally) you could distribute your software as binaries under a CC license, and licensees would be allowed to modify the binaries, but that wouldn't be open source by any definition.</p>

<p>The <a href=""http://opensource.org/osd"">Open Source Definition</a>, section 2, requires the availability of source code:</p>

<blockquote>
  <p>The program must include source code, and must allow distribution in source code as well as compiled form. Where some form of a product is not distributed with source code, there must be a well-publicized means of obtaining the source code for no more than a reasonable reproduction cost preferably, downloading via the Internet without charge. The source code must be the preferred form in which a programmer would modify the program. Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.</p>
</blockquote>
","790"
"How to let developer get a look on pull-requests","87","","<p>I created a pull-request on Github repository whose last activity is half a year ago. But I am not sure whether this patch would be reviewed by developer. I do want this patch be applied to the repository.</p>

<p>I thought some way to notify the patch to the developer, but I am wondering which of these is the most effective way.</p>

<ul>
<li>tweet</li>
<li>Github comment</li>
<li>mail</li>
</ul>

<p>Could you tell me the effective way to notify patch to developer?</p>
","<p>A @ping on the PR itself seems the most ""polite"" to me. Alternatively, GitHub recently introduced a <a href=""https://help.github.com/articles/about-pull-request-reviews/"" rel=""noreferrer"">reviewers feature</a>, so adding the relative developer there may also be useful.</p>

<p>If neither generate any response, I'd go for a private <strong>polite</strong> email. Using a tweet seems to me like publicly declaring that someone isn't properly maintaining their open-source project. I very much doubt that would get you the response you want.</p>
","5644"
"When to list contributors","87","","<p>Many projects have a list of contributors, either as a platform-agnostic <code>AUTHORS</code> text file, or in some way included in the project description metadata of the programming framework in use. When should users be added to that list, and who should add them?</p>

<p>Possible solutions that come to my mind or that I've heard or read in the past:</p>

<ol>
<li>Anyone contributing code should be listed, i.e. the moment the pull request gets merged the one initiating the merge should ensure that the contributor gets mentioned. If the contributor thought of doing this already, that's all for the better.</li>
<li>Contributors who want to be named should add themselves as part of the pull request. If they don't it's their problem, and not much of a problem at that. If they later request being added, that request has to be honored.</li>
<li>The list of contributors should contain the <em>core</em> authors only, those responsible for the overall direction of the project. It's up to those core authors to decide when to admit some frequent contributor or new designated maintainer to their ranks.</li>
<li>It doesn't matter; in the days of GitHub, any such information as part of the working directory content is superseded by the git history anyway, and therefore should be ignored, or perhaps even deleted.</li>
</ol>

<p>There certainly is a spectrum here, and certainly different projects will want to handle things differently. But are there any established guidelines applicable to many projects? Are there any legal requirements for or against one of these approaches? Any moral arguments to rule out one of them?</p>
","<p>I think it matter, and everyone should be listed, and I think the reasons are almost entirely moral.</p>

<p>Limiting the list to the core team fails to acknowledge major contributors.  Leaving contributors out because their contributions are small or infrequent is rude.  After all, a contributor list is a form of 'Thank you' and maybe offers a little encouragement to those who have not yet contributed.  Maintaining a correct contributor list shows that you care about everyone's contributions.</p>

<p>Contributors who provide patches will have their email listed automatically in the history, otherwise I think simply their name/handle should be used.</p>
","2812"
"Copyright unitl the ""present"" year in BSD license?","86","","<p>I have the following line in my BSD (new, 2 clause) open-source code:</p>

<pre><code>// Copyright (c) 2003-present, Jodd Team (http://jodd.org)
</code></pre>

<p>Previously, I've used a real year (e.g. <code>2003-2014</code>). However, updating <em>a lot</em> of files every January just to update the year is PITA.</p>

<p>Is above copyright statement correct for BSD license?</p>

<p>Btw, I saw this in <a href=""https://github.com/facebook/react/blob/master/src/renderers/art/ReactART.js"" rel=""nofollow noreferrer"">Facebooks</a> code.</p>
","<p>The answer to your question is very wide, because it depends on the Laws of the Country you're referring to. </p>

<p>To keep a long story short the above copyright statement is incorrect for any license.</p>

<p>To take it as a general discussion that will probably protect you in many countries, I suggest you to update the year as soon as you update that source file. </p>

<p>If allowed by the Law, you can specify an interval, which would mean you continuously authored that file between year X and Y; where Y is not last year of validity of your copyright, which often - depending on the country - lasts 75 years after the death of the author.</p>

<p>In some countries using ""present"" would mean ""right now"", which is the exact moment when you write that, and it'll put you in a very weak position would you go in a court because:</p>

<ol>
<li>you're clearly lying because you did not wrote it ""right now"" in a court;</li>
<li>that won't prove that you wrote that piece of software <strong>before</strong> somebody else but, on the contrary anybody else can claim you copied it as you declared that you authored it ""right now"".</li>
</ol>
","4890"
"GPL3 project with EPL library","86","","<p>I am making an opensource project and I would like to cover it with the GPL3 license. I also plan to use a library that is released under EPL license (<a href=""https://github.com/forge/roaster"" rel=""nofollow noreferrer"">https://github.com/forge/roaster</a>). Is this possible?</p>

<p>More details: source code of my project and its resources would be covered with GPL3 license, but I would also like to include this EPL licensed library and some libraries under Apache 2 license and one library with BSD 3 license.</p>
","<p>The GNU Project lists the <a href=""https://www.gnu.org/licenses/license-list.en.html#EPL"" rel=""nofollow noreferrer"">EPL as a GPL-incompatible license</a> which means that you cannot take EPL-licensed code and combine it in the same work as a GPL-licensed work.</p>

<p>However, since you are the author of the GPL work in question, you may license your work under the GPLv3 with exceptions. Section 7 of the GPLv3 allows you, the author, to introduce additional permissions, including the permission to link to specific libraries under GPL-incompatible licenses. The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"" rel=""nofollow noreferrer"">GPL FAQ has a tutorial on how to do this in a legally sound way</a>. Therefore, you may include the EPL in your work licensed under the GPLv3-with-exceptions, and others may use, modify, and redistribute it without fear of legal complications.</p>

<p>Two important caveats about GPL exceptions:</p>

<ul>
<li>Per <a href=""https://opensource.stackexchange.com/questions/4771/gpl3-project-with-epl-library/4772#comment12494_4772"">a comment below</a>, the GPL-with-exceptions license you create by this process is itself incompatible with the regular GPL. This means that you cannot include anyone else's GPL code (nor can anyone else's GPL project include your code), unless the author of that code includes an identical exception to match yours.</li>
<li>Any downstream recipient who modifies your code is free to remove the exception, at the cost of reintroducing incompatibility with the EPL component, but with the potential benefit of making the code compatible with the vanilla GPL.</li>
</ul>
","4772"
"How to benchmark GPL software?","86","","<p>I would like to create a benchmark that compares several open-source implementations of a particular functionality. Some of those implementations carry a GPL license, while others are more open: Apache, MIT, BSD-3.</p>

<p>The benchmark itself is relatively simple: prepare data, run the function in a loop, measure time/memory footprint, repeat for every implementation. Even though I can run this on my own computer and publish just the results, it is considered a good practice to also provide the source code for the benchmarks. Assuming that I'm only allowed to publish the benchmarking code as Apache v2, what options do I have? The code that I'm testing has to be modified slightly in order to ensure uniformity of interfaces across  all implementations.</p>

<ul>
<li>Claim fair use exception and include GPL code into the benchmark? It is my understanding that GPL is copyright-based, and the <em>fair use</em> doctrine specifically exists to allow reuse of small portions of copyrighted text in reviews (which benchmarking essentially is).</li>
<li>Include the GPL code, but have it commented out, with instructions saying that whoever wants to benchmark the GPL implementations will have to manually uncomment and recompile? In this case the GPL code would be propagated, but without being included in the ""final product"" - would this count as distributing an ""aggregate"" (from GPL standpoint)?</li>
<li>Do not include the GPL code at all, stating that the terms of GPL license prevent me from doing so? Accompanied by a link where one can download this code on GitHub, and an explicit instructions how to incorporate it into the benchmarking framework.</li>
</ul>
","<h1>Communicate at Arm's Length</h1>

<p>What you can do is communicate only with the open-source licensed code ""At arm's length"".
<a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLInProprietarySystem"" rel=""nofollow noreferrer"">See here</a>.</p>

<p>Communicating at arm's length, e.g. via command-line call, ensures that rather than your work being a derivative of the software you are benchmarking, it is simply code distributed along side it.</p>

<p>Now, most code you want to benchmark won't have a suitable commandline interface for your purposes.
That is fine.
<strong>You create for each package a boiler-plate that is licensed the same as that package, and which provides a command-line interface.</strong></p>

<p>Then you create your benchmarking framework that triggers each of the boiler-plates in turn, over the command line (eg python's <code>popen</code>, julia's <code>run</code>),
and reads back in the key data.
They run in a seperate process, and the framework only interacts with the boiler-plates like a user would.
So the framework is not a derivative of the boilerplate, so you can license it however.</p>

<p>Your overall benchmarking suite, comprised of Framework + Boilerplate, is not under any one license. It is not a derivative (though parts of it are), it is a collection.</p>

<p>Now depending on the exact situation:</p>

<ul>
<li>how similar each boilerplate is</li>
<li>how much has to be done in the same process</li>
<li>how much should be done in the framework  (e.g graphs, data-gen etc)</li>
</ul>

<p>You might want to generate the boilerplates eg with a templating language.
The licensing on that feels a bit weird, but it should be fine.</p>

<p>Or you could have the common functionality shared by all the boiler-plates into another library which you license as CC/0 (compatible with everything), and then each of your boilerplates just <code>import benchmarkcommons; runbench(loaddll(""SOFTWARE.so""))</code> </p>
","6057"
"Include library dependencies licenses as well?","86","","<p>Sadly this didn´t really answer my question: <a href=""https://law.stackexchange.com/questions/3359/when-including-libraries-licenses-do-i-need-to-include-the-libraries-dependenc"">When including libraries licenses, do I need to include the libraries&#39; dependencies&#39; licenses too?</a></p>

<p>If I use Library A which is MIT and Library A needs Library B which is also MIT, do I need to provide the texts for both Libraries in my UI?</p>

<p>The other question does not answer my question if I need to provide a copy of the license texts in my software.</p>
","<p>The MIT licence says</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.</p>
</blockquote>

<p>So the code that you received must have it, and all you need to do is leave it intact, if only in the source code, when you redistribute it.</p>

<p>If you are only distributing binary code, then include all of the licenses you are using (i.e., both of the MIT licenses) in your LICENSE.txt or whatever documentation you distribute along with your code.  But note that (unlike the BSD licenses) the MIT license does not contain an explicit requirement to do anything other than maintaining the copyright and license in the <em>source</em> code, and makes no requirement to say anything to users via the UI or a LICENSE.txt document.</p>
","6143"
"Open source licensing with extra restriction clause","86","","<p>I know the title is a bit misleading, I guess it might not be possible to release software as open source with this restriction, so the question is how I should license the following scenario:</p>

<p>I want to release one or more software tools (SDK etc) that has a specific purpose. One of the points behind the whole project idea, is that everyone should use the same API because that benifits the other people using the same tools. Might sound a bit cryptic, but I guess you understand the point.</p>

<p>Other than that, I want the project to be like a normal open source project (MIT/BSD license). Sharing, contributing, no problem. People can even copy the tools and modify them if they want. The only important thing is that they still use the given API for backend requests, at least in any open environment (production), having a local API for testing/developing is no problem.</p>

<p>The goal is to keep the benifits of using the same API, instead of anyone trying to set up their own API for the same purpose, splitting up the project and thereby the benifits for the end users.</p>

<p>Sort of like if Facebook released all their frontend code, allowing people to make their own FB app, only demanding that people use their API instead of setting up their own, so the database of users are not split up.</p>

<p>What would be a possible licensing for a project like this?</p>

<p><strong>Alternative</strong></p>

<p>If there is no way to release an open source project with the described restriction, how about the following:</p>

<p>I copy the text of an open source license (like BSD), and add a clause for the described API rule. I don't refer to the license as BSD, only use the same text as a template. In the project Readme/docs, I would of course explain that it is not a standard open source project, and refer to the license file. Would that be OK in regards to whatever case where the project license would be relevant?</p>
","<p>This would not be open source. The <a href=""http://opensource.org/osd"">open source definition</a> mandates:</p>

<blockquote>
  <ol start=""6"">
  <li>No Discrimination Against Fields of Endeavor</li>
  </ol>
</blockquote>

<p>Using your software for interfacing with a competing backend service is such a field of endeavor.</p>

<p>You are of course free to create an own crayon license based on the BSD or MIT license which forbids interfacing with any API not hosted by you. It's your work and you alone can decide who can use it and for what. But when you make use of your copyright in this way, please do not call it open source.</p>
","2039"
"What truly defines open source? Can someone call something open source and charge?","86","","<p>I have recently been looking for open source dating software to build upon and I keep seeing things like this:</p>

<p>www.skadate.com/open-source.php</p>

<p>www.a-dater.com</p>

<p>www.abk-soft.com</p>

<p>ph7cms.com</p>

<p>Which all clearly state that they are ""Open-source"", yet I cannot redistribute or resell anything, and I cannot have access to the source without paying minimum $200-300 in most cases.</p>

<p>Is my understanding of open source incorrect, is the landscape shifting, or are people just using this as marketing to try and entice unsuspecting buyers to their websites?</p>

<p>Is what they are doing legal?</p>
","<blockquote>
  <p>Is what they are doing legal?</p>
</blockquote>

<p>It certainly seems that way. The phrase ""open source"" is just a pair of words. Anyone can use the phrase to refer to some kind of ""source"" that is ""open"" in some respect.</p>

<p>The Open Source Initiative wrote the <a href=""https://opensource.org/osd-annotated"">Open Source Definition</a> (OSD), which is what most people mean when they say ""open source"". However, <a href=""https://opensource.org/pressreleases/certified-open-source.php"">""open source"" is not a trademark</a>, and is probably ineligible for trademark status, according to Eric S. Raymond:</p>

<blockquote>
  <p>We have discovered that there is virtually no chance that the U.S. Patent and Trademark Office would register the mark ""open source""; the mark is too descriptive. Ironically, we were partly a victim of our own success in bringing the ""open source"" concept into the mainstream.</p>
  
  <p>So ""Open Source"" is not and cannot become a trademark...</p>
</blockquote>

<p>Thus, there's no legal impediment to using the phrase ""open source"" to mean a wide range of different things.</p>

<p>The practice of giving away the source but without allowing redistribution or modification is what the Open Source Initiative might call ""<em>source available</em>,"" but again, there's nothing legally wrong with using ""open source"" to mean something other than ""complying with the Open Source Definition."" However, if you wish to make yourself clearly understood within the FLOSS community, please use ""open source"" and ""source available"" appropriately. Obviously, these companies are not interested in making themselves clearly understood within the FLOSS community; they are interested in making sales.</p>

<p>Finally, requiring payment to get a copy of the software is perfectly in line with <a href=""http://www.gnu.org/philosophy/selling.en.html"">the values of the Free Software Foundation</a> and the <a href=""https://opensource.org/faq#commercial"">Open Source Initiative</a>. However, OSD-compliant software would allow you to freely use, modify, and redistribute the software once you paid for it, which these software products do not allow.</p>
","2523"
"Can a copyright owner grant additional permission for another project to use under a different license?","85","","<p>Can a copyright holder of a GPL licensed project grant permission to allow another project to use it under the terms of a different license?</p>

<p>The GNU/GPL is a copyleft license, which means that derivative work can only be distributed under the same license terms [<a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License]"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/GNU_General_Public_License]</a>.</p>

<p>For example, the copyright owner of a project under a GPL license could grant permission to a project that uses a license such as MIT or BSD to distribute their work (in whole or in part) under that more permissive license. If this is allowed, are there any caveats to doing this?</p>
","<p>You can release your intellectual property to different people under different license conditions. This is not just permissible, it is a common business model commonly known as <a href=""https://en.wikipedia.org/wiki/Multi-licensing"" rel=""nofollow noreferrer"">multi-licensing</a>. It is not uncommon to release a GPL-licensed version of a software gratis, but also offer a paid version under a license which allows to distribute derivative works under proprietary licenses.</p>

<p>This business model works well for frameworks, middleware, libraries and other software which is usually used as a base to develop other applications. With the GPL-version, those other applications must also be GPL-licensed, which limits the monetization options. But when you buy the proprietary license, you have far more options, including pay-by-install.</p>

<p>The MIT and BSD are rarely a good choice for this business model, though, because they allow redistribution under the same terms. So anyone you sell a BSD or MIT license to would then be able to underbid you. A paid license for an open source project usually does not allow to relicense the sourcecode of the derivatives to other parties.</p>

<p>Still, you see software multi-licensed under GPL, MIT and/or BSD. So if you don't feel like taking sides in the endless discussion about which open source license is the most free one, you can simply let people choose under which software license they prefer to use your software.</p>
","5921"
"Closing an inactive feature request?","85","","<p>Consider the following GitHub issue representing a suggested feature.</p>

<ol>
<li><strong>Inactive</strong> - has not been commented on in four months</li>
<li><strong>Not popular</strong> - requested by a single person, and no evidence suggests that anyone else is interested in it</li>
<li><strong>No implementation ideas</strong> - there have not been any suggestions about how to implement the suggested feature</li>
</ol>

<p>While perception varies a bit from project to project, are these criteria usually considered sufficient to close the issue?  If not, what other criteria should be considered?  </p>

<p>Or is the concept of criteria a bad idea to start with, maybe? Or should feature requests not be closed in the first place?</p>
","<p>As the question stands, the best option (of the three we're supposed to choose between) is:<br>
""Not Sufficient"".</p>

<p>There is, however, a follow-up question:</p>

<blockquote>
  <p>What other criteria should be considered?</p>
</blockquote>

<p>The answer to this is:<br>
This depends on the project, the request and the maintainer's outlook.</p>

<p>There comes a time when it is clear that a feature request is not going to be worked on and it is time to close.  <em>When</em> that time comes is not easy to pin down in the generic case.</p>

<p>I maintain projects that has more than two year old feature requests (fitting <em>all</em> of your three criteria) open.  I keep such requests open because I (the project owner and maintainer) think the project will benefit from from having such a feature - even it has not attracted any ""me too""-responses. I haven't found time to work on it myself, but keeping it open means that it is not off he charts, and a pull request to implement it will be welcome.  I usually leave a comment like this:</p>

<ul>
<li>I don't think I can find the time to work on this anytime soon, but it looks like a nifty feature, and I will commit a pull request that does a good job implementing it.</li>
</ul>

<p>And I have closed a feature request after 14 days that fits <em>none</em> of your criteria.  In the latter case, the criterion may (for instance) be given as (in somewhat more diplomatic language): </p>

<ul>
<li>It is an aim of this project to stay <em>small</em> and <em>lightweight</em>.  Your pull request is bloated and ugly, and will only benefit a small group of users who will be better served by using project X for this feature.</li>
</ul>

<p>Clearly, this is not the <em>only</em> criterion for an almost instant closure - the list is almost infinite (depending on the project, the request and the maintainer's outlook), but you get the idea.</p>

<p>I usually respond to a feature requests with no pull request that is pretty marginal with something that indicates that imminent closure is <em>likely</em> unless the community takes steps to prevent closure. Example:</p>

<ul>
<li>I (the maintaner) am not going to work on this feature. This will be closed in about two weeks <em>unless</em> there a pull request is posted in the next two weeks that passes community review for code quality and desirability.</li>
</ul>

<p>(The latter answer depends on having in place a community driven triage system for pull requests, which I have for all my community driven free software projects.)</p>
","1306"
"Do Contributors Own Copyright After Sending Contributions?","85","","<p>I have a GitHub repository which its license is GPL. Although of this, in the ""about"" window of my program, I mentioned that I own the copyright (like this: © My name, 2017). And I added the GPL text too there.</p>

<p>However, if a contributor sends me a pull request via GitHub and I accept it, does that mean he's now qualified to be a copyright holder? Can he also put his name like (© His name, 2017)? What are the legal consequences of this? Isn't ok to just list his name in the authors list of the program, instead of saying ""copyright ©: someone..""?</p>
","<p>The common understanding is to consider that contributions are made under the same license as the project these are contributed to (unless stated otherwise).</p>

<p>On GitHub, this is made explicit in the <a href=""https://github.com/github/site-policy/blob/1263bf0164cfe60d0900e70ba9126855c7c23c6c/Policies/github-terms-of-service.md#6-contributions-under-repository-license"" rel=""noreferrer"">terms of service</a>: </p>

<blockquote>
  <p>Whenever you make a contribution to a repository containing notice of a license, you license your contribution under the same terms, and you agree that you have the right to license your contribution under those terms. If you have a separate agreement to license your contributions under different terms, such as a contributor license agreement, that agreement will supersede.</p>
  
  <p>Isn't this just how it works already? Yep. This is widely accepted as the norm in the open-source community; it's commonly referred to by the shorthand ""inbound=outbound"". We're just making it explicit.</p>
</blockquote>

<p>When you accept a contribution, two things happen:
1. the contribution is under the existing project license
2. the copyright of this contribution is that of the contributor.</p>

<p>Therefore the copyright of the codebase as a whole is now shared between you and the contributor. (Though in practice there may be subtle things that have a legal meaning: for instance if I contribute a one-character typo fix, I do not have much a copyright ownership if any).</p>

<p>You can therefore either add the copyright of these authors or keep an authors file as you see fit to document this. A common practice is to use a ""Copyright (c) the XXX authors"" (or contributors) and list authors or not separately.</p>

<p>Now even though this documentation may have some legal meaning, even if not present the shared copyright is still there nonetheless. </p>
","5855"
"How to handle third party licenses in git repository?","85","","<p>I'm working on writing some eclipse plugins. I host the code in Gitlab repository. For these plugins I used some icons from this <a href=""http://eclipse-icons.i24.cc/"" rel=""nofollow noreferrer"">website</a>. Here it says that these icons are licensed under Eclipse Public License which can be found <a href=""http://www.eclipse.org/legal/epl-v10.html"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Now I have to include it in my repository if I want to use these icons. The question is where to put it in project structure? I can put it in the root of the repository but Gitlab will link it as it's license for the whole project and I don't want to license my whole project under EPL.</p>

<p>Would it be correct to have a separate folder for third party licenses where I will put this one and some other licenses(if I ever use some third party software in the future) and to have a separate license of my choosing for the whole project in the root of my git repository?</p>
","<p>I would suggest to put the license of your plugin to the root. This way Gitlab displays the correct license and everyone knows directly the license of your plugin.</p>

<p>For 3rd party libs or data I would suggest to create appropriated sub-directories and put the licenses next to them in the same directory.</p>
","5735"
"Is there a temporary copyleft license?","85","","<p>Suppose I produce some work, and I want all derivative works released before the year 2030 to be open source under the same license, but during and after the year 2030 I wish to allow derivative works to be released with merely an attribution</p>

<p>In other words, I want a license that becomes more permissive over time.</p>

<p>Does such a license exist? If not, are there any reasons why a license like this could not exist?</p>
","<p>There are a few FOSS or FOSS-like licenses with time-based conditions.</p>

<p>One of the more common was the <a href=""http://website-archive.mozilla.org/www.mozilla.org/mpl/MPL/NPL/1.1/"" rel=""nofollow noreferrer"">Netscape Public License</a> (emphasis mine):</p>

<blockquote>
  <p>V.2. Other Products.</p>
  
  <p>Netscape may include Covered Code in products other than the Netscape's Branded Code which are released by Netscape during the <strong>two (2) years following the release date of the Original Code</strong>, without such additional products becoming subject to the terms of this License, and may license such additional products on different terms from those contained in this License.   </p>
</blockquote>

<p>e.g. certain special terms apply only for the first two years.</p>

<p>Another license with a time provision is the <a href=""https://github.com/zooko/tgppl/blob/master/COPYING.TGPPL-v1.rst#transitive-grace-period-public-licence-tgppl-v-10"" rel=""nofollow noreferrer"">TGPPL</a>:</p>

<blockquote>
  <p>[...] to distribute or communicate copies of the Original Work and Derivative Works to the public, with the proviso that copies of Original Work or Derivative Works that You distribute or communicate shall be licensed under this Transitive Grace Period Public Licence n<strong>o later than 12 months</strong> after You distributed or communicated said copies;</p>
</blockquote>

<p>e.g. the license comes into force only after 12 months.</p>

<p>In general, time-based evolution is the essence of copyright protection and therefore the essence of FOSS copyright-based licenses (at least in the US) and the copyrights do expire after a <a href=""https://en.wikipedia.org/wiki/Copyright#Duration"" rel=""nofollow noreferrer"">period</a>. (increasing longer) </p>

<p>Creative Commons also had a license e.g. the <a href=""https://wiki.creativecommons.org/wiki/Founders_Copyright"" rel=""nofollow noreferrer"">""Founders copyright""</a> to effectively make a copyright expire after 14 or 28 years and therefore let the work ""fall"" in the public domain. It was used by O'reilly <a href=""https://web-beta.archive.org/web/20051001130813/http://creativecommons.org:80/projects/founderscopyright/oreilly"" rel=""nofollow noreferrer"">for a short while</a>.</p>

<p>With all that said, I would advise against creating a new license.
Instead what you could consider is picking a license and adding an extra notice stating that your copyright claim will expire at some date and that the work will then be in the public domain. You likely want the help of a lawyer to draft this properly.</p>
","5354"
"Using AGPL v3 software in an enterprise deployment without sharing the changes","85","","<p>An enterprise utilizes the source code of a network software product licensed under the AGPL v3. It modifies the source code but does not share the changes with the original developer and copyright holder, and keeps the changes private. It then hosts the modified version within its servers, but does not distribute the source code as a bundle to any third parties. It allows a closed group of its authenticated customers (not the general public) to interact with this modified product - via web services - fronted through a web portal of the enterprise.</p>

<p>Is the enterprise violating any of the terms of the AGPL v3? If so, which exactly?</p>
","<p>The company in question has to follow the terms of the AGPL, in particular <a href=""https://www.gnu.org/licenses/agpl-3.0.html#section13"" rel=""nofollow"">section 13</a>:</p>

<blockquote>
  <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p>
</blockquote>

<p>This means that any (authenticated) user accessing the service must be able to obtain the source code, including modifications, of any modified component licensed under the AGPL <em>or the GPL</em> (the AGPL extends to the GPL when GPL works are combined with AGPL works). Not only that, but the web portal must prominently notify the users of this possibility.</p>
","4072"
"Can I create and use my own license or do I need to publish it somewhere?","84","","<p>I have created a license for my apps:</p>

<blockquote>
  <p>This computer program is licensed under Illuze License v1.0.0 or later.</p>
  
  <p>Illuze License
  v1.0.0 [3rdDec2015]
  -Rahul2001.com
  It's simple:</p>
  
  <p>-You are free to use this application in any manner as long as you aren't, in any way (directly or indirectly), hurting a living being.</p>
  
  <p>-You are free to distribute this in any manner or as many times as you like.</p>
  
  <p>-You are free to use the source code (if provided) in any manner but must give credit to the original source(s) or author(s).</p>
  
  <p>-You are NOT allowed to sell this app.</p>
  
  <p>-You are NOT allowed to bundle it with anything that may count as:
   (i)Malware, (ii)Adware, (iii)Spyware or an otherwise undesirable application.</p>
  
  <p>-You are not allowed to distribute compromised versions of this app.</p>
  
  <p>-Any modified version of this application must also be licensed under the Illuze license.</p>
  
  <p>-Any application which uses this application completely, or in part, must also be licensed under the Illuze license.</p>
  
  <p>-The author is NOT responsible for what you do.</p>
  
  <p>-No warranties/guarantees are provided with this application.</p>
</blockquote>

<p>Do I need to publish or register it anywhere for it to count as a proper license?</p>

<p>Also, can anyone see any potential issues with this? I only plan to use this because other licenses are <em>too</em> long for my liking and let's be honest, most people don't even read them... Creative Commons is awesome but doesn't suit my needs and requirements...</p>
","<p><strong>Please please please don't use that license.</strong></p>

<p>To answer your main question, no, you don't need to register a license for it to ""count"". You just include it with the software it's licensing.</p>

<p>To answer ""are there any potential problems"": yes there are.</p>

<blockquote>
  <ul>
  <li>You are not allowed to distribute compromised versions of this app.</li>
  </ul>
</blockquote>

<p>Define ""compromised"".</p>

<blockquote>
  <ul>
  <li>You are NOT allowed to bundle it with anything that may count as: (i)Malware, (ii)Adware, (iii)Spyware or an otherwise undesirable application.</li>
  </ul>
</blockquote>

<p>Bundle what? This is legal stuff, be specific. Bundle.. the pig? Bundle... the software? Specify.</p>

<p>Additionally, define (i) malware, (ii) adware, (iii) spyware, and (iv) undesirable.</p>

<blockquote>
  <ul>
  <li>You are free to distribute this in any manner</li>
  </ul>
  
  <p>(...)</p>
  
  <ul>
  <li>You are NOT allowed to sell this app.</li>
  </ul>
</blockquote>

<p>Contradiction in terms. ""Any manner"" implies I <em>can</em> sell it; then you tell me I can't. Legal ambiguity is <em>bad</em>.</p>

<p>Also, again, ""distribute this"". What's <em>this</em>?</p>

<hr>

<p>I'll stop picking your license apart now. Don't feel too bad about it - lots of people try to write their own licenses, and unless it's done with a lawyer, almost all of those fail. Use a license that's been professionally vetted, <em>please</em>.</p>
","2291"
"Can I use code under Apache 2.0 license that does not originally contain copyright notice?","84","","<p>I plan on creating a new project under Apache 2.0 license, and I want to use js, css, fonts, and image files in the public folder of this repository (which is under Apache 2.0): <a href=""https://github.com/watson-developer-cloud/conversation-simple"" rel=""nofollow"">https://github.com/watson-developer-cloud/conversation-simple</a></p>

<p>Apache license directs me to keep original copyright notice in files, but I am not sure what to do when there isn’t one already. The js and css files in public folder, as well as fonts and images, do not contain copyright notice.</p>

<p>Does this mean I cannot use these files?</p>

<p>If I can use those files, should I include the copyright notice myself, copying over from other files that do contain one?</p>
","<p>From reading the documentation on the site it seems that the author intends everything to be Apache 2.0 licensed, so if you agree with that conclusion you can use the files even if they lack an explicit license header. I would suggest that you, in the documentation/license information of your own project, clarify that you are using file x, y and z from <a href=""https://github.com/watson-developer-cloud/conversation-simple"" rel=""nofollow"">https://github.com/watson-developer-cloud/conversation-simple</a>.</p>

<p>Maybe something not too far from:</p>

<blockquote>
  <p>This project uses source code from the files x.js, y.js and z.css from <a href=""https://github.com/watson-developer-cloud/conversation-simple"" rel=""nofollow"">https://github.com/watson-developer-cloud/conversation-simple</a>, <em>copyright someone YYYY</em>, licensed under the Apache 2.0 license. Followed by the whole Apache 2.0 license text.</p>
</blockquote>
","4513"
"Distribute as FOSS for non-profit use, and charge for profit use?","84","","<p>Is it possible to have software that is licensed as open source (under some OSI scheme), but only for personal/non-profit use, while alternatively charge a fee for enterprise/for-profit use?</p>

<p>This is similar to a dual-license, I believe, but not the same.</p>
","<p>No, this is not possible.</p>

<p>See clause 6 of the <a href=""https://opensource.org/osd"" rel=""noreferrer"">Open Source Definition</a>:</p>

<blockquote>
  <p><strong>6. No Discrimination Against Fields of Endeavor</strong>  </p>
  
  <p>The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.</p>
</blockquote>

<p>The <a href=""https://opensource.org/osd-annotated"" rel=""noreferrer"">annotated version</a> adds:</p>

<blockquote>
  <p><strong>Rationale:</strong> <em>The major intention of this clause is to prohibit license traps that prevent open source from being used commercially. We want commercial users to join our community, not feel excluded from it.</em></p>
</blockquote>

<p>So the clause explicitly prevents what you want to do. If it’s open source software (as defined by the OSI), for-profit use is allowed.</p>
","5225"
"Guidelines for licensing and attribution for code from an article/blog post","84","","<p>I am following a series of programming articles. In order to understand them better, I type in the code examples and play around with them - sometimes I change the code, sometimes I don't. I also like to comment some lines with quotes from the original article. I cannot find any licensing or attribution information in and around the articles.</p>

<p>I would like to put the project with the examples and the quotes up on Github. If I had written all the code from scratch I would have used a BSD or an Apache license. I do mention and link to the original articles in the <code>README</code>.</p>

<p>What is an appropriate approach to licensing and attribution in this case?</p>
","<p>So you want to distribute parts from an article which has no license.</p>

<ul>
<li><p>If the parts are <strong>eligible for copyright protection</strong> :</p>

<p>You are not allowed to distribute these parts at all.</p></li>
<li><p>If the parts are <strong><em>not</em> eligible for copyright protection</strong> (or something like ""<a href=""https://en.wikipedia.org/wiki/Fair_use"" rel=""noreferrer"">fair use</a>"" etc. applies):</p>

<p>You are allowed to distribute these parts. You don’t <em>have</em> to attribute (but it would be polite to do so). You can choose any or no license.</p></li>
</ul>

<p>It’s not necessarily clear whether something is not eligible for copyright protection; apart from obvious cases, better assume that it is. Quoting small parts from the article (using quotation marks and providing the author name and article URL) will most likely be fine, though.</p>

<p>The best way is to ask the author for permission. The author could give you a personal permission to distribute these parts (specifying how you should attribute, if at all), or the author could decide to license the article under a specific license for everyone (in which case the license’s conditions apply to you).</p>
","6383"
"Interpretation of AGPL with Shiny Server","84","","<p>The open source version of the <a href=""https://www.rstudio.com/products/shiny/shiny-server/"" rel=""nofollow noreferrer"">Shiny Server</a> is released with AGPL v3.</p>

<p>Along my interpretation of the AGPL, this means that all the code that is deployed on the Shiny Server has to be released with (A)GPL v3, and whoever interacts with the code has to have access to the source as well. Is this correct?</p>

<p>My concern is:</p>

<ol>
<li>I presume my code would run in the same process as the AGPL code,
hence it would make a combined program. Is this correct?</li>
<li>If so, I have the obligation to convey it, right?</li>
</ol>
","<p>If a server program is licensed with an Open Source license, the license terms apply to the server software itself, not to your own files that you host using that server.</p>

<p>For the Affero GPL, your obligations are the same as for the GPL unless if you modify the server software. The relevant part of the AGPL is as follows (emphasis added):</p>

<blockquote>
  <ol start=""13"">
  <li>Remote Network Interaction; Use with the GNU General Public License.</li>
  </ol>
  
  <p>Notwithstanding any other provision of this License, <strong>if you modify the
  Program</strong>, your modified version must prominently offer all users interacting 
  with it remotely through a computer network (if your version supports
  such interaction) an opportunity to receive the Corresponding Source
  of your version by providing access to the Corresponding Source from a
  network server at no charge.</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/agpl.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/agpl.html</a></p>

<blockquote>
  <p>I presume my code would run in the same process as the AGPL code,
  hence it would make a combined program is this correct?</p>
</blockquote>

<p>Hosting an executable file with a server does not make that executable file and the server program a combined work. The GPL refers to this situation as an ""aggregate"" (empasis added):</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  “aggregate” if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit. <strong>Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate</strong>.</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/gpl-3.0"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-3.0</a></p>
","6215"
"Legal to use ""research-only"" data in an open source product?","84","","<p>Is it okay to use data (for machine learning purposes) that specify that they can only be used for ""research-only"" purposes (or ""non-commercial"") in an open source product?</p>

<p>If so, is it okay to take donations from my open source product, or would that be considered as a ""commercial"" purpose?</p>

<p>For example: using face recognition ""research-only"" data for an open source face recognition model.</p>
","<p>Given the details you give in comments, we can consider that your software would most likely be a derivative of the original research-only / non-commercial data.</p>

<p>Then the question is what the license has to say about derivatives? Does it even allow them? If it does not explicitly allow them, you are most likely not authorized from publishing any software based on this data, under any license.</p>

<p>If derivatives are allowed, under what conditions? In the case of a CC-BY-SA-NC license, you would have to keep the license for any derivative that you distribute, and this is not an open source license. But it could also be more lax, in which case maybe an open source license would be allowed.</p>

<p>In conclusion: it all boils down to exactly what is written about derivative works in the license.</p>
","5213"
"Software: If I bundle built (compiled) GPL 2 licensed software with commercial software package how does it affect my software license?","84","","<p>If I bundle a piece of <strong>compiled</strong> software <em>(in this case, FFMPEG)</em> which is licensed under GPL 2, with my own commercial software (which is not licensed under any form of open source license), does it affect the license that I have to apply to my software?</p>

<p>My understanding is that the GPL 2 licensed component does not affect my software if it is compiled/built - it would affect it if I was including some/all of the source code in my own project. </p>

<p>I want to bundle a built (.exe) copy FFMPEG, which is licensed under GPL 2, with my own software...But I don't want to have to open source my software project. </p>
","<p>First FFmpeg can be built with different licensing depending on the build config resulting in binaries that are LGPL or GPL-licensed, but not always GPL-licensed.</p>

<p>Second, if you link with and call the libav* libraries from your proprietary code, the general community opinion is that you may eventually create some kind of derived of the library. </p>

<p>If the library is GPL-licensed then then GPL copyleft terms would flow back and apply to the calling code.  </p>

<p>If the library is LGPL-licensed then then LGPL copyleft terms would flow back and apply to the calling code is you use some static linking and would not apply if you use dynamic linking.</p>

<p>In all cases, the details of which L/GPL version is in play and how you interact with FFmpeg matters a lot. </p>

<p>Say you use FFmpeg as-is, unmodified and call its command line tool in a subprocess, then in most cases neither a GPL nor an LGPL copyleft would back to the code that spawns the subprocess. </p>

<blockquote>
  <p>My understanding is that the GPL 2 licensed component does not affect my software if it is compiled/built - it would affect it if I was including some/all of the source code in my own project.</p>
</blockquote>

<p>This does not sound a correct assumption to me, but there is not enough specifics in your question to be sure.</p>

<blockquote>
  <p>I want to bundle a built (.exe) copy FFMPEG, which is licensed under GPL 2, with my own software...But I don't want to have to open source my software project. </p>
</blockquote>

<p>So based on all I said above, it depends on how you interact with FFmpeg.
And in all cases whether using the GPL or LGPL regardless of how you call FFmpeg you will need to redistribute the source of FFmpeg proper.</p>

<p>As a side note, there are also codec patents to consider wrt. FFmpeg especially when used in a commercial software package. You must take these into consideration too. </p>
","5191"
"An even lesser LGPL-like license that allows static linking","83","","<p>Is there a weak copyleft license, that:</p>

<ul>
<li>allows you to distribute the sources, as long as they are under the same license</li>
<li>allows you to do pretty much what you want if you do not distribute the sources</li>
</ul>

<p>The main problem I have with the LGPL is that if I'm not mistaken you have to dynamically link it to your project, and I do not want this requirement: as far as I'm concerned, you can just compile it inside your main project.</p>

<p>I've been looking at the MPL and maybe that's more or less what I'm searching for, but I'm not sure I fully understand it.</p>

<p>Does the MPL match my requirements, or is there any other license available that does?</p>
","<blockquote>
  <p>The main problem I have with the LGPL is that if I'm not mistaken you have to dynamically link it to your project, and I do not want this requirement: as far as I'm concerned, you can just compile it inside your main project.</p>
</blockquote>

<p>The MPL (Mozilla Public License) 2.0 does indeed allow static linking without complicated technical requirements contrary to LGPL. It is IMHO much easier to understand than LGPL. Maybe you would benefit from reading the <a href=""https://www.mozilla.org/en-US/MPL/2.0/FAQ/"" rel=""nofollow noreferrer"">FAQ</a>.</p>

<p>However I'm a bit concerned by this requirement of yours:</p>

<blockquote>
  <p>you to do pretty much what you want if you do not distribute the sources</p>
</blockquote>

<p>So if people fork your library and make it closed-source you don't care, but if they fork it and switch to an alternative open source license then you mind?</p>

<p>If this is really what you are asking for, then you might have better luck with <a href=""https://opensource.org/licenses/MS-PL"" rel=""nofollow noreferrer"">Microsoft Public License</a>.</p>
","5265"
"Can Wikidata which runs under CC-Zero incorporate CC BY content?","83","","<p>Wikidata is a database licensed under CC-Zero. </p>

<p>If Wikidata would include CC BY content with Wikidata properly labeling the source, would that be okay? Or do third-parties that want to reuse the Wikidata database without attribution get in trouble for this?</p>
","<p>I'm not familiar with Wikidata, but I don't think this would be ok.</p>

<p>When you go to <a href=""https://www.wikidata.org/wiki/Special:NewItem"" rel=""nofollow"">create an article on Wikidata</a>, you're met with this:</p>

<blockquote>
  <p>By clicking ""Create"", you agree to the <a href=""https://wikimediafoundation.org/wiki/Terms_of_Use"" rel=""nofollow"">terms of use</a>, and you irrevocably agree to release your contribution under the <a href=""https://creativecommons.org/publicdomain/zero/1.0/"" rel=""nofollow"">Creative Commons CC0 License</a>.</p>
</blockquote>

<p>There's nothing there about contributing content that is licensed by others. It must be <em>your</em> own <em>original</em> content. So, no CC-BY content, no GFDL content, no all rights reserved content, nothing - unless it's written and owned by you, or already in the public domain.</p>

<p>I suspect the exact problem they're aiming to avoid is the one you stated: they want third-parties to be able to use the Wikidata content without fear of getting sued (having said that, there's still a risk if the person who originally contributed the data lied about where it came from).</p>

<hr>

<p>Even though CC-BY isn't share-alike, you still can't release CC-BY content under CC0, because by doing so you would be nullifying any requirements for <a href=""https://creativecommons.org/licenses/by/4.0/"" rel=""nofollow"">attribution to the original author</a> - something you don't have the right to do. The original author still retains all copyright on their creation, and absense of a share-alike clause doesn't allow you to change the license on their work - it just frees you to not have to release <em>your changes</em> in a similar manner.</p>

<p>It's also worth noting that CC0 may not hold under some jurisdictions anyway due in part to the inability to revoke moral rights. As mentioned by Zizouz212 in the comments, this includes Canada and Germany, among others.</p>
","4098"
"Choosing a license based on conditions or an extensible license","83","","<p>I have several open source projects and now I really got to a question of choosing a license. They all are somewhat licensed, but in a noob way.</p>

<p>I don't think I'll find something meeting all of the criteria, but maybe I can find something extensible (unlike CC, for example), so I can separately state my conditions.</p>

<p>I want to license both source code and non source code materials.</p>

<p>What I want:</p>

<ol>
<li>Allow private use without most of the restrictions. If somebody is using/forking for themselves (or a small closed group, if you can legally formulate that), then I'm OK if they don't state the changes/don't publish the source code/use it in proprietary product. Most likely they would use it like that anyway, but it's better to allow them.</li>
<li>Allow commercial use, but with a default share-with-me clause. Yea, I can state that the project is for non-commercial use only and that I can relicense it on personal conditions, but I want to make it somewhat easier. Make money on it if you can &amp; give me 5% or, if you don't like that, spend some time &amp; contact me.</li>
<li>Get notifications about other projects using mine (out of curiosity, self-importance and because it would be a good point in stuff like portfolio). If somebody is using my project (or a meaningful part of it, if you can legally formulate that) in another public project, then I want them to notify me about that (like post/email/PM).</li>
<li>Allow relicensing for commercial use. I don't think I want somebody to take my project and close the code for themselves, but if they are sharing with me at the same time, then why not. Keeping of these conditions on a derivative project is optional.</li>
</ol>

<p>Of course I also want my credits all over derivative projects, but that's a usual condition.</p>

<p>Probably all of these conditions are more of requests then requirements to a license, but that's how I'd like it.</p>
","<p>My 2 cents is that you are after too many conflicting requirements at once.
Compulsory share-back-with-me and notify-me type of licenses would likely not be what I call free, libre or open source licenses.</p>

<p>Based on your parameters, I would pick some kind of well known copyleft or limited copyleft license such as as the LGPL, GPL or AGPL: this would not meet all your requirements though. Yet a limited copyleft license would probably strike the best balance where you want to allow all usage including proprietary usage and want to grant some freedom to your code.</p>

<p>You can ask for reuse notification, but I would shy away from demanding it.</p>
","4204"
"Copyright notice must be regularly updated while the project is active?","83","","<p>I started an open source project in 2013, with the LGPL license. I've been regularly working on it for the last four years. Each file includes the standard copyright notice that include the copyright year.
Obviously not all files were modified every year so some of them reports ""Copyright 2013"" some ""Copyright 2014"" or ""Copyright 2015"" and only a few ""Copyright 2016"". 
The project is a library so it has no welcome or splash-up screen where to report the current copyright date.</p>

<p>What is the correct practice in this case? Should I update yearly every file updating the notice to the current year, even if this is the only midification to the file. Is it even better the whole range of years (Copyright 2013-2016)? Or should I leave the copyright year untouched, with the meaning of the year of the file creation?</p>
","<p>Since you're using the LGPL, I suggest you follow the <a href=""https://www.gnu.org/prep/maintain/html_node/Copyright-Notices.html"" rel=""nofollow noreferrer"">GNU project's recommendations</a>: your copyright notices should look like</p>

<blockquote>
  <p>Copyright © 2013, 2014, 2015, 2016 cannatag</p>
</blockquote>

<p>and you should simply update them all at the start of every year, assuming you're publishing every year (if your source code is publicly available during development, that could be construed as counting as publication). The <a href=""https://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow noreferrer"">GPL howto</a> clarifies this:</p>

<blockquote>
  <p>Whichever license you plan to use, the process involves adding two elements to each source file of your program: a copyright notice (such as “Copyright 1999 Terry Jones”), and a statement of copying permission, saying that the program is distributed under the terms of the GNU General Public License (or the Lesser GPL).</p>
  
  <p>The copyright notice should include the year in which you finished preparing the release (so if you finished it in 1998 but didn't post it until 1999, use 1998). You should add the proper year for each release; for example, “Copyright 1998, 1999 Terry Jones” if some versions were finished in 1998 and some were finished in 1999. If several people helped write the code, use all their names.</p>
</blockquote>

<p>If you want to play it safe and avoid any accusation of over-reaching in your copyright notices (I have no idea how much of a risk that is), you might instead want to update the years only when you make non-trivial changes to the relevant files; so you'd end up with a variety of copyright notices depending on when each file was edited:</p>

<blockquote>
  <p>Copyright © 2013, 2015 cannatag</p>
  
  <p>Copyright © 2014, 2016 cannatag</p>
  
  <p>Copyright © 2014, 2015, 2016 cannatag</p>
</blockquote>

<p>Other projects have different recommendations; thus the <a href=""https://www.eclipse.org/legal/copyrightandlicensenotice.php"" rel=""nofollow noreferrer"">Eclipse Foundation</a> recommends mentioning the first and last year of publication in each file:</p>

<blockquote>
  <p>Copyright © 2013, 2016 cannatag</p>
</blockquote>

<p>Even that is subject to interpretation, and for example in <a href=""https://www.opendaylight.org"" rel=""nofollow noreferrer"">OpenDaylight</a> we use the Eclipse form, per-file: each file has a copyright notice with the year it was created in and the last year it was updated in.</p>

<p>You should <a href=""https://opensource.stackexchange.com/a/2875/118"">avoid ranges</a> though, they don't have a definition in US copyright law at least.</p>

<p>Given the variety of practices out there I can't see the details actually having an impact <a href=""https://opensource.stackexchange.com/a/300/118"">beyond documentation</a>; when it comes to courts, it seems to me that actual copyright is decided based on more than the notices themselves (see for example <a href=""https://sfconservancy.org/copyleft-compliance/vmware-code-similarity.html"" rel=""nofollow noreferrer"">Conservancy's analysis of Christoph Hellwig's contributions to the kernel</a>). (Of course I am not a lawyer and you should consult one if this is troubling you.)</p>
","4283"
"Should I cite anything in my app for public domain/license?","83","","<p>I am soon launching an android app that uses some code and apis from other other developers or public domain etc, I believe they all have a public domain or similar public license. </p>

<ol>
<li><a href=""https://github.com/simplenlg/simplenlg/blob/master/LICENSE.md"" rel=""nofollow noreferrer"">https://github.com/simplenlg/simplenlg/blob/master/LICENSE.md</a></li>
<li><a href=""http://icon.shef.ac.uk/Moby/mwords.html"" rel=""nofollow noreferrer"">http://icon.shef.ac.uk/Moby/mwords.html</a></li>
<li><a href=""https://wordnet.princeton.edu/wordnet/license/"" rel=""nofollow noreferrer"">https://wordnet.princeton.edu/wordnet/license/</a></li>
</ol>

<p>(i need more than 10 rep to post 3 links but that is another if necessary ^)</p>

<p>All of these feature a similar type of statement </p>

<p>""Permission to use, copy, modify and distribute this software and database and its documentation for any purpose and without fee or royalty is hereby granted, provided that you agree to comply with the following copyright notice and statements, including the disclaimer, and that the same appear on ALL copies of the software, database and documentation, including modifications that you make for internal use or for distribution."" </p>

<p>I understand I don't owe anyone money or royalties from profits off my app (it's a paid app, if that's relevant), but do I cite these code sources anywhere? The part that confuses me is the ""and that the same appear on ALL copies of the software"". Am I supposed to have a copyright or reference to this domain or Api somewhere in my code or in my app? Do I just leave my app how it is and not worry about anything because it's license allows me usage or what?</p>
","<p>There is a tremendous difference between public domain and the broad (nebulous) category of what you call ""public licenses"". Public domain means there is no copyright on the work, and you may deal with it virtually without restriction. An open-source or free-software license means that copyright does exist on the work, but the copyright owner will allow you to use it in specific ways. Use of the work outside that terms specified in the license is illegal.</p>

<p>Importantly, the MPL 1.1 is a weak copyleft license, meaning that if you modify any of the files in that project, your changes must also be licensed under the MPL. Because MPL has a weak copyleft, this does not extend to the rest of your project, though. If you use any component has a <em>strong</em> copyleft, like the GNU GPL, then <em>that</em> would require that your <em>entire project</em> be licensed under that license (e.g., the GPL, or whatever copyleft license it is).</p>

<blockquote>
  <p>Am I supposed to have a copyright or reference to this domain or Api somewhere in my code or in my app?</p>
</blockquote>

<p>Yes, that is exactly correct. For instance, if you use Chrome, which is built on loads of open source software, you can see all their required notices in the <code>chrome://credits/</code> URL. You need not obnoxiously force these notices onto your users every time they start up your app, but you must make them accessible somehow (e.g., via menu option).</p>

<p>Also <strong><em>critically</em></strong>, the Moby Words projects states in the README,</p>

<blockquote>
  <p>This documentation, software and/or database was developed
  and copyrighted by Grady Ward and is licensed, not sold, to
  you on a non-exclusive, non-transferable basis. The documentation,
  software and/or database and derivative works of this database
  may not be copied in whole or part except for archival purposes
  as provided by law. If you have purchased the commercial license,
  Grady Ward explicitly grants you the limited right to create and
  market data structures or knowledge bases derived this work
  without further payment of a license fee, as long as the purpose
  and effect of that data structure or knowledge base is other than
  re-distributing that Grady Ward data structure or database...</p>
</blockquote>

<p>Unless you have purchased the commercial license, this seems quite clear that you are not allowed to redistribute the work within your application.</p>
","4263"
"The download for source is a newer version than the version shipped","83","","<p>I have built a program using several open source libraries. Most of them fall under MIT, BSD, Appache and  LGPL license. To my understanding some of them require the source code to be shared. I was hoping to build a website that would provide the source for download. My problem has to do with providing the correct version of the source. Is this mandatory?</p>

<p>For example say I am using package X version 1.2 and my site allows users to download package X from the creators of X's git repo. Time passes and package X is upgraded to version 3.1. Thus my website is now pointing at the new version of the source even through my program was distributed using version 1.2. </p>

<p>Does this still meet the requirement to allow users to download the source? </p>
","<p>The <a href=""https://gnu.org/licenses/"" rel=""nofollow"">GNU Project licenses</a> are specific about what counts as source for a work: redistribution requires that one must also make available to every recipient the “<strong>complete corresponding source</strong>” for that very same work.</p>

<p>This ensures the recipient has effective freedom to modify and redistribute the same work themselves.</p>

<p>So, for a work licensed with that wording, it is a violation to fail to offer the source for <em>the same</em> work as was distributed to the recipient. In other words, source for some other version does not satisfy that clause.</p>

<p>Complete corresponding source for the work is a pre-requisite for the recipient's effective freedom to modify and/or redistribute the work.</p>

<p>For non-copyleft licenses, the redistributor is not required to distribute source at all. So they do not ensure the recipient's freedom.</p>

<p>So if you want to ensure recipients can get the complete corresponding source for the same work they received, license that work with terms of a <a href=""https://gnu.org/copyleft/copyleft.html"" rel=""nofollow"">copyleft from the FSF</a>, such as <a href=""https://gnu.org/licenses/gpl.html"" rel=""nofollow"">GNU GPL v3 or later</a>.</p>
","1581"
"Where is the safe place to download Firefox?","83","","<p>I would like to use an open source web browser, but I see lots of different places offering a download of Firefox. How do I tell which one is the correct place to download from?</p>
","<p>Wherever possible, you should download software directly from the vendor. If that's not possible, use a trusted, preferably secure (HTTPS) source such as softonic.</p>

<p>Firefox is made and released by Mozilla, so you should download from them wherever possible. The downloads page is <a href=""https://www.mozilla.org/en-GB/firefox/new/"" rel=""nofollow"">here</a>.</p>

<hr>

<p>There are some indicators I use to determine how trustworthy a downloads site is:</p>

<ul>
<li>Page written in bad English - <strong>bad</strong> but not 'leave this site now'</li>
<li>Page served over HTTP - ditto</li>
<li>Page <em>doesn't have</em> a HTTPS version (not just they served over HTTP, but no secure version exists) - <strong>bad</strong></li>
<li>""FREE! ABSOLUTELY FREE! NO RISK! VIRUS SAFE!"" - <strong>get away from there</strong></li>
<li>If they can't get the name right (<a href=""https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=7&amp;cad=rja&amp;uact=8&amp;ved=0CEgQFjAG&amp;url=http%3A%2F%2Fwww.downloadfirefoxbrowser.com%2F&amp;ei=Cm-VVdxTpqnsBpGGgKAD&amp;usg=AFQjCNHzYR1m0BY7wnJDE-pFJq2WOv-qWg&amp;sig2=9N5zYyB5v2OZyb7bTwXUkA&amp;bvm=bv.96952980,d.ZGU"" rel=""nofollow"">""Fire Fox"", anyone?</a>) - <strong>bad</strong></li>
</ul>
","787"
"GPL v2 and proprietary extensions","82","","<p>I am trying to understand when do the GPLv2 spreads from a program to its extensions and vice versa.</p>

<p>Everything I've read seems to say that if you use a module (shared library or any other ""tightly coupled"" interaction) under the GPLv2, then your program has to be under GPL v2 and vice versa: a module for a program under the GPLv2 has to be under the GPLv2.</p>

<p>This is what I understand from a theoeretical point of view. However, it appears that VirtualBox, which rely on KVM and therefore has to be -and actually is- under GPLv2, also has a proprietary Extension Pack.</p>

<p>So, what in the nature of this Extension Pack makes it possible for Oracle to <strong>distribute this Extension Pack under a proprietary licence</strong> considering that <strong>this package heavily interacts with VirtualBox</strong> ?</p>
","<p>First topic: Virtualbox does not rely on kvm to get stuff done. They have different source base, and even if they exchange patches, that does not makes them a derivate work of kvm.</p>

<p>Second point is that Oracle owns VirtualBox brand, so they can pretty much deal with licensing of ""chunks"" of that software(base, extensions, plugins, etc) the way they want. This allow them to keep virtualbox opensourced while develop a module that is proprietary. And if you take a look at the <a href=""https://www.virtualbox.org/wiki/Licensing_FAQ"" rel=""nofollow noreferrer"">Licencing FAQ</a>, this is pretty much what they state:</p>

<blockquote>
  <p><strong>How is VirtualBox licensed?</strong></p>
  
  <p>The VirtualBox base package (i.e., everything but the VirtualBox
  Extension Pack) contains the full VirtualBox source code and platform
  binaries and is licensed under the GNU General Public License, version
  2. You can distribute and modify the base package, provided that you distribute all modifications under the GPLv2 as well.</p>
  
  <p>The VirtualBox Extension Pack is available under the <a href=""https://www.virtualbox.org/wiki/VirtualBox_PUEL"" rel=""nofollow noreferrer"">VirtualBox
  Personal Use and Evaluation License</a>, which is a free license for
  personal, educational or evaluation use, or an Enterprise License,
  which is for fee license that covers most other business uses.</p>
  
  <p>More information about the Oracle VM VirtualBox Enterprise License for
  the VirtualBox Extension Pack can be found on the  <a href=""https://www.oracle.com/virtualization/virtualbox/index.html"" rel=""nofollow noreferrer"">Oracle VM
  VirtualBox pages</a>, which also contains a link to the  Oracle Store
  where you can directly buy licenses. Please contact Oracle for
  additional information.</p>
</blockquote>

<p>Oracle states clear that only the base package is GPLv2 and Extensions are nonfree.</p>

<p>This is why projects have a Development agreement on projects they create, or take ownership when they want to be the ones to centralize all issues, so they can ""own"" the code that you have contributed, but the trick here is that they have the power to change the license if they want. This is a trust relationship between the developers and the company/entity that now owns the code. Examples:</p>

<ul>
<li><a href=""https://www.ubuntu.com/legal/contributors"" rel=""nofollow noreferrer"">Canonical Contributor license agreement</a>: In this case you have a company that wants to best centralize all ownership to better deal with contribution and licensing problems. You have to TRUST them when you develop code and give to them</li>
<li><a href=""https://www.gnu.org/licenses/why-assign.html"" rel=""nofollow noreferrer"">FSF software ownership</a>: In this case, you have a foundation that owns code for best interest of all, the same way they can change licenses whenever they want, it's up to them to ENFORCE GPL on derivated projects that are not compliant with.</li>
</ul>

<p>Also, it is not uncommon that some companies dual-license its products. <a href=""https://www.artifex.com/"" rel=""nofollow noreferrer"">Artifex</a> does the same thing with <code>ghostscript</code>. If you will develop a free software program AND you will not profit from it, you can use the GPL version of <code>ghostscript</code>. If you want to make proprietary software with ghostscript, you need to pay for a subscription.</p>

<p>And <a href=""https://qz.com/981029/a-federal-court-has-ruled-that-an-open-source-license-is-an-enforceable-contract/"" rel=""nofollow noreferrer"">Federal Court decided</a> that using a software that has a license is the same than accepting its terms(enforceable contract).</p>
","5668"
"Is it OK to put license note that uses ""this code/file/work"" into a separate file?","82","","<p>MPL &amp; CC-BY-SA both allow putting only a small license statement to place I deem fit. But both of them use ""this"":</p>

<blockquote>
  <p><strong>This</strong> Source Code Form is subject to the terms of the Mozilla Public License</p>
</blockquote>

<p><br></p>

<blockquote>
  <p><strong>This</strong> work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p>
</blockquote>

<p>I'm not risking rephrasing the notes because I don't know if it's allowed (in MPL case it seems hardcoded), even though I want to. Is it OK to put it all into a <strong>separate</strong> file stating something like:</p>

<blockquote>
  <p>For source code: [MPL note]</p>
  
  <p>For non source code: [CC note]</p>
</blockquote>

<p>implying that MPL is for all source code files and CC is for the rest?</p>
","<h2>MPL license</h2>

<p>The recommended way of applying the MPL license to your source code is to include Exhibit A in the headers of your source files. However, because it is not always a good solution (some languages do not allow comments for instance), the MPL license contains the following advice:</p>

<blockquote>
  <p>If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.</p>
</blockquote>

<p>So if your prefer, you do not need to add a header to every source file. You could instead add a LICENSE file in your src/ directory if all source code is located there. You would start the LICENSE file with Exhibit A, possibly a statement of your copyright ownership, then the text of the license itself. You could also put the exhibit in your README instead.</p>

<p>You are right that Exhibit A is part of the text of the license itself:</p>

<blockquote>
  <p>1.4. “Covered Software”</p>
  
  <p>means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.</p>
</blockquote>

<h3>What do you risk by not putting the exhibit in every source file or using a different license notice?</h3>

<p>Legally you are not at risk, even if you license your software improperly, because your are the owner but:</p>

<ul>
<li><p>Many uninformed developers tend to confound unlicensed source code (published on Github for instance) with public domain source code. These developers will typically reuse your code without respecting the terms of the license unless you make it very explicit.</p></li>
<li><p>Corporate developers will typically shy away from reusing code if their lawyers do not think that the applicable license is clear enough. If that happens, they are most likely to contact you, asking that you change the wording a little so that they can reuse your code. If they ask you to add a header in a particular file, it will be up to you to do so or not.</p></li>
</ul>

<h2>Creative Commons license</h2>

<p>You will remark that notices that a work is published under CC-BY-SA can vary greatly from one source to another but they will generally include a canonical link for the license: <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow"">https://creativecommons.org/licenses/by-sa/4.0/</a>.</p>

<p>The text of the license does not restrict you in any way on how to apply the license to your work:</p>

<blockquote>
  <p>Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.</p>
</blockquote>

<p>You should just use a clear statement and include it somewhere where people are likely to look for it (a README, LICENSE or About page). Example of such statement:</p>

<blockquote>
  <p>The non source code content of this application is licensed under a <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow"">Creative Commons Attribution-ShareAlike 4.0 International License</a>.</p>
</blockquote>

<h2>Example of such a double notice</h2>

<p>Here is an example of a project distinguishing between source code and non source code (granted they use MIT, not MPL 2.0): <a href=""https://github.com/github/choosealicense.com/blob/gh-pages/README.md#license"" rel=""nofollow"">https://github.com/github/choosealicense.com/blob/gh-pages/README.md#license</a></p>

<blockquote>
  <p>The content of this project itself is licensed under the <a href=""http://creativecommons.org/licenses/by/3.0/us/deed.en_US"" rel=""nofollow"">Creative Commons Attribution 3.0 license</a>, and the underlying source code used to format and display that content is licensed under the <a href=""http://opensource.org/licenses/mit-license.php"" rel=""nofollow"">MIT license</a>.</p>
</blockquote>
","4516"
"Lend/Distribute IoT device containing GPL software","82","","<p>I have a question regarding the enforcing of the GPL license.</p>

<p>Let us suppose I am creating an IoT device using custom software linking/modifying GPL software. We assume that the software running in the IoT device is not accessible via conventional ways.</p>

<h2>Case 1:</h2>

<p>The client loans the IoT device. In that case, should I disclose the source code I developed?</p>

<p>The  example I found closest to this case is the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#LaptopLoan"">Laptop Lending</a> section in the GPL FAQ. In that case, the device is still mine, and thus my own software runs and my own device and I do not need to release my source code. Is my understanding correct?</p>

<h2>Case 2:</h2>

<p>We sell the device to the client. In that case, I think we should disclose the source code the same way as television manufacturers using Linux as an OS disclose their sources.</p>
","<p>I think that in both case the GPL would apply without any ambiguity. </p>

<p>A commercial loan is different than lending a laptop to a friend. I would consider this as conveying hence redistribution, etc. An IoT is nothing special in this regards: the FSF GPL FAQ you reference talks about personal loans, not commercial ones.</p>

<p>And in all cases disclosure and attribution would be needed too even if this becomes challenging on tiny devices. </p>

<p>The GPL talks about redistribution and conveying. Whether this was through selling or lending does not matter in most cases IMHO.</p>

<p>And there is a precedent in this domain: the <a href=""http://linux-kernel.2935.n7.nabble.com/freebox-possible-GPL-violation-td46017.html"" rel=""nofollow"">French ISP free.fr</a> used to argue about ~ 10 years ago that the set tops and DSL freebox CPEs they provided to their customers were lent and not sold hence the GPL copyleft terms did not apply. In 2008, There <a href=""http://www.universfreebox.com/article/10731/Free-vs-GPL-v2-contentieux-autour-des-sources"" rel=""nofollow"">was</a> a <a href=""http://fsffrance.org/news/article2011-09-14.fr.html"" rel=""nofollow"">lawsuit</a>. Free.fr could not hold their positions and they settled in 2011. </p>

<p>They now redistribute the <a href=""http://floss.freebox.fr/"" rel=""nofollow"">copyleft source code</a> included in <a href=""http://linuxfr.org/users/mat_/journaux/freebox-et-gpl--2"" rel=""nofollow"">their devices</a>, albeit in a fairly subdued and the most minimalist way they could. It does not look like they do this in a happy way :D</p>

<p>Note also that I once met a similar case where a commercial company was lending devices for trial. The lawyer involved at the time was quite clear that in this case the GPL did apply all right.</p>

<p>Note: Several articles I linked to are in French.... Use a translation web service!</p>
","4205"
"Rules for appropriate editing of copyright notices in cloned, Apache-2.0-licenced, opensource repositories","82","","<p>I have cloned a repo under the Apache 2.0 licence and am changing content.</p>

<p>under section 4 of the licence:</p>

<blockquote>
  <p>a. You must cause any modified files to <strong><em>carry prominent notices stating that You changed the files</em></strong>; and</p>
  
  <p>b. <strong><em>You must retain, in the Source</em></strong> form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works</p>
  
  <p>d. You <strong><em>may add Your own copyright statement to Your modifications</em></strong> and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>
</blockquote>

<p>If I am understanding this correctly, my modified file will look like this?</p>

<pre><code># -*- coding: utf-8 -*-
""""""

Copyright 2017 My Example Company

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

NOTICE: THIS FILE HAS BEEN MODIFIED BY &lt;MY EXAMPLE COMPANY&gt; UNDER COMPLIANCE WITH THE APACHE 2.0 LICENCE FROM THE ORIGINAL WORK 
OF THE COMPANY &lt;EXAMPLE PREVIOUS COMPANY&gt;. THE FOLLOWING IS THE COPYRIGHT OF THE ORIGINAL DOCUMENT:

Copyright 2016 Example Previous Company

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

""""""
</code></pre>

<h3>1. Is this correct?</h3>

<h3>2. What should I name the original copyright notice? If I should keep it the same name, what should I name my new copyright notice if it differs?</h3>

<h3>3. In the same way, what should the NOTICE file be called?</h3>
","<ol>
<li>Yes this is correct but you do not need to duplicate the same Apache notice twice. Instead you could use this simpler and more useful form IMHO:</li>
</ol>

<blockquote>
  <p>Copyright 2017 My Example Company</p>
  
  <p>Copyright 2016 Example Previous Company</p>
  
  <p>Licensed under the Apache License, Version 2.0 (the ""License"");
  you may not use this file except in compliance with the License.</p>
  
  <p>You may obtain a copy of the License at</p>
  
  <p><a href=""http://www.apache.org/licenses/LICENSE-2.0"">http://www.apache.org/licenses/LICENSE-2.0</a></p>
  
  <p>This file has been modified by My Example Company to add support for foo and get faster baz processing.</p>
</blockquote>

<p>2 &amp; 3. Why would you want to rename files there? Juts keep them the same name and add your stuffs to these if needed.</p>
","5117"
"Can a quine be distributed as binary only and be open source?","81","","<p>If the author of a program that outputs its own source code (<a href=""https://en.wikipedia.org/wiki/Quine_%28computing%29"" rel=""noreferrer"">quine</a>) makes it open source, can others just distribute it as binaries? </p>

<p>Does it matter which popular open source license he used, say GPL vs MIT?</p>
","<p>This is categorically fine under the MIT license (as long as you follow basic attribution and license-preservation requirements), since the MIT license allows you to distribute the work (and modified forms) in binary-only format if you wish. If the binary happens also to produce source code, that's fine too, but it doesn't have to do so.</p>

<p>For the GPL, this is probably not allowed. The binary does produce the source code when you run it, so at first glance it appears to satisfy the GPL's requirement to accompany the binary with corresponding source code. However, the ability to see the source code is contingent upon the ability to run the binary, which is a requirement that the GPL does not allow you to impose. This is a nontrivial imposition, too, since one prominent benefit of having source code is the ability to port or recompile a program to run on a new platform. In the case of quine-provided source code, users would not be able to do this unless they first had access to the binary's original platform.</p>

<p>Admittedly, the ability to read the source code in any digital media format requires the execution of some executable -- you must run an operating system of some kind to read a USB drive or download source code from a network server -- but specifically requiring execution of the exact binary file whose source code you want to read seems substantially different and less easy to satisfy.</p>
","5308"
"Can I publish my C++ game on GitHub under MIT using art and libraries under others licenses?","81","","<p>Can I publish my C++ game on GitHub under MIT using art and libraries under others licenses?</p>

<p>I want to publish my code on GitHub, but I have some troubles with licensing.
In my game I use GLEW (Khronos License or Mesa 3-D license), GLFW (zlib/libpng license), GLM (MIT or The Happy Bunny License) and I would like to use art package under Creative Commons CC0 license. It's all distributed under different licenses and I'm doubting.</p>

<p>Can I publish my project under MIT now? What should I do to comply with all copyrights?</p>
","<p>Yes, this is possible and very common.</p>

<p>You can choose any license to cover your own source code, period. But your license does not apply to the libraries and art, since you do not own their copyrights.</p>

<p>If you choose to distribute libraries and art in a package, you need to make sure you are not violating their licenses. But the Knronos/Mesa, zlib/libpng, MIT/Happy Bunny, and CC0 all allow you to distribute them in any way, provided you include their own license texts in the package. I personally include a <code>LICENSE.txt</code> for my own source code's license and a <code>LICENSE-dist.txt</code> for all the libraries I am including in the distribution. For CC0, you don't even need to do this, but I would do it anyway to avoid questions about their licenses, and because it's ethical to credit them.</p>
","5737"
"Do I retain right to my extension's logo if I use MIT Licence in my Firefox extension?","81","","<p>I created a Firefox extension and put its code on GitHub. The code includes the logo of my extension for use as its icon. I created the that logo myself.
I want to build my portfolio and thus want to add an Open-Source Licence to it. But I also want to retain my rights to that icon.
Is it okay if I just put the MIT Licence in the readme.md file?</p>
","<p>When you explicitly want to exclude your logo from the license, you can write so in the copyright file. </p>

<p>It's also not uncommon for larger open source projects to trademark their logos and names. This is not completely uncontroversial in the open source community (it's why Debian is shipped with ""Iceweasel"" and not ""Firefox"") but still quite common. While the open source license gives away control of your program, trademark law means you still retain control of the brand.</p>
","4277"
"Is every project using a Json licensed library forced to add ""use it for good, not evil"" statement to its license?","81","","<p>The Json license has an appendix where it says:    </p>

<blockquote>
  <p>The Software shall be used for Good, not Evil.</p>
</blockquote>

<p>If I want to use a library with the Json license am I forced to add this quote to my license? </p>

<p>Update: Changed the title so that its question and text ask the same question</p>
","<p>Yes, assuming that it is reasonable to interpret ""this permission notice"" as the whole of the license text.</p>

<p>GPL-compatibility for permissive licenses like MIT and BSD relies on the doctrine of sublicensing; you may give downstream recipients fewer rights than you received, but not more. In this case you never had the right to use the software for evil, which means you cannot possibly give it to recipients.</p>
","4248"
"Reciprocal Public License - Usage in App, Commercial Limits","81","","<p>I require clarity on using a Reciprocal Public Licensed (RPL) assembly in my project.</p>

<p>I want to use a RPL c++ code-assembly in my .net application. 
I plan to make no changes to the RPL assembly itself, but only link said assembly to my .net application to call its methods.</p>

<ul>
<li>Does my proposed usage require that I make all my .net applications
source code available publicly ? </li>
<li>and does the RPL license have any
commercial limitations with my proposed usage of the RPL assembly?</li>
</ul>
","<p>The Reciprocal Public License defines the notion of an ""Extension"":</p>

<blockquote>
  <p>""Extensions"" means any Modifications, Derivative Works, or
  Required Components as those terms are defined in this License.</p>
</blockquote>

<p>and also specified what ""Derivative Works"" means:</p>

<blockquote>
  <p>""Derivative Works"" as used in this License is defined under
  U.S. copyright law.</p>
</blockquote>

<p>The relevant section in the requirements of the RPL, section 6.1, states:</p>

<blockquote>
  <p>You must make available, under the terms of this License, the Source Code of any Extensions that You Deploy, via an Electronic Distribution Mechanism...</p>
</blockquote>

<p>If, under U.S. copyright law, your larger work is indeed a derivative work of the code you're linking to, then your larger work is an Extension. Whenever you Deploy it (i.e., any distribution, and virtually any use within an organization, even privately), you must make your source code available (apparently to the public at large; I could not find clarification on who must be given access to the source).</p>

<p>The license forbids charging for distribution of the source code of Extensions beyond actual distribution costs:</p>

<blockquote>
  <p>You may not charge a fee for the Source Code distributed under this Section in excess of Your actual cost of duplication and distribution.</p>
</blockquote>

<p>Presumably, you could charge for the binaries, but you'd also be required to publicize the existence of the free-of-charge source code at the same time.</p>
","2734"
"Use babylon glossary in an open source (GPL) dictionary app","81","","<p>I want use babylon glossary in an open source (GPL) dictionary app.
They don't have any license in them. Can I use them?</p>

<p>What about glossaries of commercial dictionaries like oxford, longman, …? Ccan I use them?</p>
","<p>You don't say what the app is, exactly, nor how it uses the glossary.  I'm assuming that the glossary is used as a words list, which is then served up by the app.</p>

<p>If that is the case, then the app's GPL status has no effect on your ability to use the glossary.  If this glossary is transmitted to you under terms that allow you so to use it, then you can; if it doesn't, you can't.</p>

<p>In the case of the three glossaries you ask about (babylon, oxford, longman), the first has no licence attached.  Copyright law's default position is clear; assuming that a work is eligible for copyright protection at all, it acquires such protection by the act of its creation, so you can do <em>next to nothing</em> with it without violating that copyright.  You certainly can't make a copy of it, for use with your app or otherwise.  The other two are known to be commercial glossaries, and it is unlikely that they will be supplied to you under licence terms that permit their reuse in that way (that could be wrong, but you won't know until you read each licence).</p>

<p><strong>tl; dr</strong>: it depends on the licences on the glossaries, and on very little else.</p>
","5268"
"What is the OSI's Open Standard?","81","","<p>I believe that the Open Source Initiative (OSI) has something called the Open Standard. </p>

<p>What is the Open Standard, and what is its purpose?</p>
","<p>I would like to first make clear that the Open Source Initiative (OSI) doesn't actually <em>define a standard</em>. Instead, they <a href=""http://opensource.org/osr-intro"">say</a> the following:</p>

<blockquote>
  <p>There are many definitions of ""Open Standard"". We don't try to define it ourselves, but we know that if you can't implement an Open Standard under an Open Source License, it's not open enough for us.</p>
</blockquote>

<p>Basically, they've created something even better. That is, <strong><em>The Open Standard Requirement for Software</em></strong>. </p>

<hr>

<h2>So then, what is it?</h2>

<p>Instead of creating a ""One Size Fits All"" standard, with a million and one clauses to effectively apply to everything, the Open Source Initiative needed to think of something simple, clean and innovative. Therefore, they made a requirement for standards. <strong><em>In essence, it’s a standard for open standards.</em></strong></p>

<p>There are 5 points it must fulfill, contained within a single requirement: that an Open Standard may not prohibit any implementation that follows its rules. In order to comply with the Open Standards Requirement, the ""Open Standard"" must meet a set of 5 criteria, otherwise it will discriminate against Open Source Developers.</p>

<p><strong><em>1. No Intentional Secrets</em></strong></p>

<p>I'm just going to quote here…</p>

<blockquote>
  <p>The standard MUST NOT withhold any detail necessary for interoperable implementation. As flaws are inevitable, the standard MUST define a process for fixing flaws identified during implementation and interoperability testing and to incorporate said changes into a revised version or superseding version of the standard to be released under terms that do not violate the OSR. </p>
</blockquote>

<p>In other words, an open standard can't keep anything from you. Everything must be stated clearly, and they can't sneak this little clause that will allow others to make 100 dollars on every dollar you make. Also, since there will always likely be things that need fixing, those little things to clarify, there must be a defined procedure in order to fix those flaws, and correct them to a newer version that will still not violate the criteria listed here.</p>

<p><strong><em>2. Availability</em></strong></p>

<p>This is pretty clear. Make sure that your standard is available, and make sure that people can access it without any issues. I won't put the <em>Zizouz212 version -1 public license</em> on my imaginary, private hosting service. It should be out and about with the public - that is, they should be able to find it, and get it. There’s a couple of other things:</p>

<ul>
<li>Be available under royalty-free terms</li>
<li>Have a non-discriminatory cost, if any at all.</li>
</ul>

<p><strong><em>3. Patents</em></strong></p>

<p>If there are any patents that are essential to the implementation, there are two things that it must follow: </p>

<ul>
<li>The patents must be licensed under royalty-free terms for unrestricted use</li>
<li>The patents must have a promise of non-assertion when practiced by Open Source Software. </li>
</ul>

<p><strong><em>4. No Agreements</em></strong></p>

<p>Essentially, I should be able to take it and use it. I shouldn't have to agree to any terms of use, any license clauses or anything like that. I'll quote again:</p>

<blockquote>
  <p>There MUST NOT be any requirement for execution of a license agreement, NDA, grant, click-through, or any other form of paperwork to deploy conforming implementations of the standard. </p>
</blockquote>

<p><strong><em>5. No Incompatible Open Standard Requirement Dependencies</em></strong></p>

<p>For any implementation of the standard, the implementation should not have to rely on anything that doesn't conform to these requirements. In essence, everything that the standard needs must conform to whatever is in these requirements. Otherwise, it won't be ""open"" according to this.</p>

<hr>

<h2>So then what the heck is the point of this?</h2>

<p>I’m really going to quote on this now:</p>

<blockquote>
  <p>The purpose of an open standard is to increase the market for a technology by enabling potential consumers or suppliers of that technology to invest in it without having to either pay monopoly rent or fear litigation on trade secret, copyright, patent, or trademark causes of action. No standard can properly be described as ""open"" except to the extent it achieves these goals.
  The industry has learned by experience that the only software-related standards to fully achieve these goals are those which not only permit but encourage open-source implementations. Open-source implementations are a quality and honesty check for any open standard that might be implemented in software; whether an application programming interface, a hardware interface, a file format, a communication protocol, a specification of user interactions, or any other form of data interchange and program control.
  To help industry participants (suppliers, consumers, and regulators) identify and specify standards that permit open source implementations, the OSI has defined a minimal Open Standards Requirement (OSR). The OSI has also created a set of Criteria that can be used to judge whether a standard fully complies with that Requirement.</p>
</blockquote>

<p>To add on to that, the Open Source Initiative felt the need to help create a guideline. With many legal authorities adopting ""open standards"" of their own into their respective laws. They viewed that the lack of guidelines made the term ""open standard"" more aspirational, rather than a practical and defining term. As a result, the rationale for their requirement was to rectify these problems.</p>

<hr>

<h2>How do I know if an Open Standard is compliant with this?</h2>

<p>The OSI defines two levels of compliance, in an effort to assist the development of standards that conform to the requirement. This is similar to the way that the OSI approves licenses to be Open Source.</p>

<ul>
<li><p>OSI Compatible</p>

<p>This is a mark that is provided to creators that have <strong><em>self-certified</em></strong> their license is conformant to the requirement listed above. If the OSI, at anytime, deems the standard to be incompatible, the creator must modify the standard for it to be compatible, or remove the mark altogether.</p></li>
<li><p>OSI Conformant</p>

<p>This is a mark that shows the OSI has deemed the standard to be conformant to the requirement listed above.</p></li>
</ul>

<hr>

<p>Sources/References/Good Reads:</p>

<ul>
<li><a href=""http://opensource.org/osr"">Open Standards Requirement for Software</a></li>
<li><a href=""http://opensource.org/osr-compliance"">Open Standards Compliance</a></li>
<li><a href=""http://opensource.org/osr-rationale"">Open Standards Requirement for Software - Rationale</a></li>
<li><a href=""http://opensource.org/osr-faq"">Open Standard Requirement for Software - FAQ</a></li>
<li><a href=""http://en.wikipedia.org/wiki/Open_standard"">Wikipedia article on Open Standards</a></li>
<li><a href=""https://open-stand.org/about-us/principles/"">Open Stand Principles (They are ""Global Advocates for Open Standards"")</a></li>
</ul>
","1289"
"Can I open source a piece of software that I am already licensing to someone?","80","","<p>I have written a piece of software, which I am licensing to a company, moreover the license is exclusive in some specific fields of use.
I am currently thinking about publishing the said piece of software as open source, under a license which would only allow non-commercial research use. The publishing is motivated by the fact that I have recently written an article about a technology contained in said software and would like other researchers to be able to use it as well.</p>

<p>If you think this is permissible, is there a particular license you would suggest?</p>
","<p>The answer to the question in your title really depends on the previous licensing agreement. For instance, any non-exclusive agreement would allow you to license your software as open source to the general public. </p>

<p>On the contrary, as soon as it grants <em>some</em> exclusivity, you <em>cannot</em> license it as open source without violating the previous agreement because no open source license will allow any usage restriction to apply. It is up to you to try to renegotiate the previous license agreement. </p>

<p>Now, you were thinking of a non-commercial, research only license. Some projects are distributed under such terms but <em>are not open source</em> (example of such project: <a href=""https://github.com/AbsInt/CompCert/blob/master/LICENSE"" rel=""nofollow"">https://github.com/AbsInt/CompCert/blob/master/LICENSE</a>). CC-BY-NC is not a good candidate because any non-profit could use your project for any purpose (and this license it is not suitable for software). Only a lawyer could help you draft such license and check that this is compatible with previous agreements. </p>
","4532"
"Can I open source software to convert data from a proprietary format?","80","","<p>I was advised by users over on the Law StackExchange to ask this here:</p>

<p>I have created a piece of software that converts a proprietary format from the database blob of a large, well known commercial software company into the equivalent open source data type. The large commercial software company states the following on their copyright and trademarks page ""This work is protected under United States copyright law and other international copyright treaties and conventions."" and links to the DMCA.</p>

<p>I was able to create the software because most details of the format were published in a post on their support forums and the rest I reverse-engineered.</p>

<p>I now wish to open-source my software so others can use it. My question has two parts:</p>

<ol>
<li>Can I open-source this at all without getting sued?</li>
<li>Can I refer to the trademarked product the file format came from in my software and documentation? (I'm assuming I can't use it in the name of my software)</li>
</ol>

<p>I'm in the UK. The large software company is in the US.</p>

<p>Edit: The data in the database is user created GIS data, inputted via the commercial program, it's just stored in a way that makes exporting difficult.</p>
","<p>Based upon your followup, I see no real legal issues other than those mentioned in my first post.</p>

<p><strong>Please remember that I am not a lawyer, and hold no liability for this</strong></p>

<p>My reasoning:</p>

<ol>
<li>They are a reference to unique, non-copyrightable place references.</li>
<li>They are user generated, not generated by the makers of the software.</li>
<li>There are multiple uses for a point on a map, over and above the specific functionality of the software.</li>
<li>There are multiple GIS software packages- Providing a converter between them probably comes under interoperability.</li>
</ol>

<p>If the company decides that they don't like what you are doing, the onus will be on you to prove that what you are doing is legal and above board, not the other way around. </p>

<p>You'll need to think about how you might prove this, and if this looks like getting serious, I'd again urge you to get into touch with a lawyer, as the law is very easy to trip yourself up on.</p>

<p>You especially need to be wary of the differences between American law and British law- Whilst I know some about British law, I know nothing about American law. </p>
","2725"
"Can I patent open source project?","80","","<p>Suppose I download an open source project from GitHub and modify the code further. </p>

<p>Can I patent this code and restrict others to reuse my ""modified"" code?</p>
","<p>You can not patent code. You can only patent an <em>invention</em> which is implemented in your code. An invention is a new and unique way of doing something. Most of all, it must be something nobody did before. If anyone used the same technique which you describe in your patent, that's called <em>prior art</em> and invalidates your patent. So trying to get a patent on something somebody else invented and implemented in code would be futile.</p>

<p>But what you <em>could</em> do is try to get a patent on the stuff you added, if it by itself is patent-worthy. For example, if you invent a new and innovative approach to encoding videos, you could get a patent for that video codec and create a fork of VLC Media Player with an implementation of that codec built-in. That VLC fork would be licensed under GPLv2, but would also be affected by your patent. You could demand patent fees from anyone who distributes it in a country which recognizes software patents.</p>

<p>This is usually contrary to the spirit of Open Source, which is why many of the newer open source licenses have special clauses regarding software patents. For example, the Apache License 2.0 and the GPLv3 say that the licensor also grants a patent license for any patents which apply to the software.</p>
","5966"
"Does OSL 3.0 require user access to source if I sell access to it as SAAS?","80","","<p>We are a small group of developers who are looking to base a product we have in development on a OSL 3.0 licensed Project (OroCRM).  I have been having trouble understanding the exact terms of the OSL 3.0 license.</p>

<p>Because the product we are developing will be a commercial product, and we will sell access to it as SAAS, will we be required to open source all of our code that we develop and allow access to anyone?</p>

<p>On Rosenlaw I find this:</p>

<p>The OSL 3.0 Approach To Derivative Works</p>

<blockquote>
  <p>OSL 3.0 is far simpler, with the entire copyright and copyleft bargain
  stated in a short § 1 that echoes the provisions of 17 USC 106 and
  similar copyright laws. Section 1(a) authorizes licensees to make
  ""copies [of the Original Work], either alone or as part of a
  collective work"", and § 1(b) authorizes licensees ""to translate,
  adapt, alter, transform, modify, or arrange the Original Work, thereby
  creating derivative works (""Derivative Works"") based upon the Original
  Work.""</p>
  
  <p>Then § 1(c) requires any copies of that Original Work and any
  Derivative Works that are distributed to be distributed under OSL 3.0
  and, for those works, the Licensor promises to provide Source Code [§
  3]. In this way, the OSL 3.0 license remains with the work and all its
  subsequent versions, and that software always remains open source.
  That's reciprocity.</p>
</blockquote>

<p>I believe this means that if we distribute our product, that we must use the OSL license, however if we never plan to distribute the code, but only sell access to the product we develop, will we still be required to open up our source code?</p>
","<p>Yes; OSL 3.0 is a copyleft license that also applies if you provide network access to the output of your software, as in SaaS. <a href=""http://rosenlaw.com/OSL3.0-explained.htm#_Toc187293088"" rel=""nofollow"">From the source</a>:</p>

<blockquote>
  <p><strong>External Deployment Defined</strong></p>
  
  <p>OSL 3.0 requires that the External Deployment of software be treated the same as a distribution. The effect, of course, is that copies of the Original Work or Derivative Works that are externally deployed (i.e., that are used in-house to provide services to third parties) must be distributed reciprocally under OSL 3.0, just as if those third parties had received actual copies of the Original Work or Derivative Works.</p>
</blockquote>

<p>This is similar to what AGPL does; even if you don't distribute binaries, if you provide access to the output of your software, you are still bound by the license terms and must provide source under the same license. If you continue reading the Rosen Law page, they make the comparison with AGPL too:</p>

<blockquote>
  <p>There is a version of GPL, the Affero GPL or AGPL, that also plugs the external deployment loophole, but that license brings along all the other baggage associated with the GPL that I've already criticized. The two-sentence External Deployment provision in OSL 3.0 [§ 5] plugs the loophole.</p>
</blockquote>

<p>Here's the <a href=""https://opensource.org/licenses/OSL-3.0"" rel=""nofollow"">actual text from the aforementioned clause #5 in the license</a>, which says pretty much the same thing:</p>

<blockquote>
  <p>5) External Deployment. The term ""External Deployment"" means the use, distribution, or communication of the Original Work or Derivative Works in any way such that the Original Work or Derivative Works may be used by anyone other than You, whether those works are distributed <strong>or communicated to those persons or made available as an application intended for use over a network</strong>. As an express condition for the grants of license hereunder, You must treat any External Deployment by You of the Original Work or a Derivative Work as a distribution under section 1(c).</p>
</blockquote>

<p>(bold is mine)</p>
","2946"
"Open source project from an idea at my job","80","","<p>I've recently used <a href=""https://github.com/ARCANEDEV/SEO-Helper"" rel=""nofollow noreferrer"">https://github.com/ARCANEDEV/SEO-Helper</a> to build a SEO Bundle for Symfony 2.8 at my company.
It was a bit painful as the Symfony standards weren't followed by ARCANEDEV (it's a Laravel library) and there were conflicts between the dependencies (Laravel shares Symfony dependencies).</p>

<p>To feel better about this, I contacted the author of the SEO-Helper and he said it was okay for me to use some of his ideas to create a Symfony bundle.  So after work, I built a new bundle to manage SEO tags without the ARCANEDEV dependency. I also added a lot of new functionalities compared to the original company bundle.</p>

<p>Now I want to open source my code, but the original idea belongs to my company. Also, some of the code of my bundle is similar to the company's code as I am the author of both, but nothing is copy/pasted.</p>

<p>Can I publish this bundle code under the MIT license ? </p>

<p>PS: I'd like to ask my boss only if I legally have the right to publish it.</p>
","<p>The circumstances under which you can publish privately (i.e. not in your role as employee) depend on your employment contract and on your jurisdiction. It is not uncommon to have a clause that requires you to ask your employer for permission before you may publish anything.</p>

<p>Generally, your employer does not have any rights to works that you create on your own time, with your personal resources. And companies are generally interested to have “expert” employees – if I'm looking for a job and see that my future coworkers have published open source code, that's a big plus (assuming the code is decent). However, there are circumstances where an employer has a legitimate interest in not letting you publish privately:</p>

<ul>
<li><p>The work to be published would disclose trade secrets or internals of your employer. If any competitors would get an advantage from looking at your publication, maybe it's not a good idea to publish it.</p></li>
<li><p>The work may have technically been produced outside of the employment, but was clearly inspired by experiences within the employment.</p></li>
<li><p>The work would reflect badly on the employer.</p></li>
<li><p>By publishing the work, you would compete with your employer.</p></li>
</ul>

<p>Publishing open-source code is not fundamentally different from publishing a book with respect to employment.</p>

<p>If your proposed work might be relevant in one of these ways to your employer, it is correct to ask your boss whether they have any objections – ideally before you start any serious work on the project. Reactions may include:</p>

<ul>
<li>a cease and desist letter</li>
<li>a request to please not publish this</li>
<li>a request to state that this is your personal opinion and not that of your employer</li>
<li>a request to mention your employer</li>
<li>a go ahead, with a request to review the work before it is published</li>
<li>a go ahead, and wishing you lots of fun</li>
<li>an offer to create the work as part of your employment</li>
</ul>

<p>What exactly you are permitted to do, what your employer is permitted to do, and what you are required to do, depends on your local laws and on the contents of your employment contract. If your employer says “no”, this may or may not be legal – but it would usually be unwise to strain your employment relationship over this.</p>

<p>If you like contributing to open source, it's a good idea to keep an eye on the section about IP in the contract for your next job. If possible, it may also be sensible to do any open-source work with a different tech stack and in a different problem domain than within your employment – that way it's absolutely clear that your employer has no rights over this work, and you won't get the feeling that you're doing unpaid work for your employer.</p>
","5463"
"Redistribution of derived works under MSR-SSLA","80","","<p>The <a href=""http://research.microsoft.com/en-us/um/people/antr/vrr/vrr/license.htm"" rel=""noreferrer"">Microsoft Research Shared Source License Agreement (MSR-SSLA)</a> is a odd kind of ""Open Source"" licenses. FSF considers in ""nonfree"" as it does not allow commercial use. </p>

<p>I would like to redistribute a derived work.
The clauses of relevance to me are (as I understand it):</p>

<blockquote>
  <p>If the Software includes source code or data, you may create derivative works of such portions of the Software and distribute the modified Software for non-commercial purposes, as provided herein.</p>
</blockquote>

<p>It does include data. Thus I may create a derivative work and distribute it.
So long and I do so only for non-commercial purposes. This is fine, ass I am doing it for ""academic research"" purposes, which is included in examples of ""non-commercial"" given earlier in the license. </p>

<blockquote>
  <p>That you will not remove any copyright or other notices from the Software.</p>
</blockquote>

<p>There were not copyright style notices on the work I received. Thus I am under no obligations from this.  However there was a readme. Which did mention the names of the creators and a request to reference a academic paper about the work. Out of good manners (and becuase it is useful), I will link back to the original when I redistribute it, and include such references to the authors and the paper in my own readme.</p>

<blockquote>
  <p>That if any of the Software is in binary format, you will not attempt to modify such portions of the Software, or to reverse engineer or decompile them, except and only to the extent authorized by applicable law. </p>
</blockquote>

<p>The ""Software"" is not in binary form, thus this does not apply to me. (At the start of the license ""Software"" is defined to include text files.)</p>

<blockquote>
  <p>That if you distribute the Software or any derivative works of the Software, you will distribute them under the same terms and conditions as in this license, and you will not grant other rights to the Software or derivative works that are different from those provided by this MSR-SSLA. </p>
</blockquote>

<p>This says, the I must distribute my derivative work only under the MSR-SSLA not under any other license (or lack there-of). So in practice this means I must include the license file with all distributed copies of the derived work. Correct? 
And it <s>curses</s> ensures that all future derivations will be subject to the scary clause 5. That Microsoft will have full rights over any derivations (except patent rights?)</p>

<blockquote>
  <p>That if you have created derivative works of the Software, and
  distribute such derivative works, you will cause the modified files to
  carry prominent notices so that recipients know that they are not
  receiving the original Software. Such notices must state: (i) that you
  have changed the Software; and (ii) the date of any changes.</p>
</blockquote>

<p>This will be covered in my readme, and on the page where I am redistributing it.</p>

<hr>

<p>Am I understanding the implications of the license correctly?</p>
","<p><em>Blanket caveat: I am not a lawyer. More importantly: I'm not your lawyer. This is no legal advice, but my understanding of the license terms.</em></p>

<p>Other than that ""Copyright or other notices"" may be broader than you interpret it - the authors in the readme could very well amount to a notice - you interpret this (non open source) license correctly.</p>

<p>Since you indicate you are working with data, it is quite possible the entire license situation is somewhat off. Depending on the jurisdiction and nature of the data (primarily whether the selection of data contains creative elements; a top 10 list does, a phonebook doesn't) you may not need a license at all. In the US, sui generis databases (the uncreative kind) have no copyright or similar protections for example. In the EU, such databases are protected under database right. </p>
","1785"
"How do the years specified in a copyright statement work?","79","","<p>Given that it is about to be or already is 2018, I now notice I have a few open-source projects licensed with MIT, where each one of them states:</p>

<blockquote>
  <p>Copyright (c) &lt;years&gt; &lt;name&gt;</p>
</blockquote>

<p>Does this have to be updated annually? Is this license void in the future? What are any other consequences if it is not updated? Does this apply universally to all licenses?</p>
","<p>The year in the copyright notice refers to the <em>year of first publication</em>. Nowadays copyright notices and the year in the copyright notice are no longer very important, since copyright starts automatically when a creative work is created, and typically extends for a variable amount of time unrelated to the date of publication. This wasn't always the case. Especially, U.S. copyright law changed dramatically during the 20th century, and did require copyright notices in specific formats for a long time.</p>

<p>Though not required by law, there's no good reason to omit these notices either since they serve as a clear record of authorship. In particular, they serve as a reminder that the work is under copyright protection and therefore <a href=""https://en.wikipedia.org/wiki/Copyright_notice#Reasons_to_include_an_optional_copyright_notice"" rel=""nofollow noreferrer"">deter copyright infringement</a>.</p>

<p>Many licenses do require such a copyright notice. And if there is a notice, it should be kept up to date (as discussed below). In particular, you must not remove or falsify any existing notices. Additionally, many licenses require preservation of existing notices.</p>

<p>In the case of open source projects, the year in the copyright notice should be updated only when a new version for the project is first published. Publication isn't just the <em>release</em> of a version, but e.g. also pushing a commit to a publicly visible version control repository. It would be misleading to automatically update the copyright notice each year, unless there actually are new changes that are relevant for the purpose of copyright.</p>

<p>It is a common convention that the notice lists all years where new versions were published. This reflects that different parts of the project were published at different times. Since the list of years can get rather long, it is common to collapse consecutive years to a range: “2016, 2017, 2018” is often written as “2016–2018”. If in doubt, always use the most recent year. So “2018” would also be correct.</p>

<p>The other reason to update these notices is if there are new authors. Typically, this is done by adding a new copyright line for each set of authors, with the most recent on top. For example:</p>

<pre><code>Copyright 2016–2018 George
Copyright 1999, 2007–2016 Fred
</code></pre>

<p>Adding a new line is sensible since many open-source licenses require that existing copyright notices are kept intact – so you must not update them in any way. And in the above example, adding George to Fred's copyright notice would be misleading since George did not publish any of their work in 1999 and Fred didn't publish in 2018.</p>

<p>In practice, tracking all authors in all copyright notices is quite cumbersome. Instead, often only the original author is credited here even when copyright is shared with additional contributors. A more reasonable approach is to credit all authors collectively, e.g. as “the FooProject contributors” or “Original Author and others”. However, I am not sure whether that results in a valid copyright notice as the copyright holders must be clearly recognizable.</p>
","6393"
"Relicensing from GPLv3 to GPLv2","79","","<p>I have an open source project on GitHub released under GPL3. I want to re-license it under GPL2. 99.9% of the program is written by me, only few lines of code is written by other people.</p>

<p>Can I re-license it again under GPL2? I mean, when someone sends me a pull request via GitHub, what is the ""official agreement"" between us on the issue?</p>
","<p>Since others have written code for the project, I believe they also have a small claim in the copyright of the project as a whole. Without a consensus of all copyright holders, I don't believe you are allowed to change the license of the project to GPLv2 because it is not compatible with GPLv3. However, if the other developers  signed a contributor license agreement (see <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Contributor_License_Agreement</a> and <a href=""https://cla.github.com/"" rel=""nofollow noreferrer"">https://cla.github.com/</a>), assigning the copyright to you, then you should be allowed to re-license.</p>
","5583"
"What is the difference between a ported and non-ported licenses?","79","","<p><strong>What I know:</strong></p>

<p>From what I have read ported licenses are for specific locations while non-ported licenses have been customized to work in as many places as possible.</p>

<p><strong>Question:</strong></p>

<p>Even though I license my work under a ported license does that mean it won't work in other locations EVER or does it just mean that depending on the locations laws it may not fully be compatible?</p>
","<p>In previous versions, the Creative Commons licenses have been written with the US legal system in mind. This might have created some issues in other countries, so it was an effort underway to adapt the text to different countries and also to translate it in the process. You can look in this <a href=""https://en.wikipedia.org/wiki/Creative_Commons_jurisdiction_ports"" rel=""nofollow"">Wikipedia-article</a> or in the <a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#What_should_I_know_about_differences_between_the_international_licenses_and_the_ported_licenses.3F"" rel=""nofollow"">FAQ of Creative Commons</a> for more details.</p>
","609"
"What is the Open Governance Model? How is it different from other models?","79","","<p>The prime example being <a href=""https://iojs.org/en/index.html"">iojs</a> as a fork of <a href=""https://nodejs.org/"">nodejs</a>, where the main difference being (aside from the obvious advancement in technology versioning and being more up-to-date), is that iojs has an <em>Open Governance Model</em>, which nodejs does not.</p>

<p>What does that mean exactly? How are the two different?</p>
","<p>The reason that io.js forked from node.js in the first place was that those originally involved in the forked project wanted the community using the fork to be able to give feedback to the design and add improvements. In <a href=""http://www.infoworld.com/article/2855057/application-development/why-iojs-decided-to-fork-nodejs.html"" rel=""nofollow"">the words of team member Mikeal Rogers</a>,</p>

<blockquote>
  <p>We've been working with Joyent since July to try and move the project to a structure where the contributors and community can step in and effectively solve the problems facing Node.</p>
  
  <p>. . .</p>
  
  <p>In my opinion, the best way to move Node forward is to get the community organized around solving problems and putting out releases, so that's what we're doing. </p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/Open-source_governance"" rel=""nofollow"">Open-source governance</a> has been applied to a wide range of things, just as the open source movement has spread to many fields.</p>
","138"
"Which version number scheme to use when temporarily extending an open source tool ?","79","","<p>Assume I want to change an open source library and use it in more than one project, e.g.
company C uses library L version 1.0 with license apache-2. 
The company actually uses a fixed version of it. 
They send the fixes to the original developer of L but want to use the fixed version before there is an official public version.</p>

<p>The license should allow this. 
But which version number to use on the temporarily fixed L.</p>

<ul>
<li>1.1 ?</li>
<li>1.0.1</li>
<li>1.0.temp.1 ?</li>
</ul>

<p>or something different. </p>

<p>The idea is that there is eventually an public new version and the company should be abel to use it by just changing the version number.</p>
","<p>I would rename the package for internal use. Maybe ourL or something like that.</p>

<p>Another way is what someone else did: A friend of mine patched mpg123 in a time it was only barely maintained and called his fork mpg123-thor. He included everything from upstream but with his own patchsets. Now these patches are all in the current mpg123. His patchset based on mpg123-0.59r he called mpg123-0.59r-thor6 (sixth version of the patchset).
<a href=""http://thomas.orgis.org/mpg123-thor/"" rel=""nofollow noreferrer"">http://thomas.orgis.org/mpg123-thor/</a></p>
","4945"
"Why is the CC sampling+ license incompatible with other CC licenses?","79","","<p>Creative Commons used to publish a license called <a href=""https://creativecommons.org/licenses/sampling+/1.0/"" rel=""nofollow"">""Sampling Plus""</a>, but according to <a href=""http://creativecommons.org/retiredlicenses"" rel=""nofollow"">this page</a>, it was retired/deprecated in 2011 due to inadequate demand and <strong>""Not compatible with any other CC license""</strong>.</p>

<p>Why was this license incompatible with the other CC licenses?</p>

<p>According to the <a href=""https://creativecommons.org/licenses/sampling+/1.0/"" rel=""nofollow"">human-readable summary page</a>, the license permits:</p>

<ul>
<li>Creative transformations for commercial and non-commercial uses</li>
<li>Verbatim uses for non-commercial uses</li>
</ul>

<p>With the condition that:</p>

<ul>
<li>You attribute in the manner specified by the author/licensor</li>
</ul>

<p>At a glance, the freedoms are a mix of NC/ND and the condition is BY. Why is this incompatible with any other CC license? What specific use cases cause it to be incompatible?</p>
","<p>The Sampling+ license effectively prohibits whole-work derivatives (you can't take a Sampling+ work and incorporate it intact into another work, except in very limited circumstances).  This means the license is only partially compatible with the ""mainstream licenses"" (BY, BY-SA, BY-ND, BY-NC, BY-NC-SA, and BY-NC-ND) -- you need to be careful about <em>how</em> you use the Sampling+ content in the combined work.</p>

<p>Going the other direction:</p>

<ul>
<li>You can't incorporate ShareAlike-licensed content into a Sampling+ work: it introduces an impermissible license restriction to the SA work (incompatible with BY-SA and BY-NC-SA).</li>
<li>You can't incorporate NonCommercial content into a Sampling+ work because the Sampling+ license permits commercial use of derivatives (incompatible with BY-NC and BY-NC-SA).</li>
<li>You can't incorporate No-Derivatives content in a Sampling+ work for obvious reasons (incompatible with BY-ND and BY-NC-ND).</li>
</ul>

<p>This leave only one possible way of freely combining a ""mainstream license"" work with a Sampling+ work: incorporating a CC-BY work into a Sampling+ work.  Everything else is restricted or forbidden.</p>
","618"
"Android GPL app that opens a closed source app","78","","<p>Is legal if I edit an open source app with GPL license and make it open source again with GPL license but for doing some tasks it opens the another app that is not open source? </p>

<p>For example: GPL app sends a word to a dictionary app to show meaning and then returns to GPL app, and if it doesn't exist, opens Google Play to buy that app.</p>

<p>And if the user didn't buy that app he/she can not see the meaning of that word because he / she didn't buy the dictionary app so it can't send data to dictionary to show the meaning of it.</p>
","<p>Basically, non-free software and GPL software can be ""combined"" if the combination forms an aggregate instead of being a single software deriving from the two.</p>

<p>This is mentioned in section 5 of GPL v3:</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
</blockquote>

<p>The model that you describe seems to fit in this description and thus would be legal indeed.</p>
","5246"
"Are license headers required under the AGPLv3?","78","","<p>While applying AGPLv3 I discovered the following statement on the GNU website's page titled <a href=""https://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow noreferrer"">How to use GNU licenses for your own software</a> about 10 paragraphs in:</p>

<blockquote>
  <p>If you are releasing your program under the GNU AGPL, you only need to include the text version of the GNU AGPL.</p>
</blockquote>

<p>If I interpret that statement in the context of other GPL licenses it seems to indicate the traditional GNU license headers are not required under AGPLv3. Under the GNU Afferno General Public License, is it true one only needs to include the text version of the <code>COPYING</code> file?</p>
","<p>This is a misunderstanding.</p>

<p>The previous paragraphs talk about the requirements for the GPL and LGPL. Since the LGPLv3 is written as the GPL plus a set of extra permissions, you need to include both COPYING for the GPL and COPYING.LESSER for the LGPL additions.</p>

<p>In contrast, the AGPL is independent from the GPL and is contained in a single license text. So for an AGPL project you must not include the GPL license, and only the AGPL license text.</p>

<p>The “text version” in all cases means that the license should be included as a plaintext file, not in any markup format such as HTML, and not in any document format like ODT that would require special viewer software.</p>

<p>Per-file copyright + license headers are not required in any case, but probably still a good idea regardless of license. The value of these headers is that an independent file can be traced back to a project, and that essential license information is repeated in the file itself. However, the GPL licenses apply to a software <em>as whole</em> and not only to individual files, so as per my understanding only project-level license and copyright information is needed.</p>
","5525"
"Binary patches to a GNU GPLv2-licensed executable","78","","<p>I have a library released under a license incompatible with the GPL. That library adds some critical feature to the GPL program that I want to modify. And I also want to make the result available to the public, but without releasing the source of the resulting executable (only the original one).</p>

<p>What I have in mind right now is releasing a binary patch <strong>to</strong> the executable compiled from the legit GPL source. Say, I compile the original GPL code to exe, then I compile the modified one, that adds my incompatible library's functionality, then I do binary diff and only release the file that contains bytes that should be written to the original exe, and where one should put them.</p>

<p>Such a patch doesn't have a single piece of code that the original GPL program has, so it's not a derivative work. It isn't designed to work along with that program either. It just changes some bytes, and it's hard to tell what those bytes do, what they internally are, and what's the source of the library that was added.</p>

<p>Does this approach get covered anywhere in the official docs about GPL?</p>
","<p>Unless the diff you plan to release is useful without the GPL binary, you cannot possibly claim that it is not designed to work with the GPL binary.</p>

<p>From the <a href=""https://www.gnu.org/licenses/gpl-faq.html"" rel=""nofollow noreferrer"">GPL faq</a> at gnu.org (strong type added by me):</p>

<blockquote>
  <p>However, in many cases you can distribute the GPL-covered software alongside your proprietary system. To do this validly, you must make sure that the free and non-free programs communicate at arms length, <strong>that they are not combined in a way that would make them effectively a single program</strong>.</p>
</blockquote>
","5068"
"Can a CDDL project import a BSD file without re-/double- licensing?","78","","<p>I'm a bit confused on how CDDL interfaces with other licences.</p>

<p>If I want to modify an existing CDDL project, by introducing an extension &mdash; implementing a certain feature in a new file &mdash; can I affix my copyright statement in such a new file on top of a BSD licence, instead of a CDDL header?</p>

<p>Can I publish the result as a single downloadable work?</p>

<p>If I submit such file to the original maintainer for inclusion in their project (since my licence is less restrictive than theirs), can they publish it as such, or do they have to require re- or double- licensing, in order to protect their own rights?</p>
","<p>Whether a project maintainer will accept BSD (only) licensed files to be included in the official upstream CDDL source is not covered by licenses but based on a personal decision. So you have to ask the upstream maintainer.</p>

<p>If you personally like to know whether you may redistribute the CDDL project together with your BSD enhancements, this is easy to answer:</p>

<ul>
<li><p>If you put the BSD code into a separate file, there is no problem</p></li>
<li><p>CDDL based projects define a ""work"" limit that is file based, the CDDL only applies to those files that are already published under the CDDL or to files you put under CDDL.</p></li>
<li><p>If you are the Copyright owner of the BSD code, you may or may not (this is your personal decision) dual license it.</p></li>
<li><p>If you are not the Copyright owner of the BSD code, you are not allowed to add the CDDL as license for the code as the BSD license does not permit relicensing.</p></li>
</ul>
","2105"
"Can an interpreted program be under any license without restricted by its GPL'ed run-time environment?","78","","<p>If I write a run-time environment based on some GPL'ed libraries
and separately write an program interpreter which is passively used by the run-time environment, can a program (which is intended to be interpreted by the interpreter used in the run-time environment to perform some task) be under any license without restriction by the GPL?  (sorry for my poor English)</p>

<p>It confuses me that ""Does the fact that the interpreted program indirectly using the GPL'ed tool cause it be restricted under GPL?""</p>

<p>(There is a <a href=""https://opensource.stackexchange.com/questions/397/can-i-have-one-license-cover-part-of-a-software-and-another-covering-the-other-h"">similar question</a>.  The asker of that question is the copyright holder in his scenario.  Conversely, I can not be the copyright holder of the software (the run-time environment in this question) because it contains the code which is written by someone else and released under the GPL.  )</p>
","<p>The interpreter would be GPL since it is using GPL libraries.</p>

<p>The interpreted program is most likely not required to be released under the GPL license.</p>

<p>From [<a href=""https://www.gnu.org/licenses/gpl-faq.en.html#IfInterpreterIsGPL]"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#IfInterpreterIsGPL]</a>:<a href=""https://www.gnu.org/licenses/gpl-faq.en.html#IfInterpreterIsGPL"" rel=""nofollow noreferrer"">1</a></p>

<blockquote>
  <p><strong>If a programming language interpreter is released under the GPL, does that mean programs written to be interpreted by it must be under GPL-compatible licenses? (#IfInterpreterIsGPL)</strong></p>
  
  <p>When the interpreter just interprets a language, the answer is no. The interpreted program, to the interpreter, is just data; a free software license like the GPL, based on copyright law, cannot limit what data you use the interpreter on. You can run it on any data (interpreted program), any way you like, and there are no requirements about licensing that data to anyone.</p>
</blockquote>
","4939"
"Does CC0 require a year/author line the same way other licenses do?","78","","<p>As explained in <a href=""https://softwareengineering.stackexchange.com/a/307943/165698"">this answer</a> software licenses that assert some form of copyright should include a year/author or they may not be recognized in the case of a future dispute.</p>

<p>Does the same thing apply to CC0? The CC0 FAQ recommends it, but doesn't require it and it isn't accompanied by a ""Copyright ©"" so it obviously isn't the same thing as in the answer linked above.</p>

<p>If it is required, does it have to be set in stone forever? So if I use my GitHub username and then change that username later (or change my contact e-mail) am I allowed to change it in the author note? Or does this void the license?</p>
","<p>Since CC0 is essentially a way of waiving copyright, you don't need to add a 
""Copyright (C) ..."" line.  I generally replace that with a ""written by Joe Blogs 201x"" to allow subsequent users/distributors to keep track of the code's history
but that is not required.</p>
","6415"
"How to best deal with email suggesting an attempted/pending gpl violation","78","","<p>I received the email, reproduced below, requesting a new feature in one of my gpl programs, which this company would then build into one of their <strong>closed-source</strong> products (see the email for details). And note that they offered to pay me (what I imagine would be a pittance) for the implementation, which I'm guessing is their attempt at a sly way around the gpl. That is, rather than being constrained by their gpl license, once they pay me a single dollar, it's a whole new contractual ball game.</p>

<p>Anyway, I'm not interested, and my reply (top-posted on that email) re-asserts the gpl. So, is this the right/best approach to the situation? In particular, any better wording, or anything else I should have added? And secondly, is there any gnu.org email address I could cc such an email to, simply to establish that they've been explicitly advised that their intended use is prohibited?</p>

<p>Thirdly, in case they proceed anyway, it's not like I have the wherewithal to sue them, or anything. But, if gnu.org is experienced at such things, I'd be more than happy to sign over all my compensation rights to them for one dollar (just to satisfy the ""consideration"" requirements of contract law). Just seeing this in the email might make the company think twice, but I'm not finding anything on gnu.org relevant to this kind of tactic.</p>

<p>Here's the email...</p>

<pre><code>Date: Sun, 26 Nov 2017 03:11:38 -0500 (EST)
From: John Forkosh &lt;john@forkosh.com&gt;
To: ""[iso-8859-2] A"" &lt;a********@company.net&gt;
Cc: ""john@forkosh.com"" &lt;john@forkosh.com&gt;
Subject: mimetex development - new parameter for breaking the line
    (noautoreply)

A,

Incorporating mimetex into a closed-source product would be
a violation of your gpl license...

Mimetex is licensed to you under the gpl, version 3 or later,
   http://www.gnu.org/licenses/gpl-3.0.html
as clearly and explicitly discussed on its homepage
   http://www.forkosh.com/mimetex.html?gpl
Mimetex's copyright was registered by me, its sole author, with the
US Copyright Office. Effective Date of Registration is Nov. 12, 2002,
certificate number TX 5-567-446.
   You may use mimetex and its documentation in any way that complies
with all the terms and conditions of the gpl. Any other use, not
compliant with the gpl, is prohibited.
John  &lt;john@forkosh.com&gt;

On Fri, 24 Nov 2017, A wrote:
&gt; Hi John,
&gt; 
&gt; Recently we exchanged some email (from my personal
&gt; address a***********@gmail.com).
&gt; Now I'm writing from my company mailbox.
&gt; 
&gt; We would like to implement Mimetex in our product -
&gt; software for design and analysis of civil structures,
&gt; see [website of product] We want to use it for mathematical formulas
&gt; rendering in our outputs - structural caluculation protocols.
&gt; 
&gt; The biggest obstacle we currently see is that sometimes formulas
&gt; rendered by mimetex just flows out of the page width because they
&gt; are too long. I'd like to ask you whether you could adjust mimetex
&gt; so that it would break the line based on the width we would give you
&gt; as some new parameter? For example we would call mimetex with really
&gt; long fomrula and send you that the rendered picture cannot be widder
&gt; that 190mm and in this case you would find the last equal symbol ""=""
&gt; and break the line in this place. It means that rendered picture would
&gt; have more rows and the width would be smaller than value of the new
&gt; parameter. Of course we would pay you for this effort. What you think?
&gt; 
&gt; Best regards, A
</code></pre>
","<p>“Incorporating mimetex into a closed-source product would be a violation of your gpl license” – not necessarily. GPL software may be distributed alongside other software, if that distribution conforms with the GPL (e.g. v3, sections 4–5):</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, […] is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
</blockquote>

<p>They are free to run your GPL software from a closed-source software, as long as they don't combine the softwares into a single work. I don't understand why you think they are trying to circumvent the GPL.</p>

<p>Instead:</p>

<ul>
<li>they reported a defect with your software,</li>
<li>they asked you if you could fix that defect,</li>
<li>they offered to fund this development effort.</li>
</ul>

<p>That is the ideal behaviour for commercial users of open-source software: if they need a feature, offering to pay for that development. Everyone benefits: the company, you, and other users of the software.</p>

<p>Ideally, you would have responded by addressing the defect (this behaviour may be by-design or a legitimate issue), then stating whether you would be willing to fix that defect, followed by an estimate for this effort and your hourly rate.</p>

<p>As the developer of this software you are probably the most competent individual to add features to this software, so it is natural that they would ask you first. Since you seem to have rejected that offer and responded with unnecessary threats, now they will have to look for other software or ask another, less experienced developer to add the required features to your software in exercise of their rights under the GPL.</p>
","6270"
"When does a dependency imply a derivative work?","78","","<p>I'm building a program which gets certain info off the net, makes calculations, then sends the info to the net again. I don't program the 'taking off the net' and 'sending to the net' parts though; instead I use a script to issue commands via a CLI that someone else built. Now here's my question:</p>

<p>Is this application a derivative work off the CLI? One might argue that the only change is that the calculations are now done by the pc instead of a brain. But what's actually happening is that the program I write simply issues some commands to the original, unmodified program.</p>

<p>If this program's license calls for derivative works to use the original's license, would that in my case mean I have to use the license?</p>

<p>To clarify: The CLI I'm talking about is included as a (git) submodule, so I'm just linking to it. The license in question is the OSL 3.0. Would anything change if I didn't even include it as a submodule, but I simply listed it as a dependency?</p>
","<p>The OSL defines ""Derivative Works"" as</p>

<blockquote>
  <p>to translate, adapt, alter, transform, modify, or arrange the
      Original Work, thereby creating derivative works (""Derivative
      Works"") based upon the Original Work;</p>
</blockquote>

<p>This would  on the face of it seem to permit linking by omission. A little further research confirms that in the <a href=""http://rosenlaw.com/OSL3.0-explained.htm"" rel=""nofollow"">OSL FAQ</a> (<a href=""http://web.archive.org/web/20110511180751/http://www.rosenlaw.com/OSL3.0-explained.pdf"" rel=""nofollow"">mirror</a>):</p>

<blockquote>
  <p>The definition of Derivative Works in § 1(b) is particularly important. For one thing, that defined term includes no reference whatsoever to linking or to any other technical manner of making programs interoperate. The verbs used in § 1(b) [""translate, adapt, alter, transform, modify, or arrange""] reflect the kinds of activities that we generally do to create derivative literary or other expressive works, and those things—not functional linking—create Derivative Works as defined in this license. As a result, linking an unchanged Original Work with another independently-written work does not, absent more, create a Derivative Work subject to § 1(b); such an act is merely the incorporation of a copy of that Original Work into a collective work, authorized by § 1(a).</p>
</blockquote>

<p>And this is code-level linking that is permitted. From the sound of it, your program just runs a shell script on the OSL-covered software, which is even less of a derivative work.</p>
","4392"
"When was the BSD-2 Clause license published?","78","","<p>Title says it all: when was BSD-2 published? Everywhere I've looked has no information about when the BSD-2 ""Simplified"" license was published.</p>
","<p>The earliest date known so far is Feb 6, 1997. </p>

<p>Note that there is unlikely anything official and formal with the first use of this license. Someone at some point just took its knife to cut the 3rd and 4th clauses from the BSD original text (e.g. ""four clauses""). The trick is to find who did it first and when. Here is some of my research towards this going progressively backwards in time:</p>

<ul>
<li><p>This <a href=""https://github.com/freebsd/freebsd/blob/51651f6176040ca8232c50f9afd13030371d65c3/COPYRIGHT"" rel=""nofollow noreferrer"">commit</a> from December 31st, 2003 shows the license appearing as the top-level primary license for the FreeBSD Project and is referenced  as the ""compilation copyright"" in the commit comment:</p>

<p><code>Update the COPYRIGHT file to include FreeBSD's compilation copyright</code></p></li>
<li><p>But this ""two clause"" BSD license as used in FreeBSD today as the top level license appeared well after the fourth clause of the ""four clause"" BSD (the advertizing clause) was <a href=""https://github.com/freebsd/freebsd/blob/b8bc348fd4e3660c853b749f2d22f8c040567c95/COPYRIGHT"" rel=""nofollow noreferrer"">""rescinded"" by the UC Regents</a> on <a href=""ftp://ftp.cs.berkeley.edu/pub/4bsd/README.Impt.License.Change"" rel=""nofollow noreferrer"">July 22, 1999</a>. Before that the fourth clause was still applying.</p></li>
<li><p>And the <a href=""http://web.archive.org/web/19990429093111/http://www.freebsd.org/copyright/freebsd-license.html"" rel=""nofollow noreferrer"">wayback machine</a> tells us that as early as April 29 1999 this BSD variant was already in use on the main project web site.</p></li>
<li><p>And this <a href=""https://github.com/freebsd/freebsd/commit/ea783268e73e47b0c3012339d1e278e7045e2305#diff-9fa582ac22bf1b2b86ada556c0cbef87"" rel=""nofollow noreferrer"">commit</a> on Sep 26, 1998 shows it was used already at this stage for specific subsets of the code.</p></li>
<li><p>And a tad before this <a href=""https://github.com/freebsd/freebsd/commit/acc786c1a9d03d7454add7273eb38964c95880c9#diff-6d9985c2d30b6dfa35591789a0ac899f"" rel=""nofollow noreferrer"">commit</a> shows that on Feb 6, 1997 it was already there used for some <code>/etc</code> files.</p></li>
</ul>

<p>It may have been in use before and elsewhere though.... I <a href=""https://github.com/freebsd/freebsd/commit/51651f6176040ca8232c50f9afd13030371d65c3#commitcomment-20377200"" rel=""nofollow noreferrer"">have asked</a> the committers for details ... and I will continue to dig now and then and update the answer.</p>
","4927"
"Can you commercialize your own GPL product?","77","","<p>I've been wanting to make my own open-source project under the GPL. However, I was thinking of making a paid ""professional"" version that adds features that are closed-source. Is this possible?</p>

<blockquote>
  <p>Edit: Am I allowed to charge a small fee for the compiled source?</p>
</blockquote>
","<p>If you own copyright to all of the code in your project, then yes, you may grant other licenses, to another enhanced version or even to the exact same code.</p>

<p>However, if you've made your project GPL, then once you have accepted a patch from anyone, then that contributor also owns a part of your code and would have to concur in the ""professional"" license, or else you would need to refrain from pulling the contribution into the other version.</p>

<p>These points are well covered in @apsillers' thorough <a href=""https://opensource.stackexchange.com/questions/2077/so-the-gpl-doesnt-restrict-the-creator-of-the-software-in-any-way"">answer to this question</a>.</p>

<p>You may charge any fee you like for your ""professional"" version, and in fact you may charge any fee for the GPL version, too, according to the ""<a href=""https://www.gnu.org/licenses/gpl-faq.html#DoesTheGPLAllowDownloadFee"" rel=""nofollow noreferrer"">Frequently Asked Questions</a> about the GNU Licenses"".</p>
","5687"
"Do I need to make my users agree to a license?","77","","<p>Suppose I have a website. This website is an educational site and I am releasing it under [insert license here].</p>

<p><strong>My question:</strong></p>

<p>Assuming I have the license at the bottom of the page, is there any need to put a popup that gets users to agree to the license? </p>
","<p>It's not at all necessary to simply use your website. Look at it this way: if you <em>didn't</em> have a license, then the work on the site would be copyrighted by you with no rights for other people. Adding a license gives other people some rights - is it <em>really</em> necessary to say ""hey, do you agree to me giving you more rights?""? You can just do it.</p>

<p>However, if you accept work from other people to include in your website, it <em>is</em> necessary, because you'd be taking some of their rights away (the right to control distribution and licensing). In this case, you need their explicit agreement.</p>
","715"
"Do packages listed in a package.json file need to be documented individually?","77","","<p>I am trying to understand the general clause contained in most licenses that reads as follows</p>

<blockquote>
  <p>The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.</p>
</blockquote>

<p>The majority of the libraries in use are MIT and BSD. There are some additional packages with other licenses which I have explicitly documented.</p>

<p>In the documentation of the project do I need to individually reference each packages license in my package.json file or am I covered by just allowing NPM to download the licenses contained in the packages own repositories when the user goes to build the project?</p>

<p>There are three embedded libraries which are redistributed with the library, those licenses I have explicit copies of in my documentation. The libraries in use that are imported by NPM are the ones I am not sure about how to properly follow the licenses. They are used in their 'binary' form in one way or another.</p>
","<p>The theory is that if you redistribute all the deps (and least for all embedded deps) then you would be responsible to comply with their license (including attribution, etc). And this is for all the direct deps and deps of deps, <a href=""https://opensource.stackexchange.com/questions/4287/what-are-software-dependencies-and-what-are-the-implications-of-floss-dependenc"">all the way down</a>.</p>

<p>Now for the deps you do not distribute but would be installed by a user of yours at build time, you do not need to attribute... Yet I suggest providing some high level information for these anyway.</p>

<p>The rationale is that it would be best if you provide the least possible surprise to your users:</p>

<p>Say your project is GPL-licensed and somewhere down the dependency chain is a package that is not GPL-compatible... </p>

<p>The same applies if your package is under a permissive MIT-style license and somewhere down the dependency chain is a package that is GPL-licensed, eventually impacting the whole chain with its copyleft.</p>

<p>In both cases as a user I would like to be informed by you about what I am getting with your project. It does not have to be detailed but at least list the few components if any that would have significantly different licensing: e.g copyleft or limited copyleft if permissive,  non-copyleft compatible if copyleft, etc.</p>

<p>As an example of a minimalist and useful documentation of third-party deps, openstack provides their Python requirements files <a href=""https://git.openstack.org/cgit/openstack/requirements/tree/global-requirements.txt"" rel=""nofollow noreferrer"">with license comments</a>. These files are more or less the equivalent of the deps section in a <code>package.json</code> and in this case they ""resolve"" them at full depth first (with a <code>pip freeze</code>-like command).</p>

<p>I could imagine an npm-shrinkwrap or yarn.lock file with similar comments or attributes for an NPM deps tree.</p>

<p>As a side note you could use my <a href=""https://github.com/nexB/scancode-toolkit"" rel=""nofollow noreferrer"">scancode-toolkit</a> to help collect the license information of your deps.</p>
","5060"
"How should a codebase's original author be credited after they've transferred ownership of it?","77","","<p>A repository owner on GitHub transferred me <a href=""https://github.com/Alhadis/language-viml/issues/6"" rel=""nofollow noreferrer"">ownership</a> of a project he abandoned some time ago. I noticed the year in the license file is outdated (2014), and the original author's name is still included.</p>

<p>The license is MIT, but I know I can't reattribute the work to myself. Should I:</p>

<ol>
<li>Keep the year updated and continue crediting him, even if I'm now the one maintaining the codebase?</li>
<li>Leave the license as-is?</li>
<li>Ask for permission to modify the license?</li>
</ol>

<p>All things considered, the author's probably not that hung-up on this matter, but I am and I'd prefer to know what the recommended procedure for transferal of ownership is... I didn't, after all, pen the original code...</p>

<p><strong>EDIT:</strong> Just to confirm, I've read <a href=""https://opensource.stackexchange.com/q/2391/"">the question</a> regarding forking an MIT-licensed project. This is different, because it's not forking somebody else's work, it's having it handed over to you in its entirety.</p>
","<p>Based on the exchange you've had with the previous repository maintainer, the previous maintainer never transfer ownership of his copyright. This situation is virtually identical (from a copyright and licensing perspective) to forking someone else's freely-licensed repository without coordinating directly with them. The original owner holds copyright on the original code, and you have permission to make your own modifications, which will be under your own copyright.</p>

<p>The only difference here appears to be that the Github repository has been mechanically transferred from being listed under the previous owner's account to being listed under your account. This by itself appears to have no copyright transfer implications. It is merely an easy way for the previous maintainer to signal, ""I don't care about updating this project anymore, but this guy does."" Having the repo listed under your account doesn't mean anything in copyright terms -- the license text always allowed you to copy the code and post a new copy under your own Github account, which is nearly identical to what has happened here.</p>

<p>Unless the previous maintainer has explicitly authorized a <a href=""http://fairuse.stanford.edu/overview/copyright-research/ownership-and-transfers/#what_is_a_transfer_of_title"" rel=""nofollow"">transfer of title</a> making you the new copyright owner, you do not have the right to remove the copyright notice. If you would like to do so (and if you would like the unambiguous ability to completely re-license the entire work in the future) you should ask for the maintainer to completely relinquish copyright to you, which he may or may not wish to do.</p>

<p>Assuming you <em>have</em> participated in a transfer of title and you are now the new copyright owner of the entire work, then, yes, you can remove the copyright notice. this is trivial to see, because the previous copyright holder no longer has any legal standing to take legal action against you, since only the current copyright holder (who is now you) can take legal action against misuse of a work. This hardly seems like a <em>polite</em> thing to do (versus simply <em>adding</em> your own copyright notice as an addition to his), it appears to be a legally valid thing to do, assuming you own the copyright on everything.</p>

<p>Note that outside of the U.S., some jurisdictions have ""moral rights"" that can never be surrendered, and those moral right may include the right to be acknowledged as an author of a work. It's possible that removing an old copyright notice may run afoul of this moral right in certain jurisdictions, but I'm not sure.</p>
","2843"
"Do I have to include the PSF's notice of copyright?","76","","<p>I have a class which inherits from one in the standard library of Python 2.7.6.</p>

<p>I would like to meet the conditions of the license of that code, which is the <a href=""https://docs.python.org/2.7/license.html"">PSF LICENSE AGREEMENT FOR PYTHON 2.7.6</a> which (in part) says</p>

<blockquote>
  <p>... PSF hereby grants Licensee a ... license to ... use Python 2.7.6 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2014 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.6 alone or in any derivative version prepared by Licensee</p>
</blockquote>

<p>I'm wondering about the meaning of the second <code>or</code> in that text, which suggests that I do not need to mention that copyright claim anywhere in my own code. It is sufficient not to remove the claim from Python 2.7.6 itself.</p>

<p>So, if I comply with the other clauses (especially clause 3, explaining my changes), then I am fully compliant and have no obligation to distribute any part of Python (in particular the license, or copyright claim) with my own code.</p>

<p>Does that seem a reasonable interpretation?</p>
","<p>The ""or"" there is not intended to give you wiggle room, but is intended to differentiate between original ""or"" modified version.</p>

<p>In the reading of copyright by the Free Software Foundation, creating a derivative class creates a derivative work from the original work, and thus the license should be included. This definition is not universally accepted.</p>

<p>I understand you feel the license feels out of place in your repo. I wouldn't worry too much about it. Just stick it in there, and make it clear what it applies to.</p>

<p>Personally I'm a fan of a central file that tells you the copyright information, and several separate license files as needed. Take a look at <a href=""https://opensource.stackexchange.com/questions/1711/combining-code-written-under-different-licenses-eiffel-forum-license-mit-and-a"">Combining code written under different licenses (Eiffel Forum License, MIT and Apache), what are my options?</a></p>
","1967"
"Proprietary software calling OpenModelica (GPL v.3)","76","","<p>I have the following apllication software setup:</p>

<ul>
<li><p>A numerical simulation ""engine"" = OpenModelica (which in open source, released under GPL v.3), used to simulate e.g. hydraulic systems;</p></li>
<li><p>A proprietary GUI (e.g. an Excel sheet with VBA macros, a Python script, a Windows .NET application, ...) that interacts with OpenModelica via its APIs to: load a model, set parameters, run the simulation, get the results. The GUI provides a dedicated user interface to set parameters and visualize the results.</p></li>
</ul>

<p>The OpenModelica source code has not been modified in any way.</p>

<p>Is this combination an ""aggregate"" according to GPL v.3, thus allowing me to distribute in a ""bundle"":</p>

<ul>
<li><p>OpenModelica as FLOSS, according to GPL v.3;</p></li>
<li><p>the GUI as a proprietary copyrighted software,</p></li>
</ul>

<p>or would the combination be a ""larger program"", forcing me to distribute everything under GPL v.3 conditions?</p>
","<p>Whether non-GPL, proprietary software can communicate with GPL software depends on the communication mechanism used. The key question is whether the softwares are independent creative works. As an indicator of this, the authors of the GPL suggest that they form a single work if the softwares share an address space, i.e. are loaded into the same process. However, communication “at arms length” is OK, e.g. inter-process communication.</p>

<ul>
<li><p>If communication happens by using a command line interface, this is usually OK: the GPL code is executed in a separate process.</p></li>
<li><p>If communication happens through CORBA, that should be OK because the GPL code runs in a separate process. However, this may be approaching the limits since the proprietary program depends on the exact data structure layout offered by the GPL software.</p></li>
<li><p>If communication happens through function calls into an ordinary library (like importing a module in Python), then the software is certainly linked to the GPL software. The combined software can then only be distributed under the terms of the library, i.e. here that would be the GPL.</p></li>
</ul>

<p>If you need details about understanding one of these communication mechanisms, please ask a specific question focussed on that mechanism.</p>

<p>When the proprietary software and the GPL software communicate in a manner that does not make them a combined work, then you can distribute the GPL software alongside the proprietary software in accordance with the GPL.</p>
","6105"
"Use LGPL code in an AGPL project","76","","<p>I'm developing a project I licensed under AGPL. I modified a file from the <a href=""https://www.gnu.org/software/libmicrohttpd/"" rel=""nofollow noreferrer"">microhttpd GNU library</a>, adapting it to my project. The file I use is one of the provided <a href=""https://gnunet.org/git/libmicrohttpd.git/tree/src/examples/fileserver_example.c"" rel=""nofollow noreferrer"">file server example</a>s. The repository <a href=""https://gnunet.org/git/libmicrohttpd.git/tree/COPYING"" rel=""nofollow noreferrer"">is licensed under LGPLv2</a>.</p>

<ul>
<li>Can I just get rid of LGPL license ? (I think I can't)</li>
<li>Can I change the file header to AGPL ? (I have no idea)</li>
<li>Where is the right place to mention that my code is a modified version of LGPL code, and link the microhttpd page ?</li>
</ul>

<p>Similar question: <a href=""https://opensource.stackexchange.com/questions/5430/using-public-domain-code-in-an-lgpl-program"">Using public domain code in an LGPL program</a></p>
","<p>This is a little tricky because the LGPL and AGPL are not strictly compatible. For LGPL code that is <em>linked</em> to AGPL code, compatibility is not required, because LGPL-licensed can be linked to anything, even proprietary software, without causing a licensing issue. However, for LGPL code that is fully transplanted into a larger software project, such that it becomes a part of that larger project (instead of merely <em>used</em> by it as a library), compatibility is required.</p>

<p>There <em>is</em> a path forward, though: you must distribute your changed LGPL files under the GPLv3, and then you may combine those GPLv3 files under the AGPLv3. This is described in brief in a footnote in the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#AllCompatibility"" rel=""noreferrer"">GPL compatibility matrix</a>:</p>

<blockquote>
  <p>LGPLv2.1 gives you permission to relicense the code under any version of the GPL since GPLv2. If you can switch the LGPLed code in this case to using an appropriate version of the GPL instead (as noted in the table), you can make this combination.</p>
</blockquote>

<p>The LGPLv2.1-to-GPL reliciensing permission is described in LGPLv2.1 section 3:</p>

<blockquote>
  <ol start=""3"">
  <li>You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.</li>
  </ol>
</blockquote>

<p>Upgrading from LGPL2.1 to GPLv3 is important because GPLv3 and AGPLv3 are one-way compatible. You can include GPLv3 work within an AGPLv3 work, per <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html#section13"" rel=""noreferrer"">the exception in AGPLv3 section 13</a>:</p>

<blockquote>
  <p>Notwithstanding any other provision of this License, <strong>you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work</strong>, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>
</blockquote>

<p>Therefore, for any parts of microhttpd that you incorporate directly into your AGPL project (directly, <em>not</em> used as a library), you must change their licensing headers to state their licensing as GPLv3. This change in licensing is allowed because the author has specifically allowed it under the above permission in LGPLv2.1. You do not need to mention that those files were formerly under the LGPL, since the upgrade process is explicitly detailed in the license and does not require any such notice. </p>

<p>With all that said, let's address your questions:</p>

<blockquote>
  <p>Can I just get rid of LGPL license?</p>
</blockquote>

<p>For the files you directly incorporate into your project, you must replace the LGPL with the GPLv3. For other parts of the LGPL library that your work uses indirectly <em>as a library</em>, no change is necessary. Those can remain safely under the LGPL.</p>

<blockquote>
  <p>Can I change the file header to AGPL?</p>
</blockquote>

<p>After you change microhttpd's LGPL license to GPLv3, you can make <em>your</em> changes under the AGPL. In that case, include a notice that some parts are licensed under the GPL, and some parts are licensed under the AGPL. Do your best to describe which parts are licensed which way, and include notices for both licenses in your header. For simplicity, you may wish to license your changes to that file under the GPLv3, but according to the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#AllCompatibility"" rel=""noreferrer"">GPL compatibility matrix</a>, you <em>can</em> make your version of the file licensed under the AGPLv3 as a whole, with some GPLv3 parts (even if those GPL parts make up a majority of the work).</p>

<blockquote>
  <p>Where is the right place to mention that my code is a modified version of LGPL code, and link the microhttpd page?</p>
</blockquote>

<p>There is no need to link to the microhttpd project, though doing so would always be a polite thing to do. You are only required to preserve license and copyright notices, along with a notice explaining how you changed the files. You can include the how-you-changed information in any reasonable place, either in the individual file headers, or in your project's README.</p>
","5638"
"Using open source license text verbatim without attribution","76","","<p>I came across <a href=""https://github.com/pololu/l3g-arduino"" rel=""nofollow"">an open-source software project</a>, and its license contains verbatim text from the MIT license, although without directly mentioning that it is the MIT license (I know separately that the projects intends to use the MIT license). Are there any consequences to using the text of a license without accompanying it with the name of license or other form of attribution?</p>

<p>This may be a question of plagiarism, or a rather broader copyright question actually.</p>
","<p>It depends on the license!</p>

<p>Some licenses' texts specify what can be done with them; <em>e.g.</em> the <a href=""http://www.gnu.org/licenses/gpl-3.0.txt"" rel=""nofollow noreferrer"">GPL v3</a> starts with</p>

<blockquote>
  <p>Copyright (C) 2007 Free Software Foundation, Inc. <a href=""http://fsf.org/"" rel=""nofollow noreferrer"">http://fsf.org/</a></p>
  
  <p>Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.</p>
</blockquote>

<p>So you're allowed to copy the whole document, which includes its title. And the application instructions of the GPL specify that the license should be named in the files it covers (see <a href=""https://opensource.stackexchange.com/questions/202/should-i-include-license-text-in-a-single-file-or-all-source-files"">Should I include license text in a single file or all source files?</a> for further discussion of this).</p>

<p>The MIT license doesn't carry any such provision. (It does specify that the license must be reproduced in derivative works, as-is, but that's valid once it's been chosen for a work.) In fact ""MIT license"" is a name given after the fact to licenses used at MIT, which had slight variations themselves. (The version in common use is the <a href=""https://www.debian.org/legal/licenses/mit"" rel=""nofollow noreferrer"">Expat license</a>.) The <a href=""https://opensource.org/licenses/MIT"" rel=""nofollow noreferrer"">OSI</a> added a title to the license in their page describing it, but that isn't part of the text used even by the original authors of the license...</p>

<p>So while it is nice to name the license used by a project, it isn't always necessary, and you'll find lots of projects which don't name their license (especially when it's a <a href=""https://www.debian.org/misc/bsd.license"" rel=""nofollow noreferrer"">BSD-style license</a>, the <a href=""http://www.jclark.com/xml/copying.txt"" rel=""nofollow noreferrer"">Expat license</a>, the <a href=""http://www.gzip.org/zlib/zlib_license.html"" rel=""nofollow noreferrer"">zlib license</a>, or <a href=""https://opensource.org/licenses/ISC"" rel=""nofollow noreferrer"">the ISC license</a>) — people aren't necessarily all that concerned with cataloguing license usage, just with granting rights.</p>
","2879"
"How does contributing to a FLOSS project work from a legal perspective?","75","","<p>Some points I know:</p>

<ul>
<li>Contributors own copyright over their contributions, which means the author (= the owner of the repo and original author) cannot re-license the code (= change the license of the code) without asking every contributor.</li>
<li>That's why some companies require you to sign a <a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"" rel=""nofollow"">Contributor License Agreement</a> which - easily said - transfers your rights to them, so that they can do what they want with the code (relicense, make proprietary, ...).</li>
</ul>

<p>Questions:</p>

<ul>
<li>When making changes to another repo (you've forked) do you release your changes under the license (usually a file called <code>LICENSE</code> or similar) of that repo?</li>
<li>If so there is one abnormality: If contributing to an MIT licensed project means you release your changes under the MIT license, this still does not mean the contributor has to be attributed in the new code base, but this is a requirement of the MIT license.</li>
<li>If I fork a (MIT licensed) project where contributors contributed to it does this really mean I fork one project which is licensed under <em>one</em> MIT license or does it rather mean I fork one project licensed under <em>multiple</em> MIT licenses of all contributors? So is this rather splitting of a cake or can I consider the project a big block of a license?</li>
</ul>

<p>I think a step-by-step explanation (from forking the repo until the Pull Request is merged) would be useful.
Bonus points for any kind of metaphors.</p>

<p>This question has been cross-posted in <a href=""https://law.stackexchange.com/questions/13162/how-does-conributing-to-a-floss-project-work-from-a-legal-perspective"">law Stackexchange</a> as it overlaps.</p>
","<blockquote>
  <p>When making changes to another repo (you've forked) do you release your changes under the license...of that repo?</p>
</blockquote>

<p>You aren't required to unless your changes fall within the domain of the license's <a href=""https://www.gnu.org/licenses/#WhatIsCopyleft"">copyleft</a>. If the repository you forked is Apache 2.0-licensed (or some other permissive license), you can release your modifications under whatever license you want, even full copyright, provided that you follow the license's terms. If it is under the Mozilla Public License, you have to release whatever modifications you make to the MPL source files under the MPL, but separate files that are entirely your own work can be under the terms of your choice. If it's under the GNU General Public License, all your changes must be under the GPL.</p>

<p>However, if you give your contributions back to the copyright holders, it is best that you do keep your changes under the same license that they use, for simplicity's sake. It's annoying if you have one file under the MPL and another under the MsPL and you can't static link with that module because it's under the LGPL...</p>

<blockquote>
  <p>If I fork a (MIT licensed) project where contributors contributed to it does this really mean I fork one project which is licensed under one MIT license or does it rather mean I fork one project licensed under multiple MIT licenses</p>
</blockquote>

<p>Great question! You fork one project licensed under multiple MIT licenses (unless of course the contributors assigned copyright to some central entity). Each contributor owns the copyright to part of the work, and they have all granted you rights to use the code. The project as a whole is considered to be under the MIT license because all contributors agreed to license it that way, but projects don't have to be all under one license. Copyright holders can dual-license their works so recipients can use the work under the license of their choice; the MPL has a GPL-compatibility mechanism that causes files to be dual-licensed. If you're a Firefox user, just go to <code>about:license</code> for an example of lots of licenses governing one work.</p>

<blockquote>
  <p>I think a step-by-step explanation (from forking the repo until the Pull Request is merged) would be useful.</p>
</blockquote>

<p>It's much easier than you think. All you have to do is say in your pull request ""I agree to release these contributions under the MIT license"", or something to that effect. If you don't <em>want</em> to release your contributions under the MIT license (say, you want to be a jerk by releasing them under the GPL and thus forcing the entire project to be under the GPL), that's another story, and the project will probably reject your changes.</p>
","4268"
"Plugin (consuming GPL V2 licensed binaries) for main application (not GPL)","75","","<p>I want to write a plugin for a software that will not be licensed with GPL.</p>

<p>However as this plugin needs to communicate with OPC, I wanted to use the .net standard <a href=""https://github.com/OPCFoundation/UA-.NETStandard"" rel=""nofollow noreferrer"">OPC stack</a>.
This 'program' is licensed with GPL V2.</p>

<p>My question is whether my plugin which is a new C# Assembly can use the GPL licensed DLLs while not affecting the main program's license. (The plugin itself can be distributed with GPL V2 if needed to, but we would not prefer that)</p>

<p>The main application would load the DLL and use the data it gets from there (unknowing which DLLs it really uses and without access to those GPL licensed DLLs)</p>

<p>I already found this in the <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLPlugins"" rel=""nofollow noreferrer"">GNU FAQ</a>, but I'm not sure if this is a clear case and I can continue to implement this way, or if I should organize a professional to check it.</p>

<p>EDIT: Sorry if my question was not clear but confusing to you.
-The main application should be non-GPL and it will load the plugin dll which in turn loads the GPL dll. My question is if the main application is now influenced by this. It may be possible to have the plugin dll GPL also but not the main application.
The main application will resolve the plugin dll with dependency injection and therefor the plugin will reference some core dll that holds interfaces for that.</p>
","<p>You said the main application will</p>

<blockquote>
  <p>load the plugin dll which in turn loads the GPL dll.</p>
</blockquote>

<p>As implied by the DLL name (dynamic-link library), loading a DLL file is dynamically linking. We can determine the licensing propagation by working our way backwards from the GPLv2 DLL.</p>

<p><strong>Your Plugin DLL + GPLv2 DLL Analysis</strong></p>

<p>Since your plugin is dynamically linking against the GPLv2 DLL, the combined work (your plugin + GPLv2 DLL) is also subject to the terms and conditions of the GPLv2. See <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLStaticVsDynamic"" rel=""noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#GPLStaticVsDynamic</a>, which says:</p>

<blockquote>
  <p>Linking a GPL covered work statically or dynamically with other modules is making a combined work based on the GPL covered work. Thus, the terms and conditions of the GNU General Public License cover the whole combination.</p>
</blockquote>

<p><strong>Main Application + (Your Plugin + GPLv2 DLL) Analysis</strong></p>

<p>Now, you said the main application loads your plugin's DLL, which is also dynamic linking. Once again, this dynamic linking makes the combined work of main application + (Your Plugin + GPLv2 DLL) governed under the terms and conditions of the GPLv2.</p>

<blockquote>
  <p>My question is whether my plugin which is a new C# Assembly can use the GPL licensed DLLs while not affecting the main program's license.</p>
</blockquote>

<p>The answer is no, you cannot do this with your current architecture.</p>

<p>It may or may not be possible to re-architect your plugin strategy to achieve your licensing goals, but that depends on what the plugin framework allows in terms of spawning additional processes or interacting with external processes. However, that warrants a new and separate Stack Exchange question.</p>
","6340"
"What is GPL leakage?","75","","<p>I heard the term <em>GPL leakage</em> mentioned very recently in a presentation from a well qualified speaker from MongoDB at an event for developers &amp; integrators in the cloud computing market.  I've never heard this term anywhere else, but the audience seemed to follow what he was saying, suggesting this might be an institutional issue.</p>

<p>The context was that cloud computing providers might be providing database implementations to include MongoDB (itself open source, AGPL v3.0) as well as their own software.  I can imagine some of the legal implications of this, but only vaguely... so would appreciate generally what's meant by this term and/or whatever institutional problem it suggests: preferably with an example.</p>
","<p>This term's current unavailability on Internet search suggests it was improvised by the speaker according to a negative association with the GPL that listeners would have recognised.</p>

<p>The use of the term <a href=""https://en.wikipedia.org/wiki/Viral_license"" rel=""nofollow noreferrer"">Viral license</a> (marked as pejorative by Wikipedia) is discouraged because it focuses on the vulnerabilities rather than the protection offered by open source licensing agreements.  Yet it is probably the best short synonym (part of speech aside) for ""leakage"" and refers to this licensing quality:</p>

<blockquote>
  <p>... allows derivative works only when permissions are preserved in modified versions of the work.</p>
</blockquote>

<p>which provokes the worry over software vendors' own additions to GPL software also being freely redistributable under the GPL license.  MongoDB is a good test case of this idea because of practical licensing situations for which they &amp; others discuss some problems and solutions:</p>

<ul>
<li><a href=""https://softwareengineering.stackexchange.com/questions/107883/agpl-what-you-can-do-and-what-you-cant"">AGPL - what you can do and what you can't</a></li>
<li><a href=""http://blog.mongodb.org/post/103832439/the-agpl"" rel=""nofollow noreferrer"">MongoDB: The AGPL</a></li>
</ul>

<p>which provide specific examples as requested by the OP.</p>
","4039"
"Would I violate anything if I use vlclib for android in my closed-source app?","75","","<p>I'm developing a video player and I want to use <code>vlclib</code> for android for better codec support.</p>

<p>But I've some questions in mind regarding use of the library in my project.</p>

<ol>
<li><p>Would I violate anything if I use vlclib in my closed-source android
app?</p></li>
<li><p>Do I need to open-source my app in order to use it?</p></li>
<li><p>Are there any provisions I need to comply with for using the library
    in my project?</p></li>
</ol>
","<p>According to <a href=""http://www.videolan.org/legal.html"" rel=""nofollow"">the project's legal page</a>, </p>

<blockquote>
  <p>Most pieces of software from VideoLAN are licensed under the GNU
  General Public License Version 2</p>
</blockquote>

<p>So, to take your question by parts, and bearing in mind that IANAL/IANYL:</p>

<ol>
<li><p>Yes, you would violate the GPL;</p></li>
<li><p>Yes; specifically, your app must be licenced under either GPLv2 or a licence which is at least as permissive (referred to as a compatible licence) - in my opinion, your life will be simplest if you pick GPLv2 also;</p></li>
<li><p>Yes, you need to comply with all the provisions of GPLv2 with respect to the vlclib codebase, and all the provisions of the licence you choose (see part 2) with respect to the other parts of your product, assuming you wrote them all, and retain the copyright thereto.</p></li>
</ol>

<p>Note that this analysis presumes that linking with a library creates a derivative work, and this has not yet (to my knowledge) been ruled on by a court.  I wouldn't bet my house on it not doing so, though.</p>
","2697"
"Is there an open source/free license that allows for restrictions on academic usage?","74","","<p>I study CS at university and obviously do a lot of programming for my course. I'd like to be able to release my source code to show employers and such, but the university is understandably concerned about plagiarism from students that are given the same or similar tasks in subsequent years.</p>

<p>Is there an open source license that allows for a restriction on academic usage, so I can cover my back legally if a student were to take the code to use in their own assignments?</p>
","<p>While I agree with the two answers posted so far, I would like to add that publicly posting solutions to programming <em>exercises</em> you were assigned as part of your coursework is something that your university could legitimately blame you for.</p>

<p>On the contrary, posting programming <em>projects</em> which are necessarily quite different from student to student, and for which most of the creative ideas came directly from you, is perfectly legitimate.</p>

<p>The distinction is the same as posting the solution to a knowledge test vs sharing the essay you wrote for some class. If some students were to reuse your essay in the future, it couldn't be held against you.</p>

<p>Now of course, you should wait for the end of the semester to post anything. And probably also ask your teachers first.</p>
","4998"
"OSL v3.0 - Can I sell my software based on OSL v3.0 code source?","74","","<ol>
<li>Can I sell my software based on OSL v3.0 code source?</li>
<li>Can I open the source code only for my customers?</li>
<li>Can I limit the my changes to original source code, that is, a customer can't sell, modify or redistribute this changes?</li>
</ol>

<p>E.g. I want create own shop system based on PrestaShop, but with many modifications to it.</p>
","<p>The OSL 3.0 is a rather uncommon, less used open source license. It is in spirit similar to the AGPL licenses in that a usage in <a href=""http://rosenlaw.com/OSL3.0-explained.htm#_Toc187293088"" rel=""nofollow noreferrer"">""external deployments""</a> may trigger the license copyleft terms. </p>

<p>So in a nutshell, yes you can build a commercial software that is derived from OSL-licensed software and yes you can sell it. But as a derivative work, the software will still be subject to the OSL at large and in particular:</p>

<ul>
<li>you will have to redistribute the source code per section 3.</li>
<li>customers that do an ""external deployment"" per <a href=""https://opensource.org/licenses/OSL-3.0"" rel=""nofollow noreferrer"">section 5</a> will have to redistribute the code ""to the public"" per section 1.c of the OSL 3.0</li>
<li>customers will have the right to change and redistribute your changes under the OSL for free, or modify further or sell these per section 1.</li>
</ul>
","4984"
"Using GPL-covered dataset in non-GPL code","74","","<p>We are currently writing a piece of software. In it, we want to use the <a href=""https://github.com/disconnectme/disconnect-tracking-protection"" rel=""nofollow noreferrer"">Disconnect.me tracking services list</a>. The list is licensed under the GPLv3. Our code will generally only run on servers, but we plan on releasing it under the MIT license. The tracker file will not be distributed with the software, but the setup script will automatically download it from the official source. It is then read and parsed in our software, and used to match URLs against it.</p>

<p>Leaving aside the issue that licensing datasets under the GPL is discouraged (since it was not our decision), what are the consequences for our final code? Since the file in question is a JSON data file, I am not sure how the different forms of <a href=""https://www.gnu.org/licenses/gpl-faq.html#GPLPlugins"" rel=""nofollow noreferrer"">linking vs. fork-and-exec</a> apply to it. Is this ""modularized enough"" that this use would be acceptable, or does this use already make the whole system a combined work and thereby require licensing the whole thing under the GPLv3?</p>
","<p>There's a difference between ""mere aggregation"" - distributing multiple pieces of software together on the same media - and a single program that depends on multiple parts. The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">GNU FAQ</a> admits that this difference is fuzzy and may depend on the interpretation of a court.</p>

<p>Nevertheless, you can stay relatively clear from this by separating the dataset from the non-GPL code as far as possible. Some possibilities include:</p>

<ul>
<li>Making your code function without the dataset</li>
<li>Distributing separately, e.g. separate download links on your website for your software and the dataset</li>
</ul>

<p>The only hard requirement is that you do not further restrict user rights on the GPL part, that is, make sure the GPL part is always available under that license.</p>

<p>Fortunately, since your code is under a GPL-compatible license (MIT), you can:</p>

<ul>
<li>Release the whole thing as GPL, and simultaneously,</li>
<li>Release your code, sans the GPL data, as MIT</li>
</ul>
","5571"
"What are the limits of Libre when publishing open access controversial books?","74","","<p>We're living in <a href=""https://en.wikipedia.org/wiki/Freedom_of_speech"" rel=""nofollow"">freedom of speech</a> community.
However when writing controversial books, are there any topics which are not allowed to write about in First World countries (even for educational purposes)? How do you know when you cross the line?</p>

<p>One example could be <a href=""https://en.wikipedia.org/wiki/Uncle_Fester_(author)"" rel=""nofollow"">Uncle Fester books</a> or WikiLeaks which are the borderlines I think. Are there any other examples?</p>
","<p>FLO licenses take a legal, copyright-restricted-by-default work, and give you permission to copy, modify and/or distribute that work. They would not take precedence over criminal law in your country, including laws that criminalise or restrict publication and distribution of certain materials.</p>
","1669"
"What happens when a GPL licence is changed to a LGPL?","74","","<p>I'm using an open source library under GPL in a closed source project. If the libraries license changes from GPL to LGPL, does it mean the previous code (written when the library was GPL) should be made open source? </p>
","<p>The GPL is already an open source license.</p>

<p>But if you relicense a project (and a license change from GPL to LGPL <a href=""https://opensource.stackexchange.com/questions/33/how-to-relicense-a-project"">needs the permission of all contributors</a>, I assume that this is given) does not change the license on the old code. So the previous code is still available under the GPL, nothing changes in that regard.</p>
","73"
"Am I allowed to make use of parts of the codebase of a library that is licensed under LGPL (v2.1)","73","","<p>For a <em>game engine</em> I am writing, I am planning to use a heavily cut down and thoroughly modified version of the <em>Java</em> logging library <a href=""http://logback.qos.ch/"" rel=""nofollow"">logback</a>. Basically I am using their code for lookups and instantiation of new loggers (so, maybe some 5% tops of the code, not that it matters).</p>

<p>Q: <strong>What does this mean for my engine; What does the LGPL license force me to do?</strong></p>

<p>Addendum:</p>

<ul>
<li>I am not native speaker and hence have issues understanding all that legal mumbo-jumbo which forms the license.</li>
<li>The question also is specifically about <a href=""http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"" rel=""nofollow"">LGPL v2.1</a>, as that is the license of the library I abuse.</li>
</ul>

<hr>

<p><em>Addendum2:</em> to clear some confusion; the phrase '<em>... 5% ... not that it matters</em>', refers to the fact that it does not matter how much or how little code it is in the end, it <strong>still</strong> is licensed code and hemce has to be treated in such a matter.</p>
","<p>The license terms of the LGPL license effectively distinguish two different models:</p>

<ol>
<li>You make changes to the LGPL code, or you copy portions of the LGPL licensed code into your own project. In this case, the license requires you to make your code available under the LGPL or GPL license as a library that can be used by other programs.</li>
<li>You use the LGPL licensed library in your application by linking to it. In this case, you must provide a way for your users to replace the library, but otherwise you are free to choose your license terms.<br>
Providing a way to replace the library is easiest if you link dynamically to it or of you publish your code under an open source license.</li>
</ol>

<hr>

<p>In your case, your best option is to create a library of the cut-down version of logback and publish that under the LGPL. Then your game can link to this new library for its logging.</p>
","1843"
"CC BY-SA – Do I need to open source my app if I don’t really distribute it?","73","","<p>I started developing a commercial web application that uses spaCy – a MIT-licensed library for natural language processing. In order to use this library, one needs to initialize a processing pipeline by pointing to one of the language models – data files distributed under the CC BY-SA-3.0 license. The model, in an unaltered form, gets loaded and then the application interacts with the library through its API, not directly with the model.</p>

<p>I’ve read the license (CC BY-SA-3.0) but it’s hard for me to determine whether my application should be considered a derivative work or not. On the one hand the application only indirectly uses the model (doesn’t improve/modify it in any way), but on the other hand, such a model is indispensable for the application to work.</p>

<p>But what’s crucial for me is this. Let’s assume that my application constitutes a derivative work. Does this mean that I have to release the application’s source code under the CC BY-SA-3.0 license, even though the application runs only on my servers and users can only interact with it through a computer network? Does it work similarly to the AGPL?</p>

<p>I really appreciate any help you can provide.</p>
","<p>To answer the last question first, interaction with a program using a remote connection is <em>not</em> considered distribution of the program and will not invoke the terms of the license unless the license explicitly states otherwise.<br>
To my knowledge, only the AGPL has such terms. As such terms are specifically designed for software, the CC-BY-SA licence won't have them, as it is not recommended for software. </p>

<p>With regards to the other question, if the software can load any correctly formed language file and not just the CC-BY-SA ones, then it can be seen that the software can't be a derived work of the language file.<br>
In general, a program and the files it reads are considered to be independent works for copyright. </p>
","5831"
"Copyrighting open source code using a business name vs as an individual","73","","<p>I'm the only developer working on an open source project (MPL v2.0 license, not sure if it does matter) and I have a single-person LLC I use for some consulting works.</p>

<p>What are the pros and cons of copyrighting the code under my own name vs the name of the company?</p>
","<p>Given that you are the sole owner of your LLC, and depending on how liberal the open source license is, the difference isn't meaningful.</p>

<p><strong>Tax</strong></p>

<p>If the code is developed for the LLC as a work-for-hire, that is your LLC pays yourself, it may be classed as an R&amp;D expense, which may be advantageous to do. Consult your local tax laws or your accountant. If you write the code yourself, your LLC will just be using a free resource, which has no tax implications.</p>

<p><strong>Business ownership transfer</strong></p>

<p>If you ever sell your LLC, or it goes bankrupt, and the LLC is the copyright holder, the code is considered the LLC's property and will be transferred along with it, which effectively means you lose ownership of your code.</p>

<p><strong>Rights</strong></p>

<p>There are certain rights that copyright holders have that typically aren't granted by open source licenses, like <a href=""https://opensource.stackexchange.com/q/33/175"">relicensing</a>, or <a href=""https://opensource.stackexchange.com/q/270/175"">closing the project later</a>. If you ever need to do something not allowed by the license, technically one of the entities (you, your LLC) needs to give permission to the other. It doesn't really matter unless you sue yourself, say for insurance purposes.</p>

<p><strong>Expiration</strong></p>

<p>The copyright expiration is different depending on whether the author is human or not (anonymous, pseudonymous, work-for-hire). <a href=""https://en.wikipedia.org/wiki/List_of_countries%27_copyright_lengths"" rel=""nofollow noreferrer"">Typically, and for the US</a>, it's author's life + 70 years, or 95 years from publication or 120 years from creation whichever is shorter. Given that these terms are stupendously long the difference isn't meaningful.</p>
","4134"
"Create an OAuth2.0 Application that doesn't violate Google TOS?","73","","<p>I've almost completed a Blender Add-on that allows a user to upload a video to Youtube. It has just come to my attention that embedding your app's credentials from the <code>client_secrets.json</code> file into an open source application <a href=""https://developers.googleblog.com/2014/11/subject-changes-to-google-apis-terms-of.html"" rel=""nofollow noreferrer"">violates the Google TOS</a></p>

<blockquote>
  <p>Asking developers to make reasonable efforts to keep their private keys private and not embed them in open source projects.</p>
</blockquote>

<p>The reason behind this according to an inside source is to prevent <a href=""https://stackoverflow.com/a/28109307/1956178"">impersonating a trusted app</a> by using its credentials.</p>

<blockquote>
  <p>You are, however, allowing them to “impersonate” you in Google’s eyes. [...] Moreover, you’ve been granted whitelisted access to APIs that are not available to the general public (and, in all likelihood required agreeing to a separate Terms of Service) and are sharing access to anyone who wants it. There is no doubt that is a violation of those terms. </p>
</blockquote>

<p>I feel that ""APIs that are not available to the general public"" isn't quite true since I could make a new account just for this in 3 minutes.</p>

<p>There is an existing python program <code>youtube-upload</code> that is included in pip and it ships with a <code>client_secrets.json</code>. This makes me question how seriously this is enforced.</p>

<p>Looking at some larger OSS projects LibreOffice and OpenShot both ask the user for a username and password to authenticate. While that works for them, no one including myself would trust a small-time application with their login info.</p>

<hr>

<p>The ""official"" answer seems to be to require the end user to create a <code>client_secrets.json</code> file themselves. While I think the average Blender user would be capable/tolerant of handling that, how would less technically oriented applications do it?</p>

<p>I'm leaning towards initially prompting for a username and password with the option of using OAuth if they want to create and download a <code>client_secrets.json</code></p>

<h3>Edit</h3>

<p>I have continued to research this and was looking into logging in a user with a username and password. That functionality was called ClientLogin and was removed from the Youtube API in 2012. OpenShot's Youtube upload does not work for me when I tried it as it used ClientLogin.</p>

<p>So is there a way to ship an open source application that uses the Youtube API without the need for a user to generate an API key? That seems like an unreasonable step for an average user.</p>
","<p>If you don't want to violate Google's terms of service, your options are either to include the key in binary-form only, or not include the key at all.</p>

<p>If you offered your source code without the API, you could possibly offer a built binary version of your application that does include the key. This would not violate Google's terms, but I find it questionable whether you could consider the no-key source code the ""corresponding source"" for the binary that does include the key. This is significant if you're using anyone else's copyleft code, since recipients will not be able to rebuild the binary application given your no-key source.<sup>1</sup> If you use permissive licensed code, there is no issue, since it allows you to keep modified source private anyway.</p>

<p>If you choose not to offer the key in binary format, there are two avenues that do not require you to share key at all:</p>

<ul>
<li><p>Make each user get their own key.</p></li>
<li><p>Stand up a private network service that holds your API key and acts as a gateway to the API itself. You could also offer the source code for this network service, and if people want to run their own copy of the service (e..g, to make modifications, or to protect their privacy), I think it's very reasonable to have them get their own API key as part of the setup steps.</p>

<p>This has the drawback of needing to pay for network infrastructure to run the network service, though there are plenty of VPS providers that will give you a low-power server with high quantity of network traffic for $5 per month or less, and you can use the server for multiple projects at the same time.</p></li>
</ul>

<p><sub>1. I leave open the possibility that a court might rule that the inclusion or exclusion of an arbitrary, non-copyrightable authentication string doesn't actually change the copyright-significant potion of a work, for the purposes of copyright law, so a copyright license might not be able to disallow this. Even if that were true, this could be outside the spirit of the GPL, though it seems a borderline case, especially when when considered in the context of an AGPL network service.</sub></p>
","6090"
"Creating a game based on a story licensed under CC BY-SA 3.0","73","","<p>Some of you may be familiar with the collaborative fiction site <a href=""http://scp-wiki.net/"" rel=""nofollow noreferrer"">SCP</a>. Their content is licensed under the CC BY-SA 3.0 license. Suppose I am trying to create a game based on this. Under the ShareAlike part of that license, I'd need to also license my game under the same license. However, I'm not very clear on what exactly the requirements would be for source code availability.</p>

<ol>
<li>Is creating a game based on this classified as a 'Derivative', therefore requring me to share under the same license? <br></li>
<li>If so, would my code need to be made open-source?</li>
</ol>

<p>Also, I feel I should add that the reason I'd like this to be closed-source is not to turn a profit, or anything of that kind, rather this is a game based on exploration, and I would like to avoid people trying to cheat that part of the game.</p>
","<p>For point #1, I'd say generally that yes, your game is a derivative, and would need to be licensed under CC-BY-SA 3.0 as well. Fictional characters are protected under copyright, and reuse of those characters in another work requires copyright permission as a derivative work. </p>

<p>However, for point #2: Creative Commons licenses are not ""software-aware"" as it were, and don't place requirements about alternate forms, like source code. (See <a href=""https://opensource.stackexchange.com/questions/1717/why-is-cc-by-sa-discouraged-for-code"">Why is CC BY-SA discouraged for code?</a>) Instead, <em>anything you choose to distribute</em> that is a derivative must be CC-BY-SA, but the license does not require you to distribute anything you don't want to. This is different from the GNU GPL, which explicitly requires you to distribute source code whenever you distribute a binary.</p>

<p>Consider, alanogously, if you were shooting an SCP movie. The movie you release to the public would need to be under CC-BY-SA, but you would not need to release whatever movie-editing ""source material"" went into producing the final cut of the film. (By contrast, if the original work was under the GPL, then the GPL <em>would</em> require you to release the version of your movie that is the ""preferred form for making modifications"".)</p>
","5351"
"GPL in a runtime environment","73","","<p>I'm making a runtime environment for Squirrel that includes embedded functions for basic I/O needed in games. The idea is that it would just run Squirrel files (<code>.nut</code> or <code>.sq</code>) or its own format for multiple packed scripts. Basically, the RE contains all the functions for drawing, getting input, handling sound, loading resources, etc., but doesn't actually do anything on its own. The Squirrel scripts have all the game logic and tell the RE what to do.</p>

<p>So far, the code is available under GPL3, but someone who recently got interested in the project tells me that GPL3 is a bad idea because it'll force anyone who makes a game with it to open source their game as well. This confuses me, because unless they're actually modifying the runtime itself to make a game out of it, why would this happen? The scripts it runs aren't actually part of the runtime, so shouldn't whoever writes them be able to determine their own license for it?</p>

<p>The way I see it, since the Squirrel scripts aren't actually part of the runtime, and could possibly even be run by another program altogether, assuming they used the same names in their embedded functions, then the license of the runtime shouldn't apply to the programs it's being used to run. Of course, I don't know if this is right or not, which is why I'm here.</p>

<p>If I make a runtime with a GPL license, does that license apply to programs that are intended to be run in it but not actually a part of it? Or are they separate and people making games with it shouldn't worry?</p>

<p>Also, in case anyone is wondering, the libraries I'm building it with are all either X11/MIT or ZLib licensed.</p>

<p><a href=""http://squirrel-lang.org/"" rel=""nofollow noreferrer"">Squirrel</a> is a scripting language. It's been used in games like Portal 2, Left 4 Dead, GTA 4 and 5, and a few others I can't remember off the top of my head. Someone else made a game development kit for it, too, but it's specifically designed for Android/iOS. I want to make one that's for PC.</p>
","<p>Generally speaking, the GPL license does not necessarily apply to the <em>input</em> of a program. For example, the GNU <code>bash</code> interpreter is GPLv3 licensed, but <code>bash</code> scripts are not all GPLv3 licensed, and some people make proprietary scripts.</p>

<p>However, it could be a gray area if your program and its input are <em>intimately</em> coupled (and that notion is not easy to define). You might need to ask a lawyer (which I am not).</p>

<p>Look at the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#IfInterpreterIsGPL"" rel=""noreferrer"">GPL FAQ question</a> :</p>

<blockquote>
  <p>If a programming language interpreter is released under the GPL, does that mean programs written to be interpreted by it must be under GPL-compatible licenses?</p>
</blockquote>

<p>And the same FAQ tells</p>

<blockquote>
  <p>When the interpreter just interprets a language, the answer is no. </p>
</blockquote>

<p>But read more about that issue. If there are <em>several</em> interpreters of Squirrel you are on the safe side.</p>

<p>PS. I have <em>absolutely no idea</em> about what Squirrel is.</p>
","5765"
"How to write additional permission for LGPLv3 license","73","","<p>I’m planning to release my code under LGPLv3 license but I can’t find answers to several question.</p>

<h2>Let me describe my situation:</h2>

<ol>
<li>I’ve created library and want to use LGPL v3 license for this code;</li>
<li>Library has references to proprietary packages (it has dependencies from packages which were installed to the library): a) EPiServer.CMS.Core package (<a href=""http://nuget.episerver.com/en/OtherPages/Package/?packageId=EPiServer.CMS.Core&amp;packageVersion=9.0.0"" rel=""nofollow noreferrer"">http://nuget.episerver.com/en/OtherPages/Package/?packageId=EPiServer.CMS.Core&amp;packageVersion=9.0.0</a>). License for this package is <a href=""https://www.episerver.com/eula/"" rel=""nofollow noreferrer"">https://www.episerver.com/eula/</a>;  b) EPiServer.CMS.Core package has dependency from Microsoft.AspNet.Mvc (<a href=""https://www.nuget.org/packages/Microsoft.AspNet.Mvc/"" rel=""nofollow noreferrer"">https://www.nuget.org/packages/Microsoft.AspNet.Mvc/</a> ) </li>
<li>My library can be linked only with EPiServer application (proprietary product) and can’t work as independent application. So every  EPiServer application (with my library or without it) owner has to buy license from EPiServer;</li>
<li>My library provides additional functionality to EPiServer application and uses only public available API from proprietary packages;</li>
<li>Every user has possibility to get those proprietary packages from <a href=""https://www.nuget.org"" rel=""nofollow noreferrer"">https://www.nuget.org</a> and <a href=""http://nuget.episerver.com"" rel=""nofollow noreferrer"">http://nuget.episerver.com</a> </li>
</ol>

<p>According to FAQ (<a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#GPLIncompatibleLibs</a> ) I have to include Additional permission section to the license notice.</p>

<h2>I’ve created license notice with copyright disclaimer:</h2>

<blockquote>
  <p>Copyright 2017 Pavel Shumihai</p>
  
  <p>This file is part of Epi.Dds.Manager.</p>
  
  <p>Epi.Dds.Manager is free software: you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.</p>
  
  <p>Epi.Dds.Manager is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.</p>
  
  <p>You should have received a copy of the GNU Lesser General Public
  License along with Epi.Dds.Manager.  If not, see
  <a href=""http://www.gnu.org/licenses/"" rel=""nofollow noreferrer"">http://www.gnu.org/licenses/</a>.</p>
  
  <p>Additional permission under GNU General Public License version 3
  section 7</p>
  
  <p>If you modify this Program, or any covered work, by linking or
  combining it with EPiServer.CMS.Core 7.5.409 (or a modified version of
  that library), containing parts covered by the terms of  END USER
  LICENSE AGREEMENT FOR Episerver CMS, COMMERCE, FIND (ON-PREMISES), 
  RELATE AND SUPPLEMENTAL PRODUCTS, the licensors of this Program  grant
  you additional permission to convey the resulting work.</p>
</blockquote>

<h2>I have several questions according to this text:</h2>

<ol>
<li>I can’t provide source code to EPiServer and MVC libraries. FAQ
contains following information: “If not everybody can distribute
source for the libraries you intend to link with, you should remove
the text in braces; otherwise, just remove the braces themselves.”
Does it relate to the next text: “{Corresponding Source for a
non-source form of such a combination shall include the source code
for the parts of [name of library] used as well as that of the
covered work.}”?</li>
<li>Should I insert ‘Lesser’ word before General in the section header:
‘Additional permission under GNU General Public License version 3
section 7’? I’ve found information about similar situation in “The
license notices” part of document which you can find by
<a href=""https://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-howto.html</a> (quote: When using the
Lesser GPL, insert the word “Lesser” before “General” in all three
places.)</li>
<li>My library depends from 'EPiServer.CMS.Core' and 'EPiServer.CMS.Core'
depends from 'Microsoft.AspNet.Mvc'. Should I include additional
permissions only to direct dependency ('EPiServer.CMS.Core' in my
case) or for all children dependencies as well ('Microsoft.AspNet.Mvc'
in my case)?</li>
<li>Should I do something with situation when I allows to use my library
with 'EPiServer.CMS.Core' and that library can be used with different
versions of MVC library? (e.g. Developer can use
'Microsoft.AspNet.Mvc 4.0.30506' with MS-EULA License and
'Microsoft.AspNet.Mvc 5.2.3' with MS-.NET-Library-JS License)</li>
<li>Should I include library version to the additional permission?
(7.5.409 in my situation)</li>
<li>Does ‘or a modified version of that library’ from license notice
allows to link 'EPiServer.CMS.Core' 9.0 version?</li>
</ol>
","<p>I've discussed this situation with senior analyst from 'Open Source Vulnerability department' and she described that I was looking at it from the wrong side. Library owner/developer shouldn't worry about resolving possible conflicts with licenses which will be selected for products with this library. Developer should just select license which he wants.</p>

<h2>Correct flow to resolve and select license:</h2>

<ul>
<li>Developer creates library for proprietary soft. Library can use API
from linked proprietary libraries (EPiServer and Microsoft in my
situation). </li>
<li>Code owner select license for his code/library (LGPLv3) and should
add notes to the README file that the library uses proprietary products
(EPiServer);</li>
<li>Proprietary libraries must be dynamically linked (<strong>not statically</strong> by including code) to LGPLv3 library;</li>
<li>Anyone who is developing application by using proprietary technology
(EPiServer) can use such library but they must resolve possible
conflicts with licenses (e.g. they have to buy license for EPiServer).</li>
<li>Application owner have to select appropriate license for the end
product which won't violates other licenses (LGPLv3, EPiServer and
Microsoft licenses).</li>
</ul>

<p>It's possible because LGPLv3 was designed specifically for shared components (like libraries) and it can't be used for application (I could be wrong). Also library can't work without application so the application owner have to buy license for the proprietary products</p>
","6421"
"What value would open source news have?","73","","<p>The idea of open source (everyone can change and redistribute) can be applied to many things. One could imagine open source news. But would that make sense? After all, news gets old after a few hours, nobody is interested in it anymore. So there is in practice no time to make use of it being open source.</p>

<p>So are scenarios that would make it useful to open source news?</p>
","<p>Lawrence Lessig in his book <a href=""http://www.free-culture.cc/freeculture.pdf""><em>Free Culture</em></a> talks about the effect of all-rights-reserved copyright on news broadcasts:</p>

<blockquote>
  <p>We take it for granted that we can go back to see what we remember
  reading. Think about newspapers. If you wanted to study the reaction
  of your hometown newspaper to the race riots in Watts in 1965,
  or to Bull Connor’s water cannon in 1963, you could go to your public
  library and look at the newspapers. Those papers probably exist on
  microfiche. If you’re lucky, they exist in paper, too. Either way, you
  are free, using a library, to go back and remember—not just what it is
  convenient to remember, but remember something close to the truth.</p>
  
  <p>...</p>
  
  <p>Television, it turns out, is even more
  ephemeral than the Internet.While much of twentieth-century culture
  was constructed through television, only a tiny proportion of that culture
  is available for anyone to see today. Three hours of news are recorded
  each evening by Vanderbilt University—thanks to a specific
  exemption in the copyright law. That content is indexed, and is available
  to scholars for a very low fee. “But other than that, [television] is almost
  unavailable,” Kahle told me. “If you were Barbara Walters you could get
  access to [the archives], but if you are just a graduate student?”</p>
  
  <p>...</p>
  
  <p>The same is generally true about television. Television broadcasts
  were originally not copyrighted—there was no way to capture the
  broadcasts, so there was no fear of “theft.” But as technology enabled
  capturing, broadcasters relied increasingly upon the law. The law required
  they make a copy of each broadcast for the work to be “copyrighted.”
  But those copies were simply kept by the broadcasters. No
  library had any right to them; the government didn’t demand them.
  The content of this part of American culture is practically invisible to
  anyone who would look. (p109-111)</p>
</blockquote>

<p>When you say ""After all news get old after a few hours, nobody is interested in them anymore"" that is a very short-sighted perspective. Often we don't know what will be significant in later decades and centuries. The first local campaign speech of a future Prime Minister or President may well have been broadcast, but if the rights holders restrict its archiving then in thirty years' time it may be impossible to find and view.</p>

<p>And that's for news items that eventually turn out to be significant. There are so many more broadcasts that will be important, not for the events they show, but as a window into life in a particular place at a particular time. In 100 years time how many of the interviews with regular American citizens talking about the Ferguson unrest will still be accessible?</p>

<p>We'll never be able to archive everything, but we have the technology to archive a lot. We don't know what our grandchildren will want to rewatch, so we should try to archive as much as we can. Commercial broadcasters may never allow that, but we should at least demand from our public broadcasters the freedom to archive their new broadcasts.</p>
","1195"
"When is it necessary for an open source project to be backed by an organization","73","","<p>Open source projects are backed by many people and organisations, for example Debian is backed by Developers and Ubuntu is backed by Canonical.</p>

<p>I would like to ask when is it necessary for an open source project to be backed by an organisation?</p>
","<p>You can read the whole thing or go straight to the point (look for a TL;DR) </p>

<p>According to me, here's a possible timeline for an Open Source project.</p>

<p><strong>The Idea</strong><br>
You think the world needs something that software can provide.</p>

<p><strong>The initial commits</strong><br>
You start off with a Git/SVN/Bzr/Hg repository and start pushing some code to it. You release v0.1 and show it off on Hacker News.</p>

<p><strong>Userbase development</strong><br>
Some people see that your software is really helpful, and start using it. It gets used as a library over 10 more projects (or you get a userbase of 1k).</p>

<p><strong>Contributors!</strong><br>
Someone feels that your project is awesome and can be improved upon further. He sends you a pull request. More developers follow.</p>

<p><strong>Org development</strong><br>
Over a few months you have several developers working on the project and its derivatives. You all decide to call yourself <em>Organisation X</em>.</p>

<p><strong>Growth</strong><br>
OrgX has grown - both in terms of number of developers and the scope of software it produces. There are 15-20 developers who were there from the start and care for the org. There are new developers each day wanting to become contributors - to get a feel of Open Source or to develop their skills or to simply develop the application they love.</p>

<p><strong>Funds ahoy!</strong>    </p>

<h1>TL;DR</h1>

<p>As you grow, you need funds for various purposes:</p>

<ul>
<li>To reward developers</li>
<li>To have meetups - not all developers live at the same place</li>
<li>To increase your brand value - users (not necessarily developers) choose products by their brand value. To actually increase that, you need to be an active promoter by sending off swag, ads, etc.</li>
<li>To maintain servers - as you grow in userbase, your hits increase and you need bigger servers to maintain the cost.</li>
</ul>

<p>And many more.</p>

<p>Once in a while donation, kickstarter campaigns are good, but not enough. Hence, at times you <em>need</em> an organisation to back you. The organisation provides you with funds, visibility and sometimes infrastructure, and you increase the org's visibility (and make them less evil).</p>

<p>So, <em>this</em> is the time when it's necessary for an open source project/organisation to be backed.</p>
","816"
"Applying GNU GPL and messages printed by a program","72","","<p>The full text of GNU GPL includes this advice:</p>

<blockquote>
  <p>If you develop a new program, and you want it to be of the greatest
  possible use to the public, the best way to achieve this is to make it
  free software which everyone can redistribute and change under these
  terms.</p>
  
  <p>To do so, attach the following notices to the program. It is safest to
  attach them to the start of each source file to most effectively state
  the exclusion of warranty; and each file should have at least the
  “copyright” line and a pointer to where the full notice is found.</p>

<pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
</code></pre>
  
  <p>Also add information on how to contact you by electronic and paper
  mail.</p>
  
  <p>If the program does terminal interaction, make it output a short
  notice like this when it starts in an interactive mode:</p>

<pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;
This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show c' for details.
</code></pre>
  
  <p>The hypothetical commands <code>show w' and</code>show c' should show the
  appropriate parts of the General Public License. Of course, your
  program's commands might be different; for a GUI interface, you would
  use an “about box”.</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/gpl.html"" rel=""nofollow"">https://www.gnu.org/licenses/gpl.html</a></p>

<p>I'm publishing my program's code on Github, with the license included in its root directory in a <code>LICENSE</code> file, is including these messages in every source file and making them printable via a command line option mandatory for my program to be licensed under GNU GPL?</p>
","<p>No, this is just a recommendation.</p>

<p>Just to be clear: without a license default copyright laws apply and people are not authorized to do much with your software. Thus, even if the license is not obvious to someone it is not theoretically risky for you as they are supposed either to look for a license or go see elsewhere.</p>

<p>The problem is that on Github, most people do not understand copyright law and tend to assume that a file put there is in the public domain. Thus adding a notice to each file would remind beyond doubt to each programmer reading it that this is free software but not public domain and that they are limited in what they can do with it.</p>

<p>The notice in the terminal is less important because, as the text of the license reminds, acceptance is not necessary to merely use a copy. See section 9 of the GPL 3.0:</p>

<blockquote>
  <p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>
</blockquote>

<p>Or section 5 of the GPL 2.0 (which reads easier IMO):</p>

<blockquote>
  <p>You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. </p>
</blockquote>

<p>Note that the binary distribution should still carry the text of the GPL <em>somewhere</em>.</p>
","4352"
"Copyright assignments in Germany","72","","<p>When contributing to some of their projects, the FSF requires you to assign the copyright to your work to the FSF. As I'm German, I'm interested in whether this is compatible with German law.</p>

<p>German copyright laws states (§ 29 Urheberrechtsgesetz):</p>

<blockquote>
  <p>(1) Das Urheberrecht ist nicht übertragbar, es sei denn, es wird in
  Erfüllung einer Verfügung von Todes wegen oder an Miterben im Wege der
  Erbauseinandersetzung übertragen.</p>
  
  <p>(2) Zulässig sind die Einräumung von Nutzungsrechten (§ 31),
  schuldrechtliche Einwilligungen und Vereinbarungen zu
  Verwertungsrechten sowie die in § 39 geregelten Rechtsgeschäfte über
  Urheberpersönlichkeitsrechte.</p>
</blockquote>

<p>This roughly translates to:</p>

<blockquote>
  <p>(1) The copyright is nontransferable, except via inheritance.</p>
  
  <p>(2) Concession of usage rights, agreements under the law of
  obligations, agreements to {utilization, exploitation}¹, and the legal
  transactions about personal copyright rights ruled by § 39 are
  permitted.</p>
</blockquote>

<p>§ 39 is:</p>

<blockquote>
  <p>(1) Der Inhaber eines Nutzungsrechts darf das Werk, dessen Titel oder
  Urheberbezeichnung (§ 10 Abs. 1) nicht ändern, wenn nichts anderes
  vereinbart ist.</p>
  
  <p>(2) Änderungen des Werkes und seines Titels, zu denen
  der Urheber seine Einwilligung nach Treu und Glauben nicht versagen
  kann, sind zulässig.</p>
</blockquote>

<p>It roughly translates to:</p>

<blockquote>
  <p>(1) The bearer of a usage right may not modify the work, its title, or
  author's designation unless agreed upon differently.</p>
  
  <p>(2) Modifications of the work and its title to which the author cannot
  deny agreement in good faith are permitted.</p>
</blockquote>

<p>So you cannot give your copyright away whilst still alive. And even if you die, you can only give it to people you can bequest stuff to.</p>

<p>Given this situation, does the FSF not accept contributions by Germans? Does it apply any legal trick? Does it still require copyright assignments, hoping to be able to enforce them in different countries, even though the German contributors were not actually legally able to give their copyright away?</p>

<p>One legal dodge I came up with is to just not tell the court or the entities they sue who the original author is, just that they got their copyright. But this would likely not work as the court or the entity they sue could request the copyright assignment signed by the author which states their name, letting the defendant know the author's nationality.</p>

<hr>

<p>¹ Idk how to translate this. It's a bit more than utilization. It's what media companies and publishers of books do with the songs, movies, or books they control.</p>
","<p>The <a href=""https://script-ed.org/article/drafting-options-contributor-agreements-free-open-source-software-assignment-nonexclusive-licence-legal-consequences-comparative-analysis-german-law/"" rel=""noreferrer"">article</a> ""Drafting Options for Contributor Agreements for Free and Open Source Software: Assignment, (Non)Exclusive Licence and Legal Consequences. A Comparative Analysis of German and US Law"" specifically deals with this topic.</p>

<p>The point is that copyright licenses and usage right can still be licensed in Germany with effects essentially similar:</p>

<blockquote>
  <p>Instead of assignments, German law offers a number of ways an author or the owner of exclusive rights may authorize others to use and exploit a specific work: the granting of usage rights pursuant to s 31 of the Copyright Act and merely contractual agreements (see s 29 para 2 of the Copyright Act).</p>
</blockquote>

<p>Beyond this I strongly encourage to read the full paper which covers the topic at great length.</p>
","6196"
"Github with temporary code under 'GNU General Public License'","72","","<p>I am writing a software project, and created a repository for it on Github for backup reasons (I don't actually want to publish it).</p>

<p>I began doing a little refactoring, and as an experiment added some open source pieces of code I found (I later intend to replace that code with my own code).</p>

<p>Now, the code I'm experimenting with has a GNU General Public License, and my project currently has no licensing at all (as it is still ""under construction""). As I read on the Internet, no license means ""fully copyrighted"".</p>

<p>So, this seems like a violation of the GNU General Public License. Isn't it? </p>

<p>I don't really know what to do now. Can I still push my commits to Github? </p>

<p>And if I don't push them and keep them on my PC until I replace the temporary code pieces. Is it legal to do so?</p>
","<p>Firstly, <a href=""https://opensource.stackexchange.com/q/1150/458"">we have already addressed</a> the question of what licence applies to GitHub-hosted content in the absence of a specific licence declaration, and the prevailing (though not the only) opinion seems to be that </p>

<blockquote>
  <p>if you publish your source code in a public repository on GitHub, you have accepted the Terms of Service which do allow other GitHub users some rights. Specifically, you allow others to view and fork your repository.</p>
</blockquote>

<p>When you say ""<em>fully copyrighted</em>"", I presume you mean ""<em>all rights reserved</em>"" (even GPL'ed code is fully-copyrighted, that's why the GPL works).  But it's clear that some rights <em>are</em> given away by the mere act of publishing on GitHub.  In that sense, GitHub is <em>not</em> a very good backup medium, and you should make better arrangements immediately.</p>

<p>Is that enough to comply with the GPL?  You don't say which version applied to the code you're working on, but let's assume it's v3.  Section 5(c) of <a href=""http://www.gnu.org/licenses/gpl.html"" rel=""nofollow noreferrer"">GPLv3</a> says that you may convey modified source versions but</p>

<blockquote>
  <p>You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy.</p>
</blockquote>

<p>It also says that</p>

<blockquote>
  <p>To “convey” a work means any kind of propagation that enables other parties to make or receive copies.</p>
</blockquote>

<p>That given, and noting that IANAL/IANYL, putting a work on GitHub looks to me like conveying it, which means that you <strong>must</strong> license the work under GPLv3 (and comply with its other obligations).  If you do not convey your modified code, and instead you keep copies only on your own computer(s), and until you do convey it to some other party you may keep and tinker with it to your heart's content without any further obligations.  Similar arguments apply if the original code was licensed under GPLv2.</p>
","5002"
"How do I attribute authors if I don't know their real names?","72","","<p>I want to write an R package and release on <a href=""https://cran.r-project.org/"" rel=""nofollow noreferrer"">CRAN</a>. But I have concerns about <strong>legal issues:</strong> licensing and authorship/ownership.</p>

<p>Code of some functions in the package will be derived from or based on posts in websites like these:</p>

<p>A. <a href=""https://stackoverflow.com/questions/33288075/from-matlab-to-r-capture-named-fields-with-regular-expressions-to-a-dataframe"">this answer</a> and <a href=""https://gist.github.com/danielmarcelino/8209cfdf2cd993eeb1b3"" rel=""nofollow noreferrer"">this code</a> for function 1;<br>
B. <a href=""https://github.com/ropensci/plotly/issues/273#issuecomment-217982315"" rel=""nofollow noreferrer"">this comment</a> for several other functions.</p>

<p>What authors/contributors should I include in my R package as I only know nicknames of people who wrote the posts? </p>

<hr>

<p>A related question about what license this code comes under is <a href=""https://opensource.stackexchange.com/questions/3966/r-package-includes-code-based-on-answers-on-forum-websites-general-concerns-abo"">here</a>.</p>
","<p>Your question is:<br>
<strong>How do I attribute authors if I don't know their real names?</strong></p>

<p>I think this has wider applicability to just this case, so I'll attempt to answer with future visitors in mind. I'm also intentionally avoiding the issue of licensing but just focusing on author attribution.</p>

<hr>

<p>The first thing I would do in this case - although not necessarily required - is <strong>contact the author</strong> if possible, and ask how they would like to be attributed. Some may be happy to give you their full name, others may prefer their nickname, or others may even be happy to say '<a href=""http://www.wtfpl.net/"" rel=""nofollow"">do whatever you like!</a>'.</p>

<p>(When I post code snippets I've written, I'm always happy for it to be used in any way, but if people want to attribute me then that's awesome. I know many other SE users (not everybody though!) apply a similar attitude to their posts)</p>

<p>If you can't contact the authors or don't hear back from them, then - assuming you already have the implicit permission to use the code - I would <strong>attribute them based on their nickname, and include their profile URL</strong>.</p>

<p>This is still a suitable default method of attribution, as it unambiguously identifies the person (maybe even more so than their full name on its own, actually!). In the case of StackExchange, including the user URL is part of the <a href=""http://blog.stackoverflow.com/2009/06/attribution-required/"">attribution guidelines</a> (point 4) when including SE content on another website, and in any case, it allows a future user of the code to see who was behind it, easily locate the context of it, and possibly even contact the user. This would be suitable for both your StackOverflow and GitHub examples.</p>

<p>Of course, if a user then contacted you later and asked you to change the way you're attributing them, then you should follow that.</p>
","4021"
"Is it allowed to sign open source binaries?","72","","<p>I would like to deploy OpenSSL, curl and perhaps other libraries as shared libraries in my package. I am a little worried that the someone may replace them with his own and ""read"" all my data, therefore I thought perhaps signing them would be an idea.
Is this allowed?</p>

<p>P.S. I've read their licenses but there is no specific mention about this, so better to ask.</p>
","<p>A signature is a non-reversible (but verifiable) cryptographic transformation on some input data. Signatures are not copyrightable since</p>

<ol>
<li>they do not require any creativity to produce (their creation is completely mechanical) and they do not contain any creativity themselves (it's just an arbitrary numerical value), and</li>
<li>any copyrightable elements (indeed, any identifiable properties at all) from the input are completely and deliberately absent in the output of a signature algorithm (this is in contrast to compilation, which is purely mechanical but preserves the copyrightable, creative elements of its input)</li>
</ol>

<p>Thus, anything a copyright license has to say about what the copyright holder does and does not allow you to do does not pertain to the creation of a cryptographic signature. In copyright terms, its analogous to the creation of a cryptographic hash. (And in case you're wondering if copyright can disallow you from distributing a hash: no, it cannot; you are always allowed to do that under copyright.)</p>

<p>As for whether or not you are allow to <em>attach</em> a signature to a binary (as opposed to keeping it separate), that's perhaps a slightly different legal question. That might or might not create a derivative work (even though the signature itself is devoid of copyright, some jurisdictions might view such an alteration as a derivative), but even if it is, any open source or free software license will allow you to make and distribute such an alteration.</p>

<p>In case you are concerned that your production of a signature might misrepresent you as the author of the work, that's not what signatures are for. Signatures just say, ""Entity X had access to this work and asserts its contents are Y."" After a recipient verifies the cryptographic validity of the signature and sees that the contents of the file are indeed still Y, the recipient can be sure it has not been changed from how it looked when Entity X had it, even if it first passed through the hands of Entities Y and Z.</p>

<p>No one ever asserted that Entity X was the author of the file. We can only be sure that Entity X had access to the file and chose to make a cryptographically unforgeable assertion about the state of the file at that time.</p>
","5977"
"Is it possible to distribute source of gpl3 Android app with email?","72","","<p>Is it ok if I put an email address in ""About"" of application, and every user who asks for the source code emails me and I send him/her by email?</p>

<p>It’s an Android application and I will distribute it using the Play store and other similar stores.</p>
","<p>Technically it might be allowed, but <strong>only if</strong> you distribute your application by email. While email isn't a generally allowed form of source code distribution, using the same distribution method for both binaries and source is allowed. </p>

<p>The logic is simple: if you emailed the binaries, the customer obviously has email, so you may rely on further email distribution. You can't assume the user has email when he downloaded the binaries via a play store. </p>

<p>Note that it <em>is</em> valid to include the source code directly with the play store download. Also, <strong>extra</strong> download methods are always allowed: ""You may convey verbatim copies of the Program's source code as you receive it, <strong>in any medium</strong>"" [Emphasis mine]. Email isn't banned; it just cannot be the only method. </p>
","5453"
"Is the Mozilla Public License 2.0 compatible with the Google Chrome Web Store?","72","","<p>I am working on a Mozilla Firefox Add-on licensed under the <a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow"" title=""MPL-2.0"">MPL-2.0</a>, and just got asked by a user if I have a version for Google Chrome.  I'd like to say yes and accommodate this request.  However, before investing the time and energy to learn a new environment, or getting user hopes up prematurely, I need to know if the MPL-2.0 license is compatible with the Google Chrome Web Store Agreement or License or whatever they call it.  Although I just had found something which seemed pertinent, I was not sure if it was the right document, and I can't seem to easily find it again.</p>

<p>I am not the original creator of this add-on, but am in communication with the creator, who has given me full developer access on the AMO site, posting privileges on the Facebook page, and is likewise open-source aware and friendly, and supports my efforts to revive his project.</p>

<p>My primary objective is to develop this as free software for Mozilla Firefox, and leave behind code that others may learn from or contribute to.  My secondary interest is to expand platform coverage to other browsers to meet user needs.  My third wish would be to allow for possible monetization in the form of voluntary contributions of a user-selected amount with a developer-selected minimum that is reasonable (i.e. to cover cost of transaction and leave some behind).  Any donations would probably go to expansion of online presence or some incentive or compensation to others who provide a service outside my core area of expertise (i.e. legal fees - if any, hosting, graphic design, SEO, etc).</p>

<p>If not strictly compatible, can I expand my options with licensing flexibility?  I.e. if I can make the case to the creator and he agrees, perhaps dual-license the project, a separate license depending on the platform, etc.?</p>
","<p>If you refer to <a href=""https://developer.chrome.com/webstore/terms#license"" rel=""nofollow"">https://developer.chrome.com/webstore/terms#license</a> I cannot fathom a reason why MPL 2.0 or any open source license would not be OK.</p>

<p>You are basically granting Google some rights so that they can publish your app. The MPL allows this alright. </p>

<p>And in this agreement:</p>

<blockquote>
  <p>5.2 You grant to the user a non-exclusive, worldwide, and perpetual license to perform, display, and use the Products and any content contained in, accessed by, or transmitted through the Products in connection with Google Chrome. If you choose, you may include a separate end user license agreement (EULA) in your Product that will govern the user’s rights to the Products in lieu of the previous sentence.</p>
</blockquote>

<p>Which means that your ""EULA"" (cough, cough) will be the MPL.</p>

<p>Now if you are now comfy with all this, ask a question on <a href=""http://groups.google.com/a/chromium.org/group/chromium-apps/"" rel=""nofollow"">http://groups.google.com/a/chromium.org/group/chromium-apps/</a></p>

<p>/IANAL /TINLA</p>
","2885"
"License for Python module derived from standard library module","72","","<p>I'm creating a short module, which is directly based on the <code>netrc</code> module in the Python standard library. It's the same module, with some alterations and extensions.</p>

<p>Is my understanding correct that I need to include all the default Python licenses? The PSF one, the BEOPEN one (for Python 2.0), the CNRI one (Python 1.6.1) and the CWI one (versions 0.9.0 to 1.2).<br>
And that the new module is automatically licensed under the standard PSF license? Or is there a way to relicense the module for derivative works, while keeping the old licenses (the four above) with the project?</p>

<p>I used the original module from the Python 3.5.2 source, so I assume it would have to include this exact license version. As seen here: <a href=""https://docs.python.org/3.5/license.html"">https://docs.python.org/3.5/license.html</a></p>
","<blockquote>
  <p>Is my understanding correct that I need to include all the default Python licenses? The PSF one, the BEOPEN one (for Python 2.0), the CNRI one (Python 1.6.1) and the CWI one (versions 0.9.0 to 1.2).</p>
</blockquote>

<p>Yes. The text is unfortunately a rather monolithic big text. See <a href=""https://enterprise.dejacode.com/license_library/Demo/python/#license-text"" rel=""nofollow"">https://enterprise.dejacode.com/license_library/Demo/python/#license-text</a> </p>

<p>The license states in section 2.:</p>

<pre><code>provided, however, that PSF's  License Agreement and PSF's notice of
copyright, i.e., ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006
Python Software Foundation; All Rights Reserved"" are retained in Python
alone or in any derivative version prepared by Licensee. 
</code></pre>

<blockquote>
  <p>And that the new module is automatically licensed under the standard PSF license? </p>
</blockquote>

<p>The PSF ""licenses"" are a tad on the complicated side so these licenses would apply IMHO and may likely not be ""sub-licensable"". For instance in section 2. of the BEOPEN sub-section:</p>

<pre><code>however, that the BeOpen Python License is retained in the 
Software, alone or in any derivative version prepared by Licensee. 
</code></pre>

<blockquote>
  <p>Or is there a way to relicense the module for derivative works, while keeping the old licenses (the four above) with the project?</p>
</blockquote>

<p>Possibly, though that would not be the right thing to do IMHO: when forking I prefer keeping the original licenses as-is.   Based on the text above I would tend to say that you cannot re-license using another license.</p>
","4336"
"Should I archive/delete old projects of questionable quality","72","","<p>I have some old projects that I personally consider close to worthless at this stage, if there's any user-base they are likely to have their own forks and while there's some nifty tricks in them the majority of the project is unsuitable for learning.</p>

<p>I've no longer got any intention of continuing working on these projects and I've got my own archive of them, so I'm wondering, for the sake of the community, what should I do with them?</p>
","<p>If you remove those projects: fine, that's your decision.</p>

<p>If you don't remove them: make sure you mark them in the sense that you add a visible note saying ""THIS PROJECT IS NO LONGER SUPPORTED"", so that a visitor who stumbles upon your code knows that he's spending time on a dead project when he decides to use your code (he can have very good reasons to do so, for instance if he wants to revive the project).</p>

<p>Not removing your code can make sense if you ever intend to revisit your project. You never know what happens with your own archives (crashed disk drives, DVDs that are no longer legible,...) Keeping the code where it is now, can make sense.</p>

<p>Not removing your code can result in you being contacted about that code. For instance: I once made the mistake to add my phone number on a tutorial page (which was very stupid of me). Years after the project was discontinued, people still called me for support. If you live in Europe and people call you from the US during their business hours, this is a pain. Changing your phone number is the only option you have in that case. The same goes for mail addresses: make sure that you remove your priority mail address because people are going to contact you when they think they need your code, when they've tried it and when it doesn't work for them.</p>

<p>Finally: the internet never forgets. Even if you remove your project, there is a chance that other copies of your code are still out there somewhere. Again: I once left my phone number on a tutorial page, and even after I removed that page, people still called me because the page was copied on another site.</p>
","228"
"GPL library in an open source plugin in an open source application using a commercial plugin","71","","<p>I have developed an application, a commercial plugin, and an open source plugin, each part distributed separately. The application dynamically loads each plugin, and function calls are bidirectional. My open source plugin will statically link the library I decide to use, and I am considering one licensed under the GPL. Here is a diagram of the relations.</p>

<pre><code>            Application (MIT)
             +             +
             |             |
             |             |
             +             +
Plugin (commercial)   Plugin (MIT)
                           +
                           |
                           +
                      Library (GPL)
</code></pre>

<p>My gut feeling is that this violates the GPL, because the application <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLPluginsInNF"" rel=""noreferrer"">""forms a single program""</a> with the commercial plugin and thus the ""combination of the GPL-covered plug-in with the non-free main program would violate the GPL"". But who violates it? Are users violating the GPL upon loading the GPL library along with the MIT plugin? Suppose different people develop each part---does the commercial plugin developer violate the GPL, even though they have no knowledge of the MIT plugin, perhaps because it was not developed yet? Does the MIT plugin developer violate the GPL, simply because a commercial plugin exists, despite that MIT is compatible with GPL?</p>
","<blockquote>
  <p>My gut feeling is that this violates the GPL, because the application ""forms a single program"" with the commercial plugin and thus the ""combination of the GPL-covered plug-in with the non-free main program would violate the GPL"".</p>
</blockquote>

<p>It depends what you mean when you say <em>this</em> violates the GPL.  Creating such a system does not violate the GPL -- you can freely use software licensed to you under the GPL to create proprietary software.  That's one aspect of freedom.  The licensing issue only arises when you then want to <em>distribute</em> the result.</p>

<blockquote>
  <p>But who violates it? Are users violating the GPL upon loading the GPL library along with the MIT plugin?</p>
</blockquote>

<p>That is indeed the crux of the question.  Again, however, it is not forming a work combining GPL and proprietary code that violates the GPL, so end users who only load both plugins into the program do not thereby violate the GPL.</p>

<blockquote>
  <p>Suppose different people develop each part---does the commercial plugin developer violate the GPL, even though they have no knowledge of the MIT plugin, perhaps because it was not developed yet? Does the MIT plugin developer violate the GPL, simply because a commercial plugin exists, despite that MIT is compatible with GPL?</p>
</blockquote>

<p>IANAL, but I am fairly confident that one independent group's actions in developing a plugin for your software does not place any obligations on you or on other independent plugin developers, regardless of the license under which any of the independent groups distribute their software.  There are still some ways you might run into trouble, however, such as</p>

<ul>
<li><p>one or more of the plugin-developer groups are not really independent of you or of each other.  If there is any kind of agency, sponsorship, or other special relationship there then at best the situation is shady.</p></li>
<li><p>your own group (re)distributes one or more of the plugins, whether together with or separately from the main package.  That might be construed as distributing the combined work, which would be a GPL violation if the combination is not licensed in a GPL-compatible way.</p></li>
<li><p>your licensees need to obtain one or both plugins in order to use your software for its ordinary purposes.  In that case it really is a combined work, and attempting to avoid licensing obligations via distribution tricks is at best unethical.  On the other hand, this would also suggest that there is indeed some kind of special relationship between you and the other groups involved, as discussed earlier.</p></li>
</ul>

<p>There are likely other potential pitfalls.</p>
","4852"
"GPLv3 With Section 7 Exception Linked to LGPLv3","71","","<p>As a follow up from <a href=""https://opensource.stackexchange.com/q/2233/3570"">GPL V3 with OpenSSL Exception</a>, I'm curious about linking an LGPLv3 project with a GPLv3 project that has a special exception for OpenSSL. In the answer to the aforementioned question, it was stated:</p>

<blockquote>
  <p>Note, however, that you can only add exceptions to work for which you
  have copyright control. If you want to include a third-party
  GPL-licensed library in your project, you cannot make that library
  adopt the exceptions present in your project.</p>
</blockquote>

<p>This makes sense, obviously I can't and shouldn't modify the License for another person's copyright. That being said, I'm curious if I could link a LGPLv3 license with a GPLv3 license that is modified with exceptions? I suppose a simple way to answer this would be to check for compatibility between OpenSSL and LGPLv3. Thus far I've found nothing, so I've posted here. Will update with any new information.</p>
","<p>I realized after posting this question that, due to how permissive the LGPLv3 is, this was probably a non-issue. However, I still asked the FSF for official comment, and I received the following response:</p>

<blockquote>
  <p>Once you've added the exception, you cannot link to other GPLv3
  software which do not carry such an exception. If this wasn't the case
  it would be trivial to circumvent the terms of the GPL for providing
  the complete corresponding source code for a work by just writing a
  trivial piece of bridge/wrapper/shim code, add an exception to that,
  and then link to anything you wanted through it.</p>
  
  <p>However, LGPLv3 licensed code already has a broad exception to its
  terms and shouldn't be an issue as long as you abide by the terms of
  the license.</p>
  
  <p>I hope this is of help.</p>
  
  <p>P.S. I don't know if it's relevant in your case, but the FSF
  recommends using GNUTLS instead of OpenSSL in software you write.</p>
  
  <p>Sincerely,</p>
  
  <p>Donald R. Robertson, III,<br>
  J.D. Copyright &amp; Licensing Associate 
  Free Software Foundation<br>
  51 Franklin Street, Fifth Floor<br>
  Boston, MA 02110, USA</p>
</blockquote>

<p>So there you have it, there's no concern with GPLv3 exceptions conflicting with the LGPLv3.</p>
","2495"
"Is there any way to assert that a source code correspond to a compiled code?","71","","<p>When using a program that was compiled from open source code by a 3rd party and not by yourself directly, how is it possible to check that the binary program is well built against an exact source code version ? Or perhaps it's just impossible and you have to trust the 3rd party compilation.</p>
","<p>The naive answer is, of course, to build it yourself and verify that your built binary is identical to the binary supplied by the other party.</p>

<p>So much for the theory. In practice, this can be tremendously difficult, because a body of source code can be validly compiled into an unbounded number of valid binaries, influenced by what compiler you're using, what compiler options you use, what versions of supporting system libraries you have, etc. One hands-on account of recreating binaries from source is Jos van den Oever's article ""<a href=""https://blogs.kde.org/2013/06/19/really-source-code-software"" rel=""nofollow"">Is that really the source code for this software?</a>"", which compares self-built binaries with binaries from the repositories of popular GNU/Linux distributions. Some binaries were massively different, and even binaries that were almost identical still had differing time stamps, differing function offset values, and varying levels of debug code.</p>

<p>LWN.com also has an excellent summary by Jake Edge, ""<a href=""https://lwn.net/Articles/555761/"" rel=""nofollow"">Verifying the source code for binaries</a>"". A key quote there:</p>

<blockquote>
  <p>The only reliable way to reproduce a binary is to build it in the exact same environment (including time stamps) that it was originally built in.</p>
</blockquote>

<p>The article also notes that systems that care very deeply about verification, like <a href=""https://blog.torproject.org/blog/deterministic-builds-part-one-cyberwar-and-global-compromise"" rel=""nofollow"">Tor</a> and Bitcoin, deliberately create reproducible builds. The article references a method called <a href=""https://gitian.org/"" rel=""nofollow"">Gitian</a> wherein a distributor packages that source code inside a complete virtual environment that includes the exact tools needed to reproduce a particular binary.</p>

<p>You should also be aware of ""Trusting Trust"" attacks (named after Ken Thompson's ""<a href=""https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf"" rel=""nofollow"">Reflections on Trusting Trust</a>"" speech) on your compiler. The short version is: if you can't trust your compiler (because some malware is interfering with it) it is tremendously difficult to verify <em>anything</em>, including your compiler itself. (If you're <em>really</em> interested, you can also read about <a href=""http://www.dwheeler.com/trusting-trust/"" rel=""nofollow"">David A. Wheeler's double-compilation defense</a> to this attack, and <a href=""https://www.schneier.com/blog/archives/2006/01/countering_trus.html"" rel=""nofollow"">Bruce Schneiner's write-up on the subject.</a>)</p>
","2738"
"Legal pitfalls when (re)selling OS solutions?","71","","<p>What legal pitfalls should be considered when (re)selling OS bases solutions? </p>

<p>As you can't ask any fee for the Open Source code itself this seems a sensitive area to me.</p>
","<p>You should follow the license, that's all.</p>

<p>Your question hints at a common misunderstanding. Freedom and price are orthogonal, they are not related. Think about two axes:</p>

<ul>
<li>free &lt;--> proprietary</li>
<li>gratis &lt;--> comes with a price tag</li>
</ul>

<p>You can have any combination of values from both axes, for example:</p>

<ul>
<li>free software with a price tag</li>
<li>free software that is distributed gratis</li>
<li>proprietary software that is distributed ""for free"" (but is not free)</li>
<li>proprietary software sold for money</li>
</ul>

<p>The first axis is what Free Sofware and Open Source are about.</p>
","114"
"Which licenses can I use?","71","","<p>My programm is using the java drivers of mongodb which are licensed with AGPL 3. I heard there are some licenses which aren't compatible with each other.</p>

<p>I want to use some libs which are licensed with GPL or LGPL, can I use them in the same project?</p>

<p>Which licenses can I use for the project itself if some libs are licensed under GPL, LGPL &amp; AGPL? Are there any compatibility problems?</p>
","<h1>Which license can I use?</h1>

<p>When modifying a code under AGPL 3.0, or including it into a larger work, the resulting code must be distributed, as a whole under AGPL 3.0.</p>

<h1>Are there compatibility problems?</h1>

<p>It depends under which version of the (L)GPL the libraries you want to use are licensed.</p>

<ul>
<li><p>The LGPL and GPL 3.0 are essentially the same license (plus an additional exception in LGPL) and, as remarked by @EMBLEM, they contain a provision which allows combination with AGPL code: the resulting combination is then governed by the terms of the AGPL 3.0.</p></li>
<li><p>If a library is licensed under the GPL 2.0 (and not ""at your option, any later version""), then any modified code or larger work must remain under the terms of this license. Thus, it is not compatible with AGPL code. But the FSF reminds (in the text of the license itself):</p>

<blockquote>
  <p>If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.</p>
</blockquote></li>
<li><p>If a library is licensed under the LGPL 2.1  (and not ""at your option, any later version""), then it contains a provision to relicense code under GPL.
To use the library in your program, you must follow this provision to relicense it under GPL 3.0 and then you can use it in your larger work as mentionned above.</p>

<blockquote>
  <p>You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.</p>
</blockquote></li>
</ul>
","4489"
"Adding conditions to a terse, permissible open source license","70","","<p>I wrote a library in JavaScript and chose the ISC license for its terseness, permissibility and likeness to the MIT license.</p>

<p>I would like to add some conditions to my software to limit specific uses without introducing a verbose license. If I switch to MIT can I add my own specific conditions to the software? Is it possible for me to simply update the ISC license to add my own conditions?</p>

<p><strong>Example condition:</strong> Wrappers for Magento, WordPress and Drupal upon request only.</p>

<hr>

<p>With help from commenters and others in this thread I learned the Free Software Foundation calls this <a href=""https://www.gnu.org/philosophy/categories.html#Non-CopyleftedFreeSoftware"" rel=""nofollow noreferrer"">Noncopylefted free software</a> and defines it like so:</p>

<blockquote>
  <p>Noncopylefted free software comes from the author with permission to redistribute and modify, and also to add additional restrictions to it.</p>
</blockquote>

<p>According to the selected answer, this kind of software may not be considered ""open"" nor ""free"".</p>
","<p>You could base yourself on the ISC license to create a new license but you should call it differently. Adding conditions to an existing license while keeping the same name is only creating confusion and you should not be surprised then that people do not respect the additional conditions.</p>

<p>Furthermore you shouldn't use the term ""open source"" or ""free software"" to describe your code anymore as what you are describing (adding restrictions on the uses) is not something that is compatible with the open source and free software definitions.</p>

<p>Finally, be aware that juridic wording is a difficult art, so adding new terms without the advice of a lawyer may simply result in a license which is non-enforceable.</p>
","5691"
"Can a SaaS product by successfully developed as Open Source?","70","","<p>The accepted answer on <a href=""https://opensource.stackexchange.com/questions/88/how-can-large-open-source-projects-be-monetized/"">How can large open source projects be monetized?</a> mentions open source SaaS. </p>

<blockquote>
  <p>Once you are successful enough in one of the above, you can afford giving away your software for free (as in free beer). </p>
</blockquote>

<p>So how can a startup whos core product is SaaS safely grow until youre ""successful enough"" if you are Open Source? Couldnt someone with bad morales and good timing fork our minimum viable product and own us by simply running a better launch campaign?</p>
","<ol>
<li><strong>Ideas don't get stolen until they have proven to be successful</strong>. People will not take your software and compete with you on the SaaS market for it until you have built a community which makes it worth it. At that point you will already have enough momentum to be able to keep a dominant market position.</li>
<li><strong>You own the brand</strong>. As the company which invented the product, you already have a reputation advantage which is hard to compete with.</li>
<li><strong>You control the development</strong>. That means you can optimize the software for your own SaaS setup. Well, the competition could fork your project and optimize it for their purposes, but forking drives up their maintenance cost and would mean that they would lose even more brand recognition.</li>
</ol>

<p>For an example of a company which does this business model in practice and is very successful with it, check out <a href=""https://automattic.com/"" rel=""nofollow noreferrer"">Automattic Inc</a>. They made <a href=""https://wordpress.org/about/"" rel=""nofollow noreferrer"">WordPress</a>, the most used blogging CMS system on the web and <a href=""https://wordpress.com/#plans"" rel=""nofollow noreferrer"">they make a ton of money with hosting instances of it</a>, even though it is free software.</p>
","4735"
"Does a license apply to both the design AND the physical object (if it is made)?","70","","<p>Suppose I have a design for a truck. Simple enough. Possibly in a .CAD file or some such program. I publish this design on my website under a <a href=""https://creativecommons.org/licenses/by-nc-nd/3.0/"">BY-NC-ND</a> licence. Someone on the web finds my design and builds it using wood or a 3d printer. Now we have a phyical object. </p>

<p><strong>My Question:</strong></p>

<p>Now that we have this object does the licence from the design carry over onto the object that was created based on the design?</p>
","<h1>TL;DR</h1>

<ul>
<li>The .CAD model would be characterized as artistic, even if it is not exactly what people would expect as ""art"".</li>
<li>The act of 3D-printing the object would be characterized as a Reproduction in the terms of the license.</li>
<li>Yes, the license to the design does carry over onto the object that was created based on the design. But it barely manages to do that.</li>
<li>The license is inadequate to be applied to a .CAD file that could be 3D-printed.</li>
<li>The license has some holes that can be exploited for someone with the intent of circumventing it.</li>
</ul>

<hr>

<h1>Detailed long explanation</h1>

<p>I am not an specialist on the subject, but I will try to answer based on the best knowledge that I have.</p>

<p>The license is somewhat lengthy to analyze in detail, so I will summarize the relevant points from the <a href=""https://creativecommons.org/licenses/by-nc-nd/3.0/legalcode"" rel=""nofollow"">full text</a>:</p>

<p>First, it is applied to a ""Work"". What exactly is a work on this license?</p>

<blockquote>
  <p>1(f) <strong>""Work""</strong> means the literary and/or artistic work offered under the terms of this License including without limitation any production in the literary, scientific and artistic domain, [...]</p>
</blockquote>

<p>Literary? Nope.</p>

<p>Scientific? Neither.</p>

<p>Artistic? Possibly, so lets try to grab on this. Even if a truck is not exactly what people would normally wait from the word ""artistic"".</p>

<blockquote>
  <p>[...] whatever may be the mode or form of its expression including digital form, such as a book, pamphlet and other writing; a lecture, address, sermon or other work of the same nature; a dramatic or dramatico-musical work; a choreographic work or entertainment in dumb show; a musical composition with or without words; a cinematographic work to which are assimilated works expressed by a process analogous to cinematography; a work of drawing, painting, architecture, sculpture, engraving or lithography; a photographic work to which are assimilated works expressed by a process analogous to photography; a work of applied art; an illustration, map, plan, sketch or three-dimensional work relative to geography, topography, architecture or science; a performance; a broadcast; a phonogram; a compilation of data to the extent it is protected as a copyrightable work; or a work performed by a variety or circus performer to the extent it is not otherwise considered a literary or artistic work.</p>
</blockquote>

<p>The relevant parts are <strong>architecture</strong>, <strong>sculpture</strong>, <strong>a work of applied art</strong> and <strong>three-dimensional work relative to geography, topography, architecture or science</strong>. So, clearly the Work is the 3D representation of the truck encoded in the file. It is not a sculpture, since the .CAD file nor the model represented there are physical entities. It could be a three-dimensional work, although a truck is not geography or topography, but it is possibly (although hardly defensible) architecture or science. It could be a work of applied art (let's grab on that then).</p>

<blockquote>
  <p>1(c). <strong>""Distribute""</strong> means to make available to the public the original and copies of the Work through sale or other transfer of ownership.</p>
  
  <p>1(h). <strong>""Publicly Perform""</strong> means to perform public recitations of the Work and to communicate to the public those public recitations, by any means or process, including by wire or wireless means or public digital performances; to make available to the public Works in such a way that members of the public may access these Works from a place and at a place individually chosen by them; to perform the Work to the public by any means or process and the communication to the public of the performances of the Work, including by public digital performance; to broadcast and rebroadcast the Work by any means including signs, sounds or images.</p>
  
  <p>1(i). <strong>""Reproduce""</strong> means to make copies of the Work by any means including without limitation by sound or visual recordings and the right of fixation and reproducing fixations of the Work, including storage of a protected performance or phonogram in digital form or other electronic medium.</p>
</blockquote>

<p>Reproduction and distribution are not clearly differentiated in those terms, but in general what the license tried to say is that playing a song in public is publicly performing, putting it inside a CD is a reproduction and giving or selling the CD is a distribution. In your case, <strong>3D-printing it would be a reproduction and giving or selling it would be a distribution.</strong></p>

<p>To prove that, lets focus on <strong>to make copies of the Work by any means [...]</strong>, clearly 3D-printing is that, so it is reproduction.</p>

<p>Public performing a 3D-printed truck is unclear. The 3D-printed truck is clearly not something being communicated, recited, broadcasted or rebroadcasted. So the part that might apply is <strong>to make available to the public Works in such a way that members of the public may access these Works from a place -AND- at a place individually chosen by them</strong>. In my interpretation, exposing the 3D-printed truck on a museum or in an event would be something like that. But... what if you are just selling the 3D-printed objects in a shop and they are not closed inside a box? Would be this be a public perform? I don't know, but it would be at least an overly-stretch of the intended purpose of that (which should be distribution, not public performance). And this could apply even if you are selling something like a painting or a map.</p>

<blockquote>
  <p>1(b). ""Adaptation"" means a work based upon the Work, or upon the Work and other pre-existing works, such as a translation, adaptation, derivative work, arrangement of music or other alterations of a literary or artistic work, or phonogram or performance and includes cinematographic adaptations or any other form in which the Work may be recast, transformed, or adapted including in any form recognizably derived from the original, except that a work that constitutes a Collection will not be considered an Adaptation for the purpose of this License. For the avoidance of doubt, where the Work is a musical work, performance or phonogram, the synchronization of the Work in timed-relation with a moving image (""synching"") will be considered an Adaptation for the purpose of this License.</p>
</blockquote>

<p>The 3D-printed object is clearly an unexpected outlier here, but I tend to interpret ""adaptation"" as ""alterations"", ""changes"" or ""derivation"". Simply 3D-printing out the object is not an adaptation in that way. But if you say, change its color or change the position of the truck doors or add an extra pair of wheels, then you are adapting.</p>

<blockquote>
  <ol start=""3"">
  <li>License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below:<br><br>
  a. to Reproduce the Work, to incorporate the Work into one or more Collections, and to Reproduce the Work as incorporated in the Collections; and,<br><br>
  b. to Distribute and Publicly Perform the Work including as incorporated in Collections.</li>
  </ol>
</blockquote>

<p>So you might 3D-print it freely (reproduce), give or sell it freely (distribute) and expose it freely (publicly perform).</p>

<blockquote>
  <p>The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats, but otherwise you have no rights to make Adaptations. Subject to 8(f), all rights not expressly granted by Licensor are hereby reserved, including but not limited to the rights set forth in Section 4(d).</p>
</blockquote>

<p>Let's focus on this: ""<strong>The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats, but otherwise you have no rights to make Adaptations.</strong>"" This means that you can't print it modified, except if required for some technical requirement (like adding supports to the 3D model to ensure that it would not break during the print process).</p>

<p>Section 4(d) says about royalties (so it is irrelevant here). And about 8(f), well... There is no section 8(f) there (WTF?). There is 8(a), 8(b), 8(c), 8(d) and 8(e), but no 8(f). Well, let's just move on then...</p>

<p>Let's see section 4(a):</p>

<blockquote>
  <ol start=""4"">
  <li><strong>Restrictions.</strong> The license granted in Section 3 above is expressly made subject to and limited by the following restrictions:<br><br> a. You may Distribute or Publicly Perform the Work only under the terms of this License. You must include a copy of, or the Uniform Resource Identifier (URI) for, this License with every copy of the Work You Distribute or Publicly Perform. [...]<br><br>b. You may not exercise any of the rights granted to You in Section 3 above in any manner that is primarily intended for or directed toward commercial advantage or private monetary compensation. [...]<br><br>c. If You Distribute, or Publicly Perform the Work or Collections, You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium [...]</li>
  </ol>
</blockquote>

<p>You may distribute but not change it. Adding a URI or a copy of the license to a physical 3D-printed object is strange, but I guess that this is doable with a small piece of paper with the URI given or distributed together with the object.</p>

<p>At this point it is clear to me that the 3D-printed object will be subject to the same license that the .CAD file was, mainly because 3D-printing it would be a reproduction. To finish with that:</p>

<blockquote>
  <p>8(a) Each time You Distribute or Publicly Perform the Work or a Collection, the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License.</p>
</blockquote>

<p>I.E., if the 3D-printing process creates a reproduction, then the 3D-printed truck is subject to the license. <strong>So, your answer is YES, the license to the design carry over onto the object that was created based on the design.</strong></p>

<p>Finally, if you intend to 3D-print it and sell the produced item:</p>

<blockquote>
  <p>4(b) You may not exercise any of the rights granted to You in Section 3 above in any manner that is primarily intended for or directed toward commercial advantage or private monetary compensation. The exchange of the Work for other copyrighted works by means of digital file-sharing or otherwise shall not be considered to be intended for or directed toward commercial advantage or private monetary compensation, provided there is no payment of any monetary compensation in connection with the exchange of copyrighted works.</p>
</blockquote>

<p>Which basically means that you cannot sell or rent it for profit. You can only borrow or give it for free, or no more than sell it just by its production and shipping price. However, if you are intending to sell it for profit, it is really easy to circumvent this (don't know if this is a good or a bad thing). If you want to sell the 3D-printed truck for say $ 10.00, you might sell something else that costs $ 1.00 (e.g., a candy) for $ 11.00 and ""give"" the 3D-printed object as a gift to whoever buys the (overpriced) candy. As long as the government don't impose crazy taxes or regulations about the distribution of the 3D-printed object (like what would happen to a weapon), nothing on the license stops you from this type of circumvention.</p>

<p>To finish the interpretation of the license, I don't think that the remaining sections of the license are relevant to your question.</p>

<hr>

<p>That license were clearly written with something in mind that can be represented and transmitted as bits and bytes and be realized in the real world as text, sounds and images. It was designed mostly for text, music and video, but the 3D-printed object clearly is not that. In my opinion, putting the BY-NC-ND license into a .CAD object that could be 3D-printed is a bad idea, since the license was not really designed for things like that. The result is the need to apply some overly-stretched interpretations to make sense from the license.</p>

<p>Finally, I think that the license is somewhat shaky in its legalese:</p>

<ul>
<li>The fact that there is no section 8(f) is a blunder, or at least an epic failed typo.</li>
<li>The fact that restriction 4(b) can be circumvented is a failure also.</li>
<li>The fact that the license fails to clearly define ""Reproduction"" and ""Distribution"" is also bad.</li>
<li>The fact that it might need overly-stretched interpretations to make sense in some cases shows that a review in its terms is needed.</li>
<li>If the Work was to be classified as a three-dimensional work of geography, topography, architecture or science, but suddenly a reproduction transforms it also in a sculpture without characterizing an adaptation. So, the work changed in its nature when it was not expected to do so. This will probably lead to unexpected consequences. BTW, 3D-scanning an physical object and creating a .CAD file from it also works as the inverse process.</li>
<li>Finally, this only applies if the <em>Work</em> is something ""artistic"". If you can somehow demonstrate that there is no art in the 3D-printed object, you might be able to escape this. However, to demonstrate that something is or is not artistic, is something hard because the term ""art"" is inherently fuzzy and opinative. A model of Mona Lisa or of the Eiffel Tower is clearly artistic. A model of a truck is very debatable and unconclusive if it is artistic.</li>
<li>If you can/could circumvent the license with the 3D-print process and make the physical object not protected by the license, by 3D-scanning the 3D-printed object back to a .CAD file you would be able to completely circumvent the license. Oops!</li>
</ul>
","519"
"Does the GNU Affero GPL help to protect against closed source if the application is run on a remote server?","70","","<p>Note that there is <a href=""https://opensource.stackexchange.com/questions/5395/does-the-agpl-help-to-protect-against-closed-source-if-the-application-is-run-on"">this related question</a> of which this question is by no means a duplicate. It refers to a related but separate scenario.</p>

<hr>

<p>I'*m about to release an application and yet need to choose a license for it. I care very much about the source code of the application and any derived work to be freely available forever. The GNU GPL family seems to provide good options. Now the application is special in a sense that the users don't need to interact with it directly but only need to provide some input and they receive some output in return (as it is the case for an image converter for example). If someone now modifies the application, hosts it on a remote server and provides a user interface for receiving input and providing output then I want to require them to publish their source code. <a href=""https://choosealicense.com/licenses/agpl-3.0/"" rel=""nofollow noreferrer"">This summary</a> about the <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html"" rel=""nofollow noreferrer"">GNU Affero GPL</a> sounds like it could help:</p>

<blockquote>
  <p>Users who interact with the software via network are given the right to receive a copy of the source code.</p>
</blockquote>

<p>However while scanning through the <a href=""http://www.gnu.org/licenses/gpl-faq.html"" rel=""nofollow noreferrer"">GPL FAQ</a> if found the following pointer:</p>

<p><a href=""http://www.gnu.org/licenses/gpl-faq.html#AGPLv3InteractingRemotely"" rel=""nofollow noreferrer"">http://www.gnu.org/licenses/gpl-faq.html#AGPLv3InteractingRemotely</a></p>

<blockquote>
  <p><strong>In AGPLv3, what counts as “interacting with [the software] remotely through a computer network?”</strong><br>
  If the program is expressly designed to accept user requests and send responses over a network, then it meets these criteria. Common examples of programs that would fall into this category include web and mail servers, interactive web-based applications, and servers for games that are played online.<br>
  If a program is not expressly designed to interact with a user through a network, but is being run in an environment where it happens to do so, then it does not fall into this category. For example, an application is not required to provide source merely because the user is running it over SSH, or a remote X session.</p>
</blockquote>

<p>This really sounds like the opposite. My program is not designed to be operated over a network but this can be easily done by developing a corresponding user interface which feeds the input to the program via its standard interface.</p>

<p>I'm not sure what the actual benefit of the  AGPL for my application would be. Can anybody clarify on this topic and explain whether the GNU Affero GPL would require someone, who hosts the application on a remote server and provides a separate user interface for input/output, to publish the source code of the (modified) application?</p>
","<p>You say you want ""<em>the source code of the application and any derived work to be freely available forever</em>"".  Firstly, thank you; good for you.</p>

<p>Secondly, you're considering using the AGPL.  You note that your ""<em>program is not designed to be operated over a network</em>"" but also caution that ""<em>this can be easily done</em>"".</p>

<p>AGPL3 s13 provides that </p>

<blockquote>
  <p>if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version</p>
</blockquote>

<p>while s5c provides that</p>

<blockquote>
  <p>You may convey a work based on the Program [...] provided that you also meet all of these conditions
  [...]
  You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy</p>
</blockquote>

<p>So, as I read it, if you choose the AGPL3 for your program, then because it currently cannot be interacted with over a network s13 is ineffective, and for practical purposes users may use it as though it were under straight GPLv3.  <strong>But</strong> if someone else were to receive a copy of your source and turn it into a program that <strong>did</strong> support such interaction, then they would have to continue to license it under AGPL3 (s5c), and this would provide network users of that modified version the right to receive copies of the source (s13) which would also be licensed under AGPL3 (s5c).</p>

<p>It seems to me that this is what you want, save that once copyright protection expires in whatever jurisdiction a future user is located, the copyleft protections go with it; at that point the work enters the public domain in that jurisdiction and you can no longer require people there to behave in a certain way in order to copy/use/modify/convey it.  You'll be long dead by then, though, so that's probably OK.  IANAL/IANYL, of course.</p>
","5386"
"Hosting (potentially) non-GPL plugin's","70","","<p>Background: In the audio processing world, most programs to compose and mix music in (collectively called DAW's from now on) are commercial and closed source. These programs can extend their functionality using some common plug-in specifications.</p>

<p>There is one common 'free' and cross-platform specification that is widely supported (Steinberg's VST specification). There are several others, most commonly Apple's AudioUnit and Avid's RTAS- and AAX specifications. AudioUnit, RTAS and AAX are locked in to the companies' proprietary DAW platforms (Logic and Pro Tools).</p>

<p>For whatever reason these specifications were developed, they are nearly completely identical. However, Pro Tools and Logic refuse/don't support loading plugins from any open specifications except their own.</p>

<p>These specifications are so identical that creating a wrapper around all of these specifications is trivial and possible. This, then, has created a mess in which developers of audio plug-ins must separately distribute a lot of permutations of their plugins, but it has become common practice.</p>

<hr>

<p>Situation: I created a meta-plugin/wrapper, that allows to identify itself as any format (specification) and load any format (such that you can load VSTs in Logic, for instance). The plugin is free and licensed under the GPL.</p>

<p>It works completely on its own. But it can, at run-time optionally load any end-user provided plug-in, or, optionally, save an emulated 'copy' of the loaded plug-in disguised as any other format. This last feature allows the unsupported format to be loaded seamlessly in any other locked-in proprietary host (but under the hood, it is still wrapped through my plug-in, just statically (not it terms of linking) and invisibly).</p>

<hr>

<p><strong>The question is</strong>, whether this is in violation of the GPL, when the end-user provided library loaded in my GPL program is <em>not</em> GPL-compatible (proprietary or closed source, for instance).</p>

<p>Notice that, the GPL program Audacity allows the same functionality - it can for instance load any VST-plugin, that may or may not be proprietary. I can even, through creative audio system routing, simulate the exact situation using a project in Audacity that can be routed through something like Logic, emulating the wrapped plug-in situation.</p>

<p>I guess the question can be boiled down to: Can GPL hosts support loading of optionally provided non-GPL plug-ins in this specific situation, where the GPL host imitates the non-GPL plug-in in what effectively seems like <em>one</em> plug-in?</p>
","<p>IMHO your question boils down to: can a piece of GPL-licensed code load arbitrary code under non-GPL or other licenses assuming it does not know about any of this other code ahead of time?</p>

<p>The closest thing that comes to mind would be an OS user space such as the Linux user space. Linux does not know anything ahead of time about your program. Does its GPL license extend to your program? 
Since this can be a grey area for some, Linus made it clear that the GPL does not extend to user space programs.</p>

<p>I think the same context applies here. For the sake of clarity if you want to allow or disallow the loading of non-GPL-licensed plugins by your framework, you should make this explicit such that there is no source of confusion for your users. An explicit GPL exception would be the thing I would do if it was for me.</p>
","2825"
"How should I approach open sourcing a library from work?","70","","<p>I've developed a small and useful library at work, I have permission from legal department, what are the steps I should take before, during and after open sourcing the project?</p>

<p>How would I transform a proprietary product to an open source project?</p>
","<p>There is a full book on the topic of making a project open-source: <a href=""http://producingoss.com/en/index.html"" rel=""nofollow"">Producing Open Source Software</a> by Karl Fogel. For your specific problem a chapter talks about <a href=""http://producingoss.com/en/opening-closed-projects.html"" rel=""nofollow"">Opening a Formerly Closed Project</a>.</p>

<p>First you have to check, if something still shouldn't be released. Is some proprietary library used that needs to be replaced? Contains the buildfile the password to the FTP-server to upload the distribution? Contains the test-data private information? You should also check if older version in the version-control contain such information and maybe you want to start a new revision 1 to get rid of older revisions with stuff that doesn't need to be released.</p>

<p>Next would be some decisions. Which license do you want to use? <a href=""http://choosealicense.com/"" rel=""nofollow"">Choose a license</a> might help here. Add a file with the license to your code. You also need to add a file naming the author(s) of the code.</p>

<p>Add also a README or a similar file, explaining how to build the project. Add other explanations as needed.</p>

<p>Next would be the infrastructure. Do the project need a website? Do you create a public readable repository of the version control? Set up what is needed.</p>

<p>Finally announce the open source release.</p>
","123"
"Is an icon covered by the same license than the repository it belongs to ?","70","","<p>I would like to know if I can reuse an <a href=""https://raw.githubusercontent.com/webrtc/apprtc/master/src/web_app/images/apprtc-16.png"" rel=""noreferrer"">icon</a> that is inside a <a href=""https://github.com/webrtc/apprtc"" rel=""noreferrer"">repository</a> under license BSD 3-clause for a project that I release under unlicensed.</p>

<p>My understanding is that all files that are in a repository (I don't see any restriction in readme or other files) are covered by the BSD 3-Clause license.</p>

<p>But I was wondering if I can pickup the file and put in my repository ? Maybe icons are different from source code file ?</p>
","<p>Your understanding is correct that, unless indicated otherwise, all files in a repository are covered by the same license (3-clause BSD in this case).</p>

<p>The BSD license allows you to copy and modify the project (which includes adding it to your own project and then throwing everything out except the icon you want) on the condition that you keep the copyright statement and BSD license intact for the portion you copied.</p>

<p>This means that you must make it clear</p>

<ul>
<li>that you copied the icon</li>
<li>who owns the copyrights to the icon</li>
<li>that the icon is licensed under the 3-clause BSD license</li>
<li>that this differs from the copyrigh and license on the rest of your project</li>
</ul>
","6368"
"Is it safe to use FreeType inside a proprietary closed-source software?","70","","<p>Many of libraries, that have LGPL or permissive licenses, depends on FreeType, that have multi-licensing (FTL/<em>GPL</em>). My question is: if FreeType can be used under any of these licenses, can someone juridically oblige to open the source code of the proprietary product, that distributed in binary form, using the ""permissive"" dependency, that uses FreeType?</p>
","<blockquote>
  <p>Is it safe to use FreeType inside a proprietary closed-source software?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>if FreeType can be used under any of these licenses, can someone juridically oblige to open the source code of the proprietary product, that distributed in binary form, using the ""permissive"" dependency, that uses FreeType?</p>
</blockquote>

<p>The short answer is no. The thing about the FreeType license is that you are required to make an explicit choice among the licensing options. Document the choice you made and you should be good.</p>
","5160"
"Porting open source project between languages","70","","<p>What are my moral and legal obligations if I want to port an open source project (software library, BSD-licensed) from one language to another?  I also anticipate making some changes to suit my application better, so it feels more like a branch to me.</p>

<p>I'm just not sure what the obligations are: I am technically writing from scratch, but it would begin as a fairly literal port so I am using the source material as more than just a reference.</p>
","<p>If the original is BSD licensed, you can (almost) do whatever you want.</p>

<p>As a courteous person, you will cite the original project as the basis for your version.</p>

<p>As a practical person, you want to be able to track upstream changes (and even better, have third parties help out doing so), add/reference any translation tools used (e.g. I'm aware of FORTRAN to C translators, TeX uses a translator for a (subset/dialect) or Pascal to C, there must be others), or state your hand-translation strategy. Clearly mark where you deviate from upstream, to guide later refreshes. Note that when I mention ""third party"", more often than not that will be you in a few months time, completely oblivious to what you were doing today...</p>

<p>Take a step back, and carefully consider if it isn't better for everybody involved to integrate your changes upstream (if they don't want it, perhaps they have their very good reason to reject them...), or keep your own branch with <em>minimal</em> changes (or some sort of plugin/addon?). Perhaps the best solution is adding a shim that allows using upstream in your language?</p>
","2531"
"What does 'terms that are compatible with the GPL' mean?","70","","<p>From <a href=""http://wiki.octave.org/FAQ#Licensing_issues"" rel=""nofollow noreferrer"">Octave's FAQ</a>, </p>

<blockquote>
  <p>Code written using Octave's native plug-in interface (also known as a
  .oct file) necessarily links with Octave internals and is considered a
  derivative work of Octave and therefore must be released under terms
  that are compatible with the GPL.</p>
  
  <p>...</p>
  
  <p>A program that embeds the Octave interpreter (e.g., by calling the
  ""octave_main"" function), or that calls functions from Octave's
  libraries (e.g., liboctinterp, liboctave, or libcruft) is considered a
  derivative work of Octave and therefore must be released under terms
  that are compatible with the GPL.</p>
</blockquote>

<p>Here, 'terms that are compatible with the GPL' appears repeatedly.</p>

<p>At first, I thought that it can be any license in the <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow noreferrer"">list of GPL-compatible licenses</a>.
However, the part of ""... is considered a derivative work of Octave and therefore must be released under terms that are compatible with the GPL"" confuses me.</p>

<p>As far as I know, derivative work of GPLed one should follow GPL itself, not compatible one.</p>

<p>What are 'terms that are compatible with the GPL'?</p>
","<p>This advice from the Octave project is in line with the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#LinkingWithGPL"" rel=""nofollow noreferrer"">GNU project's own FAQ</a>:</p>

<blockquote>
  <p><strong>You have a GPL'ed program that I'd like to link with my code to build a proprietary program. Does the fact that I link with your program mean I have to GPL my program?</strong></p>
  
  <p>Not exactly. It means you must release your program under a license compatible with the GPL (more precisely, compatible with one or more GPL versions accepted by all the rest of the code in the combination that you link). The combination itself is then available under those GPL versions.</p>
</blockquote>

<p>This FAQ item directly applies to your case, but doesn't fully answer your question by itself, so I'll explain further.</p>

<p>The GPL imposes a particular set of requirements on the distribution of derivative works. Importantly, a few of those requirements include:</p>

<ul>
<li><p>downstream derivatives must, as a whole, be licensed under the GPL</p></li>
<li><p>the licensing terms of downstream derivatives may not impose any additional requirements beyond what is required by the GPL</p></li>
</ul>

<p>So, your own creative work may be licensed under any terms that do not cause issue when they are ""upgraded"" to the terms of the GPL as part of the combined work (original GPL work + your work) that you distribute. In other words, you may license your work with terms that are a subset of the GPL terms.</p>

<p>Visually, we can show how the terms of your work (left) combine with the GPL terms of the original work (middle) to create the combined terms (right):</p>

<p><a href=""https://i.stack.imgur.com/FMB65.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FMB65.png"" alt=""permissive subset fits inside GPL requirements, proprietary terms do not""></a></p>

<p>In the case where your works is licensed under a subset of GPL terms, there is no issue complying with the requirement that the combined work be licensed under GPL terms. Your work's terms are <strong>GPL-compatible</strong>. In the second case, where your work is licensed under terms that are not a subset of GPL terms, some rogue term(s) will exist in conflict with the GPL's requirement that the combined work be licensed under the GPL, which cannot include any additional non-GPL terms.</p>
","5551"
"Is CC-BY the least strict CC license for my open source project?","69","","<p>I have been working on an open source software. The software is in its final stages of testing and I will soon publish it under a CC license. I would like to release it under the least strict license (to provide users full access to do whatever they wish to it).</p>

<p><strong>My question:</strong></p>

<p>Is the CC-BY license the best license to use if I want to release it under no conditions or rules? </p>
","<p><a href=""https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F"">The use of Creative Commons licenses for software is not recommended.</a>  The CC licenses do not address concerns specific to software (such as the source code/object code relationship, or patent issues), and are incompatible with most open-source software licenses.</p>

<p>If you want to license your software ""with no conditions or rules"", you probably want either:</p>

<ul>
<li><a href=""http://creativecommons.org/publicdomain/zero/1.0/"">The Creative Commons Public Domain Dedication</a> (which <a href=""https://wiki.creativecommons.org/wiki/CC0_FAQ#May_I_apply_CC0_to_computer_software.3F_If_so.2C_is_there_a_recommended_implementation.3F"">is suitable for use with software</a>)</li>
<li>The <a href=""http://www.wtfpl.net/about/"">Do What The Fuck You Want To Public License</a></li>
</ul>

<p>""Releasing into the public domain"" has the problem that not all jurisdictions permit you to simply abandon your copyright to a work; to get around this, CC-0 and WTFPL both retain copyright while relinquishing all rights to the greatest extent permissible by law; of the two, CC-0 is probably the better written.</p>

<p>If you want to retain the requirement of being attributed for your work, you want one of the highly-permissive licenses such as the <a href=""https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22Revised_BSD_License.22.2C_.22New_BSD_License.22.2C_or_.22Modified_BSD_License.22.29"">three-clause BSD license</a> or the <a href=""https://en.wikipedia.org/wiki/MIT_License"">MIT license</a>.  These are similar to CC-BY, but are designed for the needs of software.</p>
","732"
"Licensing a derivative work from a project","69","","<p>I'm going to write a C library that contains the major and most useful functions from Apache Commons IO's Java package. I will rewrite in C a lot of functions contained in Apache Commons. What do I need to do when licensing my library? Do I have to write something about intellectual property? I'd like to use a BSD 2-Clause license for my project.</p>
","<p>The Apache license is <a href=""https://www.apache.org/licenses/LICENSE-2.0#copyright"" rel=""nofollow"">""sublicenseable""</a>:</p>

<blockquote>
  <ol start=""2"">
  <li>Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, <strong>sublicense</strong>, and distribute the Work and such Derivative Works in Source or Object form. </li>
  </ol>
</blockquote>

<p>I can therefore create a derivative work of Apache-licensed code under any license I please BUT I still must abide by the terms of the Apache license itself, including keeping notices, license texts, change tracking, etc and both license terms will apply.</p>

<p>Therefore, sublicensing using a BSD is a rather moot point and I would rather instead keep thing under the Apache 2.0 license.</p>

<blockquote>
  <p>So I have to include in my source directory the NOTICE and the LICENSE of Apache Commons and I have to write in my NOTICE file that my work is a derivative from another Apache licensed project? </p>
</blockquote>

<p>Yes, and a little more: the <a href=""https://www.apache.org/licenses/LICENSE-2.0#redistribution"" rel=""nofollow"">section 4 of the Apache license</a> is clear and explicit:</p>

<blockquote>
  <p>a You must give any other recipients of the Work or Derivative Works a copy of this License; and</p>
  
  <p>b You must cause any modified files to carry prominent notices stating that You changed the files; and</p>
  
  <p>c You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</p>
  
  <p>d If the Work includes a ""NOTICE"" text file as part of its distribution [...]</p>
</blockquote>
","4551"
"Can I use BSD / MIT licensed code in a public-domain equivalent project?","68","","<p>As far as I know, the BSD 3-clause and MIT licenses are functionally equivalent. Please correct me if I'm wrong.</p>

<p>Can I take BSD/MIT-licensed code and use it in a project which I then release under CC0, the Unlicense, or similar?</p>

<p><sub>(I don't have any particular projects in mind at the moment, this is more of a ""could I do this if I wanted to"" question.)</sub></p>

<p><strong>Update:</strong> According to <a href=""https://opensource.stackexchange.com/a/5496/9449"">this answer</a>, you cannot, because of the notice requirement.</p>
","<p>You cannot license the work as a whole under CC0. You do not have the ability to commit other authors' work to the public domain or remove an author's requirement that distribution of their work includes attribution.</p>

<p>You <em>can</em> release your <em>own</em> code under CC0, and include that code in a derivative work that also includes MIT/BSD-licensed code from other authors.</p>
","6150"
"Including a CC BY-SA licensed SVG in a CC BY-NC-SA licensed wiki?","68","","<p>I want to upload a SVG document with a CC BY-SA 3.0 license to an online wiki with a CC BY-NC-SA 3.0 license. </p>

<p>Will these licenses conflict with each other, or can they coexist?</p>
","<p>As <em>curiousdannii</em> said licenses do not apply to the original author since they are defining the terms of the <strong>re-use</strong> of the creations. The author always able to release (or re-release) his/her own work using any license, or no license, or no permissions at all. (But when something is released under a non-revokable license then the author have no way to forbid the usage within the said license terms, but have the right to release it again under a different, more or less restrictive license.)</p>

<p>Other aspect is when there is a document licensed using License-A (by its original author who is not you) and you want to use it in a project using License-B. There is two sides of the story:</p>

<ul>
<li>You cannot (easily) include it into the project if License-A is more restrictive than B, since A won't allow you to release it under terms not supported by the license.</li>
<li>You may include it in the project if B is more restrictive than A, since B permits it to be used there; however ShareAlike states that the project have to keep the license intact and include it with the artwork, so people using it are informed of its specific license and able to utilise their rights.</li>
</ul>

<p>This is generally true when it's a collection, like a package of otherwise intact and separate works: the whole collection does have a license but its parts may have more liberal ones. The collection isn't allowed to restrict the more liberal licensing of its part but may utilise its restrictive license to the collection as a whole.</p>

<p>(Wikipedia does the opposite, which is also possible, but much harder to ensure: they include some more restrictive licensed works and explicitly and visibly state that their license is different from the collection's. This is legal but it's very hard to ensure that for every possible way of use the end-user is properly informed about the restrictions.)</p>
","5945"
"License of Ubuntu MATE for commercial use","68","","<p>I would like to know what to be careful about using Ubuntu for commercial use.</p>

<p>I use Ubuntu MATE (Ubuntu 16.04.2 LTS), some packages, and applications I created. I only use my applicaton on my own system.</p>

<p>I think that if I install a package whose license is GPL and I use for my application, then I have to publish my source code of my application openly.</p>

<p>Do I have to publish openly in the case where I do not use a package but it is installed default in the distribution (Ubuntu MATE)?</p>
","<p>You only have to make the source code available if you <strong>distribute</strong> your software. For example: offering it for download, sending it per email, selling it on CDs, installing it somewhere else.</p>

<p>This is the case for all FLOSS licenses (but some differ in what counts as distribution if servers are involved).</p>

<p>Whether or not this happens in a commercial context isn’t relevant. FLOSS licenses don’t differentiate between commercial and non-commerical.</p>
","5783"
"Using older versions of licenses in new projects","68","","<p>When creating a new project today, am I allowed to license my software using the older version of licenses such as <strong>GPLv2</strong> (vs. GPLv3), or <strong>BSD 4 clause</strong> (vs BSD 3 clause).</p>

<p>OR</p>

<p>Am I only allowed to use the latest version of these licenses instead?</p>
","<p><strong>You can use any version of any license you please.</strong>  You are the author. You do what you want.</p>

<p>No FOSS license could say something to the contrary, including no such license could restrict you to use other licenses or other version of a license for your original work .</p>

<p>Practically each new ""version"" of common FOSS licenses is in itself a new license. Most ""versioned"" licenses have terms that may allow to use a newer version of a license for code using a previous version, but not always. This is a permission in all cases, never a restriction.</p>

<p>In some cases such as the GPL family the relationships between all these versions can start being .... <a href=""https://www.gnu.org/licenses/quick-guide-gplv3.en.html#new-compatible-licenses"" rel=""nofollow noreferrer"">it's complicated!</a>.</p>
","5063"
"What happens to Cloud providers, if I download a GPL Binaries from cloud storage service?","68","","<p>1) For example, if I upload a GPL binary to google drive and then provide a link for everyone. Does it mean that GOOGLE should now provide the sources for the binary if anyone requests them?</p>

<p>2) What happens on a scanning service of files, whereby, I requested it to downloads a file, scan it and then allows me to download it after scanning? Because they downloaded the file, scanned it, and gave it to me. Are they now liable to provide the sources of the GPL Binary?</p>

<p>3) What happens if I receive an email to my gmail, the email contains a GPL Binary in an attachment. I download the file. Can I now request the sources from GOOGLE?</p>
","<blockquote>
  <ol>
  <li>... <em>I upload a GPL binary to google drive and then provide a link for
  everyone</em> ...</li>
  </ol>
</blockquote>

<p>You are the distributor here, Not Google. Also Google's Terms and conditions mentions scenarios like this, and here's an excerpt.</p>

<blockquote>
  <p>We do not claim ownership in any of your content, including any text,
  data, information, and files that you upload, share, or store in your
  Drive account.</p>
</blockquote>

<p>So, YOU are the distributor.</p>

<blockquote>
  <ol start=""2"">
  <li><em>...  scanning service of files, whereby, I requested it to download ...</em></li>
  </ol>
</blockquote>

<p>Still you are the distributor. Even they might have additional terms and conditions.</p>

<blockquote>
  <ol start=""3"">
  <li>... <em>receive an email to my gmail, the email contains a GPL</em> ...</li>
  </ol>
</blockquote>

<p>Read the answer for first one.</p>
","5339"
"What license is portlet-api.jar in version 1.0?","68","","<p>I'm using portlet-api.jar within my maven project, but I can't find any hint on an applicable license. Is it public domain? And if so, is it written down somewhere?</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;javax.portlet&lt;/groupId&gt;
    &lt;artifactId&gt;portlet-api&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
","<p>The answer isn't all that obvious. The <a href=""http://central.maven.org/maven2/javax/portlet/portlet-api/1.0/portlet-api-1.0.pom"" rel=""nofollow""><code>portlet-api</code> 1.0 POM on Maven Central</a> contains a link to the original download URL, which is that of <a href=""http://jcp.org/aboutJava/communityprocess/final/jsr168/index.html"" rel=""nofollow"">JSR-168</a>, the portlet spec. Downloads there are made available pursuant to the acceptance of a software license agreement which is typical of JSRs and not open source. Further, the archive you get then contains a <code>license.txt</code> file which doesn't grant any rights, and the source code is marked as</p>

<blockquote>
  <p>Copyright 2003 IBM Corporation and Sun Microsystems, Inc.</p>
  
  <p>All rights reserved.</p>
  
  <p>Use is subject to license terms.</p>
</blockquote>

<p>There is however <a href=""http://svn.apache.org/viewvc/portals/portlet-spec/trunk/portlet-api_1.0_spec/"" rel=""nofollow"">an Apache 2.0-licensed repository</a>, hosted by the Apache Software Foundation. Given that the Maven Central JAR was built by Emmanuel Venisse of the ASF (as documented the manifest in the JAR), it's quite likely that it is effectively Apache-licensed.</p>

<p>I don't know what the history of the code is, so you may take all this with a pinch of salt. The ASF are careful about the code they host though, so the risk is minimal; Debian uses that to build its own <a href=""https://tracker.debian.org/portlet-api-2.0-spec"" rel=""nofollow""><code>portlet-api</code> JARs</a>.</p>
","2881"
"Distribute SWF (binary) files with open source license?","67","","<p>Is it possible to distribute binary files using any open source or Creative Commons license? In particular, I have several Flash videos (.swf files) whose sources (.fla files) are not available/lost. These videos need to be shipped with an open source project. I am looking for possible ways to address this situation. An option would be to recreate them using Flash or JavaScript, but that would be very costly in terms of effort, and therefore, does not seem feasible. I saw that BSD license has something related to ""object code"", but not sure if that is applicable here.</p>
","<p>Yes you can; you are the copyright holder so you can apply whatever license you want.</p>

<p>However, I recommend that you avoid the licenses designed for source code (such as GPL, BSD and so on) and choose a more general-purpose license. The <a href=""https://creativecommons.org/licenses/"" rel=""nofollow noreferrer"">Creative Commons licenses</a> are an excellent choice; they have been used for books, photographs, music, movies and many more things. Flash videos are surely no problem.</p>

<p>The problem with source code licenses is that they can cause confusion, and worse, some like the GPL may not even work since they <a href=""https://opensource.stackexchange.com/a/2690/175"">require access to the source code for binary distributions</a>.</p>

<p>Since you want to integrate these files with an existing open source project, it's important to make sure that the licenses will be compatible. Fortunately most licenses do not consider binary files (like videos, images) as critical parts of the software, so most licensing choices should be safe. For example, people have licensed projects composed of GPL source code + proprietary assets.</p>
","2766"
"GitHub workflow and Apache License","67","","<p>The <a href=""http://www.apache.org/licenses/LICENSE-2.0"">Apache License</a> requires:</p>

<blockquote>
  <p><strong>4. Redistribution.</strong> You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p>
  
  <ol>
  <li>[…]</li>
  <li>You must cause any modified files to carry prominent notices stating that You changed the files; and</li>
  <li>[…]</li>
  <li>[…]</li>
  </ol>
</blockquote>

<p>Suppose I want to contribute to some AL2-licensed project on GitHub. I create a fork of their repository, so I'm distributing a copy. Then I modify said files, turning the plain copy into an derivative work with modified files. But usually I only include relevant code changes as I intend for my modifiecations to be merged into the upstream project after some code review. I don't add a notice about “I modified this file” to each of them. How does this agree with the license?</p>

<ol>
<li><p>Is the git log enough of a “prominent notice” to satisfy this requirement, even if the information isn't included in the text of each affected file, and even if GitHub allows downloading the code as a ZIP without history information?</p></li>
<li><p>I don't see my personal fork as a Derivative Work, but instead as a proposed contribution to the original Work. Is this distinction of any legal significance?</p></li>
<li><p>Do <a href=""https://help.github.com/articles/github-terms-of-service/"">the GitHub terms of service</a> somehow address this scenario? I couldn't find anything that sounds like it would apply here.</p></li>
<li><p>Is there anything else to prevent me from getting sued by an upstream developer, apart from that developer using common sense?</p></li>
</ol>
","<p>I would not consider these patches as a ""Derivative Work"". They are instead considered a ""Contribution"" under the Apache 2.0:</p>

<blockquote>
  <p>""Contribution"" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. </p>
</blockquote>

<p>And <a href=""http://www.apache.org/licenses/LICENSE-2.0#contributions"">therefore</a>:</p>

<blockquote>
  <ol start=""5"">
  <li>Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</li>
  </ol>
</blockquote>

<p>So when I submit a patch to an upstream project, I consider that the patch is enough of a change notification under the Apache-license and this is not a derivative work, even if not accepted. While working on my patch, I consider the act of forking to be enough of a notification until I make an actual submission.</p>

<p>Therefore none of your concerns are warranted and your sub-questions are moot IMHO.</p>
","4564"
"gpl-3 vs agpl for a telegram bot","67","","<p>I used the gpl3 license for a telegram bot.
I later realized that maybe it's not the best license since if someone forks my project, he is not distributing it, but it runs his own instance of the bot on his server and users contact the bot on telegram.</p>

<p>As far as I have read maybe the a-gpl license should better fit this case.
Am I right?</p>

<p>I would like that if someone forks my bot to create his own instance usable for users on telegram, he is forced to release the code and also to credit my project</p>
","<p>If that's what you want, then yes, the AGPL would be better. The GPL makes no restrictions on those who don't distribute the software but only make it available to interact with over a network. </p>
","6195"
"Is it acceptable to change the implementation language in a pull request?","67","","<p>I would submit a pull request updating a library or a language.  I would do so even if there are breaking changes (ex. Python 2 -> Python 3).  I would submit a pull request that adds a new library if it is relevant to the functionality.</p>

<p>However, I am struggling with the acceptability changing the implementation language via a pull request, so would like to hear community's thoughts on: is it acceptable to change the implementation language via pull request?</p>

<p>To give an concrete example, there are lots of little packages on <code>npm</code>, and there are lots of type definitions hand-rolled on <a href=""http://definitelytyped.org/"" rel=""nofollow noreferrer"">DefinitivelyTyped</a>.  For some projects it would be a trivial matter to add type annotations (making the file TypeScript) so it generates always-up-to-date definitions and nearly identical JavaScript (whitespace differences), but I hesitate because that would be a language switch and I question if that is socially acceptable.</p>

<p>I know the simple solution would be to open an Issue asking about it first, but I find often times that can lead to too long of feedback loop because maintainers are busy and may take a week or more to reply, so for small things will often create a PR directly eliminating the first feedback cycle.</p>
","<blockquote>
  <p>I know the simple solution would be to open an Issue asking about it first, but I find often times that can lead to too long of feedback loop because maintainers are busy and may take a week or more to reply, so for small things will often create a PR directly eliminating the first feedback cycle.</p>
</blockquote>

<p>I think opening an issue is the correct way to go even if it takes a while for maintainers to address it. Issues are the correct place for discussion about whether switching languages is the correct choice, and it's a good place for you to state your case for why you think it's an important change.</p>

<p>If you feel like it you can immediately submit a PR against the issue so the maintainers can see the impact of the changes, and they may be more open to changing languages if it means no additional work for them. I think this is perfectly socially acceptable.</p>

<p>You're going to have to wait for somebody to address your PR, so I don't think that's a reason not to create an issue.</p>

<p>If you need changes to an open source library for a project you're working on immediately, you should make them in a fork and publish to a private (or local) repository so you can use your changes immediately while your PR goes through the review process and gets released eventually. You shouldn't try to rush the process.</p>
","5647"
"Licensing for research collaboration between EPL and GPL","67","","<p>I work as academic researcher in software engineering. We have an agreement with our university that we can release source code under EPL.</p>

<p>Currently, I work on two interrelated research projects (both released under EPL):</p>

<ul>
<li><a href=""https://github.com/FTSRG/ingraph"" rel=""nofollow noreferrer""><code>ingraph</code></a>, an incremental graph query engine supporting Cypher graph queries</li>
<li><a href=""https://github.com/FTSRG/codemodel-rifle"" rel=""nofollow noreferrer""><code>codemodel-rifle</code></a>, a static analysis application for JavaScript source code repositories, which uses Cypher graph queries for defining <strong>well-formedness rules</strong>. This project has a number of external dependencies, including some ASL- and MIT-licensed external libraries, and also uses Cypher-compliant query engine (Neo4j or <code>ingraph</code>) in a client-server setup, talking through a driver with REST or <a href=""https://neo4j.com/blog/neo4j-3-0-language-drivers/"" rel=""nofollow noreferrer"">REST-like</a> calls. A key component of this project is the <strong>parser</strong> that transforms the source code to a graph representation - this requires considerable implementation efforts. The parser has talks to the query engine to build the graph.</li>
</ul>

<p>We are planning to collaborate with <a href=""https://jqassistant.org/gplv3/"" rel=""nofollow noreferrer""><code>jQAssistant</code></a>, which is GPLv3-licensed framework for static analysis, also using Cypher graph queries. jQAssistant currently runs as part of the build process, so it uses process calls instead of REST calls (e.g. it uses an embedded version of the GPLv3 Neo4j graph database).</p>

<p>As far as I understand, <code>codemodel-rifle</code> and <code>jQAssistant</code> cannot use each other's code as <a href=""https://eclipse.org/legal/eplfaq.php#GPLCOMPATIBLE"" rel=""nofollow noreferrer"">GPL and EPL are incompatible both ways</a>.</p>

<p>We can request a new license from the university for future projects. In this case, we could re-implement the <code>codemodel-rifle</code> application (<code>cr2</code>) and re-release it under a different license. However, I am not sure which license to choose. <code>cr2</code> would still depend on <code>ingraph</code> (which is fully EPL-licensed), so we cannot use GPLv3.</p>

<p>The goal of the collaboration would be to:</p>

<ol>
<li>share the parser component,</li>
<li>share the well-formedness rules.</li>
</ol>

<p>Potential workarounds seem to be the following:</p>

<ul>
<li>Reimplement <code>codemodel-rifle</code> in GPLv3, and also implement an ASL-licensed driver to use <code>ingraph</code> in a client-server setup.</li>
<li>Introduce an ASL-licensed common project that can use <code>codemodel-rifle</code> and can be used by <code>jQAssistant</code>. In this case, we still cannot use our <code>jQAssistant</code>'s original code, but can jointly develop the common project. Our partner does not necessarily need <code>ingraph</code> to run the analysis, as they can use <a href=""https://neo4j.com/licensing/"" rel=""nofollow noreferrer"">Neo4j</a> (which is GPL-licensed), so they could release their software under GPLv3.</li>
</ul>

<p>Are there any better options for collaborating under these conditions?</p>
","<p>Assuming that the communication between all the EPL and GPL-licensed components is done over Cypher calls via REST APIs, then these are independent programs. Both side could eventually use any license without impacting what the license of the API caller would be. </p>

<p>If you were making function calls the situation could be different. As you describe it, each component seems to be running in its own independent process. </p>
","5200"
"Maintaining old Android app under GPLv3","67","","<p>I want to change an old Android app that is under GPLv3. I will do some refactoring of existing code, add some new functionalities and publish it as commercial app.</p>

<p>What part of code I must publish as public? Only those parts that was in original project?</p>

<p>Can I add new files (java classes, resources, etc.) under other licence and don't publish them even if whole project didn't compile &amp; work without new files?</p>
","<p>Your new app clearly builds on the old GPL code. Without the old GPL code you would have needed more resources to deliver the same app quality. You have extended the old code and you must also publish everything, the unmodified old code and everything you have changed or added under the same GPL license.</p>

<p>You must also acknowledge your app is a GPL project.
This is just the way how GPL works.</p>
","5039"
"Open Source licenses in the Dominican Republic","67","","<p>I live in the Dominican Republic where there Open Source isn't contemplated in the Constitution. I want to make Open Source hardware. </p>

<p>How should I go about this? Should I get a patent and license it or what?</p>
","<p>You seem to be misunderstanding a fairly fundamental point about open source licenses: they are just a license to use something, like any other license. The default position (at least in any country which is a signatory to the <a href=""https://en.wikipedia.org/wiki/Berne_Convention"" rel=""nofollow noreferrer"">Berne Convention</a>, which includes the Dominican Republic) is that only the copyright holder can make use of a piece of intellectual property. The license then lets other people use that intellectual property. Some licenses (e.g. your license from Apple to use iOS) are pretty restrictive in what you can do. Others (BSD, MIT, GPL, ...) are less restrictive - but they're all fundamentally based on copyright law. There doesn't need to be a specific bit of legislation enabling ""open source"" licenses, because they're just another license.</p>

<p>Also note that patents are almost the antithesis of open source, being an exclusive right to use something. (I'm aware they <em>can</em> be used defensively, but the vast majority of patents aren't).</p>
","5972"
"What should I do about code style if a GitHub project is missing CONTRIBUTING.md?","67","","<p>I want to contribute to a C# project on GitHub, but the repository is missing a <code>CONTRIBUTING.md</code> file. I've already noticed a few code style inconsistencies, but I don't want to assume the project is using the MSDN code conventions. What is the best way to bring up this issue with the maintainer?</p>
","<p>As a general advise - you should try to follow suite. If you're editing a file, follow the conventions it sets. If you're adding a new file, follow the conventions of other files in the same directory.</p>

<p>And when in doubt - just ask. A live project should have a method to contact the maintainer(s) published on its page. Reach out via email/irc/whatever preferred method of communication the project publishes and ask about the style. Chances are the first contribution he'd ask you to make would be to create a <code>CONTRIBUTING.md</code> page yourself.</p>
","2519"
"Can I license my artwork and GPL code under cc-by-nc-sa?","66","","<p>I have a collection of artwork licensed under CC BY-NC-SA. I want to include some code licensed under GPL. Can I include all of it under CC BY-NC-SA? If not, what should I use? The situation:</p>

<p>Software A enables greater use of pre-included artwork in Software B. I am modifying Software A to be able to use my artwork. Software A is licensed under GPLv3. Can I license my artwork + my modifications under CC BY-NC-SA, should I use GPL instead, or Should I license the artwork and modifications separately?</p>
","<p>No, the GNU GPL license and any of the Creative Commons Non-Commercial licenses are incompatible. The Non-Commercial licenses meet neither the Free Software Definition nor the Open Source Definition.</p>

<p>Here's what <a href=""https://www.gnu.org/licenses/license-list.en.html#CC-BY-NC"" rel=""noreferrer"">the GPL License Compatibility list</a> says:</p>

<blockquote>
  <p>This license does not qualify as free, because there are restrictions on charging money for copies. Thus, we recommend you do not use this license for documentation.</p>
  
  <p>In addition, it has a drawback for any sort of work: when a modified version has many authors, in practice getting permission for commercial use from all of them would become infeasible.</p>
</blockquote>

<p>That said, if all you're doing is bundling the two together (for example, in a zip file) for ease of distribution, then you can do that, but the CC-BY-NC-SA and the GPL parts need to retain their licenses. You won't be able to say that the bundle as a whole has only one license.</p>
","5621"
"Can we keep the components of a derivative work open source, but allow the work as a whole to be closed?","66","","<p>We are creating a repository of resources so that people can build software or create videos or artwork using our material as their basis. We are making a virtual Moon colony and a <a href=""https://www.moonwards.com/index.html"" rel=""noreferrer"">website of related material</a>, and inviting others to use that to make games or shows that take place in the colony, use our library to create objects or events that are placed within our hosted version of the colony as a 3d environment, write stories that draw on our material, et cetera. To facilitate that, all our libraries are open source and copy left. Currently they use GPL-3.</p>

<p>However, people who go to the effort to make things using our libraries are likely going to want to hold copyright on the derivative work, including making the source code closed. I would like to make it a license condition that they add models, textures, animations, and other similar component pieces they make to our libraries. But I am fine with it if they want to put a different license on their work as a whole so they can charge for it. I seriously doubt we will have many takers using our libraries otherwise.</p>

<p>It seems that if we change the license on the one folder in <a href=""https://github.com/briligg/moonwards"" rel=""noreferrer"">our GitHub repo</a> that has 3d content, the one called 'blenderstuff', this might be achievable. I am the sole copyleft holder on all that material so I can make that change easily right now. </p>

<p>The project is at an early stage and I know very little about this realm. I just want to help people make cool stuff and educate the public about space. When it comes to legalities, I need a lot of help navigating it all.</p>
","<p>You can dual-license your project under a GPL3 license and a non-free license. Or you can add an exception to the GPL3 license as per section 7 (Additional terms) of the license (the two solutions would achieve the same result).</p>

<p>The non-free license / additional exception to GPL3 would contain language to indicate that ""using the library in closed-source works is allowed provided that new models, textures and animations are contributed back through pull requests on [URL of your repo]"" (don't say ""and similar"" because this would only create juridical uncertainty and this is bad for users of your library).</p>

<p><em>Side note:</em> Of course this means that people could still use your library and not contribute back new textures if they chose to keep the resulting work GPL3. Moreover, if they do so, you couldn't take their new textures (even if they share them publicly) and add them to your repository because you wouldn't be able to grant a similar exception on these new textures. But this is only a small risk as most people who value free and open source software are generally happy to send their contributions to the original repository, under the original terms.</p>
","5866"
"Does the GNU GPL imply that I hold copyright?","66","","<p>Would it be possible to release my copyright (essentially put it in the public domain) but still have the software licensed under the GNU GPL?</p>
","<p>Extract from licence (gpl3): </p>

<p>“All rights granted under this License are granted for the term of copyright on the Program, ”</p>

<p>“Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.”</p>

<p>From the above it is clear, that you need to hold copyright.</p>
","5358"
"How to deal with third party libraries?","66","","<p>I'm working on a project I would like to release as an open source project in the future. In my work I'm using a number of third party libraries, either from open source projects or released to the public domain. SQLite, Log4Net, OpenJPEG and OpenSSL are four typical examples.</p>

<p>Can I freely distribute the required libraries with my project as long as I include the related licensing documents and how does it influence my own licensing options? I would like to use a BSD licensing model.</p>
","<p>You have to make sure that <em>linking</em> to the library doesn't introduce incompatibilities/extra restrictions. I.e., according to the FSF, just arranging for the program to link against a GPLed library forces the whole to be distributed under GPL (there isn't consensus, nor binding legal precedents). Check he licences <em>carefully</em>, ask e.g. here for detailed analysis, and possibly retain a lawyer to look into the matter.</p>
","2262"
"Is a Web application ""released"" in the sense of GPL?","66","","<p>In the sense of GPL, is a Web application running on a private server without exposing its code considered ""released""? (or is the word ""distributed""?)</p>

<p>Therefore, if a GPL component is used in a Web application running on a private server without exposing its code, does this make the copyright holder of the application obliged to release its source?</p>
","<p>No.</p>

<p>From <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html#section0"" rel=""nofollow noreferrer"" title=""0. Definitions."">GPLv3’s <em>Definitions</em></a> section (bold emphasis mine):</p>

<blockquote>
  <p>To “convey” a work means any kind of propagation that enables other parties to make or receive copies. <strong>Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</strong></p>
</blockquote>

<p>So this <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html#section2"" rel=""nofollow noreferrer"" title=""2. Basic Permissions."">basic permission</a> applies:</p>

<blockquote>
  <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.</p>
</blockquote>

<p>Keep in mind that this doesn’t apply to parts of the Web app that run on the client side (e.g., JavaScript). </p>

<hr>

<p>For AGPLv3 it would be a yes (<a href=""https://opensource.stackexchange.com/q/650/138"" title=""Do I have to offer the source of an AGPL (v3.0) licensed Web app even if I didn’t modify it?"">if the software is modified</a>), which is exactly why it was made. While it contains the same definition as quoted above from the GPLv3, its <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html#section13"" rel=""nofollow noreferrer"" title=""13. Remote Network Interaction; Use with the GNU General Public License."">section 13</a> says:</p>

<blockquote>
  <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version […]</p>
</blockquote>

<p>In <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html#preamble"" rel=""nofollow noreferrer"">AGPLv3’s <em>Preamble</em></a>, it’s again stated that this is not the case for GPLv3:</p>

<blockquote>
  <p>The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p>
</blockquote>
","5318"
"Is there an authoritative, comprehensive list of licenses in use?","66","","<p>Where can I find a single, comprehensive list of known software licenses?  If possible, it would be useful if it covered both <a href=""https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses"" rel=""nofollow"">FLOSS licenses</a> and commercial (possibly closed-source) licenses, but it would be helpful even if it only covered FLOSS licenses.  I am currently aware of the following lists:</p>

<ul>
<li>Opensource.org's <a href=""https://opensource.org/licenses/alphabetical"" rel=""nofollow"">alphabetical list of licenses</a></li>
<li>The Linux Foundation's <a href=""https://spdx.org/licenses/"" rel=""nofollow"">SPDX License List</a></li>
<li>The Free Software Foundation's <a href=""http://www.gnu.org/licenses/license-list.en.html"" rel=""nofollow"">Various Licenses and Comments about Them</a></li>
<li>Wikipedia's <a href=""https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses"" rel=""nofollow"">""Comparison of free and open-source software licenses""</a> page</li>
</ul>

<p>There is some overlap, but also some differences between these lists, so it does not appear that any one list completely subsumes the others.  In addition, it's unclear how comprehensive they are.  (For a point of comparison, Black Duck states their knowledgebase ""<a href=""https://www.blackducksoftware.com/products/knowledgebase"" rel=""nofollow"">includes information on more than 2,400 unique software licenses</a>"", which must be more than are contained in the lists above.)</p>

<p>The information I'm looking for about each license is minimal: a name, an acronym (if there is one), a version, and a link to a page describing the license.  Licenses written in languages other than English are acceptable.</p>

<p>(In case it matters, my project is an open-source ontology effort.)</p>
","<p>The most comprehensive list of open source licenses and notices I know of is the one that I helped and help compile continuously for ScanCode <a href=""https://github.com/nexB/scancode-toolkit/tree/develop/src/licensedcode/data"" rel=""nofollow"">https://github.com/nexB/scancode-toolkit/tree/develop/src/licensedcode/data</a> 
It also contains the SPDX and opensource.org licenses. This is an open data set :)</p>

<blockquote>
  <p>The information I'm looking for about each license is minimal: a name, an acronym (if there is one), a version, and a link to a page describing the license. Licenses written in languages other than English are acceptable.</p>
</blockquote>

<p>These data are available as YAML files in ScanCode. The texts are plain texts.</p>

<blockquote>
  <p>(In case it matters, my project is an open-source ontology effort.)</p>
</blockquote>

<p>This is awesome! If you are still working on it, this is something that could eventually make sense in ScanCode proper?</p>

<p>As a side note you state:</p>

<blockquote>
  <p>Black Duck states their knowledgebase ""includes information on more than 2,400 unique software licenses</p>
</blockquote>

<p>To the best of my knowledge, they are listing not actual unique licenses but several minor variations of MIT and BSD as distinct licenses.
In ScanCode these variations are listed as ""rules"" or examples of notices if you prefer, not as licenses proper.</p>

<p>(Disclaimer: I am a co-founder of SPDX and a co-author of ScanCode)</p>
","2893"
"Splitting a project into copyright and copyleft","66","","<p>Say I've been working on this java project for over a year, and it's necessary for this project to reference a GNU GPL licensed software library somewhere in there, then the whole thing suddenly poof has to be GNU GPL.
I get it.
Software that references GNU licensed software has to be GNU as well.</p>

<p>What if this jar file has two functions. What if it can be loaded in via a classloader in external software, or executed.
Loading it in via classloader by external software will run the source that references the GNU GPL protected libraries, and therefore that software is GNU GPL.
Say it outputs a file called bob.txt and inside it says ""Hi, I'm bob"".</p>

<p>However, executing the jar file starts up a whole different package of code that never once references any of the GNU protected code.
It's a program all its own. But say it can also generate a file called bob.txt, or load in an existing bob.txt, and it gives you a nice GUI for modifying all the information about bob.</p>

<p>Could the classloader accessed packages of the software be licensed under GNU GPL and the executable accessed packaged given its own more restrictive license?</p>

<p>If the answer to that is yes, does that answer remain the same if you distribute the software compiled into a jar?
Keeping in mind that a jar is really not much different than a zip...?</p>

<p>Thanks for your consideration.</p>
","<blockquote>
  <p>Software that references GNU licensed software has to be GNU as well.</p>
</blockquote>

<p>That's not exactly true always, but in the case of a Java app calling code from a GPL-licensed Jar in the same process, that would likely be true.</p>

<blockquote>
  <p>Could the classloader accessed packages of the software be licensed under GNU GPL and the executable accessed packaged given its own more restrictive license?</p>
</blockquote>

<p>If this runs in the same JVM process, no classloader trick would work to try to escape the GPL, especially if this is shipped in a single JAR.</p>

<p>Now if you have an app bundled as a Jar that requires some class named Foo with a function named bar, then you could very much have two JARS versions of this Foo.bar and setup your classpath to use either one at runtime. When you bundle the GPL version, the whole code is eventually subject to the GPL, otherwise it may not apply.</p>

<p>Again in the case of the JVM, the key test for me is ""same JVM process or not"". And furthermore there is a presumption that this runs in the same process and is designed to so when bundling in the same JAR.</p>

<h1>Update</h1>

<blockquote>
  <p>They utilize separate JVM processes and do not interact with each other during runtime, but the classloader accessed code that references GPL licensed software is bundled within the same jar as the separate executable accessed code. Given this: gnu.org/licenses/old-licenses/… Would you say the statement here presumes that they share a JVM, and the fact that in my circumstance they do not makes it an exceptional case?</p>
</blockquote>

<p>Even though there is no such think as static linking in the JVM, I would consider bundling GPL-licensed and proprietary code similar to static linking (or LGPL-licensed code for that matter with not so different implications).</p>

<p>Now in your cases you run two processes each with their own isolated JVM, therefore  my advice is to have a clear separation of concerns:</p>

<ol>
<li><p>one JAR that embeds GPL-licensed code and only GPL-compatible code and is treated overall as GPL-licensed</p></li>
<li><p>another JAR without any GPL-licensed code.</p></li>
</ol>

<p>And run each on their own spawned in two separate processes, e.g. two different command line runs.</p>
","6282"
"Web service licensed under AGPL - distribution","66","","<p>Our application currently has a licence which is not compatible with AGPL. We need to use a library licensed under AGPL (currently the best one for the job and the client would like us to use it).</p>

<p>We thought about creating a web service using this library and we would license it under AGPL. Our application would directly depend on it to function properly. We wanted to create two svn repositories, one for the main project and one for the web service AGPL. To install our application, one would need to retrieve the code from both repositories, compile and run the applications.</p>

<p>Does that count as a derivative work? Both source codes are open and publicly available. The main project needs to keep its license and cannot be licensed under AGPL.</p>

<p>The web service can work as-is. One can just use it without the other project, it is just kind of useless since the web service validates metadata with rules only valid for the main project. The web service has default config files valid only for the main project but they can all be replaced by something completely unrelated. The main problem is that the web service contains default files which make me think that it is potentially a derivative work and if my main project uses this web service, it will be forced to be AGPL to be able to use the web service.</p>

<p>Maybe that makes a different but the library AGPL is only used and not changed.</p>

<p>Does anybody have an idea if I can use this AGPL web service and keep my license on the main project? If that's not the case, I will need to create another web service with a compatible license and keep the AGPL web service for internal use only.</p>
","<p>I assume a technical trick (like your web service idea) to avoid the intent of the license wouldn't work. But your assumption about compatibility is wrong.</p>

<p>The EUPL (you stated in your answer that that is the licence your project is under) has statements of compatibility that work with the AGPL:</p>

<ul>
<li>EUPL v1.1 states compatibility to CeCILL v2.0, which states compatibility to GPL v2 or later and GPL v3 states compatibility to AGPL v3.</li>
<li>EUPL v1.2 states compatibility to AGPL v3.</li>
</ul>

<p>You only need to comply with both licenses, not change your projects license.</p>

<p>If both EUPL and AGPL licensed code were distributed together a potential licensee may discard the AGPL code if they wish to only comply with the license of the rest of the code.</p>

<p>You may not convert AGPL to EUPL, i.e. you are not allowed to distribute a combination and tell your licensee only about the EUPL. The EUPL states how to do the conversion to other licenses via the compatibility mentioned above. What I called conversion here is an additional step that you don't need to do.</p>
","5536"
"What makes a FOSS project survive its initial critical stage?","66","","<p>We now know that Linux is famous and all, so contributing to the kernel project is the best thing to do, but my question is about the history. The version one of linux was nothing but a small program written by Torvalds to learn about OSs. The people who then started contributing code did so selflessly without any regard for money, but apparently out of academic interest and a respect for its founder, Linus. But then, Linus wasn't as popular at that time as now, was he? Nor was he a dictator whom everyone was obliged to obey. Then what made people obey him? In other words, I am trying to search that one vital ingredient that makes a FOSS project take off and survive its initial critical stage. The critical stage is very important as many FOSS projects don't take off and just wither away in this stage (Github is full of many such projects).</p>

<p>Almost the same thing could be said about Guido Van Rossum with regard to the Python project.</p>
","<p>Eric Raymond once wrote:</p>

<blockquote>
  <p>Every good work of software starts by scratching a developer's personal itch.</p>
  
  <p>(from <a href=""http://catb.org/~esr/writings/cathedral-bazaar/"">catb.org/~esr/writings/cathedral-bazaar/</a> )</p>
</blockquote>

<p>And that's pretty much the gist of it. Almost all successful FOSS projects began because they <strong>solved a specific problem</strong>, whether that's an individual developer as <a href=""https://en.wikipedia.org/wiki/Eric_S._Raymond"">ESR</a> wrote, or an individual organisation. From there, these projects grew and became big because <strong>many people shared that specific problem, and it's easier to solve that problem together than starting out alone.</strong></p>

<p>This is how Linux grew out of humble origins. Recall the very first announcement of Linux:</p>

<blockquote>
  <p>Hello everybody out there using minix -</p>
  
  <p>I'm doing a (free) operating system (just a hobby, won't be big and
    professional like gnu) for 386(486) AT clones.  This has been brewing
    since april, and is starting to get ready.  I'd like any feedback on
    things people like/dislike in minix, as my OS resembles it somewhat
    (same physical layout of the file-system (due to practical reasons)
    among other things).</p>
  
  <p><strong>I've currently ported bash(1.08) and gcc(1.40), and things seem to work.</strong>
    This implies that I'll get something practical within a few months, and
    I'd like to know what features most people would want.  Any suggestions
    are welcome, but I won't promise I'll implement them :-)</p>

<pre><code>            Linus (torvalds@kruuna.helsinki.fi)
</code></pre>
  
  <p>PS.  Yes - it's free of any minix code, <strong>and it has a multi-threaded fs.</strong>
    It is NOT protable (uses 386 task switching etc), and it probably never
    will support anything other than AT-harddisks, as that's all I have :-(.</p>
</blockquote>

<p>Despite having severe shortcomings (i.e. only usable on 386, can only use <a href=""https://en.wikipedia.org/wiki/Parallel_ATA"">AT</a> hard disks, <strong>it was already minimally useful.</strong> Having bash and GCC is significant; it means people can tinker with it via the commandline, and compile and run real programs on it already. Soon enough a handful of contributors added things like more hardware support, improved modules and so on. Distributions like Slackware and Debian sprung up making it even easier for people to use Linux. Meanwhile folks in the Free Software world, notably GNU, developed a symbiotic relationship with Linux: free software made Linux more useful, and Linux was a free kernel that could run free software without having to purchase obscenely expensive UNIX licenses.</p>

<p>So really the success of Linux could not be distilled down to one factor; it was a confluence of things that went right with it:</p>

<ul>
<li><strong>Writing an OS from scratch is hard.</strong> At the time, perhaps less than 100 people in the world were capable of doing what Linus did. Linus was brilliant and obsessed, and had loads of spare time being a University student, but it still took him months of hard work to get to something useful. Anyone wanting to work on a free OS would have to replicate all that hard work. <strong>It was much easier to help Linus with Linux than to start from scratch.</strong></li>
<li><strong>Linux came at a time with just the right infrastructure.</strong> Linus <a href=""http://gondwanaland.com/meta/history/interview.html"">credits</a> the internet and available GNU utilities like GCC as crucial for the early success of Linux. Without these, he wouldn't have had easy access to contributors to test and write new code.</li>
<li>Perhaps most importantly, <strong>Linux scratched the itches of many many people</strong>. At the beginning, Linus wrote Linux due to being dissatisfied with MINIX. It just so happens that MINIX had many dedicated users (the comp.os.minix newsgroup had >40,000 users worldwide), who had similar dissatisfactions with it. <strong>The first version of Linux was released into a large and receptive userbase</strong>. As more people contributed patches to Linux, it became more useful and to more people, so the whole thing snowballed. <strong>People who wanted to use a free UNIX could use Linux</strong>, whereas other variants were either super expensive or <a href=""https://en.wikipedia.org/wiki/Berkeley_Software_Distribution#Net.2F2_and_legal_troubles"">legally ambiguous</a>. Many people in the GNU community, who were working on a free OS for a long time, flocked to Linux as <a href=""https://en.wikipedia.org/wiki/GNU_Hurd"">GNU's own effort</a> went nowhere.</li>
</ul>

<p>So now you can see why Linux is one-of-a-kind; its success would be extremely hard to replicate.</p>

<p>A lot of FOSS projects don't grow beyond its founder for a few reasons:</p>

<ul>
<li><strong>It doesn't solve a problem.</strong> An obvious way to prevent this is to follow ESR's advice; make sure the project at least solves <em>your</em> problem; this guarantees that the project will have at least one dedicated user: you. But even so, the project could fail because it doesn't solve that problem well, because the problem is hard. Linux definitely fits this; writing an OS from scratch is hard, but fortunately Linus had the right knowledge and motivation.</li>
<li><strong>It doesn't solve other people's problems.</strong> This is probably by far the biggest reason why projects fail; there is simply no demand for it. Perhaps you're the only user who has the problem, or there's so many competing solutions that no one needs to use your solution. Linux was extremely lucky in this regard; its competitors were either expensive or useless, and it inherited a userbase with voracious demand for it.</li>
<li><strong>It solves the wrong problem than you think.</strong> There's a lot of unsuccessful, minimally-useful FOSS projects out there. I suspect many were started for the wrong reasons: often these are <strong>vanity projects</strong>; the author wants their own version just so they can say they wrote it, or the alternatives have the wrong colour or shape or whatever. If the problem is vanity, by definition, these projects can't solve other people's problems.</li>
<li><strong>It solves the problem too well.</strong> If the problem is small and self-contained enough, there's a point where the problem becomes <em>solved</em> and there is no need for further development. For FOSS, this means people can just take the project's code, incorporate it into their codebase and call it a day. Think about small parsers, algorithms and so on. Many of them existed as separate projects at one point.</li>
</ul>

<p>It's ok to have lots of unsuccessful projects. In most cases, it's not because they did something <em>wrong</em> (in which case, someone could just fork it, do it <em>right</em>, and become successful). The success of projects depends so much on factors outside their control (market demand, timing, the nature of the problem).</p>
","2560"
"Can I relicense software under the modified zlib licence?","65","","<p>In this <a href=""https://github.com/BlockMen/cme/tree/v2.3.1"" rel=""nofollow noreferrer"">project</a>, the README says:</p>

<blockquote>
  <p>Code(if not stated differently):</p>
  
  <p>(c) Copyright 2015-2016 DeveloperOne; modified zlib-License see ""LICENSE.txt"" for details.</p>
</blockquote>

<p>And zlib license says:</p>

<blockquote>
  <p>This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.</p>
  
  <p>Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:</p>
  
  <ol>
  <li><p>The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this
  software in a product, an acknowledgment in the product documentation
  is required.</p></li>
  <li><p>Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.</p></li>
  <li><p>This notice may not be removed or altered from any source distribution.</p></li>
  </ol>
</blockquote>

<hr>

<p><strong>Can I relicense the new code under another license if I maintain the actual notice plus the new notice?</strong></p>

<p>Ex:</p>

<blockquote>
  <p>Copyright (c) 2015-2016 DeveloperOne (modified zlib-license for code, if not stated differently)</p>
  
  <p>Copyright (c) 2017 DeveloperTwo (new license for code)</p>
  
  <p><em>zlib notice</em></p>
  
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad...</p>
  
  <p><em>new license notice</em></p>
  
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad...</p>
</blockquote>
","<p>Yes, you can relicense this software. The LICENSE.txt file in the repository you link to is the notice referred to. You can modify this file to add your own copyright statement and your own license statement, as long as you preserve the current contents. Indeed, by doing so, you would be respecting all the conditions of the license.</p>
","5300"
"Convert Apache 2.0 code to BSD 3-clause","65","","<p>It is similar to <a href=""https://opensource.stackexchange.com/questions/1357/can-i-link-a-apache-2-0-library-into-software-under-gplv2"">this</a> question, just this time code which is licensed under Apache 2.0 gets linked into code I have written, which is under the BSD 3-clause. Both are open-source, but I wanted to give the licensed code a unique license to not confuse people as I will  put the app on github. So I would like to convert apache2.0 code-sections to <a href=""https://opensource.org/licenses/BSD-3-Clause"" rel=""nofollow noreferrer"">BSD 3-clause</a>.  <br><br>
Up to now I put ahead of the code first my BSD3cl header and then the Apache2.0 header which was already there. Furthermore I mark changed lines inside the Apache2.0 code, which I edited myself (this is what Apache2.0 tells me to do). So altogether I want to remove Apache2.0 and put all the code under BSD3cl. .</p>

<pre><code>//BSD-3-clause template (where all the restrictions go etc)
//Already existing Apache 2.0 template

//my code
//origianl apache code
//origianl apache code modified ( I did change this and that)
//my code
//my code
</code></pre>

<p>What are your thoughts on this, as I dont have experience yet with licensing in general.</p>
","<p>You can not change the license on code you did now write (more precisely, not own).</p>

<p>If you combine code distributed under different licenses, the result must be distributed under the license that is more restrictive (the one that allows less), as you must comply with both.</p>

<p>The BSD licenses are nearly maximal permissive, Apache somewhat less. If you can distribute the result of combining Apache + BSD, it is under Apache only.</p>
","2577"
"For applications using the paid/community model, why not just fork?","65","","<p>Some applications made by commercial companies employ a paid/community model for their software, meaning that you can use the open-source ""community"" version with less features, or you can purchase a license to use the ""paid"" version, which is based on the community version and includes more features. (Think IntelliJ IDEA Community vs IntelliJ IDEA Ultimate)</p>

<p>I am wondering that if the source code for the community version is freely available and licensed, why don't users just fork the community version and implement the ""ultimate"" features on their own?</p>
","<p>The paid features can sometimes be burdened by patents or other legal issues which makes it impossible to clone them as free software. But the value in the paid version is often not just the additional features. </p>

<ul>
<li>The paid versions often come with a support contract. You can of course often also get a separate support contract for the community version, but that contract will rarely cover any issues with the 3rd party modules which replicate the functionality of the paid version.</li>
<li>Sometimes the license conditions of the paid version allows stuff the community version does not. For example, make and distribute modified versions which don't need to be open source.</li>
<li>The paid version might have various certifications the community version does not. From a technical standpoint this might sound of questionable value. After all, if the paid version is certified to be ""compatible with system  XY"" and/or ""compliant with government regulation ZY-343-2012"", then the same will apply to the completely identical community version. But there are certain industry sectors where such formalities are mandatory for one reason or another. Paying the paid version can be cheaper than getting your own certification for your deployment of the community version.</li>
</ul>
","4800"
"How can a GPLv2 dependency affect licensing of adjacent components that form an aggregate project?","65","","<p>I've read some of the GPL questions on here that seem relevant, but I haven't found an understandable answer for my particular case. I'll note them here for reference.</p>

<ul>
<li><a href=""https://opensource.stackexchange.com/questions/4389/when-does-a-dependency-imply-a-derivative-work"">When does a dependency imply a derivative work?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/5188/software-if-i-bundle-built-compiled-gpl-2-licensed-software-with-commercial-s"">Software: If I bundle built (compiled) GPL 2 licensed software with commercial software package how does it affect my software license?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/6034/how-should-i-mark-a-source-file-with-gplv2-as-a-derivative-work"">How should I mark a source file with GPLv2 as a derivative work?</a></li>
<li><a href=""https://opensource.stackexchange.com/questions/4780/can-license-incompatible-program-communicate-with-gplv2-program-via-websocket"">Can license-incompatible program communicate with GPLv2 program via websocket?</a></li>
</ul>

<p>I've also read <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">this</a>, which seems relevant.</p>

<p>Hopefully this is not a duplicate.</p>

<h1>Background</h1>

<p>I have a project that's mostly written in C with many dependencies. Many are MIT, some ISC, some custom, and some GPL with special exceptions.</p>

<p>I want the project to have a permissive license. I'd like to be able to allow people to use parts of my project for proprietary applications without being affected by things like GPL. To do that, my thought was to decouple invasive dependencies such as GPL from select parts of my work.</p>

<p>The project is comprised of multiple components.</p>

<h3>MyLib (author: me)</h3>

<ul>
<li>A custom library that can be shared OR static depending on platform.</li>
<li>It only depends on projects with permissive licenses.</li>
<li>It implements a REST API that takes in (and returns) data types of its own definitions which don't depend on any restrictive licenses.</li>
</ul>

<h3>MyServer (author: me, but depends on a GPLv2 project)</h3>

<ul>
<li>A server application that depends on a GPLv2 networking stack.</li>
<li>I have not made modifications to the networking stack source code.</li>
<li>The network stack source is compiled directly into the server program.</li>
<li>The server also uses MyLib as a dependency, but this dependency does not utilize any of the facilities from the network stack. The reverse is also true. Instead, it is the server application's responsibility to transform data from the networking stack into primitive data types that can be consumed by MyLib without exposing any implementation details of the GPLv2 project, and vice-versa.</li>
</ul>

<h3>MyClient (author: me)</h3>

<ul>
<li>A web client with no dependencies which talks to MyServer and utilizes the REST API as defined by MyLib.</li>
<li>As mentioned before, the logic and data structures for the REST API is defined in MyLib which is agnostic to the server implementation.</li>
</ul>

<p>The idea is that the server implementation could use ANY framework and the client/library on each end wouldn't care. The middleman is completely opaque to them.</p>

<h1>Questions</h1>

<ol>
<li>Can I have a separate, more permissive license for MyLib and MyClient?</li>
<li>Does static linkage between MyLib and MyServer change how the GPLv2 license applies to distributed binaries?</li>
<li>What happens if I or some user of this project <em>does</em> modify the GPLv2 network stack?</li>
<li>Would the following project structure comply with the GPLv2 license?</li>
</ol>

<pre>
    my_project_repo/
      server/
        LICENSE.txt - GPLv2
        server.c - MyServer which includes network.c and abitrarily links to MyLib 
      client/
        LICENSE.txt - Whatever
        index.html
      lib/
        LICENSE.txt - Whatever
        mylib.c - MyLib
      extern/
        network_project/
          LICENSE.txt - GPLv2
          network.c - Networking stack
</pre>

<p>My intuition says that this situation is making myself the user of a dependency I made. This means the same rules apply to my other permissive dependencies. That is, it doesn't make sense to say a project with the zlib license becomes GPL just because someone out there compiled it into a project that also includes a GPL project.</p>

<p>I believe this means that MyServer becomes treated as the ""default"" server implementation. The restriction on users who wish to use a server component for proprietary purposes would be that they need to reimplement the server using MyLib and a different networking framework to evade the GPL license.</p>

<p>Is that a correct assumption?</p>
","<p>I'm not a lawyer, and this is not legal advice.</p>

<blockquote>
  <p>Can I have a separate, more permissive license for MyLib and MyClient?</p>
</blockquote>

<p>Absolutely, you said they dependencies of MyLib have permissive licenses. I assume you are referring to the MIT &amp; ISC license types here. For these two licenses you just need to convey the copyright and license information to be compliant.</p>

<blockquote>
  <p>Does static linkage between MyLib and MyServer change how the GPLv2 license applies to distributed binaries?</p>
</blockquote>

<p>Yes. If you are distributing a binary in which MyServer has statically linked (would also apply to dynamic linking too) in MyLib, then the combined work is licensed under the GPL2. Hence, you would have to treat both MyLib and MyServer as licensed as GPLv2 if you are distributing the binaries of the two things linked together. If you are only distributing the source, you are free to license MyLib under a license that is compatible with the permissive licenses that it depends on.</p>

<blockquote>
  <p>What happens if I or some user of this project does modify the GPLv2 network stack?</p>
</blockquote>

<p>If you distribute the binary that has included a modified GPLv2 network stack, then you must also distribute the source that includes these network stack changes. It's important to note which files you have modified if you care about your copyright. Supplying the modifications via a patch file would be an appropriate way to convey your changes.</p>

<blockquote>
  <p>Would the following project structure comply with the GPLv2 license?</p>
</blockquote>

<p>Sure, that structure could comply with the GPLv2 terms and conditions, but you run the risk of licensing cross contamination by placing differently licensed software in the same repository. Just be careful that MyLib doesn't accidentally start using headers and other source files from MyServer. If MyLib starts using components from MyServer, you may end up having to license MyLib under the GPLv2. I think your structure is fine as long as you have the diligence to make sure your permissively licensed software isn't using the code from the more restrictive GPLv2 components. Personally, I would make it a configure time option to specify which library MyServer links to, if that is applicable in this case. That makes it a little more clear that MyServer and MyLib are distinct components. Putting them in separate repositories may also help prevent any confusion or contamination.</p>

<p><strong>UDPATE</strong></p>

<blockquote>
  <p>MyServer compiles server.c and network_stack.c into an executable. [note: depends on a GPLv2 project] This executable uses headers from MyLib and links to it. On MacOS builds it links statically. On Windows and Linux it links dynamically. MyLib is irrefutably a distinct component. It's still very confusing what the distinctions are between GPL compliance as a project that's broken into several components, and creating a binary release of the project. Does the GPL ""infect"" MyLib even if someone rips it out and uses it in a separate project, or only if they're building/releasing MyServer with MyLib as a component?</p>
</blockquote>

<p>NB: there is no ""infection"" in the GPL. There are permissions and conditions instead. The same way that when you buy a commercial license for a proprietary ware, this does not ""infect"" your wallet: it only makes it lighter ;)</p>

<p>Things are therefore simple: whether this is dynamic or static linking does not matter to the GPL. Whether MyLib shared library is build as a distinct component does not matter either.</p>

<p>What matters is that MyServer and MyLib collectively depend on a GPL-licensed component that will run in the same process at run time and therefore the GPL applies to this runtime combo.</p>

<p>When used separately and without this GPL dependenency, the GPL does not apply.</p>
","6284"
"Is it OK to upload someone else's code to NPM?","65","","<p>Per user recommendation, this question is based on <a href=""https://stackoverflow.com/questions/46156242/is-it-ok-to-upload-someone-elses-code-to-npm?noredirect=1#comment79274216_46156242"">an SO question</a>.</p>

<p><a href=""https://github.com/backspaces/asx"" rel=""noreferrer"">ASX</a> is a cool library I use for some of my projects, but it is not available on NPM.</p>

<p>I filed an issue on the GitHub repo asking to make it available on NPM, but I'm curious in theory what if the issue just sits there or is rejected?</p>

<p>The specific library is under the GNU GPL if it matters.</p>

<p>Since my machine's NPM profile shows I am the author of packages I upload, is it unethical to upload someone else's code? Or is it sufficient to credit them in the package description?</p>

<p>Per the NPM docs you can have multiple owners and supposedly there is only one level of access, but on the module page these people are listed as publisher and collaborators. This part is not clear to me from the publish docs... Is publisher the most recent publisher or is it the original publisher and everyone else is a collaborator?</p>
","<p>The <a href=""https://docs.npmjs.com/policies/conduct"" rel=""noreferrer"">conduct page</a> of the npm docs says:</p>

<blockquote>
  <p>Packages must not contain illegal or infringing content. You should only publish packages or other materials to the Service if you have the right to do so. This includes complying with all software license agreements or other intellectual property restrictions. For example, redistributing an MIT-licensed module with the copyright notice removed, would not be allowed. You will be responsible for any violation of laws or others’ intellectual property rights.</p>
</blockquote>

<p>So publishing someone else's package  would be permitted as long as you comply with the license.</p>

<p>The ""publisher"" is whoever uploaded the last version.</p>
","5979"
"Licenses compatibility with EPL","65","","<p>My software is a static analysis tools for old languages. I'm currently writing new tests and I wanted to use some files from open-source projects on GitHub. However, I'm kind of lost with licenses compatiblity in my case.</p>

<p>My software is licensed under Eclipse Public License. I wanted to use files from project using MIT and GPL v3 licenses. My software will not execute the piece of codes from other project but just read it when testing.</p>

<p>I would like to distribute the test on my GitHub project. </p>

<p>Can I use some random files under theses licenses or is it incompatible with mine?</p>
","<p>Say for instance you use either the proprietary Microsoft Office or the FOSS LibreOffice. </p>

<blockquote>
  <p>Can you read any document regardless of the document license (some of which have a CC license, some GPL, some MIT, some confidential/proprietary) and process and print it? </p>
</blockquote>

<p>Yes, sure!</p>

<blockquote>
  <p>And will this impact the licensing of the proprietary Microsoft Office or the FOSS LibreOffice tool you use to read these files?</p>
</blockquote>

<p>The answer is no. </p>

<blockquote>
  <p>Will these files keep their original licenses?</p>
</blockquote>

<p>Yes!</p>

<p>So in you case:</p>

<ol>
<li>you can use test data files under any license that allows redistribution</li>
<li>this does not impact the licensing of your code</li>
<li>each test data file stays under its original license and you should document their origin and license properly (including adding copyright, license notice and texts as needed) for each file. </li>
<li>For clarity to your users, you can provide a note explaining that these files are test files and use multiple licenses, as documented and are not part of the primary code of your tool. </li>
</ol>
","5823"
"What happens when a corporate sponsor goes bust?","65","","<p>Many of the larger open source projects receive serious backing from one or more Corporate sponsors. </p>

<p>Depending on CLA's and the license chosen, if contributions were made by engineers during their working hours (i.e. as part of their job) the copyright on those corporations belongs to their employers, not the individuals. The individuals might not even have the legal authority to assign the copyright via a CLA.</p>

<p>A <a href=""https://opensource.stackexchange.com/questions/549"">similar question</a> deals with accessing and forking the original source code. But this situation is slightly different.</p>

<p>In addition to complications over the copyright (perhaps another company purchases the assets of the failed one), the loss of the sponsor might also imply the loss of</p>

<ul>
<li>Extensive web infrastructure for hosting, distribution, and support</li>
<li>A large pool of contributors who are no longer being paid to contribute</li>
<li>Some large users, who perhaps had commercial support agreements, or simply lose confidence in the project once its backers depart.</li>
</ul>

<p>So what happens to a large, popular OS project when its major corporate sponsor goes bust, taking all the above with it?</p>
","<p>This situation is one major strong point in comparison to closed source software. While nobody can claim the copyright anymore and therefore the license must be kept unchanged, the software can still be maintained and developed, as this is one basic right gained through open source. It may even happen the same developers work on it.</p>

<p>It isn't exactly the same, but as Ulf Michael Widenius (the original developer of MySQL) became unhappy with the development of MySQL he forked the software and still develops the fork as MariaDB. The same can happen if the copyright-holder ceases functioning, a fork still is possible. It may be needed to change project-name though (depending on the license).</p>

<p>There still may be some disruption from the changes and it isn't guaranteed a new development team will form to keep developing the software. Also the missing money from the corporate developer may lead to smaller development. But the Software survives and can be still maintained.</p>
","644"
"Am I allowed to use these gifs for my game?","64","","<p>I am a game developer and while searching for assets to put in my game I stumbled across this website. I came across <a href=""http://www.animatedimages.org"" rel=""nofollow"">this website</a> and the FAQs were not clear on whether or not I can use the the assets for my game. There wasn't a license said on the website. Here are my reasons for both sides:</p>

<p><strong>Yes</strong></p>

<ol>
<li>I can use the assets for ""your business,"" meaning I can put them in my game.</li>
<li>I am allowed to use them for Websites, Blogs, Forums, Social Networks, and Guest Books.</li>
<li>This website did come when I searched for ""animated fire gif cc0.""</li>
</ol>

<p><strong>No</strong></p>

<ol>
<li>I am not allowed to use them in ""image archives"" or ""image collections.""</li>
<li>I am not allowed to use the use the graphics ""commercially through reproduction.""</li>
</ol>

<p>Honestly, I am terrible when it comes to licenses. Can anyone give me advice?</p>
","<p>I consider most anything to be copyrightable and therefore copyrighted as they are.</p>

<p>Images are copyrightable and therefore you cannot use these images without a proper license. If the license is not clear and explicit and allows the type of usage you plan in your game, you cannot use these images.</p>

<p>Per <a href=""http://www.animatedimages.org/help.htm"" rel=""nofollow noreferrer"">http://www.animatedimages.org/help.htm</a> animatedimages does seem to grant some usage right that I could interpret as some open source license of sorts. At the same time, they (the animatedimages site) may not even have clear rights to some images as they state on their help page:</p>

<blockquote>
  <p>Where do your graphics come from?</p>
  
  <p>All graphics offered by us have either been provided by our users or they were created or collected by our team. For images uploaded by our users, we have no control over the content. This applies both to the text and the graphics. If certain graphics or greeting cards infringe copyright laws or fail to meet our internal guidelines, please send us a quick note via mail.</p>
</blockquote>

<p>Therefore, you are a bit between a rock and a hard place:</p>

<p>You could ask animatedimages for a clear open source license to some animated images to use in your game. But at the same time, they may not have clear rights to these and no ground to license these to you if they do not ""own"" them.</p>

<p>Your best course of action would be to contact them and/or consider an alternative source of media assets for your game.</p>
","4576"
"Can I license my code by providing a link to the license instead of the full text?","64","","<p>As a person who wants to allow other people to use my code, I want to use a standard, proper license. But sometimes my code ends up being smaller than the LICENSE file that comes with it. This can especially annoying if I write a code snippet and want people to actually use it. I don't especially like the idea of copying and pasting 196 words of the MIT License, and then 30 words of the actual code itself. That just sounds absurdly wasteful.</p>

<p>Could I just mention that my code is under the MIT License (or any license for that matter) and then simply give a person the link to that license, so they can look at its terms and conditions?</p>
","<p>Well, basically it has to be very clear which license you use and the license text must be available. Usually it means that a file with the license text is put into the project and the files are marked that they use the license (a short comment like this: this is licensed under MIT License, see file LICENSE). Some tend to copying the full license text into each file of the project, which seems overkill.</p>
","2335"
"Double licensing my GPLv3 project without having a Contributor License Agreement","64","","<p>Suppose I start a GPLv3 licensed project.</p>

<p>I take care of pasting all the license text is in the LICENSE.txt and set up a reference to it on top of every source file.</p>

<p>I do not exhibit any CONTRIBUTING.txt or a Contributor License Agreement (CLA) in any form.</p>

<p>I merge a few large pull requests</p>

<p>Now I want to double-license the code (take my project's GPLv3 code and sell it under a commercial license while keeping it under GPLv3 for non-customers)</p>

<p><strong>Am I breaking GPLv3?</strong></p>

<p>I thought so, but when you read the paragraph 11 of GPLv3 it says:</p>

<blockquote>
  <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p>
</blockquote>

<p>This looks an awful lot like a CLA embedded in the license.</p>

<p><strong>Does this mean I can double-license? Or do I need all contributors' permission?</strong></p>

<hr>

<p><strong>EDIT</strong> 
Very clear, thanks everyone!
FYI I have decided to rewrite my project from scratch in another language because I can't get the contributors to sign anything.</p>
","<p>The paragraph you quoted is only about the <em>patent</em> grant, this is mostly unrelated to copyright issues.</p>

<p>You cannot dual-license the project without obtaining permission from <em>all</em> contributors, because you are no longer the sole copyright owner. What happened is this:</p>

<ul>
<li><p>You created a project. As you wrote everything, you were the sole copyright holder. You licensed it to the public under the terms of the GPL.</p></li>
<li><p>A contributor modified the project. The modifications are copyrighted by that contributor. But since they received the code under the GPL license, they may only publish their changes under the GPL.</p></li>
<li><p>You merged the contributor's changes. The project copyright is now shared between you and the contributor. Because the contributor was only able to publish these changes under the GPL, you received their modifications under the term of the GPL license and are bound by that license.</p></li>
</ul>

<p>Because you received the modified code under the GPL, you can't just publish it in violation of the GPL. </p>

<p>What is possible is to get all copyright owners to agree to relicense the project. If they don't have a strong stance on copyleft licensing, they might agree to relicense to a permissive license (e.g. Apache License 2 or X11 (MIT) license). But what is in it for them? They don't have any particular reason to let you have less restricted access to their work. And if even one contributor says no or doesn't respond, you cannot proceed with the relicensing. Or you can perhaps find an older version where all contributors leading up to that version agree to the relicensing, and then reset your project to that version. But that means any progress since then stays under the GPL and is lost to your relicensing effort.</p>

<p>You can still monetize GPL software. You can't reasonably sell it (because they could just get the code for free), but you can sell services around this code: implementing customizations, training, hosting.</p>
","5598"
"Dynamic linking, bundling, and GPL","64","","<p>I have a code that is dynamically linked to a GPL library. When I distribute my code in binary form, I do not distribute it with the GPL library, and provide instruction for the user to acquire this external library.</p>

<p>Is my code required to be GPL ?</p>

<p>I know the topic is debated (<a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License#Linking_and_derived_works"">https://en.wikipedia.org/wiki/GNU_General_Public_License#Linking_and_derived_works</a>), but I wanted to know wether bundling the GPL library during distribution is a relevant factor or not.</p>
","<p>EMBLEM writes as if the matter were definitively resolved, but the honest answer is that noone knows.  <strong>If</strong> dynamic linking makes a derivative work, <strong>then</strong> you are indeed required to publish your code under the GPL.  <strong>If</strong> it doesn't, <strong>then</strong> you may publish your code under any licence you like; moreover, you may distribute the GPL library along with your application as <em>mere aggregation</em>, provided that you comply with the GPL's obligations with respect to the GPL library.</p>

<p>Whether dynamic linking makes a derivative work is, of course, the important question.  <a href=""https://opensource.stackexchange.com/a/2831/458"">My earlier answer here</a> addresses the question in more detail, but the upshot was - and remains - that until courts of significance start ruling on this issue, we don't know for sure what constitutes a derivative work.</p>

<p>FAOD, let me be clear: I think the GPL is a good licence, and you will certainly simplify your position - and enrich humanity - if you decide to licence your work under the GPL also.  But whether you are <em>required</em> to do so is not yet as cut-and-dried as some would have you believe.</p>
","4293"
"How to include a license and copyright notice into a website","64","","<p>I have a website and I'm using a library that is licensed under the Apache License 2.0. </p>

<p>Where should I place the notice? </p>

<p>Should I create a file named <code>Notice</code> in the root of the website? Or add it as a comment in every webpage?</p>
","<p>Better to create a file named <code>Notice</code> in the root/homepage of the website. At least that's what I did after researching the situation. See the top of my homepage <a href=""http://www.forkosh.com"" rel=""nofollow noreferrer"">http://www.forkosh.com</a> where it says ""...and <code>Terms and Conditions</code> enumerates your conditions of use"". You can then click that <code>Terms and Conditions</code> link on my homepage to read all the legal gobbledy-gook on <a href=""http://www.forkosh.com/terms.html"" rel=""nofollow noreferrer"">http://www.forkosh.com/terms.html</a> (By the way, feel free to use any of that terms-and-conditions gobbledy-gook you like. At the time I wrote it, in the late 1990's, I did some research trying to establish appropriate terms-and-conditions of use while simultaneously avoiding any possible liabilities myself. And while I'm no lawyer, my father, brother and ex all are, so I know a lot of lawyer-types.)</p>
","6341"
"Projects which require copyright assignment from contributors?","64","","<p>I read the following in <a href=""http://zguide.zeromq.org/page:all"" rel=""noreferrer"">ØMQ - The Guide</a> (in Chapter 6, in the section <em>Licensing and Ownership</em>):</p>

<blockquote>
  <blockquote>
    <p>All patches are owned by their authors. There SHALL NOT be any copyright assignment process.</p>
  </blockquote>
  
  <p>Here we come to the key reason people trust their investments in ZeroMQ: it's logistically impossible to buy the copyrights to create a closed source competitor to ZeroMQ. iMatix can't do this either. And the more people that send patches, the harder it becomes. ZeroMQ isn't just free and open today—this specific rule means it will remain so forever. Note that it's not the case in all GPL projects, many of which still ask for copyright transfer back to the maintainers.</p>
</blockquote>

<p>I don't understand the last sentence: how can a GPL project ask for copyright transfer back to the maintainers?</p>

<p>Can you give any example[s] of [a] GPL project[s] which do[es] that?</p>

<p>What is a contributor's incentive to make such a copyright transfer to ""the maintainers""?</p>

<p>Is this topic (a requirement for copyright assignment) inevitably caused by the maintainers wanting to dual-license the software?</p>
","<p>Many projects do this, typically with the help of a CLA (<a href=""https://en.wikipedia.org/wiki/Contributor_License_Agreement"" rel=""noreferrer"">Contributor License Agreement</a>).</p>

<p>Possible reasons for doing this (there might be more):</p>

<ul>
<li>The project owner can change the license without having to ask every contributor for permission. This includes multi-licensing. And it would even be possible to make it proprietary.</li>
<li>The project owner can legally enforce the license without having to coordinate with, and involve, all affected contributors.</li>
</ul>

<p>See for example FSF’s reasoning: <a href=""https://www.gnu.org/licenses/why-assign.en.html"" rel=""noreferrer""><em>Why the FSF gets copyright assignments from contributors</em></a></p>

<p>There are many different forms of CLAs. You don’t necessarily have to assign/lose your copyright, and you could exclude certain things (e.g., to prevent that the software becomes proprietary). </p>

<p>See for example FSFE’s <a href=""http://fsfe.org/activities/ftf/fla.en.html"" rel=""noreferrer"">Fiduciary Licence Agreement</a>, Canonical’s <a href=""http://harmonyagreements.org/"" rel=""noreferrer"">Project Harmony</a>, and <a href=""http://contributoragreements.org/"" rel=""noreferrer"">contributoragreements.org</a>.</p>
","5804"
"Is this copyright infringment?","63","","<p>I created a project to validate objects.</p>

<p>It's influenced by a fairly known project called FluentValidation by Jeremy Skinner which has an Apache License.</p>

<p>Both projects do the same, provide an API for validating objects (C#).</p>

<p>Both projects present the API in almost the same manner.</p>

<p>It's under the hood that things change a lot, in terms of workflow and going about validating the objects. I did use some of the techniques in Jeremy's code.</p>

<p>Here's his project on GitHub : <a href=""https://github.com/JeremySkinner/FluentValidation"" rel=""nofollow noreferrer"">https://github.com/JeremySkinner/FluentValidation</a></p>

<p>And here's mine : <a href=""https://github.com/JMPSequeira/JPSoft.CoreValidation"" rel=""nofollow noreferrer"">https://github.com/JMPSequeira/JPSoft.CoreValidation</a></p>

<p>I thought about leaving an issue on his GitHub but that would, IMHO, seem a bit freeloading the success of his project to advertise mine and I can't find any other way of contacting him.</p>
","<p>The question of whether this is copyright infringement depends on whether your software is a derivative work of his software.
It is generally considered OK to reproduce some software ideas / API (although the recent Oracle vs Google case shows that there might be some copyright questions on API too).
This helps people, in particular, create open source clones of proprietary software. To ensure that the new software is not a derivative work of the old software, the developers are generally bound to one rule: do not look at the code (of the old software).</p>

<p>The problem in your case is that you looked at the code and took some inspiration from it. It is more delicate thus to claim that your work is not a derivative from the earlier work.</p>

<p>However, even assuming that this is a derivative work, there is a very easy way to not be infringing copyright: just follow the obligations of the Apache license of the original work. In your case, since you're publishing your code on GitHub, I would even go further and advise you to license your code under the same Apache license (although <em>you don't have to</em>) and include the original copyright notice (this is your real obligation), adding a remark saying that your code is inspired by this code.</p>
","5468"
"Most fitting software license for customized client work?","63","","<p>I am struggling with this question about a github project of mine (MIT license). A client wanted me to customize it in a certain way and sell him the customizations (the customizations do not work without the base code though). </p>

<p>He will not be disclosing the source code, but he doesn't want to include any attribution or license information either, while still being allowed to legally use, sell and modify. Of course, I, on the other hand, don't want to take responsibility/give any guarantees/be liable.</p>

<p>I did some research and came up with the Unlicense </p>

<ul>
<li><a href=""http://unlicense.org/"" rel=""nofollow noreferrer"">http://unlicense.org/</a> </li>
<li><a href=""https://choosealicense.com/licenses/#unlicense"" rel=""nofollow noreferrer"">https://choosealicense.com/licenses/#unlicense</a> </li>
</ul>

<p>4 questions in direct connection with this issue:</p>

<ol>
<li>As far as I understand it, he would be allowed to distribute the source code under this license as well, is that correct, and if so, can I limit that?</li>
<li>Is the Unlicense a good fit for the described purpose?</li>
<li>Are there any fitting alternative licenses/agreements?</li>
<li>Is me emailing him the code he bought together with the chosen License as textfile enough to complete the deal and make it legally bulletproof beyond a reasonable doubt?</li>
</ol>
","<p>It is not common to use open-source licenses for consulting work. Instead, the contract would contain a license from you to the client which covers whether and under which conditions the work may be used, modified, distributed, and sublicensed. The client may also want to own the copyright of the changes they paid for, in which case the contract would include a copyright transfer agreement. In any case, the contract will also cover topics such as liability. All of these details need to be negotiated with your client prior to the work. But this is about consulting, not about open source. <strong>Under all circumstances, ask a lawyer to draft a contract for you.</strong> That is the cheapest option in the long-term.</p>

<p>If you are the sole copyright owner of the open-source project, you can do with the code as you wish, including granting separate licenses to clients. The existing MIT license to the public is not relevant here, because it is not an exclusive license.</p>

<p>If you have accepted contributions from other persons, you do not own the complete copyright of the project and have to comply with the project license, even for your own use. Since the MIT license requires that you keep the copyright statement and license intact for each file, you may not remove this attribution. This doesn't prevent you or your client from selling or modifying the code, it just means that the source code must still include the notice.</p>

<p>You cannot relicense MIT-licensed code under the the Unlicense, since you may only use MIT-licensed works if you keep the notice intact. The Unlicense does not ensure this. </p>
","5496"
"Proprietary Software Developed by Non-Profit Volunteers","63","","<p>I and a group of developers that met online have come up with an idea for a website we would like to create. I am struggling to see how our idea would survive with an open source business model. How can we get the best of both worlds? </p>

<p>If we structured the business as a non-profit, could we still invite volunteers to make contributions to our code base? If we are successful these are the outcomes I predict:</p>

<ul>
<li>Success while we are still open source would force us to suddenly close our code off. This is the drug dealer business model and Id like to avoid this.</li>
<li>Success while we are closed means we have volunteers that helped us become profitable. We offer the core team salaried positions and continue business as usual. </li>
</ul>
","<p>I fail to imagine any situation where a non-profit project could fail because its sourcecode is non-free. But I will give you the benefit of a doubt and assume that it somehow is.</p>

<p>It's sometimes surprising how much time and effort people are willing to invest into projects they believe in. However, when you make your project closed source, you are erecting some additional barriers for new volunteers:</p>

<ul>
<li>People are shy. They won't ask if they can help you when they aren't sure they actually can help. When someone notices a bug or misses a feature and the sourcecode is available, they can check it out to see if they understand it well enough to help you. But without seeing the source beforehand, they won't be so sure if they can actually do it and will be more reluctant to offer help.</li>
<li><p>Open Source greatly reduces onboarding time for new volunteers. In a closed-source project you need to get into contact with them, you need to give them access to your version control system and you somehow need to convince them to not leak your sourcecode to the public. Volunteer initiatives of any kind usually have a very high turnover rate, so this administrative overhead might become considerable. </p>

<p>In an open source project they just need to do a checkout of your public repository. With websites like Github they can branch your project with one click and send you a pull request with another.</p></li>
<li>Without an open source license, people might be afraid that you will one day turn your project into a for-profit project and exploit their hard labor without paying them.</li>
</ul>

<p>Oh, and by the way: ""Open Source"" and ""For Profit"" are not necessarily contradictory. See <em><a href=""https://opensource.stackexchange.com/questions/88/how-can-large-open-source-projects-be-monetized/"">How can large open source projects be monetized?</a></em> for details. In my opinion community-driven websites are perfect for monetizing as open source project, because the asset with the most commercial value is usually their user community, not their sourcecode. People can't fork the code and expect the community to follow.</p>
","4733"
"Using MariaDB on server","63","","<p>MariaDB server is <a href=""https://mariadb.com/kb/en/mariadb/licensing-faq/"" rel=""nofollow noreferrer"">GPLv2</a>.
I plan to use it on a server, unmodified, for let's say an online shop.
The users would have a GUI and through this GUI they would add products to a cart.</p>

<p>Would this be considered distribution (and trigger the GPLv2 license conditions) or not?</p>
","<p>As you never distribute the code to anyone else and you never change anything GPLv2 is not triggered by your usage.</p>
","5746"
"Why might open source companies use crowd funding?","63","","<p>Often when I see open source companies I notice one of their sources of funding is crowd funding? My question is why is this? </p>

<p>Are there not any better methods of income that they could use?</p>
","<p>Why is crowdsourcing used? It works pretty well. Open sourcing something nearly always means a community that is interested in it. So it can work that the community is enthusiastic enough to fund the open sourced thing through crowdfunding.</p>

<p>But there are a lot of other methods for making money. My examples for these methods are non-companies, but companies can make money with these methods as organization or persons can.</p>

<p>Most open source projects have a donate button or something similar. That is not far from actual organized crowdfunding. Some project make fundraisers at some times, Wikipedia does from time to time for instance.</p>

<p>Some classic open source projects release the open sourced software, but offer paid services around it: support, documentation, installation and configuration help and so on.</p>

<p>Some projects sell premium versions of the product. That is common for open books or music, digital is free, a printed version or a CD cost something. A way Cory Doctorow makes his money.</p>

<p>Merchandise is another way of income for an open-source-project. Selling coffee-cups, T-shirts, Posters, mousepads and so on with the logo of the project can bring a lot of money. XKCD finances itself mostly with merchandise.</p>
","454"
"Am I infringing copyright if I use an improperly licensed project?","62","","<p>While answering <a href=""https://opensource.stackexchange.com/q/4297/4763"">this question</a>, it was pointed out to me in the comments that software that is improperly licensed (in that case, by violating another license) causes its own license to be cancelled out, thus rendering it practically unusable until fixed by the copyright holder.</p>

<p>The context of the question was a project licensed under <a href=""http://www.codeproject.com/info/cpol10.aspx"" rel=""nofollow noreferrer"">CPOL</a> that infringed on GPL code by including it despite the CPOL's <a href=""https://www.gnu.org/licenses/license-list.html#cpol"" rel=""nofollow noreferrer"">no-commercial-use</a> (and thus, non-free/libre) restriction - thereby not complying with the GPL's copyleft.</p>

<p>My first assumption in that case was that one could still use the CPOL-licensed project if they removed the GPL-code from it. I now believe that assumption was incorrect.</p>

<p>So, my question is: if I want to include in my code an open-source project (project A) that infringes on the license of another project (project B), am I still infringing the copyright of project A if I <em>remove</em> the code belonging to project B? If so, why?</p>
","<p><em>no, you're not infinging</em></p>

<p>if <strong>A</strong> infringes on <strong>B</strong> which it includes, then they do not have a right to distribute combined work and combined license on <strong>A</strong> is null and void. </p>

<p>However, all other (noninfringing) parts of <strong>A</strong> are still legal to distribute under <strong>A</strong>s license, so you can take just those noninfringing parts and use them under <strong>A</strong>s license (or include them in your code, whose license is compatibile with <strong>A</strong>s license)</p>
","4354"
"Apache License 2.0-licensed code included in commercial closed source software","62","","<p>I spent an hour looking for an answer to this question, although I would think a quite common situation, I did not get a totally clear answer to my specific case:</p>

<p>So I am selling a (P)roduct which is distributed as binary. As a library to enable certain features I would like to make use of an (A)pache License Version 2.0-licensed code written by a 3rd party within that binary.</p>

<p>Am I allowed to do that if I specifically state that I am using (A), include all copyright notices and include the Apache License 2.0 with reference to (A)?</p>

<p>What if I made modifications in (A), does this change anything, am I still allowed to publish as a binary, and if so, am I obligated to state which modifications I made in (A)?</p>
","<p>AFAIK if you are simply linking to an Apache Licence 2.0 library your only obligations are to include attribution, copyright notices and disclaimer and you <em>may</em> modify the original code as long as you state that you have done so <em>not necessarily including details of what your modifications are</em>. You don't even <strong>have</strong> to release your modifications in source form <strong><em>but</em></strong> if your changes are fixing bugs or adding widely missed features it is considered good manners to at least offer them back to the original project.</p>
","6190"
"Author Credits for certain licenses","62","","<p>All I want to know is what licensing allows me, the program author, to keep ""author credits""(so no one can rip me off), and make all software created from this program to remain free (like Ruby License)</p>
","<p>There are several permissive licenses which allow other people to do practically anything they want as long as they retain your original copyright notice. A few examples:</p>

<ul>
<li>MIT license</li>
<li>BSD license family</li>
<li>Apache license</li>
</ul>

<p>But these licenses allow to relicense the software under a non-free license. If you want to ensure that your work remains free, you should use a strong copyleft license like the GNU Public License or the Mozilla Public License.</p>
","2517"
"Do Open Source/Free Software projects require submitters to submit proof of authorization to contribute?","62","","<p>Almost all paid programmers in North America (and probably the whole world?) have signed an agreement with their employer which assigns all inventions, copyright, patents, and intellectual property they create to that employer, whether such creations happen on the clock or not (see this article by Stack Exchange co-founder Joel Spolsky: <a href=""https://www.joelonsoftware.com/2016/12/09/developers-side-projects/"" rel=""nofollow noreferrer"">https://www.joelonsoftware.com/2016/12/09/developers-side-projects/</a>).</p>

<p>Given that premise, it would stand to reason that all contributions from paid programmers who have signed such an agreement, and who don't have a specific signed release/permission to contribute to the open source project in question, are illegally contributed and cannot validly carry a Free or Open Source license.</p>

<p>Which gets to the title of this question: <strong>Do Open Source/Free Software projects require submitters to submit proof of authorization to contribute?</strong>  If not, it seems certain that the legal status of their openness is on very questionable legal grounds.</p>
","<p>Virtually all major open source projects require contributors to agree to a contributor licensing agreement that includes language asserting that their contributions are able to be legally contributed to the project.</p>

<p>For example, <a href=""https://www.apache.org/licenses/icla.pdf"" rel=""nofollow noreferrer"">Apache's Individual Contributor
License Agreement</a> says</p>

<blockquote>
  <ol start=""4"">
  <li>You represent that you are legally entitled to grant the above
  license. If your employer(s) has rights to intellectual property
  that you create that includes your Contributions, you represent
  that you have received permission to make Contributions on behalf
  of that employer, that your employer has waived such rights for
  your Contributions to the Foundation, or that your employer has
  executed a separate Corporate CLA with the Foundation.</li>
  <li>You represent that each of Your Contributions is Your original
  creation (see section 7 for submissions on behalf of others). You
  represent that Your Contribution submissions include complete
  details of any third-party license or other restriction (including,
  but not limited to, related patents and trademarks) of which you
  are personally aware and which are associated with any part of Your
  Contributions.</li>
  </ol>
</blockquote>

<p><a href=""https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&amp;kind=KIND_INDIVIDUAL"" rel=""nofollow noreferrer"">Google's Individual Contributor CLA</a> has virtually identical language (only the corporate names are changed). Other major open source entities probably have very similar terms.</p>

<p>This is a defense mechanism for the project: if someone sues the project for copyright infringement, they can easily deflect legal responsibility to the specific responsible contributor(s). Of course, despite this protection from legal liability, any infringing parts will still need to be removed or rewritten, or a compatible license must be acquired from the actual copyright holder.</p>

<p>As for ""proof"", though, <em>proving</em> the negative that a creative work does not infringe any copyright is an intractable problem. Not only does it require comparisons against the entire set of all copyrighted works (many of which are not publicly available), but the one-to-one comparison to decide that one work is a derivative of another is itself intractable. This problem is not unique to open source; it is a general problem with copyright law. Any time anyone offers you a creative work, for free or at cost, under FLOSS or non-FLOSS terms, you have no way to reliably determine that the distribution of that work does not infringe copyright.</p>

<p>However, in some jurisdictions (at least the United States) there is a legal notion of <a href=""http://www.trademarkandcopyrightlawblog.com/2013/12/innocent-infringement-intent-and-copyright-law/"" rel=""nofollow noreferrer""><em>innocent infringement</em></a> which may reduce or (rarely) eliminate liability for an infringer who had no reasonable expectation that they were committing infringement: for example, by distributing a contribution in an open source project from a contributor who had formally asserted that their work was not infringing.</p>

<p>If by ""proof"" you mean something like, ""Contributor prompts their employer to assert that the contributor has permission to make contributions,"" I don't expect this to produce substantially better results than making the contributor sign and submit a legal document that asserts the same, and that plan would require a great deal of extra effort. It would be trivial for a bad or lazy contributor to say they have no employer, so this plan does not afford perfect protection, and the level effort involved (requiring both a cooperating contributor <em>and</em> a cooperating employer, even when no broad IP agreement even exists between employer and employee) would scare off even more potential contributors than requiring a signed CLA already does. Furthermore, it would allow an employer to unfairly block an employee's contributions in jurisdictions where broad employment IP assignments are not enforceable: the project would be waiting for the employer's say-so in accepting the contribution, but the contributor's local contract/IP law would not require them to do so.</p>

<hr>

<p>Perhaps you underestimate (or I overestimate) the responsibility of contributors in making arrangements with their employers. I have signed a similar agreement, but my company has a well-defined exemption process, which I have used every time I made open source contributions.</p>

<p>Also, many projects offer corporate CLAs (e.g., <a href=""https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&amp;kind=KIND_CORPORATE"" rel=""nofollow noreferrer"">here is Google's</a>) so that a company can authorize all its employees to contribute to particular open source projects. In the particular case of open source contributions done by the employees major corporations for major open source projects (e.g., consider the <a href=""https://www.linuxfoundation.org/membership/"" rel=""nofollow noreferrer"">extensive list of the corporate Linux Foundation members</a>) where a corporate CLA exists, this is a non-issue.</p>
","6279"
"Does it make sense to have a program under the LGPL?","62","","<p>A little background: I have a library <a href=""https://github.com/romariorios/rubberband"" rel=""nofollow"">project</a> which I put under the LGPL v2.1. However, I have two applications inside the project tree using the library. It would be somewhat inconvenient to make these two small applications have their own license, so I figured I could just use the LGPL for all the code in the tree, including those applications.</p>

<p>Does it make sense to have an application under the LGPL? What would change when compared to, e.g., the GPL?</p>
","<p>The <a href=""http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"">LGPL v2.1</a> is specifically designed for libraries; in particular, it allows distribution of modified versions of the library only in certain circumstances (section 2), including</p>

<blockquote>
  <p>The modified work must itself be a software library.</p>
</blockquote>

<p>However, you can distribute your library and its associated programs under the LGPL, because section 3 of the LGPL allows it to be upgraded to standard GPL (version 2 or later). Thus a recipient making changes and wishing to redistribute them can do so either under the LGPL or the GPL, whichever is appropriate. (After distribution occurs under the GPL though, further distribution of modified works on top of that can only use the GPL.)</p>

<p>Having said all that, using two licenses within your source code isn't all that complex: all you need to do is include both the LGPL and the GPL, and make sure the source files' headers indicate which license applies to them (as explained at the end of the license documentation).</p>
","2871"
"GNU Lesser General Public License with signed C# assembly","62","","<p>We have a closed source software written in C# that we sell. All of our assemblies are signed. We want to use a third party assembly, that is published under the <a href=""https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"" rel=""noreferrer"">GNU Lesser General Public License v2.1</a>. As all our assemblies are signed, we need the third party assembly to be signed.
Are we allowed, to compile the library and to sign it, so we can use it in our signed.</p>
","<p>Firstly, and this is important, IANAL/IANYL.  If you are betting a business on this idea, you had better get some proper legal advice, and not rely solely on postings by random strangers on internet fora.</p>

<p>That said, the interesting point here is the code signing.  One of the major differences between <a href=""https://www.gnu.org/licenses/gpl.html"" rel=""noreferrer"">GNU GPLv3</a> and <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"" rel=""noreferrer"">GNU GPLv2</a> (I know your question is about LGPL; bear with me) is the anti-tivoisation language in GPLv3, which says</p>

<blockquote>
  <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product [...] the Corresponding Source conveyed under this section must be accompanied by the Installation Information. </p>
  
  <p>[...]</p>
  
  <p>""Installation Information” for a User Product means any [...] authorization keys [...] required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.</p>
</blockquote>

<p>If such language were in LGPLv2, it would strongly suggest that you'd need to include code-signing keys.  However, no such language is to be found in LGPLv2, so as far as I can tell you may ship your signed binary-only application, along with a signed object-code version of the LGPL'ed library (""<em>the library</em>""), provided that you also</p>

<blockquote>
  <p>Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above) and, if the work is an executable linked with the Library, with the complete machine-readable ""work that uses the Library"", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library (GNU LGPL v2.1 s6)</p>
</blockquote>

<p>That is, you need to provide the source of the library, and your code in object form, ready for re-linking (there are other s6 obligations you could fulfil instead, but they seem to me to amount to the same thing except 6b, which you can't go for because you're distributing a custom (signed) copy of the library).  The fact that the user cannot run this modified executable because it is unsigned doesn't seem to present a problem.</p>
","6178"
"Why boilerplates are created from scratch, not forked?","62","","<p>I've checked couple dozens popular boilerplates (react, react-native, nodejs) and neither of them are forks from other boilerplates.</p>

<ol>
<li><p>Am i missing something? why are people writing them from scratch instead of forking?</p></li>
<li><p>Say, i want to create own boilerplate, because other are not specialized enough for needs of my company. This boilerplate will be maintained by my employees only (or ""almost only""). This boilerplate will remain open-sourced. Do i have to start from scratch reinventing this wheel, or i can just fork existing repo and build on top of it? are there any sort of limitations in such approach?</p></li>
<li><p>i don't like ""Forked from"" sign, because in vast majority of cases it means ""forked, added couple of commits and that's all"", which is not the case for me - it will be modified quite a lot. So, is it ok, if i'll <code>git clone</code>, change repo address and put it to own repo?</p></li>
<li><p>may be i can remove the whole <code>.git</code>, delete all references to original developers along with the part of this code that doesn't suit my needs and publish the result as my own boilerplate? That doesn't sound fair though. Anyways, is this allowed for MIT-licensed repos? i'm confused, because this is the explicitly suggested ""way to go"" to start build on top of many repos.</p></li>
</ol>
","<blockquote>
  <ol>
  <li>Am i missing something? why are people writing them from scratch instead of forking?</li>
  </ol>
</blockquote>

<p>No idea. This may be something specific to the JS realm. Python boilerplate projects tend to be forked heavily</p>

<blockquote>
  <ol start=""2"">
  <li>Say, i want to create own boilerplate, because other are not specialized enough for needs of my company. This boilerplate will be maintained by my employees only (or ""almost only""). This boilerplate will remain open-sourced. Do i have to start from scratch reinventing this wheel, or i can just fork existing repo and build on top of it? are there any sort of limitations in such approach?</li>
  </ol>
</blockquote>

<p>You can do as you please! that's the beauty of FLOSS.</p>

<blockquote>
  <ol start=""3"">
  <li>i don't like ""Forked from"" sign, because in vast majority of cases it means ""forked, added couple of commits and that's all"", which is not the case for me - it will be modified quite a lot. So, is it ok, if i'll <code>git clone</code>, change repo address and put it to own repo?</li>
  </ol>
</blockquote>

<p>Sure thing. Whatever works for you is fine.</p>

<blockquote>
  <ol start=""4"">
  <li>may be i can remove the whole <code>.git</code>, delete all references to original developers along with the part of this code that doesn't suit my needs and publish the result as my own boilerplate? That doesn't sound fair though. Anyways, is this allowed for MIT-licensed repos? i'm confused, because this is the explicitly suggested ""way to go"" to start build on top of many repos.</li>
  </ol>
</blockquote>

<p>""remove the whole <code>.git</code>"" history is fine and allowed for MIT-licensed repos and all open source licenses I can think of.... You do not have to keep history but not keeping it is an heresy from an engineering point of view IMHO. Note that some licenses (such as the Apache or L/GPL licenses) demand some change tracking: having a clean history is always useful for this. </p>

<p>""delete all references to original developer"" would be an absolute NO-NO and a likely violation of the terms of many licenses, including the MIT. This has nothing to do about fairness, but respecting the license terms if you want to be licensed for the code you reuse.</p>

<p>""the explicitly suggested ""way to go"" to start build on top of many repos.""... you can do ass you please, as long as you comply with thhe original licensing terms.</p>
","6112"
"Ask user to install external GPL dependencies when installing commercial products","61","","<p>Is it possible to use as optional dependency a GPL dependency in a commercial product?</p>

<p>My idea is to ask the user when installing my product if he wants to install a GPL dependency. Is it possible to do that?</p>
","<p>Closest example I have seen is with installing Audacity. Though Audacity is also open source the mp3 encoder used by it (lame) is of a non compatible license and requests user to manually install and provide path to it. As mentioned in the comments as long as it is not linked you should be fine to request the user to install any library. I feel the exception might be in the case of AGPL license. I am not sure about that. But that will really impact if it is a online application.</p>
","2678"
"Can I place a license on something that I already published?","61","","<p>Suppose I upload an image to my website under no license or copyright notice. But then I decide that I want to license it under specific open source CC attributes. Can I simply just add the license? Or am I no longer able to do this (because I already published it).</p>

<ul>
<li>If yes, what would happen to someone that has already taken and used this image, but is now breaking the license since I changed it?</li>
</ul>
","<p>If you are the sole copyright holder of a work* you can at any time change the licence of the work. This includes adding, removing or switching licences. But doing this will not retroactively remove the rights of anyone who acquired a copy of the work while it was licensed under the old licence.</p>

<p>*(If you are not the sole copyright holder then you need to get all collaborators to agree to a licence change.)</p>
","409"
"Can I take a few classes out of a library and use it in my project or should I always use the entire library?","61","","<p>Let's say I need a piece of functionality and there is a library on github, licensed under Apache 2.0, that provides that funcionality.</p>

<p>There are a couple of use cases that can occur that I would prefer to just copy-paste a certain part of the library instead of the whole thing:</p>

<p>It is written for Eclipse, and I am using Android Studio and I don't want to go through the trouble to convert it to a gradle project, so I want to just copy the meat of the project and paste it into a new package/module in my project</p>

<p>The library provides more functionality than needed and I only need a part of it.</p>

<p>I want to heavily customize the library</p>

<p>What is the general rule in these cases? Can I just copy the files I need? Should I mention the author in the code? Should I add a reference to the library in the final product?</p>
","<p>Open source allows you to create derivative works. That means you can create a derivative work which reduces the functionality to those parts you consider essential. </p>

<p>But remember that you need to comply with the license terms of the library, even when you only take selected parts of it. Almost all open source licenses have an attribution clause, including Apache 2.0. so you will have to give attribution to the original author, even when you only copied a single function.</p>
","2618"
"Can open and closed source versions of software exist in parallel and can code be ported either way?","61","","<p>Say a vendor has both a community version of their software and a more proprietary one.</p>

<p>How can this be done in licensing terms?</p>

<p>Can code be ported either way?</p>

<p>What are the appropriate practises if any?</p>
","<p>Dual-licensing is easily enough done, because licences do not inhere in code; they apply to the conveyance of code, so different conveyances may be done under different terms.  <a href=""https://en.wikipedia.org/wiki/Multi-licensing"" rel=""nofollow noreferrer"">Wikipedia has a fairly good entry on it</a>.</p>

<p>Can code be ported either way?  As curiousdanii has noted in response to your <a href=""https://opensource.stackexchange.com/questions/3972/how-can-a-paid-proprietary-module-be-combined-with-an-open-source-platform"">other, similar question</a>, it depends on the ""open source"" licence used; in addition, it depends on who owns the copyright.</p>

<p>For movement from free to proprietary code, this is broadly impermissible under ""strong copyleft"" licences such as the GPL, and permissible under weaker free licences such as BSD.</p>

<p>For movement from proprietary to free code, this is entirely at the whim of the copyright holder, so projects that wish to have a dual-licensed model may well require copyright assignment.  As <a href=""http://www.adventuresinoss.com/2010/01/08/more-on-copyright-assignment/"" rel=""nofollow noreferrer"">this writer noted</a>,</p>

<blockquote>
  <p>MySQL had a policy that any code contributed to the project required
  that the author assign the copyright to to the MySQL corporation. This
  gave them full control over the application, including the ability to
  publish it under different licenses.</p>
</blockquote>

<p>I'm not sure what ""<em>appropriate practices</em>"" you might be referring to, so I can't answer the last part of your question.</p>
","3975"
"Explanation about open source codes and licences","61","","<p>I need to understand rules that I only read but never understood completely. I'm asking here some clarifications.
I read that GPLv2 licence imposes that a developer, developing a software using codes with GPLv2 licenses, must release it with the same GPLv2 licence. </p>

<ul>
<li><p>Imagine a user asks a developer to create a software for a system (machine) using different licence types. What type of licence will have the developed codes? </p></li>
<li><p>Moreover, if the developer uses just some libraries with GPLv2 licences, is he obliged to make public the whole code for this system? And what about, if the user wants to sell several of these systems? Should the developer release the code mandatory or can he release only the executable?</p></li>
<li><p>I know that a software with a GPLv2 licence running on a OS, does not oblige that OS to be with GPLv2 licence. But what about if I create a SaaS using software with GPLv2 licence? Also all the software developed to make my Saas on the server has to be with a GPLv2 licence? For example, I know <a href=""https://www.rollapp.com/"" rel=""nofollow noreferrer"">https://www.rollapp.com/</a> that make a lot of GPLv2 applications run directly on the browser. Are these guys obliged to make their code with GPLv2 licence.</p></li>
</ul>

<p>What about the last two concerns, but with another type of licence, like MIT licence, or BSD?</p>

<p>Anyway, could you suggest a method on how to manage all these type of information when you face different libraries with different licences?         </p>
","<p>You are asking several questions at once. I will try to answer them all.</p>

<hr>

<p>If a client hires a developer to create something for them, meaning that there is a contract between the client and the developer (or the developer's employer) to create something, then the only obligation of the developer is to provide the product and all source code contained therein to the client. This is independent of the copyright licenses involved and generally the developer doesn't have the right to provide the code to someone else.</p>

<hr>

<p>If a product contains code licensed under the GPLv2 license and that product is distributed to third parties (either as a downloadable package/executable, on a storage medium or as part of a physical product), then <em>all</em> software in that product must be licensed under a GPLv2-compatible open-source license and it must be possible for people that have the product to obtain a copy of <em>all</em> the code.<br>
From the GPLv3 and later, you are required to include the information and/or security keys that are needed to update the software on a physical device. With GPLv2, this is not needed.</p>

<p>If the product is not distributed (for example, it is only use in-house or only made available as SaaS), then there is no requirement to provide any source code or to license your own code in a particular way.</p>

<hr>

<p>The MIT and BSD licenses are more permissive than the GPL license.<br>
If you only use MIT and/or BSD licensed libraries in your product that you distribute, then your only obligation is to mention that you are using those libraries and which license they use. You are not required to use a particular license for your own code and you are not required to provide your code to anyone either.</p>
","6207"
"How long to wait until the contributors will make a PR","61","","<p>I have some #hacktoberfest issues in <a href=""https://github.com/sm-react/storybook-addon-material-ui/issues?q=is%3Aissue%20is%3Aopen%20label%3Ahacktoberfest"" rel=""nofollow"">my project</a>.
All of them are occupied by users but mostly nobody made PR.</p>

<p>So should I wait until the end of #hacktoberfest or may I ask them about theirs plans to finish it? how to do it so as not to seem rude?</p>

<p>What if other contributors would like to participate but they see that all busy?</p>
","<p>Putting together a PR may take time, especially if this is the first time someone contributes to this project (or to open source at all, for that matter!). I'd give a grace period of at least a week or two, but after that, you should reach out proactively. Not only is it not rude, but if you phrase your communication properly it will come off as encouraging, not nagging:</p>

<blockquote>
  <p>Hey @JohnDoe, how are you doing?<br/>
  You self-assigned this issue more than two weeks ago (on October 8th). I was just wondering how things are going with it, and whether you need any help.</p>
</blockquote>
","4647"
"If I include a ShareAlike/GPL/viral-licensed character in my videogame, is my videogame stained?","61","","<p>I'm making a video game with importable custom characters. My characters have a special license that forbids pornography and blasphemy in derivative works. It is viral in itself to prevent such acts.</p>

<p>However, if someone puts a ShareAlike character such as one from Club Penguin or Floraverse into my game, does it force my game to be licensed under ShareAlike? If so, then is it illegal to mix my viral license and ShareAlike? </p>

<p>In other words, are my characters doomed to never again be in a crossover with Floraverse characters or Club Penguin characters? Is there an exemption that I could ask from the Creative Commons license makers or the creator of Floraverse/Club Penguin?</p>

<p><strong>Edit:</strong>
A viral license is a license that forces all derivative works to be licensed under that same license.<br>A stained program is a program that has to be licensed under a viral license because it is ""stained"" by the content licensed by the viral license.</p>
","<p>The main question you should be asking yourself is: is the game a derivative of the various characters that can be imported in it?</p>

<p>As I understand your question, the game is programmed independently and has a feature for importing characters. Characters are data. The game can work without any specific character and does not depend on any specific feature that one character is bringing. In such case, the game is not a derivative of the characters and thus its license is unaffected by the license of the characters. <em>A fortiori</em>, the various characters are unaffected by each other's licenses.</p>

<p>Now, it becomes a different question if you are distributing the game with the various characters bundled in some compiled form. Then, the game (characters included) is a derivative of each of the character, and it must as such be distributed under a license which respects the various conditions imposed by each license (and you might be in a case where no such license exists because of incompatible requirements).</p>

<p><em>All this being said, and even if I understood your question correctly and you are satisfied with my answer, I very much encourage you to edit your question to make it clearer what exactly you are asking (cf. Philippe's comments).</em></p>
","5192"
"Linux license in a European company","61","","<p>I would like to install Ubuntu or Debian Desktop on a PC from our company which is in the European Community. I was told that the company should pay for this license, because in EU they must.</p>

<p>Do you know anything about this? I think the company does not have to pay,  only if they want support assistance or if Ubuntu Enterprise is installed.</p>
","<p>Actually, let me give you my Paypal account. I am the sole receiver for Linux license payments for Europe.... Just kidding.</p>

<p>More seriously, while you can buy support subscriptions for Linux from Ubuntu or RedHat, you can typically download and use freely these distros (at least Ubuntu, Fedora, CentOS and OpenSuse) as well as Debian which is the hallmark of freedom. </p>
","4872"
"Maintaining a complex FOSS linux distribution","61","","<p>In my professional area some of the most advanced software tools are incredibly hard to install, build, and configure even for the teams who create the tools, let alone for less technical end users.</p>

<p>To reduce the high ""barrier to entry"" this creates for many less technical peers, I have created a FOSS distribution of Ubuntu 15 with the tools pre-built and configured.</p>

<p>However, I have never authored and distributed a distribution before. I fear that if I distribute it, especially on a popular site like <a href=""http://distrowatch.org"" rel=""nofollow"">DistroWatch</a>, that I'll soon be in over my head with software components needing updates, requests for additional tools, etc.</p>

<p>I wonder if there's a way to get an idea of exactly what to expect, to streamline the process of continually updating software components (and checking for resulting broken configuration)?</p>

<p>Is this a 1-person job, or do I need a team? Is there an established platform for recruiting contributors?</p>
","<p>Building a distribution is a lot of work. Perhaps instead of trying to create a full distribution it is better to just maintain the package(s) for Debian or Ubuntu, or offering to help out if it is already being done. In any case, search for other interested parties, having colleagues gives people with whom to discuss issues or which can take over the work if you are on vacation or otherwise unavailable. Another option would be to start e.g. a <a href=""https://spins.fedoraproject.org"">Fedora spin</a>, a collection of software for a specific purpose (I don't know if Ubuntu has something similar).</p>

<p>In any case, I'd find it strange if you don't find it already packaged in Debian at least. Debian has a tendency to package up anything that compiles, as long as it is legal to do so (more precisely, agrees with their <a href=""https://www.debian.org/social_contract"">guidelines</a>). If the software isn't already available, chances are it is not legal to distribute (in which case you can land in uncomfortably hot water) or is severely broken (in which case it is better to abstain and look for alternatives, or bite the bullet and work with upstream to fix it first). Rummage in the bug reporting systems or packaging discussions (trusty Google the name of the package and distribution name should lead you there) to get a clearer picture on the matter.</p>
","2609"
"What license type is it if it is called opensource but no specific license is stated?","61","","<p>I'm asking particularry about the c math library cephes (<a href=""http://www.netlib.org/cephes/"" rel=""nofollow"">http://www.netlib.org/cephes/</a>) where after I downloaded it found no file stating any licanse and the sourcecode it self has in the typical header jsut stated ""copyright year by name"" not even contact informations.</p>

<p>So what does this mean for the right to use the code if it is just stated that the code is copyrighted but nothing else?</p>
","<p>This means you have no rights to use, modify, run or distribute the code, but may only use it to study.</p>
","1816"
"Which of these licenses are free for an enterprise?","61","","<p>I'm currently working for a project related to georeferenced analysis of entomological and epidemiological data of Dengue fever. The project aims to help a public institution and it's supposed to be completely free because they don't want to incurr in extra expenses yet. I'm sorry if it feels as if I'm lacking effort, I'm just not confident enough I understand these licenses. Please help me to identify techonologies that must be discarded, I don't want to make a legal mistake.</p>

<ul>
<li>Flask 1.2 (BSD)

<ul>
<li>Rpy2 (GPLv2+)</li>
<li>Pandas (BSD)</li>
<li>Numpy (<a href=""http://www.numpy.org/license.html"" rel=""nofollow noreferrer"">http://www.numpy.org/license.html</a>)</li>
</ul></li>
<li>Apache2 (<a href=""https://www.apache.org/licenses/LICENSE-2.0.html"" rel=""nofollow noreferrer"">https://www.apache.org/licenses/LICENSE-2.0.html</a>)</li>
<li>Docker (Apache License 2.0) (The same as above)</li>
<li>AngularJS 1.5 (MIT License)</li>
<li>Bootstrap (MIT License)</li>
<li>MongoDB 3.2 (GNU AGPL v3.0)</li>
<li>R 3.2.2 (GPL-2 | GPL-3)</li>
</ul>
","<p>You ask only about <em>using</em> the software; that is, you don't intend to <em>modify</em> it.  Your primary concern is <em>cost</em>.  That said, BSD, Apache, and MIT licensed software should be fine for you and your end-user to use without payment or any other (significant) obligation.</p>

<p>GPL2/3 are both trickier, because you are not the intended end-user of the software.  When you convey the software to the end user, you will incur the obligation to provide them with sources.  They, provided they do not convey it outside their organisation, will incur no further obligation.  No one should incur cost, save the costs associated with providing sources.</p>

<p>AGPL is trickier still.  Although no payment is required in order to use it, the source obligation of GPL applies to the conveyance from you to the organisation.  Furthermore, if your use includes a web service which can interact with users, the operator of the service will incur the obligation to create a mechanism by which users can get copies of the source.</p>

<p>Numpy I am not going to consider.  It is now well-understood in the community that <a href=""https://opensource.stackexchange.com/questions/1445/how-can-a-crayon-license-be-a-problem"">crayon licenses</a> are a bad idea, not least because they require much more detailed study to properly understand.</p>

<p>As ever, IANAL/IANYL.  Philip Kendall is right that lawyers should be consulted if there is doubt; you might not have any, but the public institution should, and it needs to properly understand its obligations in order that it may fulfil them.</p>
","5405"
"Free Art License Proper Method Of Attribution For An Image","60","","<p>I am working on an (as of yet) small project, a <a href=""http://rightbrace.github.io/mdwg/"" rel=""nofollow noreferrer"">wallpaper generator</a> that overlays SVG images like stencils on solid backgrounds, and I am unsure of how to properly go about licensing the art (largely under the Free Art License 1.3). </p>

<p>The section that is troubling me is:</p>

<blockquote>
  <p>You have the right to distribute copies of this work; whether modified or not, whatever the medium and the place, with or without any charge, provided that you:</p>
  
  <p>attach this license without any modification to the copies of this work or indicate precisely where the license can be found,
  specify to the recipient the names of the author(s) of the originals, including yours if you have modified the work,
  specify to the recipient where to access the originals (either initial or subsequent).</p>
</blockquote>

<p>And later summarised:</p>

<blockquote>
  <p>– How to use the Free Art License? </p>
  
  <p>To benefit from the Free Art License, you only need to mention the following elements on your work:
  [Name of the author, title, date of the work. When applicable, names of authors of the common work and, if possible, where to find the originals].
  Copyleft: This is a free work, you can copy, distribute, and modify it under the terms of the Free Art License <a href=""http://artlibre.org/licence/lal/en/"" rel=""nofollow noreferrer"">http://artlibre.org/licence/lal/en/</a></p>
</blockquote>

<p>Given that I'm generating the images client side, using a simple <code>&lt;canvas&gt;</code> element, I cannot include this information in the png Description line, or anything like that</p>

<p>Putting it in the corner of the wallpapers would be unseemly; so I am wondering if it would be enough to give the information in:</p>

<ol>
<li>In the source of the web app and</li>
<li>In the application itself, say in a 'Licensing/Attribution' tab (this is how the art section of the GNU site appears to do it)?</li>
</ol>

<p><img src=""https://i.stack.imgur.com/qOMK0.png"" alt=""Image on GNU site""></p>

<p>Any help that can be offered is greatly appreciated.</p>
","<blockquote>
  <p>It is a copyleft license because any larger work that includes part of the work you received must be released, as a whole, either under the same license or under a similar license that meets stated criteria. Please don't use it for software...</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/license-list.html#FreeArt"" rel=""nofollow"">https://www.gnu.org/licenses/license-list.html#FreeArt</a></p>

<p>You might consider <a href=""https://www.gnu.org/licenses/license-list.html#ccby"" rel=""nofollow"">CC-BY</a> or CC-BY-SA.<br>
An example of attribution can be seen on <a href=""https://commons.wikimedia.org/wiki/File:P4_hull.png"" rel=""nofollow"">Wikimedia Commons</a>.</p>

<p>I would also place the information in a README or LICENSE file,<br>
which is in the same folder as the art.<br>
I would also add the information to the equivalent project level file.</p>
","4621"
"How do search engines read image licence?","60","","<p>It's easy to search for images published under a creative commons licence in search engines, I just have to fine-tune my search options.</p>

<p>But how do I get my images with their licence on the web ? Is the licence in the meta data of the image or do I have to construct my website in a way it'll tell search engines what licences goes with the image ?</p>
","<p>There are multiple ways how the licensing can be made machine-readable in HTML documents. A consumer (e.g., a search engine) might support only some (or none) of them.</p>

<p>Two popular ways:</p>

<h3>Link type: <code>license</code></h3>

<p>HTML5 defines the <a href=""https://www.w3.org/TR/2014/REC-html5-20141028/links.html#link-type-license""><code>license</code> link type</a>.</p>

<p>This always specifies the license for the <strong>main content of the document</strong>. So it’s not possible to use this if only parts of the main content are licensed, if different parts have different licenses, if the whole document should be licensed (not only the main content), or if the <a href=""https://www.w3.org/TR/2014/REC-html5-20141028/grouping-content.html#the-main-element""><code>main</code> element</a> can’t be used (then it’s not clear what belongs to the main content).</p>

<p>Example:</p>



<pre><code>&lt;a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""external license""&gt;CC BY-SA 4.0&lt;/a&gt;
</code></pre>

<p>Note that Creative Commons’ <a href=""https://creativecommons.org/choose/"">Choose a License</a> form creates this markup for you by default.</p>

<h3>RDFa &amp; CC REL</h3>

<p><a href=""https://www.w3.org/standards/techs/rdfa"">RDFa</a> is a syntax that extends HTML, <a href=""http://creativecommons.org/ns#"">CC REL</a> is a vocabulary from Creative Commons.</p>

<p>This allows you to specify the license of every part (image, paragraph, sentence, table, …) in the document.</p>

<p>Note that Creative Commons’ <a href=""https://creativecommons.org/choose/"">Choose a License</a> form creates this markup for you if you provide additional details in the ""Help others attribute you!"" step.</p>

<hr>

<p>Relevant pages from creativecommons.org: </p>

<ul>
<li><a href=""https://wiki.creativecommons.org/wiki/CC_REL"">CC REL</a></li>
<li><a href=""https://labs.creativecommons.org/2011/ccrel-guide/"">CC REL by Example</a></li>
<li><a href=""https://wiki.creativecommons.org/wiki/Marking_Works_Technical"">Marking Works Technical</a></li>
<li><a href=""https://wiki.creativecommons.org/wiki/Metadata"">Metadata</a></li>
<li><a href=""https://wiki.creativecommons.org/wiki/RDFa"">RDFa</a></li>
</ul>
","4655"
"I want to apply the Apache 2.0 Licence to my code. Should I submit it to someone?","60","","<p>I have written for the purposes of my PhD some very short Python code (110 lines) which I believe could be useful to others. Hence I would like to spread it (e.g. on GitHub) but want to prevent anyone who would use it to make a patent out of it. Thus I found that the Apache 2.0 Licence would be appropriate. So I went on the <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">http://www.apache.org/licenses/LICENSE-2.0</a> webpage and read in particular the ""APPENDIX: How to apply the Apache License to your work"". This seems to indicate that there is nothing else to do but copy/pasting the 10 lines of Copyright at the beginning of my code to apply the Apache 2.0 Licence. But I cannot understand how copy/pasting 10 lines of text would give any legal protection to my work.
Sorry for the silly question, but I do not know much about copyright and was not able to find a clear answer on the web.</p>
","<p>Copyright is automatic when you write the work - see <a href=""https://www.copyright.gov/help/faq/faq-general.html#automatic"" rel=""nofollow noreferrer"">copyright.gov</a> for the US.</p>

<blockquote>
  <p>Your work is under copyright protection the moment it is created and fixed in a tangible form that it is perceptible either directly or with the aid of a machine or device.</p>
</blockquote>

<p>You can license that work to others or not as you wish.  The Apache license doesn't give you copyright protection, it lets others use your work without getting sued by you for violating your existing copyright.</p>

<p>So for your case, just add those lines.  You may want to distribute the license as well in a LICENSE file.</p>
","5151"
"License that keeps a library open, but also allows use in proprietary applications?","60","","<p>I wrote a C++ library (that compiles to a dll that can be called in C#).</p>

<p>I would like it so that the library itself can never become proprietary but can be used in proprietary applications. If the proprietor makes any changes to the library code they have to publish only the code for the modified library and nothing else.</p>

<p>Which license would be suitable for this?</p>
","<p>If you want the code never to become propriety, you can use a copyleft license.</p>

<p>If you don't want to force programs that use your library also to become open source, you're looking for <a href=""https://en.wikipedia.org/wiki/Copyleft#Strong_and_weak_copyleft""><em>weak copyleft</em></a>. These licenses ensure that adaptations of the library must be published under the same license as the original library.</p>

<p>The most used weak copyleft licenses are the Lesser GNU Public License (LGPL) and the <a href=""https://www.mozilla.org/en-US/MPL/"">Mozilla Public License</a> (MPL).</p>

<p>The LGPL works on the ""library"" level. If they distribute changes to the library (stand alone or together with a program that calls functions in the library), they must do so under the LGPL, but they are under no license obligation to go open source for programs that only call the library.</p>

<p>They don't have to publish the program that calls the (modified or unmodified) library under the LGPL, but may do so under a propriety or permissive license as well.</p>

<p>The MPL works on a file level. If an entirely new code file is added, they are not bound by the MPL, but if they edit a file that was originally under the MPL, they do have to publish under the MPL.</p>

<p>Note that they are allowed to make changes to the library and not contribute anything back if they are not giving or selling the software to anyone. If they are only using it themselves, but nobody else receives a copy of the (compiled or uncompiled) software, they are under no obligation to publish whatever they changed.</p>

<p>For your situation the LGPL seems the best fit. You can choose between <a href=""http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"">version 2.1</a> and <a href=""http://www.gnu.org/licenses/lgpl-3.0.en.html"">version 3</a>. Version 3 has protection against software patents and ""tivoisation"", which version 2.1 does not. This doesn't have any impact on the criteria you gave. Older versions are no longer relevant.</p>
","2150"
"How to deal with support of open source solutions in bigger projects?","59","","<p>There are many open source solutions that are supported by an organisation, and that helps a lot when considering trainings and consultants.</p>

<p>But when the point is contracts, for a database or an ESB for example, some companies don't consider open source solutions, as there is no legal responsibilities for impacts on the adoption of the respective solution.</p>

<p>How can we present open source solutions to larger organizations, and how would we deal with these responsibilities?</p>
","<p>This is a tough issue that has prevented lots of large companies to move to a more open source business model. </p>

<p>Most companies don't understand that just because your code is free doesn't mean you won't make as much money.
<strong>Options:</strong></p>

<p>If you are a sales representative or just a large supporter of open source material. Some things you could do are:</p>

<ul>
<li><p>explain the benefits of using open source. These are things such as better code, more usable interfaces, customized software and hardware and less bugs and issues.</p></li>
<li><p>Explain to the company that open source does not mean less money. Often when people think of open source they think that the code is free so, therefore, no money. This is not the case.</p></li>
<li><p>Explain the helpful community that they could be apart of.</p></li>
</ul>

<p><strong>Conclusion</strong></p>

<p>This will not work for all people or companies. Despite your efforts to convince them it still may not work. Some people may be scared of the idea or even confused. The best way is to try your best.</p>

<p>Educating people about stuff they don't  know about can often lead them to like the idea.</p>
","563"
"Is the text in my open source project under the GPL?","59","","<p>I have an open source project that used to be under the GPL licence (now it has no licence).</p>

<p>In this repository I had many short stories. My intention was for the code to be open source but the stories to be our copyright. When I made the commit I had not considered this. Once I realized that this might be an issue I removed the license for all future versions of the code. </p>

<p>What I am concerned about now is what licence do people have with these stories? Can they do whatever they want with them under the terms of the GPL? If (hypothetically) somebody wanted to write a book or a movie based on these stories would they be allowed to? If they wanted to make a complete copy of the website with all of the stories in it, can they?</p>

<p>Another issue I have is that I would like to make the code open source again under the GPL or potentially some other licence. If I do this will all the code in-between the 2 versions which are open source, be under any license? For example after I removed the license the first time I continued to add more stories and text that I would not like people to be able to do whatever they want with. Now these are all in a database and not part of the source code. But if I make the project open source will they be able to use that content as well? </p>
","<p><strong>For the past:</strong></p>

<p>The question here is whether your GPL grant did in fact apply to the stories, even though you didn't mean for it to apply. This may come down to exactly what you said in your project (e.g., in your README, code headers, and any other license grant you might have specified external to the project) and possibly how the poject was structured (e.g., were the code and stories in separate directories? where was the text of the GPL, relative to these files?).</p>

<p>Merely placing a copy of the GPL alongside a creative work without explanation doesn't license that work under the GPL. Or does it? It is exactly this kind of legal ambiguity the FSF hopes programmers will avoid by including an explicit license grant within each file of a GPL-licensed project.</p>

<p>If someone did create a derivative work based on your stories, and you sued them, would the court rule that you did in fact license your stories under the GPL, or would they rule against the downstream recipient and say that you didn't license your stories under the GPL after all? I don't have a working knowledge of relevant case law (if any exists), so the answer to this question is not clear to me.</p>

<p>Note that you have indeed ceased distributing anything under the GPL, so only recipients of the old, possibly-GPL-licensed version of your work can make any argument that they have a GPL-licensed version of the stories. Certainly no one can correctly say, ""You used to distribute this under the GPL in the distant past, so I'm going to pretend that my recently-downloaded copy is as well."" However, people who genuinely do have an old GPL-licensed copy can legally distribute the GPL-licensed parts (whichever those may be) without issue.</p>

<p><strong>For the future:</strong></p>

<p>Simply be explicit about what parts of your project are licensed in what ways. Have a README or LICENSING file that says something like, ""Files under the <code>foo</code> directory are under the GNU GPL, version 3 or (at your option) any later version. Image files under <code>foo</code> are also available under the MIT X11 license. Files in the <code>bar</code> directory are made available only for personal reading and are all rights reserved."" Now there's no confusion at all about which files are under which licenses.</p>
","5552"
"Is there a standard way to declare inbound=outbound?","59","","<p>The traditional expectation for contributions to a free software project are <strong>""inbound=outbound""</strong> [<a href=""https://opensource.com/law/11/7/trouble-harmony-part-1#contribution-policies-and-free-software-tradition"" rel=""nofollow noreferrer"">1</a>] [<a href=""http://producingoss.com/en/contributor-agreements.html"" rel=""nofollow noreferrer"">2</a>]. That is, if the project is under license X, contributions are made under license X.</p>

<p>However, I'd like to make a simple statement about this in my README, just for clarity. I don't want to say ""inbound=outbound"" because that phrase is opaque without a lot of prior knowledge. Is there a well-established / recognised phrase for stating this?</p>

<p>(I'm looking for a standardised phrase for a human reader, not a legal solution which might be license dependant [<a href=""https://opensource.stackexchange.com/questions/5508"">3</a>] [<a href=""https://opensource.stackexchange.com/questions/5512"">4</a>] [<a href=""https://opensource.stackexchange.com/questions/5513"">5</a>].)</p>
","<p>I have not found an already-established phrase used to express this. I'm going with:</p>

<blockquote>
  <p>Additional contributions under the same terms are welcome.</p>
</blockquote>
","5520"
"Open source components in a larger one-off system setup","59","","<p>I'm in the early concept and planning stages of a large-ish interactive installation. The installation is a one-off for a large client; think a mix between science museum interactive stands/kiosk-type devices and product showroom where visitors are guided around. Lots of networking, AV, lighting control, custom electronics, etc. etc..</p>

<p>The setup will likely include a motley assortment of tech from Windows PCs to Raspberry Pis, to *nix servers. A lot of closed-source custom software will be written for all this, but run on a variety of platforms, likely encompassing all sorts of licenses. There are no plans to modify any FOSS source code, only to build a somewhat complex stack out of various building blocks, but that stack is in effect part of the product in the end.</p>

<p>So since setting up, say, a MySQL server (unmodified) on a dedicated/purpose-bought piece of on-site hardware could be part of the complete <em>system</em> what would the licensing implications be? Would that for instance call for a commercial MySQL license or is it arguably ""internal"" still? Or would the use of a GPL Linux distro (again unmodified) on that hardware somehow impact everything else (esp. the closed-source apps at the very top of the stack) since it's part of the complete ""product""?</p>

<p>Should note that while the software written specifically for this installation will be closed-source, the code will be held in escrow, so the client can get that too, pursuant to certain terms. And of course it's no problem to provide the client with any open source stuff used in the setup; that's as free to them as it is to us, we'd just be setting it up.</p>
","<p>I'll try to summarize in this answer what has already been said in the comments.</p>

<p>First of all, as noted by @RubberDuck:</p>

<blockquote>
  <p>Your company's lawyer is the best person to ask.</p>
</blockquote>

<p>Second, you are bringing a machine with software on it to your clients. This is generally considered distribution of the software, and thus you have to comply with the terms of the software license regarding distribution. For strong copyleft licenses like GPL, they include giving a copy of the license and an offer to the source code (on a physical medium, because the software was physically distributed).</p>

<p>Third, the question of being bound or not by the software license terms regarding modification depends whether your product is a derivative of each of its components or not. Putting various software on a machine and making them work together is generally considered aggregation, not distribution.</p>

<p>Cf. (in section 5 of the GPL v3):</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
</blockquote>

<p>and <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation</a></p>
","5248"
"Providing license text on a display-less system","59","","<p>We are building a display-less system, which interacts with the user only through an audio interface (and some buttons).</p>

<p>Our system is based on Linux, and as such we are using several GPL/LGPL components. Now, the licenses explicitly say that a copy of the license should be provided with the program (which we are effectively distributing with the device we are building), but in our case the license text cannot be shown to the user. Morevoer, we did think of printing the license texts, but in that case this would hinder us when delivering updates to the product.</p>

<p>Our current idea is to reproduce, using a TTS, the license text to the user, do you know if there's some other way to achieve compliance with the license terms? What if we didn't have an audio interface either?</p>
","<p>You not only have to provide the license, but also the source code itself (in the preferred form for making modifications to it). Even if it would be allowed to provide the license as audio (not sure if it is), this wouldn’t be the case for the source code (as it’s not the ""preferred form for making modifications""). You should bundle the source and the license.</p>

<p><a href=""https://www.gnu.org/licenses/gpl-3.0.en.html#section6"" rel=""nofollow noreferrer"">Section 6 of the GPLv3</a> describes how you can provide the source.</p>

<p>When selling a device (on which the software runs), you can either </p>

<ul>
<li>enclose a <strong>physical medium</strong> that contains the source (6.a), or</li>
<li>enclose a <strong>written offer</strong> saying that you can give out such a physical medium or that the source can be downloaded from a server (6.b).</li>
</ul>

<p>For the software updates, 6.d applies (unless they come on a physical medium, in which case also 6.a/6.b apply).</p>

<p>Typically the easiest way would be to offer everything for download on your server. When selling a device, enclose a paper with the URL (+ username/password, if you prefer) for the page where you upload the software and its source of the version initially installed as well as of all updates.</p>

<p>In addition, you could of course also provide a TTS menu point in your software, which explains which licenses apply, where the licenses can be read, and where the source can be downloaded.</p>
","5806"
"What licenses can be used for open source projects?","59","","<p>I really don't know much about licensing. All I know is there are a hell of a lot of licenses out there.</p>

<p>I suppose there are so many, because each one exists for a specific use.</p>

<p>Is there a list of open source licenses with its corresponding usages available?</p>

<p>To be specific, I'm looking for an open source license for a mobile app. I'm pretty sure I'll have to adapt to the licenses of the framework(s) I be potentially using.</p>

<p>Please let me know, if this still is too broad.</p>
","<p>A basic list of licenses can be found here: <a href=""http://opensource.org/licenses"" rel=""nofollow"">http://opensource.org/licenses</a></p>

<p>The site <a href=""http://choosealicense.com/"" rel=""nofollow"">Choose a license</a> is designed to help you pick a license.</p>

<p>Generally: most modern licences (look at the popular licenses at opensource.org) are good for most software. But if you use libraries or frameworks by others, the license of these may have influence on the licenses you can choose. for instance the <a href=""https://www.gnu.org/licenses/gpl.html"" rel=""nofollow"">GNU GPL (GNU General Public License)</a> demands, that every derivate code (and that includes code linked if it is a library) to be put under the same license. To know in detail we have to know the libraries/frameworks in question.</p>

<p>So your first step should be to research in which way the stuff you use restricts you on the choice of license. If you are clear about that, you have basically to decide, if you want a permissive license, or one that demands derivates to be open source again (like before mentioned GPL).</p>
","216"
"What should I keep a close attention to when selecting a license for my project?","59","","<p>There are plenty of open source licenses out there. What should a person especially keep in mind while they're selecting a license for their project?</p>
","<p>Mainly you want to decide if you license it permissive or not. Other than that, some licenses are matured more and are tested better in courts. <a href=""http://choosealicense.com/"" rel=""nofollow"">Choose a license</a> should be helpful in picking a license.</p>

<p>Basically it recommends MIT if you want a permissive license, Apache if you want to consider software patents and GPL if you want to keep the project open source.</p>
","109"
"Which front-end agreement types go well with a MIT license?","59","","<p>I've decided on using a MIT license for a software project. Now I would like to go ahead and add agreements to the front-end of a website that uses the MIT licensed software. I looked at the template agreements on Termsfeed but they are not the same as for example those on Ebay. What are the typical agreement types that a small sized open source software project would present the user with on the front-end of a website and can the different agreements listed below be merged into one grand terms of service?</p>

<p>Front-end agreement types offered by <a href=""https://termsfeed.com/"" rel=""nofollow"">Termsfeed</a>:</p>

<ul>
<li>Privacy policy </li>
<li>Terms  of service </li>
<li>Terms of use </li>
<li>Terms and conditions</li>
<li>Return and refund policy</li>
</ul>

<p>Front-end agreement types used on <a href=""http://www.ebay.com/"" rel=""nofollow"">Ebay</a>:</p>

<ul>
<li>User agreement </li>
<li>Privacy </li>
<li>Cookies </li>
<li>AdChoice</li>
</ul>
","<p>The license you choose for the software that runs the website is orthogonal to the terms you offer to the users of your website. The license - the thing that makes it open source - deals with copyright.</p>

<p>All other terms have nothing to do with that, and there is no interaction between the license and other terms of use. The fact that your website runs open-source software doesn't influence any of the agreements you mentioned, and you can choose them as you would for any website that isn't under an open source license.</p>
","2128"
"""Fair use"" open source licence","58","","<p>I'm looking for a ""fair use"" open source license. By this I mean that I want anyone to be able to browse the source code and take bits and pieces as they please, and be able to inspect my source code to establish trust with my business and look for security vulnerabilities, but they may not take the entire site and change the domain name and create a competitor to my business.</p>

<p>Other than writing such a license myself, is there already a license that fits these requirements?</p>
","<p>What you are asking cannot be a free/open-source license because it does not grant users the freedom to pass along copies, or to use the software for any purpose, or to publish modified versions – see the <a href=""https://opensource.org/osd"" rel=""noreferrer"">Open Source Definition</a>.</p>

<p>However, what you describe is very close to the default copyright, if you do not issue any license. When you publish the code, it is automatically protected via copyright. People may obviously read the code that you published. But they do not have the right to redistribute your code, or publish their own changes to the code. People may use parts of your code under a copyright exemption of their applicable jurisdiction, for example under the fair-use doctrine in the U.S., or if the used part is too trivial to be protected by copyright.</p>

<p>One risk with this is that many people mistake “published copyrighted work” for “it's on the internet, so that's basically public domain”. But even formal licenses don't solve the problem of people ignoring copyright.</p>

<p>You are not the first to have this problem. It may be worth looking into Microsoft's non-free “shared source” license family. E.g. The MS Reference Source License includes a non-transferable license to reproduce the code and a non-transferable patent grant, but both only for reference use. Note that you can probably achieve your goals without giving similar permissions.</p>
","6101"
"Can I use a GPL component in my site without having to disclose the sources of my site?","58","","<p>In which of the following situations can I use a GPL component in my website without having to GPL or disclose the source code of my entire site?</p>

<ol>
<li><p>The component is a JavaScript library that goes into one page.</p></li>
<li><p>The component is an executable program called by the backend via something like <code>System.run(""component.exe"")</code>.</p></li>
<li><p>The component is a dynamic link library invoked at runtime by the backend.</p></li>
<li><p>The component is a static library linked at build time with the backend.</p></li>
</ol>

<p>Note that I only intend to use the GPL component to support the features in my site, not to modify or distribute the GPL component for others to use.</p>
","<p>The GPL only triggers when you distribute a program that is derivative of the GPL'ed program, e.g. by linking to it. You are free to run a GPL-licensed program without having to accept the license.</p>

<ul>
<li><p>If the GPL'ed program is client-side JavaScript, then you are distributing the GPL'ed code and possibly derivative code to your visitors. You are only allowed to do this in accordance with the GPL. Whether your website is a derivative work of the GPL'ed code depends on what this code is and how you are using it.</p>

<p>Simple example: you have a single-page web-application. Your JS code uses a GPL'ed widget or library. Therefore, your SPA falls under the GPL and you are required to make your source code available in accordance with the GPL.</p></li>
<li><p>If you are calling a separate executable where that executable is subject to the GPL, you are very likely not creating a derived work.</p>

<p>Example: Your server invokes the GNU <code>wget</code> command line tool to archive some web page. Since this is an entirely independent program from your code, your server code is not affected by the GPL.</p></li>
<li><p>If you are linking with GPL'ed code dynamically or statically then you can run this combined work, but may only distribute/publish it under the terms of the GPL. Deployment to servers under your control is not distribution.</p>

<p>Example: Your server-side code builds upon a GPL'ed library. Therefore, your server-side code is a derived work of the GPL'ed code. If you publish your program, you can do so only under the terms of the GPL. Running a publicly available server is not the same as publishing the server program, so you have no further restrictions.</p></li>
</ul>

<p>Note that the GPL contains a family of licenses. Different versions of the GPL have different specific details and terminology. But they all share the same spirit. The LGPL licenses are a more liberal variant of the GPL, e.g. they allow you to link to LGPL'ed code under certain circumstances. The AGPL license gives end-users of web applications similar freedoms to end-users of normal applications. When running AGPL'ed software this answer does not apply as you are subject to additional requirements.</p>
","6133"
"Can you use your own work in a closed source product if it's licensed under the GPL?","58","","<p>I'm new to licenses and don't really understand the difference between the license choices on GitHub.</p>

<p>If you license your own work under the GNU General Public License, does this mean you wouldn't be able to use the code again in a closed source commercial product you own?</p>
","<p>Absolutely.</p>

<p>If you own the code, you can dual-license it, or do whatever you want with it.</p>

<p>Just be sure you own all of it - i.e. that you haven't incorporated someone else's copylefted code into it.</p>

<p>When you write code, you automatically have the copyright on it. It's then up to you how you license that for use by others. The only restriction you really have is that you can't <em>revoke</em> a license once you have issued it.</p>
","2955"
"How to copy a project from codeplex to github","58","","<p>Since codeplex hub is disappearing, some projects have not been moved by their owners to other places. </p>

<p>What would be process of moving someone elses project?</p>
","<p>You will need to check the software License. If it is some of the opensource licenses that will enable you to make a fork, is just a matter of importing code on github. Depending on the license, you can relicense, or you will be forced to change the name of your new forked project(maybe someone owns the ""brand"" of this software, like Linux is a <a href=""https://lmi.linuxfoundation.org/programs/legal/trademark/attribution"" rel=""nofollow noreferrer"">trademark of Linus Torvalds</a>).</p>

<p>Since creating a step-by-step on how to import code on github is off-topic, I suggest you to take a time to read the documentation of the <a href=""https://help.github.com/articles/importing-source-code-to-github/"" rel=""nofollow noreferrer"">Github Importer Tool</a>. The <a href=""https://help.github.com/articles/about-github-importer/"" rel=""nofollow noreferrer"">about page</a> gives more details on what source control software is supported. From here, it is just a matter of set the Codeplex url on your new Github repo and execute the import.</p>

<p>This answer can also apply to other repository management tools, if they use the same Version Control Source tools that are supported by github. You can even use <a href=""https://help.github.com/articles/source-code-migration-tools/"" rel=""nofollow noreferrer"">external tools</a> to make the source code migration if using github importer is not an option for any reason.</p>
","5672"
"How to properly give attribution for an email template?","58","","<p>I'd like to use an email template licensed under a Creative Commons <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""nofollow"">Attribution-ShareAlike 3.0 Unported License</a>, specifically MailChimp's <a href=""https://github.com/mailchimp/email-blueprints"" rel=""nofollow"" title=""Email Blueprints"">Email Blueprints</a>.</p>

<p>The license states that attribution must be given in a way that is ""reasonable to medium, means, and context."" </p>

<p>I'd prefer that the license information not be rendered in email clients, but be available in the source as a comment. Is there a requirement for attribution to be visible in the media under this license?</p>
","<p>I'd follow <a href=""https://creativecommons.org/licenses/by-sa/3.0/legalcode"" rel=""nofollow"">the legal document</a> here.</p>

<blockquote>
  <p>If You Distribute, or Publicly Perform the Work or any Adaptations or Collections, You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work</p>
</blockquote>

<p>If the templates <em>do</em> contain a client-rendered copyright notice, then you must keep that in the same form. If they do not, then I see no reason you should have to add them: if the author wanted that information rendered for every client, they could have included said notice.</p>

<blockquote>
  <p>and provide, reasonable to the medium or means You are utilizing:</p>
</blockquote>

<p>What is “reasonable” for an email? I'd say anything which takes up too much space in the rendering may not be reasonable. But I'd also not use comments, since some automatic transformation steps may remove these. Instead I'd go for <a href=""https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element"" rel=""nofollow"">HTML <code>&lt;meta&gt;</code> tags</a>, as conveying this kind of information is one of the main purposes of meta tags.</p>

<blockquote>
  <p>(i) the name of the Original Author […]; (ii) the title of the Work[…]; (iii) […] the URI […]; and (iv), consistent with Section 3(b), in the case of an Adaptation, a credit identifying the use of the Work in the Adaptation (e.g., ""French translation of the Work by Original Author,"" or ""Screenplay based on original Work by Original Author"").</p>
</blockquote>

<p>That lists <em>what</em> you have to include. The URI should go in a <code>&lt;link&gt;</code> tag, not a <code>&lt;meta&gt;</code> tag.</p>

<blockquote>
  <p>The credit required by this Section 4(c) may be implemented in any reasonable manner; provided, however, that in the case of a Adaptation or Collection, at a minimum such credit will appear, if a credit for all contributing authors of the Adaptation or Collection appears, then as part of these credits and in a manner at least as prominent as the credits for the other contributing authors.</p>
</blockquote>

<p>So if you include your own name or the name or the projectas part of the template (as opposed to a signature, which I would consider part of the textual content but not of the template), then you have to name the original creator or project as prominently.</p>

<p>Of course, you can avoid a lot of worries by simply asking the original author which form of attribution they'd like to see, or whether they agree with your preferred form (be it comments or <code>&lt;meta&gt;</code> tags). Chances are they will be delighted to see someone making use of their liberally licensed content.</p>
","4554"
"Python projects & licensing choice","58","","<p>I have some python projects which I release on github.<br>
Some of them binds actions to some DLLs, and some are purely reinventing the wheel.<br>
I choosed MIT license for these kind of projects, then I found BSD licenses which seems appropriate too.</p>

<p>Now, I have a bigger project, dealing with a lot of conversions.
I plan to make some graphical interfaces too when the low level will be up &amp; working.
Yet, this package could be used as a library in higher level projects.</p>

<p>I can mention that I only use numpy in this package (which is licensed under BSD-3).</p>

<p>I'm somewhat lost in choosing a proper license for this kind of project.<br>
GPL seems too constraining in my taste, as MIT or BSD seems a little too permissive.</p>

<p>Are there some licenses that falls in between?</p>

<p>Also, I found that there is Python Software Foundation License.
It seems this license is for contributing to Python itself, but I'm not totally sure what it means and implies.<br>
Does anyone have some pieces of answers regarding this matter too?</p>
","<blockquote>
  <p>I'm somewhat lost in choosing a proper license for this kind of project.
  GPL seems too constraining in my taste, as MIT or BSD seems a little too permissive.<p>
  Are there some licenses that falls in between?</p>
</blockquote>

<p>While there isn't really a linear scale of permissiveness, you might be looking for the weak-copyleft class of licenses. In short, they require modifications to your software to remain under the same license but still allow combining it with software of different licenses, including proprietary. MPL (<a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow noreferrer"">Mozilla Public License 2.0</a>) could be a good choice if that's what you're looking for. You could also have a look at LGPL, but imo MPL is a bit more user friendly.</p>

<p>If you don't care about copyleft at all you'll need to be more specific on what you find lacking in MIT and BSD.</p>

<blockquote>
  <p>Also, I found that there is Python Software Foundation License. It seems this license is for contributing to Python itself, but I'm not totally sure what it means and implies.<br>
  Does anyone have some pieces of answers regarding this matter too?</p>
</blockquote>

<p>That's the license the Python distribution is released under. It's a permissive license that requires you to briefly explain what you have changed in case you want to release a derivative work. This license only comes into play if you want to release something based on the source code in the Python distribution, not if you release a program written in the python language and depending on the Python distribution.</p>
","5240"
"Using code from research paper under different license","58","","<p>There is a research paper with a couple of related numerical algorithms I would like to use as part of an open-source project of mine. The paper itself includes plenty of pseudo-code-snippets, but the authors have also written a full C++ implementation which is available publicly. I would like to include their work into my own library, which is written in a different programming language.</p>

<ol>
<li>If I straight-forward port their code to my language, it would of course be a derivative work so I would be stuck with their license (modified BSD). This would be a hassle because the rest of my project usese the Boost-license.</li>
<li>I could start from their paper (i.e. pseudo-code-snippets) and implement everything from scratch in my language. But given that I have seen their C++-code, I am worried that I have been influenced sufficiently that anything I write would still be considered a derivative work, even though I wrote every line of code myself. Am I right?</li>
</ol>

<p>What is the suggested course of action here? I am kinda confused about the line between an abstract algorithm (which is a non-copyrightable idea AFAIK) and actual code (which is under strict copyright by default). On which side of the spectrum does pseudo-code fall that can easily be converted into actual code?</p>

<p>The algorithm in question is the ""double-double"" and ""quad-double"" floating-point types described here (<a href=""http://www.jaist.ac.jp/~s1410018/papers/qd.pdf"" rel=""noreferrer"">http://www.jaist.ac.jp/~s1410018/papers/qd.pdf</a>) and implemented here (<a href=""http://crd-legacy.lbl.gov/~dhbailey/mpdist/"" rel=""noreferrer"">http://crd-legacy.lbl.gov/~dhbailey/mpdist/</a>).</p>
","<p>If you port the modified-BSD-licensed code and release that, you would need to follow the modified BSD license. This does <em>not</em> mean you have to license your code under the modified BSD license. According to <a href=""https://tldrlegal.com/license/bsd-3-clause-license-(revised)"" rel=""noreferrer"">tldrlegal</a>, you must: </p>

<ul>
<li>Include copyright</li>
<li>Include license</li>
</ul>

<p>That's all. For more details check out: <a href=""https://opensource.stackexchange.com/q/1829/175"">How to licence a project which includes MIT, BSD, Modified BSD, and New BSD libraries</a></p>

<p>Of course, there are licenses where you <em>do</em> have to license derivative works under the same license; such licenses are often called <strong>copyleft</strong> licenses. Modified BSD license is an example of a <strong>permissive</strong> license.</p>
","6396"
"What could be criteria to be accepted as a speaker at OSCON?","58","","<p>For several years now, I've replied to CFPs from OSCON, submitting different open source topics. Unfortunately, year after year I receive the same boiler-plate reply:</p>

<blockquote>
  <p>The response to our Call for Proposals was overwhelming this year. We 
  received over X proposals, a record number for us and far more than 
  we can possibly accommodate in the program.</p>
  
  <p>We had intense competition for speaking slots, and we unfortunately have 
  to turn away many strong proposals. We take this as an exciting signal of 
  the demand for OSCON, but it also means we had some hard decisions to make 
  in putting together the program.</p>
  
  <p>We're still working out a few loose ends in the program, but unfortunately 
  this proposal was not selected for inclusion.</p>
</blockquote>

<p>I have tried finding the criteria for selection, but I'm at a loss:</p>

<ul>
<li><strong>Quality of the proposal:</strong> I always posted an original proposal for OSCON. After it was refused, I reused the proposal for other events, such as Tech Startup Days, Java One, Devoxx,... More often than not the <em>same proposal</em> was accepted at that other event.</li>
<li><strong>Seasoned speaker:</strong> I am a mentor at the Founder Institute (about IP and Legal). I presented talks at Java One, Devoxx, T-DOSE, Startups.be, PDF Days, PDF Technical Conference,... I know how to entertain an audience.</li>
<li><strong>Open Source Champion:</strong> I am the original developer of iText, a successful open source PDF library. I accrued <a href=""https://stackoverflow.com/users/1622493/bruno-lowagie"">29K+ reputation points on StackOverflow</a>.</li>
<li><strong>Expert:</strong> I wrote two books for Manning publications. I am a member of the ISO committees for PDF. I've won Deloitte's Fast 50 competition in Belgium (ranking 28th place in the EMEA region),...</li>
<li><strong>Experience:</strong> I wrote my first open source library in 1998. I founded 5 companies, 4 of which still exist. I succeeded in creating a profitable open source business.</li>
</ul>

<p>Granted: this list doesn't exactly sound modest, but I'd expect that all of these ""achievements"" are relevant in the context of choosing a speaker. Would I have a better chance at being selected for a talk at OSCON if I submitted a talk anonymously?</p>

<p>Being a speaker at OSCON is one of those items that I just don't succeed in checking off from my bucket list.</p>
","<p>I understand the situation you must be going through however...</p>

<p>By the announcement they released it sounds like no matter how good you are at the topic it may not make a difference. Where they said </p>

<blockquote>
  <p>a record number for us and far more than we can possibly accommodate </p>
</blockquote>

<p>It made it sound like they had an overflow of applicants and they couldn't have fully read / accepted all of the good ones.</p>

<p><strong>Recommendation:</strong></p>

<p>I would continue to submit your application every year, and complete it to the best of your abilities (a good application would approve your chances if they do read it). Other than that just keep trying, eventually they will get your application, read it, and be amazed!</p>
","545"
"Does a Contributor License Agreement prevent future employment with that company?","57","","<p>While job searching I thought it'd be nice to get a leg up on the hiring process for this particular company by contributing to the their open source projects. </p>

<p>Signing a CLA makes sense, however I just wanted to make sure this doesn't bar me from employment with them to some degree. </p>
","<p>Of course not. A CLA says (paraphrased) ""code I write belongs to you"". Employment contracts say (either explicitly or implicitly) ""code I write belongs to you"". No problem there.</p>

<p>(What might be a problem is having a CLA with Company A and then going to work for Company B in the same field. But there would be ways to sort it out).</p>
","6169"
"Does the license of a released product / artifact change with the content of a webpage?","57","","<p>Many products / artifacts point to a webpage to declare their license.
e.g. <a href=""http://www.antlr.org/license.html"" rel=""nofollow"">http://www.antlr.org/license.html</a>.</p>

<p>The content of the webpage can change at any time.
Does that mean that already published products also change their license?</p>

<p>Note: In the case of antlr the license actually did change.</p>

<p>Example:</p>

<ul>
<li><p>Artifact foo:1.0 is released on 2016-01-01, the license is via reference to <a href=""http://this.is.a.license"" rel=""nofollow"">http://this.is.a.license</a>. This webpage says it is GPL-2.0</p></li>
<li><p>on 2016-03-01 the webpage is change to say it is LGPL-2.1 and a new version foo:1.1 is released</p></li>
<li><p>on 2016-04-01 a build download version 1.0 to my local maven repo and I check the license </p></li>
</ul>

<p>Q: Is it is correct to assume license for version 1.0 is LGPL-2.1 ?</p>
","<p>Generally speaking, a future change to the code's license does not impact the license under which you received the code. If you validly received some code under the MIT license, and later the author stops offering the code under the MIT license (and offers under the GPL instead, or stops offering it altogether), that does not change the fact that the author granted you free use of the work under the MIT license.</p>

<p>If you did not receive a copy of the license text when you received a copy of the work, you still have permission to use it under that original license grant. However, you may have difficulty proving it, if the owner destroyed all evidence that they used to offer the code under a different license in the past. Determining whether you recieved the code under a particular license would be a matter of evidentiary fact-finding by the court, if legal action ensued. If the court found that the author really did offer you a particular license, then you are free to operate under those license terms, whatever they were at the time.</p>

<p>By linking to a license page, the author can easily say, ""I am currently offering the code under whatever the license text on this page says."" This makes things easy for the author, but more difficult for users who want to verify the exact terms of their license (as the current posted license terms may change to differ from their received license). If the software doesn't include one, users should save a copy of the license grant they received at the time of download, if they wish to refer to it in the future.</p>

<p>It may be possible for the copyright holder to proactively revoke a license grant to some user. I am not sure exactly how to do this, but I imagine the copyright holder would need to directly contact license recipients and inform them that their license grant is terminated. Whether this is a legally valid thing to do probably depends on the exact relationship between the licensor and licensee (is there payment or a contract involved?), how the licensor offered the software (did they explicitly say they reserved the right to revoke the license?), and the exact terms of the license (e.g., the GPLv3 is explicitly irrevocable). There is U.S. case law that strongly indicates that software under an open source license offered to the public at large can be (and may often be) irrevocable by default; see <a href=""https://opensource.stackexchange.com/questions/4012/are-licenses-irrevocable-by-default"">Are licenses irrevocable by default?</a></p>

<p>Regardless, revoking a license is very different from merely changing the license an author offers to future recipients.</p>
","3981"
"How to check if an(y) algorithm is patented/copyrighted or not","57","","<p>I want to know if an/any algorithm is patented or not. If it is patented then where can I find its details. Please explain with an example for both cases.</p>
","<p>Patent are a complicated matter and even more complex for open source. The only sane way to check if an algorithm is patented is eventually to hire a patent attorney. </p>

<p>Short of this, Google <a href=""https://patents.google.com/"" rel=""nofollow noreferrer"">patents</a> is a decent spot to search. 
Some hints:</p>

<ul>
<li>if you know who is the algorithm author(s)S or inventor(s) search for their name</li>
<li>search for the name of other implementor names</li>
<li>search for similar algorithms</li>
</ul>

<p>The language used in patterns is unfortunately Byzantine and obfuscated (MO on purpose) and it is difficult or even practically impossible to assert than there are no patent on an algorithm and this makes it really difficult for FOSS projects.</p>

<p>Software patents make me <em>sigh</em>, not of relief.</p>
","6359"
"Including (small portions of) code copied from the internet, in a project with GPL?","57","","<p>I've been starting to put my code on Github. I added the GNU Public License to most repos. Am I allowed to add spinets of code from the internet that doesn't have a license? For example if I used <a href=""http://www.sanfoundry.com/java-program-check-connectivity-graph-using-dfs/"" rel=""nofollow"">this reference</a> to implement depth first search and copied some of the code?</p>

<p>Another example is I found a good pretty_print function on a website with no license. While I can change the names of things, the idea remains the same. Can I include the pretty_print function in my own code with the GNU Public License? </p>

<p>Should I at least try to change the code in someway so it's not an exact copy? Should I add the URL where I got it from? What if it's just some random wordpress website?</p>
","<blockquote>
  <p>Am I allowed to add snippet of code from the internet that doesn't have a license? </p>
</blockquote>

<p>No license means no license meaning you are <strong>not</strong> licensed to use it beyond looking at it in most cases.</p>

<blockquote>
  <p>For example if I used this reference to implement depth first search and copied some of the code?</p>
</blockquote>

<p>The site you are linking to links to this <a href=""http://www.sanfoundry.com/copyright/"" rel=""nofollow"">Copyright</a> page:</p>

<pre><code>The content may not be redistributed or reproduced in any form without 
the written permission from Sanfoundry. However, if you are linking the
content from our website, you can use a short description (no more than
25-30 words) from our website with the content in quotes plus you must
provide a link to our original article or post.

You cannot use the content (either whole or partial) for any commercial
purpose.
</code></pre>

<p>So it has a clear license that does not allow you to do much and would be conflicting with the terms of the GPL. Contact the author for a proper license compatible with the GPL.</p>

<blockquote>
  <p>Another example is I found a good pretty_print function on a website with no license. While I can change the names of things, the idea remains the same. Can I include the pretty_print function in my own code with the GNU Public License?</p>
</blockquote>

<p>Same answer as above: you are not licensed by default and the lack of an explicit license means you have no rights. By default all rights are mostly reserved. Masquerading the code by doing some renaming would be even worse. Do not do that!</p>
","3963"
"Integrating code without a patent license into a code base with a patent license","57","","<p>What issues are involved when taking code from (for example) MIT licensed code and including it in a Apache 2.0/GPLv3 licensed project.</p>

<p>Does that mean that there is simply no patent license granted?</p>

<p>Is that situation any different from going from LGPLv2.1/GPLv2+ to GPLv3?</p>
","<p>The MIT/Expat license is a permissive license (i.e. no copyleft), so re-licensing code with this license for the purposes of creating a derivative is normally OK.</p>

<p>The LGPLv2.1/GPLv2+ licenses are not permissive, but they have <em>explicit</em> provisions that allow re-licensing to GPLv3, so re-licensing code with one of these license for the purposes of creating a derivative is also normally OK.</p>

<p>If there is no patented code snippets present in the MIT/LGPLv2.1/GPLv2+ code you integrate, then there is no problem doing this re-licensing.</p>

<p>However, the MIT licenses do not have an anti-patent clause, and the anti-patent provisions of LGPLv2.1 and GPLv2+ (unlike GPLv3) are not in the form of a patent indemnification clause.  This means that code distributed under MIT/LGPLv2.1/GPLv2+ <em>may</em> contain patented components (this is more likely to be the case with MIT than with GPLv2.1/GPLv2+).</p>

<p><em>If</em> the code contains patented components, re-licensing it to GPLv3 becomes complicated.</p>

<blockquote>
  <p>Does that mean that there is simply no patent license granted?</p>
</blockquote>

<p>No.</p>

<p>Here are the two possible scenarios if the code you plan to use is patented: </p>

<ol>
<li><p><em>You</em> hold <em>all</em> patent rights in the MIT/LGPLv2.1/GPLv2+ licensed code.  When you take this code and include it in a Apache 2.0/GPLv3 licensed project you're at the same time <em>granting</em> any downstream users the patent license. </p></li>
<li><p><em>Somebody else</em> holds patent rights in the MIT/LGPLv2.1/GPLv2+ licensed code. Then you simply do not have the necessary <em>rights</em> to use the code in a Apache 2.0/GPLv3 licensed project (unless the holder of the patent rights agrees to grant downstream users the patent license.  You should get such an agreement in writing before trying to do this.)<br>
The eventuality that you go ahead and re-license soebody else's patented code to GPLv3 <em>without</em> having the required patent rights is answered (as seen from the patent-holders perspective) in the <a href=""http://www.gnu.org/licenses/gpl-faq.html#v2OrLaterPatentLicense"" rel=""nofollow"">GPL FAQ</a>: The answer first points out that your patents will not be invalidated by this (so the patent license clause of GPLv3 does not kick in). The FAQ then goes on to say that if you try to <em>enforce</em> your patents under such circumstances, the FSF will be p*ssed off.  Here is the exact quote from the FAQ, as something may get lost in paraphrasing:  </p>

<blockquote>
  <p>If users may also elect to use later versions of the GPL, that's merely an additional permission they have — it does not require you to fulfill the terms of the later version of the GPL as well.<br>&nbsp;<br>
  Do not take this to mean that you can threaten the community with your patents. In many countries, distributing software under GPLv2 provides recipients with an implicit patent license to exercise their rights under the GPL. Even if it didn't, anyone considering enforcing their patents aggressively is an enemy of the community, and we will defend ourselves against such an attack.</p>
</blockquote></li>
</ol>

<p>For reference, patent license text from GPLv3:</p>

<blockquote>
  <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p>
</blockquote>
","1220"
"Releasing software as Kopimi","57","","<p><a href=""https://en.wikipedia.org/wiki/Piratbyr%C3%A5n#Kopimi"">https://en.wikipedia.org/wiki/Piratbyr%C3%A5n#Kopimi</a></p>

<p>Essentially, I'm looking to release a piece of software as ""Kopimi"". I want to release it into the public domain so there is nothing stopping someone from using my work. However, can I still be held liable, since it doesn't explicitly release the author from liability?</p>
","<p>The Wikipedia article you linked to notes:</p>

<blockquote>
  <p>While Kopimi may appear to be a radical free content license, in effect similar to Creative Commons Zero, no one associated with Piratbyrån ever called Kopimi a license, instead describing it as a symbol of certain ideas. The website of Kopimi contains no terms or legal text. The Open Source Initiative, Free Software Foundation, or any other organisation within the open-source movement, does not list Kopimi as an approved license.</p>
</blockquote>

<p>The Kopimi symbol is just a symbol. People sometimes use it to mean, ""Please use this however you like and I promise not to sue you,"" but it's not clear to me if a court would enforce such a vaguely implicit promise against you, the author, if you changed your mind and <em>did</em> decide to sue someone. This isn't a condemnation of the Kopimi symbol by any means, but merely my opinion that the Kopimi symbol is not a license (nor an acceptable substitute for one).</p>

<p>If you really want to license your work freely, then <em>actually attach a license to it</em> to promise a clearly-defined set of permissions to all your recipients. If you want to impose no restrictions on downstream distirbution and modification, I highly recommend CC0 (combination license and public-domain dedication) which is recommended <a href=""https://www.gnu.org/licenses/license-list.html#CC0"">by the FSF</a> and <a href=""https://wiki.creativecommons.org/wiki/CC0_FAQ#May_I_apply_CC0_to_computer_software.3F_If_so.2C_is_there_a_recommended_implementation.3F"">by Creative Commons</a> for use on software. The CC0 license/dedication includes a disclaimer of liability.</p>

<p>Note that CC0 does not license any patent rights you may have in the software. CC0 is only a copyright license. If you want to license your patent rights, to assure recipients that you will never hold them liable for infringement of one of your patents, the <a href=""https://www.apache.org/licenses/LICENSE-2.0"">Apache 2.0 license</a> is a permissive license that grants patent rights. However, it still requires attribution, which may be more restrictive than you want your absolutely-free license to be.</p>
","5065"
"Using the name of CC BY-NC 4.0 licensed material","57","","<p>I was wondering, if I am complying fully with the CC BY-NC 4.0 license. Can I keep the name? For example if the name is Abc, my name is Abc Alphabet. Can the author require me to change it and remove any association with his work?</p>
","<p>The name of a work is covered by copyright, and would be under the same terms of the license. Allowing you to make a derivative work of it,, so ABC Alphabet would be fine.</p>

<p>There <em>may</em> be a separate trademark on the name, in which case you should also comply with trademark law.</p>

<p>In general, it's a bad idea to give the impression you are something you are not. I would suggest making it <em>very</em> clear you are not ABC, and are not affiliated with ABC, and choosing a name that doesn't give that impression.</p>
","1665"
"What does LGPL point 3 mean?","57","","<p>The LGPL point 3 says:</p>

<blockquote>
  <p>3. You may opt to apply the terms of the ordinary GNU General Public
      License instead of this License to a given copy of the Library.  To do
      this, you must alter all the notices that refer to this License, so
      that they refer to the ordinary GNU General Public License, version 2,
      instead of to this License.  (If a newer version than version 2 of the
      ordinary GNU General Public License has appeared, then you can specify
      that version instead if you wish.)  Do not make any other change in
      these notices.</p>
  
  <p>Once this change is made in a given copy, it is irreversible for
      that copy, so the ordinary GNU General Public License applies to all
      subsequent copies and derivative works made from that copy.</p>
  
  <p>This option is useful when you wish to copy part of the code of
      the Library into a program that is not a library.</p>
</blockquote>

<p>Can anyone explain what does it mean?</p>

<p>Can one take a LGPL library and use it as GPLv2?</p>
","<blockquote>
  <p>Can one take a LGPL library and use it as GPLv2 ?</p>
</blockquote>

<p>Yes, use it, modify it and redistribute it as GPL v2 (or later).
This is a form of explicit extended LGPL -> GPL compatibility.</p>
","5949"
"Can an Apache 2-licensed work be derived from a GPLv1-licensed work?","56","","<p>The <a href=""https://www.apache.org/licenses/GPL-compatibility.html"" rel=""nofollow noreferrer"">Apache Software Foundation page on GPL compatibility</a> says that
Neither GPLv2 nor GPLv3 can be incorporated into an Apache 2 project. </p>

<p>It doesn't directly make a statement about GPLv1.
But in does make a indirect statement:</p>

<blockquote>
  <p>Despite our best efforts, the FSF has never considered the Apache License to be compatible with GPL version 2, citing the patent termination and indemnification provisions as <strong>restrictions not present in the older GPL license</strong>. </p>
</blockquote>

<p>(emphasis mine)</p>

<p>Am I correct then in my understanding then that GPLv1 is compatible, as it does not the restrictions that were added in GPLv2?</p>
","<p>License compatibility is a one-way street, so we ought to phrase statements about license compatibility very precisely: So for two licenses X and Y, we are interested if “X-licensed code can be used in Y-licensed software”.</p>

<h2>Can I use GPL-licensed code in Apache-licensed software?</h2>

<p>For all versions of the GPL and the Apache License: GPL-licensed code cannot be used in Apache-licensed projects. This is because the GPL is a <em>copyleft license</em> that requires the resulting work to be published under the same license as the original work. So it is impossible to base an Apache licensed work on a GPL-licensed work (any version). For the GPLv1, this is clear from <a href=""https://www.gnu.org/licenses/gpl-1.0.en.html"" rel=""noreferrer"">section 2.b)</a>:</p>

<blockquote>
  <ol start=""2"">
  <li><p>You may [distribute modifications], provided that you also do the following:</p>
  
  <p>[…]</p>
  
  <p>b) cause [any work that partially or completely contains the Program] to be licensed […] under the terms of this General Public License […].</p></li>
  </ol>
</blockquote>

<p>So you cannot take GPLv1 code, modify it, and publish the modified version under any different license.</p>

<h2>Can I use Apache-licensed code in GPL-licensed software?</h2>

<p>The other direction is a bit more differentiated. Because the Apache licenses are <em>permissive licenses</em>, they can be used with any other license that satisfies the terms of the Apache license. However, the Apache License 2 contains a patent license that complicates things. That is what your quote is about: according to the FSF, Apache-2-licensed code cannot be used in GPLv2-licensed projects. If it were possible to use Apache-2 code under the GPLv2, that would “forget” about the Apache-2 license's patent terms which is not possible. With the GPLv3 this point has been made compatible by adding relevant terms, so you can use Apache-2-licensed code in a GPLv3-licensed project.</p>

<p>To be clear about the understanding of the quote: it talks about the “patent termination and indemnification provisions” of the Apache-2 license, and “the older GPL license” refers to the GPLv2. So you can't use Apache-2-licensed code because the GPLv2 does not contain equivalent terms to the Apache 2 license. It makes no statement about the GPLv1. The patent terms were not added in the GPLv2, but in the GPLv3 and the Apache 2 license.</p>
","5624"
"Can I combine multiple 2-Clause BSD LICENSE files into one?","56","","<p>Suppose I have a program which uses the BSD 2-Clause license:</p>

<pre><code>Copyright (c) 2016 Myself
All Rights Reserved

[BSD 2-Clause boilerplate here]
</code></pre>

<p>It happens to use a library, in some foo/ subdirectory which contains
exactly the same license:</p>

<pre><code>Copyright (c) 2016 Other Dev
All Rights Reserved

[Identical BSD 2-Clause boilerplate]
</code></pre>

<p>While keeping this <code>foo/LICENSE</code> file where it is, can I just add Other Dev to my top-level license file? For instance like this:</p>

<pre><code>Bar Program:
  Copyright (c) 2016 Myself
  All Rights Reserved

Foo Lib (foo/ subdirectory)
  Copyright (c) 2016 Other Dev
  All Rights Reserved

[BSD 2-Clause boilerplate]
</code></pre>

<p>Or is this fine:</p>

<pre><code>Copyright (c) 2016 Myself
All Rights Reserved
Copyright (c) 2016 Other Dev
All Rights Reserved

[BSD 2-Clause boilerplate]
</code></pre>

<p>Can we factor out the ""All Rights Reserved"":</p>

<pre><code>Copyright (c) 2016 Myself
Copyright (c) 2016 Other Dev
All Rights Reserved

[BSD 2-Clause boilerplate]
</code></pre>

<p>Who exactly wrote what is covered in the individual source file copyright headers.</p>

<p>If  someone borrows code which is mine (not under <code>/foo</code>) will they understand that they may remove the Copyright lines mentioning Other Dev from the LICENSE, including only copyright notices that pertain to the material being taken?</p>
","<p>The BSD 2-clause license is really permissive. The only condition which applies to distribution of source code is this one:</p>

<blockquote>
  <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p>
</blockquote>

<p>The three parts of the license (the copyright notice, the list of conditions and the disclaimer) must all be retained but they are listed separately, not as a block, so there really is no restriction which would prevent you from ""merging"" several BSD-2-clause LICENSE files into one.</p>

<p>Thus, all the solutions you propose are fine. I would personally go with the last one because it is the simpler. (Note that ""All Rights Reserved"" is traditionally part of BSD licenses but serves no special purpose: <a href=""https://opensource.stackexchange.com/a/4403/5858"">https://opensource.stackexchange.com/a/4403/5858</a>.)</p>

<p>However, I would bet that if someone borrowed your code (and not the dependency), they would not understand that they can remove the copyright notice of the other dev. That would not really be a problem however (a factually incorrect copyright claim does not void other, factually correct, copyright claims). If you want to be sure that they understand which copyright notice applies to which part of the work, just keep the original notice in the subfolder and do not reproduce it at the root. The license does not force you to do that. (I would then add a note in the README telling about the dependencies but this is just good manners.)</p>
","4533"
"What can I do if there is no CC ported license in my country?","56","","<p><strong>Background:</strong></p>

<p>Suppose I am developing an open source project. I am at the stage where I need to license my software. After doing research I find out that I live in a place where there is no ported CC license.  </p>

<p><strong>My question:</strong></p>

<p>What do I do if the CC license I want to use has not yet been ported in my country?</p>
","<p>Creative Commons recommends that you use their international licenses now. From their FAQ:</p>

<blockquote>
  <p>We recommend that you use a version 4.0 international license. This is the most up-to-date version of our licenses, drafted after broad consultation with our global network of affiliates, and it has been written to be internationally valid. There are currently no ports of 4.0, and it is planned that few, if any, will be created.</p>
  
  <p>All of the ported licenses are at version 3.0 or earlier, which means licensors using those licenses do not have the benefit of the improvements made in the 4.0 license suite. But even before considering the improvements in 4.0, there are several reasons why the international licenses may be preferable for rights holders, even if the licenses have been ported to their jurisdiction. As an organization, CC itself licenses all of its own content under an international license because, among other reasons, the international licenses are essentially jurisdiction-neutral while remaining effective globally. The neutral nature of the international licenses appeals to many people and organizations, particularly for use in connection with global projects that transcend political borders. Finally, it is important to know that some of the ported licenses contain a choice of law provision, which may be undesirable for your needs.</p>
</blockquote>

<p>With the Version 4.0 licenses, there will be no ported versions. Creative Commons itself licenses their own content under the international license, to remain jurisdiction-neutral. The neutral nature appeals to many people and organizations. </p>

<p>To answer your question: If there is no ported license, you can use the International licenses.</p>
","586"
"Can I use Apache software logos without explicit permission in my slides?","55","","<p>According to <a href=""https://www.apache.org/foundation/marks/"" rel=""nofollow noreferrer"">Apache Trademark Policy page</a>, I can use Apache feather logo in my slides without asking permissions.</p>

<blockquote>
  <p>You needn't ask us for permission to use the Apache feather logo (the version published by us here ) on your own website solely as a hyperlink to www.apache.org or to an appropriate Apache project, or in other materials, such as presentations and slides,</p>
</blockquote>

<p>In contrast, there is another rule for Apache Foo software. It does not include  ""presentations and slides""</p>

<blockquote>
  <p>You needn't ask us for permission to use Apache's graphics logos (the versions published on individual project's websites) on your own website solely as a hyperlink to the specific Apache project website or to www.apache.org. All other uses of Apache Foo (and similar) graphic logos must be approved in writing by VP, Apache Brand Management, member of the Brand Management Committee, or the relevant Apache projects' VP.</p>
</blockquote>

<p>Should I contact them to use logos in my presentation?</p>
","<p>You missed this important part of the <a href=""https://www.apache.org/foundation/marks/"" rel=""nofollow noreferrer"">Trademark Policy</a>:</p>

<blockquote>
  <p>Unlike ASF's word trademarks (such as ""Apache"" and ""Foo""), our graphic logos are also licensed to the public under the Apache License. That license permits you to create derivative works of those logos, as with any other Apache copyrighted work. However, trademark law does not allow you to apply any ""confusingly similar"" derivative logo to software if a relevant consumer would likely be confused by that use of that derivative logo.</p>
</blockquote>

<p>Therefore you can use the logos in your slide deck under the Apache license alright without asking for permission. You could just add an Apache notice and a link on a trailing slide alright.</p>
","5824"
"Can I use images and resources available with GPL3 code?","55","","<p>I would like to use images available in a github repository that is marked with GPL3 license. If I proper reference it, can I use and modify it without author's explicit consent?</p>

<p>If so, is it still valid for MIT and GPL2 licenses?</p>
","<p>I am not a lawyer, but unless stated elsewhere in the repository, it seems reasonable to assume the image is GPLv3 if the repository, as a whole, is marked as GPLv3. If I were you, I might attempt to do some investigation (e.g. look through commit history) to the origin of the image to double check that it is indeed GPLv3.</p>

<blockquote>
  <p>If I proper reference it, can I use and modify it without author's explicit consent?</p>
</blockquote>

<p>Correct, you do not need to get the author's consent to use a GPLv3 image. However, you should include any relevant copyright information from the source of the image (look for copyright in the git repository).</p>

<blockquote>
  <p>If so, is it still valid for MIT and GPL2 licenses?</p>
</blockquote>

<p>No, it is not valid to include a GPLv3 image in a MIT or GPLv2 licensed project. GPLv3 is not compatible with either of those licenses. However, you could do the reverse. You could use a ""GPLv2 or any later version"" licensed or MIT licensed image in a GPLv3 project.</p>

<p>Open source license compatibility chart: <a href=""https://en.wikipedia.org/wiki/License_compatibility#/media/File:Floss-license-slide-image.png"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/License_compatibility#/media/File:Floss-license-slide-image.png</a></p>

<p>Make sure to comply with <strong>all</strong> of the requirements (not just the copyright requirement) of the GPLv3 if you choose to use that license. </p>

<p><a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-3.0.en.html</a></p>

<p><a href=""https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)"" rel=""nofollow noreferrer"">https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)</a></p>
","5542"
"Do programs that run mplayer have to provide source code according to the GPL?","55","","<p><code>mplayer</code> is a <code>GPL v2</code> license.  </p>

<p>There is a program called <code>a.out</code> that calls mplayer.<br>
The a.out source code is shown below.<br>
  </p>

<pre><code>#include &lt;stdio.h&gt;

void main(void){

        system(""mplayer test.mp4"");

}
</code></pre>

<p>In this case, a.out uses mplayer.<br>
Do I need to provide a.out source code in accordance with GPL v2?<br>
I understand that a.out does not follow the GPL when running as a <code>command line</code>.<br>
I know that you do not have to provide a.out source code.<br>
Am I correct understanding?  </p>
","<p>Using <code>system</code> is spawning mplayer in a new process. The GPL and its FAQ are rather clear on this topic e.g. <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">""mere aggregation""</a>:</p>

<blockquote>
  <p>[...] By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. [...]</p>
</blockquote>

<p>Here you use ""command line arguments"" to launch mplayer so I would say that mplayer and your own program are separate. And separate programs means that they can have different licenses.</p>

<p>This not different from launching a tool from a shell or a file manager: the tool license does not impact the licensing of the shell or file manager used to launch the tool.</p>

<p>Therefore:</p>

<blockquote>
  <p>Do I need to provide a.out source code in accordance with GPL v2?</p>
</blockquote>

<p>No.</p>

<blockquote>
  <p>I know that you do not have to provide a.out source code.
  Am I correct understanding? </p>
</blockquote>

<p>Yes.</p>

<p>And if you redistribute mplayer itself, side-by-side with your code, then of course the GPL still applies to mplayer's code.</p>
","5954"
"Extending class that exposes static methods from BSD Licensed project","55","","<p>I'm extending an open source library written in Java released under the BSD License. That library has a class, let's call it <code>Utils</code>, that exposes a lot of static methods. The common use case is to import all the exposed methods in a static import, i.e.</p>

<pre><code>import static org.acme.Utils.*;
</code></pre>

<p>Now, I'm creating new functions in my brand new open source library to extend the one from company <em>acme</em>. I'm wondering if is lecit to do</p>

<pre><code>package org.myself;

import org.acme.Utils;

public class MyUtils extends Utils{
   ...
}
</code></pre>

<p>such that I can then use a single import</p>

<pre><code>import static org.myself.MyUtils.*;
</code></pre>

<p>instead of </p>

<pre><code>import static org.acme.Utils.*;
import static org.myself.MyUtils.*;
</code></pre>
","<p>As far as the copyright/license is concerned, there is no difference in what namespace you put things, so this is fine.</p>

<p>Whether it is a good idea for your re-users to do this is more of a question for Programmers.se, and mainly comes down to whether it is more simple for your users to understand what's going on or to write one import fewer. </p>
","2201"
"Font licensed as GPL *and* OFL ... Can I use under OFL?","55","","<p>I would like the build upon the Libertine Open Fonts Project under SIL OFL 1.1, a permission
that <strong>seems</strong> to be intended by the authors. However, several issues / irregularities crop
up in the wording of their license. These quotes are from various README and LICENCE files
in two versions - the <strong>JAIST</strong> version (ftp.jaist.ac.jp/pub/CTAN/fonts/libertine) and
the <strong>SourceForge</strong> version (sourceforge.net/projects/linuxlibertine/)</p>

<blockquote>
  <p>The original opentype fonts were created by Philipp H. Poll (gillian at
  linuxlibertine.org) and are licensed under the terms of the GNU General
  Public License (Version 2, with font exception) and under the terms of
  the Open Font License.</p>
</blockquote>

<p>Does <strong>""and""</strong> mean that both licenses must apply? I have heard that GPL and SIL OFL are incompatible, and that opinion seems valid (to me) because the reserved name clause of OFL would constitute an additional restriction, disallowed by GPL.</p>

<p>Could <em>""and""</em> mean <em>""either GPL <strong>or</strong> OFL, at my choice""</em>? I suspect that this is the intent of the authors of the license declaration, but taking <em>""and""</em> to mean <em>""or""</em> is quite a stretch.</p>

<blockquote>
  <p>Our fonts are free in the sense of the GPL.
  ...
  Further information about the GPL (licence text with font exception see GPL.txt in this package).
  Additionally our fonts are licensed under the Open Fonts License (see OFL.txt).</p>
</blockquote>

<p>Does <strong>""Additionally""</strong> mean <em>""either GPL <strong>or</strong> OFL, at my choice""</em>?</p>

<p>There are other issues ...</p>

<ul>
<li><p>The JAIST LICENSE refers to OFL.txt, but that file is not in the distribution.</p></li>
<li><p>The SourceForge LICENSE refers to OFL.txt, but the file is named OFL-1.1.txt.</p></li>
<li><p>The LICENSE statement has the terms in two languages? Which is binding?
(German and English are included in the LICENSE.txt file of both JAIST and SourceForge.)</p></li>
</ul>

<p>Sorry for so many questions ... I'm really just trying to clear this font for further development under SIL OFL 1.1. These all seem to be stumbling blocks ...</p>
","<p>There's no difference whatsoever between these two things. Licenses only grant you privileges subject to restrictions on those privileges.</p>

<p>Most of your questions don't really make sense because you seem to think licenses can impose restrictions. They cannot. <em>A license cannot impose a restriction</em>, it's legally impossible for them to do so because a restriction can only be imposed on someone who agreed to that restriction and these licenses don't require your agreement.</p>

<p>Licenses grant you rights you didn't already have if, and only if, you comply with their requirements. If you don't, you don't get that right from that license. If you need that right, you can also perhaps get it some other way.</p>

<p>A license is not ""You may not go to the movies unless you do your homework"" because a license cannot take rights away. How could it -- you've never agreed to it. A license is ""You may go to the movies if you do your homework."" That is, it gives you one or more rights you didn't already have in exchange for you complying with its conditions.</p>

<p>Consider:</p>

<p>1) You may go to the movies if you first do your homework.<br>
2) You may go to the movies if you first clean your room.</p>

<p>There is no difference between an AND and an OR of these two things. Each is an independent grant of permission conditional on meeting a requirement. Once you have permission from someone authorized to grant it, no other document can take it away unless it's a contract, which a license isn't.</p>

<p>So look at a question like:</p>

<blockquote>
  <p>Does ""Additionally"" mean ""either GPL or OFL, at my choice""?</p>
</blockquote>

<p>No. It means that everyone gets both licenses. Your only choice is how you want to get whatever rights you need.</p>

<blockquote>
  <p>Does ""and"" mean that both licenses must apply? I have heard that GPL and SIL OFL are incompatible, and that opinion seems valid (to me) because the reserved name clause of OFL would constitute an additional restriction, disallowed by GPL.</p>
</blockquote>

<p>Yes, both licenses always apply. The GPL puts no restrictions on other licenses an author can grant. Since both licenses apply, you can obtain any rights you need from either license.</p>
","6445"
"Is this an appropriate use of the GPL?","55","","<p>I'm currently producing an application for a client, where I'm writing all the source code myself from scratch. The client is paying me a one-off fee for development work. The plan is for the client to receive the source code along with the compiled application as the application has a long expected lifetime and the client may need to modify or refer to the source code in the future.</p>

<p>I specifically want to permit the client to:</p>

<ul>
<li>Modify the source code for their own use</li>
<li>Transfer the source code (modified or unmodified) or compiled application to someone else under an open-source license</li>
</ul>

<p>I specifically want to prohibit the client from:</p>

<ul>
<li>Transferring the source code or the compiled application to someone else under a proprietary license</li>
<li>Transferring the source code and selling the modified source code or resulting compiled application to someone else under a proprietary license</li>
</ul>

<p>I don't care if:</p>

<ul>
<li>The client is able to distribute the source code or compiled application to the public under an open-source license</li>
<li>The client is able to modify and distribute the source code without returning the modified code to me (in fact I'd prefer it if they didn't have this restriction)</li>
</ul>

<p>In plain English, what I want is ""you can modify this source code as you require for your own use without giving it to anyone else, if you give binaries to someone else then you have to provide the source code and if you give source code to someone else then the person you give it to must be bound by the same restrictions"".</p>

<p>To me it seems that the GPL fits here quite nicely. Is there a more appropriate license that I should use rather?</p>

<p>Would I also be able to re-use the source code that I have written under another license later on? My understanding is that the GPL refers specifically to the receiving party, so if someone receives source code under the GPL then they are bound by the same license if they distribute or transfer it to anyone else (modified or unmodified) meaning that they themselves have to provide the source code under the GPL, but as the original producer of the source code I am not bound by the GPL. So I am free to re-use the code later in another way and distribute it under another license, because I did not receive it under the GPL?</p>
","<p>IANAL/IANYL.  That said, I think the GPL fits your needs precisely.  I do exactly the same thing myself, in my own consultancy business; point 4(ii) of my <a href=""http://www.gatekeeper.ltd.uk/terms/"" rel=""nofollow noreferrer"">terms and conditions</a> says</p>

<blockquote>
  <p>Copyright in all original code, configuration files, documentation and copy is and remains the property of the Company, and these are provided to the Client under the terms of the GNU General Public License, version 3 (or, at the Client's discretion, any later version). </p>
</blockquote>

<p>Clients do occasionally cavil at this, but I'm not flexible on the point; I refuse to be bound from re-using work I've done if I find I can later usefully do so.  Most clients who do balk reverse their positions when I point out I may be able to solve their problems considerably more quickly and cheaply because I'm lawfully re-using work that I've done for some other client, earlier.</p>

<p>You also ask </p>

<blockquote>
  <p>Would I also be able to re-use the source code that I have written under another license later on?</p>
</blockquote>

<p>to which the answer is yes; as long as you retain copyright in what you create you may always <a href=""https://opensource.stackexchange.com/questions/2077/so-the-gpl-doesnt-restrict-the-creator-of-the-software-in-any-way"">re-license it as you choose</a>.</p>

<p><strong>Edit</strong>: in answer to your question below</p>

<blockquote>
  <p>doesn't the GPL have a requirement to return modified source to the original distributor </p>
</blockquote>

<p>No, this is not a requirement.  If you receive software under the GPL and modify it, but you do not convey your modified software to anyone else, <a href=""https://www.gnu.org/licenses/gpl-faq.html#UnreleasedMods"" rel=""nofollow noreferrer"">you do not have to release your source modifications</a> to anyone at all.  If you do convey it, you must disclose source (and build tools, etc.) to whomsoever you convey it to, but there is still no obligation to contribute those changes to the original author.  The recipient is of course free to do so if you don't, but you are not obliged to.</p>
","6213"
"Licensing a wrapper library","55","","<p>For the current open source I'm working on I need to create a Python package (that I'll be using as dependency) that wrap an existing C++ library released using Boost license.</p>

<p>I'll be shipping this Python wrapper/package using pip, so I need to define a <code>setup.py</code> file.
<code>setup.py</code> should contain informations about author name, support email and licensing.</p>

<p>What should I report as author and licensing in <code>setup.py</code>?</p>
","<p>If your redistribution combines Boost-licensed code and your own source code in one source or binary package you will need to provide licensing for both. In the simpler case where you would elect to license your own code to be using the Boost license, then there is only one license and possibly multiple copyright statements. You can add these alright in the <code>setup.py</code> <code>license</code> metadata field. A great practice would be to use <a href=""https://spdx.org/licenses/"" rel=""nofollow noreferrer"">SPDX license identifiers</a> (if needed as a <a href=""http://wiki.spdx.org/view/LicenseExpressionFAQ"" rel=""nofollow noreferrer"">license expression</a> if you use more than one license) for the <code>license</code> field. You can also add a proper license classifier in the <code>classifiers</code> list field of your <code>setup.py</code> if there <a href=""https://pypi.python.org/pypi?%3Aaction=list_classifiers"" rel=""nofollow noreferrer"">is one</a> that applies well ... But I could not find a Boost license classifier even though this is an <code>License :: OSI Approved</code> license...</p>

<p>And typically you would also add a <code>LICENSE</code> file at the root for clarity, ensuring that it is included in the build source package with a proper entry in the <code>MANIFEST.in</code> file.</p>

<p>If you plan to also ship pre-built wheels you should also consider creating a <code>setup.cfg</code> with these lines to ensure that your <code>LICENSE</code> file is also included in the built wheels:
<code>
[metadata]
license_file = LICENSE
</code></p>

<p>From a <code>setup.py</code> point of view, if you are clearly the author of the wrapper then you should add yourself in the <code>author</code> field. If you are merely packaging the C++ code without much of new code addition you could be the <code>maintainer</code> and the original author the <code>author</code>. Your call.</p>
","5007"
"Need sellable license-text for ""commercial use"" of GPL v3 software","55","","<p>I'm the creator of a software which is licensed under GPL v3. But now I want to sell the software for ""commercial use"" like Fancybox (<a href=""http://fancyapps.com/fancybox/3/#license"" rel=""nofollow noreferrer"">http://fancyapps.com/fancybox/3/#license</a>).</p>

<p>I'm a real noob in licensing. So my question: Has anybody some good license-text examples which I can customize and use it as a digital product to sell (e.g. as PDF).</p>
","<p>A license text is a legal document. As such, it is advisable that the text gets written by a qualified lawyer to ensure that the license actually says what you intend it to say. </p>

<p>I would strongly recommend that you ask a lawyer with knowledge of copyright law to draft the license for you. </p>
","5675"
"Picking a license for library","55","","<p>I'm planning to open-source a server-side Python library from my pet project. It strictly depends on another Python library, which is distributed under the GNU GPL v2. Am I legally correct to put my library under some permissive, e.g. MIT license? Would the end user of my library need to obey GPLv2 regardless of the license I'll pick?</p>
","<p>You are free to licence your code as you want. It might have to be GPLv2 if you include pieces of the other library, or use it's API extensively (that is the FSF's position with respect to <em>binary</em> libraries, at least; but that isn't exactly unanimous).</p>

<p>Licensing it under anything that isn't compatible with the other library (GPLv2) will clearly create unnecessary friction. MIT would be fine in this.</p>
","2668"
"Renting out remote access to VMs with a modified GPL kernel","55","","<p>As I have read you can modify and use the Linux kernel if you do not distribute the binary of that modified version. The confusion that I have is that, suppose that if AWS were to provide a kernel modified version of Linux in their Linux VMs, does that count towards the distribution of a modified binary?</p>
","<p>The GPL does allow you to distribute modified binaries, but only as long as you also offer the source code. For the GPLv2, this is discussed in section 3: Either you distribute the binary together with the complete source code, or you distribute the binary together with a <em>written offer</em> for the complete source code.</p>

<p>The relationship between GPLv2 licensed software and PaaS providers like Amazon is a bit complicated because the GPLv2 does not contain a definition of the term “distribution”. (In contrast, the GPLv3 contains definitions for “propagating” and “conveying” a covered work.) I think with respect to PaaS, the relevant distinction is who runs the GPL'ed work: the provider or the client.</p>

<ul>
<li><p>If the client rents a bare VM and then installs a GPL'ed operating system on the VM, the client must have received a copy of the operating system in order to install it. So the software has been distributed.</p></li>
<li><p>If the client rents remote network access to a VM with a pre-installed GPL'ed OS, it is arguably the provider and not the client running the GPL'ed software. In this case, the software wouldn't have been distributed to the client.</p></li>
</ul>

<p>For the specific case of Amazon AWS, I do not know the legal structure of the  client–provider relationship. However, Amazon's Linux distro available on AWS does seem to provide a command to get the “reference source”. If this reference source is a derivative work of GPL software and is distributed to clients via such a command, then the client would necessarily receive the source under the GPL and would be free to use it according to the license.</p>
","5594"
"What exactly does ""attribute the work in the manner specified by the author or licensor"" mean in case of CC-BY-SA","55","","<p>In case I'm about to use an image from Wikimedia Commons (like <a href=""https://commons.wikimedia.org/wiki/File:Sa-warthog.jpg"" rel=""nofollow noreferrer"">https://commons.wikimedia.org/wiki/File:Sa-warthog.jpg</a> for example), what exactly does </p>

<blockquote>
  <p>attribute the work in the manner specified by the author or licensor</p>
</blockquote>

<p>mean? There is hardly ever any exact formulation that the autor requires except for the generic CC block.</p>

<p>Would this be sufficient? </p>

<blockquote>
  <p>Image <a href=""https://commons.wikimedia.org/wiki/File:Sa-warthog.jpg"" rel=""nofollow noreferrer"">Sa-warthog.jpg</a> is part of Wikimedia Commons licensed under CC-BY-SA 3.0</p>
</blockquote>
","<p>The <a href=""https://wiki.creativecommons.org/wiki/Best_practices_for_attribution"" rel=""nofollow noreferrer"">Creative Commons wiki best practices page</a> suggests that a good attribution includes the title, author, source and license of the material. If there is no format specified you can't miss if you follow those basic rules.</p>

<p>In your case the title is: ""A soiled Warthog relaxing during a hot day at San Diego Zoo, California, USA""<br>
The author: <a href=""https://commons.wikimedia.org/wiki/User:Sanjay_ach"" rel=""nofollow noreferrer"">https://commons.wikimedia.org/wiki/User:Sanjay_ach</a><br>
The source is the link you provided<br>
And the license is CC-BY-SA 3.0</p>
","5050"
"What is the best way to promote an open source product?","55","","<p>Suppose I was about to launch a large open source project. From past experience I know that the best way to promote a product is to provide information that is detailed, and easy to understand.</p>

<p>Not everyone knows about open source products, would promoting the fact that it is open source actually help? Or would it just confuse people more? </p>
","<p>The best way (I define best as with the most people reached and converted to users) is an expensive marketing campaign.</p>

<p>But OSS-projects usually don't have much money. But there are some, that can raise a lot of money. The Mozilla Foundation did this and used money to print <a href=""https://blog.mozilla.org/press/2004/12/mozilla-foundation-places-two-page-advocacy-ad-in-the-new-york-times/"" rel=""nofollow"">big advertisements in newspapers</a> in different countries. It's hard to measure how much that helped Firefox to reach todays popularity, but it surely had some impact.</p>

<p>The most common way to advertise OSS is through social media. This is relatively cheap (it takes the time of a volunteer or a paid community manager) and can reach a lot of people with resending of messages.</p>

<p>The basics to help also any other form of advertising is a good informative website. Other advertisement can send visitors to the site, so the site must contain the information and download for the software.</p>

<p>Much other forms of advertising exist, that are used from time to time:</p>

<ul>
<li>presenting the software on conferences</li>
<li>create merchandise</li>
<li>use a popular project hosting platform (being on one alone helps to get hits)</li>
<li>register in software catalogs</li>
</ul>

<p>For all advertisement it is helpful to keep in mind which target group the software has.</p>

<p>For the question if advertising with Open Source helps: again it depends on your target group. Firefox for example doesn't concentrate on being open source, it focuses on being without charge. In other communities it might be helpful to focus on being open source.</p>
","641"
"Create and Sell a Wordpress Theme based on a Template under the CC BY License","54","","<p>This website: <a href=""http://html5up.net/"" rel=""nofollow"">http://html5up.net/</a> offers lots of Html5 themes using CC BY licenses. Can I create my own Wordpress theme based on these Html 5 templates and sell on a theme market like <a href=""http://themeforest.net/"" rel=""nofollow"">http://themeforest.net/</a> ?</p>
","<p>Yes, as long as you give the source theme the required attribution.</p>
","2541"
"Distributing App for free which uses GPL'ed code","54","","<p>Here is the one of the many (confusing) cases related to GPLv2/3 licensing:</p>

<p>My company is developing an application for mobiles which will connect to servers and provide services to users.</p>

<p>So, here's the scenario:<br>
<strong>Server</strong> - uses <a href=""https://github.com/OpenSIPS/opensips"" rel=""nofollow noreferrer"">OpenSIPs-GPLv2</a>, <a href=""https://github.com/processone/ejabberd"" rel=""nofollow noreferrer"">ejabberd-GPLv2</a>(modified source code)<br>
<strong>Client(Android, BB10, iOS)</strong> - uses <a href=""https://github.com/BelledonneCommunications/linphone-iphone"" rel=""nofollow noreferrer"">Linphone-GPLv2</a>, <a href=""https://github.com/WhisperSystems/SignalProtocolKit"" rel=""nofollow noreferrer"">Signal Protocol-GPLv3</a></p>

<p>I went through lot of readings available on net, still have some queries like:  </p>

<p><strong>Commercial Purpose</strong>  </p>

<ol>
<li><p>Charge for services and distribute client apps through respective stores for free for internal use, others can download but can not login to access services<br>
[my company will be responsible for installing and maintaining servers for customer companies, and publishing apps]</p></li>
<li><p>Charge for services and distribute client apps <strong>internally</strong><br>
[my company will be responsible for installing and maintaining servers for customer companies, and distributing apps]  </p></li>
</ol>

<p><strong>Internal Use Only</strong>  </p>

<ol>
<li><p>In-house server, distribute apps through respective stores for free for internal use, others can download but can not login to access services<br>
[my company is subsidiary of beneficiary company]</p></li>
<li><p>In-house server, distribute client apps <strong>internally</strong><br>
[my company is subsidiary of beneficiary company]</p></li>
</ol>

<p>Here, beneficiary company means it's employees are going to use the app internally.</p>

<p>The question is:<br>
<strong>In the above 4 cases, when should I have to publish the source code?</strong> </p>

<hr>

<h2>Update</h2>

<p><strong>Internal</strong> means distributing apps through our own servers or emails instead of publishing to respective mobile stores. And here it is sure that only legal employees will be getting the application to download.</p>

<p>E.g. Consider three companies<br>
D- developing company<br>
P- parent company of D<br>
C- any other company which is customer of D</p>

<p>Now, D is developing app described above and will be using for following purposes:<br>
Commercial-<br>
Installing services on C's in-house server and Distributing client apps to employees of C through  </p>

<ol>
<li><p>Mobile app stores</p></li>
<li><p>Internal distribution</p></li>
</ol>

<p>Free for parent company-<br>
Installing services on D's in-house server and distributing client apps to employees of P through  </p>

<ol>
<li><p>Mobile app stores</p></li>
<li><p>Internal distribution</p></li>
</ol>

<p>*distributing through mobile app stores means Play store, Apple app store etc. In this case any one can download app worldwide but only intended users(employees of respective company) can login and use the services.   </p>
","<p>Whether or not you're charging money is irrelevant as far as the GPL is concerned, so you can take any notion of commercial versus internal out of your consideration.</p>

<p>The GPL is all about protecting the freedoms of users. Therefore, what it requires is distribution of the source code to users of the software.</p>

<p>The first major impact this has is that all of your server-side code never needs to be distributed. Technically users of your app never use the server-side code - they just use data that it produces. This is the reason for the AGPL's existence.</p>

<p>Your client code, however, must be distributed to anyone who uses it. If you giving the app to an external customer, then you must also provide them with the source of the app (upon request). This source may not be useful to most people, if it requires login credentials to your service, but nonetheless you must provide it; the idea behind the license is that someone who <em>does</em> have credentials and normally uses the app can make modifications to it (say, to fix a bug, or change how something works).</p>

<p>In summary, you do not need to publicly release the source code of your server app, but you do need to release the source code of your client app.</p>
","4932"
"Does violating the ""four essential freedoms"" of the FSF mean you are violating GPL?","54","","<p>I was reading over a products license information and found out that they use multiple iterations of the GPL license (GPL v2, LGPL, a few more). I was wondering if the product that is licensed violates the <a href=""https://www.gnu.org/philosophy/free-sw.en.html"" rel=""nofollow noreferrer"">""four essential freedoms""</a> of free software mean they are violating the GPL license.</p>
","<p>The license text is legally relevant. The four freedoms form a philosophical fundament for these licenses, but are not part of these licenses.</p>

<p>The GPL licenses try to ensure these essential freedoms for all users. For example, the freedom to study the program is ensured because binary distribution of a software is only possible when the corresponding source code is also offered. It is not possible to deny these freedoms by adding restrictions to the GPL license.</p>

<p>E.g. the GPLv3 contains a mechanism to add extra permissions to the GPL. It therefore clarifies that except for a few cases like requiring notices to be kept intact, no restrictions may be added:</p>

<blockquote>
  <p>All other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program […] contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.</p>
  
  <p>– GPLv3, section 7 “Additional Terms”</p>
</blockquote>

<p>The GPLv2 contains no such language, but contains a “Liberty or Death” clause:</p>

<blockquote>
  <p>If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.</p>
  
  <p>– GPLv2, section 7<br>
  – also: GPLv3, section 12 “No Surrender of Other's Freedom”</p>
</blockquote>

<p>That means: it is not possible to pick some terms from the GPL and leave others. If you publish software under the GPL, you must grant <em>all</em> rights that are part of the license.</p>

<p>The GPLv3 was created because there are some problems with the GPLv2, and that has to do with how the GPL ensures the essential freedoms:</p>

<ul>
<li><p>Patents: The GPLv2 is a pure copyright license. However, the right to use and distribute the program may be restricted by patents. Therefore, the GPLv3 contains a patent grant. (This was also necessary to gain compatibility with the Apache 2 license.)</p></li>
<li><p>Tivoization: Under the GPLv2, a vendor may sell hardware that embeds GPL software. They need to offer the source code. But they can prevent modified versions from running on that hardware, which runs against the Free Software Definition. This loophole was closed in the GPLv3.</p></li>
<li><p>DRM: A user of GPL software may legally have the right to study and modify the software, but may be prevented to do so by technical means (DRM). Circumventing these technical barriers is illegal in many jurisdictions. The GPLv3 states that GPLv3-licensed software cannot be part of such a technical barrier, and that circumvention of any barrier “protecting” GPL software is expressly allowed. (This makes it impossible to distribute GPLv3 software over app stores that require DRM.)</p></li>
</ul>
","6298"
"GPL and distribution","54","","<p>If I write some software which links against a GPL licensed component (i.e. my software is a derived work) and install (copy across a public network and deploy) that software onto a customer's (external party) remote machine does that count as 'distribution' with respect to the GPL license (GPLv2 for example)?</p>

<p>I was assuming distribution to mean making the software down-loadable from a publicly visible website as opposed to installing it onto a customer's remote machine</p>
","<p>Yes, that is distribution. It is not widespread distribution, but it is distribution. When you give the binary to your customer, you are required to offer that customer the corresponding source and accompanying GPL rights to redistribute and modify them both. If a person receives a GPL work without source code (or an offer of source code) and accompanying GPL rights for the work, then a GPL violation has occurred.</p>

<p>Of course, you do not need to offer the source or GPL rights to any other people beyond the actual recipients of your distribution. Your distribution is directed to some set of people; it is to those people your distribution obligations apply. (This is exactly the same as public widespread distribution, but in that case the set of recipients can grow unbounded as new people get the software from you.)</p>

<p>Further notes:</p>

<p>Often, your customer has a business interest in <em>not</em> distributing the source further, so the legal obligation to grant them GPL rights does not present a business hardship for you anyway.</p>

<p>If the ""customer"" here is actually an employee of the same company as you, and transmitting the software is done as a transaction between agents of <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#DistributeSubsidiary"" rel=""noreferrer"">the same company (or of two companies with a subsidiary relationship)</a>, then distribution has not occurred, since the work never exited the perimeter of the corporation.</p>

<p>The <a href=""https://opensource.stackexchange.com/q/5554/50"">GPLv3 makes two important exceptions</a>, which likely don't apply here (since you use the word ""customer""). If either applies, then your distribution (or ""conveyance"") does not require the normal grant of the GPL rights or source-sharing obligations. Those exceptions are:</p>

<ul>
<li>distribution to a contractor for the exclusive purpose of making modifications to the software</li>
<li>distribution to an execution environment over which you have exclusive absolute control who runs the code exclusively for your benefit (e.g., a cloud services provider like Amazon)</li>
</ul>

<p>In those cases, you do not need to offer <em>your own work</em> under the terms of the GPL, though you do need to comply with the GPL as it applies to modules that you didn't write.</p>

<p>The full text of this exception is:</p>

<blockquote>
  <p>You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p>
  
  <p>Conveying under any other circumstances is permitted solely under the conditions stated below.</p>
</blockquote>
","5893"
"GPL licensing a web app software","54","","<p>I am in the early stages of building a software with a team to design websites, kind of like WordPress. You download the system on your website, and go on from there. People can be allowed to expand the system.</p>

<p>I don't know much about licensing and copyright, so about the GPL license, I just state the authors and put the license text in the software release? </p>
","<p>(For web applications, you might want to consider using the <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html"" rel=""nofollow noreferrer"">AGPL</a> instead of the GPL.)</p>

<p>Assuming that the whole software was created by your team, you should follow these steps to license the software under the <a href=""https://www.gnu.org/licenses/gpl-3.0.en.html"" rel=""nofollow noreferrer"">GPL</a>:</p>

<ul>
<li>Add a <strong>copyright notice</strong> to each source file.</li>
<li>Add a <strong>copying permission statement</strong> to each source file.</li>
<li>Add the <strong>full license</strong> as <a href=""https://www.gnu.org/licenses/gpl.txt"" rel=""nofollow noreferrer"">plain text file</a> to your project.</li>
</ul>

<p>For details, read <a href=""https://www.gnu.org/licenses/gpl-howto.en.html"" rel=""nofollow noreferrer""><em>How to use GNU licenses for your own software</em></a>.</p>

<p>On top of that, you might want to state that the software is licensed under the GPL in other places, too:</p>

<ul>
<li><p>Mention it in the <strong>user interface</strong> of the software. For example, under ""Help → About"" or in similar places. It’s likely that not all users read the source files, and sometimes users end up using your software without having installed it themselves – these people might not be aware that it’s free software.</p></li>
<li><p>Mention it on your <strong>website</strong>. Ideally on your homepage, as feature, next to the download link etc. It can be a big advantage, and many people won’t even consider using software unless it’s free/libre.</p></li>
<li><p>(Many web applications that create websites also include the software name/link and the license information in the <strong>footer</strong> of the created websites, acting as some kind of advertisement. But it might be nicer to make this opt-in instead of opt-out.)</p></li>
</ul>
","5814"
"Image copyright in GNU FDL-licensed documentation","54","","<p>I'm creating the documentation for a small FOSS project of mine. I intend to release such documentation under GNU FDL version 1.3. I have one question, though.</p>

<p>Someone else has made a graphic art that I intend to put on the cover of the user's manual and also use as a logo for the project. This image doesn't yet have any licenses attached to it. Can I publish the documentation under FDL v1.3 but the image under another license? Case yes, what would be a common license for this purpose?</p>

<p>Sorry for the elementary question.</p>
","<blockquote>
  <p>Can I publish the documentation under FDL v1.3 but the image under another license? Case yes, what would be a common license for this purpose?</p>
</blockquote>

<p>IMHO, the GFDL is a rather complex and inflexible license, but this is your choice: if you understand it fully, go for it. My brain hurts when I read the invariants parts.</p>

<p>That said, you can license your image under another license or dual license it under the GFDL and another license. This is your stuff, you can do whatever you want with it.</p>

<p>I would suggest to look at the Creative Commons licenses for documentation and images in general.</p>

<blockquote>
  <p>Would it be possible for me to ""detach"" the image licensing from the license of the rest of the documentation?</p>
</blockquote>

<p>Yes. This is a common case in Linux distros (and in Mozilla too I think). For instance, as far as I know, RedHat logos included in their Linux distro are under a different license than the rest of the distro.
Which means that when someone creates a derivative distro from RHEL (such as CentOS or Oracle Linux) they cannot reuse the image branding in their own distro and need to replace this first. Ubuntu does the same.</p>

<p>Now again, my advice is to keep things as simple as possible. The more complex your licensing, the harder you make it for you potential users to consider using or contributing to your project.</p>
","2886"
"Manufacture PCB's using GPLv3 license","54","","<p>I own a startup company that manufactures PCB's. We decided to release them under the GPLv3 license to eliminate the hassles of patents and so forth. Another factor is that we use code on the microcontrollers that comes from the open source community worldwide. </p>

<p>The question is : Is it legal to sell a GPLv3 licensed PCB to a company that has strict distributor territories ? Strict distributor territories meaning a companies distributor cannot sell to another distributors customer, no matter the circumstances.</p>
","<p>This shouldn't be a problem. You are granting more rights per the license to your customer than the law gives them. They won't be able to use some of the rights which you granted them because the law will prevent them to do so.</p>

<p>As to whether distributing the design under GPL v3 will eliminate the hassle of patents, this is a complex question but we can say a few things:</p>

<ul>
<li><p>By publishing the design you are preventing others to patent it (theoretically) but you could still be hindered by pre-existing patents, and some patents could still be granted (wrongly) after the publication and only a lawsuit would be able to cancel them.</p></li>
<li><p>If you accept contributions, you will be granted a license to the patents which are owned by the people who contribute and which you need to be able to use their contribution.</p></li>
</ul>
","5154"
"Using GPL licensed library over a service for non-GPL softwares","54","","<p>I want to use a GPL v2 licensed library(<a href=""https://github.com/espertechinc/esper"" rel=""nofollow noreferrer"">esper</a>) for commercially distributed non-GPL softwares but I need to make sure non-GPL software not violate GPL license.</p>

<p>Can I use this library indirectly using a wrapper service(can be a windows service, web service, rest api etc.) ? This wrapper service will provide a generic interface to utialize this library and will be licensed with GPL. Any commercial software can communicate with this service using its plugins.  </p>

<p>Lets explain through the figure below.</p>

<p><a href=""https://i.stack.imgur.com/zukvq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zukvq.png"" alt=""enter image description here""></a></p>

<ul>
<li><strong>E</strong> is GPL licensed library that is I want to use. It is not modified in any way.</li>
<li><strong>C</strong> is my GPL licensed service that using <strong>E</strong> and running independently of <strong>A/B</strong> . Any client software can use it.</li>
<li><strong>A</strong> and <strong>B</strong> are my commercial web apps that will use <strong>C</strong> over adaptors. <strong>A</strong> and <strong>B</strong> can work without <strong>C</strong>. So there is not strong dependency for <strong>C</strong>.  A, B and C are not running in the same process. They can work even on different machines.</li>
<li><strong>Adaptor A</strong>/<strong>B</strong> will call <strong>C</strong> over tcp/http. </li>
<li><strong>C</strong> service will provide generic operation interfaces. Adaptors will use the data contracts that provided by <strong>C</strong>. So, Adaptors needs to know what data models are supported on <strong>C</strong> operations</li>
</ul>

<p>Is this scenario appropriate? Is there any proper way to achive my problem ?</p>

<p>How should I distrubute <strong>Adaptor A</strong>/<strong>B</strong> ? Are they need to be GPL licensed ( <strong>A/B</strong> distrubuted with an .exe file to installation without containing adaptors)</p>

<p>Lastly, what is the way of I distributing <strong>C</strong> and mentioning in my commercial applications to tell users to install it and integrate with other applications. (I can specify with a description that explains how to utilize C service for the A/B users. Also I can make <strong>C</strong> program source and installation file available on my server for download.)</p>
","<p>IANAL/IANYL.  That said, the devil, as usual, is in the details, and you don't give us much information about how these <em>adaptors</em> work.</p>

<p>If, for example, the B-C adapter is a piece of software that works by linking against libraries that form part of B, and also against libraries that form part of C, then you've created a single, large, derivative work of both B and C, and you have a big licensing problem on your hands.</p>

<p>If, instead, the adapter uses userspace as a mediating tool (eg, B puts files on the file system, then the adapter moves them into C's bit of filespace and calls C through fork-and-exec to deal with them, or C runs as a daemon that periodically checks whether there are new files to deal with), then B and C are separate works for copyright purposes, and you don't have a problem.</p>

<p>The one about your obligations with respect to C is pretty well covered elsewhere, but in brief, if you <strong>tell</strong> your users that they must download and install it, and you make both source and executable available from the same place on your website, that would suffice.  If you <strong>distribute</strong> C directly to them, your obligations with respect to source provision are a bit more extensive, but not much so.</p>

<hr>

<p><strong>Edit</strong>: you have clarified that both A and B adapters will interact with C via HTTP.  <strong>Provided they do this using RFC-standard HTTP operations</strong> (<code>POST</code>, <code>GET</code>, etc.), that seems likely to me to be at arm's-length enough to make them separate for copyright purposes; certainly my web browser doesn't need to know about the GPL status of the web servers with which it interacts.  If they're thus separated, then A and B adapters can be proprietary software which you distribute along with A and B.</p>

<p>I'm still a bit nervous about ""<em>Adaptors will use the data contracts that provided by C. So, Adaptors needs to know what data models are supported on C operations</em>"", because I don't understand what you mean.</p>

<p><strong>Edit 2</strong>: given your subsequent clarification, it depends on how knowledge of the structures is acquired.  Generally, if there is a separate written specification, and you implement this <em>de novo</em> in your code, all is likely to be fine (there has been <a href=""https://en.wikipedia.org/wiki/Oracle_America%2C_Inc._v._Google%2C_Inc."" rel=""nofollow noreferrer"">at least one attempt</a> to claim that an API can be copyrighted, but it wasn't hugely successful).  If there is no separate written specification, and you read (in your example's) Amazon's library code to work out what the API is, or worse still, use their code as a basis for your own, there is a problem.</p>

<p>I note that you have yourself written C, wrapping it around the pre-existing GPL library E.  That puts you in a position to write that specification, <strong>but not to implement it</strong>.  <a href=""https://en.wikipedia.org/wiki/Clean_room_design"" rel=""nofollow noreferrer"">Clean-room practice</a> is that person A reads the ""contaminated"" code and writes the functional spec, and a person B implements that spec, without any further reference to person A.  You cannot be <em>both</em> of those people.</p>

<hr>

<p>Note that this whole analysis assumes that linking creates derivative works, and as we note elsewhere, this is not yet a certainty; arguments can be made both <a href=""https://opensource.stackexchange.com/questions/1187/what-are-the-arguments-for-considering-dynamic-links-to-constitute-derivative-wo?rq=1"">for</a> and <a href=""https://opensource.stackexchange.com/questions/1188/what-are-the-arguments-for-considering-dynamic-links-to-not-constitute-derivat?rq=1"">against</a> the issue.  It is generally accepted, however, that interaction-through-userspace keeps two programs far enough apart that neither is entangled by the other from a copyright point of view.</p>
","6397"
"What license should I use for an app released under my employer's account?","54","","<p>My company is offering an Amazon Echo and and Amazon gift card for employees who develop a Skill. There are some requirements with it. </p>

<ul>
<li>It must be completed during personal time (the learning and developing is not billable)</li>
<li>It must be published using the company's Amazon account</li>
</ul>

<p>It's a promotion for getting us developers to learn how to work with the Echo and also as a portfolio for picking up Echo related work from clients.</p>

<p>My question is, how should I copyright/license my app and code so that I can </p>

<ul>
<li>still use it in my own portfolio</li>
<li>publish it under my own Amazon account if the company decides to pull the Skill</li>
<li>or I can publish my own (maybe modified) version at the same time.</li>
</ul>

<p>There isn't any requirements for the code to be shared with the company (they are offering to let us use their private repo) though I'm not opposed to sharing so long as I can still keep ownership and do all the things listed above.</p>
","<p>The only answer to this question can be, ""What does your employment agreement say?"" If it says that you own your off-the-clock work, then there is no 'best' license to use; use whatever you like. If it's ""all your bases belong to us,"" then don't ask us, ask them.</p>
","2136"
"Can I license a project that I have built on if it already has a license?","53","","<p><strong>Scenario</strong><br>
I am building off of a project that was released under the Creative Commons BY license. Now that my project is done, I want to release my version of the product under my own license.</p>

<p><strong>Question:</strong>
Is this possible? </p>

<ul>
<li><p>If yes do I need permission?</p></li>
<li><p>If no what limitation do I have?</p></li>
</ul>
","<p>Yes. The CC-BY license is one of their more permissive licenses: it simply requires attributing the original author.</p>

<p>So: <strong>no</strong> you don't need permission. You simply need to include, somewhere in your finished product (perhaps an about or credits screen) the name of the author and preferably a link back to where you found it.</p>

<p>There is <strong>no Share Alike</strong> restriction on the CC-BY license, so you are not forced to keep the same license: you can thus choose to relicense your product as you wish.</p>
","379"
"Can I take over stackexchanges review system in an Apache 2.0 licensed web service?","53","","<p>The stackexchange review system for post creation, editing and removal is quite sophisticated and somehow steered by discussion on meta networks (stackexchange and others) which are ""user contributions licensed under cc by-sa 3.0 with attribution required"". Is that aspect of steering sufficient to be able to implement a similar review process (let's say for torrents of FLOSS Linux distributions on a Java EE web platform) and licensing it under Apache 2.0?</p>

<p>How would the required attribution end up in the projects <code>COPYING</code> and the source file headers?</p>
","<p>Ideas themselves are not copyrightable, only their expression is. So as remarked by @curiousdannii the license of the content of the SE sites has no impact here (unless you also want to reuse part of the content that can be found on these sites).</p>

<p>Ideas cannot really be patented either but industrial processes can and this notion has been twisted a lot so you end up with software companies having a lot of patents, whose validity is often questionable, but which represent a threat nonetheless. I don't know if Stack Exchange Inc. owns any patent but this is something that you can research since patents are public.</p>

<p>However, as you say, a lot of the ideas which power these sites were first posted by contributors on the meta sites and this alone prevents patenting (to be patentable an invention must be original, non trivial and useful). For more information on patents, you should rather go to Patents SE.</p>
","5325"
"Creating a new repository based on an old one","53","","<p>I would like to fork a repository on GitHub (let's call this A) so that I can modify a few things. If I were to try and make a pull request, I don't think it would be merged as they changed the focus of that project, and it's not active.</p>

<p>A is registered under the <a href=""https://creativecommons.org/licenses/by/3.0/"" rel=""nofollow noreferrer"">Creative Commons Attribution 3.0 license</a>. If I create a new repository myself, (let's call this B), will I be allowed to do that? </p>

<p>If I am, will I only need to mention the name/link of the original repository and readme to fulfill the requirements of that license? I want my repository (B) to be open source. I'm wondering whether I also need written permission from the author, as well.</p>

<p>I've read <a href=""https://opensource.stackexchange.com/questions/1934/rules-guidelines-about-forking-a-project-vs-creating-a-new-one"">Rules/Guidelines about forking a project vs. creating a new one</a>, but I'm not sure if this is entirely similar. It didn't explicitly seem to be the same issue that I am facing.</p>
","<p>If you ""print, publish, perform, film, or record"" someone else's work, you must comply with the terms of their license -- which includes any license they granted by accepting the github.com terms of service. No one knows for certain what the boundaries of those words are on the internet. Does pushing the fork button constitute a publication or a recording? Does it matter, given the github TOS? Does adding a commit (and thus making a derived work) result in a change in legal status?</p>

<p>In <em>practical</em> terms, copyright and licensing is all about economic considerations. Every day, thousands of people push the fork button on thousands of github repositories of uncertain licensing status. And <em>nothing happens</em>. Unless either the original author is somehow making money off the thing you are forking, or you are planning to make money off of your copy, the chances of any legal issue are very slim.</p>

<p>It's <em>polite</em> and <em>prudent</em> to comply with the terms of the license if there's a license. It's reasonable to ask the author to consider an additional or other license. But it's not worth worrying about too much unless there is money involved.</p>
","2605"
"How can I protect the rights on character names or imagery in an open source game?","53","","<p><strong>I want to publish an open source game, but I want to retain all copyrights on the used characters.</strong></p>

<p>A use case would be that another party downloads the code and makes a new game with it, but the other party is not allowed to name the game ""Captain Holetooth"" or use the character art from the original game.</p>

<p>Can you give me advice on which license I need to apply?<br>
I was looking into Apache 2.0, but I'm not sure if it is the right choice.</p>
","<p>The only way I know to protect further character names or imagery in an open source game (or for any open source project) would be to use trademarks e.g. if you explicitly mention that the names and images are trademarked by you (and eventually register all of them), then you will enjoy this protection for your names and marks.</p>

<p>It is common for several licenses such as the Apache and BSD licenses to contain some explicit language about non-usage of names and non-endorsement but to the best of my knowledge this is not necessary because these licenses do not grant rights to reuse these names.</p>

<p>It is common for several open source projects (and foundations) to register their names and marks, such as <a href=""http://tmsearch.uspto.gov/bin/showfield?f=doc&amp;state=4810:ww6imv.3.23"" rel=""noreferrer"">GNOME</a> which allowed to <a href=""https://gnome.org/groupon/"" rel=""noreferrer"">protect the IMHO abusive reuse</a> attempt by <a href=""http://tmsearch.uspto.gov/bin/showfield?f=doc&amp;state=4810:ww6imv.3.41"" rel=""noreferrer"">Groupon</a>, or Eclipse that also provides <a href=""https://eclipse.org/legal/logo_guidelines.php"" rel=""noreferrer"">detailed guidelines</a> for limited and proper reuse. Linux distributors such as Ubuntu and Red Hat also use trademark protections in addition to the (eventually complex) FOSS licensing of their distributions. In these later cases, redistributing a whole distro may be OK from an open source license standpoint but may not be OK from a trademark standpoint (in which case a solution is to remove the marks and graphics like CentOS did with Red Hat distros).</p>

<p>So in recap, the trademark protection and the free and open source licensing protection are orthogonal and both can apply and both are commonly used in conjunction by both commercially-backed FOSS projects and purely community-driven projects. </p>

<p>Since trademarks themselves are beyond the scope of most open source licenses, you should seek legal help and do some research to achieve whatever it is you want to achieve there. God speed! </p>
","5260"
"Redistribution of modified fonts, originally licensed under Apache 2.0","53","","<p>I would like to use a font licensed under Apache License 2.0 (without a NOTICE file and without additional provisions) in my web project. 
For this end, I made a package of webfonts based on a subset of the font in question (I use an online tool to generate .woff and .eot versions of the font selecting only some Unicode blocks to make the files lighter).</p>

<p>Then I want to distribute the source files of my project (so basically my PHP scripts, CSS stylesheets, and MySQL database, but I also need to include the fonts so that everything works fine, because I work with data in that is not displayed correctly in standard system fonts) under a free license. I am currently considering the MIT License and the copyleft <a href=""https://joinup.ec.europa.eu/community/eupl/og_page/eupl"" rel=""nofollow noreferrer"">European Union Public Licence 1.2</a>, which is explicitly <a href=""https://joinup.ec.europa.eu/software/page/eupl/eupl-compatible-open-source-licences"" rel=""nofollow noreferrer"">upstream compatible with Apache 2.0</a>. 
I will include a file describing the changes I made to the fonts as required by the Apache license. And I will retain the text of the license.</p>

<p>Is it OK if I retain the original name of the font?</p>

<p>The Apache license states that ""This License does not grant permission to use the […] product names of the Licensor"". Does this mean that I have to rename the modified font contained in my project (just like one has to rename the fonts licensed under the <a href=""http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=OFL"" rel=""nofollow noreferrer"">SIL license</a> when subsetting them for web distribution)? Or am I fine with the original name, because it is only a component used in my project, and my project itself has a totally different name?</p>

<p>Two further concerns are: Is it fine that I do not include the source codes of the fonts (because I technically do not work with source codes when I subset fonts using a webfont generator, and I cannot myself edit the source files accordingly) within a project to be distributed under a copyleft license? And is it fine to include Apache licensed fonts in a MIT-licensed project?</p>
","<blockquote>
  <p>Is it OK if I retain the original name of the font?</p>
</blockquote>

<p>The conditions in <a href=""http://www.apache.org/licenses/LICENSE-2.0#trademarks"" rel=""nofollow noreferrer"">Section 6 of the Apache 2.0 license</a> is specifically about trademarks:</p>

<blockquote>
  <ol start=""6"">
  <li>Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. </li>
  </ol>
</blockquote>

<p>As such there is nothing in the license that would mandate you to rename things such as files, functions or for that matter font names.
So as long as you do not promote this font ass your product using the original font name, you are not IMHO making use of any trademarks or service marks. So renaming is not required and you can retain the original name of the font. If this is meant to be further integrated by your users with other fonts (and possibly the original unmodified fonts) it could be nice to rename it to avoid confusion. But only nice.</p>

<blockquote>
  <p>Is it fine that I do not include the source codes of the fonts (because I technically do not work with source codes when I subset fonts using a webfont generator, and I cannot myself edit the source files accordingly) within a project to be distributed under a copyleft license? </p>
</blockquote>

<p>I would not consider the .woff and eot formats that you redistribute as the ""Source form"" of the fonts and therefore if I read the EUPL (which is not a very common license) I guess you would likely still need to get the source code somehow to meet the EUPL copyleft condistions.</p>

<blockquote>
  <p>And is it fine to include Apache licensed fonts in a MIT-licensed project?</p>
</blockquote>

<p>There is no issue I can think of there, both are permissive licenses.</p>

<p>And additionally:</p>

<blockquote>
  <p>So am I right if I would for instance use GPL3 instead of EUPL (which claims to be GPL3-compatible), I would surely be obliged to provide font source files? </p>
</blockquote>

<p>Yes, this is a good analogy to understand the effects of the copyleft here.</p>

<blockquote>
  <p>Then I'd rather only use the MIT license to avoid the trouble. (My only reason to use EUPL was that it is adapted to European law). </p>
</blockquote>

<p>The EUPL is a rare but comprehensive license that has been created specifically for this purpose. I personally thinks it may make sense for the EU public sector. It may be less useful, less relevant and a tad too arcane otherwise.</p>
","5997"
"Are there any FOSS/community library registries for hardware description languages?","52","","<p>One of the most objectively strong points of free/open source is the community storage of library code, where code can be scrutinized, compatibility can be maintained, and duplicated effort can be reduced. Great examples are <a href=""https://crates.io/"" rel=""nofollow noreferrer"">https://crates.io/</a> and <a href=""https://cran.r-project.org/"" rel=""nofollow noreferrer"">CRAN</a>.</p>

<p>When I first learned hardware description languages, I wasn't completely aware of this, and didn't think about it, but is there such a storage network for HDLs like VHDL and Verilog?</p>
","<p>The only site that I've heard mentioned before is <a href=""https://opencores.org/"" rel=""nofollow noreferrer"">https://opencores.org/</a>. I've never used it personally, but it's the only one that I know of.</p>
","5167"
"Can I use django-ckeditor in commercial projects without buying a CKeditor license?","52","","<p>I want to use django-ckeditor in a commercial project.</p>

<p>Django-ckeditor is <a href=""https://github.com/django-ckeditor/django-ckeditor/blob/master/LICENSE"" rel=""nofollow noreferrer"">licensed</a> under the BSD 3-clause license, but in CKeditor's official website it says that I've to buy a license to use it in a commercial project.</p>

<p>Now, I'm very confused, do I really have to buy a license from CKeditor's website to use django-ckeditor in my commercial project?</p>
","<p>CKEditor is available as a commercial license at <a href=""https://ckeditor.com/"" rel=""nofollow noreferrer"">https://ckeditor.com/</a> or a choice of GPL/LGPL/MPL at <a href=""https://github.com/ckeditor"" rel=""nofollow noreferrer"">https://github.com/ckeditor</a></p>

<p>This is the <a href=""https://github.com/ckeditor/ckeditor5/blob/master/LICENSE.md"" rel=""nofollow noreferrer"">gist of its terms</a>:</p>

<blockquote>
  <p>Licensed under the terms of any of the following licenses at your choice:</p>
  
  <ul>
  <li>GNU General Public License Version 2 or later (the ""GPL"")</li>
  <li>GNU Lesser General Public License Version 2.1 or later (the ""LGPL"")</li>
  <li>Mozilla Public License Version 1.1 or later (the ""MPL"")</li>
  </ul>
  
  <p>You are not required to, but if you want to explicitly declare the license you have chosen to be bound to when using, reproducing, modifying and distributing this software, just include a text file titled ""legal.txt"" in your version of this software, indicating your license choice. In any case, your choice will not restrict any recipient of your version of this software to use, reproduce, modify and distribute this software under any of the above licenses.</p>
</blockquote>

<p>And as @apsilers commented:</p>

<blockquote>
  <p>And for the OP's benefit: the weak copyleft options (LGPL and MPL) mean that distributions that include CKEditor as a library only need to include the source of CKEditor itself, not the entire application.</p>
</blockquote>
","6117"
"Can you open source part of a database and keep another part closed?","52","","<p>Suppose I had a table in a database. This table contains user profile information. Each profile has: Name, birthdate, username, mini-bio, gender. </p>

<p><strong>My question:</strong></p>

<p>Suppose I wanted to make the ""mini bio"" column open source but wanted to keep ""age"" closed source, could I do this? </p>
","<p>The old ""you're the owner"" comes up again... yes, you could. The only problem here is the implementation.</p>

<p>To implement this, you simply need to make the mini-bio column publically available, perhaps through a UI on a website. You can keep the rest of the database private. You can then say at the bottom of each page</p>

<blockquote>
  <p>mini-bios licensed under cc-by-sa with attribution required</p>
</blockquote>

<p>and it's open-source.</p>
","795"
"Good licence for a new documentation project","52","","<p>I want to publish a lot of documentation on programming and other similar topics I have been writing over the years.</p>

<p>The documentation consist of explanations, diagrams, exercises and code examples.</p>

<p>At this moment most of the content is my own, with some contributions from people who I personally know.</p>

<p>My requirements are:</p>

<ul>
<li><p>The license must be free.</p></li>
<li><p>I would prefer a copyleft license.</p></li>
<li><p>I want to accept contributions from anyone, but I don't want to maintain a big file that explicitly states every contributor, unless the contributor herself adds her to the list.</p></li>
<li><p>I want to facilitate the integration of parts or the whole of these documentation to any other free project, no matter which license they are using.</p></li>
</ul>

<p>What license would be the most appropriate given these requirements?</p>

<p>Note that I'm looking for a ""soft"" copyleft: I want to avoid helping private projects, but I don't want to restrict others licensing choices.</p>
","<p>Your best bet seems to be the a Creative Commons Share Alike license.</p>

<p>Since you are looking for to license a creative work - your diagrams, examples, and words. Right away, Creative Commons should ring a bell.</p>

<p>The <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow"">CC BY-SA</a> license looks good. Here's why:</p>

<ul>
<li><p>It includes a ShareAlike/Copyleft clause</p>

<p>This will require anyone who <strong>makes changes</strong> to this to release the work under the same license. They can still include it, even if they don't make changes, and won't be subject to this clause.</p></li>
</ul>

<p>After seeing your comment, you may perhaps be interested in dual-licensing the content, under both the CC BY-SA license, and the Gnu Free Documentation License, as you noted in the comments.</p>

<hr>

<p>However, this section isn't directly related to the license, but it is something that you'll need to consider immensely so that others can follow your license: the issue of attribution.</p>

<p>Since you are accepting contributions from multiple people, many of which aren't listing their names, it could be wise to make them accept contributor agreements. These will let you place all contributions under a common name, make the project more attractive to others that are willing to use it, and will make it easier, as contributions are already copyrighted. It can be something as simple as, ""if you make contributions, the copyright will be owned by so and so"".</p>
","1734"
"Is a binary compatible interface to a proprietary spec proprietary","52","","<p>I am putting together some code that will use the Steinbergs VST3 specification and it has occurred to me that it would make a nice open source project. Most that exist are a bit old and are based on VST2 and have dependencies on Steinbergs SDK - which is not open source. Steinberg are not onerous in their requirements by the way - but they do control IP as perhaps they should.</p>

<p>What I would like to know is whether a binary compatible interface to a propriety spec is proprietary. VST3 in particular but am interested in general.</p>

<p>More explicitly:  If I write some code using none of the Steinberg SDK other than function names and parameters is it legal to then publish this as an open source project.</p>

<p>As a more general example: If Fred Nurk Corp defines an interface standard</p>

<pre><code>class IFredNurkInterface
{
  public:
     virtual result GetSystemInfo(Parameter x)=0;
     virtual result SetSystemInfo(Parameter x)=0;
}
</code></pre>

<p>and then I write a concrete implementation of the standard without even deriving from IFredNurkInterface</p>

<pre><code>class MyReinventTheWheelClass
{
  public:
     virtual result GetSystemInfo(Parameter x){
        //get something based on x
        return something
     };
     virtual result SetSystemInfo(Parameter x){
         //do something with x
         return something
     };
}
</code></pre>

<p>Would I be able to publish MyReinventTheWheelClass as lets say a MIT compatible project? - assuming of course I am complying with all the branding requirements and not misrepresenting myself or my affiliation with Fred Nurk Corp etc</p>
","<blockquote>
  <p>What I would like to know is whether a binary compatible interface to a propriety spec is proprietary?</p>
</blockquote>

<p>This is a topic that is under consideration by US courts at the moment... So there is no easy answer.  In the Oracle vs. Google case, US Federal judges stated that APIs are copyrightable.  So it would mean that you would require an explicit license to create/use the binary API. But this is being tried again since yesterday to determine if fair use applies. See <a href=""http://arstechnica.com/tech-policy/2016/05/jury-is-picked-for-9-billion-oracle-v-google-showdown/"" rel=""nofollow""><em>Jury is picked for $9 billion Oracle v. Google showdown</em> on Ars Technica</a> and <a href=""http://qz.com/680837/a-legal-battle-about-the-klingon-language-could-affect-the-future-of-computer-programming/"" rel=""nofollow""><em>A legal battle about the Klingon language could affect the future of computer programming</em> on Quartz</a> for some related pointers and discussions.</p>

<p>If I were you, I would ask for an explicit permission. </p>
","2853"
"Is an official standard necessarily an open standard?","52","","<p>One of the hallmarks of the FLOSS philosophy is its  reliance upon  open standards.</p>

<p>The OSI has the <a href=""http://opensource.org/osr"">one definition</a> of an open standard. The FSF has <a href=""http://fsfe.org/activities/os/os.en.html"">its own</a></p>

<p>There are many bodies which produce <em>official</em> standards: OSI, ITU, ETSI, IEEE, and so on.</p>

<p>The standards most software developers will be familiar with are those which define programming languages such as <code>C</code> and <code>C++</code>. But they touch many other things as well (such as ISO/IEC 14496, better known as MPEG-4).</p>

<p>The standards are certainly 'freely available' in that anyone can purchase a copy - though they are often quite expensive. But are they necessarily <strong>open standards</strong>? </p>

<p>MPEG-4 is a prime example, as it is burdened with issues surrounding <a href=""https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC#Patent_licensing"">patents</a>.</p>

<p>Are there other examples of such burdened standards? How does a FLOSS developer deal with this in providing an implementation of them?</p>
","<p><a href=""https://open-stand.org/about-us/principles/"">The definition of an open standard</a> is quite different from that of <a href=""http://opensource.org/osd"">open source</a>.</p>

<p>The definition mostly governs the processes which are used to <em>define</em>  standards. The ""openness"" applies to the definition process being open to input from any parties it concerns and being transparent to the general public.</p>

<p>All it says about <em>using</em> an open standard is (emphasis mine):</p>

<blockquote>
  <p>Standards specifications are made accessible to all for implementation and deployment. Affirming standards organizations have defined procedures to develop specifications that can be implemented <strong>under fair terms</strong>. Given market diversity, <strong>fair terms may vary from royalty-free to fair, reasonable, and non-discriminatory terms (FRAND)</strong>.</p>
</blockquote>

<p>These ""fair terms"" include no commitment to free distribution, which is the cornerstone of the open source definition.</p>

<p>There is also nothing which governs the right to create derivate works. That's because in case of a standard, creating derivates is usually not desired. The intention of a standard is to convince everyone to follow it to ensure interoperability. Someone creating a slightly different yet incompatible competing standard would be counter-productive for that intention.</p>

<p>So no, <em>Open Source</em> and <em>Open Standards</em> have nothing to do with each other.</p>
","776"
"Is OSS with CC-NC-licensed assets effectively impossible for the creator to sell traditionally?","52","","<p>Given a game where:</p>

<ul>
<li>Source code is licensed under a free (libre) open source license, e.g. GPL, MIT, etc.</li>
<li>Assets such as images and music are licensed under Creative Commons Non-Commercial.</li>
</ul>

<p>Is it correct that making the assets available non-commercially <strong>only prevents</strong> other parties from distributing the whole package (i.e. executable w/ assets) <strong>for a price</strong>, but those other parties could still undercut the creators' attempts to sell it traditionally (e.g. distributing it for a price) by distributing it <strong>for free</strong>, since they could legally obtain everything needed to rebuild the game?</p>

<p>Would dropping just the assets' CC license and instead retaining full rights for them under Copyright make it illegal for other parties to distribute the full package?  This would be assuming no one had obtained a copy of the assets while they were under the CC license.</p>

<hr>

<p><em>This question was inspired by the ""required proprietary parts"" section of <a href=""https://en.wikipedia.org/wiki/Business_models_for_open-source_software#Selling_of_required_proprietary_parts_of_a_software_product"" rel=""nofollow"">this Wikipedia article</a> on OSS business models.  It describes this exact scenario for the</em> Steel Storm <em>game, however for the reasons above I wouldn't expect this example to actually be viable.</em></p>
","<blockquote>
  <p>Is it correct that making the assets available non-commercially <strong>only prevents</strong> other parties from distributing the whole package (i.e. executable w/ assets) <strong>for a price</strong>, but those other parties could still undercut the creators' attempts to sell it traditionally (e.g. distributing it for a price) by distributing it <strong>for free</strong>, since they could legally obtain everything needed to rebuild the game?</p>
</blockquote>

<p>Yes, contents distributed under CC-NC can be re-distributed for free. Since the binaries are distributable under a <em>libre</em> license, the complete package can be re-distributed for free, so ""other parties"" could undercut the original developer by giving the game away.</p>

<p>Note that if the CC license doesn't allow adaptations to be re-distributed, then any identifying elements in the assets can't be removed by the other parties; that may make it less interesting to undercut the original author in this way (at least for the other parties; recipients only looking to get the work for free presumably won't mind).</p>

<blockquote>
  <p>Would dropping just the assets' CC license and instead retaining full rights for them under Copyright make it illegal for other parties to distribute the full package? This would be assuming no one had obtained a copy of the assets while they were under the CC license.</p>
</blockquote>

<p>That's a big ""if""! If anyone obtained the assets under CC, then the previous situation still applies, since <a href=""https://creativecommons.org/faq/#what-happens-if-the-author-decides-to-revoke-the-cc-license-to-material-i-am-using"" rel=""nofollow"">CC licenses are irrevocable</a>; as long as a recipient doesn't lose the license by violating its terms, the game can be distributed for free. (I'm guessing you know this since you stipulated the assumption.)</p>

<p>If no one has the assets under a CC license, no one but the copyright owner can distribute them, and we end up in a similar situation to many of id Software's games: the engines are free, but no one can re-distribute the full games without an appropriate (commercial) license from id (or Bethesda nowadays).</p>

<p>As to your main question, I'd argue that this type of scenario doesn't make the assets <em>impossible</em> to sell, ""merely"" difficult. There can be value in other aspects of distribution, <em>e.g.</em> presence on Steam for a game, or a physical package...</p>
","4391"
"Using information from MIT licensed code","52","","<p>I'm currently developing an editor that will implement syntax highlighter for a rather specialized language. I had already found a vim highlighting file that I rather liked the style of, and while I can't use code from it directly - since my project is in Qt/C++ - I would like to use the syntax structure/design they used (i.e. the groupings of what gets highlighted how).</p>

<p>If I'm simply using the design of their code, rather than any actual code itself, do I credit them in my syntax highlighting code? If so, how would I do that? My gut says that I do, but I thought I should ask here because I'm an rather new to all this.</p>

<p>The code I would like to base from is licensed under an MIT license, and my project uses GPLv3.</p>
","<p>If you are just reusing design ideas, you do not have the legal obligation to give credit (but morally, you should still give credit in a manner that you deem appropriate) and you do not have to follow the license terms.</p>

<p>If you are translating parts of the actual code, then you are creating a derivative work and you have to follow the license terms, that is keep the MIT license notice in your code (this doesn't prevent you to license your software under GPL v3).</p>
","6023"
"What to do if I can't find the copyright when using an open source library","52","","<p>I'm using an open source library to develop an application. The library is under the Apache 2.0 license. </p>

<p>The license says you need to put a copy of the license and of the copyright into the software the library is going into.</p>

<p>In the library I cannot find the copyright, what should I do? The library I'm using is <a href=""https://github.com/IBM-Swift/BlueSocket"" rel=""nofollow noreferrer"">BlueSocket</a> which is on GitHub.</p>
","<h1>The project has no clear license file</h1>

<p>If the project does not have a file that clearly spells out under which terms the project can be used, then you must assume that the default copyright protection applies. This means that only the author of the code is allowed to make copies, make changes or do anything useful with the code. In short, you can't use it.</p>

<p>If the code is in a public repository and there are statements from the owner of the repository indicating that the code is intended to be open-source, you can inform the owner that the license and/or copyright status is unclear and that it can't be considered open-source until that has been resolved.</p>

<h1>The project does have a clear license, but no clear copyright information</h1>

<p>This situation is somewhat unusual, but it can happen.</p>

<p>First of all, the license file typically <em>does not</em> contain copyright information. The license itself wasn't written by the author of the code (I would hope), so he can't put his copyright on it, and for all the major licenses it is accepted practice that they are used without a copyright statement of the license author.</p>

<p>If, at first glance, there is no copyright statement in sight, I would first double-check all the files in the repository, starting with the source files and excluding the files that appear to be third-party dependencies that were copied. Source files are the most likely files to contain a copyright statement.</p>

<p>If there really is no copyright statement in any of the files (excluding third-party dependencies), then it is time to file a bug report against the repository asking the owner to clear up the copyright status.</p>

<p>In the mean time, if the repository has a public record of the changes that were made (or the pull requests that were merged), you can assume that the copyright is shared between all the persons that have contributed to the project. If the project has more than a handful contributors and you need the information just for a proper acknowledgement in your project, I doubt that anyone has a problem with an acknowledgement in the form of ""the contributors of "".</p>
","6310"
"Difference between GNU-GPL and BSD?","51","","<p>I was wondering what is the difference between these two licenses? I have looked around for GPL but in some places they say you have to post your code to public and in some places they say you don't have to!</p>

<p>Do I have to release my code if I make some changes to it and do I have to let the author know about it? </p>

<p>Also is there any difference between commercial use and personal use?</p>
","<blockquote>
  <p>Do I have to release my code if I make some changes to it? [...]</p>
</blockquote>

<p>Yes for the GPL, as explained below. But only if you redistributed the code and not as a general public release.</p>

<blockquote>
  <p>[...] and do I have to let the author know about it?</p>
</blockquote>

<p>No, but that's a nice thing to do.</p>

<blockquote>
  <p>Also is there any difference between commercial use and personal use?</p>
</blockquote>

<p>No. There is a difference between mere use and actual redistribution (of source or binaries)</p>

<blockquote>
  <p>I have looked around for GPL but in some places they say you have to post your code to public and in some places they say you don't have to!</p>
</blockquote>

<p>You do not need to post your code publicly. If you are redistributing source or binaries, you need to share your source modifications with everyone that you shared binaries with, only these, not anyone.</p>

<p>Now let's dive a bit in the details... The two key points of the GPL are:</p>

<ol>
<li><p>it allows any usage without restriction</p></li>
<li><p>it ensures that any user can modify the code and shall share its modifications forever when sharing the code.</p></li>
</ol>

<p>So, mere usage and modifications without sharing is not restricted.</p>

<p>If sharing or redistributing, you must notify the user you are sharing the source or binaries with; and make the modified source code available per and  under the GPL. You do not need to share this in public (though this is encouraged) but only with the person that received source or binaries from you. That person in turn inherits from the same rights and obligations, and so on all the way down: This effect is commonly called ""copyleft"".</p>

<p>So what about the BSD? Like the GPL, it allows usage and modification without restrictions. But when sharing the code (for instance as a binary) there is no requirement to share the corresponding source code modifications. Only a requirement to provide credits.</p>

<p>In all cases, there is no requirements to ""share"" or ""credit"" things with the general public: only with the persons you share code with.</p>
","6357"
"Do I need a license when I use licensed libraries in my app?","51","","<p>I have an Android app using two libraries (GPLv2 and APLv2). </p>

<p>I read that GPLv2 and APLv2 are incompatible.</p>

<p>I will show which open source libraries I've used and tell the reader which licenses the libraries are under in my app. </p>

<p>Does this mean my license <em>has</em> to be one where both licenses are compatible? Do I need a license at all if I reference to the libraries I've used? I don't care so much about my app but I don't want any legal issues when I publish it on Play Store. Plus my app will be free if that matters. </p>
","<p>If you just create an app for personal use and you are not providing it to others, then you don't need to license your app.</p>

<p>If you want to provide your app to others, you need to make it clear what the others are allowed to do with the code you wrote. Informing people about their rights and obligation is done by means of licensing, which is nothing more than adding a license text to your code.</p>

<p>When you are using multiple libraries in your project, then you need to make sure that all licenses of the various libraries and your own code are compatible with each other. If the licenses are not compatible with each other, then you can't meet all the obligations that the licenses place on you and you are not allowed to distribute your app.</p>

<p>Permissive licenses (like MIT, BSD and Apache) are generally compatible with each other, if only because they place few requirements on you.</p>

<p>Copyleft licenses, like GPL, have more compatibility issues, because they place requirements on a complete application, even if only a small library is actually licensed in such a way.</p>

<p>Because copyleft licenses extend their requirements to the complete application, it is generally advised to use the GPL license for your own code if you use a GPL-licensed library.</p>

<hr>

<p>The GPLv2 license is indeed incompatible with the Apache license due to some patent-related clauses in the Apache license that are not allowed under the GPLv2 license, and the GPLv2 license requires that the whole app adheres to the terms of the GPLv2 license.</p>

<p>If the GPL-library is actually licensed as ""GPL version 2 or later"", then not all hope is lost. The GPLv3 license <em>is</em> compatible with the Apache license, and the ""or later"" part on the GPL license allows you to treat the library as if it was originally released under the GPLv3 license.</p>
","6304"
"Does the MIT open source licence cover making the key file, for a strongly typed assembly, public?","51","","<p>I have an open source C# project, <a href=""https://github.com/DavidArno/SuccincT"">Succint&lt;T&gt;</a>, for which I wish to create a strongly typed assembly version. I plan on making the key file for this public, by adding it to the GitHub repository, in order to keep the whole thing open source.</p>

<p>The obvious consequence of this is that someone else could modify the code in a malicious way, sign it with that key file, and naive users who think that a signed assembly somehow implies security could be tricked into using it.</p>

<p>Whilst I'd not wish that to happen to anyone, my concern is that the affected user might try to hold me responsible. So my question is, does the MIT licence wording absolve me of responsibility in such an eventuality?</p>
","<p>I'd add instructions for somebody else to cook up their own key, and sign (and verify) with that. Also publish somewhere <em>you</em> have total control the key to check the signature. The signing key should <em>not</em> be distributed in any way, as that just would void any protection the ""signed by the original developer"" could provide.</p>
","2111"
"GNU Lesser GPL with additional requirement for customer reference","51","","<p>I am planning to release a software under GNU Lesser GPL (not sure yet if v2 or v3 should be used). But I would also like to state a requirement that whenever my software is used commercially the company needs to provide a reference so I could put this information on a website. Can it be done with GNU Lesser GPL or should I switch to different existing open source licensing or should I create my own?</p>
","<p>There is no such provision to <code>provide references when using commercially</code> in the LGPL 2 or 3 and adding such provision may be contradicting the license terms. </p>

<p>There are provisions for attribution and credit though that are rather extensive and these may likely be more than good enough for you.</p>

<p>I will only reference the newer LGPL 3.0 and focus only on the attribution and credit requirements (leaving aside doc and source code related requirements).</p>

<p>So before I dive in the details, I think that while no true free or open source license may achieve what you want (e.g. force a commercial user to provide back a reference or notification of their usage) the LGPL has pretty decent attribution and crediting requirements when redistributed (such as a in commercial product). But these requirements only have to be met with the customer the code is redistributed to, not to you proper.</p>

<h1>What are the attribution requirements of the LGPL-3.0 license when redistributing your library in a product or application?</h1>

<p>The LGPL-3.0 license includes the GPL 3.0 by reference and all and any attribution and crediting requirements of the GPL 3.0 apply too.</p>

<p>Both licenses are rather clear and explicit on what and how to provide attribution.</p>

<h2>In the GPL 3.0 the <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""nofollow noreferrer"">definitions section</a> explains  what are the ""Appropriate Legal Notices"".</h2>

<p>Later, this definition is reused in <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""nofollow noreferrer"">the GPL section 5</a> and <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section7"" rel=""nofollow noreferrer"">section 7</a>.</p>

<blockquote>
  <p>[...] An interactive user interface displays ""Appropriate Legal Notices"" to the extent that it includes a convenient and prominently visible feature that (1) displays an <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""nofollow noreferrer""><strong>appropriate copyright notice</strong></a>, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>
</blockquote>

<h2>The GPL <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""nofollow noreferrer"">Section 4</a> explains what attribution means when you redistribute unmodified copies of the source code:</h2>

<blockquote>
  <p>[...] provided that you conspicuously and appropriately publish on each copy an <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""nofollow noreferrer""><strong>appropriate copyright notice</strong></a>; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p>
</blockquote>

<p>So when someone redistribute an unmodified copy of your LGPL-3.0-licensed program they would need to ""credit"" you:</p>

<ul>
<li>with a conspicuous copyright statement and notice, with <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""nofollow noreferrer"">examples</a> </li>
<li>keep existing notices</li>
<li>a copy of the GPL license text</li>
</ul>

<h2>The LGPL 3.0 has additional requirements in its <a href=""https://www.gnu.org/licenses/lgpl-3.0.html#section4"" rel=""nofollow noreferrer"">Section 4</a>:</h2>

<blockquote>
  <p>a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. [...]
  c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. [...]</p>
</blockquote>

<h2>Under the LGPL <a href=""https://www.gnu.org/licenses/lgpl-3.0.html#section5"" rel=""nofollow noreferrer"">section 5</a>, there are these additional attribution requirements for ""Combined Libraries"":</h2>

<blockquote>
  <p>b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.</p>
</blockquote>

<p>And there are yet more requirements when there are modifications. These are mentioned mostly in the GPL text:</p>

<h2>Under the GPL <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""nofollow noreferrer"">section 5</a>, if a user redistributes modified source code, they have these additional attribution requirements:</h2>

<p>It starts with this, clearly establishing that these are extras requirements on top of section 4:</p>

<blockquote>
  <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code <strong>under the terms of <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""nofollow noreferrer"">the GPL section 4</a></strong>, provided that you also meet all of these conditions:</p>
</blockquote>

<p>And then goes on to explain what these new requirements are:</p>

<blockquote>
  <p>a) The work must carry prominent notices stating that you modified it, 
  and giving a relevant date.</p>
  
  <p>b) The work must carry prominent notices stating that it is released under
  this License and any conditions added under section 7. This requirement
  modifies the requirement in section 4 to “keep intact all notices”.</p>
  
  <p>[...]</p>
  
  <p>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</p>
</blockquote>

<p>So when a user (commercial or not) redistributes a modified source copy of your LGPL-3.0-licensed program they would need to additionally credit you with:</p>

<ul>
<li>a tracking of the changes they made, with prominent modification dated notices</li>
<li>if needed, they shall update (or create) notices to state that this code is under the LGPL.</li>
<li>if there is some user interface, they need to update the code to display a notice following <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section0"" rel=""nofollow noreferrer"">the GPL section 0</a> and they can use the provided <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""nofollow noreferrer"">examples</a>.</li>
</ul>

<h2>Under <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section6"" rel=""nofollow noreferrer"">the GPL section 6</a>, when a user of yours redistributes binaries (aka. non-source), they have these additional attribution requirements:</h2>

<p>It starts with this, clearly establishing that these are extras requirements on top of section 4 and 5:</p>

<blockquote>
  <p>You may convey a covered work in object code form under the terms of <strong><a href=""https://www.gnu.org/licenses/gpl-3.0.html#section4"" rel=""nofollow noreferrer"">the GPL sections 4</a> <a href=""https://www.gnu.org/licenses/gpl-3.0.html#section5"" rel=""nofollow noreferrer"">and 5</a></strong>, [...]</p>
</blockquote>

<p>Now:</p>

<ol>
<li><p>If they provide the source code with the binaries then they have no new requirements.</p></li>
<li><p>If they do not provide the source code with the binaries they have a few extra requirements:</p></li>
</ol>

<blockquote>
  <p>b) [...] accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that
  product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source [...], or (2) access to copy the
  Corresponding Source from a network server at no charge.</p>
  
  <p>c) Convey individual copies of the object code with a copy of the written
  offer to provide the Corresponding Source. [...]</p>
  
  <p>d) Convey the object code by offering access from a designated place [...]</p>
  
  <p>etc. </p>
</blockquote>

<p>So in this case, their new attribution requirement boils down to provide or explain how to get the source code: the license covers several possible approaches and constraints. The simplest way is to provide the source with the binaries.</p>

<p>Finally, at the end  and past the ""terms and conditions"", the GPL license provides <strong>guidelines and an example on <a href=""https://www.gnu.org/licenses/gpl-3.0.html#howto"" rel=""nofollow noreferrer"">How to Apply These Terms to Your New Programs</a></strong>: this clarifies what a source code and displayed notice should look like if something was not clear to a user of yours before and these can be used too for the LGPL-licensed code.</p>
","4957"
"Licensing a small project so that anyone can use/modify it without redistribution","51","","<p>I have created a <a href=""https://github.com/calebreister/mbed-make"" rel=""nofollow"">small project</a> with the primary purpose of demonstrating the use of a Makefile. The file in question may be useful for me in the future, but I don't want to be forced to distribute every version of it. Here are the criteria...</p>

<ul>
<li>Anyone (including myself) should be able to use, modify, and redistribute it as their own, for either private or corporate use</li>
<li>The file should to be usable in any open-source project</li>
<li>I would like the license to be as <em>simple</em> and possible</li>
<li>Attribution is not required, since drastic changes may be necessary in order to make it work for a particular platform</li>
<li>It should probably have a NO WARRANTY clause</li>
</ul>

<p>Currently, I am thinking of using either Apache v2.0 (the license used by mbed), MIT/X11 License, or licensing it as public domain. If public domain is the answer, please explain how to specify that the project is public domain.</p>
","<blockquote>
  <p>but I don't want to be forced to distribute every version of it.</p>
  
  <p>Anyone (including myself) should be able to</p>
</blockquote>

<p>This is a common misconception. You are the copyright holder of the work, so you can do whatever you want with it. Only those to whom you distribute the work will be bound by the license.</p>

<p>For you, I would recommend <a href=""https://creativecommons.org/publicdomain/zero/1.0/legalcode"" rel=""nofollow"">Creative Commons' Public Domain Dedication</a>. It's not as simple as the MIT or Apache Licenses, but it's about as permissive as you can get.</p>

<h1>Edit</h1>

<p>Based on OP's comments, I would instead recommend the <a href=""https://www.mozilla.org/en-US/MPL/2.0/"" rel=""nofollow"">Mozilla Public License</a>. It does not require attribution, has a ""NO WARRANTY"" clause, and prevents people from ""modifying the work slightly, copyrighting it, and then preventing others from using it"" by requiring that modifications to MPL-covered source code be published.</p>
","4229"
"Re-assigning copyright on GPL licensed software - does the assigner still have a copy?","51","","<p>I have built upon software that is released under GPLv2 (with the 'at your option, a later version' addition), and am now conveying that software to my client under GPLv3. Of course, I provide the full source code with the software.</p>

<p>I'm also assigning the copyright of the work to the client. The client may or may not decide to publicly distribute this software.</p>

<p>If they <em>don't</em> publicly distribute the software, would I still be considered to have been 'conveyed' the software, and thus I could still make use of it in line with the license?</p>

<p>Or, since I assigned copyright to the client, do I also have to destroy my copies of the software and wait for them to convey it back to me (or publicly release it) before I can use the software again?</p>
","<p>First of all, you can't reassign <em>all</em> copyright on the work. You can only reassign the copyrights that you actually own. </p>

<p>This means that you always keep the rights you received through the GPL on the original work. </p>

<p>As for the rights you have on your modifications after the reassignment of the copyright, that depends on your contract and jurisdiction. It is safest to assume that the work was not conveyed and that you don't have any rights to it until your client decides to publicly release it.</p>
","5566"
"What license should I use for an open source Android app that has no third party libraries outside of ones provided by the Android operating system?","51","","<p>I made a simple app for Android and I want to make it open source, What license should I use, how should I implement it in the project files, and is there anything else I need to take into consideration. </p>
","<p>I believe you can choose any license you want, it is written by you. You'd have to check if the libraries you use (or even Android as a platform) has some say in this, but I doubt it very much.</p>
","2604"
"Can I license a program containing data from a video game?","50","","<p>Let's say I want to release a program, written in Java, that is a sort of encyclopedia containing data about a game. This program would contain images from the game, obtained via screenshot, and some of them processed in a program like GIMP. The purpose of these images would be to illustrate about stuff that exists in the game, and not to be a part of the interface of the program (like the appearance of the interface's controls). I would like to license this program with the MIT License (Expat).</p>

<p>Is it possible? If not, can I release these images in some other way and make my program load them from the outside?</p>

<p>Searching for the answer on Google was nigh impossible (or I don't know the correct search terms).</p>
","<p>These images would be clearly copyrighted. But would it be fair for you to use them nonetheless? At least in the US there is something called ""<a href=""https://en.wikipedia.org/wiki/Fair_use"" rel=""nofollow noreferrer"">Fair use</a>"". </p>

<p>For example, this <a href=""https://en.wikipedia.org/wiki/File:Aoeiii-cover.jpg"" rel=""nofollow noreferrer"">Wikipedia image</a> is a low res image of a game box and contains this fair use related statement:</p>

<blockquote>
  <p><em>This image is cover art for a video game, and its copyright is most likely held by the game's publisher or developer. It is believed that the use of low-resolution images of game cover art</em></p>
  
  <ul>
  <li><p><em>to visually identify the game in question</em></p></li>
  <li><p><em>on the English Wikipedia, hosted on servers in the United States by the non-profit Wikimedia Foundation,</em></p></li>
  </ul>
  
  <p><em>constitutes fair use under United States copyright law. Other uses of this image may be copyright infringement. For more information, see Wikipedia:Non-free content.</em> [...]</p>
</blockquote>

<p>The question is therefore whether or not your planned usage would be fair use or not.
A few illustrative images may be. </p>

<p>A database with 100 or 1000 screenshots may not and therefore you would be ""infringing"" of the game developers/authors/owner copyrights. </p>

<p>Your best course of action is to ask for an explicit written permission to the game developer.</p>

<p>See also <a href=""https://opensource.stackexchange.com/questions/4575/am-i-allowed-to-use-these-gifs-for-my-game"">Am I allowed to use these gifs for my game?</a></p>
","5045"
"Can I redistribute a modified part of an open-source project under 3-clause BSD license","50","","<p>I would like to take a small stand-alone part of an open-source Python project (one class from a relatively big project), enhance it, and release it as separate project on PyPI so that I can use it independently. I will fully credit the project where the code is taken from originally. Below is the full license of the original project. <s>As far as I can tell it does not use one of a standard open-source licenses such as MIT.</s> As pointed out in comments, this is <a href=""https://opensource.org/licenses/BSD-3-Clause"" rel=""nofollow noreferrer"">3-Clause BSD license</a>.</p>

<blockquote>
  <p>Copyright (C) {years} {author name}<br>
  All rights reserved.</p>
  
  <p>Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:</p>
  
  <ol>
  <li>Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.</li>
  <li>Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.</li>
  <li>The name of the author may not be used to endorse or promote
  products derived from this software without specific prior
  written permission.</li>
  </ol>
  
  <p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</blockquote>

<p>My question is if Im legally allowed to do that. And if yes, under what license would I be able to release it under?</p>
","<p>Thanks to the comments, it was clarified that original license is <a href=""https://opensource.org/licenses/BSD-3-Clause"" rel=""nofollow noreferrer"">3-Clause BSD license</a>. </p>

<p>Open-source SE site contains answers related to that license and my question. <a href=""https://opensource.stackexchange.com/questions/4704/we-worked-with-bsd-license-software-and-modified-it-and-now-want-to-allow-others/4705#4705"">https://opensource.stackexchange.com/questions/4704/we-worked-with-bsd-license-software-and-modified-it-and-now-want-to-allow-others/4705#4705</a> and <a href=""https://opensource.stackexchange.com/questions/4546/bsd-3-clause-how-to-update-with-modifications"">https://opensource.stackexchange.com/questions/4546/bsd-3-clause-how-to-update-with-modifications</a>.</p>

<p>It seems that changes could be distributed as long as original copyright notice is preserved.</p>
","5294"
"Copyright license grants of GPLv2 in MIT project","50","","<p>Open source library X has an MIT license. It contains files from another (GPLv2) project, which I will call library Y. Library X states explicitly (in the license notes, a chapter of the readme.md file located in the root) that authors of library Y granted permission to redistribute these files under MIT license.</p>

<p>The files itself have a GPLv2 copyright header, ending with a message stating that permission has been granted to redistribute these files under MIT license.</p>

<p>There is no communication included in library X where this permission grant is explicated. I would expect some email or link to a web document sourced in library Y website or some sort.</p>

<p>Do I need to worry as user of library X that my (proprietary) software license is endangered?</p>
","<p>If the author(s) of library Y really did license library Y to the author of library X under permissive MIT X11 terms (and assuming Y doesn't retroactively try to deny that they did so), then you have nothing to worry about: the author of X really does have the rights to share Y under permissive terms with others. The fact that there are GPL headers in the code doesn't diminish the fact that project Y has dual-licensed their code under your option of the GPL or MIT.</p>

<p>The troubling case is if Y's author did not really grant X's author a permissive license to redistribute Y. Without an official statement from Y's author, you are relying on the secondhand report from the X project. It is possible that the author of X did communicate with Y, but misunderstood what Y was saying, or (less likely) that the author of X is telling a baldfaced lie. Since you haven't seen the actual communication, you don't know for sure.</p>

<p>What would happen if X was wrong, and Y denied having made the permissive license grant? Your software would indeed be in hot water, since your software does include Y, and you could only legally use Y on GPL terms. You would have been (unknowingly) committing copyright infringement for unwittingly violating the GPL. It's not likely Y will sue you: that's against the norms of <a href=""https://sfconservancy.org/copyleft-compliance/principles.html"" rel=""noreferrer"">the Software Freedom Coservancy's guide to GPL enforcement</a>, and furthermore since your past infringement would count as ""innocent infringement"" (in the U.S.), the court could significantly reduce or eliminate the penalty for your past infractions. However, even in the best case, you would either need to (1) immediately stop distribution of your software or (2) come into compliance with the GPL, including releasing your complete source code.</p>

<p>How can you avoid this entire headache? Contact the author of library Y to ask if they will publish a definite statement that their software is dual-licensed under both GPL and permissive MIT, or ask if they will privately make such a statement to you via email. If you can't get in touch with them, you could also go to the author of X with your concerns and see if they will forward any email communication with Y's author that shows clearly that library Y was permissively licensed to them.</p>
","5580"
"Do we need to follow the license for CA certs?","50","","<p>Some OSS projects include CA certificates and claims that they are subject to a particular OSS license. For example the certificates in <a href=""https://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt"">https://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a> are said to be ""subject to the terms of the Mozilla Public License, v. 2.0.""</p>

<p>However the certs themselves are mere large random numbers, which are ""mechanically generated"" and not  ""an original expression of an idea"". Hence they might be considered as not copyrightable, and hence the OSS license cannot be applied. </p>

<p>Is that a reasonable interpretation?</p>
","<p>A certificate is not a creative work. It is a strictly codified representation of a piece of information. Copyright does not apply.</p>

<p>In some jurisdictions, there is a form of copyright for databases, i.e. collections of items which on their own may not be (and usually are not) subject to copyright. This is sometimes known as <a href=""https://en.wikipedia.org/wiki/Sui_generis_database_right"" rel=""nofollow"">database right</a>.</p>

<p>In US law, database right is distinct from copyright, and databases are not legally protected — anyone can copy them. In the EU, databases are legally protected.</p>

<p>At the European Union level, the <a href=""https://en.wikipedia.org/wiki/Database_Directive"" rel=""nofollow"">database directive</a> declares that collections that are an “intellectual creation” where the author made a selection are protected by copyright (but with somewhat different rules for the European equivalent of fair use). Mozilla's list of CA certificates falls under this category. Databases that aim to be complete are protected by a distinct database right.</p>

<p>Thus you can legally ignore any licensing terms if you obtain the Mozilla CA certificate database in a US jurisdiction. If you obtain it in an EU jurisdiction, Mozilla is entitled to prevent you from redistributing the database. They could restrict who had access to the database by not allowing everybody on the Internet to download it, if they so wanted. Since the database is provided with a license notice, if you download it, you are entitled to deal with the database only in ways that are allowed by this license. In other jurisdictions, consult the applicable laws.</p>
","318"
"Does inbound=outbound apply to Apache 2.0 without a CLA?","50","","<p>The traditional expectation for contributions to a free software project are <strong>""inbound=outbound""</strong> [<a href=""https://opensource.com/law/11/7/trouble-harmony-part-1#contribution-policies-and-free-software-tradition"" rel=""nofollow noreferrer"">1</a>] [<a href=""http://producingoss.com/en/contributor-agreements.html"" rel=""nofollow noreferrer"">2</a>]. That is, if the project is under license X, contributions are made under license X.</p>

<p>Does this apply to a project released under Apache 2.0 with no additional CLA?</p>
","<p>Yes, submissions to an Apache 2.0 licensed project are themselves Apache 2.0 licensed. From <a href=""https://www.apache.org/licenses/LICENSE-2.0.html#contributions"" rel=""nofollow noreferrer"">section 5 of the license text</a>:</p>

<blockquote>
  <p><strong>5. Submission of Contributions.</strong> Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p>
</blockquote>
","5515"
"How open or proprietary are the various PBX systems?","50","","<p>Is the <a href=""http://nerdvittles.com/?p=14183"" rel=""nofollow noreferrer"">following situation</a> with FreePBX standard for VoIP?</p>

<blockquote>
  <p>Why Not Use FreePBX 13? Glad you asked. Despite the freepbx.org
  facelift1 and the eternal message that “The ‘Free’ Stands for
  Freedom,” it turns out the business practices haven’t changed much
  since the Sangoma takeover. If your idea of “freedom” is a closed
  source VoIP platform with no way to emulate the repository used to
  manage and upgrade the “GPL” components in FreePBX 13 and no way to
  install the FreePBX 13 GUI or its “GPL” components other than
  switching to the proprietary FreePBX Distro, then FreePBX 13 may be
  just the ticket. If you’d prefer a RealGPL platform that lets you
  choose which components you’d like on your server, then keep reading.
  And drop the Sangoma and Digium honchos a note and let them know how
  you feel about FREEDOM.</p>
</blockquote>

<p>In relation to a <a href=""https://opensource.stackexchange.com/q/4883/5058"">question</a> about Elastix VoIP.  Because Asterisk is under the GPL was inferring that the various systems built on top were also open source -- apparently not.</p>

<p>Randomly, after David posted his answer, I'll add that PIAF (PBX In A Flash) has this friendly message:</p>

<pre><code>root@arrakis:~ $ 
root@arrakis:~ $ passwd-master 

passwd-master - 2.0.5 released on 052613
CentOS release 6.4 (Final) - 32 Bit
**********************************************************************
* In order to run this free and compiled program you must agree to   *
* the following:                                                     *
*                                                                    *
* 1. I agree to honor the terms of use set out below                 *
* 2. I agree not to reverse engineer any of the binaries             *
* 3. I agree not to request the source code for this program         *
* 4. I agree to only run this program on a PBX in a Flash system,    *
* 5. I agree that this program is an 'independent and separate work' *
* 6. By typing Y, I agree that this act constitutes my legal         *
*    signature and agreement to all of these terms and conditions    *
*    of use.                                                         *
* 7. I agree that no warranty is expressed or implied for this       *
*    program including any warranty of fitness for any purpose.      *
*                                                                    *
* IF YOU DO NOT AGREE WITH THESE TERMS OF USE DO NOT USE THIS PROGRAM*
*                                                                    *
* Tap the Y key to agree to these terms or ENTER to exit             *
**********************************************************************
</code></pre>
","<p>Taking some examples from GPLv3 (which clarified something that were considered ambiguous in previous versions):</p>

<blockquote>
  <p>A compilation of a covered word with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  “aggregate” if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit. Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate.</p>
</blockquote>

<p>The mere act of communicating with other programs does not, by itself, require all software to be GPL; nor does distributing GPL software with non-GPL software.</p>

<p>The <a href=""https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.html#MereAggregation"" rel=""nofollow noreferrer"">GPLv2 FAQ</a> clarifies when an aggregation should be released under GPL or not:</p>

<blockquote>
  <p>Mere aggregation of two programs means putting them side by side on
  the same CD-ROM or hard disk. We use this term in the case where they
  are separate programs, not parts of a single program. In this case, if
  one of the programs is covered by the GPL, it has no effect on the
  other program. Combining two modules means connecting them together so
  that they form a single larger program. If either part is covered by
  the GPL, the whole combination must also be released under the GPL—if
  you can't, or won't, do that, you may not combine them.</p>
  
  <p><strong>What constitutes combining two parts into one program? This is a legal
  question, which ultimately judges will decide.</strong> We believe that a
  proper criterion depends both on the mechanism of communication (exec,
  pipes, rpc, function calls within a shared address space, etc.) and
  the semantics of the communication (what kinds of information are
  interchanged).</p>
  
  <p>If the modules are included in the same executable file, they are
  definitely combined in one program. If modules are designed to run
  linked together in a shared address space, that almost surely means
  combining them into one program.</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are
  communication mechanisms normally used between two separate programs.
  So when they are used for communication, the modules normally are
  separate programs. But if the semantics of the communication are
  intimate enough, exchanging complex internal data structures, that too
  could be a basis to consider the two parts as combined into a larger
  program.</p>
</blockquote>

<p>and from <a href=""https://en.wikipedia.org/wiki/GNU_General_Public_License"" rel=""nofollow noreferrer"">Wikipedia</a>:</p>

<blockquote>
  <p>if a program consists only of own original custom software, or is
  combined with source code from other software components, then the own
  custom software components need not be licensed under GPL and need not
  make their code available; even if the underlying operating system
  used is licensed under the GPL, applications running on it are not
  considered derivative works. Only if GPLed parts are used in a program
  (and the program is distributed), then all other source code of the
  program needs to be made available under the same license terms.</p>
</blockquote>

<p>So if they included GPL parts in their application, they should release those changes, if they're communicating with those applications they are not forced to.</p>
","4899"
"Is it possible to have a non-comercial license, while allowing commercial use of derivative works and further modification of the derivative work?","50","","<p>This is a somewhat complicated situation, and I have trouble finding a Creative Commons license that is appropriate.</p>

<p>Here is what I want the license to do:</p>

<ol>
<li>Others should be able to redistribute my exact artwork, but only non-commercially.</li>
<li>However, they can do whatever they want commercially with the derivative works they produce, including allowing others to use their work commercially.</li>
<li>It should be allowed to make derivative works from the derivative works.</li>
</ol>

<p>When I try to find a CC licence that is suitable for this, I end up in a contradiction. Here is the logic:</p>

<ul>
<li>To comply with my condition number 1., I have to include <strong>[non-commercial]</strong>.</li>
<li>Also by condition number 1., I can <strong>not</strong> include <strong>[no-derivative]</strong>.</li>
<li><strong>If</strong> I include <strong>[share-alike]</strong>, they must use the same license, including the <strong>[non-commercial]</strong>. That contradicts my condition number 2. <strong>Dead end</strong>.</li>
<li>Then, I can <strong>not</strong> include <strong>[share-alike]</strong>, but then they are free to apply <strong>[no-derivative]</strong> to their derivative work, contradicting my condition number 3. <strong>Dead end</strong> as well.</li>
</ul>

<p>My conditions are reasonable (perhaps a little too restrictive, but that is another discussion), so it should be possible to cover them with a licence. Writing your own license is not recommended, so what should I do in this situation?</p>
","<p>Your conditions, as you have noted but not quite grasped, are self-defeating.</p>

<p>Suppose that the license you desire exists, and you create a picture ""A"" and release it under that license. Suppose then that Person B makes a change, for example, drawing a mustache into the picture. Let's call this picture ""B"". Because the picture is a derivative work, by your hypothetical license Person B can distribute it commercially. Suppose that through their distribution Person C obtains a copy of picture B. Person C, due to their right to create derivative works, removes the mustache from the picture. Now Person C has a picture that is equivalent to A, but has the right to distribute it commercially.</p>

<p>You must either grant commercial use to all, deny commercial use to all, or write your own license that specifies that if a derivative work is equivalent to A it may not be distributed commercially.</p>

<p>(Adapted from the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#ReleaseNotOriginal"" rel=""nofollow"">FSF's GPL FAQ</a>)</p>
","4696"
"Use a modified GPLV3 library - what code should be made public?","50","","<p><strong>Situation</strong>: A commercial product, using a locally modified GPLV3 licensed library. GPLV3 clearly requires to disclose source code.</p>

<p><strong>Question</strong>: Which source code are we talking about about ?</p>

<p>(a) The complete commercial product - including the modified library.</p>

<p>(b) The modified library only. The commercial product can remain closed source.</p>

<p>Is it (a) or (b) ?</p>

<hr>

<p>Personally I think the answer is (b). The modified library has to be released as another GPLV3 licensed product. A fork of the original product as it were. </p>

<p>However, management in my company is banning GPLV3 altogether because there is a risk the complete product should be released as open source.</p>
","<p>If you are actually planning on doing something like this, instead of just <em>thinking about</em> doing it, you should always ask your company's lawyers and do as they tell you.</p>

<hr>

<p>The Free Software Foundation <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">takes the view</a> that separate processes are different programs and code running in the same process is one program:</p>

<blockquote>
  <p>Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged).</p>
  
  <p>If the modules are included in the same executable file, they are definitely combined in one program. <strong>If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program.</strong></p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>If the FSF's view is correct, then the whole program, commercial code included, is one big derivative work of the original library.  That means you have to license the whole thing under the GPL.  Whenever you distribute binaries of a GPL'd program, you must also distribute source that can be compiled into those binaries.  In other words, <strong>you must distribute all of the source, not just the modified library</strong>.</p>
","5189"
"What is the term for a user who can merge pull requests?","50","","<p>In an open source project, such as one typically found on GitHub, there are users who can submit pull requests and users who can merge them. It is my understanding that ""contributor"" is the term for the former group. What is the term for the latter group?</p>
","<p>""Committers"" is a common (and unsurprising) name. </p>

<p>Some projects make the distinction between ""Maintainers"" (who are responsible for participating in decisions about the project's direction and ultimately reaching consensus about them) and ""Committers"" (who actually merge, or <em>commit</em> patches), while some projects use them interchangeably. </p>
","5940"
"Are the contents of an image covered by the license applied to the image?","49","","<p>Suppose I have an image of a piece of paper on which I wrote. I publish this image under an open source CC-BY license on my website.</p>

<p><strong>My question:</strong></p>

<p>Is the text in the image now also licensed under a CC-BY license? Or is just the image itself licensed?</p>
","<p>In this specific example, the text ""I publish this image under an open source CC-BY license on my website"" is below the <a href=""https://en.wikipedia.org/wiki/Threshold_of_originality"" rel=""nofollow"">threshold of originality</a>, which means that it is not entitled to copyright protection. A public license can <em>only</em> be applied to a work if it eligible for copyright protection, so the answer is clearly ""no"".</p>

<p>However, let's assume that the text on the photographed paper is an original poem or some other literary work that is above the threshold of originality. In that case the photograph of the text is a <em>derivative work</em> of the original (literary) work.  In that case, applying a CC license to the derivative does <em>not</em> retroactively enforce the license on the derivative on the original.</p>

<p>This should be blatantly obvious if the photograph is a photograph of somebody else's literary work.</p>

<p>And the law does not work differently, even if your photograph <em>your own</em> literary work.</p>

<p>Creating a derivative work requires permission from the rights holder. This is permission usually simple to obtain if both the original work (literary text) and derivative work (photo) is both created by the same person.</p>
","1018"
"can I remove files and folders in a PHP package without violating its license?","49","","<p>Let's say I'm working on a PHP application and I want to integrate some PHP packages like TWIG. Using Composer or some other automated management or code assisting technologies is irrelevant here. All included packages will have the MIT license, plus a couple of packages with the LGPL license.</p>

<p>Let's assume I'm gonna have my own folder structure for allocating third-party packages. For this example, it will be <code>/libraries</code>.</p>

<p>A regular installation of TWIG looks like this:</p>

<pre><code>/doc
/lib
/src
/test
.editorconfig
.gitignore
.php_cs.dist
.travis.yml
CHANGELOG
LICENSE
README.rst
composer.json
phpunit.xml.dist
</code></pre>

<p>What I would like to do is to have the <code>src</code> folder contents allocated in <code>/libraries/twig</code> or even <code>/libraries/twig/twig</code> (if I want to mimic the package naming convention onto the folder structure, so I could integrate the TWIG extensions package into something like <code>/libraries/twig/extensions</code> and so on...).</p>

<p>But I don't know if I must retain ALL files and folders (like Composer does when you add <code>twig/twig</code> as a dependency) or just the bare minimum (maybe the bare minimum plus the LICENSE file). I'm not going to modify any of the source files, just use them.</p>

<p>Is this possible or does this conflicts with the licensing terms for the package?</p>
","<p>Both MIT and the (Lesser) General Public License explicitly allow modifying the software. So if you want to remove files, rename or rearrange them, you are allowed to do this. Treat your changes the same as any other modification.</p>

<blockquote>
  <p>I'm not going to modify any of the source files, just use them.</p>
</blockquote>

<p>A modification means reproducing something other than an exact copy. This means renaming, removing, or changing the directory structure of the project is a modification, since the result is no longer an exact copy. From the General Public License:</p>

<blockquote>
  <p>To “modify” a work means to copy from or adapt all or part of the work
  in a fashion requiring copyright permission, other than the making of
  an exact copy.</p>
</blockquote>

<p><a href=""https://www.gnu.org/licenses/gpl-3.0"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/gpl-3.0</a></p>
","6214"
"If I distribute amazon AMI with my service that calls LGPL software, do I have to provide source code?","49","","<p>I have a question about licensing, and because my legal English isn't really strong, I was hoping for a simple answer...</p>

<p>My idea is to create a set of services, that uses command line programs which are licensed under LGPL and LGPLv3 and distribute amazon AMI for a fee. The question is should my code be also LGPL, and if not, can i charge people for this?</p>
","<blockquote>
  <p>The question is should my code be also LGPL, and if not, can I charge people for this?</p>
</blockquote>

<p>The LGPL draws a distinction between two kinds of new work that make use of an LGPL-licensed library:</p>

<ul>
<li>modifications to the library, where the LGPL-licensed work is modified directly</li>
<li>a ""combined work"" (or ""work that uses the library"" in v2.1), where a separate application <em>uses</em> the library</li>
</ul>

<p>In the first case, changes to the library must be licensed under the LGPL. In the second case, only the library must be released under the LGPL; the application that uses the LGPL-licensed work does not need to be licensed under the LGPL. (It must follow a few guidelines, though. Notably, it must be easy to for users to make the application use a replacement library if a user wants to substitute the LGPL-licensed library with a different version.)</p>

<p>However, it's possible that you don't even need to follow any of these rules, if your code doesn't combine with the LGPL-licensed work into a single program in either of the above-mentioned ways. If your work is stand-alone program, and only invokes the LGPL-licensed work as a separate program, then your code not bound by any of the LGPL's rules. The distinction between one program with two parts and two separate programs that call one another is a hazy metaphysical and legal distinction; the <a href=""http://www.gnu.org/licenses/gpl-faq.en.html#NFUseGPLPlugins"" rel=""nofollow"">FSF has some guidelines on how they feel about the subject in their FAQ</a>. If you wish to play it safe, then assume you do form a single program and license your work accordingly.</p>

<p>Finally, you may charge whatever you please for the act of transferring a copy of free software, even if your software is under the LGPL. See the FSF's article ""<a href=""http://www.gnu.org/philosophy/selling.en.html"" rel=""nofollow"">Selling Free Software</a>"" for a robust treatment of the subject.</p>
","2589"
"Is GPLv3-only compatible with GPLv3+?","49","","<p>Suppose I'm working on a GPLv3-only project, and find some code licensed as GPL3+. Can I incorporate that code freely in my software without changing my license? If a hypothetical GPL v4 is released, does that mean that my program is suddenly both GPL v3 and GPL v4 compatible?</p>
","<p>The actual text of a GPLv3+ grant is</p>

<blockquote>
  <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License...; either version 3 of the License, or (at your option) any later version</p>
</blockquote>

<p>The option is <em>yours</em> as the redistributor. The ""either"" language means that you may opt to distribute the work under the GPLv3 only.</p>

<p>The virtually identical case of GPLv2+ code into GPLv2-only project is marked OK <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#AllCompatibility"" rel=""noreferrer"">the GPL compatibility matrix</a>, with the annotation:</p>

<blockquote>
  <p>You must follow the terms of GPLv2 when incorporating the code in this case. You cannot take advantage of terms in later versions of the GPL.</p>
</blockquote>
","6201"
"Open sourcing code derived from a book","49","","<p>I decided to write a compiler as a learning experiment.
I first started by following some random tutorials here and there and built something that I called by naive implementation. (Since there's a lot of guessing that went into it).</p>

<p>I then decided to buy a book that treated the subject (<a href=""https://www.amazon.ca/dp/0470177071"">https://www.amazon.ca/dp/0470177071</a>). The book provides a very ""step by step"" way of building such software.</p>

<p>In order to learn from it, and to not do a direct rewrite of what is written in it (because it pretty much gives you an implementation), I decided to read the intro parts, and then try to build something from there, and if I was stuck / couldn't go forward I would read the suggested code and then implement it. Throughout the code, I comment on why some parts interact with other parts, I reference my ""naive implementation"" and compare the two solutions.</p>

<p>It happens that the compiler showed in the book and the compiler I wanted to build treated the same language. (I didn't know this at the moment of purchase). Which makes it a little harder to make it very different.</p>

<p>Beside the general framework (packages layout, interfaces), my code is pretty much different that the one provided in the book, but many ressemblances can be found, and obviously some parts are almost identical.</p>

<p><strong>My question</strong></p>

<p>I was thinking of open sourcing the result of the code I have written, and explaining that it is sort of my journey through the book. I wanted to licence it as MIT, but since it is derived work from the book, is it OK to do so? </p>
","<p>For clarity, let me focus only on the parts that you did copy or derive from the book (as in copy-then-modify). Parts of code that are your own original creation are yours and you can therefore license these under any terms you please including the MIT. </p>

<p>When you copy code from a book, what you copy is subject to a license whether explicit or not. And you cannot reuse significant elements from a book without the proper permission from the author or publisher (e.g. whoever owns the rights). In this case, Ronald Mak has a web site where the source code of this books is also available for <a href=""http://www.apropos-logic.com/wci/"" rel=""nofollow noreferrer"">download</a>.</p>

<p>Most of the files have a copyright from Ronald Mak and one seems to have been written while he was working at NASA Ames Research Center. There are no specific rights granted in the code, documentation or on the web site beside this statement found in the code: <code>For instructional purposes only.  No warranties.</code></p>

<p>Short of other rights granted by the author, you cannot do much with this code (or its printed version) and certainly you are not allowed to include significant chunks of it and relicense this using an MIT license: you do not have a license in the first place that allows you to do this. If I were you I would contact Mr. Mak to ask for a permission (if he actually own this and not his publisher.)</p>
","4954"
"What are ""contributor agreements""? Are they similar to open source licenses?","49","","<p>If I release my software under certain Contributor Agreements, can I give the software the same effect as if I released it under an Open source license? My business partner and I are unsure which to use!</p>

<ul>
<li><p>If yes, Great!</p></li>
<li><p>If no, why not? And what other options do I have?</p></li>
</ul>
","<p>Contributor agreements aren't licenses for your software. They are instead like contracts between the main project managers and contributors. It's like the rules of being with us. So, they aren't software licenses. These agreements generally govern things such as:</p>

<ul>
<li>Intellectual Property</li>
<li>Ownership</li>
</ul>
","465"
"What happens if I use a FOSS library and distribute my program with the proprietary license?","49","","<p>As I said in the title I have created a software that contains a library that has FOSS license..</p>

<p>1) can I distribute my project with <a href=""https://en.wikipedia.org/wiki/Proprietary_software"" rel=""nofollow"">proprietary license</a> (either sell it or give it for free) ?</p>

<p>2) If not, what should I do?</p>

<p><a href=""https://en.wikipedia.org/wiki/Mozilla_Public_License"" rel=""nofollow"">This is the software license.</a></p>
","<p>Firstly, IANAL/IANYL.</p>

<p>Secondly, <a href=""https://en.m.wikipedia.org/wiki/Mozilla_Public_License"" rel=""nofollow"">wikipedia says of the MPL</a> that</p>

<blockquote>
  <p>Unlike strong copyleft licenses, code under the MPL may be combined
  with files under any license in a ""larger work"", so long as conditions
  for the MPL are still met for ""covered"" components (Section 3.3 of the
  license). The MPL treats the source code file as the boundary
  between MPL-licensed and proprietary parts, meaning that all or none
  of the code in a given source file falls under the MPL.</p>
</blockquote>

<p>That is handy in one respect, which is that, given that you aren't modifying this MPLed library, we don't have to take a position on whether linking to a library creates a derivative work of that library.</p>

<p>As I read it, if your code links in a library covered under MPL, you can release the resultant executable under any licence you like, including a proprietary one.  You would need to make the source of the MPL'ed library itself available, on the MPL's terms, to those to whom you conveyed the executable.  This comes from section 3.2 of the MPLv2, which requires that </p>

<blockquote>
  <p>such Covered Software must also be made available in Source Code Form,
  as described in Section 3.1, and You must inform recipients of the
  Executable Form how they can obtain a copy of such Source Code Form by
  reasonable means in a timely manner, at a charge no more than the cost
  of distribution to the recipient</p>
</blockquote>

<p>but as long as you comply with that, I don't think it mandates restrictions on the licence for your code, which is linked in with this library.</p>
","2749"
"Copying GPL-licensed config into MIT-licensed library","48","","<p>I'm building a library and want to release it under MIT.</p>

<p>Among other functions, this library has to emulate the internal behaviour of std::unordered_set from libstdc++ (precisely -- determine the number of buckets by the number of elements). In order to do it I read the source code of libstdc++ and implemented the similar thing in my library. Also, there is a configuration file in libstdc++: a hard-coded list of 256 prime numbers which are potential hashtable sizes. It is not possible to emulate what I need without this list.</p>

<p>The main problem is that libstdc++ sources are released by GPL, which is not compatible with MIT this way.</p>

<p>I have two questions.</p>

<p>1) is it possible to put this hard-coded list into my code? Maybe I should claim that I produced it by interacting with unordered_set like a black box (it is possible) without looking at the source code explicitly.</p>

<p>2) is the part ""I didn't copy your sources, I just implemented mine which do the same thing but do not share a line with yours"" violating the license?</p>
","<blockquote>
  <p>1) is it possible to put this hard-coded list into my code? Maybe I should claim that I produced it by interacting with unordered_set like a black box (it is possible) without looking at the source code explicitly.</p>
</blockquote>

<p>In your specific context, the list in question is a list of prime numbers. In general I do not think such a short list of numbers would be eligible for copyright protection. Furthermore, based on the comments you posted, your <a href=""https://github.com/ifsmirnov/jngen/blob/df4e920454d60aae2b3a4caddc8ba7884f87a76c/gcc_primes_list.h"" rel=""nofollow noreferrer"">own</a> list is not copied from GCC but generated form a <a href=""https://github.com/ifsmirnov/jngen/blob/df4e920454d60aae2b3a4caddc8ba7884f87a76c/util/generate_prime_rehash_policy.cpp"" rel=""nofollow noreferrer"">utility of yours</a>.</p>

<p>As a side note, the libgo subsystem in GCC is BSD-licensed and there is a mention that the same primes list <a href=""https://github.com/gcc-mirror/gcc/blob/e440a3286bc89368b8d3a8fd6accd47191790bf2/libgo/runtime/go-new-map.c"" rel=""nofollow noreferrer"">has been copied from the GCC</a> i.e. from the <a href=""https://github.com/gcc-mirror/gcc/blob/86506bced1df38694695afd3711c35df31e06e1d/libstdc%2B%2B-v3/src/shared/hashtable-aux.cc"" rel=""nofollow noreferrer"">same file</a>. This is a potential, weak hint that Google and the Go developers may not consider this list of numbers as eligible for copyright protection (though they still slap their own license and copyright on top of their copy).</p>

<blockquote>
  <p>2) is the part ""I didn't copy your sources, I just implemented mine which do the same thing but do not share a line with yours"" violating the license?</p>
</blockquote>

<p>Therefore in light of the above comment I think that you are fine in this context. That said if you still have concerns, the right thing to do would be to post a mail on the GCC mailing list to ask for further opinions about this.</p>
","5690"
"Do I have to open source a website if I use GPL-licensed blogging software?","48","","<p>My friend is building a website for a school newspaper and we were considering using <a href=""https://code.google.com/archive/p/instant-press/"" rel=""nofollow noreferrer"">Instant Press</a> for the stories to show up. Instant Press is licensed with the GPL 2. </p>

<p>If we use Instant Press, will we have to put all the HTML code on GitHub? Or since it's HTML, it's already open for everyone to see so it seems like it's not necessary.</p>
","<p>As a general rule, the product of running a GPL code does not have to be GPL-licensed. See <a href=""https://www.gnu.org/licenses/gpl-faq.html#WhatCaseIsOutputGPL"" rel=""noreferrer"">https://www.gnu.org/licenses/gpl-faq.html#WhatCaseIsOutputGPL</a></p>
","5965"
"Finding the optimal number of collaborators for a project","48","","<p>I am finding it very hard to decide if I should offer commit access to the main repository to contributors (make them collaborators) for a project or if I should restrict the access to myself. Given that i trust the contributors, is it beneficial to offer them commit privilege for the main repository ?</p>

<p>I was hoping that by giving commit privilage the contributors may be motivated to devote more time for the project. But, I am also worried that at some point this policy might back fire in terms of loosing direction for the project and maybe other potential problems. </p>

<p>Is there a good way to decide when i should start offering commit privilege for the contributors and more importantly when i should STOP offering it. Thank you for any input shared.   </p>
","<p>In my experience, the best you can do is write down the direction and culture you want to develop/preserve in the project's community (values, goals, modes of operation, criteria for granting collaborator status, etc.) and spread our the responsibility to maintain this culture through as many people as possible — which implies being generally liberal with the attribution of commit rights.</p>

<p>Decentralizing the project governance this way has several advantages: you reduce the chances of any individual or group taking control of the project's direction; you make the project more resilient against the natural variations in availability of the maintainers (including you); you boost the sense of ownership and collaboration; and you reduce the risk of burnout. </p>

<p>I find it useful to think of granting collaborator status not as a reward for work done, but as a practical measure to reduce barriers of contribution. After all, lack of manpower is a much more common (and serious) problem for open source projects, than governance disputes — especially since the latter can always be mitigated with good policies. </p>
","6419"
"Fulfilling license conditions on server applications","48","","<p>Let's say I have a server side software(running as a service) with no direct interaction with the user but nevertheless commercial. This software contains open source components.</p>

<p>Most of the open source licenses require at least to display a copyright notice (or even attribution or full license text).</p>

<p>Where can one display this if there is no user interface ?</p>
","<p>Most open source licenses allow you to run the program for any purpose, and only require you to reproduce the license or copyright statement when you pass on a copy of the program, whether in source or binary form. The details depend on the license.</p>

<p>When you run the open-source software only on your servers and do not give a copy of your software to other legal entities, these licenses do not impose any restriction. Concrete examples:</p>

<ul>
<li><p>The <strong>GPLv2</strong>: “Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted”.</p></li>
<li><p>The <strong>Apache v2  License</strong> does likewise not restrict your ability to run the program. It also gives you a copyright license to “publicly perform” the program, and a patent license to use the work.</p></li>
</ul>

<p>So these licenses do not oblige you to display any notices about the open-source components used by your server-side code.</p>

<p>An open-source license that is notably different is the <strong>AGPLv3</strong>. It “explicitly affirms your unlimited permission to run the unmodified Program” and to “make, run and propagate covered works that you do not convey”. However: “if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source”. If your system has a client side user interface, the user interface can display these acknowledgements together with other legal notices. In other cases, this is more tricky and should be covered in another question.</p>
","5474"
"How would it be possible to distribute a GPL program with an Apache program?","48","","<p>A friend and I are making a program licensed under the Apache 2.0 license, and we would like to pull in code from one of his old projects licensed under the GPL 3.0 license, but I don't see a way to. Is this possible?</p>
","<p>If you and your friend are building upon an old project, and the original project completely <em>belongs</em> to you, then there's no issue. Since you own the project, you own the entire intellectual property, and you are free to license it as you wish.</p>

<p>However, the issue comes in when there is code from other contributors, or when there are incompatible licensed dependencies in the code:</p>

<ul>
<li><p>If code is from other contributors:</p>

<p>You'll have to ask them to relicense their contributions under a license such as the Apache license. If they refuse, you'll either have to remove their contributions, or you'll have to rewrite the code yourself.</p></li>
<li><p>If there is incompatible licensed dependencies:</p>

<p>For example, if your project relies on an external library such as the GPL, you'll have to respect the terms and conditions of that license, likewise with any other license. If the original project has a dependency with the GPL as its license, then you've got to either remove that dependency, or respect the terms by making your new project under the GPL as well due to its copyleft clause.</p></li>
</ul>

<p>If you don't have those two issues, then you're free to go!</p>
","2191"
"JPEG comment to convey Copyleft Multi-Licenced Copyright Notice","48","","<p><sup>This question is related to <a href=""https://opensource.stackexchange.com/questions/2400"">Copyleft Multi-Licenced Copyright Notice</a>.</sup></p>

<p>I upload pictures on commons.wikimedia.org and I want to facilitate the reuse but I want derivatives stay <em>""libre""</em>. Therefore I provide the <a href=""https://en.wikipedia.org/wiki/Wiki_markup"" rel=""nofollow noreferrer"">wikicode</a> <code>{{self|cc-by-sa-all|cc-sa|GFDL|FAL}}</code> to multi-license them under some copyleft licenses:</p>

<ul>
<li>Any version of CC-BY-SA</li>
<li>Any version of CC-SA</li>
<li>Any version of <a href=""https://en.wikipedia.org/wiki/GNU_Free_Documentation_License"" rel=""nofollow noreferrer"">GNU Free Documentation License</a> (GFDL)</li>
<li>Any version of <a href=""https://en.wikipedia.org/wiki/Free_Art_License"" rel=""nofollow noreferrer"">Free Art License</a> (FAL)</li>
</ul>

<p>Questions about preventing license compatibility issues:</p>

<ol>
<li><strong>Is it a good practice to license work under all versions of multiple-licenses?</strong></li>
<li><strong>Should I provide more copyleft licenses? Or should I remove unnecessary ones?</strong></li>
</ol>

<p>I also mention these licenses within the JPEG comment. I think the text should stay short within the JPEG comment. This is my last version:</p>

<blockquote>
  <p>Copyright (c) 2016 my-name (ɔ) Copyleft<br>
  This work (photo) is multi-licensed under all versions of:<br>
  CC-BY-SA, CC-SA, GNU-Free-Documentation-License and Free-Art-License.<br>
  Therefore recipients can choose the version and the license<br>
  under which they want to use/modify/distribute this work.</p>
</blockquote>

<p><strong>Note:</strong> The symbol 'ɔ' is from Unicode <em>U+0254 LATIN SMALL LETTER OPEN O</em> that may be more widely available than Unicode <em>U+2184 LATIN SMALL LETTER REVERSED C</em>.</p>

<p>Last question:<br>
<strong>Does this above notice meet the legal recommendations/requirements?</strong><br>
(Should it be written in another way? Should it be more verbose/shorten? ...)</p>

<hr>

<p><strong>EDIT</strong>  &emsp;  Applying advices from <a href=""https://opensource.stackexchange.com/users/69"">Zizouz212</a>'s <a href=""https://opensource.stackexchange.com/a/2404/2948"">answer</a>:</p>

<blockquote>
  <p>Copyright (c) 2016 my-name<br>
  This work (photo) is licensed under all versions of CC-BY-SA.<br>
  See <a href=""http://creativecommons.org/licenses/by-sa/"" rel=""nofollow noreferrer"">http://creativecommons.org/licenses/by-sa/</a><br>
  You may select the version of your choice.</p>
</blockquote>
","<p>You've got a couple issues.</p>

<p>First off, is the way you assert your copyright. Particularly this: (emphasis mine)</p>

<blockquote>
  <p>Copyright (c) 2016 my-name <strong>(ɔ) Copyleft</strong></p>
</blockquote>

<p>The issue is that the term ""copyleft"" is not a legally defined term. Even <a href=""https://en.wikipedia.org/wiki/Copyleft"">this Wikipedia article</a> claims that the addition of this text has no legal significance whatsoever. </p>

<p>Second, I'm not entirely sure what you're trying to accomplish by offering your work over multiple licenses. Ideally, you should keep things under a sole license. The biggest reason for offering a work over multiple licenses is so that others can distribute their own modifications under other various licenses, and in the case that licenses are incompatible with each other, to provide optimum usage across the broad spectrum of licenses.</p>

<p>Also, as a quick note, there is no ""CC SA"" license. ShareAlike is just a concept, that is embedded into the Creative Commons Attribution license (CC BY), and isn't a license in itself.</p>

<h3>What would I recommend?</h3>

<p>Unless the offering over multiple licenses provides advantages for yourself and for others that may make use of your work, you should really keep things simple, concise and to the point. Offer the work over a sole license, and the best bet would likely be the <a href=""https://creativecommons.org/licenses/by-sa/4.0/"">Creative Commons Attribution ShareAlike license</a>.</p>
","2404"
"Porting python library code into GPL project","48","","<p>I have a project that I have licensed under the GPL3. In it, I have a section of code which implements a bessel filter, which I ported from the python scipy implementation. I'm unclear on how scipy code is licensed - is it OK to simply include that code in my GPL project, or do I have to add something additional since it was derived from a python library?</p>
","<p>Scipy proper has a clear <a href=""https://github.com/scipy/scipy/blob/master/LICENSE.txt"" rel=""nofollow"">BSD license</a> so there is not un-clear.</p>

<p>When porting code, I prefer to keep the original license of the code in all cases (even if the license may not require it). </p>

<p>I would typically port the files in files that match more or less the ported files structure and keep these clearly under their original license. To avoid confusion and meet the BSD requirements I would also copy the Scipy license in a header comment in these files together with some notes explaining that this is port, available under the original ported code license and eventually describing some of the changes. Not all of this is required, but this is to me the right thing to do. </p>
","4410"
"Why copyright notices in source files?","48","","<p>Why does everybody writes the copyright notice on the top of a source file? Isn't LICENSE file in the root of the package enough?</p>
","<p>Files and authors can have many-to-many relationships: a file may have many different authors. I suppose you could enumerate the list of copyrights of each and every file in a master list somewhere, but that sounds like a lot more work than simply keeping each list of copyright notices within its respective file. </p>

<p>Even in the case of a single author, this also has the benefit of ease of extraction and transplantation into a new project. Virtually all FLOSS licenses require attribution, so if you want to lift a file from Project A and place it into Project B, you'd need to dig into another file with a master list of copyright information, look up the file(s) you want, and then move that information into the file or into Project B's master copyright list. That's a lot more work than simply copying the file as-is with copyright headers included!</p>

<p>A separate, related issue is license information in headers. This is important because simply including a copy of a license in a project doesn't rigorously indicate that all or any of the project is actually under that license. For example, maybe the code is under one license and art assets are under another license. Or maybe a GPL project has included files from another project that are GPL-compatible but under a different license. Including licensing information on a per-file basis eliminates confusion about which files are licensed which way.</p>
","6250"
"Why is the GPL itself unmodifiable?","48","","<p>I noticed today that the GPL has a copyright notice that reserves copyright AND disallows modification:</p>

<blockquote>
  <p>Copyright © 2007 Free Software Foundation, Inc. <a href=""http://fsf.org/"" rel=""nofollow noreferrer"">http://fsf.org/</a></p>
  
  <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>
</blockquote>

<p>I understand maintaining the copyright and allowing verbatim distribution but what is the argument (legal or otherwise) for disallowing versioning?</p>

<p>Specifically could they not allow for modification provided that the new derivative license does not call itself the GPL and does not make references to the FSF?</p>
","<p>The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#ModifyGPL"" rel=""nofollow noreferrer"">FSF does give that exact permission</a> in the GNU GPL FAQ, though in the same breath they urge you not to use such permission, which would contribute to the already-overwhelming problem of license proliferation:</p>

<blockquote>
  <p><strong>Can I modify the GPL and make a modified license?</strong></p>
  
  <p>It is possible to make modified versions of the GPL, but it tends to have practical consequences.</p>
  
  <p>You can legally use the GPL terms (possibly modified) in another license provided that you call your license by another name and do not include the GPL preamble, and provided you modify the instructions-for-use at the end enough to make it clearly different in wording and not mention GNU (though the actual procedure you describe may be similar).</p>
  
  <p>If you want to use our preamble in a modified license, please write to  for permission. For this purpose we would want to check the actual license requirements to see if we approve of them.</p>
  
  <p>Although we will not raise legal objections to your making a modified license in this way, we hope you will think twice and not do it. Such a modified license is almost certainly incompatible with the GNU GPL, and that incompatibility blocks useful combinations of modules. The mere proliferation of different free software licenses is a burden in and of itself.</p>
  
  <p>Rather than modifying the GPL, please use the exception mechanism offered by GPL version 3.</p>
</blockquote>

<p>As you can see, they permit reusing and modifying the terms of the license as long as you change the name and remove any association with the GNU project.</p>

<p>I suppose the reason that this right is not offered within the license text itself is so that the FSF can rescind or modify the terms of this permission in the future. That is, if the FSF decides to change how or whether they offer the right to make modified forms of the GPL, they do not want to have to issue a new version of the GPL just for that change! (Similarly, if they wanted to make the permission more restrictive, there would be no legal mechanism to say, ""Sorry everyone, that part of the license is wrong; we retroactively eliminate the version of the GPL that allowed you to make changes from existence."") Therefore, the license itself offers no rights to make a modified version, and any such rights are offered via an external channel, such as the GPL FAQ.</p>
","5316"
"Github source to npm js module set author correctly","47","","<p>I use <a href=""https://github.com/afiore/arboreal"" rel=""nofollow noreferrer"">Arboreal</a> library in my new project, i am made some changes and now working to change it to npm module and use Grunt, because it not available from Npm.</p>

<p>But i have problem, when i am begin edit package.json file. Here what i am get:</p>

<pre><code>{
  ""name"": ""arboreal.js"",
  ""description"": ""Javascript tree traversal and manipulation library"",
  ""author"": ""Andrea Fiore"",
  ""version"": ""0.0.2"",
  ""contributors"": [
    {
      ""name"": ""Nenad V. Nikolić"",
      ""email"": ""me@shonzilla.com"",
      ""url"": ""http://shonzilla.com/""
    },
    {
      ""name"": ""Vasiliy Altunin"",
      ""email"": ""skyr@altunin.online"",
      ""url"": ""https://github.com/vasiliyaltunin""
    }
  ],
  ""dependencies"": {},
  ""devDependencies"": {
  },
  ""engines"": {
    ""node"": ""&gt;= 4.0.0""
  },
  ""license"": ""MIT"",
  ""main"": ""./lib/arboreal"",
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+https://github.com/vasiliyaltunin/arboreal""
  },
  ""scripts"": {
    ""test"": ""jasmine-node test/specs""
  }
}
</code></pre>

<p>Well i did not finish with it, yet. </p>

<p>But main problem is <code>author</code>. Now it <code>""author"": ""Andrea Fiore"",</code>, but i forked it from <a href=""https://github.com/shonzilla/arboreal"" rel=""nofollow noreferrer"">this</a> repo. And owner of that repo seems do much work to improve and bugfix this code. But problem that i gonna to put it inside Npm under my account and in this case i am must set author to my name: <code>""author"": ""Vasiliy Altunin"",</code>, but in this case original author never mention.</p>

<p>What is the best practice to solve this problem, so all authors respected and all npm descriptions will be right?</p>
","<blockquote>
  <p>What is the best practice to solve this problem, so all authors respected and all npm descriptions will be right?</p>
</blockquote>

<p>There is no absolute best practice but here is what I would do. This is the same I would expect someone to do with my code and I would consider this a good to great practice:</p>

<ol>
<li><p>ensure I change the name of the package, to avoid any confusion with the original upstream package and avoid ""name squatting"" their package name in the registry.</p></li>
<li><p>Set my name as the author as the NPM registry demands it</p></li>
<li><p>Update the contributors with the list of <a href=""https://github.com/shonzilla/arboreal/commits/master"" rel=""nofollow noreferrer"">primary committers</a></p></li>
<li><p>update the description to explain the provenance of the code who wrote it, who I forked it from and what are my additions</p></li>
<li><p>add and update the same in the README.md file and eventually update accordingly the code file headers with similar information</p></li>
<li><p>possibly add the copyright of the main authors beside the original one in the MIT-LICENSE.txt</p></li>
<li><p>ping the authors to inform them about what I am doing as a courtesy</p></li>
</ol>

<p><strong>If possible I would try to avoid all of this stuff and instead work out with the upstream  developers to get my patches included and work with them to release it all in the registry, making all of the above moot. This would be my first choice in most cases.</strong></p>

<p>All this goes well above and beyond what would be essentially needed, but this is IMHO the <strong>right and courteous thing</strong> to do</p>
","5370"
"License that only allows distribution of edited versions","47","","<p>I am creating a project on GitHub, and I need to choose a licence. I want it this license to follow something like this:</p>

<h2>Permissions</h2>

<ul>
<li>It can be edited.</li>
<li>An <strong>edited</strong> version of the project can be distributed. The project itself can   <strong>NOT</strong> be distributed.</li>
<li>Both private use, patent use, and commercial use.</li>
</ul>

<h2>Conditions</h2>

<ul>
<li>License and copyright notice</li>
<li>Modifications should use the same licence</li>
</ul>

<p>Is there any license that would make a good fit?</p>
","<p>Such a license would not be a free or open source license (as defined by the FSF and OSI, respectively), since it does not allow distribution of verbatim copies. You will not a find a license that meets your requirements in any list of FSF- or OSI-approved licenses.</p>

<p>Aside from the restriction no-verbatim-distribution restriction, it sounds like the GNU GPL would otherwise be a satisfactory license for you. Its copyleft provisions require that modified versions are distributed under the same license, and that downstream binary distributions also include corresponding source code (which you didn't explictly ask for, but may be something you want, or can at least tolerate). It also includes patent provisions, allows commercial use (as all FLOSS licenses must), and requires preservation of your copyright notices (as most FLOSS licenses do).</p>

<p>The no-verbatim-distribution requirement is also trivial to circumvent, either intentionally or accidentally:</p>

<ul>
<li><p>Original author A licenses a work under your proposed license:</p>

<blockquote>
  <p>Hello world! It's a beautiful day.</p>
</blockquote></li>
<li><p>Downstream author B distributes a modified work based on A's work:</p>

<blockquote>
  <p>Hello world! It's a beautiful HELLO SURPRISE ANNOYING SHOUTING day.</p>
</blockquote></li>
<li><p>Downstream author C gets a copy of B's work (and may not even know about A's original work), and thinks it would look better without all that all-caps shouting. He makes a change and distributes a work that looks like this:</p>

<blockquote>
  <p>Hello world! It's a beautiful day.</p>
</blockquote></li>
</ul>

<p>C has met your license's requirement to make a change before distributing, but C's work A's original work are identical, so your no-verbatim-distribution requirement hasn't achieved anything meaningful.</p>

<p>Carefully consider why you feel the need to impose such an unusual requirement. You're not concerned about people sharing or modifying your code. What is the worst possible scenario that could occur if you didn't impose a no-verbatim-distribution requirement? How is it practically different from a scenario where someone makes the smallest possible change and distributes a nearly-identical work?</p>

<p>I strongly suggest you reconsider this requirement, since it only seems to</p>

<ol>
<li>make your work annoying to distribute for downstream users (but in no way impossible for any determined redistributor),</li>
<li>cut you off from a wealth of legally-vetted FLOSS license choices, and</li>
<li>not afford you any practical advantage.</li>
</ol>
","5849"
"Looking for the right licence to use","47","","<p>I have a software I would like to release for free. </p>

<p>It will be published on the AppStore at first and at the same time, the source code will be released on GitHub for those who would like to build the software by themselves, or have concern about privacy issues. </p>

<p>But, I don't want to allow these people using the code to distribute/sell their own build with their own name somewhere else. It should be for a personal purpose. </p>

<p>As far as I know, MIT is the most suitable licence for that. But I'm a bit lost... What do you think?</p>
","<p>Firstly, MIT is definitely the wrong licence, as it doesn't prevent people from making and selling their own <em>closed</em> build.</p>

<p>The stronger ""copyleft"" licences won't prevent people from making their own build either, but at least they can't close their version; they would need to redistribute under a comparably-open licence.</p>

<p>The problem with your question is that the right to distribute modified versions of the code is one of <a href=""https://fsfe.org/freesoftware/basics/4freedoms.en.html"" rel=""nofollow"">the four freedoms of free software</a>, and that includes the right to sell a modified build.  If you don't want to permit that, then whether or not it is zero-cost software, what you're making is not free software, and so this may not be the best place to ask for guidance.</p>
","2727"
"Open Source Notice on a Commercial Website","47","","<p>My company is currently evaluating several open source projects to help build out a new Software as a Service Platform (historically we never used anything open source) and we were wondering if we needed to disclose Open Source Notices on our actual website, i.e. under footer links  for terms /conditions or  legal or trademarks.  Specifically, we are going to be using an open source project that falls under the Apache 2.0 license and the Apache 2.0 license states ""(a) You must give any other recipients of the Work or Derivative Works a copy of this License"".  We also noticed that several companies, including <a href=""https://help.netflix.com/legal/notices?locale=en&amp;docType=notices"" rel=""nofollow noreferrer"">Netflix</a>, do disclose all open source projects used.  We've also come across some other websites that do the same, however, it appears the majority of sites don't disclose on their website.</p>

<p>Any guidance / thoughts would be much appreciated! </p>
","<p>Some licenses only require notice for code that is distributed, and allows you to use the code on your own machines however the hell you want. Actually, the GPL is one of those licenses! However, you have to remember tricky things, like which licenses are which, the fact that your client-side code <em>is</em> being distributed, and what counts as a ""derivative work."" Since providing notice is generally pretty easy, and everybody is happier when you give credit where credit is due, I'd personally recommend that you err on the side of more notice.</p>
","5132"
"What open-source license should I use for my tool?","47","","<p>I have developed a tool that uses another tool to convert a file from format#1 to format#2. And currently, my tool works only if it is given the file in format#2 as input, and so, it depends on that format#2. And to convert from format#1 to format#2, I modified converter tool and made those changes public as well through GitHub. The converter tool has Apache 2.0 License but when I had downloaded it, it had Lesser GPL license.  </p>

<p>Now I want to make my tool open source. Can I use Affero GPL or LGPL or GPL license for my tool or should I stick to Apache License only?</p>
","<h2>The converter tool you modified</h2>

<p>When you downloaded the tool it was under LGPL. So, normally you should have published your modifications under that license. But you say that it is now available under Apache 2.0. Are all versions of the tool now also licensed under this new license or is it just new versions? If it's just new versions, you should make sure that your modifications apply to a version whose code is currently released under Apache 2.0 before publishing your modified version under this license as well. Otherwise, you could have published them under the original LGPL license.</p>

<p>You should also quickly check that the license change seems legitimate. Typically, if the converter tool was the work of one single author, then it's probably legitimate. In other cases, that can be more complicated.</p>

<h2>The converter tool you created</h2>

<p>You can publish this one under any license you wish as it is your own work.</p>

<h2>The combination of the two converter tools</h2>

<p>This ""whole work"" can only be published under a license which its dependencies are compatible with. Whether the converter tool you modified should have been licensed under Apache or LGPL does not change much to the game because both of these licenses are compatible with AGPL 3.0 and GPL 3.0. So feel free to use one of these for the whole work.</p>
","4596"
"Cannot find the license of a software (if it has any)","46","","<p>I'm interested into modifying <a href=""https://play.google.com/store/apps/details?id=onion.chat&amp;hl=es"" rel=""nofollow noreferrer"">Chat.Onion</a> software to build an application on my own, I guess it's some type of free software as its source code can be accesed, but on the other hand on its <a href=""https://github.com/onionApps/Chat.onion"" rel=""nofollow noreferrer"">github page</a> I can't see anything that shows its license, I thought that maybe all projects in github were under some standard license <a href=""https://github.com/blog/1530-choosing-an-open-source-license"" rel=""nofollow noreferrer"">but it looks like every person that submits a project can choose one</a>, there doesn't seem to be any way to contact the developers (I even tried to enter its .onion link and I can't access it), I could maybe open an issue in github and contact the author about this, anyway it would be out of place and in any case the author doesn't seem to be answering the issues that have been writthen there.</p>

<p>Is there some way to know the license of this software? Maybe I'm missing something.</p>

<p>Apart from that, in the case it didn't have one, would I be able to freely copy and modify the software as I wished?</p>
","<p>The author has allowed you to download the software in source form. If there is no license, they have not allowed you to distribute the software further or prepare derivative works, which are by default exclusive rights of the copyright holder only.</p>

<p>You are welcome to open an issue requesting that the author license their work under a FLOSS license.</p>

<p>In this case, since the software is focused on the goal of unbreakable privacy, it looks to me like the author has exposed the source code so that paranoid users can inspect the software's source code and build their own known-safe copy of the software. This does not require a traditional grant of free-software rights, and the author has chosen not to make their software free software (but they might, if you asked).</p>
","6141"
"Does inbound=outbound apply to GPL-family without a CLA?","46","","<p>The traditional expectation for contributions to a free software project are <strong>""inbound=outbound""</strong> [<a href=""https://opensource.com/law/11/7/trouble-harmony-part-1#contribution-policies-and-free-software-tradition"" rel=""nofollow noreferrer"">1</a>] [<a href=""http://producingoss.com/en/contributor-agreements.html"" rel=""nofollow noreferrer"">2</a>]. That is, if the project is under license X, contributions are made under license X.</p>

<p>Does this apply to a project released under any/all of the following licenses with no additional CLA?</p>

<ul>
<li>LGPL v2-only</li>
<li>GPL v2-only</li>
<li>LGPL v2-or-later</li>
<li>GPL v2-or-later</li>
<li>LGPL v3-only</li>
<li>GPL v3-only</li>
<li>AGPL v3-only</li>
<li>LGPL v3-or-later</li>
<li>GPL v3-or-later</li>
<li>AGPL v3-or-later</li>
</ul>

<p>I am not concerned with compatibility beyond that, just that in each case that contributions are ""by default"" the same GPL-variant as the original project.</p>
","<p>Yes, submissions to a GPL codebase remain under the same GPL variant. This is specifically because of the copyleft mechanism. For example, <a href=""https://www.gnu.org/licenses/gpl.html#section10"" rel=""nofollow noreferrer"">from section 10 of the GPLv3 license text</a>:</p>

<blockquote>
  <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.</p>
</blockquote>

<p>This applies to all listed variants of the GPL (version 2/3, only/or-later clause, A/L/GPL variant). Specific modifications to the license terms are sometimes allowed (for example, by the ""or later"" clause), but ""by default"" the terms remain the same.</p>
","5539"
"Google Web Starter Kit licensing","46","","<p>I would like to use <a href=""https://developers.google.com/web/tools/starter-kit/"" rel=""nofollow noreferrer"">Google's Web Starter Kit</a> in a project of mine, but I don't know what exactly I need to do to abide by the license. It is licensed under the Apache License 2.0. </p>

<p>Do I need to include another copyright notice in addition to the Google one at the bottom of the license? If so, how should I do that? </p>

<p>Can I license the project as a whole under a different license if I'm using the starter kit or do I need to license it under the same license? </p>
","<blockquote>
  <p><em>Do I need to include another copyright notice in addition to the Google one at the bottom of the license? If so, how should I do that?</em></p>
</blockquote>

<p>For anything licensed with the Apache 2 license, you must keep all relevant original copyright and attribution notices. You must also keep the NOTICES file, if there is one:</p>

<blockquote>
  <p><strong>If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear.</strong></p>
</blockquote>

<p>If there is no NOTICE file, you don't need to worry about that part.</p>

<blockquote>
  <p><em>Can I license the project as a whole under a different license if I'm using the starter kit or do I need to license it under the same license?</em></p>
</blockquote>

<p>According to the text of the Apache 2 license, you can license your modifications, or your whole project, any way you like, but you can't change the license for the original code:</p>

<blockquote>
  <p><strong>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</strong></p>
</blockquote>

<p>See <a href=""https://www.apache.org/licenses/LICENSE-2.0.html"" rel=""nofollow noreferrer"">the text of the Apache 2 license</a> for more information, especially section 4 (""Redistribution"").  Note that I am not a lawyer and this is not legal advice.</p>
","5374"
"I have a CECILL and GPL software together with my closed-source software. Can I distribute them together?","46","","<p>1) My closed sourced software calls the GPL software on the command line like so: GPL.exe file. GPL produce output to stdout with the result. My closed source software reads the GPL output. Can I distribute them in the same installer?</p>

<p>2) If that is not possible (without releasing my code). Is it possible to build a downloader in the installer which downloads the GPL/CECILL software from the authors site and installs it on the customer machine? Which will then be argued that I did not distribute the GPL software, the user have downloaded it.</p>
","<p>Yes, this should be possible. The use you are describing likely falls under the ""mere aggregation"" category. See this part of section 5 of GPL v3:</p>

<blockquote>
  <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
</blockquote>

<p>And this answer in the GNU FAQ:</p>

<blockquote>
  <p><strong>What is the difference between an “aggregate” and other kinds of “modified versions”? (<a href=""https://www.gnu.org/licenses/gpl-faq.en.html#MereAggregation"" rel=""nofollow noreferrer"">#MereAggregation</a>)</strong></p>
  
  <p>An “aggregate” consists of a number of separate programs, distributed together on the same CD-ROM or other media. The GPL permits you to create and distribute an aggregate, even when the licenses of the other software are nonfree or GPL-incompatible. The only condition is that you cannot release the aggregate under a license that prohibits users from exercising rights that each program's individual license would grant them.</p>
  
  <p>Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged).</p>
  
  <p>If the modules are included in the same executable file, they are definitely combined in one program. If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program.</p>
  
  <p>By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program.</p>
</blockquote>

<p>I am not sure what you are asking about the CeCILL software but the answer should basically the same: the FSF's viewpoint on this is ground in copyright law. Nobody should be able to prevent such kind of redistribution from the moment they do allow redistribution. (Of course, IANAL and this is subject to interpretation of what is a derivative work in copyright law, but the FSF interpretation on the distinction between a derivative work and an aggregate is generally well accepted, at least nobody defends a stricter interpretation.)</p>
","5333"
"Is the Epson license Open Source?","46","","<p>I plan using this library <a href=""https://github.com/endlessm/epson-inkjet-printer"" rel=""nofollow noreferrer"">https://github.com/endlessm/epson-inkjet-printer</a> in a commercial product.</p>

<p>The licensing conditions for it are the following: </p>

<blockquote>
  <p>This program is distributed under GNU Lesser General Public License version 2.1. 
  This program links the object codes which are distributed under the conditions of 
  SEIKO EPSON CORPORATION SOFTWARE LICENSE AGREEMENT.</p>
</blockquote>

<p>For me it's not clear if it is allowed to be used commercially.</p>

<p><a href=""https://github.com/endlessm/epson-inkjet-printer/blob/master/COPYING.EPSON"" rel=""nofollow noreferrer"">https://github.com/endlessm/epson-inkjet-printer/blob/master/COPYING.EPSON</a></p>
","<p>Usually, combining (L)GPL software with other software into a single program makes that program subject to the (L)GPL. However, the copyright holder to the (L)GPL part can issue an exception to the (L)GPL that allows their software to be linked with software that would otherwise not be (L)GPL-compatible. The resulting program is not subject to the (L)GPL. </p>

<p>Here, the open source project uses the LGPL 2.1 license. You may use that that code freely for commercial or non-commercial projects, in accordance with the license.</p>

<p>However, once you also link to the Epson binaries you have to accept their license, which seems to be non-free. Notably, it does not allow sublicensing.
Since it is not a free license a discussion of its terms and conditions would not be on-topic here.</p>

<p>But it seems clear that you cannot publish a software that includes the Epson blobs. Your options are:</p>

<ul>
<li><p>using the open-source code in a way that does not rely on these blobs, in which case you have no restrictions beyond those specified in the LGPL.</p></li>
<li><p>publishing a software that may depend on the Epson blobs, but is not yet linked to them. How you may do that depends on the Epson license. For example, you may be allowed to create a tool that asks the end user to accept the Epson license, then downloads and links the blobs for them. Again, whether this is allowed at all and specifically for commercial software depends entirely on the Epson license.</p>

<p>Note that the open-source library itself seems to fall under this case since it is published under the LGPL which allows commercial use and distribution with commercial software. The library already includes tooling to link with the Epson blobs if they are installed on the system (which requires their license to have been accepted). However, it does not assist with installation of the Epson blobs. So at the very least you seem to be able to offer a commercial software including the LGPL component if it links to the Epson blobs on the end user's system, not before.</p></li>
</ul>
","6094"
"Open source code with no license","46","","<p>I am looking at working on improving an app that has not been updated for several months, add some features etc. In the description of the app on google play it says that the app is open source and links the github, and in another forum it says the same thing (with no proof on the forum that they are the creator).</p>

<p>However, on github there is no license and it does not say it is open source. It does have a link on the github readme to the google play page where it says that the app is open source but it doesn't say on github page that it is open source.</p>

<p>So my question is, can I fork the app? I am not aware of the legal rules, can I use it on my phone and give it to a few friends? Can I share it larger than that or could I even put it on google play? I have tried contacting the creator of the app in multiple places with no response.</p>
","<p>Per the GitHub Terms of Service, yes, you can fork the project on GitHub using GitHub's fork functionality. Specifically, section D5 of the GitHub Terms of Service state:</p>

<blockquote>
  <p>Any Content you post publicly, including issues, comments, and contributions to other Users' repositories, may be viewed by others. By setting your repositories to be viewed publicly, you agree to allow others to view and ""fork"" your repositories (this means that others may make their own copies of your Content in repositories they control).</p>
  
  <p>If you set your pages and repositories to be viewed publicly, you grant each User of GitHub a nonexclusive, worldwide license to access your Content through the GitHub Service, and to use, display and perform your Content, and to reproduce your Content solely on GitHub as permitted through GitHub's functionality. You may grant further rights if you adopt a license.</p>
</blockquote>

<p>Your rights are limited to the keeping the product on GitHub. Without a license grant, you can't use, modify, distribute, or any of the other good things that you can do with the software.</p>

<p>So, although you can make a copy of it on GitHub, you can't do much with that copy. You can't compile it and submit it to Google Play, you can't compile it and load it onto your phone (or your friends' phones), and you can't make modifications or derivative works of the original work.</p>

<p>Because there's no explicit license grant, the work is considered <a href=""https://en.wikipedia.org/wiki/All_rights_reserved"" rel=""nofollow noreferrer"">""all rights reserved""</a>, except for the few rights that were required to be granted in order to use the GitHub service.</p>
","5561"
"What is the proper etiquette for modifying a repo, then publishing it for an unrelated use?","46","","<p>I have cloned <a href=""https://github.com/electron/electron-quick-start"">electron-quick-start</a>, which is licensed as CC0 1.0 (Public Domain). It's purpose is to help new users to learn Electron. I used it as a scaffolding to make a utility app that I'm using for live debugging.  I would like to make this available others to use, but want to make sure I'm doing it in the right way.  The changes I've made don't necessarily contribute to the intent of the original repo, so I don't feel like I should be forking and making a pull request.</p>

<p>Do I just delete the old repo history, rename everything, and put it on Github with a mention of where it came from?  Should I at least preserve the git history?  What should I do in this situation to preserve history and attribution, yet completely rebrand it as a utility app?</p>
","<p>First rule, do not fork. Forking is only used on GitHub to contribute changes back (which shouldn't be the case for you).</p>

<p>You can, at your preference, decide to clone the repo and keep the history, which won't be a problem if your project becomes big as the original repo only has a short history of 92 commits. Or choose to just take the code and create a brand new history. In that second case, the first commit could be ""Import code from github.com/electron/electron-quick-start."" or something along these lines.</p>

<p>You do not <em>have to</em> do anything else to preserve attribution as it is not required by the license. However putting a link back from your README would be a nice thing to do. More importantly, as remarked by Glenn Randers-Pehrson, by keeping track of where you got the code, it also establishes your own right to use or convey the code to others (i.e, establishes provenance).</p>
","5013"
"Fair voting protocol for a community choosing a new icon?","45","","<p>Our app's icon dates back to when shiny gradients were cool, so we asked users to design a new one, and about 20 different designs have been submitted.</p>

<p>A particular user submitted a very nice design, and several people asked her to make slight variations, so now she has 3 very similar variations of the same icon. If we do a simple <em>""Choose the one your prefer""</em> vote, then votes that would have gone to her concept will be divided by 3 (the 3 variations are evenly liked it seems), so her concept will loose, whereas without the variations her concept would probably win (see <a href=""https://en.wikipedia.org/wiki/Independence_of_clones_criterion"" rel=""nofollow"">https://en.wikipedia.org/wiki/Independence_of_clones_criterion</a>).</p>

<p>It is actually more complex than that: all submitters have reused ideas each other's ideas, so all icons share similarities. For instance, the icon(s) I talked about in the last paragraph have been forked and slightly edited and submitted as new candidates by other users.</p>

<p>It is great that everyone forks and that we get many variations, but this open source way of doing things means a simple voting protocol will not work.</p>

<p><strong>QUESTION:</strong> What <a href=""https://en.wikipedia.org/wiki/Voting_system"" rel=""nofollow"">voting method</a> would work the best in this case?<br>
By ""the best"", I mean the method which will result in the <a href=""https://en.wikipedia.org/wiki/Condorcet_criterion"" rel=""nofollow"">choice that most voters are happy with</a>.</p>

<p>Usage examples by actual open source projects (with the same goals) appreciated.</p>
","<p>Don't vote. Come to consensus informally through discussion, and leave the final decision to the maintainers.</p>

<p>Every voting mechanism has downsides. In general, it is impossible to have a voting system that meet the criteria:</p>

<blockquote>
  <ul>
  <li>If every voter prefers alternative X over alternative Y, then the group prefers X over Y.</li>
  <li>If every voter's preference between X and Y remains unchanged, then the group's preference between X and Y will also remain unchanged (even if voters' preferences between other pairs like X and Z, Y and Z, or Z and W change).</li>
  <li>There is no ""dictator"": no single voter possesses the power to always determine the group's preference.</li>
  </ul>
</blockquote>

<p>(taken from <a href=""https://en.wikipedia.org/wiki/Arrow%27s_impossibility_theorem"" rel=""nofollow"">Wikipedia</a>)</p>

<p>This is known as Arrow's impossibility theorem.</p>

<p>Being open source doesn't mean being a democracy. It's up to the maintainer(s) to determine what's best for the project. Endless discussions about a logo usually isn't the best way to spend your resources/time, and avoiding that can be a good choice for a maintainer.</p>

<p>I would advice to either</p>

<ul>
<li>Let the maintainers pick, possibly advised by a vote, preferably advised by a discussion.</li>
<li>If you insist on doing a vote, let the maintainers pick between the top 3 outcomes of some sort of vote. If you want to go with a consensus model, I'd go with <a href=""https://en.wikipedia.org/wiki/Approval_voting"" rel=""nofollow"">approval voting</a> or <a href=""https://en.wikipedia.org/wiki/Range_voting"" rel=""nofollow"">range voting</a>. </li>
</ul>

<p>All voting mechanisms are susceptible to strategic voting. </p>
","2089"
"Giving attribution to tutorial","45","","<p>If I want to use the code from <a href=""http://pointclouds.org/documentation/tutorials/progressive_morphological_filtering.php#progressive-morphological-filtering"" rel=""nofollow"">this Point Cloud tutorial</a> (or similar) in a commercial program, do I have to attribute to the author? Although PCL is licensed with the BSD license (so no problem), the webpage with the tutorial (so the actual work) is hosted and licensed under a Creative Commons license (one that allows for commercial use, as it says on the site). </p>

<p>Therefore, should I include the author/source attribution, and if so, then where? In the direct source code of my program? In some file that goes along with it? Are parts of the code, especially those that are tutorials, even understood as copyrighted material?</p>
","<blockquote>
  <p>Are parts of the code, especially those that are tutorials, even understood as copyrighted material?</p>
</blockquote>

<p>Under the Berne convention anything put in a preservable form is automatically copyrighted, so yes.</p>

<blockquote>
  <p>Do I have to attribute to the author?</p>
</blockquote>

<p>Seeing as that's the entire point of the license, yes. If you are publishing the work, then the legal code puts it clearly.</p>

<blockquote>
  <p>If You Distribute, or Publicly Perform the Work or any Adaptations or Collections, You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium or means You are utilizing:</p>
  
  <p>(i) the name of the Original Author (or pseudonym, if applicable) if supplied, and/or if the Original Author and/or Licensor designate another party or parties (e.g., a sponsor institute, publishing entity, journal) for attribution (""Attribution Parties"") in Licensor's copyright notice, terms of service or by other reasonable means, the name of such party or parties;</p>
  
  <p>(ii) the title of the Work if supplied;</p>
  
  <p>(iii) to the extent reasonably practicable, the URI, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and</p>
  
  <p>(iv) , consistent with Section 3(b), in the case of an Adaptation, a credit identifying the use of the Work in the Adaptation (e.g., ""French translation of the Work by Original Author,"" or ""Screenplay based on original Work by Original Author"").</p>
</blockquote>

<p>So a statement satisfying all those would be ""This product includes code from a tutorial by pointclouds.org, available <a href=""http://pointclouds.org/documentation/tutorials/progressive_morphological_filtering.php#progressive-morphological-filtering"" rel=""nofollow"">here</a>.""</p>
","4168"
"How can I mitigate or avoid clashes with project maintainers over my bug report(s)?","45","","<p>We keep hearing about the ungrateful job of OSS maintainers and the arrogant users with a huge sense of entitlement demanding slave work for free.</p>

<p>While I do sympathise with this sentiment, there are 2 cases from my recent past that I may have been one of the jerks. Yet, when I look back, I can't see what I would have done differently, other than not engage with this product.</p>

<p>In these cases, <strong>what could I have done to avoid or de-escalate the conflicts?</strong> Is there a better way to think about the mind (and schedule) of a project maintainer to help my approaches be received more favorably?</p>

<p><strong>Case 1:</strong></p>

<p>A company is providing a hosted version of their static analysis tool gratis for OSS. The documentation is scarce and the instructions are not working for my project. I spend a few evenings trying things and finally send to the support email address a detailed summary of the problem and what I have done so far, plus link to live project, asking for help. I don't get any response.</p>

<p>Few weeks later, I post the question on Stack Overflow. A developer from the said company replies within a day or two, and after few days of back and forth, we resolve the issue. Turns out there were a number of undocumented ""known issues"" (a.k.a. ""you are doing it wrong"") and a few easy changes that would have prevented my problem.</p>

<p>I summarize the conversation and recap the factors that led me astray, suggesting that they get fixed or featured prominently in the docs. Around this time a person who is actually working on the OSS Support for the said product joins the conversation, rejects all feedback and starts behaving indignantly after I make a note that they are late to the party and haven't contributed much to the solution.</p>

<p>Then we exchange a few comments on how I am not the only user and I can't expect special attention, while I counter with <em>""I am the only user that has documented in public the root cause of the problem and the solution""</em>  (I saw a number of people on SO had the same problem, but there was only one half-assed solution, with major hole in it.)</p>

<p>In the end, all parties go away disgusted. I only wanted to be helpful -- what went wrong here?</p>

<p><strong>Case 2:</strong></p>

<p>Another company, another tool, integrating with a build tool I use. All of a sudden integration breaks because of a third party thing. I fix it by doing it right and submit them a snippet for including in the readme. They demand that I actually do the change and do a pull request. I do. They request I fix my readme pull request. I see no value in this back and forth and close the pull request.</p>

<p>Same company, few months later - I find a trivial bug. File an issue with line-number and description of the fix. They suggest a pull request. I counter that for such a trivial change I don't see the point and I am not going to spend time on it. They downvote the comment (assume they are offended), but fix the bug (yay!).</p>

<p>--</p>

<p>So, what would you think is the right course of action in these 2 situations? I want to make the world a better place, I am prepared to do some work, but I appreciate appreciation and don't like wasting my time.</p>
","<p>There are at least two competing interests in how open source maintainers run their projects:</p>

<ul>
<li>a desire to foster and accept outside contributions</li>
<li>developer bandwidth</li>
</ul>

<p>Developers have limited time to review outside contributions, especially if the project isn't a full time job (but even if it is). Combine this with the occasional entitled user, and some open source maintainers might assume the worst about contributions until proven otherwise. Even if the users aren't being rude or entitled, they can formulate their messages or changes in a way that makes things unnecessarily hard for developers.</p>

<p>Consider the Linux kernel, which is <em>extremely</em> strict in what they require of patches and pull requests, and failure to meet those standards is not kindly received. They have enough activity (and busy enough devs) that they would rather create compliance-by-fire than waste time coddling everyone learning to submit feedback.</p>

<p><strong>Case #1</strong></p>

<p>Interpersonal exchanges can be quite difficult over text, especially when submitting critical feedback. Consider that the maintainers may be bombarded by requests far ruder than yours, and if you don't take pains to demonstrate politeness, it's very easy to assume the worst whenever interacting with anyone who has a complaint.</p>

<p>Yes, it would might be in their best interests to neutrally collect feedback from anyone who has any to offer, but obviously they didn't do that in this case. Consider also that they may have enough fully-formed contributions for their consideration coming in to fully utilize their development bandwidth, so that a suggestion or bug report without a complete code or documentation change simply doesn't merit much consideration.</p>

<p>Is your information about usability a net gain for the project? Of course. But it's a message that, like it or not, comes with an implicit work order: ""This needs to get done."" If you don't immediately follow this up with an offer to do the work yourself, it's easy for a developer to take this the wrong way. In particular, if your feedback is not especially concrete (""It should be more clear that in order to do X you need to click buttons Y and Z first"" -- it should be made more clear <em>how</em>?) then your message places the onus of figuring out how to make the fix on the developer. </p>

<p>Your incomplete contribution does provide value to the project, but how you present even a very helpful contribution can provoke a bad reaction. Every maintainer is different, but in the future, you could approach the act of giving usability advice with a greater awareness that you're essentially creating heaping new work onto the developers.</p>

<p><strong>Case #2</strong></p>

<p>Case #2 is different from #1: for #2, there are technical and procedural reasons why they require a pull request. If a project has a protocol of accepting outside changes via pull request, then not using a pull request is about as frustrating as submitting code that doesn't conform to a project's coding standards. That is to say, it's still <em>useful</em>, but done in a wrong enough way that it ties up developer time -- and the entire point of the policy is to save developer time.</p>

<p>Pull requests are valuable for tracking statistics about outside contributions (size, frequency, how often they are accepted vs. rejected) as well as providing a standard platform for the internal team to agree on whether to accept each outside change. If a project asks you to use a pull request, then you should either do it, or be prepared for your contribution to be treated as less valuable, just like a contribution that ignores code format standards.</p>

<p>To put it another way: you think it would have been trivial for the developer to take the description of your change and implement it. If that's so, then you could do it yourself. You might point out that the developer could have implemented the fix faster than you could have learned to formulate a pull request. However, the developer isn't looking at this from a cold utilitarian perspective about how to minimize net effort between the two of you. The developer just sees something that you could have done yourself and didn't. (Also, taking the term to learn and do things the right way makes you a more valuable contributor in the future, so you could view this insistence on doing things the right way as an investment in you as a project contributor.)</p>
","6024"
"How do I refer to the AOSP specifically, instead of compatible versions of Android, without breaking trademark law?","45","","<p>According to <a href=""https://source.android.com/source/brands.html"" rel=""nofollow noreferrer"">these guidelines</a>, Android™ is a trademark that should only refer to compatible versions of Android as described <a href=""http://source.android.com/compatibility/"" rel=""nofollow noreferrer"">here</a>. My confusion is that the Android Open Source Project's name <em>contains the word Android</em>.</p>

<p>If I were to build the AOSP and make no modifications to it, and did not go through the compatibility process, what would I legally have the right to call what I have compiled? Can I call it ""Android Open Source Project,"" or must I rename it? What do I call AOSP if I have made no modifications to it? Renaming it would cause confusion, while not renaming it would also cause confusion. I can imagine someone going, ""Where's the app store?"" I'm so confused.</p>

<p>A more careful reading shows that this restriction only applies to ""hardware, packaging or marketing materials of device."" So in my case, I was fine. I was making a spreadsheet comparing computing platforms' support for various communication protocols. But this still leaves the question of what I call AOSP if I were to sell a hypothetical line of phones running a stock build of AOSP that did not comply with the compatibility specification.</p>

<p><em>Note: This question was originally posted on the Android Enthusiasts section, but I have relocated it due to being its being off-topic there.</em></p>
","<p>Trademarks are a complicated matter and eventually something quite important in the FOSS world as branding is essential to some projects whether they are commercially backed or not. For instance, the branding elements of a <a href=""http://www.redhat.com/f/pdf/licenses/GLOBAL_EULA_RHEL_English_20101110.pdf"" rel=""nofollow noreferrer"">Red Hat®</a> or <a href=""https://www.ubuntu.com/legal/terms-and-policies/intellectual-property-policy"" rel=""nofollow noreferrer"">Ubuntu®</a> distro are what makes these --otherwise free-software-based distros-- eventually non-redistributable in some cases. Or they are the subject of many debates or feuds such as when GROUPON™ reused the <a href=""http://tsdr.uspto.gov/#caseNumber=76368848&amp;caseType=SERIAL_NO&amp;searchType=statusSearch"" rel=""nofollow noreferrer"">GNOME®</a> <a href=""https://www.gnome.org/groupon/"" rel=""nofollow noreferrer"">brand</a> incorrectly.  </p>

<p>In your specific case, there is no easy way out of this. I would likely stay in the clear by calling things <a href=""http://tmsearch.uspto.gov/bin/showfield?f=toc&amp;state=4807%3Avlixlz.1.1&amp;p_search=searchss&amp;p_L=50&amp;BackReference=&amp;p_plural=yes&amp;p_s_PARA1=&amp;p_tagrepl%7E%3A=PARA1%24LD&amp;expr=PARA1%20AND%20PARA2&amp;p_s_PARA2=aosp&amp;p_tagrepl%7E%3A=PARA2%24COMB&amp;p_op_ALL=AND&amp;a_default=search&amp;a_search=Submit%20Query&amp;a_search=Submit%20Query"" rel=""nofollow noreferrer"">""AOSP""</a> which is not something that is trademarked as far as I know, but it could. Or create my own branding. But reusing anything with the word ""android"" in it is likely a problematic at some level. </p>

<p>Now in the case of a document (such as a spreadsheet) you can call a cat a cat, and reference what is Android™ as being Android alright (like I am doing right now and like you did).</p>
","5086"
"License details in languages other than English (American)","45","","<p>I am adding support to allow the use of GUI languages other than English (American) with a large GPL project that uses some MIT/3-Clause BSD libraries and I was wondering whether I should produce localised versions of the licences of those third party items so that non-English users understand the details of what they can do with the product.  I am aware from the <a href=""https://www.gnu.org/licenses/translations.html"" rel=""nofollow noreferrer"">FSF themselves</a> that only English versions of the GPL are considered to be <em>official</em> but does the same apply to those other licences - and if not where can I get known <em>good</em> translations?</p>

<p><em>I note that the Free Software Federation's <a href=""https://www.gnu.org/licenses/license-list.fr.html"" rel=""nofollow noreferrer""><strong>French</strong> language page</a> only has links to English versions of those licences.</em></p>

<p>Given that the libraries that are being used in my product came with English language licence texts I suppose I have to retain the text exactly as given {or see if there are <em>other</em> language versions with identical functionality and version numbers} but I do wonder how non-English speakers comprehend the details of the licensing of FLOSS application/libraries when they have to use licences written in a language that is not their native tongue... on the other hand I suspect that many of the main-stream coding languages have a bias towards a part of the World that was quite happy to use just an ASCII character encoding (although that perception may also be due an observation bias on my part)!</p>
","<p>The terms of these licenses generally require you to provide the copyright notice and license terms that you received. They will be in English language, so you will have to use the English-language terms even for non-English users.</p>

<p>Translations of the licenses may be helpful for understanding, but are not a legally relevant document. If an official translation exists you could additionally link to that. You should not write or commission a translation of your own. That exposes you to unnecessarily liability if you mistranslate something, and it may actually violate the license of the license. E.g. in the GPL v3:</p>

<blockquote>
  <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>
</blockquote>

<p>A translation would be a derivative work, and not a verbatim copy.</p>

<p>A notable license family with official translations is CC 4.0 which translates the same text into multiple languages, and the CC ported licenses which translate the ideas of the license into the legal context of a particular jurisdiction, with the license then being written in the language of that jurisdiction.</p>

<p>Language barriers are an important problem: how can a user exercise their freedoms to use free software when they can't read the license? However, licenses are legal documents that need to be unambiguous and precise. I cannot with good conscience agree to an English license if that means I also agree to a Chinese text which I cannot read. On balance, it is better and safer if the license is expressed as a single document, even though that means some users will not be aware of their rights.</p>

<p>Note that most open-source licenses are copyright-based. They do not restrict users, but only grant additional permissions that would otherwise be forbidden by copyright laws. The GPL v3 states explicitly: “You are not required to accept this License in order to receive or run a copy of the Program.” So as far as these licenses are concerned, you do not have to ask users to agree to the license of your software, but only inform users that these licenses apply.</p>

<p>If you do business in a jurisdiction, local laws may require you to state your terms in an official language of that jurisdiction. How that meshes with open source licenses may be an interesting legal question, but would be a matter for local lawyers.</p>
","6079"
"License for origami crease pattern drawing software","45","","<p>I'm planning to make some origami crease pattern drawing software. Now this will be mainly based on an existing piece of software (Oripa 3.5) which is under the GNU GPL 3 license. The author mentioned you are also allowed to see it under a higher version if wanted.</p>

<p>Now to build this piece of software I use a number of tools/libraries. More specifically, the electron.js framework (under MIT license), vue.js framework (under MIT license) and the d3.js library (BSD 3 license). Moreover, electron.js uses node.js (MIT license). </p>

<p>What kind of license is possible for this piece of software? Is it possible to commercialise it?</p>
","<h1>Short Answer</h1>

<p>Your work probably has to be released under the GPL and you probably won't be able to commercialize it.</p>

<h1>Long Answer</h1>

<p>First, let's get the MIT- and BSD-licensed dependencies out of the way.  Those don't impose any restrictions on how you <em>license</em> your work, but they do have other requirements attached (such as attribution).  I'm assuming those requirements aren't a problem for you.</p>

<p>Now, the GPL.  The big question is whether your work is ""based on"" a GPL-licensed work to such a degree that it is legally considered <em>derived</em> from it.  If you're just duplicating functionality or taking inspiration from the user interface, then it's probably not derived, and you can license your project however you want.  On the other hand, if you're forking the original project's source code, your project is almost certainly derived.</p>

<p>If your work <em>is</em> derived from the original work, then you need to release your work under the GPL too.  After all, that's the whole point of copyleft.</p>

<h1>Can a GPL work be commercialized?</h1>

<p>This depends on your business model.  The GPL doesn't forbid you from selling your software – actually,
 <a href=""https://www.gnu.org/philosophy/selling.en.html"" rel=""noreferrer"">the FSF encourages charging distribution fees for fundraising</a> – but it does make earning a profit very difficult.  You will have to provide corresponding source alongside every binary distribution, and anyone who has the software will be able to redistribute it to anyone else.  If you think you can make that work, go for it.</p>

<h1>Another Option</h1>

<p>You could always try negotiating directly with  whoever owns the copyright to the GPL work you want to derive from.  If they themselves are not bound by GPL-licensed dependencies, they might license their work out to you under different terms.</p>
","6147"
"License of photos of code?","45","","<p>If I take a photograph of software code, in what way(s) am I allowed to use/distribute that photograph?</p>

<p>I am assuming copyright code hangs somewhere between fair usage and copyright infringement, but for free to reuse code such as MIT, can I assume I am free to use/distribute it, and if I distribute it what license should I use?</p>
","<p>If you create a photograph in which software code is a prominent feature, then your photograph will likely be considered to be a derived work of the software and you will have to comply with the copyright license of the software.</p>

<p>If the photograph is more than a mechanical reproduction of the source code, then the photograph itself is also protected by copy rights, which you hold as being the photographer.</p>

<hr>

<p>If the source code is licensed under a permissive license, like the MIT license, then you are completely free in your choice of license for the photograph.<br>
To comply with most permissive licenses, you will have to mention somewhere (probably in the metadata of the photo) that the code shown is licensed under license XYZ.</p>
","5702"
"Licensing a project which uses numerous other modified projects under different licenses","45","","<p>I am using multiple libraries in a project I plan to release and distribute in both source and binary form. In my project, I use a few other open-source projects, and modified the source-code in a few of them. I am managing the source-code of my project on GitHub, and maintaining forks of the modified projects on GitHub as well.</p>

<p>The projects use the following licenses:</p>

<ul>
<li><a href=""https://github.com/java-native-access/jna"" rel=""nofollow noreferrer"">Java Native Access</a> - LGPL v2.1</li>
<li><a href=""https://github.com/ben-manes/concurrentlinkedhashmap"" rel=""nofollow noreferrer"">Java ConcurrentLinkedHashmap</a> - Apache v2.0</li>
<li><a href=""https://github.com/protonail/leveldb-jna"" rel=""nofollow noreferrer"">LevelDB JNA</a> (Modified) - MIT</li>
<li><a href=""https://github.com/msteiger/jxmapviewer2"" rel=""nofollow noreferrer"">JXMapViewer2</a> (Modified) - LGPL v3</li>
<li><a href=""https://github.com/protolambda/blocktopograph-lib"" rel=""nofollow noreferrer"">Blocktopograph-Lib</a> (Modified) - AGPL v3</li>
</ul>

<p>I'll be including both the licenses and notices for each project when releasing the binary form, and in the case of modified projects, in the forked project's repository on GitHub.</p>

<p>I usually prefer to release my code under the MIT license when I have the choice. However, because of the AGPL v3 library, I'm wondering: do I have to release my project under AGPL v3 as well, and if so, would my project be compatible with the other project licenses?</p>
","<p>If you agree that the copyleft of the AGPL flows to the calling code in Java (which is effectily ""linking"" with the AGPL library it calls) and because of the special provisions related to modifications of both the LGPL 2.1, 3.0 and AGPL 3.0, then the effective licensing of your combination is some kind of AGPL 3.0, irrespective of your own overall license and as long as your own license is considered as compatible with the AGPL.</p>

<p>All the projects you list are either under:</p>

<ul>
<li><p>an LGPL 2.1 or later or LGPL 3.0 or later, both that you could evolve to an LGPL 3.0 or later. That you can then evolve to a GPL or AGPL 3.0.</p></li>
<li><p>MIT and Apache are considered compatible with the AGPL 3.0 too.</p></li>
</ul>

<p>Furthermore, since you modified some of the deps, one theory is that you have created a work ""based on the libraries"" and therefore their copyleft flows to your own code. the LGPL and AGPL have special terms that apply in these cases.</p>

<p>So in summary:</p>

<ul>
<li><p>at rest your own source code can be under any license you want as long as it is considered compatible with the AGPL. The MIT would work OK there.</p></li>
<li><p>but at runtime, the AGPL terms would apply to your code... meaning users of your code would inherit from its rights and obligations too, including eventual source code redistribution for the whole combo.</p></li>
</ul>

<p>E.g. someone could reuse your own code and remove the AGPL and modified LGPL deps and not be subject to the LGPL/AGPL copyleft. But for a user reusing your code as-is, the  LGPL/AGPL copyleft would be apply to the runtime combo.</p>

<p>If you were to avoid entirely the AGPL-licensed dep (modified or not in this case) and the modification of LGPL-licensed code, then the MIT could stand both at rest and runtime IMHO (the LGPL would still apply to the LGPL-licensed deps of course).</p>
","4931"
"What risks are involved for a publisher, if he decides to release teaching materials as open source?","45","","<p>Teaching materials like textbooks or work sheets can be opened up to free redistribution and free change for everyone. What risks does the publisher face, then deciding to do so? Are there legal consequences?</p>
","<p>When open sourcing material, a commercial publisher faces the economical risk that anyone can offer the same material for a lower price. Another publisher would not have any cost for creating the content, only the cost of production, distribution and marketing (when they distribute electronically, the first two are very low). That would certainly allow them to underbid the original publisher and drive them off the market.</p>

<p>When the publisher has no economical interests, there is no particular risk in open-sourcing their work, except maybe hurting their reputation when the material is bad.</p>

<p>Possible legal consequences should be discussed with a lawyer who is familiar with the jurisdiction where the material is distributed.</p>
","433"
"""Primitive"" GPL:ed OS and proprietary programs and address spaces","44","","<p>I have read about FSF plugin policy</p>

<blockquote>
  <p>If modules are designed to run linked together in a <em>shared address space</em>, that almost surely means combining them into one program.</p>
</blockquote>

<p>(Emphasis mine). Now there are environments where only one address space exists, such as the real-mode operating system FreeDOS. On FreeDOS you can think of each application/driver as a DOS plugin with that definition (only one address space means everything is in that address space). Can I distribute a proprietary game together with FreeDOS? Can I run it? Or will the distinction in that case be something else (in case of DOS, whether or not it is a TSR program)?</p>
","<p>The traditional way to think of a <em>shared address space</em> is when you have a process that isolates memory regions.  This of course would not apply to an OS that does not have a notion of a process. But would not FreeDOS allocate separate memory regions to each of the TSR? Actually the <a href=""http://freedos.sourceforge.net/wiki/index.php/Open_source_software#FreeDOS_and_open_source_software"" rel=""nofollow"">FreeDOS wiki</a> is quite clear and explicit on this topic:</p>

<blockquote>
  <p>Additionally, distributors must share any changes they make under the same open source software license. For example, if someone adds native FAT32 support into the FreeDOS kernel, and shares that new kernel, then those changes also fall under the GNU GPL. However, if they add FAT32 support via an add-on TSR program and simply bundle it with the rest of FreeDOS, then the GNU GPL does not apply to that program.</p>
  
  <p>The idea is to protect open source software and its authors. No one else should be able to take their code and misrepresent it, or worse, turn open source software into proprietary software. </p>
</blockquote>

<p>There is your answer: an application or a TSR running on FreeDOS does not have to be GPL-licensed in general.</p>
","3965"
"Can CC BY 4.0 content be adapted into a CC BY-SA 3.0 work?","44","","<p>If an original work is licensed under <a href=""https://creativecommons.org/licenses/by/4.0/"" rel=""noreferrer"">Creative Commons Attribution 4.0 (CC BY <strong>4.0</strong>)</a>, can an adapted work (i.e. derivative work) be made from it and published under <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""noreferrer"">Creative Commons Attribution 3.0 (CC BY-SA <strong>3.0</strong>)</a>?</p>
","<p><strong>Yes</strong>, because CC-BY 4.0 is a <strong>permissive license</strong>.</p>

<p>Permissive licenses in general are much easier to redistribute, usually all that's required is that you preserve the copyright notice. In CC-BY 4.0's case, you just need to <a href=""https://creativecommons.org/faq/#how-do-i-properly-attribute-material-offered-under-a-creative-commons-license"" rel=""nofollow noreferrer"">provide attribution in one of many ways</a>.</p>

<p>It's why not just CC-BY 4.0, but many permissively-licensed works can be included in proprietary ones.</p>

<p>The one thing you cannot do is take away the attribution requirement, for example by distributing under an even more permissive license, such as CC0.</p>
","5581"
"Delay when downloading with SourceForge and many other sites","44","","<p>When I am downloading a file with SourceForge, and also from many other sites, I'm getting a count down and I am wondering what is the reason?</p>

<p><a href=""https://i.stack.imgur.com/2tmgg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2tmgg.png"" alt=""download delay""></a></p>

<p>I'm not talking about storage sites like rapidgator, etc that are trying to promote their premium services, but free sites like SourceForge.</p>
","<p>Advertising, to pay for the free service.</p>

<p>To the right of the <code>Downloading in....</code> message you will also find <code>Mirror Provided by:</code> and <code>Scanned by:</code>, while I doubt these are paid ads, it would be in return for providing the mirror/scan service, underneath you will find paid ads under the <code>You may like:</code>. Then under that, you have other top projects in the same category so that you may keep looking and download something else, to get more ads.</p>

<p>By making you keep the page open for a few seconds, they have time to display ads that might get your attention and increase the chance of revenue from you clicking an ad.</p>
","6259"
"Do unlicensed commits to a project acquire an open source license?","44","","<p>I have recently created a small project and pushed it to GitHub. I now plan on applying an open-source license. <strong>Once I choose a license and commit it to the project, are the older versions subjected to that license?</strong></p>
","<p>Yes and no.</p>

<p>If you have previously released versions of your software to the public, you generally can't <em>revoke</em> any license you have already released it under (doing so would cause massive issues for anyone who has already made use of the software).</p>

<p>However, as the copyright owner, you retain the exclusive right to <em>re-license</em> (including dual licensing) any version of your software at any time (providing of course you <em>are</em> the sole copyright holder, or that you continue to comply with the licenses of any other software you include).</p>

<hr>

<p>In your case I'm assuming you have not specified any particular license on your project thus far. That means that until now, the project is effectively 'all rights reserved'. Once you apply a license, it applies to the state of the project at the time of that commit. If someone comes along and forks your repository, then reverts to a previous commit, it is technically no longer licensed to them and they cannot use it in any meaningful fashion.</p>

<p>If you wanted to, you could of course just specify that 'any commit is covered by this license', or, you could even include for clarity that 'this license applies only from commit abc123 forward'.</p>

<p>This is a bit of a general answer to a general question, as I'm unclear on your exact intentions, but I'd be happy to clarify further if you want to add more specifics to your question.</p>
","4227"
"How can I convince conventional colleagues to venture out into the open source domain?","44","","<p>How can I convince conventional colleagues to venture out into the open source domain? I have worked in large private companies, many are reluctant to adopt any
open source libraries for any level of service. </p>

<p>I have for years endeavoured to introduce open source libraries as</p>

<ol>
<li>an external modular “package” that provides an array of features</li>
<li>an efficient and up to date numerical computation approach to data </li>
<li>social friendly manner to evolve company's products, services and capabilities</li>
<li>interface to other groups of users who can result in inter-disciplinary collaborations</li>
<li>decentralising control.</li>
</ol>

<p>However, the I have received the following list of negative feedback about open source, some of which is true but delving further into them, it appears to me that some of these points are found in closed source software. The major perogative in closed source was making money through patent royalties, licensing etc.</p>

<ol>
<li>It is insecure and has no guarantees</li>
<li>It is creates confusion in interfacing legacy libraries with open source libraries</li>
<li>It is appallingly ""buggy"" with no support or updates.</li>
<li>it is incompatible with the target hardware</li>
<li>products and services that are free are misleading and cannot be trusted</li>
</ol>
","<p>While I cannot help to convince your colleagues, I can offer some of the answer I give to (more or less) the same objections.</p>

<blockquote>
  <ol>
  <li>It is insecure and has no guarantees</li>
  </ol>
</blockquote>

<p>This is inherently true also for closed source software. No software is secure. The main advantage is, basically, that sometime you can fix an open source software yourself, while you cannot with closed source software. As for the guarantees, well, also closed source software comes without a warranty, if you read the license agreement</p>

<blockquote>
  <ol start=""2"">
  <li>It is creates confusion in interfacing legacy libraries with open source libraries</li>
  </ol>
</blockquote>

<p>That can be true, but I think it is very dependent from the your code, if it is difficult to interface with an external library, the fact that the library is open or closed is irrelevant. </p>

<blockquote>
  <ol start=""3"">
  <li>It is appallingly ""buggy"" with no support or updates.</li>
  </ol>
</blockquote>

<p>Simply false. Or better, it can be that a library after some time is no more actively developed, just as any closed source product. Again, the advantage is that with a open source library you can both take over the development or have a easier transition to anther library since you can fix some critical bug while migrating.</p>

<blockquote>
  <ol start=""4"">
  <li>it is incompatible with the target hardware</li>
  </ol>
</blockquote>

<p>This can be. It is the only point where there is no solution, if you must use that hardware.</p>

<blockquote>
  <ol start=""5"">
  <li>products and services that are free are misleading and cannot be trusted</li>
  </ol>
</blockquote>

<p>So I suppose that none of them use gmail or facebook or twitter or instagram or any other ""free"" service, right ? ;-)</p>

<p>While your colleagues can be right to not blindly trust an open source library, they should not blindly trust any closed source library/product they use in their code and then test boths to validate them anyway.  </p>
","4123"
"If I'm installing a binary, where do I put the license?","44","","<p><a href=""https://github.com/sdg-mit/gitless"" rel=""nofollow noreferrer"">Gitless</a> offers a binary release as well as the source code. Since I've had difficulty with installing from source (one of the dependencies won't build), I downloaded said binary and copied it to <code>/usr/local/bin</code>. However, I'm uncertain - where should I put the <code>LICENSE.md</code> and <code>README.md</code> included with it?</p>

<p>Yes, I know that from a practical point of view nobody's going to check for the presence of a license on open-source software on my personal computer, and the README is redundant in this case since it's mostly install instructions and it's all on the Github. Practicality isn't the point here; I want to do this properly. Where does the license (and any documentation that isn't compiled in as a <code>--help</code>) go for an installed binary? Usually I either install via a package manager or from source, and any manpages and such are thus presumably handled as the developer intended without my input, so I haven't actually run into this before.</p>
","<p>This isn't really relevant for <a href=""https://opensource.stackexchange.com/"">Open Source Stack Exchange</a>, but as far as the installation of documentation on a Unix-style system goes, I'd simply adapt the <a href=""http://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch04s11.html#specificOptions15"" rel=""nofollow noreferrer"">FHS location for documentation</a> to <code>/usr/local</code>: install the documentation in <code>/usr/local/share/doc/gitless</code>.</p>

<p>As <a href=""https://opensource.stackexchange.com/users/50/apsillers""><code>apsillers</code></a> says, <em>you</em> (as a user) don't need to keep a copy of the license along with the binary. It is helpful to keep a copy of the corresponding source archive for future reference though, as a general rule (not particularly for licensing reasons) — you'll need it if you ever want to give a copy to someone, and more importantly, it might come in handy a few years in the future (nothing on the Internet is permanent).</p>
","4778"
"Is it possible to be open source but restrict distribution of compiled binaries?","44","","<p>I've started to consider how I want to license a project of mine, and I want people to be able to read, modify and distribute the source code. However, I also want to be able to monitise the project, and GPL and similar licenses aren't ideal for doing that. My concern is that someone will take my project, and either be able to distribute it for free, or sell it themselves. </p>

<p>I was wondering if there's a way to allow people the benefits of modifying and distributing source code, but disallow them to distribute binary versions, modified or not (meaning that if someone modified the source code, the only form they'd be allowed to distribute it in is as source code, not as a binary). This ideally would allow me to be the exclusive seller/distributor of binary copies/derivatives, but allow anyone to distribute it in the form of source code.</p>

<p>A follow up question: If this sort of licensing is possible, is there a way I could allow specific people/websites rights to the distribution of binaries (for the case where I want to work with a third-party distributor in the future)?</p>
","<p>IANAL/IANYL.  That said, the only halfway house I can think of is the path that Red Hat have taken with access to RHEL.  If you want to get precompiled binaries (of other people's GPL'ed software) from them, you have to sign a contract that says you will not redistribute those binaries.  However, anyone may get the source from them (which, it being some third party's GPL software, they are obliged to provide).  And anyone with that source may build their own binaries from that source, which they may in turn redistribute so long as they do not in the process commit some other offence (eg, trademark infringement) - hence CentOS.</p>

<p>Since you intend to permit recipients of your source to compile it for themselves, and one of the <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">freedoms</a> of free software is the freedom to redistribute copies (with no limitation as to format), you're going to find it hard to stop people from getting your source, compiling it, then distributing the resulting binaries, without making your program non-free.</p>

<p>You can, as RH and Ubuntu do, prevent them from claiming it's your software, possibly by registering a trademark and requiring that that trademark be removed from those binaries.  But I don't think you can go further than that and still be free.</p>
","6078"
"Modifying/Using an open source software to use in my open source application","44","","<p>I am working on creating a open source software that will be hosted at github. In that software I would like to use another open source component available at codeplex under Ms-Pl license. My questions are:</p>

<ul>
<li>Do I need to contact the author of that component at codeplex to use it?</li>
<li>I will have to make some changes in original component to make it compatible with my application. Am I allowed to do that?</li>
</ul>
","<blockquote>
  <p>Do I need to contact the author of that component at codeplex to use it?</p>
</blockquote>

<p>Nope. This can be a nice thing to do, but not required.</p>

<blockquote>
  <p>I will have to make some changes in original component to make it compatible with my application. Am I allowed to do that?</p>
</blockquote>

<p>Yes. If the license allows it (all open source definition ""compliant"" licenses allow it), you are allowed to do it.
The MsPL is a fairly permissive license as you can see <a href=""https://enterprise.dejacode.com/license_library/Demo/ms-pl/#license-requirements"" rel=""nofollow"">here</a> with rather simple and readable terms.</p>
","4080"
"Use Apache 2.0 license or AGPLv3 licensed Software","44","","<ol>
<li><p>I want to sell a custom piece of Hardware with my own company's name with an Ubuntu Server 16.0.4 LTS on it. Is that allowed?</p></li>
<li><p>I want to run on this server an Apache 2.0 licensed or AGPLv3 licensed software and I want to customize the GUI of that software and change the logo of the software. Is that allowed?</p></li>
<li><p>I want to give two years warranty on that hardware. Is that allowed?</p></li>
</ol>
","<blockquote>
  <p>I want to sell a custom piece of Hardware with my own company's name with an Ubuntu Server 16.0.4 LTS on it. Is that allowed?</p>
</blockquote>

<p>In general yes, but Ubuntu® has <a href=""https://www.ubuntu.com/legal/terms-and-policies/intellectual-property-policy"" rel=""nofollow noreferrer"">specific branding guidelines</a> and in some case you may need some additional OEM licensing agreement from them.</p>

<blockquote>
  <p>I want to run on this server an Apache 2.0 licensed or AGPLv3 licensed software and I want to customize the GUI of that software and change the logo of the software. Is that allowed?</p>
</blockquote>

<p>As MadHatter mentioned in a comment, yes this is allowed "" provided you honour the obligations that the licences of the software involved place upon you."" This is even IMHO one of the tenets of FLOSS: having access to the source code and being able to modify software.</p>

<p>You will have of meet the license requirements and AGPL and Apache are quite different. In the case of AGPL-licensed, this may be considered a modification and this has specific implications in terms of your obligations and which conditions of the license are triggered. </p>

<blockquote>
  <p>I want to give two years warranty on that hardware. Is that allowed?</p>
</blockquote>

<p>The warranty you provide on hardware is your problem and your choice and has nothing to do with the software. You may also provide warranty on the software, but there since mots FLOSS-licensed code disclaims all warranties, you would have to bear the warranty burden alone.</p>

<blockquote>
  <p>i have no clue at all </p>
</blockquote>

<p>That's OK... there are excellent resources on this QA site to help you! I would also strongly suggest that once you are familiar with the gist of open source licensing you contact a lawyer to help you make the right choices.</p>
","5416"
"Will my app be copylefted if it uses the webservice of a GPL server?","44","","<p>I'm planning to code a mobile app that uses an opensource server liscenced in GPL. So my app will make webservices call to that server.</p>

<p>Will I be obliged to publish the code of my mobile application?</p>
","<p>Not at all. Calling a web service will unlikely ever be considered as either copying or creating some derivative work of the web service you call. This is contrast if you were to run and call GPL-licensed code in the same process from your mobile application. </p>
","5257"
"How does GPL work for articles on a website?","43","","<p>Suppose I own a website and 3 people are writing articles on the site including myself. My question is whether I can use a GPL license for the articles I write?</p>

<p>What happens if I write an article and I state that it is licensed under GPL for example? Does this mean that the site itself or the other articles become licensed under GPL? How does this work in this kind of environment?</p>
","<p>As others have said, the <a href=""https://creativecommons.org/"" rel=""nofollow noreferrer"">Creative Commons</a> licences are generally thought to be better for non-code forms of expression, because the distinction between source and executable form (which the GPL uses a lot) doesn't exist for simple written materials.  Before the CC licences were created, the FSF made the <a href=""https://www.gnu.org/licenses/fdl.html"" rel=""nofollow noreferrer"">GNU Free Documentation Licence</a> specifically to cover written content (some of my earliest photos submitted to Wikipedia were submitted under the GFDL).  Before that (2000), people used to use the GPL for non-code content all the time, because there were no alternatives.  It wasn't great, but I'm not aware that it ever led to disaster.</p>

<blockquote>
  <p>can [I] use a GPL license for the articles I write?</p>
</blockquote>

<p>First and foremost, you can use any licence you like on content you create <em>de novo</em>.
That said, there is no bar on using the GNU GPL for your non-code material, should you wish to, but <a href=""https://creativecommons.org/licenses/by-sa/4.0/"" rel=""nofollow noreferrer"">CC-BY-SA</a> is designed to achieve the same ends in a less confusing manner.  The FSF regard CC-BY-SA-4 as <a href=""https://www.gnu.org/licenses/license-list.html#ccbysa"" rel=""nofollow noreferrer"">one-way compatible</a> with the GPL3, so your choice wouldn't prevent people from later reusing your content as part of a GPL3-covered work.</p>

<blockquote>
  <p>What happens if I write an article and I state that it is licensed under GPL for example?</p>
</blockquote>

<p>It means people can use, copy, modify, and distribute modified copies, of your material, subject to the conditions laid out in the GPL.</p>

<blockquote>
  <p>Does this mean that the site itself or the other articles become licensed under GPL?</p>
</blockquote>

<p>Generally, no, it doesn't.  This is one of the really misunderstood things about the strong copyleft licences, and leads people to use strong words like <em>viral</em> to describe them.  <em>Au fond</em>, strong copyleft terms on content means that if you use that content as part of a work you're creating <em>in a way that makes your work a derivative work of the content</em>, you must distribute your work under those strong copyleft terms.</p>

<p>Works that happen to share a common distribution platform are not derivatives of each other, so the question doesn't arise.  The code that forms the distribution platform's engine is not a derivative of the content it distributes, so the question doesn't arise.</p>
","6392"
"How to release code that depends on an unmerged branch","43","","<p>I am outlining the dependencies in the documentation for a small open source package I would like to release. My package depends on an unmerged branch of scipy that has some special functions that I need. To install it myself, I just cloned this unmerged branch and installed it from source (everything works fine). </p>

<p>I am just asking about the proper etiquette for this situation. I want to give proper credit to this person who added these unmerged changes. I am new to open source development so any advice is helpful.</p>
","<p>In order for your release to remain stable, you're going to need to fork that unmerged branch yourself. Otherwise, that branch may disappear, rendering your package unusable. </p>

<p>As you mentioned in the comments, it would be best if you kept an eye on that branch so you can update your documentation and kill your fork if &amp; when it gets mainlined. </p>
","5145"
"I am about to put an Apache License on my project. Can I change it to another license later without asking contributors?","43","","<p>The question is in the title. </p>

<p>Additional question for the case if I do have to ask the contributors for approval: </p>

<p>As the owner of my project, what can I do in advance to get the exclusive rights to change the license without asking all of the contributors for approval in case when I would want to change the license in the future?</p>
","<p>The only entity that can change the license of a work is the copyright holder. Hence, you would need to be the copyright holder of the entire work in order to change its license. This can be accomplished by getting any contributors to explicitly assign the copyright in their contributions to you.</p>

<p>However... unless you have a lot of standing in the community, the chance of most contributors doing that is pretty much zero - once copyright has been assigned to you, there's nothing stopping you from taking the code, closing it off and stopping any distribution of any future modifications you make. What value are you offering that means that I or anyone else contributing to your project take that risk?</p>
","6401"
"Can I sell charge a code that link/use a library released as Attribution-ShareAlike 4.0 International CC BY-SA 4.0?","42","","<p>I wrote a code that use a library release under CC BY-SA 4.0 (Attribution-ShareAlike 4.0 International). </p>

<p>As far as I understand, if I cite them and release the source code as well with my code I can charge money for my work. Am I right?</p>
","<p>You may charge money for your software, though you must distribute your software under CC BY-SA 4.0 terms to anyone who buys it. The Creative Commons Non-Commercial (NC) licenses prohibit commercial use or sale, but CC BY-SA is not an NC license (vs. BY-NC or BY-NC-SA, which are NC licenses).</p>

<p>However, please note that <a href=""https://opensource.stackexchange.com/questions/1717/why-is-cc-by-sa-discouraged-for-code"">Creative Commons licenses are discouraged for code</a>. I understand that you did not choose the CC BY-SA license on the library, but you may license your work as a whole under the GPLv3, because <a href=""https://www.gnu.org/licenses/license-list.en.html#ccbysa"" rel=""nofollow noreferrer"">CC BY-SA 4.0 is one-way compatible into GPLv3</a>:</p>

<blockquote>
  <p>CC BY-SA 4.0 is one-way compatible with the GNU GPL version 3: this means you may license your modified versions of CC BY-SA 4.0 materials under GNU GPL version 3, but you may not relicense GPL 3 licensed works under CC BY-SA 4.0.</p>
</blockquote>

<p>The GPLv3 is a much more suitable license for software, so if you are comfortable doing so, please license your finished product under the GPL and share the source code.</p>

<p>However, note that if you choose to keep the CC BY-SA license, you do not need to distribute the source code of your application. Strictly speaking, in order to comply with the BY-SA terms on the library, you can choose to distribute only the binaries under CC BY-SA 4.0 and choose not to distribute the source code. This is exactly one reason why <a href=""https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software"" rel=""nofollow noreferrer"">Creative Commons expressly discourages the use of CC BY-SA (or virtually any Creative Commons license) on software</a>.</p>
","6018"
"How do companies spot when a person is violating their terms and conditions?","42","","<p>I'm a developer (startup) and I'm working in a few healthcare projects, I prefer <a href=""https://www.highcharts.com/"" rel=""nofollow noreferrer"">Highcharts</a> for data visualization.</p>

<p>My questions are as follows:</p>

<p><strong>1.</strong> Why does one purchase a license when one can use Highcharts for free?</p>

<p><strong>2.</strong> I will be one among 1,000,000 people using Highcharts, so how does Highcharts (company) spot me as a person violating their laws/terms of service?</p>
","<p>There is <a href=""https://shop.highsoft.com/faq#Non-Commercial-0"" rel=""nofollow noreferrer"">a free version of Highcharts</a>, but it primarily pertains to personal (non-commercial) use.  The most obvious answer to your first question is: <strong>because it's the law</strong>.  Highcharts licenses their software for certain entities to use, so without obtaining the necessary license, you would be in violation of the applicable law.  (I'm not a lawyer, so don't take this as legal advice.)</p>

<p>As for your second question, <em>if</em> you used their software without the correct license, they would probably only find out if someone informed them.  The license requires neither a key nor activation, so there's no real registering of your usage of it.</p>

<p>I would strongly recommend purchasing the necessary license, rather than trying to use the software illegally for free.  The ""High-five License"" is a very affordable option, but being a startup, if you <a href=""https://shop.highsoft.com/contact"" rel=""nofollow noreferrer"">contact their sales team</a>, they may be able to work with you on pricing.</p>
","5749"
"How do I exclude some items from an Open Source software project (such as resource images) even though they are required by the project?","42","","<p>I am just about to release a few software projects under the Apache Open Source License 2.0.  </p>

<p>While creating the projects I have purchased the legal rights to royalty-free images which I use in the project.  A specific example is the image I use as an icon.</p>

<p>However, the original license doesn't allow others to use those images (for derivative products) as they like, since the future users haven't paid the royalty.</p>

<p>Am I allowed to include the royalty-free images along with the Open Source project on GitHub (for example)?</p>

<p>Is there a proper way to indicate that certain resources (images, sound files, etc) are not included in the Open Source code itself?</p>

<p>I know many of these answers may require exact detailed information.  I'm just attempting to get a general idea.</p>
","<blockquote>
  <p>Am I allowed to include the royalty-free images along with the Open Source project on GitHub (for example)?</p>
</blockquote>

<p>This depends on the exact details of the license under which you can use the images and in particular if the license terms are automatically transferred to someone who obtains a copy of the image.<br>
If the license is not transferable, then you should not put the images in a publicly accessible repository.</p>

<hr>

<p>If you put the images in a publicly accessible repository, then you should also put a text file in there with the license of the images and you should make it clear in the documentation that the code and the images live under different licenses.</p>

<p>For example, you could place two LICENSE files in the root folder of your repository:</p>

<ul>
<li><p>LICENSE.md</p>

<pre><code>This license applies only to the code in this repository. 
Images and other assets are explicitly excluded.

&lt;license text for your code license...&gt;
</code></pre></li>
<li><p>LICENSE-images.md</p>

<pre><code>This license applies only to the images in this repository. 

&lt;license text for your image files...&gt;
</code></pre></li>
</ul>
","5884"
"License not available","42","","<p>Let's say I am reading an article published under the writers own license. </p>

<p>What do I do if the license is not available? For example the link is broken.</p>

<p>What rules do I follow?</p>
","<p>You can always try searching the license. If the text at the bottom of the article states what license it's under (which it should do), search that. If there are multiple results that are similar if not identical, you should be able to assume that's the correct one. <em>Please note: this method is not legally sound. Only do this for things you're very unlikely to get sued for.</em></p>

<p>Your only alternative is to ask the author: contact them, tell them the link's broken, and ask them to reply with a link to the correct license. This <em>is</em> legally sound, since the link comes directly from the author.</p>

<p>If nothing works, you must assume the work has no license and therefore is totally copyrighted. You can't use it.</p>
","367"
"Licensing software that should be free for using with free RDBMS","42","","<p>We want to make our software free for using with free RDBMS (and commercial for using with commercial RDBMS). What is the best way to do this?</p>

<p>We haven't found any public well-known license for that, so, the way I see it, we have 2 options:
1. Write our own license (which is not good because everyone should read it, and not everyone would do that).
2. Use some free license without right to modify software (and not including support of commercial RDBC in the distribution package under that license). Also we want to make our software open-source in time. But the problem is that we also have not found any public well-known for that (i.e. free or free open-source license without (!) right of modification).</p>

<p>So maybe someone can suggest something? Maybe we are missing something simple in that situation?</p>
","<p>You will find no free licence that doesn't permit modifications: two of <a href=""https://www.gnu.org/philosophy/free-sw.html"" rel=""nofollow noreferrer"">the four freedoms</a> are the freedom to change the program, and the freedom to distribute modified copies; if the users can't do that, the software is not free.  Restrictions on commercial usage are also non-free, as the first freedom is to be able to run the program for any purpose.</p>

<p>Creative Commons' <a href=""https://creativecommons.org/licenses/by-nc-nd/4.0/"" rel=""nofollow noreferrer"">BY-NC-ND</a> licence mostly fills your needs, if I understand them, but even CC notes <em>this is not a free culture license</em>, so you will face pushback if you try to describe your software as free when it is so licensed.  Also, the CC licences are not thought to be well-suited to software, and your definition of ""non-commercial"" (zero-cost when used with free RDBMSs, but non-zero-cost when used with commercial RDBMSs) doesn't exactly match CC's definition of ""non-commercial"".</p>

<p>You may be reduced to drafting your own licence, which (as you note) isn't a good idea.  I might suggest that you rethink what you wish to permit, or just make a piece of commercial software, and release it as such.</p>
","5623"
"Maven jar-with-dependencies - any violation of distribution license?","42","","<p>I have a Java application that uses some Apache common libraries (Apache 2.0 license). </p>

<p>I wanted to distribute it as a single fat jar (maven builds a single jar with dependencies packaged in a single jar) with my classes along with the OSS classes. </p>

<p>Are there any issues in doing so?</p>
","<p>As long as you preserve the NOTICE file(s) when distributing your binary, what you're doing is OK per the Apache License.</p>

<p>For instance, <a href=""https://github.com/apache/commons-lang/blob/master/NOTICE.txt"" rel=""nofollow noreferrer"">this is the NOTICE file</a> for the current Commons Lang.  You would need to ensure its contents are available to the consumer.</p>
","6068"
"Can a specification, for example ISA, be under open-source license?","41","","<p>I and a few others are designing yet another open instruction set architecture(ISA). Open ISA is thought by us as ""free to see, and implement(even when selling it)"". But we want to make this specification more than just ""free"", able to co-develop next versions in true open-source fashion(or just grant companies to make their own modified sets).</p>

<p>So we want to keep this under zlib license, highly permissive but still making the second developers to give credit for original developers.
But is it possible to make just specification like ISA under a license?</p>
","<p>Yes, because a specification is just a text document and it is protected by copyright under as a literary work (like software). However, the zlib license is not appropriate for works which are not software (because it says ""this software""). You should rather use a license which was specifically designed for non-software works such as CC-BY.</p>
","5346"
"Can I edit software under GNU Lesser GPL for my paid app","41","","<p>I'm building a chat bot based on Alice AIML set providing here: <a href=""https://code.google.com/archive/p/aiml-en-us-foundation-alice/"" rel=""nofollow noreferrer"">https://code.google.com/archive/p/aiml-en-us-foundation-alice/</a></p>

<p>I'm planning to edit this AIML set and expand it by adding new phrases.</p>

<p>As the license of this AIML set is GNU Lesser GPL, which is, from what i know, not allowed to edit?</p>

<p>Can I use the edited one(with some new content added) for my paid application.</p>
","<p>You're most certainly allowed to edit it. That's one of the cornerstones of all free and open software. However, you must also make your edited version available as source code under the same terms as the original library. That's one of the cornerstones of copyleft licenses (such as the Lesser GPL). Use the software in a free manner, and in return give any modifications/improvements back to the community.</p>

<p>Since Alice seems to be a library, and assuming that you will use your modified version of it as a library, you can likely license the rest of your application in any way you like. See section 4: <a href=""https://www.gnu.org/licenses/lgpl.html"" rel=""nofollow noreferrer"">https://www.gnu.org/licenses/lgpl.html</a></p>

<p>OSS licenses do not (normally? ever?) restrict you from charging money for the software. But you do sometimes have to provide some or all of the source code for free (and under a particular license) as well.</p>
","4850"
"CC text with copyrighted pictures","41","","<p>I am thinking about publishing a text with pictures where the text and most of the pictures are my own, while some of the pictures are by others. Those others have agreed with the inclusion of their pictures. Ideally, I would like to publish the result under a licence of the CC family.</p>

<p>It is my understanding that to do this, I would need the copyright holders of the different pictures to release there work under the specific CC license. Which I will never obtain.</p>

<p>My alternative plan was to include a copyright statement in the style</p>

<blockquote>
  <p>All text and the pictures where no photographer is indicated are my own work and available under the CC-whatever license. For other pictures all rights belong to the photographer and his permission is required for any use.</p>
</blockquote>

<p>Is this a viable approach or does this approach have dangers that I am ignoring? Is there maybe a better approach to make the result as open as possible? And am I correct that in this scenario the resulting work would be closed and not available under any specific license?</p>
","<p>You cannot publish the whole product under a blanket Creative Commons license, nor under any license that the copyright holders have not agreed with - either explicitly, or via any license that they have released their pictures under.</p>

<p>The problem for you, assuming you wish your work to be re-used, then becomes one of keeping the licensing easy to understand by potential users. Exceptions to a general license need to be clearly signposted, it is not safe for a potential user to have any confusion - in that case anyone who wants to follow copyright rules may just give up on attempting to re-use your content.</p>

<p>What to do depends on the relative usefulness of the text and pictures.</p>

<p>For example, the following variation of your suggestion works if the text is independently useful from the images - e.g. the images are improving the presentation, but not core content. In that case, you can show that by entirely separate copyright statements regarding text and image. E.g.</p>

<blockquote>
  <p>All text (c) ptityeti, released under Creative Commons [blah] license</p>
  
  <p>Images (c) respective original artists, please see individual descriptions.</p>
</blockquote>

<p>As an end user, I would prefer this kind of statement, as it is clear up-front what work I would need to do to use text vs images. It is only different in a minor way form the statement in your question, but by separating concerns clearly, and identifying specific work required to comply with copyright, it sends a clearer message to your target audience (potential re-users).</p>

<p>If you want to be helpful with your own images, then I suggest provide a way to get a list and/or download of all the CC images from your product in a single place. Or maybe even better, a CC version of the product with placeholders for images that you cannot share under CC.</p>
","4922"
"Complex mix of licenses for stand-alone installer, and the softwares it installs","41","","<p>I'm writing an installer for some softwares, and wish to make the installer stand-alone, i.e. everything baked into a single executable.</p>

<p>One of the softwares that are installed has GPL 3, built from un-modified sources. The other softwares have a different license which allows them to be redistributed like this, without the need to make the source-code available.</p>

<p>The installer itself uses the <a href=""http://qt.io/"" rel=""nofollow"">Qt framework</a> licensed under LGPL 3, and has to be statically linked since it will be a stand-alone installer.</p>

<p>Am I correct in thinking that the softwares and the installer are each and all separate issues, and thus that the only things required of me is that I make the installer LGPL 3, and include a written offer of the source-codes of the installer and the GPL 3 software?</p>
","<p>That would almost certainly be correct. The last paragraph of section 5 of the GPLv3 (applicable in this case because the LGPLv3 incorporates the GPLv3 by reference and then modifies it) covers this sort of situation where several works are aggregated without interacting.</p>
","2809"
"How should I mark a source file with GPLv2 as a derivative work?","41","","<p>I want to include a file with GPLv2 license in my project (which is also GPL, so there are no worries there). The file starts with a copyright line, and the license information.</p>

<ol>
<li><p>I'll be making significant modifications to that file, and I imagine I need to indicate that the file has been changed from the original.</p></li>
<li><p>Also as far as I know, the copyright of the code I add to that file will be mine whereas the original code will belong to original author.</p></li>
</ol>

<p>How can I indicate those 2 points above inside the source file?</p>
","<p>I'm not a lawyer, but here is what I believe should be done.</p>

<ol>
<li>Keep the original copyright line (You should keep the original author's copyright since you are claiming that your contributions make a derivative work.)</li>
<li>Keep the license information (It's still GPLv2 since it is a derivative work.)</li>
<li>Mention where the original file was obtained. A URL to a Github repository with a specific revision would be helpful.</li>
<li>Add your copyright information. Remember to include a date in your copyright.</li>
<li>(Optional, but recommended) Give a brief summary of what you added/changed</li>
</ol>

<p>Your understanding of shared copyright over the file is in line with my understanding. The original author owns the copyright over the unmodified (before you change it) file. You will own the copyright over your additions to the file. </p>

<p>In reality, the copyright might be ""shared"" as you make modifications to the original author's work. Say you insert one line of code in an existing function. Sure, you can claim that the one line of code is ""yours"", but it's much harder to prove a single line of code was ""stolen"" without the larger context of the entire function. It's easy for a single line of code to end up in multiple projects without any of the projects having stolen from the others.</p>
","6035"
"How to legally use Jekyll themes by others?","41","","<p>I realize this may be an extremely basic question, but I'm confused about the legality issues that come with starting a blog and using a theme. I want to use the <a href=""https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll"" rel=""nofollow noreferrer"">Clean Blog</a> theme (by BlackrockDigital). This has an <a href=""https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll/blob/master/LICENSE.txt"" rel=""nofollow noreferrer"">MIT license</a> in the repository and a copyright logo on the bottom of the live demo.</p>

<p>If I use this theme, do I have to keep his license or make my own? Can I put my own copyright logo on the bottom, because technically my content is original although the theme isn't? (It's a blog, after all.) Or am I supposed to use their copyright? Lastly, I know an MIT license means that this should be ""free of charge"" -- does that include ads on a page?</p>
","<blockquote>
  <p>If I use this theme, do I have to keep his license or make my own?</p>
</blockquote>

<p>You would have to keep his license -- the MIT license -- for the theme you are using, but that doesn't apply to your content (unless you want to use the MIT license for your content).</p>

<blockquote>
  <p>Can I put my own copyright logo on the bottom, because technically my content is original although the theme isn't?</p>
</blockquote>

<p>Yes. You own the copyright to your content; you just have to include the license to show correct attribution for the theme you are using.</p>

<blockquote>
  <p>Lastly, I know an MIT license means that this should be ""free of charge"" -- does that include ads on a page?</p>
</blockquote>

<p>The MIT license allows for usage of the licensed software free of charge; that does not mean you can't display ads.  It only means you can are licensed to use that theme without having to pay for the right to use it.</p>
","6351"
"How to start committing to small opensource Python modules","41","","<p>To become better Python programmer I decided to start contributing Python FOSS. I would like to start by contributing to smaller modules I use myself and this raises a question. </p>

<p>Should I just fork the project and create a pull request with small explanation what I did and why or should I contact the author first? I am asking because these smaller projects tend to be missing any contribution advice documents or sometimes documents altogether.   </p>
","<p>If your goal is to contribute something back, then I would likely use this approach:</p>

<ol>
<li>submit a ticket with a feature request or bug</li>
<li>then mention that you intend to work on this and ask for advice</li>
<li>if available, contact the author(s) on IRC or a mailing list to further discuss your approach</li>
<li>work out a patch and eventually submit a pull request referencing the key points of the discussions above (and at least a #ticket number)</li>
</ol>
","4737"
"LGPL-licensed code reuse in MIT-licensed project","41","","<p>I have an MIT-licensed (in plans, currently it's not published) project. And I've found an implementation of the required algorithm in an <a href=""https://github.com/srdja/Collections-C/blob/master/src/list.c#L1821"" rel=""nofollow noreferrer"">LGPL-licensed project</a>. Am I allowed to include that code in my project? And if so, how exactly do I state that code is copied from that file? </p>
","<p>IANAL/IANYL.  That said, it seems to me that <strong>yes, you may</strong>, provided you conform to the <a href=""https://www.gnu.org/licenses/lgpl.html"" rel=""nofollow noreferrer"">GNU LGPL</a>'s obligations.</p>

<p>In brief those seem to me to be</p>

<ul>
<li><p>That you license the modified LGPL work under LGPL (or GPL3, but that would interfere with your desire to distribute the rest of the work under an MIT licence)</p></li>
<li><p>That you include copies of the GPL and the LGPL with the work</p></li>
</ul>

<p>The other obligations seem automatically fulfilled by your distributing the rest of the work as source.  The easiest way to handle the code and its copying seems to me to be to keep all the LGPL-derived code in separate source file(s), which clearly state at the top the original authors' and your copyrights, and that the files are licensed under LGPL.</p>

<p>If your code as written displays any kind of copyright notice at runtime, you must also </p>

<blockquote>
  <p>include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.</p>
</blockquote>

<p>I note in passing that one of the main ideas of distributing something under an MIT licence is to permit later use in proprietary software.  In the case of your project, such later use will be made much more difficult by the presence of LGPL'ed content (it's possible, but complying with the LGPL gets more onerous when there's no general source distribution).  This makes the choice of MIT a bit perplexing; do consider, however briefly, distributing your project under GPL3 instead, as you could then relicence the LGPL-derived content under GPL3 (LGPL s2b) and the whole project would be under a single licence.</p>

<p>If the amount of code you're taking is too small to be independently copyrightable, you may be able simply to reuse it.  I would advise getting a real legal opinion before you do that.</p>
","6406"
"Nativescript Licence documentation","41","","<p>If I use NativeScript in my project, what licence agreement and documentation should I use and include?</p>

<p>The question is, I'm using an open source tool to create mobile apps. Should I include the Apache licence? This was always confusing to me. It's not very clear that I have to include C# licence related documentation if I use it in my projects.</p>
","<p>From the <a href=""https://www.nativescript.org/faq#how-is-nativescript-licensed?"" rel=""nofollow noreferrer"">NativeScript FAQ page</a> (which was in the first Google search result) :</p>

<blockquote>
  <p>The core of <a href=""https://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">NativeScript is licensed under the Apache 2.0 software license</a>. Basically, you can do what you like with the software, <a href=""https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)"" rel=""nofollow noreferrer"">as long as you include the required notices</a>. This permissive license contains a patent license from the contributors of the code and is very business friendly.</p>
</blockquote>

<p>I am not a lawyer, but I think you should include:</p>

<ol>
<li>Any copyright information from the creators of NativeScript (Examples: ""Copyright 2017 Ty Coon"", ""Copyright 2005 Mo Nopoly"")</li>
<li>The full text of the Apache 2.0 license (<a href=""https://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">https://www.apache.org/licenses/LICENSE-2.0</a>)</li>
<li>List any modifications you made in the files. Adding a comment header to every file that you modify might be appropriate.</li>
<li>A NOTICE file with any additional attributions (Example: <a href=""https://www.apache.org/licenses/example-NOTICE.txt"" rel=""nofollow noreferrer"">https://www.apache.org/licenses/example-NOTICE.txt</a>)</li>
</ol>
","5747"
"Use of a CC BY-NC-SA licensed LaTeX CV template","41","","<p>Is it permissible to use a LaTeX template for writing a Curriculum Vitae (CV)/résumé, licensed under the CC BY-NC-SA, in order to gain paid employment?</p>

<p>Examples of such templates can be found, for example, <a href=""http://www.latextemplates.com/cat/curricula-vitae"">here</a>. (Some of the templates there occasionally seem to engage under dubious licensing practices, like reusing resources under incompatible licenses, but that's out of scope for this question.)</p>

<p>Distributing the CV would presumably be considered as the sharing of adapted material, which according to <a href=""https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode#s2a1B"">§2a1B</a> is allowed for ""NonCommercial purposes only"". §1k states that ""NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation"". Arguably, aiming to obtain a paid job is intended towards commercial advantage, so it would run afoul of this condition.</p>

<p>The principal counterargument is that the intention of the authors was evidently not to prevent other people from using the templates (even applying for a paying job at a charity would not be permitted, leaving only a very small range of possible uses). However, the original intention does not necessarily mean much from a legal point of view, even if it makes it exceedingly unlikely that in actual fact one would be sued for this.</p>
","<p>As you point out, it is not entirely clear if a CV would be NON-COMMERCIAL in this case. I would tend to think that the intent of the author of this template is to prohibit commercial copycats of the web site templates on another template web site but this is not made clear on the <a href=""http://www.latextemplates.com/about"" rel=""nofollow noreferrer"">web site</a>.</p>

<blockquote>
  <p>Rather, this website is designed to make LaTeX easy for the beginner as well as for the expert by providing heavily commented, easy to understand, templates for a diversity of document types. It is my hope that this website will decrease frustration, increase the use of LaTeX and provide a generally useful service to all who are interested.</p>
</blockquote>

<p>Now in earnest, it is not clear either if applying a LaTeX template is making the generated document subject to the license of the template if you are NOT redistributing the template itself but only using it to produce a document based on your content (e.g your life redux in a CV).</p>

<p>For instance one moderator of the site (presumably the author?) provides <a href=""http://latex-community.org/forum/viewtopic.php?p=95583#p95583"" rel=""nofollow noreferrer"">this comment</a>:</p>

<blockquote>
  <p>If you give away the sources of your CV, i.e. the tex files, you have to include the license.
  Your final output, generated with the plasmati style, is yours and yours alone. No need to mention the template.</p>
  
  <p>Licensing for templates is quite a mess. </p>
</blockquote>

<p>This could be treated as a rider to the licensing making it clear that the CV would be yours, but this is a very specific comment on one template in a forum. A more comprehensive clarification would be better IMHO.</p>

<p>That the same web page has a contact email and an IRC channel at #LaTeXTemplates on irc.latextemplates.com</p>

<p>If I were you, I would contact the author by email or IRC to ask permission and suggest they make it clear on their web site that using these templates in a commercial context (such as CV or else) other than to publish a template web site is not an issue under the CC-BY-NC-SA licensing and would not make the resulting document subject to the CC-BY-NC-SA.  </p>

<p>You may also need to contact the actual original author of your template too as it is not clear who exactly has actual rights between the site owner and the original author.</p>

<p>Good luck!</p>
","5018"
"Using a GPL header in a closed source program?","41","","<p>I've recently noticed that some of the userapi linux kernel headers are declared under the GPL. However, I'm pretty sure that you can include linux uapi headers in your code without your project inheriting the GPL.</p>

<p>See for example <a href=""https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h"" rel=""nofollow noreferrer"">https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h</a>.</p>

<p>Is it OK for a project to have #include for GPL headers without becoming GPL ? The header in question doesn't contain any ""code"" so to say, only defines, typedefs and structs. So there is no actual bytecode associated with this header that would be shipped in the final project.</p>
","<p>Under normal circumstances, using a header file from a GPL-licensed project in your own project means that your code is considered to be a ""derived work"" of the GPL-licensed code and that you must use a GPL-compatible license when distributing your project, because the two projects are not communicating ""at arm's length"".</p>

<p>However, in the case of the Linux kernel, the <code>COPYING</code> file with the license contains an important addition:</p>

<blockquote>
  <p>NOTE! This copyright does <em>not</em> cover user programs that use kernel
   services by normal system calls - this is merely considered normal use
  of the kernel, and does <em>not</em> fall under the heading of ""derived work"".</p>
</blockquote>

<p>This makes it clear that, as an exception to the normal GPL rules, using kernel facilities in a user application is not intended to make the terms of the GPL extend to that application. This means that applications written to work on Linux can still be closed-source.</p>
","6452"
"CC Licence and Automatically Retrieving Linked Content from a Source","40","","<p>I was reading <a href=""https://communitybuilding.stackexchange.com/questions/947/how-can-i-word-a-user-licensing-doc-so-a-user-cannot-justify-deleting-all-their"">this topic</a> about users posting content to a community and not having the right to ""take it down"" later on. It got me to thinking about communities which might have a system to automatically pull in, say, images which are included in a post but hosted externally. The main reason the community might do this would be to prevent link rot and prevent holes in the discussion should the external copy of the image go away at some point in the future.</p>

<p>For example, a forum has a license grant that states that anything posted to the site is effectively licensed to the community, etc. So if someone uploads a photo, that photo is licensed to the site. </p>

<p>Would that same grant also apply to external images shown (not just linked to) in a post that are physically hosted elsewhere? Say, images the user owns which might be hosted in their flickr account, etc. </p>

<p>So could the community, in that instance, rightfully retrieve a copy of that externally hosted image and store it on the community's servers, and be protected against the user requesting deletion down the road, in the same way as if the user physically uploaded the file initially?</p>
","<p>A post licensed to some forum that includes a link does not give the forum an implied license for the target of the link.</p>

<p>This is obviously the case for links to images or documents that are not owned by the author of the post. I can include links to all sorts of stuff, but they don't come with an implied license; I'm not even able to grant a license for them.</p>

<p>This doesn't change for links to things that are in fact owned by you. There is generally no, or not a large difference between posting links to some content, and ""deep linking"" the image where your browser displays the image hosted elsewhere from a forum web page. See, for example, <a href=""https://en.wikipedia.org/wiki/Perfect_10,_Inc._v._Amazon.com,_Inc."" rel=""nofollow"">Perfect 10, Inc. v. Amazon.com, Inc.</a></p>

<p>There is probably some way to concoct terms of use that explicitly include that any material owned by you, and linked to from a forum post grants some license to the forum (you can't effectively license anything to ""the community"" since ""the community"" is not a legal entity.)</p>

<p>Of course, if the linked work is under an open source license, you are already free to re-use it, as this is guaranteed under the open source definition.</p>
","2025"
"Common licencing types","40","","<p>I'm an independent software developer and thus have little to no knowledge about licenses or general software law.</p>

<p><strong>Could someone list the most common licenses and what they mean in layman's therms.</strong></p>
","<p>Try this site <a href=""http://oss-watch.ac.uk/apps/licdiff/"" rel=""nofollow noreferrer"">http://oss-watch.ac.uk/apps/licdiff/</a> It's a Licence differentiator of various Free &amp; Open source licenses.</p>

<p>or try this for the difference between most commonly used Open source licenses.
 <a href=""http://choosealicense.com/licenses/"" rel=""nofollow noreferrer"">http://choosealicense.com/licenses/</a></p>
","4777"
"How am I supposed to distribute the file licensed under this license?","40","","<p>I'm making a game in that requires the CSFML libraries. I've downloaded the libraries from: <a href=""http://dsfml.com/downloads.html"" rel=""nofollow"">http://dsfml.com/downloads.html</a>  </p>

<p>I can't understand these things, the license doesn't explain much:</p>

<ol>
<li>I only want to distribute the files in the lib folder, can I? Not the whole package.</li>
<li>If I can, where do I put the license.txt? Given that the files will be put in the <code>/lib</code> directory in the FileSystem.</li>
</ol>

<p>P.S: I downloaded the 32 bit Linux package from that page.</p>
","<p>The CSFML library is <a href=""https://github.com/Jebbs/DSFML/blob/master/License.txt"" rel=""nofollow"">licensed under</a> the <a href=""https://enterprise.dejacode.com/license_library/Demo/zlib/#license-text"" rel=""nofollow"">ZLIB license</a></p>

<p>When redistributing binaries, the zlib requirements are ... minimal. In fact there are no requirements in that case beside not claiming that I wrote this library.</p>

<p>Therefore I do not need to do anything special and in particular I do not need to include the license text in a binary-only redistribution. The zlib license has no such requirement for binaries.</p>

<p>However, the right thing do is to meet also the suggested requirements:</p>

<blockquote>
  <p>If you use this software in a product, an acknowledgement in the product documentation would be appreciated but is not required. </p>
</blockquote>

<p>Therefore I would include in my product documentation and/or credits page some acknowledgement for that library. Since I want to do the right thing and I may also include several other open source libraries in my product, I would also include the [copyright notice and license text<a href=""https://github.com/Jebbs/DSFML/blob/master/License.txt"" rel=""nofollow"">1</a> for good measure even if this not strictly required here: this way I would just treat this as the other libraries and include all the license and notice texts.</p>
","4613"
"How to manage opensource and customization","40","","<p>I'm creating a webframework hosted on a public Github repository.<br>
The same framework is hosted on a server with some customization.</p>

<p><strong>So how can I manage those two states developement and production?</strong></p>

<p>My current approach is pretty expensive: On the Server I pull the code from the repo, get merge conflicts because of the customization, have to merge it, and sometimes have to add my customization again.<br>
I don't want my customization to be public, so a different branch for production is no option.</p>
","<p>Try reconsidering the architecture of your application. Can you modify the open framework to allow you to implement the private changes using a plugin or theme?</p>

<p>Many open source applications take advantage of the flexibility provided by plugins and themes. The Atom text editor and the Wordpress website framework are two examples of open source software with strong plugin and theme communities. Wordpress demonstrates how closed features can be built to extend an open framework.</p>

<p>You can step beyond plugins and themes by introducing an API or breaking a large open source project into a collection of smaller projects. The Linux and UNIX communities often favor smaller, focused tools.</p>

<p>Don't forget to check the licenses of the open source frameworks you choose and make sure they allow the flexibility you need.</p>
","2442"
"Using a GNU licensed software to make new software to be sold","40","","<p>I have been researching the GNU and GPL licenses and I can't find a straight answer to a question I have. If you are going to use a Programming IDE that is distributed under a GNU GPL does the software made have to be covered under the the GNU  GPL licenses or can it be sold? </p>

<p>Please note that this is not an improved version of the IDE this is a new software sold to a different target market.</p>
","<p>From the <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#CanIUseGPLToolsForNF"" rel=""nofollow"">Free Software Foundation's GPL FAQ</a>:</p>

<blockquote>
  <h3>Can I use GPL-covered editors such as GNU Emacs to develop non-free programs? Can I use GPL-covered tools such as GCC to compile them?</h3>
  
  <p>Yes, because the copyright on the editors and tools does not cover the code you write. Using them does not place any restrictions, legally, on the license you use for your code.</p>
  
  <p>Some programs copy parts of themselves into the output for technical reasons—for example, Bison copies a standard parser program into its output file. In such cases, the copied text in the output is covered by the same license that covers it in the source code. Meanwhile, the part of the output which is derived from the program's input inherits the copyright status of the input.</p>
  
  <p>As it happens, Bison can also be used to develop non-free programs. This is because we decided to explicitly permit the use of the Bison standard parser program in Bison output files without restriction. We made the decision because there were other tools comparable to Bison which already permitted use for non-free programs.</p>
</blockquote>
","4270"
"Where to find pictures for Wikipedia?","40","","<p>For example is there any servers with photos with Creative Commons licence? And not only some general photos but, with concrete objects (people, buildings, pictures etc.). 
And if I find a picture on a site (for example search in Google) how can I find its licence? I am interested especially in photos or famous people, but not only that.</p>

<p>I hope this is not duplicate, there is some similar questions but hopefully not the same.</p>
","<p>If not stated differently, websites contents (this including photos) must be considered copyrighted by the owner/maintainer of the website and you can't use them straight away.</p>

<p>It is always a good (and nice) thing to ask the owner/maintainer for licence term and/or permission to share that photo on Wikipedia.</p>

<p>Google allows to filter the results based on the licence (append to the URL the following <code>&amp;tbs=sur:f</code> ) but also stated ""Images may be subject to copyright."" so you shouldn't exclusively rely on it.</p>
","4889"
"Are there maven-plugins with licenses that prevent their use in open source projects?","39","","<p>Are there maven-plugins that should not be used in opensource projects?</p>

<ul>
<li>Because their license restricts that</li>
<li>Because they add code</li>
</ul>

<p>...</p>

<p>In other words: Is it save to ignore the plugins when looking for license restrictions?</p>

<p>Update:
bmargulies's answer is what I feared but:</p>

<p>Q: Is there an actual plugin that I could not use in a non-open project distributed to customers ?</p>
","<p>It's not really possible to answer the question about the existence of a maven plugin, somewhere, in some repository. Not all Maven plugins are even on Maven central.</p>

<p>A maven plugin could, certainly, plop a lump of IP into your project with a license that is incompatible with your needs. And no protocol in Maven forces a plugin to announce this in any obvious way.</p>

<p>In the absolute worst case, some jerk could hide some proprietary content in a plugin and deposit it <em>in binary</em> in your output, and then later come around and claim that what you've built is a derived work and you owe, you owe.</p>

<p>At the end of the day, you're never <em>completely</em> safe in the land of open source unless you, well, <em>read the source</em>. If you are going to use a Maven plugin that is not from one of the mainstream sources, you would be well-advised to take a gander at its source even if you aren't worried about some sort of unpleasant IP implant.</p>

<p>There's a sort of trivial example in the form of the maven-archetype-plugin. It generates source code from templates licensed under the terms of the Apache License. Someone could claim that this makes the generated code into a derived work of the template, and subject to the terms of the AL. Or, worse, someone could push a template with some troublesome license, and nothing in the archetype plugin warns you when you select an archetype as to what the licensing is.</p>
","4087"
"Does the GPL/RPL Apply to me as Well?","39","","<p>I want to create a commercial application, but I want to make a significant portion of my back-end open source. It applies some really interesting math that I want people to learn from, but I don't want others to take that back-end code and start selling it. As a result, I'd like to license that back-end code under either the GPL or RPL (I'm not sure which one yet). </p>

<p>These licenses prevent people from distributing software using code licensed other these licenses without making its code open-source. I don't want to make my entire program open-source, just that part of it. </p>

<p>Does licensing part of my own software force me to release the rest of my software under the GPL/RPL? If it does, will anyone actually enforce it?</p>
","<p>You wrote:</p>

<blockquote>
  <p>These licenses prevent people from commercially distributing software using code licensed other these licenses without making its code open-source. I don't want to make my entire program open-source, just that part of it. </p>
</blockquote>

<p>There is no commercial redistribution restrictions in the GPL and in any license that would be considered truly open source: this would an incompatible restriction.</p>

<p>For the rest, read this <a href=""https://opensource.stackexchange.com/a/2078/947"">answer</a> by @apsilers:</p>

<blockquote>
  <p>The copyright holder is never beholden to the rules of the holder's own license grant! The copyright holder's rights stem from copyright law, not from a license grant. The copyright holder can legally prepare a derivative of her own work based on her rights under copyright</p>
</blockquote>
","6152"
"In a Wikipedia article am I able to insert information licensed with CC BY even though they use a CC BY-SA license?","39","","<p><strong>Background:</strong></p>

<p>While writing an article on Wikipedia I needed to include text that is licensed under a CC-BY license. After a bit of digging I found that Wikipedia uses a CC BY-SA license.  </p>

<p><strong>Question:</strong></p>

<p>Despite Wikipedia using a CC-BY-SA license, will I run into problems if I include CC-BY licensed text?</p>
","<p>Yes, you can merge information from CC-BY sources into a CC-BY-SA work (but not the other way). That is because CC-BY-SA still includes all conditions of CC-BY.</p>

<p>Note, as suggested by Martijn in the comments: It is still important to correctly attribute the changes to their respective author (as bot CC-BY and CC-BY-SA demand). Also Wikipedia can have it's own guidelines for using tests from different sources, that extend over what the license demands.</p>
","513"
"Mixing GPL v3 and Proprietary library","39","","<p>My application has two parts GUI and a backend algorithm module. I have used a library under GPLv3 to write my GUI. In the GUI we can create a workflow of different digital signal processing units so I thought to share this GUI to the community under GPL, but I wish to keep my some algorithm modules as proprietary, what are the possible approaches?</p>

<p><a href=""https://i.stack.imgur.com/MDHzs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/MDHzs.png"" alt=""Application Interaction diag""></a></p>
","<p>That's easy. Make sure you don't compile your GUI and your algorithms together statically as a single executable. If you do that, you don't have any GPL obligation for your algorithms.</p>

<ul>
<li>Run your algorithms as a command-line tool and use inter-process communication in your GUI. This is a very common implementation in computer chess engines.</li>
<li>Run your algorithms as an internal web server and use internal web connection</li>
</ul>

<p>Example from computer chess (use process communication):</p>

<blockquote>
  <p><a href=""https://gamedev.stackexchange.com/questions/136434/how-can-i-use-gpl-software-like-stockfish-chess-engine-in-my-unity-game"">https://gamedev.stackexchange.com/questions/136434/how-can-i-use-gpl-software-like-stockfish-chess-engine-in-my-unity-game</a></p>
  
  <p>To do this validly, you must make sure that the free and non-free programs communicate at arms length, that they are not combined in a way that would make them effectively a single program.</p>
</blockquote>
","6045"
"Sanctions for not including the copyrights and licences","39","","<p>Most commercial projects use open source, they do have an obligation to distribute with copyrights and licence . Not doing so is violation.</p>

<p>What are the sanctions for violating copyright ?</p>

<ol>
<li>What if copyrights were omitted ? </li>
<li>The commercial project was
intentionally distributed without copyrights.</li>
</ol>

<p>Juridiction: The company is in EU ( France and Germany) . The open source used are spread across US California, UK, Germany, France.</p>
","<p><a href=""https://www.gnu.org/copyleft/gpl.html"" rel=""noreferrer"">GPLv3</a> says that</p>

<blockquote>
  <p>nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>
</blockquote>

<p>I know that you're asking about other (weak) copyleft licences, but the text above is so clear, and the point so general, that I thought it worth quoting.  <strong>If you are only permitted to reproduce someone else's work if certain conditions are met, and you fail to meet them, then you have no right to reproduce their work, and if you do so you're infringing their copyright.</strong> The <a href=""https://directory.fsf.org/wiki/License:Apache2.0"" rel=""noreferrer"">Apache 2.0 licence</a> includes the grant that </p>

<blockquote>
  <p>You may reproduce and distribute copies of the
        Work or Derivative Works thereof in any medium, with or without
        modifications, and in Source or Object form, provided that You
        meet the following conditions:</p>
  
  <p>[...]</p>
  
  <p>(c) You must retain, in the Source form of any Derivative Works
            that You distribute, all copyright, patent, trademark, and
            attribution notices from the Source form of the Work,
            excluding those notices that do not pertain to any part of
            the Derivative Works</p>
</blockquote>

<p>So it's pretty simple.  By removing others' copyright notices you fail to meet that condition, and by then redistributing their work (in source, object, or binary forms) you're committing copyright infringement.  Depending on the jurisdiction you're in, legal remedies for that include injunctive relief (where a court orders you to eg stop distributing your derivative work, and/or to recall and destroy any copies already distributed), compensatory damages (where a court estimates how much money the plaintiff would have made if you'd had to buy licences for the work you copied, and makes you give it to him/her), punitive damages (where a court makes a public example of you by giving a lot of your money to the plaintiff), and may include other remedies.  In some jurisdictions imprisonment is a possibility.</p>

<p>Evidence that the infringement was deliberate (your part two above) may make certain of these penalties more likely to be applied, but it will all depend on local law (and you don't tell us your jurisdiction), and in any case IANAL/IANYL.</p>

<p>It's crazy to risk that.  Free software gives you so much for little in return: just honour the licences and all will be well.</p>
","5543"
"Using OSS of different licenses in MIT-licensed software","39","","<p>If I create a new MIT-licensed OSS project and use other software with different licenses (MIT, GPLv3, no license), what is the best way to create a compliant repository?</p>

<p>We thought of adding a LICENSE.md with the MIT license and LICENSES.md with a collection of the used projects and links to their licenses or to the repo/gist if no license present.</p>

<p>Also, for the copyright, is it enough to include it in the included source files themselves?</p>

<p>This is a Ethereum project and therefore no binaries are declared as dependencies, but the source files have to be included themselves.  </p>
","<p>If a software system uses components under different licenses, then it must satisfy the requirements of <em>all</em> licenses. This can be impossible since some licenses contain contradictory terms. I recommend you read each license you use, though the GPL is admittedly rather long.</p>

<p>A few pointers:</p>

<ul>
<li><p>No explicit license means “all rights reserved”. You cannot use unlicensed software unless you're the copyright holder yourself.</p></li>
<li><p>The GPL requires that any code using the GPL'ed code can only be published if it is also licensed under the GPL. Therefore, an MIT-licensed project that depends on GPL-licensed components <em>cannot be published</em>. The reverse (a GPL licensed project depending on MIT components) would be perfectly possible.</p></li>
</ul>

<p>For your mentioned license combination (MIT depending on GPL and depending on unlicensed software) it is not possible to publish that project. To achieve compliance:</p>

<ul>
<li>You would have to obtain a suitable license for the unlicensed software.</li>
<li>If you want to use GPL components, you have to publish your code under the GPL. If that is not possible, you need to find another library for that functionality.</li>
</ul>

<p>I am not familiar with the Ethereum execution model. This may influence how you can use GPL software, which may add further complications.</p>

<p>You automatically have copyright for any creative work (incl. computer programs) that you create. You should state your your copyright at least in a LICENSE and/or README file. Many people recommend that you start each source file with a license header that includes a copyright statement, the project it belongs to, and indicates the license (in case of MIT, you can put the whole license in each file).</p>

<p>If you were to have a compliant system, a project with dependencies usually need not display the licenses of dependencies. However, most licenses require that you do display the license if you distribute the dependencies as well, e.g. when you compile your system to a binary or when you package your system as a self-contained source code bundle. Since the licenses of dependencies are part of your system's license, you could put all copyright and license information into a LICENSE file. Having both a LICENSE and LICENSES file would be confusing. If you store the licenses of dependencies separately, do note that in your LICENSE.</p>
","6225"
"What costs are involved in an open sourced project compared to a non open sourced project?","39","","<p>Often if employing a team to program a project you would need to pay: the programmers, office space, etc. </p>

<p><strong>My question:</strong></p>

<p>In open source projects is it common for the programmers to be volunteers? Are there any other costs that you don't have compared to closed-source projects and vice-versa?</p>
","<p>This really depends on the project.</p>

<p>There are pure volunteer projects with a budget of zero. I have taken part in such projects myself and surprisingly it works when the problem is interesting enough. But you can not really rely on anything getting finished on time or getting finished at all, because all contributors work in their free-time and can stop working at any time when more important priorities appear in their life, they find a more interesting hobby or they get into personal conflicts with other project members.</p>

<p>But there are also open source projects which are carried almost entirely by paid developers employed by one or more companies. Some of these projects don't accept any outside contributions at all and only release the finished product to the public. With such projects, the budget does not differ at all from a proprietary project. </p>

<p>And then there are projects anywhere in between where a certain percentage of work is done by volunteers and a certan percentage by employees. The <a href=""http://www.linuxfoundation.org/news-media/blogs/browse/2015/02/linux-kernel-report-more-contributors-ever"" rel=""nofollow"">2015 Linux Kernel report</a>, for example, reads: <em>""more developers than ever are paid for their work; a conservative calculation shows this number at 80 percent. Volunteer developers don’t stay that way for long, as companies continue to aggressively recruit the best Linux talent.""</em>. Note that in such projects, volunteer work isn't completely free, because it needs to be coordinated and reviewed by maintainers who are usually employed.</p>
","619"
"AGPLv3 for the code and project in general but CC-BY only for doc strings documentation?","38","","<p>I have an Elixir project, I want to license the software under AGPLv3. The code have module attributes that's doc strings used to generate the documentation. Then, can the documentation (and then the doc string content only) be under CC-BY 4.0 in same time?</p>

<p>To add context:</p>

<ul>
<li>Elixir is a programming language to run in Erlang virtual machine.</li>
<li>Doc string is a module value used to generate documentation, it's not a comment but it's in the code, but even the syntax is different than a comment.</li>
<li>With that module attributes other software like ExDoc can generate HTML documentation, for example.</li>
</ul>

<p>To more context see Elixir module attributes where explain about <a href=""https://elixir-lang.org/getting-started/module-attributes.html#as-annotations"" rel=""nofollow noreferrer"">doc annotation</a>.</p>
","<p>Elixir docstrings (which are similar to Python docstrings and JavaDoc comments) are part of the code. Having part of the code under a license and part of the code under another license is a rather complicated setup and this would mean further that two incompatible license co-exists in the same file which does not make sense to me.</p>

<p>You could release the whole generated documentation files under another license if you feel like it, but then anyone could regenerate that same documentation and the original code license would apply (e.g. AGPL).</p>

<p>My advice would be to keep things simple and since your documentation and code are combined, use a single license. </p>
","5907"
"Bundling JetBrains OpenJDK in closed source software","38","","<p>I am developing a software that comes bundled with JDK. I am planning to use JetBrains OpenJDK for this purpose as it comes with swing support for HighDPI monitors.</p>

<p>JetBrains OpenJDK can be found in this repository: <a href=""https://github.com/JetBrains/jdk8u"" rel=""nofollow noreferrer"">https://github.com/JetBrains/jdk8u</a>. It is covered by GPL-2.0 with Classpath Exception. I plan to use their precompiled version of JDK found on <a href=""https://bintray.com/jetbrains/intellij-jdk/"" rel=""nofollow noreferrer"">https://bintray.com/jetbrains/intellij-jdk/</a>. The extracted archive would be located in the JDK subdirectory of the installation of my software.</p>

<p>Would distribution of my software which is covered by the custom license and is closed source be legal if I distribute JetBrains JDK with it?</p>
","<p>Your software does not fall under the GPL because you benefit from the Classpath exception. But you want to distribute an unmodified OpenJDK alongside your software. What license does this bundle (your software + OpenJDK) fall under?</p>

<p>The GPL v2 states:</p>

<blockquote>
  <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. </p>
</blockquote>

<p>Therefore: if you bundle OpenJDK with your software, the GPL will not apply to the bundle as whole.</p>

<p>However, your bundling should make it clear that the GPL software is independent. This OpenJDK installation should be independently usable. If your bundle contains any EULAs or other license information, they should make it clear that these only apply to some parts of the bundle, and that the OpenJDK is free software under the GPL.</p>

<p>When you distribute a GPL software, you will have to comply with the GPL for that distribution. This is simple for verbatim copies of the source code. If you distribute binaries you'll have to conform with section 3. This requires you to give access to the source. (a) You can either include the whole OpenJDK source in your bundle, which is probably impractical. (b) You can include a written offer to send a copy of the source upon request. (c) You can pass on such a written offer that you received, but ONLY for noncommercial distribution. Since your distribution seems commercial in nature, that only leaves option (b):</p>

<blockquote>
  <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; […]</p>
</blockquote>

<p>Is it enough to point to the JetBrains Github repo? I don't think that satisfies the license because that repo is not under your control and may be deleted. Forking that repository may be sufficient, though it's still your responsibility and not Github's to keep the source available.</p>

<p>The safest way to satisfy the license is to offer the source code in the same way that you offer your bundle which includes OpenJDK. E.g. if you have a web page with a download link for your bundle, offer a download with the OpenJDK source code on the same page. This download must not be access protected. Then keep that website running while you offer that bundle <em>plus at least three years</em>.</p>

<p>The GPL says explicitly that offering a separate download for the source next to the download of the executable is OK:</p>

<blockquote>
  <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p>
</blockquote>
","6423"
"Licensing concern for an application?","38","","<p>I'm looking for advice in regards to licensing. I started coding an application in my free time for some months now. It began as coding practice, but as time progressed it got more serious and there are others developers involved now.</p>

<p>Development has moved to a private GitHub repo and I eventually want to make it open source with its first release. I want to help the project grow, but I'm concerned about which license would be the best.</p>

<p>The project is financial in nature and it offers a competitive advantage. I'm not planning on making a commercial application, I'd rather keep it as a hobby project and allow others to contribute.</p>

<p>I want the license to be permissive enough, to let it be used by other open source libraries/applications, so if someone finds the app useful, it's more beneficial to contribute to the project, than make private modifications. I also want to prevent it to be used by closed source, commercial software.</p>

<p>The best option right now looks to be GPL 3.0, I've also been looking at other licenses like AGPL, but I'm not sure at this point I need that.</p>

<p>The main concern is that there is no liability for using the app, use at own risk. The application uses other open source libraries under the MIT license.</p>
","<p>If others have started contributing code and/or documentation to the project, then the copyright of the project is shared between all contributors and if there is no explicit license, then technically you are in violation of each other's copyrights.</p>

<p>The technical copyright violation is not a problem on the short term (although it would prohibit you from making a public release), but it does indicate that now is the time to discuss with everyone what license should be used for the project.</p>

<p>When changing the license (and that includes moving away from the ""all rights reserved"" status if there is no explicit license), <strong>all</strong> copyright holders need to agree on the new license. As not everyone has the same motivations for contributing to the project, this can lead to the need for a compromise.</p>

<p>Going by your preferences</p>

<blockquote>
  <p>to let [the project] be used by other open source libraries/applications</p>
</blockquote>

<p>This can be satisfied by any open-source license, but it also depends on what license terms appeal to the developers of that other library/application. They might want a less restrictive license than what you use.</p>

<blockquote>
  <p>if someone finds the app useful, it's more beneficial to contribute to the project, than make private modifications.</p>
</blockquote>

<p>Completely private modifications, as in changes that are not distributed at all, can't be prevented by any license. There is no license in existence that forces distribution of changes.<br>
The best you can get is that modifications are shared under the same license as the original app, when they are shared. This is achieved by using a copyleft license, like LGPL, GPL or AGPL.</p>

<blockquote>
  <p>I also want to prevent it to be used by closed source, commercial software.</p>
</blockquote>

<p>There is a huge difference between closed-source software, where you don't have the right to change, build upon or even see the source code, and commercial software, where the software is used by someone to make money.<br>
All open-source licenses allow the software to be used to make money, but it may require a different business model than just simply selling copies of the same software over and over again, because the open-source license grants that same right of selling to those who buy from you.<br>
For protection against inclusion in closed-source software, you again need to turn to the copyleft GPL licenses.</p>

<ul>
<li>The LGPL can be used in projects that also used closed-source parts, as long as the recipient of the larger project is able to replace the LGPL-licensed code with a different version (potentially one that they modified themselves).</li>
<li>The GPL license requires that <em>all</em> code in the complete project is subject to the freedoms that open-source gives you. Any recipient of the project must be able to modify any part of it.</li>
<li>The AGPL license is specifically designed for SaaS situations to give users of a SaaS service the right to obtain a copy of the (source code of) application that provides the service. In all other respects, it is the same as the GPL license.</li>
</ul>
","6403"
"Mozilla Public License for core open source modules but proprietary modules?","38","","<p>I have built a framework that has the core modules: module1, module2, module3, module4.</p>

<p>But I have also build module5 that uses the core modules and also derives classes from the module1. I want module5 to make it proprietary and sell it as binaries and keep the the ownership of the code for module5.
The rest of the 4 core modules can be open source.</p>

<p>Can this be done with Mozilla Public License? Or is there a better license for what I want?</p>
","<p>This can surely be done with the MPL license. At a high level, the MPL is a weak, limited copyleft where the copyleft applies on a per-file basis. </p>

<p>The specific section that would allow your use case is ""<a href=""https://www.mozilla.org/en-US/MPL/2.0/#distribution-of-a-larger-work"" rel=""nofollow noreferrer"">3.3. Distribution of a Larger Work</a>"":</p>

<blockquote>
  <p>You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software.</p>
</blockquote>
","5253"
"Should I credit indirect depended package in my open source credit notice too?","38","","<p>My project about to launch to public. So I'm preparing open source credit notice page. Since my project is developed in JavaScript, there's lots of <code>node_modules</code> in the development directory.</p>

<p>Here's question. Could I reference the packages only if I directly deepened in my <code>package.json</code>? My project referenced only 25 packages in <code>package.json</code> but there's 300+ packages in my <code>node_modules/</code> directory.</p>

<p>Some packages like <code>gulp-*</code> is referenced as devDependencies and clearly not included in the final dist of my project. So I think I could omit credit for these packages.</p>

<p>I'm not sure about indirect referenced packages. Let say package <code>A</code> depends on package <code>B</code> and my project depends on only <code>A</code>. In this case my dist contains both <code>A</code> and <code>B</code>. Could I omit credit for package <code>B</code>?</p>
","<p>You added this important comment:</p>

<blockquote>
  <p>it's frontend project. So packages are bundled and minimized then redistributed to end user.</p>
</blockquote>

<p>So the answer to:</p>

<blockquote>
  <p>Should I credit indirect depended package in my open source credit notice too?</p>
</blockquote>

<p>... <strong>is a clear YES.</strong></p>

<p>Since you are redistributing your code with directs deps, and with deps of deps, and with deps of deps of deps and ...... you have to comply with the license requirements of all the packages <a href=""https://en.wikipedia.org/wiki/Turtles_all_the_way_down"" rel=""nofollow noreferrer"">A</a>.
I explained in this other <a href=""https://opensource.stackexchange.com/a/4315/947"">answer</a> some of the specifics of dealing with package dependencies:</p>

<blockquote>
  <p>You need to know:</p>
  
  <ul>
  <li>The whole chain of program or package dependencies</li>
  <li>The purpose and use of each program or package in that chain (test, tool, runtime)</li>
  <li>Which dependent are shipped and redistributed with your product, application or library vs. which may be installed by your user</li>
  <li>The license of each dependency in this chain</li>
  </ul>
</blockquote>

<p>Anything that would not be redistributed (e.g. devDependencies in the case of npms) does not have to be included. </p>

<p>If there is any code using some copyleft license you may have also source code redistribution requirements. And depending on the licenses and the way you integrate with these copyleft-licensed packages this requirement may extend to the tools used for minification and to possibly your own source code or other packages in the dependencies tree.</p>
","5331"
"What is the license of the documentation at ""https://git-scm.org/docs""","38","","<p>I would like to reuse some descriptions from <a href=""https://git-scm.com/docs/"" rel=""nofollow noreferrer"">https://git-scm.com/docs/</a> in my own Git instructions manual. This manual will be used commercially.</p>

<p>I have found a license for the ""Pro Git"" book <a href=""https://creativecommons.org/licenses/by-nc-sa/3.0/"" rel=""nofollow noreferrer"">CC-By-NC-SA 3.0</a> but this is different content than the Git command line reference.</p>
","<p>The man pages of Git are under the same license as Git, e.g. GPL 2.0 (and v2.0 only: this is the same as the Linux kernel license)</p>
","6109"
"Copyleft Multi-Licenced Copyright Notice","37","","<p>I want to allow any usage/modification/distribution of my work except with the restriction that my work and derivatives must stay <em>""libre""</em>.</p>

<p>Therefore I think the right way is to publish my work under any version of several <a href=""https://en.wikipedia.org/wiki/Copyleft"" rel=""nofollow noreferrer"">copyleft</a> licenses. I hope this facilitate reuse of my work without license compatibility issues.</p>

<p>Questions:</p>

<ol>
<li><strong>Is multi-licensing a good practice in order to facilitate reuse of copyleft work?</strong></li>
<li><strong>What are the conventions/requirements for the <a href=""https://en.wikipedia.org/wiki/Copyright_notice"" rel=""nofollow noreferrer"">legal notice about copyright</a> and <a href=""https://en.wikipedia.org/wiki/Multi-licensing"" rel=""nofollow noreferrer"">multi-licensing</a>?</strong></li>
</ol>

<p><sub>See also: <a href=""https://opensource.stackexchange.com/questions/2401/jpeg-comment-to-convey-copyleft-multi-licenced-copyright-notice"">JPEG comment to convey Copyleft Multi-Licenced Copyright Notice</a>.</sub></p>
","<blockquote>
  <p>Is multi-licensing a good practice in order to facilitate reuse of copyleft work?</p>
</blockquote>

<p>Multi-licensing is most often see as a business concept, and was generally seen where companies would offer code over a strong copyleft license (such as the GPL) and offer their own, proprietary license. I haven't really seen however, much of a use case of offering a work over multiple open source licenses, unless the licenses themselves are incompatible and you wish to make the work more accessible to both parties of licenses.</p>

<p>It's not that common, and you should keep the licensing part concise. Only use it if you have to. </p>

<blockquote>
  <p>What are the conventions/requirements for the legal notice about copyright and multi-licensing?</p>
</blockquote>

<p>Generally, assert your copyright, and make clear your intention to offer the work over multiple licenses. This should be fine.</p>

<blockquote>
  <p>Copyright (c) 2016 Zizouz212.</p>
  
  <p>This work is available under both the [1st license] and [2nd license]. You may choose a license in which to follow the terms and conditions at your own discretion.</p>
</blockquote>

<p>Make sure that you also include a copy of the licenses that you are offering in there as well.</p>
","2405"
"Freedom 0 licencing issue","37","","<p><a href=""https://en.wikipedia.org/wiki/The_Free_Software_Definition"" rel=""nofollow"" title=""Free Software Definition"">""Free Software Definition""</a> says that that a piece of software can be classified as free if it meets The Four Freedoms. The first of these is:</p>

<blockquote>
  <p>The freedom to run the program as you wish, for any purpose (freedom 0).</p>
</blockquote>

<p>While most of the real licences classified as free software licences contain <strong>some limitations</strong>, f.e. the <a href=""https://en.wikipedia.org/wiki/MIT_License"" rel=""nofollow"" title=""MIT Licence"">MIT licence</a> requires this:</p>

<blockquote>
  <p>...The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software....</p>
</blockquote>

<p>What if we wrote a piece of software that breaks this licence? For example, we could write a spamming app that distributes itself without including the copyright notice. This would break the licence. So the MIT Licence, and any other licence that provides some bounds and limitations can be disclassified as free software licence by breaking the freedom 0, thus not allowing the program to be run in order to break those bounds. </p>
","<p>Freedom 0 applies to <em>running</em> the software: you can run it for any purpose, in any way you want. The limitations you mention in free software licenses apply when you modify and/or redistribute the software, not when you run it.</p>

<p>The GPL makes this even more explicit; in section 9 of <a href=""https://www.gnu.org/licenses/gpl-3.0.html"" rel=""nofollow"">version 3</a>:</p>

<blockquote>
  <p>You are not required to accept this License in order to receive or run a copy of the Program.</p>
</blockquote>
","4602"
"Sections 4 and 6 of the Artistic License 2.0","37","","<p>Section 6 states:</p>

<blockquote>
  <p>(6) You may Distribute a Modified Version in Compiled form without the Source, provided that you comply with Section 4 with respect to the Source of the Modified Version.</p>
</blockquote>

<p>But if you look at Section 4:</p>

<blockquote>
  <h2>Distribution of Modified Versions of the Package as Source</h2>
  
  <p>(4) You may Distribute your Modified Version as Source (either gratis or for a Distributor Fee, and with or without a Compiled form of the Modified Version) provided that you clearly document how it differs from the Standard Version, including, but not limited to, documenting any non-standard features, executables, or modules, and provided that you do at least ONE of the following:</p>
  
  <p>(a) make the Modified Version available to the Copyright Holder of the Standard Version, under the Original License, so that the Copyright Holder may include your modifications in the Standard Version.</p>
  
  <p>(b) ensure that installation of your Modified Version does not prevent the user installing or running the Standard Version. In addition, the Modified Version must bear a name that is different from the name of the Standard Version.</p>
  
  <p>(c) allow anyone who receives a copy of the Modified Version to make the Source form of the Modified Version available to others under
  (i) the Original License or
  (ii) a license that permits the licensee to freely copy, modify and redistribute the Modified Version using the same licensing terms that apply to the copy that the licensee received, and requires that the Source form of the Modified Version, and of any works derived from it, be made freely available in that license fees are prohibited but Distributor Fees are allowed.</p>
</blockquote>

<p>The wording at the beginning is ""You <em>may</em> Distribute"" - does not distributing the source of the Modifed version also mean that you are complying with Section 4?</p>

<p>Or does the wording in Section 6 imply that you <em>must</em> distribute the source of the Modified Version, and that distribution should comply with Section 4?</p>
","<p>The Artistic License has two goals:</p>

<ol>
<li>Ensure that the original author has some control over the further development of their work.</li>
<li>Be an extremely permissive license.</li>
</ol>

<p>It is commonly used in the Perl ecosystem. It is not generally recommended outside of that context.</p>

<p>You have correctly noted that it is allowed to distribute modified versions in compiled form without distributing the source forms of the modified version. In this respect, the license is very permissive, and allows such software to be embedded into proprietary systems.</p>

<p>The license is somewhat unclear on whether (4) and especially (4.b) also applies to compiled modified versions, i.e. the requirement that installation of the modified version must not prevent use of the standard version and use a different name.</p>

<p>I interpret the license so that distributing modified versions in compiled form under (6) requires you to to also satisfy the requirements under (4). The sub-points of (4) are choices, and you only need to comply with one of these options. If you do not wish to distribute the source under (4.a) or (4.c) this only leaves (4.b) for compliance: you need not distribute the source if you're not interfering with the standard version.</p>

<p>This wording of paragraph (6) was also flagged as unclear during the OSI license review process. One of the license's authors (Allison Randal) responded:</p>

<blockquote>
  <p>It means what it says: you can distribute compiled forms as long as your distribution (or lack of distribution) of the  source code complies with Section 4.</p>
  
  <p>– Allison Randal, in an <a href=""http://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2007-March/012622.html"" rel=""noreferrer"">email to the license-discuss list</a> (<a href=""https://web.archive.org/web/20171210120425/http://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2007-March/012622.html"" rel=""noreferrer"">permalink</a>)</p>
  
  <p>Under section 6, all binary versions (compiled versions, etc) must comply with section 4. And under section 4 you must either contribute your changes (as source) back to the original project, change the name, or release your source code under the Artistic License or a copy-left license. Distribution is distribution, whether it's binary or source.</p>
  
  <p>– Allison Randal, in an <a href=""http://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2007-March/012628.html"" rel=""noreferrer"">email to the license-discuss list</a> (<a href=""https://web.archive.org/web/20171210120608/http://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2007-March/012628.html"" rel=""noreferrer"">permalink</a>)</p>
</blockquote>

<p>This fits my above interpretation.</p>

<p>Note that quite a lot of software is distributed only in source form, e.g. scripts and most Perl modules. But even running a minifier over the source would be a compiled form in the sense of the Artistic License.</p>
","6338"
"When building an open sourced hardware project what documentation do I need?","37","","<p>From previous experience I know that when making an open source piece of software you often have documentation that moves with the file. Some of these files include:</p>

<ul>
<li>Readme</li>
<li>License</li>
<li>Changes</li>
</ul>

<p>While these things are good for digital files, when building hardware you don't have a folder with files.</p>

<p><strong>My question:</strong></p>

<p>How do you keep documentation for an open sourced project, if it is a piece of hardware?</p>
","<p>Open source hardware means that the designs and specifications (shape, size, materials, contruction methods) are open source. This could be one or several of various available formats:</p>

<ul>
<li>technical drawings</li>
<li>written instructions</li>
<li><a href=""https://en.wikipedia.org/wiki/Hardware_description_language"" rel=""nofollow"">HDL source code</a></li>
<li><a href=""https://en.wikipedia.org/wiki/Circuit_diagram"" rel=""nofollow"">circuit diagrams/schematics</a></li>
<li><a href=""https://en.wikipedia.org/wiki/Integrated_circuit"" rel=""nofollow"">integrated circuit</a> layout data</li>
</ul>

<p>In the case of hardware, open source means that the instructions for making the hardware are available to everyone. Similarly to how in the case of software, open source means that the source code (instructions for making the compiled software) are available to everyone.</p>

<p>Hardware open source can include both instructions for manufacturers on how to construct fundamental parts, and instructions on how to put these parts together into composite parts or whole mechanisms.</p>
","495"
"Can I sell my primitive material which is intended to be processed in a factory software under GPL?","36","","<p>If I develop a parametric 3D mesh creation tool and license it under GPL (because it is dependent on some geometry libraries also under GPL), can I sell 3D mesh data for use with the tool and would these be subject to the GPL? Would the generated custom meshes be subject to the GPL too for the customers that bought these data and created/generated meshes from it using the tool?</p>
","<p>In most cases, data that you read and write with a software tool (including GPL-licensed software) is not impacted by the license of the tool.
For instance, if you edit your own document with LibreOffice it is not subject to the licensing of LibreOffice. So here, assuming that the mesh data you sell are yours, the custom generated meshes from that data would be subject to whatever term you please.</p>
","4933"
"if I include source code with my commercial software, how much will that hurt the height of its sales?","36","","<p>i have an unreleased product i believe to be of great commercial value due to its algorithms. in the future, i intend to do four things in this order:</p>

<ol>
<li>release the source of the software to customers without conveying any freedoms.</li>
<li>release the source of the software publicly without conveying any freedoms.</li>
<li>relicense the software so that other people's derivative works may be published without restriction.</li>
<li>relicense the software so that other people's derivative works may be sold without restriction.</li>
</ol>

<p>the software is a video game and the valuable algorithms involve original work on AI. i looked over patent and trade secret law and concluded that patenting the algorithms would only stifle quality derivative works in patent-relevant jurisdictions, while doing nothing against ripoffs like the many Minecraft competitors in existence. (however, it seems that Minecraft has not lost many sales to any game but Terraria.)</p>

<p>there are historical cases of these four liberations on this page: <a href=""https://en.wikipedia.org/wiki/List_of_commercial_video_games_with_available_source_code"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/List_of_commercial_video_games_with_available_source_code</a>. i looked through these briefly and concluded that none of these are games that were selling well at the time they were open-sourced and open-licensed, so they do not answer the question ""how much will open-sourcing hurt the height of sales for a product?"".</p>
","<p>It is impossible to answer the question of how much your sales will be impacted by making the source of your game available.</p>

<p>However, there are a number of consequences that can be linked to the steps you intend to make.</p>

<ol>
<li>Making the source code available, even without any freedoms, means that competitors can easily reconstruct your innovative algorithms and re-implement them in their own games. This reconstruction can be done without violating your copyrights, even if you don't give away any freedoms, by doing a <a href=""http://wiki.c2.com/?CleanRoomImplementation"" rel=""nofollow noreferrer"">""cleanroom implementation""</a>.</li>
<li>Many people have the mistaken idea that if they have access to the source code, that they also have the right to modify it and publish their changes. Unless you have a way to verify that the recipients of the source code understand what the can and can not do with the code, publishing source code without open-source freedoms is an economically hazardous operation, because you will be constantly fighting against illegal copies.</li>
<li>Making commercial software open-source means that you effectively can no longer make money by charging an X amount for each copy of the software, but you have to think of other ways of making money. If your game uses a central server for (part of) its operation, you could think about monthly fees.</li>
</ol>
","6453"
"Licence issues using ContentTools WYSIWYG editor","36","","<p>We have been searching for a Html editor for couple of days, we have visited some editors too, but nothing fits our requirement, and then someone suggested us to use <a href=""http://getcontenttools.com/"" rel=""nofollow noreferrer"">ContentTools WYSIWYG editor</a>, which is really an excellent editor, we are even open to use paid version, but we can't see anything to pay for it, now we just want to confirm, if we integrate this editor in our pages, do we need to take care anything related to licencing, or any other legal issue. Our portal will not distributing this product(Editor) directly , but as our core business model, we sell ads on portal and making money in that way.</p>
","<p>That software <a href=""https://github.com/GetmeUK/ContentTools/blob/master/LICENSE"" rel=""nofollow noreferrer"">uses the MIT license</a>. It is very short; here it is in its entirety:</p>

<blockquote>
  <p>Copyright (c) 2014 Getme Limited (<a href=""http://getme.co.uk"" rel=""nofollow noreferrer"">http://getme.co.uk</a>)</p>
  
  <p>Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  ""Software""), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:</p>
  
  <p>The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.</p>
  
  <p>THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
</blockquote>

<p>In short, you can do whatever you would like, as long as any copy of the software mentions that the editor is available under this license.</p>
","4898"
"License when building a package in R: adjusted function from an existing package","36","","<p>I have recently adjusted a function from an existing package in R, which is licensed under GPL (>=2). If I now put the adjusted function in a package, so that other people can use it, do I have to put GPL (>=2) in the license field? </p>

<p>I have read the document on <a href=""http://www.gnu.org/licenses/quick-guide-gplv3.html"" rel=""nofollow"">http://www.gnu.org/licenses/quick-guide-gplv3.html</a> and if I understand it correctly, you can adjust software that was licensed under GPL and the GPL license directly transfers from the original software to the software that you adjusted.</p>

<p>Is this really all I have to do? I would think that you would have to contact someone in order to get your software licensed.</p>
","<p>As <a href=""https://opensource.stackexchange.com/users/98/artofcode"">ArtOfCode</a> posted in a comment: <strong>yes, that's all you have to do</strong>.</p>

<p>You own the copyright to your contributions, and this is always automatic. You wrote it, and it's yours. You can - if the code is all yours - license it however you choose. This isn't like applying for a license from a government entity: as the code is yours, <em>you</em> are the one issuing the license to whoever comes across your code.</p>

<p>However, you <em>don't</em> own the copyright to the portion of code you used that was written by someone else. You've been given a license to do certain things with it. The GPL allows you to use the code for whatever you like, to make changes, etc. - it gives a lot of freedom. But one key restriction it does place is that you can't remove those freedoms from other downstream users.</p>

<p>Therefore, if your code is based on this existing code in any way, you have to also license it under the GPL to ensure that these freedoms remain.</p>

<p>The GNU has a page explaining <a href=""http://www.gnu.org/licenses/gpl-howto.html"" rel=""nofollow noreferrer"">how to apply the GPL licenses to your project</a>. Essentially you just need to include a copyright notice, and the license text. Don't forget to include the copyright notice of the person who wrote the code you built upon as well.</p>
","3957"
"Which existing license would fit those requrirements (or how to write our own license type)?","36","","<p>Sorry if anything I say is a bit stupid or out of context, I'm really new to Open Source licensing, so please don't be too mean ;)</p>

<p>I have wrote a software framework which I want to distribute as open source but restricting it's commercial use a bit.</p>

<p>First restriction is, if you're an individual developer or the usage is for an open source project use is completely free, but if usage is by a company with more than one programer then it must be licensed.</p>

<p>Second, anyone can modify the source code, but the modified code cannot be redistributed unless it will be upstreamed to the main project or used in an open source project.</p>

<p>Third, derived software cannot be another framework for the same usage (basically, you can't create a framework for the same usage, not sure if this really makes any sense, what I don't want is someone to grab our code, modify it and then redistribute it as another product).</p>

<p>And now, the real question, is there any license which will fit these restrictions?</p>

<p>I have read some licenses (MIT, Apache, GLP, LGPL and so on), but on some parts I just got lost so I'm not really sure if there's any existing license which matches these requirements.</p>

<p>If there is no license which matches these requirements, how should I write a license like this? or is there any place which helps to create a custom license?</p>
","<p>Your restrictions are incompatible with open source licenses according to the <a href=""https://opensource.org/definition"">open source definition</a>, so you won't find an OSI-approved license which meets your requirements.</p>

<p>Specifically:</p>

<ul>
<li><p>your first restriction discriminates users and/or usages, which goes against terms 5 and 6 of the definition:</p>

<blockquote>
  <p><strong>5. No Discrimination Against Persons or Groups</strong></p>
  
  <p>The license must not discriminate against any person or group of persons.</p>
  
  <p><strong>6. No Discrimination Against Fields of Endeavor</strong></p>
  
  <p>The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.</p>
</blockquote></li>
<li><p>your third restriction discriminates usages, which goes against term 6 above.</p></li>
</ul>

<p>The second part of your second restriction matches strong copyleft requirements, so if we ignore the first part you're OK.</p>

<p>You might find it useful to look at the way <a href=""http://itextpdf.com/"">iText</a> is licensed; it has a dual license, either AGPL or commercial, so end-users can use it for free as long as they satisfy the AGPL's requirements (which are quite demanding), or purchase a license.</p>

<p>Whatever you do, <a href=""https://opensource.org/proliferation"">please don't write a new license</a>...</p>
","2803"
"Which license can be used when I want to protect contributions to my program?","36","","<p>So, we are trying to write library in java which will make it easier to work with images, etc. 
It's something like university project, so we have 15 people in our team. </p>

<p>We don't want anyone to have power to remove his code from our library after we end our project. 
Let's say Peter wrote 7 classes, but something happens and he wants to remove his contributions from our library and because it's his 7 classes we have to do it. </p>

<p>Which license would prevent such things? Maybe it's Apache License 2.0 or GPL?
Sorry for bad english.</p>
","<p>You need an irrevocable license, such as <a href=""https://www.gnu.org/licenses/gpl.html"" rel=""nofollow"">version 3 of the GPL</a>. With such a license, barring other termination clauses, the author can't retroactively revoke your rights to use the code.</p>

<p>In some legislations, moral rights might apply too; these could give the author a say in what can be done with his/her code. It would be up to courts to decide though, and the fact that the code was licensed in a certain way would presumably come into consideration regardless of the author's subsequent change of mind (but I am not a lawyer). A copyright assignment might help reduce uncertainty, although legislations with moral rights generally don't allow them to be assigned away.</p>
","2777"
"Practical implications of using bsd licensed code","35","","<p>Up to now, I've mainly been programming for fun projects on a small scale. Now I am planning the release of a larger iOS application in which I use BSD licensed code. I've know this is one of the simplest licenses and should be easy to implement, but the restrictions still leave me puzzled on how I should implement them.</p>

<p>As far as I understand, I need to include a copyright message and the restrictions in the application. How do I do this practically?</p>

<p>Is it sufficient to add a comment in one of the information menus saying ""copyright author XXX"" and repeat the restrictions, or should I implement this differently?</p>

<p>I know this probably is a stupid question, but licensing is new to me and I have trouble finding references on how I can implement it (or examples). I hope someone is able to help me! </p>
","<p>You typically add credits in the ""About"" section in the menu.</p>

<p>Here is how Spotify do it:</p>

<p><a href=""https://i.stack.imgur.com/ySreM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ySreM.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/H056u.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/H056u.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/AmZ5e.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AmZ5e.png"" alt=""enter image description here""></a></p>
","4196"
"Can I customize a CC BY-ND 4.0 theme and use it for a commercial website?","34","","<p>I would like to use a UI theme that is licensed as <strong>Creative Commons Attribution-NoDerivatives 4.0 International</strong> for a commercial website after I edit and customize it. </p>

<p>Is there any copyright issue to be worried about?</p>
","<p>Yes there is. The copyright license does not allow you to make any changes. </p>
","5854"
"Can I give someone specific permission?","34","","<p>Suppose I have a product released under some CC license. Someone comes to me and says ""can I please build off of your software without giving credit?"". To this I say sure! </p>

<p>Do I need to write them a piece of paper with proof (ie: ""I hereby give permission to allow ________ to use my software without credit"")?</p>
","<p>Yes you can and no you don't have to.</p>

<ol>
<li><p>You're the owner. Since you own all the rights, you can of course allow them to use without attribution.</p></li>
<li><p>You shouldn't have to write anything. If someone complains to this other dev that they're not attributing, the other dev can just say they've got permission, and point the complainant back to you. You can just confirm that. Of course, it may be wise to have some publically visible record of this, so you don't have to constantly confirm it.</p></li>
</ol>
","637"
"choose between open-source or close source","34","","<p>if hypothetically I have developed special software, and I only want author recognition for it (leaving money aside) can i choose to distribute my creation as open source without other people usurping my work saying that they were its creators? I only want recognition as an author and be able to share it.</p>

<p>example: c++ was designed by Bjarne Stroustrup, but some guy wants to say that he designed c++, not Bjarne Strostrup.</p>
","<p>All open source licenses allow the author to maintain copyright ownership and require other users and contributors to honour and attribute that ownership.</p>

<p>While you can't stop anyone from copying it and saying it is theirs, by releasing your work with any open source license you get a legal standing against anyone who doesn't honour the licensing terms you use.</p>
","6411"
"Creating Public Domain CC0 project that uses plugins/libraries with different licenses","34","","<p>I work for a city and want to start releasing our projects with CC0 Public Domain license.</p>

<p>However, if we use other bits of code (dc.js, jquery, plugins for leaflet.js, etc) that are not CC0, is that allowed?</p>

<p>Or is there some other sort of wording that says CC0, except for bits that have a more restrictive license?</p>

<p>Or is it ok to use CC0, since the compilation of code we are using is CC0, we are not copyrighting the building blocks of code (libraries) used to make our site.</p>
","<p>By choosing a license for your project (here a public domain dedication), you effectively make a promise to your users about not only your own code but also <a href=""https://opensource.stackexchange.com/a/4315/947"">all the dependencies</a> for your code and the licenses of these dependencies.</p>

<p>In making a promise, you should be clear about your policy for these dependencies: are they all under the same terms (e.g. CC0) or do they use other licenses? If they do, they you should disclose this upfront as the combination of these deps may impose additional requirements on your re-users.</p>

<p>For instance if you depend on leaflet, its main license is a BSD, but it has plugins that you may use that themselves under other licenses and so on (here at least some MIT and Apache license at the first level of deps). And this all the way for the full dependency tree.</p>

<p>With the mere inclusion of a CDN URL you are also <strong>redistributing</strong> IMHO (the fact this is transferred from a CDN is irrelevant IMHO there, as you are the one triggering the effective reuse) and with redistribution you have obligations (in this case and per the license terms you would need to include somewhere at least the text of the leaftlet license and this text is inconveniently not included in the CDN itself).</p>

<p>So I would be clear in my README that there are other licensed components that are deps and what are the licenses. And I would include in my app proper some about page that lists all these and includes the corresponding license texts (and comply with anything else in terms of <a href=""https://opensource.stackexchange.com/questions/3994/why-do-almost-all-open-source-licenses-require-attribution"">attribution</a> and/or redistribution)</p>

<p>(side note: to help find out which licenses are used and what is the tree of deps you could check out my <a href=""https://github.com/nexB/scancode-toolkit"" rel=""nofollow noreferrer"">scancode</a>)</p>
","4911"
"License for Sketch template with branding","34","","<p>I want to publish a very meticulously designed <a href=""https://www.sketchapp.com/"" rel=""nofollow noreferrer"">Sketch</a> kit on GitHub. Though, I wish anyone who would use it in their open/closed source projects to be obligated to have my company's title mentioned somewhere in the designs.</p>

<p>Which license would fit?</p>
","<p>Your wish is problematic in several ways.</p>

<ol>
<li><p>There are licenses with a similar requirement (such as the <a href=""https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29"" rel=""nofollow noreferrer"">4-clause BSD license</a>, which requires that you mention the licensed product/library in all advertising material), but these licenses are considered <a href=""https://www.gnu.org/licenses/bsd.html"" rel=""nofollow noreferrer"">problematic by the open-source community</a>:</p>

<blockquote>
  <p>This clause was objected to on the grounds that as people changed the license to reflect their name or organization it led to escalating advertising requirements when programs were combined together in a software distribution: every occurrence of the license with a different name required a separate acknowledgment. In arguing against it, Richard Stallman has stated that he counted 75 such acknowledgments in a 1997 version of NetBSD.[5] In addition, the clause presented a legal problem for those wishing to publish BSD-licensed software which relies upon separate programs using the GNU GPL: the advertising clause is incompatible with the GPL, which does not allow the addition of restrictions beyond those it already imposes -- <a href=""https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29"" rel=""nofollow noreferrer"">Wikipedia</a></p>
</blockquote></li>
<li><p>I would expect that the artists using your Sketch pad would object violently to such a requirement, as it would probably be considered a defacement of their artwork.</p></li>
<li><p>The content you create using a program is not constrained by the copyright license of that program, unless the output actually contains portions of the program that are eligible for copyright protection. In the large majority of programs, that is not the case.</p>

<p>This means that whatever you state in the copyright license of the Sketch pad, this has no effect on the license of the artwork created using the Sketch pad. As a consequence, if someone did follow your wish, you can't require that the attribution stays in the artwork.</p></li>
</ol>
","6138"
"Understanding a Perl module license","34","","<p>Can someone clarify these claims:</p>

<blockquote>
  <p>This module is free software you can redistribute it and/or modify it under the same terms as Perl itself. Copyright (C) year Some Author. All Rights Reserved</p>
</blockquote>

<p>It looks like terms are the opposite.</p>

<ul>
<li><em>free you can...</em> - mean - I can do what I want,</li>
<li><em>All Rights Reserved</em> - means - only he can do what he wants</li>
</ul>
","<p>This is the customary license for Perl modules.</p>

<ul>
<li><p>“All rights reserved” is just a reminder that someone holds the copyright for this code. By default, only the copyright holder may distribute copies of the program, or publish modified versions of the code. This is the “default license” for any code you see on the internet. You can't really do anything with it unless you get explicit permission.</p></li>
<li><p>However, the copyright holder has given you a license: “you can redistribute and/or modify it under the same terms as Perl itself”. This is a rather vague statement, but currently the Perl license is:</p>

<blockquote>
  <p>Perl is free software; you can redistribute it and/or modify it under the terms of either:</p>
  
  <p>a) the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version, or</p>
  
  <p>b) the ""Artistic License"" which comes with this Kit.</p>
</blockquote>

<p>The Perl documentation contains a copy of the <a href=""http://perldoc.perl.org/perlgpl.html"" rel=""nofollow noreferrer"">GPLv1</a> and <a href=""http://perldoc.perl.org/perlartistic.html"" rel=""nofollow noreferrer"">Artistic License</a>. Larry Wall, the original author of Perl, has given a <a href=""http://dev.perl.org/licenses/"" rel=""nofollow noreferrer"">non-standard interpretation of the GPL</a> which makes Perl's usage of the GPL effectively very similar to the LGPL license.</p>

<p>You are free to use the module under the license terms of either the GPLv1 (or later) or the Artistic License. The Artistic license gives you substantial flexibility to use the module even for commercial purposes, but has a number of unusual restrictions that apply when you modify the module.</p></li>
<li><p>“Free software” doesn't mean you are free to do anything you want. However, free software culture tries to ensure as much freedom as possible for users, in contrast to proprietary software where EULAs try to give you as few freedoms as possible. The Free Software Foundation has published a <a href=""https://www.gnu.org/philosophy/free-sw.en.html"" rel=""nofollow noreferrer"">Free Software Definition</a>:</p>

<blockquote>
  <p>“Free software” means software that respects users' freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, “free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech,” not as in “free beer”. […]</p>
  
  <p>A program is free software if the program's users have the four essential freedoms:</p>
  
  <ul>
  <li><p>The freedom to run the program as you wish, for any purpose (freedom 0).</p></li>
  <li><p>The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.</p></li>
  <li><p>The freedom to redistribute copies so you can help your neighbor (freedom 2).</p></li>
  <li><p>The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.</p></li>
  </ul>
</blockquote>

<p>By calling the module “free software”, the module author signals their intention to respect these freedoms. However, the term has no legal significance. The legally relevant part is the content of the license text, as discussed above.</p></li>
</ul>
","5547"
"Using partially open source program/s and non open source programs, together in a project to be commercial?","34","","<p>In my case I'd like to use an open-source music program to make some music for an android app. When I later want to publish this app on the app store, this does mean I cannot use a normal copyright license right?</p>

<p>I've understood that I cannot distribute any open-source software with another license than what the open-source program is licensed to.
Is it all about the program itself or does this include the content created with the program?</p>

<p>Say the mp3 file made with the opensource program, do I own that? I'm using samples coming with the program.</p>

<p>What this comes down to is, will my whole app lay under a license so everyone can copy my material? Even though I have other content created with normal licensed programs?</p>
","<p>For copyright, a program and the output from a program are completely independent works. The copyright license under which you receive a program has no bearing at all on the licenses you can use for the work that you create by using the program.</p>

<p>For example, the GCC compiler is licensed under the GPL license, but there is no problem in using it to create closed-source commercial applications. Also, MS Word is licensed under a closed-source license, but there is nothing stopping you to write an open-source novel with it.</p>

<p>The only exception here is if the output of the program contains not just (a mechanical transformation of) your input but also copies of parts of the program itself. The most well known examples of such programs are parser generators like Bison.</p>

<p>When you create an MP3 file, the ownership and copyright status depends on how you created the file.  </p>

<ul>
<li>If you start out with one (or more) samples from someone else, which you then modify to create your MP3 file, then your file is a derived work of the source samples. In this case, the copyright of the final MP3 lies with both you and the creators of the original samples and the license that you can use to distribute your MP3 under depends on the license under which you received the original samples.  </li>
<li>If you create the MP3 file from scratch, by recording your music or creating it yourself, then the copyright is entirely yours and you are completely free in your choice of licenses.</li>
</ul>

<hr>

<p>When publishing an app that also includes music/artwork and either of them falls under an open-source license, then it is recommended that you use separate licenses for the app itself and the artwork and/or music. The reason for this is that all open source licenses are either written for use with software (and they generally use terms that don't have a well-defined meaning outside the context of software), or they are written for use with artistic works. By using separate licenses, you don't get into the situation that the license contains terms that are not really suitable for half the project.</p>
","6309"
"What license to use while using GPL/LGPL source code?","34","","<p>There is an application A. It uses the GPL license.<br>
There is another application B that takes all of A's code and improvises it. In its repo, both GPL and LGPL license can be found.<br>
We are building an application C, which is open source and uses all of application A's code, much like B did. However, we take the enhancements from B and credit it duly. What license should be given to C?</p>
","<p>The license which applies to the combination of A and B depends on <a href=""https://www.gnu.org/licenses/gpl-faq.html#AllCompatibility"" rel=""nofollow"">the precise versions of the GPL and LGPL involved</a>. The enhancements present in C, when they take the form of new source files, can in theory be placed (by the copyright holders) under any <a href=""https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses"" rel=""nofollow"">GPL-compatible license</a>. The license applicable to the whole of C will be whichever version of the GPL applies to the combination (with potentially the option to pick a later one).</p>
","2807"
"Porting Java class libraries","33","","<p>The license for the OpenJDK class libraries is <em>GPL-2.0 with Classpath exception</em>. </p>

<p>1) Is there any issue with regard to Oracle Corporation and copyright if the class libraries were ported to another language?</p>

<p>2) If an equivalent library is made with the same class names and methods - same API - but without looking at the OpenJDK source code, is that considered a port and must be under the same GPL license as OpenJDK?</p>
","<blockquote>
  <p>1) Is there any issue with regard to Oracle Corporation and copyright if the class libraries were ported to another language?</p>
</blockquote>

<p>No issue to me: a port would be considered a derivative work of sorts almost universally and the original ""GPL-2.0 with Classpath exception"" license would apply to the port in the other language.</p>

<blockquote>
  <p>2) If an equivalent library is made with the same class names and methods - same API - but without looking at the OpenJDK source code, is that considered a port and must be under the same GPL license as OpenJDK?</p>
</blockquote>

<p>If you use the same API, either you have looked at the OpenJDK (may be only the docs and not the sources) or you have super divination powers. This would be considered a port in most cases.</p>

<p>On APIs in general and the Java APIs in particular, the Oracle vs. Google case has been discussed at great length with <a href=""https://opensource.stackexchange.com/questions/1421/how-is-oracle-suing-google-for-copyright-infringement-when-java-is-open-source"">How is Oracle suing Google for copyright infringement when Java is Open Source?</a> and <a href=""https://opensource.stackexchange.com/questions/762/what-are-the-implications-of-the-google-vs-oracle-case-on-the-state-of-public-a"">What are the implications of the Google vs. Oracle case on the state of public APIs?</a> in this forum: Software APIs are copyrightable the US for sure. Building a re-implementation of an API is likely subject to copyright and therefore in the code of the OpenJDK class library, the re-implementation would be subject to the OpenJDK licensing.</p>

<p>Anything except a <a href=""https://en.wikipedia.org/wiki/Clean_room_design"" rel=""nofollow noreferrer"">cleanroom re-implementation</a> is likely to be considered a port/derived/derivative work and subject to the original license and one could argue that anyone having used Java once has knowledge of the API and should therefore barred from involvement in such cleanroom development. This is a complicated process with a high level of ceremony which is unlikely something you want to pursue in most cases. <a href=""https://en.wikipedia.org/wiki/Clean_room_design"" rel=""nofollow noreferrer"">Cleanroom design</a> Wikipedia definition is:</p>

<blockquote>
  <p>Clean-room design (also known as the Chinese wall technique) is the method of copying a design by reverse engineering and then recreating it without infringing any of the copyrights associated with the original design. Clean-room design is useful as a defense against copyright infringement because it relies on independent invention.</p>
</blockquote>
","6108"
"Raspbian as OS of a controller module of a machine","33","","<p>I'd like to use a Raspberry Pi as a controller of a rather complex medical machine. For several reasons, most prominently safety reasons, it is out of the question, that we could give the source code to anyone (the machine can kill patients). </p>

<p>Could we still install <a href=""https://en.wikipedia.org/wiki/Raspbian"" rel=""nofollow noreferrer"">Raspbian</a> together with our software and then sell the machine like that? </p>

<p>I thought it must be possible, but I can't find any definitive answer.</p>
","<p>The GPL is claimed usually on a per file basis as it relates to a program. This license disclaimer usually looks something like:</p>

<p>""The following program is under the GPL"" or ""This file is licensed under the GPL"" or ""The code in the directory myprogram is licenced under the GPL except for icon.png which is license on CC-BY-SA. You can find these licenses in the file COPYING""</p>

<p>Further GPLs copyleft nature applies to derivative works of what was claimed in the disclaimer which at least so far in the copyright world hasn't meant things that run or use the program. The GPL does claim that linking a program creates a derivative work that includes both the program the linked libraries.</p>

<p>Further source code and compiled programs in itself doesn't constitute a derivative work just because its sitting on a file system with other works no more than putting a painting on your wall makes a derivative work if its placed next to another painting.</p>

<p>So while the software is GPLed USING the software as part of a system doesn't invoke copyleft. Only the act of combining code together to make a greater program does (add source code to the file or link code together when compiling to make a single program etc.)</p>

<p>I would assume open source helps you make sure your system is secure and free of most bugs. You can use GPL internal to an organization but if you're selling you have to provide the source code publicly.</p>

<p>The concept where you agree to a contract or license as part of your USE of a program is called an End User License Agreement (EULA). Free software is the diametric opposite of this as it grants users of that software the rights to use for any purpose. Further EULAs aren't necessarily invoked by copyright and are usually instead enforced by ""click-wrap.""</p>

<p>When you distribute GPLed software however you have obligations to provide the sourcecode of THAT software. That wasn't asked in your question but it dawns on me you might miss that. </p>
","6267"
"Using advertisements on my wiki licensed under CC BY-NC-SA","32","","<p>I am working on creating an online localized wiki about Linux programs. I am hosting the documents files on GitHub and I would like to choose an open source license for it. The problem is that I don't understand the nature of users' contributions to the repository and whether it's considered like software or not.</p>

<p>For example, when a user sends me a pull request on GitHub and if the license of my documents was CC BY-NC-SA 4.0. Does that mean that everybody won't be able to use the documents for commercial purposes including me? Or I would be the only one allowed to use it however I like even after someone sends me a pull request and I accept it?</p>

<p>Another question is whether taking those documents and putting them in a nice way on a website with installing Google AdSense script is considered to be a commercial use of those docs?</p>
","<p>(Note that CC BY-NC-SA 4.0 is <strong>not</strong> an open source license.)</p>

<p>If users contribute (pull requests) to a work (your wiki) licensed under CC BY-NC-SA 4.0, they convey: </p>

<p><em>You can use this contribution under the terms of the license CC BY-NC-SA 4.0.</em></p>

<p>So yes, if you share their contributions, you may not do this in a commercial way. You can only ignore the license if you are the sole author.</p>

<p>Assuming that the advertisements result in a commercial context (see below), you have three options:</p>

<ul>
<li>Only show advertisements on pages that don’t include any contributions.</li>
<li>Get the permission from your contributors.</li>
<li>Change the license to one that allows commercial use, e.g., CC BY-SA 4.0.</li>
</ul>

<h3>Is it a NonCommercial purpose?</h3>

<p>But do advertisements result in a commercial context? Unfortunately, the license doesn’t define this explicitly. Some argue that it’s only commercial if you gain a profit, some argue that any kind of advertisement makes it commercial. </p>

<p>Relevant: </p>

<ul>
<li>Creative Common’s FAQ <a href=""https://creativecommons.org/faq/#does-my-use-violate-the-noncommercial-clause-of-the-licenses"" rel=""nofollow noreferrer"">Does my use violate the NonCommercial clause of the licenses?</a> </li>
<li>Creative Common’s wiki page <a href=""https://wiki.creativecommons.org/wiki/NonCommercial_interpretation"" rel=""nofollow noreferrer"">NonCommercial interpretation</a></li>
</ul>

<p>If you want to be on the safe side, don’t show advertisements for content that contains contributions.</p>
","5761"
"AGPL and sandboxed user code","31","","<p>I'm developing a web application that allows users to program single-file scripts. These scripts are sandboxed and executed in the same application.</p>

<p>I'd like to release the source of my application under the AGPL. Would my users need to release their code under the AGPL as well? If so, how do I enforce this? Is a checkbox labeled ""I hereby release this code under the AGPL"" on the code submission page sufficient?</p>
","<p>I think you may need to treat these user-supplied contributions more or less as if you were hosting your code on a public repository and these users were contributors. However, this is not to say that these contributions <em>must</em> be part of the AGPL work, however.</p>

<p>It seems like these user contributions are basically plugins to your application. The <a href=""https://www.gnu.org/licenses/gpl-faq.en.html#GPLPlugins"" rel=""nofollow noreferrer"">FSF offers some guidance</a> about how to decide when a plugin is or is not part of its parent program:</p>

<blockquote>
  <p><strong>When are a program and its plug-ins considered a single combined program?</strong></p>
  
  <p>It depends on how the main program invokes its plug-ins. If the main program uses fork and exec to invoke plug-ins, and they establish intimate communication by sharing complex data structures, or shipping complex data structures back and forth, that can make them one single combined program. A main program that uses simple fork and exec to invoke plug-ins and does not establish intimate communication between them results in the plug-ins being a separate program.</p>
  
  <p>If the main program dynamically links plug-ins, and they make function calls to each other and share data structures, we believe they form a single combined program, which must be treated as an extension of both the main program and the plug-ins. If the main program dynamically links plug-ins, but the communication between them is limited to invoking the ‘main’ function of the plug-in with some options and waiting for it to return, that is a borderline case.</p>
  
  <p>Using shared memory to communicate with complex data structures is pretty much equivalent to dynamic linking.</p>
</blockquote>

<p>From here, there are two possibilities:</p>

<ul>
<li><p>If the relationship between your program and user-supplied plugins falls into one of the ""separate programs"" cases, the licensing of user submissions is unrelated to the licensing of your main program. You should make your users understand and agree to how their submissions will be used and made available to other users (just as you might in the terms of service of any web service), but compatibility with the AGPL is not a concern. The plugins are not part of the AGPL work.</p></li>
<li><p>If the relationship between your main program and user-supplied plugins falls into a ""combined"" case, then you are effectively allowing users to modify the code of your web service. The AGPL requires that you supply all users with the current source code of your service, including the modifications and additions that you allow users to make via their submissions.</p>

<p>Users must license their submissions to you under an AGPL-compatible license (AGPL, or a permissive license like MIT, or, in this case, optionally the GPL). You really just need to notify users that their submission will be licensed to you in a particular way. As a case study in this practice, scroll to the bottom of this web page and see that the text of your question on this web site has been licensed under CC BY-SA 3.0. You should mention it in your terms of service at minimum, and have users agree to it when they sign up or when they make a submission.</p></li>
</ul>
","5440"
"Having a copyright protected image on AGPL website","30","","<p>I'm developing a piece of software that will be available under AGPL license. It is a webpage intended to be used by different fandoms to track interviews with their favorite author/creator.</p>

<p>I'm quite certain that the content handled by the software (pictures from meetings, recorded interviews etc.) is not ""infected"" by the websites AGPL license and different copyrights apply to them.</p>

<p>However, I'd like to know, if someone wants to use a background image on this webpage, let's say a painting he or she made, would this image become AGPL licensed too? If so, is there a way to prevent it?</p>

<p>Would giving the webpage administrator a way to upload images to be used as backgrounds create enough separation from the software, that the license wouldn't cover those backgrounds?</p>

<p>I guess what I want to ask, is how to define a safe border to stop AGPL propagation over pieces of a website?</p>
","<p>If someone changed the background image on the webpage, it would be pretty likely that a court would consider this to be separate enough from the AGPL software so that the background image is not concerned by the license. But where is the frontier then? What if I start tweaking other bits of CSS? In the end, this shows that this is a blurry issue (where does ""making a derivative work"" start?).</p>

<p>The solution that you are proposing is indeed the best one. As soon as you can make it clear that the background image is to be considered as data, it won't (for sure) be affected by the license of the software.</p>
","5393"